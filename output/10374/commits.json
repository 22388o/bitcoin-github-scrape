[
  {
    "sha": "fac79e4d18327f30e3fae26f194ae4bbd6077d6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWM3OWU0ZDE4MzI3ZjMwZTNmYWUyNmYxOTRhZTRiYmQ2MDc3ZDZm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-05-09T14:39:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-05-14T10:39:02Z"
      },
      "message": "qa: Warn when specified test is not found",
      "tree": {
        "sha": "3b7ea6c72aaf547c982fc0a19633b28c644551e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b7ea6c72aaf547c982fc0a19633b28c644551e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac79e4d18327f30e3fae26f194ae4bbd6077d6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac79e4d18327f30e3fae26f194ae4bbd6077d6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac79e4d18327f30e3fae26f194ae4bbd6077d6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac79e4d18327f30e3fae26f194ae4bbd6077d6f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56befa03ac559ddab95eac4c2167b586dc0d01b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56befa03ac559ddab95eac4c2167b586dc0d01b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56befa03ac559ddab95eac4c2167b586dc0d01b9"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 17,
      "deletions": 9
    },
    "files": [
      {
        "sha": "4dd512638d973393292e2448cbe097e9dfb875b4",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac79e4d18327f30e3fae26f194ae4bbd6077d6f/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac79e4d18327f30e3fae26f194ae4bbd6077d6f/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=fac79e4d18327f30e3fae26f194ae4bbd6077d6f",
        "patch": "@@ -34,7 +34,7 @@ You can run any single test by calling\n \n     test/functional/test_runner.py <testname>\n \n-Or you can run any combination of tests by calling\n+Or you can run any combination (incl. duplicates) of tests by calling\n \n     test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n "
      },
      {
        "sha": "6174ca1d88b20a0481031300af3615a51e33d1f5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac79e4d18327f30e3fae26f194ae4bbd6077d6f/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac79e4d18327f30e3fae26f194ae4bbd6077d6f/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fac79e4d18327f30e3fae26f194ae4bbd6077d6f",
        "patch": "@@ -163,7 +163,7 @@ def main():\n     Help text and arguments for individual test script:''',\n                                      formatter_class=argparse.RawTextHelpFormatter)\n     parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n-    parser.add_argument('--exclude', '-x', help='specify a comma-seperated-list of scripts to exclude. Do not include the .py extension in the name.')\n+    parser.add_argument('--exclude', '-x', help='specify a comma-seperated-list of scripts to exclude.')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n     parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n     parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n@@ -172,8 +172,8 @@ def main():\n     parser.add_argument('--quiet', '-q', action='store_true', help='only print results summary and failure logs')\n     args, unknown_args = parser.parse_known_args()\n \n-    # Create a set to store arguments and create the passon string\n-    tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n+    # args to be passed on always start with two dashes; tests are the remaining unknown args\n+    tests = [arg for arg in unknown_args if arg[:2] != \"--\"]\n     passon_args = [arg for arg in unknown_args if arg[:2] == \"--\"]\n \n     # Read config generated by configure.\n@@ -206,8 +206,13 @@ def main():\n     if tests:\n         # Individual tests have been specified. Run specified tests that exist\n         # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n-        test_list = [t for t in ALL_SCRIPTS if\n-                (t in tests or re.sub(\".py$\", \"\", t) in tests)]\n+        tests = [re.sub(\"\\.py$\", \"\", t) + \".py\" for t in tests]\n+        test_list = []\n+        for t in tests:\n+            if t in ALL_SCRIPTS:\n+                test_list.append(t)\n+            else:\n+                print(\"{}WARNING!{} Test '{}' not found in full test list.\".format(BOLD[1], BOLD[0], t))\n     else:\n         # No individual tests have been specified.\n         # Run all base tests, and optionally run extended tests.\n@@ -219,9 +224,12 @@ def main():\n \n     # Remove the test cases that the user has explicitly asked to exclude.\n     if args.exclude:\n-        for exclude_test in args.exclude.split(','):\n-            if exclude_test + \".py\" in test_list:\n-                test_list.remove(exclude_test + \".py\")\n+        tests_excl = [re.sub(\"\\.py$\", \"\", t) + \".py\" for t in args.exclude.split(',')]\n+        for exclude_test in tests_excl:\n+            if exclude_test in test_list:\n+                test_list.remove(exclude_test)\n+            else:\n+                print(\"{}WARNING!{} Test '{}' not found in current test list.\".format(BOLD[1], BOLD[0], exclude_test))\n \n     if not test_list:\n         print(\"No valid test scripts specified. Check that your test is in one \""
      }
    ]
  }
]