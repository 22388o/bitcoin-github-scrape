[
  {
    "sha": "e666efcdba527a58175f9de3357dd19bb5880178",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjY2ZWZjZGJhNTI3YTU4MTc1ZjlkZTMzNTdkZDE5YmI1ODgwMTc4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-14T23:38:18Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-14T23:38:18Z"
      },
      "message": "Get rid of redundant RPC params.size() checks\n\nNo change in behavior.",
      "tree": {
        "sha": "560a1791dfa656ca7ff73af35b039e5dd9fc50db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/560a1791dfa656ca7ff73af35b039e5dd9fc50db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e666efcdba527a58175f9de3357dd19bb5880178",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e666efcdba527a58175f9de3357dd19bb5880178",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e666efcdba527a58175f9de3357dd19bb5880178",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e666efcdba527a58175f9de3357dd19bb5880178/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 33,
      "deletions": 33
    },
    "files": [
      {
        "sha": "cc06cee6fed9f1997d41effeecea6f2b25d98a14",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e666efcdba527a58175f9de3357dd19bb5880178/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e666efcdba527a58175f9de3357dd19bb5880178/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=e666efcdba527a58175f9de3357dd19bb5880178",
        "patch": "@@ -1489,11 +1489,11 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n \n-    if (request.params.size() > 0 && !request.params[0].isNull()) {\n+    if (!request.params[0].isNull()) {\n         blockcount = request.params[0].get_int();\n     }\n \n-    bool havehash = request.params.size() > 1 && !request.params[1].isNull();\n+    bool havehash = !request.params[1].isNull();\n     uint256 hash;\n     if (havehash) {\n         hash = uint256S(request.params[1].get_str());"
      },
      {
        "sha": "a6950899f22687b38546bb29e9b30570aaf4b8a2",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e666efcdba527a58175f9de3357dd19bb5880178/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e666efcdba527a58175f9de3357dd19bb5880178/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=e666efcdba527a58175f9de3357dd19bb5880178",
        "patch": "@@ -842,7 +842,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n     bool conservative = true;\n-    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+    if (!request.params[1].isNull()) {\n         FeeEstimateMode fee_mode;\n         if (!FeeModeFromString(request.params[1].get_str(), fee_mode)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");"
      },
      {
        "sha": "6917f4b3422efa10b999d8eee64d990160e23216",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e666efcdba527a58175f9de3357dd19bb5880178/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e666efcdba527a58175f9de3357dd19bb5880178/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=e666efcdba527a58175f9de3357dd19bb5880178",
        "patch": "@@ -552,7 +552,7 @@ UniValue getmemoryinfo(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getmemoryinfo\", \"\")\n         );\n \n-    std::string mode = (request.params.size() < 1 || request.params[0].isNull()) ? \"stats\" : request.params[0].get_str();\n+    std::string mode = request.params[0].isNull() ? \"stats\" : request.params[0].get_str();\n     if (mode == \"stats\") {\n         UniValue obj(UniValue::VOBJ);\n         obj.push_back(Pair(\"locked\", RPCLockedMemoryInfo()));\n@@ -603,11 +603,11 @@ UniValue logging(const JSONRPCRequest& request)\n     }\n \n     uint32_t originalLogCategories = logCategories;\n-    if (request.params.size() > 0 && request.params[0].isArray()) {\n+    if (request.params[0].isArray()) {\n         logCategories |= getCategoryMask(request.params[0]);\n     }\n \n-    if (request.params.size() > 1 && request.params[1].isArray()) {\n+    if (request.params[1].isArray()) {\n         logCategories &= ~getCategoryMask(request.params[1]);\n     }\n "
      },
      {
        "sha": "e6b210a19932459ff991e4b70d4197172541281e",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e666efcdba527a58175f9de3357dd19bb5880178/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e666efcdba527a58175f9de3357dd19bb5880178/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=e666efcdba527a58175f9de3357dd19bb5880178",
        "patch": "@@ -258,7 +258,7 @@ UniValue disconnectnode(const JSONRPCRequest& request)\n \n     bool success;\n     const UniValue &address_arg = request.params[0];\n-    const UniValue &id_arg = request.params.size() < 2 ? NullUniValue : request.params[1];\n+    const UniValue &id_arg = request.params[1];\n \n     if (!address_arg.isNull() && id_arg.isNull()) {\n         /* handle disconnect-by-address */\n@@ -311,7 +311,7 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n \n     std::vector<AddedNodeInfo> vInfo = g_connman->GetAddedNodeInfo();\n \n-    if (request.params.size() == 1 && !request.params[0].isNull()) {\n+    if (!request.params[0].isNull()) {\n         bool found = false;\n         for (const AddedNodeInfo& info : vInfo) {\n             if (info.strAddedNode == request.params[0].get_str()) {\n@@ -534,11 +534,11 @@ UniValue setban(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n \n         int64_t banTime = 0; //use standard bantime if not specified\n-        if (request.params.size() >= 3 && !request.params[2].isNull())\n+        if (!request.params[2].isNull())\n             banTime = request.params[2].get_int64();\n \n         bool absolute = false;\n-        if (request.params.size() == 4 && request.params[3].isTrue())\n+        if (request.params[3].isTrue())\n             absolute = true;\n \n         isSubnet ? g_connman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute) : g_connman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);"
      },
      {
        "sha": "9d9fef6649c847b7d6b517d2ce02420a826aacbd",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e666efcdba527a58175f9de3357dd19bb5880178/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e666efcdba527a58175f9de3357dd19bb5880178/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e666efcdba527a58175f9de3357dd19bb5880178",
        "patch": "@@ -339,14 +339,14 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n \n     CMutableTransaction rawTx;\n \n-    if (request.params.size() > 2 && !request.params[2].isNull()) {\n+    if (!request.params[2].isNull()) {\n         int64_t nLockTime = request.params[2].get_int64();\n         if (nLockTime < 0 || nLockTime > std::numeric_limits<uint32_t>::max())\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, locktime out of range\");\n         rawTx.nLockTime = nLockTime;\n     }\n \n-    bool rbfOptIn = request.params.size() > 3 ? request.params[3].isTrue() : false;\n+    bool rbfOptIn = request.params[3].isTrue();\n \n     for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n         const UniValue& input = inputs[idx];\n@@ -735,7 +735,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n     bool fGivenKeys = false;\n     CBasicKeyStore tempKeystore;\n-    if (request.params.size() > 2 && !request.params[2].isNull()) {\n+    if (!request.params[2].isNull()) {\n         fGivenKeys = true;\n         UniValue keys = request.params[2].get_array();\n         for (unsigned int idx = 0; idx < keys.size(); idx++) {\n@@ -757,7 +757,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n #endif\n \n     // Add previous txouts given in the RPC call:\n-    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+    if (!request.params[1].isNull()) {\n         UniValue prevTxs = request.params[1].get_array();\n         for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n             const UniValue& p = prevTxs[idx];\n@@ -828,7 +828,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n #endif\n \n     int nHashType = SIGHASH_ALL;\n-    if (request.params.size() > 3 && !request.params[3].isNull()) {\n+    if (!request.params[3].isNull()) {\n         static std::map<std::string, int> mapSigHashValues = {\n             {std::string(\"ALL\"), int(SIGHASH_ALL)},\n             {std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},"
      },
      {
        "sha": "00cb99ada22b4dde41fc45d884285f24c8053064",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e666efcdba527a58175f9de3357dd19bb5880178/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e666efcdba527a58175f9de3357dd19bb5880178/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e666efcdba527a58175f9de3357dd19bb5880178",
        "patch": "@@ -462,26 +462,26 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     // Wallet comments\n     CWalletTx wtx;\n-    if (request.params.size() > 2 && !request.params[2].isNull() && !request.params[2].get_str().empty())\n+    if (!request.params[2].isNull() && !request.params[2].get_str().empty())\n         wtx.mapValue[\"comment\"] = request.params[2].get_str();\n-    if (request.params.size() > 3 && !request.params[3].isNull() && !request.params[3].get_str().empty())\n+    if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n         wtx.mapValue[\"to\"]      = request.params[3].get_str();\n \n     bool fSubtractFeeFromAmount = false;\n-    if (request.params.size() > 4 && !request.params[4].isNull()) {\n+    if (!request.params[4].isNull()) {\n         fSubtractFeeFromAmount = request.params[4].get_bool();\n     }\n \n     CCoinControl coin_control;\n-    if (request.params.size() > 5 && !request.params[5].isNull()) {\n+    if (!request.params[5].isNull()) {\n         coin_control.signalRbf = request.params[5].get_bool();\n     }\n \n-    if (request.params.size() > 6 && !request.params[6].isNull()) {\n+    if (!request.params[6].isNull()) {\n         coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n     }\n \n-    if (request.params.size() > 7 && !request.params[7].isNull()) {\n+    if (!request.params[7].isNull()) {\n         if (!FeeModeFromString(request.params[7].get_str(), coin_control.m_fee_mode)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n         }\n@@ -904,9 +904,9 @@ UniValue sendfrom(const JSONRPCRequest& request)\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (request.params.size() > 4 && !request.params[4].isNull() && !request.params[4].get_str().empty())\n+    if (!request.params[4].isNull() && !request.params[4].get_str().empty())\n         wtx.mapValue[\"comment\"] = request.params[4].get_str();\n-    if (request.params.size() > 5 && !request.params[5].isNull() && !request.params[5].get_str().empty())\n+    if (!request.params[5].isNull() && !request.params[5].get_str().empty())\n         wtx.mapValue[\"to\"]      = request.params[5].get_str();\n \n     EnsureWalletIsUnlocked(pwallet);\n@@ -986,23 +986,23 @@ UniValue sendmany(const JSONRPCRequest& request)\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (request.params.size() > 3 && !request.params[3].isNull() && !request.params[3].get_str().empty())\n+    if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n         wtx.mapValue[\"comment\"] = request.params[3].get_str();\n \n     UniValue subtractFeeFromAmount(UniValue::VARR);\n-    if (request.params.size() > 4 && !request.params[4].isNull())\n+    if (!request.params[4].isNull())\n         subtractFeeFromAmount = request.params[4].get_array();\n \n     CCoinControl coin_control;\n-    if (request.params.size() > 5 && !request.params[5].isNull()) {\n+    if (!request.params[5].isNull()) {\n         coin_control.signalRbf = request.params[5].get_bool();\n     }\n \n-    if (request.params.size() > 6 && !request.params[6].isNull()) {\n+    if (!request.params[6].isNull()) {\n         coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n     }\n \n-    if (request.params.size() > 7 && !request.params[7].isNull()) {\n+    if (!request.params[7].isNull()) {\n         if (!FeeModeFromString(request.params[7].get_str(), coin_control.m_fee_mode)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n         }\n@@ -2670,19 +2670,19 @@ UniValue listunspent(const JSONRPCRequest& request)\n         );\n \n     int nMinDepth = 1;\n-    if (request.params.size() > 0 && !request.params[0].isNull()) {\n+    if (!request.params[0].isNull()) {\n         RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n         nMinDepth = request.params[0].get_int();\n     }\n \n     int nMaxDepth = 9999999;\n-    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+    if (!request.params[1].isNull()) {\n         RPCTypeCheckArgument(request.params[1], UniValue::VNUM);\n         nMaxDepth = request.params[1].get_int();\n     }\n \n     std::set<CBitcoinAddress> setAddress;\n-    if (request.params.size() > 2 && !request.params[2].isNull()) {\n+    if (!request.params[2].isNull()) {\n         RPCTypeCheckArgument(request.params[2], UniValue::VARR);\n         UniValue inputs = request.params[2].get_array();\n         for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n@@ -2697,7 +2697,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n     }\n \n     bool include_unsafe = true;\n-    if (request.params.size() > 3 && !request.params[3].isNull()) {\n+    if (!request.params[3].isNull()) {\n         RPCTypeCheckArgument(request.params[3], UniValue::VBOOL);\n         include_unsafe = request.params[3].get_bool();\n     }\n@@ -3112,7 +3112,7 @@ UniValue generate(const JSONRPCRequest& request)\n \n     int num_generate = request.params[0].get_int();\n     uint64_t max_tries = 1000000;\n-    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+    if (!request.params[1].isNull()) {\n         max_tries = request.params[1].get_int();\n     }\n "
      }
    ]
  },
  {
    "sha": "e067673f4ea7a74b7251282b48ea9ca57416533a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDY3NjczZjRlYTdhNzRiNzI1MTI4MmI0OGVhOWNhNTc0MTY1MzNh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-14T23:44:02Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-14T23:44:02Z"
      },
      "message": "Avoid treating null RPC arguments different from missing arguments\n\nThis changes RPC methods to treat null arguments the same as missing arguments,\ninstead of throwing type errors. Specifically:\n\n- `getbalance` method now returns the wallet balance when the `account` param\n  is null instead of throwing a type error (same as when parameter is missing).\n  It is still an error to supply `minconf` or `watchonly` options when the\n  account is null.\n\n- `addnode` and `setban` methods now return help text instead of type errors if\n  `command` params are null (same as when params are missing).\n\n- `sendrawtransaction`, `setaccount`, `movecmd`, `sendfrom`,\n  `addmultisigaddress`, `listaccounts`, `lockunspent` methods accept null\n  default values where missing values were previously allowed, and treat them\n  the same.",
      "tree": {
        "sha": "9106b1044e0e734a76b417742f3c305a42ac9707",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9106b1044e0e734a76b417742f3c305a42ac9707"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e067673f4ea7a74b7251282b48ea9ca57416533a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e067673f4ea7a74b7251282b48ea9ca57416533a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e067673f4ea7a74b7251282b48ea9ca57416533a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e067673f4ea7a74b7251282b48ea9ca57416533a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e666efcdba527a58175f9de3357dd19bb5880178",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e666efcdba527a58175f9de3357dd19bb5880178",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e666efcdba527a58175f9de3357dd19bb5880178"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 15,
      "deletions": 16
    },
    "files": [
      {
        "sha": "f19b96824413f1441494f59fe0d485f5d41e26ac",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e067673f4ea7a74b7251282b48ea9ca57416533a/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e067673f4ea7a74b7251282b48ea9ca57416533a/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=e067673f4ea7a74b7251282b48ea9ca57416533a",
        "patch": "@@ -193,7 +193,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n UniValue addnode(const JSONRPCRequest& request)\n {\n     std::string strCommand;\n-    if (request.params.size() == 2)\n+    if (!request.params[1].isNull())\n         strCommand = request.params[1].get_str();\n     if (request.fHelp || request.params.size() != 2 ||\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n@@ -490,7 +490,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n UniValue setban(const JSONRPCRequest& request)\n {\n     std::string strCommand;\n-    if (request.params.size() >= 2)\n+    if (!request.params[1].isNull())\n         strCommand = request.params[1].get_str();\n     if (request.fHelp || request.params.size() < 2 ||\n         (strCommand != \"add\" && strCommand != \"remove\"))"
      },
      {
        "sha": "10fc9c162d0bd6b3c1860a2d5c720eb31392d8ed",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e067673f4ea7a74b7251282b48ea9ca57416533a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e067673f4ea7a74b7251282b48ea9ca57416533a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e067673f4ea7a74b7251282b48ea9ca57416533a",
        "patch": "@@ -922,7 +922,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n     const uint256& hashTx = tx->GetHash();\n \n     CAmount nMaxRawTxFee = maxTxFee;\n-    if (request.params.size() > 1 && request.params[1].get_bool())\n+    if (!request.params[1].isNull() && request.params[1].get_bool())\n         nMaxRawTxFee = 0;\n \n     CCoinsViewCache &view = *pcoinsTip;"
      },
      {
        "sha": "275173aa4fdc1a04029d538710ef8798aa6ed328",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e067673f4ea7a74b7251282b48ea9ca57416533a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e067673f4ea7a74b7251282b48ea9ca57416533a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e067673f4ea7a74b7251282b48ea9ca57416533a",
        "patch": "@@ -280,7 +280,7 @@ UniValue setaccount(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     std::string strAccount;\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         strAccount = AccountFromValue(request.params[1]);\n \n     // Only add the account if the address is yours.\n@@ -768,7 +768,7 @@ UniValue getbalance(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    if (request.params.size() == 0)\n+    if (request.params[0].isNull() && request.params[1].isNull() && request.params[2].isNull())\n         return  ValueFromAmount(pwallet->GetBalance());\n \n     const std::string& account_param = request.params[0].get_str();\n@@ -838,11 +838,11 @@ UniValue movecmd(const JSONRPCRequest& request)\n     CAmount nAmount = AmountFromValue(request.params[2]);\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n-    if (request.params.size() > 3)\n+    if (!request.params[3].isNull())\n         // unused parameter, used to be nMinDepth, keep type-checking it though\n         (void)request.params[3].get_int();\n     std::string strComment;\n-    if (request.params.size() > 4)\n+    if (!request.params[4].isNull())\n         strComment = request.params[4].get_str();\n \n     if (!pwallet->AccountMove(strFrom, strTo, nAmount, strComment)) {\n@@ -899,7 +899,7 @@ UniValue sendfrom(const JSONRPCRequest& request)\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n     int nMinDepth = 1;\n-    if (request.params.size() > 3)\n+    if (!request.params[3].isNull())\n         nMinDepth = request.params[3].get_int();\n \n     CWalletTx wtx;\n@@ -1105,7 +1105,7 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     std::string strAccount;\n-    if (request.params.size() > 2)\n+    if (!request.params[2].isNull())\n         strAccount = AccountFromValue(request.params[2]);\n \n     // Construct using pay-to-script-hash:\n@@ -1711,10 +1711,10 @@ UniValue listaccounts(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     int nMinDepth = 1;\n-    if (request.params.size() > 0)\n+    if (!request.params[0].isNull())\n         nMinDepth = request.params[0].get_int();\n     isminefilter includeWatchonly = ISMINE_SPENDABLE;\n-    if(request.params.size() > 1)\n+    if(!request.params[1].isNull())\n         if(request.params[1].get_bool())\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n@@ -2361,19 +2361,18 @@ UniValue lockunspent(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    if (request.params.size() == 1)\n-        RPCTypeCheck(request.params, {UniValue::VBOOL});\n-    else\n-        RPCTypeCheck(request.params, {UniValue::VBOOL, UniValue::VARR});\n+    RPCTypeCheckArgument(request.params[0], UniValue::VBOOL);\n \n     bool fUnlock = request.params[0].get_bool();\n \n-    if (request.params.size() == 1) {\n+    if (request.params[1].isNull()) {\n         if (fUnlock)\n             pwallet->UnlockAllCoins();\n         return true;\n     }\n \n+    RPCTypeCheckArgument(request.params[1], UniValue::VARR);\n+\n     UniValue outputs = request.params[1].get_array();\n     for (unsigned int idx = 0; idx < outputs.size(); idx++) {\n         const UniValue& output = outputs[idx];"
      }
    ]
  },
  {
    "sha": "fd5d71ec4b931a44b524012bf550a61025b9fb3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDVkNzFlYzRiOTMxYTQ0YjUyNDAxMmJmNTUwYTYxMDI1YjlmYjNi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-15T03:32:38Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-15T03:32:38Z"
      },
      "message": "Update developer notes after params.size() cleanup",
      "tree": {
        "sha": "a0547682a58067bd66c65f0167b540033c34ae5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0547682a58067bd66c65f0167b540033c34ae5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd5d71ec4b931a44b524012bf550a61025b9fb3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd5d71ec4b931a44b524012bf550a61025b9fb3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd5d71ec4b931a44b524012bf550a61025b9fb3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd5d71ec4b931a44b524012bf550a61025b9fb3b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e067673f4ea7a74b7251282b48ea9ca57416533a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e067673f4ea7a74b7251282b48ea9ca57416533a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e067673f4ea7a74b7251282b48ea9ca57416533a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 4,
      "deletions": 6
    },
    "files": [
      {
        "sha": "e999ad3d34c74922b90d0a078c8eb60f8ce754e5",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd5d71ec4b931a44b524012bf550a61025b9fb3b/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd5d71ec4b931a44b524012bf550a61025b9fb3b/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=fd5d71ec4b931a44b524012bf550a61025b9fb3b",
        "patch": "@@ -570,16 +570,14 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n     is specified as-is in BIP22.\n \n - Missing arguments and 'null' should be treated the same: as default values. If there is no\n-  default value, both cases should fail in the same way.\n+  default value, both cases should fail in the same way. The easiest way to follow this\n+  guideline is detect unspecified arguments with `params[x].isNull()` instead of\n+  `params.size() <= x`. The former returns true if the argument is either null or missing,\n+  while the latter returns true if is missing, and false if it is null.\n \n   - *Rationale*: Avoids surprises when switching to name-based arguments. Missing name-based arguments\n   are passed as 'null'.\n \n-  - *Exception*: Many legacy exceptions to this exist, one of the worst ones is\n-    `getbalance` which follows a completely different code path based on the\n-    number of arguments. We are still in the process of cleaning these up. Do not introduce\n-    new ones.\n-\n - Try not to overload methods on argument type. E.g. don't make `getblock(true)` and `getblock(\"hash\")`\n   do different things.\n "
      }
    ]
  },
  {
    "sha": "745d2e315f39d7591c0ea9e772a19e3cd9b51b09",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDVkMmUzMTVmMzlkNzU5MWMwZWE5ZTc3MmExOWUzY2Q5YjUxYjA5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-15T19:47:27Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-15T19:47:27Z"
      },
      "message": "Clean up getbalance RPC parameter handling\n\nOnly change in behavior is that unsupported combinations of parameters now\ntrigger more specific error messages instead of the vague \"JSON value is not a\nstring as expected\" error.",
      "tree": {
        "sha": "5c14353c353b1db853fb050a1373fff1752f8dd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c14353c353b1db853fb050a1373fff1752f8dd0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/745d2e315f39d7591c0ea9e772a19e3cd9b51b09",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/745d2e315f39d7591c0ea9e772a19e3cd9b51b09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/745d2e315f39d7591c0ea9e772a19e3cd9b51b09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/745d2e315f39d7591c0ea9e772a19e3cd9b51b09/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd5d71ec4b931a44b524012bf550a61025b9fb3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd5d71ec4b931a44b524012bf550a61025b9fb3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd5d71ec4b931a44b524012bf550a61025b9fb3b"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 20,
      "deletions": 7
    },
    "files": [
      {
        "sha": "06a63e18e499d7d986c837a4ad39b62b88b0e131",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/745d2e315f39d7591c0ea9e772a19e3cd9b51b09/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/745d2e315f39d7591c0ea9e772a19e3cd9b51b09/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=745d2e315f39d7591c0ea9e772a19e3cd9b51b09",
        "patch": "@@ -768,18 +768,31 @@ UniValue getbalance(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    if (request.params[0].isNull() && request.params[1].isNull() && request.params[2].isNull())\n-        return  ValueFromAmount(pwallet->GetBalance());\n+    const UniValue& account_value = request.params[0];\n+    const UniValue& minconf = request.params[1];\n+    const UniValue& include_watchonly = request.params[2];\n+\n+    if (account_value.isNull()) {\n+        if (!minconf.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"getbalance minconf option is only currently supported if an account is specified\");\n+        }\n+        if (!include_watchonly.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"getbalance include_watchonly option is only currently supported if an account is specified\");\n+        }\n+        return ValueFromAmount(pwallet->GetBalance());\n+    }\n \n-    const std::string& account_param = request.params[0].get_str();\n+    const std::string& account_param = account_value.get_str();\n     const std::string* account = account_param != \"*\" ? &account_param : nullptr;\n \n     int nMinDepth = 1;\n-    if (!request.params[1].isNull())\n-        nMinDepth = request.params[1].get_int();\n+    if (!minconf.isNull())\n+        nMinDepth = minconf.get_int();\n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(!request.params[2].isNull())\n-        if(request.params[2].get_bool())\n+    if(!include_watchonly.isNull())\n+        if(include_watchonly.get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     return ValueFromAmount(pwallet->GetLegacyBalance(filter, nMinDepth, account));"
      }
    ]
  }
]