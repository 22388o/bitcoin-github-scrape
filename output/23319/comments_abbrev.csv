MarcoFalke,2021-10-20 18:52:54,I think this has been said on IRC already: Shouldn't this be hidden behind a flag like the RPC it is copied from?,https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-947945962,947945962,
dougEfresh,2021-10-20 18:53:13,"> Concept ACK.\n> \n> It would be interesting to add a functional test case.\n\nAgreed, wanted to discuss the implementation before diving in. \nAnything special I should know about testing `./test/functional/rpc_rawtransaction.py` ? This is my 1st time doing functional test.",https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-947946201,947946201,
dougEfresh,2021-10-20 19:08:55,"> I think this has been said on IRC already: Shouldn't this be hidden behind a flag like the RPC it is copied from?\n\nTo confirm we want the second (hybrid) parameter to have three verbosity levels:\n\n* `0`  or `false` - hex encoded\n*  `1` or `true`  - returns an Object with information about txid\n* `2` -  adds fee field to Object",https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-947957710,947957710,
MarcoFalke,2021-10-20 19:11:07,"Yes, if that is the behavior of the other RPC, it makes sense to copy it.",https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-947959148,947959148,
sipa,2021-10-20 19:17:00,You might want to also add the UTXOs being spent by the transaction. You're looking those up anyway.,https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-947963375,947963375,
MarcoFalke,2021-10-21 11:22:58,The tests can also be taken from the other RPC: https://github.com/bitcoin/bitcoin/pull/22918/files,https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-948513873,948513873,
DrahtBot,2021-10-25 18:59:59,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23599](https://github.com/bitcoin/bitcoin/pull/23599) (Tidy up RPCTxSerializationFlags by MarcoFalke)\n* [#23507](https:",https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-951216484,951216484,
dougEfresh,2021-10-28 18:02:06,"> You might want to also add the UTXOs being spent by the transaction. You're looking those up anyway.\n\n@sipa Can you clarify a bit more on `add the UTXOs being spent` ? Specifically, what you like to add to the response body?",https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-954076159,954076159,
sipa,2021-10-28 18:20:00,@dougEfresh The scriptPubKey and amount being spent for each input (together with information about the scriptPubKey like the output already has).,https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-954089224,954089224,
MarcoFalke,2021-10-29 09:11:03,Showing the utxos being spent is also being done by the other RPC. Any questions you might have should be answered by looking at the code changes of https://github.com/bitcoin/bitcoin/pull/22918/files,https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-954580846,954580846,
dougEfresh,2021-10-29 11:48:53,"> Showing the utxos being spent is also being done by the other RPC. Any questions you might have should be answered by looking at the code changes of https://github.com/bitcoin/bitcoin/pull/22918/files\n\nthanks, added utxos with  `TxVerbosity::SHOW_DETAILS_AND_PREVOUT`\n\nMy latest change includes \n\n* test for prevout (utxo)\n* release documentation\n* consolidate if statement in ./src",https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-954678983,954678983,
dougEfresh,2021-11-14 22:04:20,"> Initial concept ACK. This is really helpful for wallets trying to sync with core rpc out there, and it will reduce get calls by half for input fetching. Thanks for working on this.\n> \n> Below are few minor nits.\n> \n> Will review in more detail later.\n\n@rajarshimaitra thanks for feedback. The test I  added  could use a good review. \n",https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-968372084,968372084,
dougEfresh,2021-11-17 09:43:48,"> Review ACK [fb2f153](https://github.com/bitcoin/bitcoin/commit/fb2f153136dc14921cb7f249fe224919cb7094bb)\n> \n> I am not sure why, but I am hitting this weird error in the test\n> \n> ```\n> $ ./test/functional/rpc_rawtransaction.py \n\nI saw that as well, I'm fixing. \n",https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-971406958,971406958,
dougEfresh,2021-11-20 10:21:47,"> Re ACK [eaf10aa](https://github.com/bitcoin/bitcoin/commit/eaf10aacddfd32c0722414a3f040d3fae2b51cf7).\n> \n> I think the commits can be rearranged a bit, consolidating all file specific changes. Would be easier for new reviewers.\n\nShould I just squash into one commit ?\n\n",https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-974628126,974628126,
rajarshimaitra,2021-11-20 15:15:47,"> Should I just squash into one commit ?\n\nI think the best thing to do here is to put one commit for each file, and order them logically (ex: `client.cpp` changes should come before `rawtransaction.cpp`, functional test commit should be the last, etc). For more details on commit structuring refer https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#committing-patches",https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-974663889,974663889,
MarcoFalke,2021-11-21 07:38:18,"I think it is also fine to have just one commit, since this is just one feature. And it is fine to add tests in the same commit that adds features.",https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-974769534,974769534,
dougEfresh,2021-11-21 09:19:50,"> I think it is also fine to have just one commit, since this is just one feature. And it is fine to add tests in the same commit that adds features.\n\nsquashed to one commit ",https://github.com/bitcoin/bitcoin/pull/23319#issuecomment-974781343,974781343,
MarcoFalke,2021-10-20 07:03:19,wouldn't it make sense to combine the `!blockindex` check here?,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r732469998,732469998,src/rpc/rawtransaction.cpp
MarcoFalke,2021-10-20 07:03:46,it is optional?,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r732470233,732470233,src/rpc/rawtransaction.cpp
dougEfresh,2021-10-20 12:42:53,"yes, and moved",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r732734970,732734970,src/rpc/rawtransaction.cpp
MarcoFalke,2021-10-20 12:49:52,this is an unrelated behavior change,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r732741166,732741166,src/rpc/rawtransaction.cpp
dougEfresh,2021-10-20 13:30:32,right. good catch. ,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r732779544,732779544,src/rpc/rawtransaction.cpp
MarcoFalke,2021-10-20 14:14:00,I mean why are you changing this at all? Seems unrelated and the existing code should work fine.,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r732823420,732823420,src/rpc/rawtransaction.cpp
dougEfresh,2021-10-20 14:18:01,"you said ""wouldn't it make sense to combine the !blockindex check here?""\nin your inital review, i thought you meant combine !blockindex with my new if statement ",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r732827529,732827529,src/rpc/rawtransaction.cpp
MarcoFalke,2021-10-20 14:22:23,"Yes, but the blockindex check can stay as-is. Also, I think it makes more sense to clarify the condition on when the field is existing/missing.\n\n```\nif (a) pushKV();\n```\n\nis clearer than\n\n```\nif (something)\n  if (a) pushKV();\n  return\npushKV();",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r732832020,732832020,src/rpc/rawtransaction.cpp
dougEfresh,2021-10-20 18:50:48,"Gotcha, Hopefully now it looks better",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r733057279,733057279,src/rpc/rawtransaction.cpp
laanwj,2021-10-28 17:31:40,"Is there a reason you don't add `verbosity == 1` to this conjunction instead of duplicating the same `TxToJSON(*tx, hash_block, result, chainman.ActiveChainstate()); return result;` above?",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r738608678,738608678,src/rpc/rawtransaction.cpp
dougEfresh,2021-10-28 17:51:28,"I guess mostly to prevent unneeded allocation of \n```\n    std::optional<size_t>  opt_tx_position{std::nullopt};\n    CBlockUndo blockUndo;\n    CBlock block;\n```\n I can move it to the `if (!blockindex || IsBlockPruned(blockindex)...`  if you like. \n",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r738622797,738622797,src/rpc/rawtransaction.cpp
dougEfresh,2021-10-29 11:43:32,"For code clarity, I moved `verbosity == 1`  to the if block. \n\nThe performance impact is marginal ",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r739162422,739162422,src/rpc/rawtransaction.cpp
dougEfresh,2021-10-29 11:52:34,I will add a space between ` inputs(only` after review by others.,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r739167913,739167913,src/rpc/rawtransaction.cpp
luke-jr,2021-10-29 16:29:57,verbos*ity*,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r739381944,739381944,src/rpc/rawtransaction.cpp
luke-jr,2021-10-29 16:30:52,Stick to just the numbers in docs. (bool is essentially just backwards compat),https://github.com/bitcoin/bitcoin/pull/23319#discussion_r739382479,739382479,src/rpc/rawtransaction.cpp
luke-jr,2021-10-30 03:22:40,What is supposed to guarantee this is correct?,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r739601931,739601931,test/functional/rpc_rawtransaction.py
dougEfresh,2021-10-30 07:28:40,"The value of fee is not important. I want to see that the field fee exists. Change it to `assert('fee' in gottxt)` ?\n\nThere are another tests (outside the scope of this PR) which validate the fee amount. ",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r739621037,739621037,test/functional/rpc_rawtransaction.py
luke-jr,2021-10-30 15:59:47,Maybe do `tx_fee = -self.nodes[2].gettransaction(tx)['fee']` immediately after sending and compare to that?,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r739668657,739668657,test/functional/rpc_rawtransaction.py
dougEfresh,2021-11-02 10:26:54,"No fee field in `gettransaction` . \nI added `assert('fee' in gottxt)`  but kept `assert_equal(gottx['fee'], Decimal('0.00002820'))` \n",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r740920756,740920756,test/functional/rpc_rawtransaction.py
amovfx,2021-11-14 01:52:37,"I'm just studying for the pr review club. \n\n There was a question about the performance implications of this loop. I was digging through the code and I was perhaps thinking that CBlockUndo could maybe benefit from a faster data structure to find a transaction? Maybe a method that returns the data faster.\n\nPerhaps that is a later improvement and off topic?",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r748786334,748786334,src/rpc/rawtransaction.cpp
rajarshimaitra,2021-11-14 15:13:55,"Probably I am missing something, but I am not finding any `prevout` reference in the `getblock` help doc. Is it referring to it's internal implementation? Maybe this line could be made a little more clear? ",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r748868321,748868321,doc/release-notes.md
rajarshimaitra,2021-11-14 15:40:45,"To keep parity with lines below, maybe also remove leading `\n` from here? ",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r748871612,748871612,src/rpc/rawtransaction.cpp
rajarshimaitra,2021-11-14 15:55:36,"I think the framing can be improved a bit.\n1. Using ""transaction"" instead of ""txid"". They are not in general replaceable with each other for all contexts. It's clearer to say ""details of transaction"" than ""details of txid"".\n2. The verbosity 2 comment can feel a little confusing for users on the ""prevout for inputs"" part. It might sound at first glance as the prevout for the tx containing input",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r748873364,748873364,src/rpc/rawtransaction.cpp
rajarshimaitra,2021-11-14 17:31:17,"I am not entirely sure, should we still keep the previous usage in the examples above this line?\n\nEven though the `bool` values are still accepted, the help doc doesn't include it anymore, so it might be confusing to users.  ",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r748884982,748884982,src/rpc/rawtransaction.cpp
dougEfresh,2021-11-14 21:47:42,I moved the \n(s),https://github.com/bitcoin/bitcoin/pull/23319#discussion_r748914552,748914552,src/rpc/rawtransaction.cpp
dougEfresh,2021-11-14 21:48:36,Agreed and changed,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r748914657,748914657,src/rpc/rawtransaction.cpp
dougEfresh,2021-11-14 21:50:02,"See latest latest changes\nI added  separate RPC  documentation for `verbosity=2` \n```\nResult (for verbosity = 2):\n{                               (json object)\n  ...,                          Same output as verbosity = 1\n  ""fee"" : n,                    (numeric, optional) transaction fee in BTC, omitted if block undo data is not available\n  ""vin"" : [                     (json array)",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r748914824,748914824,src/rpc/rawtransaction.cpp
dougEfresh,2021-11-14 21:51:26,"I was referring to the `getblock` in the above paragraph of the release notes. \nI updated to explicitly reference the above paragraph. ",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r748914964,748914964,doc/release-notes.md
dougEfresh,2021-11-14 21:56:02,"Someone did suggest a more performant  solution, I can't find it at the moment though. ",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r748915529,748915529,src/rpc/rawtransaction.cpp
stickies-v,2021-11-15 17:16:22,"This overflows in the case of coinbase transaction (i==0). To bring it in line with `getblock` (where the coinbase transaction is serialized without fees/prevouts when `verbosity` is set to `3`), you could add another OR clause on [#255](https://github.com/bitcoin/bitcoin/pull/23319/files#diff-a58e7bb9d9a8a0287c0b7281d99da4e79b6f8c2a5780c24c6d76c14212c48640R255) to also check for `tx->IsCoinBase()",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r749529909,749529909,src/rpc/rawtransaction.cpp
stickies-v,2021-11-15 19:29:44,"I understand that functionally this works fine, but it feels unnecessarily confusing to always pass `TxVerbosity::SHOW_DETAILS_AND_PREVOUT` even in the case when in actuality we're trying to get `TxVerbosity::SHOW_DETAILS` but relying on `txundo` being null to achieve that. Would it not be more prudent to instead add `verbosity` as an optional argument to `TxToJSON` and simply pass that along?",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r749620834,749620834,src/rpc/rawtransaction.cpp
dougEfresh,2021-11-16 10:20:08,"Thanks @stickies-v \n  I'll also add a function test to catch this condition",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r750119538,750119538,src/rpc/rawtransaction.cpp
rajarshimaitra,2021-11-16 15:33:47,"There is `fee` in getransaction. see https://developer.bitcoin.org/reference/rpc/gettransaction.html\n\nI also agree with @luke-jr . There is no guarantee that fee calculation will always remain same, and thus better not to assert against hard coded values.",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r750396075,750396075,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-11-16 16:25:43,Maybe it would be good to add few more data checks in `prevout` to ensure nothing changes in at the field level? ,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r750449024,750449024,test/functional/rpc_rawtransaction.py
dougEfresh,2021-11-18 10:25:27,"I added a separate test to validate output fields, only that they exists, not their values. \nIs this worth having?",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r752101675,752101675,test/functional/rpc_rawtransaction.py
dougEfresh,2021-11-18 10:26:43,"The function test, `./test/functional/rpc_rawtransaction.py`, uses named paramaters, so `verbose` must be here, unless we want to change the functional test.\n",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r752102684,752102684,src/rpc/rawtransaction.cpp
rajarshimaitra,2021-11-18 16:44:11,"maybe this a little more clear?\n```suggestion\n            # We only check the ""hex"" field of the output, getrawtransaction_verbosity_tests checks remaining fields\n```",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r752429948,752429948,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-11-18 16:51:35,Do we need 2 blocks here? ,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r752437160,752437160,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-11-18 16:53:35,Internal node numbers are in general not printed in the test log as they don't really convey any meaningful information.,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r752439208,752439208,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-11-18 16:55:20,"To keep parity with previous tests, an `without blockhash` test segment would be nice. ",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r752440784,752440784,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-11-18 16:56:37,"nit: \n```suggestion\n        # check that coinbase has no fee or doesn't throw any errors for verbosity 2\n```",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r752441923,752441923,test/functional/rpc_rawtransaction.py
dougEfresh,2021-11-18 18:42:33,"> \n> But I am still unsure why the tests needs to be separated (or how it is related to previous test failure).\n> \n\nMostly clarity, I felt the `getrawtransaction_tests` was a bit confusing to follow, especially as I added the `verbosity=2` test cases.  Having a separate test for verbosity fields instead of smashing everything in one test block made reading more clear as well was intent. \",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r752525733,752525733,test/functional/rpc_rawtransaction.py
dougEfresh,2021-11-19 07:42:31,changed,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r752923357,752923357,test/functional/rpc_rawtransaction.py
dougEfresh,2021-11-19 07:42:48,Removed,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r752923484,752923484,test/functional/rpc_rawtransaction.py
dougEfresh,2021-11-19 07:42:56,Nope!,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r752923550,752923550,test/functional/rpc_rawtransaction.py
dougEfresh,2021-11-19 07:59:08,I added `without blockhash` verbosity=2 test in `getrawtransaction_tests`,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r752932303,752932303,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-11-19 13:45:47,Fair enough.. That makes sense.. ,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r753202059,753202059,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-11-19 13:51:21,"nit: \n```suggestion\n        # check that coinbase has no fee or does not throw any errors for verbosity 2\n```",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r753206108,753206108,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-11-19 14:16:34,"```suggestion\n                    RPCResult{""if verbosity is not set or set to 0"",\n```",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r753225045,753225045,src/rpc/rawtransaction.cpp
rajarshimaitra,2021-11-19 14:17:25,"```suggestion\n                ""If verbosity is 2, returns an Object with information about transaction, including fee and prevout information.\n"",\n```",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r753225691,753225691,src/rpc/rawtransaction.cpp
dougEfresh,2021-11-22 13:57:30,I added an arg for explicit `TxVerbosity` in `TxToJSON`,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r754302688,754302688,src/rpc/rawtransaction.cpp
rajarshimaitra,2021-11-23 12:15:30,I think this change is still pending.. ,https://github.com/bitcoin/bitcoin/pull/23319#discussion_r755066106,755066106,test/functional/rpc_rawtransaction.py
dougEfresh,2021-11-23 18:25:33,"> I think this change is still pending..\n\nFixed",https://github.com/bitcoin/bitcoin/pull/23319#discussion_r755401364,755401364,test/functional/rpc_rawtransaction.py
