[
  {
    "sha": "46c9cfe65526997e6043d4fdbaace32b4eb580df",
    "node_id": "C_kwDOABII59oAKDQ2YzljZmU2NTUyNjk5N2U2MDQzZDRmZGJhYWNlMzJiNGViNTgwZGY",
    "commit": {
      "author": {
        "name": "Douglas Chimento",
        "email": "dchimento@gmail.com",
        "date": "2021-11-21T09:17:59Z"
      },
      "committer": {
        "name": "Douglas Chimento",
        "email": "dchimento@gmail.com",
        "date": "2021-11-23T18:24:01Z"
      },
      "message": "rpc: Return fee and prevout(s) to getrawtransaction\n\n* Add optional fee response in BTC to getrawtransaction\n* Add optional prevout(s) response to getrawtransaction showing utxos being spent\n* Add getrawtransaction_verbosity functional test to validate fields",
      "tree": {
        "sha": "17db98d77871f8de29c4e14744f89b031fecd229",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17db98d77871f8de29c4e14744f89b031fecd229"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46c9cfe65526997e6043d4fdbaace32b4eb580df",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEFt7wA8cqIHRePmNa0a1maOubxakFAmGdMdgACgkQ0a1maOub\nxamUrAv/RwOnOv3xCD1W5z1bimF+v7XQorInLNzBATz36d9Pu47U4Xr2JAe6bQ1v\nKKeKPcFVzLj2EQvumIGmzFUGUejSy27sLco2bgCc4EasKNy/QYzDnfB9ROh6V5Zu\nFSAf1uC/4VE7AWkIjBAkRuUrraOR2B9pjncB0bttAdI13Fkhtv/ODuOjVYK6kMgy\nJhNIgIgVHTHtDVwFDnIz4m36/5iH7Ox9fakSsy2xf4Heb2NadYRkwoXg0IoZcfNF\nObASuazfmbzYxoBRIiAD/OH8qFUoz/+MT+vg2v1QlXK/CJHEW/wV/jXKq4+Jfhux\nbYwS4HB+MgNQNQ9BvAehBPSfDXLjtFLzLKA6NryIV7E9GMFC4Wz+yqHZSHn42e11\njZzve1ldp1u2fn4OduXA2e1OUgiYoVjadLc0fWLak70G4zABfMD7ksHWKcrG/cdz\noQoAGseN/hIQPyfrVQCqo0k3ZyC5yj01yXUpoGaqUk6DF1DtwMLv1cXvqoAH2jPY\niXtKgfjQ\n=kK+s\n-----END PGP SIGNATURE-----",
        "payload": "tree 17db98d77871f8de29c4e14744f89b031fecd229\nparent fe03f7a37fd0ef05149161f6b95a25493e1fe38f\nauthor Douglas Chimento <dchimento@gmail.com> 1637486279 +0200\ncommitter Douglas Chimento <dchimento@gmail.com> 1637691841 +0200\n\nrpc: Return fee and prevout(s) to getrawtransaction\n\n* Add optional fee response in BTC to getrawtransaction\n* Add optional prevout(s) response to getrawtransaction showing utxos being spent\n* Add getrawtransaction_verbosity functional test to validate fields\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c9cfe65526997e6043d4fdbaace32b4eb580df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46c9cfe65526997e6043d4fdbaace32b4eb580df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c9cfe65526997e6043d4fdbaace32b4eb580df/comments",
    "author": {
      "login": "dougEfresh",
      "id": 976425,
      "node_id": "MDQ6VXNlcjk3NjQyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/976425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougEfresh",
      "html_url": "https://github.com/dougEfresh",
      "followers_url": "https://api.github.com/users/dougEfresh/followers",
      "following_url": "https://api.github.com/users/dougEfresh/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougEfresh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougEfresh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougEfresh/subscriptions",
      "organizations_url": "https://api.github.com/users/dougEfresh/orgs",
      "repos_url": "https://api.github.com/users/dougEfresh/repos",
      "events_url": "https://api.github.com/users/dougEfresh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougEfresh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dougEfresh",
      "id": 976425,
      "node_id": "MDQ6VXNlcjk3NjQyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/976425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougEfresh",
      "html_url": "https://github.com/dougEfresh",
      "followers_url": "https://api.github.com/users/dougEfresh/followers",
      "following_url": "https://api.github.com/users/dougEfresh/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougEfresh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougEfresh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougEfresh/subscriptions",
      "organizations_url": "https://api.github.com/users/dougEfresh/orgs",
      "repos_url": "https://api.github.com/users/dougEfresh/repos",
      "events_url": "https://api.github.com/users/dougEfresh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougEfresh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe03f7a37fd0ef05149161f6b95a25493e1fe38f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe03f7a37fd0ef05149161f6b95a25493e1fe38f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe03f7a37fd0ef05149161f6b95a25493e1fe38f"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 154,
      "deletions": 29
    },
    "files": [
      {
        "sha": "6710d029b3b671ef3c817a578683cebe7c1ebce4",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c9cfe65526997e6043d4fdbaace32b4eb580df/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c9cfe65526997e6043d4fdbaace32b4eb580df/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=46c9cfe65526997e6043d4fdbaace32b4eb580df",
        "patch": "@@ -99,6 +99,11 @@ Updated RPCs\n   causes the lock to be written persistently to the wallet database. This\n   allows UTXOs to remain locked even after node restarts or crashes. (#23065)\n \n+- `getrawtransaction` RPC verbose argument changed to verbosity levels: 0, 1 and 2 (backwards compatible).\n+  Verbosity 0 and 1 correspond to previous (verbose) argument's values `false` and `true`.\n+  Verbosity `2` contains an optional `fee` field and optional `prevout` subfield\n+  describing spent output. See above `getblock` RPC update for `prevout` details.\n+\n New RPCs\n --------\n "
      },
      {
        "sha": "d0d9b3c5c2a9ef7b70fb96a231e17fdcd5eab965",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c9cfe65526997e6043d4fdbaace32b4eb580df/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c9cfe65526997e6043d4fdbaace32b4eb580df/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=46c9cfe65526997e6043d4fdbaace32b4eb580df",
        "patch": "@@ -93,6 +93,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getchaintxstats\", 0, \"nblocks\" },\n     { \"gettransaction\", 1, \"include_watchonly\" },\n     { \"gettransaction\", 2, \"verbose\" },\n+    { \"getrawtransaction\", 1, \"verbosity\" },\n     { \"getrawtransaction\", 1, \"verbose\" },\n     { \"createrawtransaction\", 0, \"inputs\" },\n     { \"createrawtransaction\", 1, \"outputs\" },"
      },
      {
        "sha": "df72576f726a633632ee26a9a6540c7b39a829b6",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 22,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c9cfe65526997e6043d4fdbaace32b4eb580df/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c9cfe65526997e6043d4fdbaace32b4eb580df/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=46c9cfe65526997e6043d4fdbaace32b4eb580df",
        "patch": "@@ -31,6 +31,7 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <uint256.h>\n+#include <undo.h>\n #include <util/bip32.h>\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n@@ -43,14 +44,14 @@\n \n #include <univalue.h>\n \n-static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry, CChainState& active_chainstate)\n+static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry, CChainState& active_chainstate, const CTxUndo* txundo = nullptr, TxVerbosity verbosity = TxVerbosity::SHOW_TXID)\n {\n     // Call into TxToUniv() in bitcoin-common to decode the transaction hex.\n     //\n     // Blockchain contextual information (confirmations and blocktime) is not\n     // available to code in bitcoin-common, so we query them here and push the\n     // data into the returned UniValue.\n-    TxToUniv(tx, uint256(), entry, true, RPCSerializationFlags());\n+    TxToUniv(tx, uint256(), entry, true, RPCSerializationFlags(), txundo, verbosity);\n \n     if (!hashBlock.IsNull()) {\n         LOCK(cs_main);\n@@ -73,26 +74,27 @@ static RPCHelpMan getrawtransaction()\n {\n     return RPCHelpMan{\n                 \"getrawtransaction\",\n-                \"\\nReturn the raw transaction data.\\n\"\n+                \"\\nReturn the raw transaction data.\\n\\n\"\n \n-                \"\\nBy default, this call only returns a transaction if it is in the mempool. If -txindex is enabled\\n\"\n+                \"By default, this call only returns a transaction if it is in the mempool. If -txindex is enabled\\n\"\n                 \"and no blockhash argument is passed, it will return the transaction if it is in the mempool or any block.\\n\"\n                 \"If a blockhash argument is passed, it will return the transaction if\\n\"\n-                \"the specified block is available and the transaction is in that block.\\n\"\n-                \"\\nHint: Use gettransaction for wallet transactions.\\n\"\n+                \"the specified block is available and the transaction is in that block.\\n\\n\"\n+                \"Hint: Use gettransaction for wallet transactions.\\n\\n\"\n \n-                \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n-                \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\\n\",\n+                \"If verbosity is 0 or omitted, returns a string that is serialized, hex-encoded data for transaction.\\n\"\n+                \"If verbosity is 1, returns an Object with information about transaction.\\n\"\n+                \"If verbosity is 2, returns an Object with information about transaction, including fee and prevout information.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If false, return a string, otherwise return a json object\"},\n+                    {\"verbosity|verbose\", RPCArg::Type::NUM, RPCArg::Default{0}, \"0 for hex-encoded data, 1 for a json object, and 2 for json object with fee and prevout\"},\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED_NAMED_ARG, \"The block in which to look for the transaction\"},\n                 },\n                 {\n-                    RPCResult{\"if verbose is not set or set to false\",\n+                    RPCResult{\"if verbosity is not set or set to 0\",\n                          RPCResult::Type::STR, \"data\", \"The serialized, hex-encoded data for 'txid'\"\n-                     },\n-                     RPCResult{\"if verbose is set to true\",\n+                    },\n+                    RPCResult{\"if verbosity is set to 1\",\n                          RPCResult::Type::OBJ, \"\", \"\",\n                          {\n                              {RPCResult::Type::BOOL, \"in_active_chain\", /* optional */ true, \"Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\"},\n@@ -143,13 +145,41 @@ static RPCHelpMan getrawtransaction()\n                              {RPCResult::Type::NUM, \"time\", /* optional */ true, \"Same as \\\"blocktime\\\"\"},\n                         }\n                     },\n+                    RPCResult{\"for verbosity = 2\",\n+                        RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::ELISION, \"\", \"Same output as verbosity = 1\"},\n+                            {RPCResult::Type::NUM, \"fee\", /* optional */ true, \"transaction fee in \" + CURRENCY_UNIT + \", omitted if block undo data is not available\"},\n+                            {RPCResult::Type::ARR, \"vin\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"\", /* optional */ true, \"utxo being spent, omitted if block undo data is not available\",\n+                                {\n+                                    {RPCResult::Type::ELISION, \"\", \"Same output as verbosity = 1\"},\n+                                    {RPCResult::Type::OBJ, \"prevout\", \"\",\n+                                    {\n+                                        {RPCResult::Type::BOOL, \"generated\", \"\"},\n+                                        {RPCResult::Type::NUM, \"value\", \"The value in \" + CURRENCY_UNIT},\n+                                        {RPCResult::Type::NUM, \"height\", \"previous block height\"},\n+                                        {RPCResult::Type::OBJ, \"scriptPubKey\", \"\",\n+                                        {\n+                                            {RPCResult::Type::STR, \"asm\", \"the asm\"},\n+                                            {RPCResult::Type::STR, \"hex\", \"the hex\"},\n+                                            {RPCResult::Type::STR, \"type\", \"The type, eg 'pubkeyhash'\"},\n+                                             {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n+                                        }},\n+                                    }},\n+                                 }},\n+                             }},\n+                        }\n+                    },\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\"\")\n-            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true\")\n-            + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", true\")\n-            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n-            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" 1\")\n+            + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", 1\")\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" 0 \\\"myblockhash\\\"\")\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" 1 \\\"myblockhash\\\"\")\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" 2 \\\"myblockhash\\\"\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n@@ -165,10 +195,14 @@ static RPCHelpMan getrawtransaction()\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The genesis block coinbase is not considered an ordinary transaction and cannot be retrieved\");\n     }\n \n-    // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n-    bool fVerbose = false;\n+    // Accept either a bool (true) or a num (>=0) to indicate verbosity.\n+    int verbosity{0};\n     if (!request.params[1].isNull()) {\n-        fVerbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n+        if (request.params[1].isBool()) {\n+            verbosity = request.params[1].get_bool() ? 1 : 0;\n+        } else {\n+            verbosity = request.params[1].get_int();\n+        }\n     }\n \n     if (!request.params[2].isNull()) {\n@@ -206,13 +240,33 @@ static RPCHelpMan getrawtransaction()\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errmsg + \". Use gettransaction for wallet transactions.\");\n     }\n \n-    if (!fVerbose) {\n+    if (verbosity == 0) {\n         return EncodeHexTx(*tx, RPCSerializationFlags());\n     }\n \n     UniValue result(UniValue::VOBJ);\n-    if (blockindex) result.pushKV(\"in_active_chain\", in_active_chain);\n-    TxToJSON(*tx, hash_block, result, chainman.ActiveChainstate());\n+    if (blockindex) {\n+        result.pushKV(\"in_active_chain\", in_active_chain);\n+    }\n+\n+    std::optional<size_t> opt_tx_position{std::nullopt};\n+    CBlockUndo blockUndo;\n+    CBlock block;\n+    if (verbosity == 1 || tx->IsCoinBase() ||\n+        !blockindex || IsBlockPruned(blockindex) ||\n+        !(UndoReadFromDisk(blockUndo, blockindex) && ReadBlockFromDisk(block, blockindex, Params().GetConsensus()))) {\n+        TxToJSON(*tx, hash_block, result, chainman.ActiveChainstate());\n+        return result;\n+    }\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const CTransactionRef t = block.vtx.at(i);\n+        if (*t == *tx) {\n+            // blockundo does not have coinbase tx\n+            opt_tx_position = std::optional<size_t>{i-1};\n+            break;\n+        }\n+    }\n+    TxToJSON(*tx, hash_block, result, chainman.ActiveChainstate(), opt_tx_position ? &blockUndo.vtxundo.at(*opt_tx_position) : nullptr, TxVerbosity::SHOW_DETAILS_AND_PREVOUT);\n     return result;\n },\n     };"
      },
      {
        "sha": "9eaf52209854d23d7c21d7af08b5494fc6f61cc7",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 72,
        "deletions": 7,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c9cfe65526997e6043d4fdbaace32b4eb580df/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c9cfe65526997e6043d4fdbaace32b4eb580df/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=46c9cfe65526997e6043d4fdbaace32b4eb580df",
        "patch": "@@ -82,6 +82,7 @@ def run_test(self):\n         self.generate(self.nodes[0], 5)\n \n         self.getrawtransaction_tests()\n+        self.getrawtransaction_verbosity_tests()\n         self.createrawtransaction_tests()\n         self.signrawtransactionwithwallet_tests()\n         self.sendrawtransaction_tests()\n@@ -113,21 +114,23 @@ def getrawtransaction_tests(self):\n             assert_equal(self.nodes[n].getrawtransaction(txId, False), rawTxSigned['hex'])\n \n             # 4. valid parameters - supply txid and 1 for verbose.\n-            # We only check the \"hex\" field of the output so we don't need to update this test every time the output format changes.\n+            # We only check the \"hex\" field of the output, getrawtransaction_verbosity_tests checks remaining fields\n             assert_equal(self.nodes[n].getrawtransaction(txId, 1)[\"hex\"], rawTxSigned['hex'])\n+            assert_equal(self.nodes[n].getrawtransaction(txId, 2)[\"hex\"], rawTxSigned['hex'])\n \n             # 5. valid parameters - supply txid and True for non-verbose\n             assert_equal(self.nodes[n].getrawtransaction(txId, True)[\"hex\"], rawTxSigned['hex'])\n \n             # 6. invalid parameters - supply txid and invalid boolean values (strings) for verbose\n             for value in [\"True\", \"False\"]:\n-                assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid=txId, verbose=value)\n+                assert_raises_rpc_error(-1, \"not an integer\", self.nodes[n].getrawtransaction, txid=txId, verbose=value)\n+                assert_raises_rpc_error(-1, \"not an integer\", self.nodes[n].getrawtransaction, txid=txId, verbosity=value)\n \n             # 7. invalid parameters - supply txid and empty array\n-            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, [])\n+            assert_raises_rpc_error(-1, \"not an integer\", self.nodes[n].getrawtransaction, txId, [])\n \n             # 8. invalid parameters - supply txid and empty dict\n-            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, {})\n+            assert_raises_rpc_error(-1, \"not an integer\", self.nodes[n].getrawtransaction, txId, {})\n \n         # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n@@ -140,9 +143,10 @@ def getrawtransaction_tests(self):\n             assert_equal(gottx['in_active_chain'], True)\n             if n == 0:\n                 self.log.info(\"Test getrawtransaction with -txindex, without blockhash: 'in_active_chain' should be absent\")\n-                gottx = self.nodes[n].getrawtransaction(txid=tx, verbose=True)\n-                assert_equal(gottx['txid'], tx)\n-                assert 'in_active_chain' not in gottx\n+                for v in [1,2]:\n+                    gottx = self.nodes[n].getrawtransaction(txid=tx, verbosity=v)\n+                    assert_equal(gottx['txid'], tx)\n+                    assert 'in_active_chain' not in gottx\n             else:\n                 self.log.info(\"Test getrawtransaction without -txindex, without blockhash: expect the call to raise\")\n                 err_msg = (\n@@ -171,6 +175,67 @@ def getrawtransaction_tests(self):\n         block = self.nodes[0].getblock(self.nodes[0].getblockhash(0))\n         assert_raises_rpc_error(-5, \"The genesis block coinbase is not considered an ordinary transaction\", self.nodes[0].getrawtransaction, block['merkleroot'])\n \n+    def getrawtransaction_verbosity_tests(self):\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        [block1] = self.generate(self.nodes[2], 1)\n+        fields = [\n+            'blockhash',\n+            'blocktime',\n+            'confirmations',\n+            'hash',\n+            'hex',\n+            'in_active_chain',\n+            'locktime',\n+            'size',\n+            'time',\n+            'txid',\n+            'vin',\n+            'vout',\n+            'vsize',\n+            'weight'\n+        ]\n+        prevout_fields = [\n+            'generated',\n+            'height',\n+            'value',\n+            'scriptPubKey'\n+        ]\n+        script_pub_key_fields = [\n+            'address',\n+            'asm',\n+            'hex',\n+            'type'\n+        ]\n+        for n in [0, 3]:\n+            for v in [1,2]:\n+                self.log.info(f\"Test getrawtransaction_verbosity {v} {'with' if n == 0 else 'without'} -txindex, with blockhash\")\n+                gottx = self.nodes[n].getrawtransaction(txid=tx, verbosity=v, blockhash=block1)\n+                for f in fields:\n+                    if f not in gottx:\n+                        raise AssertionError(f\"field {f} is not in transaction\")\n+                    if v == 1:\n+                        assert('fee' not in gottx)\n+                        assert(len(gottx['vin']) > 0)\n+                        assert('prevout' not in gottx['vin'][0])\n+                    if v == 2:\n+                        assert('fee' in gottx)\n+                        assert(isinstance(gottx['fee'], Decimal))\n+                        assert(len(gottx['vin']) > 0)\n+                        assert('prevout' in gottx['vin'][0])\n+                        prevout = gottx['vin'][0]['prevout']\n+                        for prevout_field in prevout_fields:\n+                            if prevout_field not in prevout:\n+                                raise AssertionError(f\"field {prevout_field} is not in transaction prevout {prevout}\")\n+                        script_pub_key = prevout['scriptPubKey']\n+                        for script_field in script_pub_key_fields:\n+                            if script_field not in script_pub_key:\n+                                raise AssertionError(f\"field {script_field} is not in transaction scriptPubKey {script_pub_key}\")\n+\n+        # check that coinbase has no fee or does not throw any errors for verbosity 2\n+        coin_base = self.nodes[2].getblock(block1)['tx'][0]\n+        gottx = self.nodes[2].getrawtransaction(txid=coin_base, verbosity=2, blockhash=block1)\n+        assert('fee' not in gottx)\n+\n     def createrawtransaction_tests(self):\n         self.log.info(\"Test createrawtransaction\")\n         # Test `createrawtransaction` required parameters"
      }
    ]
  }
]