[
  {
    "sha": "fa7ddccef7ef1325f38e15d17c28371d09b69f2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdkZGNjZWY3ZWYxMzI1ZjM4ZTE1ZDE3YzI4MzcxZDA5YjY5ZjJm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-12-20T22:20:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-12-20T23:23:26Z"
      },
      "message": "wallet: Remove sendfree\n\nThis removes the option from the wallet to not pay a fee on \"small\"\ntransactions which spend \"old\" inputs.\n\nThis code is no longer worth keeping around, as almost all miners\nprefer not to include transactions which pay no fee at all.",
      "tree": {
        "sha": "065aedbb8a801d1f9a98020da72058be8b6e92da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/065aedbb8a801d1f9a98020da72058be8b6e92da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7ddccef7ef1325f38e15d17c28371d09b69f2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7ddccef7ef1325f38e15d17c28371d09b69f2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7ddccef7ef1325f38e15d17c28371d09b69f2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7ddccef7ef1325f38e15d17c28371d09b69f2f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a70572049d0e8a2e9228e7acf0e07d61996c33c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a70572049d0e8a2e9228e7acf0e07d61996c33c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a70572049d0e8a2e9228e7acf0e07d61996c33c"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 3,
      "deletions": 61
    },
    "files": [
      {
        "sha": "185bc0acc4f44d0cdc05fcb0b3d9d994f85389ac",
        "filename": "contrib/debian/examples/bitcoin.conf",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ddccef7ef1325f38e15d17c28371d09b69f2f/contrib/debian/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ddccef7ef1325f38e15d17c28371d09b69f2f/contrib/debian/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/bitcoin.conf?ref=fa7ddccef7ef1325f38e15d17c28371d09b69f2f",
        "patch": "@@ -97,9 +97,6 @@\n \n # Transaction Fee Changes in 0.10.0\n \n-# Send transactions as zero-fee transactions if possible (default: 0)\n-#sendfreetransactions=0\n-\n # Create transactions that have enough fees (or priority) so they are likely to begin confirmation within n blocks (default: 1).\n # This setting is over-ridden by the -paytxfee option.\n #txconfirmtarget=n"
      },
      {
        "sha": "a8cced3857f2097f496693e0afd25e4d658ed56e",
        "filename": "contrib/devtools/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ddccef7ef1325f38e15d17c28371d09b69f2f/contrib/devtools/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ddccef7ef1325f38e15d17c28371d09b69f2f/contrib/devtools/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-doc.py?ref=fa7ddccef7ef1325f38e15d17c28371d09b69f2f",
        "patch": "@@ -21,7 +21,7 @@\n REGEX_ARG = re.compile(r'(?:map(?:Multi)?Args(?:\\.count\\(|\\[)|Get(?:Bool)?Arg\\()\\\"(\\-[^\\\"]+?)\\\"')\n REGEX_DOC = re.compile(r'HelpMessageOpt\\(\\\"(\\-[^\\\"=]+?)(?:=|\\\")')\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize'])\n+SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize', '-sendfreetransactions'])\n \n def main():\n   used = check_output(CMD_GREP_ARGS, shell=True)"
      },
      {
        "sha": "ee463903a3e78fe0a052196ec746cf5b90fc7bde",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ddccef7ef1325f38e15d17c28371d09b69f2f/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ddccef7ef1325f38e15d17c28371d09b69f2f/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=fa7ddccef7ef1325f38e15d17c28371d09b69f2f",
        "patch": "@@ -443,11 +443,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     CAmount nChange             = 0;\n     unsigned int nBytes         = 0;\n     unsigned int nBytesInputs   = 0;\n-    double dPriority            = 0;\n-    double dPriorityInputs      = 0;\n     unsigned int nQuantity      = 0;\n-    int nQuantityUncompressed   = 0;\n-    bool fAllowFree             = false;\n     bool fWitness               = false;\n \n     std::vector<COutPoint> vCoinControl;\n@@ -472,9 +468,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         // Amount\n         nAmount += out.tx->tx->vout[out.i].nValue;\n \n-        // Priority\n-        dPriorityInputs += (double)out.tx->tx->vout[out.i].nValue * (out.nDepth+1);\n-\n         // Bytes\n         CTxDestination address;\n         int witnessversion = 0;\n@@ -491,8 +484,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             if (keyid && model->getPubKey(*keyid, pubkey))\n             {\n                 nBytesInputs += (pubkey.IsCompressed() ? 148 : 180);\n-                if (!pubkey.IsCompressed())\n-                    nQuantityUncompressed++;\n             }\n             else\n                 nBytesInputs += 148; // in all error cases, simply assume 148 here\n@@ -524,17 +515,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         if (nPayFee > 0 && coinControl->nMinimumTotalFee > nPayFee)\n             nPayFee = coinControl->nMinimumTotalFee;\n \n-\n-        // Allow free? (require at least hard-coded threshold and default to that if no estimate)\n-        double mempoolEstimatePriority = mempool.estimateSmartPriority(nTxConfirmTarget);\n-        dPriority = dPriorityInputs / (nBytes - nBytesInputs + (nQuantityUncompressed * 29)); // 29 = 180 - 151 (uncompressed public keys are over the limit. max 151 bytes of the input are ignored for priority)\n-        double dPriorityNeeded = std::max(mempoolEstimatePriority, AllowFreeThreshold());\n-        fAllowFree = (dPriority >= dPriorityNeeded);\n-\n-        if (fSendFreeTransactions)\n-            if (fAllowFree && nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE)\n-                nPayFee = 0;\n-\n         if (nPayAmount > 0)\n         {\n             nChange = nAmount - nPayAmount;"
      },
      {
        "sha": "6e38619bd0a268ac0705f6c8be73d3080d487f5d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 32,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ddccef7ef1325f38e15d17c28371d09b69f2f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ddccef7ef1325f38e15d17c28371d09b69f2f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa7ddccef7ef1325f38e15d17c28371d09b69f2f",
        "patch": "@@ -39,7 +39,6 @@ CWallet* pwalletMain = NULL;\n CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n-bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n bool fWalletRbf = DEFAULT_WALLET_RBF;\n \n const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n@@ -2319,7 +2318,6 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 CAmount nValueToSelect = nValue;\n                 if (nSubtractFeeFromAmount == 0)\n                     nValueToSelect += nFeeRet;\n-                double dPriority = 0;\n                 // vouts to the payees\n                 BOOST_FOREACH (const CRecipient& recipient, vecSend)\n                 {\n@@ -2360,19 +2358,6 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n-                BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n-                {\n-                    CAmount nCredit = pcoin.first->tx->vout[pcoin.second].nValue;\n-                    //The coin age after the next block (depth+1) is used instead of the current,\n-                    //reflecting an assumption the user would accept a bit more delay for\n-                    //a chance at a free transaction.\n-                    //But mempool inputs might still be in the mempool, so their age stays 0\n-                    int age = pcoin.first->GetDepthInMainChain();\n-                    assert(age >= 0);\n-                    if (age != 0)\n-                        age += 1;\n-                    dPriority += (double)nCredit * age;\n-                }\n \n                 const CAmount nChange = nValueIn - nValueToSelect;\n                 if (nChange > 0)\n@@ -2518,23 +2503,11 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     return false;\n                 }\n \n-                dPriority = wtxNew.tx->ComputePriority(dPriority, nBytes);\n-\n                 // Allow to override the default confirmation target over the CoinControl instance\n                 int currentConfirmationTarget = nTxConfirmTarget;\n                 if (coinControl && coinControl->nConfirmTarget > 0)\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n-                // Can we complete this as a free transaction?\n-                if (fSendFreeTransactions && nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE)\n-                {\n-                    // Not enough fee: enough priority?\n-                    double dPriorityNeeded = mempool.estimateSmartPriority(currentConfirmationTarget);\n-                    // Require at least hard-coded AllowFree.\n-                    if (dPriority >= dPriorityNeeded && AllowFree(dPriority))\n-                        break;\n-                }\n-\n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, mempool);\n                 if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {\n                     nFeeNeeded = coinControl->nMinimumTotalFee;\n@@ -3379,8 +3352,6 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n                                                             CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), DEFAULT_SEND_FREE_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_USE_HD_WALLET));\n@@ -3670,11 +3641,10 @@ bool CWallet::ParameterInteraction()\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n     bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n     fWalletRbf = GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n \n-    if (fSendFreeTransactions && GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) <= 0)\n-        return InitError(\"Creation of free transactions with their relay disabled is not supported.\");\n+    if (GetBoolArg(\"-sendfreetransactions\", false))\n+        InitWarning(\"The argument -sendfreetransactions is no longer supported.\");\n \n     return true;\n }"
      },
      {
        "sha": "7c06adbbc1be0f46a0aad1ec4559fcd7b7c523cb",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ddccef7ef1325f38e15d17c28371d09b69f2f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ddccef7ef1325f38e15d17c28371d09b69f2f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fa7ddccef7ef1325f38e15d17c28371d09b69f2f",
        "patch": "@@ -37,7 +37,6 @@ extern CWallet* pwalletMain;\n extern CFeeRate payTxFee;\n extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n-extern bool fSendFreeTransactions;\n extern bool fWalletRbf;\n \n static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n@@ -51,16 +50,12 @@ static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n static const CAmount MIN_CHANGE = CENT;\n //! Default for -spendzeroconfchange\n static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n-//! Default for -sendfreetransactions\n-static const bool DEFAULT_SEND_FREE_TRANSACTIONS = false;\n //! Default for -walletrejectlongchains\n static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = false;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n //! -walletrbf default\n static const bool DEFAULT_WALLET_RBF = false;\n-//! Largest (in bytes) free transaction we're willing to create\n-static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n //! if set, all keys will be derived by using BIP32"
      }
    ]
  }
]