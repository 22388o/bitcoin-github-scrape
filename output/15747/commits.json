[
  {
    "sha": "fa57411fcba00556ba25d45bca53cc04623da051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU3NDExZmNiYTAwNTU2YmEyNWQ0NWJjYTUzY2MwNDYyM2RhMDUx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-11T20:12:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-04T17:22:08Z"
      },
      "message": "wallet: Get all balances in one call",
      "tree": {
        "sha": "4c5d2cc2163356008e9ad6802b8544526216e805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c5d2cc2163356008e9ad6802b8544526216e805"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa57411fcba00556ba25d45bca53cc04623da051",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcKq2AAAoJEM4rdWl+aaVIzJML/jD4J10NrIbj3rG7izRH9UcT\nKADlvMoMvZ9gwGgGQV/fWHhuTItQxUUlBXVhqNm925DndL5cz6jPfsGzKSocy34o\n3tNs+xP6GE+PyfmqITU4KN6H0X3zkxWiqvgi10aweOOZCROc3kDr6pzpSAUumup7\nnP9ptZdh49BR0+5F4rlO03sMO7Kd5y7+WqYleey7DzpTCWh71f7YDu8AO5arF8fF\nBfxrZPwpagMRqXVFx/Ft8Be8c9zpxdmZnK7gi+eLilgqomsl6XWmhyzYTzw91psj\norunBjta7ZNVT6WZorTWr3WZHHXsp+0nX+P2AzUYiSN52W/kmNdjxAntEPMW4+9E\ngh5+giJL6Fxcr8YkVCoRfTakqUImBv9+czVzEIehkdNfxTZfPxK6sdPSbA0Tvpv6\n9qpAGqfjScmNTLncva/dwBGJUH4+GOFD0bODE0TXJWZ1ZScJCYDdFcZ4WTo2qiKp\nYWyNtHrYv9H5tJAHBPManE6i9P9t7SAn8+3ztjhCTw==\n=YXpH\n-----END PGP SIGNATURE-----",
        "payload": "tree 4c5d2cc2163356008e9ad6802b8544526216e805\nparent daef20fb50c00240ea4a5d653f3a47ee604d25c1\nauthor MarcoFalke <falke.marco@gmail.com> 1552335178 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1554398528 -0400\n\nwallet: Get all balances in one call\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa57411fcba00556ba25d45bca53cc04623da051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa57411fcba00556ba25d45bca53cc04623da051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa57411fcba00556ba25d45bca53cc04623da051/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "daef20fb50c00240ea4a5d653f3a47ee604d25c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daef20fb50c00240ea4a5d653f3a47ee604d25c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/daef20fb50c00240ea4a5d653f3a47ee604d25c1"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 48,
      "deletions": 92
    },
    "files": [
      {
        "sha": "0bb9739c9c0afb823da85d616902b6eec5c58585",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa57411fcba00556ba25d45bca53cc04623da051/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa57411fcba00556ba25d45bca53cc04623da051/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=fa57411fcba00556ba25d45bca53cc04623da051",
        "patch": "@@ -358,15 +358,16 @@ class WalletImpl : public Wallet\n     }\n     WalletBalances getBalances() override\n     {\n+        const auto bal = m_wallet->GetBalance();\n         WalletBalances result;\n-        result.balance = m_wallet->GetBalance();\n-        result.unconfirmed_balance = m_wallet->GetUnconfirmedBalance();\n-        result.immature_balance = m_wallet->GetImmatureBalance();\n+        result.balance = bal.m_mine_trusted;\n+        result.unconfirmed_balance = bal.m_mine_untrusted_pending;\n+        result.immature_balance = bal.m_mine_immature;\n         result.have_watch_only = m_wallet->HaveWatchOnly();\n         if (result.have_watch_only) {\n-            result.watch_only_balance = m_wallet->GetBalance(ISMINE_WATCH_ONLY);\n-            result.unconfirmed_watch_only_balance = m_wallet->GetUnconfirmedWatchOnlyBalance();\n-            result.immature_watch_only_balance = m_wallet->GetImmatureWatchOnlyBalance();\n+            result.watch_only_balance = bal.m_watchonly_trusted;\n+            result.unconfirmed_watch_only_balance = bal.m_watchonly_untrusted_pending;\n+            result.immature_watch_only_balance = bal.m_watchonly_immature;\n         }\n         return result;\n     }\n@@ -382,7 +383,7 @@ class WalletImpl : public Wallet\n         num_blocks = locked_chain->getHeight().get_value_or(-1);\n         return true;\n     }\n-    CAmount getBalance() override { return m_wallet->GetBalance(); }\n+    CAmount getBalance() override { return m_wallet->GetBalance().m_mine_trusted; }\n     CAmount getAvailableBalance(const CCoinControl& coin_control) override\n     {\n         return m_wallet->GetAvailableBalance(&coin_control);"
      },
      {
        "sha": "d9ae0b9bd638604e93aedaef3b38bc315e634d17",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa57411fcba00556ba25d45bca53cc04623da051/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa57411fcba00556ba25d45bca53cc04623da051/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa57411fcba00556ba25d45bca53cc04623da051",
        "patch": "@@ -308,7 +308,7 @@ static UniValue setlabel(const JSONRPCRequest& request)\n \n static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue)\n {\n-    CAmount curBalance = pwallet->GetBalance();\n+    CAmount curBalance = pwallet->GetBalance().m_mine_trusted;\n \n     // Check amount\n     if (nValue <= 0)\n@@ -761,12 +761,14 @@ static UniValue getbalance(const JSONRPCRequest& request)\n         min_depth = request.params[1].get_int();\n     }\n \n-    isminefilter filter = ISMINE_SPENDABLE;\n+    bool include_watchonly = false;\n     if (!request.params[2].isNull() && request.params[2].get_bool()) {\n-        filter = filter | ISMINE_WATCH_ONLY;\n+        include_watchonly = true;\n     }\n \n-    return ValueFromAmount(pwallet->GetBalance(filter, min_depth));\n+    const auto bal = pwallet->GetBalance(min_depth);\n+\n+    return ValueFromAmount(bal.m_mine_trusted + (include_watchonly ? bal.m_watchonly_trusted : 0));\n }\n \n static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n@@ -794,7 +796,7 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    return ValueFromAmount(pwallet->GetUnconfirmedBalance());\n+    return ValueFromAmount(pwallet->GetBalance().m_mine_untrusted_pending);\n }\n \n \n@@ -2416,11 +2418,12 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     UniValue obj(UniValue::VOBJ);\n \n     size_t kpExternalSize = pwallet->KeypoolCountExternalKeys();\n+    const auto bal = pwallet->GetBalance();\n     obj.pushKV(\"walletname\", pwallet->GetName());\n     obj.pushKV(\"walletversion\", pwallet->GetVersion());\n-    obj.pushKV(\"balance\",       ValueFromAmount(pwallet->GetBalance()));\n-    obj.pushKV(\"unconfirmed_balance\", ValueFromAmount(pwallet->GetUnconfirmedBalance()));\n-    obj.pushKV(\"immature_balance\",    ValueFromAmount(pwallet->GetImmatureBalance()));\n+    obj.pushKV(\"balance\", ValueFromAmount(bal.m_mine_trusted));\n+    obj.pushKV(\"unconfirmed_balance\", ValueFromAmount(bal.m_mine_untrusted_pending));\n+    obj.pushKV(\"immature_balance\", ValueFromAmount(bal.m_mine_immature));\n     obj.pushKV(\"txcount\",       (int)pwallet->mapWallet.size());\n     obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n     obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);"
      },
      {
        "sha": "7c8085dc20c6abe55b1b624a4bb68a0b5f79b956",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa57411fcba00556ba25d45bca53cc04623da051/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa57411fcba00556ba25d45bca53cc04623da051/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fa57411fcba00556ba25d45bca53cc04623da051",
        "patch": "@@ -58,7 +58,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         BOOST_CHECK(result.last_failed_block.IsNull());\n         BOOST_CHECK(result.last_scanned_block.IsNull());\n         BOOST_CHECK(!result.last_scanned_height);\n-        BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 0);\n+        BOOST_CHECK_EQUAL(wallet.GetBalance().m_mine_immature, 0);\n     }\n \n     // Verify ScanForWalletTransactions picks up transactions in both the old\n@@ -73,7 +73,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         BOOST_CHECK(result.last_failed_block.IsNull());\n         BOOST_CHECK_EQUAL(result.last_scanned_block, newTip->GetBlockHash());\n         BOOST_CHECK_EQUAL(*result.last_scanned_height, newTip->nHeight);\n-        BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n+        BOOST_CHECK_EQUAL(wallet.GetBalance().m_mine_immature, 100 * COIN);\n     }\n \n     // Prune the older block file.\n@@ -92,7 +92,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         BOOST_CHECK_EQUAL(result.last_failed_block, oldTip->GetBlockHash());\n         BOOST_CHECK_EQUAL(result.last_scanned_block, newTip->GetBlockHash());\n         BOOST_CHECK_EQUAL(*result.last_scanned_height, newTip->nHeight);\n-        BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n+        BOOST_CHECK_EQUAL(wallet.GetBalance().m_mine_immature, 50 * COIN);\n     }\n \n     // Prune the remaining block file.\n@@ -110,7 +110,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         BOOST_CHECK_EQUAL(result.last_failed_block, newTip->GetBlockHash());\n         BOOST_CHECK(result.last_scanned_block.IsNull());\n         BOOST_CHECK(!result.last_scanned_height);\n-        BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 0);\n+        BOOST_CHECK_EQUAL(wallet.GetBalance().m_mine_immature, 0);\n     }\n }\n "
      },
      {
        "sha": "b62ab0c514e388560d8204c8cf784561008ad88b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 68,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa57411fcba00556ba25d45bca53cc04623da051/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa57411fcba00556ba25d45bca53cc04623da051/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa57411fcba00556ba25d45bca53cc04623da051",
        "patch": "@@ -2154,84 +2154,32 @@ void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain, in\n  */\n \n \n-CAmount CWallet::GetBalance(const isminefilter& filter, const int min_depth) const\n+CWallet::Balance CWallet::GetBalance(const int min_depth) const\n {\n-    CAmount nTotal = 0;\n+    Balance ret;\n     {\n         auto locked_chain = chain().lock();\n         LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx& wtx = entry.second;\n-            if (wtx.IsTrusted(*locked_chain) && wtx.GetDepthInMainChain(*locked_chain) >= min_depth) {\n-                nTotal += wtx.GetAvailableCredit(*locked_chain, true, filter);\n+            const bool is_trusted{wtx.IsTrusted(*locked_chain)};\n+            const int tx_depth{wtx.GetDepthInMainChain(*locked_chain)};\n+            const CAmount tx_credit_mine{wtx.GetAvailableCredit(*locked_chain, /* fUseCache */ true, ISMINE_SPENDABLE)};\n+            const CAmount tx_credit_watchonly{wtx.GetAvailableCredit(*locked_chain, /* fUseCache */ true, ISMINE_WATCH_ONLY)};\n+            if (is_trusted && tx_depth >= min_depth) {\n+                ret.m_mine_trusted += tx_credit_mine;\n+                ret.m_watchonly_trusted += tx_credit_watchonly;\n             }\n+            if (!is_trusted && tx_depth == 0 && wtx.InMempool()) {\n+                ret.m_mine_untrusted_pending += tx_credit_mine;\n+                ret.m_watchonly_untrusted_pending += tx_credit_watchonly;\n+            }\n+            ret.m_mine_immature += wtx.GetImmatureCredit(*locked_chain);\n+            ret.m_watchonly_immature += wtx.GetImmatureWatchOnlyCredit(*locked_chain);\n         }\n     }\n-\n-    return nTotal;\n-}\n-\n-CAmount CWallet::GetUnconfirmedBalance() const\n-{\n-    CAmount nTotal = 0;\n-    {\n-        auto locked_chain = chain().lock();\n-        LOCK(cs_wallet);\n-        for (const auto& entry : mapWallet)\n-        {\n-            const CWalletTx& wtx = entry.second;\n-            if (!wtx.IsTrusted(*locked_chain) && wtx.GetDepthInMainChain(*locked_chain) == 0 && wtx.InMempool())\n-                nTotal += wtx.GetAvailableCredit(*locked_chain);\n-        }\n-    }\n-    return nTotal;\n-}\n-\n-CAmount CWallet::GetImmatureBalance() const\n-{\n-    CAmount nTotal = 0;\n-    {\n-        auto locked_chain = chain().lock();\n-        LOCK(cs_wallet);\n-        for (const auto& entry : mapWallet)\n-        {\n-            const CWalletTx& wtx = entry.second;\n-            nTotal += wtx.GetImmatureCredit(*locked_chain);\n-        }\n-    }\n-    return nTotal;\n-}\n-\n-CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n-{\n-    CAmount nTotal = 0;\n-    {\n-        auto locked_chain = chain().lock();\n-        LOCK(cs_wallet);\n-        for (const auto& entry : mapWallet)\n-        {\n-            const CWalletTx& wtx = entry.second;\n-            if (!wtx.IsTrusted(*locked_chain) && wtx.GetDepthInMainChain(*locked_chain) == 0 && wtx.InMempool())\n-                nTotal += wtx.GetAvailableCredit(*locked_chain, true, ISMINE_WATCH_ONLY);\n-        }\n-    }\n-    return nTotal;\n-}\n-\n-CAmount CWallet::GetImmatureWatchOnlyBalance() const\n-{\n-    CAmount nTotal = 0;\n-    {\n-        auto locked_chain = chain().lock();\n-        LOCK(cs_wallet);\n-        for (const auto& entry : mapWallet)\n-        {\n-            const CWalletTx& wtx = entry.second;\n-            nTotal += wtx.GetImmatureWatchOnlyCredit(*locked_chain);\n-        }\n-    }\n-    return nTotal;\n+    return ret;\n }\n \n CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const"
      },
      {
        "sha": "fd274fa375abeb309a1277f434bd0407165ec72b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa57411fcba00556ba25d45bca53cc04623da051/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa57411fcba00556ba25d45bca53cc04623da051/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fa57411fcba00556ba25d45bca53cc04623da051",
        "patch": "@@ -947,11 +947,15 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions(interfaces::Chain::Lock& locked_chain, int64_t nBestBlockTime) override;\n-    CAmount GetBalance(const isminefilter& filter=ISMINE_SPENDABLE, const int min_depth=0) const;\n-    CAmount GetUnconfirmedBalance() const;\n-    CAmount GetImmatureBalance() const;\n-    CAmount GetUnconfirmedWatchOnlyBalance() const;\n-    CAmount GetImmatureWatchOnlyBalance() const;\n+    struct Balance {\n+        CAmount m_mine_trusted{0};           //!< Trusted, at depth=GetBalance.min_depth or more\n+        CAmount m_mine_untrusted_pending{0}; //!< Untrusted, but in mempool (pending)\n+        CAmount m_mine_immature{0};          //!< Immature coinbases in the main chain\n+        CAmount m_watchonly_trusted{0};\n+        CAmount m_watchonly_untrusted_pending{0};\n+        CAmount m_watchonly_immature{0};\n+    };\n+    Balance GetBalance(int min_depth = 0) const;\n     CAmount GetAvailableBalance(const CCoinControl* coinControl = nullptr) const;\n \n     OutputType TransactionChangeType(OutputType change_type, const std::vector<CRecipient>& vecSend);"
      }
    ]
  }
]