DrahtBot,2019-12-07 23:13:36,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18531 (rpc: Assert that RPCArg names are equal to CRPCCommand ones by MarcoFalke)\n\nIf you consider this pull request im",https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-562895071,562895071,
luke-jr,2020-01-03 19:06:31,"~~Concept NACK,~~ just make the block and submit it in the test suite...",https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-570667415,570667415,
andrewtoth,2020-01-05 16:14:34,"@luke-jr What if there is no ""test suite""? Usually when testing a system that talks to bitcoind with regtest I use cli to send from bitcoind wallet and `generatetoaddress` to mine blocks. With this setup it is very difficult to simulate double spend without having a second bitcoind and doing an extensive workaround. This seems to have a decent amount of interest, since this PR had a thumbs up and ",https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-570925533,570925533,
luke-jr,2020-01-05 16:37:13,Fair enough. Concept NACK retracted.,https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-570927375,570927375,
instagibbs,2020-02-20 15:23:49,"concept ACK, we need it to test our systems as well",https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-589117273,589117273,
sipa,2020-03-17 00:10:20,"Concept ACK on having an RPC that can do this, but I'm not convinced about the approach (see comment elsewhere).",https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-599813644,599813644,
instagibbs,2020-03-17 01:06:00,"I'll take another look this week. Maybe I need to see the approaches side\nby side.\nOn Mon, Mar 16, 2020, 8:40 PM andrewtoth <notifications@github.com> wrote:\n\n> *@andrewtoth* commented on this pull request.\n> ------------------------------\n>\n> In src/miner.cpp\n> <https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393384945>:\n>\n> >      nFees = 0;\n>  }\n>\n>  Optional<int64_t> Blo",https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-599826257,599826257,
sipa,2020-03-17 01:09:03,"Ok, I see. But the first iteration of the code was duplicating everything, including the grinding. I'm suggesting not duplicating the grinding, but by just constructing a BlockTemplate directly, instead of overloading BlockAssembler to do that.",https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-599826971,599826971,
andrewtoth,2020-03-17 04:34:50,@sipa updated with your suggestion.,https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-599872808,599872808,
MarcoFalke,2020-03-27 15:06:23,"ACK caf349793c1b53558345f828db97157402d35e59 üê∞\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK caf349793c1b53558345f828db97157402d35e59 üê∞\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjFywwAl4Th3T4WgpDPkoK+xxcLJYh7AJ/Qh8QcC6pkUKAyTIhZYRsTlf",https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-605050846,605050846,
MarcoFalke,2020-03-27 16:16:30,"re-ACK 7524b6479cb20471d827aec5500925c86c62ce1c üìÅ\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 7524b6479cb20471d827aec5500925c86c62ce1c üìÅ\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUioEAv/XByMTYwhQ58oELwHk0VDhpY7mgGWvhdkpepTAj3h6ubQ",https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-605089079,605089079,
andrewtoth,2020-03-27 17:24:52,Does this need release notes?,https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-605132855,605132855,
MarcoFalke,2020-03-27 18:36:46,"A one-line release note in the ""tests"" section should be sufficient. This can be done after merge, since it is not clear if this makes it into 0.20 or 0.21\n\nIt only affects test, so it might make it into 0.20, but I wanted to wait for other reviewers first.",https://github.com/bitcoin/bitcoin/pull/17693#issuecomment-605204369,605204369,
MarcoFalke,2020-03-16 17:12:41,Needs rebase,https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393184185,393184185,src/rpc/mining.cpp
sipa,2020-03-17 00:09:24,What do you need `BlockAssembler` for when you have a preselected set of transactions? Can't you construct a `CBlockTemplate` directly?,https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393377634,393377634,src/miner.cpp
andrewtoth,2020-03-17 00:40:43,"I did initially https://github.com/bitcoin/bitcoin/pull/17653/commits/b0745f8dc517501f612b56a0cee726e5bc4c4c8c but @instagibbs suggested I take this approach instead https://github.com/bitcoin/bitcoin/pull/17653#issuecomment-561225955. Now I'm not sure which is better, duplicating a lot of code from `BlockAssembler` or modifying it to support adding preselected txs.",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393384945,393384945,src/miner.cpp
MarcoFalke,2020-03-17 13:31:54,I think the string does not need to be wrapped in an object and can be returned as is.,https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393680472,393680472,src/rpc/mining.cpp
MarcoFalke,2020-03-17 13:49:59,Why is this code moved into this function? It could stay at the original place and here you just pass in a `shared_ptr` of the resulting block?,https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393692622,393692622,src/rpc/mining.cpp
MarcoFalke,2020-03-17 13:54:31,"Why is this code (and the lines above it) in this function? It could be either inlined in the rpc, or if you prefer wrapped into another function that returns a `shared_ptr` of the block, which gets then passed in here.\n\nThis makes this function simpler (has one purpose: mining) and has less redundant parameters passed in (like the mempool, which is not needed in this branch at all)",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393695690,393695690,src/rpc/mining.cpp
andrewtoth,2020-03-17 14:01:59,"I was attempting to follow the guidelines from https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#rpc-interface-guidelines: \n\n- Try to make the RPC response a JSON object.\n\n  - *Rationale*: If a RPC response is not a JSON object, then it is harder to avoid API breakage if\n    new data in the response is needed.\n",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393700854,393700854,src/rpc/mining.cpp
MarcoFalke,2020-03-17 14:25:23,"Interesting, I forgot about that. Thanks for reminding.",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393717939,393717939,src/rpc/mining.cpp
instagibbs,2020-03-17 14:27:24,"It's a great guideline, glad it's written down!",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393719475,393719475,src/rpc/mining.cpp
instagibbs,2020-03-17 14:35:01,`s/a set of transactions/a set of ordered transactions/` to be pedantic,https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393725241,393725241,src/rpc/mining.cpp
instagibbs,2020-03-17 14:37:35,comment for followup only: Allow a bypass of validity check for building block tests via RPC,https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393727104,393727104,src/rpc/mining.cpp
instagibbs,2020-03-17 14:38:33,"Also note the block constructed must have all valid transactions and transaction ordering, otherwise it will be rejected.",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r393727789,393727789,src/rpc/mining.cpp
andrewtoth,2020-03-22 22:12:33,Separated the code out.,https://github.com/bitcoin/bitcoin/pull/17693#discussion_r396147210,396147210,src/rpc/mining.cpp
MarcoFalke,2020-03-23 14:33:50,"I don't really like duplicating every single line of CreateNewBlock. After #17781 there is no reason that we can't just pass an empty mempool to the miner and get an empty block out.\n\nSee here:\n\n```diff\ndiff --git a/src/miner.cpp b/src/miner.cpp\nindex 61d27d17c1..b769121d97 100644\n--- a/src/miner.cpp\n+++ b/src/miner.cpp\n@@ -39,6 +39,17 @@ int64_t UpdateTime(CBlockHeader* pblock, ",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r396495830,396495830,src/rpc/mining.cpp
andrewtoth,2020-03-27 04:00:18,"Thanks! I used your suggested changes, and I also pulled out some descriptor logic into its own function to dedupe code in both `generateblock` and `generatetodescriptor`.",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r399022770,399022770,src/rpc/mining.cpp
MarcoFalke,2020-03-27 15:07:14,"```suggestion\n# Copyright (c) 2020 The Bitcoin Core developers\n```",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r399333109,399333109,test/functional/rpc_generateblock.py
MarcoFalke,2020-03-27 15:07:24,"```suggestion\n    assert_raises_rpc_error,\n```",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r399333222,399333222,test/functional/rpc_generateblock.py
MarcoFalke,2020-03-27 15:07:49,"```suggestion\n        self.log.info('Generate an empty block to address')\n```\n\nRationale: https://github.com/bitcoin/bitcoin/blob/master/test/functional/README.md#general-test-writing-advice",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r399333500,399333500,test/functional/rpc_generateblock.py
MarcoFalke,2020-03-27 15:07:56,Same here,https://github.com/bitcoin/bitcoin/pull/17693#discussion_r399333574,399333574,test/functional/rpc_generateblock.py
MarcoFalke,2020-03-27 15:08:08,etc ...,https://github.com/bitcoin/bitcoin/pull/17693#discussion_r399333705,399333705,test/functional/rpc_generateblock.py
jnewbery,2021-03-27 10:55:54,"This change means that the extra_nonce logic is now unused. Previously if the nNonce field rolled, we'd go around the loop again and call `IncrementExtraNonce()`. Now we'll just return `true`.\n\nI've proposed removing that logic entirely in #21533.",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r602704082,602704082,src/rpc/mining.cpp
jnewbery,2021-04-14 12:29:06,"Never mind, I misunderstood the new interface for `GenerateBlock()`:\n\n- returns false: generation of block failed\n- returns true with valid block_hash out-param: generation of block succeeded\n- returns true with invalid (nullified) block_hash out-param: generation of block didn't succeed, maximum nNonce reached\n\n(thanks to @theStack for pointing this out: https://github.com/bitcoin/bit",https://github.com/bitcoin/bitcoin/pull/17693#discussion_r613202272,613202272,src/rpc/mining.cpp
