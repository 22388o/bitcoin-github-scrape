[
  {
    "sha": "aa26797f69e6ed10efcad9fb07be7f5b3b0ee513",
    "node_id": "C_kwDOABII59oAKGFhMjY3OTdmNjllNmVkMTBlZmNhZDlmYjA3YmU3ZjViM2IwZWU1MTM",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-23T23:01:52Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-27T11:55:25Z"
      },
      "message": "test: MiniWallet: add `send_to` method to create arbitrary txouts\n\nWith this new method, outputs to an arbitrary scriptPubKey/amount can\nbe created. Note that the implementation was already present in the\ntest feature_rbf.py and is just moved to the MiniWallet interface, in\norder to enable other tests to also use it.",
      "tree": {
        "sha": "64e9d31f71165015a5d6c87dd2ff13dd7c6fb628",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64e9d31f71165015a5d6c87dd2ff13dd7c6fb628"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa26797f69e6ed10efcad9fb07be7f5b3b0ee513",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa26797f69e6ed10efcad9fb07be7f5b3b0ee513",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa26797f69e6ed10efcad9fb07be7f5b3b0ee513",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa26797f69e6ed10efcad9fb07be7f5b3b0ee513/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "632be5514c3161dfdd8730af104f38c27922b855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/632be5514c3161dfdd8730af104f38c27922b855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/632be5514c3161dfdd8730af104f38c27922b855"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 21,
      "deletions": 16
    },
    "files": [
      {
        "sha": "d759a5aab5ee09f4975c12551de36e2dda78f418",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 2,
        "deletions": 16,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa26797f69e6ed10efcad9fb07be7f5b3b0ee513/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa26797f69e6ed10efcad9fb07be7f5b3b0ee513/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=aa26797f69e6ed10efcad9fb07be7f5b3b0ee513",
        "patch": "@@ -19,7 +19,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_greater_than,\n     assert_raises_rpc_error,\n )\n from test_framework.script_util import (\n@@ -96,23 +95,10 @@ def run_test(self):\n     def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n         \"\"\"Create a txout with a given amount and scriptPubKey\n \n-        Assumes that MiniWallet has enough funds to cover the amount and the fixed fee\n-        (from it's internal utxos, the one with the largest value is taken).\n-\n         confirmed - txouts created will be confirmed in the blockchain;\n                     unconfirmed otherwise.\n         \"\"\"\n-        # MiniWallet only supports sweeping utxos to its own internal scriptPubKey, so in\n-        # order to create an output with arbitrary amount/scriptPubKey, we have to add it\n-        # manually after calling the create_self_transfer method. The MiniWallet output's\n-        # nValue has to be adapted accordingly (amount and fee deduction). To keep things\n-        # simple, we use a fixed fee of 1000 Satoshis here.\n-        fee = 1000\n-        tx = self.wallet.create_self_transfer(from_node=node, fee_rate=0, mempool_valid=False)['tx']\n-        assert_greater_than(tx.vout[0].nValue, amount + fee)\n-        tx.vout[0].nValue -= (amount + fee)           # change output -> MiniWallet\n-        tx.vout.append(CTxOut(amount, scriptPubKey))  # desired output -> to be returned\n-        txid = self.wallet.sendrawtransaction(from_node=node, tx_hex=tx.serialize().hex())\n+        txid, n = self.wallet.send_to(from_node=node, scriptPubKey=scriptPubKey, amount=amount)\n \n         # If requested, ensure txouts are confirmed.\n         if confirmed:\n@@ -125,7 +111,7 @@ def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRI\n                 assert new_size < mempool_size\n                 mempool_size = new_size\n \n-        return COutPoint(int(txid, 16), 1)\n+        return COutPoint(int(txid, 16), n)\n \n     def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\""
      },
      {
        "sha": "0fa31e68b6433f7045101450e5368f7a78d58102",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa26797f69e6ed10efcad9fb07be7f5b3b0ee513/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa26797f69e6ed10efcad9fb07be7f5b3b0ee513/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=aa26797f69e6ed10efcad9fb07be7f5b3b0ee513",
        "patch": "@@ -146,6 +146,25 @@ def send_self_transfer(self, **kwargs):\n         self.sendrawtransaction(from_node=kwargs['from_node'], tx_hex=tx['hex'])\n         return tx\n \n+    def send_to(self, *, from_node, scriptPubKey, amount, fee=1000):\n+        \"\"\"\n+        Create and send a tx with an output to a given scriptPubKey/amount,\n+        plus a change output to our internal address. To keep things simple, a\n+        fixed fee given in Satoshi is used.\n+\n+        Note that this method fails if there is no single internal utxo\n+        available that can cover the cost for the amount and the fixed fee\n+        (the utxo with the largest value is taken).\n+\n+        Returns a tuple (txid, n) referring to the created external utxo outpoint.\n+        \"\"\"\n+        tx = self.create_self_transfer(from_node=from_node, fee_rate=0, mempool_valid=False)['tx']\n+        assert_greater_than_or_equal(tx.vout[0].nValue, amount + fee)\n+        tx.vout[0].nValue -= (amount + fee)           # change output -> MiniWallet\n+        tx.vout.append(CTxOut(amount, scriptPubKey))  # arbitrary output -> to be returned\n+        txid = self.sendrawtransaction(from_node=from_node, tx_hex=tx.serialize().hex())\n+        return txid, 1\n+\n     def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None, mempool_valid=True, locktime=0, sequence=0):\n         \"\"\"Create and return a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n         self._utxos = sorted(self._utxos, key=lambda k: k['value'])"
      }
    ]
  },
  {
    "sha": "6fc2cd3f09d023b2e971dcdf8472956259f94c1d",
    "node_id": "C_kwDOABII59oAKDZmYzJjZDNmMDlkMDIzYjJlOTcxZGNkZjg0NzI5NTYyNTlmOTRjMWQ",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-24T15:26:27Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-27T11:55:25Z"
      },
      "message": "test: introduce helper to create random P2WPKH scriptPubKeys",
      "tree": {
        "sha": "2e997c82cf2b00c5e46ee5fde50f52e58e0de45b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e997c82cf2b00c5e46ee5fde50f52e58e0de45b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fc2cd3f09d023b2e971dcdf8472956259f94c1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc2cd3f09d023b2e971dcdf8472956259f94c1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc2cd3f09d023b2e971dcdf8472956259f94c1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc2cd3f09d023b2e971dcdf8472956259f94c1d/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa26797f69e6ed10efcad9fb07be7f5b3b0ee513",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa26797f69e6ed10efcad9fb07be7f5b3b0ee513",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa26797f69e6ed10efcad9fb07be7f5b3b0ee513"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ef27cb3221f14fd5a471aa4774cf747bdeae8665",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fc2cd3f09d023b2e971dcdf8472956259f94c1d/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fc2cd3f09d023b2e971dcdf8472956259f94c1d/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=6fc2cd3f09d023b2e971dcdf8472956259f94c1d",
        "patch": "@@ -28,6 +28,7 @@\n     OP_NOP,\n     SIGHASH_ALL,\n )\n+from test_framework.script_util import key_to_p2wpkh_script\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than_or_equal,\n@@ -207,6 +208,14 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         return txid\n \n \n+def random_p2wpkh():\n+    \"\"\"Generate a random P2WPKH scriptPubKey. Can be used when a random destination is needed,\n+    but no compiled wallet is available (e.g. as replacement to the getnewaddress RPC).\"\"\"\n+    key = ECKey()\n+    key.generate()\n+    return key_to_p2wpkh_script(key.get_pubkey().get_bytes())\n+\n+\n def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None, fee=DEFAULT_FEE):\n     \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n     amount = parent_value with a fee deducted."
      }
    ]
  },
  {
    "sha": "cfdb6baa22b8eb526fcbe1e5131bf4a3fd0cd672",
    "node_id": "C_kwDOABII59oAKGNmZGI2YmFhMjJiOGViNTI2ZmNiZTFlNTEzMWJmNGEzZmQwY2Q2NzI",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-23T23:35:19Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-27T11:55:25Z"
      },
      "message": "test: use MiniWallet for p2p_filter.py\n\nThis test can now be run even with the Bitcoin Core wallet disabled.",
      "tree": {
        "sha": "42ddf368511bbde7c1836f84a06d60ccf0da6d9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42ddf368511bbde7c1836f84a06d60ccf0da6d9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfdb6baa22b8eb526fcbe1e5131bf4a3fd0cd672",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdb6baa22b8eb526fcbe1e5131bf4a3fd0cd672",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfdb6baa22b8eb526fcbe1e5131bf4a3fd0cd672",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdb6baa22b8eb526fcbe1e5131bf4a3fd0cd672/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fc2cd3f09d023b2e971dcdf8472956259f94c1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc2cd3f09d023b2e971dcdf8472956259f94c1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc2cd3f09d023b2e971dcdf8472956259f94c1d"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 20,
      "deletions": 14
    },
    "files": [
      {
        "sha": "0d8c298bea3629f2b02a739a1f57c160927e850a",
        "filename": "test/functional/p2p_filter.py",
        "status": "modified",
        "additions": 20,
        "deletions": 14,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfdb6baa22b8eb526fcbe1e5131bf4a3fd0cd672/test/functional/p2p_filter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfdb6baa22b8eb526fcbe1e5131bf4a3fd0cd672/test/functional/p2p_filter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_filter.py?ref=cfdb6baa22b8eb526fcbe1e5131bf4a3fd0cd672",
        "patch": "@@ -8,6 +8,7 @@\n \n from test_framework.messages import (\n     CInv,\n+    COIN,\n     MAX_BLOOM_FILTER_SIZE,\n     MAX_BLOOM_HASH_FUNCS,\n     MSG_BLOCK,\n@@ -28,11 +29,15 @@\n )\n from test_framework.script import MAX_SCRIPT_ELEMENT_SIZE\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import (\n+    MiniWallet,\n+    random_p2wpkh,\n+)\n \n \n class P2PBloomFilter(P2PInterface):\n     # This is a P2SH watch-only wallet\n-    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    watch_script_pubkey = bytes.fromhex('a914ffffffffffffffffffffffffffffffffffffffff87')\n     # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n     watch_filter_init = msg_filterload(\n         data=\n@@ -93,8 +98,9 @@ def set_test_params(self):\n             '-whitelist=noban@127.0.0.1',  # immediate tx relay\n         ]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n+    def generatetoscriptpubkey(self, scriptpubkey):\n+        \"\"\"Helper to generate a single block to the given scriptPubKey.\"\"\"\n+        return self.generatetodescriptor(self.nodes[0], 1, f'raw({scriptpubkey.hex()})')[0]\n \n     def test_size_limits(self, filter_peer):\n         self.log.info('Check that too large filter is rejected')\n@@ -130,8 +136,7 @@ def test_msg_mempool(self):\n         filter_peer = P2PBloomFilter()\n \n         self.log.debug(\"Create a tx relevant to the peer before connecting\")\n-        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['address']\n-        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n+        txid, _ = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=filter_peer.watch_script_pubkey, amount=9 * COIN)\n \n         self.log.debug(\"Send a mempool msg after connecting and check that the tx is received\")\n         self.nodes[0].add_p2p_connection(filter_peer)\n@@ -142,8 +147,7 @@ def test_msg_mempool(self):\n     def test_frelay_false(self, filter_peer):\n         self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n         filter_peer.tx_received = False\n-        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['address']\n-        self.nodes[0].sendtoaddress(filter_address, 90)\n+        self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=filter_peer.watch_script_pubkey, amount=9 * COIN)\n         # Sync to make sure the reason filter_peer doesn't receive the tx is not p2p delays\n         filter_peer.sync_with_ping()\n         assert not filter_peer.tx_received\n@@ -156,45 +160,44 @@ def test_filter(self, filter_peer):\n         filter_peer.send_and_ping(filter_peer.watch_filter_init)\n         # If fRelay is not already True, sending filterload sets it to True\n         assert self.nodes[0].getpeerinfo()[0]['relaytxes']\n-        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['address']\n \n         self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n-        block_hash = self.generatetoaddress(self.nodes[0], 1, filter_address)[0]\n+        block_hash = self.generatetoscriptpubkey(filter_peer.watch_script_pubkey)\n         txid = self.nodes[0].getblock(block_hash)['tx'][0]\n         filter_peer.wait_for_merkleblock(block_hash)\n         filter_peer.wait_for_tx(txid)\n \n         self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n         filter_peer.tx_received = False\n-        block_hash = self.generatetoaddress(self.nodes[0], 1, self.nodes[0].getnewaddress())[0]\n+        block_hash = self.generatetoscriptpubkey(random_p2wpkh())\n         filter_peer.wait_for_merkleblock(block_hash)\n         assert not filter_peer.tx_received\n \n         self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n         filter_peer.merkleblock_received = False\n         filter_peer.tx_received = False\n-        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n+        self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=random_p2wpkh(), amount=7 * COIN)\n         filter_peer.sync_send_with_ping()\n         assert not filter_peer.merkleblock_received\n         assert not filter_peer.tx_received\n \n         self.log.info('Check that we receive a tx if the filter matches a mempool tx')\n         filter_peer.merkleblock_received = False\n-        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n+        txid, _ = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=filter_peer.watch_script_pubkey, amount=9 * COIN)\n         filter_peer.wait_for_tx(txid)\n         assert not filter_peer.merkleblock_received\n \n         self.log.info('Check that after deleting filter all txs get relayed again')\n         filter_peer.send_and_ping(msg_filterclear())\n         for _ in range(5):\n-            txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 7)\n+            txid, _ = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=random_p2wpkh(), amount=7 * COIN)\n             filter_peer.wait_for_tx(txid)\n \n         self.log.info('Check that request for filtered blocks is ignored if no filter is set')\n         filter_peer.merkleblock_received = False\n         filter_peer.tx_received = False\n         with self.nodes[0].assert_debug_log(expected_msgs=['received getdata']):\n-            block_hash = self.generatetoaddress(self.nodes[0], 1, self.nodes[0].getnewaddress())[0]\n+            block_hash = self.generatetoscriptpubkey(random_p2wpkh())\n             filter_peer.wait_for_inv([CInv(MSG_BLOCK, int(block_hash, 16))])\n             filter_peer.sync_with_ping()\n             assert not filter_peer.merkleblock_received\n@@ -210,6 +213,9 @@ def test_filter(self, filter_peer):\n         self.nodes[0].disconnect_p2ps()\n \n     def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.wallet.rescan_utxos()\n+\n         filter_peer = self.nodes[0].add_p2p_connection(P2PBloomFilter())\n         self.log.info('Test filter size limits')\n         self.test_size_limits(filter_peer)"
      }
    ]
  }
]