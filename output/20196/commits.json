[
  {
    "sha": "18c3955977bf2d8a94b8cd69ee692391384f4175",
    "node_id": "C_kwDOABII59oAKDE4YzM5NTU5NzdiZjJkOGE5NGI4Y2Q2OWVlNjkyMzkxMzg0ZjQxNzU",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-18T13:27:00Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-09-29T09:34:14Z"
      },
      "message": "timedata: make it possible to reset the state\n\nAdd a new function `TestOnlyResetTimeData()` which would reset the\ninternal state used by `GetTimeOffset()`, `GetAdjustedTime()` and\n`AddTimeData()`.\n\nThis is needed so that unit tests that call `AddTimeData()` can restore\nthe state in order not to confuse other tests that rely on it.\n\nCurrently `timedata_tests/addtimedata` is the only test that modifies\nthe state (via `AddTimeData()`) and also the only test that relies on\nthat state.",
      "tree": {
        "sha": "b5fa9ad73325b3a1be58908a56983544fb9390e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5fa9ad73325b3a1be58908a56983544fb9390e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18c3955977bf2d8a94b8cd69ee692391384f4175",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmFUMxcACgkQVN8G9ktV\ny78wYR/8D1UcmKv8mOmFrCvxddWxEFKdV86sNi/f735svk5kLAOACzCa9mbTEfR1\nCjaN6Rd+4PdjN1syAQ15xezOEQitDv5SptZ+XxRBfjRmaSAw6te9rFYkU0ZUBUk4\napSStYAkHj3Cdhm8dNBC2t9VEUHM6rZMco+XdwXkbEwYiXUHDYtiuIfktqXU6cEn\n5HsMDrlHqxMYbTjH2vc1vYqMpnpTz0Nse/0Ezj70w4K0WmBrHid3YB93pp6KBWa4\n8OurrZWbLE7hD27X37QgUCmilIqiayd81/J7QuNNAHkXI3xl3m4cslVSOzHaM3WF\nwbPZeAgK/w2nBqyCWnNwxZELkFkK+AMlWM7edEzw3RIuUjkgKDeJUY0nVgr21RTR\nMwY70Wd/sTO8huOfq6IIaw48Hvs54JPQ4rpTYRDlRlfHNTqBnPfpW5GTkUIw165r\noKF2qw4EUwA4rp1g1QoALbqR+SsL6vOjzQSKPHph8ppWTcOmq7tKBdIvGAgKnJXY\nz+nl/UFpTWjmgxYg++fyN/Q2WBPDDTfnGfjPGSvCFz3WDBClSpmLMHNFHJGkgPrY\nQmw+GyWqiXB1i0luJOTmEfO2SEuJOEhlpX0V4crVVQZFWdup3LqEp2FPsKRTuVWS\ndZDZ1tAP8QnjAtDaiUb2HXDaSF84AQduQfo/0IXakZwhKtHk1mvfhVjzfLxIL6h4\nv/TMTzTNRJ1K3TxTSY7g/c5waMUaJgWxeBviYUs8ZuM+AgkMiCi9dtAnbKVK6IRF\nO0mLLM4hnm7DsWzkBq2eHAQbLJbB/sPZMi1IL4BqCBas09ROqPsYFpP2y3drlYVU\n2YT5tgS9UMKzEH6L7Y9UEnOSJhQkeuQ5Hz1qmger1IyFLOVViZAblXWkTdbdl8RS\nXmslsKpnEL5NONpZQPwcy4bo4Jb3Pq/9SoXs7sJDDmRBo4NkMY9NeFRob55fIOW1\nOuLYaNFpFkrGBinNbwn9s/Vwr4gsQVBYDWY6w31gkcZ2kn3NIF0FyxihFIJcYt7K\nEfxaty41ViXJHxVf02HhvaVF3fmFYlH8efAUPIKerlgi8/qOcRjriW5IxaOtWI+P\npO/DOevXS/6Bspc6/ruCNeEVMzE1O9oymEuRMOxKej0IcjWi24ZdKRUgawZBUv2E\nMZHl9KTBlmooSN6aKLN9sbSaYgpNAEQyyR/AbjPsIQO6bPKd1bZM5b8nMdyPn67/\nap3JCbeGPqCwzkSdI+bXDb98hTaFkQKwp4iYTT9lxTDJ940ue+uyzuQpcoiHYK+O\nG6yKEVk8Vdk2+zL9puyYr1SrDuFUCJWbOYLh/y3gAZnggA7JuzA97VClNyJ5CFUK\nPcCN8BbXHJyLVzd9UBMkoSR7IdsMww==\n=s9Vu\n-----END PGP SIGNATURE-----",
        "payload": "tree b5fa9ad73325b3a1be58908a56983544fb9390e0\nparent ad47fb8b6461333607ffed2bf549d133fd6de659\nauthor Vasil Dimov <vd@FreeBSD.org> 1610976420 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1632908054 +0200\n\ntimedata: make it possible to reset the state\n\nAdd a new function `TestOnlyResetTimeData()` which would reset the\ninternal state used by `GetTimeOffset()`, `GetAdjustedTime()` and\n`AddTimeData()`.\n\nThis is needed so that unit tests that call `AddTimeData()` can restore\nthe state in order not to confuse other tests that rely on it.\n\nCurrently `timedata_tests/addtimedata` is the only test that modifies\nthe state (via `AddTimeData()`) and also the only test that relies on\nthat state.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18c3955977bf2d8a94b8cd69ee692391384f4175",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18c3955977bf2d8a94b8cd69ee692391384f4175",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18c3955977bf2d8a94b8cd69ee692391384f4175/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad47fb8b6461333607ffed2bf549d133fd6de659",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad47fb8b6461333607ffed2bf549d133fd6de659",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad47fb8b6461333607ffed2bf549d133fd6de659"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 20,
      "deletions": 4
    },
    "files": [
      {
        "sha": "478d61d5e2dd183dabdc0f39cc0206f3aef1acbf",
        "filename": "src/test/timedata_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18c3955977bf2d8a94b8cd69ee692391384f4175/src/test/timedata_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18c3955977bf2d8a94b8cd69ee692391384f4175/src/test/timedata_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/timedata_tests.cpp?ref=18c3955977bf2d8a94b8cd69ee692391384f4175",
        "patch": "@@ -96,9 +96,10 @@ BOOST_AUTO_TEST_CASE(addtimedata)\n     // not to fix this because it prevents possible attacks. See the comment in AddTimeData() or issue #4521\n     // for a more detailed explanation.\n     MultiAddTimeData(2, 100); // filter median is 100 now, but nTimeOffset will not change\n+    // We want this test to end with nTimeOffset==0, otherwise subsequent tests of the suite will fail.\n     BOOST_CHECK_EQUAL(GetTimeOffset(), 0);\n \n-    // We want this test to end with nTimeOffset==0, otherwise subsequent tests of the suite will fail.\n+    TestOnlyResetTimeData();\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "765b0fc32ea66b4a130f6a2ed20eff924f41c933",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18c3955977bf2d8a94b8cd69ee692391384f4175/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18c3955977bf2d8a94b8cd69ee692391384f4175/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=18c3955977bf2d8a94b8cd69ee692391384f4175",
        "patch": "@@ -39,18 +39,20 @@ int64_t GetAdjustedTime()\n \n #define BITCOIN_TIMEDATA_MAX_SAMPLES 200\n \n+static std::set<CNetAddr> setKnown;\n+static CMedianFilter<int64_t> vTimeOffsets(BITCOIN_TIMEDATA_MAX_SAMPLES, 0);\n+static bool fDone;\n+\n void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n {\n     LOCK(g_timeoffset_mutex);\n     // Ignore duplicates\n-    static std::set<CNetAddr> setKnown;\n     if (setKnown.size() == BITCOIN_TIMEDATA_MAX_SAMPLES)\n         return;\n     if (!setKnown.insert(ip).second)\n         return;\n \n     // Add data\n-    static CMedianFilter<int64_t> vTimeOffsets(BITCOIN_TIMEDATA_MAX_SAMPLES, 0);\n     vTimeOffsets.input(nOffsetSample);\n     LogPrint(BCLog::NET, \"added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample / 60);\n \n@@ -81,7 +83,6 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         } else {\n             nTimeOffset = 0;\n \n-            static bool fDone;\n             if (!fDone) {\n                 // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n                 bool fMatch = false;\n@@ -108,3 +109,12 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         }\n     }\n }\n+\n+void TestOnlyResetTimeData()\n+{\n+    LOCK(g_timeoffset_mutex);\n+    nTimeOffset = 0;\n+    setKnown.clear();\n+    vTimeOffsets = CMedianFilter<int64_t>(BITCOIN_TIMEDATA_MAX_SAMPLES, 0);\n+    fDone = false;\n+}"
      },
      {
        "sha": "2f039d5465ccfbf14a5aa9e542b9550cd6fc50e3",
        "filename": "src/timedata.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18c3955977bf2d8a94b8cd69ee692391384f4175/src/timedata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18c3955977bf2d8a94b8cd69ee692391384f4175/src/timedata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.h?ref=18c3955977bf2d8a94b8cd69ee692391384f4175",
        "patch": "@@ -75,4 +75,9 @@ int64_t GetTimeOffset();\n int64_t GetAdjustedTime();\n void AddTimeData(const CNetAddr& ip, int64_t nTime);\n \n+/**\n+ * Reset the internal state of GetTimeOffset(), GetAdjustedTime() and AddTimeData().\n+ */\n+void TestOnlyResetTimeData();\n+\n #endif // BITCOIN_TIMEDATA_H"
      }
    ]
  },
  {
    "sha": "04222ec56866e2d45b025015dcc8cfd48e4d5d98",
    "node_id": "C_kwDOABII59oAKDA0MjIyZWM1Njg2NmUyZDQ1YjAyNTAxNWRjYzhjZmQ0OGU0ZDVkOTg",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-18T13:34:03Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-09-29T09:34:18Z"
      },
      "message": "timedata: rename variables to match the coding style\n\nRename the local variables in `src/timedata.cpp`:\n`setKnown` -> `g_sources`\n`vTimeOffsets` -> `g_time_offsets`\n`fDone` -> `g_warning_emitted`",
      "tree": {
        "sha": "2e47d3deff366961499a1be9eb930aaec5d9bd6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e47d3deff366961499a1be9eb930aaec5d9bd6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04222ec56866e2d45b025015dcc8cfd48e4d5d98",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmFUMxsACgkQVN8G9ktV\ny7+SKyAAqs+7zX5n3I5RlJXm1M43QC6oBbSx/xOmmZIWz3ivqZhAfDrXpBieL3pm\n9NoE4SgAToA+HKroyJMPOAvnbDluwz6XnVRy/63JiY64P7StJLc0ddD3w/nGZJXv\n1oEHBXS0xqzLpboPZaGSvl4fpU4w1xn7qK5W8pRalpfwAp2wUPVLxnmxjLdxMAiK\nPRAPdt7mA8Fxmnf7Zl0FTS+0rh7HawzKPoyr7is0//FW9ubhtkfAXo4ULM8ITbL7\nj24u0viBLfvKWO5iJzA2jvCdBmClvPnSlQduz+9s+/6fML90MkbnMhcwrC5pwuFA\ntoUOKhabGZkg4RPvUost6mPcDUTEf2uz1Vqc4tunkNOQj//Hwh/d1bpqi3wGvwsE\nxBhF4iUPxHzBk36Q1VuI2X2JmBUsxq4CD7TUvs9v/uCcZEYSw1bSQ81YNKHWEivl\nxQcTPr+i2ykCb5/3bwUT09Dgc0mWgsO1bchNaH2RznN/9cDpJKwoKCQyhBW0xqGE\n1om6NnYNeS7GCAtDQWVgTk8811wcFbH3dIqNCK6CBb2c806ilyqXkxftZOoujj/1\nIbxoamfbY9IWaZioCWWSIV6V3yKubKftAdKH2ZF42hunThQIynDTaUNJZWlKtiyH\nMoKRPOrhHlzsGig2LDDDhyFwor5kKVbCB8cNwRdkqDhZ+ejlwR7FZkBlcke52yVb\nWNtSyEMULsQ05a6WO7xHzv3kUhFq4Us0X+wgrELR5WazhmDhpsXLzwx6fQOrm6rp\nVqegG6PZwK1SVBig803ZKZLOCaARUp9v9yKtjnLnMUehEQncabvXVgE4ok3N6piC\nks2LjcwX7HsPqRWWLIVvGs+wqt+6ARO5qxZSJXxoAAfNfkmcRIcp5bGDoLF0vO+4\n+FK4TAKgAxjIPk5NfvKYIOvaofmUxz6DZ9N1MOEfkL+vejhzpHb4QIB51eO5+aZb\ncTdN7RDHGwe3ndG8jOt3R6EDA+TBGD2956phsVIzfdc4i5EJLZwKbY3kqLfPirFD\nR8VswhXwRXMSupylSUMdXguAziKglT578OmlJNt4JF6nTEmQI8TQTnrOLCR07c4a\nDju56PDMC/ikVNCPhJB5/K/VPnLe5F3jX/NSBGckmwbO86msOM3wQsDbR/ylbkkO\nMG7iSYfdCKd7d14ii7eH5nIMWkIO1bQQX9xhgCYk8qQa/qe6bppzaxke9fC60XnI\nTqnk+jG7xDMsL+jMtcOqWjaMFYdB8DobY6+XXwphOPTysMx3oAOCc86DnhZZpW32\nkYRFEbvQrZkOQDmZe6DtzmbDdu85KEHrvUgSQOZ7WCiOV+EK28LsIUKuIV24TUBU\nN5ru5U36uz01RwGCV/gXjh35/Pd2+g==\n=d6JS\n-----END PGP SIGNATURE-----",
        "payload": "tree 2e47d3deff366961499a1be9eb930aaec5d9bd6d\nparent 18c3955977bf2d8a94b8cd69ee692391384f4175\nauthor Vasil Dimov <vd@FreeBSD.org> 1610976843 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1632908058 +0200\n\ntimedata: rename variables to match the coding style\n\nRename the local variables in `src/timedata.cpp`:\n`setKnown` -> `g_sources`\n`vTimeOffsets` -> `g_time_offsets`\n`fDone` -> `g_warning_emitted`\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04222ec56866e2d45b025015dcc8cfd48e4d5d98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04222ec56866e2d45b025015dcc8cfd48e4d5d98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04222ec56866e2d45b025015dcc8cfd48e4d5d98/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18c3955977bf2d8a94b8cd69ee692391384f4175",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18c3955977bf2d8a94b8cd69ee692391384f4175",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18c3955977bf2d8a94b8cd69ee692391384f4175"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "979e07fef70ab670156b5f078c462badebbae5ca",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04222ec56866e2d45b025015dcc8cfd48e4d5d98/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04222ec56866e2d45b025015dcc8cfd48e4d5d98/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=04222ec56866e2d45b025015dcc8cfd48e4d5d98",
        "patch": "@@ -39,31 +39,31 @@ int64_t GetAdjustedTime()\n \n #define BITCOIN_TIMEDATA_MAX_SAMPLES 200\n \n-static std::set<CNetAddr> setKnown;\n-static CMedianFilter<int64_t> vTimeOffsets(BITCOIN_TIMEDATA_MAX_SAMPLES, 0);\n-static bool fDone;\n+static std::set<CNetAddr> g_sources;\n+static CMedianFilter<int64_t> g_time_offsets{BITCOIN_TIMEDATA_MAX_SAMPLES, 0};\n+static bool g_warning_emitted;\n \n void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n {\n     LOCK(g_timeoffset_mutex);\n     // Ignore duplicates\n-    if (setKnown.size() == BITCOIN_TIMEDATA_MAX_SAMPLES)\n+    if (g_sources.size() == BITCOIN_TIMEDATA_MAX_SAMPLES)\n         return;\n-    if (!setKnown.insert(ip).second)\n+    if (!g_sources.insert(ip).second)\n         return;\n \n     // Add data\n-    vTimeOffsets.input(nOffsetSample);\n-    LogPrint(BCLog::NET, \"added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample / 60);\n+    g_time_offsets.input(nOffsetSample);\n+    LogPrint(BCLog::NET, \"added time data, samples %d, offset %+d (%+d minutes)\\n\", g_time_offsets.size(), nOffsetSample, nOffsetSample / 60);\n \n     // There is a known issue here (see issue #4521):\n     //\n-    // - The structure vTimeOffsets contains up to 200 elements, after which\n+    // - The structure g_time_offsets contains up to 200 elements, after which\n     // any new element added to it will not increase its size, replacing the\n     // oldest element.\n     //\n     // - The condition to update nTimeOffset includes checking whether the\n-    // number of elements in vTimeOffsets is odd, which will never happen after\n+    // number of elements in g_time_offsets is odd, which will never happen after\n     // there are 200 elements.\n     //\n     // But in this case the 'bug' is protective against some attacks, and may\n@@ -73,25 +73,25 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n     // So we should hold off on fixing this and clean it up as part of\n     // a timing cleanup that strengthens it in a number of other ways.\n     //\n-    if (vTimeOffsets.size() >= 5 && vTimeOffsets.size() % 2 == 1) {\n-        int64_t nMedian = vTimeOffsets.median();\n-        std::vector<int64_t> vSorted = vTimeOffsets.sorted();\n+    if (g_time_offsets.size() >= 5 && g_time_offsets.size() % 2 == 1) {\n+        int64_t nMedian = g_time_offsets.median();\n+        std::vector<int64_t> vSorted = g_time_offsets.sorted();\n         // Only let other nodes change our time by so much\n         int64_t max_adjustment = std::max<int64_t>(0, gArgs.GetIntArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT));\n         if (nMedian >= -max_adjustment && nMedian <= max_adjustment) {\n             nTimeOffset = nMedian;\n         } else {\n             nTimeOffset = 0;\n \n-            if (!fDone) {\n+            if (!g_warning_emitted) {\n                 // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n                 bool fMatch = false;\n                 for (const int64_t nOffset : vSorted) {\n                     if (nOffset != 0 && nOffset > -5 * 60 && nOffset < 5 * 60) fMatch = true;\n                 }\n \n                 if (!fMatch) {\n-                    fDone = true;\n+                    g_warning_emitted = true;\n                     bilingual_str strMessage = strprintf(_(\"Please check that your computer's date and time are correct! If your clock is wrong, %s will not work properly.\"), PACKAGE_NAME);\n                     SetMiscWarning(strMessage);\n                     uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_WARNING);\n@@ -114,7 +114,7 @@ void TestOnlyResetTimeData()\n {\n     LOCK(g_timeoffset_mutex);\n     nTimeOffset = 0;\n-    setKnown.clear();\n-    vTimeOffsets = CMedianFilter<int64_t>(BITCOIN_TIMEDATA_MAX_SAMPLES, 0);\n-    fDone = false;\n+    g_sources.clear();\n+    g_time_offsets = CMedianFilter<int64_t>{BITCOIN_TIMEDATA_MAX_SAMPLES, 0};\n+    g_warning_emitted = false;\n }"
      }
    ]
  },
  {
    "sha": "d02e409fc1fe278578f04c216f101bdfc5185446",
    "node_id": "C_kwDOABII59oAKGQwMmU0MDlmYzFmZTI3ODU3OGYwNGMyMTZmMTAxYmRmYzUxODU0NDY",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-22T16:23:21Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-09-29T09:34:19Z"
      },
      "message": "net: make CaptureMessage() mockable\n\nRename `CaptureMessage()` to `CaptureMessageToFile()` and introduce a\n`std::function` variable called `CaptureMessage` whose value can be\nchanged by unit tests, should they need to inspect message contents.",
      "tree": {
        "sha": "b3f041cd3cfdd87fd35aef2942fe6f324a202173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3f041cd3cfdd87fd35aef2942fe6f324a202173"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d02e409fc1fe278578f04c216f101bdfc5185446",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmFUMxwACgkQVN8G9ktV\ny78CBB//UDnKJXQQlNePHrwD40hjpB3yUFBHskiEMWKAVQ3QlQgRpK0ydxyDhXth\nWlXCxVJ2dWmNaizXZfk+edY5M+Cm63UbYNzpdp/jtvGmpfBal2MxRz2Pt4Kclt4k\n0iZPp8zrN5KvSeWIsLX44Yat0dllDgDWtWpH6Hs//f1tW7ZaZWnLNM89G5De+MYo\nOZ2xm0S+YPVkiv0pU5Y1U28mECENo/dDHIysYr8jsgynMUfYXnLb9q3vihwhve4X\nm7TvAnuqAqcJvaP28Jc4UIFb2/gtnguV681lS6BD+P50ax8hAwZRfwpd1+J0FON6\nSviElpNZ18zI5YsFprMWUneG1Gosg7P+ZDSCQ/9YBht4010CS+eik454/oJzTEUm\ngolGJFOlptRt4cbGsMNAVCyf1VN64SaiygoBrAr4yRR6rAulSlBbK2aopDv6aehN\nWfEOqPGx5YfMMc5jSzb+ZQcHb3H4UwrNFkPvNNOta24psNE+eHz+5VgZ5kxYxtLH\n6vzGtGSpoOcg4+IyLpdzQsrb4qgxiqFz3tu/fbSuozMh2gbnYCc+/tsAiG6Gmsr3\n60GBWfhh2gLXSF1qZfNcx8gLJMVj+plSxVC8sQavj3BuxMWIgpKlDu0ghEDpAhYe\nleUF6JLOl014WdC4cVUwlpzz3uK8Gfwn03lvGUWOLQfkNc/SHVz8BzgOnLIDojQb\nMT/alpiETkmHyuBJd4WC2Xqx/Ztaxq6fYegoJ5DzMR/YJw7CBOnfOgOgn8TGypIE\nGITxSJ+Xvd//my24eMe1FB2e7UGK/98ZBKVH729UWyudTS1xvMkaG+s06x2lVynq\nIs9x1auyC9eLE9Y8aR6vbETKEyL3M+36mpr5DMI3F9GB7KpWSQTNa8zgq7WvTTLB\n6Fjmg6CmFrVCh27UTfZAmht9apoQBr8o9+HFNWinbsyiYDMmntouA33d52DdR05x\nv6rwL9I7o2wQ4n8tcNb/kH+dd5vZlnjHJyRa8bpYgiBK5n5yahikcIiwQ+gjOVic\npI3xp/syNtxbQdC9Y2X7E2vGLETd23JtAAQBM+xrL5GmFyoMX+6gLJjFeXHQr0CR\nvywD7tryvKD8NGx5pcG1yCmvgwLJtbUbh8aI5cEmhOrBTCD/2FYxmMjGMTHCS+Yk\nR9/zvI7ZCwrpI60OVxS3ROOo4VAtmGTh6lGDThsctg0dPV7nXhjCf9XvCQB1mLSi\nrnzBqS6u/1dqp3qeLVRBVP5bStAQSsDGDuyoemNF/wowAf/YRdLxCP7kie1P1oXl\noSvi2x75GSe6HMdPyGfC1VT4miZVCcuPTv52muRcKjwDC0NyyKKJY+wTuKDSS/ic\n0ZCnaYkNs5g4/3TOlW1AsN9Dj+a/fg==\n=as4o\n-----END PGP SIGNATURE-----",
        "payload": "tree b3f041cd3cfdd87fd35aef2942fe6f324a202173\nparent 04222ec56866e2d45b025015dcc8cfd48e4d5d98\nauthor Vasil Dimov <vd@FreeBSD.org> 1626971001 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1632908059 +0200\n\nnet: make CaptureMessage() mockable\n\nRename `CaptureMessage()` to `CaptureMessageToFile()` and introduce a\n`std::function` variable called `CaptureMessage` whose value can be\nchanged by unit tests, should they need to inspect message contents.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d02e409fc1fe278578f04c216f101bdfc5185446",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d02e409fc1fe278578f04c216f101bdfc5185446",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d02e409fc1fe278578f04c216f101bdfc5185446/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04222ec56866e2d45b025015dcc8cfd48e4d5d98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04222ec56866e2d45b025015dcc8cfd48e4d5d98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04222ec56866e2d45b025015dcc8cfd48e4d5d98"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 23,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d33dda2e805cc13918930f8e6134cb4c54051183",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02e409fc1fe278578f04c216f101bdfc5185446/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02e409fc1fe278578f04c216f101bdfc5185446/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d02e409fc1fe278578f04c216f101bdfc5185446",
        "patch": "@@ -3071,7 +3071,10 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n \n-void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+void CaptureMessageToFile(const CAddress& addr,\n+                          const std::string& msg_type,\n+                          const Span<const unsigned char>& data,\n+                          bool is_incoming)\n {\n     // Note: This function captures the message at the time of processing,\n     // not at socket receive/send time.\n@@ -3098,3 +3101,9 @@ void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Spa\n     ser_writedata32(f, size);\n     f.write((const char*)data.data(), data.size());\n }\n+\n+std::function<void(const CAddress& addr,\n+                   const std::string& msg_type,\n+                   const Span<const unsigned char>& data,\n+                   bool is_incoming)>\n+    CaptureMessage = CaptureMessageToFile;"
      },
      {
        "sha": "14d9f078c9a1837acf73917de91659a1e2e38dc0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02e409fc1fe278578f04c216f101bdfc5185446/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02e409fc1fe278578f04c216f101bdfc5185446/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d02e409fc1fe278578f04c216f101bdfc5185446",
        "patch": "@@ -31,6 +31,7 @@\n #include <condition_variable>\n #include <cstdint>\n #include <deque>\n+#include <functional>\n #include <map>\n #include <memory>\n #include <optional>\n@@ -1185,7 +1186,17 @@ class CConnman\n std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::seconds average_interval);\n \n /** Dump binary message to file, with timestamp */\n-void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming);\n+void CaptureMessageToFile(const CAddress& addr,\n+                          const std::string& msg_type,\n+                          const Span<const unsigned char>& data,\n+                          bool is_incoming);\n+\n+/** Defaults to `CaptureMessageToFile()`, but can be overridden by unit tests. */\n+extern std::function<void(const CAddress& addr,\n+                          const std::string& msg_type,\n+                          const Span<const unsigned char>& data,\n+                          bool is_incoming)>\n+    CaptureMessage;\n \n struct NodeEvictionCandidate\n {"
      },
      {
        "sha": "7b1c067c2adb07fa3a61039a8a798c898e9e5c29",
        "filename": "test/functional/p2p_message_capture.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02e409fc1fe278578f04c216f101bdfc5185446/test/functional/p2p_message_capture.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02e409fc1fe278578f04c216f101bdfc5185446/test/functional/p2p_message_capture.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_message_capture.py?ref=d02e409fc1fe278578f04c216f101bdfc5185446",
        "patch": "@@ -20,7 +20,7 @@\n MSGTYPE_SIZE = 12\n \n def mini_parser(dat_file):\n-    \"\"\"Parse a data file created by CaptureMessage.\n+    \"\"\"Parse a data file created by CaptureMessageToFile.\n \n     From the data file we'll only check the structure.\n "
      }
    ]
  },
  {
    "sha": "c09debbb9e10310f15ed1ed604d6bc53cdbc5419",
    "node_id": "C_kwDOABII59oAKGMwOWRlYmJiOWUxMDMxMGYxNWVkMWVkNjA0ZDZiYzUzY2RiYzU0MTk",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-29T15:47:15Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-09-29T09:34:20Z"
      },
      "message": "net: pass Span by value to CaptureMessage()\n\nSpan is lightweight and need not be passed by const reference.",
      "tree": {
        "sha": "52fd8a2d982555b83fd2831f57d47867aef5631e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52fd8a2d982555b83fd2831f57d47867aef5631e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c09debbb9e10310f15ed1ed604d6bc53cdbc5419",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmFUMxwACgkQVN8G9ktV\ny78b8x//WeLOEBkfO/lBqm5HZo1pLJLMLjYdjnPJurxk/+gxbDOxcN4y7gcL9UcI\ntwuOZgmXK4N2Wfys68S2XD9x4YdWsaM4RHtskZ6nvOVvfW5UGWwUjM6C9niHJ78g\nWZLyjuTFkXAWm2VDzNrA1phtm2t5tqSTHRqJtF2TvSt2LVadO1KSJ72QnU9+Mu3Z\noZHxvUnwiO39idoR91G1k6k+Wv2siyaGrh5eAUnS+e9cMcvKHa3+BLjqW5+2LJgZ\nGfB/n61KBPJZ7c7RWDd3zLHy5dxpy+F4oBsU+g3EY0mzMTxnKEwNeHxZylL2lhOm\npD8sJ55QZOkBhnAjMRkbpdL32VxkEqH0xRVBsCl378C/KBpQteK1XJtzGWIP/ABg\n4ShMzpYqwws+mC9lWwW0iJvOJawP9GdG/8/Ngys5kPG9s5irhWRZxg6QDc0brWTT\nVCqABsp6ZbDLNmClwCLEsoFtUcr63UOjbaQVQtsyWMgPSlAx2/tzx60jpUH1w2bn\nrijH9al8hP5ZAOO++mg0zNndVtzmpSDdkkRg5IcKn4qJo+dZzJTq0DjsNCzvn+R3\nMHgch/cYGd+cuWbh4Vd12kv+2WYYKwJ2A3mi1/O9F9ccb3Mhl0Wfy9DccNHfAK6P\nyFvuIodjRfkJpvVrGnFVWj+KS0Wv4850GZsUJ03Lb6Pij9We6AtDDF/Q8qYdN/1D\nkUG3raT5/P32FZIUc5PdKrzEfvgRg5cVYv6lEaBuBijGji2QFAN++Z9QhkTPI+P9\n+Yrru1M4MglZTXb2L40SJAvizAj3tyajfjN9fWI0SASIq3bzP39iWyUlRHmVg6D5\nyjLQeqqJ7vrc0FizNRikvcMY6+tfmmqsEJUMdvOxd8jauBSx7qRfUR9UnhtVGAwh\nbpwv+nyDB706BQpM0s9SeHKkL378jBjt1WYQsrgnqhPNknCTjGnKq8m51zkCTCiM\n0ql0oZ22/DI3lUwlnRGG+hVvPkdWYO0FNQf+GL8aXEyjN9kQrsm7PSa51fygM+ys\niU0RH/U4BPv9nyEpgmRSv1mIa7/aO78Cs+c32HOPQOdDTuCrexC0/AVNSQ5dxkUP\nhJ3Txb+abt1yMad2e6rMiC6imsMI0tSAEDAIQ8qT3RuEbGPLh1mkLQgSids6+c95\n4gShMUIKJqA5b3IZsXOVyYTYqtoL61CEhX7Th3FW+kIq50UqOUlKFRlB2CmrVIPA\nW4PA9Z/iruyCEJMXuJNYOPA+hvUOa/R9/IECnCvytST3cqrnvBiNLm/tVtITdUi1\nkKRmJZqEQwBQ06O/3Kz/76ezFPVBWpjXvVNwDOhrE1/5e2XW8tGg9rlRYVHamxGs\nZLqDFnuWkn+fwLyfIEUKNaezENLXKg==\n=KgV9\n-----END PGP SIGNATURE-----",
        "payload": "tree 52fd8a2d982555b83fd2831f57d47867aef5631e\nparent d02e409fc1fe278578f04c216f101bdfc5185446\nauthor Vasil Dimov <vd@FreeBSD.org> 1627573635 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1632908060 +0200\n\nnet: pass Span by value to CaptureMessage()\n\nSpan is lightweight and need not be passed by const reference.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c09debbb9e10310f15ed1ed604d6bc53cdbc5419",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c09debbb9e10310f15ed1ed604d6bc53cdbc5419",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c09debbb9e10310f15ed1ed604d6bc53cdbc5419/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d02e409fc1fe278578f04c216f101bdfc5185446",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d02e409fc1fe278578f04c216f101bdfc5185446",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d02e409fc1fe278578f04c216f101bdfc5185446"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "95090833d0a9dd8bcf3f4b87a8d52995c384b9cc",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c09debbb9e10310f15ed1ed604d6bc53cdbc5419/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c09debbb9e10310f15ed1ed604d6bc53cdbc5419/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c09debbb9e10310f15ed1ed604d6bc53cdbc5419",
        "patch": "@@ -3073,7 +3073,7 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n void CaptureMessageToFile(const CAddress& addr,\n                           const std::string& msg_type,\n-                          const Span<const unsigned char>& data,\n+                          Span<const unsigned char> data,\n                           bool is_incoming)\n {\n     // Note: This function captures the message at the time of processing,\n@@ -3104,6 +3104,6 @@ void CaptureMessageToFile(const CAddress& addr,\n \n std::function<void(const CAddress& addr,\n                    const std::string& msg_type,\n-                   const Span<const unsigned char>& data,\n+                   Span<const unsigned char> data,\n                    bool is_incoming)>\n     CaptureMessage = CaptureMessageToFile;"
      },
      {
        "sha": "cf9e36c9da8008b8153d9b7f9f0d5a20e4ca4974",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c09debbb9e10310f15ed1ed604d6bc53cdbc5419/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c09debbb9e10310f15ed1ed604d6bc53cdbc5419/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c09debbb9e10310f15ed1ed604d6bc53cdbc5419",
        "patch": "@@ -1188,13 +1188,13 @@ std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::ch\n /** Dump binary message to file, with timestamp */\n void CaptureMessageToFile(const CAddress& addr,\n                           const std::string& msg_type,\n-                          const Span<const unsigned char>& data,\n+                          Span<const unsigned char> data,\n                           bool is_incoming);\n \n /** Defaults to `CaptureMessageToFile()`, but can be overridden by unit tests. */\n extern std::function<void(const CAddress& addr,\n                           const std::string& msg_type,\n-                          const Span<const unsigned char>& data,\n+                          Span<const unsigned char> data,\n                           bool is_incoming)>\n     CaptureMessage;\n "
      }
    ]
  },
  {
    "sha": "a380a68e2db8836007d9391f2c5cd17350c0b3c3",
    "node_id": "C_kwDOABII59oAKGEzODBhNjhlMmRiODgzNjAwN2Q5MzkxZjJjNWNkMTczNTBjMGIzYzM",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-18T12:45:35Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-09-29T13:36:16Z"
      },
      "message": "net: fix GetListenPort() to derive the proper port\n\n`GetListenPort()` uses a simple logic: \"if `-port=P` is given, then we\nmust be listening on `P`, otherwise we must be listening on `8333`\".\nThis is however not true if `-bind=` has been provided with `:port` part\nor if `-whitebind=` has been provided. Thus, extend `GetListenPort()` to\nreturn the port from `-bind=` or `-whitebind=`, if any.\n\nFixes https://github.com/bitcoin/bitcoin/issues/20184 (cases 1. 2. 3. 5.)",
      "tree": {
        "sha": "be56f1c2ec9f8c7900a483191d963d103c31cc93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be56f1c2ec9f8c7900a483191d963d103c31cc93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a380a68e2db8836007d9391f2c5cd17350c0b3c3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmFUa9AACgkQVN8G9ktV\ny7+NHSAAl5UXU5oF1QrcNzy4Px0GAG9gf2DIXXTv8ECxnTn4a2QVPTvTv3w8IC7q\n9v0qyyZdAxRhIsH277zqB5JcGrhjE2ptpMQQNuQe0Vu+mBhHqKOBHraxpff6p799\nMHEMtEMJf9b8wDkZAABDlVNcQexLsrfxuj52x9hf4sQdmy4FlWel5U3NvQQW/EB6\nL5plFYIXWhs4k1cmz/osJArxD/vD5h/NLz6XFWxIw7EDbgfJ2xcmzMQd2C/Kz2GO\nQ00IVrcthM6ej1ajGawshC28qJF5jyZdq8d7qUjhViJ9CagYoFxWDHPbuFWB3Jsm\nTGJnynypVoT6E7PfLmBWdYuZtE3T7vAeH4PleV31zkteK1229fMYcFlgm3hobAi8\nyHRpSKpeU/hxtT4+BVcVxPJedZjbYBGyRKQG7D+rBzGP1kWmhla9dgprNp+Sv/Fm\ntcX8Z+j8+FQP7VULaqnrvRhuvc2lE9bPdeUCieVelr+yfDM4Mv9iXN3CDoeSFGBW\nZ4YboIZCUMIz5+ILVv71J6m9BuyZf3S2NBBWxqaUbUuOmvAkQaPFuYavmkJedUP0\n2TzS15oFxSX9WaV8/mXmhe+/dbIUkwe4iyBPQ5DqVDopM9DQRaZcs3wfrXd4UgqX\nUMAfBXjizEZPvtVX0EGfBeUijR0DJe7KMrZYq7yPNjjZm7zlPoeGAMzCoEp1Xfrj\n/EIwR0GP0Xfx1XozdFGl0PEvz7B/Oi71HvNNqnr+Wl51O4m5tsXs/6wVaiMCQ35p\n839Me5SgJPaGoYioUzxsaBFw+dYms6oJTNUa0N8raJnjikuDetrfmDQUhlfy89B5\nfXxi07RLFWXpmkIGeYmRuyf/Fd+JX4H+8daQOiSn7lOc+LG5ZgVU9b6vH/wT9Eo1\nZXj+RvkvHfA9RyEFwm51KVTdK25KLwAVWNxoSerGkHZ8pqHUqrsQc+mFgrkTQOkc\nqk2414gDuJx/rmE++RWtq0saWzsbqmg4MsG1nWqpjz3DgrK76706/t86MpYJ6Wlw\nZ4P4YseONTHT1TAnpEqixoyrZhPti4u4JfM3myFJ9XZMJA0xqQswwE20pojoI5RT\nTHV5+a33k2czrpdZlMVaO4dOh1H0Ncan7nsBQWhJzarMEHd/M7Y/k7qIgorwqYjw\nVO3NYnn2fEnaN6/IzuenxlSSNd87ZY6O7inHGTMV4Lzk3MhAk4uZMAZqaN7UuAgC\n0Kk+s98wOFRMUHR9sFq6f7smG2leESMckUVDSAzmixLEVPkUAbb9feGhs/sSgsy/\nWGe1Z2wPOvRggOca7ApyHuGqu8HXA2FrLczkUVf0dx+EuUpcQllSd13zqSQ3fJ3D\nNAvXZYCpRVzvLy3g2HSehZOulmawjA==\n=VMc9\n-----END PGP SIGNATURE-----",
        "payload": "tree be56f1c2ec9f8c7900a483191d963d103c31cc93\nparent c09debbb9e10310f15ed1ed604d6bc53cdbc5419\nauthor Vasil Dimov <vd@FreeBSD.org> 1603025135 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1632922576 +0200\n\nnet: fix GetListenPort() to derive the proper port\n\n`GetListenPort()` uses a simple logic: \"if `-port=P` is given, then we\nmust be listening on `P`, otherwise we must be listening on `8333`\".\nThis is however not true if `-bind=` has been provided with `:port` part\nor if `-whitebind=` has been provided. Thus, extend `GetListenPort()` to\nreturn the port from `-bind=` or `-whitebind=`, if any.\n\nFixes https://github.com/bitcoin/bitcoin/issues/20184 (cases 1. 2. 3. 5.)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a380a68e2db8836007d9391f2c5cd17350c0b3c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a380a68e2db8836007d9391f2c5cd17350c0b3c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a380a68e2db8836007d9391f2c5cd17350c0b3c3/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c09debbb9e10310f15ed1ed604d6bc53cdbc5419",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c09debbb9e10310f15ed1ed604d6bc53cdbc5419",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c09debbb9e10310f15ed1ed604d6bc53cdbc5419"
      }
    ],
    "stats": {
      "total": 314,
      "additions": 307,
      "deletions": 7
    },
    "files": [
      {
        "sha": "cb29fab7524fc092490a25bf3840ae106d5ad3be",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a380a68e2db8836007d9391f2c5cd17350c0b3c3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a380a68e2db8836007d9391f2c5cd17350c0b3c3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a380a68e2db8836007d9391f2c5cd17350c0b3c3",
        "patch": "@@ -1714,11 +1714,15 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     connOptions.nMaxOutboundLimit = 1024 * 1024 * args.GetIntArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET);\n     connOptions.m_peer_connect_timeout = peer_connect_timeout;\n \n+    // Port to bind to if `-bind=addr` is provided without a `:port` suffix.\n+    const uint16_t default_bind_port =\n+        static_cast<uint16_t>(args.GetIntArg(\"-port\", Params().GetDefaultPort()));\n+\n     for (const std::string& bind_arg : args.GetArgs(\"-bind\")) {\n         CService bind_addr;\n         const size_t index = bind_arg.rfind('=');\n         if (index == std::string::npos) {\n-            if (Lookup(bind_arg, bind_addr, GetListenPort(), false)) {\n+            if (Lookup(bind_arg, bind_addr, default_bind_port, /* allow_lookup */ false)) {\n                 connOptions.vBinds.push_back(bind_addr);\n                 continue;\n             }"
      },
      {
        "sha": "c765bfd95d0c29d851a18812e2e1a231fc3ae135",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 1,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a380a68e2db8836007d9391f2c5cd17350c0b3c3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a380a68e2db8836007d9391f2c5cd17350c0b3c3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a380a68e2db8836007d9391f2c5cd17350c0b3c3",
        "patch": "@@ -123,6 +123,31 @@ void CConnman::AddAddrFetch(const std::string& strDest)\n \n uint16_t GetListenPort()\n {\n+    // If -bind= is provided with \":port\" part, use that (first one if multiple are provided).\n+    for (const std::string& bind_arg : gArgs.GetArgs(\"-bind\")) {\n+        CService bind_addr;\n+        constexpr uint16_t dummy_port = 0;\n+\n+        if (Lookup(bind_arg, bind_addr, dummy_port, /* allow_lookup */ false)) {\n+            if (bind_addr.GetPort() != dummy_port) {\n+                return bind_addr.GetPort();\n+            }\n+        }\n+    }\n+\n+    // Otherwise, if -whitebind= without NetPermissionFlags::NoBan is provided, use that\n+    // (-whitebind= is required to have \":port\").\n+    for (const std::string& whitebind_arg : gArgs.GetArgs(\"-whitebind\")) {\n+        NetWhitebindPermissions whitebind;\n+        bilingual_str error;\n+        if (NetWhitebindPermissions::TryParse(whitebind_arg, whitebind, error)) {\n+            if (!NetPermissions::HasFlag(whitebind.m_flags, NetPermissionFlags::NoBan)) {\n+                return whitebind.m_service.GetPort();\n+            }\n+        }\n+    }\n+\n+    // Otherwise, if -port= is provided, use that. Otherwise use the default port.\n     return static_cast<uint16_t>(gArgs.GetIntArg(\"-port\", Params().GetDefaultPort()));\n }\n \n@@ -218,7 +243,17 @@ std::optional<CAddress> GetLocalAddrForPeer(CNode *pnode)\n     if (IsPeerAddrLocalGood(pnode) && (!addrLocal.IsRoutable() ||\n          rng.randbits((GetnScore(addrLocal) > LOCAL_MANUAL) ? 3 : 1) == 0))\n     {\n-        addrLocal.SetIP(pnode->GetAddrLocal());\n+        if (pnode->IsInboundConn()) {\n+            // For inbound connections, assume both the address and the port\n+            // as seen from the peer.\n+            addrLocal = CAddress{pnode->GetAddrLocal(), addrLocal.nServices};\n+        } else {\n+            // For outbound connections, assume just the address as seen from\n+            // the peer and leave the port in `addrLocal` as returned by\n+            // `GetLocalAddress()` above. The peer has no way to observe our\n+            // listening port when we have initiated the connection.\n+            addrLocal.SetIP(pnode->GetAddrLocal());\n+        }\n     }\n     if (addrLocal.IsRoutable() || gArgs.GetBoolArg(\"-addrmantest\", false))\n     {"
      },
      {
        "sha": "67da0cc9ec8df678febce01edb1e3a0235cf0430",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a380a68e2db8836007d9391f2c5cd17350c0b3c3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a380a68e2db8836007d9391f2c5cd17350c0b3c3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a380a68e2db8836007d9391f2c5cd17350c0b3c3",
        "patch": "@@ -2629,6 +2629,10 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     LogPrint(BCLog::NET, \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     PushAddress(*peer, addr, insecure_rand);\n                 } else if (IsPeerAddrLocalGood(&pfrom)) {\n+                    // Override just the address with whatever the peer sees us as.\n+                    // Leave the port in addr as it was returned by GetLocalAddress()\n+                    // above, as this is an outbound connection and the peer cannot\n+                    // observe our listening port.\n                     addr.SetIP(addrMe);\n                     LogPrint(BCLog::NET, \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     PushAddress(*peer, addr, insecure_rand);"
      },
      {
        "sha": "80e613cf7799955d35e4d2f2fc70f3687a72d6b7",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 186,
        "deletions": 5,
        "changes": 191,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a380a68e2db8836007d9391f2c5cd17350c0b3c3/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a380a68e2db8836007d9391f2c5cd17350c0b3c3/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=a380a68e2db8836007d9391f2c5cd17350c0b3c3",
        "patch": "@@ -4,17 +4,23 @@\n \n #include <chainparams.h>\n #include <clientversion.h>\n+#include <compat.h>\n #include <cstdint>\n #include <net.h>\n+#include <net_processing.h>\n #include <netaddress.h>\n #include <netbase.h>\n+#include <netmessagemaker.h>\n #include <serialize.h>\n #include <span.h>\n #include <streams.h>\n #include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <timedata.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n #include <util/system.h>\n+#include <validation.h>\n #include <version.h>\n \n #include <boost/test/unit_test.hpp>\n@@ -27,7 +33,7 @@\n \n using namespace std::literals;\n \n-BOOST_FIXTURE_TEST_SUITE(net_tests, BasicTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(net_tests, RegTestingSetup)\n \n BOOST_AUTO_TEST_CASE(cnode_listen_port)\n {\n@@ -592,15 +598,15 @@ BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n     // set up local addresses; all that's necessary to reproduce the bug is\n     // that a normal IPv4 address is among the entries, but if this address is\n     // !IsRoutable the undefined behavior is easier to trigger deterministically\n+    in_addr addr_in_mapLocalHost_in_addr;\n+    addr_in_mapLocalHost_in_addr.s_addr = htonl(0x7f000001);\n+    const CNetAddr addr_in_mapLocalHost = CNetAddr(addr_in_mapLocalHost_in_addr);\n     {\n         LOCK(cs_mapLocalHost);\n-        in_addr ipv4AddrLocal;\n-        ipv4AddrLocal.s_addr = 0x0100007f;\n-        CNetAddr addr = CNetAddr(ipv4AddrLocal);\n         LocalServiceInfo lsi;\n         lsi.nScore = 23;\n         lsi.nPort = 42;\n-        mapLocalHost[addr] = lsi;\n+        mapLocalHost[addr_in_mapLocalHost] = lsi;\n     }\n \n     // create a peer with an IPv4 address\n@@ -622,8 +628,79 @@ BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n \n     // suppress no-checks-run warning; if this test fails, it's by triggering a sanitizer\n     BOOST_CHECK(1);\n+\n+    // Cleanup, so that we don't confuse other tests.\n+    {\n+        LOCK(cs_mapLocalHost);\n+        mapLocalHost.erase(addr_in_mapLocalHost);\n+    }\n }\n \n+BOOST_AUTO_TEST_CASE(get_local_addr_for_peer_port)\n+{\n+    // Test that GetLocalAddrForPeer() properly selects the address to self-advertise:\n+    //\n+    // 1. GetLocalAddrForPeer() calls GetLocalAddress() which returns an address that is\n+    //    not routable.\n+    // 2. GetLocalAddrForPeer() overrides the address with whatever the peer has told us\n+    //    he sees us as.\n+    // 2.1. For inbound connections we must override both the address and the port.\n+    // 2.2. For outbound connections we must override only the address.\n+\n+    // Pretend that we bound to this port.\n+    const uint16_t bind_port = 20001;\n+    m_node.args->ForceSetArg(\"-bind\", strprintf(\"3.4.5.6:%u\", bind_port));\n+\n+    // Our address:port as seen from the peer, completely different from the above.\n+    in_addr peer_us_addr;\n+    peer_us_addr.s_addr = htonl(0x02030405);\n+    const CAddress peer_us{CService{peer_us_addr, 20002}, NODE_NETWORK};\n+\n+    // Create a peer with a routable IPv4 address (outbound).\n+    in_addr peer_out_in_addr;\n+    peer_out_in_addr.s_addr = htonl(0x01020304);\n+    CNode peer_out{/* id */ 0,\n+                   /* nLocalServicesIn */ NODE_NETWORK,\n+                   /* hSocketIn */ INVALID_SOCKET,\n+                   /* addrIn */ CAddress{CService{peer_out_in_addr, 8333}, NODE_NETWORK},\n+                   /* nKeyedNetGroupIn */ 0,\n+                   /* nLocalHostNonceIn */ 0,\n+                   /* addrBindIn */ CAddress{},\n+                   /* addrNameIn */ std::string{},\n+                   /* conn_type_in */ ConnectionType::OUTBOUND_FULL_RELAY,\n+                   /* inbound_onion */ false};\n+    peer_out.fSuccessfullyConnected = true;\n+    peer_out.SetAddrLocal(peer_us);\n+\n+    // Without the fix peer_us:8333 is chosen instead of the proper peer_us:bind_port.\n+    auto chosen_local_addr = GetLocalAddrForPeer(&peer_out);\n+    BOOST_REQUIRE(chosen_local_addr);\n+    const CService expected{peer_us_addr, bind_port};\n+    BOOST_CHECK(*chosen_local_addr == expected);\n+\n+    // Create a peer with a routable IPv4 address (inbound).\n+    in_addr peer_in_in_addr;\n+    peer_in_in_addr.s_addr = htonl(0x05060708);\n+    CNode peer_in{/* id */ 0,\n+                  /* nLocalServicesIn */ NODE_NETWORK,\n+                  /* hSocketIn */ INVALID_SOCKET,\n+                  /* addrIn */ CAddress{CService{peer_in_in_addr, 8333}, NODE_NETWORK},\n+                  /* nKeyedNetGroupIn */ 0,\n+                  /* nLocalHostNonceIn */ 0,\n+                  /* addrBindIn */ CAddress{},\n+                  /* addrNameIn */ std::string{},\n+                  /* conn_type_in */ ConnectionType::INBOUND,\n+                  /* inbound_onion */ false};\n+    peer_in.fSuccessfullyConnected = true;\n+    peer_in.SetAddrLocal(peer_us);\n+\n+    // Without the fix peer_us:8333 is chosen instead of the proper peer_us:peer_us.GetPort().\n+    chosen_local_addr = GetLocalAddrForPeer(&peer_in);\n+    BOOST_REQUIRE(chosen_local_addr);\n+    BOOST_CHECK(*chosen_local_addr == peer_us);\n+\n+    m_node.args->ForceSetArg(\"-bind\", \"\");\n+}\n \n BOOST_AUTO_TEST_CASE(LimitedAndReachable_Network)\n {\n@@ -704,4 +781,108 @@ BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)\n     BOOST_CHECK(!IsLocal(addr));\n }\n \n+BOOST_AUTO_TEST_CASE(initial_advertise_from_version_message)\n+{\n+    // Tests the following scenario:\n+    // * -bind=3.4.5.6:20001 is specified\n+    // * we make an outbound connection to a peer\n+    // * the peer reports he sees us as 2.3.4.5:20002 in the version message\n+    //   (20002 is a random port assigned by our OS for the outgoing TCP connection,\n+    //   we cannot accept connections to it)\n+    // * we should self-advertise to that peer as 2.3.4.5:20001\n+\n+    // Pretend that we bound to this port.\n+    const uint16_t bind_port = 20001;\n+    m_node.args->ForceSetArg(\"-bind\", strprintf(\"3.4.5.6:%u\", bind_port));\n+    m_node.args->ForceSetArg(\"-capturemessages\", \"1\");\n+\n+    // Our address:port as seen from the peer - 2.3.4.5:20002 (different from the above).\n+    in_addr peer_us_addr;\n+    peer_us_addr.s_addr = htonl(0x02030405);\n+    const CService peer_us{peer_us_addr, 20002};\n+\n+    // Create a peer with a routable IPv4 address.\n+    in_addr peer_in_addr;\n+    peer_in_addr.s_addr = htonl(0x01020304);\n+    CNode peer{/* id */ 0,\n+               /* nLocalServicesIn */ NODE_NETWORK,\n+               /* hSocketIn */ INVALID_SOCKET,\n+               /* addrIn */ CAddress{CService{peer_in_addr, 8333}, NODE_NETWORK},\n+               /* nKeyedNetGroupIn */ 0,\n+               /* nLocalHostNonceIn */ 0,\n+               /* addrBindIn */ CAddress{},\n+               /* addrNameIn */ std::string{},\n+               /* conn_type_in */ ConnectionType::OUTBOUND_FULL_RELAY,\n+               /* inbound_onion */ false};\n+\n+    const uint64_t services{NODE_NETWORK | NODE_WITNESS};\n+    const int64_t time{0};\n+    const CNetMsgMaker msg_maker{PROTOCOL_VERSION};\n+\n+    // Force CChainState::IsInitialBlockDownload() to return false.\n+    // Otherwise PushAddress() isn't called by PeerManager::ProcessMessage().\n+    TestChainState& chainstate =\n+        *static_cast<TestChainState*>(&m_node.chainman->ActiveChainstate());\n+    chainstate.JumpOutOfIbd();\n+\n+    m_node.peerman->InitializeNode(&peer);\n+\n+    std::atomic<bool> interrupt_dummy{false};\n+    std::chrono::microseconds time_received_dummy{0};\n+\n+    const auto msg_version =\n+        msg_maker.Make(NetMsgType::VERSION, PROTOCOL_VERSION, services, time, services, peer_us);\n+    CDataStream msg_version_stream{msg_version.data, SER_NETWORK, PROTOCOL_VERSION};\n+\n+    m_node.peerman->ProcessMessage(\n+        peer, NetMsgType::VERSION, msg_version_stream, time_received_dummy, interrupt_dummy);\n+\n+    const auto msg_verack = msg_maker.Make(NetMsgType::VERACK);\n+    CDataStream msg_verack_stream{msg_verack.data, SER_NETWORK, PROTOCOL_VERSION};\n+\n+    // Will set peer.fSuccessfullyConnected to true (necessary in SendMessages()).\n+    m_node.peerman->ProcessMessage(\n+        peer, NetMsgType::VERACK, msg_verack_stream, time_received_dummy, interrupt_dummy);\n+\n+    // Ensure that peer_us_addr:bind_port is sent to the peer.\n+    const CService expected{peer_us_addr, bind_port};\n+    bool sent{false};\n+\n+    const auto CaptureMessageOrig = CaptureMessage;\n+    CaptureMessage = [&sent, &expected](const CAddress& addr,\n+                                        const std::string& msg_type,\n+                                        Span<const unsigned char> data,\n+                                        bool is_incoming) -> void {\n+        if (!is_incoming && msg_type == \"addr\") {\n+            CDataStream s(data, SER_NETWORK, PROTOCOL_VERSION);\n+            std::vector<CAddress> addresses;\n+\n+            s >> addresses;\n+\n+            for (const auto& addr : addresses) {\n+                if (addr == expected) {\n+                    sent = true;\n+                    return;\n+                }\n+            }\n+        }\n+    };\n+\n+    {\n+        LOCK(peer.cs_sendProcessing);\n+        m_node.peerman->SendMessages(&peer);\n+    }\n+\n+    BOOST_CHECK(sent);\n+\n+    CaptureMessage = CaptureMessageOrig;\n+    chainstate.ResetIbd();\n+    m_node.args->ForceSetArg(\"-capturemessages\", \"0\");\n+    m_node.args->ForceSetArg(\"-bind\", \"\");\n+    // PeerManager::ProcessMessage() calls AddTimeData() which changes the internal state\n+    // in timedata.cpp and later confuses the test \"timedata_tests/addtimedata\". Thus reset\n+    // that state as it was before our test was run.\n+    TestOnlyResetTimeData();\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "6a74ce5738a25588cc96edcc610827dea3b68332",
        "filename": "test/functional/feature_bind_port_externalip.py",
        "status": "added",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a380a68e2db8836007d9391f2c5cd17350c0b3c3/test/functional/feature_bind_port_externalip.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a380a68e2db8836007d9391f2c5cd17350c0b3c3/test/functional/feature_bind_port_externalip.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bind_port_externalip.py?ref=a380a68e2db8836007d9391f2c5cd17350c0b3c3",
        "patch": "@@ -0,0 +1,75 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that the proper port is used for -externalip=\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework, SkipTest\n+from test_framework.util import assert_equal, p2p_port\n+\n+# We need to bind to a routable address for this test to exercise the relevant code.\n+# To set a routable address on the machine use:\n+# Linux:\n+# ifconfig lo:0 1.1.1.1/32 up  # to set up\n+# ifconfig lo:0 down  # to remove it, after the test\n+# FreeBSD:\n+# ifconfig lo0 1.1.1.1/32 alias  # to set up\n+# ifconfig lo0 1.1.1.1 -alias  # to remove it, after the test\n+ADDR = '1.1.1.1'\n+\n+# array of tuples [arguments, expected port in localaddresses]\n+EXPECTED = [\n+    [['-externalip=2.2.2.2',       '-port=30001'],                        30001],\n+    [['-externalip=2.2.2.2',       '-port=30002', f'-bind={ADDR}'],       30002],\n+    [['-externalip=2.2.2.2',                      f'-bind={ADDR}'],       'default_p2p_port'],\n+    [['-externalip=2.2.2.2',       '-port=30003', f'-bind={ADDR}:30004'], 30004],\n+    [['-externalip=2.2.2.2',                      f'-bind={ADDR}:30005'], 30005],\n+    [['-externalip=2.2.2.2:30006', '-port=30007'],                        30006],\n+    [['-externalip=2.2.2.2:30008', '-port=30009', f'-bind={ADDR}'],       30008],\n+    [['-externalip=2.2.2.2:30010',                f'-bind={ADDR}'],       30010],\n+    [['-externalip=2.2.2.2:30011', '-port=30012', f'-bind={ADDR}:30013'], 30011],\n+    [['-externalip=2.2.2.2:30014',                f'-bind={ADDR}:30015'], 30014],\n+    [['-externalip=2.2.2.2',       '-port=30016', f'-bind={ADDR}:30017',\n+                                             f'-whitebind={ADDR}:30018'], 30017],\n+    [['-externalip=2.2.2.2',       '-port=30019',\n+                                             f'-whitebind={ADDR}:30020'], 30020],\n+]\n+\n+class BindPortExternalIPTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Avoid any -bind= on the command line. Force the framework to avoid adding -bind=127.0.0.1.\n+        self.setup_clean_chain = True\n+        self.bind_to_localhost_only = False\n+        self.num_nodes = len(EXPECTED)\n+        self.extra_args = list(map(lambda e: e[0], EXPECTED))\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\n+            \"--ihave1111\", action='store_true', dest=\"ihave1111\",\n+            help=f\"Run the test, assuming {ADDR} is configured on the machine\",\n+            default=False)\n+\n+    def skip_test_if_missing_module(self):\n+        if not self.options.ihave1111:\n+            raise SkipTest(\n+                f\"To run this test make sure that {ADDR} (a routable address) is assigned \"\n+                \"to one of the interfaces on this machine and rerun with --ihave1111\")\n+\n+    def run_test(self):\n+        self.log.info(\"Test the proper port is used for -externalip=\")\n+        for i in range(len(EXPECTED)):\n+            expected_port = EXPECTED[i][1]\n+            if expected_port == 'default_p2p_port':\n+                expected_port = p2p_port(i)\n+            found = False\n+            for local in self.nodes[i].getnetworkinfo()['localaddresses']:\n+                if local['address'] == '2.2.2.2':\n+                    assert_equal(local['port'], expected_port)\n+                    found = True\n+                    break\n+            assert found\n+\n+if __name__ == '__main__':\n+    BindPortExternalIPTest().main()"
      },
      {
        "sha": "fcc52b8cedd69de67351bbb84f8f0358a7ec5183",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a380a68e2db8836007d9391f2c5cd17350c0b3c3/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a380a68e2db8836007d9391f2c5cd17350c0b3c3/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=a380a68e2db8836007d9391f2c5cd17350c0b3c3",
        "patch": "@@ -266,6 +266,7 @@\n     'feature_minchainwork.py',\n     'rpc_estimatefee.py',\n     'rpc_getblockstats.py',\n+    'feature_bind_port_externalip.py',\n     'wallet_create_tx.py --legacy-wallet',\n     'wallet_send.py --legacy-wallet',\n     'wallet_send.py --descriptors',"
      }
    ]
  },
  {
    "sha": "cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5",
    "node_id": "C_kwDOABII59oAKGNiODZjMWZkMjA3MTVjOWE3ZTk1ZGVhMWZkMmNlNjg5NGQ3ZTlhZDU",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-19T13:32:54Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-09-29T13:36:16Z"
      },
      "message": "net: only assume all local addresses if listening on any\n\nIf `-bind=` is provided then we would bind only to a particular address\nand should not add all the other addresses of the machine to the list of\nlocal addresses.\n\nFixes https://github.com/bitcoin/bitcoin/issues/20184 (case 4.)",
      "tree": {
        "sha": "accb917701bd44878aa5e43ce767237d93e459b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/accb917701bd44878aa5e43ce767237d93e459b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmFUa9EACgkQVN8G9ktV\ny7/xyx/9Gra4aDZ3AITd2AtfLLNG69pxT5GnO7A8DCAcJ3afVZBbRaFsY/nDReiz\nR5z9iDW6r2RPUQWozczM4L2hmaL/hOdSknM72UkFL95jjdHxsONEeTfAfsXtBJyI\nUkTqWR6E7e3YJBP1JgPqGqOI3VbOPTt3ux52MJQFWzcFXXS6rmGW111GlLwkQIJ6\n+gEK/kTwvrRTeG/02TCJMuHUzLomYQkaaqqYwyiAJj4vPDbqvHaddu24B7gHioW3\nuZaqMx5SEKDlcPcQ62duq3EHaK2Pu6E588O3UMUtnlK8fFAaMGnvSAJ6a02wgcaQ\nN2asWP8ywxzkB6YX8dJ7R//cS2E0CCglHyq9F1zm4bg7x/Jyo1joRiiOeTml++SL\npjOBNt6TUWoLDYeGCkxYCficb2Jfv83eFo3R0NIKTRwq4At8q82cQUD2HO3V1RGw\nbSXn8pzBKTruQ5qlqQoG0fNhnoYntl8I97ZA7DxLYYCOQ+FVAU72HB4c9/MyZYpJ\nf/+s54YdlczNQrU+Cx5jAY15FzbL86YvqPA69/hkFwfMVdjXWkCu9PjVbj6Fdwnu\nathXRwty+Wp9g5r290RA0i19fjovqoytqis6qrvGTvTYmAfPbMsor6lengf0qbEN\ngJQ5p/5LQhNCjBvXJmTt5p0mAIqvr/vhBFpQCh9unEq7itTX0XoFR5OleDnOll6r\nfaBQmL/SqI0XpIN+gfDtAAKKnm3zNIAm5jh35M1qnMRkN9lVOA23EbOhO07rK7+Z\nyZoFVduesOW6GM5TfpkqkiJ4LRRcGrotW/ii93o65gIianl9QKakopH67qaykFVB\nOdaIiDFhDAZE8bRGh8kLa7Z/N4yrb9nqTSsvnwYxypaDKD0+RXMdDPMrUhb6/UvG\na+19kZguvtqOtPRPCC13DYjzfWNe4D43rHAy/iuUQPOJel3nmCFqvWZ56RNoDZHd\nYMIidDT0o9ZiL5JR8U2LKfgpb4UXUrWk20647H51A+twdzVa7SlTeljlQy1kTkf1\nqH+B0NzjzEQVBot8+PvE+bubVuEZle6R1jint2XqHXJTAq3BcmXo14xb3QVUxJz2\nwLvATEiN6pyBV/KrEWa8kZ1LIi4uFQTfSl2cKchvu+lx5CFyQI+FXNVwH+KSPmFr\nj6QtGJjXq8X6Lvrh4Gc4PmJo5Ov0UBPkGiv214k9chR33+97rrcmc6JkZIHwQQFu\nUjjQz57ac4eHXkVtCbccFdl8zDVSLH0eDoge7jWDJpfAb7Vc4xQh58DmCkqBtIAA\ncw3GB2UtN2ciYzUdDDAbtrCOpvS/caxEDMf2tlkaprB9n1ndXWF2rO7l2PonWksS\nuN5yZVsOENrO/g6I24lp04/tNq8cbw==\n=kWBL\n-----END PGP SIGNATURE-----",
        "payload": "tree accb917701bd44878aa5e43ce767237d93e459b8\nparent a380a68e2db8836007d9391f2c5cd17350c0b3c3\nauthor Vasil Dimov <vd@FreeBSD.org> 1603114374 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1632922576 +0200\n\nnet: only assume all local addresses if listening on any\n\nIf `-bind=` is provided then we would bind only to a particular address\nand should not add all the other addresses of the machine to the list of\nlocal addresses.\n\nFixes https://github.com/bitcoin/bitcoin/issues/20184 (case 4.)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a380a68e2db8836007d9391f2c5cd17350c0b3c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a380a68e2db8836007d9391f2c5cd17350c0b3c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a380a68e2db8836007d9391f2c5cd17350c0b3c3"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 93,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9252c38e6e10968701742f7215a70f83b31a3386",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5",
        "patch": "@@ -1692,8 +1692,6 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);\n     if (node.peerman) node.peerman->SetBestHeight(chain_active_height);\n \n-    Discover();\n-\n     // Map ports with UPnP or NAT-PMP.\n     StartMapPort(args.GetBoolArg(\"-upnp\", DEFAULT_UPNP), gArgs.GetBoolArg(\"-natpmp\", DEFAULT_NATPMP));\n \n@@ -1767,6 +1765,12 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         StartTorControl(onion_service_target);\n     }\n \n+    if (connOptions.bind_on_any) {\n+        // Only add all IP addresses of the machine if we would be listening on\n+        // any address - 0.0.0.0 (IPv4) and :: (IPv6).\n+        Discover();\n+    }\n+\n     for (const auto& net : args.GetArgs(\"-whitelist\")) {\n         NetWhitelistPermissions subnet;\n         bilingual_str error;"
      },
      {
        "sha": "2a509afd2cbca924d2fcae2fb999eda10852c158",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5",
        "patch": "@@ -182,7 +182,15 @@ enum class ConnectionType {\n \n /** Convert ConnectionType enum to a string value */\n std::string ConnectionTypeAsString(ConnectionType conn_type);\n+\n+/**\n+ * Look up IP addresses from all interfaces on the machine and add them to the\n+ * list of local addresses to self-advertise.\n+ * The loopback interface is skipped and only the first address from each\n+ * interface is used.\n+ */\n void Discover();\n+\n uint16_t GetListenPort();\n \n enum"
      },
      {
        "sha": "6e07f2f16c836ce2a0b7c1399049dcc7d11bf45b",
        "filename": "test/functional/feature_bind_port_discover.py",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5/test/functional/feature_bind_port_discover.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5/test/functional/feature_bind_port_discover.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bind_port_discover.py?ref=cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5",
        "patch": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that -discover does not add all interfaces' addresses if we listen on only some of them\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework, SkipTest\n+from test_framework.util import assert_equal\n+\n+# We need to bind to a routable address for this test to exercise the relevant code\n+# and also must have another routable address on another interface which must not\n+# be named \"lo\" or \"lo0\".\n+# To set these routable addresses on the machine, use:\n+# Linux:\n+# ifconfig lo:0 1.1.1.1/32 up && ifconfig lo:1 2.2.2.2/32 up  # to set up\n+# ifconfig lo:0 down && ifconfig lo:1 down  # to remove it, after the test\n+# FreeBSD:\n+# ifconfig em0 1.1.1.1/32 alias && ifconfig wlan0 2.2.2.2/32 alias  # to set up\n+# ifconfig em0 1.1.1.1 -alias && ifconfig wlan0 2.2.2.2 -alias  # to remove it, after the test\n+ADDR1 = '1.1.1.1'\n+ADDR2 = '2.2.2.2'\n+\n+BIND_PORT = 31001\n+\n+class BindPortDiscoverTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Avoid any -bind= on the command line. Force the framework to avoid adding -bind=127.0.0.1.\n+        self.setup_clean_chain = True\n+        self.bind_to_localhost_only = False\n+        self.extra_args = [\n+            ['-discover', f'-port={BIND_PORT}'], # bind on any\n+            ['-discover', f'-bind={ADDR1}:{BIND_PORT}'],\n+        ]\n+        self.num_nodes = len(self.extra_args)\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\n+            \"--ihave1111and2222\", action='store_true', dest=\"ihave1111and2222\",\n+            help=f\"Run the test, assuming {ADDR1} and {ADDR2} are configured on the machine\",\n+            default=False)\n+\n+    def skip_test_if_missing_module(self):\n+        if not self.options.ihave1111and2222:\n+            raise SkipTest(\n+                f\"To run this test make sure that {ADDR1} and {ADDR2} (routable addresses) are \"\n+                \"assigned to the interfaces on this machine and rerun with --ihave1111and2222\")\n+\n+    def run_test(self):\n+        self.log.info(\n+                \"Test that if -bind= is not passed then all addresses are \"\n+                \"added to localaddresses\")\n+        found_addr1 = False\n+        found_addr2 = False\n+        for local in self.nodes[0].getnetworkinfo()['localaddresses']:\n+            if local['address'] == ADDR1:\n+                found_addr1 = True\n+                assert_equal(local['port'], BIND_PORT)\n+            if local['address'] == ADDR2:\n+                found_addr2 = True\n+                assert_equal(local['port'], BIND_PORT)\n+        assert found_addr1\n+        assert found_addr2\n+\n+        self.log.info(\n+                \"Test that if -bind= is passed then only that address is \"\n+                \"added to localaddresses\")\n+        found_addr1 = False\n+        for local in self.nodes[1].getnetworkinfo()['localaddresses']:\n+            if local['address'] == ADDR1:\n+                found_addr1 = True\n+                assert_equal(local['port'], BIND_PORT)\n+            assert local['address'] != ADDR2\n+        assert found_addr1\n+\n+if __name__ == '__main__':\n+    BindPortDiscoverTest().main()"
      },
      {
        "sha": "18e6b26f3532025a190ac02ce54031b14c772d6e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=cb86c1fd20715c9a7e95dea1fd2ce6894d7e9ad5",
        "patch": "@@ -280,6 +280,7 @@\n     'feature_loadblock.py',\n     'p2p_dos_header_tree.py',\n     'p2p_add_connections.py',\n+    'feature_bind_port_discover.py',\n     'p2p_unrequested_blocks.py',\n     'p2p_blockfilters.py',\n     'p2p_message_capture.py',"
      }
    ]
  }
]