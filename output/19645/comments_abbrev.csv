DrahtBot,2020-08-02 20:11:52,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19339 (validation: re-delegate absurd fee checking from mempool to clients by glozow)\n\nIf you consider this pull reques",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-667719132,667719132,
JeremyRubin,2020-08-02 20:35:02,"i'm leaning toward a concept nack.\n\nI don't think this is urgent to fix and incentivizes using the mempool as working space for negotiating smaller witnesses, rather than attempting to produce a smaller signature on first broadcast. Further, this opens up potential attacks where you can make malleable smaller and smaller witnesses and keep resubmitting to boost feerate or something. I also thi",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-667721613,667721613,
ariard,2020-08-02 21:37:09,"> I don't think this is urgent to fix and incentivizes using the mempool as working space for negotiating smaller witnesses, rather than attempting to produce a smaller signature on first broadcast.\n\nI think the notion of first broadcast doesn't hold when you have multiple-party involved with alternatives spending paths and so potential concurrent broadcasts. Parties can't produce smaller sign",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-667727767,667727767,
jnewbery,2020-08-03 12:21:44,"Concept ACK. As long as this is re-using the BIP125 RBF logic, then I can't see how it can be any more of an attack vector than any other kind of RBF.\n\n> these replacement policies are really only relevant once more complex taproot scripts are widely deployed and a change like this can be added to a future release policy easily.\n\nI think we'd want this widely deployed _before_  such script",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-667992586,667992586,
sdaftuar,2020-08-05 13:12:11,"Conceptually I agree this would be a reasonable (incentive-compatible) behavior, but I'm not sure this is worth the complexity/effort to implement this change.  To do this correctly, you'd also want to not evict all the descendants of the replaced transaction in situations like this, which I think means more special cased mempool acceptance logic.\n\nIs there any application out there that would",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-669185028,669185028,
JeremyRubin,2020-08-05 16:53:14,"@sdaftuar I think the issue is more that an adversary can use it.\n\nE.g., say I do a coinjoin with you, and we create a txn with a feerate A and a witness weight of X. Then, as one of the parties to the txn, I create a much heavier witness weight 2X, and decrease the feerate to like 0.7A. Now it takes forever to confirm.\n\nSo it's less so someone using it, than abusing it.",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-669308250,669308250,
sdaftuar,2020-08-05 17:03:48,"> E.g., say I do a coinjoin with you, and we create a txn with a feerate A and a witness weight of X. Then, as one of the parties to the txn, I create a much heavier witness weight 2X, and decrease the feerate to like 0.7A. Now it takes forever to confirm.\n\nI get that this is a theoretical concern, but has this ever actually happened to anyone?  I can imagine there could be lots of reasons why",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-669313663,669313663,
ariard,2020-08-06 09:42:44,">  To do this correctly, you'd also want to not evict all the descendants of the replaced transaction in situations like this, which I think means more special cased mempool acceptance logic.\n\nI agree in-place substitution while conserving chain of transactions would be better bandwidth-wise. But that would require special RBF rules to handle it and I think it's better to strictly bound to our",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-669827588,669827588,
naumenkogs,2020-08-06 10:12:59,"> E.g., say I do a coinjoin with you, and we create a txn with a feerate A and a witness weight of X. Then, as one of the parties to the txn, I create a much heavier witness weight 2X, and decrease the feerate to like 0.7A. Now it takes forever to confirm.\n\nI think this concern is indeed valid and the problem should be addressed. However, it's hard for me to justify at which cost (code complex",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-669840943,669840943,
ariard,2020-08-06 12:34:10,"> We also want to make sure that this solution is indeed sufficient and the best alternative among others.\n\nJust to clarify, this current proposal doesn't effectively mitigate this without further change to our RBF handling due to the default `incrementalrelayfee` value. However, as my previous comment aims to underscore, it does provide value today for users with alternative script branches, ",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-669899731,669899731,
ajtowns,2020-08-11 16:21:15,"Suggest calling this ""updating tx with cheaper witness"" or similar -- ""wtxid-acceptance"" is pretty generic, it's more analogous to ""replace by fee"", except that you're not even replacing anything as far as the txid goes, which is 99% of what matters? I believe the rule is ""txid remains the same but overall weight decreases; so only witness data can change, tx fee rate increases, and no descendants",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-672066297,672066297,
luke-jr,2020-08-11 20:13:17,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-672255437,672255437,
ariard,2020-08-13 14:24:03,"@ajtowns Good call, took your suggestion. Initially called it ""wtxid-acceptance"" as this is literally what this PR does, evaluating an already-present utxo-spend candidate on wtxid rather than txid. In practice, I agree that txid is what matters, like evaluating descendants limits. Note, for implementation simplicity, it does evict descendants from mempool, we can implement in-place substitution a",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-673509569,673509569,
JeremyRubin,2020-08-13 15:27:08,"@ariard does it make sense to attempt to merge the witnesses into a lowest fee form? E.g. if witA[0] > witB[0], but witA[1] + withA[0] < witB[0] + withB[1] it may make sense to make a new witC comprised of the best of both.",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-673544971,673544971,
ariard,2020-08-20 21:06:56,"@JeremyRubin Do you mean cross-inputs, i.e if we learn wtxid_1:(witA, witB) and wtxid_2:(witA', witB') and  witA > witA' and witB < witB' we select witA and witB' to compose new wtxid_3 ? Or single-input, if by decomposing multiple known witnesses and analyzing witnessScript we're able to compress to a better feerate witness ? \n\nEither way, I think what your question is raising is a _separatio",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-677905038,677905038,
ariard,2020-08-20 21:39:08,"@sdaftuar \n\n> I get that this is a theoretical concern, but has this ever actually happened to anyone?  I can imagine there could be lots of reasons why behavior like this would not actually take place in practice.\n\nWhile opening this PR, I thought too it was a theoretical concern, but [reviewing the DLC specs](https://github.com/discreetlogcontracts/dlcspecs/pull/51#discussion_r467589135)",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-677919723,677919723,
JeremyRubin,2020-08-20 23:27:40,"> @JeremyRubin Do you mean cross-inputs, i.e if we learn wtxid_1:(witA, witB) and wtxid_2:(witA', witB') and witA > witA' and witB < witB' we select witA and witB' to compose new wtxid_3 ? Or single-input, if by decomposing multiple known witnesses and analyzing witnessScript we're able to compress to a better feerate witness ?\n> \n> Either way, I think what your question is raising is a _separ",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-677955391,677955391,
glozow,2020-10-05 23:41:20,"> ""txn-already-in-mempool"" isn't accurate anymore in a wtxid-relay context.\n\nI think at the very least there should be a clearer error for this. AFAIK right now a user would have to _guess_ that the one in mempool has a different witness and then use `getrawmempool` or `getrawtransaction` to confirm?\n\nIn terms of DoSing, it seems to me that this is essentially ""RBF taking into account witn",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-703946216,703946216,
DrahtBot,2020-10-07 04:25:40,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-704683092,704683092,
ariard,2020-10-07 18:15:28,"@glozow \n\n> I think at the very least there should be a clearer error for this. AFAIK right now a user would have to guess that the one in mempool has a different witness and then use getrawmempool or getrawtransaction to confirm?\n\nGood idea, that's maybe better for now to return a new error for an unsuccessful `sendrawtransaction` due to an already-present txid-with-different-wtixd. I'll ",https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-705109193,705109193,
