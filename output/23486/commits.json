[
  {
    "sha": "fad3f47cb1fdbac1ab301ea7a15198261fad7884",
    "node_id": "C_kwDOABII59oAKGZhZDNmNDdjYjFmZGJhYzFhYjMwMWVhN2ExNTE5ODI2MWZhZDc4ODQ",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-12T11:06:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-22T11:17:26Z"
      },
      "message": "refactor: Remove whitespace and cleanup decodescript logic\n\nCan be reviewed via --word-diff-regex=. and/or --ignore-all-space",
      "tree": {
        "sha": "c13a7a3b1d9bd664cc4e969ac3d6efd27dab7621",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c13a7a3b1d9bd664cc4e969ac3d6efd27dab7621"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad3f47cb1fdbac1ab301ea7a15198261fad7884",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiAQwv/ZJIp87ICjIDw6fxtUyaiwm8Rk8mJgl8yKfoD7KaXEOLR38uiS8sCDbS/\nAVSDzF/EgRjKR8SxPDroaNpQ6NFlRDKH19RdI2GCUklkxbiyf4H4ECuVHElGW2+S\nj3A2LctXyCVGEtQsmy+6YccxJLM9hTRD9pRczKe6Mr97L3nKYHLF6CXvZHU0w+Uq\nCaoj3J8Jn+1McVjoDXpZepJZuWjJJX2mm6ZNGT3tPWQaGLt1zW41XggYL6Kh+Sac\nOcVoza7W7Zw426rEMkHYdLxW/i6JOLtxq2YBbpyNOUZrAHzHpQAi5zm/fEPbI/S7\nmUsbd4AHtK0aWz7shfkTqLyGH3cN4B9BicTkMe7SNHrZAxTU575zjBgI5j8NaT5f\nNAi8vJvy6xmQj/k9JBFBqRBcR/zi6WtFA5XoTmY5fJCwlCjzqIMz0sG9QstAoDjo\nDFbnwC9aHMz0xCX3aMJurjZLQoRetaFm9SVvMvriyaPDuXcw7TL+nPOkQJPp9Ra7\nbIOxZMdT\n=n6HZ\n-----END PGP SIGNATURE-----",
        "payload": "tree c13a7a3b1d9bd664cc4e969ac3d6efd27dab7621\nparent ee7e06156357c333caef381b6acb3109d0187666\nauthor MarcoFalke <falke.marco@gmail.com> 1636715209 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1637579846 +0100\n\nrefactor: Remove whitespace and cleanup decodescript logic\n\nCan be reviewed via --word-diff-regex=. and/or --ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad3f47cb1fdbac1ab301ea7a15198261fad7884",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad3f47cb1fdbac1ab301ea7a15198261fad7884",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad3f47cb1fdbac1ab301ea7a15198261fad7884/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee7e06156357c333caef381b6acb3109d0187666",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee7e06156357c333caef381b6acb3109d0187666",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee7e06156357c333caef381b6acb3109d0187666"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 57,
      "deletions": 57
    },
    "files": [
      {
        "sha": "e76f387053061479b7141a3eb045475c6d7cfba3",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 57,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad3f47cb1fdbac1ab301ea7a15198261fad7884/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad3f47cb1fdbac1ab301ea7a15198261fad7884/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fad3f47cb1fdbac1ab301ea7a15198261fad7884",
        "patch": "@@ -535,32 +535,33 @@ static std::string GetAllOutputTypes()\n \n static RPCHelpMan decodescript()\n {\n-    return RPCHelpMan{\"decodescript\",\n-                \"\\nDecode a hex-encoded script.\\n\",\n-                {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded script\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::STR, \"asm\", \"Script public key\"},\n-                        {RPCResult::Type::STR, \"type\", \"The output type (e.g. \"+GetAllOutputTypes()+\")\"},\n-                        {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n-                        {RPCResult::Type::STR, \"p2sh\", /* optional */ true, \"address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH)\"},\n-                        {RPCResult::Type::OBJ, \"segwit\", /* optional */ true, \"Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness)\",\n-                        {\n-                            {RPCResult::Type::STR, \"asm\", \"String representation of the script public key\"},\n-                            {RPCResult::Type::STR_HEX, \"hex\", \"Hex string of the script public key\"},\n-                            {RPCResult::Type::STR, \"type\", \"The type of the script public key (e.g. witness_v0_keyhash or witness_v0_scripthash)\"},\n-                            {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n-                            {RPCResult::Type::STR, \"p2sh-segwit\", \"address of the P2SH script wrapping this witness redeem script\"},\n-                        }},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n-            + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n-                },\n+    return RPCHelpMan{\n+        \"decodescript\",\n+        \"\\nDecode a hex-encoded script.\\n\",\n+        {\n+            {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded script\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::STR, \"asm\", \"Script public key\"},\n+                {RPCResult::Type::STR, \"type\", \"The output type (e.g. \" + GetAllOutputTypes() + \")\"},\n+                {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n+                {RPCResult::Type::STR, \"p2sh\", /* optional */ true, \"address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH)\"},\n+                {RPCResult::Type::OBJ, \"segwit\", /* optional */ true, \"Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness)\",\n+                 {\n+                     {RPCResult::Type::STR, \"asm\", \"String representation of the script public key\"},\n+                     {RPCResult::Type::STR_HEX, \"hex\", \"Hex string of the script public key\"},\n+                     {RPCResult::Type::STR, \"type\", \"The type of the script public key (e.g. witness_v0_keyhash or witness_v0_scripthash)\"},\n+                     {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n+                     {RPCResult::Type::STR, \"p2sh-segwit\", \"address of the P2SH script wrapping this witness redeem script\"},\n+                 }},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n+          + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n+        },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     RPCTypeCheck(request.params, {UniValue::VSTR});\n@@ -575,44 +576,43 @@ static RPCHelpMan decodescript()\n     }\n     ScriptPubKeyToUniv(script, r, /* include_hex */ false);\n \n-    UniValue type;\n-    type = find_value(r, \"type\");\n+    const std::string type{find_value(r, \"type\").get_str()};\n \n-    if (type.isStr() && type.get_str() != \"scripthash\") {\n+    if (type == \"scripthash\") {\n         // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n         // don't return the address for a P2SH of the P2SH.\n-        r.pushKV(\"p2sh\", EncodeDestination(ScriptHash(script)));\n-        // P2SH and witness programs cannot be wrapped in P2WSH, if this script\n-        // is a witness program, don't return addresses for a segwit programs.\n-        if (type.get_str() == \"pubkey\" || type.get_str() == \"pubkeyhash\" || type.get_str() == \"multisig\" || type.get_str() == \"nonstandard\") {\n-            std::vector<std::vector<unsigned char>> solutions_data;\n-            TxoutType which_type = Solver(script, solutions_data);\n-            // Uncompressed pubkeys cannot be used with segwit checksigs.\n-            // If the script contains an uncompressed pubkey, skip encoding of a segwit program.\n-            if ((which_type == TxoutType::PUBKEY) || (which_type == TxoutType::MULTISIG)) {\n-                for (const auto& solution : solutions_data) {\n-                    if ((solution.size() != 1) && !CPubKey(solution).IsCompressed()) {\n-                        return r;\n-                    }\n+        return r;\n+    }\n+    r.pushKV(\"p2sh\", EncodeDestination(ScriptHash(script)));\n+    // P2SH and witness programs cannot be wrapped in P2WSH, if this script\n+    // is a witness program, don't return addresses for a segwit programs.\n+    if (type == \"pubkey\" || type == \"pubkeyhash\" || type == \"multisig\" || type == \"nonstandard\") {\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        TxoutType which_type = Solver(script, solutions_data);\n+        // Uncompressed pubkeys cannot be used with segwit checksigs.\n+        // If the script contains an uncompressed pubkey, skip encoding of a segwit program.\n+        if ((which_type == TxoutType::PUBKEY) || (which_type == TxoutType::MULTISIG)) {\n+            for (const auto& solution : solutions_data) {\n+                if ((solution.size() != 1) && !CPubKey(solution).IsCompressed()) {\n+                    return r;\n                 }\n             }\n-            UniValue sr(UniValue::VOBJ);\n-            CScript segwitScr;\n-            if (which_type == TxoutType::PUBKEY) {\n-                segwitScr = GetScriptForDestination(WitnessV0KeyHash(Hash160(solutions_data[0])));\n-            } else if (which_type == TxoutType::PUBKEYHASH) {\n-                segwitScr = GetScriptForDestination(WitnessV0KeyHash(uint160{solutions_data[0]}));\n-            } else {\n-                // Scripts that are not fit for P2WPKH are encoded as P2WSH.\n-                // Newer segwit program versions should be considered when then become available.\n-                segwitScr = GetScriptForDestination(WitnessV0ScriptHash(script));\n-            }\n-            ScriptPubKeyToUniv(segwitScr, sr, /* include_hex */ true);\n-            sr.pushKV(\"p2sh-segwit\", EncodeDestination(ScriptHash(segwitScr)));\n-            r.pushKV(\"segwit\", sr);\n         }\n+        UniValue sr(UniValue::VOBJ);\n+        CScript segwitScr;\n+        if (which_type == TxoutType::PUBKEY) {\n+            segwitScr = GetScriptForDestination(WitnessV0KeyHash(Hash160(solutions_data[0])));\n+        } else if (which_type == TxoutType::PUBKEYHASH) {\n+            segwitScr = GetScriptForDestination(WitnessV0KeyHash(uint160{solutions_data[0]}));\n+        } else {\n+            // Scripts that are not fit for P2WPKH are encoded as P2WSH.\n+            // Newer segwit program versions should be considered when then become available.\n+            segwitScr = GetScriptForDestination(WitnessV0ScriptHash(script));\n+        }\n+        ScriptPubKeyToUniv(segwitScr, sr, /* include_hex */ true);\n+        sr.pushKV(\"p2sh-segwit\", EncodeDestination(ScriptHash(segwitScr)));\n+        r.pushKV(\"segwit\", sr);\n     }\n-\n     return r;\n },\n     };"
      }
    ]
  },
  {
    "sha": "fa517bed0858a4c27a5236a339320210d07ea1df",
    "node_id": "C_kwDOABII59oAKGZhNTE3YmVkMDg1OGE0YzI3YTUyMzZhMzM5MzIwMjEwZDA3ZWExZGY",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-14T10:55:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-22T11:17:32Z"
      },
      "message": "refactor: Call type-solver earlier in decodescript\n\nAlso, remove std::string type.",
      "tree": {
        "sha": "f0b0043f0244de2d795758c6032924de8b6d2d40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0b0043f0244de2d795758c6032924de8b6d2d40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa517bed0858a4c27a5236a339320210d07ea1df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgZPwv/R2zHIm1x/3xU5UeOlhNDn5Emyq85TuuZYxEEgvQQND/GnZHqQzcC8LeA\nW7d8UofCUz6aGRsyL54FRMSBDnBQM2JdY1/wiHVoV2cCE5eYHWeobcoczjRxalzx\nVZRJ/LgsKgoWuKwk0jQ5S2jEbeLG0hgsgfzquBRo4qG7wkq5R8We2ePD9H5nSR6a\nd1y8MLaEEuPy4+p0b4bq+THR+8hvcgYLMp8oRHeGY+z2NRWKPDQBa9QYByuyVufu\nOR1EOBZgiOxLvyIGc+0dnf+ebIyylx/rpHb45uiSruxaHcDI4ax+YNIvfGsdfyE7\n4N/ADOpYYeK3rWxQvJ4SZsWQ9kQQRknv9xXpePgGfEucfB30qNTzPFP+Rpt5R2U0\n3xXMaLrVYbm68x5m/o9N5yd8q42MNinWEKM2EPRX17lwGMKzy0rluPeJycZao2h3\ngJc0FgKBHRfabgjlyuB6ac0pLXhO/yhgRZQUj2Ndp1xmRyYAgE+hVZEWePQNqcs2\njwE0hS2c\n=fpmT\n-----END PGP SIGNATURE-----",
        "payload": "tree f0b0043f0244de2d795758c6032924de8b6d2d40\nparent fad3f47cb1fdbac1ab301ea7a15198261fad7884\nauthor MarcoFalke <falke.marco@gmail.com> 1636887328 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1637579852 +0100\n\nrefactor: Call type-solver earlier in decodescript\n\nAlso, remove std::string type.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa517bed0858a4c27a5236a339320210d07ea1df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa517bed0858a4c27a5236a339320210d07ea1df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa517bed0858a4c27a5236a339320210d07ea1df/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad3f47cb1fdbac1ab301ea7a15198261fad7884",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad3f47cb1fdbac1ab301ea7a15198261fad7884",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad3f47cb1fdbac1ab301ea7a15198261fad7884"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5ad4f76caf1ce48349f4c24add97a5724e77d78d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa517bed0858a4c27a5236a339320210d07ea1df/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa517bed0858a4c27a5236a339320210d07ea1df/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa517bed0858a4c27a5236a339320210d07ea1df",
        "patch": "@@ -576,19 +576,18 @@ static RPCHelpMan decodescript()\n     }\n     ScriptPubKeyToUniv(script, r, /* include_hex */ false);\n \n-    const std::string type{find_value(r, \"type\").get_str()};\n+    std::vector<std::vector<unsigned char>> solutions_data;\n+    const TxoutType which_type{Solver(script, solutions_data)};\n \n-    if (type == \"scripthash\") {\n+    if (which_type == TxoutType::SCRIPTHASH) {\n         // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n         // don't return the address for a P2SH of the P2SH.\n         return r;\n     }\n     r.pushKV(\"p2sh\", EncodeDestination(ScriptHash(script)));\n     // P2SH and witness programs cannot be wrapped in P2WSH, if this script\n     // is a witness program, don't return addresses for a segwit programs.\n-    if (type == \"pubkey\" || type == \"pubkeyhash\" || type == \"multisig\" || type == \"nonstandard\") {\n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        TxoutType which_type = Solver(script, solutions_data);\n+    if (which_type == TxoutType::PUBKEY || which_type == TxoutType::PUBKEYHASH || which_type == TxoutType::MULTISIG || which_type == TxoutType::NONSTANDARD) {\n         // Uncompressed pubkeys cannot be used with segwit checksigs.\n         // If the script contains an uncompressed pubkey, skip encoding of a segwit program.\n         if ((which_type == TxoutType::PUBKEY) || (which_type == TxoutType::MULTISIG)) {"
      }
    ]
  },
  {
    "sha": "fa0aec30e2242ee6c3d859314352384c1b21e806",
    "node_id": "C_kwDOABII59oAKGZhMGFlYzMwZTIyNDJlZTZjM2Q4NTkzMTQzNTIzODRjMWIyMWU4MDY",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-12T12:25:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-22T13:22:48Z"
      },
      "message": "rpc: Only allow specific types to be P2(W)SH wrapped in decodescript\n\nCan be reviewed with --ignore-all-space",
      "tree": {
        "sha": "7ebbd8f08106aaca0bb4d96db9f20fd8ce2f441e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ebbd8f08106aaca0bb4d96db9f20fd8ce2f441e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0aec30e2242ee6c3d859314352384c1b21e806",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjNpwwAwkn4EbUuUNUM6dftlomRtFctCKXs45iQS+Nixkrtx0Hhpc5zZ7jxEJdt\n8xiTEi1wNFAYadaE29A48w0T0qQgmDFgMZ3Dsx2CbNyULmpntD98dNoTpg0rIhwZ\novgZVynf6XzGQo1A2z2fg2A6uyms50kDtH0mpe2fLWMDOmcj0zl45Wmx23RnwVG1\nNPmDHFan1pJaPU6nrbPgmRmYWtEggXQsx47ACakQ9Vsfyfdl8v8j9KLKwpl/YeRe\nYXDaXbC0bhG7pjI8Vr3G784jaDm+t6zyLC8/iRLXc7dRXvaVVSRYw/3/loOWBkNt\n5uxAAgxbbk8kn0TpwHaLg4116DGeaQuJwJzbpVTIpipR60V5vsRHPke8g/aJgo3W\nBj1ic6VMP1uSMrQ5MXlEGwkfw3Or7g3IMEYWMy9kUHFxWGhQQLvSyTLW/TgdZTq8\n5qPUZI/NFj8glhsBxeiShjve9y5EFvjaCgzgPV1FDVUQavsdamEOt5A5HSbjxzZ0\n86KPzzkS\n=LVMB\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ebbd8f08106aaca0bb4d96db9f20fd8ce2f441e\nparent fa517bed0858a4c27a5236a339320210d07ea1df\nauthor MarcoFalke <falke.marco@gmail.com> 1636719904 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1637587368 +0100\n\nrpc: Only allow specific types to be P2(W)SH wrapped in decodescript\n\nCan be reviewed with --ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0aec30e2242ee6c3d859314352384c1b21e806",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0aec30e2242ee6c3d859314352384c1b21e806",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0aec30e2242ee6c3d859314352384c1b21e806/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa517bed0858a4c27a5236a339320210d07ea1df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa517bed0858a4c27a5236a339320210d07ea1df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa517bed0858a4c27a5236a339320210d07ea1df"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 65,
      "deletions": 27
    },
    "files": [
      {
        "sha": "0a31f36855bcbc609a86d68988ce448fe9b067ea",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 27,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0aec30e2242ee6c3d859314352384c1b21e806/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0aec30e2242ee6c3d859314352384c1b21e806/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa0aec30e2242ee6c3d859314352384c1b21e806",
        "patch": "@@ -547,8 +547,10 @@ static RPCHelpMan decodescript()\n                 {RPCResult::Type::STR, \"asm\", \"Script public key\"},\n                 {RPCResult::Type::STR, \"type\", \"The output type (e.g. \" + GetAllOutputTypes() + \")\"},\n                 {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n-                {RPCResult::Type::STR, \"p2sh\", /* optional */ true, \"address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH)\"},\n-                {RPCResult::Type::OBJ, \"segwit\", /* optional */ true, \"Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness)\",\n+                {RPCResult::Type::STR, \"p2sh\", /*optional=*/true,\n+                 \"address of P2SH script wrapping this redeem script (not returned for types that should not be wrapped)\"},\n+                {RPCResult::Type::OBJ, \"segwit\", /*optional=*/true,\n+                 \"Result of a witness script public key wrapping this redeem script (not returned for types that should not be wrapped)\",\n                  {\n                      {RPCResult::Type::STR, \"asm\", \"String representation of the script public key\"},\n                      {RPCResult::Type::STR_HEX, \"hex\", \"Hex string of the script public key\"},\n@@ -579,39 +581,75 @@ static RPCHelpMan decodescript()\n     std::vector<std::vector<unsigned char>> solutions_data;\n     const TxoutType which_type{Solver(script, solutions_data)};\n \n-    if (which_type == TxoutType::SCRIPTHASH) {\n-        // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n-        // don't return the address for a P2SH of the P2SH.\n+    // Check if wrapping makes sense at all\n+    switch (which_type) {\n+    case TxoutType::MULTISIG:\n+    case TxoutType::NONSTANDARD:\n+    case TxoutType::PUBKEY:\n+    case TxoutType::PUBKEYHASH:\n+    case TxoutType::WITNESS_V0_KEYHASH:\n+    case TxoutType::WITNESS_V0_SCRIPTHASH:\n+        // Can be wrapped\n+        break;\n+    case TxoutType::NULL_DATA:\n+    case TxoutType::SCRIPTHASH:\n+    case TxoutType::WITNESS_UNKNOWN:\n+    case TxoutType::WITNESS_V1_TAPROOT:\n+        // Should not be wrapped, so return early\n         return r;\n     }\n+    if (!script.HasValidOps() || script.IsUnspendable()) {\n+        return r;\n+    }\n+    for (CScript::const_iterator it{script.begin()}; it != script.end();) {\n+        opcodetype op;\n+        CHECK_NONFATAL(script.GetOp(it, op));\n+        if (op == OP_CHECKSIGADD || IsOpSuccess(op)) {\n+            return r;\n+        }\n+    }\n     r.pushKV(\"p2sh\", EncodeDestination(ScriptHash(script)));\n+\n     // P2SH and witness programs cannot be wrapped in P2WSH, if this script\n     // is a witness program, don't return addresses for a segwit programs.\n-    if (which_type == TxoutType::PUBKEY || which_type == TxoutType::PUBKEYHASH || which_type == TxoutType::MULTISIG || which_type == TxoutType::NONSTANDARD) {\n-        // Uncompressed pubkeys cannot be used with segwit checksigs.\n-        // If the script contains an uncompressed pubkey, skip encoding of a segwit program.\n-        if ((which_type == TxoutType::PUBKEY) || (which_type == TxoutType::MULTISIG)) {\n-            for (const auto& solution : solutions_data) {\n-                if ((solution.size() != 1) && !CPubKey(solution).IsCompressed()) {\n-                    return r;\n-                }\n+    switch (which_type) {\n+    case TxoutType::MULTISIG:\n+    case TxoutType::NONSTANDARD:\n+    case TxoutType::PUBKEY:\n+    case TxoutType::PUBKEYHASH:\n+        // Can be wrapped\n+        break;\n+    case TxoutType::NULL_DATA:\n+    case TxoutType::SCRIPTHASH:\n+    case TxoutType::WITNESS_UNKNOWN:\n+    case TxoutType::WITNESS_V0_KEYHASH:\n+    case TxoutType::WITNESS_V0_SCRIPTHASH:\n+    case TxoutType::WITNESS_V1_TAPROOT:\n+        // Should not be wrapped, so return early\n+        return r;\n+    }\n+    // Uncompressed pubkeys cannot be used with segwit checksigs.\n+    // If the script contains an uncompressed pubkey, skip encoding of a segwit program.\n+    if ((which_type == TxoutType::PUBKEY) || (which_type == TxoutType::MULTISIG)) {\n+        for (const auto& solution : solutions_data) {\n+            if ((solution.size() != 1) && !CPubKey(solution).IsCompressed()) {\n+                return r;\n             }\n         }\n-        UniValue sr(UniValue::VOBJ);\n-        CScript segwitScr;\n-        if (which_type == TxoutType::PUBKEY) {\n-            segwitScr = GetScriptForDestination(WitnessV0KeyHash(Hash160(solutions_data[0])));\n-        } else if (which_type == TxoutType::PUBKEYHASH) {\n-            segwitScr = GetScriptForDestination(WitnessV0KeyHash(uint160{solutions_data[0]}));\n-        } else {\n-            // Scripts that are not fit for P2WPKH are encoded as P2WSH.\n-            // Newer segwit program versions should be considered when then become available.\n-            segwitScr = GetScriptForDestination(WitnessV0ScriptHash(script));\n-        }\n-        ScriptPubKeyToUniv(segwitScr, sr, /* include_hex */ true);\n-        sr.pushKV(\"p2sh-segwit\", EncodeDestination(ScriptHash(segwitScr)));\n-        r.pushKV(\"segwit\", sr);\n     }\n+    UniValue sr(UniValue::VOBJ);\n+    CScript segwitScr;\n+    if (which_type == TxoutType::PUBKEY) {\n+        segwitScr = GetScriptForDestination(WitnessV0KeyHash(Hash160(solutions_data[0])));\n+    } else if (which_type == TxoutType::PUBKEYHASH) {\n+        segwitScr = GetScriptForDestination(WitnessV0KeyHash(uint160{solutions_data[0]}));\n+    } else {\n+        // Scripts that are not fit for P2WPKH are encoded as P2WSH.\n+        segwitScr = GetScriptForDestination(WitnessV0ScriptHash(script));\n+    }\n+    ScriptPubKeyToUniv(segwitScr, sr, /* include_hex */ true);\n+    sr.pushKV(\"p2sh-segwit\", EncodeDestination(ScriptHash(segwitScr)));\n+    r.pushKV(\"segwit\", sr);\n     return r;\n },\n     };"
      }
    ]
  }
]