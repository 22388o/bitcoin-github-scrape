jnewbery,2021-08-25 13:47:26,Code review ACK f293c68be0469894c988711559f5528020c0ff71,https://github.com/bitcoin/bitcoin/pull/22796#issuecomment-905516755,905516755,
DrahtBot,2021-08-25 23:49:28,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22698](https://github.com/bitcoin/bitcoin/pull/22698) (Implement RBF inherited signaling and fix getmempoolentry returne",https://github.com/bitcoin/bitcoin/pull/22796#issuecomment-905949924,905949924,
fanquake,2021-08-31 14:34:01,Please comment here when you're addressing followup comments / nits via the next PRs in the series.,https://github.com/bitcoin/bitcoin/pull/22796#issuecomment-909295352,909295352,
glozow,2021-09-01 09:11:34,"Next PR is #22675!\nAddressing documentation-related comments in #22855",https://github.com/bitcoin/bitcoin/pull/22796#issuecomment-910093172,910093172,
theStack,2021-08-25 19:45:57,"nit: I think this include is not needed in this compilation unit (neither `FormatMoney` nor `ParseMoney` is used anywhere here)\n```suggestion\n```",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r696062327,696062327,src/policy/rbf.cpp
glozow,2021-08-26 09:24:40,"ah true, I guess not needed until https://github.com/bitcoin/bitcoin/pull/22675/commits/781e100b6047f110f93e965146d5202ed7032e2c\n\nwill update if i need to repush",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r696454500,696454500,src/policy/rbf.cpp
ariard,2021-08-27 21:58:06,"nit: ""...by opt-in out its contributed input""",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r697739720,697739720,src/util/rbf.h
ariard,2021-08-27 22:13:48,"I think what we called ""modified fees"" in before-this-PR `PreChecks()` are currently the base_fee of the mempool candidate plus the delta from `PrioritiseTransaction` (L698 in `src/validation.cpp`). Maybe the ""modified"" adjective can be dropped ?",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r697744794,697744794,src/validation.cpp
ariard,2021-08-27 23:06:43,"Note, I think this commit is changing a bit the processing, Previously, the 3 operations a) checking candidate feerate is better than any replaced transaction b) fulfilling the set of parents inputs and c) accounting replaced transactions with descendants in the same loop.\n\nAfter this commit, `setIterConflicting` is iterated 3 times. Overall I think it's okay, though it might add a bit of work",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r697759143,697759143,src/validation.cpp
ariard,2021-08-27 23:31:04,"What do you mean by ""Not cleared at the start; any existing mempool entries will remain in the set"" ?\n\nIf the replacement is successful,  `allConflicting` are going to be removed in `Finalize`. For package support, I think this operation we'll remove the per-package tx `allConflicting` set all at once. If `PreChecks` or any new other package policy checks as failed, don't modify mempool state.",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r697764806,697764806,src/policy/rbf.h
ariard,2021-08-27 23:41:30,"nit: ""as replaced parents might have intersecting descendants""",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r697767044,697767044,src/policy/rbf.cpp
glozow,2021-08-31 09:08:56,"It's similar to other mempool functions where you can pass in a `setEntries` and it will `insert` entries, but not expect it to be empty beforehand, so you can call it multiple times and end up with an aggregated set. I'm expecting to use this in package RBF. It has nothing to do with what's going to end up in the mempool; this is just a helper function.\n\nThe reason I document it here is I thi",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r699133182,699133182,src/policy/rbf.h
glozow,2021-08-31 09:10:21,I elaborate on this comment in a33fdd0b981965982754b39586eedb7ae456ba57 - these commits are MOVEONLY,https://github.com/bitcoin/bitcoin/pull/22796#discussion_r699134183,699134183,src/policy/rbf.cpp
glozow,2021-08-31 09:10:50,"Noted, will add this to a33fdd0b981965982754b39586eedb7ae456ba57!",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r699134584,699134584,src/util/rbf.h
glozow,2021-08-31 09:13:14,"Correct, modified is base + delta from prioritise. But why should we drop the ""modified"" adjective? It's still very widely used in the mempool and `MemPoolAccept` code. In my view, just saying ""fees"" is less clear, as I would assume that to mean base fees.",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r699136514,699136514,src/validation.cpp
glozow,2021-08-31 09:18:16,"Right, I was hoping to make this clear in the commit messages. Because of the changes in the preceding commit, we now quit immediately when we see more than `MAX_BIP_125_REPLACEMENT_CANDIDATES`. Previously, we'd grab all potential candidates and only check the total number afterward. So this PR has, overall, reduced the  complexity from O(n) to O(1) where n is the number of conflicts, which is why",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r699140383,699140383,src/validation.cpp
darosior,2021-09-01 07:13:23,"In the same spirit of exiting early, i think we could check `if (nModifiedFees < nConflictingFees)` here directly. We could probably also check the delta fee.",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r699939557,699939557,src/validation.cpp
glozow,2021-09-01 09:09:24,Taken in #22855,https://github.com/bitcoin/bitcoin/pull/22796#discussion_r700028093,700028093,src/util/rbf.h
glozow,2021-09-01 09:17:37,"I'm not sure if that would be much of an improvement? There would be <=100 entries to aggregate fees for, so this is pretty tightly bounded already.",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r700034236,700034236,src/validation.cpp
MarcoFalke,2021-09-02 10:11:13,"f293c68be0469894c988711559f5528020c0ff71: I think for new code we should avoid leaking mutable return args into a greater scope than needed. Especially when the goal is to re-use (https://github.com/bitcoin/bitcoin/pull/22675/files) the symbol (err_string), when it shouldn't be re-used. With C++17 this is trivial to fix.\n\nOne example:\n\n```cpp\n         if (const auto err_string{GetEntries",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r700944084,700944084,src/validation.cpp
glozow,2021-09-02 15:40:34,"Good point, I've added a followup commit for `GetEntriesForConflicts` and edited the rest of the functions to return a `std::optional<std::string>` in #22675",https://github.com/bitcoin/bitcoin/pull/22796#discussion_r701206996,701206996,src/validation.cpp
