[
  {
    "sha": "b001b9f6de7a039a468cf0f9645f3f0a430fa889",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDAxYjlmNmRlN2EwMzlhNDY4Y2YwZjk2NDVmM2YwYTQzMGZhODg5",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-27T09:03:49Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-24T14:47:21Z"
      },
      "message": "MOVEONLY: BIP125 max conflicts limit to policy/rbf.h\n\nA circular dependency is added because policy now depends on txmempool and\ntxmempool depends on validation. It is natural for [mempool] policy to\nrely on mempool; the problem is caused by txmempool depending on\nvalidation. #22677 will resolve this.",
      "tree": {
        "sha": "4b06827230389feaaced0fc6ad7c7794261cb396",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b06827230389feaaced0fc6ad7c7794261cb396"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b001b9f6de7a039a468cf0f9645f3f0a430fa889",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b001b9f6de7a039a468cf0f9645f3f0a430fa889",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b001b9f6de7a039a468cf0f9645f3f0a430fa889",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b001b9f6de7a039a468cf0f9645f3f0a430fa889/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fc15d15667d9d9c4fb5515ce73c05b4596298ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fc15d15667d9d9c4fb5515ce73c05b4596298ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fc15d15667d9d9c4fb5515ce73c05b4596298ec"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d61390361b327ac00fc0e4bb6edb38477df4b4d4",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b001b9f6de7a039a468cf0f9645f3f0a430fa889/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b001b9f6de7a039a468cf0f9645f3f0a430fa889/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=b001b9f6de7a039a468cf0f9645f3f0a430fa889",
        "patch": "@@ -7,6 +7,10 @@\n \n #include <txmempool.h>\n \n+/** Maximum number of transactions that can be replaced by BIP125 RBF (Rule #5). This includes all\n+ * mempool conflicts and their descendants. */\n+static constexpr uint32_t MAX_BIP125_REPLACEMENT_CANDIDATES{100};\n+\n /** The rbf state of unconfirmed transactions */\n enum class RBFTransactionState {\n     /** Unconfirmed tx that does not signal rbf and is not in the mempool */"
      },
      {
        "sha": "29f82c2de07f87ef4987b2448e3b9ac7b91c226f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b001b9f6de7a039a468cf0f9645f3f0a430fa889/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b001b9f6de7a039a468cf0f9645f3f0a430fa889/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b001b9f6de7a039a468cf0f9645f3f0a430fa889",
        "patch": "@@ -25,6 +25,7 @@\n #include <node/coinstats.h>\n #include <node/ui_interface.h>\n #include <policy/policy.h>\n+#include <policy/rbf.h>\n #include <policy/settings.h>\n #include <pow.h>\n #include <primitives/block.h>\n@@ -810,7 +811,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     {\n         CFeeRate newFeeRate(nModifiedFees, nSize);\n         std::set<uint256> setConflictsParents;\n-        const int maxDescendantsToVisit = 100;\n         for (const auto& mi : setIterConflicting) {\n             // Don't allow the replacement to reduce the feerate of the\n             // mempool.\n@@ -846,7 +846,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // This potentially overestimates the number of actual descendants\n         // but we just want to be conservative to avoid doing too much\n         // work.\n-        if (nConflictingCount <= maxDescendantsToVisit) {\n+        if (nConflictingCount <= MAX_BIP125_REPLACEMENT_CANDIDATES) {\n             // If not too many to replace, then calculate the set of\n             // transactions that would have to be evicted\n             for (CTxMemPool::txiter it : setIterConflicting) {\n@@ -861,7 +861,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                     strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n                         hash.ToString(),\n                         nConflictingCount,\n-                        maxDescendantsToVisit));\n+                        MAX_BIP125_REPLACEMENT_CANDIDATES));\n         }\n \n         for (unsigned int j = 0; j < tx.vin.size(); j++)"
      },
      {
        "sha": "233381f2d95a3a320a0940a7e02997dc65726c67",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b001b9f6de7a039a468cf0f9645f3f0a430fa889/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b001b9f6de7a039a468cf0f9645f3f0a430fa889/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=b001b9f6de7a039a468cf0f9645f3f0a430fa889",
        "patch": "@@ -15,6 +15,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"index/base -> validation -> index/blockfilterindex -> index/base\"\n     \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n+    \"policy/rbf -> txmempool -> validation -> policy/rbf\"\n     \"qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\"\n     \"qt/recentrequeststablemodel -> qt/walletmodel -> qt/recentrequeststablemodel\"\n     \"qt/sendcoinsdialog -> qt/walletmodel -> qt/sendcoinsdialog\""
      }
    ]
  },
  {
    "sha": "e0df41d7d584b854c2914d4afe7b21e0af3fbf69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGRmNDFkN2Q1ODRiODU0YzI5MTRkNGFmZTdiMjFlMGFmM2ZiZjY5",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-20T14:17:49Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-24T14:47:21Z"
      },
      "message": "[validation] default conflicting fees and size to 0\n\nThis should have no effect in practice, since we only ever call\nPreChecks once per transaction.",
      "tree": {
        "sha": "899bf45ad86d96013ae6c4e97fcb3b97ecd9e5be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/899bf45ad86d96013ae6c4e97fcb3b97ecd9e5be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0df41d7d584b854c2914d4afe7b21e0af3fbf69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0df41d7d584b854c2914d4afe7b21e0af3fbf69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0df41d7d584b854c2914d4afe7b21e0af3fbf69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0df41d7d584b854c2914d4afe7b21e0af3fbf69/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b001b9f6de7a039a468cf0f9645f3f0a430fa889",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b001b9f6de7a039a468cf0f9645f3f0a430fa889",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b001b9f6de7a039a468cf0f9645f3f0a430fa889"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "cc24c79e13964842f3a28284b9e4248e7c714cd0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0df41d7d584b854c2914d4afe7b21e0af3fbf69/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0df41d7d584b854c2914d4afe7b21e0af3fbf69/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e0df41d7d584b854c2914d4afe7b21e0af3fbf69",
        "patch": "@@ -475,8 +475,10 @@ class MemPoolAccept\n         bool m_replacement_transaction;\n         CAmount m_base_fees;\n         CAmount m_modified_fees;\n-        CAmount m_conflicting_fees;\n-        size_t m_conflicting_size;\n+        /** Total modified fees of all transactions being replaced. */\n+        CAmount m_conflicting_fees{0};\n+        /** Total virtual size of all transactions being replaced. */\n+        size_t m_conflicting_size{0};\n \n         const CTransactionRef& m_ptx;\n         const uint256& m_hash;\n@@ -799,8 +801,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     // Check if it's economically rational to mine this transaction rather\n     // than the ones it replaces.\n-    nConflictingFees = 0;\n-    nConflictingSize = 0;\n     uint64_t nConflictingCount = 0;\n \n     // If we don't hold the lock allConflicting might be incomplete; the"
      }
    ]
  },
  {
    "sha": "badb9b11a6f7e1e693cecc8cd5aae55a197d70e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWRiOWIxMWE2ZjdlMWU2OTNjZWNjOGNkNWFhZTU1YTE5N2Q3MGUy",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-20T12:01:07Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-24T14:47:21Z"
      },
      "message": "call SignalsOptInRBF instead of checking all inputs",
      "tree": {
        "sha": "03ac91f1d6279ad47badf384d131de33cf6749b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03ac91f1d6279ad47badf384d131de33cf6749b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/badb9b11a6f7e1e693cecc8cd5aae55a197d70e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/badb9b11a6f7e1e693cecc8cd5aae55a197d70e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/badb9b11a6f7e1e693cecc8cd5aae55a197d70e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/badb9b11a6f7e1e693cecc8cd5aae55a197d70e2/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0df41d7d584b854c2914d4afe7b21e0af3fbf69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0df41d7d584b854c2914d4afe7b21e0af3fbf69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0df41d7d584b854c2914d4afe7b21e0af3fbf69"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 10,
      "deletions": 20
    },
    "files": [
      {
        "sha": "4eb44b904f56d4008e1589ce581dda7afe3fec1e",
        "filename": "src/util/rbf.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/badb9b11a6f7e1e693cecc8cd5aae55a197d70e2/src/util/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/badb9b11a6f7e1e693cecc8cd5aae55a197d70e2/src/util/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/rbf.h?ref=badb9b11a6f7e1e693cecc8cd5aae55a197d70e2",
        "patch": "@@ -11,8 +11,15 @@ class CTransaction;\n \n static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n \n-// Check whether the sequence numbers on this transaction are signaling\n-// opt-in to replace-by-fee, according to BIP 125\n+/** Check whether the sequence numbers on this transaction are signaling\n+* opt-in to replace-by-fee, according to BIP 125.\n+* Allow opt-out of transaction replacement by setting\n+* nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n+*\n+* SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by\n+* non-replaceable transactions. All inputs rather than just one\n+* is for the sake of multi-party protocols, where we don't\n+* want a single party to be able to disable replacement. */\n bool SignalsOptInRBF(const CTransaction &tx);\n \n #endif // BITCOIN_UTIL_RBF_H"
      },
      {
        "sha": "0dade35ab25b5ad67aa094e6a4d2c8a21aa40f6b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 18,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/badb9b11a6f7e1e693cecc8cd5aae55a197d70e2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/badb9b11a6f7e1e693cecc8cd5aae55a197d70e2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=badb9b11a6f7e1e693cecc8cd5aae55a197d70e2",
        "patch": "@@ -605,31 +605,14 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             }\n             if (!setConflicts.count(ptxConflicting->GetHash()))\n             {\n-                // Allow opt-out of transaction replacement by setting\n-                // nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n-                //\n-                // SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by\n-                // non-replaceable transactions. All inputs rather than just one\n-                // is for the sake of multi-party protocols, where we don't\n-                // want a single party to be able to disable replacement.\n-                //\n                 // Transactions that don't explicitly signal replaceability are\n                 // *not* replaceable with the current logic, even if one of their\n                 // unconfirmed ancestors signals replaceability. This diverges\n                 // from BIP125's inherited signaling description (see CVE-2021-31876).\n                 // Applications relying on first-seen mempool behavior should\n                 // check all unconfirmed ancestors; otherwise an opt-in ancestor\n                 // might be replaced, causing removal of this descendant.\n-                bool fReplacementOptOut = true;\n-                for (const CTxIn &_txin : ptxConflicting->vin)\n-                {\n-                    if (_txin.nSequence <= MAX_BIP125_RBF_SEQUENCE)\n-                    {\n-                        fReplacementOptOut = false;\n-                        break;\n-                    }\n-                }\n-                if (fReplacementOptOut) {\n+                if (!SignalsOptInRBF(*ptxConflicting)) {\n                     return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"txn-mempool-conflict\");\n                 }\n "
      }
    ]
  },
  {
    "sha": "8d7179633552f58ca0d23305196dcb4249b6dce7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDcxNzk2MzM1NTJmNThjYTBkMjMzMDUxOTZkY2I0MjQ5YjZkY2U3",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-27T10:49:34Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-24T14:47:21Z"
      },
      "message": "[validation] quit RBF logic earlier and separate loops\n\nNo behavior change.\nWhile we're looking through the descendants and calculating how many\ntransactions we might replace, quit early, as soon as we hit 100.\nSince we're failing faster, we can also separate the loops - yes, we\nloop through more times, but this helps us detangle the different BIP125\nrules later.",
      "tree": {
        "sha": "4d6824b56117691c297a6eaca5e0d8084898c428",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d6824b56117691c297a6eaca5e0d8084898c428"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d7179633552f58ca0d23305196dcb4249b6dce7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d7179633552f58ca0d23305196dcb4249b6dce7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d7179633552f58ca0d23305196dcb4249b6dce7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d7179633552f58ca0d23305196dcb4249b6dce7/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "badb9b11a6f7e1e693cecc8cd5aae55a197d70e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/badb9b11a6f7e1e693cecc8cd5aae55a197d70e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/badb9b11a6f7e1e693cecc8cd5aae55a197d70e2"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 29,
      "deletions": 26
    },
    "files": [
      {
        "sha": "fdcf1289242d63e2fdb0f641fd0788aada866e6e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 26,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d7179633552f58ca0d23305196dcb4249b6dce7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d7179633552f58ca0d23305196dcb4249b6dce7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8d7179633552f58ca0d23305196dcb4249b6dce7",
        "patch": "@@ -782,9 +782,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         }\n     }\n \n-    // Check if it's economically rational to mine this transaction rather\n-    // than the ones it replaces.\n-    uint64_t nConflictingCount = 0;\n \n     // If we don't hold the lock allConflicting might be incomplete; the\n     // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n@@ -793,7 +790,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (fReplacementTransaction)\n     {\n         CFeeRate newFeeRate(nModifiedFees, nSize);\n-        std::set<uint256> setConflictsParents;\n         for (const auto& mi : setIterConflicting) {\n             // Don't allow the replacement to reduce the feerate of the\n             // mempool.\n@@ -818,33 +814,40 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                             newFeeRate.ToString(),\n                             oldFeeRate.ToString()));\n             }\n+        }\n+\n+        uint64_t nConflictingCount = 0;\n+        for (const auto& mi : setIterConflicting) {\n+            nConflictingCount += mi->GetCountWithDescendants();\n+            // This potentially overestimates the number of actual descendants\n+            // but we just want to be conservative to avoid doing too much\n+            // work.\n+            if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n+                        strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                            hash.ToString(),\n+                            nConflictingCount,\n+                            MAX_BIP125_REPLACEMENT_CANDIDATES));\n+            }\n+        }\n+        // If not too many to replace, then calculate the set of\n+        // transactions that would have to be evicted\n+        for (CTxMemPool::txiter it : setIterConflicting) {\n+            m_pool.CalculateDescendants(it, allConflicting);\n+        }\n+        // Check if it's economically rational to mine this transaction rather\n+        // than the ones it replaces.\n+        for (CTxMemPool::txiter it : allConflicting) {\n+            nConflictingFees += it->GetModifiedFee();\n+            nConflictingSize += it->GetTxSize();\n+        }\n \n+        std::set<uint256> setConflictsParents;\n+        for (const auto& mi : setIterConflicting) {\n             for (const CTxIn &txin : mi->GetTx().vin)\n             {\n                 setConflictsParents.insert(txin.prevout.hash);\n             }\n-\n-            nConflictingCount += mi->GetCountWithDescendants();\n-        }\n-        // This potentially overestimates the number of actual descendants\n-        // but we just want to be conservative to avoid doing too much\n-        // work.\n-        if (nConflictingCount <= MAX_BIP125_REPLACEMENT_CANDIDATES) {\n-            // If not too many to replace, then calculate the set of\n-            // transactions that would have to be evicted\n-            for (CTxMemPool::txiter it : setIterConflicting) {\n-                m_pool.CalculateDescendants(it, allConflicting);\n-            }\n-            for (CTxMemPool::txiter it : allConflicting) {\n-                nConflictingFees += it->GetModifiedFee();\n-                nConflictingSize += it->GetTxSize();\n-            }\n-        } else {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n-                    strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                        hash.ToString(),\n-                        nConflictingCount,\n-                        MAX_BIP125_REPLACEMENT_CANDIDATES));\n         }\n \n         for (unsigned int j = 0; j < tx.vin.size(); j++)"
      }
    ]
  },
  {
    "sha": "f293c68be0469894c988711559f5528020c0ff71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjkzYzY4YmUwNDY5ODk0Yzk4ODcxMTU1OWY1NTI4MDIwYzBmZjcx",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-27T13:23:40Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-24T14:51:54Z"
      },
      "message": "MOVEONLY: getting mempool conflicts to policy/rbf",
      "tree": {
        "sha": "4bcd1740db9364d2801ce5268d84b10819233d9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bcd1740db9364d2801ce5268d84b10819233d9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f293c68be0469894c988711559f5528020c0ff71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f293c68be0469894c988711559f5528020c0ff71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f293c68be0469894c988711559f5528020c0ff71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f293c68be0469894c988711559f5528020c0ff71/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d7179633552f58ca0d23305196dcb4249b6dce7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d7179633552f58ca0d23305196dcb4249b6dce7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d7179633552f58ca0d23305196dcb4249b6dce7"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 55,
      "deletions": 18
    },
    "files": [
      {
        "sha": "43624c7993f0d727ef2b029495cefd416d019d7f",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f293c68be0469894c988711559f5528020c0ff71/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f293c68be0469894c988711559f5528020c0ff71/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=f293c68be0469894c988711559f5528020c0ff71",
        "patch": "@@ -3,6 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <policy/rbf.h>\n+\n+#include <policy/settings.h>\n+#include <tinyformat.h>\n+#include <util/moneystr.h>\n #include <util/rbf.h>\n \n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n@@ -42,3 +46,34 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForConflicts(const CTransaction& tx,\n+                            CTxMemPool& m_pool,\n+                            const CTxMemPool::setEntries& setIterConflicting,\n+                            CTxMemPool::setEntries& allConflicting,\n+                            std::string& err_string)\n+{\n+    AssertLockHeld(m_pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : setIterConflicting) {\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants\n+        // but we just want to be conservative to avoid doing too much\n+        // work.\n+        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+            err_string = strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                        hash.ToString(),\n+                        nConflictingCount,\n+                        MAX_BIP125_REPLACEMENT_CANDIDATES);\n+            return false;\n+        }\n+    }\n+    // If not too many to replace, then calculate the set of\n+    // transactions that would have to be evicted\n+    for (CTxMemPool::txiter it : setIterConflicting) {\n+        m_pool.CalculateDescendants(it, allConflicting);\n+    }\n+    return true;\n+}\n+"
      },
      {
        "sha": "a67e9058df7e888f95f37ed944aafb006d456f62",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f293c68be0469894c988711559f5528020c0ff71/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f293c68be0469894c988711559f5528020c0ff71/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=f293c68be0469894c988711559f5528020c0ff71",
        "patch": "@@ -35,4 +35,19 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of setIterConflicting. Also enforce BIP125 Rule #5, \"The number of original\n+ * transactions to be replaced and their descendant transactions which will be evicted from the\n+ * mempool must not exceed a total of 100 transactions.\" Quit as early as possible. There cannot be\n+ * more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   setIterConflicting  The set of iterators to mempool entries.\n+ * @param[out]  err_string          Used to return errors, if any.\n+ * @param[out]  allConflicting      Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of setIterConflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& m_pool,\n+                            const CTxMemPool::setEntries& setIterConflicting,\n+                            CTxMemPool::setEntries& allConflicting,\n+                            std::string& err_string) EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "5baa9f5fd89075e256688cc28d64a37e4a8b1dcd",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 18,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f293c68be0469894c988711559f5528020c0ff71/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f293c68be0469894c988711559f5528020c0ff71/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f293c68be0469894c988711559f5528020c0ff71",
        "patch": "@@ -789,6 +789,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     fReplacementTransaction = setConflicts.size();\n     if (fReplacementTransaction)\n     {\n+        std::string err_string;\n         CFeeRate newFeeRate(nModifiedFees, nSize);\n         for (const auto& mi : setIterConflicting) {\n             // Don't allow the replacement to reduce the feerate of the\n@@ -816,25 +817,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             }\n         }\n \n-        uint64_t nConflictingCount = 0;\n-        for (const auto& mi : setIterConflicting) {\n-            nConflictingCount += mi->GetCountWithDescendants();\n-            // This potentially overestimates the number of actual descendants\n-            // but we just want to be conservative to avoid doing too much\n-            // work.\n-            if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n-                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n-                        strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                            hash.ToString(),\n-                            nConflictingCount,\n-                            MAX_BIP125_REPLACEMENT_CANDIDATES));\n-            }\n-        }\n-        // If not too many to replace, then calculate the set of\n-        // transactions that would have to be evicted\n-        for (CTxMemPool::txiter it : setIterConflicting) {\n-            m_pool.CalculateDescendants(it, allConflicting);\n+        // Calculate all conflicting entries and enforce Rule #5.\n+        if (!GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting, err_string)) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\", err_string);\n         }\n+\n         // Check if it's economically rational to mine this transaction rather\n         // than the ones it replaces.\n         for (CTxMemPool::txiter it : allConflicting) {"
      }
    ]
  }
]