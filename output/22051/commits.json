[
  {
    "sha": "4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjFjYzA4ZjlmOTRhMWU2ZTFlY2JhNmI5N2Y5OWI3M2ZiNTEzODcy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T00:38:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T19:14:16Z"
      },
      "message": "Make XOnlyPubKey act like byte container",
      "tree": {
        "sha": "23032c2016b9012a22074a8b086affe59131cde8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23032c2016b9012a22074a8b086affe59131cde8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b295395664bd37e26d168c329f238237b34aef8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b295395664bd37e26d168c329f238237b34aef8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b295395664bd37e26d168c329f238237b34aef8c"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7d09faa9c1e20ae22da4f3ea49c989f101b17fa9",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872",
        "patch": "@@ -222,6 +222,12 @@ class XOnlyPubKey\n     uint256 m_keydata;\n \n public:\n+    /** Construct an empty x-only pubkey. */\n+    XOnlyPubKey() = default;\n+\n+    XOnlyPubKey(const XOnlyPubKey&) = default;\n+    XOnlyPubKey& operator=(const XOnlyPubKey&) = default;\n+\n     /** Construct an x-only pubkey from exactly 32 bytes. */\n     explicit XOnlyPubKey(Span<const unsigned char> bytes);\n \n@@ -234,7 +240,14 @@ class XOnlyPubKey\n \n     const unsigned char& operator[](int pos) const { return *(m_keydata.begin() + pos); }\n     const unsigned char* data() const { return m_keydata.begin(); }\n-    size_t size() const { return m_keydata.size(); }\n+    static constexpr size_t size() { return decltype(m_keydata)::size(); }\n+    const unsigned char* begin() const { return m_keydata.begin(); }\n+    const unsigned char* end() const { return m_keydata.end(); }\n+    unsigned char* begin() { return m_keydata.begin(); }\n+    unsigned char* end() { return m_keydata.end(); }\n+    bool operator==(const XOnlyPubKey& other) const { return m_keydata == other.m_keydata; }\n+    bool operator!=(const XOnlyPubKey& other) const { return m_keydata != other.m_keydata; }\n+    bool operator<(const XOnlyPubKey& other) const { return m_keydata < other.m_keydata; }\n };\n \n struct CExtPubKey {"
      },
      {
        "sha": "d4917d0eacd10af3e14c5089ca02b03d31e9e0d4",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872",
        "patch": "@@ -75,7 +75,7 @@ class base_blob\n         return &m_data[WIDTH];\n     }\n \n-    unsigned int size() const\n+    static constexpr unsigned int size()\n     {\n         return sizeof(m_data);\n     }"
      }
    ]
  },
  {
    "sha": "31df02a07091dbd5e0b315c8e5695e808f3a5505",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWRmMDJhMDcwOTFkYmQ1ZTBiMzE1YzhlNTY5NWU4MDhmM2E1NTA1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T01:00:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T19:14:16Z"
      },
      "message": "Change Solver() output for WITNESS_V1_TAPROOT\n\nThis is just a small simplification to prepare for the follow-up instruction\nof a CTxDestination variant for taproot outputs.\n\nIn the old code, WITNESS_V1_TAPROOT and WITNESS_UNKNOWN both produced\n{version, program} as Solver() output. Change this so that WITNESS_V1_TAPROOT\nproduces just {program}, like WITNESS_V0_* do.",
      "tree": {
        "sha": "b995d5be2e2437ce89e06e60f613504f1a1b9fd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b995d5be2e2437ce89e06e60f613504f1a1b9fd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31df02a07091dbd5e0b315c8e5695e808f3a5505",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31df02a07091dbd5e0b315c8e5695e808f3a5505",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31df02a07091dbd5e0b315c8e5695e808f3a5505",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31df02a07091dbd5e0b315c8e5695e808f3a5505/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b1cc08f9f94a1e6e1ecba6b97f99b73fb513872"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 14,
      "deletions": 7
    },
    "files": [
      {
        "sha": "540aa0f2d9172210e5e65ceff1a40ff0fc58e1a6",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31df02a07091dbd5e0b315c8e5695e808f3a5505/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31df02a07091dbd5e0b315c8e5695e808f3a5505/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=31df02a07091dbd5e0b315c8e5695e808f3a5505",
        "patch": "@@ -155,15 +155,14 @@ TxoutType Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned c\n     std::vector<unsigned char> witnessprogram;\n     if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n         if (witnessversion == 0 && witnessprogram.size() == WITNESS_V0_KEYHASH_SIZE) {\n-            vSolutionsRet.push_back(witnessprogram);\n+            vSolutionsRet.push_back(std::move(witnessprogram));\n             return TxoutType::WITNESS_V0_KEYHASH;\n         }\n         if (witnessversion == 0 && witnessprogram.size() == WITNESS_V0_SCRIPTHASH_SIZE) {\n-            vSolutionsRet.push_back(witnessprogram);\n+            vSolutionsRet.push_back(std::move(witnessprogram));\n             return TxoutType::WITNESS_V0_SCRIPTHASH;\n         }\n         if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE) {\n-            vSolutionsRet.push_back(std::vector<unsigned char>{(unsigned char)witnessversion});\n             vSolutionsRet.push_back(std::move(witnessprogram));\n             return TxoutType::WITNESS_V1_TAPROOT;\n         }\n@@ -242,8 +241,17 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n         addressRet = hash;\n         return true;\n     }\n-    case TxoutType::WITNESS_UNKNOWN:\n     case TxoutType::WITNESS_V1_TAPROOT: {\n+        /* For now, no WitnessV1Taproot variant in CTxDestination exists, so map\n+         * this to WitnessUnknown. */\n+        WitnessUnknown unk;\n+        unk.version = 1;\n+        std::copy(vSolutions[0].begin(), vSolutions[0].end(), unk.program);\n+        unk.length = vSolutions[0].size();\n+        addressRet = unk;\n+        return true;\n+    }\n+    case TxoutType::WITNESS_UNKNOWN: {\n         WitnessUnknown unk;\n         unk.version = vSolutions[0][0];\n         std::copy(vSolutions[1].begin(), vSolutions[1].end(), unk.program);"
      },
      {
        "sha": "950f3b970a4e5b83c02bb7f95132b59f503d508d",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31df02a07091dbd5e0b315c8e5695e808f3a5505/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31df02a07091dbd5e0b315c8e5695e808f3a5505/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=31df02a07091dbd5e0b315c8e5695e808f3a5505",
        "patch": "@@ -111,9 +111,8 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     s.clear();\n     s << OP_1 << ToByteVector(uint256::ZERO);\n     BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::WITNESS_V1_TAPROOT);\n-    BOOST_CHECK_EQUAL(solutions.size(), 2U);\n-    BOOST_CHECK(solutions[0] == std::vector<unsigned char>{1});\n-    BOOST_CHECK(solutions[1] == ToByteVector(uint256::ZERO));\n+    BOOST_CHECK_EQUAL(solutions.size(), 1U);\n+    BOOST_CHECK(solutions[0] == ToByteVector(uint256::ZERO));\n \n     // TxoutType::WITNESS_UNKNOWN\n     s.clear();"
      }
    ]
  },
  {
    "sha": "41839bdb89b3777ece2318877b9c7921ecca2472",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTgzOWJkYjg5YjM3NzdlY2UyMzE4ODc3YjljNzkyMWVjY2EyNDcy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T01:23:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T19:14:16Z"
      },
      "message": "Avoid dependence on CTxDestination index order",
      "tree": {
        "sha": "0439138af9c23276323b314d2bcdab1108777473",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0439138af9c23276323b314d2bcdab1108777473"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41839bdb89b3777ece2318877b9c7921ecca2472",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41839bdb89b3777ece2318877b9c7921ecca2472",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41839bdb89b3777ece2318877b9c7921ecca2472",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41839bdb89b3777ece2318877b9c7921ecca2472/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31df02a07091dbd5e0b315c8e5695e808f3a5505",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31df02a07091dbd5e0b315c8e5695e808f3a5505",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31df02a07091dbd5e0b315c8e5695e808f3a5505"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 15,
      "deletions": 18
    },
    "files": [
      {
        "sha": "19fad1009e9ef472f503d7a709aa79b0367b3c53",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 18,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41839bdb89b3777ece2318877b9c7921ecca2472/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41839bdb89b3777ece2318877b9c7921ecca2472/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=41839bdb89b3777ece2318877b9c7921ecca2472",
        "patch": "@@ -638,6 +638,19 @@ class DescriptorImpl : public Descriptor\n     std::optional<OutputType> GetOutputType() const override { return std::nullopt; }\n };\n \n+static std::optional<OutputType> OutputTypeFromDestination(const CTxDestination& dest) {\n+    if (std::holds_alternative<PKHash>(dest) ||\n+        std::holds_alternative<ScriptHash>(dest)) {\n+        return OutputType::LEGACY;\n+    }\n+    if (std::holds_alternative<WitnessV0KeyHash>(dest) ||\n+        std::holds_alternative<WitnessV0ScriptHash>(dest) ||\n+        std::holds_alternative<WitnessUnknown>(dest)) {\n+        return OutputType::BECH32;\n+    }\n+    return std::nullopt;\n+}\n+\n /** A parsed addr(A) descriptor. */\n class AddressDescriptor final : public DescriptorImpl\n {\n@@ -651,15 +664,7 @@ class AddressDescriptor final : public DescriptorImpl\n \n     std::optional<OutputType> GetOutputType() const override\n     {\n-        switch (m_destination.index()) {\n-            case 1 /* PKHash */:\n-            case 2 /* ScriptHash */: return OutputType::LEGACY;\n-            case 3 /* WitnessV0ScriptHash */:\n-            case 4 /* WitnessV0KeyHash */:\n-            case 5 /* WitnessUnknown */: return OutputType::BECH32;\n-            case 0 /* CNoDestination */:\n-            default: return std::nullopt;\n-        }\n+        return OutputTypeFromDestination(m_destination);\n     }\n     bool IsSingleType() const final { return true; }\n };\n@@ -679,15 +684,7 @@ class RawDescriptor final : public DescriptorImpl\n     {\n         CTxDestination dest;\n         ExtractDestination(m_script, dest);\n-        switch (dest.index()) {\n-            case 1 /* PKHash */:\n-            case 2 /* ScriptHash */: return OutputType::LEGACY;\n-            case 3 /* WitnessV0ScriptHash */:\n-            case 4 /* WitnessV0KeyHash */:\n-            case 5 /* WitnessUnknown */: return OutputType::BECH32;\n-            case 0 /* CNoDestination */:\n-            default: return std::nullopt;\n-        }\n+        return OutputTypeFromDestination(dest);\n     }\n     bool IsSingleType() const final { return true; }\n };"
      }
    ]
  },
  {
    "sha": "a4bf84039c00b196b87f969acf6369d72c56ab46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGJmODQwMzljMDBiMTk2Yjg3Zjk2OWFjZjYzNjlkNzJjNTZhYjQ2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T00:38:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T19:14:16Z"
      },
      "message": "Separate WitnessV1Taproot variant in CTxDestination",
      "tree": {
        "sha": "93acdb7aa3dadf25b60e6c165750f3dafbde7006",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93acdb7aa3dadf25b60e6c165750f3dafbde7006"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4bf84039c00b196b87f969acf6369d72c56ab46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4bf84039c00b196b87f969acf6369d72c56ab46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4bf84039c00b196b87f969acf6369d72c56ab46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4bf84039c00b196b87f969acf6369d72c56ab46/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41839bdb89b3777ece2318877b9c7921ecca2472",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41839bdb89b3777ece2318877b9c7921ecca2472",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41839bdb89b3777ece2318877b9c7921ecca2472"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 45,
      "deletions": 10
    },
    "files": [
      {
        "sha": "615f4c93126f04148ece8315dca16e1f7c010897",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4bf84039c00b196b87f969acf6369d72c56ab46/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4bf84039c00b196b87f969acf6369d72c56ab46/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=a4bf84039c00b196b87f969acf6369d72c56ab46",
        "patch": "@@ -54,6 +54,14 @@ class DestinationEncoder\n         return bech32::Encode(bech32::Encoding::BECH32, m_params.Bech32HRP(), data);\n     }\n \n+    std::string operator()(const WitnessV1Taproot& tap) const\n+    {\n+        std::vector<unsigned char> data = {1};\n+        data.reserve(53);\n+        ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, tap.begin(), tap.end());\n+        return bech32::Encode(bech32::Encoding::BECH32M, m_params.Bech32HRP(), data);\n+    }\n+\n     std::string operator()(const WitnessUnknown& id) const\n     {\n         if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n@@ -135,6 +143,13 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n                 return CNoDestination();\n             }\n \n+            if (version == 1 && data.size() == WITNESS_V1_TAPROOT_SIZE) {\n+                static_assert(WITNESS_V1_TAPROOT_SIZE == WitnessV1Taproot::size());\n+                WitnessV1Taproot tap;\n+                std::copy(data.begin(), data.end(), tap.begin());\n+                return tap;\n+            }\n+\n             if (version > 16) {\n                 error_str = \"Invalid Bech32 address witness version\";\n                 return CNoDestination();"
      },
      {
        "sha": "2059628b5401b7956a4781c69250b69b60f6e801",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4bf84039c00b196b87f969acf6369d72c56ab46/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4bf84039c00b196b87f969acf6369d72c56ab46/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=a4bf84039c00b196b87f969acf6369d72c56ab46",
        "patch": "@@ -301,6 +301,16 @@ class DescribeAddressVisitor\n         return obj;\n     }\n \n+    UniValue operator()(const WitnessV1Taproot& tap) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 1);\n+        obj.pushKV(\"witness_program\", HexStr(tap));\n+        return obj;\n+    }\n+\n     UniValue operator()(const WitnessUnknown& id) const\n     {\n         UniValue obj(UniValue::VOBJ);"
      },
      {
        "sha": "d4b43932b91ac9778272ba5ff97d1550040c4ebf",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4bf84039c00b196b87f969acf6369d72c56ab46/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4bf84039c00b196b87f969acf6369d72c56ab46/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=a4bf84039c00b196b87f969acf6369d72c56ab46",
        "patch": "@@ -645,6 +645,7 @@ static std::optional<OutputType> OutputTypeFromDestination(const CTxDestination&\n     }\n     if (std::holds_alternative<WitnessV0KeyHash>(dest) ||\n         std::holds_alternative<WitnessV0ScriptHash>(dest) ||\n+        std::holds_alternative<WitnessV1Taproot>(dest) ||\n         std::holds_alternative<WitnessUnknown>(dest)) {\n         return OutputType::BECH32;\n     }"
      },
      {
        "sha": "0a233b550a0364072939ec0b63fba4efe321698b",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4bf84039c00b196b87f969acf6369d72c56ab46/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4bf84039c00b196b87f969acf6369d72c56ab46/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=a4bf84039c00b196b87f969acf6369d72c56ab46",
        "patch": "@@ -242,13 +242,9 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n         return true;\n     }\n     case TxoutType::WITNESS_V1_TAPROOT: {\n-        /* For now, no WitnessV1Taproot variant in CTxDestination exists, so map\n-         * this to WitnessUnknown. */\n-        WitnessUnknown unk;\n-        unk.version = 1;\n-        std::copy(vSolutions[0].begin(), vSolutions[0].end(), unk.program);\n-        unk.length = vSolutions[0].size();\n-        addressRet = unk;\n+        WitnessV1Taproot tap;\n+        std::copy(vSolutions[0].begin(), vSolutions[0].end(), tap.begin());\n+        addressRet = tap;\n         return true;\n     }\n     case TxoutType::WITNESS_UNKNOWN: {\n@@ -337,6 +333,11 @@ class CScriptVisitor\n         return CScript() << OP_0 << ToByteVector(id);\n     }\n \n+    CScript operator()(const WitnessV1Taproot& tap) const\n+    {\n+        return CScript() << OP_1 << ToByteVector(tap);\n+    }\n+\n     CScript operator()(const WitnessUnknown& id) const\n     {\n         return CScript() << CScript::EncodeOP_N(id.version) << std::vector<unsigned char>(id.program, id.program + id.length);"
      },
      {
        "sha": "a96b096fa787739d5b7fb465fdbfa309d044c3cc",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4bf84039c00b196b87f969acf6369d72c56ab46/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4bf84039c00b196b87f969acf6369d72c56ab46/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=a4bf84039c00b196b87f969acf6369d72c56ab46",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_SCRIPT_STANDARD_H\n #define BITCOIN_SCRIPT_STANDARD_H\n \n+#include <pubkey.h>\n #include <script/interpreter.h>\n #include <uint256.h>\n #include <util/hash_type.h>\n@@ -113,6 +114,12 @@ struct WitnessV0KeyHash : public BaseHash<uint160>\n };\n CKeyID ToKeyID(const WitnessV0KeyHash& key_hash);\n \n+struct WitnessV1Taproot : public XOnlyPubKey\n+{\n+    WitnessV1Taproot() : XOnlyPubKey() {}\n+    explicit WitnessV1Taproot(const XOnlyPubKey& xpk) : XOnlyPubKey(xpk) {}\n+};\n+\n //! CTxDestination subtype to encode any future Witness version\n struct WitnessUnknown\n {\n@@ -142,11 +149,11 @@ struct WitnessUnknown\n  *  * ScriptHash: TxoutType::SCRIPTHASH destination (P2SH)\n  *  * WitnessV0ScriptHash: TxoutType::WITNESS_V0_SCRIPTHASH destination (P2WSH)\n  *  * WitnessV0KeyHash: TxoutType::WITNESS_V0_KEYHASH destination (P2WPKH)\n- *  * WitnessUnknown: TxoutType::WITNESS_UNKNOWN/WITNESS_V1_TAPROOT destination (P2W???)\n- *    (taproot outputs do not require their own type as long as no wallet support exists)\n+ *  * WitnessV1Taproot: TxoutType::WITNESS_V1_TAPROOT destination (P2TR)\n+ *  * WitnessUnknown: TxoutType::WITNESS_UNKNOWN destination (P2W???)\n  *  A CTxDestination is the internal data type encoded in a bitcoin address\n  */\n-using CTxDestination = std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown>;\n+using CTxDestination = std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>;\n \n /** Check whether a CTxDestination is a CNoDestination. */\n bool IsValidDestination(const CTxDestination& dest);"
      },
      {
        "sha": "dd74d9f36bd8e0c1f72a4709ac421cbc54314f94",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4bf84039c00b196b87f969acf6369d72c56ab46/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4bf84039c00b196b87f969acf6369d72c56ab46/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a4bf84039c00b196b87f969acf6369d72c56ab46",
        "patch": "@@ -3737,6 +3737,7 @@ class DescribeWalletAddressVisitor\n         return obj;\n     }\n \n+    UniValue operator()(const WitnessV1Taproot& id) const { return UniValue(UniValue::VOBJ); }\n     UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n };\n "
      }
    ]
  },
  {
    "sha": "2fbfb1becb3c0c109cd7c30b245b51da22039932",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmJmYjFiZWNiM2MwYzEwOWNkN2MzMGIyNDViNTFkYTIyMDM5OTMy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-02T00:21:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T19:14:16Z"
      },
      "message": "Make consensus checking of tweaks in pubkey.* Taproot-specific\n\nThat results in a much safer interface (making the tweak commit\nto the key implicitly using a fixed tag means it can't be used for\nunrelated tweaking).",
      "tree": {
        "sha": "46b4a54e0e774bb0f811bbc1268d080757932bdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46b4a54e0e774bb0f811bbc1268d080757932bdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fbfb1becb3c0c109cd7c30b245b51da22039932",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fbfb1becb3c0c109cd7c30b245b51da22039932",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fbfb1becb3c0c109cd7c30b245b51da22039932",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fbfb1becb3c0c109cd7c30b245b51da22039932/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4bf84039c00b196b87f969acf6369d72c56ab46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4bf84039c00b196b87f969acf6369d72c56ab46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4bf84039c00b196b87f969acf6369d72c56ab46"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 33,
      "deletions": 9
    },
    "files": [
      {
        "sha": "f78779c182799ce24d1cda91bd46f89b5dd457ad",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 4,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fbfb1becb3c0c109cd7c30b245b51da22039932/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fbfb1becb3c0c109cd7c30b245b51da22039932/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=2fbfb1becb3c0c109cd7c30b245b51da22039932",
        "patch": "@@ -188,11 +188,25 @@ bool XOnlyPubKey::VerifySchnorr(const uint256& msg, Span<const unsigned char> si\n     return secp256k1_schnorrsig_verify(secp256k1_context_verify, sigbytes.data(), msg.begin(), &pubkey);\n }\n \n-bool XOnlyPubKey::CheckPayToContract(const XOnlyPubKey& base, const uint256& hash, bool parity) const\n+static const CHashWriter HASHER_TAPTWEAK = TaggedHash(\"TapTweak\");\n+\n+uint256 XOnlyPubKey::ComputeTapTweakHash(const uint256* merkle_root) const\n+{\n+    if (merkle_root == nullptr) {\n+        // We have no scripts. The actual tweak does not matter, but follow BIP341 here to\n+        // allow for reproducible tweaking.\n+        return (CHashWriter(HASHER_TAPTWEAK) << m_keydata).GetSHA256();\n+    } else {\n+        return (CHashWriter(HASHER_TAPTWEAK) << m_keydata << *merkle_root).GetSHA256();\n+    }\n+}\n+\n+bool XOnlyPubKey::CheckTapTweak(const XOnlyPubKey& internal, const uint256& merkle_root, bool parity) const\n {\n-    secp256k1_xonly_pubkey base_point;\n-    if (!secp256k1_xonly_pubkey_parse(secp256k1_context_verify, &base_point, base.data())) return false;\n-    return secp256k1_xonly_pubkey_tweak_add_check(secp256k1_context_verify, m_keydata.begin(), parity, &base_point, hash.begin());\n+    secp256k1_xonly_pubkey internal_key;\n+    if (!secp256k1_xonly_pubkey_parse(secp256k1_context_verify, &internal_key, internal.data())) return false;\n+    uint256 tweak = internal.ComputeTapTweakHash(&merkle_root);\n+    return secp256k1_xonly_pubkey_tweak_add_check(secp256k1_context_verify, m_keydata.begin(), parity, &internal_key, tweak.begin());\n }\n \n bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {"
      },
      {
        "sha": "e5d9d08b52db43ee59a04f0c1ba474d74b0e6b55",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fbfb1becb3c0c109cd7c30b245b51da22039932/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fbfb1becb3c0c109cd7c30b245b51da22039932/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=2fbfb1becb3c0c109cd7c30b245b51da22039932",
        "patch": "@@ -236,7 +236,20 @@ class XOnlyPubKey\n      * sigbytes must be exactly 64 bytes.\n      */\n     bool VerifySchnorr(const uint256& msg, Span<const unsigned char> sigbytes) const;\n-    bool CheckPayToContract(const XOnlyPubKey& base, const uint256& hash, bool parity) const;\n+\n+    /** Compute the Taproot tweak as specified in BIP341, with *this as internal\n+     * key:\n+     *  - if merkle_root == nullptr: H_TapTweak(xonly_pubkey)\n+     *  - otherwise:                 H_TapTweak(xonly_pubkey || *merkle_root)\n+     *\n+     * Note that the behavior of this function with merkle_root != nullptr is\n+     * consensus critical.\n+     */\n+    uint256 ComputeTapTweakHash(const uint256* merkle_root) const;\n+\n+    /** Verify that this is a Taproot tweaked output point, against a specified internal key,\n+     *  Merkle root, and parity. */\n+    bool CheckTapTweak(const XOnlyPubKey& internal, const uint256& merkle_root, bool parity) const;\n \n     const unsigned char& operator[](int pos) const { return *(m_keydata.begin() + pos); }\n     const unsigned char* data() const { return m_keydata.begin(); }"
      },
      {
        "sha": "5f04d486b128f9b7370bdf817a2617db70d200b5",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fbfb1becb3c0c109cd7c30b245b51da22039932/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fbfb1becb3c0c109cd7c30b245b51da22039932/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=2fbfb1becb3c0c109cd7c30b245b51da22039932",
        "patch": "@@ -1486,7 +1486,6 @@ template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTr\n static const CHashWriter HASHER_TAPSIGHASH = TaggedHash(\"TapSighash\");\n static const CHashWriter HASHER_TAPLEAF = TaggedHash(\"TapLeaf\");\n static const CHashWriter HASHER_TAPBRANCH = TaggedHash(\"TapBranch\");\n-static const CHashWriter HASHER_TAPTWEAK = TaggedHash(\"TapTweak\");\n \n static bool HandleMissingData(MissingDataBehavior mdb)\n {\n@@ -1869,10 +1868,8 @@ static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, c\n         }\n         k = ss_branch.GetSHA256();\n     }\n-    // Compute the tweak from the Merkle root and the internal pubkey.\n-    k = (CHashWriter(HASHER_TAPTWEAK) << MakeSpan(p) << k).GetSHA256();\n     // Verify that the output pubkey matches the tweaked internal pubkey, after correcting for parity.\n-    return q.CheckPayToContract(p, k, control[0] & 1);\n+    return q.CheckTapTweak(p, k, control[0] & 1);\n }\n \n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror, bool is_p2sh)"
      }
    ]
  },
  {
    "sha": "5f6cc8daa83700d1c949d968a5cf0d935be337b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjZjYzhkYWE4MzcwMGQxYzk0OWQ5NjhhNWNmMGQ5MzViZTMzN2I3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T01:32:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T19:14:16Z"
      },
      "message": "Add XOnlyPubKey::CreateTapTweak",
      "tree": {
        "sha": "a07dcd19162977dd995f9a96d66bcaa2273db343",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a07dcd19162977dd995f9a96d66bcaa2273db343"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f6cc8daa83700d1c949d968a5cf0d935be337b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f6cc8daa83700d1c949d968a5cf0d935be337b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f6cc8daa83700d1c949d968a5cf0d935be337b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f6cc8daa83700d1c949d968a5cf0d935be337b7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fbfb1becb3c0c109cd7c30b245b51da22039932",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fbfb1becb3c0c109cd7c30b245b51da22039932",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fbfb1becb3c0c109cd7c30b245b51da22039932"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8382897f9591f83c5b6046bd2392727e4479ede7",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f6cc8daa83700d1c949d968a5cf0d935be337b7/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f6cc8daa83700d1c949d968a5cf0d935be337b7/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=5f6cc8daa83700d1c949d968a5cf0d935be337b7",
        "patch": "@@ -209,6 +209,24 @@ bool XOnlyPubKey::CheckTapTweak(const XOnlyPubKey& internal, const uint256& merk\n     return secp256k1_xonly_pubkey_tweak_add_check(secp256k1_context_verify, m_keydata.begin(), parity, &internal_key, tweak.begin());\n }\n \n+std::optional<std::pair<XOnlyPubKey, bool>> XOnlyPubKey::CreateTapTweak(const uint256* merkle_root) const\n+{\n+    secp256k1_xonly_pubkey base_point;\n+    if (!secp256k1_xonly_pubkey_parse(secp256k1_context_verify, &base_point, data())) return std::nullopt;\n+    secp256k1_pubkey out;\n+    uint256 tweak = ComputeTapTweakHash(merkle_root);\n+    if (!secp256k1_xonly_pubkey_tweak_add(secp256k1_context_verify, &out, &base_point, tweak.data())) return std::nullopt;\n+    int parity = -1;\n+    std::pair<XOnlyPubKey, bool> ret;\n+    secp256k1_xonly_pubkey out_xonly;\n+    if (!secp256k1_xonly_pubkey_from_pubkey(secp256k1_context_verify, &out_xonly, &parity, &out)) return std::nullopt;\n+    secp256k1_xonly_pubkey_serialize(secp256k1_context_verify, ret.first.begin(), &out_xonly);\n+    assert(parity == 0 || parity == 1);\n+    ret.second = parity;\n+    return ret;\n+}\n+\n+\n bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n     if (!IsValid())\n         return false;"
      },
      {
        "sha": "b9d5f5d6226ca7216f7927cd89ad135151c929f0",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f6cc8daa83700d1c949d968a5cf0d935be337b7/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f6cc8daa83700d1c949d968a5cf0d935be337b7/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=5f6cc8daa83700d1c949d968a5cf0d935be337b7",
        "patch": "@@ -13,6 +13,7 @@\n #include <uint256.h>\n \n #include <cstring>\n+#include <optional>\n #include <vector>\n \n const unsigned int BIP32_EXTKEY_SIZE = 74;\n@@ -251,6 +252,9 @@ class XOnlyPubKey\n      *  Merkle root, and parity. */\n     bool CheckTapTweak(const XOnlyPubKey& internal, const uint256& merkle_root, bool parity) const;\n \n+    /** Construct a Taproot tweaked output point with this point as internal key. */\n+    std::optional<std::pair<XOnlyPubKey, bool>> CreateTapTweak(const uint256* merkle_root) const;\n+\n     const unsigned char& operator[](int pos) const { return *(m_keydata.begin() + pos); }\n     const unsigned char* data() const { return m_keydata.begin(); }\n     static constexpr size_t size() { return decltype(m_keydata)::size(); }"
      }
    ]
  },
  {
    "sha": "90fcac365e1616779b40a69736428435df75fdf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGZjYWMzNjVlMTYxNjc3OWI0MGE2OTczNjQyODQzNWRmNzVmZGYy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-02T02:53:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T19:14:16Z"
      },
      "message": "Add TaprootBuilder class\n\nThis class functions as a utility for building taproot outputs, from\ninternal key and script leaves.",
      "tree": {
        "sha": "cd748aee9785aa861c723cac5712ef3b1c796f4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd748aee9785aa861c723cac5712ef3b1c796f4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90fcac365e1616779b40a69736428435df75fdf2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90fcac365e1616779b40a69736428435df75fdf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90fcac365e1616779b40a69736428435df75fdf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90fcac365e1616779b40a69736428435df75fdf2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f6cc8daa83700d1c949d968a5cf0d935be337b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f6cc8daa83700d1c949d968a5cf0d935be337b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f6cc8daa83700d1c949d968a5cf0d935be337b7"
      }
    ],
    "stats": {
      "total": 264,
      "additions": 262,
      "deletions": 2
    },
    "files": [
      {
        "sha": "51cc826b0093dc61e5e1286359c80b0647226275",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fcac365e1616779b40a69736428435df75fdf2/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fcac365e1616779b40a69736428435df75fdf2/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=90fcac365e1616779b40a69736428435df75fdf2",
        "patch": "@@ -180,6 +180,12 @@ XOnlyPubKey::XOnlyPubKey(Span<const unsigned char> bytes)\n     std::copy(bytes.begin(), bytes.end(), m_keydata.begin());\n }\n \n+bool XOnlyPubKey::IsFullyValid() const\n+{\n+    secp256k1_xonly_pubkey pubkey;\n+    return secp256k1_xonly_pubkey_parse(secp256k1_context_verify, &pubkey, m_keydata.data());\n+}\n+\n bool XOnlyPubKey::VerifySchnorr(const uint256& msg, Span<const unsigned char> sigbytes) const\n {\n     assert(sigbytes.size() == 64);"
      },
      {
        "sha": "4de1807a7f5fea2d51496d961ca9e703106940d6",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fcac365e1616779b40a69736428435df75fdf2/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fcac365e1616779b40a69736428435df75fdf2/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=90fcac365e1616779b40a69736428435df75fdf2",
        "patch": "@@ -229,6 +229,11 @@ class XOnlyPubKey\n     XOnlyPubKey(const XOnlyPubKey&) = default;\n     XOnlyPubKey& operator=(const XOnlyPubKey&) = default;\n \n+    /** Determine if this pubkey is fully valid. This is true for approximately 50% of all\n+     *  possible 32-byte arrays. If false, VerifySchnorr and CreatePayToContract will always\n+     *  fail. */\n+    bool IsFullyValid() const;\n+\n     /** Construct an x-only pubkey from exactly 32 bytes. */\n     explicit XOnlyPubKey(Span<const unsigned char> bytes);\n "
      },
      {
        "sha": "3c3c3ac1a842d5183dd85093377609d42fe91161",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fcac365e1616779b40a69736428435df75fdf2/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fcac365e1616779b40a69736428435df75fdf2/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=90fcac365e1616779b40a69736428435df75fdf2",
        "patch": "@@ -1484,8 +1484,8 @@ template PrecomputedTransactionData::PrecomputedTransactionData(const CTransacti\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n static const CHashWriter HASHER_TAPSIGHASH = TaggedHash(\"TapSighash\");\n-static const CHashWriter HASHER_TAPLEAF = TaggedHash(\"TapLeaf\");\n-static const CHashWriter HASHER_TAPBRANCH = TaggedHash(\"TapBranch\");\n+const CHashWriter HASHER_TAPLEAF = TaggedHash(\"TapLeaf\");\n+const CHashWriter HASHER_TAPBRANCH = TaggedHash(\"TapBranch\");\n \n static bool HandleMissingData(MissingDataBehavior mdb)\n {"
      },
      {
        "sha": "fa4ee83e04d079427e3cad5ee74686d46f25ce96",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fcac365e1616779b40a69736428435df75fdf2/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fcac365e1616779b40a69736428435df75fdf2/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=90fcac365e1616779b40a69736428435df75fdf2",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_SCRIPT_INTERPRETER_H\n #define BITCOIN_SCRIPT_INTERPRETER_H\n \n+#include <hash.h>\n #include <script/script_error.h>\n #include <span.h>\n #include <primitives/transaction.h>\n@@ -218,6 +219,9 @@ static constexpr size_t TAPROOT_CONTROL_NODE_SIZE = 32;\n static constexpr size_t TAPROOT_CONTROL_MAX_NODE_COUNT = 128;\n static constexpr size_t TAPROOT_CONTROL_MAX_SIZE = TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * TAPROOT_CONTROL_MAX_NODE_COUNT;\n \n+extern const CHashWriter HASHER_TAPLEAF;    //!< Hasher with tag \"TapLeaf\" pre-fed to it.\n+extern const CHashWriter HASHER_TAPBRANCH;  //!< Hasher with tag \"TapBranch\" pre-fed to it.\n+\n template <class T>\n uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache = nullptr);\n "
      },
      {
        "sha": "a4b11cc0a9f7273a091599184a0db5f5d3144bb1",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 99,
        "deletions": 0,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fcac365e1616779b40a69736428435df75fdf2/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fcac365e1616779b40a69736428435df75fdf2/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=90fcac365e1616779b40a69736428435df75fdf2",
        "patch": "@@ -6,8 +6,11 @@\n #include <script/standard.h>\n \n #include <crypto/sha256.h>\n+#include <hash.h>\n #include <pubkey.h>\n+#include <script/interpreter.h>\n #include <script/script.h>\n+#include <util/strencodings.h>\n \n #include <string>\n \n@@ -370,3 +373,99 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n bool IsValidDestination(const CTxDestination& dest) {\n     return dest.index() != 0;\n }\n+\n+/*static*/ TaprootBuilder::NodeInfo TaprootBuilder::Combine(NodeInfo&& a, NodeInfo&& b)\n+{\n+    NodeInfo ret;\n+    /* Lexicographically sort a and b's hash, and compute parent hash. */\n+    if (a.hash < b.hash) {\n+        ret.hash = (CHashWriter(HASHER_TAPBRANCH) << a.hash << b.hash).GetSHA256();\n+    } else {\n+        ret.hash = (CHashWriter(HASHER_TAPBRANCH) << b.hash << a.hash).GetSHA256();\n+    }\n+    return ret;\n+}\n+\n+void TaprootBuilder::Insert(TaprootBuilder::NodeInfo&& node, int depth)\n+{\n+    assert(depth >= 0 && (size_t)depth <= TAPROOT_CONTROL_MAX_NODE_COUNT);\n+    /* We cannot insert a leaf at a lower depth while a deeper branch is unfinished. Doing\n+     * so would mean the Add() invocations do not correspond to a DFS traversal of a\n+     * binary tree. */\n+    if ((size_t)depth + 1 < m_branch.size()) {\n+        m_valid = false;\n+        return;\n+    }\n+    /* As long as an entry in the branch exists at the specified depth, combine it and propagate up.\n+     * The 'node' variable is overwritten here with the newly combined node. */\n+    while (m_valid && m_branch.size() > (size_t)depth && m_branch[depth].has_value()) {\n+        node = Combine(std::move(node), std::move(*m_branch[depth]));\n+        m_branch.pop_back();\n+        if (depth == 0) m_valid = false; /* Can't propagate further up than the root */\n+        --depth;\n+    }\n+    if (m_valid) {\n+        /* Make sure the branch is big enough to place the new node. */\n+        if (m_branch.size() <= (size_t)depth) m_branch.resize((size_t)depth + 1);\n+        assert(!m_branch[depth].has_value());\n+        m_branch[depth] = std::move(node);\n+    }\n+}\n+\n+/*static*/ bool TaprootBuilder::ValidDepths(const std::vector<int>& depths)\n+{\n+    std::vector<bool> branch;\n+    for (int depth : depths) {\n+        // This inner loop corresponds to effectively the same logic on branch\n+        // as what Insert() performs on the m_branch variable. Instead of\n+        // storing a NodeInfo object, just remember whether or not there is one\n+        // at that depth.\n+        if (depth < 0 || (size_t)depth > TAPROOT_CONTROL_MAX_NODE_COUNT) return false;\n+        if ((size_t)depth + 1 < branch.size()) return false;\n+        while (branch.size() > (size_t)depth && branch[depth]) {\n+            branch.pop_back();\n+            if (depth == 0) return false;\n+            --depth;\n+        }\n+        if (branch.size() <= (size_t)depth) branch.resize((size_t)depth + 1);\n+        assert(!branch[depth]);\n+        branch[depth] = true;\n+    }\n+    // And this check corresponds to the IsComplete() check on m_branch.\n+    return branch.size() == 0 || (branch.size() == 1 && branch[0]);\n+}\n+\n+TaprootBuilder& TaprootBuilder::Add(int depth, const CScript& script, int leaf_version)\n+{\n+    assert((leaf_version & ~TAPROOT_LEAF_MASK) == 0);\n+    if (!IsValid()) return *this;\n+    /* Construct NodeInfo object with leaf hash. */\n+    NodeInfo node;\n+    node.hash = (CHashWriter{HASHER_TAPLEAF} << uint8_t(leaf_version) << script).GetSHA256();\n+    /* Insert into the branch. */\n+    Insert(std::move(node), depth);\n+    return *this;\n+}\n+\n+TaprootBuilder& TaprootBuilder::AddOmitted(int depth, const uint256& hash)\n+{\n+    if (!IsValid()) return *this;\n+    /* Construct NodeInfo object with the hash directly, and insert it into the branch. */\n+    NodeInfo node;\n+    node.hash = hash;\n+    Insert(std::move(node), depth);\n+    return *this;\n+}\n+\n+TaprootBuilder& TaprootBuilder::Finalize(const XOnlyPubKey& internal_key)\n+{\n+    /* Can only call this function when IsComplete() is true. */\n+    assert(IsComplete());\n+    m_internal_key = internal_key;\n+    auto ret = m_internal_key.CreateTapTweak(m_branch.size() == 0 ? nullptr : &m_branch[0]->hash);\n+    assert(ret.has_value());\n+    std::tie(m_output_key, std::ignore) = *ret;\n+    return *this;\n+}\n+\n+WitnessV1Taproot TaprootBuilder::GetOutput() { return WitnessV1Taproot{m_output_key}; }"
      },
      {
        "sha": "d7ea5cef27f078533e7bba0a54dfa74a7d68f88d",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fcac365e1616779b40a69736428435df75fdf2/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fcac365e1616779b40a69736428435df75fdf2/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=90fcac365e1616779b40a69736428435df75fdf2",
        "patch": "@@ -209,4 +209,82 @@ CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n /** Generate a multisig script. */\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n \n+/** Utility class to construct Taproot outputs from internal key and script tree. */\n+class TaprootBuilder\n+{\n+private:\n+    /** Information associated with a node in the Merkle tree. */\n+    struct NodeInfo\n+    {\n+        /** Merkle hash of this node. */\n+        uint256 hash;\n+    };\n+    /** Whether the builder is in a valid state so far. */\n+    bool m_valid = true;\n+\n+    /** The current state of the builder.\n+     *\n+     * For each level in the tree, one NodeInfo object may be present. m_branch[0]\n+     * is information about the root; further values are for deeper subtrees being\n+     * explored.\n+     *\n+     * For every right branch taken to reach the position we're currently\n+     * working in, there will be a (non-nullopt) entry in m_branch corresponding\n+     * to the left branch at that level.\n+     *\n+     * For example, imagine this tree:     - N0 -\n+     *                                    /      \\\n+     *                                   N1      N2\n+     *                                  /  \\    /  \\\n+     *                                 A    B  C   N3\n+     *                                            /  \\\n+     *                                           D    E\n+     *\n+     * Initially, m_branch is empty. After processing leaf A, it would become\n+     * {nullopt, nullopt, A}. When processing leaf B, an entry at level 2 already\n+     * exists, and it would thus be combined with it to produce a level 1 one,\n+     * resulting in {nullopt, N1}. Adding C and D takes us to {nullopt, N1, C}\n+     * and {nullopt, N1, C, D} respectively. When E is processed, it is combined\n+     * with D, and then C, and then N1, to produce the root, resulting in {N0}.\n+     *\n+     * This structure allows processing with just O(log n) overhead if the leaves\n+     * are computed on the fly.\n+     *\n+     * As an invariant, there can never be nullopt entries at the end. There can\n+     * also not be more than 128 entries (as that would mean more than 128 levels\n+     * in the tree). The depth of newly added entries will always be at least\n+     * equal to the current size of m_branch (otherwise it does not correspond\n+     * to a depth-first traversal of a tree). m_branch is only empty if no entries\n+     * have ever be processed. m_branch having length 1 corresponds to being done.\n+     */\n+    std::vector<std::optional<NodeInfo>> m_branch;\n+\n+    XOnlyPubKey m_internal_key;  //!< The internal key, set when finalizing.\n+    XOnlyPubKey m_output_key; //!< The output key, computed when finalizing. */\n+\n+    /** Combine information about a parent Merkle tree node from its child nodes. */\n+    static NodeInfo Combine(NodeInfo&& a, NodeInfo&& b);\n+    /** Insert information about a node at a certain depth, and propagate information up. */\n+    void Insert(NodeInfo&& node, int depth);\n+\n+public:\n+    /** Add a new script at a certain depth in the tree. Add() operations must be called\n+     *  in depth-first traversal order of binary tree. */\n+    TaprootBuilder& Add(int depth, const CScript& script, int leaf_version);\n+    /** Like Add(), but for a Merkle node with a given hash to the tree. */\n+    TaprootBuilder& AddOmitted(int depth, const uint256& hash);\n+    /** Finalize the construction. Can only be called when IsComplete() is true.\n+        internal_key.IsFullyValid() must be true. */\n+    TaprootBuilder& Finalize(const XOnlyPubKey& internal_key);\n+\n+    /** Return true if so far all input was valid. */\n+    bool IsValid() const { return m_valid; }\n+    /** Return whether there were either no leaves, or the leaves form a Huffman tree. */\n+    bool IsComplete() const { return m_valid && (m_branch.size() == 0 || (m_branch.size() == 1 && m_branch[0].has_value())); }\n+    /** Compute scriptPubKey (after Finalize()). */\n+    WitnessV1Taproot GetOutput();\n+    /** Check if a list of depths is legal (will lead to IsComplete()). */\n+    static bool ValidDepths(const std::vector<int>& depths);\n+};\n+\n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "a01d3fa03a8a72df06138c8d6ab419093d8c6ea8",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fcac365e1616779b40a69736428435df75fdf2/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fcac365e1616779b40a69736428435df75fdf2/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=90fcac365e1616779b40a69736428435df75fdf2",
        "patch": "@@ -3,10 +3,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key.h>\n+#include <key_io.h>\n #include <script/script.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n \n #include <boost/test/unit_test.hpp>\n \n@@ -378,4 +380,70 @@ BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)\n     BOOST_CHECK(result == expected);\n }\n \n+BOOST_AUTO_TEST_CASE(script_standard_taproot_builder)\n+{\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({}), true);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0}), true);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0,0}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0,1}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0,2}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1,0}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1,1}), true);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1,2}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,0}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,1}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,2}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0,0,0}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0,0,1}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0,0,2}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0,1,0}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0,1,1}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0,1,2}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0,2,0}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0,2,1}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({0,2,2}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1,0,0}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1,0,1}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1,0,2}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1,1,0}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1,1,1}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1,1,2}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1,2,0}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1,2,1}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({1,2,2}), true);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,0,0}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,0,1}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,0,2}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,1,0}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,1,1}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,1,2}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,2,0}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,2,1}), true);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,2,2}), false);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({2,2,2,3,4,5,6,7,8,9,10,11,12,14,14,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,31,31,31,31,31,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,128}), true);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({128,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1}), true);\n+    BOOST_CHECK_EQUAL(TaprootBuilder::ValidDepths({129,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1}), false);\n+\n+    XOnlyPubKey key_inner{ParseHex(\"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\")};\n+    XOnlyPubKey key_1{ParseHex(\"c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5\")};\n+    XOnlyPubKey key_2{ParseHex(\"f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9\")};\n+    CScript script_1 = CScript() << ToByteVector(key_1) << OP_CHECKSIG;\n+    CScript script_2 = CScript() << ToByteVector(key_2) << OP_CHECKSIG;\n+    uint256 hash_3 = uint256S(\"31fe7061656bea2a36aa60a2f7ef940578049273746935d296426dc0afd86b68\");\n+\n+    TaprootBuilder builder;\n+    BOOST_CHECK(builder.IsValid() && builder.IsComplete());\n+    builder.Add(2, script_2, 0xc0);\n+    BOOST_CHECK(builder.IsValid() && !builder.IsComplete());\n+    builder.AddOmitted(2, hash_3);\n+    BOOST_CHECK(builder.IsValid() && !builder.IsComplete());\n+    builder.Add(1, script_1, 0xc0);\n+    BOOST_CHECK(builder.IsValid() && builder.IsComplete());\n+    builder.Finalize(key_inner);\n+    BOOST_CHECK(builder.IsValid() && builder.IsComplete());\n+    BOOST_CHECK_EQUAL(EncodeDestination(builder.GetOutput()), \"bc1pj6gaw944fy0xpmzzu45ugqde4rz7mqj5kj0tg8kmr5f0pjq8vnaqgynnge\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "7cedafc5412857404e9a6c3450b100cb8ee4081a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2VkYWZjNTQxMjg1NzQwNGU5YTZjMzQ1MGIxMDBjYjhlZTQwODFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-08T03:18:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T19:14:16Z"
      },
      "message": "Add tr() descriptor (derivation only, no signing)\n\nThis adds a new descriptor with syntax e.g. tr(KEY,{S1,{{S2,S3},S4})\nwhere KEY is a key expression for the internal key and S_i are\nscript expression for the leaves. They have to be organized in\nnested {A,B} groups, with exactly two elements.\n\ntr() only exists at the top level, and inside the script expressions\nonly pk() scripts are allowed for now.",
      "tree": {
        "sha": "9ec014407feccbe45190dce5fdb4f77c6203708e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ec014407feccbe45190dce5fdb4f77c6203708e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cedafc5412857404e9a6c3450b100cb8ee4081a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cedafc5412857404e9a6c3450b100cb8ee4081a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cedafc5412857404e9a6c3450b100cb8ee4081a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cedafc5412857404e9a6c3450b100cb8ee4081a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90fcac365e1616779b40a69736428435df75fdf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90fcac365e1616779b40a69736428435df75fdf2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90fcac365e1616779b40a69736428435df75fdf2"
      }
    ],
    "stats": {
      "total": 178,
      "additions": 163,
      "deletions": 15
    },
    "files": [
      {
        "sha": "e27ff8754684561ad115131c6ecf2e2a7e422e2e",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cedafc5412857404e9a6c3450b100cb8ee4081a/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cedafc5412857404e9a6c3450b100cb8ee4081a/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=7cedafc5412857404e9a6c3450b100cb8ee4081a",
        "patch": "@@ -30,6 +30,7 @@ Output descriptors currently support:\n - Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n - Pay-to-script-hash scripts (P2SH), through the `sh` function.\n - Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Pay-to-taproot outputs (P2TR), through the `tr` function.\n - Multisig scripts, through the `multi` function.\n - Multisig scripts where the public keys are sorted lexicographically, through the `sortedmulti` function.\n - Any type of supported address through the `addr` function.\n@@ -54,20 +55,22 @@ Output descriptors currently support:\n - `pkh([d34db33f/44'/0'/0']xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/1/*)` describes a set of P2PKH outputs, but additionally specifies that the specified xpub is a child of a master with fingerprint `d34db33f`, and derived using path `44'/0'/0'`.\n - `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n - `wsh(sortedmulti(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where one multisig key is the *1/0/`i`* child of the first specified xpub and the other multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default). The order of public keys in the resulting witnessScripts is determined by the lexicographic order of the public keys at that index.\n+- `tr(c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5,{pk(fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556),pk(e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)})` describes a P2TR output with the `c6...` x-only pubkey as internal key, and two script paths.\n \n ## Reference\n \n Descriptors consist of several types of expressions. The top level expression is either a `SCRIPT`, or `SCRIPT#CHECKSUM` where `CHECKSUM` is an 8-character alphanumeric descriptor checksum.\n \n `SCRIPT` expressions:\n - `sh(SCRIPT)` (top level only): P2SH embed the argument.\n-- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `wsh(SCRIPT)` (top level or inside `sh` only): P2WSH embed the argument.\n - `pk(KEY)` (anywhere): P2PK output for the given public key.\n-- `pkh(KEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n-- `wpkh(KEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `pkh(KEY)` (not inside `tr`): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(KEY)` (top level or inside `sh` only): P2WPKH output for the given compressed pubkey.\n - `combo(KEY)` (top level only): an alias for the collection of `pk(KEY)` and `pkh(KEY)`. If the key is compressed, it also includes `wpkh(KEY)` and `sh(wpkh(KEY))`.\n-- `multi(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script.\n-- `sortedmulti(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script with keys sorted lexicographically in the resulting script.\n+- `multi(k,KEY_1,KEY_2,...,KEY_n)` (not inside `tr`): k-of-n multisig script.\n+- `sortedmulti(k,KEY_1,KEY_2,...,KEY_n)` (not inside `tr`): k-of-n multisig script with keys sorted lexicographically in the resulting script.\n+- `tr(KEY)` or `tr(KEY,TREE)` (top level only): P2TR output with the specified key as internal key, and optionally a tree of script paths.\n - `addr(ADDR)` (top level only): the script which ADDR expands to.\n - `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n \n@@ -80,12 +83,17 @@ Descriptors consist of several types of expressions. The top level expression is\n - Followed by the actual key, which is either:\n   - Hex encoded public keys (either 66 characters starting with `02` or `03` for a compressed pubkey, or 130 characters starting with `04` for an uncompressed pubkey).\n     - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+    - Inside `tr`, x-only pubkeys are also permitted (64 hex characters).\n   - [WIF](https://en.bitcoin.it/wiki/Wallet_import_format) encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n   - `xpub` encoded extended public key or `xprv` encoded extended private key (as defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)).\n     - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n     - Optionally followed by a single `/*` or `/*'` final step to denote all (direct) unhardened or hardened children.\n     - The usage of hardened derivation steps requires providing the private key.\n \n+`TREE` expressions:\n+- any `SCRIPT` expression\n+- An open brace `{`, a `TREE` expression, a comma `,`, a `TREE` expression, and a closing brace `}`\n+\n (Anywhere a `'` suffix is permitted to denote hardened derivation, the suffix `h` can be used instead.)\n \n `ADDR` expressions are any type of supported address:"
      },
      {
        "sha": "152a48dd1803c4f04af2796477bc72ee252f7ea8",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cedafc5412857404e9a6c3450b100cb8ee4081a/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cedafc5412857404e9a6c3450b100cb8ee4081a/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=7cedafc5412857404e9a6c3450b100cb8ee4081a",
        "patch": "@@ -237,6 +237,9 @@ class XOnlyPubKey\n     /** Construct an x-only pubkey from exactly 32 bytes. */\n     explicit XOnlyPubKey(Span<const unsigned char> bytes);\n \n+    /** Construct an x-only pubkey from a normal pubkey. */\n+    explicit XOnlyPubKey(const CPubKey& pubkey) : XOnlyPubKey(Span<const unsigned char>(pubkey.begin() + 1, pubkey.begin() + 33)) {}\n+\n     /** Verify a Schnorr signature against this public key.\n      *\n      * sigbytes must be exactly 64 bytes."
      },
      {
        "sha": "51cf8a7d6235a2bfe52819b295e9ab64514b31a5",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 144,
        "deletions": 7,
        "changes": 151,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cedafc5412857404e9a6c3450b100cb8ee4081a/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cedafc5412857404e9a6c3450b100cb8ee4081a/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=7cedafc5412857404e9a6c3450b100cb8ee4081a",
        "patch": "@@ -241,9 +241,10 @@ class OriginPubkeyProvider final : public PubkeyProvider\n class ConstPubkeyProvider final : public PubkeyProvider\n {\n     CPubKey m_pubkey;\n+    bool m_xonly;\n \n public:\n-    ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey) : PubkeyProvider(exp_index), m_pubkey(pubkey) {}\n+    ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey, bool xonly = false) : PubkeyProvider(exp_index), m_pubkey(pubkey), m_xonly(xonly) {}\n     bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n     {\n         key = m_pubkey;\n@@ -254,7 +255,7 @@ class ConstPubkeyProvider final : public PubkeyProvider\n     }\n     bool IsRange() const override { return false; }\n     size_t GetSize() const override { return m_pubkey.size(); }\n-    std::string ToString() const override { return HexStr(m_pubkey); }\n+    std::string ToString() const override { return m_xonly ? HexStr(m_pubkey).substr(2) : HexStr(m_pubkey); }\n     bool ToPrivateString(const SigningProvider& arg, std::string& ret) const override\n     {\n         CKey key;\n@@ -505,6 +506,7 @@ class DescriptorImpl : public Descriptor\n public:\n     DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args() {}\n     DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::unique_ptr<DescriptorImpl> script, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args(Vector(std::move(script))) {}\n+    DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::vector<std::unique_ptr<DescriptorImpl>> scripts, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args(std::move(scripts)) {}\n \n     bool IsSolvable() const override\n     {\n@@ -693,10 +695,20 @@ class RawDescriptor final : public DescriptorImpl\n /** A parsed pk(P) descriptor. */\n class PKDescriptor final : public DescriptorImpl\n {\n+private:\n+    const bool m_xonly;\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider&) const override { return Vector(GetScriptForRawPubKey(keys[0])); }\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider&) const override\n+    {\n+        if (m_xonly) {\n+            CScript script = CScript() << ToByteVector(XOnlyPubKey(keys[0])) << OP_CHECKSIG;\n+            return Vector(std::move(script));\n+        } else {\n+            return Vector(GetScriptForRawPubKey(keys[0]));\n+        }\n+    }\n public:\n-    PKDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), \"pk\") {}\n+    PKDescriptor(std::unique_ptr<PubkeyProvider> prov, bool xonly = false) : DescriptorImpl(Vector(std::move(prov)), \"pk\"), m_xonly(xonly) {}\n     bool IsSingleType() const final { return true; }\n };\n \n@@ -814,6 +826,56 @@ class WSHDescriptor final : public DescriptorImpl\n     bool IsSingleType() const final { return true; }\n };\n \n+/** A parsed tr(...) descriptor. */\n+class TRDescriptor final : public DescriptorImpl\n+{\n+    std::vector<int> m_depths;\n+protected:\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript> scripts, FlatSigningProvider& out) const override\n+    {\n+        TaprootBuilder builder;\n+        assert(m_depths.size() == scripts.size());\n+        for (size_t pos = 0; pos < m_depths.size(); ++pos) {\n+            builder.Add(m_depths[pos], scripts[pos], TAPROOT_LEAF_TAPSCRIPT);\n+        }\n+        if (!builder.IsComplete()) return {};\n+        assert(keys.size() == 1);\n+        XOnlyPubKey xpk(keys[0]);\n+        if (!xpk.IsFullyValid()) return {};\n+        builder.Finalize(xpk);\n+        return Vector(GetScriptForDestination(builder.GetOutput()));\n+    }\n+    bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, bool priv, bool normalized) const override\n+    {\n+        if (m_depths.empty()) return true;\n+        std::vector<bool> path;\n+        for (size_t pos = 0; pos < m_depths.size(); ++pos) {\n+            if (pos) ret += ',';\n+            while ((int)path.size() <= m_depths[pos]) {\n+                if (path.size()) ret += '{';\n+                path.push_back(false);\n+            }\n+            std::string tmp;\n+            if (!m_subdescriptor_args[pos]->ToStringHelper(arg, tmp, priv, normalized)) return false;\n+            ret += std::move(tmp);\n+            while (!path.empty() && path.back()) {\n+                if (path.size() > 1) ret += '}';\n+                path.pop_back();\n+            }\n+            if (!path.empty()) path.back() = true;\n+        }\n+        return true;\n+    }\n+public:\n+    TRDescriptor(std::unique_ptr<PubkeyProvider> internal_key, std::vector<std::unique_ptr<DescriptorImpl>> descs, std::vector<int> depths) :\n+        DescriptorImpl(Vector(std::move(internal_key)), std::move(descs), \"tr\"), m_depths(std::move(depths))\n+    {\n+        assert(m_subdescriptor_args.size() == m_depths.size());\n+    }\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n+    bool IsSingleType() const final { return true; }\n+};\n+\n ////////////////////////////////////////////////////////////////////////////\n // Parser                                                                 //\n ////////////////////////////////////////////////////////////////////////////\n@@ -823,6 +885,7 @@ enum class ParseScriptContext {\n     P2SH,    //!< Inside sh() (script becomes P2SH redeemScript)\n     P2WPKH,  //!< Inside wpkh() (no script, pubkey only)\n     P2WSH,   //!< Inside wsh() (script becomes v0 witness script)\n+    P2TR,    //!< Inside tr() (either internal key, or BIP342 script leaf)\n };\n \n /** Parse a key path, being passed a split list of elements (the first element is ignored). */\n@@ -871,6 +934,13 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n                     error = \"Uncompressed keys are not allowed\";\n                     return nullptr;\n                 }\n+            } else if (data.size() == 32 && ctx == ParseScriptContext::P2TR) {\n+                unsigned char fullkey[33] = {0x02};\n+                std::copy(data.begin(), data.end(), fullkey + 1);\n+                pubkey.Set(std::begin(fullkey), std::end(fullkey));\n+                if (pubkey.IsFullyValid()) {\n+                    return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey, true);\n+                }\n             }\n             error = strprintf(\"Pubkey '%s' is invalid\", str);\n             return nullptr;\n@@ -958,13 +1028,16 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n         auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n         if (!pubkey) return nullptr;\n         ++key_exp_index;\n-        return std::make_unique<PKDescriptor>(std::move(pubkey));\n+        return std::make_unique<PKDescriptor>(std::move(pubkey), ctx == ParseScriptContext::P2TR);\n     }\n-    if (Func(\"pkh\", expr)) {\n+    if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH) && Func(\"pkh\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n         if (!pubkey) return nullptr;\n         ++key_exp_index;\n         return std::make_unique<PKHDescriptor>(std::move(pubkey));\n+    } else if (Func(\"pkh\", expr)) {\n+        error = \"Can only have pkh at top level, in sh(), or in wsh()\";\n+        return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n@@ -975,7 +1048,7 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n         error = \"Can only have combo() at top level\";\n         return nullptr;\n     }\n-    if ((sorted_multi = Func(\"sortedmulti\", expr)) || Func(\"multi\", expr)) {\n+    if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH) && ((sorted_multi = Func(\"sortedmulti\", expr)) || Func(\"multi\", expr))) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n@@ -1020,6 +1093,9 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n             }\n         }\n         return std::make_unique<MultisigDescriptor>(thres, std::move(providers), sorted_multi);\n+    } else if (Func(\"sortedmulti\", expr) || Func(\"multi\", expr)) {\n+        error = \"Can only have multi/sortedmulti at top level, in sh(), or in wsh()\";\n+        return nullptr;\n     }\n     if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH) && Func(\"wpkh\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, ParseScriptContext::P2WPKH, out, error);\n@@ -1057,6 +1133,67 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n         error = \"Can only have addr() at top level\";\n         return nullptr;\n     }\n+    if (ctx == ParseScriptContext::TOP && Func(\"tr\", expr)) {\n+        auto arg = Expr(expr);\n+        auto internal_key = ParsePubkey(key_exp_index, arg, ParseScriptContext::P2TR, out, error);\n+        if (!internal_key) return nullptr;\n+        ++key_exp_index;\n+        std::vector<std::unique_ptr<DescriptorImpl>> subscripts; //!< list of script subexpressions\n+        std::vector<int> depths; //!< depth in the tree of each subexpression (same length subscripts)\n+        if (expr.size()) {\n+            if (!Const(\",\", expr)) {\n+                error = strprintf(\"tr: expected ',', got '%c'\", expr[0]);\n+                return nullptr;\n+            }\n+            /** The path from the top of the tree to what we're currently processing.\n+             * branches[i] == false: left branch in the i'th step from the top; true: right branch.\n+             */\n+            std::vector<bool> branches;\n+            // Loop over all provided scripts. In every iteration exactly one script will be processed.\n+            // Use a do-loop because inside this if-branch we expect at least one script.\n+            do {\n+                // First process all open braces.\n+                while (Const(\"{\", expr)) {\n+                    branches.push_back(false); // new left branch\n+                    if (branches.size() > TAPROOT_CONTROL_MAX_NODE_COUNT) {\n+                        error = strprintf(\"tr() supports at most %i nesting levels\", TAPROOT_CONTROL_MAX_NODE_COUNT);\n+                        return nullptr;\n+                    }\n+                }\n+                // Process the actual script expression.\n+                auto sarg = Expr(expr);\n+                subscripts.emplace_back(ParseScript(key_exp_index, sarg, ParseScriptContext::P2TR, out, error));\n+                if (!subscripts.back()) return nullptr;\n+                depths.push_back(branches.size());\n+                // Process closing braces; one is expected for every right branch we were in.\n+                while (branches.size() && branches.back()) {\n+                    if (!Const(\"}\", expr)) {\n+                        error = strprintf(\"tr(): expected '}' after script expression\");\n+                        return nullptr;\n+                    }\n+                    branches.pop_back(); // move up one level after encountering '}'\n+                }\n+                // If after that, we're at the end of a left branch, expect a comma.\n+                if (branches.size() && !branches.back()) {\n+                    if (!Const(\",\", expr)) {\n+                        error = strprintf(\"tr(): expected ',' after script expression\");\n+                        return nullptr;\n+                    }\n+                    branches.back() = true; // And now we're in a right branch.\n+                }\n+            } while (branches.size());\n+            // After we've explored a whole tree, we must be at the end of the expression.\n+            if (expr.size()) {\n+                error = strprintf(\"tr(): expected ')' after script expression\");\n+                return nullptr;\n+            }\n+        }\n+        assert(TaprootBuilder::ValidDepths(depths));\n+        return std::make_unique<TRDescriptor>(std::move(internal_key), std::move(subscripts), std::move(depths));\n+    } else if (Func(\"tr\", expr)) {\n+        error = \"Can only have tr at top level\";\n+        return nullptr;\n+    }\n     if (ctx == ParseScriptContext::TOP && Func(\"raw\", expr)) {\n         std::string str(expr.begin(), expr.end());\n         if (!IsHex(str)) {"
      },
      {
        "sha": "e2e2782bec248afbc120c92f04b110ce293fb909",
        "filename": "src/util/spanparsing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cedafc5412857404e9a6c3450b100cb8ee4081a/src/util/spanparsing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cedafc5412857404e9a6c3450b100cb8ee4081a/src/util/spanparsing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/spanparsing.cpp?ref=7cedafc5412857404e9a6c3450b100cb8ee4081a",
        "patch": "@@ -34,11 +34,11 @@ Span<const char> Expr(Span<const char>& sp)\n     int level = 0;\n     auto it = sp.begin();\n     while (it != sp.end()) {\n-        if (*it == '(') {\n+        if (*it == '(' || *it == '{') {\n             ++level;\n-        } else if (level && *it == ')') {\n+        } else if (level && (*it == ')' || *it == '}')) {\n             --level;\n-        } else if (level == 0 && (*it == ')' || *it == ',')) {\n+        } else if (level == 0 && (*it == ')' || *it == '}' || *it == ',')) {\n             break;\n         }\n         ++it;"
      }
    ]
  },
  {
    "sha": "2667366aaa69447a9de4d819669d254a5ebd4d4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjY3MzY2YWFhNjk0NDdhOWRlNGQ4MTk2NjlkMjU0YTVlYmQ0ZDRi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-28T04:34:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T21:59:34Z"
      },
      "message": "tests: check derivation of P2TR",
      "tree": {
        "sha": "386ee7c80459a1a5b319b0f85119ed964fa80ca3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/386ee7c80459a1a5b319b0f85119ed964fa80ca3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2667366aaa69447a9de4d819669d254a5ebd4d4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2667366aaa69447a9de4d819669d254a5ebd4d4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2667366aaa69447a9de4d819669d254a5ebd4d4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2667366aaa69447a9de4d819669d254a5ebd4d4b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cedafc5412857404e9a6c3450b100cb8ee4081a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cedafc5412857404e9a6c3450b100cb8ee4081a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cedafc5412857404e9a6c3450b100cb8ee4081a"
      }
    ],
    "stats": {
      "total": 273,
      "additions": 273,
      "deletions": 0
    },
    "files": [
      {
        "sha": "acbbc21979bd4a4516f2d575e4862aac33467a3f",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2667366aaa69447a9de4d819669d254a5ebd4d4b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2667366aaa69447a9de4d819669d254a5ebd4d4b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2667366aaa69447a9de4d819669d254a5ebd4d4b",
        "patch": "@@ -260,6 +260,7 @@\n     'wallet_send.py --legacy-wallet',\n     'wallet_send.py --descriptors',\n     'wallet_create_tx.py --descriptors',\n+    'wallet_taproot.py',\n     'p2p_fingerprint.py',\n     'feature_uacomment.py',\n     'wallet_coinbase_category.py --legacy-wallet',"
      },
      {
        "sha": "65ca7bdef72411e37293cc8163c0b78268eeabc8",
        "filename": "test/functional/wallet_taproot.py",
        "status": "added",
        "additions": 272,
        "deletions": 0,
        "changes": 272,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2667366aaa69447a9de4d819669d254a5ebd4d4b/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2667366aaa69447a9de4d819669d254a5ebd4d4b/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=2667366aaa69447a9de4d819669d254a5ebd4d4b",
        "patch": "@@ -0,0 +1,272 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test generation and spending of P2TR addresses.\"\"\"\n+\n+import random\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.descriptors import descsum_create\n+from test_framework.script import (CScript, OP_CHECKSIG, taproot_construct)\n+from test_framework.segwit_addr import encode_segwit_address\n+\n+# xprvs/xpubs, and m/* derived x-only pubkeys (created using independent implementation)\n+KEYS = [\n+    {\n+        \"xprv\": \"tprv8ZgxMBicQKsPeNLUGrbv3b7qhUk1LQJZAGMuk9gVuKh9sd4BWGp1eMsehUni6qGb8bjkdwBxCbgNGdh2bYGACK5C5dRTaif9KBKGVnSezxV\",\n+        \"xpub\": \"tpubD6NzVbkrYhZ4XqNGAWGWSzmxGWFwVjVTjZxh2fioKbVYi7Jx8fdbprVWsdW7mHwqjchBVas8TLZG4Xwuz4RKU4iaCqiCvoSkFCzQptqk5Y1\",\n+        \"pubs\": [\n+            \"83d8ee77a0f3a32a5cea96fd1624d623b836c1e5d1ac2dcde46814b619320c18\",\n+            \"a30253b018ea6fca966135bf7dd8026915427f24ccf10d4e03f7870f4128569b\",\n+            \"a61e5749f2f3db9dc871d7b187e30bfd3297eea2557e9be99897ea8ff7a29a21\",\n+            \"8110cf482f66dc37125e619d73075af932521724ffc7108309e88f361efe8c8a\",\n+        ]\n+    },\n+    {\n+        \"xprv\": \"tprv8ZgxMBicQKsPe98QUPieXy5KFPVjuZNpcC9JY7K7buJEm8nWvJogK4kTda7eLjK9U4PnMNbSjEkpjDJazeBZ4rhYNYD7N6GEdaysj1AYSb5\",\n+        \"xpub\": \"tpubD6NzVbkrYhZ4XcACN3PEwNjRpR1g4tZjBVk5pdMR2B6dbd3HYhdGVZNKofAiFZd9okBserZvv58A6tBX4pE64UpXGNTSesfUW7PpW36HuKz\",\n+        \"pubs\": [\n+            \"f95886b02a84928c5c15bdca32784993105f73de27fa6ad8c1a60389b999267c\",\n+            \"71522134160685eb779857033bfc84c7626f13556154653a51dd42619064e679\",\n+            \"48957b4158b2c5c3f4c000f51fd2cf0fd5ff8868ebfb194256f5e9131fc74bd8\",\n+            \"086dda8139b3a84944010648d2b674b70447be3ae59322c09a4907bc80be62c1\",\n+        ]\n+    },\n+    {\n+        \"xprv\": \"tprv8ZgxMBicQKsPe3ZJmcj9aJ2EPZJYYCh6Lp3v82p75wspgaXmtDZ2RBtkAtWcGnW2VQDzMHQPBkCKMoYTqh1RfJKjv4PcmWVR7KqTpjsdboN\",\n+        \"xpub\": \"tpubD6NzVbkrYhZ4XWb6fGPjyhgLxapUhXszv7ehQYrQWDgDX4nYWcNcbgWcM2RhYo9s2mbZcfZJ8t5LzYcr24FK79zVybsw5Qj3Rtqug8jpJMy\",\n+        \"pubs\": [\n+            \"9fa5ffb68821cf559001caa0577eeea4978b29416def328a707b15e91701a2f7\",\n+            \"8a104c54cd34acba60c97dd8f1f7abc89ba9587afd88dc928e91aca7b1c50d20\",\n+            \"13ba6b252a4eb5ef31d39cb521724cdab19a698323f5c17093f28fb1821d052f\",\n+            \"f6c2b4863fd5ba1ba09e3a890caed8b75ffbe013ebab31a06ab87cd6f72506af\",\n+        ]\n+    },\n+    {\n+        \"xprv\": \"tprv8ZgxMBicQKsPdKziibn63Rm6aNzp7dSjDnufZMStXr71Huz7iihCRpbZZZ6Voy5HyuHCWx6foHMipzMzUq4tZrtkZ24DJwz5EeNWdsuwX5h\",\n+        \"xpub\": \"tpubD6NzVbkrYhZ4Wo2WcFSgSqRD9QWkGxddo6WSqsVBx7uQ8QEtM7WncKDRjhFEexK119NigyCsFygA4b7sAPQxqebyFGAZ9XVV1BtcgNzbCRR\",\n+        \"pubs\": [\n+            \"03a669ea926f381582ec4a000b9472ba8a17347f5fb159eddd4a07036a6718eb\",\n+            \"bbf56b14b119bccafb686adec2e3d2a6b51b1626213590c3afa815d1fd36f85d\",\n+            \"2994519e31bbc238a07d82f85c9832b831705d2ee4a2dbb477ecec8a3f570fe5\",\n+            \"68991b5c139a4c479f8c89d6254d288c533aefc0c5b91fac6c89019c4de64988\",\n+        ]\n+    },\n+    {\n+        \"xprv\": \"tprv8ZgxMBicQKsPen4PGtDwURYnCtVMDejyE8vVwMGhQWfVqB2FBPdekhTacDW4vmsKTsgC1wsncVqXiZdX2YFGAnKoLXYf42M78fQJFzuDYFN\",\n+        \"xpub\": \"tpubD6NzVbkrYhZ4YF6BAXtXsqCtmv1HNyvsoSXHDsJzpnTtffH1onTEwC5SnLzCHPKPebh2i7Gxvi9kJNADcpuSmH8oM3rCYcHVtdXHjpYoKnX\",\n+        \"pubs\": [\n+            \"aba457d16a8d59151c387f24d1eb887efbe24644c1ee64b261282e7baebdb247\",\n+            \"c8558b7caf198e892032d91f1a48ee9bdc25462b83b4d0ac62bb7fb2a0df630e\",\n+            \"8a4bcaba0e970685858d133a4d0079c8b55bbc755599e212285691eb779ce3dc\",\n+            \"b0d68ada13e0d954b3921b88160d4453e9c151131c2b7c724e08f538a666ceb3\",\n+        ]\n+    },\n+    {\n+        \"xprv\": \"tprv8ZgxMBicQKsPd91vCgRmbzA13wyip2RimYeVEkAyZvsEN5pUSB3T43SEBxPsytkxb42d64W2EiRE9CewpJQkzR8HKHLV8Uhk4dMF5yRPaTv\",\n+        \"xpub\": \"tpubD6NzVbkrYhZ4Wc3i6L6N1Pp7cyVeyMcdLrFGXGDGzCfdCa5F4Zs3EY46N72Ws8QDEUYBVwXfDfda2UKSseSdU1fsBegJBhGCZyxkf28bkQ6\",\n+        \"pubs\": [\n+            \"9b4d495b74887815a1ff623c055c6eac6b6b2e07d2a016d6526ebac71dd99744\",\n+            \"8e971b781b7ce7ab742d80278f2dfe7dd330f3efd6d00047f4a2071f2e7553cb\",\n+            \"b811d66739b9f07435ccda907ec5cd225355321c35e0a7c7791232f24cf10632\",\n+            \"4cd27a5552c272bc80ba544e9cc6340bb906969f5e7a1510b6cef9592683fbc9\",\n+        ]\n+    },\n+    {\n+        \"xprv\": \"tprv8ZgxMBicQKsPdEhLRxxwzTv2t18j7ruoffPeqAwVA2qXJ2P66RaMZLUWQ85SjoA7xPxdSgCB9UZ72m65qbnaLPtFTfHVP3MEmkpZk1Bv8RT\",\n+        \"xpub\": \"tpubD6NzVbkrYhZ4Whj8KcdYPsa9T2efHC6iExzS7gynaJdv8WdripPwjq6NaH5gQJGrLmvUwHY1smhiakUosXNDTEa6qfKUQdLKV6DJBre6XvQ\",\n+        \"pubs\": [\n+            \"d0c19def28bb1b39451c1a814737615983967780d223b79969ba692182c6006b\",\n+            \"cb1d1b1dc62fec1894d4c3d9a1b6738e5ff9c273a64f74e9ab363095f45e9c47\",\n+            \"245be588f41acfaeb9481aa132717db56ee1e23eb289729fe2b8bde8f9a00830\",\n+            \"5bc4ad6d6187fa82728c85a073b428483295288f8aef5722e47305b5872f7169\",\n+        ]\n+    },\n+    {\n+        \"xprv\": \"tprv8ZgxMBicQKsPcxbqxzcMAwQpiCD8x6qaZEJTxdKxw4w9GuMzDACTD9yhEsHGfqQcfYX4LivosLDDngTykYEp9JnTdcqY7cHqU8PpeFFKyV3\",\n+        \"xpub\": \"tpubD6NzVbkrYhZ4WRddreGwaM4wHDj57S2V8XuFF9NGMLjY7PckqZ23PebZR1wGA4w84uX2vZphdZVsnREjij1ibYjEBTaTVQCEZCLs4xUDapx\",\n+        \"pubs\": [\n+            \"065cc1b92bd99e5a3e626e8296a366b2d132688eb43aea19bc14fd8f43bf07fb\",\n+            \"5b95633a7dda34578b6985e6bfd85d83ec38b7ded892a9b74a3d899c85890562\",\n+            \"dc86d434b9a34495c8e845b969d51f80d19a8df03b400353ffe8036a0c22eb60\",\n+            \"06c8ffde238745b29ae8a97ae533e1f3edf214bba6ec58b5e7b9451d1d61ec19\",\n+        ]\n+    },\n+    {\n+        \"xprv\": \"tprv8ZgxMBicQKsPe6zLoU8MTTXgsdJVNBErrYGpoGwHf5VGvwUzdNc7NHeCSzkJkniCxBhZWujXjmD4HZmBBrnr3URgJjM6GxRgMmEhLdqNTWG\",\n+        \"xpub\": \"tpubD6NzVbkrYhZ4Xa28h7nwrsBoSepRXWRmRqsc5nyb5MHfmRjmFmRhYnG4d9dC7uxixN5AfsEv1Lz3mCAuWvERyvPgKozHUVjfo8EG6foJGy7\",\n+        \"pubs\": [\n+            \"d826a0a53abb6ffc60df25b9c152870578faef4b2eb5a09bdd672bbe32cdd79b\",\n+            \"939365e0359ff6bc6f6404ee220714c5d4a0d1e36838b9e2081ede217674e2ba\",\n+            \"4e8767edcf7d3d90258cfbbea01b784f4d2de813c4277b51279cf808bac410a2\",\n+            \"d42a2c280940bfc6ede971ae72cde2e1df96c6da7dab06a132900c6751ade208\",\n+        ]\n+    },\n+    {\n+        \"xprv\": \"tprv8ZgxMBicQKsPeB5o5oCsN2dVxM2mtJiYERQEBRc4JNwC1DFGYaEdNkmh8jJYVPU76YhkFoRoWTdh1p3yQGykG8TfDW34dKgrgSx28gswUyL\",\n+        \"xpub\": \"tpubD6NzVbkrYhZ4Xe7aySsTmSHcXNYi3duSoj11TweMiejaqhW3Ay4DZFPZJses4sfpk4b9VHRhn8v4cKTMjugMM3hqXcqSSmRdiW8QvASXjfY\",\n+        \"pubs\": [\n+            \"e360564b2e0e8d06681b6336a29d0750210e8f34afd9afb5e6fd5fe6dba26c81\",\n+            \"76b4900f00a1dcce463b6d8e02b768518fce4f9ecd6679a13ad78ea1e4815ad3\",\n+            \"5575556e263c8ed52e99ab02147cc05a738869afe0039911b5a60a780f4e43d2\",\n+            \"593b00e2c8d4bd6dda0fd9e238888acf427bb4e128887fd5a40e0e9da78cbc01\",\n+        ]\n+    },\n+    {\n+        \"xprv\": \"tprv8ZgxMBicQKsPfEH6jHemkGDjZRnAaKFJVGH8pQU638E6SdbX9hxit1tK2sfFPfL6KS7v8FfUKxstbfEpzSymbdfBM9Y5UkrxErF9fJaKLK3\",\n+        \"xpub\": \"tpubD6NzVbkrYhZ4YhJtcwKN9fsr8TJ6jeSD4Zsv6vWPTQ2VH7rHn6nK4WWBCzKK7FkdVVwm3iztCU1UmStY4hX6gRbBmp9UzK9C59dQEzeXS12\",\n+        \"pubs\": [\n+            \"7631cacec3343052d87ef4d0065f61dde82d7d2db0c1cc02ef61ef3c982ea763\",\n+            \"c05e44a9e735d1b1bef62e2c0d886e6fb4923b2649b67828290f5cacc51c71b7\",\n+            \"b33198b20701afe933226c92fd0e3d51d3f266f1113d864dbd026ae3166ef7f2\",\n+            \"f99643ac3f4072ee4a949301e86963a9ca0ad57f2ef29f6b84fda037d7cac85b\",\n+        ]\n+    },\n+    {\n+        \"xprv\": \"tprv8ZgxMBicQKsPdNWU38dT6aGxtqJR4oYS5kPpLVBcuKiiu7gqTYqMMqhUG6DP7pPahzPQu36sWSmeLCP1C4AwqcR5FX2RyRoZfd4B8pAnSdX\",\n+        \"xpub\": \"tpubD6NzVbkrYhZ4WqYFvnJ3Vyw5TrpME8jLf3zbd1DvKbX7jbwc5wewYLKLSFRzZWV6hZj7XhsXAy7fhE5jB25DiWyNM3ztXbsXHRVCrp5BiPY\",\n+        \"pubs\": [\n+            \"2258b1c3160be0864a541854eec9164a572f094f7562628281a8073bb89173a7\",\n+            \"83df59d0a5c951cdd62b7ab225a62079f48d2a333a86e66c35420d101446e92e\",\n+            \"2a654bf234d819055312f9ca03fad5836f9163b09cdd24d29678f694842b874a\",\n+            \"aa0334ab910047387c912a21ec0dab806a47ffa38365060dbc5d47c18c6e66e7\",\n+        ]\n+    },\n+    {\n+        \"xprv\": \"tprv8mGPkMVz5mZuJDnC2NjjAv7E9Zqa5LCgX4zawbZu5nzTtLb5kGhPwycX4H1gtW1f5ZdTKTNtQJ61hk71F2TdcQ93EFDTpUcPBr98QRji615\",\n+        \"xpub\": \"tpubDHxRtmYEE9FaBgoyv2QKaKmLibMWEfPb6NbNE7cCW4nripqrNfWz8UEPEPbHCrakwLvwFfsqoaf4pjX4gWStp4nECRf1QwBKPkLqnY8pHbj\",\n+        \"pubs\": [\n+            \"00a9da96087a72258f83b338ef7f0ea8cbbe05da5f18f091eb397d1ecbf7c3d3\",\n+            \"b2749b74d51a78f5fe3ebb3a7c0ff266a468cade143dfa265c57e325177edf00\",\n+            \"6b8747a6bbe4440d7386658476da51f6e49a220508a7ec77fe7bccc3e7baa916\",\n+            \"4674bf4d9ebbe01bf0aceaca2472f63198655ecf2df810f8d69b38421972318e\",\n+        ]\n+    }\n+]\n+\n+CHANGE_XPRV = \"tprv8ZgxMBicQKsPcyDrWwiecVnTtFmfRwbfFqEfR4ZGWvq5aTTwLBWmAm5zrbMcYtb9gQNFfhRfqhhrBG37U3nhmXxEgeEPBJGHAPrHCrAd1WX\"\n+CHANGE_XPUB = \"tpubD6NzVbkrYhZ4WSFeQbPF1uSaTHHbbGnZq8qShabZwCdUQwihxaLMMFhs2kidGF2qrRKiQVqw8VoyuTHj1bZqmMXMeciaU1gBjWA1sim2zUB\"\n+\n+# Point with no known discrete log.\n+H_POINT = \"50929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0\"\n+\n+\n+def key(hex_key):\n+    \"\"\"Construct an x-only pubkey from its hex representation.\"\"\"\n+    return bytes.fromhex(hex_key)\n+\n+def pk(hex_key):\n+    \"\"\"Construct a script expression for taproot_construct for pk(hex_key).\"\"\"\n+    return (None, CScript([bytes.fromhex(hex_key), OP_CHECKSIG]))\n+\n+def compute_taproot_address(pubkey, scripts):\n+    \"\"\"Compute the address for a taproot output with given inner key and scripts.\"\"\"\n+    tap = taproot_construct(pubkey, scripts)\n+    assert tap.scriptPubKey[0] == 0x51\n+    assert tap.scriptPubKey[1] == 0x20\n+    return encode_segwit_address(\"bcrt\", 1, tap.scriptPubKey[2:])\n+\n+class WalletTaprootTest(BitcoinTestFramework):\n+    \"\"\"Test generation and spending of P2TR address outputs.\"\"\"\n+\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        self.extra_args = [['-keypool=100'], ['-keypool=100']]\n+        self.supports_cli = False\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def init_wallet(self, i):\n+        pass\n+\n+    @staticmethod\n+    def rand_keys(n):\n+        ret = []\n+        idxes = set()\n+        for _ in range(n):\n+            while True:\n+                i = random.randrange(len(KEYS))\n+                if not i in idxes:\n+                    break\n+            idxes.add(i)\n+            ret.append(KEYS[i])\n+        return ret\n+\n+    @staticmethod\n+    def make_desc(pattern, privmap, keys, pub_only = False):\n+        pat = pattern.replace(\"$H\", H_POINT)\n+        for i in range(len(privmap)):\n+            if privmap[i] and not pub_only:\n+                pat = pat.replace(\"$%i\" % (i + 1), keys[i]['xprv'])\n+            else:\n+                pat = pat.replace(\"$%i\" % (i + 1), keys[i]['xpub'])\n+        return descsum_create(pat)\n+\n+    @staticmethod\n+    def make_addr(treefn, keys, i):\n+        args = []\n+        for j in range(len(keys)):\n+            args.append(keys[j]['pubs'][i])\n+        return compute_taproot_address(*treefn(*args))\n+\n+    def do_test_addr(self, comment, pattern, privmap, treefn, keys):\n+        self.log.info(\"Testing %s address derivation\" % comment)\n+        desc = self.make_desc(pattern, privmap, keys, False)\n+        desc_pub = self.make_desc(pattern, privmap, keys, True)\n+        assert_equal(self.nodes[0].getdescriptorinfo(desc)['descriptor'], desc_pub)\n+        result = self.addr_gen.importdescriptors([{\"desc\": desc_pub, \"active\": True, \"timestamp\": \"now\"}])\n+        assert(result[0]['success'])\n+        for i in range(4):\n+            addr_g = self.addr_gen.getnewaddress(address_type='bech32')\n+            if treefn is not None:\n+                addr_r = self.make_addr(treefn, keys, i)\n+                assert_equal(addr_g, addr_r)\n+\n+    def do_test(self, comment, pattern, privmap, treefn, nkeys):\n+        keys = self.rand_keys(nkeys)\n+        self.do_test_addr(comment, pattern, privmap, treefn, keys)\n+\n+    def run_test(self):\n+        self.log.info(\"Creating wallets...\")\n+        self.nodes[0].createwallet(wallet_name=\"addr_gen\", descriptors=True, disable_private_keys=True, blank=True)\n+        self.addr_gen = self.nodes[0].get_wallet_rpc(\"addr_gen\")\n+\n+        self.do_test(\n+            \"tr(XPRV)\",\n+            \"tr($1/*)\",\n+            [True],\n+            lambda k1: (key(k1), []),\n+            1\n+        )\n+        self.do_test(\n+            \"tr(H,XPRV)\",\n+            \"tr($H,pk($1/*))\",\n+            [True],\n+            lambda k1: (key(H_POINT), [pk(k1)]),\n+            1\n+        )\n+        self.do_test(\n+            \"tr(XPRV,{H,{H,XPUB}})\",\n+            \"tr($1/*,{pk($H),{pk($H),pk($2/*)}})\",\n+            [True, False],\n+            lambda k1, k2: (key(k1), [pk(H_POINT), [pk(H_POINT), pk(k2)]]),\n+            2\n+        )\n+        self.do_test(\n+            \"tr(XPUB,{{H,{H,XPUB}},{H,{H,{H,XPRV}}}})\",\n+            \"tr($1/*,{{pk($H),{pk($H),pk($2/*)}},{pk($H),{pk($H),{pk($H),pk($3/*)}}}})\",\n+            [False, False, True],\n+            lambda k1, k2, k3: (key(k1), [[pk(H_POINT), [pk(H_POINT), pk(k2)]], [pk(H_POINT), [pk(H_POINT), [pk(H_POINT), pk(k3)]]]]),\n+            3\n+        )\n+\n+if __name__ == '__main__':\n+    WalletTaprootTest().main()"
      }
    ]
  }
]