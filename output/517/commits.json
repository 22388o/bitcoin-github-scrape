[
  {
    "sha": "54d02f158d79b078ed9afdca5e37241101b040cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGQwMmYxNThkNzliMDc4ZWQ5YWZkY2E1ZTM3MjQxMTAxYjA0MGNk",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-09-15T12:55:15Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-09-21T16:01:56Z"
      },
      "message": "SetMockTime() for cleaner unit testing",
      "tree": {
        "sha": "1c1afb1dae4adfb6730b59199b325ecde7b46987",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c1afb1dae4adfb6730b59199b325ecde7b46987"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54d02f158d79b078ed9afdca5e37241101b040cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54d02f158d79b078ed9afdca5e37241101b040cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54d02f158d79b078ed9afdca5e37241101b040cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54d02f158d79b078ed9afdca5e37241101b040cd/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "700f9426921bac0f1d1a4ba31f26b8f569e2c32e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/700f9426921bac0f1d1a4ba31f26b8f569e2c32e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/700f9426921bac0f1d1a4ba31f26b8f569e2c32e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "14ca87b62e98d7c23e5d8c19a9e2388bd55528fc",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54d02f158d79b078ed9afdca5e37241101b040cd/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54d02f158d79b078ed9afdca5e37241101b040cd/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=54d02f158d79b078ed9afdca5e37241101b040cd",
        "patch": "@@ -815,11 +815,20 @@ void ShrinkDebugFile()\n //  - Median of other nodes's clocks\n //  - The user (asking the user to fix the system clock if the first two disagree)\n //\n+static int64 nMockTime = 0;  // For unit testing\n+\n int64 GetTime()\n {\n+    if (nMockTime) return nMockTime;\n+\n     return time(NULL);\n }\n \n+void SetMockTime(int64 nMockTimeIn)\n+{\n+    nMockTime = nMockTimeIn;\n+}\n+\n static int64 nTimeOffset = 0;\n \n int64 GetAdjustedTime()"
      },
      {
        "sha": "658d10e1eb1358d5af6c79f3eaf5794a47933a28",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54d02f158d79b078ed9afdca5e37241101b040cd/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54d02f158d79b078ed9afdca5e37241101b040cd/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=54d02f158d79b078ed9afdca5e37241101b040cd",
        "patch": "@@ -199,6 +199,7 @@ void ShrinkDebugFile();\n int GetRandInt(int nMax);\n uint64 GetRand(uint64 nMax);\n int64 GetTime();\n+void SetMockTime(int64 nMockTimeIn);\n int64 GetAdjustedTime();\n void AddTimeData(unsigned int ip, int64 nTime);\n std::string FormatFullVersion();"
      }
    ]
  },
  {
    "sha": "15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWYzYWQ0ZGJkZjBkMjQ1YjkzNmU2OGM1MWE3ZWNiOWY0NzJkMmNk",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-09-06T20:09:04Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-09-21T16:49:53Z"
      },
      "message": "Framework for banning mis-behaving peers",
      "tree": {
        "sha": "7e06d23ee6fd40fa6a60edb698350e8a96df49d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e06d23ee6fd40fa6a60edb698350e8a96df49d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54d02f158d79b078ed9afdca5e37241101b040cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54d02f158d79b078ed9afdca5e37241101b040cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54d02f158d79b078ed9afdca5e37241101b040cd"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 151,
      "deletions": 3
    },
    "files": [
      {
        "sha": "158418d7b73fc72e556d26398c73640c29433d64",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd",
        "patch": "@@ -179,6 +179,8 @@ bool AppInit2(int argc, char* argv[])\n             \"  -addnode=<ip>    \\t  \"   + _(\"Add a node to connect to\\n\") +\n             \"  -connect=<ip>    \\t\\t  \" + _(\"Connect only to the specified node\\n\") +\n             \"  -nolisten        \\t  \"   + _(\"Don't accept connections from outside\\n\") +\n+            \"  -banscore=<n>    \\t  \"   + _(\"Threshold for disconnecting misbehaving peers (default: 100)\\n\") +\n+            \"  -bantime=<n>     \\t  \"   + _(\"Number of seconds to keep misbehaving peers from reconnecting (default: 86400)\\n\") +\n #ifdef USE_UPNP\n #if USE_UPNP\n             \"  -noupnp          \\t  \"   + _(\"Don't attempt to use UPnP to map the listening port\\n\") +"
      },
      {
        "sha": "1792bf78a0c468985e4ea66faffe6a665daea4fc",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 1,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd",
        "patch": "@@ -726,6 +726,52 @@ void CNode::Cleanup()\n }\n \n \n+std::map<unsigned int, int64> CNode::setBanned;\n+CCriticalSection CNode::cs_setBanned;\n+\n+void CNode::ClearBanned()\n+{\n+    setBanned.clear();\n+}\n+\n+bool CNode::IsBanned(unsigned int ip)\n+{\n+    bool fResult = false;\n+    CRITICAL_BLOCK(cs_setBanned)\n+    {\n+        std::map<unsigned int, int64>::iterator i = setBanned.find(ip);\n+        if (i != setBanned.end())\n+        {\n+            int64 t = (*i).second;\n+            if (GetTime() < t)\n+                fResult = true;\n+        }\n+    }\n+    return fResult;\n+}\n+\n+bool CNode::Misbehaving(int howmuch)\n+{\n+    if (addr.IsLocal())\n+    {\n+        printf(\"Warning: local node %s misbehaving\\n\", addr.ToString().c_str());\n+        return false;\n+    }\n+\n+    nMisbehavior += howmuch;\n+    if (nMisbehavior >= GetArg(\"-banscore\", 100))\n+    {\n+        int64 banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n+        CRITICAL_BLOCK(cs_setBanned)\n+            if (setBanned[addr.ip] < banTime)\n+                setBanned[addr.ip] = banTime;\n+        CloseSocketDisconnect();\n+        printf(\"Disconnected %s for misbehavior (score=%d)\\n\", addr.ToString().c_str(), nMisbehavior);\n+        return true;\n+    }\n+    return false;\n+}\n+\n \n \n \n@@ -896,6 +942,11 @@ void ThreadSocketHandler2(void* parg)\n             {\n                 closesocket(hSocket);\n             }\n+            else if (CNode::IsBanned(addr.ip))\n+            {\n+                printf(\"connetion from %s dropped (banned)\\n\", addr.ToString().c_str());\n+                closesocket(hSocket);\n+            }\n             else\n             {\n                 printf(\"accepted connection %s\\n\", addr.ToString().c_str());\n@@ -1454,7 +1505,8 @@ bool OpenNetworkConnection(const CAddress& addrConnect)\n     //\n     if (fShutdown)\n         return false;\n-    if (addrConnect.ip == addrLocalHost.ip || !addrConnect.IsIPv4() || FindNode(addrConnect.ip))\n+    if (addrConnect.ip == addrLocalHost.ip || !addrConnect.IsIPv4() ||\n+        FindNode(addrConnect.ip) || CNode::IsBanned(addrConnect.ip))\n         return false;\n \n     vnThreadsRunning[1]--;"
      },
      {
        "sha": "5b3568fcafc3d368fcd1eca909e588d7b2082e6f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 27,
        "deletions": 1,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd",
        "patch": "@@ -124,6 +124,13 @@ class CNode\n     bool fDisconnect;\n protected:\n     int nRefCount;\n+\n+    // Denial-of-service detection/prevention\n+    // Key is ip address, value is banned-until-time\n+    static std::map<unsigned int, int64> setBanned;\n+    static CCriticalSection cs_setBanned;\n+    int nMisbehavior;\n+\n public:\n     int64 nReleaseTime;\n     std::map<uint256, CRequestTracker> mapRequests;\n@@ -148,7 +155,6 @@ class CNode\n     // publish and subscription\n     std::vector<char> vfSubscribe;\n \n-\n     CNode(SOCKET hSocketIn, CAddress addrIn, bool fInboundIn=false)\n     {\n         nServices = 0;\n@@ -185,6 +191,7 @@ class CNode\n         nStartingHeight = -1;\n         fGetAddr = false;\n         vfSubscribe.assign(256, false);\n+        nMisbehavior = 0;\n \n         // Be shy and don't send version until we hear\n         if (!fInbound)\n@@ -568,6 +575,25 @@ class CNode\n     void CancelSubscribe(unsigned int nChannel);\n     void CloseSocketDisconnect();\n     void Cleanup();\n+\n+\n+    // Denial-of-service detection/prevention\n+    // The idea is to detect peers that are behaving\n+    // badly and disconnect/ban them, but do it in a\n+    // one-coding-mistake-won't-shatter-the-entire-network\n+    // way.\n+    // IMPORTANT:  There should be nothing I can give a\n+    // node that it will forward on that will make that\n+    // node's peers drop it. If there is, an attacker\n+    // can isolate a node and/or try to split the network.\n+    // Dropping a node for sending stuff that is invalid\n+    // now but might be valid in a later version is also\n+    // dangerous, because it can cause a network split\n+    // between nodes running old code and nodes running\n+    // new code.\n+    static void ClearBanned(); // needed for unit testing\n+    static bool IsBanned(unsigned int ip);\n+    bool Misbehaving(int howmuch); // 1 == a little, 100 == a lot\n };\n \n "
      },
      {
        "sha": "e60bb742dd35d795ccd49312a8fa82b5a69071b4",
        "filename": "src/test/DoS_tests.cpp",
        "status": "added",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd",
        "patch": "@@ -0,0 +1,68 @@\n+//\n+// Unit tests for denial-of-service detection/prevention code\n+//\n+#include <boost/test/unit_test.hpp>\n+#include <boost/foreach.hpp>\n+\n+#include \"../main.h\"\n+#include \"../net.h\"\n+#include \"../util.h\"\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(DoS_tests)\n+\n+BOOST_AUTO_TEST_CASE(DoS_banning)\n+{\n+    CNode::ClearBanned();\n+    CAddress addr1(0xa0b0c001);\n+    CNode dummyNode1(INVALID_SOCKET, addr1, true);\n+    dummyNode1.Misbehaving(100); // Should get banned\n+    BOOST_CHECK(CNode::IsBanned(addr1.ip));\n+    BOOST_CHECK(!CNode::IsBanned(addr1.ip|0x0000ff00)); // Different ip, not banned\n+\n+    CAddress addr2(0xa0b0c002);\n+    CNode dummyNode2(INVALID_SOCKET, addr2, true);\n+    dummyNode2.Misbehaving(50);\n+    BOOST_CHECK(!CNode::IsBanned(addr2.ip)); // 2 not banned yet...\n+    BOOST_CHECK(CNode::IsBanned(addr1.ip));  // ... but 1 still should be\n+    dummyNode2.Misbehaving(50);\n+    BOOST_CHECK(CNode::IsBanned(addr2.ip));\n+}    \n+\n+BOOST_AUTO_TEST_CASE(DoS_banscore)\n+{\n+    CNode::ClearBanned();\n+    mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n+    CAddress addr1(0xa0b0c001);\n+    CNode dummyNode1(INVALID_SOCKET, addr1, true);\n+    dummyNode1.Misbehaving(100);\n+    BOOST_CHECK(!CNode::IsBanned(addr1.ip));\n+    dummyNode1.Misbehaving(10);\n+    BOOST_CHECK(!CNode::IsBanned(addr1.ip));\n+    dummyNode1.Misbehaving(1);\n+    BOOST_CHECK(CNode::IsBanned(addr1.ip));\n+    mapArgs[\"-banscore\"] = \"100\";\n+}\n+\n+BOOST_AUTO_TEST_CASE(DoS_bantime)\n+{\n+    CNode::ClearBanned();\n+    int64 nStartTime = GetTime();\n+    SetMockTime(nStartTime); // Overrides future calls to GetTime()\n+\n+    CAddress addr(0xa0b0c001);\n+    CNode dummyNode(INVALID_SOCKET, addr, true);\n+\n+    dummyNode.Misbehaving(100);\n+    BOOST_CHECK(CNode::IsBanned(addr.ip));\n+\n+    SetMockTime(nStartTime+60*60);\n+    BOOST_CHECK(CNode::IsBanned(addr.ip));\n+\n+    SetMockTime(nStartTime+60*60*24+1);\n+    BOOST_CHECK(!CNode::IsBanned(addr.ip));\n+}    \n+\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "c6f6d94b1e7398168d97986754e7112b49933911",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd",
        "patch": "@@ -8,7 +8,7 @@\n #include \"uint256_tests.cpp\"\n #include \"script_tests.cpp\"\n #include \"transaction_tests.cpp\"\n-\n+#include \"DoS_tests.cpp\"\n \n CWallet* pwalletMain;\n "
      }
    ]
  },
  {
    "sha": "3e52aaf2121d597ab1ed012b65e37f9cb5f2754e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTUyYWFmMjEyMWQ1OTdhYjFlZDAxMmI2NWUzN2Y5Y2I1ZjI3NTRl",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-09-06T20:59:38Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-09-21T16:50:12Z"
      },
      "message": "Transaction/Block denial-of-service detection/response",
      "tree": {
        "sha": "67680efdeb0611d17e2607ab049cf846f14c9316",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67680efdeb0611d17e2607ab049cf846f14c9316"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e52aaf2121d597ab1ed012b65e37f9cb5f2754e",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e52aaf2121d597ab1ed012b65e37f9cb5f2754e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e52aaf2121d597ab1ed012b65e37f9cb5f2754e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e52aaf2121d597ab1ed012b65e37f9cb5f2754e/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15f3ad4dbdf0d245b936e68c51a7ecb9f472d2cd"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 41,
      "deletions": 29
    },
    "files": [
      {
        "sha": "6c7fac59fbd5b5d02e45c7130c54182e9502c721",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 29,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e52aaf2121d597ab1ed012b65e37f9cb5f2754e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e52aaf2121d597ab1ed012b65e37f9cb5f2754e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3e52aaf2121d597ab1ed012b65e37f9cb5f2754e",
        "patch": "@@ -296,24 +296,24 @@ bool CTransaction::CheckTransaction() const\n {\n     // Basic checks that don't depend on any context\n     if (vin.empty())\n-        return error(\"CTransaction::CheckTransaction() : vin empty\");\n+        return DoS(10, error(\"CTransaction::CheckTransaction() : vin empty\"));\n     if (vout.empty())\n-        return error(\"CTransaction::CheckTransaction() : vout empty\");\n+        return DoS(10, error(\"CTransaction::CheckTransaction() : vout empty\"));\n     // Size limits\n     if (::GetSerializeSize(*this, SER_NETWORK) > MAX_BLOCK_SIZE)\n-        return error(\"CTransaction::CheckTransaction() : size limits failed\");\n+        return DoS(100, error(\"CTransaction::CheckTransaction() : size limits failed\"));\n \n     // Check for negative or overflow output values\n     int64 nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n         if (txout.nValue < 0)\n-            return error(\"CTransaction::CheckTransaction() : txout.nValue negative\");\n+            return DoS(100, error(\"CTransaction::CheckTransaction() : txout.nValue negative\"));\n         if (txout.nValue > MAX_MONEY)\n-            return error(\"CTransaction::CheckTransaction() : txout.nValue too high\");\n+            return DoS(100, error(\"CTransaction::CheckTransaction() : txout.nValue too high\"));\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n-            return error(\"CTransaction::CheckTransaction() : txout total out of range\");\n+            return DoS(100, error(\"CTransaction::CheckTransaction() : txout total out of range\"));\n     }\n \n     // Check for duplicate inputs\n@@ -328,13 +328,13 @@ bool CTransaction::CheckTransaction() const\n     if (IsCoinBase())\n     {\n         if (vin[0].scriptSig.size() < 2 || vin[0].scriptSig.size() > 100)\n-            return error(\"CTransaction::CheckTransaction() : coinbase script size\");\n+            return DoS(100, error(\"CTransaction::CheckTransaction() : coinbase script size\"));\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, vin)\n             if (txin.prevout.IsNull())\n-                return error(\"CTransaction::CheckTransaction() : prevout is null\");\n+                return DoS(10, error(\"CTransaction::CheckTransaction() : prevout is null\"));\n     }\n \n     return true;\n@@ -350,7 +350,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n \n     // Coinbase is only valid in a block, not as a loose transaction\n     if (IsCoinBase())\n-        return error(\"AcceptToMemoryPool() : coinbase as individual tx\");\n+        return DoS(100, error(\"AcceptToMemoryPool() : coinbase as individual tx\"));\n \n     // To help v0.1.5 clients who would see it as a negative number\n     if ((int64)nLockTime > INT_MAX)\n@@ -363,7 +363,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n     // 34 bytes because a TxOut is:\n     //   20-byte address + 8 byte bitcoin amount + 5 bytes of ops + 1 byte script length\n     if (GetSigOpCount() > nSize / 34 || nSize < 100)\n-        return error(\"AcceptToMemoryPool() : nonstandard transaction\");\n+        return DoS(10, error(\"AcceptToMemoryPool() : transaction with out-of-bounds SigOpCount\"));\n \n     // Rather not work on nonstandard transactions (unless -testnet)\n     if (!fTestNet && !IsStandard())\n@@ -848,26 +848,28 @@ bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoo\n             }\n \n             if (prevout.n >= txPrev.vout.size() || prevout.n >= txindex.vSpent.size())\n-                return error(\"ConnectInputs() : %s prevout.n out of range %d %d %d prev tx %s\\n%s\", GetHash().ToString().substr(0,10).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size(), prevout.hash.ToString().substr(0,10).c_str(), txPrev.ToString().c_str());\n+                return DoS(100, error(\"ConnectInputs() : %s prevout.n out of range %d %d %d prev tx %s\\n%s\", GetHash().ToString().substr(0,10).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size(), prevout.hash.ToString().substr(0,10).c_str(), txPrev.ToString().c_str()));\n \n             // If prev is coinbase, check that it's matured\n             if (txPrev.IsCoinBase())\n                 for (CBlockIndex* pindex = pindexBlock; pindex && pindexBlock->nHeight - pindex->nHeight < COINBASE_MATURITY; pindex = pindex->pprev)\n                     if (pindex->nBlockPos == txindex.pos.nBlockPos && pindex->nFile == txindex.pos.nFile)\n-                        return error(\"ConnectInputs() : tried to spend coinbase at depth %d\", pindexBlock->nHeight - pindex->nHeight);\n+                        return DoS(10, error(\"ConnectInputs() : tried to spend coinbase at depth %d\", pindexBlock->nHeight - pindex->nHeight));\n \n             // Verify signature\n             if (!VerifySignature(txPrev, *this, i))\n-                return error(\"ConnectInputs() : %s VerifySignature failed\", GetHash().ToString().substr(0,10).c_str());\n+                return DoS(100,error(\"ConnectInputs() : %s VerifySignature failed\", GetHash().ToString().substr(0,10).c_str()));\n \n-            // Check for conflicts\n+            // Check for conflicts (double-spend)\n+            // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n+            // for an attacker to attempt to split the network.\n             if (!txindex.vSpent[prevout.n].IsNull())\n                 return fMiner ? false : error(\"ConnectInputs() : %s prev tx already used at %s\", GetHash().ToString().substr(0,10).c_str(), txindex.vSpent[prevout.n].ToString().c_str());\n \n             // Check for negative or overflow input values\n             nValueIn += txPrev.vout[prevout.n].nValue;\n             if (!MoneyRange(txPrev.vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return error(\"ConnectInputs() : txin values out of range\");\n+                return DoS(100, error(\"ConnectInputs() : txin values out of range\"));\n \n             // Mark outpoints as spent\n             txindex.vSpent[prevout.n] = posThisTx;\n@@ -880,17 +882,17 @@ bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoo\n         }\n \n         if (nValueIn < GetValueOut())\n-            return error(\"ConnectInputs() : %s value in < value out\", GetHash().ToString().substr(0,10).c_str());\n+            return DoS(100, error(\"ConnectInputs() : %s value in < value out\", GetHash().ToString().substr(0,10).c_str()));\n \n         // Tally transaction fees\n         int64 nTxFee = nValueIn - GetValueOut();\n         if (nTxFee < 0)\n-            return error(\"ConnectInputs() : %s nTxFee < 0\", GetHash().ToString().substr(0,10).c_str());\n+            return DoS(100, error(\"ConnectInputs() : %s nTxFee < 0\", GetHash().ToString().substr(0,10).c_str()));\n         if (nTxFee < nMinFee)\n             return false;\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return error(\"ConnectInputs() : nFees out of range\");\n+            return DoS(100, error(\"ConnectInputs() : nFees out of range\"));\n     }\n \n     if (fBlock)\n@@ -1233,35 +1235,35 @@ bool CBlock::CheckBlock() const\n \n     // Size limits\n     if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK) > MAX_BLOCK_SIZE)\n-        return error(\"CheckBlock() : size limits failed\");\n+        return DoS(100, error(\"CheckBlock() : size limits failed\"));\n \n     // Check proof of work matches claimed amount\n     if (!CheckProofOfWork(GetHash(), nBits))\n-        return error(\"CheckBlock() : proof of work failed\");\n+        return DoS(50, error(\"CheckBlock() : proof of work failed\"));\n \n     // Check timestamp\n     if (GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n         return error(\"CheckBlock() : block timestamp too far in the future\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (vtx.empty() || !vtx[0].IsCoinBase())\n-        return error(\"CheckBlock() : first tx is not coinbase\");\n+        return DoS(100, error(\"CheckBlock() : first tx is not coinbase\"));\n     for (int i = 1; i < vtx.size(); i++)\n         if (vtx[i].IsCoinBase())\n-            return error(\"CheckBlock() : more than one coinbase\");\n+            return DoS(100, error(\"CheckBlock() : more than one coinbase\"));\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n         if (!tx.CheckTransaction())\n-            return error(\"CheckBlock() : CheckTransaction failed\");\n+            return DoS(tx.nDoS, error(\"CheckBlock() : CheckTransaction failed\"));\n \n     // Check that it's not full of nonstandard transactions\n     if (GetSigOpCount() > MAX_BLOCK_SIGOPS)\n-        return error(\"CheckBlock() : too many nonstandard transactions\");\n+        return DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));\n \n     // Check merkleroot\n     if (hashMerkleRoot != BuildMerkleTree())\n-        return error(\"CheckBlock() : hashMerkleRoot mismatch\");\n+        return DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"));\n \n     return true;\n }\n@@ -1276,13 +1278,13 @@ bool CBlock::AcceptBlock()\n     // Get prev block index\n     map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return error(\"AcceptBlock() : prev block not found\");\n+        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n     if (nBits != GetNextWorkRequired(pindexPrev))\n-        return error(\"AcceptBlock() : incorrect proof of work\");\n+        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n     if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n@@ -1291,7 +1293,7 @@ bool CBlock::AcceptBlock()\n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n         if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return error(\"AcceptBlock() : contains a non-final transaction\");\n+            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!fTestNet)\n@@ -1304,7 +1306,7 @@ bool CBlock::AcceptBlock()\n             (nHeight == 118000 && hash != uint256(\"0x000000000000774a7f8a7a12dc906ddb9e17e75d684f15e00f8767f9e8f36553\")) ||\n             (nHeight == 134444 && hash != uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\")) ||\n             (nHeight == 140700 && hash != uint256(\"0x000000000000033b512028abb90e1626d8b346fd0ed598ac0a3c371138dce2bd\")))\n-            return error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight);\n+            return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n     if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK)))\n@@ -2126,6 +2128,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             printf(\"storing orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n             AddOrphanTx(vMsg);\n         }\n+        if (tx.nDoS) pfrom->Misbehaving(tx.nDoS);\n     }\n \n \n@@ -2142,6 +2145,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         if (ProcessBlock(pfrom, &block))\n             mapAlreadyAskedFor.erase(inv);\n+        if (block.nDoS) pfrom->Misbehaving(block.nDoS);\n     }\n \n "
      },
      {
        "sha": "3e1371abbd7fcec403b2491a1a374ffb573074d1",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e52aaf2121d597ab1ed012b65e37f9cb5f2754e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e52aaf2121d597ab1ed012b65e37f9cb5f2754e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3e52aaf2121d597ab1ed012b65e37f9cb5f2754e",
        "patch": "@@ -399,6 +399,9 @@ class CTransaction\n     std::vector<CTxOut> vout;\n     unsigned int nLockTime;\n \n+    // Denial-of-service detection:\n+    mutable int nDoS;\n+    bool DoS(int nDoSIn, bool fIn) const { nDoS += nDoSIn; return fIn; }\n \n     CTransaction()\n     {\n@@ -420,6 +423,7 @@ class CTransaction\n         vin.clear();\n         vout.clear();\n         nLockTime = 0;\n+        nDoS = 0;  // Denial-of-service prevention\n     }\n \n     bool IsNull() const\n@@ -786,6 +790,9 @@ class CBlock\n     // memory only\n     mutable std::vector<uint256> vMerkleTree;\n \n+    // Denial-of-service detection:\n+    mutable int nDoS;\n+    bool DoS(int nDoSIn, bool fIn) const { nDoS += nDoSIn; return fIn; }\n \n     CBlock()\n     {\n@@ -819,6 +826,7 @@ class CBlock\n         nNonce = 0;\n         vtx.clear();\n         vMerkleTree.clear();\n+        nDoS = 0;\n     }\n \n     bool IsNull() const"
      }
    ]
  },
  {
    "sha": "806704c237890527ca2a7bab4c97550431eebea0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDY3MDRjMjM3ODkwNTI3Y2EyYTdiYWI0Yzk3NTUwNDMxZWViZWEw",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-09-06T21:41:51Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-09-21T16:50:13Z"
      },
      "message": "More denial-of-service misbehavior detection: version/addr/inv/getdata messages",
      "tree": {
        "sha": "d16b637148c08ef3ebeb11b75358a6ca54aa444f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d16b637148c08ef3ebeb11b75358a6ca54aa444f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/806704c237890527ca2a7bab4c97550431eebea0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806704c237890527ca2a7bab4c97550431eebea0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/806704c237890527ca2a7bab4c97550431eebea0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806704c237890527ca2a7bab4c97550431eebea0/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e52aaf2121d597ab1ed012b65e37f9cb5f2754e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e52aaf2121d597ab1ed012b65e37f9cb5f2754e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e52aaf2121d597ab1ed012b65e37f9cb5f2754e"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ac912f9b53cfa4734823f1fd4dd2b91922122b1f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/806704c237890527ca2a7bab4c97550431eebea0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/806704c237890527ca2a7bab4c97550431eebea0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=806704c237890527ca2a7bab4c97550431eebea0",
        "patch": "@@ -1764,7 +1764,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n+        {\n+            pfrom->Misbehaving(1);\n             return false;\n+        }\n \n         int64 nTime;\n         CAddress addrMe;\n@@ -1848,6 +1851,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     else if (pfrom->nVersion == 0)\n     {\n         // Must have a version message before anything else\n+        pfrom->Misbehaving(1);\n         return false;\n     }\n \n@@ -1869,7 +1873,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (pfrom->nVersion < 31402 && mapAddresses.size() > 1000)\n             return true;\n         if (vAddr.size() > 1000)\n+        {\n+            pfrom->Misbehaving(20);\n             return error(\"message addr size() = %d\", vAddr.size());\n+        }\n \n         // Store the new addresses\n         CAddrDB addrDB;\n@@ -1927,7 +1934,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > 50000)\n+        {\n+            pfrom->Misbehaving(20);\n             return error(\"message inv size() = %d\", vInv.size());\n+        }\n \n         CTxDB txdb(\"r\");\n         BOOST_FOREACH(const CInv& inv, vInv)\n@@ -1956,7 +1966,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > 50000)\n+        {\n+            pfrom->Misbehaving(20);\n             return error(\"message getdata size() = %d\", vInv.size());\n+        }\n \n         BOOST_FOREACH(const CInv& inv, vInv)\n         {"
      }
    ]
  }
]