petertodd,2015-07-18T18:04:28Z,"Kinda inclined to NACK the floating relay fee idea here. (though everything else looks fine)\n\nWith the mempool limited in size, the minimum relay fee loses the purpose of protecting nodes from running out of RAM - that I'm sure we can agree on!\n\nFor miners, it still has the (sort of accidental) purpose of ensuring they don't fill up their blocks with useless txs that cost them more to mine in ",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122572058,122572058,
sipa,2015-07-18T18:34:44Z,"I'll try to explain the reasoning behind it.\n\n1) The mempool limitation uses a rule that the new, replacing transaction should pay for the relay of both the replaced transaction and the new transaction. That means that if we previously accepted low-fee transactions into the mempool (perhaps because a block was just mined, and there is now space), we've now made it unnecessarily expensive for new",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122576820,122576820,
sipa,2015-07-18T18:48:00Z,"I do understand the worry about mempools becoming filled with high-fee but unconfirming transactions, leading to (ever) increasing fees until the mempool clears. I've thought about using fees actually in the mempool, or time-based experation. Perhaps a rule that the relay fee in case of ""high water"" mempool (above the aimed size) cannot go above the lowest feerate actually in the mempool.\n\nIn pr",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122580009,122580009,
jgarzik,2015-07-18T21:41:37Z,"mempools are guaranteed not to fill with unconfirming transactions if you use an accurate sampling method: time-based expiration + blocks naturally confirming and clearing out transactions.\n\nAll other methods - this PR, abs size limit, floating relay fee - must be treated as inaccurate fallbacks for situations such as transaction bursts when time-based expiration fails to cap the mempool at an a",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122598669,122598669,
sipa,2015-07-19T00:03:19Z,"Added default-48h expiry to the mempool; thanks to @ashleyholman's indexed mempool this is trivial.\n\nI was previously of the opinion that expiration doesn't really help as rebroadcast (by anyone can always override it), but in combination with floating relay fee I think it makes sense as extra protection against divergent behaviour.\n",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122607639,122607639,
dgenr8,2015-07-19T21:06:58Z,"The floating fee is node-specific, which could lead to lumpy minimum fees across the network.  When some nodes raise their minimum, other nodes will see reduced traffic without having had to raise theirs.\n\nRather than just integrating with fee estimation, I wonder if fee estimation could be improved to where it serves as the dynamic fee rate mechanism.  The advantage is that it's based on the gl",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122707156,122707156,
sipa,2015-07-19T22:08:56Z,"It is true that this results in dynamic effectice relay fees across the\nnetwork, however that is inevitable with a limited memory pool linked to\nrelay.\n\nThe purpose of the floating relay is to dampen the effect of that limit,\nand make it more constant over time.\n",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122710335,122710335,
dgenr8,2015-07-19T23:08:05Z,"For the goal of maximizing fees, filling the mempool by **fee rate** is a heuristic.  Truly maximizing fees would require filling by absolute fee, subject to the size constraint, continually re-solving a **knapsack problem**.\n\nIn particular, the feerate heuristic is unkind to an efficient large-size transaction if its feerate is slightly lower than another smaller-sized transaction, and there is",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122716041,122716041,
petertodd,2015-07-19T23:19:17Z,"@sipa \n\n> 1) The mempool limitation uses a rule that the new, replacing transaction should pay for the relay of both the replaced transaction and the new transaction. That means that if we previously accepted low-fee transactions into the mempool (perhaps because a block was just mined, and there is now space), we've now made it unnecessarily expensive for new transactions to get in.\n> \n> 2) T",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122716680,122716680,
sipa,2015-07-19T23:22:38Z,"As Peter Todd noted, if relay behaviour and miner behaviour are allowed to\ndiverge, there is no real need anymore to keep a mempool at all, if a\nsolution is found to deal with dependent transactions (for example,\nrelaying by package of dependent transactions).\n\nThe strategy here is trying to maintain a solution that applies to both\nrelaying and mining, trying to optimize for what is most eco",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122716820,122716820,
petertodd,2015-07-19T23:30:40Z,"@dgenr8 Relaying transactions that miners aren't interested in mining is pointless and just wastes bandwidth; go too far with that philosophy and large miners will start creating alternate tx submission mechanisms, which is harmful to decentralization.\n\nRe: the knapsack problem, so long as the mempool is much larger than the blocksize limit and we have a maximum transaction size well under the b",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122717577,122717577,
dgenr8,2015-07-20T00:46:58Z,"@sipa @petertodd It sounds like you don't think fee estimation works?\n\nExperience with min relay fee, non-validating mining, blacklists, RBF, and other examples show that miners will always want to diverge from relay policy.\n\nThere's no point in worrying about miners creating submission mechanisms.  If it's a major worry though, creating a private miner relay network was an odd thing to do (bu",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122723010,122723010,
ABISprotocol,2015-07-20T03:39:10Z,"@petertodd Earlier you suggested a ""size limit on them, e.g. no single set of unconfirmed txs should be more than 125KB in size, and contain more than 100 txs,"" What is the rationale for that particular proposed limit in kB size?  It seemed arbitrary and static rather than dynamic or heuristic.\n\nI do note that you stated, ""With a floating relay fee the attacker could succeed in increasing the mi",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122749234,122749234,
petertodd,2015-07-20T13:35:28Z,"@dgenr8 If private tx submission mechanisms to miners are a significant method of getting txs to them, that places small miners at a serious disadvantage.\n\n@ABISprotocol Your discussion is mostly off-topic for this pull-req; please take it to the dev list; ""how the UTXO set is stored"" has pretty much nothing to do with the mempool; general purpose messaging is not what this pull-req is about. Ab",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-122886149,122886149,
dgenr8,2015-07-20T23:12:31Z,"A general way to find transactions to be evicted (from discussion with @sipa @morcos @petertodd):\n- In the mempool entry, include the total size and total fees of all of the tx's ancestors.  The values used in the fee rate index are these sums, with the size and fee values of the tx itself added in.\n- In CompareTxMemPoolEntryByFeeRate, use 2 tiebreakers.  After feerate, 1st tiebreaker is size, 2",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-123085013,123085013,
dgenr8,2015-07-21T14:19:44Z,"Turning off CPFP in the above scheme is a matter of simply NOT skipping parents in the third step above.  Instead, add the descendants into the eviction set.  This could make sense for relay nodes, until most miners support CPFP.\n",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-123330354,123330354,
morcos,2015-07-22T02:50:11Z,@sipa @petertodd OK I think we're making some progress.\n\nPlease take a look at https://github.com/morcos/bitcoin/tree/softcap.\nIt builds off of this pull with two commits.  The first commit is this notion of being able to accept a transaction into the reserve space between the soft cap and hard cap if it pays a multiple of the relay rate.  I've been measuring the reject rate of all transactions,https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-123543826,123543826,
sipa,2015-07-22T12:07:16Z,"@Alex what if you cut out the floating fees, and just have a\nsoftcap/hardcap, but no target even below it?\n",https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-123696341,123696341,
sipa,2015-07-27T16:28:58Z,Superceded by #6470.\n,https://github.com/bitcoin/bitcoin/pull/6455#issuecomment-125264773,125264773,
jtimon,2015-07-21T14:31:39Z,"Why not just move these things to StageTrimToSize to save the nFeesDeleted variable?\nFrom looking at some of @morcos work, it seems these checks can use more information from there later. \n",https://github.com/bitcoin/bitcoin/pull/6455#discussion_r35108209,35108209,src/main.cpp
jtimon,2015-07-21T14:31:55Z,nit s/mempool/pool\n,https://github.com/bitcoin/bitcoin/pull/6455#discussion_r35108238,35108238,src/main.cpp
jtimon,2015-07-21T14:39:05Z,"This loop is similar to the one in https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L785\nIt would be nice to take that one here too, not only to DRY, but also because it's what alternatives to the first seen policy have needed for long. I bet petertodd's RBF release could get much simpler if we had done an equivalent movement before 0.11 (or before 0.10 when @luke-jr proposed it).\n",https://github.com/bitcoin/bitcoin/pull/6455#discussion_r35109198,35109198,src/txmempool.cpp
sipa,2015-07-21T14:50:48Z,"I'm aware it is similar, but I chose to reimplement it to be more efficient\nin this case (eviction needs to be fast, so we can try multiple\ncombinations).\n\nI'm planning on refactoring some of the code to reuse a common way of\niterating all dependencies of a transaction, but I'd prefer to wait with\nthat until the approach and necessary code paths are clear.\n",https://github.com/bitcoin/bitcoin/pull/6455#discussion_r35110771,35110771,src/txmempool.cpp
jtimon,2015-07-24T01:48:11Z,"Ok, that sounds good.\nBut wouldn't it be nice to have both similar loops close to each other by moving the other one here already?\nBoth things are about replacements. This shouldn't make the later refactor harder. All I'm asking is putting some commits before others.\n",https://github.com/bitcoin/bitcoin/pull/6455#discussion_r35389933,35389933,src/txmempool.cpp
