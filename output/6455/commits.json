[
  {
    "sha": "cfaef8a5ccd67f7e6c94ccf304352916c48f5689",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmFlZjhhNWNjZDY3ZjdlNmM5NGNjZjMwNDM1MjkxNmM0OGY1Njg5",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-07-17T10:42:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-18T22:24:52Z"
      },
      "message": "Add uint256 support to CRollingBloomFilter",
      "tree": {
        "sha": "b3ae8d0536369b863ffc6142ca461721e639b870",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3ae8d0536369b863ffc6142ca461721e639b870"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfaef8a5ccd67f7e6c94ccf304352916c48f5689",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfaef8a5ccd67f7e6c94ccf304352916c48f5689",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfaef8a5ccd67f7e6c94ccf304352916c48f5689",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfaef8a5ccd67f7e6c94ccf304352916c48f5689/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e15bc32f974ba98f07c332eb64397c0dd11c3ba7",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfaef8a5ccd67f7e6c94ccf304352916c48f5689/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfaef8a5ccd67f7e6c94ccf304352916c48f5689/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=cfaef8a5ccd67f7e6c94ccf304352916c48f5689",
        "patch": "@@ -234,6 +234,20 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n     }\n }\n \n+void CRollingBloomFilter::insert(const uint256& hash)\n+{\n+    if (nInsertions == 0) {\n+        b1.clear();\n+    } else if (nInsertions == nBloomSize / 2) {\n+        b2.clear();\n+    }\n+    b1.insert(hash);\n+    b2.insert(hash);\n+    if (++nInsertions == nBloomSize) {\n+        nInsertions = 0;\n+    }\n+}\n+\n bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n     if (nInsertions < nBloomSize / 2) {\n@@ -242,6 +256,14 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n     return b1.contains(vKey);\n }\n \n+bool CRollingBloomFilter::contains(const uint256& hash) const\n+{\n+    if (nInsertions < nBloomSize / 2) {\n+        return b2.contains(hash);\n+    }\n+    return b1.contains(hash);\n+}\n+\n void CRollingBloomFilter::clear()\n {\n     b1.clear();"
      },
      {
        "sha": "0daa3728ed0e4183a0bb6e850a3fff14a428c6ec",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfaef8a5ccd67f7e6c94ccf304352916c48f5689/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfaef8a5ccd67f7e6c94ccf304352916c48f5689/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=cfaef8a5ccd67f7e6c94ccf304352916c48f5689",
        "patch": "@@ -114,7 +114,9 @@ class CRollingBloomFilter\n     CRollingBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak);\n \n     void insert(const std::vector<unsigned char>& vKey);\n+    void insert(const uint256& hash);\n     bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(const uint256& hash) const;\n \n     void clear();\n "
      }
    ]
  },
  {
    "sha": "bec54c1e526b68f2595ec3ddf44ef37983d89564",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWM1NGMxZTUyNmI2OGYyNTk1ZWMzZGRmNDRlZjM3OTgzZDg5NTY0",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-07-17T10:46:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-18T22:24:52Z"
      },
      "message": "Keep track of recently rejected transactions\n\nNodes can have divergent policies on which transactions they will accept\nand relay.  This can cause you to repeatedly request and reject the same\ntx after its inved to you from various peers which have accepted it.\nHere we add rolling bloom filter to keep track of such rejections,\nclearing the filter every time the chain tip changes.\n\nCredit goes to Alex Morcos, who created the patch that this code is\nbased on.",
      "tree": {
        "sha": "090a64adb2399b11da1e05df88b7d4054032eaa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/090a64adb2399b11da1e05df88b7d4054032eaa7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bec54c1e526b68f2595ec3ddf44ef37983d89564",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bec54c1e526b68f2595ec3ddf44ef37983d89564",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bec54c1e526b68f2595ec3ddf44ef37983d89564",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bec54c1e526b68f2595ec3ddf44ef37983d89564/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfaef8a5ccd67f7e6c94ccf304352916c48f5689",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfaef8a5ccd67f7e6c94ccf304352916c48f5689",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfaef8a5ccd67f7e6c94ccf304352916c48f5689"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 51,
      "deletions": 9
    },
    "files": [
      {
        "sha": "37ba79ebcb73bdde6f519277374f58dd01fccfca",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 9,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bec54c1e526b68f2595ec3ddf44ef37983d89564/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bec54c1e526b68f2595ec3ddf44ef37983d89564/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bec54c1e526b68f2595ec3ddf44ef37983d89564",
        "patch": "@@ -154,6 +154,29 @@ namespace {\n      */\n     map<uint256, NodeId> mapBlockSource;\n \n+    /**\n+     * Filter for transactions that were recently rejected by\n+     * AcceptToMemoryPool. These are not rerequested until the chain tip\n+     * changes, at which point the entire filter is cleared. Protected by\n+     * cs_main.\n+     *\n+     * Without this filter we'd be re-requesting txs from each of our peers,\n+     * increasing bandwidth consumption considerably. For instance, with 100\n+     * peers, half of which relay a tx we don't accept, that might be a 50x\n+     * bandwidth increase. A flooding attacker attempting to roll-over the\n+     * filter using minimum-sized, 60byte, transactions might manage to send\n+     * 1000/sec if we have fast peers, so we pick 120,000 to give our peers a\n+     * two minute window to send invs to us.\n+     *\n+     * Decreasing the false positive rate is fairly cheap, so we pick one in a\n+     * million to make it highly unlikely for users to have issues with this\n+     * filter.\n+     *\n+     * Memory used: 1.7MB\n+     */\n+    CRollingBloomFilter recentRejects(120000, 0.000001, GetRand(std::numeric_limits<unsigned int>::max()));\n+    uint256 hashRecentRejectsChainTip;\n+\n     /** Blocks that are in flight, and that are in the queue to be downloaded. Protected by cs_main. */\n     struct QueuedBlock {\n         uint256 hash;\n@@ -3656,10 +3679,20 @@ bool static AlreadyHave(const CInv& inv)\n     {\n     case MSG_TX:\n         {\n-            bool txInMap = false;\n-            txInMap = mempool.exists(inv.hash);\n-            return txInMap || mapOrphanTransactions.count(inv.hash) ||\n-                pcoinsTip->HaveCoins(inv.hash);\n+            if (chainActive.Tip()->GetBlockHash() != hashRecentRejectsChainTip)\n+            {\n+                // If the chain tip has changed previously rejected transactions\n+                // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+                // or a double-spend. Clear the rejects table and give those txs a\n+                // second chance.\n+                hashRecentRejectsChainTip = chainActive.Tip()->GetBlockHash();\n+                recentRejects.clear();\n+            }\n+\n+            return recentRejects.contains(inv.hash) ||\n+                   mempool.exists(inv.hash) ||\n+                   mapOrphanTransactions.count(inv.hash) ||\n+                   pcoinsTip->HaveCoins(inv.hash);\n         }\n     case MSG_BLOCK:\n         return mapBlockIndex.count(inv.hash);\n@@ -4259,6 +4292,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Probably non-standard or insufficient fee/priority\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n+                        recentRejects.insert(orphanHash);\n                     }\n                     mempool.check(pcoinsTip);\n                 }\n@@ -4276,11 +4310,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        } else if (pfrom->fWhitelisted) {\n-            // Always relay transactions received from whitelisted peers, even\n-            // if they are already in the mempool (allowing the node to function\n-            // as a gateway for nodes hidden behind it).\n-            RelayTransaction(tx);\n+        } else {\n+            // AcceptToMemoryPool() returned false, possibly because the tx is\n+            // already in the mempool; if the tx isn't in the mempool that\n+            // means it was rejected and we shouldn't ask for it again.\n+            if (!mempool.exists(tx.GetHash())) {\n+                recentRejects.insert(tx.GetHash());\n+            }\n+            else if (pfrom->fWhitelisted) {\n+                // Always relay transactions received from whitelisted peers, even\n+                // if they are already in the mempool (allowing the node to function\n+                // as a gateway for nodes hidden behind it).\n+                RelayTransaction(tx);\n+            }\n         }\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))"
      }
    ]
  },
  {
    "sha": "51e1cd412f62feef59152e6d1a27da762590b35c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWUxY2Q0MTJmNjJmZWVmNTkxNTJlNmQxYTI3ZGE3NjI1OTBiMzVj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-17T17:46:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-18T22:24:52Z"
      },
      "message": "Separate core memory usage computation in core_memusage.h",
      "tree": {
        "sha": "676605fe6870d9616bf343121976a55fb7981975",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/676605fe6870d9616bf343121976a55fb7981975"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51e1cd412f62feef59152e6d1a27da762590b35c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51e1cd412f62feef59152e6d1a27da762590b35c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51e1cd412f62feef59152e6d1a27da762590b35c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51e1cd412f62feef59152e6d1a27da762590b35c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bec54c1e526b68f2595ec3ddf44ef37983d89564",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bec54c1e526b68f2595ec3ddf44ef37983d89564",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bec54c1e526b68f2595ec3ddf44ef37983d89564"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 76,
      "deletions": 99
    },
    "files": [
      {
        "sha": "cc8dded413361c7a81c7bee8ea0cfe34d32ab4db",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e1cd412f62feef59152e6d1a27da762590b35c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e1cd412f62feef59152e6d1a27da762590b35c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=51e1cd412f62feef59152e6d1a27da762590b35c",
        "patch": "@@ -94,6 +94,7 @@ BITCOIN_CORE_H = \\\n   consensus/params.h \\\n   consensus/validation.h \\\n   core_io.h \\\n+  core_memusage.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n   hash.h \\"
      },
      {
        "sha": "f02949de53528d0ab03c9853d081c4b0b431bade",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e1cd412f62feef59152e6d1a27da762590b35c/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e1cd412f62feef59152e6d1a27da762590b35c/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=51e1cd412f62feef59152e6d1a27da762590b35c",
        "patch": "@@ -83,7 +83,7 @@ CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n-    cachedCoinsUsage += memusage::DynamicUsage(ret->second.coins);\n+    cachedCoinsUsage += ret->second.coins.DynamicMemoryUsage();\n     return ret;\n }\n \n@@ -110,7 +110,7 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n             ret.first->second.flags = CCoinsCacheEntry::FRESH;\n         }\n     } else {\n-        cachedCoinUsage = memusage::DynamicUsage(ret.first->second.coins);\n+        cachedCoinUsage = ret.first->second.coins.DynamicMemoryUsage();\n     }\n     // Assume that whenever ModifyCoins is called, the entry will be modified.\n     ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n@@ -159,21 +159,21 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                     assert(it->second.flags & CCoinsCacheEntry::FRESH);\n                     CCoinsCacheEntry& entry = cacheCoins[it->first];\n                     entry.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += memusage::DynamicUsage(entry.coins);\n+                    cachedCoinsUsage += entry.coins.DynamicMemoryUsage();\n                     entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n                 }\n             } else {\n                 if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n                     // The grandparent does not have an entry, and the child is\n                     // modified and being pruned. This means we can just delete\n                     // it from the parent.\n-                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n                     cacheCoins.erase(itUs);\n                 } else {\n                     // A normal modification.\n-                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n                     itUs->second.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage += itUs->second.coins.DynamicMemoryUsage();\n                     itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n                 }\n             }\n@@ -261,6 +261,6 @@ CCoinsModifier::~CCoinsModifier()\n         cache.cacheCoins.erase(it);\n     } else {\n         // If the coin still exists after the modification, add the new usage\n-        cache.cachedCoinsUsage += memusage::DynamicUsage(it->second.coins);\n+        cache.cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n     }\n }"
      },
      {
        "sha": "bf4a777b8a9022e9cbac6e4ed9c4452639019d85",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e1cd412f62feef59152e6d1a27da762590b35c/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e1cd412f62feef59152e6d1a27da762590b35c/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=51e1cd412f62feef59152e6d1a27da762590b35c",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_COINS_H\n \n #include \"compressor.h\"\n+#include \"core_memusage.h\"\n #include \"memusage.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -257,8 +258,7 @@ class CCoins\n     size_t DynamicMemoryUsage() const {\n         size_t ret = memusage::DynamicUsage(vout);\n         BOOST_FOREACH(const CTxOut &out, vout) {\n-            const std::vector<unsigned char> *script = &out.scriptPubKey;\n-            ret += memusage::DynamicUsage(*script);\n+            ret += RecursiveDynamicUsage(out.scriptPubKey);\n         }\n         return ret;\n     }"
      },
      {
        "sha": "139c7da1d1f7c9676a21378828d5da46d909f3de",
        "filename": "src/core_memusage.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e1cd412f62feef59152e6d1a27da762590b35c/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e1cd412f62feef59152e6d1a27da762590b35c/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=51e1cd412f62feef59152e6d1a27da762590b35c",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_MEMUSAGE_H\n+#define BITCOIN_CORE_MEMUSAGE_H\n+\n+#include \"primitives/transaction.h\"\n+#include \"primitives/block.h\"\n+#include \"memusage.h\"\n+\n+static inline size_t RecursiveDynamicUsage(const CScript& script) {\n+    return memusage::DynamicUsage(*static_cast<const std::vector<unsigned char>*>(&script));\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const COutPoint& out) {\n+    return 0;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxIn& in) {\n+    return RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n+    return RecursiveDynamicUsage(out.scriptPubKey);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CBlock& block) {\n+    size_t mem = memusage::DynamicUsage(block.vtx) + memusage::DynamicUsage(block.vMerkleTree);\n+    for (std::vector<CTransaction>::const_iterator it = block.vtx.begin(); it != block.vtx.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {\n+    return memusage::DynamicUsage(locator.vHave);\n+}\n+\n+#endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "be3964df1bf4121a47c998c8580e74ab39b07263",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 65,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e1cd412f62feef59152e6d1a27da762590b35c/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e1cd412f62feef59152e6d1a27da762590b35c/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=51e1cd412f62feef59152e6d1a27da762590b35c",
        "patch": "@@ -34,28 +34,14 @@ static inline size_t DynamicUsage(const float& v) { return 0; }\n static inline size_t DynamicUsage(const double& v) { return 0; }\n template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }\n template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }\n-template<typename X, typename Y> static inline size_t DynamicUsage(std::pair<X, Y> &p) { return 0; }\n \n /** Compute the memory used for dynamically allocated but owned data structures.\n  *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int> >)\n  *  will compute the memory used for the vector<int>'s, but not for the ints inside.\n  *  This is for efficiency reasons, as these functions are intended to be fast. If\n  *  application data structures require more accurate inner accounting, they should\n- *  use RecursiveDynamicUsage, iterate themselves, or use more efficient caching +\n- *  updating on modification.\n+ *  iterate themselves, or use more efficient caching + updating on modification.\n  */\n-template<typename X> static size_t DynamicUsage(const std::vector<X>& v);\n-template<typename X> static size_t DynamicUsage(const std::set<X>& s);\n-template<typename X, typename Y> static size_t DynamicUsage(const std::map<X, Y>& m);\n-template<typename X, typename Y> static size_t DynamicUsage(const boost::unordered_set<X, Y>& s);\n-template<typename X, typename Y, typename Z> static size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& s);\n-template<typename X> static size_t DynamicUsage(const X& x);\n-\n-template<typename X> static size_t RecursiveDynamicUsage(const std::vector<X>& v);\n-template<typename X> static size_t RecursiveDynamicUsage(const std::set<X>& v);\n-template<typename X, typename Y> static size_t RecursiveDynamicUsage(const std::map<X, Y>& v);\n-template<typename X, typename Y> static size_t RecursiveDynamicUsage(const std::pair<X, Y>& v);\n-template<typename X> static size_t RecursiveDynamicUsage(const X& v);\n \n static inline size_t MallocUsage(size_t alloc)\n {\n@@ -88,54 +74,18 @@ static inline size_t DynamicUsage(const std::vector<X>& v)\n     return MallocUsage(v.capacity() * sizeof(X));\n }\n \n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const std::vector<X>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    BOOST_FOREACH(const X& x, v) {\n-        usage += RecursiveDynamicUsage(x);\n-    }\n-    return usage;\n-}\n-\n template<typename X>\n static inline size_t DynamicUsage(const std::set<X>& s)\n {\n     return MallocUsage(sizeof(stl_tree_node<X>)) * s.size();\n }\n \n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const std::set<X>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    BOOST_FOREACH(const X& x, v) {\n-        usage += RecursiveDynamicUsage(x);\n-    }\n-    return usage;\n-}\n-\n template<typename X, typename Y>\n static inline size_t DynamicUsage(const std::map<X, Y>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >)) * m.size();\n }\n \n-template<typename X, typename Y>\n-static inline size_t RecursiveDynamicUsage(const std::map<X, Y>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    for (typename std::map<X, Y>::const_iterator it = v.begin(); it != v.end(); it++) {\n-        usage += RecursiveDynamicUsage(*it);\n-    }\n-    return usage;\n-}\n-\n-template<typename X, typename Y>\n-static inline size_t RecursiveDynamicUsage(const std::pair<X, Y>& v)\n-{\n-    return RecursiveDynamicUsage(v.first) + RecursiveDynamicUsage(v.second);\n-}\n-\n // Boost data structures\n \n template<typename X>\n@@ -157,20 +107,6 @@ static inline size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& m)\n     return MallocUsage(sizeof(boost_unordered_node<std::pair<const X, Y> >)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n }\n \n-// Dispatch to class method as fallback\n-\n-template<typename X>\n-static inline size_t DynamicUsage(const X& x)\n-{\n-    return x.DynamicMemoryUsage();\n-}\n-\n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const X& x)\n-{\n-    return DynamicUsage(x);\n-}\n-\n }\n \n #endif"
      },
      {
        "sha": "606dbea79857d2f4cc79b0136ad46486f3c187d9",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e1cd412f62feef59152e6d1a27da762590b35c/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e1cd412f62feef59152e6d1a27da762590b35c/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=51e1cd412f62feef59152e6d1a27da762590b35c",
        "patch": "@@ -72,11 +72,6 @@ void CTransaction::UpdateHash() const\n     *const_cast<uint256*>(&hash) = SerializeHash(*this);\n }\n \n-size_t CTransaction::DynamicMemoryUsage() const\n-{\n-    return memusage::RecursiveDynamicUsage(vin) + memusage::RecursiveDynamicUsage(vout);\n-}\n-\n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n \n CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {"
      },
      {
        "sha": "6cfd93a9a1891c6d19884b0096ffcb124d8c45ba",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e1cd412f62feef59152e6d1a27da762590b35c/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e1cd412f62feef59152e6d1a27da762590b35c/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=51e1cd412f62feef59152e6d1a27da762590b35c",
        "patch": "@@ -7,7 +7,6 @@\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n #include \"amount.h\"\n-#include \"memusage.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -49,8 +48,6 @@ class COutPoint\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return 0; }\n };\n \n /** An input of a transaction.  It contains the location of the previous\n@@ -99,8 +96,6 @@ class CTxIn\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return scriptSig.DynamicMemoryUsage(); }\n };\n \n /** An output of a transaction.  It contains the public key that the next input\n@@ -171,8 +166,6 @@ class CTxOut\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return scriptPubKey.DynamicMemoryUsage(); }\n };\n \n struct CMutableTransaction;\n@@ -256,8 +249,6 @@ class CTransaction\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const;\n };\n \n /** A mutable version of CTransaction. */"
      },
      {
        "sha": "fd33924732c3476c1639b5332b62c0382f1bc7b3",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e1cd412f62feef59152e6d1a27da762590b35c/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e1cd412f62feef59152e6d1a27da762590b35c/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=51e1cd412f62feef59152e6d1a27da762590b35c",
        "patch": "@@ -260,8 +260,3 @@ std::string CScript::ToString() const\n     }\n     return str;\n }\n-\n-size_t CScript::DynamicMemoryUsage() const\n-{\n-    return memusage::DynamicUsage(*(static_cast<const std::vector<unsigned char>*>(this)));\n-}"
      },
      {
        "sha": "e39ca57f4fbe94b5be929f722d5c19ec708906b2",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e1cd412f62feef59152e6d1a27da762590b35c/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e1cd412f62feef59152e6d1a27da762590b35c/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=51e1cd412f62feef59152e6d1a27da762590b35c",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_SCRIPT_SCRIPT_H\n #define BITCOIN_SCRIPT_SCRIPT_H\n \n-#include \"memusage.h\"\n #include \"crypto/common.h\"\n \n #include <assert.h>\n@@ -608,8 +607,6 @@ class CScript : public std::vector<unsigned char>\n         // The default std::vector::clear() does not release memory.\n         std::vector<unsigned char>().swap(*this);\n     }\n-\n-    size_t DynamicMemoryUsage() const;\n };\n \n class CReserveScript"
      },
      {
        "sha": "13d848311a037331269640ed2deaf06d1c0517b6",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e1cd412f62feef59152e6d1a27da762590b35c/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e1cd412f62feef59152e6d1a27da762590b35c/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=51e1cd412f62feef59152e6d1a27da762590b35c",
        "patch": "@@ -70,9 +70,9 @@ class CCoinsViewCacheTest : public CCoinsViewCache\n         // Manually recompute the dynamic usage of the whole data, and compare it.\n         size_t ret = memusage::DynamicUsage(cacheCoins);\n         for (CCoinsMap::iterator it = cacheCoins.begin(); it != cacheCoins.end(); it++) {\n-            ret += memusage::DynamicUsage(it->second.coins);\n+            ret += it->second.coins.DynamicMemoryUsage();\n         }\n-        BOOST_CHECK_EQUAL(memusage::DynamicUsage(*this), ret);\n+        BOOST_CHECK_EQUAL(DynamicMemoryUsage(), ret);\n     }\n \n };"
      },
      {
        "sha": "5bc06e50563dd931399299ac18f75664383fdfa0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e1cd412f62feef59152e6d1a27da762590b35c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e1cd412f62feef59152e6d1a27da762590b35c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=51e1cd412f62feef59152e6d1a27da762590b35c",
        "patch": "@@ -31,7 +31,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n-    nUsageSize = tx.DynamicMemoryUsage();\n+    nUsageSize = RecursiveDynamicUsage(tx);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)"
      }
    ]
  },
  {
    "sha": "605e2ec363aa468fbe778214356e1bfc667e87ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDVlMmVjMzYzYWE0NjhmYmU3NzgyMTQzNTZlMWJmYzY2N2U4N2Fl",
    "commit": {
      "author": {
        "name": "Ashley Holman",
        "email": "dscvlt@gmail.com",
        "date": "2015-06-24T08:32:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-18T23:52:30Z"
      },
      "message": "TxMemPool: Change mapTx to a boost::multi_index_container\n\nIndexes on:\n- Tx Hash\n- Fee Rate (fee-per-kb)",
      "tree": {
        "sha": "f8fe8fe8d469e073fee51a2926380e1960b081fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8fe8fe8d469e073fee51a2926380e1960b081fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/605e2ec363aa468fbe778214356e1bfc667e87ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605e2ec363aa468fbe778214356e1bfc667e87ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/605e2ec363aa468fbe778214356e1bfc667e87ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605e2ec363aa468fbe778214356e1bfc667e87ae/comments",
    "author": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51e1cd412f62feef59152e6d1a27da762590b35c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51e1cd412f62feef59152e6d1a27da762590b35c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51e1cd412f62feef59152e6d1a27da762590b35c"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 128,
      "deletions": 32
    },
    "files": [
      {
        "sha": "49100b9ddb1b3871ad743e470617e9943fe85286",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/605e2ec363aa468fbe778214356e1bfc667e87ae/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/605e2ec363aa468fbe778214356e1bfc667e87ae/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=605e2ec363aa468fbe778214356e1bfc667e87ae",
        "patch": "@@ -16,6 +16,7 @@\n #include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"timedata.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"validationinterface.h\"\n@@ -148,10 +149,10 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         // This vector will be sorted into a priority queue:\n         vector<TxPriority> vecPriority;\n         vecPriority.reserve(mempool.mapTx.size());\n-        for (map<uint256, CTxMemPoolEntry>::iterator mi = mempool.mapTx.begin();\n+        for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n              mi != mempool.mapTx.end(); ++mi)\n         {\n-            const CTransaction& tx = mi->second.GetTx();\n+            const CTransaction& tx = mi->GetTx();\n             if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, pblock->nTime))\n                 continue;\n \n@@ -186,7 +187,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                     }\n                     mapDependers[txin.prevout.hash].push_back(porphan);\n                     porphan->setDependsOn.insert(txin.prevout.hash);\n-                    nTotalIn += mempool.mapTx[txin.prevout.hash].GetTx().vout[txin.prevout.n].nValue;\n+                    nTotalIn += mempool.mapTx.find(txin.prevout.hash)->GetTx().vout[txin.prevout.n].nValue;\n                     continue;\n                 }\n                 const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n@@ -216,7 +217,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 porphan->feeRate = feeRate;\n             }\n             else\n-                vecPriority.push_back(TxPriority(dPriority, feeRate, &mi->second.GetTx()));\n+                vecPriority.push_back(TxPriority(dPriority, feeRate, &(mi->GetTx())));\n         }\n \n         // Collect transactions into block"
      },
      {
        "sha": "7e087a68d134434c8ecb261a622855c598ae87b9",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/605e2ec363aa468fbe778214356e1bfc667e87ae/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/605e2ec363aa468fbe778214356e1bfc667e87ae/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=605e2ec363aa468fbe778214356e1bfc667e87ae",
        "patch": "@@ -211,10 +211,9 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n     {\n         LOCK(mempool.cs);\n         UniValue o(UniValue::VOBJ);\n-        BOOST_FOREACH(const PAIRTYPE(uint256, CTxMemPoolEntry)& entry, mempool.mapTx)\n+        BOOST_FOREACH(const CTxMemPoolEntry& e, mempool.mapTx)\n         {\n-            const uint256& hash = entry.first;\n-            const CTxMemPoolEntry& e = entry.second;\n+            const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n             info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));"
      },
      {
        "sha": "85971f018f393ef23d4dd17b07c16c29b44c266e",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/605e2ec363aa468fbe778214356e1bfc667e87ae/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/605e2ec363aa468fbe778214356e1bfc667e87ae/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=605e2ec363aa468fbe778214356e1bfc667e87ae",
        "patch": "@@ -101,4 +101,56 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     removed.clear();\n }\n \n+BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n+{\n+    CTxMemPool pool(CFeeRate(0));\n+\n+    /* 3rd highest fee */\n+    CMutableTransaction tx1 = CMutableTransaction();\n+    tx1.vout.resize(1);\n+    tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+    tx1.vout[0].nValue = 10 * COIN;\n+    pool.addUnchecked(tx1.GetHash(), CTxMemPoolEntry(tx1, 10000LL, 0, 10.0, 1, true));\n+\n+    /* highest fee */\n+    CMutableTransaction tx2 = CMutableTransaction();\n+    tx2.vout.resize(1);\n+    tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+    tx2.vout[0].nValue = 2 * COIN;\n+    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 20000LL, 0, 9.0, 1, true));\n+\n+    /* lowest fee */\n+    CMutableTransaction tx3 = CMutableTransaction();\n+    tx3.vout.resize(1);\n+    tx3.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+    tx3.vout[0].nValue = 5 * COIN;\n+    pool.addUnchecked(tx3.GetHash(), CTxMemPoolEntry(tx3, 0LL, 0, 100.0, 1, true));\n+\n+    /* 2nd highest fee */\n+    CMutableTransaction tx4 = CMutableTransaction();\n+    tx4.vout.resize(1);\n+    tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+    tx4.vout[0].nValue = 6 * COIN;\n+    pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 15000LL, 0, 1.0, 1, true));\n+\n+    /* equal fee rate to tx1, but newer */\n+    CMutableTransaction tx5 = CMutableTransaction();\n+    tx5.vout.resize(1);\n+    tx5.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+    tx5.vout[0].nValue = 11 * COIN;\n+    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 10000LL, 1, 10.0, 1, true));\n+\n+    // there should be 4 transactions in the mempool\n+    BOOST_CHECK_EQUAL(pool.size(), 5);\n+\n+    // Check the fee-rate index is in order, should be tx2, tx4, tx1, tx5, tx3\n+    CTxMemPool::indexed_transaction_set::nth_index<1>::type::iterator it = pool.mapTx.get<1>().begin();\n+    BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx5.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n+    BOOST_CHECK(it == pool.mapTx.get<1>().end());\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "c5229970369f508e0fd521952d18d76556dcc4e8",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 24,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/605e2ec363aa468fbe778214356e1bfc667e87ae/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/605e2ec363aa468fbe778214356e1bfc667e87ae/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=605e2ec363aa468fbe778214356e1bfc667e87ae",
        "patch": "@@ -32,6 +32,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n     nUsageSize = RecursiveDynamicUsage(tx);\n+    feeRate = CFeeRate(nFee, nTxSize);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -96,8 +97,8 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     // Used by main.cpp AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n     LOCK(cs);\n-    mapTx[hash] = entry;\n-    const CTransaction& tx = mapTx[hash].GetTx();\n+    mapTx.insert(entry);\n+    const CTransaction& tx = mapTx.find(hash)->GetTx();\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n         mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);\n     nTransactionsUpdated++;\n@@ -134,7 +135,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n             txToRemove.pop_front();\n             if (!mapTx.count(hash))\n                 continue;\n-            const CTransaction& tx = mapTx[hash].GetTx();\n+            const CTransaction& tx = mapTx.find(hash)->GetTx();\n             if (fRecursive) {\n                 for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                     std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n@@ -147,8 +148,8 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n                 mapNextTx.erase(txin.prevout);\n \n             removed.push_back(tx);\n-            totalTxSize -= mapTx[hash].GetTxSize();\n-            cachedInnerUsage -= mapTx[hash].DynamicMemoryUsage();\n+            totalTxSize -= mapTx.find(hash)->GetTxSize();\n+            cachedInnerUsage -= mapTx.find(hash)->DynamicMemoryUsage();\n             mapTx.erase(hash);\n             nTransactionsUpdated++;\n             minerPolicyEstimator->removeTx(hash);\n@@ -161,10 +162,10 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n     // Remove transactions spending a coinbase which are now immature\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n-    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n-        const CTransaction& tx = it->second.GetTx();\n+    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+        const CTransaction& tx = it->GetTx();\n         BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-            std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end())\n                 continue;\n             const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n@@ -209,8 +210,10 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n         uint256 hash = tx.GetHash();\n-        if (mapTx.count(hash))\n-            entries.push_back(mapTx[hash]);\n+\n+        indexed_transaction_set::iterator i = mapTx.find(hash);\n+        if (i != mapTx.end())\n+            entries.push_back(*i);\n     }\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n@@ -247,17 +250,17 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n-    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n-        checkTotal += it->second.GetTxSize();\n-        innerUsage += it->second.DynamicMemoryUsage();\n-        const CTransaction& tx = it->second.GetTx();\n+        checkTotal += it->GetTxSize();\n+        innerUsage += it->DynamicMemoryUsage();\n+        const CTransaction& tx = it->GetTx();\n         bool fDependsWait = false;\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n-            std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n-                const CTransaction& tx2 = it2->second.GetTx();\n+                const CTransaction& tx2 = it2->GetTx();\n                 assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n                 fDependsWait = true;\n             } else {\n@@ -272,7 +275,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             i++;\n         }\n         if (fDependsWait)\n-            waitingOnDependants.push_back(&it->second);\n+            waitingOnDependants.push_back(&(*it));\n         else {\n             CValidationState state;\n             assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL));\n@@ -296,8 +299,8 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     }\n     for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n         uint256 hash = it->second.ptx->GetHash();\n-        map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(hash);\n-        const CTransaction& tx = it2->second.GetTx();\n+        indexed_transaction_set::const_iterator it2 = mapTx.find(hash);\n+        const CTransaction& tx = it2->GetTx();\n         assert(it2 != mapTx.end());\n         assert(&tx == it->second.ptx);\n         assert(tx.vin.size() > it->second.n);\n@@ -314,16 +317,16 @@ void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n \n     LOCK(cs);\n     vtxid.reserve(mapTx.size());\n-    for (map<uint256, CTxMemPoolEntry>::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n-        vtxid.push_back((*mi).first);\n+    for (indexed_transaction_set::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n+        vtxid.push_back(mi->GetTx().GetHash());\n }\n \n bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n {\n     LOCK(cs);\n-    map<uint256, CTxMemPoolEntry>::const_iterator i = mapTx.find(hash);\n+    indexed_transaction_set::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end()) return false;\n-    result = i->second.GetTx();\n+    result = i->GetTx();\n     return true;\n }\n \n@@ -429,5 +432,6 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 6 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 6 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n }"
      },
      {
        "sha": "6b6b05454a4eee3fd1dda5bc13993c5f3a2578bc",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 41,
        "deletions": 1,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/605e2ec363aa468fbe778214356e1bfc667e87ae/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/605e2ec363aa468fbe778214356e1bfc667e87ae/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=605e2ec363aa468fbe778214356e1bfc667e87ae",
        "patch": "@@ -13,6 +13,10 @@\n #include \"primitives/transaction.h\"\n #include \"sync.h\"\n \n+#undef foreach\n+#include \"boost/multi_index_container.hpp\"\n+#include \"boost/multi_index/ordered_index.hpp\"\n+\n class CAutoFile;\n \n inline double AllowFreeThreshold()\n@@ -41,6 +45,7 @@ class CTxMemPoolEntry\n     size_t nTxSize; //! ... and avoid recomputing tx size\n     size_t nModSize; //! ... and modified size for priority\n     size_t nUsageSize; //! ... and total memory usage\n+    CFeeRate feeRate; //! ... and fee per kB\n     int64_t nTime; //! Local time when entering the mempool\n     double dPriority; //! Priority when entering the mempool\n     unsigned int nHeight; //! Chain height when entering the mempool\n@@ -55,13 +60,35 @@ class CTxMemPoolEntry\n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n     CAmount GetFee() const { return nFee; }\n+    CFeeRate GetFeeRate() const { return feeRate; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n };\n \n+// extracts a TxMemPoolEntry's transaction hash\n+struct mempoolentry_txid\n+{\n+    typedef uint256 result_type;\n+    result_type operator() (const CTxMemPoolEntry &entry) const\n+    {\n+        return entry.GetTx().GetHash();\n+    }\n+};\n+\n+class CompareTxMemPoolEntryByFee\n+{\n+public:\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    {\n+        if (a.GetFeeRate() == b.GetFeeRate())\n+            return a.GetTime() < b.GetTime();\n+        return a.GetFeeRate() > b.GetFeeRate();\n+    }\n+};\n+\n class CBlockPolicyEstimator;\n \n /** An inpoint - a combination of a transaction and an index n into its vin */\n@@ -99,8 +126,21 @@ class CTxMemPool\n     uint64_t cachedInnerUsage; //! sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n public:\n+    typedef boost::multi_index_container<\n+        CTxMemPoolEntry,\n+        boost::multi_index::indexed_by<\n+            // sorted by txid\n+            boost::multi_index::ordered_unique<mempoolentry_txid>,\n+            // sorted by fee rate\n+            boost::multi_index::ordered_non_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByFee\n+            >\n+        >\n+    > indexed_transaction_set;\n+\n     mutable CCriticalSection cs;\n-    std::map<uint256, CTxMemPoolEntry> mapTx;\n+    indexed_transaction_set mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n     std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n "
      }
    ]
  },
  {
    "sha": "6b22e28fbb1d0819d73ca8f80f5f0670606972ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjIyZTI4ZmJiMWQwODE5ZDczY2E4ZjgwZjVmMDY3MDYwNjk3MmJh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2015-07-11T14:49:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-18T23:52:34Z"
      },
      "message": "Move orphan tx handling to a separate log class",
      "tree": {
        "sha": "9f4f02a8216c4aeae4302f3b854e499183802061",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f4f02a8216c4aeae4302f3b854e499183802061"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b22e28fbb1d0819d73ca8f80f5f0670606972ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b22e28fbb1d0819d73ca8f80f5f0670606972ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b22e28fbb1d0819d73ca8f80f5f0670606972ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b22e28fbb1d0819d73ca8f80f5f0670606972ba/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "605e2ec363aa468fbe778214356e1bfc667e87ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605e2ec363aa468fbe778214356e1bfc667e87ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/605e2ec363aa468fbe778214356e1bfc667e87ae"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "e20ec6c852a461f2ff4ed0ed951c0b825595f8dc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b22e28fbb1d0819d73ca8f80f5f0670606972ba/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b22e28fbb1d0819d73ca8f80f5f0670606972ba/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6b22e28fbb1d0819d73ca8f80f5f0670606972ba",
        "patch": "@@ -566,7 +566,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n     unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n     if (sz > 5000)\n     {\n-        LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        LogPrint(\"orphan\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n         return false;\n     }\n \n@@ -575,7 +575,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n \n-    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u prevsz %u)\\n\", hash.ToString(),\n+    LogPrint(\"orphan\", \"stored orphan tx %s (mapsz %u prevsz %u)\\n\", hash.ToString(),\n              mapOrphanTransactions.size(), mapOrphanTransactionsByPrev.size());\n     return true;\n }\n@@ -610,7 +610,7 @@ void EraseOrphansFor(NodeId peer)\n             ++nErased;\n         }\n     }\n-    if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer %d\\n\", nErased, peer);\n+    if (nErased > 0) LogPrint(\"orphan\", \"Erased %d orphan tx from peer %d\\n\", nErased, peer);\n }\n \n \n@@ -4273,7 +4273,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         continue;\n                     if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2))\n                     {\n-                        LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+                        LogPrint(\"orphan\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx);\n                         vWorkQueue.push_back(orphanHash);\n                         vEraseQueue.push_back(orphanHash);\n@@ -4286,11 +4286,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                             // Punish peer that gave us an invalid orphan tx\n                             Misbehaving(fromPeer, nDos);\n                             setMisbehaving.insert(fromPeer);\n-                            LogPrint(\"mempool\", \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n+                            LogPrint(\"orphan\", \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n                         }\n                         // Has inputs but not accepted to mempool\n                         // Probably non-standard or insufficient fee/priority\n-                        LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n+                        LogPrint(\"orphan\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n                         recentRejects.insert(orphanHash);\n                     }\n@@ -4309,7 +4309,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n             unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n             if (nEvicted > 0)\n-                LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n+                LogPrint(\"orphan\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n         } else {\n             // AcceptToMemoryPool() returned false, possibly because the tx is\n             // already in the mempool; if the tx isn't in the mempool that"
      }
    ]
  },
  {
    "sha": "64871cadd55a96d88edfcf6f9c9cd92a39604a61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDg3MWNhZGQ1NWE5NmQ4OGVkZmNmNmY5YzljZDkyYTM5NjA0YTYx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-10T21:52:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-18T23:53:34Z"
      },
      "message": "Implement on-the-fly mempool size limitation.",
      "tree": {
        "sha": "5a34ac1c57c57582d8da9cd36c4845a79a928efb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a34ac1c57c57582d8da9cd36c4845a79a928efb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64871cadd55a96d88edfcf6f9c9cd92a39604a61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64871cadd55a96d88edfcf6f9c9cd92a39604a61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64871cadd55a96d88edfcf6f9c9cd92a39604a61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64871cadd55a96d88edfcf6f9c9cd92a39604a61/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b22e28fbb1d0819d73ca8f80f5f0670606972ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b22e28fbb1d0819d73ca8f80f5f0670606972ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b22e28fbb1d0819d73ca8f80f5f0670606972ba"
      }
    ],
    "stats": {
      "total": 193,
      "additions": 171,
      "deletions": 22
    },
    "files": [
      {
        "sha": "e41a282c8e852f4ac1857951111c25709bcd37d6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64871cadd55a96d88edfcf6f9c9cd92a39604a61/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64871cadd55a96d88edfcf6f9c9cd92a39604a61/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=64871cadd55a96d88edfcf6f9c9cd92a39604a61",
        "patch": "@@ -283,6 +283,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32"
      },
      {
        "sha": "ded662a2cf33424bc5f42e1d19218bca026cb7b8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64871cadd55a96d88edfcf6f9c9cd92a39604a61/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64871cadd55a96d88edfcf6f9c9cd92a39604a61/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=64871cadd55a96d88edfcf6f9c9cd92a39604a61",
        "patch": "@@ -882,22 +882,29 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        // Try to make space in mempool\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, entry, stagedelete, nFeesDeleted)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n+        }\n+\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n+        if (fLimitFree && nFees < txMinFee + nFeesDeleted)\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n+                                      hash.ToString(), nFees, txMinFee + nFeesDeleted),\n                              REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n \n         // Require that free transactions have sufficient priority to be mined in the next block.\n-        if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        if (GetBoolArg(\"-relaypriority\", true) && nFees - nFeesDeleted < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n \n         // Continuously rate-limit free (really, very-low-fee) transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n+        if (fLimitFree && nFees - nFeesDeleted < ::minRelayTxFee.GetFee(nSize))\n         {\n             static CCriticalSection csFreeLimiter;\n             static double dFreeCount;\n@@ -944,6 +951,12 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n         }\n \n+        // Make actually space\n+        if (!stagedelete.empty()) {\n+            LogPrint(\"mempool\", \"Removing %u transactions (%d fees) from the mempool to make space for %s\\n\", stagedelete.size(), nFeesDeleted, tx.GetHash().ToString());\n+            pool.RemoveStaged(stagedelete);\n+        }\n+\n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, !IsInitialBlockDownload());\n     }"
      },
      {
        "sha": "58fc495e756eb6c39c6b7cf42b42d090d4d0a8f3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64871cadd55a96d88edfcf6f9c9cd92a39604a61/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64871cadd55a96d88edfcf6f9c9cd92a39604a61/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=64871cadd55a96d88edfcf6f9c9cd92a39604a61",
        "patch": "@@ -50,6 +50,8 @@ struct CNodeStateStats;\n static const bool DEFAULT_ALERTS = true;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n+/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n /** The pre-allocation chunk size for blk?????.dat files (since 0.8) */"
      },
      {
        "sha": "68be34ca1d7c9fe38b3e141231404759ab7b5ff4",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64871cadd55a96d88edfcf6f9c9cd92a39604a61/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64871cadd55a96d88edfcf6f9c9cd92a39604a61/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=64871cadd55a96d88edfcf6f9c9cd92a39604a61",
        "patch": "@@ -80,12 +80,24 @@ static inline size_t DynamicUsage(const std::set<X>& s)\n     return MallocUsage(sizeof(stl_tree_node<X>)) * s.size();\n }\n \n+template<typename X>\n+static inline size_t IncrementalDynamicUsage(const std::set<X>& s)\n+{\n+    return MallocUsage(sizeof(stl_tree_node<X>));\n+}\n+\n template<typename X, typename Y>\n static inline size_t DynamicUsage(const std::map<X, Y>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >)) * m.size();\n }\n \n+template<typename X, typename Y>\n+static inline size_t IncrementalDynamicUsage(const std::map<X, Y>& m)\n+{\n+    return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >));\n+}\n+\n // Boost data structures\n \n template<typename X>"
      },
      {
        "sha": "24f9d309f7bb88d903602e5aa611363f8d0669b8",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 11,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64871cadd55a96d88edfcf6f9c9cd92a39604a61/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64871cadd55a96d88edfcf6f9c9cd92a39604a61/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=64871cadd55a96d88edfcf6f9c9cd92a39604a61",
        "patch": "@@ -32,7 +32,6 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n     nUsageSize = RecursiveDynamicUsage(tx);\n-    feeRate = CFeeRate(nFee, nTxSize);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -49,9 +48,10 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n-CTxMemPool::CTxMemPool(const CFeeRate& _minRelayFee) :\n-    nTransactionsUpdated(0)\n+CTxMemPool::CTxMemPool(const CFeeRate& _minRelayFee)\n {\n+    clear();\n+\n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n@@ -109,6 +109,19 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     return true;\n }\n \n+void CTxMemPool::removeUnchecked(const uint256& hash)\n+{\n+    indexed_transaction_set::iterator it = mapTx.find(hash);\n+\n+    BOOST_FOREACH(const CTxIn& txin, it->GetTx().vin)\n+        mapNextTx.erase(txin.prevout);\n+\n+    totalTxSize -= it->GetTxSize();\n+    cachedInnerUsage -= it->DynamicMemoryUsage();\n+    mapTx.erase(it);\n+    nTransactionsUpdated++;\n+    minerPolicyEstimator->removeTx(hash);\n+}\n \n void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& removed, bool fRecursive)\n {\n@@ -144,15 +157,8 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n                     txToRemove.push_back(it->second.ptx->GetHash());\n                 }\n             }\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-                mapNextTx.erase(txin.prevout);\n-\n             removed.push_back(tx);\n-            totalTxSize -= mapTx.find(hash)->GetTxSize();\n-            cachedInnerUsage -= mapTx.find(hash)->DynamicMemoryUsage();\n-            mapTx.erase(hash);\n-            nTransactionsUpdated++;\n-            minerPolicyEstimator->removeTx(hash);\n+            removeUnchecked(hash);\n         }\n     }\n }\n@@ -435,3 +441,104 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n     // Estimate the overhead of mapTx to be 6 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 6 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n }\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 6 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeesRemoved) {\n+    size_t nSizeRemoved = 0;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin) {\n+        protect.insert(in.prevout.hash);\n+    }\n+\n+    size_t expsize = DynamicMemoryUsage() + GuessDynamicMemoryUsage(toadd); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    int fails = 0; // Number of mempool transactions iterated over that were not included in the stage.\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        const uint256& hash = it->GetTx().GetHash();\n+        if (stage.count(hash)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+        if (GetRand(10)) {\n+            // Only try 1/10 of the transactions, in order to have some chance to avoid very big chains.\n+            it++;\n+            continue;\n+        }\n+        if (CompareTxMemPoolEntryByFeeRate()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            return false;\n+        }\n+        std::deque<uint256> todo; // List of hashes that we still need to process (descendants of 'hash').\n+        std::set<uint256> now; // Set of hashes that will need to be added to stage if 'hash' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        int iternow = 0; // Transactions we've inspected so far while determining whether 'hash' is acceptable.\n+        todo.push_back(it->GetTx().GetHash()); // Add 'hash' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'hash' (and all its descendants) is a good idea.\n+        // Iterate breadth-first over all descendants of transaction with hash 'hash'.\n+        while (!todo.empty()) {\n+            uint256 hashnow = todo.front();\n+            if (protect.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            iternow++; // We only count transactions we actually had to go find in the mempool.\n+            if (iternow + fails > 20) {\n+                return false;\n+            }\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(hashnow);\n+            nowfee += origTx->GetFee();\n+            if (nFeesRemoved + nowfee > toadd.GetFee()) {\n+                // If this pushes up to the total fees deleted too high, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            todo.pop_front();\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(hashnow);\n+            nowusage += GuessDynamicMemoryUsage(*origTx);\n+            nowsize += origTx->GetTxSize();\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                if (!(stage.count(nexthash) || now.count(nexthash))) {\n+                    todo.push_back(nexthash);\n+                }\n+                iter++;\n+            }\n+        }\n+        if (good && (double)nowfee * toadd.GetTxSize() > (double)toadd.GetFee() * nowsize) {\n+            // The new transaction's feerate is below that of the set we're removing.\n+            good = false;\n+        }\n+        if (good) {\n+            stage.insert(now.begin(), now.end());\n+            nFeesRemoved += nowfee;\n+            nSizeRemoved += nowsize;\n+            expsize -= nowusage;\n+        } else {\n+            fails += iternow;\n+            if (fails > 10) {\n+                // Bail out after traversing 32 transactions that are not acceptable.\n+                return false;\n+            }\n+        }\n+        it++;\n+    }\n+    return true;\n+}\n+\n+void CTxMemPool::RemoveStaged(std::set<uint256>& stage) {\n+    BOOST_FOREACH(const uint256& hash, stage) {\n+        removeUnchecked(hash);\n+    }\n+}"
      },
      {
        "sha": "191b3794674ab32c4de8b90b88bd8de3fa844b03",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 21,
        "deletions": 7,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64871cadd55a96d88edfcf6f9c9cd92a39604a61/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64871cadd55a96d88edfcf6f9c9cd92a39604a61/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=64871cadd55a96d88edfcf6f9c9cd92a39604a61",
        "patch": "@@ -45,7 +45,6 @@ class CTxMemPoolEntry\n     size_t nTxSize; //! ... and avoid recomputing tx size\n     size_t nModSize; //! ... and modified size for priority\n     size_t nUsageSize; //! ... and total memory usage\n-    CFeeRate feeRate; //! ... and fee per kB\n     int64_t nTime; //! Local time when entering the mempool\n     double dPriority; //! Priority when entering the mempool\n     unsigned int nHeight; //! Chain height when entering the mempool\n@@ -59,8 +58,7 @@ class CTxMemPoolEntry\n \n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n-    CAmount GetFee() const { return nFee; }\n-    CFeeRate GetFeeRate() const { return feeRate; }\n+    const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n@@ -78,14 +76,18 @@ struct mempoolentry_txid\n     }\n };\n \n-class CompareTxMemPoolEntryByFee\n+class CompareTxMemPoolEntryByFeeRate\n {\n public:\n     bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n     {\n-        if (a.GetFeeRate() == b.GetFeeRate())\n+        // Avoid a division by rewriting (a/b > c/d) as (a*d > c*b).\n+        double f1 = (double)a.GetFee() * b.GetTxSize();\n+        double f2 = (double)b.GetFee() * a.GetTxSize();\n+        if (f1 == f2) {\n             return a.GetTime() < b.GetTime();\n-        return a.GetFeeRate() > b.GetFeeRate();\n+        }\n+        return f1 > f2;\n     }\n };\n \n@@ -134,7 +136,7 @@ class CTxMemPool\n             // sorted by fee rate\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n-                CompareTxMemPoolEntryByFee\n+                CompareTxMemPoolEntryByFeeRate\n             >\n         >\n     > indexed_transaction_set;\n@@ -157,6 +159,7 @@ class CTxMemPool\n     void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }\n \n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate = true);\n+    void removeUnchecked(const uint256& hash);\n     void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n     void removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n@@ -178,6 +181,16 @@ class CTxMemPool\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n+    /** Build a list of transaction (hashes) to remove such that:\n+     *  - The list is consistent (if a parent is included, all its dependencies are included as well).\n+     *  - No dependencies of toadd are removed.\n+     *  - The total fees removed are not more than the fees added by toadd.\n+     *  - The feerate of what is removed is not better than the feerate of toadd.\n+     *  - Removing said list will reduce the DynamicMemoryUsage after adding toadd, below sizelimit.\n+     */\n+    bool StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeeRemoved);\n+    void RemoveStaged(std::set<uint256>& stage);\n+\n     unsigned long size()\n     {\n         LOCK(cs);\n@@ -209,6 +222,7 @@ class CTxMemPool\n     bool ReadFeeEstimates(CAutoFile& filein);\n \n     size_t DynamicMemoryUsage() const;\n+    size_t GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const;\n };\n \n /** "
      }
    ]
  },
  {
    "sha": "6498673f99da9976df170052648ff2f0026210d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDk4NjczZjk5ZGE5OTc2ZGYxNzAwNTI2NDhmZjJmMDAyNjIxMGQy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-17T20:12:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-18T23:53:38Z"
      },
      "message": "Floating relay fee\n\nContinuously (every second) adjust the relay fee by measuring the\nmempool size and correcting it towards 71% (sqrt(50%)) of the cap\nsize. The maximum correction speed is equal to doubling or halving\nthe fee per two hours. The relay fee will never go below the\n-minrelayfee setting.\n\nIt is not intended to deal with sudden spikes - that's what the hard cap is meant for.\n\nThis was inspired by Jeff Garzik's low/high water mark approach, but has more gradual effects.",
      "tree": {
        "sha": "f029089105b251b99a73325430b706f8377a3ef5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f029089105b251b99a73325430b706f8377a3ef5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6498673f99da9976df170052648ff2f0026210d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6498673f99da9976df170052648ff2f0026210d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6498673f99da9976df170052648ff2f0026210d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6498673f99da9976df170052648ff2f0026210d2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64871cadd55a96d88edfcf6f9c9cd92a39604a61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64871cadd55a96d88edfcf6f9c9cd92a39604a61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64871cadd55a96d88edfcf6f9c9cd92a39604a61"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 46,
      "deletions": 2
    },
    "files": [
      {
        "sha": "afe3fef23e4133248501bba8383fa392c4d1587a",
        "filename": "src/amount.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6498673f99da9976df170052648ff2f0026210d2/src/amount.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6498673f99da9976df170052648ff2f0026210d2/src/amount.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.cpp?ref=6498673f99da9976df170052648ff2f0026210d2",
        "patch": "@@ -29,3 +29,16 @@ std::string CFeeRate::ToString() const\n {\n     return strprintf(\"%d.%08d BTC/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN);\n }\n+\n+void CFeeRate::ApplyFactor(double& factor, const CAmount& min)\n+{\n+    CAmount old = nSatoshisPerK;\n+    nSatoshisPerK = old * factor + 0.5;\n+    if (nSatoshisPerK < min) {\n+        nSatoshisPerK = min;\n+        factor = 1.0;\n+    } else {\n+        factor *= old;\n+        factor /= nSatoshisPerK;\n+    }\n+}"
      },
      {
        "sha": "1ef1c972de36c993bdfa68ac17c2be6d1b24f721",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6498673f99da9976df170052648ff2f0026210d2/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6498673f99da9976df170052648ff2f0026210d2/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=6498673f99da9976df170052648ff2f0026210d2",
        "patch": "@@ -57,6 +57,8 @@ class CFeeRate\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(nSatoshisPerK);\n     }\n+\n+    void ApplyFactor(double& factor, const CAmount& minPerK);\n };\n \n #endif //  BITCOIN_AMOUNT_H"
      },
      {
        "sha": "44f0d1b845f5677c7f8f99237887afb7bdca367e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6498673f99da9976df170052648ff2f0026210d2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6498673f99da9976df170052648ff2f0026210d2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6498673f99da9976df170052648ff2f0026210d2",
        "patch": "@@ -847,9 +847,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (mapArgs.count(\"-minrelaytxfee\"))\n     {\n         CAmount n = 0;\n-        if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n+        if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0) {\n+            ::defminRelayTxFee = n;\n             ::minRelayTxFee = CFeeRate(n);\n-        else\n+        } else\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n     }\n "
      },
      {
        "sha": "987d5faa305f4fa20362d41251f56f342f906177",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6498673f99da9976df170052648ff2f0026210d2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6498673f99da9976df170052648ff2f0026210d2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6498673f99da9976df170052648ff2f0026210d2",
        "patch": "@@ -67,6 +67,7 @@ uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n+CAmount defminRelayTxFee = 1000;\n CFeeRate minRelayTxFee = CFeeRate(1000);\n \n CTxMemPool mempool(::minRelayTxFee);\n@@ -198,6 +199,11 @@ namespace {\n \n     /** Dirty block file entries. */\n     set<int> setDirtyFileInfo;\n+\n+    /** Multiplier for minimum relay fee. */\n+    double dRelayFeeMultiplier = 1.0;\n+    /** Last timestamp of minimum relay fee update. */\n+    int64_t nRelayFeeMultiplierTimestamp = 0;\n } // anon namespace\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -959,6 +965,25 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, !IsInitialBlockDownload());\n+\n+        // Adjust relay fee.\n+        int64_t nNow = GetTimeMicros();\n+        if (nRelayFeeMultiplierTimestamp == 0) {\n+            nRelayFeeMultiplierTimestamp = nNow;\n+        } else if (nNow > nRelayFeeMultiplierTimestamp + 1000000) { // Update feerate at most once per second\n+            double cap = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000.0;\n+            double usage = std::max(cap * 0.5, pool.DynamicMemoryUsage() * 1.0); // Compute usage, clamped to [cap/2...cap].\n+            double aimed = cap * 0.707106781; // Aim for the multiplicative average in between (cap/sqrt(2)).\n+            double factor = usage / aimed;\n+            if (!stagedelete.empty()) {\n+                // When the hard cap limitation is being used, instead converge towards the feerate of transactions actually being accepted.\n+                double factor2 = nFees / (double)minRelayTxFee.GetFee(entry.GetTxSize());\n+                factor = std::max(factor, factor2);\n+            }\n+            dRelayFeeMultiplier *= pow(factor, (nNow - nRelayFeeMultiplierTimestamp) / (1000000.0 * 60 * 60)); // Spread adjustment effects over one hour.\n+            minRelayTxFee.ApplyFactor(dRelayFeeMultiplier, defminRelayTxFee);\n+            nRelayFeeMultiplierTimestamp = nNow;\n+        }\n     }\n \n     SyncWithWallets(tx, NULL);"
      },
      {
        "sha": "edaf03350faafe3e5126e2e3a2b69db1765d6f5d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6498673f99da9976df170052648ff2f0026210d2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6498673f99da9976df170052648ff2f0026210d2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6498673f99da9976df170052648ff2f0026210d2",
        "patch": "@@ -105,6 +105,7 @@ extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n+extern CAmount defminRelayTxFee;\n extern CFeeRate minRelayTxFee;\n extern bool fAlerts;\n "
      },
      {
        "sha": "455d6deef16f9424c9902461bc9801c837fb2e30",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6498673f99da9976df170052648ff2f0026210d2/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6498673f99da9976df170052648ff2f0026210d2/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=6498673f99da9976df170052648ff2f0026210d2",
        "patch": "@@ -758,6 +758,7 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n             \"  \\\"size\\\": xxxxx                (numeric) Current tx count\\n\"\n             \"  \\\"bytes\\\": xxxxx               (numeric) Sum of all tx sizes\\n\"\n             \"  \\\"usage\\\": xxxxx               (numeric) Total memory usage for the mempool\\n\"\n+            \"  \\\"relayfee\\\": xxxxx            (amount) Minimum relay fee per 1000 bytes\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmempoolinfo\", \"\")\n@@ -768,6 +769,7 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n     ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n     ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n     ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n+    ret.push_back(Pair(\"relayfee\", ValueFromAmount(minRelayTxFee.GetFeePerK())));\n \n     return ret;\n }"
      }
    ]
  },
  {
    "sha": "2be5db0792b0991e51d246828241e0f35327595c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmU1ZGIwNzkyYjA5OTFlNTFkMjQ2ODI4MjQxZTBmMzUzMjc1OTVj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-18T23:48:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2015-07-19T04:11:47Z"
      },
      "message": "Mempool expiry",
      "tree": {
        "sha": "b9b0092f8fa1e6b19b84c037c73e8fed841f7738",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9b0092f8fa1e6b19b84c037c73e8fed841f7738"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2be5db0792b0991e51d246828241e0f35327595c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2be5db0792b0991e51d246828241e0f35327595c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2be5db0792b0991e51d246828241e0f35327595c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2be5db0792b0991e51d246828241e0f35327595c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6498673f99da9976df170052648ff2f0026210d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6498673f99da9976df170052648ff2f0026210d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6498673f99da9976df170052648ff2f0026210d2"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 51,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4352b65b790916e73abcf8e9fc2d201f90a27137",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2be5db0792b0991e51d246828241e0f35327595c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2be5db0792b0991e51d246828241e0f35327595c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2be5db0792b0991e51d246828241e0f35327595c",
        "patch": "@@ -284,6 +284,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n+    strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32"
      },
      {
        "sha": "8d01c82870af868bfede9b5999f13b1e99d67392",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2be5db0792b0991e51d246828241e0f35327595c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2be5db0792b0991e51d246828241e0f35327595c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2be5db0792b0991e51d246828241e0f35327595c",
        "patch": "@@ -881,6 +881,12 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                                    hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n+        // Expire old transactions before trying to replace low-priority ones.\n+        int expired = pool.Expire(GetTime() - GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+        if (expired != 0) {\n+            LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n+        }\n+\n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());"
      },
      {
        "sha": "924797ce92ec5c14cf34ae6fd94d1b39ef86d20d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2be5db0792b0991e51d246828241e0f35327595c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2be5db0792b0991e51d246828241e0f35327595c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2be5db0792b0991e51d246828241e0f35327595c",
        "patch": "@@ -52,6 +52,8 @@ static const bool DEFAULT_ALERTS = true;\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n+/** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n+static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 48;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n /** The pre-allocation chunk size for blk?????.dat files (since 0.8) */"
      },
      {
        "sha": "bb493a8e0a7fa393d4348a31cbc8e777a4ae76e4",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 3,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2be5db0792b0991e51d246828241e0f35327595c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2be5db0792b0991e51d246828241e0f35327595c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=2be5db0792b0991e51d246828241e0f35327595c",
        "patch": "@@ -438,12 +438,12 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    // Estimate the overhead of mapTx to be 6 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n-    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 6 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 9 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 9 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n }\n \n size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n-    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 6 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 9 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n }\n \n bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeesRemoved) {\n@@ -542,3 +542,25 @@ void CTxMemPool::RemoveStaged(std::set<uint256>& stage) {\n         removeUnchecked(hash);\n     }\n }\n+\n+int CTxMemPool::Expire(int64_t time) {\n+    indexed_transaction_set::nth_index<2>::type::iterator it = mapTx.get<2>().begin();\n+    std::set<uint256> toremove;\n+    int ret = 0;\n+    while (it != mapTx.get<2>().end() && it->GetTime() < time) {\n+        toremove.insert(it->GetTx().GetHash());\n+        it++;\n+    }\n+    while (!toremove.empty()) {\n+        std::set<uint256>::iterator ite = toremove.begin();\n+        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(*ite, 0));\n+        while (iter != mapNextTx.end() && iter->first.hash == *ite) {\n+            toremove.insert(iter->second.ptx->GetHash());\n+            iter++;\n+        }\n+        ret++;\n+        removeUnchecked(*ite);\n+        toremove.erase(ite);\n+    }\n+    return ret;\n+}"
      },
      {
        "sha": "ee4a2f5f16a6642a05c96625f8c0f2c9f371a569",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2be5db0792b0991e51d246828241e0f35327595c/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2be5db0792b0991e51d246828241e0f35327595c/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2be5db0792b0991e51d246828241e0f35327595c",
        "patch": "@@ -91,6 +91,15 @@ class CompareTxMemPoolEntryByFeeRate\n     }\n };\n \n+class CompareTxMemPoolEntryByEntryTime\n+{\n+public:\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    {\n+        return a.GetTime() < b.GetTime();\n+    }\n+};\n+\n class CBlockPolicyEstimator;\n \n /** An inpoint - a combination of a transaction and an index n into its vin */\n@@ -137,6 +146,11 @@ class CTxMemPool\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n                 CompareTxMemPoolEntryByFeeRate\n+            >,\n+            // sorted by entry time\n+            boost::multi_index::ordered_non_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByEntryTime\n             >\n         >\n     > indexed_transaction_set;\n@@ -191,6 +205,9 @@ class CTxMemPool\n     bool StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeeRemoved);\n     void RemoveStaged(std::set<uint256>& stage);\n \n+    /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n+    int Expire(int64_t time);\n+\n     unsigned long size()\n     {\n         LOCK(cs);"
      }
    ]
  }
]