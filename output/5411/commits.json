[
  {
    "sha": "52afd2d4898872f4e0aae85055848ee0aceac3e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmFmZDJkNDg5ODg3MmY0ZTBhYWU4NTA1NTg0OGVlMGFjZWFjM2Uz",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-12-02T16:38:46Z"
      },
      "committer": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-12-03T00:04:57Z"
      },
      "message": "[Wallet] Optimize getBalance()/listunspent",
      "tree": {
        "sha": "ee64642b1249e9ea19baa5bc30fbcdb633c1f832",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee64642b1249e9ea19baa5bc30fbcdb633c1f832"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52afd2d4898872f4e0aae85055848ee0aceac3e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52afd2d4898872f4e0aae85055848ee0aceac3e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52afd2d4898872f4e0aae85055848ee0aceac3e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52afd2d4898872f4e0aae85055848ee0aceac3e3/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fec0d100d57b18308a054cff7d7ec6e3ebf63b53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fec0d100d57b18308a054cff7d7ec6e3ebf63b53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fec0d100d57b18308a054cff7d7ec6e3ebf63b53"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 43,
      "deletions": 20
    },
    "files": [
      {
        "sha": "493ff91277fbbba076e4bb7cdc4c301cd8be42d8",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 19,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52afd2d4898872f4e0aae85055848ee0aceac3e3/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52afd2d4898872f4e0aae85055848ee0aceac3e3/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=52afd2d4898872f4e0aae85055848ee0aceac3e3",
        "patch": "@@ -379,7 +379,7 @@ void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n  * Outpoint is spent if any non-conflicted transaction\n  * spends it:\n  */\n-bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n+bool CWallet::IsSpent(const uint256& hash, unsigned int n, int nMinConf) const\n {\n     const COutPoint outpoint(hash, n);\n     pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n@@ -389,7 +389,7 @@ bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n     {\n         const uint256& wtxid = it->second;\n         std::map<uint256, CWalletTx>::const_iterator mit = mapWallet.find(wtxid);\n-        if (mit != mapWallet.end() && mit->second.GetDepthInMainChain() >= 0)\n+        if (mit != mapWallet.end() && mit->second.GetDepthInMainChain() >= nMinConf)\n             return true; // Spent\n     }\n     return false;\n@@ -624,6 +624,8 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n                              wtxIn.hashBlock.ToString());\n             }\n             AddToSpends(hash);\n+            if (wtx.CouldAffectBalance())\n+                vWallet.push_back(&wtx);\n         }\n \n         bool fUpdated = false;\n@@ -780,6 +782,17 @@ bool CWallet::IsChange(const CTxOut& txout) const\n     return false;\n }\n \n+bool CWalletTx::CouldAffectBalance() const\n+{\n+    // check if there is an unspent output, or spent but not deep enough in the chain (< 100 confirmations)\n+    for (unsigned int i = 0; i < vout.size(); i++)\n+        if (pwallet->IsMine(vout[i]) != ISMINE_NO)\n+            if (!pwallet->IsSpent(GetHash(), i, 100))\n+                return true;\n+\n+    return false;\n+}\n+\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;\n@@ -961,6 +974,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n                 LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, Checkpoints::GuessVerificationProgress(pindex));\n             }\n         }\n+        InitVectorWallet();\n         ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI\n     }\n     return ret;\n@@ -1063,9 +1077,8 @@ CAmount CWallet::GetBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        BOOST_FOREACH(const CWalletTx* pcoin, vWallet)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n             if (pcoin->IsTrusted())\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n@@ -1079,9 +1092,8 @@ CAmount CWallet::GetUnconfirmedBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        BOOST_FOREACH(const CWalletTx* pcoin, vWallet)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n             if (!IsFinalTx(*pcoin) || (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0))\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n@@ -1094,9 +1106,8 @@ CAmount CWallet::GetImmatureBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        BOOST_FOREACH(const CWalletTx* pcoin, vWallet)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n             nTotal += pcoin->GetImmatureCredit();\n         }\n     }\n@@ -1108,9 +1119,8 @@ CAmount CWallet::GetWatchOnlyBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        BOOST_FOREACH(const CWalletTx* pcoin, vWallet)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n             if (pcoin->IsTrusted())\n                 nTotal += pcoin->GetAvailableWatchOnlyCredit();\n         }\n@@ -1124,9 +1134,8 @@ CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        BOOST_FOREACH(const CWalletTx* pcoin, vWallet)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n             if (!IsFinalTx(*pcoin) || (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0))\n                 nTotal += pcoin->GetAvailableWatchOnlyCredit();\n         }\n@@ -1139,9 +1148,8 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        BOOST_FOREACH(const CWalletTx* pcoin, vWallet)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n             nTotal += pcoin->GetImmatureWatchOnlyCredit();\n         }\n     }\n@@ -1157,10 +1165,9 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n \n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        BOOST_FOREACH(const CWalletTx* pcoin, vWallet)\n         {\n-            const uint256& wtxid = it->first;\n-            const CWalletTx* pcoin = &(*it).second;\n+            const uint256& wtxid = pcoin->GetHash();\n \n             if (!IsFinalTx(*pcoin))\n                 continue;\n@@ -1178,8 +1185,8 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n             for (unsigned int i = 0; i < pcoin->vout.size(); i++) {\n                 isminetype mine = IsMine(pcoin->vout[i]);\n                 if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&\n-                    !IsLockedCoin((*it).first, i) && pcoin->vout[i].nValue > 0 &&\n-                    (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected((*it).first, i)))\n+                    !IsLockedCoin(wtxid, i) && pcoin->vout[i].nValue > 0 &&\n+                    (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected(wtxid, i)))\n                         vCoins.push_back(COutput(pcoin, i, nDepth, (mine & ISMINE_SPENDABLE) != ISMINE_NO));\n             }\n         }\n@@ -1672,11 +1679,23 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n         return nLoadWalletRet;\n     fFirstRunRet = !vchDefaultKey.IsValid();\n \n+    InitVectorWallet();\n+\n     uiInterface.LoadWallet(this);\n \n     return DB_LOAD_OK;\n }\n \n+void CWallet::InitVectorWallet()\n+{\n+    vWallet.clear();\n+    for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it) {\n+        const CWalletTx& wtx = it->second;\n+        if (wtx.CouldAffectBalance())\n+            vWallet.push_back(&wtx);\n+    }\n+    LogPrintf(\"Init wallet: %d of %d transactions could affect the balance\\n\", vWallet.size(), mapWallet.size());\n+}\n \n DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n {"
      },
      {
        "sha": "fe5f53f98805d40aa5633f9a523abea13f9298b9",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52afd2d4898872f4e0aae85055848ee0aceac3e3/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52afd2d4898872f4e0aae85055848ee0aceac3e3/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=52afd2d4898872f4e0aae85055848ee0aceac3e3",
        "patch": "@@ -183,6 +183,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n+    std::vector<const CWalletTx*> vWallet; // contains only txs which could have unspent outputs\n+    void InitVectorWallet();\n \n     int64_t nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n@@ -203,7 +205,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n-    bool IsSpent(const uint256& hash, unsigned int n) const;\n+    bool IsSpent(const uint256& hash, unsigned int n, int nMinConf = 0) const;\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const;\n     void LockCoin(COutPoint& output);\n@@ -899,6 +901,8 @@ class CWalletTx : public CMerkleTx\n         return true;\n     }\n \n+    bool CouldAffectBalance() const;\n+\n     bool WriteToDisk();\n \n     int64_t GetTxTime() const;"
      }
    ]
  }
]