DrahtBot,2020-11-30 23:11:46,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21359 (rpc: include_unsafe option for fundrawtransaction by t-bast)\n* #21207 (MOVEONLY: CWallet transaction code out of ",https://github.com/bitcoin/bitcoin/pull/20536#issuecomment-736110966,736110966,
decryp2kanon,2020-12-06 00:50:19,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20536#issuecomment-739437453,739437453,
laanwj,2020-12-17 17:51:22,"Concept ACK, thanks for adding a test.",https://github.com/bitcoin/bitcoin/pull/20536#issuecomment-747597239,747597239,
instagibbs,2020-12-26 09:51:07,"Seems strictly better, simple, plus test coverage.\n\nACK https://github.com/bitcoin/bitcoin/pull/20536/commits/48a0319babb409cf486a9eb7c776810f70b06cb2",https://github.com/bitcoin/bitcoin/pull/20536#issuecomment-751339808,751339808,
instagibbs,2020-12-24 02:10:38,do we need both the checks because this could end up being `-1`?,https://github.com/bitcoin/bitcoin/pull/20536#discussion_r548350384,548350384,src/wallet/wallet.cpp
instagibbs,2020-12-24 02:13:56,"spacing nit: `recipient.fundrawtransaction ,rawtx`",https://github.com/bitcoin/bitcoin/pull/20536#discussion_r548351069,548351069,test/functional/rpc_fundrawtransaction.py
instagibbs,2020-12-24 02:14:53,I find it confusing the test claims it will have a successful knapsack run then doesn't?,https://github.com/bitcoin/bitcoin/pull/20536#discussion_r548351258,548351258,test/functional/rpc_fundrawtransaction.py
achow101,2020-12-24 17:37:06,"I have both checks here because the estimate is an overestimate, so I would prefer to use the accurate weight when possible, i.e. when the transaction is signed.",https://github.com/bitcoin/bitcoin/pull/20536#discussion_r548646701,548646701,src/wallet/wallet.cpp
achow101,2020-12-24 17:40:02,Fixed.,https://github.com/bitcoin/bitcoin/pull/20536#discussion_r548648709,548648709,test/functional/rpc_fundrawtransaction.py
achow101,2020-12-24 17:40:49,"The fallback to knapsack behavior hasn't been implemented yet, so the only thing that should happen is we get an error. Originally this was part of a branch that did that fallback, but I removed it because I didn't like how it was implemented. I've updated the comment to reflect this.",https://github.com/bitcoin/bitcoin/pull/20536#discussion_r548649167,548649167,test/functional/rpc_fundrawtransaction.py
Xekyo,2021-02-25 23:02:35,I have noticed that this codebase often uses unnamed fields in a specific order rather than named fields. Wouldn't it be advantageous to define transfer objects that have named fields to be more explicit in what is retrieved from response objects?,https://github.com/bitcoin/bitcoin/pull/20536#discussion_r583264220,583264220,src/wallet/wallet.cpp
Xekyo,2021-02-25 23:17:46,I'd find it more intuitive if this were two separate methods to get vsize and weight rather than the unnamed pair of values.,https://github.com/bitcoin/bitcoin/pull/20536#discussion_r583270983,583270983,src/wallet/wallet.cpp
achow101,2021-03-04 18:19:54,"For something like this, I feel like it is overkill to introduce a struct or class for these, especially since it is used in only one place.",https://github.com/bitcoin/bitcoin/pull/20536#discussion_r587708194,587708194,src/wallet/wallet.cpp
achow101,2021-03-04 18:20:16,I did these as a single function because it's the same calculation.,https://github.com/bitcoin/bitcoin/pull/20536#discussion_r587708440,587708440,src/wallet/wallet.cpp
