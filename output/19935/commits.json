[
  {
    "sha": "95e61c1cf2a91d041c8025306ba36f0ea2806894",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWU2MWMxY2YyYTkxZDA0MWM4MDI1MzA2YmEzNmYwZWEyODA2ODk0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-17T21:02:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-10T19:33:37Z"
      },
      "message": "Move Hashers to util/hasher.{cpp/h}\n\nMove the hashers that we use for hash tables to a common place.\n\nMoved hashers:\n- SaltedTxidHasher\n- SaltedOutpointHasher\n- FilterHeaderHasher\n- SignatureCacheHasher\n- BlockHasher",
      "tree": {
        "sha": "225cae6060841c5049f9722b48776dd8901d4f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/225cae6060841c5049f9722b48776dd8901d4f59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95e61c1cf2a91d041c8025306ba36f0ea2806894",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e61c1cf2a91d041c8025306ba36f0ea2806894",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95e61c1cf2a91d041c8025306ba36f0ea2806894",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e61c1cf2a91d041c8025306ba36f0ea2806894/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42f950cb27b732782d55282cdcd934396fcd7071",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42f950cb27b732782d55282cdcd934396fcd7071",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42f950cb27b732782d55282cdcd934396fcd7071"
      }
    ],
    "stats": {
      "total": 187,
      "additions": 106,
      "deletions": 81
    },
    "files": [
      {
        "sha": "a0ba756d99f757908dd7f7007fb47805472d3dc6",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=95e61c1cf2a91d041c8025306ba36f0ea2806894",
        "patch": "@@ -224,6 +224,7 @@ BITCOIN_CORE_H = \\\n   util/error.h \\\n   util/fees.h \\\n   util/golombrice.h \\\n+  util/hasher.h \\\n   util/macros.h \\\n   util/memory.h \\\n   util/message.h \\\n@@ -539,6 +540,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/bytevectorhash.cpp \\\n   util/error.cpp \\\n   util/fees.cpp \\\n+  util/hasher.cpp \\\n   util/system.cpp \\\n   util/message.cpp \\\n   util/moneystr.cpp \\"
      },
      {
        "sha": "abba61d3d235b68f7a55b8d4fcf912043df497b9",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=95e61c1cf2a91d041c8025306ba36f0ea2806894",
        "patch": "@@ -31,8 +31,6 @@ bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock)\n CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n size_t CCoinsViewBacked::EstimateSize() const { return base->EstimateSize(); }\n \n-SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n-\n CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), cachedCoinsUsage(0) {}\n \n size_t CCoinsViewCache::DynamicMemoryUsage() const {"
      },
      {
        "sha": "d2eb42d8cf4c1c3f302c4b793910e6b5dc0b82c1",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 1,
        "deletions": 28,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=95e61c1cf2a91d041c8025306ba36f0ea2806894",
        "patch": "@@ -8,11 +8,11 @@\n \n #include <compressor.h>\n #include <core_memusage.h>\n-#include <crypto/siphash.h>\n #include <memusage.h>\n #include <primitives/transaction.h>\n #include <serialize.h>\n #include <uint256.h>\n+#include <util/hasher.h>\n \n #include <assert.h>\n #include <stdint.h>\n@@ -82,33 +82,6 @@ class Coin\n     }\n };\n \n-class SaltedOutpointHasher\n-{\n-private:\n-    /** Salt */\n-    const uint64_t k0, k1;\n-\n-public:\n-    SaltedOutpointHasher();\n-\n-    /**\n-     * This *must* return size_t. With Boost 1.46 on 32-bit systems the\n-     * unordered_map will behave unpredictably if the custom hasher returns a\n-     * uint64_t, resulting in failures when syncing the chain (#4634).\n-     *\n-     * Having the hash noexcept allows libstdc++'s unordered_map to recalculate\n-     * the hash during rehash, so it does not have to cache the value. This\n-     * reduces node's memory by sizeof(size_t). The required recalculation has\n-     * a slight performance penalty (around 1.6%), but this is compensated by\n-     * memory savings of about 9% which allow for a larger dbcache setting.\n-     *\n-     * @see https://gcc.gnu.org/onlinedocs/gcc-9.2.0/libstdc++/manual/manual/unordered_associative.html\n-     */\n-    size_t operator()(const COutPoint& id) const noexcept {\n-        return SipHashUint256Extra(k0, k1, id.hash, id.n);\n-    }\n-};\n-\n /**\n  * A Coin in one level of the coins database caching hierarchy.\n  *"
      },
      {
        "sha": "bb75eee960f49bbb3431d57f731246f7bb390739",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=95e61c1cf2a91d041c8025306ba36f0ea2806894",
        "patch": "@@ -9,15 +9,11 @@\n #include <chain.h>\n #include <flatfile.h>\n #include <index/base.h>\n+#include <util/hasher.h>\n \n /** Interval between compact filter checkpoints. See BIP 157. */\n static constexpr int CFCHECKPT_INTERVAL = 1000;\n \n-struct FilterHeaderHasher\n-{\n-    size_t operator()(const uint256& hash) const { return ReadLE64(hash.begin()); }\n-};\n-\n /**\n  * BlockFilterIndex is used to store and retrieve block filters, hashes, and headers for a range of\n  * blocks by height. An index is constructed for each supported filter type with its own database"
      },
      {
        "sha": "a945df0cc089e0ce4e816a6763c269f0f2b9b217",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 21,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=95e61c1cf2a91d041c8025306ba36f0ea2806894",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <script/interpreter.h>\n #include <span.h>\n+#include <util/hasher.h>\n \n #include <vector>\n \n@@ -20,27 +21,6 @@ static const int64_t MAX_MAX_SIG_CACHE_SIZE = 16384;\n \n class CPubKey;\n \n-/**\n- * We're hashing a nonce into the entries themselves, so we don't need extra\n- * blinding in the set hash computation.\n- *\n- * This may exhibit platform endian dependent behavior but because these are\n- * nonced hashes (random) and this state is only ever used locally it is safe.\n- * All that matters is local consistency.\n- */\n-class SignatureCacheHasher\n-{\n-public:\n-    template <uint8_t hash_select>\n-    uint32_t operator()(const uint256& key) const\n-    {\n-        static_assert(hash_select <8, \"SignatureCacheHasher only has 8 hashes available.\");\n-        uint32_t u;\n-        std::memcpy(&u, key.begin()+4*hash_select, 4);\n-        return u;\n-    }\n-};\n-\n class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n {\n private:"
      },
      {
        "sha": "8a519fa08cdfbfe6d01bf08aa6c242e8aef135ba",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=95e61c1cf2a91d041c8025306ba36f0ea2806894",
        "patch": "@@ -1134,5 +1134,3 @@ CTxMemPool::EpochGuard::~EpochGuard()\n     ++pool.m_epoch;\n     pool.m_has_epoch_guard = false;\n }\n-\n-SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}"
      },
      {
        "sha": "e6ea09f869fdd5bb14017092fda3bf17f920d6ca",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 15,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=95e61c1cf2a91d041c8025306ba36f0ea2806894",
        "patch": "@@ -15,13 +15,13 @@\n \n #include <amount.h>\n #include <coins.h>\n-#include <crypto/siphash.h>\n #include <indirectmap.h>\n #include <optional.h>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <sync.h>\n #include <random.h>\n+#include <util/hasher.h>\n \n #include <boost/multi_index_container.hpp>\n #include <boost/multi_index/hashed_index.hpp>\n@@ -398,20 +398,6 @@ enum class MemPoolRemovalReason {\n     REPLACED,    //!< Removed for replacement\n };\n \n-class SaltedTxidHasher\n-{\n-private:\n-    /** Salt */\n-    const uint64_t k0, k1;\n-\n-public:\n-    SaltedTxidHasher();\n-\n-    size_t operator()(const uint256& txid) const {\n-        return SipHashUint256(k0, k1, txid);\n-    }\n-};\n-\n /**\n  * CTxMemPool stores valid-according-to-the-current-best-chain transactions\n  * that may be included in the next block."
      },
      {
        "sha": "236b8e926f7d1d65963b7f94689e491d2611fdec",
        "filename": "src/util/hasher.cpp",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/util/hasher.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/util/hasher.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/hasher.cpp?ref=95e61c1cf2a91d041c8025306ba36f0ea2806894",
        "patch": "@@ -0,0 +1,12 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <random.h>\n+#include <util/hasher.h>\n+\n+#include <limits>\n+\n+SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}"
      },
      {
        "sha": "77301df63d5d25f1310be1c784b8f354003b711e",
        "filename": "src/util/hasher.h",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/util/hasher.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/util/hasher.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/hasher.h?ref=95e61c1cf2a91d041c8025306ba36f0ea2806894",
        "patch": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_HASHER_H\n+#define BITCOIN_UTIL_HASHER_H\n+\n+#include <crypto/siphash.h>\n+#include <primitives/transaction.h>\n+#include <uint256.h>\n+\n+class SaltedTxidHasher\n+{\n+private:\n+    /** Salt */\n+    const uint64_t k0, k1;\n+\n+public:\n+    SaltedTxidHasher();\n+\n+    size_t operator()(const uint256& txid) const {\n+        return SipHashUint256(k0, k1, txid);\n+    }\n+};\n+\n+class SaltedOutpointHasher\n+{\n+private:\n+    /** Salt */\n+    const uint64_t k0, k1;\n+\n+public:\n+    SaltedOutpointHasher();\n+\n+    /**\n+     * This *must* return size_t. With Boost 1.46 on 32-bit systems the\n+     * unordered_map will behave unpredictably if the custom hasher returns a\n+     * uint64_t, resulting in failures when syncing the chain (#4634).\n+     *\n+     * Having the hash noexcept allows libstdc++'s unordered_map to recalculate\n+     * the hash during rehash, so it does not have to cache the value. This\n+     * reduces node's memory by sizeof(size_t). The required recalculation has\n+     * a slight performance penalty (around 1.6%), but this is compensated by\n+     * memory savings of about 9% which allow for a larger dbcache setting.\n+     *\n+     * @see https://gcc.gnu.org/onlinedocs/gcc-9.2.0/libstdc++/manual/manual/unordered_associative.html\n+     */\n+    size_t operator()(const COutPoint& id) const noexcept {\n+        return SipHashUint256Extra(k0, k1, id.hash, id.n);\n+    }\n+};\n+\n+struct FilterHeaderHasher\n+{\n+    size_t operator()(const uint256& hash) const { return ReadLE64(hash.begin()); }\n+};\n+\n+/**\n+ * We're hashing a nonce into the entries themselves, so we don't need extra\n+ * blinding in the set hash computation.\n+ *\n+ * This may exhibit platform endian dependent behavior but because these are\n+ * nonced hashes (random) and this state is only ever used locally it is safe.\n+ * All that matters is local consistency.\n+ */\n+class SignatureCacheHasher\n+{\n+public:\n+    template <uint8_t hash_select>\n+    uint32_t operator()(const uint256& key) const\n+    {\n+        static_assert(hash_select <8, \"SignatureCacheHasher only has 8 hashes available.\");\n+        uint32_t u;\n+        std::memcpy(&u, key.begin()+4*hash_select, 4);\n+        return u;\n+    }\n+};\n+\n+struct BlockHasher\n+{\n+    // this used to call `GetCheapHash()` in uint256, which was later moved; the\n+    // cheap hash function simply calls ReadLE64() however, so the end result is\n+    // identical\n+    size_t operator()(const uint256& hash) const { return ReadLE64(hash.begin()); }\n+};\n+\n+#endif // BITCOIN_UTIL_HASHER_H"
      },
      {
        "sha": "a3dc0b75afd1fc8de6c77393c03fe1c926bffc93",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e61c1cf2a91d041c8025306ba36f0ea2806894/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=95e61c1cf2a91d041c8025306ba36f0ea2806894",
        "patch": "@@ -23,6 +23,7 @@\n #include <txdb.h>\n #include <versionbits.h>\n #include <serialize.h>\n+#include <util/hasher.h>\n \n #include <atomic>\n #include <map>\n@@ -94,14 +95,6 @@ static const unsigned int DEFAULT_CHECKLEVEL = 3;\n // Setting the target to >= 550 MiB will make it likely we can respect the target.\n static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n-struct BlockHasher\n-{\n-    // this used to call `GetCheapHash()` in uint256, which was later moved; the\n-    // cheap hash function simply calls ReadLE64() however, so the end result is\n-    // identical\n-    size_t operator()(const uint256& hash) const { return ReadLE64(hash.begin()); }\n-};\n-\n /** Current sync state passed to tip changed callbacks. */\n enum class SynchronizationState {\n     INIT_REINDEX,"
      }
    ]
  },
  {
    "sha": "210b693db66e7c5b618014b5a287aee15af00045",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTBiNjkzZGI2NmU3YzViNjE4MDE0YjVhMjg3YWVlMTVhZjAwMDQ1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-17T23:29:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-10T19:33:37Z"
      },
      "message": "Add generic SaltedSipHasher\n\nSaltedSipHasher is a generic hasher that can be used with most things we\nwould hash in an unordered container.",
      "tree": {
        "sha": "4615e9c69c139d3441d20b65011417a59ecb7cdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4615e9c69c139d3441d20b65011417a59ecb7cdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/210b693db66e7c5b618014b5a287aee15af00045",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/210b693db66e7c5b618014b5a287aee15af00045",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/210b693db66e7c5b618014b5a287aee15af00045",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/210b693db66e7c5b618014b5a287aee15af00045/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95e61c1cf2a91d041c8025306ba36f0ea2806894",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e61c1cf2a91d041c8025306ba36f0ea2806894",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95e61c1cf2a91d041c8025306ba36f0ea2806894"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5900daf0500f1b65062c99f52c2772cee921b81a",
        "filename": "src/util/hasher.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/210b693db66e7c5b618014b5a287aee15af00045/src/util/hasher.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/210b693db66e7c5b618014b5a287aee15af00045/src/util/hasher.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/hasher.cpp?ref=210b693db66e7c5b618014b5a287aee15af00045",
        "patch": "@@ -10,3 +10,10 @@\n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n \n SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+SaltedSipHasher::SaltedSipHasher() : m_k0(GetRand(std::numeric_limits<uint64_t>::max())), m_k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+size_t SaltedSipHasher::operator()(const Span<const unsigned char>& script) const\n+{\n+    return CSipHasher(m_k0, m_k1).Write(script.data(), script.size()).Finalize();\n+}"
      },
      {
        "sha": "fa2fea30d82fb2be4cdedf7e6ca6b97505eca5e6",
        "filename": "src/util/hasher.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/210b693db66e7c5b618014b5a287aee15af00045/src/util/hasher.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/210b693db66e7c5b618014b5a287aee15af00045/src/util/hasher.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/hasher.h?ref=210b693db66e7c5b618014b5a287aee15af00045",
        "patch": "@@ -84,4 +84,16 @@ struct BlockHasher\n     size_t operator()(const uint256& hash) const { return ReadLE64(hash.begin()); }\n };\n \n+class SaltedSipHasher\n+{\n+private:\n+    /** Salt */\n+    const uint64_t m_k0, m_k1;\n+\n+public:\n+    SaltedSipHasher();\n+\n+    size_t operator()(const Span<const unsigned char>& script) const;\n+};\n+\n #endif // BITCOIN_UTIL_HASHER_H"
      }
    ]
  },
  {
    "sha": "281fd1a4a032cded7f9ea9857e3e99fc793c714b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODFmZDFhNGEwMzJjZGVkN2Y5ZWE5ODU3ZTNlOTlmYzc5M2M3MTRi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-09-28T23:34:38Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-10T19:33:37Z"
      },
      "message": "Replace KeyIDHasher with SaltedSipHasher",
      "tree": {
        "sha": "3bab945b7f8d9617adbf009e043f1f64a0aadfd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bab945b7f8d9617adbf009e043f1f64a0aadfd2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/281fd1a4a032cded7f9ea9857e3e99fc793c714b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/281fd1a4a032cded7f9ea9857e3e99fc793c714b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/281fd1a4a032cded7f9ea9857e3e99fc793c714b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/281fd1a4a032cded7f9ea9857e3e99fc793c714b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "210b693db66e7c5b618014b5a287aee15af00045",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/210b693db66e7c5b618014b5a287aee15af00045",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/210b693db66e7c5b618014b5a287aee15af00045"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "85d98eb4a74d37f1b06d66c20887de72c5efc1c5",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/281fd1a4a032cded7f9ea9857e3e99fc793c714b/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/281fd1a4a032cded7f9ea9857e3e99fc793c714b/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=281fd1a4a032cded7f9ea9857e3e99fc793c714b",
        "patch": "@@ -303,7 +303,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     /* the HD chain data model (external chain counters) */\n     CHDChain m_hd_chain;\n-    std::unordered_map<CKeyID, CHDChain, KeyIDHasher> m_inactive_hd_chains;\n+    std::unordered_map<CKeyID, CHDChain, SaltedSipHasher> m_inactive_hd_chains;\n \n     /* HD derive new child key (on internal or external chain) */\n     void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, CHDChain& hd_chain, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);"
      }
    ]
  }
]