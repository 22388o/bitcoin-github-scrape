[
  {
    "sha": "12519bf62b8c49b1c1744eca6ea5b3162a61f962",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjUxOWJmNjJiOGM0OWIxYzE3NDRlY2E2ZWE1YjMxNjJhNjFmOTYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-18T12:08:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-18T12:10:52Z"
      },
      "message": "test: Fix use-after-free in scheduler tests\n\nMake a copy of the boost time-point to wait for, otherwise the head of\nthe queue may be deleted by another thread while this one is waiting,\nwhile the boost function still has a reference to it.\n\nAlthough this problem is in non-test code, this is not an actual problem\noutside of the tests because we use the thread scheduler with only one\nservice thread, so there will never be threads fighting at the head of\nthe queue.\n\nThe old boost fallback escapes this problem because it passes a scalar\nvalue to wait_until instead of a const object reference.\n\nFound by running the tests in LLVM-4.0-master asan.",
      "tree": {
        "sha": "71bb2fd2c5b5cb823bb7c0be6098085ce81f3ad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71bb2fd2c5b5cb823bb7c0be6098085ce81f3ad8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12519bf62b8c49b1c1744eca6ea5b3162a61f962",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12519bf62b8c49b1c1744eca6ea5b3162a61f962",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12519bf62b8c49b1c1744eca6ea5b3162a61f962",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12519bf62b8c49b1c1744eca6ea5b3162a61f962/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8b2a82618bec43977a65c076f691ec1cddd54be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8b2a82618bec43977a65c076f691ec1cddd54be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8b2a82618bec43977a65c076f691ec1cddd54be"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "27c03f154cb986aeed3dd6164a8c029f33a5363c",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12519bf62b8c49b1c1744eca6ea5b3162a61f962/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12519bf62b8c49b1c1744eca6ea5b3162a61f962/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=12519bf62b8c49b1c1744eca6ea5b3162a61f962",
        "patch": "@@ -54,9 +54,10 @@ void CScheduler::serviceQueue()\n #else\n             // Some boost versions have a conflicting overload of wait_until that returns void.\n             // Explicitly use a template here to avoid hitting that overload.\n-            while (!shouldStop() && !taskQueue.empty() &&\n-                   newTaskScheduled.wait_until<>(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n-                // Keep waiting until timeout\n+            while (!shouldStop() && !taskQueue.empty()) {\n+                boost::chrono::system_clock::time_point timeToWaitFor = taskQueue.begin()->first;\n+                if (newTaskScheduled.wait_until<>(lock, timeToWaitFor) == boost::cv_status::timeout)\n+                    break; // Exit loop after timeout, it means we reached the time of the event\n             }\n #endif\n             // If there are multiple threads, the queue can empty while we're waiting (another"
      }
    ]
  }
]