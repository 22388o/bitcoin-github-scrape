[
  {
    "sha": "bf2c4739ccaa98d037532fc84d37099c219ade29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjJjNDczOWNjYWE5OGQwMzc1MzJmYzg0ZDM3MDk5YzIxOWFkZTI5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-26T18:06:06Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T20:16:24Z"
      },
      "message": "Add a score index to the mempool.\n\nThe score index is meant to represent the order of priority for being included in a block for miners.  Initially this is set to the transactions fee rate.",
      "tree": {
        "sha": "c9f5059033798d7052b980645ed7cdccfbe93bd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9f5059033798d7052b980645ed7cdccfbe93bd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf2c4739ccaa98d037532fc84d37099c219ade29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf2c4739ccaa98d037532fc84d37099c219ade29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf2c4739ccaa98d037532fc84d37099c219ade29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf2c4739ccaa98d037532fc84d37099c219ade29/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8daffe227bc67706d6640b67776f7711a6a98607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8daffe227bc67706d6640b67776f7711a6a98607",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8daffe227bc67706d6640b67776f7711a6a98607"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 50,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fcb6d71dff0fd9f31f9f7a82f28b5f6d60a1d4c9",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf2c4739ccaa98d037532fc84d37099c219ade29/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf2c4739ccaa98d037532fc84d37099c219ade29/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=bf2c4739ccaa98d037532fc84d37099c219ade29",
        "patch": "@@ -187,6 +187,7 @@ UniValue mempoolToJSON(bool fVerbose = false)\n             UniValue info(UniValue::VOBJ);\n             info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n             info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n+            info.push_back(Pair(\"score\", e.GetScore()));\n             info.push_back(Pair(\"time\", e.GetTime()));\n             info.push_back(Pair(\"height\", (int)e.GetHeight()));\n             info.push_back(Pair(\"startingpriority\", e.GetPriority(e.GetHeight())));\n@@ -244,6 +245,7 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n             \"  \\\"transactionid\\\" : {       (json object)\\n\"\n             \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n             \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"score\\\" : n,            (numeric) transaction score for mining priority\\n\"\n             \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n             \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n             \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\""
      },
      {
        "sha": "1734b4f4a655e9e5f11a8f3c29ac6b6b2598948d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf2c4739ccaa98d037532fc84d37099c219ade29/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf2c4739ccaa98d037532fc84d37099c219ade29/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=bf2c4739ccaa98d037532fc84d37099c219ade29",
        "patch": "@@ -31,6 +31,8 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     nCountWithDescendants = 1;\n     nSizeWithDescendants = nTxSize;\n     nFeesWithDescendants = nFee;\n+\n+    score = CFeeRate(nFee,nTxSize).GetFeePerK();\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -47,6 +49,11 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+void CTxMemPoolEntry::UpdateScore(int64_t newScore)\n+{\n+    score = newScore;\n+}\n+\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n@@ -749,6 +756,10 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash,\n         std::pair<double, CAmount> &deltas = mapDeltas[hash];\n         deltas.first += dPriorityDelta;\n         deltas.second += nFeeDelta;\n+        txiter it = mapTx.find(hash);\n+        if (it != mapTx.end()) {\n+            mapTx.modify(it, update_score(it->GetScore() + nFeeDelta));\n+        }\n     }\n     LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n }"
      },
      {
        "sha": "77e99f2fa81c20af686945d40b0fc596a290ce07",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf2c4739ccaa98d037532fc84d37099c219ade29/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf2c4739ccaa98d037532fc84d37099c219ade29/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=bf2c4739ccaa98d037532fc84d37099c219ade29",
        "patch": "@@ -66,6 +66,7 @@ class CTxMemPoolEntry\n     double dPriority; //! Priority when entering the mempool\n     unsigned int nHeight; //! Chain height when entering the mempool\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n+    int64_t score; //! Used for determining the priority of the transaction for mining in a block\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -88,10 +89,13 @@ class CTxMemPoolEntry\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n+    int64_t GetScore() const { return score; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n \n     // Adjusts the descendant state, if this entry is not dirty.\n     void UpdateState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n+    // Updates the mining priority score\n+    void UpdateScore(int64_t newScore);\n \n     /** We can set the entry to be dirty if doing the full calculation of in-\n      *  mempool descendants will be too expensive, which can potentially happen\n@@ -127,6 +131,18 @@ struct set_dirty\n         { e.SetDirty(); }\n };\n \n+struct update_score\n+{\n+    update_score(int64_t _newScore) : newScore(_newScore)\n+    {}\n+\n+    void operator() (CTxMemPoolEntry &e)\n+    { e.UpdateScore(newScore); }\n+\n+private:\n+    int64_t newScore;\n+};\n+\n // extracts a TxMemPoolEntry's transaction hash\n struct mempoolentry_txid\n {\n@@ -174,6 +190,22 @@ class CompareTxMemPoolEntryByFee\n     }\n };\n \n+/** \\class CompareTxMemPoolEntryByScore\n+ *\n+ *  Sort by score of entry in descending order\n+ */\n+class CompareTxMemPoolEntryByScore\n+{\n+public:\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    {\n+        if (a.GetScore() == b.GetScore()) {\n+            return b.GetTx().GetHash() < a.GetTx().GetHash();\n+        }\n+        return a.GetScore() > b.GetScore();\n+    }\n+};\n+\n class CompareTxMemPoolEntryByEntryTime\n {\n public:\n@@ -311,6 +343,11 @@ class CTxMemPool\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n                 CompareTxMemPoolEntryByEntryTime\n+                >,\n+            // sorted by fee rate\n+            boost::multi_index::ordered_non_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByScore\n             >\n         >\n     > indexed_transaction_set;"
      }
    ]
  },
  {
    "sha": "10a6e5ebbad8f28719c6a51c90ca06d85ff65567",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGE2ZTVlYmJhZDhmMjg3MTljNmE1MWM5MGNhMDZkODVmZjY1NTY3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T15:02:20Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T20:47:52Z"
      },
      "message": "Add TxPriority class and comparator",
      "tree": {
        "sha": "0a3fa8f3b0d0c3491561ab7f047bf29de212a63e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a3fa8f3b0d0c3491561ab7f047bf29de212a63e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10a6e5ebbad8f28719c6a51c90ca06d85ff65567",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a6e5ebbad8f28719c6a51c90ca06d85ff65567",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10a6e5ebbad8f28719c6a51c90ca06d85ff65567",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a6e5ebbad8f28719c6a51c90ca06d85ff65567/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf2c4739ccaa98d037532fc84d37099c219ade29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf2c4739ccaa98d037532fc84d37099c219ade29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf2c4739ccaa98d037532fc84d37099c219ade29"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "872fd3f6b56a427d8073f0748e9eae914b40a7b6",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a6e5ebbad8f28719c6a51c90ca06d85ff65567/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a6e5ebbad8f28719c6a51c90ca06d85ff65567/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=10a6e5ebbad8f28719c6a51c90ca06d85ff65567",
        "patch": "@@ -561,4 +561,17 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n     bool HaveCoins(const uint256 &txid) const;\n };\n \n+// We want to sort transactions by coin age priority\n+typedef std::pair<double, CTxMemPool::txiter> TxCoinAgePriority;\n+\n+struct TxCoinAgePriorityCompare\n+{\n+    bool operator()(const TxCoinAgePriority& a, const TxCoinAgePriority& b)\n+    {\n+        if (a.first == b.first)\n+            return CompareTxMemPoolEntryByScore()(*(b.second), *(a.second)); //Reverse order to make sort less than\n+        return a.first < b.first;\n+    }\n+};\n+\n #endif // BITCOIN_TXMEMPOOL_H"
      }
    ]
  },
  {
    "sha": "4f344f58ca040b3134b329a51ab76d08edbdd556",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjM0NGY1OGNhMDQwYjMxMzRiMzI5YTUxYWI3NmQwOGVkYmRkNTU2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T17:15:48Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T20:47:52Z"
      },
      "message": "BatchWrite can take set of hashes to leave hot in cache",
      "tree": {
        "sha": "7965178056680b669cac049e4d4e0a8a46b7468c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7965178056680b669cac049e4d4e0a8a46b7468c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f344f58ca040b3134b329a51ab76d08edbdd556",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f344f58ca040b3134b329a51ab76d08edbdd556",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f344f58ca040b3134b329a51ab76d08edbdd556",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f344f58ca040b3134b329a51ab76d08edbdd556/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10a6e5ebbad8f28719c6a51c90ca06d85ff65567",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a6e5ebbad8f28719c6a51c90ca06d85ff65567",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10a6e5ebbad8f28719c6a51c90ca06d85ff65567"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 30,
      "deletions": 16
    },
    "files": [
      {
        "sha": "fa85800537aa9c6a3b40d9158a217fbdd7f615cf",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f344f58ca040b3134b329a51ab76d08edbdd556/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f344f58ca040b3134b329a51ab76d08edbdd556/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=4f344f58ca040b3134b329a51ab76d08edbdd556",
        "patch": "@@ -44,7 +44,7 @@ bool CCoins::Spend(uint32_t nPos)\n bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n-bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n+bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, size_t &hotUsage, const std::set<uint256> *hotHashes) { return false; }\n bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }\n \n \n@@ -53,7 +53,7 @@ bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { retu\n bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n-bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n+bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, size_t &hotUsage, const std::set<uint256> *hotHashes) { return base->BatchWrite(mapCoins, hashBlock, hotUsage, hotHashes); }\n bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStats(stats); }\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n@@ -145,7 +145,7 @@ void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n     hashBlock = hashBlockIn;\n }\n \n-bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n+bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn, size_t &hotUsage, const std::set<uint256> *hotHashes) {\n     assert(!hasModifier);\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n@@ -181,14 +181,15 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n+    hotUsage = 0; // All coins have been erased from mapCoins\n     hashBlock = hashBlockIn;\n     return true;\n }\n \n-bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n-    cacheCoins.clear();\n-    cachedCoinsUsage = 0;\n+bool CCoinsViewCache::Flush(const std::set<uint256> *hotHashes) {\n+    size_t hotUsage = 0;\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, hotUsage, hotHashes);\n+    cachedCoinsUsage = hotUsage;\n     return fOk;\n }\n "
      },
      {
        "sha": "46ccec547daef213122c1e4987214f3204f42ef5",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f344f58ca040b3134b329a51ab76d08edbdd556/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f344f58ca040b3134b329a51ab76d08edbdd556/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=4f344f58ca040b3134b329a51ab76d08edbdd556",
        "patch": "@@ -327,7 +327,9 @@ class CCoinsView\n \n     //! Do a bulk modification (multiple CCoins changes + BestBlock change).\n     //! The passed mapCoins can be modified.\n-    virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    //! Any coins contained in hotHashes may not be erased from mapCoins (only used by CCoinsViewDB)\n+    //! Usage of non-erased coins returned in hotUsage\n+    virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, size_t &hotUsage, const std::set<uint256> *hotHashes);\n \n     //! Calculate statistics about the unspent transaction output set\n     virtual bool GetStats(CCoinsStats &stats) const;\n@@ -349,7 +351,7 @@ class CCoinsViewBacked : public CCoinsView\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n     void SetBackend(CCoinsView &viewIn);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, size_t &hotUsage, const std::set<uint256> *hotHashes);\n     bool GetStats(CCoinsStats &stats) const;\n };\n \n@@ -403,7 +405,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n     void SetBestBlock(const uint256 &hashBlock);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, size_t &hotUsage, const std::set<uint256> *hotHashes);\n \n     /**\n      * Return a pointer to CCoins in the cache, or NULL if not found. This is\n@@ -423,8 +425,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n      * Push the modifications applied to this cache to its base.\n      * Failure to call this method before destruction will cause the changes to be forgotten.\n      * If false is returned, the state of this cache (and its backing view) will be undefined.\n+     * This cache will be cleared of all entries not contained in hotHashes\n      */\n-    bool Flush();\n+    bool Flush(const std::set<uint256> *hotHashes = NULL);\n \n     //! Calculate the size of the cache (in number of transactions)\n     unsigned int GetCacheSize() const;"
      },
      {
        "sha": "2af538b1ef7977dd0191fd767aef9deee911f1c5",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f344f58ca040b3134b329a51ab76d08edbdd556/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f344f58ca040b3134b329a51ab76d08edbdd556/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=4f344f58ca040b3134b329a51ab76d08edbdd556",
        "patch": "@@ -42,7 +42,7 @@ class CCoinsViewTest : public CCoinsView\n \n     uint256 GetBestBlock() const { return hashBestBlock_; }\n \n-    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock)\n+    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock, size_t &hotUsage, const std::set<uint256> *hotHashes)\n     {\n         for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); ) {\n             map_[it->first] = it->second.coins;"
      },
      {
        "sha": "6c52fbf9f28e81548707ea0d6c51b1a098e82137",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f344f58ca040b3134b329a51ab76d08edbdd556/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f344f58ca040b3134b329a51ab76d08edbdd556/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=4f344f58ca040b3134b329a51ab76d08edbdd556",
        "patch": "@@ -48,10 +48,12 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n     return hashBestChain;\n }\n \n-bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n+bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, size_t &hotUsage, const std::set<uint256> *hotHashes) {\n     CDBBatch batch(&db.GetObfuscateKey());\n     size_t count = 0;\n     size_t changed = 0;\n+    size_t left = 0;\n+    hotUsage = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n             if (it->second.coins.IsPruned())\n@@ -62,12 +64,20 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         }\n         count++;\n         CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n+        if (!hotHashes || !hotHashes->count(itOld->first)) {\n+            mapCoins.erase(itOld);\n+        }\n+        else {\n+            itOld->second.flags = 0; // The entry has been written to the database\n+            hotUsage += itOld->second.coins.DynamicMemoryUsage();\n+            left++;\n+        }\n     }\n     if (!hashBlock.IsNull())\n         batch.Write(DB_BEST_BLOCK, hashBlock);\n \n-    LogPrint(\"coindb\", \"Committing %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n+    LogPrint(\"coindb\", \"Committing %u changed transactions (out of %u) to coin database, leaving %u tx cached for %u usage...\\n\",\n+             (unsigned int)changed, (unsigned int)count, (unsigned int)left, (unsigned int)hotUsage);\n     return db.WriteBatch(batch);\n }\n "
      },
      {
        "sha": "1254cc938d4b77df684f9489d8604bbfdda8c7ce",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f344f58ca040b3134b329a51ab76d08edbdd556/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f344f58ca040b3134b329a51ab76d08edbdd556/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=4f344f58ca040b3134b329a51ab76d08edbdd556",
        "patch": "@@ -37,7 +37,7 @@ class CCoinsViewDB : public CCoinsView\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, size_t &hotUsage, const std::set<uint256> *hotHashes);\n     bool GetStats(CCoinsStats &stats) const;\n };\n "
      }
    ]
  },
  {
    "sha": "016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTZlNDE2N2RmYzkyNjFhNjZlZjJmOWJiZmQzN2ZhMmZiOTdlZjU5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T18:20:27Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T20:47:52Z"
      },
      "message": "Caclculate set of hot hashes to leave in cache",
      "tree": {
        "sha": "323295a8473f7eb0f81f6957377f327a8024d78a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/323295a8473f7eb0f81f6957377f327a8024d78a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f344f58ca040b3134b329a51ab76d08edbdd556",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f344f58ca040b3134b329a51ab76d08edbdd556",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f344f58ca040b3134b329a51ab76d08edbdd556"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 55,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d4140662c3e94be27c6646ebd741a2a18a9bc181",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59",
        "patch": "@@ -1910,6 +1910,18 @@ enum FlushStateMode {\n     FLUSH_STATE_ALWAYS\n };\n \n+void static CalculateHotCache(std::set<uint256> &hotHashes) {\n+    // Try to keep the txins needed for the next 3 anticipated blocks hot in the cache\n+    // Don't examine txs whose total bytes are more than 0.5% of nCoinCacheUsage, because\n+    // there can be a signficant expansion factor for all the txins required.\n+    size_t totalSize = std::min((size_t)(3 * MAX_BLOCK_SIZE), nCoinCacheUsage / 200);\n+    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n+    nBlockPrioritySize = std::min(MAX_BLOCK_SIZE, nBlockPrioritySize);\n+    size_t prioritySize = (size_t)(((uint64_t)nBlockPrioritySize * totalSize)/MAX_BLOCK_SIZE);\n+    size_t scoreSize = totalSize - prioritySize;\n+    mempool.FindHotHashes(prioritySize, scoreSize, hotHashes, chainActive.Height());\n+}\n+\n /**\n  * Update the on-disk chain state.\n  * The caches and indexes are flushed depending on the mode we're called with\n@@ -1996,8 +2008,11 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n         // overwrite one. Still, use a conservative safety factor of 2.\n         if (!CheckDiskSpace(128 * 2 * 2 * pcoinsTip->GetCacheSize()))\n             return state.Error(\"out of disk space\");\n+        // Calculate which coins to leave in the pcoinsTip cache\n+        std::set<uint256> hotHashes;\n+        CalculateHotCache(hotHashes);\n         // Flush the chainstate (which may refer to block index entries).\n-        if (!pcoinsTip->Flush())\n+        if (!pcoinsTip->Flush(&hotHashes))\n             return AbortNode(state, \"Failed to write to coin database\");\n         nLastFlush = nNow;\n     }"
      },
      {
        "sha": "f138aa2d8d0c412235b0c55c34a5464faaf9d109",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59",
        "patch": "@@ -941,3 +941,41 @@ void CTxMemPool::TrimToSize(size_t sizelimit) {\n     if (maxFeeRateRemoved > CFeeRate(0))\n         LogPrint(\"mempool\", \"Removed %u txn, rolling minimum fee bumped to %s\\n\", nTxnRemoved, maxFeeRateRemoved.ToString());\n }\n+\n+void CTxMemPool::FindHotHashes(size_t prioritySize, size_t scoreSize, std::set<uint256> &hotHashes, unsigned int chainHeight) {\n+    LOCK(cs);\n+    vector<TxCoinAgePriority> vecPriority;\n+    TxCoinAgePriorityCompare pricomparer;\n+    size_t scoreBytesCovered = 0;\n+    size_t priBytesCovered = 0;\n+    vecPriority.reserve(mapTx.size());\n+    CTxMemPool::indexed_transaction_set::nth_index<3>::type::iterator mi = mapTx.get<3>().begin();\n+    while (mi != mapTx.get<3>().end())\n+    {\n+        if (scoreBytesCovered < scoreSize) {\n+            BOOST_FOREACH(const CTxIn& txin, mi->GetTx().vin)\n+            {\n+                hotHashes.insert(txin.prevout.hash);\n+            }\n+            scoreBytesCovered += mi->GetTxSize();\n+        }\n+        double dPriority = mi->GetPriority(chainHeight);\n+        CAmount dummy;\n+        ApplyDeltas(mi->GetTx().GetHash(), dPriority, dummy);\n+        vecPriority.push_back(TxCoinAgePriority(dPriority, mapTx.project<0>(mi)));\n+        mi++;\n+    }\n+    std::make_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+    while (priBytesCovered < prioritySize && !vecPriority.empty()) {\n+        txiter iter = vecPriority.front().second;\n+        std::pop_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+        vecPriority.pop_back();\n+        BOOST_FOREACH(const CTxIn& txin, iter->GetTx().vin)\n+        {\n+            hotHashes.insert(txin.prevout.hash);\n+        }\n+        priBytesCovered += iter->GetTxSize();\n+    }\n+    return;\n+\n+}"
      },
      {
        "sha": "66c70e0c35dfe61a2b931eb11cbc6d74324c1989",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=016e4167dfc9261a66ef2f9bbfd37fa2fb97ef59",
        "patch": "@@ -502,6 +502,7 @@ class CTxMemPool\n     bool ReadFeeEstimates(CAutoFile& filein);\n \n     size_t DynamicMemoryUsage() const;\n+    void FindHotHashes(size_t prioritySize, size_t scoreSize, std::set<uint256> &hotHashes, unsigned int chainHeight);\n \n private:\n     /** UpdateForDescendants is used by UpdateTransactionsFromBlock to update"
      }
    ]
  }
]