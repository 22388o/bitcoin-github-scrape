[
  {
    "sha": "c4d884e20eae34bb157a8bd332b733d6d4313254",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGQ4ODRlMjBlYWUzNGJiMTU3YThiZDMzMmI3MzNkNmQ0MzEzMjU0",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-09-07T18:30:53Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-10-29T17:34:35Z"
      },
      "message": "No need for test fixture now that multisig is enabled on main network.",
      "tree": {
        "sha": "030057501de864752ca3ad4ee2799336c366dfab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/030057501de864752ca3ad4ee2799336c366dfab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4d884e20eae34bb157a8bd332b733d6d4313254",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4d884e20eae34bb157a8bd332b733d6d4313254",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4d884e20eae34bb157a8bd332b733d6d4313254",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4d884e20eae34bb157a8bd332b733d6d4313254/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c13f5dbecf2bc22e81ad847f0cf4b1bf632cdd8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c13f5dbecf2bc22e81ad847f0cf4b1bf632cdd8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c13f5dbecf2bc22e81ad847f0cf4b1bf632cdd8d"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 1,
      "deletions": 8
    },
    "files": [
      {
        "sha": "505ec8f5f7ea959bda14f89bb76386fd5e505d9b",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4d884e20eae34bb157a8bd332b733d6d4313254/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4d884e20eae34bb157a8bd332b733d6d4313254/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=c4d884e20eae34bb157a8bd332b733d6d4313254",
        "patch": "@@ -22,14 +22,7 @@ createArgs(int nRequired, const char* address1=NULL, const char* address2=NULL)\n     return result;\n }\n \n-// This can be removed this when addmultisigaddress is enabled on main net:\n-struct TestNetFixture\n-{\n-    TestNetFixture() { fTestNet = true; }\n-    ~TestNetFixture() { fTestNet = false; }\n-};\n-\n-BOOST_FIXTURE_TEST_CASE(rpc_addmultisig, TestNetFixture)\n+BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n {\n     rpcfn_type addmultisig = tableRPC[\"addmultisigaddress\"]->actor;\n "
      }
    ]
  },
  {
    "sha": "2d43f88e1fbccf5b03db12a40567c5ef40029173",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDQzZjg4ZTFmYmNjZjViMDNkYjEyYTQwNTY3YzVlZjQwMDI5MTcz",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-09-08T00:54:27Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-10-29T17:34:35Z"
      },
      "message": "Tests for raw transactions argument checking",
      "tree": {
        "sha": "89a43598e508eded3febd865080c904805c6252d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89a43598e508eded3febd865080c904805c6252d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d43f88e1fbccf5b03db12a40567c5ef40029173",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d43f88e1fbccf5b03db12a40567c5ef40029173",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d43f88e1fbccf5b03db12a40567c5ef40029173",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d43f88e1fbccf5b03db12a40567c5ef40029173/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4d884e20eae34bb157a8bd332b733d6d4313254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4d884e20eae34bb157a8bd332b733d6d4313254",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4d884e20eae34bb157a8bd332b733d6d4313254"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 113,
      "deletions": 29
    },
    "files": [
      {
        "sha": "54b463111f04208d7d82c4bfd118060e0f90a40d",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 28,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d43f88e1fbccf5b03db12a40567c5ef40029173/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d43f88e1fbccf5b03db12a40567c5ef40029173/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=2d43f88e1fbccf5b03db12a40567c5ef40029173",
        "patch": "@@ -18,6 +18,39 @@ using namespace boost;\n using namespace boost::assign;\n using namespace json_spirit;\n \n+//\n+// Utilities: convert hex-encoded Values\n+// (throws error if not hex).\n+//\n+uint256 ParseHashV(const Value& v, string strName)\n+{\n+    string strHex;\n+    if (v.type() == str_type)\n+        strHex = v.get_str();\n+    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+    uint256 result;\n+    result.SetHex(strHex);\n+    return result;\n+}\n+uint256 ParseHashO(const Object& o, string strKey)\n+{\n+    return ParseHashV(find_value(o, strKey), strKey);\n+}\n+vector<unsigned char> ParseHexV(const Value& v, string strName)\n+{\n+    string strHex;\n+    if (v.type() == str_type)\n+        strHex = v.get_str();\n+    if (!IsHex(strHex))\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+    return ParseHex(strHex);\n+}\n+vector<unsigned char> ParseHexO(const Object& o, string strKey)\n+{\n+    return ParseHexV(find_value(o, strKey), strKey);\n+}\n+\n void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out)\n {\n     txnouttype type;\n@@ -109,8 +142,7 @@ Value getrawtransaction(const Array& params, bool fHelp)\n             \"If verbose is non-zero, returns an Object\\n\"\n             \"with information about <txid>.\");\n \n-    uint256 hash;\n-    hash.SetHex(params[0].get_str());\n+    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n \n     bool fVerbose = false;\n     if (params.size() > 1)\n@@ -178,10 +210,10 @@ Value listunspent(const Array& params, bool fHelp)\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n             continue;\n \n-        if(setAddress.size())\n+        if (setAddress.size())\n         {\n             CTxDestination address;\n-            if(!ExtractDestination(out.tx->vout[out.i].scriptPubKey, address))\n+            if (!ExtractDestination(out.tx->vout[out.i].scriptPubKey, address))\n                 continue;\n \n             if (!setAddress.count(address))\n@@ -221,16 +253,11 @@ Value createrawtransaction(const Array& params, bool fHelp)\n \n     CTransaction rawTx;\n \n-    BOOST_FOREACH(Value& input, inputs)\n+    BOOST_FOREACH(const Value& input, inputs)\n     {\n         const Object& o = input.get_obj();\n \n-        const Value& txid_v = find_value(o, \"txid\");\n-        if (txid_v.type() != str_type)\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing txid key\");\n-        string txid = txid_v.get_str();\n-        if (!IsHex(txid))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected hex txid\");\n+        uint256 txid = ParseHashO(o, \"txid\");\n \n         const Value& vout_v = find_value(o, \"vout\");\n         if (vout_v.type() != int_type)\n@@ -239,7 +266,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n         if (nOutput < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n \n-        CTxIn in(COutPoint(uint256(txid), nOutput));\n+        CTxIn in(COutPoint(txid, nOutput));\n         rawTx.vin.push_back(in);\n     }\n \n@@ -274,9 +301,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n             \"decoderawtransaction <hex string>\\n\"\n             \"Return a JSON object representing the serialized, hex-encoded transaction.\");\n \n-    RPCTypeCheck(params, list_of(str_type));\n-\n-    vector<unsigned char> txData(ParseHex(params[0].get_str()));\n+    vector<unsigned char> txData(ParseHexV(params[0], \"argument\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     CTransaction tx;\n     try {\n@@ -311,7 +336,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     RPCTypeCheck(params, list_of(str_type)(array_type)(array_type)(str_type), true);\n \n-    vector<unsigned char> txData(ParseHex(params[0].get_str()));\n+    vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     vector<CTransaction> txVariants;\n     while (!ssData.empty())\n@@ -365,20 +390,13 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n             RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type));\n \n-            string txidHex = find_value(prevOut, \"txid\").get_str();\n-            if (!IsHex(txidHex))\n-                throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"txid must be hexadecimal\");\n-            uint256 txid;\n-            txid.SetHex(txidHex);\n+            uint256 txid = ParseHashO(prevOut, \"txid\");\n \n             int nOut = find_value(prevOut, \"vout\").get_int();\n             if (nOut < 0)\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"vout must be positive\");\n \n-            string pkHex = find_value(prevOut, \"scriptPubKey\").get_str();\n-            if (!IsHex(pkHex))\n-                throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"scriptPubKey must be hexadecimal\");\n-            vector<unsigned char> pkData(ParseHex(pkHex));\n+            vector<unsigned char> pkData(ParseHexO(prevOut, \"scriptPubKey\"));\n             CScript scriptPubKey(pkData.begin(), pkData.end());\n \n             CCoins coins;\n@@ -484,10 +502,8 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n             \"sendrawtransaction <hex string>\\n\"\n             \"Submits raw transaction (serialized, hex-encoded) to local node and network.\");\n \n-    RPCTypeCheck(params, list_of(str_type));\n-\n     // parse hex string from parameter\n-    vector<unsigned char> txData(ParseHex(params[0].get_str()));\n+    vector<unsigned char> txData(ParseHexV(params[0], \"parameter\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     CTransaction tx;\n "
      },
      {
        "sha": "43f6458f88aa649efad1c6c146a0f25ed7d20a4d",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 1,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d43f88e1fbccf5b03db12a40567c5ef40029173/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d43f88e1fbccf5b03db12a40567c5ef40029173/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=2d43f88e1fbccf5b03db12a40567c5ef40029173",
        "patch": "@@ -1,5 +1,6 @@\n-#include <boost/test/unit_test.hpp>\n+#include <boost/algorithm/string.hpp>\n #include <boost/foreach.hpp>\n+#include <boost/test/unit_test.hpp>\n \n #include \"base58.h\"\n #include \"util.h\"\n@@ -59,4 +60,71 @@ BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n     BOOST_CHECK_THROW(addmultisig(createArgs(2, short2.c_str()), false), runtime_error);\n }\n \n+static Value CallRPC(string args)\n+{\n+    vector<string> vArgs;\n+    boost::split(vArgs, args, boost::is_any_of(\" \\t\"));\n+    string strMethod = vArgs[0];\n+    vArgs.erase(vArgs.begin());\n+    Array params = RPCConvertValues(strMethod, vArgs);\n+\n+    rpcfn_type method = tableRPC[strMethod]->actor;\n+    try {\n+        Value result = (*method)(params, false);\n+        return result;\n+    }\n+    catch (Object& objError)\n+    {\n+        throw runtime_error(find_value(objError, \"message\").get_str());\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(rpc_rawparams)\n+{\n+    // Test raw transaction API argument handling\n+    Value r;\n+\n+    BOOST_CHECK_THROW(CallRPC(\"getrawtransaction\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"getrawtransaction not_hex\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"getrawtransaction a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed not_int\"), runtime_error);\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(\"listunspent\"));\n+    BOOST_CHECK_THROW(CallRPC(\"listunspent string\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"listunspent 0 string\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"listunspent 0 1 not_array\"), runtime_error);\n+    BOOST_CHECK_NO_THROW(r=CallRPC(\"listunspent 0 1 []\"));\n+    BOOST_CHECK_THROW(r=CallRPC(\"listunspent 0 1 [] extra\"), runtime_error);\n+    BOOST_CHECK(r.get_array().empty());\n+\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction null null\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction not_array\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [] []\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction {} {}\"), runtime_error);\n+    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [] {}\"));\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [] {} extra\"), runtime_error);\n+\n+    BOOST_CHECK_THROW(CallRPC(\"decoderawtransaction\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"decoderawtransaction null\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"decoderawtransaction DEADBEEF\"), runtime_error);\n+    string rawtx = \"0100000001a15d57094aa7a21a28cb20b59aab8fc7d1149a3bdbcddba9c622e4f5f6a99ece010000006c493046022100f93bb0e7d8db7bd46e40132d1f8242026e045f03a0efe71bbb8e3f475e970d790221009337cd7f1f929f00cc6ff01f03729b069a7c21b59b1736ddfee5db5946c5da8c0121033b9b137ee87d5a812d6f506efdd37f0affa7ffc310711c06c7f3e097c9447c52ffffffff0100e1f505000000001976a9140389035a9225b3839e2bbf32d826a1e222031fd888ac00000000\";\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"decoderawtransaction \")+rawtx));\n+    BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"version\").get_int(), 1);\n+    BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"locktime\").get_int(), 0);\n+    BOOST_CHECK_THROW(r = CallRPC(string(\"decoderawtransaction \")+rawtx+\" extra\"), runtime_error);\n+\n+    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction null\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction ff00\"), runtime_error);\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"signrawtransaction \")+rawtx));\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"signrawtransaction \")+rawtx+\" null null NONE|ANYONECANPAY\"));\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"signrawtransaction \")+rawtx+\" [] [] NONE|ANYONECANPAY\"));\n+    BOOST_CHECK_THROW(CallRPC(string(\"signrawtransaction \")+rawtx+\" null null badenum\"), runtime_error);\n+\n+    // Only check failure cases for sendrawtransaction, there's no network to send to...\n+    BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction null\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction DEADBEEF\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(string(\"sendrawtransaction \")+rawtx+\" extra\"), runtime_error);\n+}\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "03346a61b175420681bec120656ac1d5db169547",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzM0NmE2MWIxNzU0MjA2ODFiZWMxMjA2NTZhYzFkNWRiMTY5NTQ3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-09-08T01:05:20Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-10-29T17:34:35Z"
      },
      "message": "Add redeemScript to listunspent output and signrawtransaction input\n\nsignrawtransaction was unable to sign pay-to-script-hash inputs\nwhen given the list of private keys to use. With this commit\nyou can provide the p2sh redemption script in the list of\ninputs.",
      "tree": {
        "sha": "68b4b53393031bb6964b94572d1820ee04eb7c0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68b4b53393031bb6964b94572d1820ee04eb7c0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03346a61b175420681bec120656ac1d5db169547",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03346a61b175420681bec120656ac1d5db169547",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03346a61b175420681bec120656ac1d5db169547",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03346a61b175420681bec120656ac1d5db169547/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d43f88e1fbccf5b03db12a40567c5ef40029173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d43f88e1fbccf5b03db12a40567c5ef40029173",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d43f88e1fbccf5b03db12a40567c5ef40029173"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 66,
      "deletions": 23
    },
    "files": [
      {
        "sha": "e82f4ad91daad16986ffd68f5a4ca9fa6d9581b1",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 23,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03346a61b175420681bec120656ac1d5db169547/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03346a61b175420681bec120656ac1d5db169547/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=03346a61b175420681bec120656ac1d5db169547",
        "patch": "@@ -226,6 +226,17 @@ Value listunspent(const Array& params, bool fHelp)\n         entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n         entry.push_back(Pair(\"vout\", out.i));\n         entry.push_back(Pair(\"scriptPubKey\", HexStr(pk.begin(), pk.end())));\n+        if (pk.IsPayToScriptHash())\n+        {\n+            CTxDestination address;\n+            if (ExtractDestination(pk, address))\n+            {\n+                const CScriptID& hash = boost::get<const CScriptID&>(address);\n+                CScript redeemScript;\n+                if (pwalletMain->GetCScript(hash, redeemScript))\n+                    entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n+            }\n+        }\n         entry.push_back(Pair(\"amount\",ValueFromAmount(nValue)));\n         entry.push_back(Pair(\"confirmations\",out.nDepth));\n         results.push_back(entry);\n@@ -321,7 +332,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n-            \"signrawtransaction <hex string> [{\\\"txid\\\":txid,\\\"vout\\\":n,\\\"scriptPubKey\\\":hex},...] [<privatekey1>,...] [sighashtype=\\\"ALL\\\"]\\n\"\n+            \"signrawtransaction <hex string> [{\\\"txid\\\":txid,\\\"vout\\\":n,\\\"scriptPubKey\\\":hex,\\\"redeemScript\\\":hex},...] [<privatekey1>,...] [sighashtype=\\\"ALL\\\"]\\n\"\n             \"Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n             \"Second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n             \"this transaction depends on but may not yet be in the block chain.\\n\"\n@@ -377,6 +388,28 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n     }\n \n+    bool fGivenKeys = false;\n+    CBasicKeyStore tempKeystore;\n+    if (params.size() > 2 && params[2].type() != null_type)\n+    {\n+        fGivenKeys = true;\n+        Array keys = params[2].get_array();\n+        BOOST_FOREACH(Value k, keys)\n+        {\n+            CBitcoinSecret vchSecret;\n+            bool fGood = vchSecret.SetString(k.get_str());\n+            if (!fGood)\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+            CKey key;\n+            bool fCompressed;\n+            CSecret secret = vchSecret.GetSecret(fCompressed);\n+            key.SetSecret(secret, fCompressed);\n+            tempKeystore.AddKey(key);\n+        }\n+    }\n+    else\n+        EnsureWalletIsUnlocked();\n+\n     // Add previous txouts given in the RPC call:\n     if (params.size() > 1 && params[1].type() != null_type)\n     {\n@@ -388,7 +421,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n             Object prevOut = p.get_obj();\n \n-            RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type));\n+            RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type)(\"redeemScript\",str_type));\n \n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n@@ -409,33 +442,23 @@ Value signrawtransaction(const Array& params, bool fHelp)\n                 }\n                 // what todo if txid is known, but the actual output isn't?\n             }\n+            if ((unsigned int)nOut >= coins.vout.size())\n+                coins.vout.resize(nOut+1);\n             coins.vout[nOut].scriptPubKey = scriptPubKey;\n             coins.vout[nOut].nValue = 0; // we don't know the actual output value\n             view.SetCoins(txid, coins);\n-        }\n-    }\n \n-    bool fGivenKeys = false;\n-    CBasicKeyStore tempKeystore;\n-    if (params.size() > 2 && params[2].type() != null_type)\n-    {\n-        fGivenKeys = true;\n-        Array keys = params[2].get_array();\n-        BOOST_FOREACH(Value k, keys)\n-        {\n-            CBitcoinSecret vchSecret;\n-            bool fGood = vchSecret.SetString(k.get_str());\n-            if (!fGood)\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY,\"Invalid private key\");\n-            CKey key;\n-            bool fCompressed;\n-            CSecret secret = vchSecret.GetSecret(fCompressed);\n-            key.SetSecret(secret, fCompressed);\n-            tempKeystore.AddKey(key);\n+            // if redeemScript given and not using the local wallet (private keys\n+            // given), add redeemScript to the tempKeystore so it can be signed:\n+            Value v = find_value(prevOut, \"redeemScript\");\n+            if (fGivenKeys && scriptPubKey.IsPayToScriptHash() && !(v == Value::null))\n+            {\n+                vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n+                CScript redeemScript(rsData.begin(), rsData.end());\n+                tempKeystore.AddCScript(redeemScript);\n+            }\n         }\n     }\n-    else\n-        EnsureWalletIsUnlocked();\n \n     const CKeyStore& keystore = (fGivenKeys ? tempKeystore : *pwalletMain);\n "
      },
      {
        "sha": "f8fe443b877af6fe3a3e037debb61e18abb7a7ac",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03346a61b175420681bec120656ac1d5db169547/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03346a61b175420681bec120656ac1d5db169547/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=03346a61b175420681bec120656ac1d5db169547",
        "patch": "@@ -127,4 +127,24 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction DEADBEEF\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(string(\"sendrawtransaction \")+rawtx+\" extra\"), runtime_error);\n }\n+\n+BOOST_AUTO_TEST_CASE(rpc_rawsign)\n+{\n+    Value r;\n+    // input is a 1-of-2 multisig (so is output):\n+    string prevout =\n+      \"[{\\\"txid\\\":\\\"b4cc287e58f87cdae59417329f710f3ecd75a4ee1d2872b7248f50977c8493f3\\\",\"\n+      \"\\\"vout\\\":1,\\\"scriptPubKey\\\":\\\"a914b10c9df5f7edf436c697f02f1efdba4cf399615187\\\",\"\n+      \"\\\"redeemScript\\\":\\\"512103debedc17b3df2badbcdd86d5feb4562b86fe182e5998abd8bcd4f122c6155b1b21027e940bb73ab8732bfdf7f9216ecefca5b94d6df834e77e108f68e66f126044c052ae\\\"}]\";\n+    r = CallRPC(string(\"createrawtransaction \")+prevout+\" \"+\n+      \"{\\\"3HqAe9LtNBjnsfM4CyYaWTnvCaUYT7v4oZ\\\":11}\");\n+    string notsigned = r.get_str();\n+    string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n+    string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n+    r = CallRPC(string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[]\");\n+    BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n+    r = CallRPC(string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[\"+privkey1+\",\"+privkey2+\"]\");\n+    BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "34226be7a8f5bbe1703141d39328ab99becb78c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDIyNmJlN2E4ZjViYmUxNzAzMTQxZDM5MzI4YWI5OWJlY2I3OGM1",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-09-10T13:32:40Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-10-29T17:34:35Z"
      },
      "message": "New createmultisig rpc command\n\nThis is to support the signrawtransaction API call; given the public\nkeys involved in a multisig transaction, this gives back the redeemScript\nneeded to sign it.",
      "tree": {
        "sha": "a88e75956733589bc9d2af6f8c3e2f860e762762",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a88e75956733589bc9d2af6f8c3e2f860e762762"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34226be7a8f5bbe1703141d39328ab99becb78c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34226be7a8f5bbe1703141d39328ab99becb78c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34226be7a8f5bbe1703141d39328ab99becb78c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34226be7a8f5bbe1703141d39328ab99becb78c5/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03346a61b175420681bec120656ac1d5db169547",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03346a61b175420681bec120656ac1d5db169547",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03346a61b175420681bec120656ac1d5db169547"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 52,
      "deletions": 15
    },
    "files": [
      {
        "sha": "21e37c75e1c60633a1da5beaaa2dc29b0826ba1e",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34226be7a8f5bbe1703141d39328ab99becb78c5/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34226be7a8f5bbe1703141d39328ab99becb78c5/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=34226be7a8f5bbe1703141d39328ab99becb78c5",
        "patch": "@@ -234,6 +234,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"sendfrom\",               &sendfrom,               false,  false },\n     { \"sendmany\",               &sendmany,               false,  false },\n     { \"addmultisigaddress\",     &addmultisigaddress,     false,  false },\n+    { \"createmultisig\",         &createmultisig,         true,   true  },\n     { \"getrawmempool\",          &getrawmempool,          true,   false },\n     { \"getblock\",               &getblock,               false,  false },\n     { \"getblockhash\",           &getblockhash,           false,  false },\n@@ -1160,6 +1161,8 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"sendmany\"               && n > 2) ConvertTo<boost::int64_t>(params[2]);\n     if (strMethod == \"addmultisigaddress\"     && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"addmultisigaddress\"     && n > 1) ConvertTo<Array>(params[1]);\n+    if (strMethod == \"createmultisig\"         && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"createmultisig\"         && n > 1) ConvertTo<Array>(params[1]);\n     if (strMethod == \"listunspent\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"listunspent\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"listunspent\"            && n > 2) ConvertTo<Array>(params[2]);"
      },
      {
        "sha": "dc4dc303a80a269611f7d372dc8f97d187613707",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34226be7a8f5bbe1703141d39328ab99becb78c5/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34226be7a8f5bbe1703141d39328ab99becb78c5/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=34226be7a8f5bbe1703141d39328ab99becb78c5",
        "patch": "@@ -158,6 +158,7 @@ extern json_spirit::Value movecmd(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value sendfrom(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value sendmany(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value addmultisigaddress(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value createmultisig(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listreceivedbyaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listreceivedbyaccount(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listtransactions(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "cd91f650a8329ea43aaa2cd003e93b706c1254a9",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 15,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34226be7a8f5bbe1703141d39328ab99becb78c5/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34226be7a8f5bbe1703141d39328ab99becb78c5/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=34226be7a8f5bbe1703141d39328ab99becb78c5",
        "patch": "@@ -702,22 +702,13 @@ Value sendmany(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n-Value addmultisigaddress(const Array& params, bool fHelp)\n+//\n+// Used by addmultisigaddress / createmultisig:\n+//\n+static CScript _createmultisig(const Array& params)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 3)\n-    {\n-        string msg = \"addmultisigaddress <nrequired> <'[\\\"key\\\",\\\"key\\\"]'> [account]\\n\"\n-            \"Add a nrequired-to-sign multisignature address to the wallet\\\"\\n\"\n-            \"each key is a Bitcoin address or hex-encoded public key\\n\"\n-            \"If [account] is specified, assign address to [account].\";\n-        throw runtime_error(msg);\n-    }\n-\n     int nRequired = params[0].get_int();\n     const Array& keys = params[1].get_array();\n-    string strAccount;\n-    if (params.size() > 2)\n-        strAccount = AccountFromValue(params[2]);\n \n     // Gather public keys\n     if (nRequired < 1)\n@@ -760,17 +751,59 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n             throw runtime_error(\" Invalid public key: \"+ks);\n         }\n     }\n+    CScript result;\n+    result.SetMultisig(nRequired, pubkeys);\n+    return result;\n+}\n+\n+Value addmultisigaddress(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+    {\n+        string msg = \"addmultisigaddress <nrequired> <'[\\\"key\\\",\\\"key\\\"]'> [account]\\n\"\n+            \"Add a nrequired-to-sign multisignature address to the wallet\\\"\\n\"\n+            \"each key is a Bitcoin address or hex-encoded public key\\n\"\n+            \"If [account] is specified, assign address to [account].\";\n+        throw runtime_error(msg);\n+    }\n+\n+    string strAccount;\n+    if (params.size() > 2)\n+        strAccount = AccountFromValue(params[2]);\n \n     // Construct using pay-to-script-hash:\n-    CScript inner;\n-    inner.SetMultisig(nRequired, pubkeys);\n+    CScript inner = _createmultisig(params);\n     CScriptID innerID = inner.GetID();\n     pwalletMain->AddCScript(inner);\n \n     pwalletMain->SetAddressBookName(innerID, strAccount);\n     return CBitcoinAddress(innerID).ToString();\n }\n \n+Value createmultisig(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 2 || params.size() > 2)\n+    {\n+        string msg = \"createmultisig <nrequired> <'[\\\"key\\\",\\\"key\\\"]'>\\n\"\n+            \"Creates a multi-signature address and returns a json object\\n\"\n+            \"with keys:\\n\"\n+            \"address : bitcoin address\\n\"\n+            \"redeemScript : hex-encoded redemption script\";\n+        throw runtime_error(msg);\n+    }\n+\n+    // Construct using pay-to-script-hash:\n+    CScript inner = _createmultisig(params);\n+    CScriptID innerID = inner.GetID();\n+    CBitcoinAddress address(innerID);\n+\n+    Object result;\n+    result.push_back(Pair(\"address\", address.ToString()));\n+    result.push_back(Pair(\"redeemScript\", HexStr(inner.begin(), inner.end())));\n+\n+    return result;\n+}\n+\n \n struct tallyitem\n {"
      }
    ]
  }
]