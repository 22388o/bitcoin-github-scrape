[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645671781",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-645671781",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 645671781,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTY3MTc4MQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T23:07:37Z",
    "updated_at": "2020-08-07T16:59:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19607 ([p2p] Add Peer struct for per-peer data in net processing by jnewbery)\n* #19064 (refactor: Cleanup thread ctor calls by hebasto)\n* #18421 (Periodically update DNS caches for better privacy of non-reachable nodes by naumenkogs)\n* #17428 (p2p: Try to preserve outbound block-relay-only connections during restart by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645671781/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645829587",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-645829587",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 645829587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTgyOTU4Nw==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-18T07:18:46Z",
    "updated_at": "2020-06-18T07:18:46Z",
    "author_association": "MEMBER",
    "body": "Concept ACK.\r\n\r\nIs `enum ConnectionType` the right approach? It worries me that these things are not mutually-exclusive. Like, ADDRFETCH is also OUTBOUND.\r\nIt's true that it's non-ambiguous right now, but maybe we want to make them a bitmask in advance for the sake of explicitness, since we are already refactoring it? ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645829587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646274698",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646274698",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 646274698,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjI3NDY5OA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-18T19:56:11Z",
    "updated_at": "2020-06-18T19:56:11Z",
    "author_association": "MEMBER",
    "body": "Concept ACK.\r\n\r\n> Is enum ConnectionType the right approach? It worries me that these things are not mutually-exclusive. Like, ADDRFETCH is also OUTBOUND.\r\n\r\nI think enum is the right approach. OUTBOUND here means a connection that is created automatically by the OpenConnections thread. Yes, there are other kinds of connection that the node originates, but for clarity, I don't think those should be referred to as 'OUTBOUND'.\r\n\r\nI think we definitely don't want a bitmask of different connection capabilities. That leads to an combinatorial explosion of connection types that you need to either test or explicitly disallow. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646274698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646304479",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 646304479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjMwNDQ3OQ==",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-18T21:03:27Z",
    "updated_at": "2020-06-18T21:03:27Z",
    "author_association": "MEMBER",
    "body": "@naumenkogs its a good question to ask, but I think enforcing mutual exclusivity makes more sense and what allows for a lot of the simplicity. @jnewbery explained the main reasons, I want to add some additional points\r\n- everything but `INBOUND` originates from the node, but `OUTBOUND` refers to a specific type, which is the most common, full-relay, outbound connection. so I do think its exclusive to the other connection types. on the enum I added `OUTBOUND, // full relay connections (blocks, addrs, txns)`, but lmk if you have suggestions on how it could be clarified better.   \r\n- if we support combinations, we have to add many behavioral checks to ensure logical adherence. lots of the cleanup in this PR shed light on how brittle/annoying it is to have those checks scattered everywhere. so, I think if we are adding connection types in the future, designing the conn_type to fit into the flat structure better supports code-simplicity-over-time as well. \r\n\r\n---\r\n\r\nOn a different note, I have a question with the fuzz tests & would appreciate any guidance. \r\n\r\nSince I change the signature of the `CNode` constructor, I'm causing a [test failure](https://travis-ci.org/github/bitcoin/bitcoin/jobs/699509978). I found [this function](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/FuzzedDataProvider.h#L184) to support fuzz testing with enums, but am unclear on how to implement. It seems I need to add `kMaxValue` to the enum. \r\n\r\nI'm wondering if the pattern is: \r\na) mimic the enum in the tests & add `kMaxValue` there, or \r\nb) import something into `net.cpp` and define directly on the code implementation of the enum.\r\nOption B seems strange to add that dependency to `net`, but option A seems like it would be easy to forget to add an enum type to the fuzz test if we add a type to the cpp code in the future. \r\n\r\n@practicalswift, @MarcoFalke, any chance either of you are able to advise? \ud83d\ude4f\ud83c\udffd",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646304479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647397659",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-647397659",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 647397659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzM5NzY1OQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-22T09:25:11Z",
    "updated_at": "2020-06-22T09:25:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@amitiuttarwar Thanks for the ping! I'd suggest using `PickValueInArray` like in these examples:\r\n\r\n```\r\n$ git grep -E 'PickValueInArray.*\\(\\{.+' \"src/test/fuzz/**.cpp\"\r\nsrc/test/fuzz/bloom_filter.cpp:        static_cast<unsigned char>(fuzzed_data_provider.PickValueInArray({BLOOM_UPDATE_NONE, BLOOM_UPDATE_ALL, BLOOM_UPDATE_P2PUBKEY_ONLY, BLOOM_UPDATE_MASK}))};\r\nsrc/test/fuzz/fees.cpp:    const FeeReason fee_reason = fuzzed_data_provider.PickValueInArray({FeeReason::NONE, FeeReason::HALF_ESTIMATE, FeeReason::FULL_ESTIMATE, FeeReason::DOUBLE_ESTIMATE, FeeReason::CONSERVATIVE, FeeReason::MEMPOOL_MIN, FeeReason::PAYTXFEE, FeeReason::FALLBACK, FeeReason::REQUIRED});\r\nsrc/test/fuzz/kitchen_sink.cpp:    const TransactionError transaction_error = fuzzed_data_provider.PickValueInArray<TransactionError>({TransactionError::OK, TransactionError::MISSING_INPUTS, TransactionError::ALREADY_IN_CHAIN, TransactionError::P2P_DISABLED, TransactionError::MEMPOOL_REJECTED, TransactionError::MEMPOOL_ERROR, TransactionError::INVALID_PSBT, TransactionError::PSBT_MISMATCH, TransactionError::SIGHASH_MISMATCH, TransactionError::MAX_FEE_EXCEEDED});\r\nsrc/test/fuzz/message.cpp:        (void)SigningResultString(fuzzed_data_provider.PickValueInArray({SigningResult::OK, SigningResult::PRIVATE_KEY_NOT_AVAILABLE, SigningResult::SIGNING_FAILED}));\r\nsrc/test/fuzz/netaddress.cpp:    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\r\nsrc/test/fuzz/policy_estimator.cpp:        (void)block_policy_estimator.estimateRawFee(fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeFloatingPoint<double>(), fuzzed_data_provider.PickValueInArray({FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}), fuzzed_data_provider.ConsumeBool() ? &result : nullptr);\r\nsrc/test/fuzz/policy_estimator.cpp:        (void)block_policy_estimator.HighestTargetTracked(fuzzed_data_provider.PickValueInArray({FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}));\r\nsrc/test/fuzz/script_interpreter.cpp:                (void)SignatureHash(script_code, tx_to, in, fuzzed_data_provider.ConsumeIntegral<int>(), ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}), nullptr);\r\nsrc/test/fuzz/script_interpreter.cpp:                    (void)SignatureHash(script_code, tx_to, in, fuzzed_data_provider.ConsumeIntegral<int>(), ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}), &precomputed_transaction_data);\r\nsrc/test/fuzz/script_sign.cpp:                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\r\nsrc/test/fuzz/signature_checker.cpp:    const SigVersion sig_version = fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0});\r\nsrc/test/fuzz/system.cpp:            const OptionsCategory options_category = fuzzed_data_provider.PickValueInArray<OptionsCategory>({OptionsCategory::OPTIONS, OptionsCategory::CONNECTION, OptionsCategory::WALLET, OptionsCategory::WALLET_DEBUG_TEST, OptionsCategory::ZMQ, OptionsCategory::DEBUG_TEST, OptionsCategory::CHAINPARAMS, OptionsCategory::NODE_RELAY, OptionsCategory::BLOCK_CREATION, OptionsCategory::RPC, OptionsCategory::GUI, OptionsCategory::COMMANDS, OptionsCategory::REGISTER_COMMANDS, OptionsCategory::HIDDEN});\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647397659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649054328",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649054328",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 649054328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTA1NDMyOA==",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-24T20:30:26Z",
    "updated_at": "2020-06-24T20:31:13Z",
    "author_association": "MEMBER",
    "body": "fixed fuzz tests, rebased & incorporated review comments\r\n\r\n@jnewbery thank you for review \ud83d\ude4c\ud83c\udffd   I took all your suggestions. \r\n\r\n@practicalswift thanks for the tip. Tests are now passing. Is there a time the `ConsumeEnum()` template would make more sense? \r\n\r\n@ariard continuing convo from your [comment](https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443392439) here. \r\n> IMO I would adopt a more fine-grained typology. Right now it sounds to confuse type of traffic (block, addr, tx) and type of connection selection (outbound/inbound, normal/anchor, ...)\r\n\r\nCan you explain what you are suggesting? I agree that this proposal flattens different aspects of connection behaviors, but I believe this is advantageous for simpler code, as explained above [[1]](https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646274698) [[2]](https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479). \r\n> As a follow-up, I think we may scope [wtxid relay] under a connection type\r\n\r\nConsidering this possibility. I haven't reviewed #18044 in depth, but I'm not sure it conceptually makes sense. wtxid relay seems more in line with content sent over the connection (like preferences expressed in the version message) than type of connection. I think you could have wtxid relay for connections that are inbound, outbound, and manual connections? ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649054328/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649608895",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649608895",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 649608895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTYwODg5NQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-25T15:07:38Z",
    "updated_at": "2020-06-25T15:07:38Z",
    "author_association": "MEMBER",
    "body": "ACK the final state of this, but the intermediate commits break the fuzz build because the fuzz changes only appear in the final commit. Ideally those changes would be in the same commits as the changes to the `CNode` ctors so all intermediate commits build.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649608895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649768547",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649768547",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 649768547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTc2ODU0Nw==",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?u=d06d2903ce6ad8b9d0c66ef9225fa21adfe22c7f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-25T19:17:18Z",
    "updated_at": "2020-06-25T19:17:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "```cpp\r\nenum class ConnectionType {\r\n    INBOUND, /**< peer initiated connections */\r\n    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\r\n    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\r\n    FEELER, /**< short lived connections used to test address validity */\r\n    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\r\n    ADDR_FETCH, /**< short lived connections used to solicit addrs */\r\n};\r\n```\r\n\r\nThis is somewhat confusing because it mixes unrelated things in one enum - connection initiator (us/outbound, them/inbound) with connection capabilities. Something like having `enum Status { valid, invalid, blue }`.\r\n\r\nI think the following questions have unclear answer, looking at the above enum:\r\n* Are `INBOUND` connections full relay connections (blocks, addrs, txns)?\r\n* Are `MANUAL` connections full relay connections (blocks, addrs, txns)?\r\n* Are `FEELER` connections inbound or outbound, that is - who initiated the connection?\r\n* Are `ADDR_FETCH` connections inbound or outbound, that is - who initiated the connection?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649768547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649776062",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649776062",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 649776062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTc3NjA2Mg==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-25T19:33:58Z",
    "updated_at": "2020-06-25T19:33:58Z",
    "author_association": "MEMBER",
    "body": "> This is somewhat confusing because it mixes unrelated things in one enum - connection initiator (us/outbound, them/inbound) with connection capabilities. Something like having enum Status { valid, invalid, blue }.\r\n\r\nPlease see the above discussion about this, particularly https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479. Another way to explain this is that these different connection types are already logically separate in the code, but that separation is done using multiple bools. However, combining those different bools is invalid - there's no such thing as an inbound feeler connection, or a manual block_relay connection for example. That leads to logic bugs like the one fixed in this PR here: https://github.com/bitcoin/bitcoin/pull/19316/commits/f2e183e5791be0322137cb9d90fb410ebcacbfd4. Flattening the internal model of these different connection types should make those bugs less likely.\r\n\r\n> I think the following questions have unclear answer, looking at the above enum...\r\n\r\nThat's fair. Perhaps these comments could be expanded to explicitly say who initiates the connection for each type (hint: it's our side for all connection types except inbound).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649776062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/655057621",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-655057621",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 655057621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NTA1NzYyMQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-07T18:56:01Z",
    "updated_at": "2020-07-07T18:56:01Z",
    "author_association": "MEMBER",
    "body": "Big concept ACK.\r\n\r\nI'm a bit uncomfortable with the `== ConnectionType::X` tests, and to a lesser extent with switch/case statements spread out over the code. Things are relatively simple because all \"special\" types are outbound, but it's not too hard to imagine that another class of inbound connections is added at some point, which would need reconsideration of all `== ConnectionType::INBOUND` tests.\r\n\r\nWhat do you think about having a few simple functions `IsOutbound()`, `IsManual()`, `IsBlocksOnly()`, ... that take a `ConnectionType`, and which are the only places where any comparisons or switch/case statements on `ConnectionTypes` are peformed?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/655057621/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656149267",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-656149267",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 656149267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjE0OTI2Nw==",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?u=d06d2903ce6ad8b9d0c66ef9225fa21adfe22c7f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-09T14:07:48Z",
    "updated_at": "2020-07-09T14:08:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "> What do you think about having a few simple functions IsOutbound(), IsManual(), IsBlocksOnly(), ... that take a ConnectionType\r\n\r\n+1 :bulb: \r\n\r\nOr even have it all together in a class like:\r\n\r\n```cpp\r\nclass ConnectionType\r\n{\r\npublic:\r\n    ConnectionType(bool flag1, bool flag2, ...); // assert or throw if the flags contradict\r\n\r\n    bool IsInbound();\r\n    bool IsManual();\r\n    bool IsGreen();\r\n    ...\r\n \r\nprivate:\r\n    bool flag1;\r\n    bool flag2;\r\n    ...\r\n};\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656149267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659570131",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-659570131",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 659570131,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTU3MDEzMQ==",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?u=62e3204f6586795420395a7059ec7dc7c4a40c7d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-16T17:49:06Z",
    "updated_at": "2020-07-16T17:49:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK 43cec7b2a1a932f7784b037601a4fa3895e082b7\r\n\r\nVery nice simplification, reasonably easy to see its correctness too!\r\n\r\n-----\r\n\r\nFrom sipa:\r\n> What do you think about having a few simple functions `IsOutbound()`, `IsManual()`, `IsBlocksOnly()`, ... that take a `ConnectionType`, and which are the only places where any comparisons or switch/case statements on `ConnectionTypes` are peformed?\r\n\r\nI would very much like to see something like this implemented with simple functions, some \"property tests\" may be layer specific, so the logic would fit better in a the right file rather than in the `ConnectionType` class.\r\n\r\nI was worried about the case where new cases are added to the enum in the future, but realized that since we'll still have the `switch` statements in the functions the compiler will still force us to handle these new cases.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659570131/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662758053",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-662758053",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 662758053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mjc1ODA1Mw==",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-23T00:07:14Z",
    "updated_at": "2020-07-23T00:07:14Z",
    "author_association": "MEMBER",
    "body": "hi everyone, thanks so much for these thoughtful reviews! \ud83d\ude4c\ud83c\udffd  \r\n\r\n### Current state of PR: \r\n\r\nI've been considering the different options & tinkering. here's what I've got: I've incorporated miscellaneous review comments and updated the design to make `m_conn_type` private & expose an interface of accessor functions. I'm currently proposing the final state of this PR. Once the changes look good, I'll need to fix up the commit breakdown a bit. That said, I hope the current breakdown is conceptually helpful for review. I'd just need to incorporate the `m_conn_type` changes to be earlier before it makes sense for master.\r\n\r\n> What do you think about having a few simple functions IsOutbound(), IsManual(), IsBlocksOnly(), ... that take a ConnectionType, and which are the only places where any comparisons or switch/case statements on ConnectionTypes are performed?\r\n\r\n@sipa I've taken a stab at it. could you review the final state of this branch? does this match your expectations? (changes are essentially in 05e85161c390ba5aa6149bcdf4a4c560a45032f3)\r\n\r\n@dongcarl I didn't fully understand what you meant here: \r\n> I would very much like to see something like this implemented with simple functions, some \"property tests\" may be layer specific, so the logic would fit better in a the right file rather than in the ConnectionType class.\r\n\r\ndo my changes fit into what you're looking for? otherwise can you help me understand what you mean? \r\n\r\n@ariard, @vasild you two expressed interest in something very similar. what do you think of the current changeset? \r\n\r\n### Conceptual design conversation: \r\n\r\na few different ideas have been proposed through the review on this PR so far. at a high level- I stand by the core concept of this PR as extracting the connection types into an enum. I think we could potentially incorporate a class level abstraction in the future. but that the enum suffices for our needs right now, simplifies the current state of the code, and supports increased test coverage of connections as proposed in #19315. \r\n\r\nI'd like to emphasize the purpose of the enum: it represents the information we have available at the time of opening or accepting the connection. which is why, for example, we only have 1 inbound type. thus, the information the enum is communicating is only a subset of what is relevant to a connection. \r\n\r\nit doesn't have information like noban logic, tx relay info negotiated through the p2p, etc. I don't think its of interest to try to capture all possible permutations of that information here. For example, we support blocks-relay-only connections, but also have blocks-only mode. So full-relay connections for a node started in blocks-only mode are pretty much blocks-relay-only connections, but still have some small differences in practice. and then layer on nuances of noban permissions and omg its wild. \r\n\r\nbasically, my point is, there is a ton of nuance to the interactions of different types of behaviors of connections. by capturing one concrete piece of information (what is our intent when we open the connection?) and flattening it into an XOR via using an enum, I believe this greatly simplifies the complexity of considering all possibilities. here, the compiler takes care of enforcing valid states rather than our minds.\r\n\r\n@ariard do these ideas make sense to you? Let's get into some specifics. \r\n\r\nI reviewed your proposed changes. the main thing thats missing from 0b7c86158e9a344e0f379d3cef98cab1b96ecc29 is the lack of behavioral enforcement. Eg, according to this structure, it would be valid to have an inbound, manual, feeler, block_relay_only connection. The 4 different attributes give us 36 possible types of connections. This makes it very difficult for me to reason about c8ec734715a5d5efdf96736495c0e3c06b67d061. To strengthen your proposal, I would add a series of assertions on the class constructor that enforce things like \"if its inbound, it must be auto, full_relay, and regular\" But then we would be left with just 6 valid combinations from the 36 possibilities- the ones that are currently captured in the ConnectionTypes enum.\r\n\r\nRE adding manual block-relay-only connections: if the enum approach is accepted and I wanted to implement this as a new connection type, I would simply s/BLOCK_RELAY/BLOCK_RELAY_AUTO and introduce a new BLOCK_RELAY_MANUAL, then visit the call-sites to decide the desired behavior in various circumstances.  \r\n\r\nas I mentioned above, I think this extraction into a separate class might make sense as a direction to be moving towards in the long run, but I think it's premature right now. what do you think about the latest proposal of having the interface to `m_conn_type` as a private member? to me, it seems like a step in that direction. \r\n\r\n### Other misc review comments: \r\n- I believe I've fixed up the fuzz builds on all the intermediary commits, but could use a double check \r\n\r\n@vasild - think you might have answers to these from the review process, but just incase\r\n- I updated the enum to have more descriptive explanations. hows it look? \r\n- the bug fix is for a bug currently on master \r\n\r\n\r\n... and if you've made this far, THANKS FOR READING \ud83d\ude43",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662758053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663237340",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-663237340",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 663237340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzIzNzM0MA==",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-23T21:17:48Z",
    "updated_at": "2020-07-23T21:17:48Z",
    "author_association": "MEMBER",
    "body": "updated comment & switch statement handling for non-enum values\r\n\r\nall review comments should be addressed",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663237340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664002085",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-664002085",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 664002085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDAwMjA4NQ==",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-26T15:27:32Z",
    "updated_at": "2020-07-26T15:27:32Z",
    "author_association": "MEMBER",
    "body": "Why we do we have different types of connections ? AFAICT we enforce different p2p policies in\r\nfunction of them, i.e don't evict outbound ones (`AttemptToEvictConnection`) when slots are full\r\nor enforce automatic, outbound connections offer desirable services (at version reception). These\r\ntypes are either automatically selected at connection opening, negotiated through p2p messages\r\n(i.e blocks-only), set by node operators, ... Mapping attributes (or property, same thing)  directly\r\nto a p2p policy make it far easier to analyze. You have a one-to-one relation, attribute -> policy,\r\nrather with your model you have to go through the process: type (set of _implicit_ attributes) ->\r\nattribute -> policy.\r\n\r\n>To strengthen your proposal, I would add a series of assertions on the class constructor that enforce things like \"if its inbound, it must be auto, full_relay, and regular\" But then we would be left with just 6 valid combinations from the 36 possibilities- the ones that are currently captured in the ConnectionTypes enum.\r\n\r\nThat was a PoC :p Of course you could add assertions. But again if you capture the same combination\r\nin current `ConnectionTypes` enum, for each property/attribute test you have to list each of them\r\nwhich support it. A class level abstraction asks would encapsulate complexity all for once.\r\n\r\n> RE adding manual block-relay-only connections: if the enum approach is accepted and I wanted to implement this as a new connection type, I would simply s/BLOCK_RELAY/BLOCK_RELAY_AUTO and introduce a new BLOCK_RELAY_MANUAL, then visit the call-sites to decide the desired behavior in various circumstances.\r\n\r\nIf you just call `SetBlockRelayOnly`, `SetManual` at `CNode` creation there is no more need to sweep\r\nthrough every callsites to be sure every p2p policy is consistent with each new combination of\r\nproperties/attributes.\r\n\r\nThat said, I think we agree mostly on the direction, it's more about the steps. 6a1259c is moving in the right\r\ndiscussion, and gathering all \"known-at-connection-initiation\" types in same place is required before\r\nto do something more structured like a class.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664002085/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664546383",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-664546383",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 664546383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU0NjM4Mw==",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?u=62e3204f6586795420395a7059ec7dc7c4a40c7d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-27T17:54:11Z",
    "updated_at": "2020-07-27T17:54:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@amitiuttarwar The changes in 6a1259c574c96c7059e3b6a61b79d56d59c48508 are exactly what I meant :-)\r\nLooks like perhaps we can remove `m_addr_fetch` as a followup.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664546383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666084959",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-666084959",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 666084959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NjA4NDk1OQ==",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-30T03:58:09Z",
    "updated_at": "2020-07-30T05:14:40Z",
    "author_association": "MEMBER",
    "body": "thanks for the feedback @vasild, @ariard, @dongcarl !\r\n\r\nI've restructured the commits to incorporate having `m_conn_type` as a private member, and removed all the `CNode` flags (including `fInbound` and `m_addr_fetch`). There are a lot of commits, but I tried hard to make it coherent & each commit super simple. Hopefully it should be fairly straightforward to review in its current state. \r\n\r\nall feedback is addressed, commits are coherently structured. please evaluate for master",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666084959/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671462223",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-671462223",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 671462223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTQ2MjIyMw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-10T16:38:57Z",
    "updated_at": "2020-08-10T16:38:57Z",
    "author_association": "MEMBER",
    "body": "Code review ACK 01e283068b9e6214f2d77a2f772a4244ebfe2274, the commits are pretty straightforward to follow, and I think this is a move in the right direction overall\r\nLet's wait for @sdaftuar to do an additional pass at looking at the testing coverage before merge.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671462223/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671940858",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-671940858",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 671940858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTk0MDg1OA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T13:16:48Z",
    "updated_at": "2020-08-11T13:16:48Z",
    "author_association": "MEMBER",
    "body": "utACK 01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671940858/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671949563",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-671949563",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 671949563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTk0OTU2Mw==",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?u=d06d2903ce6ad8b9d0c66ef9225fa21adfe22c7f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T13:33:24Z",
    "updated_at": "2020-08-11T13:33:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "[Filtered code coverage report](https://people.freebsd.org/~vd/pr19316_01e283068_coverage/) (files not modified by this PR are omitted and not modified lines in files that are otherwise modified are dimmed).\r\n\r\n[List of modified and not covered lines](https://people.freebsd.org/~vd/pr19316_01e283068_coverage/modified_and_not_covered.html).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671949563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672152434",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-672152434",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 672152434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjE1MjQzNA==",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T18:12:39Z",
    "updated_at": "2020-08-15T02:29:24Z",
    "author_association": "MEMBER",
    "body": "thanks for all the reviews! since tip currently has 4 ACKs, I'm hoping these changes are RFM.\r\n\r\nI'm currently incorporating review suggestions on [this branch](https://github.com/amitiuttarwar/bitcoin/commits/conn-refactor-temp). I'm planning to open a follow-up PR addressing some of these further improvements. \r\n\r\nother possible follow-ups from review comments:\r\n* rethink `fGetAddr` https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464493063\r\n* further simplify `conn_type` logic in `ThreadOpenConnections` https://github.com/bitcoin/bitcoin/pull/19316#discussion_r466373442\r\nUPDATE: done in #19724 \r\n* expose connection type in `getpeerinfo` https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468001604\r\nUPDATE: done in #19725 \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672152434/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672186238",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-672186238",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 672186238,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjE4NjIzOA==",
    "user": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?u=2ba2cccaa0fd357b363507ce5694ce3cf5e56220&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T18:45:57Z",
    "updated_at": "2020-08-11T18:45:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "wow this code was messy before... ACK 01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672186238/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 2,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674314053",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-674314053",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
    "id": 674314053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDMxNDA1Mw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T23:50:10Z",
    "updated_at": "2020-08-14T23:50:10Z",
    "author_association": "MEMBER",
    "body": "Posthumous ACK 01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674314053/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443588532",
    "pull_request_review_id": 434964249,
    "id": 443588532,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4ODUzMg==",
    "diff_hunk": "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 189,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "f5f0e07e0a43b6decd147671f82c06b6abc64689",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "s/addnode/manual",
    "created_at": "2020-06-22T14:13:58Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443588532",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443588532"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443588532"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443588532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1834,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443592064",
    "pull_request_review_id": 434964249,
    "id": 443592064,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5MjA2NA==",
    "diff_hunk": "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here\n+                        // is to not use multiple of our limited outbound slots on a single netgroup\n+                        // but inbound and addnode peers do not use our outbound slots.  Inbound peers",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 191,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "f5f0e07e0a43b6decd147671f82c06b6abc64689",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "s/addnode/manual",
    "created_at": "2020-06-22T14:18:54Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443592064",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443592064"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443592064"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443592064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1836,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443596172",
    "pull_request_review_id": 434964249,
    "id": 443596172,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5NjE3Mg==",
    "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {",
    "path": "src/net.h",
    "position": 7,
    "original_position": 4,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "f5f0e07e0a43b6decd147671f82c06b6abc64689",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Consider using doxygen-style comments for these enum entries",
    "created_at": "2020-06-22T14:23:54Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443596172",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443596172"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443596172"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443596172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 119,
    "original_line": 119,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443597967",
    "pull_request_review_id": 434964249,
    "id": 443597967,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5Nzk2Nw==",
    "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)",
    "path": "src/net.h",
    "position": null,
    "original_position": 6,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "f5f0e07e0a43b6decd147671f82c06b6abc64689",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe add that these connections are made automatically to addresses selected from AddrMan.",
    "created_at": "2020-06-22T14:26:19Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443597967",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443597967"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443597967"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443597967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 118,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443598564",
    "pull_request_review_id": 434964249,
    "id": 443598564,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5ODU2NA==",
    "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)\n+    MANUAL, // connections to addresses added via addnode or the connect command line argument\n+    FEELER, // short lived connections used to test address validity\n+    BLOCK_RELAY, // only relay blocks to these connections",
    "path": "src/net.h",
    "position": null,
    "original_position": 9,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "f5f0e07e0a43b6decd147671f82c06b6abc64689",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add that these are automatic outbound peers made to addresses selected from AddrMan.",
    "created_at": "2020-06-22T14:27:01Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443598564",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443598564"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443598564"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443598564/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 121,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139106",
    "pull_request_review_id": 436964888,
    "id": 445139106,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTEwNg==",
    "diff_hunk": "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 189,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "f5f0e07e0a43b6decd147671f82c06b6abc64689",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2020-06-24T20:02:09Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139106",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139106"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139106"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1834,
    "side": "RIGHT",
    "in_reply_to_id": 443588532
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139147",
    "pull_request_review_id": 436964944,
    "id": 445139147,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTE0Nw==",
    "diff_hunk": "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here\n+                        // is to not use multiple of our limited outbound slots on a single netgroup\n+                        // but inbound and addnode peers do not use our outbound slots.  Inbound peers",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 191,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "f5f0e07e0a43b6decd147671f82c06b6abc64689",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed ",
    "created_at": "2020-06-24T20:02:14Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139147",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139147"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139147"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139147/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1836,
    "side": "RIGHT",
    "in_reply_to_id": 443592064
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139410",
    "pull_request_review_id": 436965286,
    "id": 445139410,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTQxMA==",
    "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {",
    "path": "src/net.h",
    "position": 7,
    "original_position": 4,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "f5f0e07e0a43b6decd147671f82c06b6abc64689",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done ",
    "created_at": "2020-06-24T20:02:45Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139410",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139410"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139410"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 119,
    "original_line": 119,
    "side": "RIGHT",
    "in_reply_to_id": 443596172
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139916",
    "pull_request_review_id": 436965919,
    "id": 445139916,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTkxNg==",
    "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)",
    "path": "src/net.h",
    "position": null,
    "original_position": 6,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "f5f0e07e0a43b6decd147671f82c06b6abc64689",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added ",
    "created_at": "2020-06-24T20:03:41Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139916",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139916"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139916"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139916/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 118,
    "side": "RIGHT",
    "in_reply_to_id": 443597967
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139995",
    "pull_request_review_id": 436966044,
    "id": 445139995,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTk5NQ==",
    "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)\n+    MANUAL, // connections to addresses added via addnode or the connect command line argument\n+    FEELER, // short lived connections used to test address validity\n+    BLOCK_RELAY, // only relay blocks to these connections",
    "path": "src/net.h",
    "position": null,
    "original_position": 9,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "f5f0e07e0a43b6decd147671f82c06b6abc64689",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added ",
    "created_at": "2020-06-24T20:03:51Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139995",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139995"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139995"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139995/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 121,
    "side": "RIGHT",
    "in_reply_to_id": 443598564
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446168334",
    "pull_request_review_id": 438273662,
    "id": 446168334,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2ODMzNA==",
    "diff_hunk": "@@ -406,8 +414,8 @@ class CConnman\n     std::atomic<bool> fNetworkActive{true};\n     bool fAddressesInitialized{false};\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n-    RecursiveMutex cs_vOneShots;\n+    std::deque<std::string> vAddrFetchs GUARDED_BY(cs_vAddrFetchs);\n+    RecursiveMutex cs_vAddrFetchs;",
    "path": "src/net.h",
    "position": null,
    "original_position": 51,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: if these member variables are going to be renamed, why not rename them in a way that abides the [naming convention](https://github.com/bitcoin/bitcoin/blame/808ef36b89ea9ce72116bbd7ee479b984367dc60/doc/developer-notes.md#L82)?",
    "created_at": "2020-06-26T12:59:34Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446168334",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446168334"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446168334"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446168334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 409,
    "start_side": "LEFT",
    "line": null,
    "original_line": 418,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446169181",
    "pull_request_review_id": 438273662,
    "id": 446169181,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2OTE4MQ==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
    "path": "src/net.h",
    "position": null,
    "original_position": 63,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can `fAddrFetch` be removed and `m_conn_type == ConnectionType::ADDR_FETCH` used instead?\r\n\r\nnit: [naming convention](https://github.com/bitcoin/bitcoin/blame/808ef36b89ea9ce72116bbd7ee479b984367dc60/doc/developer-notes.md#L82) on `fAddrFetch`",
    "created_at": "2020-06-26T13:01:08Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446169181",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446169181"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446169181"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446169181/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 776,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446217691",
    "pull_request_review_id": 438273662,
    "id": 446217691,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIxNzY5MQ==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};\n     bool fClient{false}; // set by version message\n     bool m_limited_node{false}; //after BIP159, set by version message\n     const bool fInbound;",
    "path": "src/net.h",
    "position": null,
    "original_position": 66,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can `fInbound` be removed and `m_conn_type == ConnectionType::INBOUND` used instead?",
    "created_at": "2020-06-26T14:27:06Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446217691",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446217691"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446217691"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446217691/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 781,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446245139",
    "pull_request_review_id": 438273662,
    "id": 446245139,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NTEzOQ==",
    "diff_hunk": "@@ -797,11 +797,9 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n     if (state) state->m_last_block_announcement = time_in_seconds;\n }\n \n-// Returns true for outbound peers, excluding manual connections, feelers, and\n-// one-shots.\n static bool IsOutboundDisconnectionCandidate(const CNode& node)\n {\n-    return !(node.fInbound || node.m_manual_connection || node.fFeeler || node.fOneShot);\n+    return (node.m_conn_type == ConnectionType::OUTBOUND || node.m_conn_type == ConnectionType::BLOCK_RELAY);",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 18,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If done with a `switch`:\r\n\r\n```suggestion\r\n    switch (node.m_conn_type) {\r\n    case ConnectionType::INBOUND: \r\n    case ConnectionType::MANUAL:\r\n    case ConnectionType::FEELER:\r\n    case ConnectionType::ADDR_FETCH:\r\n        return false;\r\n    case ConnectionType::OUTBOUND:\r\n    case ConnectionType::BLOCK_RELAY:\r\n        return true;\r\n    }   \r\n```\r\nand a new entry is added to the enum, it will enforce the developer to assess what should be returned for the new entry instead of silently returning `false`, like the current code.",
    "created_at": "2020-06-26T15:13:16Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446245139",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446245139"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446245139"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446245139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 802,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446363611",
    "pull_request_review_id": 438273662,
    "id": 446363611,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MzYxMQ==",
    "diff_hunk": "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 238,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If this is really unreachable then, would it be more suitable to put an assert here? Or, if in doubt - print something to the log and don't open a connection. It looks strange to silently open a connection when we are here because `nOutboundFullRelay >= m_max_outbound_full_relay`.",
    "created_at": "2020-06-26T19:12:21Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446363611",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446363611"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446363611"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446363611/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1956,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1943,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446372977",
    "pull_request_review_id": 438273662,
    "id": 446372977,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3Mjk3Nw==",
    "diff_hunk": "@@ -1640,7 +1642,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A `switch` without `default:` would produce a compiler warning when new enum element is added and this code is forgotten:\r\n```suggestion\r\n                            switch (pnode->m_conn_type) {\r\n                            case ConnectionType::INBOUND:\r\n                            case ConnectionType::MANUAL:\r\n                            case ConnectionType::FEELER:\r\n                            case ConnectionType::ADDR_FETCH:\r\n                                break;\r\n                            case ConnectionType::OUTBOUND:\r\n                            case ConnectionType::BLOCK_RELAY:\r\n                                if (pnode->fSuccessfullyConnected) {\r\n                                    ++nRelevant;\r\n                                }   \r\n                                break;\r\n                            }\r\n```",
    "created_at": "2020-06-26T19:34:05Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446372977",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446372977"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446372977"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446372977/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1645,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446374677",
    "pull_request_review_id": 438273662,
    "id": 446374677,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NDY3Nw==",
    "diff_hunk": "@@ -1761,7 +1752,7 @@ int CConnman::GetExtraOutboundCount()\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->fOneShot && pnode->fSuccessfullyConnected) {\n+            if (pnode->fSuccessfullyConnected && !pnode->fDisconnect && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY)) {",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 141,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "As above, a `switch` without `default:` will enforce this to be reviewed when new enum element is added. If the pattern `type == OUTBOUND || type == BLOCK_RELAY` repeats too often then the `switch` be put in a new method `bool CNode::IsFooBar()` and that method used here.",
    "created_at": "2020-06-26T19:38:23Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446374677",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446374677"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446374677"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446374677/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1755,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446376641",
    "pull_request_review_id": 438273662,
    "id": 446376641,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NjY0MQ==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};",
    "path": "src/net.h",
    "position": null,
    "original_position": 62,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`CNode::m_conn_type` is initialized here in its declaration and also in the only constructor of `CNode` from an argument:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/43cec7b2a1a932f7784b037601a4fa3895e082b7/src/net.h#L866\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/43cec7b2a1a932f7784b037601a4fa3895e082b7/src/net.cpp#L2754\r\n\r\nSo, maybe remove the initialization from here?\r\n\r\n```suggestion\r\n    ConnectionType m_conn_type;\r\n```",
    "created_at": "2020-06-26T19:43:20Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446376641",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446376641"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446376641"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446376641/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 775,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446381822",
    "pull_request_review_id": 438273662,
    "id": 446381822,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4MTgyMg==",
    "diff_hunk": "@@ -856,7 +863,7 @@ class CNode\n \n     std::set<uint256> orphan_work_set;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false, bool block_relay_only = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", ConnectionType conn_type_in = ConnectionType::OUTBOUND);",
    "path": "src/net.h",
    "position": null,
    "original_position": 81,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "All the callers of this constructor specify all arguments, so the default values of the last 2 arguments can be removed:\r\n```suggestion\r\n    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn, ConnectionType conn_type_in);\r\n```",
    "created_at": "2020-06-26T19:56:12Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446381822",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446381822"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446381822"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446381822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 866,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446384137",
    "pull_request_review_id": 438273662,
    "id": 446384137,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4NDEzNw==",
    "diff_hunk": "@@ -2252,7 +2250,7 @@ void ProcessMessage(\n         {\n             connman->SetServices(pfrom.addr, nServices);\n         }\n-        if (!pfrom.fInbound && !pfrom.fFeeler && !pfrom.m_manual_connection && !HasAllDesirableServiceFlags(nServices))\n+        if ((pfrom.m_conn_type == ConnectionType::OUTBOUND || pfrom.m_conn_type == ConnectionType::BLOCK_RELAY || pfrom.m_conn_type == ConnectionType::ADDR_FETCH) && !HasAllDesirableServiceFlags(nServices))",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 36,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Consider using a `switch` without `default:` to assign to a boolean variable the expression `type == FOO || type == BAR || type == BAZ` to enforce the code to be reassessed when new enum element is added.",
    "created_at": "2020-06-26T20:01:46Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446384137",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446384137"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446384137"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446384137/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2253,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448013426",
    "pull_request_review_id": 440428063,
    "id": 448013426,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMzQyNg==",
    "diff_hunk": "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 238,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "totally agree the current state is weird. I dug more into this case & turns out.. I think the comment is wrong & the code is right. So I will update the comment. \r\n\r\nhere's my understanding-\r\n\r\n[this previous conditional](https://github.com/bitcoin/bitcoin/blob/master/src/net.cpp#L1868) earlier in the function means if full-relay & block-relay are both at capacity, one of the following happens: \r\n(A)`fFeeler` will be set to true \r\n(B) we continue to next iteration of the while loop or \r\n(C)`GetTryNewOutboundPeer` is true, `fFeeler` stays false, and we continue to the rest of the function. \r\n\r\n`GetTryNewOutboundPeer` is simply a wrapper for `m_try_another_outbound_peer`, which is set to true when a stale tip is detected ([link](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L3817)).\r\n\r\nso, when we get to this current conditional, if `fFeeler` if false & our full-relay and block-relay connection counts are at the allocated max -> `GetTryNewOutboundPeer` must be true. I believe the intent in this scenario is to open a new outbound connection.\r\n\r\n--\r\n\r\nThis is a tangent but I'm leaving here incase its interesting for reviewers / to share learnings: \r\n\r\nThis got me taking a closer look at `GetTryNewOutboundPeer`\r\n\r\nIt doesn't look like eviction / outbound counting logic checks for this bool. So if `m_try_another_outbound_peer` is true, the node would add an outbound connection, then `GetExtraOutboundCount` would count it as extra & `EvictExtraOutboundPeers` would evict a connection. \r\n\r\nMaybe this is a mechanism for peer rotation? Not sure how that would work though because evicting extra outbounds is [triggered](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L1187) every 45 seconds, and decides what connection to evict based on the oldest recent-block-announcement. A newly added connection defaults to a value of 0 so would probably be selected for eviction? \r\n\r\nupdate: the part I was missing is that we would proactively query the new connection for blocks, so if they don't return any, it makes sense to not keep them.\r\n",
    "created_at": "2020-06-30T22:25:23Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448013426",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448013426"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448013426"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448013426/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1956,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1943,
    "side": "RIGHT",
    "in_reply_to_id": 446363611
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448062841",
    "pull_request_review_id": 440485040,
    "id": 448062841,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2Mjg0MQ==",
    "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
    "path": "src/net.h",
    "position": null,
    "original_position": 10,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wonder if all of these except `INBOUND` should be prefixed with `OUTBOUND_` to indicate that they are different types of outbound connections, and `OUTBOUND` become `OUTBOUND_FULL_RELAY`.",
    "created_at": "2020-07-01T01:14:36Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448062841",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448062841"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448062841"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448062841/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448068899",
    "pull_request_review_id": 440492275,
    "id": 448068899,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2ODg5OQ==",
    "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
    "path": "src/net.h",
    "position": null,
    "original_position": 10,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> I wonder if all of these except `INBOUND` should be prefixed with `OUTBOUND_` to indicate that they are different types of outbound connections, and `OUTBOUND` become `OUTBOUND_FULL_RELAY`.\r\n\r\nSee also https://github.com/bitcoin/bitcoin/pull/19405#issuecomment-651273931",
    "created_at": "2020-07-01T01:39:42Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448068899",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448068899"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448068899"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448068899/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 448062841
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448969456",
    "pull_request_review_id": 441635915,
    "id": 448969456,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2OTQ1Ng==",
    "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
    "path": "src/net.h",
    "position": null,
    "original_position": 10,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Indeed! And I would take this one step further: to make the naming consistent and obvious we can distinguish 3 properties of a connection:\r\n1. inbound or outbound\r\n2. automatic or manual\r\n3. by capabilities: full relay, feeler, block relay, solicit addresses\r\n\r\nand then name the constants like prop1_prop2_prop3. Something like:\r\n\r\n```\r\nINBOUND_AUTO_FULL\r\nOUTBOUND_AUTO_FULL\r\nOUTBOUND_MANUAL_FULL\r\nOUTBOUND_AUTO_FEELER\r\nOUTBOUND_AUTO_BLOCK\r\nOUTBOUND_AUTO_ADDR\r\n```",
    "created_at": "2020-07-02T12:37:11Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448969456",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448969456"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448969456"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448969456/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 448062841
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449087317",
    "pull_request_review_id": 441802774,
    "id": 449087317,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4NzMxNw==",
    "diff_hunk": "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 238,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ok, I confirm what you write above and I verified that the new code behaves in an identical way with the old one, so this PR is good (except the `//this case should be unreachable` comment).\r\n\r\nBut the code (old and new) is confusing - I imagine somebody may attempt to \"fix\" this code which opens a connection even when both \"full\" and \"block relay\" capacities are exhausted.\r\n\r\nWhat about checking here that `GetTryNewOutboundPeer()` is `true` instead of relying that if `fFeeler` is `false` then `GetTryNewOutboundPeer()` must have been true 85 lines above in the code?\r\n\r\nIt is kind of easier to understand that `GetTryNewOutboundPeer()` being `true` acts as an \"override the limits and open a connection anyway\".",
    "created_at": "2020-07-02T15:30:13Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449087317",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449087317"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449087317"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449087317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1956,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1943,
    "side": "RIGHT",
    "in_reply_to_id": 446363611
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449348963",
    "pull_request_review_id": 442115002,
    "id": 449348963,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0ODk2Mw==",
    "diff_hunk": "@@ -104,10 +104,10 @@ std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n \n-void CConnman::AddOneShot(const std::string& strDest)\n+void CConnman::AddAddrFetch(const std::string& strDest)",
    "path": "src/net.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c1aed85090874b4327088b686da68a26942789ec",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`OneShot` was a terrible name for sure but at least the temporary or boostrap-side of this type of connection was implied by old name. How about `AddrSeeding` to underscore this connection is only made at the starting phase ?",
    "created_at": "2020-07-03T02:41:57Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449348963",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449348963"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449348963"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449348963/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 108,
    "original_line": 108,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449349935",
    "pull_request_review_id": 442115002,
    "id": 449349935,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0OTkzNQ==",
    "diff_hunk": "@@ -2745,7 +2745,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr\n     // traffic).\n-    m_addr_known{conn_type_in == ConnectionType::BLOCK_RELAY ? nullptr : MakeUnique<CRollingBloomFilter>(5000, 0.001)},\n+    m_addr_known{nullptr},",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c035da9ba9f71ff6b4fd4e2e7c69f2683e1f0d5c",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Have you tried to introduce a ADDR_RELAY_ONLY or change the equality of `IsAddrRelayPeer()` to `conn_type_in != ConnectionType::BLOCK_RELAY` ?",
    "created_at": "2020-07-03T02:47:01Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449349935",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449349935"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449349935"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449349935/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2743,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449352154",
    "pull_request_review_id": 442115002,
    "id": 449352154,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1MjE1NA==",
    "diff_hunk": "@@ -1835,7 +1835,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                     setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n                     if (pnode->m_tx_relay == nullptr) {\n                         nOutboundBlockRelay++;\n-                    } else if (pnode->m_conn_type != ConnectionType::FEELER) {\n+                    } else if (pnode->m_conn_type == ConnectionType::OUTBOUND) {",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "f2e183e5791be0322137cb9d90fb410ebcacbfd4",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Side-note, I think it would have be better to fix bug before introducing connection type for review clarity. Reviewers now have to review a fix relying on new code, less understood IMHO",
    "created_at": "2020-07-03T02:57:47Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449352154",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449352154"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449352154"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449352154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1838,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449353068",
    "pull_request_review_id": 442115002,
    "id": 449353068,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1MzA2OA==",
    "diff_hunk": "@@ -114,12 +114,12 @@ struct CSerializedNetMsg\n };\n \n enum class ConnectionType {\n-    INBOUND,\n-    OUTBOUND,\n-    MANUAL,\n-    FEELER,\n-    BLOCK_RELAY,\n-    ADDR_FETCH,\n+    INBOUND, /**< peer initiated connections */",
    "path": "src/net.h",
    "position": 8,
    "original_position": 10,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "4f0449ae4a3a8130602fa951d21cab1a9c53d112",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's great to see documentation around types. I think you should go further and describe exactly the set of assumptions we are doing for each type (like outbound more trusted than inbound, outbound favored for relay, block_relay_only to avoid leaking the full of our `block`-topology ...) and design goals of more obscure ones (feeler to sanitize addr db, addr fetch to boostrap our view of the network). With `ConnectionType` you can even grep code locations and points directly to where we are taking decisions based on type. That would be awesome for newcomers :)\r\n\r\nAs a follow-up ofc.",
    "created_at": "2020-07-03T03:02:15Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449353068",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449353068"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449353068"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449353068/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 120,
    "original_line": 120,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451079932",
    "pull_request_review_id": 444169739,
    "id": 451079932,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3OTkzMg==",
    "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
    "path": "src/net.h",
    "position": null,
    "original_position": 10,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I see how that would add some clarity, but it's also a bigger pain to maintain (if any other dimension of classification is added, all existing constants may need to be renamed).\r\n\r\nPerhaps having property test functions (`IsFull()`, `IsOutbound()`, `IsFeeler()`, ...) on `ConnectionType` gets you some of the advantages of more elaborate type names, without the maintenance burden?",
    "created_at": "2020-07-07T19:02:40Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r451079932",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451079932"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r451079932"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451079932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 448062841
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455959704",
    "pull_request_review_id": 450072425,
    "id": 455959704,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1OTcwNA==",
    "diff_hunk": "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 238,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Without restructuring `ThreadOpenConnections` completely, perhaps we can just do a simple `assert(false)` here just so that if the previous conditional changes, we'll notice in test failures?",
    "created_at": "2020-07-16T17:41:05Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r455959704",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455959704"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r455959704"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455959704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1956,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1943,
    "side": "RIGHT",
    "in_reply_to_id": 446363611
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456095241",
    "pull_request_review_id": 450237541,
    "id": 456095241,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5NTI0MQ==",
    "diff_hunk": "@@ -406,8 +414,8 @@ class CConnman\n     std::atomic<bool> fNetworkActive{true};\n     bool fAddressesInitialized{false};\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n-    RecursiveMutex cs_vOneShots;\n+    std::deque<std::string> vAddrFetchs GUARDED_BY(cs_vAddrFetchs);\n+    RecursiveMutex cs_vAddrFetchs;",
    "path": "src/net.h",
    "position": null,
    "original_position": 51,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "good point. I was focused on writing the scripted diff & forgot about new conventions. \r\n\r\ndo these renames seem correct? \r\nCNode: `fAddrFetch` -> `m_addr_fetch`\r\nCConnman: `vAddrFetchs` -> `m_addr_fetchs`\r\nCConnman: `cs_vAddrFetchs` -> `cs_addr_fetch`\r\n\r\naccording to the guidelines, `cs_vAddrFetchs` should be renamed to `m_cs_addr_fetch`, but `cs_addr_fetch` seems more consistent with our code, so I'm currently opting for that. if agreed, I can PR a small update to the guidelines. ",
    "created_at": "2020-07-16T21:43:42Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456095241",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456095241"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456095241"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456095241/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 409,
    "start_side": "LEFT",
    "line": null,
    "original_line": 418,
    "side": "RIGHT",
    "in_reply_to_id": 446168334
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456097539",
    "pull_request_review_id": 450240328,
    "id": 456097539,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5NzUzOQ==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
    "path": "src/net.h",
    "position": null,
    "original_position": 63,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I explored the option but there were enough call sites that I thought it would be unnecessarily verbose for no additional value. Since `fAddrFetch` is set via this comparison [here](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R2755), its mostly a simpler way to reference & doesn't introduce room for divergence I believe. Although one thing I'll do to strengthen this guarantee is remove the initialization to `false` here & make it a `const`. ",
    "created_at": "2020-07-16T21:49:08Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097539",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456097539"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097539"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456097539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 776,
    "side": "RIGHT",
    "in_reply_to_id": 446169181
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456097970",
    "pull_request_review_id": 450240676,
    "id": 456097970,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5Nzk3MA==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};\n     bool fClient{false}; // set by version message\n     bool m_limited_node{false}; //after BIP159, set by version message\n     const bool fInbound;",
    "path": "src/net.h",
    "position": null,
    "original_position": 66,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "same answer as https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097539, but `fInbound` is already a const. ",
    "created_at": "2020-07-16T21:49:51Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097970",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456097970"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097970"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456097970/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 781,
    "side": "RIGHT",
    "in_reply_to_id": 446217691
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456417946",
    "pull_request_review_id": 450624298,
    "id": 456417946,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQxNzk0Ng==",
    "diff_hunk": "@@ -406,8 +414,8 @@ class CConnman\n     std::atomic<bool> fNetworkActive{true};\n     bool fAddressesInitialized{false};\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n-    RecursiveMutex cs_vOneShots;\n+    std::deque<std::string> vAddrFetchs GUARDED_BY(cs_vAddrFetchs);\n+    RecursiveMutex cs_vAddrFetchs;",
    "path": "src/net.h",
    "position": null,
    "original_position": 51,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`m_addr_fetch` and `m_addr_fetches` seem fine. For the mutex, I'd suggest `m_addr_fetches_mutex`. The only reason we have the cs name for mutexes is that in v0.1, Satoshi used Windows CRITICAL_SECTIONs for locking.",
    "created_at": "2020-07-17T12:43:51Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456417946",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456417946"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456417946"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456417946/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 409,
    "start_side": "LEFT",
    "line": null,
    "original_line": 418,
    "side": "RIGHT",
    "in_reply_to_id": 446168334
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456431423",
    "pull_request_review_id": 450643064,
    "id": 456431423,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMTQyMw==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
    "path": "src/net.h",
    "position": null,
    "original_position": 63,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I see, maybe also consider a method like\r\n```cpp\r\nbool IsAddrFetch() { return m_conn_type == ConnectionType::ADDR_FETCH; }\r\n```",
    "created_at": "2020-07-17T13:10:06Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456431423",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456431423"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456431423"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456431423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 776,
    "side": "RIGHT",
    "in_reply_to_id": 446169181
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459151234",
    "pull_request_review_id": 453765071,
    "id": 459151234,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MTIzNA==",
    "diff_hunk": "@@ -406,8 +414,8 @@ class CConnman\n     std::atomic<bool> fNetworkActive{true};\n     bool fAddressesInitialized{false};\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n-    RecursiveMutex cs_vOneShots;\n+    std::deque<std::string> vAddrFetchs GUARDED_BY(cs_vAddrFetchs);\n+    RecursiveMutex cs_vAddrFetchs;",
    "path": "src/net.h",
    "position": null,
    "original_position": 51,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "thanks! updated ",
    "created_at": "2020-07-23T00:08:27Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459151234",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459151234"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459151234"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459151234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 409,
    "start_side": "LEFT",
    "line": null,
    "original_line": 418,
    "side": "RIGHT",
    "in_reply_to_id": 446168334
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459152220",
    "pull_request_review_id": 453766109,
    "id": 459152220,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MjIyMA==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
    "path": "src/net.h",
    "position": null,
    "original_position": 63,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "is there a reason you prefer the function over member var? I haven't incorporated yet but am open to it. just trying to understand the reasoning better ",
    "created_at": "2020-07-23T00:12:08Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459152220",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459152220"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459152220"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459152220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 776,
    "side": "RIGHT",
    "in_reply_to_id": 446169181
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459156946",
    "pull_request_review_id": 453771350,
    "id": 459156946,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1Njk0Ng==",
    "diff_hunk": "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 238,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I looked into starting with the conditional of `GetTryNewOutboundPeer()`, but I think that subtly changes the logic of the function. on current master, block-relay-only takes precedence over GetTryNewOutboundPeer, so starting with that check would change the behavior slightly. I don't feel comfortable enough with all scenarios to evaluate if that change is fine, so I made it explicit and added an `assert(false)` as a tiny improvement: [link](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R1942). does this seem any better? ",
    "created_at": "2020-07-23T00:30:18Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459156946",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459156946"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459156946"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459156946/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1956,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1943,
    "side": "RIGHT",
    "in_reply_to_id": 446363611
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459161841",
    "pull_request_review_id": 453776624,
    "id": 459161841,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MTg0MQ==",
    "diff_hunk": "@@ -1640,7 +1642,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ah yeah. totally agree with the nice compiler guarantee of switch statements. I've extracted `IsOutboundOrBlockRelayConn` into its own function, but looks like I missed incorporating the switch statement. I've updated locally and will push with next round of updates. \r\n\r\none question- in the other property-test-with-switch-statement functions [example](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-1a8b9d1ad0a6fda5e751286c73102fc2R814), I've had to add a default case because otherwise the build with `-Werror` enabled fails. is this a good way to handle? is there a cleaner way?",
    "created_at": "2020-07-23T00:50:05Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459161841",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459161841"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459161841"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459161841/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1645,
    "side": "RIGHT",
    "in_reply_to_id": 446372977
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162446",
    "pull_request_review_id": 453777236,
    "id": 459162446,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MjQ0Ng==",
    "diff_hunk": "@@ -1761,7 +1752,7 @@ int CConnman::GetExtraOutboundCount()\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->fOneShot && pnode->fSuccessfullyConnected) {\n+            if (pnode->fSuccessfullyConnected && !pnode->fDisconnect && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY)) {",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 141,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "resolving this comment in favor of https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446372977 which has also been extracted to `IsOutboundOrBlockRelayConn`",
    "created_at": "2020-07-23T00:52:34Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162446",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162446"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162446"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162446/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1755,
    "side": "RIGHT",
    "in_reply_to_id": 446374677
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162536",
    "pull_request_review_id": 453777330,
    "id": 459162536,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MjUzNg==",
    "diff_hunk": "@@ -797,11 +797,9 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n     if (state) state->m_last_block_announcement = time_in_seconds;\n }\n \n-// Returns true for outbound peers, excluding manual connections, feelers, and\n-// one-shots.\n static bool IsOutboundDisconnectionCandidate(const CNode& node)\n {\n-    return !(node.fInbound || node.m_manual_connection || node.fFeeler || node.fOneShot);\n+    return (node.m_conn_type == ConnectionType::OUTBOUND || node.m_conn_type == ConnectionType::BLOCK_RELAY);",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 18,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "resolving this comment in favor of #19316 (comment) which has also been extracted to `IsOutboundOrBlockRelayConn`",
    "created_at": "2020-07-23T00:52:58Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162536",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162536"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162536"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 802,
    "side": "RIGHT",
    "in_reply_to_id": 446245139
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162920",
    "pull_request_review_id": 453777738,
    "id": 459162920,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MjkyMA==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};",
    "path": "src/net.h",
    "position": null,
    "original_position": 62,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\ud83d\udc4d\ud83c\udffd  initialization removed (and some other stuff like making it private, const) ",
    "created_at": "2020-07-23T00:54:41Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162920",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162920"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162920"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 775,
    "side": "RIGHT",
    "in_reply_to_id": 446376641
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459163048",
    "pull_request_review_id": 453777836,
    "id": 459163048,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MzA0OA==",
    "diff_hunk": "@@ -856,7 +863,7 @@ class CNode\n \n     std::set<uint256> orphan_work_set;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false, bool block_relay_only = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", ConnectionType conn_type_in = ConnectionType::OUTBOUND);",
    "path": "src/net.h",
    "position": null,
    "original_position": 81,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-07-23T00:55:03Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459163048",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459163048"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459163048"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459163048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 866,
    "side": "RIGHT",
    "in_reply_to_id": 446381822
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459163406",
    "pull_request_review_id": 453778183,
    "id": 459163406,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MzQwNg==",
    "diff_hunk": "@@ -2252,7 +2250,7 @@ void ProcessMessage(\n         {\n             connman->SetServices(pfrom.addr, nServices);\n         }\n-        if (!pfrom.fInbound && !pfrom.fFeeler && !pfrom.m_manual_connection && !HasAllDesirableServiceFlags(nServices))\n+        if ((pfrom.m_conn_type == ConnectionType::OUTBOUND || pfrom.m_conn_type == ConnectionType::BLOCK_RELAY || pfrom.m_conn_type == ConnectionType::ADDR_FETCH) && !HasAllDesirableServiceFlags(nServices))",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 36,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "extracted into `ExpectServicesFromConn` & handled as switch statement ",
    "created_at": "2020-07-23T00:56:32Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459163406",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459163406"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459163406"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459163406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2253,
    "side": "RIGHT",
    "in_reply_to_id": 446384137
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459165938",
    "pull_request_review_id": 453781691,
    "id": 459165938,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NTkzOA==",
    "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
    "path": "src/net.h",
    "position": null,
    "original_position": 10,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "introduced property test functions\r\n& these behaviors should be captured in the code comments of each type ",
    "created_at": "2020-07-23T01:07:08Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459165938",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459165938"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459165938"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459165938/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 448062841
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459167580",
    "pull_request_review_id": 453784300,
    "id": 459167580,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NzU4MA==",
    "diff_hunk": "@@ -104,10 +104,10 @@ std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n \n-void CConnman::AddOneShot(const std::string& strDest)\n+void CConnman::AddAddrFetch(const std::string& strDest)",
    "path": "src/net.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c1aed85090874b4327088b686da68a26942789ec",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "hmm, I feel like this aspect could change over time- eg. we decide to use these conns to seed more addresses at other times. although I will improve the comment on the enum to express the current usage.",
    "created_at": "2020-07-23T01:13:24Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459167580",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459167580"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459167580"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459167580/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 108,
    "original_line": 108,
    "side": "RIGHT",
    "in_reply_to_id": 449348963
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459168253",
    "pull_request_review_id": 453784968,
    "id": 459168253,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2ODI1Mw==",
    "diff_hunk": "@@ -1835,7 +1835,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                     setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n                     if (pnode->m_tx_relay == nullptr) {\n                         nOutboundBlockRelay++;\n-                    } else if (pnode->m_conn_type != ConnectionType::FEELER) {\n+                    } else if (pnode->m_conn_type == ConnectionType::OUTBOUND) {",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "f2e183e5791be0322137cb9d90fb410ebcacbfd4",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\ud83d\udc4d  noted ",
    "created_at": "2020-07-23T01:16:13Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459168253",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459168253"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459168253"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459168253/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1838,
    "side": "RIGHT",
    "in_reply_to_id": 449352154
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459169620",
    "pull_request_review_id": 453786268,
    "id": 459169620,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2OTYyMA==",
    "diff_hunk": "@@ -2745,7 +2745,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr\n     // traffic).\n-    m_addr_known{conn_type_in == ConnectionType::BLOCK_RELAY ? nullptr : MakeUnique<CRollingBloomFilter>(5000, 0.001)},\n+    m_addr_known{nullptr},",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c035da9ba9f71ff6b4fd4e2e7c69f2683e1f0d5c",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "what's the advantage? \r\n\r\nits true that currently `m_addr_known` is set for everything block-relay-only connections, but if we hard code `IsAddrRelayPeer()` to be a block-relay-only connection, we'd have two entry points that could potentially get out of sync unless we remember to check & update, right?  ",
    "created_at": "2020-07-23T01:22:10Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459169620",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459169620"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459169620"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459169620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2743,
    "side": "RIGHT",
    "in_reply_to_id": 449349935
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459169923",
    "pull_request_review_id": 453786586,
    "id": 459169923,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2OTkyMw==",
    "diff_hunk": "@@ -1640,7 +1642,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "updated ",
    "created_at": "2020-07-23T01:23:29Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459169923",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459169923"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459169923"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459169923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1645,
    "side": "RIGHT",
    "in_reply_to_id": 446372977
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459386632",
    "pull_request_review_id": 454048546,
    "id": 459386632,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NjYzMg==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
    "path": "src/net.h",
    "position": null,
    "original_position": 63,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "* A bunch of methods would define the interface better. Otherwise the interface is \"I expose `m_conn_type` to you and you do whatever you want with it (including changing it). OTOH if methods are used `m_conn_type` can and should be made private.\r\n* It is shorter at the caller site (and I believe more readable).\r\n* Can have methods like `IsOutbound()` which do not translate to a single enum value and would need more complex expressions at the caller site.\r\n* Then it would be possible to change the enum `m_conn_type` to a set of boolean flags, bitmask or whatever other ideas there might be without changing the external interface.",
    "created_at": "2020-07-23T11:38:58Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459386632",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459386632"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459386632"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459386632/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 776,
    "side": "RIGHT",
    "in_reply_to_id": 446169181
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459388957",
    "pull_request_review_id": 454051446,
    "id": 459388957,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4ODk1Nw==",
    "diff_hunk": "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 238,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, it looks better to me (until the day when this assertion kicks in :-D)",
    "created_at": "2020-07-23T11:43:55Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459388957",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459388957"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459388957"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459388957/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1956,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1943,
    "side": "RIGHT",
    "in_reply_to_id": 446363611
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459397380",
    "pull_request_review_id": 454062123,
    "id": 459397380,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5NzM4MA==",
    "diff_hunk": "@@ -782,6 +791,72 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+            default:\n+                assert(false);\n+        }\n+    }\n+\n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    bool IsFeelerConn() const {\n+        return m_conn_type == ConnectionType::FEELER;\n+    }\n+\n+    bool IsUniqueNetBlockConn() const {\n+        // Netgroups for inbound and manual peers are not excluded because our goal here\n+        // is to not use multiple of our limited outbound slots on a single netgroup\n+        // but inbound and manual peers do not use our outbound slots.  Inbound peers\n+        // also have the added issue that they could be attacker controlled and used\n+        // to prevent us from connecting to particular hosts if we used them here.\n+        switch(m_conn_type) {\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+                return false;\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return true;\n+            default:\n+                assert(false);\n+        }\n+    }",
    "path": "src/net.h",
    "position": null,
    "original_position": 122,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "2e3514a35d4d5bf29cf2030aceb02dd3d38e44d0",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think remove the `default:` (so that we get a warning when a new enum is added and this code not updated to handle it) and put the `assert(false)` after the `switch` (so that the compiler stops complaining about reaching end of non-void function).\r\n\r\nIf some compiler is not smart enough to see that `assert(false)` is not going to return, then use [abort()](https://en.cppreference.com/w/cpp/utility/program/abort) which is marked as `[[noreturn]]`.",
    "created_at": "2020-07-23T12:01:48Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459397380",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459397380"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459397380"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459397380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 825,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 849,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459397956",
    "pull_request_review_id": 454062774,
    "id": 459397956,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5Nzk1Ng==",
    "diff_hunk": "@@ -1640,7 +1642,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I was going to suggest that this can be replaced with something like `if (pnode->IsOutboundOrBlockRelay())` - in which case the caller looks short and clean and the `switch` or chain of `if`s and the `enum` are hidden into the body of that method.\r\n\r\nSee https://github.com/bitcoin/bitcoin/pull/19316/files#r459397380",
    "created_at": "2020-07-23T12:02:50Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459397956",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459397956"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459397956"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459397956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1645,
    "side": "RIGHT",
    "in_reply_to_id": 446372977
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459701830",
    "pull_request_review_id": 454462383,
    "id": 459701830,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTgzMA==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
    "path": "src/net.h",
    "position": null,
    "original_position": 63,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ah, I think my question was unclear. let me try again- \r\n\r\nin the latest push, `m_conn_type` is indeed a [private member var](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R2746) & I've introduced [several accessor functions](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-1a8b9d1ad0a6fda5e751286c73102fc2R794) for callers.\r\n\r\nMy question here is asking about leaving `m_addr_fetch` as a member var on `CNode` VS another accessor function `IsAddrFetchConn()`. I'm wondering what the advantages are of adding the function vs leaving it in the current / past state of being accessed through this member var, `m_addr_fetch`. \r\n\r\n(same for inbound connection type) ",
    "created_at": "2020-07-23T20:14:39Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459701830",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459701830"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459701830"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459701830/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 776,
    "side": "RIGHT",
    "in_reply_to_id": 446169181
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459707834",
    "pull_request_review_id": 454469845,
    "id": 459707834,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwNzgzNA==",
    "diff_hunk": "@@ -1640,7 +1642,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> this can be replaced with something like if (pnode->IsOutboundOrBlockRelay())\r\n\r\nyup, already done [link](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R1651) :) ",
    "created_at": "2020-07-23T20:26:08Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459707834",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459707834"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459707834"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459707834/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1645,
    "side": "RIGHT",
    "in_reply_to_id": 446372977
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459731470",
    "pull_request_review_id": 454499559,
    "id": 459731470,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMTQ3MA==",
    "diff_hunk": "@@ -782,6 +791,72 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+            default:\n+                assert(false);\n+        }\n+    }\n+\n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    bool IsFeelerConn() const {\n+        return m_conn_type == ConnectionType::FEELER;\n+    }\n+\n+    bool IsUniqueNetBlockConn() const {\n+        // Netgroups for inbound and manual peers are not excluded because our goal here\n+        // is to not use multiple of our limited outbound slots on a single netgroup\n+        // but inbound and manual peers do not use our outbound slots.  Inbound peers\n+        // also have the added issue that they could be attacker controlled and used\n+        // to prevent us from connecting to particular hosts if we used them here.\n+        switch(m_conn_type) {\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+                return false;\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return true;\n+            default:\n+                assert(false);\n+        }\n+    }",
    "path": "src/net.h",
    "position": null,
    "original_position": 122,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "2e3514a35d4d5bf29cf2030aceb02dd3d38e44d0",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "updated. I think this will also appease the compiler, but will wait for travis build to confirm..",
    "created_at": "2020-07-23T21:13:36Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459731470",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459731470"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459731470"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459731470/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 825,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 849,
    "side": "RIGHT",
    "in_reply_to_id": 459397380
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459731858",
    "pull_request_review_id": 454500127,
    "id": 459731858,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMTg1OA==",
    "diff_hunk": "@@ -104,10 +104,10 @@ std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n \n-void CConnman::AddOneShot(const std::string& strDest)\n+void CConnman::AddAddrFetch(const std::string& strDest)",
    "path": "src/net.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c1aed85090874b4327088b686da68a26942789ec",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "updated the comment to `short lived connections used to solicit addrs when starting the node without a populated AddrMan`, let me know if this feels clear \r\n",
    "created_at": "2020-07-23T21:14:37Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459731858",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459731858"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459731858"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459731858/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 108,
    "original_line": 108,
    "side": "RIGHT",
    "in_reply_to_id": 449348963
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459931246",
    "pull_request_review_id": 454730445,
    "id": 459931246,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMTI0Ng==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
    "path": "src/net.h",
    "position": null,
    "original_position": 63,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I suggested to use a method `IsAddrFetch()` because you said `m_conn_type == ConnectionType::ADDR_FETCH` would be unnecessarily verbose at the callers' sites (it is, I agree).\r\n\r\nNow that accessor methods have been added I think there is no need to keep `fAddrFetch` and it can be replaced by `IsAddrFetch()`?",
    "created_at": "2020-07-24T08:55:26Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459931246",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459931246"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459931246"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459931246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 776,
    "side": "RIGHT",
    "in_reply_to_id": 446169181
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460535833",
    "pull_request_review_id": 455370301,
    "id": 460535833,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNTgzMw==",
    "diff_hunk": "@@ -2745,7 +2745,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr\n     // traffic).\n-    m_addr_known{conn_type_in == ConnectionType::BLOCK_RELAY ? nullptr : MakeUnique<CRollingBloomFilter>(5000, 0.001)},\n+    m_addr_known{nullptr},",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c035da9ba9f71ff6b4fd4e2e7c69f2683e1f0d5c",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it simplifies code understanding. To know how `IsAddrRelayPeer` is going to behave, I have first to read function declaration and then `CNode` constructor on how we initialize `m_addr_known` in function of connection type. Note, it's already how the current code behaves, so it was just a suggestion of improvement. \r\n\r\nI guess this discussion belong to the more general one of a connection-attribute model where we annotate them on a node at connection initialization.",
    "created_at": "2020-07-26T14:41:23Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r460535833",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460535833"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r460535833"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460535833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2743,
    "side": "RIGHT",
    "in_reply_to_id": 449349935
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460541326",
    "pull_request_review_id": 455374233,
    "id": 460541326,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0MTMyNg==",
    "diff_hunk": "@@ -792,6 +791,72 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+        }\n+\n+        assert(false);\n+    }\n+\n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    bool IsFeelerConn() const {",
    "path": "src/net.h",
    "position": 102,
    "original_position": 39,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "6a1259c574c96c7059e3b6a61b79d56d59c48508",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree this is clearly an improvement. When we fine-grain them more in the future, for each of them I think we could have comments like\r\n\r\n```\r\nThis connection implements the feeler-behavior, aiming to periodically sanitize our addr db.\r\nIt's automatically-initiated every FEELER_INTERVAL. It can't be user-triggered.\r\nOnce we verify an online peer is associated to the addr by receiving a VERSION msg, disconnect\r\n```",
    "created_at": "2020-07-26T15:34:06Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r460541326",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460541326"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r460541326"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460541326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 819,
    "original_line": 819,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462715552",
    "pull_request_review_id": 458049650,
    "id": 462715552,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTU1Mg==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
    "path": "src/net.h",
    "position": null,
    "original_position": 63,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "removed `fAddrFetch` and introduced `IsAddrFetch()` in latest push \ud83c\udf88",
    "created_at": "2020-07-30T03:39:49Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r462715552",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462715552"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r462715552"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462715552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 776,
    "side": "RIGHT",
    "in_reply_to_id": 446169181
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462715733",
    "pull_request_review_id": 458049818,
    "id": 462715733,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTczMw==",
    "diff_hunk": "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};\n     bool fClient{false}; // set by version message\n     bool m_limited_node{false}; //after BIP159, set by version message\n     const bool fInbound;",
    "path": "src/net.h",
    "position": null,
    "original_position": 66,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "43cec7b2a1a932f7784b037601a4fa3895e082b7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "removed `fInbound` & exposed via `IsInboundConn()`",
    "created_at": "2020-07-30T03:40:25Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r462715733",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462715733"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r462715733"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462715733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 781,
    "side": "RIGHT",
    "in_reply_to_id": 446217691
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462717452",
    "pull_request_review_id": 458051680,
    "id": 462717452,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNzQ1Mg==",
    "diff_hunk": "@@ -792,6 +791,72 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+        }\n+\n+        assert(false);\n+    }\n+\n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    bool IsFeelerConn() const {",
    "path": "src/net.h",
    "position": 102,
    "original_position": 39,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "6a1259c574c96c7059e3b6a61b79d56d59c48508",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ya, agree this would be a good place for any additional docs- could add doxygen annotations to these functions. but going to leave for a follow-up (feel free to propose if you're interested :))",
    "created_at": "2020-07-30T03:47:19Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r462717452",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462717452"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r462717452"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462717452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 819,
    "original_line": 819,
    "side": "RIGHT",
    "in_reply_to_id": 460541326
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464488283",
    "pull_request_review_id": 460123310,
    "id": 464488283,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4ODI4Mw==",
    "diff_hunk": "@@ -110,7 +110,7 @@ class CMainParams : public CChainParams {\n \n         // Note that of those which support the service bits prefix, most only support a subset of\n         // possible options.\n-        // This is fine at runtime as we'll fall back to using them as a oneshot if they don't support the\n+        // This is fine at runtime as we'll fall back to using them as a addrfetch if they don't support the",
    "path": "src/chainparams.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: should be \"an addrfetch\".",
    "created_at": "2020-08-03T15:28:27Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464488283",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464488283"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464488283"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464488283/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 113,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464489550",
    "pull_request_review_id": 460123310,
    "id": 464489550,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4OTU1MA==",
    "diff_hunk": "@@ -792,8 +873,8 @@ class CNode\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n-    const std::unique_ptr<CRollingBloomFilter> m_addr_known;\n-    bool fGetAddr{false};\n+    std::unique_ptr<CRollingBloomFilter> m_addr_known;",
    "path": "src/net.h",
    "position": null,
    "original_position": 158,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: default initialize this to nullptr here and remove it from the initializer list.",
    "created_at": "2020-08-03T15:30:18Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464489550",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464489550"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464489550"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464489550/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 876,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464493063",
    "pull_request_review_id": 460123310,
    "id": 464493063,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ5MzA2Mw==",
    "diff_hunk": "@@ -792,8 +873,8 @@ class CNode\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n-    const std::unique_ptr<CRollingBloomFilter> m_addr_known;\n-    bool fGetAddr{false};\n+    std::unique_ptr<CRollingBloomFilter> m_addr_known;\n+    bool fGetAddr{false}; //!< used to prevent relaying addr messages sent in response to a GETADDR request",
    "path": "src/net.h",
    "position": null,
    "original_position": 159,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: This comment doesn't seem to be part of the rest of the changes in this PR. (I also think `fGetAddr` should probably be removed since the way it currently gets set to false doesn't make much sense).",
    "created_at": "2020-08-03T15:36:08Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464493063",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464493063"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464493063"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464493063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 877,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464518554",
    "pull_request_review_id": 460123310,
    "id": 464518554,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxODU1NA==",
    "diff_hunk": "@@ -1945,14 +1927,25 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity, or if\n+            // GetTryNewOutboundPeer() is true. If full-relay capacity is met,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else if (GetTryNewOutboundPeer()) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else {\n+                assert(false);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 249,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't like this new assert. It seems safe for now because of the logic earlier in this function, but I don't think we should rely on that (or something else) not changing. Why not just maintain the old behaviour of this always creating `OUTBOUND` connections when they're not `FEELER` or `BLOCK_RELAY`",
    "created_at": "2020-08-03T16:19:22Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464518554",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464518554"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464518554"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464518554/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1945,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464526492",
    "pull_request_review_id": 460123310,
    "id": 464526492,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyNjQ5Mg==",
    "diff_hunk": "@@ -782,6 +789,80 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+        }\n+\n+        assert(false);\n+    }\n+\n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    bool IsFeelerConn() const {\n+        return m_conn_type == ConnectionType::FEELER;\n+    }\n+\n+    bool IsAddrFetchConn() const {\n+        return m_conn_type == ConnectionType::ADDR_FETCH;\n+    }\n+\n+    bool IsInboundConn() const {\n+        return m_conn_type == ConnectionType::INBOUND;\n+    }\n+\n+    bool IsUniqueNetBlockConn() const {",
    "path": "src/net.h",
    "position": null,
    "original_position": 114,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't love this (or `ExpectServicesFromConn()` below) where logic that is only used in one calling function is placed inside the class. `IsUniqueNetBlockConn()` is very specific to `ThreadOpenConnections()` so it makes sense to me that the logic and comment should live in that function.\r\n\r\nI realise this sounds like a contradiction of https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-655057621, but to me these very specific cases don't belong inside the object.",
    "created_at": "2020-08-03T16:33:43Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464526492",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464526492"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464526492"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464526492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 831,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465209813",
    "pull_request_review_id": 461018492,
    "id": 465209813,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwOTgxMw==",
    "diff_hunk": "@@ -1945,14 +1927,25 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity, or if\n+            // GetTryNewOutboundPeer() is true. If full-relay capacity is met,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else if (GetTryNewOutboundPeer()) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else {\n+                assert(false);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 249,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "hm, I don't quite follow your logic. If a developer were to change the function's logic flow without properly attending to this switch statement, in one case we'd silently open (short lived) `OUTBOUND` connections & in the other case the developer would hit a compiler error. is this different than how you're thinking about the use cases? \r\n\r\nalso, see https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446363611 for more convo on this topic ",
    "created_at": "2020-08-04T17:23:22Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r465209813",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465209813"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r465209813"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465209813/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1945,
    "side": "RIGHT",
    "in_reply_to_id": 464518554
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465211310",
    "pull_request_review_id": 461020254,
    "id": 465211310,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxMTMxMA==",
    "diff_hunk": "@@ -792,8 +873,8 @@ class CNode\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n-    const std::unique_ptr<CRollingBloomFilter> m_addr_known;\n-    bool fGetAddr{false};\n+    std::unique_ptr<CRollingBloomFilter> m_addr_known;\n+    bool fGetAddr{false}; //!< used to prevent relaying addr messages sent in response to a GETADDR request",
    "path": "src/net.h",
    "position": null,
    "original_position": 159,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "heh, yeah, I was trying to sneak it in. but you're right, it doesn't fit in. I'll remove from this PR \r\n\r\nagree that `fGetAddr` is weird. +1 to a rethink. ",
    "created_at": "2020-08-04T17:25:52Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r465211310",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465211310"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r465211310"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465211310/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 877,
    "side": "RIGHT",
    "in_reply_to_id": 464493063
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465215591",
    "pull_request_review_id": 461025604,
    "id": 465215591,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxNTU5MQ==",
    "diff_hunk": "@@ -782,6 +789,80 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+        }\n+\n+        assert(false);\n+    }\n+\n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    bool IsFeelerConn() const {\n+        return m_conn_type == ConnectionType::FEELER;\n+    }\n+\n+    bool IsAddrFetchConn() const {\n+        return m_conn_type == ConnectionType::ADDR_FETCH;\n+    }\n+\n+    bool IsInboundConn() const {\n+        return m_conn_type == ConnectionType::INBOUND;\n+    }\n+\n+    bool IsUniqueNetBlockConn() const {",
    "path": "src/net.h",
    "position": null,
    "original_position": 114,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't have a strong preference either way, but agree with you around `IsUniqueNetBlockConn` and `ExpectServicesFromConn` not being particularly helpful. Since both are implemented as switch statements, I think I'll revert to having them integrated into their calling functions. \r\n\r\nsome of the other `m_conn_type` wrappers are also only used in one location. eg. `IsFeelerConn` & `IsBlockOnlyConn`. But I'm going to leave them as is. \r\n\r\nreviewers- if you disagree, please help me understand why! ",
    "created_at": "2020-08-04T17:33:09Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r465215591",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465215591"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r465215591"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465215591/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 831,
    "side": "RIGHT",
    "in_reply_to_id": 464526492
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466373442",
    "pull_request_review_id": 462466709,
    "id": 466373442,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM3MzQ0Mg==",
    "diff_hunk": "@@ -1945,14 +1927,25 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity, or if\n+            // GetTryNewOutboundPeer() is true. If full-relay capacity is met,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else if (GetTryNewOutboundPeer()) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else {\n+                assert(false);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 249,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This isn't a switch statement, and there aren't any compile time checks. `assert(false)` is a runtime error.\r\n\r\nHere's what I'm worried about:\r\n\r\n- in line 1856 (https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R1856), both outbound and block-relay-only are full, and `GetTryNewOutboundPeer()` is true, so we don't set `fFeeler` to true.\r\n- meanwhile, on the ~message handler~ scheduler thread, `SetTryNewOutboundPeer(false)` is called.\r\n- we then reach this line where `fFeeler` is false, both outbound and block-relay-only are full, and `GetTryNewOutboundPeer()` is false. We assert and terminate.\r\n\r\nYou've justified this change above:\r\n\r\n> GetTryNewOutboundPeer is simply a wrapper for m_try_another_outbound_peer, which is set to true when a stale tip is detected (link).\r\n> \r\n> so, when we get to this current conditional, if fFeeler if false & our full-relay and block-relay connection counts are at the allocated max -> GetTryNewOutboundPeer must be true.\r\n\r\n`m_try_another_outbound_peer` is updated by another thread, and there's no lock on that data between the conditional above and this line, so there's no guarantee that it won't change. We may be lucky and some combination of other conditions in the eviction/stale tip logic in net_processing means this won't actually happen, but it seems possible that there's a window condition where it could, which would result in users' nodes very intermittently terminating.\r\n\r\nI think this conn_type logic can probably be moved up and merged with the `fFeeler` setting logic above (`fFeeler`, `nOutboundFullRelay` and `nOutboundBlockRelay` don't get updated in the intervening code, so why not just set `conn_type` above?), but I don't think we should complicate this PR by doing that here. For this PR, I think we should just not add this assert.\r\n\r\nEDIT: `SetTryNewOutboundPeer()` is called on the scheduler thread, not message handler thread. Everything else still stands.",
    "created_at": "2020-08-06T12:24:12Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r466373442",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466373442"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r466373442"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466373442/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1945,
    "side": "RIGHT",
    "in_reply_to_id": 464518554
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467287437",
    "pull_request_review_id": 463654319,
    "id": 467287437,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4NzQzNw==",
    "diff_hunk": "@@ -1945,14 +1927,25 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity, or if\n+            // GetTryNewOutboundPeer() is true. If full-relay capacity is met,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else if (GetTryNewOutboundPeer()) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else {\n+                assert(false);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 249,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ah, I missed that its updated by a separate thread. thanks for this explanation!   ",
    "created_at": "2020-08-07T21:39:34Z",
    "updated_at": "2020-08-08T00:33:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467287437",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467287437"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467287437"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467287437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1945,
    "side": "RIGHT",
    "in_reply_to_id": 464518554
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467337688",
    "pull_request_review_id": 463699363,
    "id": 467337688,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzY4OA==",
    "diff_hunk": "@@ -110,7 +110,7 @@ class CMainParams : public CChainParams {\n \n         // Note that of those which support the service bits prefix, most only support a subset of\n         // possible options.\n-        // This is fine at runtime as we'll fall back to using them as a oneshot if they don't support the\n+        // This is fine at runtime as we'll fall back to using them as a addrfetch if they don't support the",
    "path": "src/chainparams.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed ",
    "created_at": "2020-08-08T00:33:38Z",
    "updated_at": "2020-08-08T00:33:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467337688",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467337688"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467337688"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467337688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 113,
    "side": "RIGHT",
    "in_reply_to_id": 464488283
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467337898",
    "pull_request_review_id": 463699600,
    "id": 467337898,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzg5OA==",
    "diff_hunk": "@@ -792,8 +873,8 @@ class CNode\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n-    const std::unique_ptr<CRollingBloomFilter> m_addr_known;\n-    bool fGetAddr{false};\n+    std::unique_ptr<CRollingBloomFilter> m_addr_known;",
    "path": "src/net.h",
    "position": null,
    "original_position": 158,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done ",
    "created_at": "2020-08-08T00:35:11Z",
    "updated_at": "2020-08-08T00:35:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467337898",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467337898"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467337898"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467337898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 876,
    "side": "RIGHT",
    "in_reply_to_id": 464489550
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467337978",
    "pull_request_review_id": 463699687,
    "id": 467337978,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzk3OA==",
    "diff_hunk": "@@ -792,8 +873,8 @@ class CNode\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n-    const std::unique_ptr<CRollingBloomFilter> m_addr_known;\n-    bool fGetAddr{false};\n+    std::unique_ptr<CRollingBloomFilter> m_addr_known;\n+    bool fGetAddr{false}; //!< used to prevent relaying addr messages sent in response to a GETADDR request",
    "path": "src/net.h",
    "position": null,
    "original_position": 159,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "removed ",
    "created_at": "2020-08-08T00:35:40Z",
    "updated_at": "2020-08-08T00:35:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467337978",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467337978"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467337978"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467337978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 877,
    "side": "RIGHT",
    "in_reply_to_id": 464493063
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467338094",
    "pull_request_review_id": 463699841,
    "id": 467338094,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODA5NA==",
    "diff_hunk": "@@ -1945,14 +1927,25 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity, or if\n+            // GetTryNewOutboundPeer() is true. If full-relay capacity is met,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else if (GetTryNewOutboundPeer()) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else {\n+                assert(false);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 249,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "updated. nice catch! ",
    "created_at": "2020-08-08T00:36:30Z",
    "updated_at": "2020-08-08T00:36:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467338094",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467338094"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467338094"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467338094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1945,
    "side": "RIGHT",
    "in_reply_to_id": 464518554
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467338355",
    "pull_request_review_id": 463700170,
    "id": 467338355,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODM1NQ==",
    "diff_hunk": "@@ -782,6 +789,80 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+        }\n+\n+        assert(false);\n+    }\n+\n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    bool IsFeelerConn() const {\n+        return m_conn_type == ConnectionType::FEELER;\n+    }\n+\n+    bool IsAddrFetchConn() const {\n+        return m_conn_type == ConnectionType::ADDR_FETCH;\n+    }\n+\n+    bool IsInboundConn() const {\n+        return m_conn_type == ConnectionType::INBOUND;\n+    }\n+\n+    bool IsUniqueNetBlockConn() const {",
    "path": "src/net.h",
    "position": null,
    "original_position": 114,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I ended up inlining `IsUniqueNetBlockConn`, but left `ExpectServicesFromConn` because I couldn't figure out a clear way to inline while maintaining a switch statement.",
    "created_at": "2020-08-08T00:38:36Z",
    "updated_at": "2020-08-08T00:38:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467338355",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467338355"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467338355"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467338355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 831,
    "side": "RIGHT",
    "in_reply_to_id": 464526492
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467441825",
    "pull_request_review_id": 463793837,
    "id": 467441825,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ0MTgyNQ==",
    "diff_hunk": "@@ -113,13 +113,16 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+/** Different types of connections to a peer. This enum encapsulates the\n+ * information we have available at the time of opening or accepting the\n+ * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND,\n-    OUTBOUND,\n-    MANUAL,\n-    FEELER,\n-    BLOCK_RELAY,\n-    ADDR_FETCH,\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */",
    "path": "src/net.h",
    "position": 13,
    "original_position": 19,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "46578c03e92a55925308363ccdad04dcfc820d96",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wonder if it might make sense to prefix the different outbound types with OUTBOUND_, so that it's clear to code readers in the future that these are all different types of outbound peers?  In the future, for instance, I'm hoping to propose a way to negotiate block-relay-only connections at connection startup time, and then we'd be able to have both OUTBOUND_BLOCK_RELAY and INBOUND_BLOCK_RELAY peers.\r\n\r\nIf you were to go this route, then I'd suggest OUTBOUND could be renamed to OUTBOUND_FULL_RELAY or something like that.",
    "created_at": "2020-08-08T10:15:36Z",
    "updated_at": "2020-08-08T10:32:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467441825",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467441825"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467441825"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467441825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 125,
    "original_line": 125,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467453029",
    "pull_request_review_id": 463795633,
    "id": 467453029,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1MzAyOQ==",
    "diff_hunk": "@@ -113,13 +113,16 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+/** Different types of connections to a peer. This enum encapsulates the\n+ * information we have available at the time of opening or accepting the\n+ * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND,\n-    OUTBOUND,\n-    MANUAL,\n-    FEELER,\n-    BLOCK_RELAY,\n-    ADDR_FETCH,\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */",
    "path": "src/net.h",
    "position": 13,
    "original_position": 19,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "46578c03e92a55925308363ccdad04dcfc820d96",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This was my feedback as well: https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448062841",
    "created_at": "2020-08-08T10:52:41Z",
    "updated_at": "2020-08-08T10:52:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467453029",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467453029"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467453029"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467453029/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 125,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 467441825
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467458095",
    "pull_request_review_id": 463798713,
    "id": 467458095,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1ODA5NQ==",
    "diff_hunk": "@@ -113,13 +113,16 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+/** Different types of connections to a peer. This enum encapsulates the\n+ * information we have available at the time of opening or accepting the\n+ * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND,\n-    OUTBOUND,\n-    MANUAL,\n-    FEELER,\n-    BLOCK_RELAY,\n-    ADDR_FETCH,\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */",
    "path": "src/net.h",
    "position": 13,
    "original_position": 19,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "46578c03e92a55925308363ccdad04dcfc820d96",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oops, sorry for the noise and missing the earlier discussion. This would be fine to do later as well once we get around to adding more inbound types.",
    "created_at": "2020-08-08T11:57:52Z",
    "updated_at": "2020-08-08T11:57:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467458095",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467458095"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467458095"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467458095/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 125,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 467441825
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467486598",
    "pull_request_review_id": 463816568,
    "id": 467486598,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NjU5OA==",
    "diff_hunk": "@@ -113,13 +113,16 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+/** Different types of connections to a peer. This enum encapsulates the\n+ * information we have available at the time of opening or accepting the\n+ * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND,\n-    OUTBOUND,\n-    MANUAL,\n-    FEELER,\n-    BLOCK_RELAY,\n-    ADDR_FETCH,\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */",
    "path": "src/net.h",
    "position": 13,
    "original_position": 19,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "46578c03e92a55925308363ccdad04dcfc820d96",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Oops, sorry for the noise and missing the earlier discussion. \r\n\r\nno worries. would rather you read the code :) \r\n\r\n>  I'm hoping to propose a way to negotiate block-relay-only connections at connection startup time, and then we'd be able to have both OUTBOUND_BLOCK_RELAY and INBOUND_BLOCK_RELAY peers.\r\n\r\noh interesting! curious to see how it develops.\r\n \r\nI've tended towards sticking with the simpler names because (1) its hard to discern exactly what properties will be relevant for the future eg. ariard [mentioned](https://github.com/bitcoin/bitcoin/pull/19316#pullrequestreview-442115002) manual block relay connections / could lead to maintenance burden as sipa mentioned. (2) it should be easy to rename in the future with a scripted diff (3) just as a personal preference, eg. `OUTBOUND_AUTO_FEELER` feels unnecessarily verbose when we don't have an idea of any other types of feeler connections. or `INBOUND_AUTO_FULL` could be slightly misleading because maybe its actually only blocks being relayed on this connection. ",
    "created_at": "2020-08-08T17:30:44Z",
    "updated_at": "2020-08-08T17:30:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467486598",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467486598"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467486598"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467486598/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 125,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 467441825
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467968290",
    "pull_request_review_id": 464312628,
    "id": 467968290,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2ODI5MA==",
    "diff_hunk": "@@ -113,6 +113,17 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+/** Different types of connections to a peer. This enum encapsulates the\n+ * information we have available at the time of opening or accepting the\n+ * connection. Aside from INBOUND, all types are initiated by us. */\n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */",
    "path": "src/net.h",
    "position": 9,
    "original_position": 9,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I like the idea of a connection type enum, but I'd like to rename `INBOUND` and `OUTBOUND` here as it's a bit of a odd man out (as commented earlier, it's not the exclusive thing identifying this type of connection). Maybe `FULL_RELAY_INBOUND` and `FULL_RELAY_OUTBOUND`?\r\n\r\nEdit: Oh, I see this has already been discussed a lot, sorry!",
    "created_at": "2020-08-10T15:03:56Z",
    "updated_at": "2020-08-10T15:20:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467968290",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467968290"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467968290"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467968290/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 121,
    "original_line": 121,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467986125",
    "pull_request_review_id": 464339092,
    "id": 467986125,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk4NjEyNQ==",
    "diff_hunk": "@@ -113,13 +113,16 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+/** Different types of connections to a peer. This enum encapsulates the\n+ * information we have available at the time of opening or accepting the\n+ * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND,\n-    OUTBOUND,\n-    MANUAL,\n-    FEELER,\n-    BLOCK_RELAY,\n-    ADDR_FETCH,\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */",
    "path": "src/net.h",
    "position": 13,
    "original_position": 19,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "46578c03e92a55925308363ccdad04dcfc820d96",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Perhaps it would be helpful to mention that `-seednode` peers specified on the command line get converted to `ADDR_FETCH` peers?  ",
    "created_at": "2020-08-10T15:30:03Z",
    "updated_at": "2020-08-10T17:24:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467986125",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467986125"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467986125"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467986125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 125,
    "original_line": 125,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468001604",
    "pull_request_review_id": 464339092,
    "id": 468001604,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwMTYwNA==",
    "diff_hunk": "@@ -875,6 +875,7 @@ class CNode\n private:\n     const NodeId id;\n     const uint64_t nLocalHostNonce;\n+    const ConnectionType m_conn_type;",
    "path": "src/net.h",
    "position": 154,
    "original_position": 4,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "d3698b5ee309cf0f0cdfb286d6b30a256d7deae5",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Would be great to expose this in the `getpeerinfo` RPC (not necessarily in this PR).",
    "created_at": "2020-08-10T15:43:39Z",
    "updated_at": "2020-08-10T17:24:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468001604",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468001604"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468001604"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468001604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 928,
    "original_line": 878,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468018093",
    "pull_request_review_id": 464339092,
    "id": 468018093,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxODA5Mw==",
    "diff_hunk": "@@ -3455,7 +3447,7 @@ void ProcessMessage(\n         // to users' AddrMan and later request them by sending getaddr messages.\n         // Making nodes which are behind NAT and can only make outgoing connections ignore\n         // the getaddr message mitigates the attack.\n-        if (!pfrom.fInbound) {\n+        if (!pfrom.IsInboundConn()) {\n             LogPrint(BCLog::NET, \"Ignoring \\\"getaddr\\\" from outbound connection. peer=%d\\n\", pfrom.GetId());",
    "path": "src/net_processing.cpp",
    "position": 132,
    "original_position": 132,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Would it make sense to update the log message here to output the actual ConnectionType of the peer?  The use of \"outbound\" in the log message could be confusing otherwise, given that our enum is OUTBOUND but this could be any of the outbound connection types.\r\n\r\nIt might similarly be good to update the LogPrintf a few lines down (where we print \"Ignoring getaddr from block-relay-only peer\").",
    "created_at": "2020-08-10T16:09:48Z",
    "updated_at": "2020-08-10T17:24:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468018093",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468018093"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468018093"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468018093/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3451,
    "original_line": 3451,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468025462",
    "pull_request_review_id": 464339092,
    "id": 468025462,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAyNTQ2Mg==",
    "diff_hunk": "@@ -197,7 +208,7 @@ class CConnman\n     bool GetNetworkActive() const { return fNetworkActive; };\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false, bool block_relay_only = false);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, ConnectionType conn_type = ConnectionType::OUTBOUND);",
    "path": "src/net.h",
    "position": 23,
    "original_position": 23,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think we can get rid of all default arguments here now?",
    "created_at": "2020-08-10T16:21:33Z",
    "updated_at": "2020-08-10T17:24:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468025462",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468025462"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468025462"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468025462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 211,
    "original_line": 211,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468028143",
    "pull_request_review_id": 464339092,
    "id": 468028143,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAyODE0Mw==",
    "diff_hunk": "@@ -1965,14 +1958,14 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n                 // until we have a headers chain that has at least\n                 // nMinimumChainWork, even if a peer has a chain past our tip,\n                 // as an anti-DoS measure.\n-                if (IsOutboundDisconnectionCandidate(pfrom)) {\n+                if (pfrom.IsOutboundOrBlockRelayConn()) {\n                     LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom.GetId());\n                     pfrom.fDisconnect = true;\n                 }\n             }\n         }\n \n-        if (!pfrom.fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr && pfrom.m_tx_relay != nullptr) {\n+        if (!pfrom.fDisconnect && pfrom.IsOutboundOrBlockRelayConn() && nodestate->pindexBestKnownBlock != nullptr && pfrom.m_tx_relay != nullptr) {",
    "path": "src/net_processing.cpp",
    "position": 47,
    "original_position": 47,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think we can clean this up now to look like:\r\n```\r\nif (!pfrom.fDisconnect && pfrom.IsFullOutboundConn() && nodestate->pindexBestKnownBlock != nullptr) {\r\n```",
    "created_at": "2020-08-10T16:26:16Z",
    "updated_at": "2020-08-10T17:24:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468028143",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468028143"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468028143"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468028143/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1968,
    "original_line": 1968,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468029929",
    "pull_request_review_id": 464339092,
    "id": 468029929,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAyOTkyOQ==",
    "diff_hunk": "@@ -2410,7 +2403,7 @@ void ProcessMessage(\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.fInbound && pfrom.IsAddrRelayPeer())\n+        if (!pfrom.IsInboundConn() && pfrom.IsAddrRelayPeer())",
    "path": "src/net_processing.cpp",
    "position": 94,
    "original_position": 94,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wonder if we should rewrite this to be more explicit about which connection types we're interested in?  Here, we're mixing a new flat-type check with a bucket-of-bools-style check.\r\n\r\nPerhaps we should try to nuke `IsAddrRelayPeer()` (a function which checks for whether a data structure exists), or change its definition to only reference connection types?",
    "created_at": "2020-08-10T16:29:12Z",
    "updated_at": "2020-08-10T17:24:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468029929",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468029929"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468029929"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468029929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2406,
    "original_line": 2406,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468039145",
    "pull_request_review_id": 464399984,
    "id": 468039145,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAzOTE0NQ==",
    "diff_hunk": "@@ -113,6 +113,17 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+/** Different types of connections to a peer. This enum encapsulates the\n+ * information we have available at the time of opening or accepting the\n+ * connection. Aside from INBOUND, all types are initiated by us. */\n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */",
    "path": "src/net.h",
    "position": 9,
    "original_position": 9,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "with `INBOUND` I do think this is the only known characteristic of the connection, but I'm happy to rename `OUTBOUND` to `FULL_RELAY_OUTBOUND`.",
    "created_at": "2020-08-10T16:44:44Z",
    "updated_at": "2020-08-10T16:44:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468039145",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468039145"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468039145"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468039145/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 121,
    "original_line": 121,
    "side": "RIGHT",
    "in_reply_to_id": 467968290
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468056355",
    "pull_request_review_id": 464422094,
    "id": 468056355,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NjM1NQ==",
    "diff_hunk": "@@ -113,6 +113,17 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+/** Different types of connections to a peer. This enum encapsulates the\n+ * information we have available at the time of opening or accepting the\n+ * connection. Aside from INBOUND, all types are initiated by us. */\n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */",
    "path": "src/net.h",
    "position": 9,
    "original_position": 9,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sounds good to me!",
    "created_at": "2020-08-10T17:15:19Z",
    "updated_at": "2020-08-10T17:15:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468056355",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468056355"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468056355"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468056355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 121,
    "original_line": 121,
    "side": "RIGHT",
    "in_reply_to_id": 467968290
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468549732",
    "pull_request_review_id": 465025845,
    "id": 468549732,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0OTczMg==",
    "diff_hunk": "@@ -1838,21 +1829,27 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n-                        nOutboundBlockRelay++;\n-                    } else if (!pnode->fFeeler) {\n-                        nOutboundFullRelay++;\n-                    }\n+                if (pnode->IsFullOutboundConn()) nOutboundFullRelay++;\n+                if (pnode->IsBlockOnlyConn()) nOutboundBlockRelay++;\n+\n+                // Netgroups for inbound and manual peers are not excluded because our goal here\n+                // is to not use multiple of our limited outbound slots on a single netgroup\n+                // but inbound and manual peers do not use our outbound slots. Inbound peers\n+                // also have the added issue that they could be attacker controlled and used\n+                // to prevent us from connecting to particular hosts if we used them here.\n+                switch(pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        break;",
    "path": "src/net.cpp",
    "position": 228,
    "original_position": 228,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "~This should be a `continue`~\r\n\r\nOops, no this is fine.",
    "created_at": "2020-08-11T12:42:40Z",
    "updated_at": "2020-08-11T13:15:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468549732",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468549732"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468549732"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468549732/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1847,
    "original_line": 1847,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468550218",
    "pull_request_review_id": 465025845,
    "id": 468550218,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1MDIxOA==",
    "diff_hunk": "@@ -1945,14 +1942,24 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. If fFeeler is not\n+            // set, open OUTBOUND connections until we meet our full-relay\n+            // capacity. Then open BLOCK_RELAY connections until we hit our\n+            // block-relay peer limit. Otherwise, default to opening an\n+            // OUTBOUND connection.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                // GetTryNewOutboundPeer() is true",
    "path": "src/net.cpp",
    "position": 260,
    "original_position": 260,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd prefer this comment if it said `GetTryNewOutboundPeer() was true above`, to avoid future confusion about thread race conditions.",
    "created_at": "2020-08-11T12:43:36Z",
    "updated_at": "2020-08-11T12:48:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468550218",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468550218"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468550218"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468550218/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1958,
    "original_line": 1958,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468551559",
    "pull_request_review_id": 465025845,
    "id": 468551559,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1MTU1OQ==",
    "diff_hunk": "@@ -792,7 +853,7 @@ class CNode\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n-    const std::unique_ptr<CRollingBloomFilter> m_addr_known;\n+    std::unique_ptr<CRollingBloomFilter> m_addr_known = nullptr;",
    "path": "src/net.h",
    "position": 137,
    "original_position": 137,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: more common style these days is to use braced initialization (although it's not in the style guide).",
    "created_at": "2020-08-11T12:45:53Z",
    "updated_at": "2020-08-11T12:48:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468551559",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468551559"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468551559"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468551559/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 856,
    "original_line": 856,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468719451",
    "pull_request_review_id": 465245765,
    "id": 468719451,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTQ1MQ==",
    "diff_hunk": "@@ -180,17 +180,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n \n     CAddress addr = CAddress(CService(ipv4Addr, 7777), NODE_NETWORK);\n     std::string pszDest;\n-    bool fInboundIn = false;\n \n-    // Test that fFeeler is false by default.\n-    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, fInboundIn);\n-    BOOST_CHECK(pnode1->fInbound == false);\n-    BOOST_CHECK(pnode1->fFeeler == false);\n+    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, ConnectionType::OUTBOUND);\n+    BOOST_CHECK(pnode1->IsInboundConn() == false);",
    "path": "src/test/net_tests.cpp",
    "position": 11,
    "original_position": 11,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What about adding `BOOST_CHECK(!pnode->IsFeelerConn());`?",
    "created_at": "2020-08-11T16:43:55Z",
    "updated_at": "2020-08-11T17:00:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468719451",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468719451"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468719451"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468719451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 186,
    "original_start_line": 186,
    "start_side": "LEFT",
    "line": 185,
    "original_line": 185,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468728551",
    "pull_request_review_id": 465245765,
    "id": 468728551,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyODU1MQ==",
    "diff_hunk": "@@ -827,22 +827,15 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n     if (state) state->m_last_block_announcement = time_in_seconds;\n }\n \n-// Returns true for outbound peers, excluding manual connections, feelers, and\n-// one-shots.\n-static bool IsOutboundDisconnectionCandidate(const CNode& node)\n-{\n-    return !(node.fInbound || node.m_manual_connection || node.fFeeler || node.fOneShot);\n-}\n-\n void PeerLogicValidation::InitializeNode(CNode *pnode) {\n     CAddress addr = pnode->addr;\n     std::string addrName = pnode->GetAddrName();\n     NodeId nodeid = pnode->GetId();\n     {\n         LOCK(cs_main);\n-        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName), pnode->fInbound, pnode->m_manual_connection));\n+        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName), pnode->IsInboundConn(), pnode->IsManualConn()));\n     }\n-    if(!pnode->fInbound)\n+    if(!pnode->IsInboundConn())",
    "path": "src/net_processing.cpp",
    "position": 30,
    "original_position": 30,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: space after `if`",
    "created_at": "2020-08-11T16:58:45Z",
    "updated_at": "2020-08-11T17:00:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468728551",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468728551"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468728551"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468728551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 838,
    "original_line": 838,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468728771",
    "pull_request_review_id": 465245765,
    "id": 468728771,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyODc3MQ==",
    "diff_hunk": "@@ -1838,21 +1829,27 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n-                        nOutboundBlockRelay++;\n-                    } else if (!pnode->fFeeler) {\n-                        nOutboundFullRelay++;\n-                    }\n+                if (pnode->IsFullOutboundConn()) nOutboundFullRelay++;\n+                if (pnode->IsBlockOnlyConn()) nOutboundBlockRelay++;\n+\n+                // Netgroups for inbound and manual peers are not excluded because our goal here\n+                // is to not use multiple of our limited outbound slots on a single netgroup\n+                // but inbound and manual peers do not use our outbound slots. Inbound peers\n+                // also have the added issue that they could be attacker controlled and used\n+                // to prevent us from connecting to particular hosts if we used them here.\n+                switch(pnode->m_conn_type){",
    "path": "src/net.cpp",
    "position": 225,
    "original_position": 225,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: space after `switch`",
    "created_at": "2020-08-11T16:59:08Z",
    "updated_at": "2020-08-11T17:00:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468728771",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468728771"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468728771"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468728771/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1844,
    "original_line": 1844,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468729057",
    "pull_request_review_id": 465245765,
    "id": 468729057,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyOTA1Nw==",
    "diff_hunk": "@@ -782,6 +789,60 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {",
    "path": "src/net.h",
    "position": 76,
    "original_position": 76,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: space after `switch`\r\n",
    "created_at": "2020-08-11T16:59:33Z",
    "updated_at": "2020-08-11T17:00:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468729057",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468729057"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468729057"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468729057/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 793,
    "original_line": 793,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468729211",
    "pull_request_review_id": 465245765,
    "id": 468729211,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyOTIxMQ==",
    "diff_hunk": "@@ -782,6 +789,60 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+        }\n+\n+        assert(false);\n+    }\n+\n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    bool IsFeelerConn() const {\n+        return m_conn_type == ConnectionType::FEELER;\n+    }\n+\n+    bool IsAddrFetchConn() const {\n+        return m_conn_type == ConnectionType::ADDR_FETCH;\n+    }\n+\n+    bool IsInboundConn() const {\n+        return m_conn_type == ConnectionType::INBOUND;\n+    }\n+\n+    bool ExpectServicesFromConn() const {\n+        switch(m_conn_type) {",
    "path": "src/net.h",
    "position": 115,
    "original_position": 115,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: space after `switch`\r\n",
    "created_at": "2020-08-11T16:59:49Z",
    "updated_at": "2020-08-11T17:00:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468729211",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468729211"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468729211"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468729211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 832,
    "original_line": 832,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468777670",
    "pull_request_review_id": 465319161,
    "id": 468777670,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3NzY3MA==",
    "diff_hunk": "@@ -3455,7 +3447,7 @@ void ProcessMessage(\n         // to users' AddrMan and later request them by sending getaddr messages.\n         // Making nodes which are behind NAT and can only make outgoing connections ignore\n         // the getaddr message mitigates the attack.\n-        if (!pfrom.fInbound) {\n+        if (!pfrom.IsInboundConn()) {\n             LogPrint(BCLog::NET, \"Ignoring \\\"getaddr\\\" from outbound connection. peer=%d\\n\", pfrom.GetId());",
    "path": "src/net_processing.cpp",
    "position": 132,
    "original_position": 132,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I still have to test to make sure this works properly, but first pass at an implementation here: https://github.com/amitiuttarwar/bitcoin/commit/9162d44d2509e38e2e83e1f4315232d34d1fd777. \r\n\r\n- since I'm touching it anyway, I removed the second LogPrintf because it looks like dead code and I think concerns should be sufficiently addressed with this PR. convo on original for reference: https://github.com/bitcoin/bitcoin/pull/15759/files#r314860750 \r\n- the `ConnectionTypeToString` function can be used for other log statements, and I'm hoping to use the same to expose in `getpeerinfo` (but haven't looked at implementing that yet). ",
    "created_at": "2020-08-11T18:23:44Z",
    "updated_at": "2020-08-11T18:23:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468777670",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468777670"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468777670"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468777670/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3451,
    "original_line": 3451,
    "side": "RIGHT",
    "in_reply_to_id": 468018093
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468778874",
    "pull_request_review_id": 465320663,
    "id": 468778874,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3ODg3NA==",
    "diff_hunk": "@@ -197,7 +208,7 @@ class CConnman\n     bool GetNetworkActive() const { return fNetworkActive; };\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false, bool block_relay_only = false);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, ConnectionType conn_type = ConnectionType::OUTBOUND);",
    "path": "src/net.h",
    "position": 23,
    "original_position": 23,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yup. done at https://github.com/amitiuttarwar/bitcoin/commit/f9f69ae341854f99821008677a84668367ed0d82",
    "created_at": "2020-08-11T18:25:56Z",
    "updated_at": "2020-08-11T18:25:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468778874",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468778874"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468778874"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468778874/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 211,
    "original_line": 211,
    "side": "RIGHT",
    "in_reply_to_id": 468025462
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468795127",
    "pull_request_review_id": 465340171,
    "id": 468795127,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5NTEyNw==",
    "diff_hunk": "@@ -2410,7 +2403,7 @@ void ProcessMessage(\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.fInbound && pfrom.IsAddrRelayPeer())\n+        if (!pfrom.IsInboundConn() && pfrom.IsAddrRelayPeer())",
    "path": "src/net_processing.cpp",
    "position": 94,
    "original_position": 94,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "agreed this can be made more clear. I took a stab at a restructure that essentially replaces `IsAddrRelayPeer` with `RelayAddrsWithConn` that checks the connection type instead of presence of `m_addr_known.` https://github.com/amitiuttarwar/bitcoin/commit/6662f5dbe1e513ea2cec9adbcc730555832f85d0. I'm still deciding how I feel about it and am interested in any feedback.\r\n\r\npros: \r\n- checking for addr relay via connection type feels more conceptually straightforward based on current conditions \r\n- easy to update the logic in the future \r\n- consistent interface being adopted with this PR \r\n\r\ncons: \r\n- the main downside is that if the initialization conditions for `m_addr_known` are ever updated, `RelayAddrWithConn` must also be updated. and would be problematic if missed by the proposer / reviewers. ",
    "created_at": "2020-08-11T18:51:20Z",
    "updated_at": "2020-08-11T18:51:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468795127",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468795127"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468795127"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468795127/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2406,
    "original_line": 2406,
    "side": "RIGHT",
    "in_reply_to_id": 468029929
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470892312",
    "pull_request_review_id": 467907544,
    "id": 470892312,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MjMxMg==",
    "diff_hunk": "@@ -2745,7 +2745,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr\n     // traffic).\n-    m_addr_known{conn_type_in == ConnectionType::BLOCK_RELAY ? nullptr : MakeUnique<CRollingBloomFilter>(5000, 0.001)},\n+    m_addr_known{nullptr},",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c035da9ba9f71ff6b4fd4e2e7c69f2683e1f0d5c",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I tried it out here: 9345f9c9d47a88987606d1421823914a4c48dbf9, but still have the same concern, which I noted here: https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-674298044. ",
    "created_at": "2020-08-14T22:34:37Z",
    "updated_at": "2020-08-14T22:34:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470892312",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470892312"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470892312"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470892312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2743,
    "side": "RIGHT",
    "in_reply_to_id": 449349935
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470893012",
    "pull_request_review_id": 467908342,
    "id": 470893012,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MzAxMg==",
    "diff_hunk": "@@ -792,6 +791,72 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+        }\n+\n+        assert(false);\n+    }\n+\n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    bool IsFeelerConn() const {",
    "path": "src/net.h",
    "position": 102,
    "original_position": 39,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "6a1259c574c96c7059e3b6a61b79d56d59c48508",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added more docs in follow up PR #19724 here: 899f3b7416317f8d9aacf915dfdc7fb0beb9f28b",
    "created_at": "2020-08-14T22:37:31Z",
    "updated_at": "2020-08-14T22:37:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470893012",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470893012"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470893012"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470893012/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 819,
    "original_line": 819,
    "side": "RIGHT",
    "in_reply_to_id": 460541326
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470894364",
    "pull_request_review_id": 467909892,
    "id": 470894364,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NDM2NA==",
    "diff_hunk": "@@ -1945,14 +1927,25 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity, or if\n+            // GetTryNewOutboundPeer() is true. If full-relay capacity is met,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else if (GetTryNewOutboundPeer()) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else {\n+                assert(false);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 249,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "c9bce99b25fa175dfd26deacd60851d9c4785510",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've taken a stab at a further simplification on the follow-up PR #19724 here: 6bdc1e3a693081e1f12a1a0b2411ac129d2b2923",
    "created_at": "2020-08-14T22:43:33Z",
    "updated_at": "2020-08-14T22:47:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470894364",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470894364"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470894364"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470894364/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1945,
    "side": "RIGHT",
    "in_reply_to_id": 464518554
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470896757",
    "pull_request_review_id": 467912694,
    "id": 470896757,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5Njc1Nw==",
    "diff_hunk": "@@ -113,6 +113,17 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+/** Different types of connections to a peer. This enum encapsulates the\n+ * information we have available at the time of opening or accepting the\n+ * connection. Aside from INBOUND, all types are initiated by us. */\n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */",
    "path": "src/net.h",
    "position": 9,
    "original_position": 9,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "renamed `OUTBOUND` to `OUTBOUND_FULL_RELAY` in PR #19724 here: 34135a51775dc72809097cfb90b8611eee00106e",
    "created_at": "2020-08-14T22:54:18Z",
    "updated_at": "2020-08-14T22:54:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470896757",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470896757"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470896757"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470896757/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 121,
    "original_line": 121,
    "side": "RIGHT",
    "in_reply_to_id": 467968290
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470897130",
    "pull_request_review_id": 467913116,
    "id": 470897130,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzEzMA==",
    "diff_hunk": "@@ -113,13 +113,16 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+/** Different types of connections to a peer. This enum encapsulates the\n+ * information we have available at the time of opening or accepting the\n+ * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND,\n-    OUTBOUND,\n-    MANUAL,\n-    FEELER,\n-    BLOCK_RELAY,\n-    ADDR_FETCH,\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */",
    "path": "src/net.h",
    "position": 13,
    "original_position": 19,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "46578c03e92a55925308363ccdad04dcfc820d96",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added this & additional documentation in PR #19724 here:  https://github.com/bitcoin/bitcoin/pull/19724/commits/899f3b7416317f8d9aacf915dfdc7fb0beb9f28b#diff-1a8b9d1ad0a6fda5e751286c73102fc2R878-R881",
    "created_at": "2020-08-14T22:56:01Z",
    "updated_at": "2020-08-14T22:56:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470897130",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470897130"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470897130"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470897130/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 125,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 467986125
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470897354",
    "pull_request_review_id": 467913364,
    "id": 470897354,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzM1NA==",
    "diff_hunk": "@@ -197,7 +208,7 @@ class CConnman\n     bool GetNetworkActive() const { return fNetworkActive; };\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false, bool block_relay_only = false);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, ConnectionType conn_type = ConnectionType::OUTBOUND);",
    "path": "src/net.h",
    "position": 23,
    "original_position": 23,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "incorporated into #19724 (eda5b1582dc8ae808dc957f69f5fa0ec8eb7ef0b)",
    "created_at": "2020-08-14T22:57:03Z",
    "updated_at": "2020-08-14T22:57:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470897354",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470897354"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470897354"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470897354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 211,
    "original_line": 211,
    "side": "RIGHT",
    "in_reply_to_id": 468025462
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470897551",
    "pull_request_review_id": 467913593,
    "id": 470897551,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzU1MQ==",
    "diff_hunk": "@@ -1965,14 +1958,14 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n                 // until we have a headers chain that has at least\n                 // nMinimumChainWork, even if a peer has a chain past our tip,\n                 // as an anti-DoS measure.\n-                if (IsOutboundDisconnectionCandidate(pfrom)) {\n+                if (pfrom.IsOutboundOrBlockRelayConn()) {\n                     LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom.GetId());\n                     pfrom.fDisconnect = true;\n                 }\n             }\n         }\n \n-        if (!pfrom.fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr && pfrom.m_tx_relay != nullptr) {\n+        if (!pfrom.fDisconnect && pfrom.IsOutboundOrBlockRelayConn() && nodestate->pindexBestKnownBlock != nullptr && pfrom.m_tx_relay != nullptr) {",
    "path": "src/net_processing.cpp",
    "position": 47,
    "original_position": 47,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done in PR #19724 (68f9f9bddd1e5cb481934c1d725d7e7891b8f4fa)",
    "created_at": "2020-08-14T22:57:58Z",
    "updated_at": "2020-08-14T22:57:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470897551",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470897551"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470897551"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470897551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1968,
    "original_line": 1968,
    "side": "RIGHT",
    "in_reply_to_id": 468028143
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470898449",
    "pull_request_review_id": 467914630,
    "id": 470898449,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5ODQ0OQ==",
    "diff_hunk": "@@ -2410,7 +2403,7 @@ void ProcessMessage(\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.fInbound && pfrom.IsAddrRelayPeer())\n+        if (!pfrom.IsInboundConn() && pfrom.IsAddrRelayPeer())",
    "path": "src/net_processing.cpp",
    "position": 94,
    "original_position": 94,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "incorporated in #19724 (https://github.com/bitcoin/bitcoin/pull/19724/commits/9345f9c9d47a88987606d1421823914a4c48dbf9). I've noted this outstanding concern and am seeking opinions: https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-674298044.",
    "created_at": "2020-08-14T23:02:06Z",
    "updated_at": "2020-08-14T23:02:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470898449",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470898449"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470898449"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470898449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2406,
    "original_line": 2406,
    "side": "RIGHT",
    "in_reply_to_id": 468029929
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470898534",
    "pull_request_review_id": 467914735,
    "id": 470898534,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5ODUzNA==",
    "diff_hunk": "@@ -1945,14 +1942,24 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. If fFeeler is not\n+            // set, open OUTBOUND connections until we meet our full-relay\n+            // capacity. Then open BLOCK_RELAY connections until we hit our\n+            // block-relay peer limit. Otherwise, default to opening an\n+            // OUTBOUND connection.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                // GetTryNewOutboundPeer() is true",
    "path": "src/net.cpp",
    "position": 260,
    "original_position": 260,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed in #19724 by simplifying the function ",
    "created_at": "2020-08-14T23:02:30Z",
    "updated_at": "2020-08-14T23:02:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470898534",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470898534"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470898534"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470898534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1958,
    "original_line": 1958,
    "side": "RIGHT",
    "in_reply_to_id": 468550218
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470898918",
    "pull_request_review_id": 467915193,
    "id": 470898918,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5ODkxOA==",
    "diff_hunk": "@@ -180,17 +180,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n \n     CAddress addr = CAddress(CService(ipv4Addr, 7777), NODE_NETWORK);\n     std::string pszDest;\n-    bool fInboundIn = false;\n \n-    // Test that fFeeler is false by default.\n-    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, fInboundIn);\n-    BOOST_CHECK(pnode1->fInbound == false);\n-    BOOST_CHECK(pnode1->fFeeler == false);\n+    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, ConnectionType::OUTBOUND);\n+    BOOST_CHECK(pnode1->IsInboundConn() == false);",
    "path": "src/test/net_tests.cpp",
    "position": 11,
    "original_position": 11,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added a few more tests for explicit checking on #19724 here: 2df9ad4edd8263227e481bb732e1552286bfe960",
    "created_at": "2020-08-14T23:04:21Z",
    "updated_at": "2020-08-14T23:04:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470898918",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470898918"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470898918"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470898918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 186,
    "original_start_line": 186,
    "start_side": "LEFT",
    "line": 185,
    "original_line": 185,
    "side": "RIGHT",
    "in_reply_to_id": 468719451
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470926696",
    "pull_request_review_id": 467940771,
    "id": 470926696,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNjY5Ng==",
    "diff_hunk": "@@ -875,6 +875,7 @@ class CNode\n private:\n     const NodeId id;\n     const uint64_t nLocalHostNonce;\n+    const ConnectionType m_conn_type;",
    "path": "src/net.h",
    "position": 154,
    "original_position": 4,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "d3698b5ee309cf0f0cdfb286d6b30a256d7deae5",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done in #19725 ",
    "created_at": "2020-08-15T02:28:16Z",
    "updated_at": "2020-08-15T02:28:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470926696",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470926696"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470926696"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470926696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 928,
    "original_line": 878,
    "side": "RIGHT",
    "in_reply_to_id": 468001604
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470926713",
    "pull_request_review_id": 467940784,
    "id": 470926713,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNjcxMw==",
    "diff_hunk": "@@ -3455,7 +3447,7 @@ void ProcessMessage(\n         // to users' AddrMan and later request them by sending getaddr messages.\n         // Making nodes which are behind NAT and can only make outgoing connections ignore\n         // the getaddr message mitigates the attack.\n-        if (!pfrom.fInbound) {\n+        if (!pfrom.IsInboundConn()) {\n             LogPrint(BCLog::NET, \"Ignoring \\\"getaddr\\\" from outbound connection. peer=%d\\n\", pfrom.GetId());",
    "path": "src/net_processing.cpp",
    "position": 132,
    "original_position": 132,
    "commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "original_commit_id": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done in #19725 ",
    "created_at": "2020-08-15T02:28:35Z",
    "updated_at": "2020-08-15T02:28:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470926713",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470926713"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470926713"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470926713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3451,
    "original_line": 3451,
    "side": "RIGHT",
    "in_reply_to_id": 468018093
  }
]