[
  {
    "sha": "3f1b7140e95d0f8f958cb35f31c3d964c57e484d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjFiNzE0MGU5NWQwZjhmOTU4Y2IzNWYzMWMzZDk2NGM1N2U0ODRk",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-07-17T21:56:34Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:12Z"
      },
      "message": "scripted-diff: Rename OneShot to AddrFetch\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/a oneshot/an addrfetch/g' src/chainparams.cpp #comment\nsed -i 's/oneshot/addrfetch/g' src/net.cpp #comment\nsed -i 's/AddOneShot/AddAddrFetch/g' src/net.h src/net.cpp\nsed -i 's/cs_vOneShots/m_addr_fetches_mutex/g' src/net.h src/net.cpp\nsed -i 's/vOneShots/m_addr_fetches/g' src/net.h src/net.cpp\nsed -i 's/fOneShot/m_addr_fetch/g' src/net.h src/net.cpp src/net_processing.cpp\nsed -i 's/ProcessOneShot/ProcessAddrFetch/g' src/net.h src/net.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "d426deed3b73e6a90d338dc08221ec45934a5533",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d426deed3b73e6a90d338dc08221ec45934a5533"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f1b7140e95d0f8f958cb35f31c3d964c57e484d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f1b7140e95d0f8f958cb35f31c3d964c57e484d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f1b7140e95d0f8f958cb35f31c3d964c57e484d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f1b7140e95d0f8f958cb35f31c3d964c57e484d/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a41ae68053387567414021228995a485e29ad611",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a41ae68053387567414021228995a485e29ad611",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a41ae68053387567414021228995a485e29ad611"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 30,
      "deletions": 30
    },
    "files": [
      {
        "sha": "5447c0eceb4e3280e6c378cf85a2e1ee7275fdba",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1b7140e95d0f8f958cb35f31c3d964c57e484d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1b7140e95d0f8f958cb35f31c3d964c57e484d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3f1b7140e95d0f8f958cb35f31c3d964c57e484d",
        "patch": "@@ -110,7 +110,7 @@ class CMainParams : public CChainParams {\n \n         // Note that of those which support the service bits prefix, most only support a subset of\n         // possible options.\n-        // This is fine at runtime as we'll fall back to using them as a oneshot if they don't support the\n+        // This is fine at runtime as we'll fall back to using them as an addrfetch if they don't support the\n         // service bits we want, but we should get them updated to support all service bits wanted by any\n         // release ASAP to avoid it where possible.\n         vSeeds.emplace_back(\"seed.bitcoin.sipa.be\"); // Pieter Wuille, only supports x1, x5, x9, and xd"
      },
      {
        "sha": "683a89ad100c787b26fc4db96b11ada7ba0b1f72",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1b7140e95d0f8f958cb35f31c3d964c57e484d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1b7140e95d0f8f958cb35f31c3d964c57e484d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3f1b7140e95d0f8f958cb35f31c3d964c57e484d",
        "patch": "@@ -105,10 +105,10 @@ std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n \n-void CConnman::AddOneShot(const std::string& strDest)\n+void CConnman::AddAddrFetch(const std::string& strDest)\n {\n-    LOCK(cs_vOneShots);\n-    vOneShots.push_back(strDest);\n+    LOCK(m_addr_fetches_mutex);\n+    m_addr_fetches.push_back(strDest);\n }\n \n uint16_t GetListenPort()\n@@ -1646,7 +1646,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->m_addr_fetch && !pnode->m_manual_connection && !pnode->fInbound;\n                         }\n                     }\n                     if (nRelevant >= 2) {\n@@ -1674,7 +1674,7 @@ void CConnman::ThreadDNSAddressSeed()\n \n         LogPrintf(\"Loading addresses from DNS seed %s\\n\", seed);\n         if (HaveNameProxy()) {\n-            AddOneShot(seed);\n+            AddAddrFetch(seed);\n         } else {\n             std::vector<CNetAddr> vIPs;\n             std::vector<CAddress> vAdd;\n@@ -1696,8 +1696,8 @@ void CConnman::ThreadDNSAddressSeed()\n                 addrman.Add(vAdd, resolveSource);\n             } else {\n                 // We now avoid directly using results from DNS Seeds which do not support service bit filtering,\n-                // instead using them as a oneshot to get nodes with our desired service bits.\n-                AddOneShot(seed);\n+                // instead using them as a addrfetch to get nodes with our desired service bits.\n+                AddAddrFetch(seed);\n             }\n         }\n         --seeds_right_now;\n@@ -1727,15 +1727,15 @@ void CConnman::DumpAddresses()\n            addrman.size(), GetTimeMillis() - nStart);\n }\n \n-void CConnman::ProcessOneShot()\n+void CConnman::ProcessAddrFetch()\n {\n     std::string strDest;\n     {\n-        LOCK(cs_vOneShots);\n-        if (vOneShots.empty())\n+        LOCK(m_addr_fetches_mutex);\n+        if (m_addr_fetches.empty())\n             return;\n-        strDest = vOneShots.front();\n-        vOneShots.pop_front();\n+        strDest = m_addr_fetches.front();\n+        m_addr_fetches.pop_front();\n     }\n     CAddress addr;\n     CSemaphoreGrant grant(*semOutbound, true);\n@@ -1767,7 +1767,7 @@ int CConnman::GetExtraOutboundCount()\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->fOneShot && pnode->fSuccessfullyConnected) {\n+            if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->m_addr_fetch && pnode->fSuccessfullyConnected) {\n                 ++nOutbound;\n             }\n         }\n@@ -1782,7 +1782,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n     {\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n-            ProcessOneShot();\n+            ProcessAddrFetch();\n             for (const std::string& strAddr : connect)\n             {\n                 CAddress addr(CService(), NODE_NONE);\n@@ -1805,7 +1805,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n     int64_t nNextFeeler = PoissonNextSend(nStart*1000*1000, FEELER_INTERVAL);\n     while (!interruptNet)\n     {\n-        ProcessOneShot();\n+        ProcessAddrFetch();\n \n         if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n             return;\n@@ -2039,7 +2039,7 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection, bool block_relay_only)\n+void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool m_addr_fetch, bool fFeeler, bool manual_connection, bool block_relay_only)\n {\n     //\n     // Initiate outbound network connection\n@@ -2064,8 +2064,8 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return;\n     if (grantOutbound)\n         grantOutbound->MoveTo(pnode->grantOutbound);\n-    if (fOneShot)\n-        pnode->fOneShot = true;\n+    if (m_addr_fetch)\n+        pnode->m_addr_fetch = true;\n     if (fFeeler)\n         pnode->fFeeler = true;\n     if (manual_connection)\n@@ -2337,7 +2337,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     }\n \n     for (const auto& strDest : connOptions.vSeedNodes) {\n-        AddOneShot(strDest);\n+        AddAddrFetch(strDest);\n     }\n \n     if (clientInterface) {"
      },
      {
        "sha": "99d1c21f965b46166d074bbdbf1323c6d4c5676e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1b7140e95d0f8f958cb35f31c3d964c57e484d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1b7140e95d0f8f958cb35f31c3d964c57e484d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3f1b7140e95d0f8f958cb35f31c3d964c57e484d",
        "patch": "@@ -197,7 +197,7 @@ class CConnman\n     bool GetNetworkActive() const { return fNetworkActive; };\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false, bool block_relay_only = false);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool m_addr_fetch = false, bool fFeeler = false, bool manual_connection = false, bool block_relay_only = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n@@ -340,8 +340,8 @@ class CConnman\n     bool Bind(const CService& addr, unsigned int flags, NetPermissionFlags permissions);\n     bool InitBinds(const std::vector<CService>& binds, const std::vector<NetWhitebindPermissions>& whiteBinds);\n     void ThreadOpenAddedConnections();\n-    void AddOneShot(const std::string& strDest);\n-    void ProcessOneShot();\n+    void AddAddrFetch(const std::string& strDest);\n+    void ProcessAddrFetch();\n     void ThreadOpenConnections(std::vector<std::string> connect);\n     void ThreadMessageHandler();\n     void AcceptConnection(const ListenSocket& hListenSocket);\n@@ -405,8 +405,8 @@ class CConnman\n     std::atomic<bool> fNetworkActive{true};\n     bool fAddressesInitialized{false};\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n-    RecursiveMutex cs_vOneShots;\n+    std::deque<std::string> m_addr_fetches GUARDED_BY(m_addr_fetches_mutex);\n+    RecursiveMutex m_addr_fetches_mutex;\n     std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n     RecursiveMutex cs_vAddedNodes;\n     std::vector<CNode*> vNodes GUARDED_BY(cs_vNodes);\n@@ -765,7 +765,7 @@ class CNode\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n     bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n+    bool m_addr_fetch{false};\n     bool m_manual_connection{false};\n     bool fClient{false}; // set by version message\n     bool m_limited_node{false}; //after BIP159, set by version message"
      },
      {
        "sha": "ba30f7a7b623341211cb7856d97856c3b6fa1ef8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1b7140e95d0f8f958cb35f31c3d964c57e484d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1b7140e95d0f8f958cb35f31c3d964c57e484d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3f1b7140e95d0f8f958cb35f31c3d964c57e484d",
        "patch": "@@ -473,7 +473,7 @@ static void UpdatePreferredDownload(const CNode& node, CNodeState* state) EXCLUS\n     nPreferredDownload -= state->fPreferredDownload;\n \n     // Whether this node should be marked as a preferred download node.\n-    state->fPreferredDownload = (!node.fInbound || node.HasPermission(PF_NOBAN)) && !node.fOneShot && !node.fClient;\n+    state->fPreferredDownload = (!node.fInbound || node.HasPermission(PF_NOBAN)) && !node.m_addr_fetch && !node.fClient;\n \n     nPreferredDownload += state->fPreferredDownload;\n }\n@@ -831,7 +831,7 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n // one-shots.\n static bool IsOutboundDisconnectionCandidate(const CNode& node)\n {\n-    return !(node.fInbound || node.m_manual_connection || node.fFeeler || node.fOneShot);\n+    return !(node.fInbound || node.m_manual_connection || node.fFeeler || node.m_addr_fetch);\n }\n \n void PeerLogicValidation::InitializeNode(CNode *pnode) {\n@@ -2584,7 +2584,7 @@ void ProcessMessage(\n         connman.AddNewAddresses(vAddrOk, pfrom.addr, 2 * 60 * 60);\n         if (vAddr.size() < 1000)\n             pfrom.fGetAddr = false;\n-        if (pfrom.fOneShot)\n+        if (pfrom.m_addr_fetch)\n             pfrom.fDisconnect = true;\n         return;\n     }\n@@ -4097,7 +4097,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         // Start block sync\n         if (pindexBestHeader == nullptr)\n             pindexBestHeader = ::ChainActive().Tip();\n-        bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->fOneShot); // Download if this is a nice peer, or we have no nice peers and this one might do.\n+        bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->m_addr_fetch); // Download if this is a nice peer, or we have no nice peers and this one might do.\n         if (!state.fSyncStarted && !pto->fClient && !fImporting && !fReindex) {\n             // Only actively request headers from a single peer, unless we're close to today.\n             if ((nSyncStarted == 0 && fFetch) || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {"
      }
    ]
  },
  {
    "sha": "26304b4100201754fb32440bec3e3b78cd3f0e6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjMwNGI0MTAwMjAxNzU0ZmIzMjQ0MGJlYzNlM2I3OGNkM2YwZTZk",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-05-07T01:09:24Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Introduce an enum to distinguish type of connection\n\n- extract inbound & outbound types",
      "tree": {
        "sha": "1aadcecb1da5587af74c741e24ad0b2fc8377f65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1aadcecb1da5587af74c741e24ad0b2fc8377f65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26304b4100201754fb32440bec3e3b78cd3f0e6d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26304b4100201754fb32440bec3e3b78cd3f0e6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26304b4100201754fb32440bec3e3b78cd3f0e6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26304b4100201754fb32440bec3e3b78cd3f0e6d/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f1b7140e95d0f8f958cb35f31c3d964c57e484d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f1b7140e95d0f8f958cb35f31c3d964c57e484d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f1b7140e95d0f8f958cb35f31c3d964c57e484d"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 20,
      "deletions": 18
    },
    "files": [
      {
        "sha": "061605f95803940f51c16a33c5c3d43e8c17423a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26304b4100201754fb32440bec3e3b78cd3f0e6d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26304b4100201754fb32440bec3e3b78cd3f0e6d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=26304b4100201754fb32440bec3e3b78cd3f0e6d",
        "patch": "@@ -459,7 +459,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n     CAddress addr_bind = GetBindAddress(hSocket);\n-    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false, block_relay_only);\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", ConnectionType::OUTBOUND, block_relay_only);\n     pnode->AddRef();\n \n     // We're making a new connection, harvest entropy from the time (and our peer count)\n@@ -1048,7 +1048,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     if (NetPermissions::HasFlag(permissionFlags, PF_BLOOMFILTER)) {\n         nodeServices = static_cast<ServiceFlags>(nodeServices | NODE_BLOOM);\n     }\n-    CNode* pnode = new CNode(id, nodeServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true);\n+    CNode* pnode = new CNode(id, nodeServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND);\n     pnode->AddRef();\n     pnode->m_permissionFlags = permissionFlags;\n     // If this flag is present, the user probably expect that RPC and QT report it as whitelisted (backward compatibility)\n@@ -2748,11 +2748,11 @@ int CConnman::GetBestHeight() const\n \n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, bool fInboundIn, bool block_relay_only)\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool block_relay_only)\n     : nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     addrBind(addrBindIn),\n-    fInbound(fInboundIn),\n+    fInbound(conn_type_in == ConnectionType::INBOUND),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr"
      },
      {
        "sha": "da99c5f67ffd6b0916dfa490ea7b8edd456f246b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26304b4100201754fb32440bec3e3b78cd3f0e6d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26304b4100201754fb32440bec3e3b78cd3f0e6d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=26304b4100201754fb32440bec3e3b78cd3f0e6d",
        "patch": "@@ -113,6 +113,10 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND,\n+    OUTBOUND,\n+};\n \n class NetEventsInterface;\n class CConnman\n@@ -856,7 +860,7 @@ class CNode\n \n     std::set<uint256> orphan_work_set;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false, bool block_relay_only = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", ConnectionType conn_type_in = ConnectionType::OUTBOUND, bool block_relay_only = false);\n     ~CNode();\n     CNode(const CNode&) = delete;\n     CNode& operator=(const CNode&) = delete;"
      },
      {
        "sha": "0115803e589af252fe878240c01591085d6302d1",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26304b4100201754fb32440bec3e3b78cd3f0e6d/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26304b4100201754fb32440bec3e3b78cd3f0e6d/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=26304b4100201754fb32440bec3e3b78cd3f0e6d",
        "patch": "@@ -84,7 +84,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", /*fInboundIn=*/ false);\n+    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n \n     peerLogic->InitializeNode(&dummyNode1);\n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic, CConnmanTest* connman)\n {\n     CAddress addr(ip(g_insecure_rand_ctx.randbits(32)), NODE_NONE);\n-    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", /*fInboundIn=*/ false));\n+    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND));\n     CNode &node = *vNodes.back();\n     node.SetSendVersion(PROTOCOL_VERSION);\n \n@@ -227,7 +227,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n \n     banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::INBOUND);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n@@ -244,7 +244,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     BOOST_CHECK(!banman->IsDiscouraged(ip(0xa0b0c001|0x0000ff00))); // Different IP, not discouraged\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", true);\n+    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", ConnectionType::INBOUND);\n     dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode2);\n     dummyNode2.nVersion = 1;\n@@ -286,7 +286,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, CAddress(), \"\", true);\n+    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, CAddress(), \"\", ConnectionType::INBOUND);\n     dummyNode.SetSendVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode);\n     dummyNode.nVersion = 1;"
      },
      {
        "sha": "ad3a91e2b74b0d401bac112f005e944a5727c7ea",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26304b4100201754fb32440bec3e3b78cd3f0e6d/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26304b4100201754fb32440bec3e3b78cd3f0e6d/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=26304b4100201754fb32440bec3e3b78cd3f0e6d",
        "patch": "@@ -80,7 +80,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         return;\n     }\n     CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\n-    CNode& p2p_node = *MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false).release();\n+    CNode& p2p_node = *MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND, false).release();\n     p2p_node.fSuccessfullyConnected = true;\n     p2p_node.nVersion = PROTOCOL_VERSION;\n     p2p_node.SetSendVersion(PROTOCOL_VERSION);"
      },
      {
        "sha": "1013113e3cf0242b826a22a2c2f62b60adcddc10",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26304b4100201754fb32440bec3e3b78cd3f0e6d/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26304b4100201754fb32440bec3e3b78cd3f0e6d/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=26304b4100201754fb32440bec3e3b78cd3f0e6d",
        "patch": "@@ -44,9 +44,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n     for (int i = 0; i < num_peers_to_add; ++i) {\n         const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n-        const bool inbound{fuzzed_data_provider.ConsumeBool()};\n+        const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND});\n         const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n-        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, inbound, block_relay_only).release());\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, conn_type, block_relay_only).release());\n         CNode& p2p_node = *peers.back();\n \n         p2p_node.fSuccessfullyConnected = true;"
      },
      {
        "sha": "5840f5a72c1fea6220506984c9fdd3befdfea440",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26304b4100201754fb32440bec3e3b78cd3f0e6d/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26304b4100201754fb32440bec3e3b78cd3f0e6d/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=26304b4100201754fb32440bec3e3b78cd3f0e6d",
        "patch": "@@ -180,15 +180,13 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n \n     CAddress addr = CAddress(CService(ipv4Addr, 7777), NODE_NETWORK);\n     std::string pszDest;\n-    bool fInboundIn = false;\n \n     // Test that fFeeler is false by default.\n-    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, fInboundIn);\n+    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, ConnectionType::OUTBOUND);\n     BOOST_CHECK(pnode1->fInbound == false);\n     BOOST_CHECK(pnode1->fFeeler == false);\n \n-    fInboundIn = true;\n-    std::unique_ptr<CNode> pnode2 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, CAddress(), pszDest, fInboundIn);\n+    std::unique_ptr<CNode> pnode2 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, CAddress(), pszDest, ConnectionType::INBOUND);\n     BOOST_CHECK(pnode2->fInbound == true);\n     BOOST_CHECK(pnode2->fFeeler == false);\n }\n@@ -214,7 +212,7 @@ BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n     in_addr ipv4AddrPeer;\n     ipv4AddrPeer.s_addr = 0xa0b0c001;\n     CAddress addr = CAddress(CService(ipv4AddrPeer, 7777), NODE_NETWORK);\n-    std::unique_ptr<CNode> pnode = MakeUnique<CNode>(0, NODE_NETWORK, 0, INVALID_SOCKET, addr, 0, 0, CAddress{}, std::string{}, false);\n+    std::unique_ptr<CNode> pnode = MakeUnique<CNode>(0, NODE_NETWORK, 0, INVALID_SOCKET, addr, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND);\n     pnode->fSuccessfullyConnected.store(true);\n \n     // the peer claims to be reaching us via IPv6"
      }
    ]
  },
  {
    "sha": "1521c47438537e192230486dffcec0228a53878d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTIxYzQ3NDM4NTM3ZTE5MjIzMDQ4NmRmZmNlYzAyMjhhNTM4Nzhk",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-29T21:55:59Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Add manual connections to ConnectionType enum",
      "tree": {
        "sha": "826c01d4ca48a96097f951da760d361c58693fc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/826c01d4ca48a96097f951da760d361c58693fc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1521c47438537e192230486dffcec0228a53878d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1521c47438537e192230486dffcec0228a53878d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1521c47438537e192230486dffcec0228a53878d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1521c47438537e192230486dffcec0228a53878d/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26304b4100201754fb32440bec3e3b78cd3f0e6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26304b4100201754fb32440bec3e3b78cd3f0e6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26304b4100201754fb32440bec3e3b78cd3f0e6d"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 19,
      "deletions": 31
    },
    "files": [
      {
        "sha": "272ea35c2dc2f30878cacc7e4f5f1f724b4dbda3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 27,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1521c47438537e192230486dffcec0228a53878d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1521c47438537e192230486dffcec0228a53878d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1521c47438537e192230486dffcec0228a53878d",
        "patch": "@@ -368,8 +368,10 @@ static CAddress GetBindAddress(SOCKET sock)\n     return addr_bind;\n }\n \n-CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, bool manual_connection, bool block_relay_only)\n+CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type, bool block_relay_only)\n {\n+    assert(conn_type != ConnectionType::INBOUND);\n+\n     if (pszDest == nullptr) {\n         if (IsLocal(addrConnect))\n             return nullptr;\n@@ -432,7 +434,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             if (hSocket == INVALID_SOCKET) {\n                 return nullptr;\n             }\n-            connected = ConnectSocketDirectly(addrConnect, hSocket, nConnectTimeout, manual_connection);\n+            connected = ConnectSocketDirectly(addrConnect, hSocket, nConnectTimeout, conn_type == ConnectionType::MANUAL);\n         }\n         if (!proxyConnectionFailed) {\n             // If a connection to the node was attempted, and failure (if any) is not caused by a problem connecting to\n@@ -459,7 +461,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n     CAddress addr_bind = GetBindAddress(hSocket);\n-    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", ConnectionType::OUTBOUND, block_relay_only);\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type, block_relay_only);\n     pnode->AddRef();\n \n     // We're making a new connection, harvest entropy from the time (and our peer count)\n@@ -1705,17 +1707,6 @@ void CConnman::ThreadDNSAddressSeed()\n     LogPrintf(\"%d addresses found from DNS seeds\\n\", found);\n }\n \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n void CConnman::DumpAddresses()\n {\n     int64_t nStart = GetTimeMillis();\n@@ -1786,7 +1777,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             for (const std::string& strAddr : connect)\n             {\n                 CAddress addr(CService(), NODE_NONE);\n-                OpenNetworkConnection(addr, false, nullptr, strAddr.c_str(), false, false, true);\n+                OpenNetworkConnection(addr, false, nullptr, strAddr.c_str(), false, false, ConnectionType::MANUAL);\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n                     if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n@@ -1952,7 +1943,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             // well for sanity.)\n             bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n \n-            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, nullptr, false, fFeeler, false, block_relay_only);\n+            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, nullptr, false, fFeeler, ConnectionType::OUTBOUND, block_relay_only);\n         }\n     }\n }\n@@ -2027,7 +2018,7 @@ void CConnman::ThreadOpenAddedConnections()\n                 }\n                 tried = true;\n                 CAddress addr(CService(), NODE_NONE);\n-                OpenNetworkConnection(addr, false, &grant, info.strAddedNode.c_str(), false, false, true);\n+                OpenNetworkConnection(addr, false, &grant, info.strAddedNode.c_str(), false, false, ConnectionType::MANUAL);\n                 if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n                     return;\n             }\n@@ -2039,8 +2030,10 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool m_addr_fetch, bool fFeeler, bool manual_connection, bool block_relay_only)\n+void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool m_addr_fetch, bool fFeeler, ConnectionType conn_type, bool block_relay_only)\n {\n+    assert(conn_type != ConnectionType::INBOUND);\n+\n     //\n     // Initiate outbound network connection\n     //\n@@ -2058,7 +2051,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     } else if (FindNode(std::string(pszDest)))\n         return;\n \n-    CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure, manual_connection, block_relay_only);\n+    CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure, conn_type, block_relay_only);\n \n     if (!pnode)\n         return;\n@@ -2068,8 +2061,6 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         pnode->m_addr_fetch = true;\n     if (fFeeler)\n         pnode->fFeeler = true;\n-    if (manual_connection)\n-        pnode->m_manual_connection = true;\n \n     m_msgproc->InitializeNode(pnode);\n     {\n@@ -2127,11 +2118,6 @@ void CConnman::ThreadMessageHandler()\n     }\n }\n \n-\n-\n-\n-\n-\n bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError, NetPermissionFlags permissions)\n {\n     int nOne = 1;\n@@ -2390,7 +2376,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     else\n         threadDNSAddressSeed = std::thread(&TraceThread<std::function<void()> >, \"dnsseed\", std::function<void()>(std::bind(&CConnman::ThreadDNSAddressSeed, this)));\n \n-    // Initiate outbound connections from -addnode\n+    // Initiate manual connections\n     threadOpenAddedConnections = std::thread(&TraceThread<std::function<void()> >, \"addcon\", std::function<void()>(std::bind(&CConnman::ThreadOpenAddedConnections, this)));\n \n     if (connOptions.m_use_addrman_outgoing && !connOptions.m_specified_outgoing.empty()) {\n@@ -2752,6 +2738,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     : nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     addrBind(addrBindIn),\n+    m_manual_connection(conn_type_in == ConnectionType::MANUAL),\n     fInbound(conn_type_in == ConnectionType::INBOUND),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     // Don't relay addr messages to peers that we connect to as block-relay-only"
      },
      {
        "sha": "f7741e83703b00e4994f7cbe08f180dd6e3f3b3a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1521c47438537e192230486dffcec0228a53878d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1521c47438537e192230486dffcec0228a53878d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1521c47438537e192230486dffcec0228a53878d",
        "patch": "@@ -116,6 +116,7 @@ struct CSerializedNetMsg\n enum class ConnectionType {\n     INBOUND,\n     OUTBOUND,\n+    MANUAL,\n };\n \n class NetEventsInterface;\n@@ -201,7 +202,7 @@ class CConnman\n     bool GetNetworkActive() const { return fNetworkActive; };\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool m_addr_fetch = false, bool fFeeler = false, bool manual_connection = false, bool block_relay_only = false);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool m_addr_fetch = false, bool fFeeler = false, ConnectionType conn_type = ConnectionType::OUTBOUND, bool block_relay_only = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n@@ -366,7 +367,7 @@ class CConnman\n     CNode* FindNode(const CService& addr);\n \n     bool AttemptToEvictConnection();\n-    CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, bool manual_connection, bool block_relay_only);\n+    CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type, bool block_relay_only);\n     void AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr) const;\n \n     void DeleteNode(CNode* pnode);"
      },
      {
        "sha": "69955b5b2c21013e9d7f05b144b51963f0134b79",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1521c47438537e192230486dffcec0228a53878d/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1521c47438537e192230486dffcec0228a53878d/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=1521c47438537e192230486dffcec0228a53878d",
        "patch": "@@ -264,7 +264,7 @@ static UniValue addnode(const JSONRPCRequest& request)\n     if (strCommand == \"onetry\")\n     {\n         CAddress addr;\n-        node.connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, true);\n+        node.connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, ConnectionType::MANUAL);\n         return NullUniValue;\n     }\n "
      },
      {
        "sha": "723be136295c5683336981d90655ada7096ab780",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1521c47438537e192230486dffcec0228a53878d/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1521c47438537e192230486dffcec0228a53878d/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=1521c47438537e192230486dffcec0228a53878d",
        "patch": "@@ -44,7 +44,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n     for (int i = 0; i < num_peers_to_add; ++i) {\n         const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n-        const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND});\n+        const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND, ConnectionType::MANUAL});\n         const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n         peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, conn_type, block_relay_only).release());\n         CNode& p2p_node = *peers.back();"
      }
    ]
  },
  {
    "sha": "0e52a659a2de915fc3dce37fc8fac39be1c8b6fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTUyYTY1OWEyZGU5MTVmYzNkY2UzN2ZjOGZhYzM5YmUxYzhiNmZh",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-29T23:28:56Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Add feeler connections to ConnectionType enum",
      "tree": {
        "sha": "52b33194e5b33d9b372d426841e790dd231a38d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52b33194e5b33d9b372d426841e790dd231a38d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1521c47438537e192230486dffcec0228a53878d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1521c47438537e192230486dffcec0228a53878d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1521c47438537e192230486dffcec0228a53878d"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "580d0a1842385d54f9b7cb0d1aa3edda42612619",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0e52a659a2de915fc3dce37fc8fac39be1c8b6fa",
        "patch": "@@ -1777,7 +1777,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             for (const std::string& strAddr : connect)\n             {\n                 CAddress addr(CService(), NODE_NONE);\n-                OpenNetworkConnection(addr, false, nullptr, strAddr.c_str(), false, false, ConnectionType::MANUAL);\n+                OpenNetworkConnection(addr, false, nullptr, strAddr.c_str(), false, ConnectionType::MANUAL);\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n                     if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n@@ -1943,7 +1943,8 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             // well for sanity.)\n             bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n \n-            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, nullptr, false, fFeeler, ConnectionType::OUTBOUND, block_relay_only);\n+            ConnectionType conn_type = (fFeeler ? ConnectionType::FEELER : ConnectionType::OUTBOUND);\n+            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, nullptr, false, conn_type, block_relay_only);\n         }\n     }\n }\n@@ -2018,7 +2019,7 @@ void CConnman::ThreadOpenAddedConnections()\n                 }\n                 tried = true;\n                 CAddress addr(CService(), NODE_NONE);\n-                OpenNetworkConnection(addr, false, &grant, info.strAddedNode.c_str(), false, false, ConnectionType::MANUAL);\n+                OpenNetworkConnection(addr, false, &grant, info.strAddedNode.c_str(), false, ConnectionType::MANUAL);\n                 if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n                     return;\n             }\n@@ -2030,7 +2031,7 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool m_addr_fetch, bool fFeeler, ConnectionType conn_type, bool block_relay_only)\n+void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool m_addr_fetch, ConnectionType conn_type, bool block_relay_only)\n {\n     assert(conn_type != ConnectionType::INBOUND);\n \n@@ -2059,8 +2060,6 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         grantOutbound->MoveTo(pnode->grantOutbound);\n     if (m_addr_fetch)\n         pnode->m_addr_fetch = true;\n-    if (fFeeler)\n-        pnode->fFeeler = true;\n \n     m_msgproc->InitializeNode(pnode);\n     {\n@@ -2738,6 +2737,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     : nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     addrBind(addrBindIn),\n+    fFeeler(conn_type_in == ConnectionType::FEELER),\n     m_manual_connection(conn_type_in == ConnectionType::MANUAL),\n     fInbound(conn_type_in == ConnectionType::INBOUND),\n     nKeyedNetGroup(nKeyedNetGroupIn),"
      },
      {
        "sha": "7eb99e3ed84b805d4ad70ca6ed920d0ab53b3fcc",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0e52a659a2de915fc3dce37fc8fac39be1c8b6fa",
        "patch": "@@ -117,6 +117,7 @@ enum class ConnectionType {\n     INBOUND,\n     OUTBOUND,\n     MANUAL,\n+    FEELER,\n };\n \n class NetEventsInterface;\n@@ -202,7 +203,7 @@ class CConnman\n     bool GetNetworkActive() const { return fNetworkActive; };\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool m_addr_fetch = false, bool fFeeler = false, ConnectionType conn_type = ConnectionType::OUTBOUND, bool block_relay_only = false);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool m_addr_fetch = false, ConnectionType conn_type = ConnectionType::OUTBOUND, bool block_relay_only = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);"
      },
      {
        "sha": "716e433476c11da48a235804a758c0b44db2fca6",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=0e52a659a2de915fc3dce37fc8fac39be1c8b6fa",
        "patch": "@@ -264,7 +264,7 @@ static UniValue addnode(const JSONRPCRequest& request)\n     if (strCommand == \"onetry\")\n     {\n         CAddress addr;\n-        node.connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, ConnectionType::MANUAL);\n+        node.connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, ConnectionType::MANUAL);\n         return NullUniValue;\n     }\n "
      },
      {
        "sha": "50f0457e46398b64525cc13f9fd0a9a9ba696c2d",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=0e52a659a2de915fc3dce37fc8fac39be1c8b6fa",
        "patch": "@@ -44,7 +44,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n     for (int i = 0; i < num_peers_to_add; ++i) {\n         const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n-        const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND, ConnectionType::MANUAL});\n+        const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND, ConnectionType::MANUAL, ConnectionType::FEELER});\n         const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n         peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, conn_type, block_relay_only).release());\n         CNode& p2p_node = *peers.back();"
      }
    ]
  },
  {
    "sha": "e1bc29812ddf1d946bc5acca406a7ed2dca064a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWJjMjk4MTJkZGYxZDk0NmJjNWFjY2E0MDZhN2VkMmRjYTA2NGE2",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-30T00:33:06Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Add block relay only connections to ConnectionType enum",
      "tree": {
        "sha": "5bb4ee47501ee13e25810a68de1702bf54736592",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bb4ee47501ee13e25810a68de1702bf54736592"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1bc29812ddf1d946bc5acca406a7ed2dca064a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1bc29812ddf1d946bc5acca406a7ed2dca064a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1bc29812ddf1d946bc5acca406a7ed2dca064a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1bc29812ddf1d946bc5acca406a7ed2dca064a6/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e52a659a2de915fc3dce37fc8fac39be1c8b6fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e52a659a2de915fc3dce37fc8fac39be1c8b6fa"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 24,
      "deletions": 20
    },
    "files": [
      {
        "sha": "e18128dc1c5270b716388df7988b5c60cb23aabb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1bc29812ddf1d946bc5acca406a7ed2dca064a6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1bc29812ddf1d946bc5acca406a7ed2dca064a6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e1bc29812ddf1d946bc5acca406a7ed2dca064a6",
        "patch": "@@ -368,7 +368,7 @@ static CAddress GetBindAddress(SOCKET sock)\n     return addr_bind;\n }\n \n-CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type, bool block_relay_only)\n+CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type)\n {\n     assert(conn_type != ConnectionType::INBOUND);\n \n@@ -461,7 +461,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n     CAddress addr_bind = GetBindAddress(hSocket);\n-    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type, block_relay_only);\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type);\n     pnode->AddRef();\n \n     // We're making a new connection, harvest entropy from the time (and our peer count)\n@@ -1938,13 +1938,17 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n \n             // Open this connection as block-relay-only if we're already at our\n             // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            if(fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (block_relay_only) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                conn_type = ConnectionType::OUTBOUND;\n+            }\n \n-            ConnectionType conn_type = (fFeeler ? ConnectionType::FEELER : ConnectionType::OUTBOUND);\n-            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, nullptr, false, conn_type, block_relay_only);\n+            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, nullptr, false, conn_type);\n         }\n     }\n }\n@@ -2031,7 +2035,7 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool m_addr_fetch, ConnectionType conn_type, bool block_relay_only)\n+void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool m_addr_fetch, ConnectionType conn_type)\n {\n     assert(conn_type != ConnectionType::INBOUND);\n \n@@ -2052,7 +2056,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     } else if (FindNode(std::string(pszDest)))\n         return;\n \n-    CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure, conn_type, block_relay_only);\n+    CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure, conn_type);\n \n     if (!pnode)\n         return;\n@@ -2733,7 +2737,7 @@ int CConnman::GetBestHeight() const\n \n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool block_relay_only)\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in)\n     : nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     addrBind(addrBindIn),\n@@ -2744,7 +2748,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr\n     // traffic).\n-    m_addr_known{block_relay_only ? nullptr : MakeUnique<CRollingBloomFilter>(5000, 0.001)},\n+    m_addr_known{conn_type_in == ConnectionType::BLOCK_RELAY ? nullptr : MakeUnique<CRollingBloomFilter>(5000, 0.001)},\n     id(idIn),\n     nLocalHostNonce(nLocalHostNonceIn),\n     nLocalServices(nLocalServicesIn),\n@@ -2753,7 +2757,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     hSocket = hSocketIn;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     hashContinue = uint256();\n-    if (!block_relay_only) {\n+    if (conn_type_in != ConnectionType::BLOCK_RELAY) {\n         m_tx_relay = MakeUnique<TxRelay>();\n     }\n "
      },
      {
        "sha": "21ee6e72a9ce3efadd4568540cbb0a5f53c091c3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1bc29812ddf1d946bc5acca406a7ed2dca064a6/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1bc29812ddf1d946bc5acca406a7ed2dca064a6/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e1bc29812ddf1d946bc5acca406a7ed2dca064a6",
        "patch": "@@ -118,6 +118,7 @@ enum class ConnectionType {\n     OUTBOUND,\n     MANUAL,\n     FEELER,\n+    BLOCK_RELAY,\n };\n \n class NetEventsInterface;\n@@ -203,7 +204,7 @@ class CConnman\n     bool GetNetworkActive() const { return fNetworkActive; };\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool m_addr_fetch = false, ConnectionType conn_type = ConnectionType::OUTBOUND, bool block_relay_only = false);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool m_addr_fetch = false, ConnectionType conn_type = ConnectionType::OUTBOUND);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n@@ -368,7 +369,7 @@ class CConnman\n     CNode* FindNode(const CService& addr);\n \n     bool AttemptToEvictConnection();\n-    CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type, bool block_relay_only);\n+    CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type);\n     void AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr) const;\n \n     void DeleteNode(CNode* pnode);\n@@ -862,7 +863,7 @@ class CNode\n \n     std::set<uint256> orphan_work_set;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", ConnectionType conn_type_in = ConnectionType::OUTBOUND, bool block_relay_only = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", ConnectionType conn_type_in = ConnectionType::OUTBOUND);\n     ~CNode();\n     CNode(const CNode&) = delete;\n     CNode& operator=(const CNode&) = delete;"
      },
      {
        "sha": "677b87a47adc0b694517ddf45b21523caa06577d",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1bc29812ddf1d946bc5acca406a7ed2dca064a6/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1bc29812ddf1d946bc5acca406a7ed2dca064a6/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=e1bc29812ddf1d946bc5acca406a7ed2dca064a6",
        "patch": "@@ -80,7 +80,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         return;\n     }\n     CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\n-    CNode& p2p_node = *MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND, false).release();\n+    CNode& p2p_node = *MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND).release();\n     p2p_node.fSuccessfullyConnected = true;\n     p2p_node.nVersion = PROTOCOL_VERSION;\n     p2p_node.SetSendVersion(PROTOCOL_VERSION);"
      },
      {
        "sha": "f9e3f769ae619981959113b28ca8a45d2fdc5671",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1bc29812ddf1d946bc5acca406a7ed2dca064a6/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1bc29812ddf1d946bc5acca406a7ed2dca064a6/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=e1bc29812ddf1d946bc5acca406a7ed2dca064a6",
        "patch": "@@ -44,9 +44,8 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n     for (int i = 0; i < num_peers_to_add; ++i) {\n         const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n-        const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND, ConnectionType::MANUAL, ConnectionType::FEELER});\n-        const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n-        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, conn_type, block_relay_only).release());\n+        const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY});\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, conn_type).release());\n         CNode& p2p_node = *peers.back();\n \n         p2p_node.fSuccessfullyConnected = true;"
      }
    ]
  },
  {
    "sha": "af59feb05235ecb85ec9d75b09c66e71268c9889",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjU5ZmViMDUyMzVlY2I4NWVjOWQ3NWIwOWM2NmU3MTI2OGM5ODg5",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-05-12T21:48:24Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Extract m_addr_known logic from initializer list",
      "tree": {
        "sha": "1b473ffa4a8e7107afd4b128e37b750370811e6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b473ffa4a8e7107afd4b128e37b750370811e6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af59feb05235ecb85ec9d75b09c66e71268c9889",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af59feb05235ecb85ec9d75b09c66e71268c9889",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af59feb05235ecb85ec9d75b09c66e71268c9889",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af59feb05235ecb85ec9d75b09c66e71268c9889/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1bc29812ddf1d946bc5acca406a7ed2dca064a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1bc29812ddf1d946bc5acca406a7ed2dca064a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1bc29812ddf1d946bc5acca406a7ed2dca064a6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fd1cb3e64a2a36e2a7640ae6946ec43344724c50",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af59feb05235ecb85ec9d75b09c66e71268c9889/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af59feb05235ecb85ec9d75b09c66e71268c9889/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=af59feb05235ecb85ec9d75b09c66e71268c9889",
        "patch": "@@ -2748,7 +2748,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr\n     // traffic).\n-    m_addr_known{conn_type_in == ConnectionType::BLOCK_RELAY ? nullptr : MakeUnique<CRollingBloomFilter>(5000, 0.001)},\n     id(idIn),\n     nLocalHostNonce(nLocalHostNonceIn),\n     nLocalServices(nLocalServicesIn),\n@@ -2759,6 +2758,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     hashContinue = uint256();\n     if (conn_type_in != ConnectionType::BLOCK_RELAY) {\n         m_tx_relay = MakeUnique<TxRelay>();\n+        m_addr_known = MakeUnique<CRollingBloomFilter>(5000, 0.001);\n     }\n \n     for (const std::string &msg : getAllNetMessageTypes())"
      },
      {
        "sha": "d3a423fd13ab52a309407ae2841eb67a3ebae15a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af59feb05235ecb85ec9d75b09c66e71268c9889/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af59feb05235ecb85ec9d75b09c66e71268c9889/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=af59feb05235ecb85ec9d75b09c66e71268c9889",
        "patch": "@@ -799,7 +799,7 @@ class CNode\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n-    const std::unique_ptr<CRollingBloomFilter> m_addr_known;\n+    std::unique_ptr<CRollingBloomFilter> m_addr_known = nullptr;\n     bool fGetAddr{false};\n     std::chrono::microseconds m_next_addr_send GUARDED_BY(cs_sendProcessing){0};\n     std::chrono::microseconds m_next_local_addr_send GUARDED_BY(cs_sendProcessing){0};"
      }
    ]
  },
  {
    "sha": "442abae2bac7bff85886143df01e14215532b974",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDJhYmFlMmJhYzdiZmY4NTg4NjE0M2RmMDFlMTQyMTU1MzJiOTc0",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-30T17:57:03Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Add AddrFetch connections to ConnectionType enum\n\n- AddrFetch connections are short lived connections used to getaddr from a peer\n- previously called \"one shot\" connections",
      "tree": {
        "sha": "4680c5119375f7fcf36c93d56e55edbbc383d053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4680c5119375f7fcf36c93d56e55edbbc383d053"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/442abae2bac7bff85886143df01e14215532b974",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442abae2bac7bff85886143df01e14215532b974",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/442abae2bac7bff85886143df01e14215532b974",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442abae2bac7bff85886143df01e14215532b974/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af59feb05235ecb85ec9d75b09c66e71268c9889",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af59feb05235ecb85ec9d75b09c66e71268c9889",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af59feb05235ecb85ec9d75b09c66e71268c9889"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "a43d02bbd908a85bd05feea2ee4b196ff5db7c11",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442abae2bac7bff85886143df01e14215532b974/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442abae2bac7bff85886143df01e14215532b974/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=442abae2bac7bff85886143df01e14215532b974",
        "patch": "@@ -1731,7 +1731,7 @@ void CConnman::ProcessAddrFetch()\n     CAddress addr;\n     CSemaphoreGrant grant(*semOutbound, true);\n     if (grant) {\n-        OpenNetworkConnection(addr, false, &grant, strDest.c_str(), true);\n+        OpenNetworkConnection(addr, false, &grant, strDest.c_str(), ConnectionType::ADDR_FETCH);\n     }\n }\n \n@@ -1777,7 +1777,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             for (const std::string& strAddr : connect)\n             {\n                 CAddress addr(CService(), NODE_NONE);\n-                OpenNetworkConnection(addr, false, nullptr, strAddr.c_str(), false, ConnectionType::MANUAL);\n+                OpenNetworkConnection(addr, false, nullptr, strAddr.c_str(), ConnectionType::MANUAL);\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n                     if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n@@ -1948,7 +1948,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 conn_type = ConnectionType::OUTBOUND;\n             }\n \n-            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, nullptr, false, conn_type);\n+            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, nullptr, conn_type);\n         }\n     }\n }\n@@ -2023,7 +2023,7 @@ void CConnman::ThreadOpenAddedConnections()\n                 }\n                 tried = true;\n                 CAddress addr(CService(), NODE_NONE);\n-                OpenNetworkConnection(addr, false, &grant, info.strAddedNode.c_str(), false, ConnectionType::MANUAL);\n+                OpenNetworkConnection(addr, false, &grant, info.strAddedNode.c_str(), ConnectionType::MANUAL);\n                 if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n                     return;\n             }\n@@ -2035,7 +2035,7 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool m_addr_fetch, ConnectionType conn_type)\n+void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, ConnectionType conn_type)\n {\n     assert(conn_type != ConnectionType::INBOUND);\n \n@@ -2062,8 +2062,6 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return;\n     if (grantOutbound)\n         grantOutbound->MoveTo(pnode->grantOutbound);\n-    if (m_addr_fetch)\n-        pnode->m_addr_fetch = true;\n \n     m_msgproc->InitializeNode(pnode);\n     {\n@@ -2742,6 +2740,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     addr(addrIn),\n     addrBind(addrBindIn),\n     fFeeler(conn_type_in == ConnectionType::FEELER),\n+    m_addr_fetch(conn_type_in == ConnectionType::ADDR_FETCH),\n     m_manual_connection(conn_type_in == ConnectionType::MANUAL),\n     fInbound(conn_type_in == ConnectionType::INBOUND),\n     nKeyedNetGroup(nKeyedNetGroupIn),"
      },
      {
        "sha": "269877b21e4deb37a017a73cf3c7234b84451ce6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442abae2bac7bff85886143df01e14215532b974/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442abae2bac7bff85886143df01e14215532b974/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=442abae2bac7bff85886143df01e14215532b974",
        "patch": "@@ -119,6 +119,7 @@ enum class ConnectionType {\n     MANUAL,\n     FEELER,\n     BLOCK_RELAY,\n+    ADDR_FETCH,\n };\n \n class NetEventsInterface;\n@@ -204,7 +205,7 @@ class CConnman\n     bool GetNetworkActive() const { return fNetworkActive; };\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool m_addr_fetch = false, ConnectionType conn_type = ConnectionType::OUTBOUND);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, ConnectionType conn_type = ConnectionType::OUTBOUND);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);"
      },
      {
        "sha": "09265bc48046e770498b063c711aeb359879c83d",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442abae2bac7bff85886143df01e14215532b974/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442abae2bac7bff85886143df01e14215532b974/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=442abae2bac7bff85886143df01e14215532b974",
        "patch": "@@ -264,7 +264,7 @@ static UniValue addnode(const JSONRPCRequest& request)\n     if (strCommand == \"onetry\")\n     {\n         CAddress addr;\n-        node.connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, ConnectionType::MANUAL);\n+        node.connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), ConnectionType::MANUAL);\n         return NullUniValue;\n     }\n "
      },
      {
        "sha": "ef427442e94158924c1c54db38db95fc64097541",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442abae2bac7bff85886143df01e14215532b974/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442abae2bac7bff85886143df01e14215532b974/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=442abae2bac7bff85886143df01e14215532b974",
        "patch": "@@ -44,7 +44,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n     for (int i = 0; i < num_peers_to_add; ++i) {\n         const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n-        const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY});\n+        const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH});\n         peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, conn_type).release());\n         CNode& p2p_node = *peers.back();\n "
      }
    ]
  },
  {
    "sha": "46578c03e92a55925308363ccdad04dcfc820d96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjU3OGMwM2U5MmE1NTkyNTMwODM2M2NjZGFkMDRkY2ZjODIwZDk2",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-02T18:43:57Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[doc] Describe different connection types",
      "tree": {
        "sha": "2384901aab8546864c70a022b498f83b1611067c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2384901aab8546864c70a022b498f83b1611067c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46578c03e92a55925308363ccdad04dcfc820d96",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46578c03e92a55925308363ccdad04dcfc820d96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46578c03e92a55925308363ccdad04dcfc820d96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46578c03e92a55925308363ccdad04dcfc820d96/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "442abae2bac7bff85886143df01e14215532b974",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442abae2bac7bff85886143df01e14215532b974",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/442abae2bac7bff85886143df01e14215532b974"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "6a4ef6ab4ba3749ad72f5b1305fa58020f77f69e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46578c03e92a55925308363ccdad04dcfc820d96/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46578c03e92a55925308363ccdad04dcfc820d96/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=46578c03e92a55925308363ccdad04dcfc820d96",
        "patch": "@@ -113,13 +113,16 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+/** Different types of connections to a peer. This enum encapsulates the\n+ * information we have available at the time of opening or accepting the\n+ * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND,\n-    OUTBOUND,\n-    MANUAL,\n-    FEELER,\n-    BLOCK_RELAY,\n-    ADDR_FETCH,\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */\n };\n \n class NetEventsInterface;"
      }
    ]
  },
  {
    "sha": "d3698b5ee309cf0f0cdfb286d6b30a256d7deae5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzY5OGI1ZWUzMDljZjBmMGNkZmIyODZkNmIzMGEyNTZkN2RlYWU1",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-30T18:21:33Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Add connection type as a member var to CNode\n\n- Directly maintaining the connection type prevents having to deduce it from\n  several flags.",
      "tree": {
        "sha": "2ec1c0ac6f890d583c9e16331e81361470ed249b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ec1c0ac6f890d583c9e16331e81361470ed249b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3698b5ee309cf0f0cdfb286d6b30a256d7deae5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3698b5ee309cf0f0cdfb286d6b30a256d7deae5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3698b5ee309cf0f0cdfb286d6b30a256d7deae5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3698b5ee309cf0f0cdfb286d6b30a256d7deae5/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46578c03e92a55925308363ccdad04dcfc820d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46578c03e92a55925308363ccdad04dcfc820d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46578c03e92a55925308363ccdad04dcfc820d96"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "42748dfc8642fa388e7391a7af968fa1eac802ee",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3698b5ee309cf0f0cdfb286d6b30a256d7deae5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3698b5ee309cf0f0cdfb286d6b30a256d7deae5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d3698b5ee309cf0f0cdfb286d6b30a256d7deae5",
        "patch": "@@ -2749,6 +2749,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     // traffic).\n     id(idIn),\n     nLocalHostNonce(nLocalHostNonceIn),\n+    m_conn_type(conn_type_in),\n     nLocalServices(nLocalServicesIn),\n     nMyStartingHeight(nMyStartingHeightIn)\n {"
      },
      {
        "sha": "115effdef94279b6be272698b52ae21f2a010847",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3698b5ee309cf0f0cdfb286d6b30a256d7deae5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3698b5ee309cf0f0cdfb286d6b30a256d7deae5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d3698b5ee309cf0f0cdfb286d6b30a256d7deae5",
        "patch": "@@ -875,6 +875,7 @@ class CNode\n private:\n     const NodeId id;\n     const uint64_t nLocalHostNonce;\n+    const ConnectionType m_conn_type;\n \n     //! Services offered to this peer.\n     //!"
      }
    ]
  },
  {
    "sha": "49efac5cae7333c6700d9b737d09fae0f3f4d7fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWVmYWM1Y2FlNzMzM2M2NzAwZDliNzM3ZDA5ZmFlMGYzZjRkN2Zh",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-02T15:39:47Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Remove m_manual_connection flag from CNode",
      "tree": {
        "sha": "bcc9a94b9bf862e83769cf34afe56ed396e0b456",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcc9a94b9bf862e83769cf34afe56ed396e0b456"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49efac5cae7333c6700d9b737d09fae0f3f4d7fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49efac5cae7333c6700d9b737d09fae0f3f4d7fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49efac5cae7333c6700d9b737d09fae0f3f4d7fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49efac5cae7333c6700d9b737d09fae0f3f4d7fa/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3698b5ee309cf0f0cdfb286d6b30a256d7deae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3698b5ee309cf0f0cdfb286d6b30a256d7deae5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3698b5ee309cf0f0cdfb286d6b30a256d7deae5"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "4270b16d561177c4cb1ca32c1a831f3dfb10525e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49efac5cae7333c6700d9b737d09fae0f3f4d7fa/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49efac5cae7333c6700d9b737d09fae0f3f4d7fa/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=49efac5cae7333c6700d9b737d09fae0f3f4d7fa",
        "patch": "@@ -539,7 +539,7 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n         X(cleanSubVer);\n     }\n     X(fInbound);\n-    X(m_manual_connection);\n+    stats.m_manual_connection = IsManualConn();\n     X(nStartingHeight);\n     {\n         LOCK(cs_vSend);\n@@ -1648,7 +1648,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->m_addr_fetch && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->m_addr_fetch && !pnode->IsManualConn() && !pnode->fInbound;\n                         }\n                     }\n                     if (nRelevant >= 2) {\n@@ -1758,7 +1758,7 @@ int CConnman::GetExtraOutboundCount()\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->m_addr_fetch && pnode->fSuccessfullyConnected) {\n+            if (!pnode->fInbound && !pnode->IsManualConn() && !pnode->fFeeler && !pnode->fDisconnect && !pnode->m_addr_fetch && pnode->fSuccessfullyConnected) {\n                 ++nOutbound;\n             }\n         }\n@@ -1832,7 +1832,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n+                if (!pnode->fInbound && (pnode->m_conn_type != ConnectionType::MANUAL)) {\n                     // Netgroups for inbound and addnode peers are not excluded because our goal here\n                     // is to not use multiple of our limited outbound slots on a single netgroup\n                     // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n@@ -2741,7 +2741,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     addrBind(addrBindIn),\n     fFeeler(conn_type_in == ConnectionType::FEELER),\n     m_addr_fetch(conn_type_in == ConnectionType::ADDR_FETCH),\n-    m_manual_connection(conn_type_in == ConnectionType::MANUAL),\n     fInbound(conn_type_in == ConnectionType::INBOUND),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     // Don't relay addr messages to peers that we connect to as block-relay-only"
      },
      {
        "sha": "0c6e939771e3ef02e86e65c14c1219d961f5c1ab",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49efac5cae7333c6700d9b737d09fae0f3f4d7fa/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49efac5cae7333c6700d9b737d09fae0f3f4d7fa/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=49efac5cae7333c6700d9b737d09fae0f3f4d7fa",
        "patch": "@@ -777,7 +777,6 @@ class CNode\n     bool m_legacyWhitelisted{false};\n     bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n     bool m_addr_fetch{false};\n-    bool m_manual_connection{false};\n     bool fClient{false}; // set by version message\n     bool m_limited_node{false}; //after BIP159, set by version message\n     const bool fInbound;\n@@ -793,6 +792,10 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n protected:\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n     mapMsgCmdSize mapRecvBytesPerMsgCmd GUARDED_BY(cs_vRecv);"
      },
      {
        "sha": "62886064eb139941e4232ab79fb94c870e8dd654",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49efac5cae7333c6700d9b737d09fae0f3f4d7fa/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49efac5cae7333c6700d9b737d09fae0f3f4d7fa/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=49efac5cae7333c6700d9b737d09fae0f3f4d7fa",
        "patch": "@@ -827,11 +827,9 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n     if (state) state->m_last_block_announcement = time_in_seconds;\n }\n \n-// Returns true for outbound peers, excluding manual connections, feelers, and\n-// one-shots.\n static bool IsOutboundDisconnectionCandidate(const CNode& node)\n {\n-    return !(node.fInbound || node.m_manual_connection || node.fFeeler || node.m_addr_fetch);\n+    return !(node.fInbound || node.IsManualConn() || node.fFeeler || node.m_addr_fetch);\n }\n \n void PeerLogicValidation::InitializeNode(CNode *pnode) {\n@@ -840,7 +838,7 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n     NodeId nodeid = pnode->GetId();\n     {\n         LOCK(cs_main);\n-        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName), pnode->fInbound, pnode->m_manual_connection));\n+        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName), pnode->fInbound, pnode->IsManualConn()));\n     }\n     if(!pnode->fInbound)\n         PushNodeVersion(*pnode, *connman, GetTime());\n@@ -2326,7 +2324,7 @@ void ProcessMessage(\n         {\n             connman.SetServices(pfrom.addr, nServices);\n         }\n-        if (!pfrom.fInbound && !pfrom.fFeeler && !pfrom.m_manual_connection && !HasAllDesirableServiceFlags(nServices))\n+        if (!pfrom.fInbound && !pfrom.fFeeler && !pfrom.IsManualConn() && !HasAllDesirableServiceFlags(nServices))\n         {\n             LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom.GetId(), nServices, GetDesirableServiceFlags(nServices));\n             pfrom.fDisconnect = true;\n@@ -3736,7 +3734,7 @@ bool PeerLogicValidation::MaybeDiscourageAndDisconnect(CNode& pnode)\n         return false;\n     }\n \n-    if (pnode.m_manual_connection) {\n+    if (pnode.IsManualConn()) {\n         // We never disconnect or discourage manual peers for bad behavior\n         LogPrintf(\"Warning: not punishing manually connected peer %d!\\n\", peer_id);\n         return false;"
      }
    ]
  },
  {
    "sha": "14923422b08ac4b21b35c426bf0e1b9e7c97983b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDkyMzQyMmIwOGFjNGIyMWIzNWM0MjZiZjBlMWI5ZTdjOTc5ODNi",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-05-12T19:58:41Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Remove fFeeler flag from CNode",
      "tree": {
        "sha": "678645398fc7e75093828cb8200e7ca9fed2ae3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/678645398fc7e75093828cb8200e7ca9fed2ae3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14923422b08ac4b21b35c426bf0e1b9e7c97983b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14923422b08ac4b21b35c426bf0e1b9e7c97983b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14923422b08ac4b21b35c426bf0e1b9e7c97983b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14923422b08ac4b21b35c426bf0e1b9e7c97983b/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49efac5cae7333c6700d9b737d09fae0f3f4d7fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49efac5cae7333c6700d9b737d09fae0f3f4d7fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49efac5cae7333c6700d9b737d09fae0f3f4d7fa"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 10,
      "deletions": 12
    },
    "files": [
      {
        "sha": "047153972e2e1d8b19c3b6163bf7fa8e7c1d0776",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14923422b08ac4b21b35c426bf0e1b9e7c97983b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14923422b08ac4b21b35c426bf0e1b9e7c97983b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=14923422b08ac4b21b35c426bf0e1b9e7c97983b",
        "patch": "@@ -1648,7 +1648,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->m_addr_fetch && !pnode->IsManualConn() && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && !pnode->IsFeelerConn() && !pnode->m_addr_fetch && !pnode->IsManualConn() && !pnode->fInbound;\n                         }\n                     }\n                     if (nRelevant >= 2) {\n@@ -1758,7 +1758,7 @@ int CConnman::GetExtraOutboundCount()\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (!pnode->fInbound && !pnode->IsManualConn() && !pnode->fFeeler && !pnode->fDisconnect && !pnode->m_addr_fetch && pnode->fSuccessfullyConnected) {\n+            if (!pnode->fInbound && !pnode->IsManualConn() && !pnode->IsFeelerConn() && !pnode->fDisconnect && !pnode->m_addr_fetch && pnode->fSuccessfullyConnected) {\n                 ++nOutbound;\n             }\n         }\n@@ -1841,7 +1841,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                     setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n                     if (pnode->m_tx_relay == nullptr) {\n                         nOutboundBlockRelay++;\n-                    } else if (!pnode->fFeeler) {\n+                    } else if (!pnode->IsFeelerConn()) {\n                         nOutboundFullRelay++;\n                     }\n                 }\n@@ -2739,7 +2739,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     : nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     addrBind(addrBindIn),\n-    fFeeler(conn_type_in == ConnectionType::FEELER),\n     m_addr_fetch(conn_type_in == ConnectionType::ADDR_FETCH),\n     fInbound(conn_type_in == ConnectionType::INBOUND),\n     nKeyedNetGroup(nKeyedNetGroupIn),"
      },
      {
        "sha": "f4fd33ec953d517603e84f074130a8496724a3c7",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14923422b08ac4b21b35c426bf0e1b9e7c97983b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14923422b08ac4b21b35c426bf0e1b9e7c97983b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=14923422b08ac4b21b35c426bf0e1b9e7c97983b",
        "patch": "@@ -775,7 +775,6 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n     bool m_addr_fetch{false};\n     bool fClient{false}; // set by version message\n     bool m_limited_node{false}; //after BIP159, set by version message\n@@ -796,6 +795,10 @@ class CNode\n         return m_conn_type == ConnectionType::MANUAL;\n     }\n \n+    bool IsFeelerConn() const {\n+        return m_conn_type == ConnectionType::FEELER;\n+    }\n+\n protected:\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n     mapMsgCmdSize mapRecvBytesPerMsgCmd GUARDED_BY(cs_vRecv);"
      },
      {
        "sha": "53d47b63b3fbaee4584d68e3990e6487c741620e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14923422b08ac4b21b35c426bf0e1b9e7c97983b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14923422b08ac4b21b35c426bf0e1b9e7c97983b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=14923422b08ac4b21b35c426bf0e1b9e7c97983b",
        "patch": "@@ -829,7 +829,7 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n \n static bool IsOutboundDisconnectionCandidate(const CNode& node)\n {\n-    return !(node.fInbound || node.IsManualConn() || node.fFeeler || node.m_addr_fetch);\n+    return !(node.fInbound || node.IsManualConn() || node.IsFeelerConn() || node.m_addr_fetch);\n }\n \n void PeerLogicValidation::InitializeNode(CNode *pnode) {\n@@ -2324,7 +2324,7 @@ void ProcessMessage(\n         {\n             connman.SetServices(pfrom.addr, nServices);\n         }\n-        if (!pfrom.fInbound && !pfrom.fFeeler && !pfrom.IsManualConn() && !HasAllDesirableServiceFlags(nServices))\n+        if (!pfrom.fInbound && !pfrom.IsFeelerConn() && !pfrom.IsManualConn() && !HasAllDesirableServiceFlags(nServices))\n         {\n             LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom.GetId(), nServices, GetDesirableServiceFlags(nServices));\n             pfrom.fDisconnect = true;\n@@ -2452,8 +2452,7 @@ void ProcessMessage(\n         }\n \n         // Feeler connections exist only to verify if address is online.\n-        if (pfrom.fFeeler) {\n-            assert(pfrom.fInbound == false);\n+        if (pfrom.IsFeelerConn()) {\n             pfrom.fDisconnect = true;\n         }\n         return;"
      },
      {
        "sha": "34be51d5a2d52214c3ebd0c5c5775f7b71a387f4",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14923422b08ac4b21b35c426bf0e1b9e7c97983b/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14923422b08ac4b21b35c426bf0e1b9e7c97983b/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=14923422b08ac4b21b35c426bf0e1b9e7c97983b",
        "patch": "@@ -181,14 +181,11 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     CAddress addr = CAddress(CService(ipv4Addr, 7777), NODE_NETWORK);\n     std::string pszDest;\n \n-    // Test that fFeeler is false by default.\n     std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, ConnectionType::OUTBOUND);\n     BOOST_CHECK(pnode1->fInbound == false);\n-    BOOST_CHECK(pnode1->fFeeler == false);\n \n     std::unique_ptr<CNode> pnode2 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, CAddress(), pszDest, ConnectionType::INBOUND);\n     BOOST_CHECK(pnode2->fInbound == true);\n-    BOOST_CHECK(pnode2->fFeeler == false);\n }\n \n // prior to PR #14728, this test triggers an undefined behavior"
      }
    ]
  },
  {
    "sha": "7b322df6296609570e368e5f326979279041c11f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjMyMmRmNjI5NjYwOTU3MGUzNjhlNWYzMjY5NzkyNzkwNDFjMTFm",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-07-28T20:17:16Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Remove m_addr_fetch member var from CNode",
      "tree": {
        "sha": "99082a5d746bd26d1affdc152596dbbe25301e09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99082a5d746bd26d1affdc152596dbbe25301e09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b322df6296609570e368e5f326979279041c11f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b322df6296609570e368e5f326979279041c11f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b322df6296609570e368e5f326979279041c11f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b322df6296609570e368e5f326979279041c11f/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14923422b08ac4b21b35c426bf0e1b9e7c97983b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14923422b08ac4b21b35c426bf0e1b9e7c97983b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14923422b08ac4b21b35c426bf0e1b9e7c97983b"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 10,
      "deletions": 8
    },
    "files": [
      {
        "sha": "75091406401154001985bda35740ff2f21f41219",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b322df6296609570e368e5f326979279041c11f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b322df6296609570e368e5f326979279041c11f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7b322df6296609570e368e5f326979279041c11f",
        "patch": "@@ -1648,7 +1648,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->IsFeelerConn() && !pnode->m_addr_fetch && !pnode->IsManualConn() && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && !pnode->IsFeelerConn() && !pnode->IsAddrFetchConn() && !pnode->IsManualConn() && !pnode->fInbound;\n                         }\n                     }\n                     if (nRelevant >= 2) {\n@@ -1758,7 +1758,7 @@ int CConnman::GetExtraOutboundCount()\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (!pnode->fInbound && !pnode->IsManualConn() && !pnode->IsFeelerConn() && !pnode->fDisconnect && !pnode->m_addr_fetch && pnode->fSuccessfullyConnected) {\n+            if (!pnode->fInbound && !pnode->IsManualConn() && !pnode->IsFeelerConn() && !pnode->fDisconnect && !pnode->IsAddrFetchConn() && pnode->fSuccessfullyConnected) {\n                 ++nOutbound;\n             }\n         }\n@@ -2739,7 +2739,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     : nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     addrBind(addrBindIn),\n-    m_addr_fetch(conn_type_in == ConnectionType::ADDR_FETCH),\n     fInbound(conn_type_in == ConnectionType::INBOUND),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     // Don't relay addr messages to peers that we connect to as block-relay-only"
      },
      {
        "sha": "74f96d3a303ec5419f3beb0179d19b92b6f607e2",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b322df6296609570e368e5f326979279041c11f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b322df6296609570e368e5f326979279041c11f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7b322df6296609570e368e5f326979279041c11f",
        "patch": "@@ -775,7 +775,6 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool m_addr_fetch{false};\n     bool fClient{false}; // set by version message\n     bool m_limited_node{false}; //after BIP159, set by version message\n     const bool fInbound;\n@@ -799,6 +798,10 @@ class CNode\n         return m_conn_type == ConnectionType::FEELER;\n     }\n \n+    bool IsAddrFetchConn() const {\n+        return m_conn_type == ConnectionType::ADDR_FETCH;\n+    }\n+\n protected:\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n     mapMsgCmdSize mapRecvBytesPerMsgCmd GUARDED_BY(cs_vRecv);"
      },
      {
        "sha": "6a78924fef0f154af1d3b2b2eda79f3f583ab3ce",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b322df6296609570e368e5f326979279041c11f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b322df6296609570e368e5f326979279041c11f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7b322df6296609570e368e5f326979279041c11f",
        "patch": "@@ -473,7 +473,7 @@ static void UpdatePreferredDownload(const CNode& node, CNodeState* state) EXCLUS\n     nPreferredDownload -= state->fPreferredDownload;\n \n     // Whether this node should be marked as a preferred download node.\n-    state->fPreferredDownload = (!node.fInbound || node.HasPermission(PF_NOBAN)) && !node.m_addr_fetch && !node.fClient;\n+    state->fPreferredDownload = (!node.fInbound || node.HasPermission(PF_NOBAN)) && !node.IsAddrFetchConn() && !node.fClient;\n \n     nPreferredDownload += state->fPreferredDownload;\n }\n@@ -829,7 +829,7 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n \n static bool IsOutboundDisconnectionCandidate(const CNode& node)\n {\n-    return !(node.fInbound || node.IsManualConn() || node.IsFeelerConn() || node.m_addr_fetch);\n+    return !(node.fInbound || node.IsManualConn() || node.IsFeelerConn() || node.IsAddrFetchConn());\n }\n \n void PeerLogicValidation::InitializeNode(CNode *pnode) {\n@@ -2581,7 +2581,7 @@ void ProcessMessage(\n         connman.AddNewAddresses(vAddrOk, pfrom.addr, 2 * 60 * 60);\n         if (vAddr.size() < 1000)\n             pfrom.fGetAddr = false;\n-        if (pfrom.m_addr_fetch)\n+        if (pfrom.IsAddrFetchConn())\n             pfrom.fDisconnect = true;\n         return;\n     }\n@@ -4094,7 +4094,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         // Start block sync\n         if (pindexBestHeader == nullptr)\n             pindexBestHeader = ::ChainActive().Tip();\n-        bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->m_addr_fetch); // Download if this is a nice peer, or we have no nice peers and this one might do.\n+        bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->IsAddrFetchConn()); // Download if this is a nice peer, or we have no nice peers and this one might do.\n         if (!state.fSyncStarted && !pto->fClient && !fImporting && !fReindex) {\n             // Only actively request headers from a single peer, unless we're close to today.\n             if ((nSyncStarted == 0 && fFetch) || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {"
      }
    ]
  },
  {
    "sha": "60156f5fc40d56bb532278f16ce632c5a8b8035e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDE1NmY1ZmM0MGQ1NmJiNTMyMjc4ZjE2Y2U2MzJjNWE4YjgwMzVl",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-07-28T20:39:38Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Remove fInbound flag from CNode",
      "tree": {
        "sha": "671619f116adb9a6714d1de5b9590a72954a6e13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/671619f116adb9a6714d1de5b9590a72954a6e13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60156f5fc40d56bb532278f16ce632c5a8b8035e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60156f5fc40d56bb532278f16ce632c5a8b8035e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60156f5fc40d56bb532278f16ce632c5a8b8035e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60156f5fc40d56bb532278f16ce632c5a8b8035e/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b322df6296609570e368e5f326979279041c11f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b322df6296609570e368e5f326979279041c11f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b322df6296609570e368e5f326979279041c11f"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 29,
      "deletions": 27
    },
    "files": [
      {
        "sha": "9d33bed2fccfa2a50d5a78f988d734c87e67db94",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60156f5fc40d56bb532278f16ce632c5a8b8035e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60156f5fc40d56bb532278f16ce632c5a8b8035e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=60156f5fc40d56bb532278f16ce632c5a8b8035e",
        "patch": "@@ -346,7 +346,7 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n     LOCK(cs_vNodes);\n     for (const CNode* pnode : vNodes) {\n-        if (!pnode->fSuccessfullyConnected && !pnode->fInbound && pnode->GetLocalNonce() == nonce)\n+        if (!pnode->fSuccessfullyConnected && !pnode->IsInboundConn() && pnode->GetLocalNonce() == nonce)\n             return false;\n     }\n     return true;\n@@ -538,7 +538,7 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n         LOCK(cs_SubVer);\n         X(cleanSubVer);\n     }\n-    X(fInbound);\n+    stats.fInbound = IsInboundConn();\n     stats.m_manual_connection = IsManualConn();\n     X(nStartingHeight);\n     {\n@@ -874,7 +874,7 @@ bool CConnman::AttemptToEvictConnection()\n         for (const CNode* node : vNodes) {\n             if (node->HasPermission(PF_NOBAN))\n                 continue;\n-            if (!node->fInbound)\n+            if (!node->IsInboundConn())\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n@@ -985,7 +985,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (pnode->fInbound) nInbound++;\n+            if (pnode->IsInboundConn()) nInbound++;\n         }\n     }\n \n@@ -1648,7 +1648,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->IsFeelerConn() && !pnode->IsAddrFetchConn() && !pnode->IsManualConn() && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && !pnode->IsFeelerConn() && !pnode->IsAddrFetchConn() && !pnode->IsManualConn() && !pnode->IsInboundConn();\n                         }\n                     }\n                     if (nRelevant >= 2) {\n@@ -1758,7 +1758,7 @@ int CConnman::GetExtraOutboundCount()\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (!pnode->fInbound && !pnode->IsManualConn() && !pnode->IsFeelerConn() && !pnode->fDisconnect && !pnode->IsAddrFetchConn() && pnode->fSuccessfullyConnected) {\n+            if (!pnode->IsInboundConn() && !pnode->IsManualConn() && !pnode->IsFeelerConn() && !pnode->fDisconnect && !pnode->IsAddrFetchConn() && pnode->fSuccessfullyConnected) {\n                 ++nOutbound;\n             }\n         }\n@@ -1832,7 +1832,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && (pnode->m_conn_type != ConnectionType::MANUAL)) {\n+                if (!pnode->IsInboundConn() && (pnode->m_conn_type != ConnectionType::MANUAL)) {\n                     // Netgroups for inbound and addnode peers are not excluded because our goal here\n                     // is to not use multiple of our limited outbound slots on a single netgroup\n                     // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n@@ -1972,11 +1972,11 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n             if (pnode->addr.IsValid()) {\n-                mapConnected[pnode->addr] = pnode->fInbound;\n+                mapConnected[pnode->addr] = pnode->IsInboundConn();\n             }\n             std::string addrName = pnode->GetAddrName();\n             if (!addrName.empty()) {\n-                mapConnectedByName[std::move(addrName)] = std::make_pair(pnode->fInbound, static_cast<const CService&>(pnode->addr));\n+                mapConnectedByName[std::move(addrName)] = std::make_pair(pnode->IsInboundConn(), static_cast<const CService&>(pnode->addr));\n             }\n         }\n     }\n@@ -2551,7 +2551,7 @@ size_t CConnman::GetNodeCount(NumConnections flags)\n \n     int nNum = 0;\n     for (const auto& pnode : vNodes) {\n-        if (flags & (pnode->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT)) {\n+        if (flags & (pnode->IsInboundConn() ? CONNECTIONS_IN : CONNECTIONS_OUT)) {\n             nNum++;\n         }\n     }\n@@ -2739,7 +2739,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     : nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     addrBind(addrBindIn),\n-    fInbound(conn_type_in == ConnectionType::INBOUND),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr"
      },
      {
        "sha": "f52fea72becd452c592a913aebc86c4df923c7a8",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60156f5fc40d56bb532278f16ce632c5a8b8035e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60156f5fc40d56bb532278f16ce632c5a8b8035e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=60156f5fc40d56bb532278f16ce632c5a8b8035e",
        "patch": "@@ -777,7 +777,6 @@ class CNode\n     bool m_legacyWhitelisted{false};\n     bool fClient{false}; // set by version message\n     bool m_limited_node{false}; //after BIP159, set by version message\n-    const bool fInbound;\n     std::atomic_bool fSuccessfullyConnected{false};\n     // Setting fDisconnect to true will cause the node to be disconnected the\n     // next time DisconnectNodes() runs\n@@ -802,6 +801,10 @@ class CNode\n         return m_conn_type == ConnectionType::ADDR_FETCH;\n     }\n \n+    bool IsInboundConn() const {\n+        return m_conn_type == ConnectionType::INBOUND;\n+    }\n+\n protected:\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n     mapMsgCmdSize mapRecvBytesPerMsgCmd GUARDED_BY(cs_vRecv);"
      },
      {
        "sha": "da2fa802634ac6a1ddf65132d2d3e3e65afe2a55",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60156f5fc40d56bb532278f16ce632c5a8b8035e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60156f5fc40d56bb532278f16ce632c5a8b8035e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=60156f5fc40d56bb532278f16ce632c5a8b8035e",
        "patch": "@@ -473,7 +473,7 @@ static void UpdatePreferredDownload(const CNode& node, CNodeState* state) EXCLUS\n     nPreferredDownload -= state->fPreferredDownload;\n \n     // Whether this node should be marked as a preferred download node.\n-    state->fPreferredDownload = (!node.fInbound || node.HasPermission(PF_NOBAN)) && !node.IsAddrFetchConn() && !node.fClient;\n+    state->fPreferredDownload = (!node.IsInboundConn() || node.HasPermission(PF_NOBAN)) && !node.IsAddrFetchConn() && !node.fClient;\n \n     nPreferredDownload += state->fPreferredDownload;\n }\n@@ -829,7 +829,7 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n \n static bool IsOutboundDisconnectionCandidate(const CNode& node)\n {\n-    return !(node.fInbound || node.IsManualConn() || node.IsFeelerConn() || node.IsAddrFetchConn());\n+    return !(node.IsInboundConn() || node.IsManualConn() || node.IsFeelerConn() || node.IsAddrFetchConn());\n }\n \n void PeerLogicValidation::InitializeNode(CNode *pnode) {\n@@ -838,9 +838,9 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n     NodeId nodeid = pnode->GetId();\n     {\n         LOCK(cs_main);\n-        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName), pnode->fInbound, pnode->IsManualConn()));\n+        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName), pnode->IsInboundConn(), pnode->IsManualConn()));\n     }\n-    if(!pnode->fInbound)\n+    if(!pnode->IsInboundConn())\n         PushNodeVersion(*pnode, *connman, GetTime());\n }\n \n@@ -2320,11 +2320,11 @@ void ProcessMessage(\n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n         nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n         nServices = ServiceFlags(nServiceInt);\n-        if (!pfrom.fInbound)\n+        if (!pfrom.IsInboundConn())\n         {\n             connman.SetServices(pfrom.addr, nServices);\n         }\n-        if (!pfrom.fInbound && !pfrom.IsFeelerConn() && !pfrom.IsManualConn() && !HasAllDesirableServiceFlags(nServices))\n+        if (!pfrom.IsInboundConn() && !pfrom.IsFeelerConn() && !pfrom.IsManualConn() && !HasAllDesirableServiceFlags(nServices))\n         {\n             LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom.GetId(), nServices, GetDesirableServiceFlags(nServices));\n             pfrom.fDisconnect = true;\n@@ -2351,20 +2351,20 @@ void ProcessMessage(\n         if (!vRecv.empty())\n             vRecv >> fRelay;\n         // Disconnect if we connected to ourself\n-        if (pfrom.fInbound && !connman.CheckIncomingNonce(nNonce))\n+        if (pfrom.IsInboundConn() && !connman.CheckIncomingNonce(nNonce))\n         {\n             LogPrintf(\"connected to self at %s, disconnecting\\n\", pfrom.addr.ToString());\n             pfrom.fDisconnect = true;\n             return;\n         }\n \n-        if (pfrom.fInbound && addrMe.IsRoutable())\n+        if (pfrom.IsInboundConn() && addrMe.IsRoutable())\n         {\n             SeenLocal(addrMe);\n         }\n \n         // Be shy and don't send version until we hear\n-        if (pfrom.fInbound)\n+        if (pfrom.IsInboundConn())\n             PushNodeVersion(pfrom, connman, GetAdjustedTime());\n \n         if (nVersion >= WTXID_RELAY_VERSION) {\n@@ -2408,7 +2408,7 @@ void ProcessMessage(\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.fInbound && pfrom.IsAddrRelayPeer())\n+        if (!pfrom.IsInboundConn() && pfrom.IsAddrRelayPeer())\n         {\n             // Advertise our address\n             if (fListen && !::ChainstateActive().IsInitialBlockDownload())\n@@ -2472,7 +2472,7 @@ void ProcessMessage(\n     {\n         pfrom.SetRecvVersion(std::min(pfrom.nVersion.load(), PROTOCOL_VERSION));\n \n-        if (!pfrom.fInbound) {\n+        if (!pfrom.IsInboundConn()) {\n             // Mark this node as currently connected, so we update its timestamp later.\n             LOCK(cs_main);\n             State(pfrom.GetId())->fCurrentlyConnected = true;\n@@ -3452,7 +3452,7 @@ void ProcessMessage(\n         // to users' AddrMan and later request them by sending getaddr messages.\n         // Making nodes which are behind NAT and can only make outgoing connections ignore\n         // the getaddr message mitigates the attack.\n-        if (!pfrom.fInbound) {\n+        if (!pfrom.IsInboundConn()) {\n             LogPrint(BCLog::NET, \"Ignoring \\\"getaddr\\\" from outbound connection. peer=%d\\n\", pfrom.GetId());\n             return;\n         }\n@@ -4279,7 +4279,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                 bool fSendTrickle = pto->HasPermission(PF_NOBAN);\n                 if (pto->m_tx_relay->nNextInvSend < current_time) {\n                     fSendTrickle = true;\n-                    if (pto->fInbound) {\n+                    if (pto->IsInboundConn()) {\n                         pto->m_tx_relay->nNextInvSend = std::chrono::microseconds{connman->PoissonNextSendInbound(nNow, INVENTORY_BROADCAST_INTERVAL)};\n                     } else {\n                         // Use half the delay for outbound peers, as there is less privacy concern for them."
      },
      {
        "sha": "317000c7716e08043ad417c60e933aad06765c77",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60156f5fc40d56bb532278f16ce632c5a8b8035e/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60156f5fc40d56bb532278f16ce632c5a8b8035e/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=60156f5fc40d56bb532278f16ce632c5a8b8035e",
        "patch": "@@ -182,10 +182,10 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     std::string pszDest;\n \n     std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, ConnectionType::OUTBOUND);\n-    BOOST_CHECK(pnode1->fInbound == false);\n+    BOOST_CHECK(pnode1->IsInboundConn() == false);\n \n     std::unique_ptr<CNode> pnode2 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, CAddress(), pszDest, ConnectionType::INBOUND);\n-    BOOST_CHECK(pnode2->fInbound == true);\n+    BOOST_CHECK(pnode2->IsInboundConn() == true);\n }\n \n // prior to PR #14728, this test triggers an undefined behavior"
      }
    ]
  },
  {
    "sha": "4972c21b671ff73f13a1b5053338b6abbdb471b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTcyYzIxYjY3MWZmNzNmMTNhMWI1MDUzMzM4YjZhYmJkYjQ3MWI1",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-05-20T21:16:24Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Clarify logic for selecting connections in ThreadOpenConnections",
      "tree": {
        "sha": "7156bf8535c553f337bc2e8d8b2c2a9158624155",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7156bf8535c553f337bc2e8d8b2c2a9158624155"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4972c21b671ff73f13a1b5053338b6abbdb471b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4972c21b671ff73f13a1b5053338b6abbdb471b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4972c21b671ff73f13a1b5053338b6abbdb471b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4972c21b671ff73f13a1b5053338b6abbdb471b5/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60156f5fc40d56bb532278f16ce632c5a8b8035e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60156f5fc40d56bb532278f16ce632c5a8b8035e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60156f5fc40d56bb532278f16ce632c5a8b8035e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "67db02d0a17805f9a218702dc1356a461adbfdc1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4972c21b671ff73f13a1b5053338b6abbdb471b5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4972c21b671ff73f13a1b5053338b6abbdb471b5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4972c21b671ff73f13a1b5053338b6abbdb471b5",
        "patch": "@@ -1936,15 +1936,20 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && nOutboundFullRelay >= m_max_outbound_full_relay;\n             ConnectionType conn_type;\n-            if(fFeeler) {\n+            // Determine what type of connection to open. If fFeeler is not\n+            // set, open OUTBOUND connections until we meet our full-relay\n+            // capacity. Then open BLOCK_RELAY connections until we hit our\n+            // block-relay peer limit. Otherwise, default to opening an\n+            // OUTBOUND connection.\n+            if (fFeeler) {\n                 conn_type = ConnectionType::FEELER;\n-            } else if (block_relay_only) {\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n                 conn_type = ConnectionType::BLOCK_RELAY;\n             } else {\n+                // GetTryNewOutboundPeer() is true\n                 conn_type = ConnectionType::OUTBOUND;\n             }\n "
      }
    ]
  },
  {
    "sha": "35839e963bf61d2da0d12f5b8cea74ac0e0fbd7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTgzOWU5NjNiZjYxZDJkYTBkMTJmNWI4Y2VhNzRhYzBlMGZiZDdi",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-02T16:01:36Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net] Fix bug where AddrFetch connections would be counted as outbound full relay\n\nThe desired logic is for us to only open feeler connections after we have hit\nthe max count for outbound full relay connections.  A short lived AddrFetch\nconnection (previously called oneshot) could cause ThreadOpenConnections to\nmiscount and mistakenly open a feeler instead of full relay.",
      "tree": {
        "sha": "f1607885bdb4f932b88df0755ee67dce26b63c75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1607885bdb4f932b88df0755ee67dce26b63c75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35839e963bf61d2da0d12f5b8cea74ac0e0fbd7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35839e963bf61d2da0d12f5b8cea74ac0e0fbd7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35839e963bf61d2da0d12f5b8cea74ac0e0fbd7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35839e963bf61d2da0d12f5b8cea74ac0e0fbd7b/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4972c21b671ff73f13a1b5053338b6abbdb471b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4972c21b671ff73f13a1b5053338b6abbdb471b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4972c21b671ff73f13a1b5053338b6abbdb471b5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f2dcec784fc18b3c64c3bafcc74640231a16cf96",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35839e963bf61d2da0d12f5b8cea74ac0e0fbd7b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35839e963bf61d2da0d12f5b8cea74ac0e0fbd7b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=35839e963bf61d2da0d12f5b8cea74ac0e0fbd7b",
        "patch": "@@ -1841,7 +1841,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                     setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n                     if (pnode->m_tx_relay == nullptr) {\n                         nOutboundBlockRelay++;\n-                    } else if (!pnode->IsFeelerConn()) {\n+                    } else if (pnode->m_conn_type == ConnectionType::OUTBOUND) {\n                         nOutboundFullRelay++;\n                     }\n                 }"
      }
    ]
  },
  {
    "sha": "7f7b83deb2427599c129f4ff581d4d045461e459",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjdiODNkZWIyNDI3NTk5YzEyOWY0ZmY1ODFkNGQwNDU0NjFlNDU5",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-03T04:23:44Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Rework ThreadOpenConnections logic\n\nMake the connection counts explicit and extract into interface functions around\nm_conn_type. Using explicit counting and switch statements where possible\nshould help prevent counting bugs in the future.",
      "tree": {
        "sha": "0612ff469f49f98f59a985d21c8847a97840cce8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0612ff469f49f98f59a985d21c8847a97840cce8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f7b83deb2427599c129f4ff581d4d045461e459",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f7b83deb2427599c129f4ff581d4d045461e459",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f7b83deb2427599c129f4ff581d4d045461e459",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f7b83deb2427599c129f4ff581d4d045461e459/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35839e963bf61d2da0d12f5b8cea74ac0e0fbd7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35839e963bf61d2da0d12f5b8cea74ac0e0fbd7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35839e963bf61d2da0d12f5b8cea74ac0e0fbd7b"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 41,
      "deletions": 12
    },
    "files": [
      {
        "sha": "35daddbbe2519fcc6f60bb3002a373fb06941bff",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f7b83deb2427599c129f4ff581d4d045461e459/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f7b83deb2427599c129f4ff581d4d045461e459/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7f7b83deb2427599c129f4ff581d4d045461e459",
        "patch": "@@ -1829,21 +1829,27 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->IsInboundConn() && (pnode->m_conn_type != ConnectionType::MANUAL)) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n-                        nOutboundBlockRelay++;\n-                    } else if (pnode->m_conn_type == ConnectionType::OUTBOUND) {\n-                        nOutboundFullRelay++;\n-                    }\n+                if (pnode->IsFullOutboundConn()) nOutboundFullRelay++;\n+                if (pnode->IsBlockOnlyConn()) nOutboundBlockRelay++;\n+\n+                // Netgroups for inbound and manual peers are not excluded because our goal here\n+                // is to not use multiple of our limited outbound slots on a single netgroup\n+                // but inbound and manual peers do not use our outbound slots. Inbound peers\n+                // also have the added issue that they could be attacker controlled and used\n+                // to prevent us from connecting to particular hosts if we used them here.\n+                switch(pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        break;\n+                    case ConnectionType::OUTBOUND:\n+                    case ConnectionType::BLOCK_RELAY:\n+                    case ConnectionType::ADDR_FETCH:\n+                    case ConnectionType::FEELER:\n+                        setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n                 }\n             }\n         }"
      },
      {
        "sha": "4834050122c1850e0b359f37b2f562ff571190c0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f7b83deb2427599c129f4ff581d4d045461e459/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f7b83deb2427599c129f4ff581d4d045461e459/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7f7b83deb2427599c129f4ff581d4d045461e459",
        "patch": "@@ -789,10 +789,18 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n     bool IsManualConn() const {\n         return m_conn_type == ConnectionType::MANUAL;\n     }\n \n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n     bool IsFeelerConn() const {\n         return m_conn_type == ConnectionType::FEELER;\n     }\n@@ -805,6 +813,21 @@ class CNode\n         return m_conn_type == ConnectionType::INBOUND;\n     }\n \n+    bool ExpectServicesFromConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::FEELER:\n+                return false;\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+            case ConnectionType::ADDR_FETCH:\n+                return true;\n+        }\n+\n+        assert(false);\n+    }\n+\n protected:\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n     mapMsgCmdSize mapRecvBytesPerMsgCmd GUARDED_BY(cs_vRecv);"
      }
    ]
  },
  {
    "sha": "2f2e13b6c2c8741ca9d825eaaef736ede484bc85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjJlMTNiNmMyYzg3NDFjYTlkODI1ZWFhZWY3MzZlZGU0ODRiYzg1",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-07-20T21:24:48Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:16Z"
      },
      "message": "[net/refactor] Simplify multiple-connection checks\n\nExtract logic that check multiple connection types into interface functions &\nstructure as switch statements. This makes it very clear what touch points are\nfor accessing `m_conn_type` & using the switch statements enables the compiler\nto warn if a new connection type is introduced but not handled for these cases.",
      "tree": {
        "sha": "225aa16a085f9bc34a6e96653bec35da60853270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/225aa16a085f9bc34a6e96653bec35da60853270"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f2e13b6c2c8741ca9d825eaaef736ede484bc85",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f2e13b6c2c8741ca9d825eaaef736ede484bc85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f2e13b6c2c8741ca9d825eaaef736ede484bc85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f2e13b6c2c8741ca9d825eaaef736ede484bc85/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f7b83deb2427599c129f4ff581d4d045461e459",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f7b83deb2427599c129f4ff581d4d045461e459",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f7b83deb2427599c129f4ff581d4d045461e459"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 19,
      "deletions": 4
    },
    "files": [
      {
        "sha": "539ba9f40c9b0b70c7166be73dcb1d375d29fd40",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f2e13b6c2c8741ca9d825eaaef736ede484bc85/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f2e13b6c2c8741ca9d825eaaef736ede484bc85/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2f2e13b6c2c8741ca9d825eaaef736ede484bc85",
        "patch": "@@ -1648,7 +1648,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->IsFeelerConn() && !pnode->IsAddrFetchConn() && !pnode->IsManualConn() && !pnode->IsInboundConn();\n+                            if (pnode->fSuccessfullyConnected && pnode->IsOutboundOrBlockRelayConn()) ++nRelevant;\n                         }\n                     }\n                     if (nRelevant >= 2) {\n@@ -1758,7 +1758,7 @@ int CConnman::GetExtraOutboundCount()\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (!pnode->IsInboundConn() && !pnode->IsManualConn() && !pnode->IsFeelerConn() && !pnode->fDisconnect && !pnode->IsAddrFetchConn() && pnode->fSuccessfullyConnected) {\n+            if (pnode->fSuccessfullyConnected && !pnode->fDisconnect && pnode->IsOutboundOrBlockRelayConn()) {\n                 ++nOutbound;\n             }\n         }"
      },
      {
        "sha": "444a1ceed25758557d4c9782cd49092fd7c85577",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f2e13b6c2c8741ca9d825eaaef736ede484bc85/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f2e13b6c2c8741ca9d825eaaef736ede484bc85/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2f2e13b6c2c8741ca9d825eaaef736ede484bc85",
        "patch": "@@ -789,6 +789,21 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+        }\n+\n+        assert(false);\n+    }\n+\n     bool IsFullOutboundConn() const {\n         return m_conn_type == ConnectionType::OUTBOUND;\n     }"
      },
      {
        "sha": "f90ae658ec122e1dd1bb938260ae7ff0997ba212",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f2e13b6c2c8741ca9d825eaaef736ede484bc85/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f2e13b6c2c8741ca9d825eaaef736ede484bc85/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2f2e13b6c2c8741ca9d825eaaef736ede484bc85",
        "patch": "@@ -829,7 +829,7 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n \n static bool IsOutboundDisconnectionCandidate(const CNode& node)\n {\n-    return !(node.IsInboundConn() || node.IsManualConn() || node.IsFeelerConn() || node.IsAddrFetchConn());\n+    return node.IsOutboundOrBlockRelayConn();\n }\n \n void PeerLogicValidation::InitializeNode(CNode *pnode) {\n@@ -2324,7 +2324,7 @@ void ProcessMessage(\n         {\n             connman.SetServices(pfrom.addr, nServices);\n         }\n-        if (!pfrom.IsInboundConn() && !pfrom.IsFeelerConn() && !pfrom.IsManualConn() && !HasAllDesirableServiceFlags(nServices))\n+        if (pfrom.ExpectServicesFromConn() && !HasAllDesirableServiceFlags(nServices))\n         {\n             LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom.GetId(), nServices, GetDesirableServiceFlags(nServices));\n             pfrom.fDisconnect = true;"
      }
    ]
  },
  {
    "sha": "bc5d65b3ca41eebb1738fdda4451d1466e77772e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzVkNjViM2NhNDFlZWJiMTczOGZkZGE0NDUxZDE0NjZlNzc3NzJl",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-07-21T23:28:47Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:17Z"
      },
      "message": "[refactor] Remove IsOutboundDisconnectionCandidate",
      "tree": {
        "sha": "b547e86cbe1e80f6bc750c8b462c6f4c83248107",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b547e86cbe1e80f6bc750c8b462c6f4c83248107"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc5d65b3ca41eebb1738fdda4451d1466e77772e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc5d65b3ca41eebb1738fdda4451d1466e77772e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc5d65b3ca41eebb1738fdda4451d1466e77772e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc5d65b3ca41eebb1738fdda4451d1466e77772e/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f2e13b6c2c8741ca9d825eaaef736ede484bc85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f2e13b6c2c8741ca9d825eaaef736ede484bc85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f2e13b6c2c8741ca9d825eaaef736ede484bc85"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 4,
      "deletions": 9
    },
    "files": [
      {
        "sha": "9e60716fa8671fe3b7d9bc27b45c240e298f63f9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc5d65b3ca41eebb1738fdda4451d1466e77772e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc5d65b3ca41eebb1738fdda4451d1466e77772e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bc5d65b3ca41eebb1738fdda4451d1466e77772e",
        "patch": "@@ -827,11 +827,6 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n     if (state) state->m_last_block_announcement = time_in_seconds;\n }\n \n-static bool IsOutboundDisconnectionCandidate(const CNode& node)\n-{\n-    return node.IsOutboundOrBlockRelayConn();\n-}\n-\n void PeerLogicValidation::InitializeNode(CNode *pnode) {\n     CAddress addr = pnode->addr;\n     std::string addrName = pnode->GetAddrName();\n@@ -1963,14 +1958,14 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n                 // until we have a headers chain that has at least\n                 // nMinimumChainWork, even if a peer has a chain past our tip,\n                 // as an anti-DoS measure.\n-                if (IsOutboundDisconnectionCandidate(pfrom)) {\n+                if (pfrom.IsOutboundOrBlockRelayConn()) {\n                     LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom.GetId());\n                     pfrom.fDisconnect = true;\n                 }\n             }\n         }\n \n-        if (!pfrom.fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr && pfrom.m_tx_relay != nullptr) {\n+        if (!pfrom.fDisconnect && pfrom.IsOutboundOrBlockRelayConn() && nodestate->pindexBestKnownBlock != nullptr && pfrom.m_tx_relay != nullptr) {\n             // If this is an outbound full-relay peer, check to see if we should protect\n             // it from the bad/lagging chain logic.\n             // Note that block-relay-only peers are already implicitly protected, so we\n@@ -3854,7 +3849,7 @@ void PeerLogicValidation::ConsiderEviction(CNode& pto, int64_t time_in_seconds)\n     CNodeState &state = *State(pto.GetId());\n     const CNetMsgMaker msgMaker(pto.GetSendVersion());\n \n-    if (!state.m_chain_sync.m_protect && IsOutboundDisconnectionCandidate(pto) && state.fSyncStarted) {\n+    if (!state.m_chain_sync.m_protect && pto.IsOutboundOrBlockRelayConn() && state.fSyncStarted) {\n         // This is an outbound peer subject to disconnection if they don't\n         // announce a block with as much work as the current tip within\n         // CHAIN_SYNC_TIMEOUT + HEADERS_RESPONSE_TIME seconds (note: if\n@@ -3916,7 +3911,7 @@ void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n             AssertLockHeld(cs_main);\n \n             // Ignore non-outbound peers, or nodes marked for disconnect already\n-            if (!IsOutboundDisconnectionCandidate(*pnode) || pnode->fDisconnect) return;\n+            if (!pnode->IsOutboundOrBlockRelayConn() || pnode->fDisconnect) return;\n             CNodeState *state = State(pnode->GetId());\n             if (state == nullptr) return; // shouldn't be possible, but just in case\n             // Don't evict our protected peers"
      }
    ]
  },
  {
    "sha": "01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWUyODMwNjhiOWU2MjE0ZjJkNzdhMmY3NzJhNDI0NGViZmUyMjc0",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-07-30T01:43:28Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-08T00:18:17Z"
      },
      "message": "[net] Remove unnecessary default args on CNode constructor",
      "tree": {
        "sha": "0181b0ba189aa52ba3f28bcfbe3b47eb888f65a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0181b0ba189aa52ba3f28bcfbe3b47eb888f65a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01e283068b9e6214f2d77a2f772a4244ebfe2274",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01e283068b9e6214f2d77a2f772a4244ebfe2274",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01e283068b9e6214f2d77a2f772a4244ebfe2274/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc5d65b3ca41eebb1738fdda4451d1466e77772e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc5d65b3ca41eebb1738fdda4451d1466e77772e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc5d65b3ca41eebb1738fdda4451d1466e77772e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "af14ba7f51e6c9304de0020ccd58b42b29417f5c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01e283068b9e6214f2d77a2f772a4244ebfe2274/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01e283068b9e6214f2d77a2f772a4244ebfe2274/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=01e283068b9e6214f2d77a2f772a4244ebfe2274",
        "patch": "@@ -917,7 +917,7 @@ class CNode\n \n     std::set<uint256> orphan_work_set;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", ConnectionType conn_type_in = ConnectionType::OUTBOUND);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn, ConnectionType conn_type_in);\n     ~CNode();\n     CNode(const CNode&) = delete;\n     CNode& operator=(const CNode&) = delete;"
      }
    ]
  }
]