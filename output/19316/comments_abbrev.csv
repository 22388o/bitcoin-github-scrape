DrahtBot,2020-06-17 23:07:37,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19607 ([p2p] Add Peer struct for per-peer data in net processing by jnewbery)\n* #19064 (refactor: Cleanup thread ctor ca",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-645671781,645671781,
naumenkogs,2020-06-18 07:18:46,"Concept ACK.\n\nIs `enum ConnectionType` the right approach? It worries me that these things are not mutually-exclusive. Like, ADDRFETCH is also OUTBOUND.\nIt's true that it's non-ambiguous right now, but maybe we want to make them a bitmask in advance for the sake of explicitness, since we are already refactoring it? ",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-645829587,645829587,
jnewbery,2020-06-18 19:56:11,"Concept ACK.\n\n> Is enum ConnectionType the right approach? It worries me that these things are not mutually-exclusive. Like, ADDRFETCH is also OUTBOUND.\n\nI think enum is the right approach. OUTBOUND here means a connection that is created automatically by the OpenConnections thread. Yes, there are other kinds of connection that the node originates, but for clarity, I don't think those shou",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646274698,646274698,
amitiuttarwar,2020-06-18 21:03:27,"@naumenkogs its a good question to ask, but I think enforcing mutual exclusivity makes more sense and what allows for a lot of the simplicity. @jnewbery explained the main reasons, I want to add some additional points\n- everything but `INBOUND` originates from the node, but `OUTBOUND` refers to a specific type, which is the most common, full-relay, outbound connection. so I do think its exclusiv",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479,646304479,
practicalswift,2020-06-22 09:25:11,"@amitiuttarwar Thanks for the ping! I'd suggest using `PickValueInArray` like in these examples:\n\n```\n$ git grep -E 'PickValueInArray.*\(\{.+' ""src/test/fuzz/**.cpp""\nsrc/test/fuzz/bloom_filter.cpp:        static_cast<unsigned char>(fuzzed_data_provider.PickValueInArray({BLOOM_UPDATE_NONE, BLOOM_UPDATE_ALL, BLOOM_UPDATE_P2PUBKEY_ONLY, BLOOM_UPDATE_MASK}))};\nsrc/test/fuzz/fees.cpp:    cons",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-647397659,647397659,
amitiuttarwar,2020-06-24 20:30:26,"fixed fuzz tests, rebased & incorporated review comments\n\n@jnewbery thank you for review üôåüèΩ   I took all your suggestions. \n\n@practicalswift thanks for the tip. Tests are now passing. Is there a time the `ConsumeEnum()` template would make more sense? \n\n@ariard continuing convo from your [comment](https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443392439) here. \n> IMO I wou",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649054328,649054328,
jnewbery,2020-06-25 15:07:38,"ACK the final state of this, but the intermediate commits break the fuzz build because the fuzz changes only appear in the final commit. Ideally those changes would be in the same commits as the changes to the `CNode` ctors so all intermediate commits build.",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649608895,649608895,
vasild,2020-06-25 19:17:18,"```cpp\nenum class ConnectionType {\n    INBOUND, /**< peer initiated connections */\n    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n    FEELER, /**< short lived connections used to test address validity */\n    BLOCK_R",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649768547,649768547,
jnewbery,2020-06-25 19:33:58,"> This is somewhat confusing because it mixes unrelated things in one enum - connection initiator (us/outbound, them/inbound) with connection capabilities. Something like having enum Status { valid, invalid, blue }.\n\nPlease see the above discussion about this, particularly https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479. Another way to explain this is that these different ",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649776062,649776062,
sipa,2020-07-07 18:56:01,"Big concept ACK.\n\nI'm a bit uncomfortable with the `== ConnectionType::X` tests, and to a lesser extent with switch/case statements spread out over the code. Things are relatively simple because all ""special"" types are outbound, but it's not too hard to imagine that another class of inbound connections is added at some point, which would need reconsideration of all `== ConnectionType::INBOUND`",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-655057621,655057621,
vasild,2020-07-09 14:07:48,"> What do you think about having a few simple functions IsOutbound(), IsManual(), IsBlocksOnly(), ... that take a ConnectionType\n\n+1 :bulb: \n\nOr even have it all together in a class like:\n\n```cpp\nclass ConnectionType\n{\npublic:\n    ConnectionType(bool flag1, bool flag2, ...); // assert or throw if the flags contradict\n\n    bool IsInbound();\n    bool IsManual();\n    bool ",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-656149267,656149267,
dongcarl,2020-07-16 17:49:06,"utACK 43cec7b2a1a932f7784b037601a4fa3895e082b7\n\nVery nice simplification, reasonably easy to see its correctness too!\n\n-----\n\nFrom sipa:\n> What do you think about having a few simple functions `IsOutbound()`, `IsManual()`, `IsBlocksOnly()`, ... that take a `ConnectionType`, and which are the only places where any comparisons or switch/case statements on `ConnectionTypes` are peformed",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-659570131,659570131,
amitiuttarwar,2020-07-23 00:07:14,"hi everyone, thanks so much for these thoughtful reviews! üôåüèΩ  \n\n### Current state of PR: \n\nI've been considering the different options & tinkering. here's what I've got: I've incorporated miscellaneous review comments and updated the design to make `m_conn_type` private & expose an interface of accessor functions. I'm currently proposing the final state of this PR. Once the changes look go",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-662758053,662758053,
amitiuttarwar,2020-07-23 21:17:48,"updated comment & switch statement handling for non-enum values\n\nall review comments should be addressed",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-663237340,663237340,
ariard,2020-07-26 15:27:32,"Why we do we have different types of connections ? AFAICT we enforce different p2p policies in\nfunction of them, i.e don't evict outbound ones (`AttemptToEvictConnection`) when slots are full\nor enforce automatic, outbound connections offer desirable services (at version reception). These\ntypes are either automatically selected at connection opening, negotiated through p2p messages\n(i.e bl",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-664002085,664002085,
dongcarl,2020-07-27 17:54:11,"@amitiuttarwar The changes in 6a1259c574c96c7059e3b6a61b79d56d59c48508 are exactly what I meant :-)\nLooks like perhaps we can remove `m_addr_fetch` as a followup.",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-664546383,664546383,
amitiuttarwar,2020-07-30 03:58:09,"thanks for the feedback @vasild, @ariard, @dongcarl !\n\nI've restructured the commits to incorporate having `m_conn_type` as a private member, and removed all the `CNode` flags (including `fInbound` and `m_addr_fetch`). There are a lot of commits, but I tried hard to make it coherent & each commit super simple. Hopefully it should be fairly straightforward to review in its current state. \n\n",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-666084959,666084959,
laanwj,2020-08-10 16:38:57,"Code review ACK 01e283068b9e6214f2d77a2f772a4244ebfe2274, the commits are pretty straightforward to follow, and I think this is a move in the right direction overall\nLet's wait for @sdaftuar to do an additional pass at looking at the testing coverage before merge.",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-671462223,671462223,
jnewbery,2020-08-11 13:16:48,utACK 01e283068b9e6214f2d77a2f772a4244ebfe2274,https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-671940858,671940858,
vasild,2020-08-11 13:33:24,"[Filtered code coverage report](https://people.freebsd.org/~vd/pr19316_01e283068_coverage/) (files not modified by this PR are omitted and not modified lines in files that are otherwise modified are dimmed).\n\n[List of modified and not covered lines](https://people.freebsd.org/~vd/pr19316_01e283068_coverage/modified_and_not_covered.html).",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-671949563,671949563,
amitiuttarwar,2020-08-11 18:12:39,"thanks for all the reviews! since tip currently has 4 ACKs, I'm hoping these changes are RFM.\n\nI'm currently incorporating review suggestions on [this branch](https://github.com/amitiuttarwar/bitcoin/commits/conn-refactor-temp). I'm planning to open a follow-up PR addressing some of these further improvements. \n\nother possible follow-ups from review comments:\n* rethink `fGetAddr` https:/",https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-672152434,672152434,
jb55,2020-08-11 18:45:57,wow this code was messy before... ACK 01e283068b9e6214f2d77a2f772a4244ebfe2274,https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-672186238,672186238,
sipa,2020-08-14 23:50:10,Posthumous ACK 01e283068b9e6214f2d77a2f772a4244ebfe2274,https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-674314053,674314053,
jnewbery,2020-06-22 14:13:58,s/addnode/manual,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443588532,443588532,src/net.cpp
jnewbery,2020-06-22 14:18:54,s/addnode/manual,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443592064,443592064,src/net.cpp
jnewbery,2020-06-22 14:23:54,Consider using doxygen-style comments for these enum entries,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443596172,443596172,src/net.h
jnewbery,2020-06-22 14:26:19,Maybe add that these connections are made automatically to addresses selected from AddrMan.,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443597967,443597967,src/net.h
jnewbery,2020-06-22 14:27:01,Add that these are automatic outbound peers made to addresses selected from AddrMan.,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443598564,443598564,src/net.h
amitiuttarwar,2020-06-24 20:02:09,fixed,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139106,445139106,src/net.cpp
amitiuttarwar,2020-06-24 20:02:14,fixed ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139147,445139147,src/net.cpp
amitiuttarwar,2020-06-24 20:02:45,done ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139410,445139410,src/net.h
amitiuttarwar,2020-06-24 20:03:41,added ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139916,445139916,src/net.h
amitiuttarwar,2020-06-24 20:03:51,added ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139995,445139995,src/net.h
vasild,2020-06-26 12:59:34,"nit: if these member variables are going to be renamed, why not rename them in a way that abides the [naming convention](https://github.com/bitcoin/bitcoin/blame/808ef36b89ea9ce72116bbd7ee479b984367dc60/doc/developer-notes.md#L82)?",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446168334,446168334,src/net.h
vasild,2020-06-26 13:01:08,"Can `fAddrFetch` be removed and `m_conn_type == ConnectionType::ADDR_FETCH` used instead?\n\nnit: [naming convention](https://github.com/bitcoin/bitcoin/blame/808ef36b89ea9ce72116bbd7ee479b984367dc60/doc/developer-notes.md#L82) on `fAddrFetch`",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446169181,446169181,src/net.h
vasild,2020-06-26 14:27:06,Can `fInbound` be removed and `m_conn_type == ConnectionType::INBOUND` used instead?,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446217691,446217691,src/net.h
vasild,2020-06-26 15:13:16,"If done with a `switch`:\n\n```suggestion\n    switch (node.m_conn_type) {\n    case ConnectionType::INBOUND: \n    case ConnectionType::MANUAL:\n    case ConnectionType::FEELER:\n    case ConnectionType::ADDR_FETCH:\n        return false;\n    case ConnectionType::OUTBOUND:\n    case ConnectionType::BLOCK_RELAY:\n        return true;\n    }   \n```\nand a new entry is added to the e",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446245139,446245139,src/net_processing.cpp
vasild,2020-06-26 19:12:21,"If this is really unreachable then, would it be more suitable to put an assert here? Or, if in doubt - print something to the log and don't open a connection. It looks strange to silently open a connection when we are here because `nOutboundFullRelay >= m_max_outbound_full_relay`.",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446363611,446363611,src/net.cpp
vasild,2020-06-26 19:34:05,"A `switch` without `default:` would produce a compiler warning when new enum element is added and this code is forgotten:\n```suggestion\n                            switch (pnode->m_conn_type) {\n                            case ConnectionType::INBOUND:\n                            case ConnectionType::MANUAL:\n                            case ConnectionType::FEELER:\n                      ",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446372977,446372977,src/net.cpp
vasild,2020-06-26 19:38:23,"As above, a `switch` without `default:` will enforce this to be reviewed when new enum element is added. If the pattern `type == OUTBOUND || type == BLOCK_RELAY` repeats too often then the `switch` be put in a new method `bool CNode::IsFooBar()` and that method used here.",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446374677,446374677,src/net.cpp
vasild,2020-06-26 19:43:20,"`CNode::m_conn_type` is initialized here in its declaration and also in the only constructor of `CNode` from an argument:\n\nhttps://github.com/bitcoin/bitcoin/blob/43cec7b2a1a932f7784b037601a4fa3895e082b7/src/net.h#L866\n\nhttps://github.com/bitcoin/bitcoin/blob/43cec7b2a1a932f7784b037601a4fa3895e082b7/src/net.cpp#L2754\n\nSo, maybe remove the initialization from here?\n\n```suggestion\n",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446376641,446376641,src/net.h
vasild,2020-06-26 19:56:12,"All the callers of this constructor specify all arguments, so the default values of the last 2 arguments can be removed:\n```suggestion\n    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn, ConnectionType conn_type_in)",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446381822,446381822,src/net.h
vasild,2020-06-26 20:01:46,Consider using a `switch` without `default:` to assign to a boolean variable the expression `type == FOO || type == BAR || type == BAZ` to enforce the code to be reassessed when new enum element is added.,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446384137,446384137,src/net_processing.cpp
amitiuttarwar,2020-06-30 22:25:23,"totally agree the current state is weird. I dug more into this case & turns out.. I think the comment is wrong & the code is right. So I will update the comment. \n\nhere's my understanding-\n\n[this previous conditional](https://github.com/bitcoin/bitcoin/blob/master/src/net.cpp#L1868) earlier in the function means if full-relay & block-relay are both at capacity, one of the following happens",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448013426,448013426,src/net.cpp
jonatack,2020-07-01 01:14:36,"I wonder if all of these except `INBOUND` should be prefixed with `OUTBOUND_` to indicate that they are different types of outbound connections, and `OUTBOUND` become `OUTBOUND_FULL_RELAY`.",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448062841,448062841,src/net.h
jonatack,2020-07-01 01:39:42,"> I wonder if all of these except `INBOUND` should be prefixed with `OUTBOUND_` to indicate that they are different types of outbound connections, and `OUTBOUND` become `OUTBOUND_FULL_RELAY`.\n\nSee also https://github.com/bitcoin/bitcoin/pull/19405#issuecomment-651273931",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448068899,448068899,src/net.h
vasild,2020-07-02 12:37:11,"Indeed! And I would take this one step further: to make the naming consistent and obvious we can distinguish 3 properties of a connection:\n1. inbound or outbound\n2. automatic or manual\n3. by capabilities: full relay, feeler, block relay, solicit addresses\n\nand then name the constants like prop1_prop2_prop3. Something like:\n\n```\nINBOUND_AUTO_FULL\nOUTBOUND_AUTO_FULL\nOUTBOUND_MANU",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448969456,448969456,src/net.h
vasild,2020-07-02 15:30:13,"Ok, I confirm what you write above and I verified that the new code behaves in an identical way with the old one, so this PR is good (except the `//this case should be unreachable` comment).\n\nBut the code (old and new) is confusing - I imagine somebody may attempt to ""fix"" this code which opens a connection even when both ""full"" and ""block relay"" capacities are exhausted.\n\nWhat about check",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449087317,449087317,src/net.cpp
ariard,2020-07-03 02:41:57,`OneShot` was a terrible name for sure but at least the temporary or boostrap-side of this type of connection was implied by old name. How about `AddrSeeding` to underscore this connection is only made at the starting phase ?,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449348963,449348963,src/net.cpp
ariard,2020-07-03 02:47:01,Have you tried to introduce a ADDR_RELAY_ONLY or change the equality of `IsAddrRelayPeer()` to `conn_type_in != ConnectionType::BLOCK_RELAY` ?,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449349935,449349935,src/net.cpp
ariard,2020-07-03 02:57:47,"Side-note, I think it would have be better to fix bug before introducing connection type for review clarity. Reviewers now have to review a fix relying on new code, less understood IMHO",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449352154,449352154,src/net.cpp
ariard,2020-07-03 03:02:15,"It's great to see documentation around types. I think you should go further and describe exactly the set of assumptions we are doing for each type (like outbound more trusted than inbound, outbound favored for relay, block_relay_only to avoid leaking the full of our `block`-topology ...) and design goals of more obscure ones (feeler to sanitize addr db, addr fetch to boostrap our view of the netwo",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449353068,449353068,src/net.h
sipa,2020-07-07 19:02:40,"I see how that would add some clarity, but it's also a bigger pain to maintain (if any other dimension of classification is added, all existing constants may need to be renamed).\n\nPerhaps having property test functions (`IsFull()`, `IsOutbound()`, `IsFeeler()`, ...) on `ConnectionType` gets you some of the advantages of more elaborate type names, without the maintenance burden?",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r451079932,451079932,src/net.h
dongcarl,2020-07-16 17:41:05,"Without restructuring `ThreadOpenConnections` completely, perhaps we can just do a simple `assert(false)` here just so that if the previous conditional changes, we'll notice in test failures?",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r455959704,455959704,src/net.cpp
amitiuttarwar,2020-07-16 21:43:42,"good point. I was focused on writing the scripted diff & forgot about new conventions. \n\ndo these renames seem correct? \nCNode: `fAddrFetch` -> `m_addr_fetch`\nCConnman: `vAddrFetchs` -> `m_addr_fetchs`\nCConnman: `cs_vAddrFetchs` -> `cs_addr_fetch`\n\naccording to the guidelines, `cs_vAddrFetchs` should be renamed to `m_cs_addr_fetch`, but `cs_addr_fetch` seems more consistent with our ",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456095241,456095241,src/net.h
amitiuttarwar,2020-07-16 21:49:08,"I explored the option but there were enough call sites that I thought it would be unnecessarily verbose for no additional value. Since `fAddrFetch` is set via this comparison [here](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R2755), its mostly a simpler way to reference & doesn't introduce room for divergence I believe. Although one thing I'll do to st",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097539,456097539,src/net.h
amitiuttarwar,2020-07-16 21:49:51,"same answer as https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097539, but `fInbound` is already a const. ",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097970,456097970,src/net.h
jnewbery,2020-07-17 12:43:51,"`m_addr_fetch` and `m_addr_fetches` seem fine. For the mutex, I'd suggest `m_addr_fetches_mutex`. The only reason we have the cs name for mutexes is that in v0.1, Satoshi used Windows CRITICAL_SECTIONs for locking.",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456417946,456417946,src/net.h
vasild,2020-07-17 13:10:06,"I see, maybe also consider a method like\n```cpp\nbool IsAddrFetch() { return m_conn_type == ConnectionType::ADDR_FETCH; }\n```",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456431423,456431423,src/net.h
amitiuttarwar,2020-07-23 00:08:27,thanks! updated ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459151234,459151234,src/net.h
amitiuttarwar,2020-07-23 00:12:08,is there a reason you prefer the function over member var? I haven't incorporated yet but am open to it. just trying to understand the reasoning better ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459152220,459152220,src/net.h
amitiuttarwar,2020-07-23 00:30:18,"I looked into starting with the conditional of `GetTryNewOutboundPeer()`, but I think that subtly changes the logic of the function. on current master, block-relay-only takes precedence over GetTryNewOutboundPeer, so starting with that check would change the behavior slightly. I don't feel comfortable enough with all scenarios to evaluate if that change is fine, so I made it explicit and added an ",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459156946,459156946,src/net.cpp
amitiuttarwar,2020-07-23 00:50:05,"ah yeah. totally agree with the nice compiler guarantee of switch statements. I've extracted `IsOutboundOrBlockRelayConn` into its own function, but looks like I missed incorporating the switch statement. I've updated locally and will push with next round of updates. \n\none question- in the other property-test-with-switch-statement functions [example](https://github.com/bitcoin/bitcoin/pull/193",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459161841,459161841,src/net.cpp
amitiuttarwar,2020-07-23 00:52:34,resolving this comment in favor of https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446372977 which has also been extracted to `IsOutboundOrBlockRelayConn`,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162446,459162446,src/net.cpp
amitiuttarwar,2020-07-23 00:52:58,resolving this comment in favor of #19316 (comment) which has also been extracted to `IsOutboundOrBlockRelayConn`,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162536,459162536,src/net_processing.cpp
amitiuttarwar,2020-07-23 00:54:41,"üëçüèΩ  initialization removed (and some other stuff like making it private, const) ",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162920,459162920,src/net.h
amitiuttarwar,2020-07-23 00:55:03,done,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459163048,459163048,src/net.h
amitiuttarwar,2020-07-23 00:56:32,extracted into `ExpectServicesFromConn` & handled as switch statement ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459163406,459163406,src/net_processing.cpp
amitiuttarwar,2020-07-23 01:07:08,"introduced property test functions\n& these behaviors should be captured in the code comments of each type ",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459165938,459165938,src/net.h
amitiuttarwar,2020-07-23 01:13:24,"hmm, I feel like this aspect could change over time- eg. we decide to use these conns to seed more addresses at other times. although I will improve the comment on the enum to express the current usage.",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459167580,459167580,src/net.cpp
amitiuttarwar,2020-07-23 01:16:13,üëç  noted ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459168253,459168253,src/net.cpp
amitiuttarwar,2020-07-23 01:22:10,"what's the advantage? \n\nits true that currently `m_addr_known` is set for everything block-relay-only connections, but if we hard code `IsAddrRelayPeer()` to be a block-relay-only connection, we'd have two entry points that could potentially get out of sync unless we remember to check & update, right?  ",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459169620,459169620,src/net.cpp
amitiuttarwar,2020-07-23 01:23:29,updated ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459169923,459169923,src/net.cpp
vasild,2020-07-23 11:38:58,"* A bunch of methods would define the interface better. Otherwise the interface is ""I expose `m_conn_type` to you and you do whatever you want with it (including changing it). OTOH if methods are used `m_conn_type` can and should be made private.\n* It is shorter at the caller site (and I believe more readable).\n* Can have methods like `IsOutbound()` which do not translate to a single enum valu",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459386632,459386632,src/net.h
vasild,2020-07-23 11:43:55,"Yes, it looks better to me (until the day when this assertion kicks in :-D)",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459388957,459388957,src/net.cpp
vasild,2020-07-23 12:01:48,"I think remove the `default:` (so that we get a warning when a new enum is added and this code not updated to handle it) and put the `assert(false)` after the `switch` (so that the compiler stops complaining about reaching end of non-void function).\n\nIf some compiler is not smart enough to see that `assert(false)` is not going to return, then use [abort()](https://en.cppreference.com/w/cpp/uti",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459397380,459397380,src/net.h
vasild,2020-07-23 12:02:50,"I was going to suggest that this can be replaced with something like `if (pnode->IsOutboundOrBlockRelay())` - in which case the caller looks short and clean and the `switch` or chain of `if`s and the `enum` are hidden into the body of that method.\n\nSee https://github.com/bitcoin/bitcoin/pull/19316/files#r459397380",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459397956,459397956,src/net.cpp
amitiuttarwar,2020-07-23 20:14:39,"ah, I think my question was unclear. let me try again- \n\nin the latest push, `m_conn_type` is indeed a [private member var](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R2746) & I've introduced [several accessor functions](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-1a8b9d1ad0a6fda5e751286c73102fc2R794) for callers.\n\nMy question here",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459701830,459701830,src/net.h
amitiuttarwar,2020-07-23 20:26:08,"> this can be replaced with something like if (pnode->IsOutboundOrBlockRelay())\n\nyup, already done [link](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R1651) :) ",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459707834,459707834,src/net.cpp
amitiuttarwar,2020-07-23 21:13:36,"updated. I think this will also appease the compiler, but will wait for travis build to confirm..",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459731470,459731470,src/net.h
amitiuttarwar,2020-07-23 21:14:37,"updated the comment to `short lived connections used to solicit addrs when starting the node without a populated AddrMan`, let me know if this feels clear \n",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459731858,459731858,src/net.cpp
vasild,2020-07-24 08:55:26,"I suggested to use a method `IsAddrFetch()` because you said `m_conn_type == ConnectionType::ADDR_FETCH` would be unnecessarily verbose at the callers' sites (it is, I agree).\n\nNow that accessor methods have been added I think there is no need to keep `fAddrFetch` and it can be replaced by `IsAddrFetch()`?",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459931246,459931246,src/net.h
ariard,2020-07-26 14:41:23,"I think it simplifies code understanding. To know how `IsAddrRelayPeer` is going to behave, I have first to read function declaration and then `CNode` constructor on how we initialize `m_addr_known` in function of connection type. Note, it's already how the current code behaves, so it was just a suggestion of improvement. \n\nI guess this discussion belong to the more general one of a connection",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r460535833,460535833,src/net.cpp
ariard,2020-07-26 15:34:06,"I agree this is clearly an improvement. When we fine-grain them more in the future, for each of them I think we could have comments like\n\n```\nThis connection implements the feeler-behavior, aiming to periodically sanitize our addr db.\nIt's automatically-initiated every FEELER_INTERVAL. It can't be user-triggered.\nOnce we verify an online peer is associated to the addr by receiving a VERS",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r460541326,460541326,src/net.h
amitiuttarwar,2020-07-30 03:39:49,removed `fAddrFetch` and introduced `IsAddrFetch()` in latest push üéà,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r462715552,462715552,src/net.h
amitiuttarwar,2020-07-30 03:40:25,removed `fInbound` & exposed via `IsInboundConn()`,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r462715733,462715733,src/net.h
amitiuttarwar,2020-07-30 03:47:19,"ya, agree this would be a good place for any additional docs- could add doxygen annotations to these functions. but going to leave for a follow-up (feel free to propose if you're interested :))",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r462717452,462717452,src/net.h
jnewbery,2020-08-03 15:28:27,"nit: should be ""an addrfetch"".",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464488283,464488283,src/chainparams.cpp
jnewbery,2020-08-03 15:30:18,nit: default initialize this to nullptr here and remove it from the initializer list.,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464489550,464489550,src/net.h
jnewbery,2020-08-03 15:36:08,nit: This comment doesn't seem to be part of the rest of the changes in this PR. (I also think `fGetAddr` should probably be removed since the way it currently gets set to false doesn't make much sense).,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464493063,464493063,src/net.h
jnewbery,2020-08-03 16:19:22,"I don't like this new assert. It seems safe for now because of the logic earlier in this function, but I don't think we should rely on that (or something else) not changing. Why not just maintain the old behaviour of this always creating `OUTBOUND` connections when they're not `FEELER` or `BLOCK_RELAY`",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464518554,464518554,src/net.cpp
jnewbery,2020-08-03 16:33:43,"I don't love this (or `ExpectServicesFromConn()` below) where logic that is only used in one calling function is placed inside the class. `IsUniqueNetBlockConn()` is very specific to `ThreadOpenConnections()` so it makes sense to me that the logic and comment should live in that function.\n\nI realise this sounds like a contradiction of https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464526492,464526492,src/net.h
amitiuttarwar,2020-08-04 17:23:22,"hm, I don't quite follow your logic. If a developer were to change the function's logic flow without properly attending to this switch statement, in one case we'd silently open (short lived) `OUTBOUND` connections & in the other case the developer would hit a compiler error. is this different than how you're thinking about the use cases? \n\nalso, see https://github.com/bitcoin/bitcoin/pull/1931",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r465209813,465209813,src/net.cpp
amitiuttarwar,2020-08-04 17:25:52,"heh, yeah, I was trying to sneak it in. but you're right, it doesn't fit in. I'll remove from this PR \n\nagree that `fGetAddr` is weird. +1 to a rethink. ",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r465211310,465211310,src/net.h
amitiuttarwar,2020-08-04 17:33:09,"I don't have a strong preference either way, but agree with you around `IsUniqueNetBlockConn` and `ExpectServicesFromConn` not being particularly helpful. Since both are implemented as switch statements, I think I'll revert to having them integrated into their calling functions. \n\nsome of the other `m_conn_type` wrappers are also only used in one location. eg. `IsFeelerConn` & `IsBlockOnlyConn",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r465215591,465215591,src/net.h
jnewbery,2020-08-06 12:24:12,"This isn't a switch statement, and there aren't any compile time checks. `assert(false)` is a runtime error.\n\nHere's what I'm worried about:\n\n- in line 1856 (https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R1856), both outbound and block-relay-only are full, and `GetTryNewOutboundPeer()` is true, so we don't set `fFeeler` to true.\n- meanwhile, on ",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r466373442,466373442,src/net.cpp
amitiuttarwar,2020-08-07 21:39:34,"ah, I missed that its updated by a separate thread. thanks for this explanation!   ",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467287437,467287437,src/net.cpp
amitiuttarwar,2020-08-08 00:33:38,fixed ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467337688,467337688,src/chainparams.cpp
amitiuttarwar,2020-08-08 00:35:11,done ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467337898,467337898,src/net.h
amitiuttarwar,2020-08-08 00:35:40,removed ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467337978,467337978,src/net.h
amitiuttarwar,2020-08-08 00:36:30,updated. nice catch! ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467338094,467338094,src/net.cpp
amitiuttarwar,2020-08-08 00:38:36,"I ended up inlining `IsUniqueNetBlockConn`, but left `ExpectServicesFromConn` because I couldn't figure out a clear way to inline while maintaining a switch statement.",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467338355,467338355,src/net.h
sdaftuar,2020-08-08 10:15:36,"I wonder if it might make sense to prefix the different outbound types with OUTBOUND_, so that it's clear to code readers in the future that these are all different types of outbound peers?  In the future, for instance, I'm hoping to propose a way to negotiate block-relay-only connections at connection startup time, and then we'd be able to have both OUTBOUND_BLOCK_RELAY and INBOUND_BLOCK_RELAY pe",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467441825,467441825,src/net.h
jonatack,2020-08-08 10:52:41,This was my feedback as well: https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448062841,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467453029,467453029,src/net.h
sdaftuar,2020-08-08 11:57:52,"Oops, sorry for the noise and missing the earlier discussion. This would be fine to do later as well once we get around to adding more inbound types.",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467458095,467458095,src/net.h
amitiuttarwar,2020-08-08 17:30:44,"> Oops, sorry for the noise and missing the earlier discussion. \n\nno worries. would rather you read the code :) \n\n>  I'm hoping to propose a way to negotiate block-relay-only connections at connection startup time, and then we'd be able to have both OUTBOUND_BLOCK_RELAY and INBOUND_BLOCK_RELAY peers.\n\noh interesting! curious to see how it develops.\n \nI've tended towards sticking wi",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467486598,467486598,src/net.h
laanwj,2020-08-10 15:03:56,"I like the idea of a connection type enum, but I'd like to rename `INBOUND` and `OUTBOUND` here as it's a bit of a odd man out (as commented earlier, it's not the exclusive thing identifying this type of connection). Maybe `FULL_RELAY_INBOUND` and `FULL_RELAY_OUTBOUND`?\n\nEdit: Oh, I see this has already been discussed a lot, sorry!",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467968290,467968290,src/net.h
sdaftuar,2020-08-10 15:30:03,Perhaps it would be helpful to mention that `-seednode` peers specified on the command line get converted to `ADDR_FETCH` peers?  ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r467986125,467986125,src/net.h
sdaftuar,2020-08-10 15:43:39,Would be great to expose this in the `getpeerinfo` RPC (not necessarily in this PR).,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468001604,468001604,src/net.h
sdaftuar,2020-08-10 16:09:48,"Would it make sense to update the log message here to output the actual ConnectionType of the peer?  The use of ""outbound"" in the log message could be confusing otherwise, given that our enum is OUTBOUND but this could be any of the outbound connection types.\n\nIt might similarly be good to update the LogPrintf a few lines down (where we print ""Ignoring getaddr from block-relay-only peer"").",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468018093,468018093,src/net_processing.cpp
sdaftuar,2020-08-10 16:21:33,I think we can get rid of all default arguments here now?,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468025462,468025462,src/net.h
sdaftuar,2020-08-10 16:26:16,"I think we can clean this up now to look like:\n```\nif (!pfrom.fDisconnect && pfrom.IsFullOutboundConn() && nodestate->pindexBestKnownBlock != nullptr) {\n```",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468028143,468028143,src/net_processing.cpp
sdaftuar,2020-08-10 16:29:12,"I wonder if we should rewrite this to be more explicit about which connection types we're interested in?  Here, we're mixing a new flat-type check with a bucket-of-bools-style check.\n\nPerhaps we should try to nuke `IsAddrRelayPeer()` (a function which checks for whether a data structure exists), or change its definition to only reference connection types?",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468029929,468029929,src/net_processing.cpp
amitiuttarwar,2020-08-10 16:44:44,"with `INBOUND` I do think this is the only known characteristic of the connection, but I'm happy to rename `OUTBOUND` to `FULL_RELAY_OUTBOUND`.",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468039145,468039145,src/net.h
laanwj,2020-08-10 17:15:19,Sounds good to me!,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468056355,468056355,src/net.h
jnewbery,2020-08-11 12:42:40,"~This should be a `continue`~\n\nOops, no this is fine.",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468549732,468549732,src/net.cpp
jnewbery,2020-08-11 12:43:36,"I'd prefer this comment if it said `GetTryNewOutboundPeer() was true above`, to avoid future confusion about thread race conditions.",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468550218,468550218,src/net.cpp
jnewbery,2020-08-11 12:45:53,nit: more common style these days is to use braced initialization (although it's not in the style guide).,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468551559,468551559,src/net.h
vasild,2020-08-11 16:43:55,What about adding `BOOST_CHECK(!pnode->IsFeelerConn());`?,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468719451,468719451,src/test/net_tests.cpp
vasild,2020-08-11 16:58:45,nit: space after `if`,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468728551,468728551,src/net_processing.cpp
vasild,2020-08-11 16:59:08,nit: space after `switch`,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468728771,468728771,src/net.cpp
vasild,2020-08-11 16:59:33,"nit: space after `switch`\n",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468729057,468729057,src/net.h
vasild,2020-08-11 16:59:49,"nit: space after `switch`\n",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468729211,468729211,src/net.h
amitiuttarwar,2020-08-11 18:23:44,"I still have to test to make sure this works properly, but first pass at an implementation here: https://github.com/amitiuttarwar/bitcoin/commit/9162d44d2509e38e2e83e1f4315232d34d1fd777. \n\n- since I'm touching it anyway, I removed the second LogPrintf because it looks like dead code and I think concerns should be sufficiently addressed with this PR. convo on original for reference: https://git",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468777670,468777670,src/net_processing.cpp
amitiuttarwar,2020-08-11 18:25:56,yup. done at https://github.com/amitiuttarwar/bitcoin/commit/f9f69ae341854f99821008677a84668367ed0d82,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468778874,468778874,src/net.h
amitiuttarwar,2020-08-11 18:51:20,"agreed this can be made more clear. I took a stab at a restructure that essentially replaces `IsAddrRelayPeer` with `RelayAddrsWithConn` that checks the connection type instead of presence of `m_addr_known.` https://github.com/amitiuttarwar/bitcoin/commit/6662f5dbe1e513ea2cec9adbcc730555832f85d0. I'm still deciding how I feel about it and am interested in any feedback.\n\npros: \n- checking for",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r468795127,468795127,src/net_processing.cpp
amitiuttarwar,2020-08-14 22:34:37,"I tried it out here: 9345f9c9d47a88987606d1421823914a4c48dbf9, but still have the same concern, which I noted here: https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-674298044. ",https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470892312,470892312,src/net.cpp
amitiuttarwar,2020-08-14 22:37:31,added more docs in follow up PR #19724 here: 899f3b7416317f8d9aacf915dfdc7fb0beb9f28b,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470893012,470893012,src/net.h
amitiuttarwar,2020-08-14 22:43:33,I've taken a stab at a further simplification on the follow-up PR #19724 here: 6bdc1e3a693081e1f12a1a0b2411ac129d2b2923,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470894364,470894364,src/net.cpp
amitiuttarwar,2020-08-14 22:54:18,renamed `OUTBOUND` to `OUTBOUND_FULL_RELAY` in PR #19724 here: 34135a51775dc72809097cfb90b8611eee00106e,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470896757,470896757,src/net.h
amitiuttarwar,2020-08-14 22:56:01,added this & additional documentation in PR #19724 here:  https://github.com/bitcoin/bitcoin/pull/19724/commits/899f3b7416317f8d9aacf915dfdc7fb0beb9f28b#diff-1a8b9d1ad0a6fda5e751286c73102fc2R878-R881,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470897130,470897130,src/net.h
amitiuttarwar,2020-08-14 22:57:03,incorporated into #19724 (eda5b1582dc8ae808dc957f69f5fa0ec8eb7ef0b),https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470897354,470897354,src/net.h
amitiuttarwar,2020-08-14 22:57:58,done in PR #19724 (68f9f9bddd1e5cb481934c1d725d7e7891b8f4fa),https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470897551,470897551,src/net_processing.cpp
amitiuttarwar,2020-08-14 23:02:06,incorporated in #19724 (https://github.com/bitcoin/bitcoin/pull/19724/commits/9345f9c9d47a88987606d1421823914a4c48dbf9). I've noted this outstanding concern and am seeking opinions: https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-674298044.,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470898449,470898449,src/net_processing.cpp
amitiuttarwar,2020-08-14 23:02:30,fixed in #19724 by simplifying the function ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470898534,470898534,src/net.cpp
amitiuttarwar,2020-08-14 23:04:21,added a few more tests for explicit checking on #19724 here: 2df9ad4edd8263227e481bb732e1552286bfe960,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470898918,470898918,src/test/net_tests.cpp
amitiuttarwar,2020-08-15 02:28:16,done in #19725 ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470926696,470926696,src/net.h
amitiuttarwar,2020-08-15 02:28:35,done in #19725 ,https://github.com/bitcoin/bitcoin/pull/19316#discussion_r470926713,470926713,src/net_processing.cpp
