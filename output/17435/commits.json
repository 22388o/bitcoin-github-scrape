[
  {
    "sha": "49997813a4db388b2810e5e27ef771e8aa6a1f03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTk5NzgxM2E0ZGIzODhiMjgxMGU1ZTI3ZWY3NzFlOGFhNmExZjAz",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2019-11-10T18:55:28Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2019-11-11T21:37:00Z"
      },
      "message": "test: check custom ancestor limit in mempool_packages.py\n\nTo test the custom ancestor limit on node1 (passed by the argument\n-limitancestorcount), we check for three conditions:\n    -> the # of txs in the node1 mempool is equal to the the limit\n    -> all txs in node1 mempool are a subset of txs in node0 mempool\n    -> the node1 mempool txs match the start of the constructed tx-chain",
      "tree": {
        "sha": "4d5c554ae4515ffd8a2dc28f94365f8685cf8908",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d5c554ae4515ffd8a2dc28f94365f8685cf8908"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49997813a4db388b2810e5e27ef771e8aa6a1f03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49997813a4db388b2810e5e27ef771e8aa6a1f03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49997813a4db388b2810e5e27ef771e8aa6a1f03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49997813a4db388b2810e5e27ef771e8aa6a1f03/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89e93135aedf984f7a98771f047e2beb6cdbdb8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89e93135aedf984f7a98771f047e2beb6cdbdb8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89e93135aedf984f7a98771f047e2beb6cdbdb8e"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7014105d88a11070007130ee0a074077ef88f79d",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49997813a4db388b2810e5e27ef771e8aa6a1f03/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49997813a4db388b2810e5e27ef771e8aa6a1f03/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=49997813a4db388b2810e5e27ef771e8aa6a1f03",
        "patch": "@@ -14,13 +14,19 @@\n     satoshi_round,\n )\n \n+# default limits\n MAX_ANCESTORS = 25\n MAX_DESCENDANTS = 25\n+# custom limits for node1\n+MAX_ANCESTORS_CUSTOM = 5\n \n class MempoolPackagesTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n+        self.extra_args = [\n+            [\"-maxorphantx=1000\"],\n+            [\"-maxorphantx=1000\", \"-limitancestorcount={}\".format(MAX_ANCESTORS_CUSTOM)],\n+        ]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -188,7 +194,14 @@ def run_test(self):\n             assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN + 2000)\n             assert_equal(mempool[x]['fees']['descendant'], descendant_fees+satoshi_round(0.00002))\n \n-        # TODO: check that node1's mempool is as expected\n+        # Check that node1's mempool is as expected (-> custom ancestor limit)\n+        mempool0 = self.nodes[0].getrawmempool(False)\n+        mempool1 = self.nodes[1].getrawmempool(False)\n+        assert_equal(len(mempool1), MAX_ANCESTORS_CUSTOM)\n+        assert set(mempool1).issubset(set(mempool0))\n+        for tx in chain[:MAX_ANCESTORS_CUSTOM]:\n+            assert tx in mempool1\n+        # TODO: more detailed check of node1's mempool (fees etc.)\n \n         # TODO: test ancestor size limits\n "
      }
    ]
  }
]