theuni,2014-06-12T05:25:53Z,"Since you pinged earlier, ACK on the buildsystem changes.\n\nAnd noted as a good example of a lib-refactor working case.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-45831377,45831377,
jgarzik,2014-06-12T05:33:44Z,"Interesting that pulltester pukes on ""replace_first"", but builds for me.  Will update, along with some more goodies.\n\nEverything submitted builds and tests locally, of course.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-45831729,45831729,
theuni,2014-06-12T05:56:24Z,"@jgarzik I'd guess that pull-tester's version of boost doesn't rope in that header as freely.\nsrc/test/script_tests.cpp, uses replace_first as well, and includes:\n\n`#include <boost/algorithm/string/replace.hpp>`\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-45832757,45832757,
jgarzik,2014-06-12T15:26:26Z,"Added JSON output (a la decoderawtransaction).  Notably, this uses a new ""UniValue"" (universal value) class to provide JSON containers and output, at a fraction of the cost of JSON-spirit.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-45906496,45906496,
sipa,2014-06-12T22:40:42Z,"Suggestion: separate commands from options:\n\n./rawtx --flag1 --flag2 [transaction] command1=arg command2=arg\n\nSo -regtest, -testnet, -? remain flags, but the rest are operations to be performed in order on the transaction data.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-45957117,45957117,
jgarzik,2014-06-13T02:40:49Z,"Rebased.  univalue JSON parser passes the ""vjson"" project's test suite.\n\n@sipa Seems reasonable.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-45970502,45970502,
jgarzik,2014-06-13T19:41:02Z,Updated the command line UI per @sipa suggestion.  That simplified the utility a bit.  Updated OP to reflect new --help output and usage.\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46051994,46051994,
jgarzik,2014-06-14T18:01:35Z,"Updated to improve guards on user inputs per @sipa, and to add transaction signing. Updated --help output in OP.\n\nrawtx should be functionally equivalent to the RPC raw transaction API, when bitcoind is compiled with --disable-wallet.\n\nThere is some amount of almost-duplicate code, that can be harmonized once the RPC server is switched from JSON-spirit to UniValue.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46095032,46095032,
jgarzik,2014-06-14T18:03:33Z,"PS. Considering renaming util to ""bitcoin-tx"" to match existing binary naming, and be a bit more friendly to the global /usr/bin namespace.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46095105,46095105,
theuni,2014-06-14T23:13:25Z,+1 on renaming\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46102098,46102098,
laanwj,2014-06-15T13:08:57Z,"As a tool this looks useful and can eventually take over the pure-utility subset of the RPC interface.\n\n+1 on renaming. Unless we still intend to rename the executables to bitcoin-core-... or such, but that makes the names long and unwieldy and everyone is used to the current bitcoin-*.\n\nBTW: I've cherry-picked the first commit (as 0cafb63), it seems unrelated to the rest of this pull.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46115355,46115355,
jgarzik,2014-06-15T18:27:49Z,Rebased.  Renamed util to bitcoin-tx.\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46123470,46123470,
sipa,2014-06-16T10:19:13Z,"Do you plan to add support for signing as well (where you pass in the utxo's being spent, and the private keys)?\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46162165,46162165,
jgarzik,2014-06-16T12:17:38Z,"@sipa Yes, that is already supported.  Added the ""sign"" command yesterday.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46171036,46171036,
jgarzik,2014-06-20T22:19:56Z,"This should be ready for merging, unless we want to add ""remove JSON-SPIRIT"" as a blocker.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46732730,46732730,
theuni,2014-06-21T02:47:19Z,@jgarzik I saw that you requested i nitpick the univalue class. Will look over it on Monday if I don't get a chance over the weekend.\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46742671,46742671,
laanwj,2014-06-21T07:55:33Z,"As it is an independent library, I think it would serve modularity (and in any case reduce the number of files in the `src` root) to put the univalue implementation into a subdirectory of src.\n""remove JSON-SPIRIT"" is not a blocker, I really prefer that in a separate pull request later on.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46747371,46747371,
jgarzik,2014-06-24T03:32:35Z,"Rebased for CMutableTransaction, and promoting code movement commits above others for better reviewing and merging.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46928644,46928644,
jgarzik,2014-06-25T15:37:32Z,"Updated for @theuni 's feedback.\n\nFor some odd reason, the recent feedback from @sipa cannot be found.  I recall the ""{"" style nits.  I think there was something else too?\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-47118531,47118531,
jgarzik,2014-06-26T01:15:05Z,Rebased for merge.  Added PR dependency #4415 \n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-47178133,47178133,
jgarzik,2014-06-29T15:06:37Z,"This has one remaining FIXME blocking wider whole-tree use of UniValue, but that is not a blocker for merging this PR.\n\nI _think_ all feedback from @theuni and @sipa has been addressed.  I cannot find the @laanwj feedback; @laanwj can you recall your comments?\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-47457265,47457265,
laanwj,2014-06-29T15:14:46Z,"@jgarzik I'd like univalue\* in separate directory inside src, as it is an independent library like crypto and the current json. it doesn't need any of the bitcoin objects.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-47457496,47457496,
sipa,2014-06-29T15:36:45Z,+1 on moving to a separate source directory.\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-47458130,47458130,
jgarzik,2014-07-16T19:01:21Z,Univalue moved into separate source directory univalue/\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-49211220,49211220,
jgarzik,2014-07-18T18:30:47Z,nits addressed.\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-49464397,49464397,
laanwj,2014-07-23T10:32:24Z,"ACK. I think it's time to merge this. It compiles for Linux, MacOSX and Windows and works in at least Linux and Windows (tested summarily).\n\nWe do need unit tests for univalue, as well as tests invoking the new `bitcoin-tx` utility, but this can be done in a later pull.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-49857436,49857436,
laanwj,2014-07-25T09:08:20Z,"@sipa, @theuni, can we have a last ACK here?\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50125527,50125527,
theuni,2014-07-25T14:40:36Z,"Build-side ACK after addressing that last note. The rest of my comments were just nits, so nothing to worry about.\n\nSide-note: Great job adding univalue as a dependency-less lib!\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50158617,50158617,
jgarzik,2014-07-26T16:24:01Z,Updated for @theuni comment.\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50238971,50238971,
jgarzik,2014-07-27T21:43:51Z,@sipa all concerns should be addressed/responded-to\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50286842,50286842,
sipa,2014-07-27T23:21:33Z,You're still returning a full copy in operator[] :)\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50289338,50289338,
jgarzik,2014-07-27T23:24:28Z,"""or responded to""  the operator[] returns a null UniValue which is used usefully in several places in the API.\n\nI agree RE full copy, but fixing requires rethinking the entire class's error handling strategy.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50289407,50289407,
sipa,2014-07-27T23:26:29Z,"Sorry, I missed that comment. I hate github's per-line commenting.\n\nSee my reply there.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50289447,50289447,
sipa,2014-07-27T23:49:18Z,"It seems you're ignoring DecodeHexTx's return value, and bitcoin-tx accepts incorrectly encoded transactions (and turns the, into... something).\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50290056,50290056,
sipa,2014-07-28T00:00:49Z,Mildly tested ACK (but please add at least some warning for invalidly encoded transactions).\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50290300,50290300,
jgarzik,2014-07-28T04:24:26Z,All feedback addressed.\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50299179,50299179,
sipa,2014-07-28T13:56:22Z,ACK.\n\nPS: the getArray and getObject methods are unused now. Care to remove them?\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50341052,50341052,
jgarzik,2014-07-28T14:22:05Z,"@sipa I'll promise not to forget your request to delete them.  :)  They are used in the off-github ""convert tree to univalue"" branch.  I need to update that to make them go away.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50344513,50344513,
sipa,2014-07-28T21:38:50Z,"There's --enable-daemon, --enable-cli, --enable-gui and --enable-tests. No --enable-txtool?\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50405723,50405723,
jgarzik,2014-07-28T21:57:54Z,"@sipa A fair question.  @laanwj or @theuni asked same on IRC.  Most distros build everything then pick out what they need.  Many projects do not bother with --enable-just-this-one-tool, or find that such configure script features have a user count approaching 1.\n\nIt is needless complexity.  I would prefer to (a) not add --enable-txtool unless a user really needs it, and (b) consider removing the",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50408076,50408076,
laanwj,2014-07-29T07:39:59Z,"BTW; I suppose it should be discouraged to pass private keys on the command line. However, the only alternative at the moment is reading them from a 'register' file. How to handle this securely, maybe an option to read an object from stdin?\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50444973,50444973,
laanwj,2014-07-29T07:44:49Z,"Eh, at least keep the option to enable/disable building the GUI! I'm also quite sure that some people have come to rely on options for enabling/disabling the other executables so if it's not too much trouble I'd prefer to keep them.\n",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50445323,50445323,
sipa,2014-07-29T12:20:15Z,Squash some commits? :)\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50468572,50468572,
jgarzik,2014-07-29T15:18:00Z,Rebased and commits collapsed.\n,https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50490796,50490796,
BitcoinPullTester,2014-07-29T15:34:49Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4332_cbe39a38526a6c17619d02cc697b80ebfd57203b/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50493399,50493399,
sipa,2014-06-13T20:49:26Z,"There is no such thing as a transaction version 2, afaik. Also, use CTransaction::CURRENT_VERSION instead of a hardcoded maximum?\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771025,13771025,src/rawtx.cpp
jgarzik,2014-06-13T20:51:28Z,"The general idea was CURRENT_VERSION+1, which I probably should have made more explicit, with the thought of perhaps enabling some experimentation.  Maybe that's a dumb idea, and it should never exceed CURRENT_VERSION [without an easy and obvious hack by a programmer].\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771093,13771093,src/rawtx.cpp
sipa,2014-06-13T20:51:30Z,What makes block 250000 special? Why is it hardcoded?\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771095,13771095,src/rawtx.cpp
jgarzik,2014-06-13T20:53:47Z,"Absolutely nothing.  It's a sanity check that may want removing.  The thought was to prevent a pointlessly low locktime, but whatever, not important and probably wrong.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771166,13771166,src/rawtx.cpp
sipa,2014-06-13T20:53:48Z,"Suggestion: use (MAX_BLOCK_SIZE / CTxOut()::GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION)) as maximum instead of a hardcoded 100000?\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771168,13771168,src/rawtx.cpp
sipa,2014-06-13T20:59:13Z,"Transactions with nVersion > CURRENT_VERSION are non-standard anyway, so they wouldn't be relayed by even your own software.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771381,13771381,src/rawtx.cpp
theuni,2014-06-23T19:24:15Z,valStr.insert() should save an allocation/copy?\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14094601,14094601,src/bitcoin-tx.cpp
theuni,2014-06-23T19:30:38Z,s.find_first_of()\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095023,14095023,src/univalue.cpp
theuni,2014-06-23T19:32:28Z,"also, anon namespace would be nice.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095127,14095127,src/univalue.cpp
theuni,2014-06-23T19:33:53Z,const std::string& val_?\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095222,14095222,src/univalue.cpp
theuni,2014-06-23T19:35:02Z,const std::string& val_\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095298,14095298,src/univalue.cpp
theuni,2014-06-23T19:35:54Z,const UniValue&\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095339,14095339,src/univalue.cpp
theuni,2014-06-23T19:38:05Z,const std::string& key and const val. I won't spam you with any more of these.\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095434,14095434,src/univalue.cpp
theuni,2014-06-23T19:51:04Z,.empty()\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14096073,14096073,src/core_read.cpp
theuni,2014-06-23T19:52:21Z,opcodetype for clarity?\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14096128,14096128,src/core_read.cpp
theuni,2014-06-23T20:02:12Z,... && w.size() >= 2 && IsHex ...\nsanity needed?\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14096698,14096698,src/core_read.cpp
theuni,2014-06-23T20:28:46Z,why not just use a const iterator here?\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14098067,14098067,src/core_write.cpp
theuni,2014-06-23T20:29:52Z,"const iterator would make this a good bit easier to read too, imo. std::distance to get the old 'i' value.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14098121,14098121,src/core_write.cpp
sipa,2014-06-29T15:34:54Z,"I'd rather not see big ""convert the entire internal structure to some map/vector type"" methods. They don't add anything, as the caller (or whoever you're passing the map/vector to) still needs a dependency on UniValue, so they might as well use UniValue's own accessor methods (operator[], ... maybe UniValue needs iterators for the array case).\n\nThe only place where they seem actually used is as ",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14329984,14329984,src/univalue.h
laanwj,2014-07-23T08:02:02Z,"@theuni I don't agree std::distance is better, it's much less known, and has O(N) complexity for any container that's not random access which would be terrible in a loop. It's a pity that C++ doesn't have Python's enumerate() that returns both the object and index.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15275401,15275401,src/core_write.cpp
theuni,2014-07-23T16:18:26Z,"@laanwj Sure, it was just a quick suggestion to help with readability.\n\nFor the sake of discussion: this iterator is random access, so it'd be a constant complexity. Imo it's good practice to use iterators when looping through a container and touching each (non-primitive) element. The life-cycle and validity semantics are more clear to the reader, and the const_iterator would make its purpose ex",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15297907,15297907,src/core_write.cpp
theuni,2014-07-25T14:38:20Z,"The config includes shouldn't be needed, since univalue doesn't include bitcoin-config.h.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15403704,15403704,src/Makefile.am
theuni,2014-07-25T14:49:24Z,"Just tested to be 100% sure, removing it is fine.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15404329,15404329,src/Makefile.am
sipa,2014-07-27T15:26:10Z,What are 'registers' in this context?\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439831,15439831,src/bitcoin-tx.cpp
jgarzik,2014-07-27T15:28:31Z,"A (string key=JSON value) pair, whose name and JSON object are settable from the command line.\n\nIt is used to provide named parameters to some of the more complicated commands.\n\nYou can load register contents (the JSON value) from a file, or command line argv[] string.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439841,15439841,src/bitcoin-tx.cpp
sipa,2014-07-27T15:30:24Z,"VALUE:SCRIPT, I presume?\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439852,15439852,src/bitcoin-tx.cpp
sipa,2014-07-27T15:32:26Z,Never mind!\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439860,15439860,src/bitcoin-tx.cpp
sipa,2014-07-27T15:33:34Z,"Suggest other syntax: load=file:FILE. ""file:X"" is never valid JSON anyway.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439861,15439861,src/bitcoin-tx.cpp
sipa,2014-07-27T15:36:29Z,"If you pass that uint256 by reference, you can drop the #include ""uint256.h"" and turn it into a forward declaration.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439880,15439880,src/core_io.h
sipa,2014-07-27T15:39:48Z,Why do you need to copy the entire internal map? You can use prevTxs[previdx] directly as a map (with its operator[]).\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439903,15439903,src/bitcoin-tx.cpp
sipa,2014-07-27T15:41:41Z,I mean: NAME=file:FILE.\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439912,15439912,src/bitcoin-tx.cpp
sipa,2014-07-27T15:54:35Z,You can use keysObj directly here without copying to keys.\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439982,15439982,src/bitcoin-tx.cpp
sipa,2014-07-27T15:55:06Z,Same here: no need to copy.\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439984,15439984,src/bitcoin-tx.cpp
sipa,2014-07-27T15:57:52Z,"This method has a very ambiguous meaning, being totally different for objects/arrays and strings/numbers. Do you use it anywhere for anything but checking emptyness? Perhaps just a bool empty() const method instead?\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440001,15440001,src/univalue/univalue.h
sipa,2014-07-27T16:00:30Z,"It would be more efficient to return a const UniValue& reference (yes, I want to avoid copying entire structures).\n\nIf you want the returned reference to remain valid under array addition, you'll need a std::vector of UniValue\* rather than std::vector of UniValue to back the array implementation.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440014,15440014,src/univalue/univalue.h
sipa,2014-07-27T16:02:10Z,After IRC discussion: propose: set=NAME:VALUE and load=NAME:FILE.\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440027,15440027,src/bitcoin-tx.cpp
sipa,2014-07-27T16:21:43Z,Perhaps redeemscripts can go into a register too?\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440106,15440106,src/bitcoin-tx.cpp
jgarzik,2014-07-27T17:07:06Z,"Yes, it is used to examine string size and also to examine array | values array size for further iteration.\n\nAgree that ambiguity is an issue.  The scope could be narrowed to arrays+objects, and renamed to arraySize() or somesuch.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440291,15440291,src/univalue/univalue.h
sipa,2014-07-27T18:53:43Z,.size() and .count() perhaps?\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440883,15440883,src/univalue/univalue.h
jgarzik,2014-07-27T21:23:22Z,"A fair point, though I am deferring this until later.  ToTxUnix() is a line-by-line translation of TxToJSON() logic, and matching that becomes useful for later unification.\n\nIf you wanted to submit a PR fixing TxToJSON(), that would helpful.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15441765,15441765,src/core_write.cpp
jgarzik,2014-07-27T21:41:13Z,"Agree it is more efficient, though at the moment it is a convention to return a null object to indicate failure, rather than throwing an exception or something else.  That seems a useful convention as any cascading, second order failures are more likely to fail-safe.\n\nWould need to clean up that convention, to turn this thing into a reference.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15441877,15441877,src/univalue/univalue.h
sipa,2014-07-27T23:22:50Z,"No you don't need to. You can have one static const UniValue() object, and return a reference to that in case of invalid/nonexting argument.\n",https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15442571,15442571,src/univalue/univalue.h
sipa,2014-07-27T23:51:37Z,This comment doesn't really apply here :)\n,https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15442817,15442817,src/bitcoin-tx.cpp
