jonasschnelli,2016-09-02T06:39:20Z,Sounds impressive.\n\nHere are the important definitions (this PRs diff): https://github.com/bitcoin/bitcoin/pull/8650/files#diff-4a0cb5ad5e93d187a1b065a99bbae143R17\n\nDocumentation: http://www.boost.org/doc/libs/1_34_0/libs/test/doc/components/test_tools/reference/BOOST_CHECK_MESSAGE.html\n\nConcept ACK\n,https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-244295456,244295456,
laanwj,2016-09-02T08:05:24Z,"Concept ACK. After:\n\n``` bash\ngit diff HEAD~1 --name-only | xargs sed -i ""s/FAST_CHECK/BOOST_CHECK/g""\n```\n\nThere is a remaining diff in `test_bitcoin.h`:\n\n``` diff\n+#define BOOST_CHECK(x) if (!(x)) { BOOST_CHECK_MESSAGE(false, #x); }\n+#define BOOST_CHECK_EQUAL(x, y) if ((x)!=(y)) { BOOST_CHECK_MESSAGE(false, ""("" #x "") != ("" #y "")""); }\n+#define BOOST_CHECK_THROW(expr, ex) try { expr; BOO",https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-244310109,244310109,
laanwj,2016-09-02T08:54:28Z,"Q: What functionality do we lose here, apart from being able to log successful tests (which is arguably unnecessary)? \nFor example I vaguely remember that the BOOST_CHECK_EQUAL does an attempt to print the values, not just the stringified form of the input arguments.\n\nAt some point we likely want to get rid of boost::test completely. as we are trying to eventually remove the dependency on boost",https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-244320402,244320402,
JeremyRubin,2016-09-02T17:59:35Z,@laanwj I may be able to make it completely compatible minus the succeeding tests for each macro. You are correct that boost_check_equal does that; this is part of why I did not redefine the container equal one.\n\nWhat I'm unsure of is how that affects licensing given those would be a derivative work I believe -- perhaps I could break out my macros into a sub-library and keep it boost licensed?\n,https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-244445812,244445812,
MarcoFalke,2016-09-06T11:21:17Z,"Trivial rebase required. Also, I was wondering how we could forbid usage of the ""legacy"" `BOOST_CHECK_\* to prevent diverging code.\n",https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-244921507,244921507,
laanwj,2016-09-06T13:34:49Z,"> perhaps I could break out my macros into a sub-library and keep it boost licensed?\n\nRight, that makes sense: if you're using any boost code then it's a derivative work, if you're just using the names of the macros for compatibility it's not. Do note that the boost license is _more permissive_ than MIT/BSD (no attribution requirement), so including a boost-licensed source file is not a problem.",https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-244951487,244951487,
MarcoFalke,2016-09-06T13:41:36Z,"Huh? I didn't see any boost source code added, so the current pull should\nbe good license wise.\n\nFast check is just a wrapper around boost check, which should be fine as\nlong as you don't distribute fast check as a separate tool.\n",https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-244953436,244953436,
laanwj,2016-09-06T13:43:44Z,"> Huh? I didn't see any boost source code added, so the current pull should be good license wise.\n\nYes the current pull is, but (read back a few posts) he is talking about extending the functionality to something completely compatible.\n",https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-244954019,244954019,
MarcoFalke,2016-09-06T13:45:11Z,"@laanwj I don't see how we lose functionality.\n\n@ Jeremy Check your mail. It should be trivial to keep the log messages the\nsame as well\n\nOn Friday, September 2, 2016, Wladimir J. van der Laan <\nnotifications@github.com> wrote:\n\n> Q: What functionality do we lose here, apart from being able to log\n> successful tests (which is arguably unnecessary)?\n> For example I vaguely remember that t",https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-244954414,244954414,
laanwj,2016-09-06T13:46:40Z,> @laanwj I don't see how we lose functionality.\n\nThat was my question. One thing I noticed was that BOOST_EQUAL no longer prints the contents of what it compares but just stringified variable names (which is much less useful). But I was not sure either if there is more. \n,https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-244954797,244954797,
MarcoFalke,2016-09-06T14:01:33Z,"I see. Fixing this would just require some more code... And when it is 100%\ncompatible, just faster, it could make sense to submit upstream? (The\nbottleneck, as I understand, lies in boost after all)\n",https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-244959430,244959430,
JeremyRubin,2016-09-06T17:44:58Z,"@MarcoFalke @laanwj \n\nA few notes:\n1. BOOST_CHECK and friends always format the string. This is why part of why it is slow.\n2. We can't use Marco's compatibility fix that he emailed me because it is macro-unhygenic\n3. I could just rip the boost macros and replace them with a patched, lighter weight version.\n4. I could just entirely replace boost unit testing and we can not care about preserv",https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-245030722,245030722,
theuni,2016-09-06T17:56:28Z,"Concept ACK.\n\nAs far as lost functionality, note that we also lose the checkpoints this way, so if a segfault is introduced, it's possible that it's harder to tell where it's coming from. I suspect that's part of what makes the macros so expensive to begin with.\n\nI don't think those are a huge loss, they've never helped me much.\n",https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-245034415,245034415,
sipa,2016-09-06T17:57:48Z,Oh! I find those checkpoints very useful...\n,https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-245034836,245034836,
JeremyRubin,2016-09-06T20:38:44Z,"Ok, here's what I'm going to do. I've just opened up https://github.com/bitcoin/bitcoin/pull/8671 which does a very minimal change to prevector tests that should fix the underlying issue; while giving _more useful_ debugging output (the rand seeds needed to recreate this test case). I think there's no reason this can't merge almost immediately as a much needed stopgap to make the tests just run fa",https://github.com/bitcoin/bitcoin/pull/8650#issuecomment-245083136,245083136,
