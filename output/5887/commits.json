[
  {
    "sha": "e5967bc35e2a9e58d52cd2b878c7fa7097ced31e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTk2N2JjMzVlMmE5ZTU4ZDUyY2QyYjg3OGM3ZmE3MDk3Y2VkMzFl",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-03-13T07:14:50Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-03-13T07:14:50Z"
      },
      "message": "[Trivial] format sync.h",
      "tree": {
        "sha": "43928d421a0d0fc634a6d3e7dcb291232c1946b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43928d421a0d0fc634a6d3e7dcb291232c1946b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5967bc35e2a9e58d52cd2b878c7fa7097ced31e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5967bc35e2a9e58d52cd2b878c7fa7097ced31e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5967bc35e2a9e58d52cd2b878c7fa7097ced31e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5967bc35e2a9e58d52cd2b878c7fa7097ced31e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7077fe6dd4208bdbd46940f7923b7d89202c3287"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 9,
      "deletions": 14
    },
    "files": [
      {
        "sha": "78b9043477e1d38dc689122b63e54f05aae92c35",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5967bc35e2a9e58d52cd2b878c7fa7097ced31e/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5967bc35e2a9e58d52cd2b878c7fa7097ced31e/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=e5967bc35e2a9e58d52cd2b878c7fa7097ced31e",
        "patch": "@@ -21,9 +21,6 @@\n ////////////////////////////////////////////////\n \n /*\n- \n- \n- \n CCriticalSection mutex;\n     boost::recursive_mutex mutex;\n \n@@ -42,20 +39,18 @@ ENTER_CRITICAL_SECTION(mutex); // no RAII\n \n LEAVE_CRITICAL_SECTION(mutex); // no RAII\n     mutex.unlock();\n- \n- \n- \n  */\n \n-\n ///////////////////////////////\n //                           //\n // THE ACTUAL IMPLEMENTATION //\n //                           //\n ///////////////////////////////\n \n-// Template mixin that adds -Wthread-safety locking annotations to a\n-// subset of the mutex API.\n+/**\n+ * Template mixin that adds -Wthread-safety locking\n+ * annotations to a subset of the mutex API.\n+ */\n template <typename PARENT>\n class LOCKABLE AnnotatedMixin : public PARENT\n {\n@@ -76,8 +71,10 @@ class LOCKABLE AnnotatedMixin : public PARENT\n     }\n };\n \n-/** Wrapped boost mutex: supports recursive locking, but no waiting  */\n-// TODO: We should move away from using the recursive lock by default.\n+/**\n+ * Wrapped boost mutex: supports recursive locking, but no waiting\n+ * TODO: We should move away from using the recursive lock by default.\n+ */\n typedef AnnotatedMixin<boost::recursive_mutex> CCriticalSection;\n \n /** Wrapped boost mutex: supports waiting but not recursive locking */\n@@ -92,9 +89,7 @@ void LeaveCritical();\n std::string LocksHeld();\n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\n #else\n-void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false)\n-{\n-}\n+void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n void static inline LeaveCritical() {}\n void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n #endif"
      }
    ]
  }
]