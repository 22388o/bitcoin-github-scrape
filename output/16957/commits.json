[
  {
    "sha": "67d99900b0d770038c9c5708553143137b124a6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2Q5OTkwMGIwZDc3MDAzOGM5YzU3MDg1NTMxNDMxMzdiMTI0YTZj",
    "commit": {
      "author": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2019-09-24T18:54:58Z"
      },
      "committer": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2019-09-25T18:56:38Z"
      },
      "message": "make SaltedOutpointHasher noexcept\n\nIf the hash is not noexcept, unorderd_map has to assume that it can throw an exception. Thus when rehashing care needs to be taken. libstdc++ solves this by simply caching the hash value, which increases memory of each node by 8 bytes. Adding noexcept prevents this caching. In my experiments with -reindex-chainstate -stopatheight=594000, memory usage has decreased by 9.4% while runtime has increased by 1.6% due to additional hashing. Additionally, memusage::DynamicUsage() is now more accurate and does not underestimate.",
      "tree": {
        "sha": "4f08c47dbd31967b616d7dcc93d7e228aaad9a8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f08c47dbd31967b616d7dcc93d7e228aaad9a8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67d99900b0d770038c9c5708553143137b124a6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67d99900b0d770038c9c5708553143137b124a6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67d99900b0d770038c9c5708553143137b124a6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67d99900b0d770038c9c5708553143137b124a6c/comments",
    "author": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "742cd77f6f9017425e8f757e2d1297c712bc4140",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/742cd77f6f9017425e8f757e2d1297c712bc4140",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/742cd77f6f9017425e8f757e2d1297c712bc4140"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d8135e0d9a77e1eb8fe95bb250dbda6302d94746",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67d99900b0d770038c9c5708553143137b124a6c/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67d99900b0d770038c9c5708553143137b124a6c/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=67d99900b0d770038c9c5708553143137b124a6c",
        "patch": "@@ -95,8 +95,16 @@ class SaltedOutpointHasher\n      * This *must* return size_t. With Boost 1.46 on 32-bit systems the\n      * unordered_map will behave unpredictably if the custom hasher returns a\n      * uint64_t, resulting in failures when syncing the chain (#4634).\n+     *\n+     * Having the hash noexcept allows libstdc++'s unordered_map to recalculate\n+     * the hash during rehash, so it does not have to cache the value. This\n+     * reduces node's memory by sizeof(size_t). The required recalculation has\n+     * a slight performance penalty (around 1.6%), but this is compensated by\n+     * memory savings of about 9% which allow for a larger dbcache setting.\n+     *\n+     * @see https://gcc.gnu.org/onlinedocs/gcc-9.2.0/libstdc++/manual/manual/unordered_associative.html\n      */\n-    size_t operator()(const COutPoint& id) const {\n+    size_t operator()(const COutPoint& id) const noexcept {\n         return SipHashUint256Extra(k0, k1, id.hash, id.n);\n     }\n };"
      }
    ]
  }
]