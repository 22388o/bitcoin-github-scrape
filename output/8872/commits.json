[
  {
    "sha": "d768f151f63eb3bb505676bca07be24da151f6b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzY4ZjE1MWY2M2ViM2JiNTA1Njc2YmNhMDdiZTI0ZGExNTFmNmIy",
    "commit": {
      "author": {
        "name": "mrbandrews",
        "email": "bandrewsny@gmail.com",
        "date": "2016-10-26T14:53:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-07T22:38:22Z"
      },
      "message": "[qa] Make comptool push blocks instead of relying on inv-fetch",
      "tree": {
        "sha": "d3e90384e866fe1fa42a15ed0b50d06f04185fdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3e90384e866fe1fa42a15ed0b50d06f04185fdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d768f151f63eb3bb505676bca07be24da151f6b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d768f151f63eb3bb505676bca07be24da151f6b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d768f151f63eb3bb505676bca07be24da151f6b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d768f151f63eb3bb505676bca07be24da151f6b2/comments",
    "author": {
      "login": "mrbandrews",
      "id": 7504522,
      "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrbandrews",
      "html_url": "https://github.com/mrbandrews",
      "followers_url": "https://api.github.com/users/mrbandrews/followers",
      "following_url": "https://api.github.com/users/mrbandrews/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrbandrews/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
      "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
      "repos_url": "https://api.github.com/users/mrbandrews/repos",
      "events_url": "https://api.github.com/users/mrbandrews/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f554e03ebe5701c1b75ff03b3d6152095c0cad3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f554e03ebe5701c1b75ff03b3d6152095c0cad3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f554e03ebe5701c1b75ff03b3d6152095c0cad3"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 17,
      "deletions": 2
    },
    "files": [
      {
        "sha": "17679fc7e19967ee674fb9768991492e9cb4ba28",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d768f151f63eb3bb505676bca07be24da151f6b2/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d768f151f63eb3bb505676bca07be24da151f6b2/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=d768f151f63eb3bb505676bca07be24da151f6b2",
        "patch": "@@ -111,6 +111,11 @@ def send_getheaders(self):\n         m.locator = self.block_store.get_locator(self.bestblockhash)\n         self.conn.send_message(m)\n \n+    def send_header(self, header):\n+        m = msg_headers()\n+        m.headers.append(header)\n+        self.conn.send_message(m)\n+\n     # This assumes BIP31\n     def send_ping(self, nonce):\n         self.pingMap[nonce] = True\n@@ -345,15 +350,25 @@ def run(self):\n                     # Either send inv's to each node and sync, or add\n                     # to invqueue for later inv'ing.\n                     if (test_instance.sync_every_block):\n-                        [ c.cb.send_inv(block) for c in self.connections ]\n-                        self.sync_blocks(block.sha256, 1)\n+                        # if we expect success, send inv and sync every block\n+                        # if we expect failure, just push the block and see what happens.\n+                        if outcome == True:\n+                            [ c.cb.send_inv(block) for c in self.connections ]\n+                            self.sync_blocks(block.sha256, 1)\n+                        else:\n+                            [ c.send_message(msg_block(block)) for c in self.connections ]\n+                            [ c.cb.send_ping(self.ping_counter) for c in self.connections ]\n+                            self.wait_for_pings(self.ping_counter)\n+                            self.ping_counter += 1\n                         if (not self.check_results(tip, outcome)):\n                             raise AssertionError(\"Test failed at test %d\" % test_number)\n                     else:\n                         invqueue.append(CInv(2, block.sha256))\n                 elif isinstance(b_or_t, CBlockHeader):\n                     block_header = b_or_t\n                     self.block_store.add_header(block_header)\n+                    [ c.cb.send_header(block_header) for c in self.connections ]\n+\n                 else:  # Tx test runner\n                     assert(isinstance(b_or_t, CTransaction))\n                     tx = b_or_t"
      }
    ]
  },
  {
    "sha": "3451203b5c67c234d168a409d69ff9623573dae3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDUxMjAzYjVjNjdjMjM0ZDE2OGE0MDlkNjlmZjk2MjM1NzNkYWUz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-03T22:30:52Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-07T22:38:22Z"
      },
      "message": "[qa] Respond to getheaders and do not assume a getdata on inv",
      "tree": {
        "sha": "afb4b1995469db781d2e22e61b38a10912e46b24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afb4b1995469db781d2e22e61b38a10912e46b24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3451203b5c67c234d168a409d69ff9623573dae3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3451203b5c67c234d168a409d69ff9623573dae3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3451203b5c67c234d168a409d69ff9623573dae3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3451203b5c67c234d168a409d69ff9623573dae3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d768f151f63eb3bb505676bca07be24da151f6b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d768f151f63eb3bb505676bca07be24da151f6b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d768f151f63eb3bb505676bca07be24da151f6b2"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 24,
      "deletions": 8
    },
    "files": [
      {
        "sha": "722ec0f62e792653bee41d870e8154077d79916e",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3451203b5c67c234d168a409d69ff9623573dae3/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3451203b5c67c234d168a409d69ff9623573dae3/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=3451203b5c67c234d168a409d69ff9623573dae3",
        "patch": "@@ -27,6 +27,7 @@ def __init__(self):\n         self.last_cmpctblock = None\n         self.block_announced = False\n         self.last_getdata = None\n+        self.last_getheaders = None\n         self.last_getblocktxn = None\n         self.last_block = None\n         self.last_blocktxn = None\n@@ -64,6 +65,9 @@ def on_inv(self, conn, message):\n     def on_getdata(self, conn, message):\n         self.last_getdata = message\n \n+    def on_getheaders(self, conn, message):\n+        self.last_getheaders = message\n+\n     def on_getblocktxn(self, conn, message):\n         self.last_getblocktxn = message\n \n@@ -393,6 +397,9 @@ def test_compactblock_requests(self, node, test_node, version, segwit):\n \n             if announce == \"inv\":\n                 test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n+                success = wait_until(lambda: test_node.last_getheaders is not None, timeout=30)\n+                assert(success)\n+                test_node.send_header_for_blocks([block])\n             else:\n                 test_node.send_header_for_blocks([block])\n             success = wait_until(lambda: test_node.last_getdata is not None, timeout=30)"
      },
      {
        "sha": "6ecd84c3f08c2e7b19635897fd5235e1bf077d5a",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3451203b5c67c234d168a409d69ff9623573dae3/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3451203b5c67c234d168a409d69ff9623573dae3/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=3451203b5c67c234d168a409d69ff9623573dae3",
        "patch": "@@ -64,6 +64,9 @@ def on_getdata(self, conn, message):\n             self.getdataset.add(inv.hash)\n         self.last_getdata = message\n \n+    def on_getheaders(self, conn, message):\n+        self.last_getheaders = message\n+\n     def on_pong(self, conn, message):\n         self.last_pong = message\n \n@@ -97,6 +100,10 @@ def wait_for_getdata(self, timeout=60):\n         test_function = lambda: self.last_getdata != None\n         self.sync(test_function, timeout)\n \n+    def wait_for_getheaders(self, timeout=60):\n+        test_function = lambda: self.last_getheaders != None\n+        self.sync(test_function, timeout)\n+\n     def wait_for_inv(self, expected_inv, timeout=60):\n         test_function = lambda: self.last_inv != expected_inv\n         self.sync(test_function, timeout)\n@@ -111,12 +118,15 @@ def announce_tx_and_wait_for_getdata(self, tx, timeout=60):\n     def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n         with mininode_lock:\n             self.last_getdata = None\n+            self.last_getheaders = None\n+        msg = msg_headers()\n+        msg.headers = [ CBlockHeader(block) ]\n         if use_header:\n-            msg = msg_headers()\n-            msg.headers = [ CBlockHeader(block) ]\n             self.send_message(msg)\n         else:\n             self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n+            self.wait_for_getheaders()\n+            self.send_message(msg)\n         self.wait_for_getdata()\n         return\n "
      },
      {
        "sha": "37b98c576e8371a9711bf2423c9fbd2d95bde72b",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3451203b5c67c234d168a409d69ff9623573dae3/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3451203b5c67c234d168a409d69ff9623573dae3/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=3451203b5c67c234d168a409d69ff9623573dae3",
        "patch": "@@ -348,14 +348,13 @@ def run_test(self):\n                 if j == 0:\n                     # Announce via inv\n                     test_node.send_block_inv(tip)\n-                    test_node.wait_for_getdata([tip], timeout=5)\n+                    test_node.wait_for_getheaders(timeout=5)\n+                    # Should have received a getheaders now\n+                    test_node.send_header_for_blocks(blocks)\n                     # Test that duplicate inv's won't result in duplicate\n                     # getdata requests, or duplicate headers announcements\n-                    inv_node.send_block_inv(tip)\n-                    # Should have received a getheaders as well!\n-                    test_node.send_header_for_blocks(blocks)\n-                    test_node.wait_for_getdata([x.sha256 for x in blocks[0:-1]], timeout=5)\n-                    [ inv_node.send_block_inv(x.sha256) for x in blocks[0:-1] ]\n+                    [ inv_node.send_block_inv(x.sha256) for x in blocks ]\n+                    test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=5)\n                     inv_node.sync_with_ping()\n                 else:\n                     # Announce via headers"
      }
    ]
  },
  {
    "sha": "037159cebf1eae4445050cec029986514ed4e9e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzcxNTljZWJmMWVhZTQ0NDUwNTBjZWMwMjk5ODY1MTRlZDRlOWUy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-26T20:17:20Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-07T22:41:00Z"
      },
      "message": "Remove block-request logic from INV message processing",
      "tree": {
        "sha": "c60777cacfd5218acbed10dccdc1caa1c5c7a58e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c60777cacfd5218acbed10dccdc1caa1c5c7a58e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/037159cebf1eae4445050cec029986514ed4e9e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/037159cebf1eae4445050cec029986514ed4e9e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/037159cebf1eae4445050cec029986514ed4e9e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/037159cebf1eae4445050cec029986514ed4e9e2/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3451203b5c67c234d168a409d69ff9623573dae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3451203b5c67c234d168a409d69ff9623573dae3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3451203b5c67c234d168a409d69ff9623573dae3"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 5,
      "deletions": 21
    },
    "files": [
      {
        "sha": "cb6cb145a746b4ff9d2b105d7e0864d542a6f467",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 21,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/037159cebf1eae4445050cec029986514ed4e9e2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/037159cebf1eae4445050cec029986514ed4e9e2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=037159cebf1eae4445050cec029986514ed4e9e2",
        "patch": "@@ -5364,28 +5364,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n-                    // First request the headers preceding the announced block. In the normal fully-synced\n-                    // case where a new block is announced that succeeds the current tip (no reorganization),\n-                    // there are no such headers.\n-                    // Secondly, and only when we are close to being synced, we request the announced block directly,\n-                    // to avoid an extra round-trip. Note that we must *first* ask for the headers, so by the\n-                    // time the block arrives, the header chain leading up to it is already validated. Not\n-                    // doing this will result in the received block being rejected as an orphan in case it is\n-                    // not a direct successor.\n+                    // We used to request the full block here, but since headers-announcements are now the\n+                    // primary method of announcement on the network, and since, in the case that a node\n+                    // fell back to inv we probably have a reorg which we should get the headers for first,\n+                    // we now only provide a getheaders response here. When we receive the headers, we will\n+                    // then ask for the blocks we need.\n                     connman.PushMessage(pfrom, NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash);\n-                    CNodeState *nodestate = State(pfrom->GetId());\n-                    if (CanDirectFetch(chainparams.GetConsensus()) &&\n-                        nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER &&\n-                        (!IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n-                        inv.type |= nFetchFlags;\n-                        if (nodestate->fSupportsDesiredCmpctVersion)\n-                            vToFetch.push_back(CInv(MSG_CMPCT_BLOCK, inv.hash));\n-                        else\n-                            vToFetch.push_back(inv);\n-                        // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n-                        // later (within the same cs_main lock, though).\n-                        MarkBlockAsInFlight(pfrom->GetId(), inv.hash, chainparams.GetConsensus());\n-                    }\n                     LogPrint(\"net\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n             }"
      }
    ]
  }
]