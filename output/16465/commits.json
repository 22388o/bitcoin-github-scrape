[
  {
    "sha": "fac3dcf7d052586548f2100a0d576618a85741f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWMzZGNmN2QwNTI1ODY1NDhmMjEwMGEwZDU3NjYxOGE4NTc0MWY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-24T14:08:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-14T20:22:37Z"
      },
      "message": "test: Generate one block for each send in wallet_import_rescan\n\nThis ...\n* ensures that enough coins are available/spendable, even when more\n  variants are added\n* ensures that all mempool txs are mined, even when more variants are\n  added\n* makes the test more specific to test that the confirmation height\n  is properly reported and timestamps are correctly handled in the test\n  logic\n* prepares the test for a future, where blocks are skipped for rescan if\n  they are deemed irrelevant by a filter (c.f. BIP157)",
      "tree": {
        "sha": "c437c36c856d3a7f234b7353ac4771387878449c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c437c36c856d3a7f234b7353ac4771387878449c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac3dcf7d052586548f2100a0d576618a85741f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhU1gwApiOjfZyzpUylbCviwMgLTzvrv8wJP97ct1YCmZYvKyfjAMYXNGe0+35O\nu8/+HVD2CdfBK6t/9W9WtigyUedw6nk/gYrAsymO/HQW03jHA19g5+d4KJKi9HO3\nqtNt5VQTmzI5/mjQjIhflDqCrtSleox2Hc2D9/Qc5p8E/60mpnaQ0pyHf+Df+iZs\nFTb/pCKWEIre2CBYKH3bw5niSYREP6osvJ5u3WoP7wD4+nsw6DWZTLmzKFdpTeV7\nHL1ZUXoEH6HqBFp4n9mPL+VQw0819Wyf7UQPCpdZaroyLC8RsseCu4BLwgT35qsK\nYabw3KDjir+k9KnAvVYti8EejPcp9x61qfVwTe6V0lcO4q/Izynlo6LIfWoVYG5I\n6sI6uDayYbrS/6tun29uk+mgpbO/iU6TA/rIBqjjhAMhzUORuB+HKmBwBUvgIfG+\nGVj04wsJAUm74kgMKTxwEMqSAl+kFHPA/wdurv0g11V3VfjQHAzhmpzDzS4uQgQn\nGwWgb/Ob\n=/YxW\n-----END PGP SIGNATURE-----",
        "payload": "tree c437c36c856d3a7f234b7353ac4771387878449c\nparent fe001925f803ee9281c73da1265c401ba6a2b5ca\nauthor MarcoFalke <falke.marco@gmail.com> 1556114906 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1565814157 -0400\n\ntest: Generate one block for each send in wallet_import_rescan\n\nThis ...\n* ensures that enough coins are available/spendable, even when more\n  variants are added\n* ensures that all mempool txs are mined, even when more variants are\n  added\n* makes the test more specific to test that the confirmation height\n  is properly reported and timestamps are correctly handled in the test\n  logic\n* prepares the test for a future, where blocks are skipped for rescan if\n  they are deemed irrelevant by a filter (c.f. BIP157)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac3dcf7d052586548f2100a0d576618a85741f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac3dcf7d052586548f2100a0d576618a85741f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac3dcf7d052586548f2100a0d576618a85741f9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe001925f803ee9281c73da1265c401ba6a2b5ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe001925f803ee9281c73da1265c401ba6a2b5ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe001925f803ee9281c73da1265c401ba6a2b5ca"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 17,
      "deletions": 13
    },
    "files": [
      {
        "sha": "0578f2c3b2625708ceedd1e4ad6e149cde81b7ef",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac3dcf7d052586548f2100a0d576618a85741f9/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac3dcf7d052586548f2100a0d576618a85741f9/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=fac3dcf7d052586548f2100a0d576618a85741f9",
        "patch": "@@ -64,10 +64,11 @@ def do_import(self, timestamp):\n             }], {\"rescan\": self.rescan in (Rescan.yes, Rescan.late_timestamp)})\n             assert_equal(response, [{\"success\": True}])\n \n-    def check(self, txid=None, amount=None, confirmations=None):\n+    def check(self, txid=None, amount=None, confirmation_height=None):\n         \"\"\"Verify that listtransactions/listreceivedbyaddress return expected values.\"\"\"\n \n         txs = self.node.listtransactions(label=self.label, count=10000, include_watchonly=True)\n+        current_height = self.node.getblockcount()\n         assert_equal(len(txs), self.expected_txs)\n \n         addresses = self.node.listreceivedbyaddress(minconf=0, include_watchonly=True, address_filter=self.address['address'])\n@@ -82,13 +83,13 @@ def check(self, txid=None, amount=None, confirmations=None):\n             assert_equal(tx[\"category\"], \"receive\")\n             assert_equal(tx[\"label\"], self.label)\n             assert_equal(tx[\"txid\"], txid)\n-            assert_equal(tx[\"confirmations\"], confirmations)\n+            assert_equal(tx[\"confirmations\"], 1 + current_height - confirmation_height)\n             assert_equal(\"trusted\" not in tx, True)\n \n             address, = [ad for ad in addresses if txid in ad[\"txids\"]]\n             assert_equal(address[\"address\"], self.address[\"address\"])\n             assert_equal(address[\"amount\"], self.expected_balance)\n-            assert_equal(address[\"confirmations\"], confirmations)\n+            assert_equal(address[\"confirmations\"], 1 + current_height - confirmation_height)\n             # Verify the transaction is correctly marked watchonly depending on\n             # whether the transaction pays to an imported public key or\n             # imported private key. The test setup ensures that transaction\n@@ -151,13 +152,16 @@ def run_test(self):\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n             variant.initial_amount = 1 - (i + 1) / 64\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n+            self.nodes[0].generate(1)  # Generate one block for each send\n+            variant.confirmation_height = self.nodes[0].getblockcount()\n+            variant.timestamp = self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"]\n \n-        # Generate a block containing the initial transactions, then another\n-        # block further in the future (past the rescan window).\n-        self.nodes[0].generate(1)\n+        # Generate a block further in the future (past the rescan window).\n         assert_equal(self.nodes[0].getrawmempool(), [])\n-        timestamp = self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"]\n-        set_node_times(self.nodes, timestamp + TIMESTAMP_WINDOW + 1)\n+        set_node_times(\n+            self.nodes,\n+            self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"] + TIMESTAMP_WINDOW + 1,\n+        )\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n@@ -167,11 +171,11 @@ def run_test(self):\n             self.log.info('Run import for variant {}'.format(variant))\n             expect_rescan = variant.rescan == Rescan.yes\n             variant.node = self.nodes[2 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\n-            variant.do_import(timestamp)\n+            variant.do_import(variant.timestamp)\n             if expect_rescan:\n                 variant.expected_balance = variant.initial_amount\n                 variant.expected_txs = 1\n-                variant.check(variant.initial_txid, variant.initial_amount, 2)\n+                variant.check(variant.initial_txid, variant.initial_amount, variant.confirmation_height)\n             else:\n                 variant.expected_balance = 0\n                 variant.expected_txs = 0\n@@ -181,9 +185,9 @@ def run_test(self):\n         for i, variant in enumerate(IMPORT_VARIANTS):\n             variant.sent_amount = 1 - (2 * i + 1) / 128\n             variant.sent_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.sent_amount)\n+            self.nodes[0].generate(1)  # Generate one block for each send\n+            variant.confirmation_height = self.nodes[0].getblockcount()\n \n-        # Generate a block containing the new transactions.\n-        self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n         self.sync_all()\n \n@@ -192,7 +196,7 @@ def run_test(self):\n             self.log.info('Run check for variant {}'.format(variant))\n             variant.expected_balance += variant.sent_amount\n             variant.expected_txs += 1\n-            variant.check(variant.sent_txid, variant.sent_amount, 1)\n+            variant.check(variant.sent_txid, variant.sent_amount, variant.confirmation_height)\n \n if __name__ == \"__main__\":\n     ImportRescanTest().main()"
      }
    ]
  },
  {
    "sha": "fa79af298917d501cee26370fdf9d44d05133d15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTc5YWYyOTg5MTdkNTAxY2VlMjYzNzBmZGY5ZDQ0ZDA1MTMzZDE1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-25T21:14:47Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-14T21:19:48Z"
      },
      "message": "test: Replace fragile \"rng\" with call to random()",
      "tree": {
        "sha": "0e2cb503e5c27d759053986213b89fb55a32d390",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e2cb503e5c27d759053986213b89fb55a32d390"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa79af298917d501cee26370fdf9d44d05133d15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg5owwAiGrMXATzu1tPP30fChwmtKRl+IgSNecbVIjlPu2y/zRuk/bPnmVMsajG\n6O40RVtSuoxukqZonLuP5eq3bLJuRg+CmV86AOfeOJPn57lYBCw7XTYHxEj8EQBx\n+qxNkk23wkDPzJTscmAfOHf10Lu3PAvOnNljR6nLibWASeqO45ytj16pJ4u+X37u\nnCzgE3btSibbfkLkn4O/ohvk4ajH6nbeQwk8QMxUO7iDqM3hWgkjIVLShkEicrzN\n7dkSfzfvbVZnh84JPgck/7vUWhSo15ZH6zRbBegFfbMJhErmFkWgh46+SBw1o0O6\nrMTJV8VBAmiZ4I6E2+s8VrYr6w0uUA3vyqtlch9vLSfZzgUCckuA9Dx2FFXKXxMH\ndriNaEdtxlhh4HxS1aFyRM8fsy940KIARHaw970aZv5brWFKL1J6gzDwwsUERVWm\nYZw+GMi0Z3JLIQrPfTgIElr7cFP4J6vJQUn+pEPgsWllkVnxjMO2uN1pa3SD4LQu\nCjYVLvys\n=k86U\n-----END PGP SIGNATURE-----",
        "payload": "tree 0e2cb503e5c27d759053986213b89fb55a32d390\nparent fac3dcf7d052586548f2100a0d576618a85741f9\nauthor MarcoFalke <falke.marco@gmail.com> 1564089287 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1565817588 -0400\n\ntest: Replace fragile \"rng\" with call to random()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa79af298917d501cee26370fdf9d44d05133d15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa79af298917d501cee26370fdf9d44d05133d15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa79af298917d501cee26370fdf9d44d05133d15/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fac3dcf7d052586548f2100a0d576618a85741f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac3dcf7d052586548f2100a0d576618a85741f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fac3dcf7d052586548f2100a0d576618a85741f9"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6ae585b3bee67bc8ece9d6ad51cacfac3cce1552",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa79af298917d501cee26370fdf9d44d05133d15/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa79af298917d501cee26370fdf9d44d05133d15/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=fa79af298917d501cee26370fdf9d44d05133d15",
        "patch": "@@ -27,8 +27,10 @@\n )\n \n import collections\n+from decimal import Decimal\n import enum\n import itertools\n+import random\n \n Call = enum.Enum(\"Call\", \"single multiaddress multiscript\")\n Data = enum.Enum(\"Data\", \"address pub priv\")\n@@ -117,6 +119,13 @@ def check(self, txid=None, amount=None, confirmation_height=None):\n # Rescans start at the earliest block up to 2 hours before the key timestamp.\n TIMESTAMP_WINDOW = 2 * 60 * 60\n \n+AMOUNT_DUST = 0.00000546\n+\n+\n+def get_rand_amount():\n+    r = random.uniform(AMOUNT_DUST, 1)\n+    return Decimal(str(round(r, 8)))\n+\n \n class ImportRescanTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -150,7 +159,7 @@ def run_test(self):\n             variant.label = \"label {} {}\".format(i, variant)\n             variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress(variant.label))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n-            variant.initial_amount = 1 - (i + 1) / 64\n+            variant.initial_amount = get_rand_amount()\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n             self.nodes[0].generate(1)  # Generate one block for each send\n             variant.confirmation_height = self.nodes[0].getblockcount()\n@@ -183,7 +192,7 @@ def run_test(self):\n \n         # Create new transactions sending to each address.\n         for i, variant in enumerate(IMPORT_VARIANTS):\n-            variant.sent_amount = 1 - (2 * i + 1) / 128\n+            variant.sent_amount = get_rand_amount()\n             variant.sent_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.sent_amount)\n             self.nodes[0].generate(1)  # Generate one block for each send\n             variant.confirmation_height = self.nodes[0].getblockcount()"
      }
    ]
  },
  {
    "sha": "fa25668e1c8982548f1c6f94780709c625811469",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI1NjY4ZTFjODk4MjU0OGYxYzZmOTQ3ODA3MDljNjI1ODExNDY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-25T21:11:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-14T21:20:07Z"
      },
      "message": "test: Test p2sh-witness and bech32 in wallet_import_rescan",
      "tree": {
        "sha": "80ab8e926170356b8d32ddfca56e12413f437bc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80ab8e926170356b8d32ddfca56e12413f437bc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa25668e1c8982548f1c6f94780709c625811469",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh4LQv/bDfmu4mOyp78fVKV+9iG5/2BLJcZeXtjkj/ZYFkKwbp5TSGuAKs8PvIk\n9SvDxkv9QhSqIj0oouJMV9/whi9ULpGWDXWgc3D0y9DoRxgY3M1RzwoBv66jIlDs\n6aFS1gkeTmSUpp1M32obQfYJbX6lEY9g9xlHCO26IIhNERbV5dcOegwKlP5oFXHm\n46onAE4EbCKOebrvDaK37yVctK2qe5kT/RM6s3ZWqwHHdyWTDaE7BWNfPHr4E+oE\nKwvSCpEJv9hbcOxVB7xwwxw7lBQT0nUC6wl4KrV6EAPCmgpzVkhoyDqfdexz2ULx\ndfT+r+jT8NzcZ2UilENboN1iIXjAZHN4czS8pHPZnZQ3MwpJfY3M/2waGKqn8KsD\nz7Bp/2aBCe9mu1vkulLrJz9YDHNHQ0V9qrlisbMhhxGSb/z/bhxB7VSztxfarJwH\n7YhkKYHIjYkiddNzhyuFgGEORxc2b83+TjpAkPUsVZ4FwREGJ+ObTlpPgwD+vVyW\ngKeoTQmF\n=9AJa\n-----END PGP SIGNATURE-----",
        "payload": "tree 80ab8e926170356b8d32ddfca56e12413f437bc4\nparent fa79af298917d501cee26370fdf9d44d05133d15\nauthor MarcoFalke <falke.marco@gmail.com> 1564089091 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1565817607 -0400\n\ntest: Test p2sh-witness and bech32 in wallet_import_rescan\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25668e1c8982548f1c6f94780709c625811469",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa25668e1c8982548f1c6f94780709c625811469",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25668e1c8982548f1c6f94780709c625811469/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa79af298917d501cee26370fdf9d44d05133d15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa79af298917d501cee26370fdf9d44d05133d15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa79af298917d501cee26370fdf9d44d05133d15"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 35,
      "deletions": 8
    },
    "files": [
      {
        "sha": "194f2f061baca2172ab3eb6b623f82d80aff1543",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25668e1c8982548f1c6f94780709c625811469/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25668e1c8982548f1c6f94780709c625811469/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=fa25668e1c8982548f1c6f94780709c625811469",
        "patch": "@@ -4,13 +4,22 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Encode and decode BASE58, P2PKH and P2SH addresses.\"\"\"\n \n+import enum\n+\n from .script import hash256, hash160, sha256, CScript, OP_0\n from .util import hex_str_to_bytes\n \n from . import segwit_addr\n \n ADDRESS_BCRT1_UNSPENDABLE = 'bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj'\n \n+\n+class AddressType(enum.Enum):\n+    bech32 = 'bech32'\n+    p2sh_segwit = 'p2sh-segwit'\n+    legacy = 'legacy'  # P2PKH\n+\n+\n chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n \n "
      },
      {
        "sha": "4e20892596f221f97326bfa13801b8a00182c29b",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 26,
        "deletions": 8,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25668e1c8982548f1c6f94780709c625811469/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25668e1c8982548f1c6f94780709c625811469/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=fa25668e1c8982548f1c6f94780709c625811469",
        "patch": "@@ -20,6 +20,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.address import AddressType\n from test_framework.util import (\n     connect_nodes,\n     assert_equal,\n@@ -37,13 +38,20 @@\n Rescan = enum.Enum(\"Rescan\", \"no yes late_timestamp\")\n \n \n-class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n+class Variant(collections.namedtuple(\"Variant\", \"call data address_type rescan prune\")):\n     \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n \n     def do_import(self, timestamp):\n         \"\"\"Call one key import RPC.\"\"\"\n         rescan = self.rescan == Rescan.yes\n \n+        assert_equal(self.address[\"solvable\"], True)\n+        assert_equal(self.address[\"isscript\"], self.address_type == AddressType.p2sh_segwit)\n+        assert_equal(self.address[\"iswitness\"], self.address_type == AddressType.bech32)\n+        if self.address[\"isscript\"]:\n+            assert_equal(self.address[\"embedded\"][\"isscript\"], False)\n+            assert_equal(self.address[\"embedded\"][\"iswitness\"], True)\n+\n         if self.call == Call.single:\n             if self.data == Data.address:\n                 response = self.node.importaddress(address=self.address[\"address\"], label=self.label, rescan=rescan)\n@@ -54,7 +62,7 @@ def do_import(self, timestamp):\n             assert_equal(response, None)\n \n         elif self.call in (Call.multiaddress, Call.multiscript):\n-            response = self.node.importmulti([{\n+            request = {\n                 \"scriptPubKey\": {\n                     \"address\": self.address[\"address\"]\n                 } if self.call == Call.multiaddress else self.address[\"scriptPubKey\"],\n@@ -63,7 +71,14 @@ def do_import(self, timestamp):\n                 \"keys\": [self.key] if self.data == Data.priv else [],\n                 \"label\": self.label,\n                 \"watchonly\": self.data != Data.priv\n-            }], {\"rescan\": self.rescan in (Rescan.yes, Rescan.late_timestamp)})\n+            }\n+            if self.address_type == AddressType.p2sh_segwit and self.data != Data.address:\n+                # We need solving data when providing a pubkey or privkey as data\n+                request.update({\"redeemscript\": self.address['embedded']['scriptPubKey']})\n+            response = self.node.importmulti(\n+                requests=[request],\n+                options={\"rescan\": self.rescan in (Rescan.yes, Rescan.late_timestamp)},\n+            )\n             assert_equal(response, [{\"success\": True}])\n \n     def check(self, txid=None, amount=None, confirmation_height=None):\n@@ -105,7 +120,7 @@ def check(self, txid=None, amount=None, confirmation_height=None):\n \n \n # List of Variants for each way a key or address could be imported.\n-IMPORT_VARIANTS = [Variant(*variants) for variants in itertools.product(Call, Data, Rescan, (False, True))]\n+IMPORT_VARIANTS = [Variant(*variants) for variants in itertools.product(Call, Data, AddressType, Rescan, (False, True))]\n \n # List of nodes to import keys to. Half the nodes will have pruning disabled,\n # half will have it enabled. Different nodes will be used for imports that are\n@@ -135,12 +150,12 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def setup_network(self):\n-        extra_args = [[\"-addresstype=legacy\"] for _ in range(self.num_nodes)]\n+        self.extra_args = [[]] * self.num_nodes\n         for i, import_node in enumerate(IMPORT_NODES, 2):\n             if import_node.prune:\n-                extra_args[i] += [\"-prune=1\"]\n+                self.extra_args[i] += [\"-prune=1\"]\n \n-        self.add_nodes(self.num_nodes, extra_args=extra_args)\n+        self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n \n         # Import keys with pruning disabled\n         self.start_nodes(extra_args=[[]] * self.num_nodes)\n@@ -157,7 +172,10 @@ def run_test(self):\n         # each possible type of wallet import RPC.\n         for i, variant in enumerate(IMPORT_VARIANTS):\n             variant.label = \"label {} {}\".format(i, variant)\n-            variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress(variant.label))\n+            variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress(\n+                label=variant.label,\n+                address_type=variant.address_type.value,\n+            ))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n             variant.initial_amount = get_rand_amount()\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)"
      }
    ]
  },
  {
    "sha": "fa3c6575cac5e3841797980fe60b8368ae579dba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTNjNjU3NWNhYzVlMzg0MTc5Nzk4MGZlNjBiODM2OGFlNTc5ZGJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-25T22:15:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-15T12:05:14Z"
      },
      "message": "lint: Add false positive to python dead code linter",
      "tree": {
        "sha": "fe58ce2671756a98918e237fcde8dd3fe7c74b98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe58ce2671756a98918e237fcde8dd3fe7c74b98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3c6575cac5e3841797980fe60b8368ae579dba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUimFQv/W88Z3PlTsG0w265s1Nv3P1JSAqPt49XWIcv2jT76dk/DHST+IFNbxz6M\neLz3i3YcyBRG7eYbESqVDId7A0hWtWycI0Tt4EXu/JpvyQNAAiJ/gMGnkz8J8hjl\ngIaBX6XLxGOm2aPT1QArGzWQ5nVif4csQYhZ4DxUmZBj+SdwtWBSsAp7zy6Z7G57\nP0W8muK1JJtsAiU2rGQ1m9fwKFbMpVzRpojqmT1nRkHMf3dBTC/8PBPxnOG4rK9h\n7qYmWUDH2sDwhpvIjFe92A3S0+oH+2Cgjn0LJYoFbdmOmiWIFx1I+e79IN0udSI3\n7RxhGbUOyJA0CBB7RCNDNGytiVQ5TMU2Wcqu3W/61Xd2Hdkr1dAMmNmrkFlx70su\n6dj8jyXwshNn4mtfkDxpIxttvcUbmXCTLJzZH9LHPYc5Y/ZO/T9ug7Q54QncZLrQ\nuBj9UPSlSkcTTbscGEjKZwWf96/p2rBUbtc76dryKcIZ1PHW6xMVG/XF2qi9w4py\nqFa0oZIO\n=2T2V\n-----END PGP SIGNATURE-----",
        "payload": "tree fe58ce2671756a98918e237fcde8dd3fe7c74b98\nparent fa25668e1c8982548f1c6f94780709c625811469\nauthor MarcoFalke <falke.marco@gmail.com> 1564092941 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1565870714 -0400\n\nlint: Add false positive to python dead code linter\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3c6575cac5e3841797980fe60b8368ae579dba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3c6575cac5e3841797980fe60b8368ae579dba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3c6575cac5e3841797980fe60b8368ae579dba/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa25668e1c8982548f1c6f94780709c625811469",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25668e1c8982548f1c6f94780709c625811469",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa25668e1c8982548f1c6f94780709c625811469"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 50,
      "deletions": 5
    },
    "files": [
      {
        "sha": "20bff368a583d1dfe164ca8bdb4a00f1dc36e682",
        "filename": ".travis/lint_04_install.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6575cac5e3841797980fe60b8368ae579dba/.travis/lint_04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6575cac5e3841797980fe60b8368ae579dba/.travis/lint_04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/lint_04_install.sh?ref=fa3c6575cac5e3841797980fe60b8368ae579dba",
        "patch": "@@ -6,9 +6,9 @@\n \n export LC_ALL=C\n \n-travis_retry pip install codespell==1.15.0\n-travis_retry pip install flake8==3.5.0\n-travis_retry pip install vulture==0.29\n+travis_retry pip3 install codespell==1.15.0\n+travis_retry pip3 install flake8==3.5.0\n+travis_retry pip3 install vulture==0.29\n \n SHELLCHECK_VERSION=v0.6.0\n curl -s \"https://storage.googleapis.com/shellcheck/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz\" | tar --xz -xf - --directory /tmp/"
      },
      {
        "sha": "2522c8fa1cee150111b4b68a874998a273b637dd",
        "filename": "test/lint/lint-python-dead-code-whitelist",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6575cac5e3841797980fe60b8368ae579dba/test/lint/lint-python-dead-code-whitelist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6575cac5e3841797980fe60b8368ae579dba/test/lint/lint-python-dead-code-whitelist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python-dead-code-whitelist?ref=fa3c6575cac5e3841797980fe60b8368ae579dba",
        "patch": "@@ -0,0 +1,45 @@\n+BadInputOutpointIndex  # unused class (test/functional/data/invalid_txs.py)\n+_.carbon_path  # unused attribute (contrib/macdeploy/custom_dsstore.py)\n+connection_lost  # unused function (test/functional/test_framework/mininode.py)\n+connection_made  # unused function (test/functional/test_framework/mininode.py)\n+_.converter  # unused attribute (test/functional/test_framework/test_framework.py)\n+_.daemon  # unused attribute (test/functional/test_framework/socks5.py)\n+data_received  # unused function (test/functional/test_framework/mininode.py)\n+DuplicateInput  # unused class (test/functional/data/invalid_txs.py)\n+_.filename  # unused attribute (contrib/macdeploy/custom_dsstore.py)\n+InvalidOPIFConstruction  # unused class (test/functional/data/invalid_txs.py)\n+_.is_compressed  # unused property (test/functional/test_framework/key.py)\n+legacy  # unused variable (test/functional/test_framework/address.py)\n+msg_generic  # unused class (test/functional/test_framework/messages.py)\n+NonexistentInput  # unused class (test/functional/data/invalid_txs.py)\n+on_addr  # unused function (test/functional/test_framework/mininode.py)\n+on_blocktxn  # unused function (test/functional/test_framework/mininode.py)\n+on_block  # unused function (test/functional/test_framework/mininode.py)\n+on_cmpctblock  # unused function (test/functional/test_framework/mininode.py)\n+on_feefilter  # unused function (test/functional/test_framework/mininode.py)\n+on_getaddr  # unused function (test/functional/test_framework/mininode.py)\n+on_getblocks  # unused function (test/functional/test_framework/mininode.py)\n+on_getblocktxn  # unused function (test/functional/test_framework/mininode.py)\n+on_getdata  # unused function (test/functional/test_framework/mininode.py)\n+on_getheaders  # unused function (test/functional/test_framework/mininode.py)\n+on_headers  # unused function (test/functional/test_framework/mininode.py)\n+on_inv  # unused function (test/functional/test_framework/mininode.py)\n+on_mempool  # unused function (test/functional/test_framework/mininode.py)\n+on_notfound  # unused function (test/functional/test_framework/mininode.py)\n+on_ping  # unused function (test/functional/test_framework/mininode.py)\n+on_pong  # unused function (test/functional/test_framework/mininode.py)\n+on_reject  # unused function (test/functional/test_framework/mininode.py)\n+on_sendcmpct  # unused function (test/functional/test_framework/mininode.py)\n+on_sendheaders  # unused function (test/functional/test_framework/mininode.py)\n+on_tx  # unused function (test/functional/test_framework/mininode.py)\n+on_verack  # unused function (test/functional/test_framework/mininode.py)\n+on_version  # unused function (test/functional/test_framework/mininode.py)\n+_.optionxform  # unused attribute (test/util/bitcoin-util-test.py)\n+OutputMissing  # unused class (test/functional/data/invalid_txs.py)\n+_.posix_path  # unused attribute (contrib/macdeploy/custom_dsstore.py)\n+profile_with_perf  # unused function (test/functional/test_framework/test_node.py)\n+SizeTooSmall  # unused class (test/functional/data/invalid_txs.py)\n+SpendNegative  # unused class (test/functional/data/invalid_txs.py)\n+SpendTooMuch  # unused class (test/functional/data/invalid_txs.py)\n+TooManySigops  # unused class (test/functional/data/invalid_txs.py)\n+verify_ecdsa  # unused function (test/functional/test_framework/key.py)"
      },
      {
        "sha": "77bf5990a73e0606962140804dbce08c97106b33",
        "filename": "test/lint/lint-python-dead-code.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6575cac5e3841797980fe60b8368ae579dba/test/lint/lint-python-dead-code.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6575cac5e3841797980fe60b8368ae579dba/test/lint/lint-python-dead-code.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python-dead-code.sh?ref=fa3c6575cac5e3841797980fe60b8368ae579dba",
        "patch": "@@ -15,5 +15,5 @@ fi\n \n vulture \\\n     --min-confidence 60 \\\n-    --ignore-names \"argtypes,connection_lost,connection_made,converter,data_received,daemon,errcheck,is_compressed,is_valid,verify_ecdsa,msg_generic,on_*,optionxform,restype,profile_with_perf\" \\\n-    $(git ls-files -- \"*.py\" \":(exclude)contrib/\" \":(exclude)test/functional/data/invalid_txs.py\")\n+    $(git rev-parse --show-toplevel) \\\n+    $(dirname \"${BASH_SOURCE[0]}\")/lint-python-dead-code-whitelist"
      }
    ]
  }
]