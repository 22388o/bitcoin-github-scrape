[
  {
    "sha": "33ce4350139565e96a5c7e6e9801f818bed7b413",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2NlNDM1MDEzOTU2NWU5NmE1YzdlNmU5ODAxZjgxOGJlZDdiNDEz",
    "commit": {
      "author": {
        "name": "danra",
        "email": "danra@users.noreply.github.com",
        "date": "2017-09-15T15:21:31Z"
      },
      "committer": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-09-21T16:55:23Z"
      },
      "message": "Sanity assert GetAncestor() != nullptr where appropriate\n\nAdd sanity asserts for return value of `CBlockIndex::GetAncestor()` where appropriate.\n\nIn validation.cpp `CheckSequenceLocks`, check the return value of `tip->GetAncestor(maxInputHeight)` stored into `lp->maxInputBlock`. If it ever returns `nullptr` because the ancestor isn't found, it's going to be a bad bug to keep going, since a `LockPoints` object with the `maxInputBlock` member set to `nullptr` signifies no relative lock time.\n\nIn the other places, the added asserts would prevent accidental dereferencing of a null pointer which is UB.",
      "tree": {
        "sha": "6e40c82905f9b1775280483526270fe307cc4f99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e40c82905f9b1775280483526270fe307cc4f99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33ce4350139565e96a5c7e6e9801f818bed7b413",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33ce4350139565e96a5c7e6e9801f818bed7b413",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33ce4350139565e96a5c7e6e9801f818bed7b413",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33ce4350139565e96a5c7e6e9801f818bed7b413/comments",
    "author": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98212745c8acb5cc4e688bbb3979bfd46b25f98a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98212745c8acb5cc4e688bbb3979bfd46b25f98a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98212745c8acb5cc4e688bbb3979bfd46b25f98a"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 23,
      "deletions": 7
    },
    "files": [
      {
        "sha": "3f8f6c675ee8db2ec030574992beb4aaad1636c1",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33ce4350139565e96a5c7e6e9801f818bed7b413/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33ce4350139565e96a5c7e6e9801f818bed7b413/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=33ce4350139565e96a5c7e6e9801f818bed7b413",
        "patch": "@@ -66,7 +66,9 @@ std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags\n         int nCoinHeight = (*prevHeights)[txinIndex];\n \n         if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n-            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            const CBlockIndex* ancestor = block.GetAncestor(std::max(nCoinHeight-1, 0));\n+            assert(ancestor != nullptr);\n+            int64_t nCoinTime = ancestor->GetMedianTimePast();\n             // NOTE: Subtract 1 to maintain nLockTime semantics\n             // BIP 68 relative lock times have the semantics of calculating\n             // the first block or time at which the transaction would be"
      },
      {
        "sha": "396e3a99825f7b3417d2f2942174d1e1f6531da2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33ce4350139565e96a5c7e6e9801f818bed7b413/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33ce4350139565e96a5c7e6e9801f818bed7b413/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=33ce4350139565e96a5c7e6e9801f818bed7b413",
        "patch": "@@ -1526,6 +1526,7 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     }\n \n     const CBlockIndex* pindexPast = pindex->GetAncestor(pindex->nHeight - blockcount);\n+    assert(pindexPast != nullptr);\n     int nTimeDiff = pindex->GetMedianTimePast() - pindexPast->GetMedianTimePast();\n     int nTxDiff = pindex->nChainTx - pindexPast->nChainTx;\n "
      },
      {
        "sha": "9f424b6bbd67292b6a7ff1f1ffb8f05f7b76e947",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33ce4350139565e96a5c7e6e9801f818bed7b413/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33ce4350139565e96a5c7e6e9801f818bed7b413/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=33ce4350139565e96a5c7e6e9801f818bed7b413",
        "patch": "@@ -435,11 +435,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n \n-    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++) {\n+        CBlockIndex* ancestor = chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i);\n+        assert(ancestor != nullptr);\n+        ancestor->nTime += 512; //Trick the MedianTimePast\n+    }\n     BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n-    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++) {\n+        CBlockIndex* ancestor = chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i);\n+        assert(ancestor != nullptr);\n+        ancestor->nTime -= 512; //undo tricked MTP\n+    }\n \n     // absolute height locked\n     tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n@@ -485,8 +491,11 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // For now these will still generate a valid template until BIP68 soft fork\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     // However if we advance height by 1 and time by 512, all of them should be mined\n-    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++) {\n+        CBlockIndex* ancestor = chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i);\n+        assert(ancestor != nullptr);\n+        ancestor->nTime += 512; //Trick the MedianTimePast\n+    }\n     chainActive.Tip()->nHeight++;\n     SetMockTime(chainActive.Tip()->GetMedianTimePast() + 1);\n "
      },
      {
        "sha": "ce7d6f9b46ad8bc40915c052767983579e2c2489",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33ce4350139565e96a5c7e6e9801f818bed7b413/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33ce4350139565e96a5c7e6e9801f818bed7b413/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=33ce4350139565e96a5c7e6e9801f818bed7b413",
        "patch": "@@ -316,6 +316,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n                 }\n             }\n             lp->maxInputBlock = tip->GetAncestor(maxInputHeight);\n+            assert(lp->maxInputBlock != nullptr);\n         }\n     }\n     return EvaluateSequenceLocks(index, lockPair);\n@@ -3750,6 +3751,7 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n     int nForkHeight = pindexFork ? pindexFork->nHeight : 0;\n     for (int nHeight = nForkHeight + 1; nHeight <= pindexNew->nHeight; ++nHeight) {\n         const CBlockIndex* pindex = pindexNew->GetAncestor(nHeight);\n+        assert(pindex != nullptr);\n         LogPrintf(\"Rolling forward %s (%i)\\n\", pindex->GetBlockHash().ToString(), nHeight);\n         if (!RollforwardBlock(pindex, cache, params)) return false;\n     }"
      },
      {
        "sha": "65f34033206d81c0f1210dd4036660f7a903b506",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33ce4350139565e96a5c7e6e9801f818bed7b413/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33ce4350139565e96a5c7e6e9801f818bed7b413/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=33ce4350139565e96a5c7e6e9801f818bed7b413",
        "patch": "@@ -117,6 +117,7 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n \n     // Find beginning of period\n     const CBlockIndex* pindexEndOfPrevPeriod = pindex->GetAncestor(pindex->nHeight - ((pindex->nHeight + 1) % stats.period));\n+    assert(pindexEndOfPrevPeriod != nullptr);\n     stats.elapsed = pindex->nHeight - pindexEndOfPrevPeriod->nHeight;\n \n     // Count from current block to beginning of period\n@@ -152,6 +153,7 @@ int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex*\n     // if we are computing for the first block of a period, then pindexPrev points to the last block of the previous period.\n     // The parent of the genesis block is represented by nullptr.\n     pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % nPeriod));\n+    assert(pindexPrev != nullptr);\n \n     const CBlockIndex* previousPeriodParent = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n "
      }
    ]
  }
]