DrahtBot,2020-06-20 22:03:56,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19337 (sync: detect double lock from the same thread by vasild)\n\nIf you consider this pull request important, please al",https://github.com/bitcoin/bitcoin/pull/19340#issuecomment-647050288,647050288,
hebasto,2020-06-22 09:56:54,"@vasild \n> It would be good if the offending entry is still in the lock stack by the time `potential_deadlock_detected()` is called because it prints the stack and we want to see the offender in the debug log.\n\nIt prints from `LockOrders` instances, not from the lock stack of the current thread, no?",https://github.com/bitcoin/bitcoin/pull/19340#issuecomment-647414277,647414277,
vasild,2020-06-22 10:59:51,"You are right! I did not realize that the `LockStack` objects are copied.\n\nAnyway - I think, for `EnterCritical()` to be a good citizen, if it throws, it should leave its internal structures in the state they were before it was called.",https://github.com/bitcoin/bitcoin/pull/19340#issuecomment-647444809,647444809,
hebasto,2020-06-22 11:46:23,"Updated c810cd4d17f1f3854045c7e6f9093c856ba28406 -> 236e76047fd0cf260d4aed0c0926e9942e15d828 ([pr19340.01](https://github.com/hebasto/bitcoin/commits/pr19340.01) -> [pr19340.02](https://github.com/hebasto/bitcoin/commits/pr19340.02), [diff](https://github.com/hebasto/bitcoin/compare/pr19340.01..pr19340.02)):\n\n- addressed @vasild's [comment](https://github.com/bitcoin/bitcoin/pull/19340#discuss",https://github.com/bitcoin/bitcoin/pull/19340#issuecomment-647465741,647465741,
hebasto,2020-06-22 18:53:21,"Reworked after the discussion with @vasild on IRC.\n\n~Going to update the OP soon.~ The OP has been updated.",https://github.com/bitcoin/bitcoin/pull/19340#issuecomment-647710148,647710148,
JeremyRubin,2020-07-09 21:05:10,"I'm not sure I fully get what's going on here, but the change looks fine to me. Can you explain how making the copy of the lockstack actually helps? It looks like a race condition to even copy it?",https://github.com/bitcoin/bitcoin/pull/19340#issuecomment-656350971,656350971,
vasild,2020-07-10 07:58:07,"@JeremyRubin thanks for asking! The key here is the added `lock_stack.pop_back()`, not the copying. The copying is needed because without it the prints from `potential_deadlock_detected()` would not be complete (because we already removed one element). There is no race because that code is operating under `lockdata.dd_mutex`.\n\nLet me elaborate with an example:\n* Thread `t1` acquires `lockA`",https://github.com/bitcoin/bitcoin/pull/19340#issuecomment-656541554,656541554,
hebasto,2020-08-02 13:47:37,"Updated f88222a9a1b218b85c442654ee50ddce290484b6 -> cab80f4578e5c9998206b3a8d3cc1019d0841bba ([pr19340.03](https://github.com/hebasto/bitcoin/commits/pr19340.03) -> [pr19340.04](https://github.com/hebasto/bitcoin/commits/pr19340.04), [diff](https://github.com/hebasto/bitcoin/compare/pr19340.03..pr19340.04)):\n\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/19340#dis",https://github.com/bitcoin/bitcoin/pull/19340#issuecomment-667676282,667676282,
MarcoFalke,2020-08-04 14:59:28,re-ACK 63e9e40b73,https://github.com/bitcoin/bitcoin/pull/19340#issuecomment-668648062,668648062,
vasild,2020-06-22 07:50:25,"`operator[]` has a side effect that it would insert a new element in `m_lock_stacks` if the thread that called it does not own any locks.\n\n```suggestion\n    const auto it = lockdata.m_lock_stacks.find(std::this_thread::get_id());\n    if (it == lockdata.m_lock_stacks.end()) {\n        return true;\n    }\n    return it->second.empty().\n```",https://github.com/bitcoin/bitcoin/pull/19340#discussion_r443376119,443376119,src/sync.cpp
vasild,2020-06-22 09:27:48,"I would suggest to unconditionally remove the entry from the stack here, after printing the stack and before `abort()`/`throw`. This cleanup is warranted from all code paths that call `EnterCritical()`.\n\n```suggestion\n    // Undo the insertion from push_lock(). We will not lock the mutex.\n    s2.pop_back();\n    throw std::logic_error(""potential deadlock detected"");\n```\n\n(this shoul",https://github.com/bitcoin/bitcoin/pull/19340#discussion_r443430868,443430868,src/sync.cpp
hebasto,2020-06-22 11:46:49,[Updated](https://github.com/bitcoin/bitcoin/pull/19340#issuecomment-647465741).,https://github.com/bitcoin/bitcoin/pull/19340#discussion_r443501266,443501266,src/sync.cpp
MarcoFalke,2020-07-31 06:12:09,Any reason this is now being done before `if (lockdata.lockorders.count(p1))continue`?,https://github.com/bitcoin/bitcoin/pull/19340#discussion_r463423518,463423518,src/sync.cpp
MarcoFalke,2020-07-31 06:12:41,"```suggestion\nvoid inline DeleteLock(void* cs) {}\n```\n\nCould remove the confusing static's here?",https://github.com/bitcoin/bitcoin/pull/19340#discussion_r463423649,463423649,src/sync.h
hebasto,2020-08-02 13:48:14,[Updated](https://github.com/bitcoin/bitcoin/pull/19340#issuecomment-667676282).,https://github.com/bitcoin/bitcoin/pull/19340#discussion_r464080519,464080519,src/sync.cpp
hebasto,2020-08-02 13:48:22,[Updated](https://github.com/bitcoin/bitcoin/pull/19340#issuecomment-667676282).,https://github.com/bitcoin/bitcoin/pull/19340#discussion_r464080529,464080529,src/sync.h
