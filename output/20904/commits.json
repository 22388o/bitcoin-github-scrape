[
  {
    "sha": "10b3e429a465f24d11fcc8660eda516346660136",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGIzZTQyOWE0NjVmMjRkMTFmY2M4NjYwZWRhNTE2MzQ2NjYwMTM2",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-11T16:21:55Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-11T16:30:28Z"
      },
      "message": "net: (de)serialize CSubNet in addrv2 format\n\nThis is a followup to https://github.com/bitcoin/bitcoin/pull/20852\nwhich allowed non-IP subnets, but some of them, e.g. torv3, cannot be\nserialized in 16 bytes (addrv1) and must use addrv2.\n\nThis commit changes the format of `banlist.dat` in such a way that old\nversions (before this commit) will not be able to read a file written by\nnew versions (after this commit).",
      "tree": {
        "sha": "c03ec267e2366aec2f577f878bd7a50ee5962ca9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c03ec267e2366aec2f577f878bd7a50ee5962ca9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10b3e429a465f24d11fcc8660eda516346660136",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl/8fSQACgkQVN8G9ktV\ny7+QhB//bx8ELpjqdP8a7C5KyYX+uhY4xQ+MygCymAm5ftSKGU50bPav+TYgUhW3\n6q8h2hrhMVLF5IfDCqSpBeQhBLul+PthP9Spszsmo4xtTUB+WD/9xviMbaI/BRZa\negIa55UShC6ynBztdQQDR26PzGLPZzPDFWsGUdGjvb5Pok9VxnQJYuwaz/oM5Jc/\nxvIRpx6DtYn0/aXiciUs//2eWGM2YEamsB99SleF+R0aP1d7o+ztJMnqeEWoFsMk\n7ieyT5SgKvXv+msRVh1B39b9pY+pqufuDHKUGeNUav3wAbFcCR0x0s64sgaVl9LI\nMljTMOLR3rIXNmvgLslH5kbD7tod/+AC4+fBSwCb6DTNT04b7USN+I6TmvxO45S3\nRPMEr+XMm5idpENH4z2BMqrEfZ6RWVMhko1Bk8Jq6yZZSj4Mh8XWGtNhljQyQrA0\nZ/9+mxakCSlSN5NyKuIXDdeC8WFZZMBRSn9YJ8lhqEgkQ9lSptLudp8YQ+0qHaLE\nYa29vX0jCLw9u8I17l6/s+S3wf8Pu080AZ1VRlQZwXYLddtwvPk0mTuZHgit1cZx\ndQsh9lZNJqzKByOCkBI2Ae9vUpnGNqMPcv6YUgm1TgJahpN8BUz7qThbXuvrK40b\n4hH7uDPTl6DC59PukYXvzusskEZr+dQwpZwcPnea9cT5cSrBkNiC1cLAqX4PeXhe\n9A5mui5j0Yf3JeF3PJX/c8xBOHynvhLFk3yuZJt5hlvjlWt1FLPcTXstW6RP3W27\nkUBuXksbs6SjlCU1xBpMdjx69aHt0Dl8q3KyKy0H6rz9gtSTW8MNRta3ta6qCPv6\n6I1fQyx2fon6CDorFwk+MMaZM5X3HlOFiKQWPZo4NdoxuYW69AwhDpN733AV8ZsM\nYlmkZG4xWE2LSXYwAD1cUK1L/9TwepS1hHj4BE2JTskqoxPrMxfSZkbTHj+zbPHZ\n8xhfq43AOjD5iHdySh3R0EJO/PcJPS5aKbaCzShCGtKAoUKiXyKR3nkCoeTBSp7f\nDhJqL3/I2QaRTITDeSklw67OOvdxYS3WjGANF7uAS/MKyJO3ID6cZmL1u0a96br2\nKLlPwIQR6GhEyglELWS4B1HTWRvrHyI5XoxTFv9+tCeQVjwTfewSvELO8v5RFTpN\nBijCKr6x9uz6swA0UZkX2DDn3mToM3gxmhMDHLS8S1y91pkfz9Tbvn4wupesKufO\nySLjwcvOXdHNzEWZz8TuW8R7UT1QlvVkiLkwLlGwy2XGvQ5daR3GQhgw9qsugMSa\nPHwZ90qg45RPrfeShlFi6y7Ss9CX3moGhEDwjDyzrQm+Z6bu0GHTl2Yj16CBuHL2\nUN2k/ETiw/TEcgf8xXdAguDmqTOlxg==\n=1Ixp\n-----END PGP SIGNATURE-----",
        "payload": "tree c03ec267e2366aec2f577f878bd7a50ee5962ca9\nparent 6d81d7aa87a15edd87175c33d1fd4a2accb3549d\nauthor Vasil Dimov <vd@FreeBSD.org> 1610382115 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1610382628 +0100\n\nnet: (de)serialize CSubNet in addrv2 format\n\nThis is a followup to https://github.com/bitcoin/bitcoin/pull/20852\nwhich allowed non-IP subnets, but some of them, e.g. torv3, cannot be\nserialized in 16 bytes (addrv1) and must use addrv2.\n\nThis commit changes the format of `banlist.dat` in such a way that old\nversions (before this commit) will not be able to read a file written by\nnew versions (after this commit).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b3e429a465f24d11fcc8660eda516346660136",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10b3e429a465f24d11fcc8660eda516346660136",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b3e429a465f24d11fcc8660eda516346660136/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d81d7aa87a15edd87175c33d1fd4a2accb3549d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d81d7aa87a15edd87175c33d1fd4a2accb3549d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d81d7aa87a15edd87175c33d1fd4a2accb3549d"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 33,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a26ad0dd9812e3da18f31cef23348ef98ce56aa3",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 33,
        "deletions": 9,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b3e429a465f24d11fcc8660eda516346660136/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b3e429a465f24d11fcc8660eda516346660136/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=10b3e429a465f24d11fcc8660eda516346660136",
        "patch": "@@ -13,6 +13,7 @@\n #include <compat.h>\n #include <prevector.h>\n #include <serialize.h>\n+#include <streams.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n@@ -500,22 +501,45 @@ class CSubNet\n         friend bool operator!=(const CSubNet& a, const CSubNet& b) { return !(a == b); }\n         friend bool operator<(const CSubNet& a, const CSubNet& b);\n \n-        SERIALIZE_METHODS(CSubNet, obj)\n+        template <typename Stream>\n+        void Serialize(Stream& s_) const\n         {\n-            READWRITE(obj.network);\n-            if (obj.network.IsIPv4()) {\n+            OverrideStream<Stream> s(&s_, s_.GetType(), s_.GetVersion() | ADDRV2_FORMAT);\n+\n+            s << network;\n+            if (network.IsIPv4()) {\n                 // Before commit 102867c587f5f7954232fb8ed8e85cda78bb4d32, CSubNet used the last 4 bytes of netmask\n                 // to store the relevant bytes for an IPv4 mask. For compatibility reasons, keep doing so in\n                 // serialized form.\n                 unsigned char dummy[12] = {0};\n-                READWRITE(dummy);\n-                READWRITE(MakeSpan(obj.netmask).first(4));\n+                s << dummy;\n+                s << MakeSpan(netmask).first(4);\n             } else {\n-                READWRITE(obj.netmask);\n+                s << netmask;\n+            }\n+            s << valid;\n+        }\n+\n+        template <typename Stream>\n+        void Unserialize(Stream& s_)\n+        {\n+            OverrideStream<Stream> s(&s_, s_.GetType(), s_.GetVersion() | ADDRV2_FORMAT);\n+\n+            s >> network;\n+            if (network.IsIPv4()) {\n+                // Before commit 102867c587f5f7954232fb8ed8e85cda78bb4d32, CSubNet used the last 4 bytes of netmask\n+                // to store the relevant bytes for an IPv4 mask. For compatibility reasons, keep doing so in\n+                // serialized form.\n+                unsigned char dummy[12];\n+                s >> dummy;\n+                s >> MakeSpan(netmask).first(4);\n+            } else {\n+                s >> netmask;\n+            }\n+            s >> valid;\n+            if (valid) {\n+                valid = SanityCheck();\n             }\n-            READWRITE(obj.valid);\n-            // Mark invalid if the result doesn't pass sanity checking.\n-            SER_READ(obj, if (obj.valid) obj.valid = obj.SanityCheck());\n         }\n };\n "
      }
    ]
  },
  {
    "sha": "bc28dc9a0c426af35c1ddbf7f98c4d20a340477a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzI4ZGM5YTBjNDI2YWYzNWMxZGRiZjdmOThjNGQyMGEzNDA0Nzdh",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-11T16:25:40Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-11T16:30:29Z"
      },
      "message": "test: ensure banlist.dat can be read after restart\n\nIf we would try to write a torv3 subnet in addrv1 format, it would\nserialize as a dummy-all-0s IPv6 address and subsequently, when\ndeserialized will not result in the same subnet.",
      "tree": {
        "sha": "8be508e04c6ad51e18d7e90aa4bd71669bc91460",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8be508e04c6ad51e18d7e90aa4bd71669bc91460"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc28dc9a0c426af35c1ddbf7f98c4d20a340477a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl/8fSUACgkQVN8G9ktV\ny7/dZh//acHFwFcJP+Wud1eCPXDwCpKCeHb0LlnG5XzG+DWdLzMXO9ddWNaRqzL5\nxdf6kyHmE4KIHBA4//JDxG9JXPQXwtKiNZCokqY414wD6KBjEx3hMY0E3JBgAEfI\ne/Ic2214vgaq74H+Do6ZhMj3RORabZgEjFi0b2WJSHgdkmlrbkWUKqFAfzMAKWxV\n6CemjNZ7rNUdPrAqKAkoIcsN6b8WoWRM4VtOQbOa0cE/jHH07lRCWfr3N0eTriDy\nqyCWCnlCSpbRk2Q5m5QCJWRcc1b9TgKfXgxD7g8kzgkqyWYuBLlz7yc+WbVQcejx\nfB4DpPho4VZ0iDzWnsK6Lc8rpR9QTY58V+cH6Sfx3IkCzjpImwg+UYTYxuW3hElF\nFl9sKzr3ekFWWWEIf3u8DP91B17kicf9W+FULNqF/dG5ySMH/KlWSuN0DxD1+jzR\nWKzWeZ69b2Cq/kR/yfNH7bfT496dbO0pwRtS+/0V6dIlLu3kqRgZZA/ahc1qXrUF\nNE8SZRJj1huE6cKWPcVQ1Dw6Dl3NRd/GquLD87Bb6XqbLklYhxELvAFeztY/Z5/d\n41mjFenwYgf7krnbYcUy4pI8ojBUoo5bf51pJUZKWYVYeNvUam23re1mCNquXS4+\nbyat6m7z48j523SHHVwdEMR2rfcTPfU9EF5L+/eSYcPvmSFKn9xKt5ecOeU0vp1T\n34c5W9kaoZ9aZo+ysm6pUa1DiN6WKD96ZDaIL0qtBEPkhcERVtv7M2yhhoGcppSi\nBiNS3DlGzhaf9Iogf+ELHclyCdshSi8PGbocJ09h2SwK9cz15ymhJSWXYw8ho0i1\n80ewz0xq0fG7wsJaBC81PHx0MN71medGfVIGXxjoxXkNdYGLSUhhLXfPj4kDfTMb\ni9+w95U5IYOewVjoFTWkG4/dCmRXb0Se1n2lR1Laq3q59UmjLu17YNNbeq6lTiMi\nEg/i+cq4TZZL2FgzLUGXn07H0uQSNk71DabSnIw+RlDEcl8Z88F3u6pP6QA+nXD9\nwT8LHfJ8e0o+aPyaMmZgjFhqKKPnfxWQgpXo9Sas5N4PdKGeOerru1MnTz65nEHS\n8xnhsyhMy6tDjFiiyEvv62xZ+eVMCeubnrZ+v9UkKtI/dB7pOpKH/bCC5D2NM2ar\n/cHzY2Eb0hOddDMOYtpP/eaOltiurGeeCt+2qPBCZBC0CSKNj92g4nsAJRPVAmxE\nSjbi80DtYrGWY/+zPRPOQOH5Jkv91yYdgQ/SFMeBXH4cGQnKkabBSPd38lHctEty\nc7v3AYc1a+B0vEFQQvnI7qtA8Gt6RDHL4nidmg+w1SJkJk+AaEF/Y/SHPaucfTYs\nNb+hlbeB6kAOQ2ghlK+N754UCXAh4w==\n=e164\n-----END PGP SIGNATURE-----",
        "payload": "tree 8be508e04c6ad51e18d7e90aa4bd71669bc91460\nparent 10b3e429a465f24d11fcc8660eda516346660136\nauthor Vasil Dimov <vd@FreeBSD.org> 1610382340 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1610382629 +0100\n\ntest: ensure banlist.dat can be read after restart\n\nIf we would try to write a torv3 subnet in addrv1 format, it would\nserialize as a dummy-all-0s IPv6 address and subsequently, when\ndeserialized will not result in the same subnet.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc28dc9a0c426af35c1ddbf7f98c4d20a340477a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc28dc9a0c426af35c1ddbf7f98c4d20a340477a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc28dc9a0c426af35c1ddbf7f98c4d20a340477a/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10b3e429a465f24d11fcc8660eda516346660136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b3e429a465f24d11fcc8660eda516346660136",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10b3e429a465f24d11fcc8660eda516346660136"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f588cbf67de6da55a4dbd9daeb3c691caa4f54a8",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc28dc9a0c426af35c1ddbf7f98c4d20a340477a/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc28dc9a0c426af35c1ddbf7f98c4d20a340477a/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=bc28dc9a0c426af35c1ddbf7f98c4d20a340477a",
        "patch": "@@ -51,12 +51,22 @@ def run_test(self):\n         ip_addr = \"1.2.3.4\"\n         assert(not self.is_banned(node, tor_addr))\n         assert(not self.is_banned(node, ip_addr))\n+\n         node.setban(tor_addr, \"add\")\n         assert(self.is_banned(node, tor_addr))\n         assert(not self.is_banned(node, ip_addr))\n+\n+        self.restart_node(1)\n+        assert(self.is_banned(node, tor_addr))\n+        assert(not self.is_banned(node, ip_addr))\n+\n         node.setban(tor_addr, \"remove\")\n         assert(not self.is_banned(self.nodes[1], tor_addr))\n         assert(not self.is_banned(node, ip_addr))\n \n+        self.restart_node(1)\n+        assert(not self.is_banned(self.nodes[1], tor_addr))\n+        assert(not self.is_banned(node, ip_addr))\n+\n if __name__ == '__main__':\n     SetBanTests().main()"
      }
    ]
  },
  {
    "sha": "e1fe6587056ecb0be70a8a93f349394b28746240",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWZlNjU4NzA1NmVjYjBiZTcwYThhOTNmMzQ5Mzk0YjI4NzQ2MjQw",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-06T14:07:37Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-11T16:30:29Z"
      },
      "message": "test: add test to ensure non-IP peers are properly misbehaved\n\nChange the `peer_discouragement` test to use `CNode` pointers so that\nthe nodes it uses can be added to `CConnman::vNodes` and cleaned up\nproperly. Make it use `CConnmanTest` instead of `CConnman`. This is\nneeded because we want to check `CNode::fDisconnect` and for this flag\nto be flipped by `CConnman::DisconnectNode()` the node must be in\n`CConnman::vNodes`.\n\nExtend the test with one torv3 peer and check that it is discouraged and\ndisconnected as expected.",
      "tree": {
        "sha": "b89fd74e58686b84177ba4396036224724f86df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b89fd74e58686b84177ba4396036224724f86df0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1fe6587056ecb0be70a8a93f349394b28746240",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl/8fSUACgkQVN8G9ktV\ny79btR/+PfjwxYce0PAomvazLQOfs4X793MB4IgYkpx0fyXvN1PeCisN5Vx+zzPb\nTpSBTb2gheX/5qpGGi7Vqe7zTNH/hAUq3qdhLjJqxsvR/I2w7ikwH0g1oQARggJK\ntcdtE8D9cqOM93Rs9mXSmEjBqaBnHROnbCa083Tm+Mu2lFKOYlXGHpOjhmvodqek\nXfaKPSLaXGGdDIoc6is8+1GesQbrT6o24PnC8LlKzzCzNJYNuiv/wdjrI2Q+02ja\nHJHWsltdL3mQdR3DK7Sdno4iERV48trN42wmFP3/nJUiz/klYxF85CneXDMiGJR+\nS/63KHAgrIItrSKq6MOR5CzYksL3kG+KsV1nsnoWbuRtm8jqFa11UDUiJI5Pmsht\nu7p9pNZgQ+/5wX/j7mu+OvB9Le1Epp0wniEkYWY8lA20kyJo+LCK1LhiuKhUEUyw\n+lcBLlny2SCVt2q92y5Eb+BbvnG2hJlfSNTozAgVbNHahPJyKDrkTV9QKNKJ+LZg\nVd2uIu4nvnU1O8vKa9p7JlDwhP6P/eJ2XvQE7AGPfXrqU4oiIgy2sGZXp0AevMAG\ns36Gwz6nLERbs/6sLqk+2CQHTFSGb7XMKK2Br90DW686jGe3AD4rvf0UpM6SFbaJ\n5jgfzPhnuAvGG6/SpeX/CXpQQovNh7Fdiowj1n2r1rPHan9IerZu5NfPnMLm1FDn\n+N96p1WP7NXoxDigO6R7w+p9V3gUG5XAouq2F12VOJOsIQ2XHV6Qz88/dXSv07hE\nIfy71HtM13eHaVb+q3Upd4yB53h8c+6/0g6NwFtaf+zbJcd1b+eiQSHhVz+f7B0j\nWTDYBBgiiHWgrdzfewAQPBO89YxXFbsTYsGrboohDsNK3KRtfmVuDV8TWZKRrhZ2\nF00WCOfeebrIuZm1gde02kwFlfO3AWkikE65fCT0B2LSgLUc0O5mSOTz8WvkzGnN\n2OKiBpmi3muRyq2Gro0ShinUWoPTXUKR4WXB6fiGbIbKboq8rZwcm+2PQ4mANT1H\nR91BoVnS7CSuwKoDxYr+Ug6Wx8rMJNNh89RdkftP615twpGo5SvhdtmxXwJ62bts\n3eFwNVJJvvlUkWin4JRLSHOjsSd6IZ+HFgk286UZd1Kz2G2EY1Gkix5pWRHPlb6w\nXpcSaXml40lE5aoBNj8ym+VUpLcgx8wt/x5pIjgd23ve3KstqZHl/MDhV4f5ZYaq\nd1pA1sTTExj0lzG73IKl7GI5Hf/JE2TZt/tMLokQk6t2NWG9Wt2h0TrbhpH/PYq+\nH6FtaGuqlDRu/GamldbgcjU8Mszo7Uyf6iIrZkvA5MD2tl7QqdPygoi/u3JWYusE\nNmkKyBjayn+zCREM74gFvu1BGzrDXA==\n=GjpB\n-----END PGP SIGNATURE-----",
        "payload": "tree b89fd74e58686b84177ba4396036224724f86df0\nparent bc28dc9a0c426af35c1ddbf7f98c4d20a340477a\nauthor Vasil Dimov <vd@FreeBSD.org> 1609942057 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1610382629 +0100\n\ntest: add test to ensure non-IP peers are properly misbehaved\n\nChange the `peer_discouragement` test to use `CNode` pointers so that\nthe nodes it uses can be added to `CConnman::vNodes` and cleaned up\nproperly. Make it use `CConnmanTest` instead of `CConnman`. This is\nneeded because we want to check `CNode::fDisconnect` and for this flag\nto be flipped by `CConnman::DisconnectNode()` the node must be in\n`CConnman::vNodes`.\n\nExtend the test with one torv3 peer and check that it is discouraged and\ndisconnected as expected.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1fe6587056ecb0be70a8a93f349394b28746240",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1fe6587056ecb0be70a8a93f349394b28746240",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1fe6587056ecb0be70a8a93f349394b28746240/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc28dc9a0c426af35c1ddbf7f98c4d20a340477a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc28dc9a0c426af35c1ddbf7f98c4d20a340477a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc28dc9a0c426af35c1ddbf7f98c4d20a340477a"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 59,
      "deletions": 22
    },
    "files": [
      {
        "sha": "119e2beecb85d3ede699a98ae8801e44e9e45a35",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 22,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1fe6587056ecb0be70a8a93f349394b28746240/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1fe6587056ecb0be70a8a93f349394b28746240/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=e1fe6587056ecb0be70a8a93f349394b28746240",
        "patch": "@@ -223,47 +223,84 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n+    auto connman = MakeUnique<CConnmanTest>(0x1337, 0x1337);\n     auto peerLogic = std::make_unique<PeerManager>(chainparams, *connman, banman.get(), *m_node.scheduler,\n                                                    *m_node.chainman, *m_node.mempool, false);\n \n+    std::vector<CNode*> nodes(3);\n+\n     banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::INBOUND);\n-    dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode1);\n-    dummyNode1.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode1.GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n+    nodes[0] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::INBOUND);\n+    nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[0]);\n+    nodes[0]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[0]);\n+    peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n     {\n-        LOCK(dummyNode1.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n+        LOCK(nodes[0]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n     }\n     BOOST_CHECK(banman->IsDiscouraged(addr1));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n     BOOST_CHECK(!banman->IsDiscouraged(ip(0xa0b0c001|0x0000ff00))); // Different IP, not discouraged\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", ConnectionType::INBOUND);\n-    dummyNode2.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode2);\n-    dummyNode2.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode2.GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n+    nodes[1] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", ConnectionType::INBOUND);\n+    nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[1]);\n+    nodes[1]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[1]);\n+    peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n     BOOST_CHECK(!banman->IsDiscouraged(addr2)); // 2 not discouraged yet...\n+    BOOST_CHECK(!nodes[1]->fDisconnect);\n     BOOST_CHECK(banman->IsDiscouraged(addr1));  // ... but 1 still should be\n-    peerLogic->Misbehaving(dummyNode2.GetId(), 1, /* message */ \"\");         // 2 reaches discouragement threshold\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    peerLogic->Misbehaving(nodes[1]->GetId(), 1, /* message */ \"\");         // 2 reaches discouragement threshold\n+    {\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n+    }\n+    // Expect both 1 and 2 to be discouraged now.\n+    BOOST_CHECK(banman->IsDiscouraged(addr1));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    BOOST_CHECK(banman->IsDiscouraged(addr2));\n+    BOOST_CHECK(nodes[1]->fDisconnect);\n+\n+    // Make sure non-IP peers get discouraged and disconnected properly.\n+\n+    CNetAddr tor_netaddr;\n+    BOOST_REQUIRE(\n+        tor_netaddr.SetSpecial(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"));\n+\n+    const CAddress addr3(CService(tor_netaddr, Params().GetDefaultPort()), NODE_NONE);\n+    nodes[2] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr3, 1, 1, CAddress(), \"\",\n+                         ConnectionType::OUTBOUND_FULL_RELAY);\n+    nodes[2]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[2]);\n+    connman->AddNode(*nodes[2]);\n+    nodes[2]->fSuccessfullyConnected = true;\n+    peerLogic->Misbehaving(nodes[2]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\");\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[2]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[2]));\n+    }\n+    BOOST_CHECK(banman->IsDiscouraged(addr1));\n+    BOOST_CHECK(banman->IsDiscouraged(addr2));\n+    BOOST_CHECK(banman->IsDiscouraged(addr3));\n+    for (CNode* node : nodes) {\n+        BOOST_CHECK(node->fDisconnect);\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // Expect both 1 and 2\n-    BOOST_CHECK(banman->IsDiscouraged(addr2));  // to be discouraged now\n \n     bool dummy;\n-    peerLogic->FinalizeNode(dummyNode1, dummy);\n-    peerLogic->FinalizeNode(dummyNode2, dummy);\n+    for (CNode* node : nodes) {\n+        peerLogic->FinalizeNode(*node, dummy);\n+    }\n+    connman->ClearNodes();\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)"
      }
    ]
  }
]