[
  {
    "sha": "6666ef13f167cfe880c2e94c09d003594d010cf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjY2ZWYxM2YxNjdjZmU4ODBjMmU5NGMwOWQwMDM1OTRkMDEwY2Yz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-03T13:46:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-20T15:24:17Z"
      },
      "message": "test: Properly document blockinfo size in miner_tests\n\nThis fixes a typo in the test documentation",
      "tree": {
        "sha": "3e16e90f3f20eee3c6d5831c898196ce46e95d70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e16e90f3f20eee3c6d5831c898196ce46e95d70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6666ef13f167cfe880c2e94c09d003594d010cf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjfRgv/UKGKtS4bvXUwCtEpuXAmF9pFUKr8KTGVSA8MYWXxNFTWv9Nj8x/XgvIS\npXYozbHru3e2JU+58OexvXCRlCokjIx2jTqr2ZNK5jnMMdw0NP63G0QkItpppilc\n0XVD4pD4unzpZfePsDtHdNTNHgTGSZHvNOP1P46ADAt8Lp7guvvBVWLXCh6HgF/t\nQGnmaN7OF/QIA4b7II0WyaMTmyS6q/DPqSKC7VjTSFETfNmehjpMYe0atYsIiaLk\nkH5DMN3y6T7l0/zQXP3tjO584XeETJMBPvMaB2kmeNcuP8S/f1DOn4BtRmxDiRed\nTkZVZP70qKxQte9c5Gy4qIcRf5fLb5/uzTh7joN8EbMbQcq/HFmjCO58nP9Fcqv1\n/61dg8N4a4QFTdwPgtryhq4pN4gV9C2M2+Ax3qStuPYOReTIRWIfw41XKDgbgNe5\nrhiPPHK8LczFWFymmNfKRsLSsTfiYN5dDo8vWkRpuryvQz/mjkVY77XcX6iEjcx7\niqB0nT+e\n=Ao4/\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e16e90f3f20eee3c6d5831c898196ce46e95d70\nparent 3e949380725ca32be6c9812a926727b0a45723a9\nauthor MarcoFalke <falke.marco@gmail.com> 1562161603 +0700\ncommitter MarcoFalke <falke.marco@gmail.com> 1576855457 +0700\n\ntest: Properly document blockinfo size in miner_tests\n\nThis fixes a typo in the test documentation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6666ef13f167cfe880c2e94c09d003594d010cf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6666ef13f167cfe880c2e94c09d003594d010cf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6666ef13f167cfe880c2e94c09d003594d010cf3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e949380725ca32be6c9812a926727b0a45723a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e949380725ca32be6c9812a926727b0a45723a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e949380725ca32be6c9812a926727b0a45723a9"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2b08e6a36c8cdbf023eb7eb3dd71022fdbb3867d",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6666ef13f167cfe880c2e94c09d003594d010cf3/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6666ef13f167cfe880c2e94c09d003594d010cf3/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=6666ef13f167cfe880c2e94c09d003594d010cf3",
        "patch": "@@ -56,8 +56,7 @@ static BlockAssembler AssemblerForTest(const CChainParams& params) {\n     return BlockAssembler(params, options);\n }\n \n-static\n-struct {\n+constexpr static struct {\n     unsigned char extranonce;\n     unsigned int nonce;\n } blockinfo[] = {\n@@ -225,7 +224,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n \n     // We can't make transactions until we have inputs\n-    // Therefore, load 100 blocks :)\n+    // Therefore, load 110 blocks :)\n+    static_assert(sizeof(blockinfo) / sizeof(*blockinfo) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n     for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)"
      }
    ]
  },
  {
    "sha": "faa92a2297b4a6aebdd58d1818c428f1c0346078",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE5MmEyMjk3YjRhNmFlYmRkNThkMTgxOGM0MjhmMWMwMzQ2MDc4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-17T00:11:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-22T23:12:10Z"
      },
      "message": "rpc: Remove mempool global from miner",
      "tree": {
        "sha": "37b1d8636d450c7887d36ce67074fdb5e97fb4b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37b1d8636d450c7887d36ce67074fdb5e97fb4b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa92a2297b4a6aebdd58d1818c428f1c0346078",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg+WQwAqCZOA0u4j1bsb73g3v8kOWwrN0kxX7tl8EhHWiUkGf83Rd4FGeocvWPZ\nqKMrC1Vhf8jEfHrk0BDv9jHPrGPA7rdQ4AhVIWDTo5U2/4Ak0myWgR69E+kWZGda\nu1W6Q3AdxFFLMovJ1t0z/v7E9TksOJeWL4FXu7mIQHgx/rp2TkVooe430XgWqIxO\n9ZINLfor75VFh2XN8toF61ib0hTtj5Euav05shWSyP+s2n0vCxzMZ4xYS2YIyojb\nvQRVeP5JJH2w9xDzZTg/0vGmT+RUVcl5zN4m9pU9XsddKylMuSejDeELfuR6VAOQ\nfU3zT5U1678rJbMy6DVVxSe/qOIGFrXvB9dR4yENNFBsFiWD7g4vXqegQ+PdgK77\nzx2C3mAqAbPWYzmz0Rh/nD1z5/fEUceWjso6QyARQTKZPr0Aih3uncRNDSqTFq3M\nxnEN2KEQD+adVD9ab05uxeeZulvcJfsqrglGyzPsGY+01EPWgn5Osujcgj78/3b5\nWslLeZI8\n=XUXi\n-----END PGP SIGNATURE-----",
        "payload": "tree 37b1d8636d450c7887d36ce67074fdb5e97fb4b4\nparent 6666ef13f167cfe880c2e94c09d003594d010cf3\nauthor MarcoFalke <falke.marco@gmail.com> 1576541504 +0700\ncommitter MarcoFalke <falke.marco@gmail.com> 1577056330 +0700\n\nrpc: Remove mempool global from miner\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa92a2297b4a6aebdd58d1818c428f1c0346078",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa92a2297b4a6aebdd58d1818c428f1c0346078",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa92a2297b4a6aebdd58d1818c428f1c0346078/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6666ef13f167cfe880c2e94c09d003594d010cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6666ef13f167cfe880c2e94c09d003594d010cf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6666ef13f167cfe880c2e94c09d003594d010cf3"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 92,
      "deletions": 53
    },
    "files": [
      {
        "sha": "745fd0966d6a69e9fa81c4938d2db1b86c55e35d",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -15,6 +15,8 @@\n #include <numeric>\n #include <regex>\n \n+const RegTestingSetup* g_testing_setup = nullptr;\n+\n void benchmark::ConsolePrinter::header()\n {\n     std::cout << \"# Benchmark, evals, iterations, total, min, max, median\" << std::endl;\n@@ -113,6 +115,8 @@ void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double\n \n     for (const auto& p : benchmarks()) {\n         RegTestingSetup test{};\n+        assert(g_testing_setup == nullptr);\n+        g_testing_setup = &test;\n         {\n             LOCK(cs_main);\n             assert(::ChainActive().Height() == 0);\n@@ -133,6 +137,7 @@ void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double\n             p.second.func(state);\n         }\n         printer.result(state);\n+        g_testing_setup = nullptr;\n     }\n \n     printer.footer();"
      },
      {
        "sha": "022c020e15fc1809711ae599b6eddecb25540331",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -14,6 +14,9 @@\n #include <boost/preprocessor/cat.hpp>\n #include <boost/preprocessor/stringize.hpp>\n \n+struct RegTestingSetup;\n+extern const RegTestingSetup* g_testing_setup; //!< A pointer to the current testing setup\n+\n // Simple micro-benchmarking framework; API mostly matches a subset of the Google Benchmark\n // framework (see https://github.com/google/benchmark)\n // Why not use the Google Benchmark framework? Because adding Yet Another Dependency"
      },
      {
        "sha": "a113a7382895828899bf1341d148c69be839c18b",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -6,6 +6,7 @@\n #include <consensus/validation.h>\n #include <crypto/sha256.h>\n #include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n #include <test/util/wallet.h>\n #include <txmempool.h>\n #include <validation.h>\n@@ -29,7 +30,7 @@ static void AssembleBlock(benchmark::State& state)\n     std::array<CTransactionRef, NUM_BLOCKS - COINBASE_MATURITY + 1> txs;\n     for (size_t b{0}; b < NUM_BLOCKS; ++b) {\n         CMutableTransaction tx;\n-        tx.vin.push_back(MineBlock(SCRIPT_PUB));\n+        tx.vin.push_back(MineBlock(g_testing_setup->m_node, SCRIPT_PUB));\n         tx.vin.back().scriptWitness = witness;\n         tx.vout.emplace_back(1337, SCRIPT_PUB);\n         if (NUM_BLOCKS - b >= COINBASE_MATURITY)\n@@ -46,7 +47,7 @@ static void AssembleBlock(benchmark::State& state)\n     }\n \n     while (state.KeepRunning()) {\n-        PrepareBlock(SCRIPT_PUB);\n+        PrepareBlock(g_testing_setup->m_node, SCRIPT_PUB);\n     }\n }\n "
      },
      {
        "sha": "da94afd62b82cb387614b80bd6f8aff9456fe374",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -7,6 +7,7 @@\n #include <node/context.h>\n #include <optional.h>\n #include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n #include <test/util/wallet.h>\n #include <validationinterface.h>\n #include <wallet/wallet.h>\n@@ -29,8 +30,8 @@ static void WalletBalance(benchmark::State& state, const bool set_dirty, const b\n     if (add_watchonly) importaddress(wallet, ADDRESS_WATCHONLY);\n \n     for (int i = 0; i < 100; ++i) {\n-        generatetoaddress(address_mine.get_value_or(ADDRESS_WATCHONLY));\n-        generatetoaddress(ADDRESS_WATCHONLY);\n+        generatetoaddress(g_testing_setup->m_node, address_mine.get_value_or(ADDRESS_WATCHONLY));\n+        generatetoaddress(g_testing_setup->m_node, ADDRESS_WATCHONLY);\n     }\n     SyncWithValidationInterfaceQueue();\n "
      },
      {
        "sha": "6f4e10b6ed6bc07842f605542330707f69a9192d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -45,7 +45,9 @@ BlockAssembler::Options::Options() {\n     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n }\n \n-BlockAssembler::BlockAssembler(const CChainParams& params, const Options& options) : chainparams(params)\n+BlockAssembler::BlockAssembler(const CTxMemPool& mempool, const CChainParams& params, const Options& options)\n+    : chainparams(params),\n+      m_mempool(mempool)\n {\n     blockMinFeeRate = options.blockMinFeeRate;\n     // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n@@ -67,7 +69,8 @@ static BlockAssembler::Options DefaultOptions()\n     return options;\n }\n \n-BlockAssembler::BlockAssembler(const CChainParams& params) : BlockAssembler(params, DefaultOptions()) {}\n+BlockAssembler::BlockAssembler(const CTxMemPool& mempool, const CChainParams& params)\n+    : BlockAssembler(mempool, params, DefaultOptions()) {}\n \n void BlockAssembler::resetBlock()\n {\n@@ -103,7 +106,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxFees.push_back(-1); // updated at end\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n-    LOCK2(cs_main, mempool.cs);\n+    LOCK2(cs_main, m_mempool.cs);\n     CBlockIndex* pindexPrev = ::ChainActive().Tip();\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n@@ -236,7 +239,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n     int nDescendantsUpdated = 0;\n     for (CTxMemPool::txiter it : alreadyAdded) {\n         CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n+        m_mempool.CalculateDescendants(it, descendants);\n         // Insert all descendants (not yet in block) into the modified set\n         for (CTxMemPool::txiter desc : descendants) {\n             if (alreadyAdded.count(desc))\n@@ -268,7 +271,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n // cached size/sigops/fee values that are not actually correct.\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n-    assert (it != mempool.mapTx.end());\n+    assert(it != m_mempool.mapTx.end());\n     return mapModifiedTx.count(it) || inBlock.count(it) || failedTx.count(it);\n }\n \n@@ -305,7 +308,7 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n     // and modifying them for their already included ancestors\n     UpdatePackagesForAdded(inBlock, mapModifiedTx);\n \n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n+    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = m_mempool.mapTx.get<ancestor_score>().begin();\n     CTxMemPool::txiter iter;\n \n     // Limit the number of attempts to add transactions to the block when it is\n@@ -314,11 +317,10 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty())\n-    {\n+    while (mi != m_mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n         // First try to find a new transaction in mapTx to evaluate.\n-        if (mi != mempool.mapTx.get<ancestor_score>().end() &&\n-                SkipMapTxEntry(mempool.mapTx.project<0>(mi), mapModifiedTx, failedTx)) {\n+        if (mi != m_mempool.mapTx.get<ancestor_score>().end() &&\n+            SkipMapTxEntry(m_mempool.mapTx.project<0>(mi), mapModifiedTx, failedTx)) {\n             ++mi;\n             continue;\n         }\n@@ -328,13 +330,13 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n         bool fUsingModified = false;\n \n         modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n+        if (mi == m_mempool.mapTx.get<ancestor_score>().end()) {\n             // We're out of entries in mapTx; use the entry from mapModifiedTx\n             iter = modit->iter;\n             fUsingModified = true;\n         } else {\n             // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n+            iter = m_mempool.mapTx.project<0>(mi);\n             if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n                     CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n                 // The best entry in mapModifiedTx has higher score\n@@ -389,7 +391,7 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n         CTxMemPool::setEntries ancestors;\n         uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n         std::string dummy;\n-        mempool.CalculateMemPoolAncestors(*iter, ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n+        m_mempool.CalculateMemPoolAncestors(*iter, ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n \n         onlyUnconfirmed(ancestors);\n         ancestors.insert(iter);"
      },
      {
        "sha": "cc8fc31a9fc66643578bf1e6377c52c566c4c01b",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -147,6 +147,7 @@ class BlockAssembler\n     int nHeight;\n     int64_t nLockTimeCutoff;\n     const CChainParams& chainparams;\n+    const CTxMemPool& m_mempool;\n \n public:\n     struct Options {\n@@ -155,8 +156,8 @@ class BlockAssembler\n         CFeeRate blockMinFeeRate;\n     };\n \n-    explicit BlockAssembler(const CChainParams& params);\n-    BlockAssembler(const CChainParams& params, const Options& options);\n+    explicit BlockAssembler(const CTxMemPool& mempool, const CChainParams& params);\n+    explicit BlockAssembler(const CTxMemPool& mempool, const CChainParams& params, const Options& options);\n \n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n@@ -175,7 +176,7 @@ class BlockAssembler\n     /** Add transactions based on feerate including unconfirmed ancestors\n       * Increments nPackagesSelected / nDescendantsUpdated with corresponding\n       * statistics from the package selection (for logging statistics). */\n-    void addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs);\n+    void addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated) EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);\n \n     // helper functions for addPackageTxs()\n     /** Remove confirmed (inBlock) entries from given set */\n@@ -189,13 +190,13 @@ class BlockAssembler\n     bool TestPackageTransactions(const CTxMemPool::setEntries& package);\n     /** Return true if given transaction from mapTx has already been evaluated,\n       * or if the transaction's cached data in mapTx is incorrect. */\n-    bool SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs);\n+    bool SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set& mapModifiedTx, CTxMemPool::setEntries& failedTx) EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);\n     /** Sort the package in an order that is valid to appear in a block */\n     void SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries);\n     /** Add descendants of given transactions to mapModifiedTx with ancestor\n       * state updated assuming given transactions are inBlock. Returns number\n       * of updated descendants. */\n-    int UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded, indexed_modified_transaction_set &mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs);\n+    int UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded, indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);\n };\n \n /** Modify the extranonce in a block */"
      },
      {
        "sha": "ea7dcf79c219a6ce38b88e16350103c0bc666157",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -102,7 +102,7 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n }\n \n-static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, uint64_t nMaxTries)\n+static UniValue generateBlocks(const CTxMemPool& mempool, const CScript& coinbase_script, int nGenerate, uint64_t nMaxTries)\n {\n     int nHeightEnd = 0;\n     int nHeight = 0;\n@@ -116,7 +116,7 @@ static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, ui\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd && !ShutdownRequested())\n     {\n-        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbase_script));\n+        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(mempool, Params()).CreateNewBlock(coinbase_script));\n         if (!pblocktemplate.get())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n@@ -179,9 +179,11 @@ static UniValue generatetodescriptor(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n     }\n \n+    const CTxMemPool& mempool = EnsureMemPool();\n+\n     CHECK_NONFATAL(coinbase_script.size() == 1);\n \n-    return generateBlocks(coinbase_script.at(0), num_blocks, max_tries);\n+    return generateBlocks(mempool, coinbase_script.at(0), num_blocks, max_tries);\n }\n \n static UniValue generatetoaddress(const JSONRPCRequest& request)\n@@ -215,9 +217,11 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address\");\n     }\n \n+    const CTxMemPool& mempool = EnsureMemPool();\n+\n     CScript coinbase_script = GetScriptForDestination(destination);\n \n-    return generateBlocks(coinbase_script, nGenerate, nMaxTries);\n+    return generateBlocks(mempool, coinbase_script, nGenerate, nMaxTries);\n }\n \n static UniValue getmininginfo(const JSONRPCRequest& request)\n@@ -548,7 +552,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n \n         // Create new block\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = BlockAssembler(Params()).CreateNewBlock(scriptDummy);\n+        pblocktemplate = BlockAssembler(mempool, Params()).CreateNewBlock(scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n "
      },
      {
        "sha": "79e18cd2c0487513bbff0799753978afbc90dc0e",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -18,6 +18,11 @@\n \n BOOST_AUTO_TEST_SUITE(blockfilter_index_tests)\n \n+struct BuildChainTestingSetup : public TestChain100Setup {\n+    CBlock CreateBlock(const CBlockIndex* prev, const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey);\n+    bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key, size_t length, std::vector<std::shared_ptr<CBlock>>& chain);\n+};\n+\n static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,\n                                uint256& last_header)\n {\n@@ -52,12 +57,12 @@ static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex\n     return true;\n }\n \n-static CBlock CreateBlock(const CBlockIndex* prev,\n-                          const std::vector<CMutableTransaction>& txns,\n-                          const CScript& scriptPubKey)\n+CBlock BuildChainTestingSetup::CreateBlock(const CBlockIndex* prev,\n+    const std::vector<CMutableTransaction>& txns,\n+    const CScript& scriptPubKey)\n {\n     const CChainParams& chainparams = Params();\n-    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(*m_node.mempool, chainparams).CreateNewBlock(scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n     block.hashPrevBlock = prev->GetBlockHash();\n     block.nTime = prev->nTime + 1;\n@@ -76,8 +81,10 @@ static CBlock CreateBlock(const CBlockIndex* prev,\n     return block;\n }\n \n-static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,\n-                       size_t length, std::vector<std::shared_ptr<CBlock>>& chain)\n+bool BuildChainTestingSetup::BuildChain(const CBlockIndex* pindex,\n+    const CScript& coinbase_script_pub_key,\n+    size_t length,\n+    std::vector<std::shared_ptr<CBlock>>& chain)\n {\n     std::vector<CMutableTransaction> no_txns;\n \n@@ -95,7 +102,7 @@ static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script\n     return true;\n }\n \n-BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n+BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n {\n     BlockFilterIndex filter_index(BlockFilterType::BASIC, 1 << 20, true);\n "
      },
      {
        "sha": "9f3ca872069232383203d685414b89b08b87fd65",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -30,6 +30,7 @@ struct MinerTestingSetup : public TestingSetup {\n     {\n         return CheckSequenceLocks(*m_node.mempool, tx, flags);\n     }\n+    BlockAssembler AssemblerForTest(const CChainParams& params);\n };\n } // namespace miner_tests\n \n@@ -48,12 +49,13 @@ class HasReason {\n \n static CFeeRate blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n \n-static BlockAssembler AssemblerForTest(const CChainParams& params) {\n+BlockAssembler MinerTestingSetup::AssemblerForTest(const CChainParams& params)\n+{\n     BlockAssembler::Options options;\n \n     options.nBlockMaxWeight = MAX_BLOCK_WEIGHT;\n     options.blockMinFeeRate = blockMinFeeRate;\n-    return BlockAssembler(params, options);\n+    return BlockAssembler(*m_node.mempool, params, options);\n }\n \n constexpr static struct {"
      },
      {
        "sha": "1df6844062c70a641c90882212f4b4cd89b50a95",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -8,22 +8,23 @@\n #include <consensus/merkle.h>\n #include <key_io.h>\n #include <miner.h>\n+#include <node/context.h>\n #include <pow.h>\n #include <script/standard.h>\n #include <validation.h>\n \n-CTxIn generatetoaddress(const std::string& address)\n+CTxIn generatetoaddress(const NodeContext& node, const std::string& address)\n {\n     const auto dest = DecodeDestination(address);\n     assert(IsValidDestination(dest));\n     const auto coinbase_script = GetScriptForDestination(dest);\n \n-    return MineBlock(coinbase_script);\n+    return MineBlock(node, coinbase_script);\n }\n \n-CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n+CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n {\n-    auto block = PrepareBlock(coinbase_scriptPubKey);\n+    auto block = PrepareBlock(node, coinbase_scriptPubKey);\n \n     while (!CheckProofOfWork(block->GetHash(), block->nBits, Params().GetConsensus())) {\n         ++block->nNonce;\n@@ -36,10 +37,11 @@ CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n     return CTxIn{block->vtx[0]->GetHash(), 0};\n }\n \n-std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey)\n+std::shared_ptr<CBlock> PrepareBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n {\n+    assert(node.mempool);\n     auto block = std::make_shared<CBlock>(\n-        BlockAssembler{Params()}\n+        BlockAssembler{*node.mempool, Params()}\n             .CreateNewBlock(coinbase_scriptPubKey)\n             ->block);\n "
      },
      {
        "sha": "5f250fffe8334048892f0ccdadc4057cc7bc5693",
        "filename": "src/test/util/mining.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/test/util/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/test/util/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.h?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -11,14 +11,15 @@\n class CBlock;\n class CScript;\n class CTxIn;\n+struct NodeContext;\n \n /** Returns the generated coin */\n-CTxIn MineBlock(const CScript& coinbase_scriptPubKey);\n+CTxIn MineBlock(const NodeContext&, const CScript& coinbase_scriptPubKey);\n \n /** Prepare a block to be mined */\n-std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey);\n+std::shared_ptr<CBlock> PrepareBlock(const NodeContext&, const CScript& coinbase_scriptPubKey);\n \n /** RPC-like helper function, returns the generated coin */\n-CTxIn generatetoaddress(const std::string& address);\n+CTxIn generatetoaddress(const NodeContext&, const std::string& address);\n \n #endif // BITCOIN_TEST_UTIL_MINING_H"
      },
      {
        "sha": "3bdf3485faa2c4cd72742d576ef047af1fcc4b14",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -175,7 +175,7 @@ TestChain100Setup::TestChain100Setup()\n CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n {\n     const CChainParams& chainparams = Params();\n-    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(*m_node.mempool, chainparams).CreateNewBlock(scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n \n     // Replace mempool-selected txns with just coinbase plus passed-in txns:"
      },
      {
        "sha": "dae389a167f632d5e402f3b2dfc83f1789d99b81",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa92a2297b4a6aebdd58d1818c428f1c0346078/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=faa92a2297b4a6aebdd58d1818c428f1c0346078",
        "patch": "@@ -20,7 +20,17 @@\n \n static const std::vector<unsigned char> V_OP_TRUE{OP_TRUE};\n \n-BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegTestingSetup)\n+namespace validation_block_tests {\n+struct MinerTestingSetup : public RegTestingSetup {\n+    std::shared_ptr<CBlock> Block(const uint256& prev_hash);\n+    std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash);\n+    std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash);\n+    std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock);\n+    void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks);\n+};\n+} // namespace validation_block_tests\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, MinerTestingSetup)\n \n struct TestSubscriber : public CValidationInterface {\n     uint256 m_expected_tip;\n@@ -49,15 +59,15 @@ struct TestSubscriber : public CValidationInterface {\n     }\n };\n \n-std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+std::shared_ptr<CBlock> MinerTestingSetup::Block(const uint256& prev_hash)\n {\n     static int i = 0;\n     static uint64_t time = Params().GenesisBlock().nTime;\n \n     CScript pubKey;\n     pubKey << i++ << OP_TRUE;\n \n-    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey);\n+    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(pubKey);\n     auto pblock = std::make_shared<CBlock>(ptemplate->block);\n     pblock->hashPrevBlock = prev_hash;\n     pblock->nTime = ++time;\n@@ -83,7 +93,7 @@ std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n     return pblock;\n }\n \n-std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)\n+std::shared_ptr<CBlock> MinerTestingSetup::FinalizeBlock(std::shared_ptr<CBlock> pblock)\n {\n     LOCK(cs_main); // For LookupBlockIndex\n     GenerateCoinbaseCommitment(*pblock, LookupBlockIndex(pblock->hashPrevBlock), Params().GetConsensus());\n@@ -98,13 +108,13 @@ std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)\n }\n \n // construct a valid block\n-std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+std::shared_ptr<const CBlock> MinerTestingSetup::GoodBlock(const uint256& prev_hash)\n {\n     return FinalizeBlock(Block(prev_hash));\n }\n \n // construct an invalid block (but with a valid header)\n-std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+std::shared_ptr<const CBlock> MinerTestingSetup::BadBlock(const uint256& prev_hash)\n {\n     auto pblock = Block(prev_hash);\n \n@@ -119,7 +129,7 @@ std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n     return ret;\n }\n \n-void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+void MinerTestingSetup::BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n {\n     if (height <= 0 || blocks.size() >= max_size) return;\n "
      }
    ]
  }
]