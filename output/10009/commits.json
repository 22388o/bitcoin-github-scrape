[
  {
    "sha": "3df45c674817776dd95f5188a6010e3305290a93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGY0NWM2NzQ4MTc3NzZkZDk1ZjUxODhhNjAxMGUzMzA1MjkwYTkz",
    "commit": {
      "author": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2017-03-16T08:09:51Z"
      },
      "committer": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2017-03-16T08:14:20Z"
      },
      "message": "[trivial] Fixed -Wshadow warnings",
      "tree": {
        "sha": "daedda4b7178ca833b46f316e031fd5b2d3b8ab4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/daedda4b7178ca833b46f316e031fd5b2d3b8ab4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3df45c674817776dd95f5188a6010e3305290a93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3df45c674817776dd95f5188a6010e3305290a93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3df45c674817776dd95f5188a6010e3305290a93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3df45c674817776dd95f5188a6010e3305290a93/comments",
    "author": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce01e6226ce52b88c644b0cb89852278edbdf33b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce01e6226ce52b88c644b0cb89852278edbdf33b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce01e6226ce52b88c644b0cb89852278edbdf33b"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 23,
      "deletions": 25
    },
    "files": [
      {
        "sha": "329f2e4d01fdb1d87a3ee142edc61ba9b58b7979",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df45c674817776dd95f5188a6010e3305290a93/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df45c674817776dd95f5188a6010e3305290a93/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=3df45c674817776dd95f5188a6010e3305290a93",
        "patch": "@@ -46,8 +46,8 @@ struct FakeCheckCheckCompletion {\n \n struct FailingCheck {\n     bool fails;\n-    FailingCheck(bool fails) : fails(fails){};\n-    FailingCheck() : fails(true){};\n+    FailingCheck(bool _fails) : fails(_fails){}\n+    FailingCheck() : fails(true){}\n     bool operator()()\n     {\n         return !fails;\n@@ -96,7 +96,7 @@ struct MemoryCheck {\n     };\n     ~MemoryCheck(){\n         fake_allocated_memory -= b;\n-    \n+\n     };\n     void swap(MemoryCheck& x) { std::swap(b, x.b); };\n };\n@@ -337,7 +337,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n     tg.join_all();\n }\n \n-// Test that a new verification cannot occur until all checks \n+// Test that a new verification cannot occur until all checks\n // have been destructed\n BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n {\n@@ -408,19 +408,20 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n         bool done_ack {false};\n         std::condition_variable cv;\n         {\n+            auto t = [&]{\n+                CCheckQueueControl<FakeCheck> control(queue.get());\n+                std::unique_lock<std::mutex> l(m);\n+                has_lock = true;\n+                cv.notify_one();\n+                cv.wait(l, [&]{return has_tried;});\n+                done = true;\n+                cv.notify_one();\n+                // Wait until the done is acknowledged\n+                //\n+                cv.wait(l, [&]{return done_ack;});\n+            };\n             std::unique_lock<std::mutex> l(m);\n-            tg.create_thread([&]{\n-                    CCheckQueueControl<FakeCheck> control(queue.get());\n-                    std::unique_lock<std::mutex> l(m);\n-                    has_lock = true;\n-                    cv.notify_one();\n-                    cv.wait(l, [&]{return has_tried;});\n-                    done = true;\n-                    cv.notify_one();\n-                    // Wait until the done is acknowledged\n-                    //\n-                    cv.wait(l, [&]{return done_ack;});\n-                    });\n+            tg.create_thread(t);\n             // Wait for thread to get the lock\n             cv.wait(l, [&](){return has_lock;});\n             bool fails = false;\n@@ -439,4 +440,3 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n     }\n }\n BOOST_AUTO_TEST_SUITE_END()\n-"
      },
      {
        "sha": "df7051bec72575ed8b849b26aff6629f81229302",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df45c674817776dd95f5188a6010e3305290a93/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df45c674817776dd95f5188a6010e3305290a93/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=3df45c674817776dd95f5188a6010e3305290a93",
        "patch": "@@ -80,9 +80,9 @@ template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt,\n     std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n     try { \\\n         _log_msg_ = tfm::format(__VA_ARGS__); \\\n-    } catch (tinyformat::format_error &e) { \\\n+    } catch (tinyformat::format_error &__e) { \\\n         /* Original format string will have newline so don't add one here */ \\\n-        _log_msg_ = \"Error \\\"\" + std::string(e.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n+        _log_msg_ = \"Error \\\"\" + std::string(__e.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n     } \\\n     LogPrintStr(_log_msg_); \\\n } while(0)\n@@ -94,9 +94,9 @@ template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt,\n } while(0)\n \n template<typename... Args>\n-bool error(const char* fmt, const Args&... args)\n+bool error(const char* fmt, Args... args)\n {\n-    LogPrintStr(\"ERROR: \" + tfm::format(fmt, args...) + \"\\n\");\n+    LogPrintStr(\"ERROR: \" + tfm::format(fmt, std::forward<Args>(args)...) + \"\\n\");\n     return false;\n }\n "
      },
      {
        "sha": "0dd79f7ce06b713b76a534e6dc8821ab34eb9d72",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df45c674817776dd95f5188a6010e3305290a93/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df45c674817776dd95f5188a6010e3305290a93/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=3df45c674817776dd95f5188a6010e3305290a93",
        "patch": "@@ -604,11 +604,9 @@ bool CDB::PeriodicFlush(std::string strFile)\n     {\n         // Don't do this if any databases are in use\n         int nRefCount = 0;\n-        std::map<std::string, int>::iterator mi = bitdb.mapFileUseCount.begin();\n-        while (mi != bitdb.mapFileUseCount.end())\n+        for (const std::pair<std::string, int>& mi : bitdb.mapFileUseCount)\n         {\n-            nRefCount += (*mi).second;\n-            mi++;\n+            nRefCount += mi.second;\n         }\n \n         if (nRefCount == 0)"
      }
    ]
  }
]