[
  {
    "sha": "c257a8c9a6397eee40734b235a4fdcb8045aec91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjU3YThjOWE2Mzk3ZWVlNDA3MzRiMjM1YTRmZGNiODA0NWFlYzkx",
    "commit": {
      "author": {
        "name": "Adam Weiss",
        "email": "adam@signal11.com",
        "date": "2015-06-02T19:24:53Z"
      },
      "committer": {
        "name": "Adam Weiss",
        "email": "adam@signal11.com",
        "date": "2015-06-03T17:25:33Z"
      },
      "message": "Prune: Support noncontiguous block files\n\nIn some corner cases, it may be possible for recent blocks to end up in\nthe same block file as much older blocks.  Previously, the pruning code\nwould stop looking for files to remove upon first encountering a file\ncontaining a block that cannot be pruned, now it will keep looking for\ncandidate files until the target is met and all other criteria are\nsatisfied.\n\nThis can result in a noncontiguous set of block files (by number) on\ndisk, which is fine except for during some reindex corner cases, so\nmake reindex preparation smarter such that we keep the data we can\nactually use and throw away the rest.  This allows pruning to work\ncorrectly while downloading any blocks needed during the reindex.",
      "tree": {
        "sha": "f47e8379f4de867f84e8cfeb2488318761539e59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f47e8379f4de867f84e8cfeb2488318761539e59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c257a8c9a6397eee40734b235a4fdcb8045aec91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c257a8c9a6397eee40734b235a4fdcb8045aec91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c257a8c9a6397eee40734b235a4fdcb8045aec91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c257a8c9a6397eee40734b235a4fdcb8045aec91/comments",
    "author": {
      "login": "ajweiss",
      "id": 430315,
      "node_id": "MDQ6VXNlcjQzMDMxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/430315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajweiss",
      "html_url": "https://github.com/ajweiss",
      "followers_url": "https://api.github.com/users/ajweiss/followers",
      "following_url": "https://api.github.com/users/ajweiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajweiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajweiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajweiss/subscriptions",
      "organizations_url": "https://api.github.com/users/ajweiss/orgs",
      "repos_url": "https://api.github.com/users/ajweiss/repos",
      "events_url": "https://api.github.com/users/ajweiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajweiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajweiss",
      "id": 430315,
      "node_id": "MDQ6VXNlcjQzMDMxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/430315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajweiss",
      "html_url": "https://github.com/ajweiss",
      "followers_url": "https://api.github.com/users/ajweiss/followers",
      "following_url": "https://api.github.com/users/ajweiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajweiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajweiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajweiss/subscriptions",
      "organizations_url": "https://api.github.com/users/ajweiss/orgs",
      "repos_url": "https://api.github.com/users/ajweiss/repos",
      "events_url": "https://api.github.com/users/ajweiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajweiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f00b62391b9317bf4c83676520fede1fb4027c43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f00b62391b9317bf4c83676520fede1fb4027c43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f00b62391b9317bf4c83676520fede1fb4027c43"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 38,
      "deletions": 19
    },
    "files": [
      {
        "sha": "6156fc3f56a328fa959f10aa4a3965a041652f41",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 17,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c257a8c9a6397eee40734b235a4fdcb8045aec91/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c257a8c9a6397eee40734b235a4fdcb8045aec91/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c257a8c9a6397eee40734b235a4fdcb8045aec91",
        "patch": "@@ -473,24 +473,43 @@ struct CImportingNow\n \n // If we're using -prune with -reindex, then delete block files that will be ignored by the\n // reindex.  Since reindexing works by starting at block file 0 and looping until a blockfile\n-// is missing, and since pruning works by deleting the oldest block file first, just check\n-// for block file 0, and if it doesn't exist, delete all the block files in the\n-// directory (since they won't be read by the reindex but will take up disk space).\n-void DeleteAllBlockFiles()\n+// is missing, do the same here to delete any later block files after a gap.  Also delete all\n+// rev files since they'll be rewritten by the reindex anyway.  This ensures that vinfoBlockFile\n+// is in sync with what's actually on disk by the time we start downloading, so that pruning\n+// works correctly.\n+void CleanupBlockRevFiles()\n {\n-    if (boost::filesystem::exists(GetBlockPosFilename(CDiskBlockPos(0, 0), \"blk\")))\n-        return;\n+    using namespace boost::filesystem;\n+    map<string, path> mapBlockFiles;\n+\n+    // Glob all blk?????.dat and rev?????.dat files from the blocks directory.\n+    // Remove the rev files immediately and insert the blk file paths into an\n+    // ordered map keyed by block file index.\n+    LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n+    path blocksdir = GetDataDir() / \"blocks\";\n+    for (directory_iterator it(blocksdir); it != directory_iterator(); it++) {\n+        if (is_regular_file(*it) &&\n+            it->path().filename().string().length() == 12 &&\n+            it->path().filename().string().substr(8,4) == \".dat\")\n+        {\n+            if (it->path().filename().string().substr(0,3) == \"blk\")\n+                mapBlockFiles[it->path().filename().string().substr(3,5)] = it->path();\n+            else if (it->path().filename().string().substr(0,3) == \"rev\")\n+                remove(it->path());\n+        }\n+    }\n \n-    LogPrintf(\"Removing all blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n-    boost::filesystem::path blocksdir = GetDataDir() / \"blocks\";\n-    for (boost::filesystem::directory_iterator it(blocksdir); it != boost::filesystem::directory_iterator(); it++) {\n-        if (is_regular_file(*it)) {\n-            if ((it->path().filename().string().length() == 12) &&\n-                (it->path().filename().string().substr(8,4) == \".dat\") &&\n-                ((it->path().filename().string().substr(0,3) == \"blk\") ||\n-                 (it->path().filename().string().substr(0,3) == \"rev\")))\n-                boost::filesystem::remove(it->path());\n+    // Remove all block files that aren't part of a contiguous set starting at\n+    // zero by walking the ordered map (keys are block file indices) by\n+    // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n+    // start removing block files.\n+    int nContigCounter = 0;\n+    BOOST_FOREACH(const PAIRTYPE(string, path)& item, mapBlockFiles) {\n+        if (atoi(item.first) == nContigCounter) {\n+            nContigCounter++;\n+            continue;\n         }\n+        remove(item.second);\n     }\n }\n \n@@ -1110,9 +1129,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 if (fReindex) {\n                     pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away all our block and undo data files\n+                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n                     if (fPruneMode)\n-                        DeleteAllBlockFiles();\n+                        CleanupBlockRevFiles();\n                 }\n \n                 if (!LoadBlockIndex()) {"
      },
      {
        "sha": "03a4082bba164b960948830605601f4d73460019",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c257a8c9a6397eee40734b235a4fdcb8045aec91/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c257a8c9a6397eee40734b235a4fdcb8045aec91/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c257a8c9a6397eee40734b235a4fdcb8045aec91",
        "patch": "@@ -3031,9 +3031,9 @@ void FindFilesToPrune(std::set<int>& setFilesToPrune)\n             if (nCurrentUsage + nBuffer < nPruneTarget)  // are we below our target?\n                 break;\n \n-            // don't prune files that could have a block within MIN_BLOCKS_TO_KEEP of the main chain's tip\n+            // don't prune files that could have a block within MIN_BLOCKS_TO_KEEP of the main chain's tip but keep scanning\n             if (vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune)\n-                break;\n+                continue;\n \n             PruneOneBlockFile(fileNumber);\n             // Queue up the files for removal"
      }
    ]
  }
]