jonatack,2021-10-05 19:43:25,This patch previously had 2 ACKs from @tryphe and @GeneFerneau (thanks!) in #22586.,https://github.com/bitcoin/bitcoin/pull/23197#issuecomment-934723415,934723415,
sipa,2021-10-05 22:27:37,How is it possible to construct `CNetMask` objects with non-CIDR mask?,https://github.com/bitcoin/bitcoin/pull/23197#issuecomment-934945008,934945008,
vasild,2021-11-19 13:10:49,"> How is it possible to construct `CNetMask` objects with non-CIDR mask?\n\nRight, how is that possible? The fuzzer uses [`ConsumeSubNet()`](https://github.com/bitcoin/bitcoin/blob/fe03f7a37fd0ef05149161f6b95a25493e1fe38f/src/test/fuzz/util.h#L242-L245) which calls this constructor: [`CSubNet(const CNetAddr& addr, uint8_t mask)`](https://github.com/bitcoin/bitcoin/blob/fe03f7a37fd0ef05149161f6b9",https://github.com/bitcoin/bitcoin/pull/23197#issuecomment-974058982,974058982,
MarcoFalke,2021-11-19 15:41:38,I already fixed this in  commit efd6f904c78769ad2e93c1f1de43014d284e7561,https://github.com/bitcoin/bitcoin/pull/23197#issuecomment-974181267,974181267,
vasild,2021-11-19 16:24:09,"Ok, the removed `CSubNet` unserialize method could have produced such a bricked `CSubNet` object (even with `valid` set to `true`).\n\nI removed the suppression and pushed to my personal CI at https://cirrus-ci.com/task/5343275400822784 and it is green.\n\nI think this PR should be reduced to just removing the suppression.",https://github.com/bitcoin/bitcoin/pull/23197#issuecomment-974215976,974215976,
MarcoFalke,2021-11-19 16:25:10,See #23553,https://github.com/bitcoin/bitcoin/pull/23197#issuecomment-974216728,974216728,
laanwj,2021-10-07 13:05:13,"- using -1 as special return value is *nasty*, let's turn this into `optional<int>`\n- is `break` a good way to handle invalid values? this will still return a ""valid"" but incorrect value; do we need any kind of error feedback to the caller?",https://github.com/bitcoin/bitcoin/pull/23197#discussion_r724159991,724159991,src/netaddress.cpp
vasild,2021-11-19 12:54:42,"`CSubNet::ToString()` probably needs something like the following at the start:\n\n```cpp\nif (!valid) {\n    return ""invalid subnet""; // or throw?\n}\n```\n\nAnd then, here, assert that `NetmaskBits()` always returns a good value.\n\nIn general, I don't like the notion of allowing objects that are not valid. I think it is clearer to never allow invalid objects in the first place - `thro",https://github.com/bitcoin/bitcoin/pull/23197#discussion_r753167341,753167341,src/netaddress.cpp
