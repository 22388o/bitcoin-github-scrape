eklitzke,2018-03-11T02:26:48Z,"This looks fine to me. It looks like the existing leak scenarios are for fatal errors, but more RAII pointer types is good in my opinion.\n\nIt's kind of weird that you're putting this in a `std::unique_ptr` and then later on giving the raw pointer to a `WalletRescanReserver()`; for that pattern I would have expected to see a `std::shared_ptr`. That being said `WalletRescanReserver()` looks like",https://github.com/bitcoin/bitcoin/pull/12647#issuecomment-372084114,372084114,
jimpo,2018-03-11T23:21:19Z,@eklitzke Thanks for the review. I think it is OK to use a `unique_ptr` there because `reserver` only exists within the lifetime of `walletInstance` so it will go out of scope before `walletInstance` releases or frees the allocated CWallet.,https://github.com/bitcoin/bitcoin/pull/12647#issuecomment-372159063,372159063,
promag,2018-03-13T14:18:51Z,utACK 7dc50d4. In the future we could move `CreateWalletFromFile` to `WalletManager` (introduced in ~~#12587~~ #13034).,https://github.com/bitcoin/bitcoin/pull/12647#issuecomment-372681020,372681020,
ryanofsky,2018-03-20T15:16:04Z,"> WalletRescanReserver() looks like kind of a mess in general (e.g. it uses a mutex to access fScanningWallet in reserve(), but not in isReserved()).\n\nThis should be fine because it's an atomic bool.",https://github.com/bitcoin/bitcoin/pull/12647#issuecomment-374635862,374635862,
MarcoFalke,2018-04-09T18:25:50Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/12647#issuecomment-379847913,379847913,
jimpo,2018-04-16T05:57:34Z,@MarcoFalke Rebased,https://github.com/bitcoin/bitcoin/pull/12647#issuecomment-381487946,381487946,
promag,2018-04-24T13:59:49Z,This conflicts with #13063. See [here](https://github.com/bitcoin/bitcoin/pull/13063/files#diff-b2bb174788c7409b671c46ccc86034bdR3925).,https://github.com/bitcoin/bitcoin/pull/12647#issuecomment-383941581,383941581,
jimpo,2018-04-24T17:53:06Z,"No one seems to care about this (myself included), so I'll just close in favor of #13063.",https://github.com/bitcoin/bitcoin/pull/12647#issuecomment-384022779,384022779,
promag,2018-03-11T18:57:58Z,Use MakeUnique?,https://github.com/bitcoin/bitcoin/pull/12647#discussion_r173665252,173665252,src/wallet/wallet.cpp
promag,2018-03-11T18:58:27Z,Release on return?,https://github.com/bitcoin/bitcoin/pull/12647#discussion_r173665264,173665264,src/wallet/wallet.cpp
jimpo,2018-03-11T21:51:04Z,"Any particular reason? I did it this way so that it would be released before `RegisterValidationInterface` creates a global reference. Basically, if RegisterValidationInterface failed for some reason, a memory leak is probably better than a segfault. I don't feel too strongly though.",https://github.com/bitcoin/bitcoin/pull/12647#discussion_r173671198,173671198,src/wallet/wallet.cpp
jimpo,2018-03-12T00:51:21Z,"Why? This is exactly what MakeUnique does, except that this constructs one unique_ptr, whereas `std::unique_ptr<CWallet> walletInstance = MakeUnique<...>(...)` would construct two.",https://github.com/bitcoin/bitcoin/pull/12647#discussion_r173677594,173677594,src/wallet/wallet.cpp
promag,2018-03-12T01:19:06Z,Why do you say it would construct two?,https://github.com/bitcoin/bitcoin/pull/12647#discussion_r173678990,173678990,src/wallet/wallet.cpp
jimpo,2018-03-12T05:20:14Z,"`MakeUnique` constructs one (the right-hand side), then the left hand side is created using the move constructor.",https://github.com/bitcoin/bitcoin/pull/12647#discussion_r173696251,173696251,src/wallet/wallet.cpp
promag,2018-03-12T09:52:32Z,"I think the compiler will optimize the copy initialization. Anyway, there are [several advantages](https://stackoverflow.com/a/37514601) and we are using MakeUnique so that we can replace with std::make_unique when we switch to c++14.",https://github.com/bitcoin/bitcoin/pull/12647#discussion_r173739323,173739323,src/wallet/wallet.cpp
promag,2018-03-12T09:56:15Z,"> RegisterValidationInterface failed for some reason\n\nWe would want to shutdown no? Anyway leave as it is then.",https://github.com/bitcoin/bitcoin/pull/12647#discussion_r173740488,173740488,src/wallet/wallet.cpp
jimpo,2018-03-12T15:45:48Z,"Ah, you're right about the compiler optimization. Didn't realize that. http://en.cppreference.com/w/cpp/language/copy_elision",https://github.com/bitcoin/bitcoin/pull/12647#discussion_r173844570,173844570,src/wallet/wallet.cpp
ryanofsky,2018-03-15T17:56:46Z,"I don't think you want to move the m_last_block_processed line above, because rescan code below will access it.\n\nI'm also not sure it's a great idea to be moving the `RegisterValidationInterface` call. It may work for now, but create a race condition if we allow loading wallets after node startup (see #10740).\n\nI think I'd suggest a more limited change than what's implemented here:\n\n* ",https://github.com/bitcoin/bitcoin/pull/12647#discussion_r174875670,174875670,src/wallet/wallet.cpp
jimpo,2018-03-16T23:18:21Z,"I don't see where `m_last_block_processed` is accessed in the rescan code. It seems to me it's just used to implement `BlockUntilSyncedToCurrentChain`.\n\nThe RegisterValidationInterface call is tricky. I agree moving it down only works if the wallets are all loaded *before* the Connman starts, as is the case right now, but it would break if wallets are loaded/unloaded via RPC. Once way to handl",https://github.com/bitcoin/bitcoin/pull/12647#discussion_r175234932,175234932,src/wallet/wallet.cpp
ryanofsky,2018-03-20T15:12:19Z,"https://github.com/bitcoin/bitcoin/pull/12647#discussion_r174875670\n\n> I don't see where m_last_block_processed is accessed in the rescan code. It seems to me it's just used to implement BlockUntilSyncedToCurrentChain.\n\nYou're right. I misremembered and it should be fine to move this, if that's desirable.\n\n>  Once way to handle it could be to call UnregisterValidationInterface in the C",https://github.com/bitcoin/bitcoin/pull/12647#discussion_r175803851,175803851,src/wallet/wallet.cpp
ryanofsky,2018-04-06T15:17:02Z,"I think this doesn't work because UnregisterValidationInterface tries to call virtual methods, which isn't something you can do in c++ in the middle of object destruction. I ran into this problem in #10973\n\nhttps://github.com/bitcoin/bitcoin/blob/0bdf0e330d5d16e8e6a93d7d4ad663db812c4c91/src/interface/chain.cpp#L163-L169\n\n",https://github.com/bitcoin/bitcoin/pull/12647#discussion_r179790601,179790601,src/wallet/wallet.h
jimpo,2018-04-06T21:54:26Z,"Hmm, so then should I revert to the version where the Register call was moved to the bottom of the method?",https://github.com/bitcoin/bitcoin/pull/12647#discussion_r179884852,179884852,src/wallet/wallet.h
ryanofsky,2018-04-10T11:36:09Z,"> Hmm, so then should I revert to the version where the Register call was moved to the bottom of the method?\n\nIIRC the problem with moving the registration is that it creates potential for race conditions if the code is called at any time other than startup, which is something that's been attempted in prs like #10740 (and I also want to support in #10102).\n\nI think I'd recommend just fixin",https://github.com/bitcoin/bitcoin/pull/12647#discussion_r180386932,180386932,src/wallet/wallet.h
jimpo,2018-04-16T05:57:18Z,Is there actually a potential for race conditions? The function locks cs_main before the rescan logic and before the `RegisterValidationInterface` call even before it was moved.,https://github.com/bitcoin/bitcoin/pull/12647#discussion_r181628084,181628084,src/wallet/wallet.h
