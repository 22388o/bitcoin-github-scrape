[
  {
    "sha": "5799e57b128e293aa4a133245bd33e9a73eb3cef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Nzk5ZTU3YjEyOGUyOTNhYTRhMTMzMjQ1YmQzM2U5YTczZWIzY2Vm",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-03-07T18:28:50Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-18T17:20:25Z"
      },
      "message": "wallet: Fix possible memory leak in CreateWalletFromFile.\n\nIf there was an error loading the wallet after creating the instance,\nthe instance would leak. This uses RAII to ensure the instance is\ncleaned up in that case.",
      "tree": {
        "sha": "f2c881651c39bf6e0a515782c8a4f9e93f089754",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2c881651c39bf6e0a515782c8a4f9e93f089754"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5799e57b128e293aa4a133245bd33e9a73eb3cef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5799e57b128e293aa4a133245bd33e9a73eb3cef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5799e57b128e293aa4a133245bd33e9a73eb3cef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5799e57b128e293aa4a133245bd33e9a73eb3cef/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "615f7c288414a89cd1dec1d67e0f84abe2fb4c6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/615f7c288414a89cd1dec1d67e0f84abe2fb4c6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/615f7c288414a89cd1dec1d67e0f84abe2fb4c6d"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "3b4b4e13040e93abfd19d8aafeda6a9411059669",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5799e57b128e293aa4a133245bd33e9a73eb3cef/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5799e57b128e293aa4a133245bd33e9a73eb3cef/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5799e57b128e293aa4a133245bd33e9a73eb3cef",
        "patch": "@@ -3947,7 +3947,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n-    CWallet *walletInstance = new CWallet(name, WalletDatabase::Create(path));\n+    std::unique_ptr<CWallet> walletInstance = MakeUnique<CWallet>(name, WalletDatabase::Create(path));\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n     {\n@@ -4058,9 +4058,6 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n             pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n     }\n \n-    walletInstance->m_last_block_processed = chainActive.Tip();\n-    RegisterValidationInterface(walletInstance);\n-\n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n     {\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n@@ -4089,7 +4086,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n \n         nStart = GetTimeMillis();\n         {\n-            WalletRescanReserver reserver(walletInstance);\n+            WalletRescanReserver reserver(walletInstance.get());\n             if (!reserver.reserve()) {\n                 InitError(_(\"Failed to rescan the wallet during initialization\"));\n                 return nullptr;\n@@ -4134,7 +4131,11 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         LogPrintf(\"mapAddressBook.size() = %u\\n\",  walletInstance->mapAddressBook.size());\n     }\n \n-    return walletInstance;\n+    walletInstance->m_last_block_processed = chainActive.Tip();\n+\n+    CWallet* wallet_raw_ptr = walletInstance.release();\n+    RegisterValidationInterface(wallet_raw_ptr);\n+    return wallet_raw_ptr;\n }\n \n std::atomic<bool> CWallet::fFlushScheduled(false);"
      }
    ]
  }
]