[
  {
    "sha": "a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWY1YTJjZTUzNjIyYjhkMmUzZmRhNjU5ZTQ5N2Q0N2M1ZDE2NGIw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-05-06T03:49:18Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-11-29T08:52:13Z"
      },
      "message": "[rpc] Fix fVerbose parsing (remove excess if cases).",
      "tree": {
        "sha": "da51794016e95247fe7fd8611cb595aa30b92835",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da51794016e95247fe7fd8611cb595aa30b92835"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAloedT0ACgkQV692LbM1\nMyLXfg/7BQlzrHy12nTdhub/XXE0kq3bxGiTUmNGYNUXqqhDmCzAUH89dJ59D26E\nxvHG1WW+xY0pTrQFZlU5LRHztx4jeZIfnRn+5K44+Vx/EWgcwArMHNN8Gxn/NHga\njOj1aM2BqGkW//3Li2mwxD5kB+Bk25RQxaxZboEhiFhIbS/IQKfVc7hYwgeETuus\nKAOSG8FGyQaybt5KRqWTNsGeWBA1YY09BP0dwREsV4vhrh/n1dagkHVsPjA4TBXY\nMnQ5qPl0a3RCFJS9dyip+4NcRVQeZm+9RNvGd9u89M4VZpKaxU3XCyn9zLDM166H\nBVBUI8xbAZR7SrBi9WnVF+Pp8nxRu3OyfwkJ9UHqyDg1+lG8zN084Vw5lLWu99cI\nrcgVxfQU150ydi/RV/4EjFsGNynPEYNnpvIDo9RMu2Y/b21pGReQYgunZYVXnbA/\n8YxXW1Y6yDIcDZb/HSPnDr4COAOAZmCCGZcrL0li1BO1RCi/99JivH3Q0eOD6Pbg\n1a2xD43Y56u+daqh/y+r7gplTBEa4QuA1S9/G60nxvbXNqX2pHmy6NNo8bIMrMxk\nt8btK7NVeWsYgiVRjbn7SCmKYpxCuU1Ng+XSmk7SwL4mQ48FbEH2TSITa5g7Cjhp\n8n6DPIcvkEtlEksrkpNWr2Q2P5m28U4kLMWcpGaV0cDBKsgBRZU=\n=kjAM\n-----END PGP SIGNATURE-----",
        "payload": "tree da51794016e95247fe7fd8611cb595aa30b92835\nparent 26efc220a13aa3413f6e55e311e8991445104f82\nauthor Karl-Johan Alm <kalle.alm@gmail.com> 1494042558 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1511945533 +0900\n\n[rpc] Fix fVerbose parsing (remove excess if cases).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26efc220a13aa3413f6e55e311e8991445104f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26efc220a13aa3413f6e55e311e8991445104f82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26efc220a13aa3413f6e55e311e8991445104f82"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 4,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5d558d8bf999bfab476024749551348d1eb2809e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 13,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
        "patch": "@@ -141,19 +141,7 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n     // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n     bool fVerbose = false;\n     if (!request.params[1].isNull()) {\n-        if (request.params[1].isNum()) {\n-            if (request.params[1].get_int() != 0) {\n-                fVerbose = true;\n-            }\n-        }\n-        else if(request.params[1].isBool()) {\n-            if(request.params[1].isTrue()) {\n-                fVerbose = true;\n-            }\n-        }\n-        else {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid type provided. Verbose parameter must be a boolean.\");\n-        }\n+        fVerbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n     }\n \n     CTransactionRef tx;"
      },
      {
        "sha": "34e1e8ece62c436ed652ce2ecc9bc7c18a0a0804",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
        "patch": "@@ -188,13 +188,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      }
    ]
  },
  {
    "sha": "b16795167704687d908f881dacf04d388db28cb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTY3OTUxNjc3MDQ2ODdkOTA4Zjg4MWRhY2YwNGQzODhkYjI4Y2Iz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-25T08:29:24Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-12-05T02:03:24Z"
      },
      "message": "[rpc] Allow getrawtransaction to take optional blockhash to fetch transaction from a block directly.",
      "tree": {
        "sha": "bfb5add6adda1dae80bf8e077df55f752866b7ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfb5add6adda1dae80bf8e077df55f752866b7ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b16795167704687d908f881dacf04d388db28cb3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlol/mwACgkQV692LbM1\nMyIKFQ/+N8G8wqkT0orEWUctd7DBdnewiYA/W4EZSypKiT40XehoCMrXHzkesxwp\nWQm/zYn2x1pVAtz273d9Hdo/CdeV/2AUmAzhdFdfo3Tuq86kGqMFNhL0dErhTe70\npS2QjnHCvsOCqCV+UxAAwfudlKVqT1YYoUdRSCbSpYTHnJId9clp3ndZtmnGNpNQ\n+kD6CWjQxXqcJQQwaidIbJ0q1ykc5aBSk3TYgQmJi2kfLSEFQINlPJXDardCaa+t\nwdDtiperQT1dv0OfWzeyOIQnglYtycmcVfbP0vCNcuACbcam6g4xma3rnAtKBeaI\nTEnDTF4OZ0tVJ3MCi/4az53KVTVsZIlPGAPThBUh/UH9UYar2GpAUiks72upP66p\neuynVSbinl3vfan4YkJJUcDbtjgWUX8lIoSk4KHiq2XhXlwZTBRMqJCKhjsOfA/o\nUQNIwIclh46eRpxsFwYXgiAmI1xtQAKuZijiWxo3Ym3A2TEn8TPQRhTqQuek25sl\nGzVjoKzKgP9aLmGxGvPgNyzTKrTfcv5eb+FtFPcNSwg7byuV0/sKwd+t0Ain3+H3\niJ/hMv73Ar060+ejRbWC4A+hMfx8M3Aomn0H6qVrz8o3AlvILpBqtAEpVASOSJAd\nnPxwrvq9x6JI1/zQdSjQeeMp4SWSw1swJNewUq82xmgFQa/hIzQ=\n=zS/R\n-----END PGP SIGNATURE-----",
        "payload": "tree bfb5add6adda1dae80bf8e077df55f752866b7ea\nparent a5f5a2ce53622b8d2e3fda659e497d47c5d164b0\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1493108964 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1512439404 +0900\n\n[rpc] Allow getrawtransaction to take optional blockhash to fetch transaction from a block directly.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b16795167704687d908f881dacf04d388db28cb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b16795167704687d908f881dacf04d388db28cb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b16795167704687d908f881dacf04d388db28cb3/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 83,
      "deletions": 46
    },
    "files": [
      {
        "sha": "b26f10e476fbb60511669ad7594deea67d1542ac",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 12,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16795167704687d908f881dacf04d388db28cb3/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16795167704687d908f881dacf04d388db28cb3/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=b16795167704687d908f881dacf04d388db28cb3",
        "patch": "@@ -64,12 +64,15 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n \n UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"getrawtransaction \\\"txid\\\" ( verbose )\\n\"\n+            \"getrawtransaction \\\"txid\\\" ( verbose \\\"blockhash\\\" )\\n\"\n \n             \"\\nNOTE: By default this function only works for mempool transactions. If the -txindex option is\\n\"\n-            \"enabled, it also works for blockchain transactions.\\n\"\n+            \"enabled, it also works for blockchain transactions. If the block which contains the transaction\\n\"\n+            \"is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is\\n\"\n+            \"provided, only that block will be searched and if the transaction is in the mempool or other\\n\"\n+            \"blocks, or if this node does not have the given block available, the transaction will not be found.\\n\"\n             \"DEPRECATED: for now, it also works for transactions with unspent outputs.\\n\"\n \n             \"\\nReturn the raw transaction data.\\n\"\n@@ -78,13 +81,15 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"      (string, required) The transaction id\\n\"\n-            \"2. verbose       (bool, optional, default=false) If false, return a string, otherwise return a json object\\n\"\n+            \"2. verbose     (bool, optional, default=false) If false, return a string, otherwise return a json object\\n\"\n+            \"3. \\\"blockhash\\\" (string, optional) The block in which to look for the transaction\\n\"\n \n             \"\\nResult (if verbose is not set or set to false):\\n\"\n             \"\\\"data\\\"      (string) The serialized, hex-encoded data for 'txid'\\n\"\n \n             \"\\nResult (if verbose is set to true):\\n\"\n             \"{\\n\"\n+            \"  \\\"in_active_chain\\\": b, (bool) Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\\n\"\n             \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n             \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n@@ -132,30 +137,58 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\"\")\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true\")\n             + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", true\")\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n         );\n \n     LOCK(cs_main);\n \n+    bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n+    CBlockIndex* blockindex = nullptr;\n \n     // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n     bool fVerbose = false;\n     if (!request.params[1].isNull()) {\n         fVerbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n     }\n \n+    if (!request.params[2].isNull()) {\n+        uint256 blockhash = ParseHashV(request.params[2], \"parameter 3\");\n+        if (!blockhash.IsNull()) {\n+            BlockMap::iterator it = mapBlockIndex.find(blockhash);\n+            if (it == mapBlockIndex.end()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n+            }\n+            blockindex = it->second;\n+            in_active_chain = chainActive.Contains(blockindex);\n+        }\n+    }\n+\n     CTransactionRef tx;\n-    uint256 hashBlock;\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true))\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n-            : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\") +\n-            \". Use gettransaction for wallet transactions.\");\n+    uint256 hash_block;\n+    if (!GetTransaction(hash, tx, Params().GetConsensus(), hash_block, true, blockindex)) {\n+        std::string errmsg;\n+        if (blockindex) {\n+            if (!(blockindex->nStatus & BLOCK_HAVE_DATA)) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n+            }\n+            errmsg = \"No such transaction found in the provided block\";\n+        } else {\n+            errmsg = fTxIndex\n+              ? \"No such mempool or blockchain transaction\"\n+              : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n+        }\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errmsg + \". Use gettransaction for wallet transactions.\");\n+    }\n \n-    if (!fVerbose)\n+    if (!fVerbose) {\n         return EncodeHexTx(*tx, RPCSerializationFlags());\n+    }\n \n     UniValue result(UniValue::VOBJ);\n-    TxToJSON(*tx, hashBlock, result);\n+    if (blockindex) result.push_back(Pair(\"in_active_chain\", in_active_chain));\n+    TxToJSON(*tx, hash_block, result);\n     return result;\n }\n \n@@ -983,7 +1016,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n   //  --------------------- ------------------------  -----------------------  ----------\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      {\"txid\",\"verbose\"} },\n+    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      {\"txid\",\"verbose\",\"blockhash\"} },\n     { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   {\"hexstring\"} },\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           {\"hexstring\"} },"
      },
      {
        "sha": "16d2ff2a50d9db8e81b62866d76e85e61f7c7d0e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 33,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16795167704687d908f881dacf04d388db28cb3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16795167704687d908f881dacf04d388db28cb3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b16795167704687d908f881dacf04d388db28cb3",
        "patch": "@@ -926,47 +926,51 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee);\n }\n \n-/** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n-bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n+/**\n+ * Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock.\n+ * If blockIndex is provided, the transaction is fetched from the corresponding block.\n+ */\n+bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, bool fAllowSlow, CBlockIndex* blockIndex)\n {\n-    CBlockIndex *pindexSlow = nullptr;\n+    CBlockIndex* pindexSlow = blockIndex;\n \n     LOCK(cs_main);\n \n-    CTransactionRef ptx = mempool.get(hash);\n-    if (ptx)\n-    {\n-        txOut = ptx;\n-        return true;\n-    }\n-\n-    if (fTxIndex) {\n-        CDiskTxPos postx;\n-        if (pblocktree->ReadTxIndex(hash, postx)) {\n-            CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n-            if (file.IsNull())\n-                return error(\"%s: OpenBlockFile failed\", __func__);\n-            CBlockHeader header;\n-            try {\n-                file >> header;\n-                fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n-                file >> txOut;\n-            } catch (const std::exception& e) {\n-                return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-            }\n-            hashBlock = header.GetHash();\n-            if (txOut->GetHash() != hash)\n-                return error(\"%s: txid mismatch\", __func__);\n+    if (!blockIndex) {\n+        CTransactionRef ptx = mempool.get(hash);\n+        if (ptx) {\n+            txOut = ptx;\n             return true;\n         }\n \n-        // transaction not found in index, nothing more can be done\n-        return false;\n-    }\n+        if (fTxIndex) {\n+            CDiskTxPos postx;\n+            if (pblocktree->ReadTxIndex(hash, postx)) {\n+                CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+                if (file.IsNull())\n+                    return error(\"%s: OpenBlockFile failed\", __func__);\n+                CBlockHeader header;\n+                try {\n+                    file >> header;\n+                    fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n+                    file >> txOut;\n+                } catch (const std::exception& e) {\n+                    return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+                }\n+                hashBlock = header.GetHash();\n+                if (txOut->GetHash() != hash)\n+                    return error(\"%s: txid mismatch\", __func__);\n+                return true;\n+            }\n \n-    if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n-        const Coin& coin = AccessByTxid(*pcoinsTip, hash);\n-        if (!coin.IsSpent()) pindexSlow = chainActive[coin.nHeight];\n+            // transaction not found in index, nothing more can be done\n+            return false;\n+        }\n+\n+        if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n+            const Coin& coin = AccessByTxid(*pcoinsTip, hash);\n+            if (!coin.IsSpent()) pindexSlow = chainActive[coin.nHeight];\n+        }\n     }\n \n     if (pindexSlow) {"
      },
      {
        "sha": "ec17d0d92d6dd24581fa0a4af0e6b38e32840914",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16795167704687d908f881dacf04d388db28cb3/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16795167704687d908f881dacf04d388db28cb3/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b16795167704687d908f881dacf04d388db28cb3",
        "patch": "@@ -273,7 +273,7 @@ void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256 &hash, CTransactionRef &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n+bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);"
      }
    ]
  },
  {
    "sha": "434526aba680cb73208e018a02827d51a71cfff6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzQ1MjZhYmE2ODBjYjczMjA4ZTAxOGEwMjgyN2Q1MWE3MWNmZmY2",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-05-08T04:24:32Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-12-05T03:28:06Z"
      },
      "message": "[test] Add tests for getrawtransaction with block hash.",
      "tree": {
        "sha": "bce9528d2ccc9b00087d85edb9dad6cb038e2a11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bce9528d2ccc9b00087d85edb9dad6cb038e2a11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/434526aba680cb73208e018a02827d51a71cfff6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlomEkYACgkQV692LbM1\nMyJL4g/6Aq99veUC1ND66szbpqT7x554rP56KSz3zK8nQ/Y2I9skl5Z+FN5ddZJU\nsaqZEo1GOO16tksYSvIPA2swwQqIdqBt+rbIh52AnxeMHM1kOC6nCVpaAHR3yOjQ\n6PJf+oyP6gYOLfCqqq5BZ4Uiq5VkWCTI7a18kJMzXyPbNmzS+pAs0fhLz2Risls1\nPdh/8kql+ADYp5S1ZoPTwcIxvnERX16Jud8hpNKZMBd6sk+jqXkvu1OTQMnHPjVj\nuyoQIwqNBqAi0W4L6ae9cb2Kei2dSoEXJxm1ZdCrshuFXyFKtfPA5bkWzGfieolc\nhAkuVeAssOgjOlfBc5+rsXEZVSjyWzC67gXRwrBD6zAl2BBO4f5PpaZHhs2470lk\njjpKWTIEsZtR82DD/ksCTLV+BPkXB3KLrgo2irwZQKFmOZLNM+vBghXicueCi6oa\ny1pDIiuFDJBlATF7kzi8usgLuWX8X/MVhX0+aqs29I8ebfA1qPFznQde7Vqrd19q\ncTwzH4CkYZf4wrS1WR63eLVraa+QyGAMLpdFgWU+RWzD5VY7OyEwNwQ9O4WzEoxa\nvPbmVdePiTbW5u8cbTpKky9j9FGif1br49tqPeMXHLMhQ6KS9MAHVwnEs4HRqioV\np6YuVvP+gXqgaipdjsr1Q883IY61RrRykluqJYRKuw9qb499rgg=\n=ezNd\n-----END PGP SIGNATURE-----",
        "payload": "tree bce9528d2ccc9b00087d85edb9dad6cb038e2a11\nparent b16795167704687d908f881dacf04d388db28cb3\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1494217472 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1512444486 +0900\n\n[test] Add tests for getrawtransaction with block hash.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434526aba680cb73208e018a02827d51a71cfff6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/434526aba680cb73208e018a02827d51a71cfff6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434526aba680cb73208e018a02827d51a71cfff6/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b16795167704687d908f881dacf04d388db28cb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b16795167704687d908f881dacf04d388db28cb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b16795167704687d908f881dacf04d388db28cb3"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "45d2410f8ba49cf2a9fe9b655eddfeaf28e1501f",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434526aba680cb73208e018a02827d51a71cfff6/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434526aba680cb73208e018a02827d51a71cfff6/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=434526aba680cb73208e018a02827d51a71cfff6",
        "patch": "@@ -50,6 +50,30 @@ def run_test(self):\n         # This will raise an exception since there are missing inputs\n         assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n \n+        #####################################\n+        # getrawtransaction with block hash #\n+        #####################################\n+\n+        # make a tx by sending then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_all()\n+        # We should be able to get the raw transaction by providing the correct block\n+        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n+        assert_equal(gottx['txid'], tx)\n+        assert_equal(gottx['in_active_chain'], True)\n+        # We should not have the 'in_active_chain' flag when we don't provide a block\n+        gottx = self.nodes[0].getrawtransaction(tx, True)\n+        assert_equal(gottx['txid'], tx)\n+        assert 'in_active_chain' not in gottx\n+        # We should not get the tx if we provide an unrelated block\n+        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n+        # An invalid block hash should raise the correct errors\n+        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, True)\n+        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n+        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n+        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n+\n         #########################\n         # RAW TX MULTISIG TESTS #\n         #########################"
      }
    ]
  }
]