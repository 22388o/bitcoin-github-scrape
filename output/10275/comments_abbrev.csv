jonasschnelli,2017-04-25T19:37:42Z,"Nice feature!\nI agree with @laanwj about the string parsing. The `<block>:<txid>` schematics looks good at first sight, but we are using JSON and should stay with JSON and don't add another form or key/value encoding.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-297141513,297141513,
kallewoof,2017-04-26T04:24:29Z,"Fair enough, I'll add a blockhash argument instead. I was kind of toying with the idea of a new standard for referencing transactions which included the block height (not hash) so everyone could always find a tx presuming they had the block in question, and that thought sort of seeped in here.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-297234272,297234272,
kallewoof,2017-04-26T05:12:44Z,"@gmaxwell \n> Allowing it work on orphan blocks is an interesting idea. I'm a little less sure about that-- I think it could allow it to return transactions that have never been validated, which would be somewhat surprising.\n\nI just realized my logic was flawed on this. I am passing the block height only to the GetTransaction method, which means it will always pick the active chain at the giv",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-297239855,297239855,
kallewoof,2017-04-26T05:44:27Z,"The code now works as advertised (see updated OP).\n\n[History](https://github.com/kallewoof/bitcoin/commits/gettx-with-blockhash-unsquashed):\n* 2017-04-25: [1 (block hash support in getrawtx)](https://github.com/kallewoof/bitcoin/commit/7f3042b2c4d4e5d9457365e4a6c8d4a57a3ec35b)\n* 2017-04-26: → [2⊱1 (bh:txid to 2 params)](https://github.com/kallewoof/bitcoin/commit/e269ecd404268e68e05b632331",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-297243978,297243978,
jnewbery,2017-05-02T21:27:19Z,"utACK, but I think this deserves a new functional test case.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-298766522,298766522,
kallewoof,2017-05-04T13:31:16Z,"@jnewbery I agree. Will get to work on that.\n\n[[...]](https://github.com/kallewoof/bitcoin/commits/gettx-with-blockhash-unsquashed):\n* 2017-05-04: [5⊱2 (improve fVerbose)](https://github.com/kallewoof/bitcoin/commit/2a921bf5585ac72e2154b41492ab70ecd3e46241)",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-299185551,299185551,
kallewoof,2017-05-08T04:28:06Z,"@jnewbery Added some tests to `rawtransactions.py` for the included blockhash variant (a6b8461).\n\n[[...]](https://github.com/kallewoof/bitcoin/commits/gettx-with-blockhash-unsquashed):\n* 2017-05-08: [6 (tests)](https://github.com/kallewoof/bitcoin/commit/99f115cc5a0d3dc8b93b5107ed2fe933488c85e6)",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-299770203,299770203,
sipa,2017-05-15T22:32:21Z,Is this still needed after #8704?,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-301623888,301623888,
kallewoof,2017-05-16T02:41:35Z,@sipa The use cases are quite different I think. #8704 lets you see all transactions in a given block. This lets you grab a transaction directly from a block without indexing.,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-301659483,301659483,
sipa,2017-05-16T02:42:06Z,@kallewoof #8704 does not require indexing either,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-301659552,301659552,
kallewoof,2017-05-16T02:56:41Z,"Yeah, sorry, I meant that this is a way to get a specific transaction if you know the block hash, whereas #8704 shows you all transactions in the entire block. You get the info, but you have to wade through stuff to get it.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-301661539,301661539,
laanwj,2017-05-16T05:25:08Z,"In both cases the whole block has to be loaded from disk, and parsed, and searched linearly. The difference is whether the linear search step happens on the server or client.\n\nI think both #8704 and this can be useful, but have to agree there's only superficial difference.\n",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-301678856,301678856,
maaku,2017-05-16T08:32:10Z,"The difference between the two is the serialization and transmission and parsing of ~5MB of JSON data vs a few hundred bytes of hex encoded data. That's a 1,000x difference on the client side, and the same absolute improvement on the server -- although as a multiplier it'd be less since as you note the server still has to parse the block from disk. That's a nontrivial performance difference.\n\n",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-301713146,301713146,
jnewbery,2017-05-16T13:31:07Z,"Agree with @maaku - simply encoding the data into 5MB of json could be time-consuming, during which time the cs_main lock is held. Having a command to return just a single transaction from a block seems very useful.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-301782636,301782636,
luke-jr,2017-06-03T22:28:15Z,Suggested message fix on my `gettx-with-blockhash-0.14` branch (cherry-pick).,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-306005152,306005152,
sipa,2017-06-04T18:44:27Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-306058851,306058851,
kallewoof,2017-06-05T00:19:03Z,"@luke-jr Thanks for the review! I cherry-picked your commit. \n\n[[...]](https://github.com/kallewoof/bitcoin/commits/gettx-with-blockhash-unsquashed):\n* 2017-06-05: [7 (nits (luke-jr))](https://github.com/kallewoof/bitcoin/commit/974e4ef131c79aa78b7f7eeb759b1d729823c33e)\n\n@sipa Rebased.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-306077485,306077485,
kallewoof,2017-06-08T04:43:38Z,"@TheBlueMatt Thanks for the review!\n\n> Generally we try to make sure that after each individual commit, at least it builds and all tests pass.\n\nWe try to keep tests as separate commits though, so that would assume tests and code changes come in pairs (tests will fail before test commit or after test commit and before change commit, obv). That was my intention with the split here. I may hav",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-306996708,306996708,
TheBlueMatt,2017-06-22T21:15:38Z,utACK 8f2ce52c9257392d7e6523b39a26e9697a30ca76,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-310504749,310504749,
jonasschnelli,2017-07-14T08:09:35Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-315299193,315299193,
kallewoof,2017-07-14T09:48:06Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-315319217,315319217,
jonasschnelli,2017-07-14T09:53:25Z,"a) Is there a reason why mainchain height is not supported as alternative for the blockhash? Eventually with a security of only accepting heights of a hundred blocks below the tip as a reorganisation protection (but I'd prefer to not add this protection).\n\nb) @kallewoof the idea about the standard for a transaction reference has already been worked into a BIP: https://github.com/bitcoin/bips/p",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-315320364,315320364,
kallewoof,2017-07-14T10:18:08Z,"@jonasschnelli Regarding height, I chose not to include it as it could potentially cause unexpected results when a reorg happens, but if people don't think that's an issue it should be fairly straightforward to allow for both.\n\nEdit: as for the standard, that looks exciting for sure. If it matures enough and this PR isn't merged already I may take a stab at it.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-315325449,315325449,
jtimon,2017-07-17T20:45:44Z,utACK 3ec2d287e24c9cc573ead2898546499abf49db9d besides small nits.,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-315877808,315877808,
kallewoof,2017-07-18T03:45:56Z,"Addressed @jtimon nits.\n@jonasschnelli I added support for supplying block height instead of block hash.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-315950004,315950004,
jtimon,2017-07-18T21:59:17Z,"I'm not sure about allowing the height.\nOne can always call getblockhash if he knows the txid and block height without knowing the block hash somehow.\nThat's not the case for the BIP proposal @jonasschnelli refers to, since they don't know the txid anyway (only block height and tx position). I suggest we leave the BIP discussion out of this PR, which in my opinion makes sense on its own. And a",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-316210666,316210666,
kallewoof,2017-07-19T02:15:21Z,"@jtimon It feels like a convenience thing that, IMO, getblock should have as well (i.e. allow both height number and block hash). I don't have a strong opinion on the subject though, and will drop the last 2 commits (height support) whenever this is ready for merging unless someone argues for block height support.\n",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-316252594,316252594,
jtimon,2017-07-20T19:46:38Z,"Well, don't have a strong opinion on adding the block height either, if more people like it, let's keep it.\nOr perhaps it can be proposed after this for both getrawtransaction and getblock at the same time?\n",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-316810151,316810151,
instagibbs,2017-08-23T15:12:56Z,"concept ACK, needs rebase/squash, would review",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-324367771,324367771,
kallewoof,2017-08-24T07:25:00Z,@instagibbs Rebased & squashed; also removed block height option for now. Will push as separate PR if desirable.,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-324555587,324555587,
instagibbs,2017-08-25T01:29:08Z,"I fail at counting brackets.\n\nutACK https://github.com/bitcoin/bitcoin/pull/10275/commits/440123fb8c7196a7ee209495f02b2f7c0deaa0bb",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-324800051,324800051,
kallewoof,2017-09-04T02:37:36Z,"@jnewbery Thanks for the review! I think I've addressed all your comments.\n\nEdit: Actually I forgot about the commit merge. I try to keep tests and code changes as separate commits. Why would you want it to succeed between the test update? (Or am I confused about what you're asking?)",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-326853357,326853357,
jnewbery,2017-09-04T17:07:38Z,"> I try to keep tests and code changes as separate commits. Why would you want it to succeed between the test update? (Or am I confused about what you're asking?)\n\nI think the principal is that each individual commit should be at least internally consistent (should build and pass its own tests). Your first commit updates the product code so the returned error changes, and your second commit up",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-327003388,327003388,
kallewoof,2017-09-05T01:27:29Z,"@jnewbery You can `git bisect skip` if you land on a commit squeezed in between tests. I don't really agree with squashing test updates and code changes together, personally. That's how I've always done it, anyway.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-327048248,327048248,
promag,2017-09-05T07:14:16Z,"I agree with @jnewbery, one commit should not break the code, tests including. If you revert that commit, codes stays green. IMO makes reviewing easier.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-327091375,327091375,
jtimon,2017-09-05T22:30:26Z,"I agree individual commits should never break the tests ideally. That doesn't mean that you can't introduce new functionality and its new tests in separated commits when that's not the case.\nNeeds rebase again.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-327321920,327321920,
jnewbery,2017-09-05T23:20:35Z,"Last two commits look good. For the pruning error, I think you can error out earlier by re-using the pruned test from `getblock`:\n\n```\n     if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n        throw JSONRPCError(RPC_MISC_ERROR, ""Block not available (pruned data)"");\n```\n\n> I don't really agree with squashing test updates and code changes togeth",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-327330124,327330124,
kallewoof,2017-09-06T02:52:48Z,I'm merging those commits as it's not new functionality but just a fix that changes an error message.,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-327359781,327359781,
kallewoof,2017-09-06T02:53:12Z,@luke-jr Nice!,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-327359819,327359819,
jtimon,2017-09-23T10:05:06Z,"re-utACK 300a5f15d54484691d47eb5ec23acde6d82bfda1\n\n",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-331624208,331624208,
sipa,2017-12-05T01:02:43Z,"I realize I'm very late with this, so this is just for consideration and not an objection to this PR.\n\nI believe `getrawtransaction` is already a weird mixed bag of semantics (it works when a transaction is confirmed but at least one output is not yet spent by a confirmed transaction, or if the transaction is unconfirmed, or if txindex is available for everything but the genesis block). Adding",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-349160332,349160332,
TheBlueMatt,2017-12-05T01:17:39Z,"Dear God, this PR is 7 months old. The behavior changes are all well-documented and it's a very useful feature, there's gotta be a statue of limitations on concept objections.\n\nOn December 4, 2017 8:02:52 PM EST, Pieter Wuille <notifications@github.com> wrote:\n>I realize I'm very late with this, so this is just for consideration\n>and not an objection to this PR.\n>\n>I believe `getrawtransacti",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-349162918,349162918,
sipa,2017-12-05T01:28:24Z,"I'm explicitly not objecting in any way, just offering a view to consider.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-349164909,349164909,
kallewoof,2017-12-05T01:31:22Z,"I agree `getrawtransaction` is very confusing until you understand its limitations. I'll gladly work on streamlining it into potentially two or more RPC calls post-merge. Biggest concern is backwards compatibility and (alternatively) bloat.\n\nEdit: I do think the confusion will be decreased when users are given the option of providing a block hash, as there was *no way* to get the tx before thi",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-349165468,349165468,
kallewoof,2017-12-05T02:05:45Z,@promag Thanks for the review! I think I addressed all your comments.,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-349171439,349171439,
kallewoof,2017-12-05T03:28:27Z,@promag Added test for unset `in_active_chain`.,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-349184096,349184096,
TheBlueMatt,2017-12-05T18:29:53Z,utACK 434526aba680cb73208e018a02827d51a71cfff6,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-349396767,349396767,
MarcoFalke,2017-12-06T02:22:20Z,"Sorry for the sloppy review. I messed up the parameter order when testing. Also gcc complains about my nit-fix.\n\nTested ACK now:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nTested ACK 434526aba680cb73208e018a02827d51a71cfff6\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCgAGBQJaJ1PQAAoJENLqSFDnUoslonMQAJz8bVoePuyYUgOHkbGIGemj\n4yUyywvp34A4BocYrczH9Im6q+/VBoLrxd+7BqcrhWclH",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-349509602,349509602,
MarcoFalke,2017-12-06T03:30:38Z,"@jtimon @jnewbery \nMind to re-ACK?",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-349521253,349521253,
jonasschnelli,2017-12-06T07:09:43Z,utACK 434526aba680cb73208e018a02827d51a71cfff6,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-349554584,349554584,
promag,2018-02-22T01:24:47Z,"For reference, This was proposed (and closed) in #2421.",https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-367536021,367536021,
kallewoof,2018-02-22T04:23:09Z,@promag I believe the concerns raised in #2421 are not relevant anymore / in this implementation.,https://github.com/bitcoin/bitcoin/pull/10275#issuecomment-367563299,367563299,
laanwj,2017-04-25T11:47:12Z,"This functionality could come in useful.\n\nAs for the API I prefer to not do any string combining/parsing here, this makes the API less clean to work with at least in my experience. I'd prefer to add an optional (can be null or missing) `fromblock` argument.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r113172602,113172602,src/rpc/rawtransaction.cpp
jnewbery,2017-05-02T21:26:44Z,"nit: You can replace this and the next three lines with:\n\n```c++\n} else {\n    fVerbose = (request.params[1].get_bool());\n}\n```\n\nsince `get_bool()` does the type testing for you and throws the JSONRPCError if the type isn't a VBOOL.\n\nUp to you whether you think that's clearer.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r114429566,114429566,src/rpc/rawtransaction.cpp
kallewoof,2017-05-04T13:23:22Z,"Ohh, good point! Thanks.\nEdit: I don't want it to throw for `null` values though. ",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r114771044,114771044,src/rpc/rawtransaction.cpp
kallewoof,2017-05-04T13:26:05Z,"So I end up with\n```C++\n        if (request.params[1].isNum()) {\n            fVerbose = (request.params[1].get_int() != 0);\n        } else if (!request.params[1].isNull()) {\n            fVerbose = (request.params[1].get_bool());\n        }\n```",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r114771638,114771638,src/rpc/rawtransaction.cpp
jnewbery,2017-05-15T19:28:59Z,"nit: no need for brackets here. The following should do:\n\n`block1, block2 = self.nodes[2].generate(2)`",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r116580150,116580150,test/functional/rawtransactions.py
jnewbery,2017-05-15T19:30:21Z,"nit: I think it's better to assert on the actual value here (ie verify that the getrawtransaction returned the correct transaction rather than returned anything). The following should do that:\n\n`assert_equal(self.nodes[0].getrawtransaction(tx, True, block1)['txid'], tx)`",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r116580435,116580435,test/functional/rawtransactions.py
kallewoof,2017-05-16T05:12:43Z,"@jnewbery Good points, thanks. Addressed!",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r116656164,116656164,test/functional/rawtransactions.py
luke-jr,2017-06-03T22:11:33Z,Should probably mention that it MUST be in that block in this case...,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r119996123,119996123,src/rpc/rawtransaction.cpp
luke-jr,2017-06-03T22:13:56Z,"Remove ""in chain"". Maybe ""in database""?",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r119996146,119996146,src/rpc/rawtransaction.cpp
luke-jr,2017-06-03T22:14:43Z,Whether *the block specified* is in the main chain or not... This could be false with the tx being still in the main chain!,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r119996169,119996169,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-06-07T18:57:08Z,"Hmm? Shouldn't we use the parameter's name here instead of ""parameter 3""?",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r120715589,120715589,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-06-07T19:06:07Z,"Hmm, maybe say ""if blockhash is specified"" or otherwise mention this wont appear unless a blockhash is provided. Even better, fill it out if GetTransaction returns the blockhash cause it found it via UTXO/txindex.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r120717627,120717627,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-06-07T19:12:31Z,"grammar nit: this reads funny to me, and could be a bit more explicit. Maybe:\n\n""If the block which contains the transaction is known, its hash can be provided even for nodes without -txindex.""\n""Note that if a blockhash is provided, only it will be searched and if the transaction is in mempool, other blocks, or if this node does not have the given block available, the transaction will not be ",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r120718991,120718991,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-06-07T19:13:25Z,"Maybe further update this error message, eg if (blockIndex) ""No such transaction found in the provided block"".",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r120719169,120719169,src/rpc/rawtransaction.cpp
kallewoof,2017-06-08T04:34:31Z,"Thanks, that looks better yeah. Adding with minor tweaks.\n```C++\n            ""\nNOTE: By default this function only works for mempool transactions. If the -txindex option is\n""\n            ""enabled, it also works for blockchain transactions. If the block which contains the transaction\n""\n            ""is known, its hash can be provided even for nodes without -txindex. Note that if a blockha",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r120798213,120798213,src/rpc/rawtransaction.cpp
kallewoof,2017-06-08T04:36:44Z,"I was sure I did, but guess not:\n```C++\n            ""  \""inMainChain\"": b,     (bool) Whether specified block is in the main chain or not (only present with explicit \""blockhash\"" argument)\n""\n```\nI like the idea of including when able but will keep it out of this PR for now.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r120798376,120798376,src/rpc/rawtransaction.cpp
kallewoof,2017-06-08T04:37:52Z,The general tendency seems to be to identify the parameter index so I stuck with that. I agree it may be better to be more descriptive though...,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r120798462,120798462,src/rpc/rawtransaction.cpp
kallewoof,2017-06-08T04:41:33Z,"Yeah, I wanted to avoid `?:?:`. Rewritten as:\n```C++\n    if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true, blockIndex)) {\n        std::string errmsg;\n        if (blockIndex) {\n            errmsg = ""No such transaction found in the provided block"";\n        } else {\n            errmsg = fTxIndex\n              ? ""No such mempool or blockchain transaction""\n     ",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r120798796,120798796,src/rpc/rawtransaction.cpp
jtimon,2017-07-17T20:30:31Z,"This may be confused with Params().NetworkIDString() == ""main"" (kind of like we do with ""testnet"" in getinfo).\nCan we rename to ""inActiveChain"" or something of the sort?",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r127816715,127816715,src/rpc/rawtransaction.cpp
jtimon,2017-07-17T20:38:45Z,Perhaps the diff can be less disruptive by moving everything inside ```if (!blockIndex) {...}``` to a new static function defined right above instead of indenting all of it?,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r127818832,127818832,src/validation.cpp
kallewoof,2017-07-18T03:32:33Z,"I'm not a huge fan of changing code just to make diffs smaller, and as I mention above, you can put `?w=1` to get diff without indentation changes.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r127875966,127875966,src/validation.cpp
instagibbs,2017-08-24T13:38:59Z,"maybe `in_active_chain`? I'm parsing this as ""inactive chain""",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r135016562,135016562,src/rpc/rawtransaction.cpp
instagibbs,2017-08-24T13:40:38Z,`in_active_chain` to conform to new style guide and make easier to read.,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r135016993,135016993,src/rpc/rawtransaction.cpp
instagibbs,2017-08-24T13:47:24Z,should skip this logic if user has provided the blockhash?,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r135018818,135018818,src/validation.cpp
kallewoof,2017-08-25T01:09:01Z,"This is inside the `if (!blockIndex)` block so it should never execute if a block hash was provided, no?",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r135165744,135165744,src/validation.cpp
instagibbs,2017-08-25T01:27:18Z,Oops! Not good at counting brackets.,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r135167500,135167500,src/validation.cpp
jnewbery,2017-09-01T14:32:33Z,nit: alignment,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r136588539,136588539,src/rpc/rawtransaction.cpp
jnewbery,2017-09-01T14:34:57Z,"I think we would also hit this error if the block had been pruned. In that case, this error is misleading.\n\nIs there any way to test above for whether the block has been pruned and error out before doing the transaction lookup?",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r136589098,136589098,src/rpc/rawtransaction.cpp
jnewbery,2017-09-01T14:43:38Z,Lose the `presumably` :),https://github.com/bitcoin/bitcoin/pull/10275#discussion_r136591227,136591227,test/functional/rawtransactions.py
jnewbery,2017-09-01T14:44:37Z,You need to make the matching error text longer to be non-ambiguous. This test will still pass if the node returns the error `No such mempool or blockchain transaction` (which would be incorrect behaviour),https://github.com/bitcoin/bitcoin/pull/10275#discussion_r136591446,136591446,test/functional/rawtransactions.py
kallewoof,2017-09-04T02:15:07Z,"```C++\n            ""  \""in_active_chain\"": b, (bool) Whether specified block is in the active chain or not (only present with explicit \""blockhash\"" argument)\n""\n            ""  \""hex\"" : \""data\"",       (string) The serialized, hex-encoded data for 'txid'\n""\n```\nbecomes\n```\n  ""in_active_chain"": b, (bool) Whether specified block is in the active chain or not (only present with explicit ",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r136735089,136735089,src/rpc/rawtransaction.cpp
kallewoof,2017-09-04T02:31:17Z,"Good point!\n\nI added code (https://github.com/bitcoin/bitcoin/pull/10275/commits/3c0cb434bde411d2daf8e4a440c85e80b1eb1f62) that checks if pruning is enabled, and if it is, checks if the block is actually available by reading it from disk and setting the error message based on the results of that.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r136736030,136736030,src/rpc/rawtransaction.cpp
kallewoof,2017-09-04T02:34:34Z,"Oops. Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r136736199,136736199,test/functional/rawtransactions.py
jnewbery,2017-09-04T17:03:26Z,"Yes, of course you're correct. The `size`, `vsize`, `version`, ... fields below aren't aligned by the same logic, but that's beyond the scope of this PR. Please disregard my previous comment.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r136855111,136855111,src/rpc/rawtransaction.cpp
luke-jr,2017-09-05T20:28:50Z,Use `fHavePruned`,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r137105079,137105079,src/rpc/rawtransaction.cpp
luke-jr,2017-09-05T20:31:22Z,Use `!(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0` (see `getblock`),https://github.com/bitcoin/bitcoin/pull/10275#discussion_r137105749,137105749,src/rpc/rawtransaction.cpp
jnewbery,2017-09-06T20:06:15Z,"supernit: Not finding a block because it's been pruned is not a `RPC_INVALID_ADDRESS_OR_KEY` error. It would more accurately be a `RPC_MISC_ERROR`.\n\nMy suggestion would be to do the pruned check above, immediately after the `throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, ""Block hash not found"");` line",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r137375529,137375529,src/rpc/rawtransaction.cpp
kallewoof,2017-09-07T02:17:32Z,"Yeah, I was thinking about that too. Fixing.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r137433560,137433560,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-11-27T22:20:16Z,"Why check nTx here? Its just as useful to provide an error of ""Block not available"" if it has been pruned as if it has not yet been received in full.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r153341394,153341394,src/rpc/rawtransaction.cpp
kallewoof,2017-11-28T00:51:32Z,"This is how the check is done in a lot of places. E.g. \nhttps://github.com/kallewoof/bitcoin/blame/gettx-with-blockhash/src/rest.cpp#L219\n\nI'm not sure why an additional nTx check is needed, to be honest.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r153367497,153367497,src/rpc/rawtransaction.cpp
sipa,2017-11-28T00:55:28Z,"""nTx > 0"" means we had the block's contents at some point.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r153368118,153368118,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-11-28T01:42:38Z,"Yes, I'm saying remove the fHavePruned and nTx check here - if we have a block's header but not its body, then we'll throw a ""No such transaction found in the provided block"" error, which is nonsense. Easier to just make this error generic.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r153374816,153374816,src/rpc/rawtransaction.cpp
kallewoof,2017-11-28T01:47:52Z,"Ahh, OK.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r153375434,153375434,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-12-04T16:31:53Z,"Now the error message is wrong :/. You should drop the ""(pruned data)"" note, as this can happen if you've received the header but not (yet) the block.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154700602,154700602,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-12-04T16:36:19Z,Looks like this line was lost in a rebase? Shouldn't remove it.,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154701948,154701948,src/validation.cpp
kallewoof,2017-12-04T23:26:31Z,"Oh, damn. Sorry about that. Fixed.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154806602,154806602,src/rpc/rawtransaction.cpp
kallewoof,2017-12-04T23:27:37Z,Fixed!,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154806796,154806796,src/validation.cpp
promag,2017-12-05T01:14:03Z,Use `chainActive.Contains()`?,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154823055,154823055,src/rpc/rawtransaction.cpp
promag,2017-12-05T01:18:28Z,"~~Add tests for invalid hash?~~\n - ~~must be string;~~\n - ~~must be hexadecimal string;~~\n - ~~must be of length.~~",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154823677,154823677,src/rpc/rawtransaction.cpp
promag,2017-12-05T01:22:41Z,~~Missing test for `in_active_chain`.~~,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154824227,154824227,src/rpc/rawtransaction.cpp
promag,2017-12-05T01:31:33Z,`# getrawtransaction with block hash #`?,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154825370,154825370,test/functional/rawtransactions.py
promag,2017-12-05T01:31:56Z,Care to explain the new argument?,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154825428,154825428,src/validation.cpp
promag,2017-12-05T01:35:41Z,"Nit, mind to fix `verbose` alignment?",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154825935,154825935,src/rpc/rawtransaction.cpp
promag,2017-12-05T02:18:15Z,Can remove this.,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154831307,154831307,test/functional/rawtransactions.py
kallewoof,2017-12-05T03:26:06Z,"First test checks for non-string, this one for non-hexadecimal string. May be redundant but they check different things.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154838762,154838762,test/functional/rawtransactions.py
promag,2017-12-05T14:15:34Z,"Nit, add space after `,`. Same below.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154956174,154956174,test/functional/rawtransactions.py
promag,2017-12-05T14:16:31Z,"Nit, remaining comments are lowercase. Same below.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154956472,154956472,test/functional/rawtransactions.py
promag,2017-12-05T14:17:43Z,Calling without blockhash in a *section* where the RPC is tested with a block hash :trollface: maybe move this elsewhere?,https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154956832,154956832,test/functional/rawtransactions.py
promag,2017-12-05T14:21:25Z,"Could use parameter name instead of `parameter 3`? This is ugly for named args. (fix others in a new commit or in a follow up PR, whatever).",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r154957937,154957937,src/rpc/rawtransaction.cpp
MarcoFalke,2017-12-05T23:44:53Z,"<strike> nit: Should not be initialized, to aid static analysers. </strike>\n\nStrike that. gcc would throw a warning.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r155110399,155110399,src/rpc/rawtransaction.cpp
kallewoof,2017-12-06T03:27:08Z,"`in_active_chain` is a part of the blockhash stuff, though, so it sort of makes sense to keep the test together with the others.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r155138708,155138708,test/functional/rawtransactions.py
kallewoof,2017-12-06T03:27:57Z,"This is used in a ton of places. I never saw consensus on what exactly to do and chose to stick with it for now. As you said, different PR.",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r155138788,155138788,src/rpc/rawtransaction.cpp
jnewbery,2017-12-06T22:22:18Z,"Nit: these lines are confusing for me:\n\n```\n        uint256 blockhash = ParseHashV(request.params[2], ""parameter 3"");\n        if (!blockhash.IsNull()) {\n```\n\n`ParseHashV()` can either throw or return a uint256. The only way it'll return a null uint256 is if the input is a 64 length string of `0`s. That can't be a valid block (if someone finds a block that hashes to zero then they win",https://github.com/bitcoin/bitcoin/pull/10275#discussion_r155379281,155379281,src/rpc/rawtransaction.cpp
