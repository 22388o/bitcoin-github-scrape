DrahtBot,2021-02-17 10:25:53,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23497](https://github.com/bitcoin/bitcoin/pull/23497) (Add `src/node/` and `src/wallet/` code to `node::` and `wallet::`",https://github.com/bitcoin/bitcoin/pull/21206#issuecomment-780457746,780457746,
promag,2021-09-03 09:28:18,"Base PR is merged, could update OP and rebase to move this change forward.",https://github.com/bitcoin/bitcoin/pull/21206#issuecomment-912397934,912397934,
ryanofsky,2021-09-03 18:34:38,"> Base PR is merged, could update OP and rebase to move this change forward.\n\nThanks, rebased and removed references to base PR in the OP.\n\nRebased b17ba1c752a65d2f8b3d1485074d08d48c1ffd3e -> 2896ad570523842245d2de77de531776cfcc08d8 ([`pr/txstate.20`](https://github.com/ryanofsky/bitcoin/commits/pr/txstate.20) -> [`pr/txstate.21`](https://github.com/ryanofsky/bitcoin/commits/pr/txstate.21)",https://github.com/bitcoin/bitcoin/pull/21206#issuecomment-912732776,912732776,
ryanofsky,2021-10-25 16:18:29,"Rebased 541d5f5c775a9aa884c1a8b37fc123933fdbd98e -> bb16e10149c4e1bf2e3d0ee027e9025cd48dd65f ([`pr/txstate.22`](https://github.com/ryanofsky/bitcoin/commits/pr/txstate.22) -> [`pr/txstate.23`](https://github.com/ryanofsky/bitcoin/commits/pr/txstate.23), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/txstate.22-rebase..pr/txstate.23)) due to conflicts with #23288 and #23338\nRebased bb1",https://github.com/bitcoin/bitcoin/pull/21206#issuecomment-951088733,951088733,
ryanofsky,2021-11-15 15:15:25,"Rebased 3c6fdae6ed67426bd9ddb2949a9e66934f71bf0b -> 78c8ac87e2f585772f296b943c733bd26f255ba0 ([`pr/txstate.24`](https://github.com/ryanofsky/bitcoin/commits/pr/txstate.24) -> [`pr/txstate.25`](https://github.com/ryanofsky/bitcoin/commits/pr/txstate.25), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/txstate.24-rebase..pr/txstate.25)) due to conflict with #22928, also making minor `MakeW",https://github.com/bitcoin/bitcoin/pull/21206#issuecomment-969011069,969011069,
jonatack,2021-11-22 14:16:37,"Concept ACK, wil review today.",https://github.com/bitcoin/bitcoin/pull/21206#issuecomment-975573226,975573226,
laanwj,2021-11-23 14:01:56,"I like this refactor, it abstracts the transaction state much better than the boolean-radio-buttons, and agree it makes some kinds of mistake harder to make.\n\nConcept and code review ACK 78c8ac87e2f585772f296b943c733bd26f255ba0\nre-ACK d8ee8f3cd32bbfefec931724f5798cbb088ceb6f",https://github.com/bitcoin/bitcoin/pull/21206#issuecomment-976579335,976579335,
promag,2021-02-21 12:52:18,"7bc16a0b421380a1682ca9d97b7f7fc140fb1c5e\n\nnit, `CWalletTx(const CWallet*, CTransactionRef arg)` to make it clear wallet is unused.",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r579802970,579802970,src/wallet/transaction.h
ryanofsky,2021-03-04 00:26:46,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r579802970\n\n> nit, `CWalletTx(const CWallet*, CTransactionRef arg)` to make it clear wallet is unused.\n\nGood catch! Removed unused argument in this commit instead of later commit",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r586915707,586915707,src/wallet/transaction.h
promag,2021-04-26 13:12:19,"4e11f88320b644b67db55fe737815451ca7d0681\n\nnit, refactor to `wtx.GetBlockHeight()` or similar.",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r620282305,620282305,src/wallet/interfaces.cpp
promag,2021-04-26 13:16:11,"4e11f88320b644b67db55fe737815451ca7d0681\n\nWhy the first check?",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r620285572,620285572,src/wallet/wallet.cpp
promag,2021-04-26 14:09:17,"4e11f88320b644b67db55fe737815451ca7d0681\n\nnit, `lookup_block` seems misleading, maybe `update_tx_state` or `mark_inactive`.",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r620333051,620333051,src/wallet/wallet.cpp
promag,2021-04-26 14:16:46,"4e11f88320b644b67db55fe737815451ca7d0681\n\nI've tested this removing one case in `TxStateSerializedBlockHash` and it failed to compile.",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r620339834,620339834,src/util/overloaded.h
promag,2021-04-26 14:23:43,"4e11f88320b644b67db55fe737815451ca7d0681\n\nnit, space around `=`.",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r620346512,620346512,src/wallet/transaction.h
promag,2021-04-26 14:25:24,"4e11f88320b644b67db55fe737815451ca7d0681\n\nMake local in lambda below?",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r620348104,620348104,src/wallet/wallet.cpp
ryanofsky,2021-04-30 15:12:48,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r620339834\n\n> [4e11f88](https://github.com/bitcoin/bitcoin/commit/4e11f88320b644b67db55fe737815451ca7d0681)\n> \n> I've tested this removing one case in `TxStateSerializedBlockHash` and it failed to compile.\n\nThanks for testing!",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r623958342,623958342,src/util/overloaded.h
ryanofsky,2021-04-30 15:22:14,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r620282305\n\n> [4e11f88](https://github.com/bitcoin/bitcoin/commit/4e11f88320b644b67db55fe737815451ca7d0681)\n> \n> nit, refactor to `wtx.GetBlockHeight()` or similar.\n\nThe code does repeat  a few places but I think I'd still rather not have this. I think all these positive and negative height and magic height and depth values a",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r623964770,623964770,src/wallet/interfaces.cpp
ryanofsky,2021-04-30 15:40:46,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r620346512\n\n> [4e11f88](https://github.com/bitcoin/bitcoin/commit/4e11f88320b644b67db55fe737815451ca7d0681)\n> \n> nit, space around `=`.\n\nThanks, ran clang-format-diff",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r623977153,623977153,src/wallet/transaction.h
ryanofsky,2021-04-30 15:55:59,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r620285572\n\n> [4e11f88](https://github.com/bitcoin/bitcoin/commit/4e11f88320b644b67db55fe737815451ca7d0681)\n> \n> Why the first check?\n\nThe main reason is to be equivalent as possible to previous code. Previous code didn't change the transactions abandon/unconfirmed/conflicted state and this code isn't trying to do that either",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r623987385,623987385,src/wallet/wallet.cpp
ryanofsky,2021-04-30 15:58:29,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r620348104\n\n> [4e11f88](https://github.com/bitcoin/bitcoin/commit/4e11f88320b644b67db55fe737815451ca7d0681)\n> \n> Make local in lambda below?\n\nCan do if another change is required. This line isn't changing, and I'm trying to minimize the diff. The variable scope is pretty small already too.",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r623989031,623989031,src/wallet/wallet.cpp
ryanofsky,2021-04-30 16:18:14,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r620333051\n\n> [4e11f88](https://github.com/bitcoin/bitcoin/commit/4e11f88320b644b67db55fe737815451ca7d0681)\n> \n> nit, `lookup_block` seems misleading, maybe `update_tx_state` or `mark_inactive`.\n\nI guess it's not too important because the definition is a few lines away from the usage, but those names seem more misleading to m",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r624001448,624001448,src/wallet/wallet.cpp
S3RK,2021-05-04 07:50:36,No need to export `OutputGetChange` and `TxGetChange`  as they are not used outside of `receive.cpp`,https://github.com/bitcoin/bitcoin/pull/21206#discussion_r625576746,625576746,src/wallet/receive.h
ryanofsky,2021-05-20 22:22:24,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r625576746\n\n> No need to export `OutputGetChange` and `TxGetChange` as they are not used outside of `receive.cpp`\n\nI think in the future it might be good to move low-level code using `IsChange` logic inside `receive.cpp` so `IsChange` functions could be private. But for `GetChange` it seems most consistent to try to keeping expos",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r636513974,636513974,src/wallet/receive.h
jonatack,2021-06-28 14:04:44,"730df28e0082 seeing the following warnings when debug-building with debian clang 11\n\n```rake\n./wallet/transaction.h:221:59: warning: field 'tx' will be initialized after field 'm_state' [-Wreorder-ctor]\n    CWalletTx(CTransactionRef tx, const TxState& state) : tx(std::move(tx)), m_state(state)\n                                                          ^\n./wallet/transaction.h:71:16: war",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r659817279,659817279,src/wallet/transaction.h
MarcoFalke,2021-07-01 08:23:03,"Just for reference, our existing use of `std::visit` will also throw compile errors even without this helper. I guess the goal of the helper is to having to write less code in the switch itself?",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r662084736,662084736,src/util/overloaded.h
ryanofsky,2021-07-01 09:00:54,"> Just for reference, our existing use of `std::visit` will also throw compile errors even without this helper. I guess the goal of the helper is to having to write less code in the switch itself?\n\nI think all existing uses of uses of `std::visit` use custom visitor classes which don't have access to local variables or anything. Or at least they did at the time this was written which was short",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r662112681,662112681,src/util/overloaded.h
ryanofsky,2021-07-01 22:10:59,"> [730df28](https://github.com/bitcoin/bitcoin/commit/730df28e00822f06c9fc11c86a74f764a2f5136c) seeing the following warnings when debug-building with debian clang 11\n\nThanks! Should be fixed in new push",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r662620720,662620720,src/wallet/transaction.h
MarcoFalke,2021-07-02 10:21:12,"Not saying that this way is better, just saying that it will also emit compile errors even without the helper:\n\n```diff\ndiff --git a/src/wallet/transaction.h b/src/wallet/transaction.h\nindex 7dc91bebd8..5a717e498c 100644\n--- a/src/wallet/transaction.h\n+++ b/src/wallet/transaction.h\n@@ -8,12 +8,11 @@\n #include <amount.h>\n #include <primitives/transaction.h>\n #include <serialize.",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r662907496,662907496,src/util/overloaded.h
jonatack,2021-11-22 18:33:20,"if you retouch, per https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-casts-named (unless there is a reason to not follow the guideline)\n\n```suggestion\n        pwallet->AddToWallet(std::move(tx_ref), TxStateConfirmed{merkleBlock.header.GetHash(), height, static_cast<int>(txnIndex)});\n```\n\n(this is also the change suggested by clang)\n```\nwallet/rpcdump.cpp:374:104: er",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r754538897,754538897,src/wallet/rpcdump.cpp
jonatack,2021-11-22 18:55:07,Perhaps update the Doxygen documentation in the previous line to explain why `wtx` is after this change mutable / an out-param.,https://github.com/bitcoin/bitcoin/pull/21206#discussion_r754553318,754553318,src/wallet/wallet.h
jonatack,2021-11-22 19:04:17,"Here and elsewhere in this commit, maybe format the named args to be compatible with clang-tidy in a way consistent with current changes in the codebase (see #23546 and #23545).\n```suggestion\n                SyncTransaction(block.vtx[posInBlock], TxStateConfirmed{block_hash, block_height, static_cast<int>(posInBlock)}, fUpdate, /*rescanning_old_block=*/true);\n```\nalso, use a named cast for",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r754559310,754559310,src/wallet/wallet.cpp
jonatack,2021-11-23 18:09:27,"Seems odd to pass a `TxStateUnrecognized` data type for `a recognized state`. Edit: maybe suggest the fields are ""converted from an unrecognized to recognized state.""",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755390201,755390201,src/wallet/transaction.h
jonatack,2021-11-23 18:11:07,"nit, perhaps order the state methods above in the order used here and in the next function, or vice versa.",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755391363,755391363,src/wallet/transaction.h
jonatack,2021-11-23 21:19:39,"There appear to be remaining `fInMempool` comments that may need updating.\n\n```cpp\nsrc/wallet/wallet.cpp:1733:    // We must set fInMempool here - while it will be re-set to true by the\nsrc/wallet/wallet.cpp-1734-    // entered-mempool callback, if we did not there would be a race where a\nsrc/wallet/wallet.cpp-1735-    // user could call sendmoney in a loop and hit spurious out of funds ",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755510636,755510636,src/wallet/transaction.h
jonatack,2021-11-23 21:22:19,Should these two includes be replaced by `#include <variant>`?,https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755512157,755512157,src/util/overloaded.h
jonatack,2021-11-23 21:33:20,"```suggestion\n        auto lookup_block = [&](const uint256& hash, int height, TxState& state) {\n```",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755518787,755518787,src/wallet/wallet.cpp
ryanofsky,2021-11-23 23:34:34,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755512157\n\n> Should these two includes be replaced by `#include <variant>`?\n\nGood catch. I think these were just copied and pasted from another header. The variant type is not actually referenced so I believe no includes are necessary.",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755586561,755586561,src/util/overloaded.h
ryanofsky,2021-11-23 23:51:09,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r754538897\n\nOk. I don't see how this helps readability or could help catching errors here, but I guess I'll give benefit of the doubt and change.\n\n>```\n>wallet/rpcdump.cpp:374:104: error: non-constant-expression cannot be narrowed from type 'unsigned int' to 'int' in initializer list [-Wc++11-narrowing]\n>```\n\nThis warning",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755593727,755593727,src/wallet/rpcdump.cpp
ryanofsky,2021-11-24 00:05:28,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755390201\n\n> Seems odd to pass a `TxStateUnrecognized` data type for `a recognized state`. Edit: maybe suggest the fields are ""converted from an unrecognized to recognized state.""\n\nThanks, rephrased now.\n\nJust to explain the previous version: ""Interpret TxState serialized fields as a recognized state"" was supposed to be read",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755599419,755599419,src/wallet/transaction.h
ryanofsky,2021-11-24 00:09:08,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755391363\n\n> nit, perhaps order the state methods above in the order used here and in the next function, or vice versa.\n\nGood suggestion. Fixed!\n\n(Assuming you meant ""previous function"" instead of ""next function"" since next function already used the same order)\n\n",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755600701,755600701,src/wallet/transaction.h
ryanofsky,2021-11-24 00:12:40,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755510636\n\n> There appear to be remaining `fInMempool` comments that may need updating.\n\nNice catch! Updated these\n",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755601996,755601996,src/wallet/transaction.h
ryanofsky,2021-11-24 00:34:18,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755518787\n\nSorry, this is an output variable, so making this change would leave heights unset. I want to scrap this code completely after this PR (see previous review comments), but the goal for this PR is to make the smallest possible code changes in the wallet everywhere that switch to a new CWalletTx state representation without ",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755609277,755609277,src/wallet/wallet.cpp
ryanofsky,2021-11-24 00:35:55,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r754559310\n\n> Here and elsewhere in this commit, maybe format the named args to be compatible with clang-tidy in a way consistent with current changes in the codebase (see #23546 and #23545).\n> \n> also, use a named cast for `posInBlock`\n\nOk, made these changes",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755609822,755609822,src/wallet/wallet.cpp
ryanofsky,2021-11-24 01:06:27,"re: https://github.com/bitcoin/bitcoin/pull/21206#discussion_r754553318\n\n> Perhaps update the Doxygen documentation in the previous line to explain why `wtx` is after this change mutable / an out-param.\n\nI'll add your text if you want to make a specific suggestion, but mentioning the wtx state update seems like an unusual detail for this summary comment to focus on when it doesn't going in",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755620182,755620182,src/wallet/wallet.h
jonatack,2021-11-24 11:03:20,"(if need to retouch)\n```suggestion\n    return wallet.AddToWallet(MakeTransactionRef(tx), state, [&](CWalletTx& wtx, /*new_tx=*/bool) {\n```",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755937425,755937425,src/wallet/test/wallet_tests.cpp
jonatack,2021-11-24 11:19:20,Should the documentation be updated here as well?,https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755958300,755958300,src/wallet/wallet.cpp
jonatack,2021-11-24 11:23:01,"Oh ok, thanks. I didn't see that `findBlock()` uses `height` as an out-param, but now had a better look at the `FoundBlock` class.",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755962759,755962759,src/wallet/wallet.cpp
jonatack,2021-11-24 11:45:32,"Yes, the developer-notes mention to follow the CppCoreGuidelines and there are some advantages to named casts (https://github.com/bitcoin/bitcoin/pull/20965#issuecomment-770375623) but I do hesitate to mention them due to the verbosity (though if casts are seen as a code smell, verbosity could be a good thing, I guess). Thanks!",https://github.com/bitcoin/bitcoin/pull/21206#discussion_r755980063,755980063,src/wallet/rpcdump.cpp
