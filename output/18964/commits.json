[
  {
    "sha": "f327ae7ee584693d2abbd1775789be31dfa3f10f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzI3YWU3ZWU1ODQ2OTNkMmFiYmQxNzc1Nzg5YmUzMWRmYTNmMTBm",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-05-12T22:33:43Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-05-12T23:37:37Z"
      },
      "message": "rpc, wallet: Scan mempool after importaddress",
      "tree": {
        "sha": "be49e030c915a96f735632a8408f20475e9e4be5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be49e030c915a96f735632a8408f20475e9e4be5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f327ae7ee584693d2abbd1775789be31dfa3f10f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f327ae7ee584693d2abbd1775789be31dfa3f10f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f327ae7ee584693d2abbd1775789be31dfa3f10f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f327ae7ee584693d2abbd1775789be31dfa3f10f/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8da1e43b63cb36759eeb1fcfd6768163265c44e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8da1e43b63cb36759eeb1fcfd6768163265c44e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8da1e43b63cb36759eeb1fcfd6768163265c44e2"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe0fd97cb9ed9f358d96b44d390514df0d210eb9",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f327ae7ee584693d2abbd1775789be31dfa3f10f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f327ae7ee584693d2abbd1775789be31dfa3f10f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f327ae7ee584693d2abbd1775789be31dfa3f10f",
        "patch": "@@ -310,6 +310,8 @@ UniValue importaddress(const JSONRPCRequest& request)\n         } else {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n         }\n+        // Scan mempool for transactions\n+        pwallet->chain().requestMempoolTransactions(*pwallet);\n     }\n     if (fRescan)\n     {"
      },
      {
        "sha": "147947acdc367826f15773cd3da173b7dad53b29",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f327ae7ee584693d2abbd1775789be31dfa3f10f/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f327ae7ee584693d2abbd1775789be31dfa3f10f/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=f327ae7ee584693d2abbd1775789be31dfa3f10f",
        "patch": "@@ -270,6 +270,19 @@ def test_balances(*, fee_node_1=0):\n         self.sync_all()\n         assert_equal(self.nodes[0].getbalance(minconf=0), total_amount + 1)  # The reorg recovered our fee of 1 coin\n \n+        self.log.info('Check if mempool is taken into account after import*')\n+        address = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(address, 0.1)\n+        self.nodes[0].unloadwallet('')\n+        # check importaddress on fresh wallet\n+        self.nodes[0].createwallet('w1', False, True)\n+        self.nodes[0].importaddress(address)\n+        assert_equal(self.nodes[0].getbalances()['mine']['untrusted_pending'], 0)\n+        assert_equal(self.nodes[0].getbalances()['watchonly']['untrusted_pending'], Decimal('0.1'))\n+        self.nodes[0].importprivkey(privkey)\n+        assert_equal(self.nodes[0].getbalances()['mine']['untrusted_pending'], Decimal('0.1'))\n+        assert_equal(self.nodes[0].getbalances()['watchonly']['untrusted_pending'], 0)\n+        self.nodes[0].unloadwallet('w1')\n \n if __name__ == '__main__':\n     WalletTest().main()"
      }
    ]
  },
  {
    "sha": "cb652c5b7ef87af04bc0e555c7d7fc8a5cc5ed72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjY1MmM1YjdlZjg3YWYwNGJjMGU1NTVjN2Q3ZmM4YTVjYzVlZDcy",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-05-12T22:34:04Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-05-12T23:37:37Z"
      },
      "message": "rpc, wallet: Scan mempool after importprivkey",
      "tree": {
        "sha": "6a0ba0e4d81b12230f49449f50a3e5d3a3e378de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a0ba0e4d81b12230f49449f50a3e5d3a3e378de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb652c5b7ef87af04bc0e555c7d7fc8a5cc5ed72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb652c5b7ef87af04bc0e555c7d7fc8a5cc5ed72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb652c5b7ef87af04bc0e555c7d7fc8a5cc5ed72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb652c5b7ef87af04bc0e555c7d7fc8a5cc5ed72/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f327ae7ee584693d2abbd1775789be31dfa3f10f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f327ae7ee584693d2abbd1775789be31dfa3f10f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f327ae7ee584693d2abbd1775789be31dfa3f10f"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2145707674aae2cc856c2eab141d1d95b0930365",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb652c5b7ef87af04bc0e555c7d7fc8a5cc5ed72/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb652c5b7ef87af04bc0e555c7d7fc8a5cc5ed72/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=cb652c5b7ef87af04bc0e555c7d7fc8a5cc5ed72",
        "patch": "@@ -185,6 +185,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n                 pwallet->ImportScripts({GetScriptForDestination(WitnessV0KeyHash(vchAddress))}, 0 /* timestamp */);\n             }\n         }\n+        // Scan mempool for transactions\n+        pwallet->chain().requestMempoolTransactions(*pwallet);\n     }\n     if (fRescan) {\n         RescanWallet(*pwallet, reserver);"
      },
      {
        "sha": "2bb8cca55c0d81103107c315629ecdbf659067c0",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb652c5b7ef87af04bc0e555c7d7fc8a5cc5ed72/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb652c5b7ef87af04bc0e555c7d7fc8a5cc5ed72/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=cb652c5b7ef87af04bc0e555c7d7fc8a5cc5ed72",
        "patch": "@@ -272,6 +272,7 @@ def test_balances(*, fee_node_1=0):\n \n         self.log.info('Check if mempool is taken into account after import*')\n         address = self.nodes[0].getnewaddress()\n+        privkey = self.nodes[0].dumpprivkey(address)\n         self.nodes[0].sendtoaddress(address, 0.1)\n         self.nodes[0].unloadwallet('')\n         # check importaddress on fresh wallet\n@@ -283,6 +284,10 @@ def test_balances(*, fee_node_1=0):\n         assert_equal(self.nodes[0].getbalances()['mine']['untrusted_pending'], Decimal('0.1'))\n         assert_equal(self.nodes[0].getbalances()['watchonly']['untrusted_pending'], 0)\n         self.nodes[0].unloadwallet('w1')\n+        # check importprivkey on fresh wallet\n+        self.nodes[0].createwallet('w2', False, True)\n+        self.nodes[0].importprivkey(privkey)\n+        assert_equal(self.nodes[0].getbalances()['mine']['untrusted_pending'], Decimal('0.1'))\n \n if __name__ == '__main__':\n     WalletTest().main()"
      }
    ]
  }
]