[
  {
    "sha": "14e7ffcc641b3beef346024579e5d18f059eb374",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGU3ZmZjYzY0MWIzYmVlZjM0NjAyNDU3OWU1ZDE4ZjA1OWViMzc0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-09-10T02:02:35Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-01-29T17:39:18Z"
      },
      "message": "Use standard BIP 22 rejection reasons where applicable",
      "tree": {
        "sha": "cfdc0ad5ab5e8b98ef96b3a1e3f1747e6797d0fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfdc0ad5ab5e8b98ef96b3a1e3f1747e6797d0fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14e7ffcc641b3beef346024579e5d18f059eb374",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e7ffcc641b3beef346024579e5d18f059eb374",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14e7ffcc641b3beef346024579e5d18f059eb374",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e7ffcc641b3beef346024579e5d18f059eb374/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dfd0d38faef92e8a0af88b56c3020a7324c13d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfd0d38faef92e8a0af88b56c3020a7324c13d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfd0d38faef92e8a0af88b56c3020a7324c13d96"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 35,
      "deletions": 35
    },
    "files": [
      {
        "sha": "0e9d985741bef320ee096b954bb28e51ab5dab62",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e7ffcc641b3beef346024579e5d18f059eb374/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e7ffcc641b3beef346024579e5d18f059eb374/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=14e7ffcc641b3beef346024579e5d18f059eb374",
        "patch": "@@ -605,29 +605,29 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n         return state.DoS(10, error(\"CheckTransaction() : vin empty\"),\n-                         REJECT_INVALID, \"vin empty\");\n+                         REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n         return state.DoS(10, error(\"CheckTransaction() : vout empty\"),\n-                         REJECT_INVALID, \"vout empty\");\n+                         REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n         return state.DoS(100, error(\"CheckTransaction() : size limits failed\"),\n-                         REJECT_INVALID, \"oversize\");\n+                         REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     int64_t nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n             return state.DoS(100, error(\"CheckTransaction() : txout.nValue negative\"),\n-                             REJECT_INVALID, \"vout negative\");\n+                             REJECT_INVALID, \"bad-txns-vout-negative\");\n         if (txout.nValue > MAX_MONEY)\n             return state.DoS(100, error(\"CheckTransaction() : txout.nValue too high\"),\n-                             REJECT_INVALID, \"vout too large\");\n+                             REJECT_INVALID, \"bad-txns-vout-toolarge\");\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n             return state.DoS(100, error(\"CheckTransaction() : txout total out of range\"),\n-                             REJECT_INVALID, \"txout total too large\");\n+                             REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n     // Check for duplicate inputs\n@@ -636,22 +636,22 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     {\n         if (vInOutPoints.count(txin.prevout))\n             return state.DoS(100, error(\"CheckTransaction() : duplicate inputs\"),\n-                             REJECT_INVALID, \"duplicate inputs\");\n+                             REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, error(\"CheckTransaction() : coinbase script size\"),\n-                             REJECT_INVALID, \"coinbase script too large\");\n+                             REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             if (txin.prevout.IsNull())\n                 return state.DoS(10, error(\"CheckTransaction() : prevout is null\"),\n-                                 REJECT_INVALID, \"prevout null\");\n+                                 REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n \n     return true;\n@@ -759,7 +759,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // are the actual inputs available?\n         if (!view.HaveInputs(tx))\n             return state.Invalid(error(\"AcceptToMemoryPool : inputs already spent\"),\n-                                 REJECT_DUPLICATE, \"inputs spent\");\n+                                 REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n \n         // Bring the best block into scope\n         view.GetBestBlock();\n@@ -1404,30 +1404,30 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n                 if (nSpendHeight - coins.nHeight < COINBASE_MATURITY)\n                     return state.Invalid(\n                         error(\"CheckInputs() : tried to spend coinbase at depth %d\", nSpendHeight - coins.nHeight),\n-                        REJECT_INVALID, \"premature spend of coinbase\");\n+                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n             }\n \n             // Check for negative or overflow input values\n             nValueIn += coins.vout[prevout.n].nValue;\n             if (!MoneyRange(coins.vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n                 return state.DoS(100, error(\"CheckInputs() : txin values out of range\"),\n-                                 REJECT_INVALID, \"input values out of range\");\n+                                 REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n \n         }\n \n         if (nValueIn < tx.GetValueOut())\n             return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", tx.GetHash().ToString()),\n-                             REJECT_INVALID, \"in < out\");\n+                             REJECT_INVALID, \"bad-txns-in-belowout\");\n \n         // Tally transaction fees\n         int64_t nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n             return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString()),\n-                             REJECT_INVALID, \"fee < 0\");\n+                             REJECT_INVALID, \"bad-txns-fee-negative\");\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n             return state.DoS(100, error(\"CheckInputs() : nFees out of range\"),\n-                             REJECT_INVALID, \"fee out of range\");\n+                             REJECT_INVALID, \"bad-txns-fee-outofrange\");\n \n         // The first loop above does all the inexpensive checks.\n         // Only if ALL inputs pass do we perform expensive ECDSA signature checks.\n@@ -1624,7 +1624,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             uint256 hash = block.GetTxHash(i);\n             if (view.HaveCoins(hash) && !view.GetCoins(hash).IsPruned())\n                 return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"),\n-                                 REJECT_INVALID, \"BIP30\");\n+                                 REJECT_INVALID, \"bad-txns-BIP30\");\n         }\n     }\n \n@@ -1654,13 +1654,13 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n         nSigOps += GetLegacySigOpCount(tx);\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n             return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n-                             REJECT_INVALID, \"too many sigops\");\n+                             REJECT_INVALID, \"bad-blk-sigops\");\n \n         if (!tx.IsCoinBase())\n         {\n             if (!view.HaveInputs(tx))\n                 return state.DoS(100, error(\"ConnectBlock() : inputs missing/spent\"),\n-                                 REJECT_INVALID, \"inputs missing/spent\");\n+                                 REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n             if (fStrictPayToScriptHash)\n             {\n@@ -1670,7 +1670,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n                 nSigOps += GetP2SHSigOpCount(tx, view);\n                 if (nSigOps > MAX_BLOCK_SIGOPS)\n                     return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n-                                     REJECT_INVALID, \"too many sigops\");\n+                                     REJECT_INVALID, \"bad-blk-sigops\");\n             }\n \n             nFees += view.GetValueIn(tx)-tx.GetValueOut();\n@@ -1697,7 +1697,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n         return state.DoS(100,\n                          error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRId64\" vs limit=%\"PRId64\")\",\n                                block.vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)),\n-                         REJECT_INVALID, \"coinbase too large\");\n+                         REJECT_INVALID, \"bad-cb-amount\");\n \n     if (!control.Wait())\n         return state.DoS(100, false);\n@@ -2075,26 +2075,26 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n         return state.DoS(100, error(\"CheckBlock() : size limits failed\"),\n-                         REJECT_INVALID, \"block size too large\");\n+                         REJECT_INVALID, \"bad-blk-length\");\n \n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n         return state.DoS(50, error(\"CheckBlock() : proof of work failed\"),\n-                         REJECT_INVALID, \"invalid pow\");\n+                         REJECT_INVALID, \"high-hash\");\n \n     // Check timestamp\n     if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n         return state.Invalid(error(\"CheckBlock() : block timestamp too far in the future\"),\n-                             REJECT_INVALID, \"time in future\");\n+                             REJECT_INVALID, \"time-too-new\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n         return state.DoS(100, error(\"CheckBlock() : first tx is not coinbase\"),\n-                         REJECT_INVALID, \"no coinbase\");\n+                         REJECT_INVALID, \"bad-cb-missing\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i].IsCoinBase())\n             return state.DoS(100, error(\"CheckBlock() : more than one coinbase\"),\n-                             REJECT_INVALID, \"duplicate coinbase\");\n+                             REJECT_INVALID, \"bad-cb-multiple\");\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -2114,7 +2114,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     }\n     if (uniqueTx.size() != block.vtx.size())\n         return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"),\n-                         REJECT_INVALID, \"duplicate transaction\", true);\n+                         REJECT_INVALID, \"bad-txns-duplicate\", true);\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -2123,12 +2123,12 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n         return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"),\n-                         REJECT_INVALID, \"sig op count\", true);\n+                         REJECT_INVALID, \"bad-blk-sigops\", true);\n \n     // Check merkle root\n     if (fCheckMerkleRoot && block.hashMerkleRoot != block.vMerkleTree.back())\n         return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"),\n-                         REJECT_INVALID, \"bad merkle root\", true);\n+                         REJECT_INVALID, \"bad-txnmrklroot\", true);\n \n     return true;\n }\n@@ -2153,18 +2153,18 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n         // Check proof of work\n         if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n-                             REJECT_INVALID, \"bad pow\");\n+                             REJECT_INVALID, \"bad-diffbits\");\n \n         // Check timestamp against prev\n         if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n             return state.Invalid(error(\"AcceptBlock() : block's timestamp is too early\"),\n-                                 REJECT_INVALID, \"timestamp too early\");\n+                                 REJECT_INVALID, \"time-too-old\");\n \n         // Check that all transactions are finalized\n         BOOST_FOREACH(const CTransaction& tx, block.vtx)\n             if (!IsFinalTx(tx, nHeight, block.GetBlockTime()))\n                 return state.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"),\n-                                 REJECT_INVALID, \"non-final tx\");\n+                                 REJECT_INVALID, \"bad-txns-nonfinal\");\n \n         // Check that the block chain matches the known block chain up to a checkpoint\n         if (!Checkpoints::CheckBlock(nHeight, hash))\n@@ -2178,7 +2178,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n                 (TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n             {\n                 return state.Invalid(error(\"AcceptBlock() : rejected nVersion=1 block\"),\n-                                     REJECT_OBSOLETE, \"version 1 blocks obsolete\");\n+                                     REJECT_OBSOLETE, \"bad-version\");\n             }\n         }\n         // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n@@ -2192,7 +2192,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n                 if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n                     !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin()))\n                     return state.DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"),\n-                                     REJECT_INVALID, \"height incorrect in coinbase\");\n+                                     REJECT_INVALID, \"bad-cb-height\");\n             }\n         }\n     }\n@@ -2285,7 +2285,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n         if (deltaTime < 0)\n         {\n             return state.DoS(100, error(\"ProcessBlock() : block with timestamp before last checkpoint\"),\n-                             REJECT_CHECKPOINT, \"timestamp before checkpoint\");\n+                             REJECT_CHECKPOINT, \"time-too-old\");\n         }\n         CBigNum bnNewBlock;\n         bnNewBlock.SetCompact(pblock->nBits);\n@@ -2294,7 +2294,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n         if (bnNewBlock > bnRequired)\n         {\n             return state.DoS(100, error(\"ProcessBlock() : block with too little proof-of-work\"),\n-                             REJECT_INVALID, \"invalid pow\");\n+                             REJECT_INVALID, \"bad-diffbits\");\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "c117d9e93a712c3f1e2001bdb6e20e7a1c5e339b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTE3ZDllOTNhNzEyYzNmMWUyMDAxYmRiNmUyMGU3YTFjNWUzMzli",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-09-10T02:02:35Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-01-29T17:39:24Z"
      },
      "message": "Support for error messages and a few more rejection reasons",
      "tree": {
        "sha": "6ca4799f9a007e83bac14b57cd391946e4264d9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ca4799f9a007e83bac14b57cd391946e4264d9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c117d9e93a712c3f1e2001bdb6e20e7a1c5e339b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c117d9e93a712c3f1e2001bdb6e20e7a1c5e339b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c117d9e93a712c3f1e2001bdb6e20e7a1c5e339b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c117d9e93a712c3f1e2001bdb6e20e7a1c5e339b/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14e7ffcc641b3beef346024579e5d18f059eb374",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e7ffcc641b3beef346024579e5d18f059eb374",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14e7ffcc641b3beef346024579e5d18f059eb374"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "235d0a0e88814b825d93051fb774b028e93ca552",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c117d9e93a712c3f1e2001bdb6e20e7a1c5e339b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c117d9e93a712c3f1e2001bdb6e20e7a1c5e339b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c117d9e93a712c3f1e2001bdb6e20e7a1c5e339b",
        "patch": "@@ -1848,7 +1848,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         // an overestimation, as most will delete an existing entry or\n         // overwrite one. Still, use a conservative safety factor of 2.\n         if (!CheckDiskSpace(100 * 2 * 2 * pcoinsTip->GetCacheSize()))\n-            return state.Error();\n+            return state.Error(\"out of disk space\");\n         FlushBlockFile();\n         pblocktree->Sync();\n         if (!pcoinsTip->Flush())\n@@ -1924,7 +1924,7 @@ bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n-        return state.Invalid(error(\"AddToBlockIndex() : %s already exists\", hash.ToString()));\n+        return state.Invalid(error(\"AddToBlockIndex() : %s already exists\", hash.ToString()), 0, \"duplicate\");\n \n     // Construct new block index object\n     CBlockIndex* pindexNew = new CBlockIndex(block);\n@@ -2014,7 +2014,7 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n                 }\n             }\n             else\n-                return state.Error();\n+                return state.Error(\"out of disk space\");\n         }\n     }\n \n@@ -2060,7 +2060,7 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n             }\n         }\n         else\n-            return state.Error();\n+            return state.Error(\"out of disk space\");\n     }\n \n     return true;\n@@ -2138,15 +2138,15 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n-        return state.Invalid(error(\"AcceptBlock() : block already in mapBlockIndex\"));\n+        return state.Invalid(error(\"AcceptBlock() : block already in mapBlockIndex\"), 0, \"duplicate\");\n \n     // Get prev block index\n     CBlockIndex* pindexPrev = NULL;\n     int nHeight = 0;\n     if (hash != Params().HashGenesisBlock()) {\n         map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n-            return state.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+            return state.DoS(10, error(\"AcceptBlock() : prev block not found\"), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n         nHeight = pindexPrev->nHeight+1;\n \n@@ -2269,9 +2269,9 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n     if (mapBlockIndex.count(hash))\n-        return state.Invalid(error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString()));\n+        return state.Invalid(error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString()), 0, \"duplicate\");\n     if (mapOrphanBlocks.count(hash))\n-        return state.Invalid(error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString()));\n+        return state.Invalid(error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString()), 0, \"duplicate\");\n \n     // Preliminary checks\n     if (!CheckBlock(*pblock, state))"
      },
      {
        "sha": "6d431188328efc8796e115da5bfcd77c0608c596",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c117d9e93a712c3f1e2001bdb6e20e7a1c5e339b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c117d9e93a712c3f1e2001bdb6e20e7a1c5e339b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c117d9e93a712c3f1e2001bdb6e20e7a1c5e339b",
        "patch": "@@ -950,13 +950,15 @@ class CValidationState {\n                  unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n         return DoS(0, ret, _chRejectCode, _strRejectReason);\n     }\n-    bool Error() {\n+    bool Error(std::string strRejectReasonIn=\"\") {\n+        if (mode == MODE_VALID)\n+            strRejectReason = strRejectReasonIn;\n         mode = MODE_ERROR;\n         return false;\n     }\n     bool Abort(const std::string &msg) {\n         AbortNode(msg);\n-        return Error();\n+        return Error(msg);\n     }\n     bool IsValid() {\n         return mode == MODE_VALID;"
      }
    ]
  }
]