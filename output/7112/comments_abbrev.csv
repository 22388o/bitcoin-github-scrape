jonasschnelli,2015-11-27T09:38:57Z,Status bar during IBD looks like: https://bitcoin.jonasschnelli.ch/qt/statusbar.mov\nConsole: https://bitcoin.jonasschnelli.ch/qt/console.mov\n(sorry the german lang.)\n,https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160094310,160094310,
laanwj,2015-11-27T09:41:55Z,"Concept ACK, I've been wanting to do this for a long time\n",https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160095586,160095586,
jonasschnelli,2015-11-27T10:10:06Z,"Time-profiled this PR on a mac and it looks like that the performance is very similar to current master.\nI try to now to implement a time delta throttling instead of emitting the signal if `nHeight % 10 == 0` (only during initial sync).\n\nMaster:\n<img width=""1396"" alt=""bildschirmfoto 2015-11-27 um 11 06 55"" src=""https://cloud.githubusercontent.com/assets/178464/11438735/249d0f02-94f7-11e5-9489-",https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160104411,160104411,
jonasschnelli,2015-11-27T10:26:10Z,Updated. Much smaller diff/changeset now.\nChanges to a min time delta update to not over-emit signals to the UI during IBD on a fast computer. Now the UI gets updated if the last update was more then 250ms ago.\n,https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160107061,160107061,
laanwj,2015-11-27T10:59:40Z,"This fixes #5664 for me. Even during catching-up and heavy verification, it keeps updating the block number consistently.\n",https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160114458,160114458,
laanwj,2015-11-27T11:35:38Z,"Looks like it can still hang here:\n\n```\n#5  lock (this=<synthetic pointer>) at /store/orion/projects/bitcoin/experiment/boost/include/boost/thread/lock_types.hpp:346\n#6  Enter (pszName=<optimized out>, pszFile=<optimized out>, nLine=<optimized out>, this=<synthetic pointer>) at ./sync.h:116\n#7  CMutexLock (fTry=false, nLine=101, pszFile=0x5555559b7648 ""qt/clientmodel.cpp"", pszName=<optimized ",https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160120559,160120559,
MarcoFalke,2015-11-27T11:49:48Z,Concept ACK. f60a931d9137854f3bbcbc0589ab31563662c3c3 Looks a lot smoother on my system.\n,https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160122510,160122510,
jonasschnelli,2015-11-27T12:24:50Z,Added another commit that solves the `getVerificationProgress()` locking issue.\nThe only reason why `getVerificationProgress()` needs a `cs_main` lock is because it accesses `chainActive.Tip()`.\nThe last commit will pass the signals `CBlockIndex*` to the `GuessVerificationProgress()` which make the whole UI update `cs_main` lock free.\n,https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160129185,160129185,
sipa,2015-11-27T14:07:14Z,@jonasschnelli @laanwj I benchmark GuessVerificationProgress (+random fetch from chainActive) here at around 80ns. I think it's perfectly acceptable to compute it before passing to the GUI.\n,https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160146705,160146705,
laanwj,2015-11-27T14:51:47Z,"@sipa thanks; absolutely, in that case we should call it in the signal handler directly before sendingto the GUI. I expect `GetTimeMillis()` takes longer than that.\n",https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160154065,160154065,
jonasschnelli,2015-11-27T17:28:15Z,"@sipa: Thanks for the info.\n\nJust added another commit that calculate the verification progress during the synchronous core signal, and passes a double through the UI signal.\nFeels very fast now (testes IBD, short catch-up 10 blocks).\n",https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160179885,160179885,
jonasschnelli,2015-11-27T19:15:31Z,Binares are built if someone likes to test this: https://bitcoin.jonasschnelli.ch/pulls/7112/\n,https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160192819,160192819,
jonasschnelli,2015-11-30T08:01:52Z,Rebased. Removed notification benchmark.\n,https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160550078,160550078,
laanwj,2015-11-30T09:54:44Z,ACK. Works great now. The spinner is actually spinning again while syncing instead of blundering and glitching along :)\n,https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160580528,160580528,
jonasschnelli,2015-11-30T10:39:42Z,Added a commit that resolves conflicts with block header announcements (#7129) and now also includes PR #7037 (because it conflicts with it).\n,https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160593824,160593824,
sipa,2015-11-30T11:50:26Z,utACK non-GUI code.\n,https://github.com/bitcoin/bitcoin/pull/7112#issuecomment-160608645,160608645,
laanwj,2015-11-27T11:31:40Z,"~~Hm, spoke too soon. It does hang on long contention of cs_main, I think here.\nThe TRY_LOCK should be re-added here.~~\n",https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46038922,46038922,src/qt/clientmodel.cpp
laanwj,2015-11-27T11:33:35Z,"Hm no that can't be it, none of these require cs_main. Weird.\n",https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46039130,46039130,src/qt/clientmodel.cpp
laanwj,2015-11-27T12:40:59Z,I don't like passing the tip through the view code. Let's just pass the verification progress directly\n(could even remove `ClientModel::getVerificationProgress()` after that)\n,https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46043477,46043477,src/qt/bitcoingui.cpp
jonasschnelli,2015-11-27T12:44:47Z,Hmm... but i don't want to execute `getVerificationProgress()` during the synchronous core signal. I guess it's better to call this function over the UI thread.\nBut let me have a closer look...\n,https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46043694,46043694,src/qt/bitcoingui.cpp
laanwj,2015-11-27T12:48:37Z,"Hmm okay you have a point.\nBut ideally these kind of things happen in the model (ClientModel) in this case, not in the view class. But that'd require 'intercepting' the signal there to add this information.\nDon't like how core's handles leak all over the place now.\nBut yes maybe better to live with this for now...\n",https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46043942,46043942,src/qt/bitcoingui.cpp
jonasschnelli,2015-11-27T17:29:23Z,"This lock is only required when initially update the UI (first time, outside of the core signal scope).\n",https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46063159,46063159,src/qt/clientmodel.cpp
sipa,2015-11-28T12:40:42Z,"Don't recast to non-const, and certainly not with a C-style cast.\n",https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46079562,46079562,src/qt/clientmodel.cpp
jonasschnelli,2015-11-28T15:26:21Z,Better like this (it's now `const_cast<CBlockIndex *>(tipIn)`)?\nOr would it make more sense to pass a non-const through the core signal?\n,https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46080824,46080824,src/qt/clientmodel.cpp
sipa,2015-11-28T15:28:18Z,"No, I think GuessVerificationProgress should take a const CBlockIndex\* :)\n",https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46080842,46080842,src/qt/clientmodel.cpp
jonasschnelli,2015-11-28T15:29:47Z,Yeah. Would be nice.. but i guess this would be a too-broad change for this PR scope.\n,https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46080852,46080852,src/qt/clientmodel.cpp
sipa,2015-11-28T15:31:49Z,Just change the argument to const there. No other changes needed (I tried) :)\n,https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46080871,46080871,src/qt/clientmodel.cpp
sipa,2015-11-28T21:22:03Z,Maybe remove this again :)\n,https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46084541,46084541,src/main.cpp
jonasschnelli,2015-11-30T07:52:16Z,"@sdaftuar: I'm not familiar with the block announcements with headers, could you check if this rebase makes sense?\n",https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46115437,46115437,src/main.cpp
jonasschnelli,2015-11-30T07:54:37Z,"@sdaftuar: I'm not familiar with the block announcements with headers, could you check if this rebase makes sense?\nI'm firing off this event even when `vHashes` is empty now.\n",https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46115563,46115563,src/main.cpp
sipa,2015-11-30T09:57:32Z,"No, you should only fire if vHashes is not empty. vHashes contains the\nblock hashes of blocks that were not in the best chain, but now are.\n",https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46124292,46124292,src/main.cpp
sipa,2015-11-30T10:02:26Z,"The code line is correct though: if vHashes is not empty, its first entry\nwill be the hash of the new tip anyway, so you can use pindexTip.\n",https://github.com/bitcoin/bitcoin/pull/7112#discussion_r46124791,46124791,src/main.cpp
