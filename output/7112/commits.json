[
  {
    "sha": "012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTJmYzkxNTExYjE1M2NlM2ZkM2U5ZmI3YmJlZDhmODVmYjE2OTBl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-26T14:48:26Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T07:50:59Z"
      },
      "message": "NotifyBlockTip signal: switch from hash (uint256) to CBlockIndex*\n- also adds a boolean for indication if the tip update was happening during initial sync\n- emit notification also during initial sync",
      "tree": {
        "sha": "1360a783f7f2cf341b035822558aa86d705b8335",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1360a783f7f2cf341b035822558aa86d705b8335"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWW//jAAoJECnUvLZBb1PsiesP/3ywawspZfB1hG8gfh2Eyf/Y\njDbMYNNlxZYEcF0vCgFfA/C9+eGnao63ql1HA0QGsZrE+XBK+QUmX36uvH40P0El\nN8/RbaPfS1LKdU0KjyfeSis8wWOGg8YcTcbWVhldKfIJaBaV3ek4cy/nW14oUEho\neVwAblQbrnPwPFKXhGwKYR2F8/qcP5N3FA66PL6CBaTBCjkgRMVWQT6qKxXYRyGG\nFhH7E5f75ocJJw3seGVDw3P4jCMJNJoQpVoTQodmntdUvmtUOHKHnEOba17vJTyh\nA5UnlLKZa+AztbEv06uHIXuuPbuOWTXU7C3N0DIoi37hRggiPnxzfDNVnGI9hUHV\nxeHfD2J7JxbIDgOp54Ed9aOobt+rodh7x/jAtSTtjHIYhvkm14/L+FzB0PhVotQm\nNUa+u5LJQeA0zFEMeREwWyTteqolnhVtD8IGxctrIyszODPAHDfu5SWur6BO4gfV\n1HFMcXUzFoNY7dnN4197HA2J6UBqBZgY3BonGmE+44ina4NCR8wc4woS+86Ac0IR\nq5s0cU2a+2S6VSkcDgsPixAA1DLFWRbSOKzPmIwvBtANaM1bmYgX4vU9yzvc+sO3\nxysWx7qmtOZ95y/F6H165RMDXpnF2oHZycHo9MeAB2VZQhYYz5A/kxpwTrU8G4dz\n8OfIVHxASudV7pwSD81G\n=ngmh\n-----END PGP SIGNATURE-----",
        "payload": "tree 1360a783f7f2cf341b035822558aa86d705b8335\nparent 5d5ef3a4cf8e32cdf584811eb5415278f4ba9628\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448549306 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448869859 +0100\n\nNotifyBlockTip signal: switch from hash (uint256) to CBlockIndex*\n- also adds a boolean for indication if the tip update was happening during initial sync\n- emit notification also during initial sync\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8710e37fed75730ae75a8e485cd5f050240631de",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
        "patch": "@@ -515,11 +515,14 @@ std::string LicenseInfo()\n            \"\\n\";\n }\n \n-static void BlockNotifyCallback(const uint256& hashNewTip)\n+static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex)\n {\n+    if (initialSync || !pBlockIndex)\n+        return;\n+\n     std::string strCmd = GetArg(\"-blocknotify\", \"\");\n \n-    boost::replace_all(strCmd, \"%s\", hashNewTip.GetHex());\n+    boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n     boost::thread t(runCommand, strCmd); // thread runs free\n }\n "
      },
      {
        "sha": "b41c1ad2e1afd3ce7ec060b360b41ab9d13c5bfb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
        "patch": "@@ -2636,9 +2636,11 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             // Notify external listeners about the new tip.\n             if (!vHashes.empty()) {\n                 GetMainSignals().UpdatedBlockTip(pindexNewTip);\n-                uiInterface.NotifyBlockTip(vHashes.front());\n             }\n         }\n+        if (!vHashes.empty()) {\n+            uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n+        }\n     } while(pindexMostWork != chainActive.Tip());\n     CheckBlockIndex(chainparams.GetConsensus());\n "
      },
      {
        "sha": "00d9303124ed47a158dee9b7fef6998ecefdafa6",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
        "patch": "@@ -15,6 +15,7 @@\n class CBasicKeyStore;\n class CWallet;\n class uint256;\n+class CBlockIndex;\n \n /** General change type (added, updated, removed). */\n enum ChangeType\n@@ -94,7 +95,7 @@ class CClientUIInterface\n     boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n \n     /** New block has been accepted */\n-    boost::signals2::signal<void (const uint256& hash)> NotifyBlockTip;\n+    boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyBlockTip;\n \n     /** Banlist did change. */\n     boost::signals2::signal<void (void)> BannedListChanged;"
      }
    ]
  },
  {
    "sha": "e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmQ1MGZjZGVjZmRkNzI4MWI3YWE1ZTliNTczZWYxYjRlODI4NzNm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-26T15:39:40Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T07:50:59Z"
      },
      "message": "[Qt] update block tip (height and date) without locking cs_main, update always (each block)",
      "tree": {
        "sha": "ac98746bd8b417a8d88d1b7fe661546e33985aca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac98746bd8b417a8d88d1b7fe661546e33985aca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWW//jAAoJECnUvLZBb1Ps4ycP/3GuvPbPrXBcxUVZwKGbYR6W\nKFI04fQzaLqGjEV8Xidwx/5qDS3s+kQ4rplSpYpi84YzPZ4mem7AMM1QrrDjtiLf\nkCF8UIpiOb2GZedzrmmmb3seg85zh1pHe6KeWxP+QQSIhDb1OfYlNB8NMD8Fm0Jk\n/J085+YCTTPYvIkdfBNK0HW2Qph6ovnMeqzyR1SmJmFpMm2QuRqMTuWNL0J8NBlQ\nXG/6WvC8NdQrMZ9jhOcYi5AVqt1GZxpn8N92fpPZ7SdvWk7yDbEa+17ocJc9djw8\nizrl+t5qA/avnaly6LbW54ujh6gvKBAuSQtwkxbr83W1y+atkuGEM+vzkfRf0gys\nsN4y0guM8kD/wshqY47p+2wphIeV7OqSgC1+0akA4HpF6XrKpgwmTATp2dDTsWVl\n5ajo85LB93Exgvb4xYujpSPPrkf7aB7lkTy4Zs5n7Bo0Vr0JknQGdHNyjfEoDUlu\n7e60pQydbuiJjmTe4X14/jQSrSkvTR8fS5kl8M3w6QMpqBzmpO+SzMRQWVQj02kG\nbjBF48O7U+BAhXIJ9FNiGXSDrhlTLJoA4GeU++RnpFaZyy5MaNy1ygF9FWOAhPeL\nxFnmw9U88HO1iePGTNDEAsidYSqmCo85ItKsyLRNffXx1bW0n75EMuZz3FXYGwVO\nQt+yDfVTqvfAMFAmzEkt\n=/sOo\n-----END PGP SIGNATURE-----",
        "payload": "tree ac98746bd8b417a8d88d1b7fe661546e33985aca\nparent 012fc91511b153ce3fd3e9fb7bbed8f85fb1690e\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448552380 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448869859 +0100\n\n[Qt] update block tip (height and date) without locking cs_main, update always (each block)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 23,
      "deletions": 35
    },
    "files": [
      {
        "sha": "92df336c979ed15b8a5376707f62ba0c59623a4a",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 30,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
        "patch": "@@ -23,16 +23,13 @@\n #include <QTimer>\n \n static const int64_t nClientStartupTime = GetTime();\n+static int64_t nLastBlockTipUpdateNotification = 0;\n \n ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent),\n     optionsModel(optionsModel),\n     peerTableModel(0),\n     banTableModel(0),\n-    cachedNumBlocks(0),\n-    cachedBlockDate(QDateTime()),\n-    cachedReindexing(0),\n-    cachedImporting(0),\n     pollTimer(0)\n {\n     peerTableModel = new PeerTableModel(this);\n@@ -107,32 +104,8 @@ double ClientModel::getVerificationProgress() const\n \n void ClientModel::updateTimer()\n {\n-    // Get required lock upfront. This avoids the GUI from getting stuck on\n-    // periodical polls if the core is holding the locks for a longer time -\n-    // for example, during a wallet rescan.\n-    TRY_LOCK(cs_main, lockMain);\n-    if (!lockMain)\n-        return;\n-\n-    // Some quantities (such as number of blocks) change so fast that we don't want to be notified for each change.\n-    // Periodically check and update with a timer.\n-    int newNumBlocks = getNumBlocks();\n-    QDateTime newBlockDate = getLastBlockDate();\n-\n-    // check for changed number of blocks we have, number of blocks peers claim to have, reindexing state and importing state\n-    if (cachedNumBlocks != newNumBlocks ||\n-        cachedBlockDate != newBlockDate ||\n-        cachedReindexing != fReindex ||\n-        cachedImporting != fImporting)\n-    {\n-        cachedNumBlocks = newNumBlocks;\n-        cachedBlockDate = newBlockDate;\n-        cachedReindexing = fReindex;\n-        cachedImporting = fImporting;\n-\n-        Q_EMIT numBlocksChanged(newNumBlocks, newBlockDate);\n-    }\n-\n+    // no locking required at this point\n+    // the following calls will aquire the required lock\n     Q_EMIT mempoolSizeChanged(getMempoolSize(), getMempoolDynamicUsage());\n     Q_EMIT bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n }\n@@ -261,13 +234,32 @@ static void BannedListChanged(ClientModel *clientmodel)\n     QMetaObject::invokeMethod(clientmodel, \"updateBanlist\", Qt::QueuedConnection);\n }\n \n+static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CBlockIndex *pIndex)\n+{\n+    // lock free async UI updates in case we have a new block tip\n+    // during initial sync, only update the UI if the last update\n+    // was > 250ms (MODEL_UPDATE_DELAY) ago\n+    int64_t now = 0;\n+    if (initialSync)\n+        now = GetTimeMillis();\n+\n+    // if we are in-sync, update the UI regardless of last update time\n+    if (!initialSync || now - nLastBlockTipUpdateNotification > MODEL_UPDATE_DELAY) {\n+        //pass a async signal to the UI thread\n+        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()));\n+        nLastBlockTipUpdateNotification = now;\n+    }\n+\n+}\n+\n void ClientModel::subscribeToCoreSignals()\n {\n     // Connect signals to client\n     uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n     uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this, _1, _2));\n     uiInterface.BannedListChanged.connect(boost::bind(BannedListChanged, this));\n+    uiInterface.NotifyBlockTip.connect(boost::bind(BlockTipChanged, this, _1, _2));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()\n@@ -277,4 +269,5 @@ void ClientModel::unsubscribeFromCoreSignals()\n     uiInterface.NotifyNumConnectionsChanged.disconnect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this, _1, _2));\n     uiInterface.BannedListChanged.disconnect(boost::bind(BannedListChanged, this));\n+    uiInterface.NotifyBlockTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2));\n }"
      },
      {
        "sha": "3c6700f37a860ef33321d4b17d34b56a1545c29a",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
        "patch": "@@ -81,11 +81,6 @@ class ClientModel : public QObject\n     PeerTableModel *peerTableModel;\n     BanTableModel *banTableModel;\n \n-    int cachedNumBlocks;\n-    QDateTime cachedBlockDate;\n-    bool cachedReindexing;\n-    bool cachedImporting;\n-\n     QTimer *pollTimer;\n \n     void subscribeToCoreSignals();"
      }
    ]
  },
  {
    "sha": "947d20b84ab271bec5ff08312921961627d1ad80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDdkMjBiODRhYjI3MWJlYzVmZjA4MzEyOTIxOTYxNjI3ZDFhZDgw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-27T12:20:46Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T07:50:59Z"
      },
      "message": "[Qt] reduce cs_main in getVerificationProgress()",
      "tree": {
        "sha": "e391f64f42f4f5d21c7a87e747dfb961f7531c8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e391f64f42f4f5d21c7a87e747dfb961f7531c8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/947d20b84ab271bec5ff08312921961627d1ad80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWW//jAAoJECnUvLZBb1PsomIP/i0grj1iQLltqYcsG2OTszX7\nIEaaGDYTslFDEyehDC181PBJ1GuYHcxeEc4mwzAX6yS666GT5XzS31G2suunimzA\n0z13EblDnsDbqlvR5KPt3WaqTeHPupkL6NGxvgTLdE9qDPPrWne1OQrEexilfY7v\nzGFApyyP5g7chayVqv/wETu5CCnrwODEtXQlX4ehye93cXsyjNDr9i1iPCVRQG6I\nii7v6xIm+mAipJuw+3fPN9JqKGtZeYB0eqj+bk+wjcGh4f2UUMS1Gjr1kjjLq/5d\nkaJUl52eLSylwNw0osDIU6PsNU6T+4Ao5YR5wHfEMP9zdSKHfuLY49S03f1iDkkO\nWhGaTVbMWbZ02eKfLMsy1rXAr3uTctn6AB1Th74ItqrKA6nMPP5pDt9ERbUixBeN\nnuAPuGidLhYO06vF4nQ6yi1t+S1AFUJitul/EywbUvm7WtJm2zJJUcIF0jf0Tq9C\niEvRKoiOLgF/1LcsdZOJUm/uGaRqwQNMNaKoNsFsvzLpvG7Yac+wSp0bNsKvfqyH\n6NL4462saYjo6w4uw3Nz8u7z0gbYHEvLjIKO5FViGZh/f8+ByStIJzTNt6ERpbWD\nhLWm4MM4r0x+A3NkoClRT8PRwH11XPDWE54W0DsdtyJrd2t6zPXH1HIbl/jUioRC\nscIEVV9Oq/2NBTbs1A/w\n=fg75\n-----END PGP SIGNATURE-----",
        "payload": "tree e391f64f42f4f5d21c7a87e747dfb961f7531c8a\nparent e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448626846 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448869859 +0100\n\n[Qt] reduce cs_main in getVerificationProgress()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/947d20b84ab271bec5ff08312921961627d1ad80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/947d20b84ab271bec5ff08312921961627d1ad80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/947d20b84ab271bec5ff08312921961627d1ad80/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "4933f76d6e7734ae086c1a00cb3d8439e6486eb8",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -443,8 +443,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumConnections(clientModel->getNumConnections());\n         connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate());\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(setNumBlocks(int,QDateTime)));\n+        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate(), NULL);\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,const CBlockIndex*)), this, SLOT(setNumBlocks(int,QDateTime,const CBlockIndex*)));\n \n         // Receive and report messages from client model\n         connect(clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n@@ -672,7 +672,7 @@ void BitcoinGUI::setNumConnections(int count)\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n-void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n+void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex *tip)\n {\n     if(!clientModel)\n         return;\n@@ -749,7 +749,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n         progressBarLabel->setVisible(true);\n         progressBar->setFormat(tr(\"%1 behind\").arg(timeBehindText));\n         progressBar->setMaximum(1000000000);\n-        progressBar->setValue(clientModel->getVerificationProgress() * 1000000000.0 + 0.5);\n+        progressBar->setValue(clientModel->getVerificationProgress(tip) * 1000000000.0 + 0.5);\n         progressBar->setVisible(true);\n \n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;"
      },
      {
        "sha": "42da1498810d188c96b29189ef43e9e468a08e6d",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -29,6 +29,7 @@ class UnitDisplayStatusBarControl;\n class WalletFrame;\n class WalletModel;\n class HelpMessageDialog;\n+class CBlockIndex;\n \n class CWallet;\n \n@@ -149,7 +150,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate);\n+    void setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex* tip);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n        @param[in] title     the message box / notification title"
      },
      {
        "sha": "f7d8b71748b01fcaae741dd83db33c892914e016",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -22,6 +22,8 @@\n #include <QDebug>\n #include <QTimer>\n \n+class CBlockIndex;\n+\n static const int64_t nClientStartupTime = GetTime();\n static int64_t nLastBlockTipUpdateNotification = 0;\n \n@@ -96,10 +98,9 @@ size_t ClientModel::getMempoolDynamicUsage() const\n     return mempool.DynamicMemoryUsage();\n }\n \n-double ClientModel::getVerificationProgress() const\n+double ClientModel::getVerificationProgress(const CBlockIndex *tip) const\n {\n-    LOCK(cs_main);\n-    return Checkpoints::GuessVerificationProgress(Params().Checkpoints(), chainActive.Tip());\n+    return Checkpoints::GuessVerificationProgress(Params().Checkpoints(), (CBlockIndex *)tip);\n }\n \n void ClientModel::updateTimer()\n@@ -246,7 +247,7 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     // if we are in-sync, update the UI regardless of last update time\n     if (!initialSync || now - nLastBlockTipUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass a async signal to the UI thread\n-        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()));\n+        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()), pIndex);\n         nLastBlockTipUpdateNotification = now;\n     }\n "
      },
      {
        "sha": "c3beb8239678a803bc605782c361b19754f6ecf0",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -15,6 +15,7 @@ class PeerTableModel;\n class TransactionTableModel;\n \n class CWallet;\n+class CBlockIndex;\n \n QT_BEGIN_NAMESPACE\n class QTimer;\n@@ -59,7 +60,7 @@ class ClientModel : public QObject\n     quint64 getTotalBytesRecv() const;\n     quint64 getTotalBytesSent() const;\n \n-    double getVerificationProgress() const;\n+    double getVerificationProgress(const CBlockIndex *tip) const;\n     QDateTime getLastBlockDate() const;\n \n     //! Return true if core is doing initial block download\n@@ -88,7 +89,7 @@ class ClientModel : public QObject\n \n Q_SIGNALS:\n     void numConnectionsChanged(int count);\n-    void numBlocksChanged(int count, const QDateTime& blockDate);\n+    void numBlocksChanged(int count, const QDateTime& blockDate, const CBlockIndex *tip);\n     void mempoolSizeChanged(long count, size_t mempoolSizeInBytes);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);"
      },
      {
        "sha": "8dbbac957deddb2f87dcd5b4c08a4466167acff1",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -343,8 +343,8 @@ void RPCConsole::setClientModel(ClientModel *model)\n         setNumConnections(model->getNumConnections());\n         connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate());\n-        connect(model, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(setNumBlocks(int,QDateTime)));\n+        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate(), NULL);\n+        connect(model, SIGNAL(numBlocksChanged(int,QDateTime,const CBlockIndex*)), this, SLOT(setNumBlocks(int,QDateTime,const CBlockIndex*)));\n \n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n@@ -525,7 +525,7 @@ void RPCConsole::setNumConnections(int count)\n     ui->numberOfConnections->setText(connections);\n }\n \n-void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate)\n+void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex* tip)\n {\n     ui->numberOfBlocks->setText(QString::number(count));\n     ui->lastBlockTime->setText(blockDate.toString());"
      },
      {
        "sha": "5debc1754eb7265aa63b1113edf313859b14309c",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -83,7 +83,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate);\n+    void setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex* tip);\n     /** Set size (number of transactions and memory usage) of the mempool in the UI */\n     void setMempoolSize(long numberOfTxs, size_t dynUsage);\n     /** Go forward or back in history */"
      },
      {
        "sha": "1c72a292ed5a22cdd392e1e258494012411c6a5c",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -124,7 +124,7 @@ void SendCoinsDialog::setClientModel(ClientModel *clientModel)\n     this->clientModel = clientModel;\n \n     if (clientModel) {\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(updateSmartFeeLabel()));\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,const CBlockIndex*)), this, SLOT(updateSmartFeeLabel()));\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "4082e4660305f7696949c3a13e2e9611210894e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDgyZTQ2NjAzMDVmNzY5Njk0OWMzYTEzZTJlOTYxMTIxMDg5NGU4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-27T17:22:18Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T07:53:57Z"
      },
      "message": "[Qt] call GuessVerificationProgress synchronous during core signal, pass double over UI signal",
      "tree": {
        "sha": "0c9cf30842663b53cbe95300688b0a9f29d9a985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c9cf30842663b53cbe95300688b0a9f29d9a985"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4082e4660305f7696949c3a13e2e9611210894e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXACXAAoJECnUvLZBb1Pss7AP/0h8tG1oqCt4u9HfhUvU5FsT\nJr/YknQRgKUwOMX9ZrirryNV8aHMfJYrWaiC19/FrJcryjoVkU+qRXnLGNTGj1up\neOkEBUgpWg7vUyhIpc84aTDV5Qz8SgH+KSMIBx/YQIUZzTeGGkaZIYAKT1eiAxkY\nt3AO0lwfzbSxSSnJQOdxkh5qcS1b75aULO+7o8FkIxkQArH+h4zj8+4P6UvSBOfO\nOPD5Edxw2Z/jSSLMV6jMiuCscWws7o/WdKUvLvfdt+XD0sYKW25IMJM96qbLzyGV\nN6pPO9lvO1FJMP3NKJDkpKKPtrqCUdsnWgh0/FqzUmYx6cRnMgTi1s3bbptIWGi+\nErU6nKl67EeLqTlTdEGvc/rwZXHVNEZCLPscWSB+yZK3yrGJlr4hzpxTt3nPL2Il\nnOfHm+GmDR06ryUWGGdWgbVjF4QB3rqGAJuZ/qNDlEqhhd0BA5V+obdYp47iVK47\n5qvFduVxqu0dHF/8fdoOWwQHbaR2TDMRymPVVqZuQsj5iTQUcB3qP8PC3QRWpUGW\nJKXppdsAFNnqRu94UEj5rJFua2XTRpoIln9tc95y4N3Vcmq7MVlhq4How4w8w/RL\neBf2WN/OAFDwpN/IL4V9itYADnbKIeaoDvyPoYZtC+oDo7A4y6vtV7K6kyZoNMae\nk094ZK1zoSY1vaSYWK7E\n=beYK\n-----END PGP SIGNATURE-----",
        "payload": "tree 0c9cf30842663b53cbe95300688b0a9f29d9a985\nparent 947d20b84ab271bec5ff08312921961627d1ad80\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448644938 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448870037 +0100\n\n[Qt] call GuessVerificationProgress synchronous during core signal, pass double over UI signal\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4082e4660305f7696949c3a13e2e9611210894e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4082e4660305f7696949c3a13e2e9611210894e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4082e4660305f7696949c3a13e2e9611210894e8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "947d20b84ab271bec5ff08312921961627d1ad80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/947d20b84ab271bec5ff08312921961627d1ad80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/947d20b84ab271bec5ff08312921961627d1ad80"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 22,
      "deletions": 19
    },
    "files": [
      {
        "sha": "385ab7153893caee2b26e86decfdb0727630cb51",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -2638,9 +2638,8 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                 GetMainSignals().UpdatedBlockTip(pindexNewTip);\n             }\n         }\n-        if (!vHashes.empty()) {\n-            uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n-        }\n+        // Always notify the UI if a new block tip was connected\n+        uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n     } while(pindexMostWork != chainActive.Tip());\n     CheckBlockIndex(chainparams.GetConsensus());\n "
      },
      {
        "sha": "4651e842bdb5e5739344f963fb5eb13b5c3855c3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -443,8 +443,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumConnections(clientModel->getNumConnections());\n         connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate(), NULL);\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,const CBlockIndex*)), this, SLOT(setNumBlocks(int,QDateTime,const CBlockIndex*)));\n+        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate(), clientModel->getVerificationProgress(NULL));\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(setNumBlocks(int,QDateTime,double)));\n \n         // Receive and report messages from client model\n         connect(clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n@@ -672,7 +672,7 @@ void BitcoinGUI::setNumConnections(int count)\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n-void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex *tip)\n+void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress)\n {\n     if(!clientModel)\n         return;\n@@ -749,7 +749,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, const CBloc\n         progressBarLabel->setVisible(true);\n         progressBar->setFormat(tr(\"%1 behind\").arg(timeBehindText));\n         progressBar->setMaximum(1000000000);\n-        progressBar->setValue(clientModel->getVerificationProgress(tip) * 1000000000.0 + 0.5);\n+        progressBar->setValue(nVerificationProgress * 1000000000.0 + 0.5);\n         progressBar->setVisible(true);\n \n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;"
      },
      {
        "sha": "3ad6519dbb6f43fcfc3a815464530abf1bde1ba3",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -29,7 +29,6 @@ class UnitDisplayStatusBarControl;\n class WalletFrame;\n class WalletModel;\n class HelpMessageDialog;\n-class CBlockIndex;\n \n class CWallet;\n \n@@ -150,7 +149,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex* tip);\n+    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n        @param[in] title     the message box / notification title"
      },
      {
        "sha": "d36d129c1ac00f485b9b773891854707ab7fd2a6",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -98,9 +98,15 @@ size_t ClientModel::getMempoolDynamicUsage() const\n     return mempool.DynamicMemoryUsage();\n }\n \n-double ClientModel::getVerificationProgress(const CBlockIndex *tip) const\n+double ClientModel::getVerificationProgress(const CBlockIndex *tipIn) const\n {\n-    return Checkpoints::GuessVerificationProgress(Params().Checkpoints(), (CBlockIndex *)tip);\n+    CBlockIndex *tip = const_cast<CBlockIndex *>(tipIn);\n+    if (!tip)\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    return Checkpoints::GuessVerificationProgress(Params().Checkpoints(), tip);\n }\n \n void ClientModel::updateTimer()\n@@ -247,10 +253,9 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     // if we are in-sync, update the UI regardless of last update time\n     if (!initialSync || now - nLastBlockTipUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass a async signal to the UI thread\n-        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()), pIndex);\n+        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()), clientmodel->getVerificationProgress(pIndex));\n         nLastBlockTipUpdateNotification = now;\n     }\n-\n }\n \n void ClientModel::subscribeToCoreSignals()"
      },
      {
        "sha": "2d204fdb67d9628ebda1783c94b7ae1a893f51b3",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -89,7 +89,7 @@ class ClientModel : public QObject\n \n Q_SIGNALS:\n     void numConnectionsChanged(int count);\n-    void numBlocksChanged(int count, const QDateTime& blockDate, const CBlockIndex *tip);\n+    void numBlocksChanged(int count, const QDateTime& blockDate, double nVerificationProgress);\n     void mempoolSizeChanged(long count, size_t mempoolSizeInBytes);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);"
      },
      {
        "sha": "30e551de19790fdc744d59f436b25443b9561ace",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -343,8 +343,8 @@ void RPCConsole::setClientModel(ClientModel *model)\n         setNumConnections(model->getNumConnections());\n         connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate(), NULL);\n-        connect(model, SIGNAL(numBlocksChanged(int,QDateTime,const CBlockIndex*)), this, SLOT(setNumBlocks(int,QDateTime,const CBlockIndex*)));\n+        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate(), model->getVerificationProgress(NULL));\n+        connect(model, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(setNumBlocks(int,QDateTime,double)));\n \n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n@@ -525,7 +525,7 @@ void RPCConsole::setNumConnections(int count)\n     ui->numberOfConnections->setText(connections);\n }\n \n-void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex* tip)\n+void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress)\n {\n     ui->numberOfBlocks->setText(QString::number(count));\n     ui->lastBlockTime->setText(blockDate.toString());"
      },
      {
        "sha": "4aebad480cbd8dd4ff7b53f216d69a038c5ce020",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -83,7 +83,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex* tip);\n+    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress);\n     /** Set size (number of transactions and memory usage) of the mempool in the UI */\n     void setMempoolSize(long numberOfTxs, size_t dynUsage);\n     /** Go forward or back in history */"
      },
      {
        "sha": "0fd86da0342414babe56f2f94bbf8b7c0a67ffae",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -124,7 +124,7 @@ void SendCoinsDialog::setClientModel(ClientModel *clientModel)\n     this->clientModel = clientModel;\n \n     if (clientModel) {\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,const CBlockIndex*)), this, SLOT(updateSmartFeeLabel()));\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(updateSmartFeeLabel()));\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "9af5f9cb8773da2904aa3819234aaebd2efb5d15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWY1ZjljYjg3NzNkYTI5MDRhYTM4MTkyMzRhYWViZDJlZmI1ZDE1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T10:32:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T10:34:09Z"
      },
      "message": "Move uiInterface.NotifyBlockTip signal above the core/wallet signal\n- This will keep getbestblockhash more in sync with blocknotify callbacks",
      "tree": {
        "sha": "ad6bf795e67beb98a98ac158a3dd85291a95a02a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad6bf795e67beb98a98ac158a3dd85291a95a02a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9af5f9cb8773da2904aa3819234aaebd2efb5d15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXCYjAAoJECnUvLZBb1PskaoQALfjwBLPwLzbnhehKzHa00+m\nqz9DvFcq/tro+aRkH7tEGDKjMiF3GZndH6nIXVdpA4ZYFVklF1QVGALOwhBjEDqG\nu0MKTlubih34yFr0gk7a7w5NbYVagIk8PNaE2RQr6gSH1gzsK2iPCUUKouqbdMzv\n8nG9uixQSV1bc3Qc1orqdqtVMVmruiGs4HuhmfTp4YTAn0JaZLfhlOB1iJOwCawC\nMrUnoDZTjF7dyPdD4dEEcsumqtD1rOTC06TfVqIpR9MO3Pdf/Ha49Yp0QIoYG5NT\nwbm/y952qU2EyMOdRP6PYXxB+KDuh2Tfq3y6V1kTyihyjvhtSbOvUJyV6rCplqfE\ndIH8l1UcISouoHPmpDu3EXJg0VtY6e2c4PeB1Fa1wL55zIteWJcE7kN36gGXFs9/\nYC7v99B5Uhh1DqZfZKXRXK5vjiWEYtZ9NY9YBo++JLmFk7nx7eGe9Dj8aQxMrUoc\n+RYh9B54+CaZBL0tN1FzC7IpWn7wSEhkCCwnwuiBiDpy6y7ddVc3T1u9mqtHia4D\nYK1nQ8+1/6/YtuevL/ulSDR7tAB0OrAx2/xT5Y/uhBb0ZXG3W28bfVUcR+LVECgf\n3RZJsmEi5Myb7tlPLZ9JmrmYrXLzuZczWWnzwQ57CO2EtDz4HkoYK3aGfs/4xa1K\nK6eOghNnNMxN/DWNxsit\n=03Es\n-----END PGP SIGNATURE-----",
        "payload": "tree ad6bf795e67beb98a98ac158a3dd85291a95a02a\nparent 4082e4660305f7696949c3a13e2e9611210894e8\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448879533 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448879649 +0100\n\nMove uiInterface.NotifyBlockTip signal above the core/wallet signal\n- This will keep getbestblockhash more in sync with blocknotify callbacks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9af5f9cb8773da2904aa3819234aaebd2efb5d15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9af5f9cb8773da2904aa3819234aaebd2efb5d15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9af5f9cb8773da2904aa3819234aaebd2efb5d15/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4082e4660305f7696949c3a13e2e9611210894e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4082e4660305f7696949c3a13e2e9611210894e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4082e4660305f7696949c3a13e2e9611210894e8"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 31,
      "deletions": 28
    },
    "files": [
      {
        "sha": "0ae721af44597566ffbbd593e01d4bba1406fb31",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 28,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9af5f9cb8773da2904aa3819234aaebd2efb5d15/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9af5f9cb8773da2904aa3819234aaebd2efb5d15/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9af5f9cb8773da2904aa3819234aaebd2efb5d15",
        "patch": "@@ -2606,40 +2606,43 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n-        if (!fInitialDownload) {\n-            // Find the hashes of all blocks that weren't previously in the best chain.\n-            std::vector<uint256> vHashes;\n-            CBlockIndex *pindexToAnnounce = pindexNewTip;\n-            while (pindexToAnnounce != pindexFork) {\n-                vHashes.push_back(pindexToAnnounce->GetBlockHash());\n-                pindexToAnnounce = pindexToAnnounce->pprev;\n-                if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n-                    // Limit announcements in case of a huge reorganization.\n-                    // Rely on the peer's synchronization mechanism in that case.\n-                    break;\n+        // Always notify the UI if a new block tip was connected\n+        if (pindexFork != pindexNewTip) {\n+            uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n+\n+            if (!fInitialDownload) {\n+                // Find the hashes of all blocks that weren't previously in the best chain.\n+                std::vector<uint256> vHashes;\n+                CBlockIndex *pindexToAnnounce = pindexNewTip;\n+                while (pindexToAnnounce != pindexFork) {\n+                    vHashes.push_back(pindexToAnnounce->GetBlockHash());\n+                    pindexToAnnounce = pindexToAnnounce->pprev;\n+                    if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n+                        // Limit announcements in case of a huge reorganization.\n+                        // Rely on the peer's synchronization mechanism in that case.\n+                        break;\n+                    }\n                 }\n-            }\n-            // Relay inventory, but don't relay old inventory during initial block download.\n-            int nBlockEstimate = 0;\n-            if (fCheckpointsEnabled)\n-                nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n-            {\n-                LOCK(cs_vNodes);\n-                BOOST_FOREACH(CNode* pnode, vNodes) {\n-                    if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n-                        BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n-                            pnode->PushBlockHash(hash);\n+                // Relay inventory, but don't relay old inventory during initial block download.\n+                int nBlockEstimate = 0;\n+                if (fCheckpointsEnabled)\n+                    nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n+                {\n+                    LOCK(cs_vNodes);\n+                    BOOST_FOREACH(CNode* pnode, vNodes) {\n+                        if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n+                            BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n+                                pnode->PushBlockHash(hash);\n+                            }\n                         }\n                     }\n                 }\n-            }\n-            // Notify external listeners about the new tip.\n-            if (!vHashes.empty()) {\n-                GetMainSignals().UpdatedBlockTip(pindexNewTip);\n+                // Notify external listeners about the new tip.\n+                if (!vHashes.empty()) {\n+                    GetMainSignals().UpdatedBlockTip(pindexNewTip);\n+                }\n             }\n         }\n-        // Always notify the UI if a new block tip was connected\n-        uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n     } while(pindexMostWork != chainActive.Tip());\n     CheckBlockIndex(chainparams.GetConsensus());\n "
      }
    ]
  }
]