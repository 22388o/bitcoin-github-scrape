[
  {
    "sha": "7be8df7b783206d676e8c2dae41d90ca7c18921c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmU4ZGY3Yjc4MzIwNmQ2NzZlOGMyZGFlNDFkOTBjYTdjMTg5MjFj",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-11T06:14:17Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-07-17T17:16:41Z"
      },
      "message": "Enable RPCTypeCheckArgument to accept fAllowNull\n\nThis expands the capability of that method and enables it\nto takeover the same checks from RPCTypeCheck and RPCTypeCheckObj\n\nNote the new test on line 69 is consistent with that\non line 86 via De Morgan\u2019s law.",
      "tree": {
        "sha": "f2222ceef1bb26caeda1a5948518f22b6baf950f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2222ceef1bb26caeda1a5948518f22b6baf950f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7be8df7b783206d676e8c2dae41d90ca7c18921c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJbTiR6AAoJEG7l83hfeLNFQtQH/3gJ+Ac3pqtX3dN9N5+Zw041\nuN0e2S7KHO2HR0ctdqottP+OdDcbQa+JZtCw8MHiNn3nPyKyiKvPCbL1y6dmSFFx\nQ9zyJVo1EJgybWgBoe9YMywty1cdQ+l3k34wqDgvO7bi/N3Hfaw6o6+zkbA5S/YI\nx2razq9t1o+oJQ5NUYKiK5tjcSR72vPZDuzyuCqb1C1Q+c5d/MxuluesAYKd6AEz\nDOF5X30zJ6kq24WG+UCejGR8uecnFvynnYTy9XGEsXPHbge7Jy+/U+Y2jhR5scVe\n8aCUKIMAzuASoPaIXrWLU9xY8AeFsMUyo3cSDGfgIB5fj/bD+ROLtiWlenGWAq4=\n=xoBo\n-----END PGP SIGNATURE-----",
        "payload": "tree f2222ceef1bb26caeda1a5948518f22b6baf950f\nparent 6fcdb5ebdd71b8b0fed3df0fd6aa3639bcb87a0b\nauthor Ben Woosley <ben.woosley@gmail.com> 1523427257 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1531847801 -0400\n\nEnable RPCTypeCheckArgument to accept fAllowNull\n\nThis expands the capability of that method and enables it\nto takeover the same checks from RPCTypeCheck and RPCTypeCheckObj\n\nNote the new test on line 69 is consistent with that\non line 86 via De Morgan\u2019s law.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7be8df7b783206d676e8c2dae41d90ca7c18921c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7be8df7b783206d676e8c2dae41d90ca7c18921c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7be8df7b783206d676e8c2dae41d90ca7c18921c/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fcdb5ebdd71b8b0fed3df0fd6aa3639bcb87a0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fcdb5ebdd71b8b0fed3df0fd6aa3639bcb87a0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fcdb5ebdd71b8b0fed3df0fd6aa3639bcb87a0b"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 5,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1dc52807bc435f8987c339cbe485985b57c36f95",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7be8df7b783206d676e8c2dae41d90ca7c18921c/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7be8df7b783206d676e8c2dae41d90ca7c18921c/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=7be8df7b783206d676e8c2dae41d90ca7c18921c",
        "patch": "@@ -59,16 +59,14 @@ void RPCTypeCheck(const UniValue& params,\n             break;\n \n         const UniValue& v = params[i];\n-        if (!(fAllowNull && v.isNull())) {\n-            RPCTypeCheckArgument(v, t);\n-        }\n+        RPCTypeCheckArgument(v, t, fAllowNull);\n         i++;\n     }\n }\n \n-void RPCTypeCheckArgument(const UniValue& value, const UniValueType& typeExpected)\n+void RPCTypeCheckArgument(const UniValue& value, const UniValueType& typeExpected, bool allow_null)\n {\n-    if (!typeExpected.typeAny && value.type() != typeExpected.type) {\n+    if (!(allow_null && value.isNull()) && !typeExpected.typeAny && value.type() != typeExpected.type) {\n         throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected type %s, got %s\", uvTypeName(typeExpected.type), uvTypeName(value.type())));\n     }\n }\n@@ -83,7 +81,7 @@ void RPCTypeCheckObj(const UniValue& o,\n         if (!fAllowNull && v.isNull())\n             throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing %s\", t.first));\n \n-        if (!(t.second.typeAny || v.type() == t.second.type || (fAllowNull && v.isNull()))) {\n+        if (!(fAllowNull && v.isNull()) && !t.second.typeAny && v.type() != t.second.type) {\n             std::string err = strprintf(\"Expected type %s for %s, got %s\",\n                 uvTypeName(t.second.type), t.first, uvTypeName(v.type()));\n             throw JSONRPCError(RPC_TYPE_ERROR, err);"
      },
      {
        "sha": "1f21433b6e13c29de4b5be4b0420cab8f1182db7",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7be8df7b783206d676e8c2dae41d90ca7c18921c/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7be8df7b783206d676e8c2dae41d90ca7c18921c/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=7be8df7b783206d676e8c2dae41d90ca7c18921c",
        "patch": "@@ -75,7 +75,7 @@ void RPCTypeCheck(const UniValue& params,\n /**\n  * Type-check one argument; throws JSONRPCError if wrong type given.\n  */\n-void RPCTypeCheckArgument(const UniValue& value, const UniValueType& typeExpected);\n+void RPCTypeCheckArgument(const UniValue& value, const UniValueType& typeExpected, bool allow_null = false);\n \n /*\n   Check for expected keys/value types in an Object."
      }
    ]
  },
  {
    "sha": "e9bab1959b7d521ce663549a2cf9c820b56149ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWJhYjE5NTliN2Q1MjFjZTY2MzU0OWEyY2Y5YzgyMGI1NjE0OWNl",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-11T06:19:25Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-07-17T17:16:42Z"
      },
      "message": "Fix estimatesmartfee to properly handle a null estimate_mode arg\n\nThe estimate_mode arg is optional in documentation and handling,\nbut the RPCTypeCheck applied to it did not allow null, therefore\nits presence was enforced. Note this only affected null values,\nnot entirely absent arguments because RPCTypeCheck only tests\nagainst the params list as exists and no farther, so this is a\nnarrow bug.\n\nThis also replaces redundant testing via RPCTypeCheck &\nRPCTypeCheckArgument in favor of non-redundant calls to\nRPCTypeCheckArgument. The prior redundancy existed due\nto the prior limitation of the RPCTypeCheckArgument not\nbeing able to allow null.\n\nAdded some call and light functional testing on estimatesmartfee\nand estimaterawfee as well.",
      "tree": {
        "sha": "40da63425535c4ae5e48689cfde63464a918ede5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40da63425535c4ae5e48689cfde63464a918ede5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9bab1959b7d521ce663549a2cf9c820b56149ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJbTiR6AAoJEG7l83hfeLNF08wIALOWnm90T2uefkldlsK1dJmP\niNzkbCswfADINCBzA5kiS7xfuZFWrttVzrh3iSjLhv/IVsjCzVmlj8m9kWnBV18g\nSAFw38DwH8eue/A9aevJsXRgZB/4ul5JXUsw4hU+HiJN0OVTOIyu+bHTR+GekqeT\nJ9ajBL9eEF7WaPWTnPRUyOb1Gczwds0rrF8E59KsBIDj0nn3HoxLry5QfDHViEAO\nIB9wzUo16WGZv7wbtfnBXbFI8xX1kZJgvBkYAS6QCPCEYZhUi19aGRul/MJIvRLf\nYP/oCGOThbnOuQwdqT4vvtz4YPiRQc0uHy/y7fOnsTZ8taQMtdxlT58T7SiHNeg=\n=wvBJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 40da63425535c4ae5e48689cfde63464a918ede5\nparent 7be8df7b783206d676e8c2dae41d90ca7c18921c\nauthor Ben Woosley <ben.woosley@gmail.com> 1523427565 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1531847802 -0400\n\nFix estimatesmartfee to properly handle a null estimate_mode arg\n\nThe estimate_mode arg is optional in documentation and handling,\nbut the RPCTypeCheck applied to it did not allow null, therefore\nits presence was enforced. Note this only affected null values,\nnot entirely absent arguments because RPCTypeCheck only tests\nagainst the params list as exists and no farther, so this is a\nnarrow bug.\n\nThis also replaces redundant testing via RPCTypeCheck &\nRPCTypeCheckArgument in favor of non-redundant calls to\nRPCTypeCheckArgument. The prior redundancy existed due\nto the prior limitation of the RPCTypeCheckArgument not\nbeing able to allow null.\n\nAdded some call and light functional testing on estimatesmartfee\nand estimaterawfee as well.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9bab1959b7d521ce663549a2cf9c820b56149ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9bab1959b7d521ce663549a2cf9c820b56149ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9bab1959b7d521ce663549a2cf9c820b56149ce/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7be8df7b783206d676e8c2dae41d90ca7c18921c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7be8df7b783206d676e8c2dae41d90ca7c18921c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7be8df7b783206d676e8c2dae41d90ca7c18921c"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 74,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9bb22979d3b0d069311180823737b98769aee1b9",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9bab1959b7d521ce663549a2cf9c820b56149ce/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9bab1959b7d521ce663549a2cf9c820b56149ce/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=e9bab1959b7d521ce663549a2cf9c820b56149ce",
        "patch": "@@ -805,10 +805,11 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n             + HelpExampleCli(\"estimatesmartfee\", \"6\")\n             );\n \n-    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n     bool conservative = true;\n+\n+    RPCTypeCheckArgument(request.params[1], UniValue::VSTR, true /* allow_null */);\n     if (!request.params[1].isNull()) {\n         FeeEstimateMode fee_mode;\n         if (!FeeModeFromString(request.params[1].get_str(), fee_mode)) {\n@@ -874,10 +875,11 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n             + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n-    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n     double threshold = 0.95;\n+\n+    RPCTypeCheckArgument(request.params[1], UniValue::VNUM, true /* allow_null */);\n     if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n     }"
      },
      {
        "sha": "711163e9438dae49148e2690fca6f4ed6b0a54d3",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9bab1959b7d521ce663549a2cf9c820b56149ce/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9bab1959b7d521ce663549a2cf9c820b56149ce/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=e9bab1959b7d521ce663549a2cf9c820b56149ce",
        "patch": "@@ -99,7 +99,20 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n     txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})\n \n-def check_estimates(node, fees_seen):\n+def check_raw_estimates(node, fees_seen):\n+    \"\"\"Call estimaterawfee and verify that the estimates meet certain invariants.\"\"\"\n+\n+    delta = 1.0e-6  # account for rounding error\n+    for i in range(1, 26):\n+        for time_horizon, e in node.estimaterawfee(i).items():\n+            feerate = float(e[\"feerate\"])\n+            assert_greater_than(feerate, 0)\n+\n+            if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n+                raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n+                                     % (feerate, min(fees_seen), max(fees_seen)))\n+\n+def check_smart_estimates(node, fees_seen):\n     \"\"\"Call estimatesmartfee and verify that the estimates meet certain invariants.\"\"\"\n \n     delta = 1.0e-6  # account for rounding error\n@@ -122,6 +135,10 @@ def check_estimates(node, fees_seen):\n         else:\n             assert_greater_than_or_equal(i + 1, e[\"blocks\"])\n \n+def check_estimates(node, fees_seen):\n+    check_raw_estimates(node, fees_seen)\n+    check_smart_estimates(node, fees_seen)\n+\n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3"
      },
      {
        "sha": "521cb71bbca47b6e6d11653e62a8bc9c614600d5",
        "filename": "test/functional/rpc_estimatefee.py",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9bab1959b7d521ce663549a2cf9c820b56149ce/test/functional/rpc_estimatefee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9bab1959b7d521ce663549a2cf9c820b56149ce/test/functional/rpc_estimatefee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_estimatefee.py?ref=e9bab1959b7d521ce663549a2cf9c820b56149ce",
        "patch": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the estimatefee RPCs.\n+\n+Test the following RPCs:\n+   - estimatesmartfee\n+   - estimaterawfee\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class EstimateFeeTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        # missing required params\n+        assert_raises_rpc_error(-1, \"estimatesmartfee\", self.nodes[0].estimatesmartfee)\n+        assert_raises_rpc_error(-1, \"estimaterawfee\", self.nodes[0].estimaterawfee)\n+\n+        # wrong type for conf_target\n+        assert_raises_rpc_error(-3, \"Expected type number, got string\", self.nodes[0].estimatesmartfee, 'foo')\n+        assert_raises_rpc_error(-3, \"Expected type number, got string\", self.nodes[0].estimaterawfee, 'foo')\n+\n+        # wrong type for estimatesmartfee(estimate_mode)\n+        assert_raises_rpc_error(-3, \"Expected type string, got number\", self.nodes[0].estimatesmartfee, 1, 1)\n+        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", self.nodes[0].estimatesmartfee, 1, 'foo')\n+\n+        # wrong type for estimaterawfee(threshold)\n+        assert_raises_rpc_error(-3, \"Expected type number, got string\", self.nodes[0].estimaterawfee, 1, 'foo')\n+\n+        # extra params\n+        assert_raises_rpc_error(-1, \"estimatesmartfee\", self.nodes[0].estimatesmartfee, 1, 'ECONOMICAL', 1)\n+        assert_raises_rpc_error(-1, \"estimaterawfee\", self.nodes[0].estimaterawfee, 1, 1, 1)\n+\n+        # valid calls\n+        self.nodes[0].estimatesmartfee(1)\n+        self.nodes[0].estimatesmartfee(1, None)\n+        self.nodes[0].estimatesmartfee(1, 'ECONOMICAL')\n+\n+        self.nodes[0].estimaterawfee(1)\n+        self.nodes[0].estimaterawfee(1, None)\n+        self.nodes[0].estimaterawfee(1, 1)\n+\n+\n+if __name__ == '__main__':\n+    EstimateFeeTest().main()"
      },
      {
        "sha": "9cb3e8f0d17ff38c5ca6fcdaa2bd386ce5f0a48b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9bab1959b7d521ce663549a2cf9c820b56149ce/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9bab1959b7d521ce663549a2cf9c820b56149ce/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e9bab1959b7d521ce663549a2cf9c820b56149ce",
        "patch": "@@ -102,6 +102,7 @@\n     'rpc_users.py',\n     'feature_proxy.py',\n     'rpc_signrawtransaction.py',\n+    'rpc_estimatefee.py',\n     'p2p_disconnect_ban.py',\n     'rpc_decodescript.py',\n     'rpc_blockchain.py',"
      }
    ]
  }
]