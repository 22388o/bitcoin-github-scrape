[
  {
    "sha": "28aa82ff99e7a71e098ae95a5d07abcba834a0d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGFhODJmZjk5ZTdhNzFlMDk4YWU5NWE1ZDA3YWJjYmE4MzRhMGQz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-05-28T09:43:53Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-05-28T09:43:53Z"
      },
      "message": "gui: Refactor open wallet activity",
      "tree": {
        "sha": "6affdea092d0909f0d26e90a91b327c147000de5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6affdea092d0909f0d26e90a91b327c147000de5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28aa82ff99e7a71e098ae95a5d07abcba834a0d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28aa82ff99e7a71e098ae95a5d07abcba834a0d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28aa82ff99e7a71e098ae95a5d07abcba834a0d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28aa82ff99e7a71e098ae95a5d07abcba834a0d3/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76e2cded477bc483ec610212bdadf21fe35292d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76e2cded477bc483ec610212bdadf21fe35292d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76e2cded477bc483ec610212bdadf21fe35292d4"
      }
    ],
    "stats": {
      "total": 161,
      "additions": 106,
      "deletions": 55
    },
    "files": [
      {
        "sha": "6931ada15ebd521723afacd5f063e6228c185929",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 23,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28aa82ff99e7a71e098ae95a5d07abcba834a0d3/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28aa82ff99e7a71e098ae95a5d07abcba834a0d3/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=28aa82ff99e7a71e098ae95a5d07abcba834a0d3",
        "patch": "@@ -382,31 +382,13 @@ void BitcoinGUI::createActions()\n                     continue;\n                 }\n \n-                connect(action, &QAction::triggered, [this, name, path] {\n-                    OpenWalletActivity* activity = m_wallet_controller->openWallet(path);\n-\n-                    QProgressDialog* dialog = new QProgressDialog(this);\n-                    dialog->setLabelText(tr(\"Opening Wallet <b>%1</b>...\").arg(name.toHtmlEscaped()));\n-                    dialog->setRange(0, 0);\n-                    dialog->setCancelButton(nullptr);\n-                    dialog->setWindowModality(Qt::ApplicationModal);\n-                    dialog->show();\n-\n-                    connect(activity, &OpenWalletActivity::message, this, [this] (QMessageBox::Icon icon, QString text) {\n-                        QMessageBox box;\n-                        box.setIcon(icon);\n-                        box.setText(tr(\"Open Wallet Failed\"));\n-                        box.setInformativeText(text);\n-                        box.setStandardButtons(QMessageBox::Ok);\n-                        box.setDefaultButton(QMessageBox::Ok);\n-                        connect(this, &QObject::destroyed, &box, &QDialog::accept);\n-                        box.exec();\n-                    });\n+                connect(action, &QAction::triggered, [this, path] {\n+                    OpenWalletActivity* activity = new OpenWalletActivity(this);\n                     connect(activity, &OpenWalletActivity::opened, this, &BitcoinGUI::setCurrentWallet);\n                     connect(activity, &OpenWalletActivity::finished, activity, &QObject::deleteLater);\n-                    connect(activity, &OpenWalletActivity::finished, dialog, &QObject::deleteLater);\n-                    bool invoked = QMetaObject::invokeMethod(activity, \"open\");\n-                    assert(invoked);\n+                    activity->setWalletController(m_wallet_controller);\n+                    activity->setPath(path);\n+                    activity->open();\n                 });\n             }\n             if (wallets.empty()) {"
      },
      {
        "sha": "b4016d53f98754977c5b4385b471bf6eb77c2c4d",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 84,
        "deletions": 25,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28aa82ff99e7a71e098ae95a5d07abcba834a0d3/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28aa82ff99e7a71e098ae95a5d07abcba834a0d3/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=28aa82ff99e7a71e098ae95a5d07abcba834a0d3",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <qt/guiutil.h>\n #include <qt/walletcontroller.h>\n \n #include <interfaces/handler.h>\n@@ -13,10 +14,13 @@\n #include <QMessageBox>\n #include <QMutexLocker>\n #include <QThread>\n+#include <QTimer>\n #include <QWindow>\n \n WalletController::WalletController(interfaces::Node& node, const PlatformStyle* platform_style, OptionsModel* options_model, QObject* parent)\n     : QObject(parent)\n+    , m_activity_thread(new QThread(this))\n+    , m_activity_worker(new QObject)\n     , m_node(node)\n     , m_platform_style(platform_style)\n     , m_options_model(options_model)\n@@ -29,15 +33,17 @@ WalletController::WalletController(interfaces::Node& node, const PlatformStyle*\n         getOrCreateWallet(std::move(wallet));\n     }\n \n-    m_activity_thread.start();\n+    m_activity_worker->moveToThread(m_activity_thread);\n+    m_activity_thread->start();\n }\n \n // Not using the default destructor because not all member types definitions are\n // available in the header, just forward declared.\n WalletController::~WalletController()\n {\n-    m_activity_thread.quit();\n-    m_activity_thread.wait();\n+    m_activity_thread->quit();\n+    m_activity_thread->wait();\n+    delete m_activity_worker;\n }\n \n std::vector<WalletModel*> WalletController::getWallets() const\n@@ -57,13 +63,6 @@ std::vector<std::string> WalletController::getWalletsAvailableToOpen() const\n     return wallets;\n }\n \n-OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidget* parent)\n-{\n-    OpenWalletActivity* activity = new OpenWalletActivity(this, name);\n-    activity->moveToThread(&m_activity_thread);\n-    return activity;\n-}\n-\n void WalletController::closeWallet(WalletModel* wallet_model, QWidget* parent)\n {\n     QMessageBox box(parent);\n@@ -148,22 +147,82 @@ void WalletController::removeAndDeleteWallet(WalletModel* wallet_model)\n }\n \n \n-OpenWalletActivity::OpenWalletActivity(WalletController* wallet_controller, const std::string& name)\n-    : m_wallet_controller(wallet_controller)\n-    , m_name(name)\n-{}\n+OpenWalletActivity::OpenWalletActivity(QWidget* parent)\n+    : QObject(parent)\n+    , m_parent(parent)\n+{\n+}\n+\n+void OpenWalletActivity::setPath(const std::string& path)\n+{\n+    m_path = path;\n+}\n+\n+void OpenWalletActivity::setWalletController(WalletController* wallet_controller)\n+{\n+    m_wallet_controller = wallet_controller;\n+}\n+\n+void OpenWalletActivity::showMessage(const QMessageBox::Icon& icon, const QString& text)\n+{\n+    QMessageBox box(m_parent);\n+    box.setIcon(icon);\n+    box.setText(tr(\"Open Wallet Failed\"));\n+    box.setInformativeText(text);\n+    box.setStandardButtons(QMessageBox::Ok);\n+    box.setDefaultButton(QMessageBox::Ok);\n+    box.exec();\n+}\n+\n+void OpenWalletActivity::showProgress()\n+{\n+    assert(!m_progress_dialog);\n+    QString name = m_path.empty() ? QString(\"[\"+tr(\"default wallet\")+\"]\") : QString::fromStdString(m_path);\n+    m_progress_dialog = new QProgressDialog(m_parent);\n+    GUIUtil::PolishProgressDialog(m_progress_dialog);\n+    m_progress_dialog->setLabelText(tr(\"Opening Wallet <b>%1</b>...\").arg(name.toHtmlEscaped()));\n+    m_progress_dialog->setRange(0, 0);\n+    m_progress_dialog->setCancelButton(nullptr);\n+    m_progress_dialog->setWindowModality(Qt::ApplicationModal);\n+    m_progress_dialog->show();\n+}\n+\n+void OpenWalletActivity::hideProgress()\n+{\n+    assert(m_progress_dialog);\n+    delete m_progress_dialog;\n+    m_progress_dialog = nullptr;\n+}\n \n void OpenWalletActivity::open()\n {\n-    std::string error, warning;\n-    std::unique_ptr<interfaces::Wallet> wallet = m_wallet_controller->m_node.loadWallet(m_name, error, warning);\n-    if (!warning.empty()) {\n-        Q_EMIT message(QMessageBox::Warning, QString::fromStdString(warning));\n-    }\n-    if (wallet) {\n-        Q_EMIT opened(m_wallet_controller->getOrCreateWallet(std::move(wallet)));\n-    } else {\n-        Q_EMIT message(QMessageBox::Critical, QString::fromStdString(error));\n-    }\n-    Q_EMIT finished();\n+    assert(m_wallet_controller);\n+\n+    QTimer::singleShot(0, m_wallet_controller->m_activity_worker, [this]() {\n+        bool called = QMetaObject::invokeMethod(this, \"showProgress\", Qt::BlockingQueuedConnection);\n+        assert(called);\n+\n+        std::string error, warning;\n+        std::unique_ptr<interfaces::Wallet> wallet = m_wallet_controller->m_node.loadWallet(m_path, error, warning);\n+\n+        called = QMetaObject::invokeMethod(this, \"hideProgress\", Qt::BlockingQueuedConnection);\n+        assert(called);\n+\n+        if (!warning.empty()) {\n+            called = QMetaObject::invokeMethod(this, \"showMessage\", Qt::BlockingQueuedConnection,\n+                Q_ARG(QMessageBox::Icon, QMessageBox::Warning),\n+                Q_ARG(QString, QString::fromStdString(warning)));\n+            assert(called);\n+        }\n+        if (wallet) {\n+            Q_EMIT opened(m_wallet_controller->getOrCreateWallet(std::move(wallet)));\n+        } else {\n+            called = QMetaObject::invokeMethod(this, \"showMessage\", Qt::BlockingQueuedConnection,\n+                Q_ARG(QMessageBox::Icon, QMessageBox::Critical),\n+                Q_ARG(QString, QString::fromStdString(error)));\n+            assert(called);\n+        }\n+\n+        Q_EMIT finished();\n+    });\n }"
      },
      {
        "sha": "00fa09b28ed80efa757592ab781b12efc7c17007",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28aa82ff99e7a71e098ae95a5d07abcba834a0d3/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28aa82ff99e7a71e098ae95a5d07abcba834a0d3/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=28aa82ff99e7a71e098ae95a5d07abcba834a0d3",
        "patch": "@@ -14,6 +14,7 @@\n \n #include <QMessageBox>\n #include <QMutex>\n+#include <QProgressDialog>\n #include <QThread>\n \n class OptionsModel;\n@@ -43,7 +44,6 @@ class WalletController : public QObject\n     std::vector<WalletModel*> getWallets() const;\n     std::vector<std::string> getWalletsAvailableToOpen() const;\n \n-    OpenWalletActivity* openWallet(const std::string& name, QWidget* parent = nullptr);\n     void closeWallet(WalletModel* wallet_model, QWidget* parent = nullptr);\n \n private Q_SLOTS:\n@@ -56,7 +56,8 @@ private Q_SLOTS:\n     void coinsSent(WalletModel* wallet_model, SendCoinsRecipient recipient, QByteArray transaction);\n \n private:\n-    QThread m_activity_thread;\n+    QThread* const m_activity_thread;\n+    QObject* const m_activity_worker;\n     interfaces::Node& m_node;\n     const PlatformStyle* const m_platform_style;\n     OptionsModel* const m_options_model;\n@@ -72,19 +73,28 @@ class OpenWalletActivity : public QObject\n     Q_OBJECT\n \n public:\n-    OpenWalletActivity(WalletController* wallet_controller, const std::string& name);\n+    explicit OpenWalletActivity(QWidget* parent = nullptr);\n+\n+    void setPath(const std::string& path);\n+    void setWalletController(WalletController* wallet_controller);\n \n-public Q_SLOTS:\n     void open();\n \n+private Q_SLOTS:\n+    void showMessage(const QMessageBox::Icon& icon, const QString& text);\n+    void showProgress();\n+    void hideProgress();\n+\n Q_SIGNALS:\n-    void message(QMessageBox::Icon icon, const QString text);\n     void finished();\n+    void message(QMessageBox::Icon icon, const QString text);\n     void opened(WalletModel* wallet_model);\n \n private:\n-    WalletController* const m_wallet_controller;\n-    std::string const m_name;\n+    QWidget* const m_parent;\n+    std::string m_path;\n+    WalletController* m_wallet_controller{nullptr};\n+    QProgressDialog* m_progress_dialog{nullptr};\n };\n \n #endif // BITCOIN_QT_WALLETCONTROLLER_H"
      }
    ]
  }
]