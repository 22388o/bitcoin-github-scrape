[
  {
    "sha": "6f3d5ad67ac8e7b50abae1a2949898d858e38106",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjNkNWFkNjdhYzhlN2I1MGFiYWUxYTI5NDk4OThkODU4ZTM4MTA2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T05:33:51Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T01:52:25Z"
      },
      "message": "test: use f-strings in feature_asmap.py",
      "tree": {
        "sha": "1ca1acb921845f4f6acfa9fca96097ebcffa10f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ca1acb921845f4f6acfa9fca96097ebcffa10f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f3d5ad67ac8e7b50abae1a2949898d858e38106",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcZ9kACgkQLuufXMCV\nJsEqxBAAqpE0EOI8sBBPtYUIg/PpyDMMbprX2gABFmu8GpRo1QvqKLDD3GtTS0ly\nED4zGnnE3st9DOMTSphQyjuXk0EBfPmTsjktFWjJ3HPGy834tfsyZ9Zde0OE5J8v\nU2ch2RFrqXcxXvcPc6ISXpTuTgvoPFTbuOEjo9l+PPXPzTnk7NmovbMVxnbrGEbI\nFCQmm2NF3RvepmwzTcocnf7nmyxuBmcwXQ5wbbGQ5aK1lPucmOtE3IQ6OmZ2lf3P\nATMZpAlpIHoF1QfcnIbl1k/V3ERpuTZt7oG86FOaxe5rf8YAguueqeFjtxPZ4JvK\nV7zO8dIk4BLvYEzr2GiN7auNXKWXseuxyRrjLQMZrMZUNGWr0Zu7/bByJibLYB6J\nI16NBanxMjU/QX1AP1d5Q1swFiby6zDhNyEF6zbM4GIqrLpKcwRMrzUu6Bp6luot\nMjaLrhylIe6JL+ko0f15j17cM0N7cdOULOmLTibgKokrxcdoY9TQStK/gf2hSxpQ\nhAYOdsx0JA/2/o1QtwPFc5mpLNhzl774h8mhhaVQ/8YJRikh9zABK53Sfmwxprhe\n2Xg+/fF9BM2LffxJm9rfPeRGovuZ7deDlA675BGc/Od9Ksfngq9hi+qCwsUVK1/M\nYszFOBpFDqRrZrss1yQKdziNOWlyQFRGuOPThkTSUEnrtP+sMbY=\n=NImj\n-----END PGP SIGNATURE-----",
        "payload": "tree 1ca1acb921845f4f6acfa9fca96097ebcffa10f2\nparent b5c468cfe35e5b24b14b03ff91fe1a4e72ce53f6\nauthor fanquake <fanquake@gmail.com> 1623389631 +0800\ncommitter fanquake <fanquake@gmail.com> 1629251545 +0800\n\ntest: use f-strings in feature_asmap.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3d5ad67ac8e7b50abae1a2949898d858e38106",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f3d5ad67ac8e7b50abae1a2949898d858e38106",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3d5ad67ac8e7b50abae1a2949898d858e38106/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5c468cfe35e5b24b14b03ff91fe1a4e72ce53f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5c468cfe35e5b24b14b03ff91fe1a4e72ce53f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5c468cfe35e5b24b14b03ff91fe1a4e72ce53f6"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "704dd6126b5f76dc754ec2abbbfe945cca4447d2",
        "filename": "test/functional/feature_asmap.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3d5ad67ac8e7b50abae1a2949898d858e38106/test/functional/feature_asmap.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3d5ad67ac8e7b50abae1a2949898d858e38106/test/functional/feature_asmap.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_asmap.py?ref=6f3d5ad67ac8e7b50abae1a2949898d858e38106",
        "patch": "@@ -31,8 +31,8 @@\n VERSION = 'fec61fa21a9f46f3b17bdcd660d7f4cd90b966aad3aec593c99b35f0aca15853'\n \n def expected_messages(filename):\n-    return ['Opened asmap file \"{}\" (59 bytes) from disk'.format(filename),\n-            'Using asmap version {} for IP bucketing'.format(VERSION)]\n+    return [f'Opened asmap file \"{filename}\" (59 bytes) from disk',\n+            f'Using asmap version {VERSION} for IP bucketing']\n \n class AsmapTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -50,7 +50,7 @@ def test_asmap_with_absolute_path(self):\n         filename = os.path.join(self.datadir, 'my-map-file.map')\n         shutil.copyfile(self.asmap_raw, filename)\n         with self.node.assert_debug_log(expected_messages(filename)):\n-            self.start_node(0, ['-asmap={}'.format(filename)])\n+            self.start_node(0, [f'-asmap={filename}'])\n         os.remove(filename)\n \n     def test_asmap_with_relative_path(self):\n@@ -60,13 +60,13 @@ def test_asmap_with_relative_path(self):\n         filename = os.path.join(self.datadir, name)\n         shutil.copyfile(self.asmap_raw, filename)\n         with self.node.assert_debug_log(expected_messages(filename)):\n-            self.start_node(0, ['-asmap={}'.format(name)])\n+            self.start_node(0, [f'-asmap={name}'])\n         os.remove(filename)\n \n     def test_default_asmap(self):\n         shutil.copyfile(self.asmap_raw, self.default_asmap)\n         for arg in ['-asmap', '-asmap=']:\n-            self.log.info('Test bitcoind {} (using default map file)'.format(arg))\n+            self.log.info(f'Test bitcoind {arg} (using default map file)')\n             self.stop_node(0)\n             with self.node.assert_debug_log(expected_messages(self.default_asmap)):\n                 self.start_node(0, [arg])\n@@ -75,15 +75,15 @@ def test_default_asmap(self):\n     def test_default_asmap_with_missing_file(self):\n         self.log.info('Test bitcoind -asmap with missing default map file')\n         self.stop_node(0)\n-        msg = \"Error: Could not find asmap file \\\"{}\\\"\".format(self.default_asmap)\n+        msg = f\"Error: Could not find asmap file \\\"{self.default_asmap}\\\"\"\n         self.node.assert_start_raises_init_error(extra_args=['-asmap'], expected_msg=msg)\n \n     def test_empty_asmap(self):\n         self.log.info('Test bitcoind -asmap with empty map file')\n         self.stop_node(0)\n         with open(self.default_asmap, \"w\", encoding=\"utf-8\") as f:\n             f.write(\"\")\n-        msg = \"Error: Could not parse asmap file \\\"{}\\\"\".format(self.default_asmap)\n+        msg = f\"Error: Could not parse asmap file \\\"{self.default_asmap}\\\"\"\n         self.node.assert_start_raises_init_error(extra_args=['-asmap'], expected_msg=msg)\n         os.remove(self.default_asmap)\n "
      }
    ]
  },
  {
    "sha": "5453e8706278918ac51a725e81599cfa18c8cdbc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDUzZTg3MDYyNzg5MThhYzUxYTcyNWU4MTU5OWNmYTE4YzhjZGJj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T05:40:41Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:08Z"
      },
      "message": "test: use f-strings in feature_backwards_compatibility.py",
      "tree": {
        "sha": "d0c287dd1769dfd3b7a34ca7de43dceeb24559c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0c287dd1769dfd3b7a34ca7de43dceeb24559c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5453e8706278918ac51a725e81599cfa18c8cdbc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcju8ACgkQLuufXMCV\nJsG2Mw//VjXZHLHtEmTOqSck9S4o3ubq9b7BI1sJ8uwTLZXWOmyQFo7qG1jAc+1v\nrM5x2ydf8DeJcIG473/pwUthLPOYFzB6ljNWiVOZk/oxnyItZA8o2wMeunjFMOAt\nMQ6F4VeUcsBhuvQKHbMYDFQuk2T1mf/eueq/1RByr3DUQ2KKiWBmuuJmkYHDmzx/\nHPqQ9gsblp65yzqAZ7+0FXoHN6TxaRyf5k5YQLsDOAU5CRDBkFLPXNZW1ZymjVjx\nMIDrz9iBW3IZUsKe94MIe4/KTeFwDtmanoiFbGmVM02f542zgI41GaApLiOUsnUm\npcEvd72enS6NJpHXyXHm4uMhzlGQjvgmSMFmdwivnejKh1w/hcJKJykhATECZ5tQ\nn3K2vKUj+tnatAwCHOy4d5eu7Vs01eR3tdVfWx1gKDOPq2IiehZ8vQelzj3LGykw\n3E2S19z4/y+sXRlosFvrVQvv5HX3rGhIsXi5J+HhvYnMIwZKHNezUNMMJajDfqFf\nanVTecEaCCXFSp1TTaNRaQL0/YOnz7z2Z3qDIaoe1AwW6+0QlaTBtL3YGnAQ9pgd\ntihcN/oms0mn4fc9W3n3EH8xTcu1zobLKwB8s5kvRZIeWsVDCEwprNy5c5fdCg3v\nN8+YsFQmrnRhz1h4l451oNY4KAyEzSL5RJPIz2PSO8Ob2SiEzn0=\n=Gz6O\n-----END PGP SIGNATURE-----",
        "payload": "tree d0c287dd1769dfd3b7a34ca7de43dceeb24559c8\nparent 6f3d5ad67ac8e7b50abae1a2949898d858e38106\nauthor fanquake <fanquake@gmail.com> 1623390041 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261548 +0800\n\ntest: use f-strings in feature_backwards_compatibility.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5453e8706278918ac51a725e81599cfa18c8cdbc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5453e8706278918ac51a725e81599cfa18c8cdbc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5453e8706278918ac51a725e81599cfa18c8cdbc/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f3d5ad67ac8e7b50abae1a2949898d858e38106",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3d5ad67ac8e7b50abae1a2949898d858e38106",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f3d5ad67ac8e7b50abae1a2949898d858e38106"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "978080703e99cd6fcb86128a6be0f3674dbb8e59",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5453e8706278918ac51a725e81599cfa18c8cdbc/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5453e8706278918ac51a725e81599cfa18c8cdbc/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=5453e8706278918ac51a725e81599cfa18c8cdbc",
        "patch": "@@ -366,7 +366,7 @@ def run_test(self):\n             assert_equal(load_res['warning'], '')\n             wallet = node_master.get_wallet_rpc(\"u1_v16\")\n             info = wallet.getaddressinfo(v16_addr)\n-            descriptor = \"wpkh([\" + info[\"hdmasterfingerprint\"] + hdkeypath[1:] + \"]\" + v16_pubkey + \")\"\n+            descriptor = f\"wpkh([{info['hdmasterfingerprint']}{hdkeypath[1:]}]{v16_pubkey})\"\n             assert_equal(info[\"desc\"], descsum_create(descriptor))\n \n             # Now copy that same wallet back to 0.16 to make sure no automatic upgrade breaks it\n@@ -389,7 +389,7 @@ def run_test(self):\n             node_master.loadwallet(\"u1_v17\")\n             wallet = node_master.get_wallet_rpc(\"u1_v17\")\n             info = wallet.getaddressinfo(address)\n-            descriptor = \"wpkh([\" + info[\"hdmasterfingerprint\"] + hdkeypath[1:] + \"]\" + pubkey + \")\"\n+            descriptor = f\"wpkh([{info['hdmasterfingerprint']}{hdkeypath[1:]}]{pubkey})\"\n             assert_equal(info[\"desc\"], descsum_create(descriptor))\n \n             # Now copy that same wallet back to 0.17 to make sure no automatic upgrade breaks it"
      }
    ]
  },
  {
    "sha": "dca173cc044270b30782b1e3355e9dcb8c534295",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2ExNzNjYzA0NDI3MGIzMDc4MmIxZTMzNTVlOWRjYjhjNTM0Mjk1",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T05:42:56Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:17Z"
      },
      "message": "test: use f-strings in feature_blocksdir.py",
      "tree": {
        "sha": "5a8e4f63e25c4dbec1b28926cccad61d02327316",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a8e4f63e25c4dbec1b28926cccad61d02327316"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dca173cc044270b30782b1e3355e9dcb8c534295",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvUACgkQLuufXMCV\nJsEUTBAAiwhKjlPvAD40/BOmx2ts39NVui0+3iHJ0dANUn7OkDMPo9y6ZSMwD5n4\nfKIO9rXC6UC7dd2dTFilF3rUYrS7gbvjIcn5X7C1ymPaFQQW/5D+HwJqIvTkcC9V\n4ivovSMiPF5h5+XLkq9Go/AkXC/28RP36A3lrR4xeyDFTLjRyeOZsvsiKltlzCZG\ngVrFf5uOQSyK9DvRWpMq6eogFoQ7h4CgSfDpazWrAjX7/grV+7jQICsAzKHR3USL\nOqp0GzQH5eAzG8ySo0JeaIT7eu1bOBktbjssbDECNolW6uG0cbYE7m/kU7SD11V4\nUFBbNZisuyYASBT3K353byXeYVP0u/aEmy5A6ixtL5+MFxfCIAakt+Uv1UUEi8kS\nOYw+GyVPUEfcq5F47tNuwQyuch311zlDqG3yVss0XvY2OqOTVeDFswdy1xzSrFKW\nUc8GDuccbg+v9eiOqdfUTWor++wfT02EVjqKPWNlBRKFSs8x9C+ZAaVvgLjdsq4/\nqernLdxQC/TupyurxoHlT5qVppUpl33WfIUextOdckXMphg1oEztvVLR+GHRKBO4\nOtzk9+0YH7DgqM7tDOc/UjW9xnpSNOWHWWXrWRBH7ByW899j4K2jZYlVAvV/ZezT\n1BK95WWQzQ7KGXV2kvX9zLlK7BOZ5GO6b9KSX6f1j2fssubcq1E=\n=hB2l\n-----END PGP SIGNATURE-----",
        "payload": "tree 5a8e4f63e25c4dbec1b28926cccad61d02327316\nparent 5453e8706278918ac51a725e81599cfa18c8cdbc\nauthor fanquake <fanquake@gmail.com> 1623390176 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261557 +0800\n\ntest: use f-strings in feature_blocksdir.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca173cc044270b30782b1e3355e9dcb8c534295",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dca173cc044270b30782b1e3355e9dcb8c534295",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca173cc044270b30782b1e3355e9dcb8c534295/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5453e8706278918ac51a725e81599cfa18c8cdbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5453e8706278918ac51a725e81599cfa18c8cdbc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5453e8706278918ac51a725e81599cfa18c8cdbc"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d3276e64ee41894f4d22f81b792d7ad554f7add6",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dca173cc044270b30782b1e3355e9dcb8c534295/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dca173cc044270b30782b1e3355e9dcb8c534295/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=dca173cc044270b30782b1e3355e9dcb8c534295",
        "patch": "@@ -24,10 +24,10 @@ def run_test(self):\n         initialize_datadir(self.options.tmpdir, 0, self.chain)\n         self.log.info(\"Starting with nonexistent blocksdir ...\")\n         blocksdir_path = os.path.join(self.options.tmpdir, 'blocksdir')\n-        self.nodes[0].assert_start_raises_init_error([\"-blocksdir=\" + blocksdir_path], 'Error: Specified blocks directory \"{}\" does not exist.'.format(blocksdir_path))\n+        self.nodes[0].assert_start_raises_init_error([f\"-blocksdir={blocksdir_path}\"], f'Error: Specified blocks directory \"{blocksdir_path}\" does not exist.')\n         os.mkdir(blocksdir_path)\n         self.log.info(\"Starting with existing blocksdir ...\")\n-        self.start_node(0, [\"-blocksdir=\" + blocksdir_path])\n+        self.start_node(0, [f\"-blocksdir={blocksdir_path}\"])\n         self.log.info(\"mining blocks..\")\n         self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n         assert os.path.isfile(os.path.join(blocksdir_path, self.chain, \"blocks\", \"blk00000.dat\"))"
      }
    ]
  },
  {
    "sha": "36d33d32b1b498b61f56d552f6e2c1d064f978c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmQzM2QzMmIxYjQ5OGI2MWY1NmQ1NTJmNmUyYzFkMDY0Zjk3OGMz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T05:47:14Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:17Z"
      },
      "message": "test: use f-strings in feature_cltv.py",
      "tree": {
        "sha": "3ba886616ee730a1a77436c17a8ab6383a2d08c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ba886616ee730a1a77436c17a8ab6383a2d08c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36d33d32b1b498b61f56d552f6e2c1d064f978c3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvUACgkQLuufXMCV\nJsHA+A//fjYRHsCFQKMEBgycsr0rqUa0oFDiUf/Ks47cPL3Q6lhd59XPvlwoQX1Q\n1RoK0DWJbTOm0ruCYR4W9bwzylDPHGPPDyv5AxloRzDxM25WgHXLULGPhs0DUuFP\nQYGMY/j/1ZNbRzGm5RZdZrASDMwm0ep8f40ULnHAO1cPH9b6crCtkapZ9rkJD+ih\nG+9XDPJMqj4e7iyd9UKHHsy91WoCsBY+YaTlC3wgWHzM/QJrcGP0CFwfQXPYszi0\nda1Q2lDQuh2rV0iHSk8KZ4jCmlQqPTpyLd8Tx6pEzIuLTYOwnsskBZ6sTsBzPfdQ\ncZxyfPVtWLEYqWAqJdVUsoo9BNKdIsvt7PvxVCx8OSObLgQJQe62NKTdSEKMbTv9\nbZJCBIPZt1OwAGQTR3DQMZ8hYXuZz+Iydcxyul4Z9tMHt836Hw9bIic6nYtY2Cva\nuc9916sPf+byBR1WSba2UdWWPpb7t3e++XDxgKhf55eNNW8zvKUsNzV9zuSzlTb8\ny62Q3G9bYlTb+wkNzLvmFhjz8/GzJzgLc4KTTjBejC5Wcad6mMnASmG0W3r4daxi\nxvUB7C7Z9mHIHYhQxgjPQlQ0JoE8ZttycTKMifSnM2+Nvvqt4NyaNcWOxHqzl32j\n5eBJ5TFpcv5dVG7WdeKvt31inMiIp0bpRoPfy9ZfCg8uLaAG/Zg=\n=dr/S\n-----END PGP SIGNATURE-----",
        "payload": "tree 3ba886616ee730a1a77436c17a8ab6383a2d08c6\nparent dca173cc044270b30782b1e3355e9dcb8c534295\nauthor fanquake <fanquake@gmail.com> 1623390434 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261557 +0800\n\ntest: use f-strings in feature_cltv.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36d33d32b1b498b61f56d552f6e2c1d064f978c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36d33d32b1b498b61f56d552f6e2c1d064f978c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36d33d32b1b498b61f56d552f6e2c1d064f978c3/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dca173cc044270b30782b1e3355e9dcb8c534295",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca173cc044270b30782b1e3355e9dcb8c534295",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dca173cc044270b30782b1e3355e9dcb8c534295"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dc5bffe33ee9ed2cd0e04b34740add5cdcc0b3c4",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d33d32b1b498b61f56d552f6e2c1d064f978c3/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d33d32b1b498b61f56d552f6e2c1d064f978c3/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=36d33d32b1b498b61f56d552f6e2c1d064f978c3",
        "patch": "@@ -135,7 +135,7 @@ def run_test(self):\n         block.nVersion = 3\n         block.solve()\n \n-        with self.nodes[0].assert_debug_log(expected_msgs=['{}, bad-version(0x00000003)'.format(block.hash)]):\n+        with self.nodes[0].assert_debug_log(expected_msgs=[f'{block.hash}, bad-version(0x00000003)']):\n             peer.send_and_ping(msg_block(block))\n             assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n             peer.sync_with_ping()\n@@ -173,8 +173,7 @@ def run_test(self):\n             block.hashMerkleRoot = block.calc_merkle_root()\n             block.solve()\n \n-            with self.nodes[0].assert_debug_log(expected_msgs=['CheckInputScripts on {} failed with {}'.format(\n-                                                block.vtx[-1].hash, expected_cltv_reject_reason)]):\n+            with self.nodes[0].assert_debug_log(expected_msgs=[f'CheckInputScripts on {block.vtx[-1].hash} failed with {expected_cltv_reject_reason}']):\n                 peer.send_and_ping(msg_block(block))\n                 assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n                 peer.sync_with_ping()"
      }
    ]
  },
  {
    "sha": "e2f1fd8ee92fa421b6d293169044d6ddd5a9b8df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmYxZmQ4ZWU5MmZhNDIxYjZkMjkzMTY5MDQ0ZDZkZGQ1YTliOGRm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T05:52:58Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:17Z"
      },
      "message": "test: use f-strings in feature_config_args.py",
      "tree": {
        "sha": "7756dc34d4f7e10bf74d03ba0010847c7de28d5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7756dc34d4f7e10bf74d03ba0010847c7de28d5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2f1fd8ee92fa421b6d293169044d6ddd5a9b8df",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvUACgkQLuufXMCV\nJsFZ+w/9GCbGN0+Y8zXcWZBG2s+an8Nfb46c+ajXZOoQNfyczx4tzj2HrhvZMYfY\nt8a01xr0qMlNm9eLCynTvLTrxWJJZC/4SSXnxgDO711c6+ii8T/r0Hb6m8rb/fSI\n/m3aDHGEA/0gPGSy4qnDY/sY6rrmkxbWpydOOKgH9/w27MLcqMKm2QpRCMA4vaIH\noYIcBrWREn5I8wUeZW8ckYg8Nqvy5gGhDdYfgshSUzQ19MUSFP0djZfnv9WST1jw\nqWFNECAzMNSIQk8MrK40bUTRNRdAGnLYUS0PXqgqlgqbbN6wfSwFk4jqnHf8y1wi\nf+CCpGXiu2K1ocZ3OwcWsOrUuVkREqhFDMJQcGoUW3HbN3Nj2o+yLjmgLnDOU2qo\nw7lUPohUGowCoEZbdqo5SjJWpD9tyrTA9rDN7A06aKObZpLiiFV0NzdqMt1QghvN\ndL4mhz7WduDHzO/S4VoUknIJWV8BSQUwZTKyzN1fYbxg12y5JWvFMSuz4sd12zay\n/9rLbGo+SxcSeaAo6Nr8PsdxXgAjQU/YKVnwHcL/SOo3lB1y9FPsOX6bW8JQi7jJ\nMnIUNQ4pn9FTOBmE/N35y5qWydejgC19Yaqsk58EEQHOR+lUA/coyKYpcyECJomV\n9LTb9dnzGZDnY2hpMMieP1e2RUPXb4+JddBDX2PgChp+5I/ywSU=\n=qdk5\n-----END PGP SIGNATURE-----",
        "payload": "tree 7756dc34d4f7e10bf74d03ba0010847c7de28d5d\nparent 36d33d32b1b498b61f56d552f6e2c1d064f978c3\nauthor fanquake <fanquake@gmail.com> 1623390778 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261557 +0800\n\ntest: use f-strings in feature_config_args.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f1fd8ee92fa421b6d293169044d6ddd5a9b8df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2f1fd8ee92fa421b6d293169044d6ddd5a9b8df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f1fd8ee92fa421b6d293169044d6ddd5a9b8df/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36d33d32b1b498b61f56d552f6e2c1d064f978c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36d33d32b1b498b61f56d552f6e2c1d064f978c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36d33d32b1b498b61f56d552f6e2c1d064f978c3"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d5f0ae480b0e0e708e1a7383c4a32097555ebb33",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f1fd8ee92fa421b6d293169044d6ddd5a9b8df/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f1fd8ee92fa421b6d293169044d6ddd5a9b8df/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=e2f1fd8ee92fa421b6d293169044d6ddd5a9b8df",
        "patch": "@@ -24,7 +24,7 @@ def test_config_file_parser(self):\n \n         inc_conf_file_path = os.path.join(self.nodes[0].datadir, 'include.conf')\n         with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n-            conf.write('includeconf={}\\n'.format(inc_conf_file_path))\n+            conf.write(f'includeconf={inc_conf_file_path}\\n')\n \n         self.nodes[0].assert_start_raises_init_error(\n             expected_msg='Error: Error parsing command line arguments: Invalid parameter -dash_cli=1',\n@@ -43,13 +43,13 @@ def test_config_file_parser(self):\n         if self.is_wallet_compiled():\n             with open(inc_conf_file_path, 'w', encoding='utf8') as conf:\n                 conf.write(\"wallet=foo\\n\")\n-            self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Config setting for -wallet only applied on %s network when in [%s] section.' % (self.chain, self.chain))\n+            self.nodes[0].assert_start_raises_init_error(expected_msg=f'Error: Config setting for -wallet only applied on {self.chain} network when in [{self.chain}] section.')\n \n         main_conf_file_path = os.path.join(self.options.tmpdir, 'node0', 'bitcoin_main.conf')\n-        util.write_config(main_conf_file_path, n=0, chain='', extra_config='includeconf={}\\n'.format(inc_conf_file_path))\n+        util.write_config(main_conf_file_path, n=0, chain='', extra_config=f'includeconf={inc_conf_file_path}\\n')\n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('acceptnonstdtxn=1\\n')\n-        self.nodes[0].assert_start_raises_init_error(extra_args=[\"-conf={}\".format(main_conf_file_path)], expected_msg='Error: acceptnonstdtxn is not currently supported for main chain')\n+        self.nodes[0].assert_start_raises_init_error(extra_args=[f\"-conf={main_conf_file_path}\"], expected_msg='Error: acceptnonstdtxn is not currently supported for main chain')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('nono\\n')\n@@ -69,14 +69,14 @@ def test_config_file_parser(self):\n \n         inc_conf_file2_path = os.path.join(self.nodes[0].datadir, 'include2.conf')\n         with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n-            conf.write('includeconf={}\\n'.format(inc_conf_file2_path))\n+            conf.write(f'includeconf={inc_conf_file2_path}\\n')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('testnot.datadir=1\\n')\n         with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n             conf.write('[testnet]\\n')\n         self.restart_node(0)\n-        self.nodes[0].stop_node(expected_stderr='Warning: ' + inc_conf_file_path + ':1 Section [testnot] is not recognized.' + os.linesep + inc_conf_file2_path + ':1 Section [testnet] is not recognized.')\n+        self.nodes[0].stop_node(expected_stderr=f'Warning: {inc_conf_file_path}:1 Section [testnot] is not recognized.{os.linesep}{inc_conf_file2_path}:1 Section [testnet] is not recognized.')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('')  # clear\n@@ -105,8 +105,8 @@ def test_args_log(self):\n                     'Command-line arg: rpcpassword=****',\n                     'Command-line arg: rpcuser=****',\n                     'Command-line arg: torpassword=****',\n-                    'Config file arg: %s=\"1\"' % self.chain,\n-                    'Config file arg: [%s] server=\"1\"' % self.chain,\n+                    f'Config file arg: {self.chain}=\"1\"',\n+                    f'Config file arg: [{self.chain}] server=\"1\"',\n                 ],\n                 unexpected_msgs=[\n                     'alice:f7efda5c189b999524f151318c0c86$d5b51b3beffbc0',\n@@ -235,29 +235,29 @@ def run_test(self):\n \n         # Check that using -datadir argument on non-existent directory fails\n         self.nodes[0].datadir = new_data_dir\n-        self.nodes[0].assert_start_raises_init_error(['-datadir=' + new_data_dir], 'Error: Specified data directory \"' + new_data_dir + '\" does not exist.')\n+        self.nodes[0].assert_start_raises_init_error([f'-datadir={new_data_dir}'], f'Error: Specified data directory \"{new_data_dir}\" does not exist.')\n \n         # Check that using non-existent datadir in conf file fails\n         conf_file = os.path.join(default_data_dir, \"bitcoin.conf\")\n \n         # datadir needs to be set before [chain] section\n         conf_file_contents = open(conf_file, encoding='utf8').read()\n         with open(conf_file, 'w', encoding='utf8') as f:\n-            f.write(\"datadir=\" + new_data_dir + \"\\n\")\n+            f.write(f\"datadir={new_data_dir}\\n\")\n             f.write(conf_file_contents)\n \n-        self.nodes[0].assert_start_raises_init_error(['-conf=' + conf_file], 'Error: Error reading configuration file: specified data directory \"' + new_data_dir + '\" does not exist.')\n+        self.nodes[0].assert_start_raises_init_error([f'-conf={conf_file}'], f'Error: Error reading configuration file: specified data directory \"{new_data_dir}\" does not exist.')\n \n         # Create the directory and ensure the config file now works\n         os.mkdir(new_data_dir)\n-        self.start_node(0, ['-conf='+conf_file])\n+        self.start_node(0, [f'-conf={conf_file}'])\n         self.stop_node(0)\n         assert os.path.exists(os.path.join(new_data_dir, self.chain, 'blocks'))\n \n         # Ensure command line argument overrides datadir in conf\n         os.mkdir(new_data_dir_2)\n         self.nodes[0].datadir = new_data_dir_2\n-        self.start_node(0, ['-datadir='+new_data_dir_2, '-conf='+conf_file])\n+        self.start_node(0, [f'-datadir={new_data_dir_2}', f'-conf={conf_file}'])\n         assert os.path.exists(os.path.join(new_data_dir_2, self.chain, 'blocks'))\n \n "
      }
    ]
  },
  {
    "sha": "3e2f84e7a96cb4b97b609ac853f78edd0ed43f82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTJmODRlN2E5NmNiNGI5N2I2MDlhYzg1M2Y3OGVkZDBlZDQzZjgy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T05:55:02Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:17Z"
      },
      "message": "test: use f-strings in feature_csv_activation.py",
      "tree": {
        "sha": "4a1f25e4663a0ca48e0102c8feefd9f29041a906",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a1f25e4663a0ca48e0102c8feefd9f29041a906"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e2f84e7a96cb4b97b609ac853f78edd0ed43f82",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvUACgkQLuufXMCV\nJsFIFQ//e52L1jh1A9uLjU7ChjKZOzSkqTKyDVuJUWauCrtK4wRqQ0tYcJeZCn6o\nIpU8hn/6EcBq62frayRh/9ZDojoOTmnc96THCCYEWBYtHwDKqwms+5izv2fpWz9e\nlOGk3Nc0994cR0KBVlicLdX6LOfwumWIPrwiIxKcgaMWo/KszpuVHXS3E8cGAxUz\nVxPjTHmmN9LrEbTrMo6Ozm2hu2tw8pOFT8/BJyqYTcOVXaapEpermwpazBtOqoTo\nym8Hpfow6u9zkB9Tf+Od/sD3mDD0mVSIIDvCp3yArXP/D8n9kvSz9LP8ybtTXtNr\nakaoIv0qCrJ9WBdEhjlGBR19rda52d94ABQfV4i80xnyaMv1E+8s0AAGRc6pgWJx\nU376rVuKnYJd+WyCOeliJL8PZ9nhko2wvEM5ONjwoka+Ukum2nDAs+V5Cz2kWLeq\nflkUbBhcY3BwGEeNoEVwjbJM3Fp0Sy9wzO3RMeQVsggsuGfj8jWML7LbnL6n2K96\nw1Uzhgq3710tRTFtATHzBCGXHcSUqP2yMXNj2xzKRbDdbjKvbY5rXv6vyPvWi7bl\nAgp+4IeCFFtRCrteZzdzf12kSfeSaJ9NtkqYIXbHtvxMVkqwE7yUFyNiOYaAwqG+\nxNCchoGD8bj4qXwLvFLWo6kto+Vo4mrX434sw+epwVU+6wx1qeE=\n=ZOE4\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a1f25e4663a0ca48e0102c8feefd9f29041a906\nparent e2f1fd8ee92fa421b6d293169044d6ddd5a9b8df\nauthor fanquake <fanquake@gmail.com> 1623390902 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261557 +0800\n\ntest: use f-strings in feature_csv_activation.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e2f84e7a96cb4b97b609ac853f78edd0ed43f82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e2f84e7a96cb4b97b609ac853f78edd0ed43f82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e2f84e7a96cb4b97b609ac853f78edd0ed43f82/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2f1fd8ee92fa421b6d293169044d6ddd5a9b8df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f1fd8ee92fa421b6d293169044d6ddd5a9b8df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2f1fd8ee92fa421b6d293169044d6ddd5a9b8df"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bc0050d47aaa7ca43ab4a561fae1f50c5625a62d",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e2f84e7a96cb4b97b609ac853f78edd0ed43f82/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e2f84e7a96cb4b97b609ac853f78edd0ed43f82/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=3e2f84e7a96cb4b97b609ac853f78edd0ed43f82",
        "patch": "@@ -247,7 +247,7 @@ def run_test(self):\n         self.send_blocks(test_blocks)\n \n         assert_equal(self.tipheight, CSV_ACTIVATION_HEIGHT - 2)\n-        self.log.info(\"Height = {}, CSV not yet active (will activate for block {}, not {})\".format(self.tipheight, CSV_ACTIVATION_HEIGHT, CSV_ACTIVATION_HEIGHT - 1))\n+        self.log.info(f\"Height = {self.tipheight}, CSV not yet active (will activate for block {CSV_ACTIVATION_HEIGHT}, not {CSV_ACTIVATION_HEIGHT - 1})\")\n         assert not softfork_active(self.nodes[0], 'csv')\n \n         # Test both version 1 and version 2 transactions for all tests"
      }
    ]
  },
  {
    "sha": "a2502cc63fd308be8af840962da9c53339433fa6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjUwMmNjNjNmZDMwOGJlOGFmODQwOTYyZGE5YzUzMzM5NDMzZmE2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T06:04:14Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:17Z"
      },
      "message": "test: use f-strings in feature_dbcrash.py",
      "tree": {
        "sha": "48a2b69e0ef5f893e9e80ccbddbf1993421c990f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48a2b69e0ef5f893e9e80ccbddbf1993421c990f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2502cc63fd308be8af840962da9c53339433fa6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvUACgkQLuufXMCV\nJsG2jA/+LKFyF8tEpCRN8B20xku6JouJrVaV/vXN6/Y34NE4d+Klp1c/jVqLZAKh\no/90ds5PHIg4OaH94WXklU2RDEtvcHhMxdtlivnpGHCxwWhRpXvByusJNbh2VVAz\nYFOki+K17W0ZLGJd+12ACf3GWqi7FkDEDWYOBlwshABhnV4gQVXVeh6swVYDoJws\nVkxmZShi+Nz+CvvacdjPl1jv/hnX35jLZehjLRrf5iNhx/r3fznsMbVCbC5416yo\nwRrN/KokuAsy9KsuLN2mr55ikLhO/PXqeMLbZ3G2tUuvpRu2RP7KS0iG5IgF1KpY\n2ouzi9XAi1ksMPWDV+pUyetprQpswdlMGMnmWWu2Mpw4oQBEqfQ2gc+QR/eIvmkA\nZG8LI2LOBRSoegiX//db9soTZJYDQ1A/OreeTqMNYdWn4t0gSmuTS5pFPLiLvzIQ\nYmf6wEOBghCx5BWSOID2ihMgNIk9vgflNtEWcxd8x7q+TGmp3I5RhgtDL6rmQo1U\n6K8UavaNK5//Se4CLQifXb8yVWrPv4HN5f0rbA4qc+30Caht0JcFZUWofgJZzTYL\n/tJ/fjiUhHV20eQ0ZCY9ofAAizDfmLHdo9YhrMmWRmGC92wpZfjp0pSw/TvBE4sH\nJoIfbo1KDS71LQTY7o86/srHhVq71uib2bawikBzUQCJfgtK8Zw=\n=18mU\n-----END PGP SIGNATURE-----",
        "payload": "tree 48a2b69e0ef5f893e9e80ccbddbf1993421c990f\nparent 3e2f84e7a96cb4b97b609ac853f78edd0ed43f82\nauthor fanquake <fanquake@gmail.com> 1623391454 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261557 +0800\n\ntest: use f-strings in feature_dbcrash.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2502cc63fd308be8af840962da9c53339433fa6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2502cc63fd308be8af840962da9c53339433fa6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2502cc63fd308be8af840962da9c53339433fa6/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e2f84e7a96cb4b97b609ac853f78edd0ed43f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e2f84e7a96cb4b97b609ac853f78edd0ed43f82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e2f84e7a96cb4b97b609ac853f78edd0ed43f82"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5bbcd200169806600e96fbd9c050dc42a3c745ee",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2502cc63fd308be8af840962da9c53339433fa6/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2502cc63fd308be8af840962da9c53339433fa6/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=a2502cc63fd308be8af840962da9c53339433fa6",
        "patch": "@@ -102,7 +102,7 @@ def restart_node(self, node_index, expected_tip):\n         # perhaps we generated a test case that blew up our cache?\n         # TODO: If this happens a lot, we should try to restart without -dbcrashratio\n         # and make sure that recovery happens.\n-        raise AssertionError(\"Unable to successfully restart node %d in allotted time\", node_index)\n+        raise AssertionError(f\"Unable to successfully restart node {node_index} in allotted time\")\n \n     def submit_block_catch_error(self, node_index, block):\n         \"\"\"Try submitting a block to the given node.\n@@ -114,10 +114,10 @@ def submit_block_catch_error(self, node_index, block):\n             self.nodes[node_index].submitblock(block)\n             return True\n         except (http.client.CannotSendRequest, http.client.RemoteDisconnected) as e:\n-            self.log.debug(\"node %d submitblock raised exception: %s\", node_index, e)\n+            self.log.debug(f\"node {node_index} submitblock raised exception: {e}\")\n             return False\n         except OSError as e:\n-            self.log.debug(\"node %d submitblock raised OSError exception: errno=%s\", node_index, e.errno)\n+            self.log.debug(f\"node {node_index} submitblock raised OSError exception: errno={e.errno}\")\n             if e.errno in [errno.EPIPE, errno.ECONNREFUSED, errno.ECONNRESET]:\n                 # The node has likely crashed\n                 return False\n@@ -142,15 +142,15 @@ def sync_node3blocks(self, block_hashes):\n         # Deliver each block to each other node\n         for i in range(3):\n             nodei_utxo_hash = None\n-            self.log.debug(\"Syncing blocks to node %d\", i)\n+            self.log.debug(f\"Syncing blocks to node {i}\")\n             for (block_hash, block) in blocks:\n                 # Get the block from node3, and submit to node_i\n-                self.log.debug(\"submitting block %s\", block_hash)\n+                self.log.debug(f\"submitting block {block_hash}\")\n                 if not self.submit_block_catch_error(i, block):\n                     # TODO: more carefully check that the crash is due to -dbcrashratio\n                     # (change the exit code perhaps, and check that here?)\n                     self.wait_for_node_exit(i, timeout=30)\n-                    self.log.debug(\"Restarting node %d after block hash %s\", i, block_hash)\n+                    self.log.debug(f\"Restarting node {i} after block hash {block_hash}\")\n                     nodei_utxo_hash = self.restart_node(i, block_hash)\n                     assert nodei_utxo_hash is not None\n                     self.restart_counts[i] += 1\n@@ -167,7 +167,7 @@ def sync_node3blocks(self, block_hashes):\n             # - we only update the utxo cache after a node restart, since flushing\n             # the cache is a no-op at that point\n             if nodei_utxo_hash is not None:\n-                self.log.debug(\"Checking txoutsetinfo matches for node %d\", i)\n+                self.log.debug(f\"Checking txoutsetinfo matches for node {i}\")\n                 assert_equal(nodei_utxo_hash, node3_utxo_hash)\n \n     def verify_utxo_hash(self):\n@@ -218,14 +218,14 @@ def run_test(self):\n         # Start by creating a lot of utxos on node3\n         initial_height = self.nodes[3].getblockcount()\n         utxo_list = create_confirmed_utxos(self.nodes[3].getnetworkinfo()['relayfee'], self.nodes[3], 5000)\n-        self.log.info(\"Prepped %d utxo entries\", len(utxo_list))\n+        self.log.info(f\"Prepped {len(utxo_list)} utxo entries\")\n \n         # Sync these blocks with the other nodes\n         block_hashes_to_sync = []\n         for height in range(initial_height + 1, self.nodes[3].getblockcount() + 1):\n             block_hashes_to_sync.append(self.nodes[3].getblockhash(height))\n \n-        self.log.debug(\"Syncing %d blocks with other nodes\", len(block_hashes_to_sync))\n+        self.log.debug(f\"Syncing {len(block_hashes_to_sync)} blocks with other nodes\")\n         # Syncing the blocks could cause nodes to crash, so the test begins here.\n         self.sync_node3blocks(block_hashes_to_sync)\n \n@@ -235,18 +235,18 @@ def run_test(self):\n         # each time through the loop, generate a bunch of transactions,\n         # and then either mine a single new block on the tip, or some-sized reorg.\n         for i in range(40):\n-            self.log.info(\"Iteration %d, generating 2500 transactions %s\", i, self.restart_counts)\n+            self.log.info(f\"Iteration {i}, generating 2500 transactions {self.restart_counts}\")\n             # Generate a bunch of small-ish transactions\n             self.generate_small_transactions(self.nodes[3], 2500, utxo_list)\n             # Pick a random block between current tip, and starting tip\n             current_height = self.nodes[3].getblockcount()\n             random_height = random.randint(starting_tip_height, current_height)\n-            self.log.debug(\"At height %d, considering height %d\", current_height, random_height)\n+            self.log.debug(f\"At height {current_height}, considering height {random_height}\")\n             if random_height > starting_tip_height:\n                 # Randomly reorg from this point with some probability (1/4 for\n                 # tip, 1/5 for tip-1, ...)\n                 if random.random() < 1.0 / (current_height + 4 - random_height):\n-                    self.log.debug(\"Invalidating block at height %d\", random_height)\n+                    self.log.debug(f\"Invalidating block at height {random_height}\")\n                     self.nodes[3].invalidateblock(self.nodes[3].getblockhash(random_height))\n \n             # Now generate new blocks until we pass the old tip height\n@@ -258,18 +258,18 @@ def run_test(self):\n                     # new address to avoid mining a block that has just been invalidated\n                     address=self.nodes[3].getnewaddress(),\n                 ))\n-            self.log.debug(\"Syncing %d new blocks...\", len(block_hashes))\n+            self.log.debug(f\"Syncing {len(block_hashes)} new blocks...\")\n             self.sync_node3blocks(block_hashes)\n             utxo_list = self.nodes[3].listunspent()\n-            self.log.debug(\"Node3 utxo count: %d\", len(utxo_list))\n+            self.log.debug(f\"Node3 utxo count: {len(utxo_list)}\")\n \n         # Check that the utxo hashes agree with node3\n         # Useful side effect: each utxo cache gets flushed here, so that we\n         # won't get crashes on shutdown at the end of the test.\n         self.verify_utxo_hash()\n \n         # Check the test coverage\n-        self.log.info(\"Restarted nodes: %s; crashes on restart: %d\", self.restart_counts, self.crashed_on_restart)\n+        self.log.info(f\"Restarted nodes: {self.restart_counts}; crashes on restart: {self.crashed_on_restart}\")\n \n         # If no nodes were restarted, we didn't test anything.\n         assert self.restart_counts != [0, 0, 0]\n@@ -280,7 +280,7 @@ def run_test(self):\n         # Warn if any of the nodes escaped restart.\n         for i in range(3):\n             if self.restart_counts[i] == 0:\n-                self.log.warning(\"Node %d never crashed during utxo flush!\", i)\n+                self.log.warning(f\"Node {i} never crashed during utxo flush!\")\n \n \n if __name__ == \"__main__\":"
      }
    ]
  },
  {
    "sha": "a2de33cbdc79202bccddb4beadfde88266ac979f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmRlMzNjYmRjNzkyMDJiY2NkZGI0YmVhZGZkZTg4MjY2YWM5Nzlm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T06:09:33Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:17Z"
      },
      "message": "test: use f-strings in feature_dersig.py",
      "tree": {
        "sha": "306a1ce9f6f56a9acd47cded67c8f3d987e746de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/306a1ce9f6f56a9acd47cded67c8f3d987e746de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2de33cbdc79202bccddb4beadfde88266ac979f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvUACgkQLuufXMCV\nJsFy0A/9HaOgXRh1y67Orl1efdUhWDT+cTelAyD5YyHvNEAeoJkKlZ6cuH7FMtQ8\nnVfmsrr1Y1EQf5BOJxh00OghNCs4QbXlZ4wfLaLhCUNyNfajuZsTryuixiBYpw98\nG0dFUSRrViiCRE7ngBPeugSOg/GV1RWQbxiz1ue1/sq2AtznhhNblVa3egXTiPfw\nXQ2EEsq09E/HeQsULiKX6dl3mJ9u1y0RFJp4GhW7KORhZ8v49IxULryqgt0Iq7Iw\nod8UAx6Wis7tJDIWXzkZUI9ar3mMZWGD19alI8SJ7Xz1GeiZzFvVw1AbiZU5SJJl\n/aXwfG6sEoOq9QsmPk8RoOhqhn/jsO8+Y2TFs+pEK41K8xO94FXJoAo09LHEcwd5\nYDI2z2kixJx0d+smmLCATv2MiajsOMzC85bwOzP9pq4huLECRN8QQRtaup9te0VO\n1NmM0SFgjCTQQBzZtrPn+A6XhDvaBglgWiaiIxBTHaUHs1li/gG8L6u4gydsEz+r\nMCAbpyAruNLpul79ersFxtIE34l1Aq8ILHRNhxJoeurC2M147SckhmBs1VQZE3yc\nfeQUcC9ed9Hbmzxxkgq37s+I4Ovo5uWCGqzMW9eDCKWFQ1OnWqbIq/0YTzbpfibQ\nyzE/It3F6XvWu/bx6Mxe1K47s70uXpSK+/gfZkVatQnty1PJ8Zw=\n=jXQZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 306a1ce9f6f56a9acd47cded67c8f3d987e746de\nparent a2502cc63fd308be8af840962da9c53339433fa6\nauthor fanquake <fanquake@gmail.com> 1623391773 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261557 +0800\n\ntest: use f-strings in feature_dersig.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2de33cbdc79202bccddb4beadfde88266ac979f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2de33cbdc79202bccddb4beadfde88266ac979f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2de33cbdc79202bccddb4beadfde88266ac979f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2502cc63fd308be8af840962da9c53339433fa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2502cc63fd308be8af840962da9c53339433fa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2502cc63fd308be8af840962da9c53339433fa6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fd46385cd407a176a065a305b213baf6b4efec51",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2de33cbdc79202bccddb4beadfde88266ac979f/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2de33cbdc79202bccddb4beadfde88266ac979f/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=a2de33cbdc79202bccddb4beadfde88266ac979f",
        "patch": "@@ -104,7 +104,7 @@ def run_test(self):\n         block.rehash()\n         block.solve()\n \n-        with self.nodes[0].assert_debug_log(expected_msgs=['{}, bad-version(0x00000002)'.format(block.hash)]):\n+        with self.nodes[0].assert_debug_log(expected_msgs=[f'{block.hash}, bad-version(0x00000002)']):\n             peer.send_and_ping(msg_block(block))\n             assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n             peer.sync_with_ping()\n@@ -134,7 +134,7 @@ def run_test(self):\n         block.rehash()\n         block.solve()\n \n-        with self.nodes[0].assert_debug_log(expected_msgs=['CheckInputScripts on {} failed with non-mandatory-script-verify-flag (Non-canonical DER signature)'.format(block.vtx[-1].hash)]):\n+        with self.nodes[0].assert_debug_log(expected_msgs=[f'CheckInputScripts on {block.vtx[-1].hash} failed with non-mandatory-script-verify-flag (Non-canonical DER signature)']):\n             peer.send_and_ping(msg_block(block))\n             assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n             peer.sync_with_ping()"
      }
    ]
  },
  {
    "sha": "d5a6adc5e478fa5c6e562377eea873dc38e66578",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWE2YWRjNWU0NzhmYTVjNmU1NjIzNzdlZWE4NzNkYzM4ZTY2NTc4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T06:09:46Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:18Z"
      },
      "message": "test: use f-strings in feature_fee_estimation.py",
      "tree": {
        "sha": "ccfb2f962deb568b33568fb04125503c90f1596e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccfb2f962deb568b33568fb04125503c90f1596e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5a6adc5e478fa5c6e562377eea873dc38e66578",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvYACgkQLuufXMCV\nJsEdQA//Zf4SAYlrzjEwcZB1WNnIpwRX+F0toNg0yO6/zfDAgHrg1VkxyMIcRBst\nbhUGv6++REAklq5wt9jDZuQHRp5Y/3Ue9dXj+yn2YkOCwn8GZWA0ASl4xpC7b2bn\ntUt1A4SpwObzFOA9cXgZaK2gKsrUiOj0BRyxDGnDqd2WjVaqHjPedAD1Gp6ROiZ7\nzOHAE39GLNr/unuflgURLD0a7Mv3zkSGyEXm58xvsrh2awsGlZ1cyQfVPyjG0aLo\neljNtpiATgETqc6XQAxTpcc78OHRJvls8OfmC9pmY5N7aS3eoVkKrLBm06rcvdm4\nYDbZT/B9qX0/3CuMEkeOuLC/bYIvgAlASAxJz25GFCldygTC3nVQv1Pu+yZMdVAy\nHrEdHvLcFl734VJq3gwzUFU4FvP/4i8jEz3gxWC6f2lKEaNxLMzBO3lDpwZ0S6nn\n4Ivcv3YUzS1/GQCZ/GEbjfRcMXIkSP3G/dnHqqApxeXkJhCxOYuy/5ktgDWz4Shc\nrx8UxJD6OdKoHPRazoPAz56PlOiiBK/k4OY6tpEq9z+2tp/Tf6PshVq0I2izPncj\npYekOyU4IHcjV4TrAMcZM4txr6N6zwgv6lrMh/VyYJSX1ksUpogD4gdIWvSvNWx4\nKL2ltrHmfbeZ4YnIVevpaw4MI7qqzs9kJEheSMHX3ket4VDxPFI=\n=h59K\n-----END PGP SIGNATURE-----",
        "payload": "tree ccfb2f962deb568b33568fb04125503c90f1596e\nparent a2de33cbdc79202bccddb4beadfde88266ac979f\nauthor fanquake <fanquake@gmail.com> 1623391786 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261558 +0800\n\ntest: use f-strings in feature_fee_estimation.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5a6adc5e478fa5c6e562377eea873dc38e66578",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5a6adc5e478fa5c6e562377eea873dc38e66578",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5a6adc5e478fa5c6e562377eea873dc38e66578/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2de33cbdc79202bccddb4beadfde88266ac979f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2de33cbdc79202bccddb4beadfde88266ac979f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2de33cbdc79202bccddb4beadfde88266ac979f"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 4,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a8f3e12e077a6b3486f57385cc8df412d936371d",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5a6adc5e478fa5c6e562377eea873dc38e66578/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5a6adc5e478fa5c6e562377eea873dc38e66578/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=d5a6adc5e478fa5c6e562377eea873dc38e66578",
        "patch": "@@ -72,7 +72,7 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n             total_in += t[\"amount\"]\n             tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n         if total_in <= amount + fee:\n-            raise RuntimeError(\"Insufficient funds: need %d, have %d\" % (amount + fee, total_in))\n+            raise RuntimeError(f\"Insufficient funds: need {amount + fee}, have {total_in}\")\n     tx.vout.append(CTxOut(int((total_in - amount - fee) * COIN), P2SH_1))\n     tx.vout.append(CTxOut(int(amount * COIN), P2SH_2))\n     # These transactions don't need to be signed, but we still have to insert\n@@ -124,8 +124,7 @@ def check_raw_estimates(node, fees_seen):\n             assert_greater_than(feerate, 0)\n \n             if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n-                raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n-                                     % (feerate, min(fees_seen), max(fees_seen)))\n+                raise AssertionError(f\"Estimated fee ({feerate}) out of range ({min(fees_seen)},{max(fees_seen)})\")\n \n def check_smart_estimates(node, fees_seen):\n     \"\"\"Call estimatesmartfee and verify that the estimates meet certain invariants.\"\"\"\n@@ -138,11 +137,9 @@ def check_smart_estimates(node, fees_seen):\n         assert_greater_than(feerate, 0)\n \n         if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n-            raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n-                                 % (feerate, min(fees_seen), max(fees_seen)))\n+            raise AssertionError(f\"Estimated fee ({feerate}) out of range ({min(fees_seen)},{max(fees_seen)})\")\n         if feerate - delta > last_feerate:\n-            raise AssertionError(\"Estimated fee (%f) larger than last fee (%f) for lower number of confirms\"\n-                                 % (feerate, last_feerate))\n+            raise AssertionError(f\"Estimated fee ({feerate}) larger than last fee ({last_feerate}) for lower number of confirms\")\n         last_feerate = feerate\n \n         if i == 0:"
      }
    ]
  },
  {
    "sha": "ff7e3309995a8960ac371741b2b00c6da40f7490",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjdlMzMwOTk5NWE4OTYwYWMzNzE3NDFiMmIwMGM2ZGE0MGY3NDkw",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T06:13:45Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:18Z"
      },
      "message": "test: use f-strings in feature_filelock.py",
      "tree": {
        "sha": "5982b87b29ba5c697d56f7616a5ed922388a584d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5982b87b29ba5c697d56f7616a5ed922388a584d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff7e3309995a8960ac371741b2b00c6da40f7490",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvYACgkQLuufXMCV\nJsFiLg/8CwmXkzoa97H/fycQzoRbBfZq65MwnmXXKI4q8odZbOYKU2Mde5BSg3Y9\nfMD9QBPx4Quv2VAe/7x0VQOx5IeZ2UQ8QcqiLtl/WLnsk84GqwC88ZP4Q9F+FIBk\nHDLiB63Ad2sN8zAnGmJzjN1wxgcrsjLYGTI7hODxu45ic3tRypBrXGC11H+5v5ek\nkgQj/HkWJJ+hR6XzF+Ds+kgokh+2C16l6wUiJW9nnEdVNfHYTtXVLCEvYcuLxVm0\n3QAwynSeZ/u7AejxMhrpdaZin3+faJkxNfvHwTH4VsjcuM05qgifR2cQZVb/HRT4\ng6ompQbZSSHNuLt8hISIbPrmBnMf9ui2bV1MqkI7zEv4UQZ3p4KP0sEp9MuuQx35\n1ZxcWha5aWfBJdzqo++GBL94tBL182/Kt+odTePTlKs6qhABAnnmzxX8AM5zaa+U\nEcI9ntsvlZ0zzOGUTSAhtLXMtGv3Ht7DQpmIu5kUWEz3u9nKDjK1TuS/rpsIItmA\nweGW0PrS+3zfhxgYDAlDixlK54ZYqAwDTe5zWMORuggiuFrQCRG3aWB8kz2mPmyI\nLNogy1cPze64YDExOrKrinKFannInUst+4KVQVWxInb7ck9yNluSqGl0jUWyBSBK\nzJSLFKlLbbuFJxD7ZLb7DWnZ20pjiWaPGrEyRpb8fwfoZWJRtvw=\n=MPxL\n-----END PGP SIGNATURE-----",
        "payload": "tree 5982b87b29ba5c697d56f7616a5ed922388a584d\nparent d5a6adc5e478fa5c6e562377eea873dc38e66578\nauthor fanquake <fanquake@gmail.com> 1623392025 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261558 +0800\n\ntest: use f-strings in feature_filelock.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7e3309995a8960ac371741b2b00c6da40f7490",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7e3309995a8960ac371741b2b00c6da40f7490",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7e3309995a8960ac371741b2b00c6da40f7490/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5a6adc5e478fa5c6e562377eea873dc38e66578",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5a6adc5e478fa5c6e562377eea873dc38e66578",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5a6adc5e478fa5c6e562377eea873dc38e66578"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e09107802bdb12888255b996a2109fcb91329849",
        "filename": "test/functional/feature_filelock.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff7e3309995a8960ac371741b2b00c6da40f7490/test/functional/feature_filelock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff7e3309995a8960ac371741b2b00c6da40f7490/test/functional/feature_filelock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_filelock.py?ref=ff7e3309995a8960ac371741b2b00c6da40f7490",
        "patch": "@@ -22,11 +22,11 @@ def setup_network(self):\n \n     def run_test(self):\n         datadir = os.path.join(self.nodes[0].datadir, self.chain)\n-        self.log.info(\"Using datadir {}\".format(datadir))\n+        self.log.info(f\"Using datadir {datadir}\")\n \n         self.log.info(\"Check that we can't start a second bitcoind instance using the same datadir\")\n-        expected_msg = \"Error: Cannot obtain a lock on data directory {0}. {1} is probably already running.\".format(datadir, self.config['environment']['PACKAGE_NAME'])\n-        self.nodes[1].assert_start_raises_init_error(extra_args=['-datadir={}'.format(self.nodes[0].datadir), '-noserver'], expected_msg=expected_msg)\n+        expected_msg = f\"Error: Cannot obtain a lock on data directory {datadir}. {self.config['environment']['PACKAGE_NAME']} is probably already running.\"\n+        self.nodes[1].assert_start_raises_init_error(extra_args=[f'-datadir={self.nodes[0].datadir}', '-noserver'], expected_msg=expected_msg)\n \n         if self.is_wallet_compiled():\n             def check_wallet_filelock(descriptors):\n@@ -38,7 +38,7 @@ def check_wallet_filelock(descriptors):\n                     expected_msg = \"Error: SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\"\n                 else:\n                     expected_msg = \"Error: Error initializing wallet database environment\"\n-                self.nodes[1].assert_start_raises_init_error(extra_args=['-walletdir={}'.format(wallet_dir), '-wallet=' + wallet_name, '-noserver'], expected_msg=expected_msg, match=ErrorMatch.PARTIAL_REGEX)\n+                self.nodes[1].assert_start_raises_init_error(extra_args=[f'-walletdir={wallet_dir}', f'-wallet={wallet_name}', '-noserver'], expected_msg=expected_msg, match=ErrorMatch.PARTIAL_REGEX)\n \n             if self.is_bdb_compiled():\n                 check_wallet_filelock(False)"
      }
    ]
  },
  {
    "sha": "e9ca8b254d4b9567831c0e113ce1c0a2b4795a95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWNhOGIyNTRkNGI5NTY3ODMxYzBlMTEzY2UxYzBhMmI0Nzk1YTk1",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T06:24:51Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:18Z"
      },
      "message": "test: use f-strings in feature_help.py",
      "tree": {
        "sha": "f3201e19bf4b2cc1d984d89248309348c0841baf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3201e19bf4b2cc1d984d89248309348c0841baf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9ca8b254d4b9567831c0e113ce1c0a2b4795a95",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvYACgkQLuufXMCV\nJsH9dg/9FSkf6I2VfZgrNOfobWHOBJJPghlo7aqXzNw4j76UGcr2zEZ5w7aNb5NR\nOM4YepNcpahmRVBK2YaJhmffz6tZ3TlsZpvftAa0yCOEYwtUZ3v6ug6Gov4B8+88\nzy3Lbv6hdtZSC2jwXCvUrqA7c2g+u+MSVnH5u8MT7u6bnod9Zxnd4soKas5Epe6t\n8iQwdmiP1uCTmX7SP2tosE2US1ZsJspyLMSnbbVdMMK2PqIPRFF6VBMrPgz7Ankc\n6+IojWfvbiHk2v2T40/FU6XRVe0PwdSkzZxNqkRh9kQm8rIl5/40Efhp2GITXk+O\nMDNEVSsE+PLZrZ1cmM2eYXSC/l342cJ1cG7nBZsxWOU+OVOBd8sR/Cf1rLI//4qz\nWDxyTwU3EaHBHJrWjWQ3UPSwZjQ6Dcdc4KyvDgL7FqwYexk4j75AIKakfYTP88vK\nVue1eJlfgX2JyoMV1TCXf4SJE3Obd97yc7EqL1+Oz9uLKP5TnQcGmknUt1OT36k9\nl77XXdBbXJtdRGW1HoDvsoE1k4LJvrXfPNllPlcU5rRD0DzTpc48Kg7rDQ2ZW6bV\n+pZqBUuh2GDL3bn+C8x2BOfNE5zBaJn0BEcjKNi+M+4FYVb6oQGsF68gR371Xq4b\nN63IyxiiTTliCUGZg+SeyrmAeBD0+16GtOP0p3FZltWBgecA/Dg=\n=J650\n-----END PGP SIGNATURE-----",
        "payload": "tree f3201e19bf4b2cc1d984d89248309348c0841baf\nparent ff7e3309995a8960ac371741b2b00c6da40f7490\nauthor fanquake <fanquake@gmail.com> 1623392691 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261558 +0800\n\ntest: use f-strings in feature_help.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ca8b254d4b9567831c0e113ce1c0a2b4795a95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9ca8b254d4b9567831c0e113ce1c0a2b4795a95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ca8b254d4b9567831c0e113ce1c0a2b4795a95/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff7e3309995a8960ac371741b2b00c6da40f7490",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7e3309995a8960ac371741b2b00c6da40f7490",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7e3309995a8960ac371741b2b00c6da40f7490"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "837e95c12846b755c36b772476c69efaf7b9d4c3",
        "filename": "test/functional/feature_help.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ca8b254d4b9567831c0e113ce1c0a2b4795a95/test/functional/feature_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ca8b254d4b9567831c0e113ce1c0a2b4795a95/test/functional/feature_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_help.py?ref=e9ca8b254d4b9567831c0e113ce1c0a2b4795a95",
        "patch": "@@ -40,22 +40,22 @@ def run_test(self):\n         # Node should exit immediately and output help to stdout.\n         output, _ = self.get_node_output(ret_code_expected=0)\n         assert b'Options' in output\n-        self.log.info(\"Help text received: {} (...)\".format(output[0:60]))\n+        self.log.info(f\"Help text received: {output[0:60]} (...)\")\n \n         self.log.info(\"Start bitcoin with -version for version information\")\n         self.nodes[0].start(extra_args=['-version'])\n         # Node should exit immediately and output version to stdout.\n         output, _ = self.get_node_output(ret_code_expected=0)\n         assert b'version' in output\n-        self.log.info(\"Version text received: {} (...)\".format(output[0:60]))\n+        self.log.info(f\"Version text received: {output[0:60]} (...)\")\n \n         # Test that arguments not in the help results in an error\n         self.log.info(\"Start bitcoind with -fakearg to make sure it does not start\")\n         self.nodes[0].start(extra_args=['-fakearg'])\n         # Node should exit immediately and output an error to stderr\n         _, output = self.get_node_output(ret_code_expected=1)\n         assert b'Error parsing command line arguments' in output\n-        self.log.info(\"Error message received: {} (...)\".format(output[0:60]))\n+        self.log.info(f\"Error message received: {output[0:60]} (...)\")\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "fb633933ab570e945d2a366f37eeff39f516c613",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjYzMzkzM2FiNTcwZTk0NWQyYTM2NmYzN2VlZmYzOWY1MTZjNjEz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T06:33:32Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:18Z"
      },
      "message": "test: use f-strings in feature_loadblock.py",
      "tree": {
        "sha": "092e07e529515be8ff7341c7770feb444962db4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/092e07e529515be8ff7341c7770feb444962db4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb633933ab570e945d2a366f37eeff39f516c613",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvYACgkQLuufXMCV\nJsHTLhAAovYAi+hEYhjrVhGL2ilVLZTI2Cf0gi2syz6//fZYKX9rctgKhjrkz2F1\nx37wc9yVaNw1wnNYzZ3TSbxx0rUMdgG6lATgrUyzsOsQTt0emFG23qY+ldM+XrYa\nd3f9DmXroRnpdhsT+zUg2E47U04cktGztaDvjoKhn4XKvG8FPPz/MhMczAFwBGHS\nvi+EZEsowJAK+LMkUAx5FbjUfXeGhUyercH9P4TNLGuUqdTDd1XjcYh2phkM4qZf\nu4q55yySbL7RtTXZxS3Yt0tzWbs9rHItjhXlMT1Pfu0SNuzi1EUD4NHA6U9uSK3d\npug6mDYqUGQF3+RaDOSnmJKaW5Cm41NzYrMv4UnGTqsoglkxqTU3IudvU5Y2ITJD\n1rA9RtX7ZoxX01VwpQFExBjVJ1BPcY+3/vnGYD6Uat7QKQDDgghkBCdMkHMpd84K\nfn7tgSPyMyRbv+Qi2VPwC6JVIA8RDNtBajJInrRg5QXMy8ZYbKNbHBcjcfe9i3LU\nUrrH3bFZkQ9IiNVvSf8XQkB5IIIvcwQFkbl+wwd8618g0JpL1N3kTIriRVGevYZk\n2RnQgq3Bt7ifI2jBJCdDJ3MbtON+NCdwYcsY0OnxguVE5oT3oyGXOYLD48PR1Ogt\nka3+84vf+AFBtBn51pSWhQFmDVAariOucTonBi5SDAY1BBq0LI4=\n=Xu3w\n-----END PGP SIGNATURE-----",
        "payload": "tree 092e07e529515be8ff7341c7770feb444962db4c\nparent e9ca8b254d4b9567831c0e113ce1c0a2b4795a95\nauthor fanquake <fanquake@gmail.com> 1623393212 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261558 +0800\n\ntest: use f-strings in feature_loadblock.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb633933ab570e945d2a366f37eeff39f516c613",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb633933ab570e945d2a366f37eeff39f516c613",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb633933ab570e945d2a366f37eeff39f516c613/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9ca8b254d4b9567831c0e113ce1c0a2b4795a95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ca8b254d4b9567831c0e113ce1c0a2b4795a95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9ca8b254d4b9567831c0e113ce1c0a2b4795a95"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "e5db6de08523b6ea68f8d0bed568c30912802dce",
        "filename": "test/functional/feature_loadblock.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb633933ab570e945d2a366f37eeff39f516c613/test/functional/feature_loadblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb633933ab570e945d2a366f37eeff39f516c613/test/functional/feature_loadblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_loadblock.py?ref=fb633933ab570e945d2a366f37eeff39f516c613",
        "patch": "@@ -45,17 +45,17 @@ def run_test(self):\n \n         self.log.info(\"Create linearization config file\")\n         with open(cfg_file, \"a\", encoding=\"utf-8\") as cfg:\n-            cfg.write(\"datadir={}\\n\".format(data_dir))\n-            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n-            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n-            cfg.write(\"port={}\\n\".format(node_url.port))\n-            cfg.write(\"host={}\\n\".format(node_url.hostname))\n-            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n-            cfg.write(\"max_height=100\\n\")\n-            cfg.write(\"netmagic=fabfb5da\\n\")\n-            cfg.write(\"input={}\\n\".format(blocks_dir))\n-            cfg.write(\"genesis={}\\n\".format(genesis_block))\n-            cfg.write(\"hashlist={}\\n\".format(hash_list.name))\n+            cfg.write(f\"datadir={data_dir}\\n\")\n+            cfg.write(f\"rpcuser={node_url.username}\\n\")\n+            cfg.write(f\"rpcpassword={node_url.password}\\n\")\n+            cfg.write(f\"port={node_url.port}\\n\")\n+            cfg.write(f\"host={node_url.hostname}\\n\")\n+            cfg.write(f\"output_file={bootstrap_file}\\n\")\n+            cfg.write(f\"max_height=100\\n\")\n+            cfg.write(f\"netmagic=fabfb5da\\n\")\n+            cfg.write(f\"input={blocks_dir}\\n\")\n+            cfg.write(f\"genesis={genesis_block}\\n\")\n+            cfg.write(f\"hashlist={hash_list.name}\\n\")\n \n         base_dir = self.config[\"environment\"][\"SRCDIR\"]\n         linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n@@ -72,7 +72,7 @@ def run_test(self):\n                        check=True)\n \n         self.log.info(\"Restart second, unsynced node with bootstrap file\")\n-        self.restart_node(1, extra_args=[\"-loadblock=\" + bootstrap_file])\n+        self.restart_node(1, extra_args=[f\"-loadblock={bootstrap_file}\"])\n         assert_equal(self.nodes[1].getblockcount(), 100)  # start_node is blocking on all block files being imported\n \n         assert_equal(self.nodes[1].getblockchaininfo()['blocks'], 100)"
      }
    ]
  },
  {
    "sha": "6679eceacc915a8ea7cd7063f103ffc5eb9da884",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Njc5ZWNlYWNjOTE1YThlYTdjZDcwNjNmMTAzZmZjNWViOWRhODg0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T06:36:12Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:18Z"
      },
      "message": "test: use f-strings in feature_logging.py",
      "tree": {
        "sha": "a9aab0347cd8ac74d0fec1213f20bf6ae45b9d8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9aab0347cd8ac74d0fec1213f20bf6ae45b9d8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6679eceacc915a8ea7cd7063f103ffc5eb9da884",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvYACgkQLuufXMCV\nJsGbRA/9HEETMRJcvJ3xGBhP7MDGGz3oqGCLC5w8KStsiRlwxyJE9UDZzaXDEumY\nF3y07KflMrrVoqvzhJNN+dSCKjIAW98C7tj+ca5Q2aGSKUBr8uUvjon+WWIsTBRK\nmSQpENQqlo81Ck17v6BsNh0eLccLllT6YRtKQ2g1gIWQgJSoDL9iOl0kgY9E/4RO\nm5rTqTzsIBFtWfo/8V0gVBWc/ILki6MCEkviJCzlB4AgM7VA+s0uvnCMjzaTgwul\n8G/jAy3+8Q1FbTJL5dlTm6AYR06XS9JsbAAZlONvA8MO9f3MAHS3ME/wdGqzrF6l\n+8JZ1KBFdWrD9CmF1v0m/Nq1BdlDz1WnHn2AvB/RCOwJFlic0JLIB0HpC28WU0Bq\nKiGpufKZ8dKTBwwI/vNwlvENF3dMAV0ORQ6Snh0Y7sfxuwwBfdJJAIwi21CE9gmS\njgM+kD7oV/l0rYtN5QSwsSVguvlqcWxMvz6KEYzqEcomaDlTQjfSf3xlkAmJTK66\ndZQ8yX1/n5G1BSobu22E+LG/eXkcKdYshSlgZqzoB1djmqYV2i2NfIFe3OEIDgh9\nbU9cikqdv6ds3AdtdpcaRQnIQUf1WcsJkFYWG5SPMA4WSKdNmzOKbyCCJQfMTF2i\n0KeWPIN8sCiTncLlADua5CId3OK3LqrrEbR1ZEmnIVVurySlWdw=\n=zlVS\n-----END PGP SIGNATURE-----",
        "payload": "tree a9aab0347cd8ac74d0fec1213f20bf6ae45b9d8c\nparent fb633933ab570e945d2a366f37eeff39f516c613\nauthor fanquake <fanquake@gmail.com> 1623393372 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261558 +0800\n\ntest: use f-strings in feature_logging.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6679eceacc915a8ea7cd7063f103ffc5eb9da884",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6679eceacc915a8ea7cd7063f103ffc5eb9da884",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6679eceacc915a8ea7cd7063f103ffc5eb9da884/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb633933ab570e945d2a366f37eeff39f516c613",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb633933ab570e945d2a366f37eeff39f516c613",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb633933ab570e945d2a366f37eeff39f516c613"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "722219518a0adc33c31558f0e05527bc8ca20f34",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6679eceacc915a8ea7cd7063f103ffc5eb9da884/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6679eceacc915a8ea7cd7063f103ffc5eb9da884/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=6679eceacc915a8ea7cd7063f103ffc5eb9da884",
        "patch": "@@ -29,34 +29,34 @@ def run_test(self):\n \n         # test alternative log file name outside datadir\n         tempname = os.path.join(self.options.tmpdir, \"foo.log\")\n-        self.restart_node(0, [\"-debuglogfile=%s\" % tempname])\n+        self.restart_node(0, [f\"-debuglogfile={tempname}\"])\n         assert os.path.isfile(tempname)\n \n         # check that invalid log (relative) will cause error\n         invdir = self.relative_log_path(\"foo\")\n         invalidname = os.path.join(\"foo\", \"foo.log\")\n         self.stop_node(0)\n         exp_stderr = r\"Error: Could not open debug log file \\S+$\"\n-        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % (invalidname)], exp_stderr, match=ErrorMatch.FULL_REGEX)\n+        self.nodes[0].assert_start_raises_init_error([f\"-debuglogfile={invalidname}\"], exp_stderr, match=ErrorMatch.FULL_REGEX)\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n         # check that invalid log (relative) works after path exists\n         self.stop_node(0)\n         os.mkdir(invdir)\n-        self.start_node(0, [\"-debuglogfile=%s\" % (invalidname)])\n+        self.start_node(0, [f\"-debuglogfile={invalidname}\"])\n         assert os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n         # check that invalid log (absolute) will cause error\n         self.stop_node(0)\n         invdir = os.path.join(self.options.tmpdir, \"foo\")\n         invalidname = os.path.join(invdir, \"foo.log\")\n-        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % invalidname], exp_stderr, match=ErrorMatch.FULL_REGEX)\n+        self.nodes[0].assert_start_raises_init_error([f\"-debuglogfile={invalidname}\"], exp_stderr, match=ErrorMatch.FULL_REGEX)\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n         # check that invalid log (absolute) works after path exists\n         self.stop_node(0)\n         os.mkdir(invdir)\n-        self.start_node(0, [\"-debuglogfile=%s\" % (invalidname)])\n+        self.start_node(0, [f\"-debuglogfile={invalidname}\"])\n         assert os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n         # check that -nodebuglogfile disables logging\n@@ -67,7 +67,7 @@ def run_test(self):\n         assert not os.path.isfile(default_log_path)\n \n         # just sanity check no crash here\n-        self.restart_node(0, [\"-debuglogfile=%s\" % os.devnull])\n+        self.restart_node(0, [f\"-debuglogfile={os.devnull}\"])\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "1a546e6f6ca95772f0d7dbc2792477becbb8ea63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTU0NmU2ZjZjYTk1NzcyZjBkN2RiYzI3OTI0NzdiZWNiYjhlYTYz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T06:43:19Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:19Z"
      },
      "message": "test: use f-strings in feature_minchainwork.py",
      "tree": {
        "sha": "e512a87760949bf8cc775fc65d23e1f06477ba76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e512a87760949bf8cc775fc65d23e1f06477ba76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a546e6f6ca95772f0d7dbc2792477becbb8ea63",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvcACgkQLuufXMCV\nJsHdKw//RIaO6zzWhBNsDeMa6hdVYqUXjSMiROyrr/Fugt57rOMBozUcjuhriedE\nMCgTxOsiC9Siz3k7/q8Mlcddk9Zifx34vVochNNRx/OuS0jIec7T3Bi5fwPqKuuL\nHG7KK3Hp1tPt5ZipeEvQICUE77HHKdeT6iyGGPAoxkcn0M2N2sefltUN9GGhk/Ce\nbhKS5K2KPaEBG7hqYhtH47W0RPJ/VZVH0nm1Rhetdh7FuhmBaUBgzgRP/zTIRgtW\nYn8oaO8H08clhuCysj4YduRtNrLr+7U9qOPgK5rL9Qn1vv+hcQR81aqsTG6YzJkV\nkYPnj1OaDJ+lCOr7W/wwspC+4j0EFmbXU5bfFuZCOp5CQp6rgR8OkJ9GxiC7NQpn\nrYj4rpkK1Kr/ttNFgSQwosKaVa6NeJCTm31EZnm2AUknUUJCMaaKWEqGQ266ZRjB\nhyPBhgmGPKjFi0WVAljSvZeNU5ahhSHjVC+ouNkqn1SkkvRON6heRrF91ggboD5M\nHTpTXlkHAlX+LqNdPuHuaKU5Y0rGi9lTvZCmTtnuG7hcq325PfM9NvEHvN2quGAO\nxIvVTP5De48zWTa6YZyQ+LWxgB6pxEKaH/3dGe9+YJy6MAz3/teCK3E2Wapb5hvx\nM4O41AdOl3/AC9N3QQPR65nDjIxgzPBZNtvB10hFd4eJ5RFCbzs=\n=d8Ge\n-----END PGP SIGNATURE-----",
        "payload": "tree e512a87760949bf8cc775fc65d23e1f06477ba76\nparent 6679eceacc915a8ea7cd7063f103ffc5eb9da884\nauthor fanquake <fanquake@gmail.com> 1623393799 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261559 +0800\n\ntest: use f-strings in feature_minchainwork.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a546e6f6ca95772f0d7dbc2792477becbb8ea63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a546e6f6ca95772f0d7dbc2792477becbb8ea63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a546e6f6ca95772f0d7dbc2792477becbb8ea63/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6679eceacc915a8ea7cd7063f103ffc5eb9da884",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6679eceacc915a8ea7cd7063f103ffc5eb9da884",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6679eceacc915a8ea7cd7063f103ffc5eb9da884"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "3950690cf02c670672d1e4fecb894dff8906b596",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a546e6f6ca95772f0d7dbc2792477becbb8ea63/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a546e6f6ca95772f0d7dbc2792477becbb8ea63/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=1a546e6f6ca95772f0d7dbc2792477becbb8ea63",
        "patch": "@@ -45,16 +45,16 @@ def run_test(self):\n         # Start building a chain on node0.  node2 shouldn't be able to sync until node1's\n         # minchainwork is exceeded\n         starting_chain_work = REGTEST_WORK_PER_BLOCK # Genesis block's work\n-        self.log.info(\"Testing relay across node %d (minChainWork = %d)\", 1, self.node_min_work[1])\n+        self.log.info(f\"Testing relay across node 1 (minChainWork = {self.node_min_work[1]})\")\n \n         starting_blockcount = self.nodes[2].getblockcount()\n \n         num_blocks_to_generate = int((self.node_min_work[1] - starting_chain_work) / REGTEST_WORK_PER_BLOCK)\n-        self.log.info(\"Generating %d blocks on node0\", num_blocks_to_generate)\n+        self.log.info(f\"Generating {num_blocks_to_generate} blocks on node0\")\n         hashes = self.nodes[0].generatetoaddress(num_blocks_to_generate,\n                                                  self.nodes[0].get_deterministic_priv_key().address)\n \n-        self.log.info(\"Node0 current chain work: %s\", self.nodes[0].getblockheader(hashes[-1])['chainwork'])\n+        self.log.info(f\"Node0 current chain work: {self.nodes[0].getblockheader(hashes[-1])['chainwork']}\")\n \n         # Sleep a few seconds and verify that node2 didn't get any new blocks\n         # or headers.  We sleep, rather than sync_blocks(node0, node1) because\n@@ -63,7 +63,7 @@ def run_test(self):\n         time.sleep(3)\n \n         self.log.info(\"Verifying node 2 has no more blocks than before\")\n-        self.log.info(\"Blockcounts: %s\", [n.getblockcount() for n in self.nodes])\n+        self.log.info(f\"Blockcounts: {[n.getblockcount() for n in self.nodes]}\")\n         # Node2 shouldn't have any new headers yet, because node1 should not\n         # have relayed anything.\n         assert_equal(len(self.nodes[2].getchaintips()), 1)\n@@ -84,7 +84,7 @@ def run_test(self):\n         # continue the test.\n \n         self.sync_all()\n-        self.log.info(\"Blockcounts: %s\", [n.getblockcount() for n in self.nodes])\n+        self.log.info(f\"Blockcounts: {[n.getblockcount() for n in self.nodes]}\")\n \n if __name__ == '__main__':\n     MinimumChainWorkTest().main()"
      }
    ]
  },
  {
    "sha": "961f5813ba65b6a601081912c4ece96c2679794d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjFmNTgxM2JhNjViNmE2MDEwODE5MTJjNGVjZTk2YzI2Nzk3OTRk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T06:49:20Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:19Z"
      },
      "message": "test: use f-strings in feature_notifications.py",
      "tree": {
        "sha": "22000793b7347ccf4393bc8c2785a283f40b52dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22000793b7347ccf4393bc8c2785a283f40b52dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/961f5813ba65b6a601081912c4ece96c2679794d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvcACgkQLuufXMCV\nJsFNpBAAldCyApG969qBYdhF4ogIFA0IbspA9Wmf6X1ukAn6IpOP009swHvT1w/c\nlXMAOJti90crwX04BeKUx7jhY7tXR8ooeNTu3+lyh8HGDhSGAUdJ2ARXbPalKcIe\nFX88LHYqfObpyzIK6k04avSOUX+D/jmJToYOxhxQoOv3kjBrigNBxOI+qB3nEFht\nscpepYH334aqJWG4tum3jnR+FVOcXaHBcp+0ZMcjAUBRjtVfV4NDhZaUeMyke7fT\nx9jt6tgxeVJ3b61ZbVyCDts/msqrLPWmtEE/+M+N/VXKpspN1jJQMI9Mclqg4Y9O\n/l4MdL8OWSJkjVAOkn9urwVZsnsBQ3e/oRT+jlZFsnidmko9p+nPONNJg6E6OJJe\n57MBeJpBNzbXiq2SvAcSL6gclHrfOW6wysyJbUNB3NByp33S0yJUaHR2h/QPMF/l\n0JsRvDzt4YE0hoFxcjTsGHcEKLhl8D/hIk0uZPdsF0kwsKcfnDSwvwPdnwjFM5bd\nlwpf/UQZwqSyUnAzme453iOAIwQLP63bdtAzBlu7Cx8GuYSBLPsCjcwWUu2Jb6/R\nRYnR1es1DIE11i57vX1gd09DGJFWzHye1hWZJx6WVK63Ze9VSyQMruqRPmsnPGUt\nLd+jsOsEW6X6Tqr6238+pdUZgw2cmTkIW7RgxVgqXjfkGp8w+7U=\n=CAEu\n-----END PGP SIGNATURE-----",
        "payload": "tree 22000793b7347ccf4393bc8c2785a283f40b52dd\nparent 1a546e6f6ca95772f0d7dbc2792477becbb8ea63\nauthor fanquake <fanquake@gmail.com> 1623394160 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261559 +0800\n\ntest: use f-strings in feature_notifications.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/961f5813ba65b6a601081912c4ece96c2679794d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/961f5813ba65b6a601081912c4ece96c2679794d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/961f5813ba65b6a601081912c4ece96c2679794d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a546e6f6ca95772f0d7dbc2792477becbb8ea63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a546e6f6ca95772f0d7dbc2792477becbb8ea63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a546e6f6ca95772f0d7dbc2792477becbb8ea63"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "3f8fe9ccd58dd383c8d00fa8d060dcb0387995f0",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/961f5813ba65b6a601081912c4ece96c2679794d/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/961f5813ba65b6a601081912c4ece96c2679794d/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=961f5813ba65b6a601081912c4ece96c2679794d",
        "patch": "@@ -20,7 +20,7 @@\n UNCONFIRMED_HASH_STRING = 'unconfirmed'\n \n def notify_outputname(walletname, txid):\n-    return txid if os.name == 'nt' else '{}_{}'.format(walletname, txid)\n+    return txid if os.name == 'nt' else f'{walletname}_{txid}'\n \n \n class NotificationsTest(BitcoinTestFramework):\n@@ -39,11 +39,11 @@ def setup_network(self):\n \n         # -alertnotify and -blocknotify on node0, walletnotify on node1\n         self.extra_args = [[\n-            \"-alertnotify=echo > {}\".format(os.path.join(self.alertnotify_dir, '%s')),\n-            \"-blocknotify=echo > {}\".format(os.path.join(self.blocknotify_dir, '%s')),\n+            f\"-alertnotify=echo > {os.path.join(self.alertnotify_dir, '%s')}\",\n+            f\"-blocknotify=echo > {os.path.join(self.blocknotify_dir, '%s')}\",\n         ], [\n             \"-rescan\",\n-            \"-walletnotify=echo %h_%b > {}\".format(os.path.join(self.walletnotify_dir, notify_outputname('%w', '%s'))),\n+            f\"-walletnotify=echo %h_%b > {os.path.join(self.walletnotify_dir, notify_outputname('%w', '%s'))}\",\n         ]]\n         self.wallet_names = [self.default_wallet_name, self.wallet]\n         super().setup_network()\n@@ -54,12 +54,12 @@ def run_test(self):\n             seed = \"cTdGmKFWpbvpKQ7ejrdzqYT2hhjyb3GPHnLAK7wdi5Em67YLwSm9\"\n             xpriv = \"tprv8ZgxMBicQKsPfHCsTwkiM1KT56RXbGGTqvc2hgqzycpwbHqqpcajQeMRZoBD35kW4RtyCemu6j34Ku5DEspmgjKdt2qe4SvRch5Kk8B8A2v\"\n             desc_imports = [{\n-                \"desc\": descsum_create(\"wpkh(\" + xpriv + \"/0/*)\"),\n+                \"desc\": descsum_create(f\"wpkh({xpriv}/0/*)\"),\n                 \"timestamp\": 0,\n                 \"active\": True,\n                 \"keypool\": True,\n             },{\n-                \"desc\": descsum_create(\"wpkh(\" + xpriv + \"/1/*)\"),\n+                \"desc\": descsum_create(f\"wpkh({xpriv}/1/*)\"),\n                 \"timestamp\": 0,\n                 \"active\": True,\n                 \"keypool\": True,"
      }
    ]
  },
  {
    "sha": "6651d77f22862716f5bd7d0b31cfbd3937ab7b1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjUxZDc3ZjIyODYyNzE2ZjViZDdkMGIzMWNmYmQzOTM3YWI3YjFk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T07:20:14Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:19Z"
      },
      "message": "test: use f-strings in feature_pruning.py",
      "tree": {
        "sha": "96eeabc67c88b6abb74066117611184f0a7c3005",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96eeabc67c88b6abb74066117611184f0a7c3005"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6651d77f22862716f5bd7d0b31cfbd3937ab7b1d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvcACgkQLuufXMCV\nJsE7LQ/+IBdgHsfbZ0A7EscF3JZ+xAxBWm4sC3xUKQiLkeJcl1k/Sn9Lif1dgYGV\nYFJuLJhqKxJ/Ay0zbVK3j9y3eg/QTxQOYIzjEXazvxPJiMLZPL6jwqal36f5iJRL\n8lCDdv25aza1FwzfLp4BAaIfgLU+G+GTM3PTqxOjVAA9fnTq8YKC4tkMfE6H3/pw\nWb9SZ3Pd7u1VenWl6jndbppjpIKEzvKZ2kM2wCoTIQWDjF92Kwu14VJV+d6+dnAE\nTsqHjP098gTMLun0oHCV+b2DLQ54XCPmM0lOB7GSboLM4c6KY6g54bO3+5AzxJp9\nbnQu6kIpm8JTf9jUZlPQFZEwnb4xUC4MvQuF5oNPwZpurzFwLEUsK2ZLvkFq8EsI\nIs1sNUooCJ1Gy2va7KIO75bd+OCCMqlZcRPjjUFClZ1p3eBmJDxNvcHFoChzgyR8\nE/AKljJDC3Ed6uwhZfl1Y8PC0G0CgAPTRgmB+Pm7hPzHspXDhqCsMXccC7zgxGpk\nRwAhuJmFe7ZRFkMFNszxi2MwBgOQBMJGNVjILgxCXRh337UOgjn7ujlp7LkqeeFY\nY5ojjF9ZgiCpKZ95t5VsFwACeI9vWTF7i3sACIJzVN5mioZhJN7PzR7cNI5cUObm\n/uhySaJykM9XdaRNhV8ffSLsnu7WqZwB9bja0+8yTszdvYXzgkk=\n=gcqt\n-----END PGP SIGNATURE-----",
        "payload": "tree 96eeabc67c88b6abb74066117611184f0a7c3005\nparent 961f5813ba65b6a601081912c4ece96c2679794d\nauthor fanquake <fanquake@gmail.com> 1623396014 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261559 +0800\n\ntest: use f-strings in feature_pruning.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6651d77f22862716f5bd7d0b31cfbd3937ab7b1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6651d77f22862716f5bd7d0b31cfbd3937ab7b1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6651d77f22862716f5bd7d0b31cfbd3937ab7b1d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "961f5813ba65b6a601081912c4ece96c2679794d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/961f5813ba65b6a601081912c4ece96c2679794d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/961f5813ba65b6a601081912c4ece96c2679794d"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "2f0868e733dd1aec09f8abace1286fea2fb6338f",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6651d77f22862716f5bd7d0b31cfbd3937ab7b1d/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6651d77f22862716f5bd7d0b31cfbd3937ab7b1d/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=6651d77f22862716f5bd7d0b31cfbd3937ab7b1d",
        "patch": "@@ -148,7 +148,7 @@ def test_invalid_command_line_options(self):\n     def test_height_min(self):\n         assert os.path.isfile(os.path.join(self.prunedir, \"blk00000.dat\")), \"blk00000.dat is missing, pruning too early\"\n         self.log.info(\"Success\")\n-        self.log.info(\"Though we're already using more than 550MiB, current usage: %d\" % calc_usage(self.prunedir))\n+        self.log.info(f\"Though we're already using more than 550MiB, current usage: {calc_usage(self.prunedir)}\")\n         self.log.info(\"Mining 25 more blocks should cause the first block file to be pruned\")\n         # Pruning doesn't run until we're allocating another chunk, 20 full blocks past the height cutoff will ensure this\n         mine_large_blocks(self.nodes[0], 25)\n@@ -158,7 +158,7 @@ def test_height_min(self):\n \n         self.log.info(\"Success\")\n         usage = calc_usage(self.prunedir)\n-        self.log.info(\"Usage should be below target: %d\" % usage)\n+        self.log.info(f\"Usage should be below target: {usage}\")\n         assert_greater_than(550, usage)\n \n     def create_chain_with_staleblocks(self):\n@@ -181,18 +181,18 @@ def create_chain_with_staleblocks(self):\n             self.connect_nodes(0, 2)\n             self.sync_blocks(self.nodes[0:3])\n \n-        self.log.info(\"Usage can be over target because of high stale rate: %d\" % calc_usage(self.prunedir))\n+        self.log.info(f\"Usage can be over target because of high stale rate: {calc_usage(self.prunedir)}\")\n \n     def reorg_test(self):\n         # Node 1 will mine a 300 block chain starting 287 blocks back from Node 0 and Node 2's tip\n         # This will cause Node 2 to do a reorg requiring 288 blocks of undo data to the reorg_test chain\n \n         height = self.nodes[1].getblockcount()\n-        self.log.info(\"Current block height: %d\" % height)\n+        self.log.info(f\"Current block height: {height}\")\n \n         self.forkheight = height - 287\n         self.forkhash = self.nodes[1].getblockhash(self.forkheight)\n-        self.log.info(\"Invalidating block %s at height %d\" % (self.forkhash, self.forkheight))\n+        self.log.info(f\"Invalidating block {self.forkhash} at height {self.forkheight}\")\n         self.nodes[1].invalidateblock(self.forkhash)\n \n         # We've now switched to our previously mined-24 block fork on node 1, but that's not what we want\n@@ -204,7 +204,7 @@ def reorg_test(self):\n             curhash = self.nodes[1].getblockhash(self.forkheight - 1)\n \n         assert self.nodes[1].getblockcount() == self.forkheight - 1\n-        self.log.info(\"New best height: %d\" % self.nodes[1].getblockcount())\n+        self.log.info(f\"New best height: {self.nodes[1].getblockcount()}\")\n \n         # Disconnect node1 and generate the new chain\n         self.disconnect_nodes(0, 1)\n@@ -218,24 +218,24 @@ def reorg_test(self):\n         self.connect_nodes(1, 2)\n         self.sync_blocks(self.nodes[0:3], timeout=120)\n \n-        self.log.info(\"Verify height on node 2: %d\" % self.nodes[2].getblockcount())\n-        self.log.info(\"Usage possibly still high because of stale blocks in block files: %d\" % calc_usage(self.prunedir))\n+        self.log.info(f\"Verify height on node 2: {self.nodes[2].getblockcount()}\")\n+        self.log.info(f\"Usage possibly still high because of stale blocks in block files: {calc_usage(self.prunedir)}\")\n \n         self.log.info(\"Mine 220 more large blocks so we have requisite history\")\n \n         mine_large_blocks(self.nodes[0], 220)\n         self.sync_blocks(self.nodes[0:3], timeout=120)\n \n         usage = calc_usage(self.prunedir)\n-        self.log.info(\"Usage should be below target: %d\" % usage)\n+        self.log.info(f\"Usage should be below target: {usage}\")\n         assert_greater_than(550, usage)\n \n     def reorg_back(self):\n         # Verify that a block on the old main chain fork has been pruned away\n         assert_raises_rpc_error(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n         with self.nodes[2].assert_debug_log(expected_msgs=['block verification stopping at height', '(pruning, no data)']):\n             self.nodes[2].verifychain(checklevel=4, nblocks=0)\n-        self.log.info(\"Will need to redownload block %d\" % self.forkheight)\n+        self.log.info(f\"Will need to redownload block {self.forkheight}\")\n \n         # Verify that we have enough history to reorg back to the fork point\n         # Although this is more than 288 blocks, because this chain was written more recently\n@@ -259,7 +259,7 @@ def reorg_back(self):\n         # At this point node 2 is within 288 blocks of the fork point so it will preserve its ability to reorg\n         if self.nodes[2].getblockcount() < self.mainchainheight:\n             blocks_to_mine = first_reorg_height + 1 - self.mainchainheight\n-            self.log.info(\"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed: %d\" % blocks_to_mine)\n+            self.log.info(f\"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed: {blocks_to_mine}\")\n             self.nodes[0].invalidateblock(curchainhash)\n             assert_equal(self.nodes[0].getblockcount(), self.mainchainheight)\n             assert_equal(self.nodes[0].getbestblockhash(), self.mainchainhash2)\n@@ -296,7 +296,7 @@ def prune(index):\n             assert_equal(ret, node.getblockchaininfo()['pruneheight'])\n \n         def has_block(index):\n-            return os.path.isfile(os.path.join(self.nodes[node_number].datadir, self.chain, \"blocks\", \"blk{:05}.dat\".format(index)))\n+            return os.path.isfile(os.path.join(self.nodes[node_number].datadir, self.chain, \"blocks\", f\"blk{index:05}.dat\"))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n         assert_raises_rpc_error(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))"
      }
    ]
  },
  {
    "sha": "cf6d66bf941d946600047d712c7cd15d7605322e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjZkNjZiZjk0MWQ5NDY2MDAwNDdkNzEyYzdjZDE1ZDc2MDUzMjJl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T07:26:49Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:19Z"
      },
      "message": "test: use f-strings in feature_settings.py",
      "tree": {
        "sha": "f2787b8a20131b0578c46b5770b2453a734728f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2787b8a20131b0578c46b5770b2453a734728f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf6d66bf941d946600047d712c7cd15d7605322e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvcACgkQLuufXMCV\nJsGg9g/+MvE5Xl3enhqDyxHZaENCDGcb6KzC8l8v4/ORlk9mO02p6EXYGZB99+7W\n0uZzOyuZD+VCAYG06NKiejXifP10vOHqJ0eDOKGUs60p0yQmGoVZq0JX7ceqsROR\nj+8tZv8leIjzeV843QJxx0APUs549yqKkDzIzMqzEyIycOmVG2AvTawqQ6CDmyPl\nFL+kPEXHXco0oLYqFrjXKBwjoVViDj55p7QXXb2hGi/iY/MIriHTDl902OOkm2nO\nCNTgOSD0ERdo8h0hbXKifN+46RHaap0bHB7Zm5X+805reuwFGNdwPPlaiH9QMXum\n+j0AjVigdU3GqivI4AeEtmgnuUpT8G/FOnwTgSMeZx4w+DyS5CNH5XRxh0b3VrHN\ngCt4C8ZGyw+sT3oPMiPBzdb/vKPwqpKHwaDhxEVdFxdsP6FPPfOOK4LmLPb7AFZ2\nXXDb/MS124t2bneoZs4WnxT7lAMV7BdJ0+l2pq8Ax1NlB97lIG4MRVQRFc0yIbz5\n0TBvInu2U53QzP2N5YbR/v1JXEuKzhwhzzXYJGWQOgWyJTOmm5PNlY8zL1FcuN2G\nG6bJAKRXfGPfy9/GwfwhjezqnTydQDECiAgJEbH+3LYOx//Gu3uxjxKatKIiZVVh\n8sn76oDO35kPK0g/YBWHwD283flTsJvMD+M6f2A/fmwdKqb/orA=\n=K5ag\n-----END PGP SIGNATURE-----",
        "payload": "tree f2787b8a20131b0578c46b5770b2453a734728f7\nparent 6651d77f22862716f5bd7d0b31cfbd3937ab7b1d\nauthor fanquake <fanquake@gmail.com> 1623396409 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261559 +0800\n\ntest: use f-strings in feature_settings.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf6d66bf941d946600047d712c7cd15d7605322e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf6d66bf941d946600047d712c7cd15d7605322e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf6d66bf941d946600047d712c7cd15d7605322e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6651d77f22862716f5bd7d0b31cfbd3937ab7b1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6651d77f22862716f5bd7d0b31cfbd3937ab7b1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6651d77f22862716f5bd7d0b31cfbd3937ab7b1d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "26048d37f6e36200ecfb02ae001408d785007216",
        "filename": "test/functional/feature_settings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf6d66bf941d946600047d712c7cd15d7605322e/test/functional/feature_settings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf6d66bf941d946600047d712c7cd15d7605322e/test/functional/feature_settings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_settings.py?ref=cf6d66bf941d946600047d712c7cd15d7605322e",
        "patch": "@@ -83,7 +83,7 @@ def run_test(self):\n         with altsettings.open(\"w\") as fp:\n             fp.write('{\"key\": \"value\"}')\n         with node.assert_debug_log(expected_msgs=['Setting file arg: key = \"value\"']):\n-            self.start_node(0, extra_args=[\"-settings={}\".format(altsettings)])\n+            self.start_node(0, extra_args=[f\"-settings={altsettings}\"])\n             self.stop_node(0)\n \n "
      }
    ]
  },
  {
    "sha": "b166d54c3cbb0c028210cee977b3dcde5ac5474f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTY2ZDU0YzNjYmIwYzAyODIxMGNlZTk3N2IzZGNkZTVhYzU0NzRm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T07:30:57Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:19Z"
      },
      "message": "test: use f-strings in feature_versionbits_warning.py",
      "tree": {
        "sha": "8240906c48cd102f7caef6e4ca33e8fd4783f65a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8240906c48cd102f7caef6e4ca33e8fd4783f65a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b166d54c3cbb0c028210cee977b3dcde5ac5474f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvcACgkQLuufXMCV\nJsHF2RAAnCLKGI2AsHfoAdQYHABuZjvrkGkOTMHvn9h3+LkkWutAL5qbDtXcIfAa\nshny3tU5w9eLKGaolvom8SdqpHWr+3fIZt9NqJgLf2aBMTYge7nlQgT2MCN/vpKx\nHD1ioNd0fnqzYRpPoGBcW0HZiMN1t3aPf3dksqoUED8Hr3WgMx8EVdw2ChhJymzn\nTpyXdHGA/qHDr6gLsaovv4r9p51hxilzAYu8i4HPxz8SqaWoh5KpHmnU97Ec12cq\nuTZIeaY+wEEXO8fRNFWVmxf3aqTWEf+rIYsXdwMtCOxVB5cb/Gp7y0w+nSE1Lh4J\nyBbT7Bw4wWJqTWUW0Mh4cb6QFH3jJ4mIyPoYIdLdtEUKHYJlVYwDfos8tj1HogJw\nqWimgtI9hcg6DNKu2NDNtZ0F1ibD+EVmsXqBggi5jaEWkAAfJC9ylEHWi86ip9gr\njvwH9x47QRyTAsn0wEYuZDYMl6LOvYgQnYCprcoKBwCr6T+IwBUUE47WiAZ1d8gm\nMVXddNBG9o7kLLGCnr9inU8PKcnH1BBwOZtcdVZqnNT7/B+MKV/0TAtzqi+rH0xy\nhjHS3SIB8pWzEhlpmXIKUZfhdMVA9iDJf9BQWGsf4SxrIVg2kLn6jEkyAhVv0ZFo\nOpZo4KevPO+FSMRj1ED7kTcyQkwhRTQ2WkWuX6Dj1YstohbSZGs=\n=Soi+\n-----END PGP SIGNATURE-----",
        "payload": "tree 8240906c48cd102f7caef6e4ca33e8fd4783f65a\nparent cf6d66bf941d946600047d712c7cd15d7605322e\nauthor fanquake <fanquake@gmail.com> 1623396657 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261559 +0800\n\ntest: use f-strings in feature_versionbits_warning.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b166d54c3cbb0c028210cee977b3dcde5ac5474f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b166d54c3cbb0c028210cee977b3dcde5ac5474f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b166d54c3cbb0c028210cee977b3dcde5ac5474f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf6d66bf941d946600047d712c7cd15d7605322e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf6d66bf941d946600047d712c7cd15d7605322e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf6d66bf941d946600047d712c7cd15d7605322e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a7ec5c48e38640e7f056090d757064273d7f3f40",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b166d54c3cbb0c028210cee977b3dcde5ac5474f/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b166d54c3cbb0c028210cee977b3dcde5ac5474f/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=b166d54c3cbb0c028210cee977b3dcde5ac5474f",
        "patch": "@@ -21,7 +21,7 @@\n VB_UNKNOWN_BIT = 27       # Choose a bit unassigned to any deployment\n VB_UNKNOWN_VERSION = VB_TOP_BITS | (1 << VB_UNKNOWN_BIT)\n \n-WARN_UNKNOWN_RULES_ACTIVE = \"Unknown new rules activated (versionbit {})\".format(VB_UNKNOWN_BIT)\n+WARN_UNKNOWN_RULES_ACTIVE = f\"Unknown new rules activated (versionbit {VB_UNKNOWN_BIT})\"\n VB_PATTERN = re.compile(\"Unknown new rules activated.*versionbit\")\n \n class VersionBitsWarningTest(BitcoinTestFramework):\n@@ -34,7 +34,7 @@ def setup_network(self):\n         # Open and close to create zero-length file\n         with open(self.alert_filename, 'w', encoding='utf8'):\n             pass\n-        self.extra_args = [[\"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]]\n+        self.extra_args = [[f\"-alertnotify=echo %s >> \\\"{self.alert_filename}\\\"\"]]\n         self.setup_nodes()\n \n     def send_blocks_with_version(self, peer, numblocks, version):"
      }
    ]
  },
  {
    "sha": "31bdb33dcb8345df1bb94b28e811252a918d7dcb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWJkYjMzZGNiODM0NWRmMWJiOTRiMjhlODExMjUyYTkxOGQ3ZGNi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T07:32:16Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:20Z"
      },
      "message": "test: use f-strings in feature_segwit.py",
      "tree": {
        "sha": "a0f82785a44f15c3a423aacc89efb89759f81a15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0f82785a44f15c3a423aacc89efb89759f81a15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31bdb33dcb8345df1bb94b28e811252a918d7dcb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvgACgkQLuufXMCV\nJsGpbQ//dkg7p03vDYUku41azi6MVVYujdLIfYTTIl1GLuQw1F8eeANLFsnyV5/4\nLfMwsDwTLggK/4Zni4dhLVvVhCbYrFjvlalFgzYTBSgvCh9jz2VDsbcEZflvzUoQ\nZI8jN2pEwKPWNBA5lMiDVv8CPZCwHLAR9af14tPM5W4DMHAnlbm4WGiZjlFNEWoy\nT5qN3VmD08c/bckpcSc8RCth33cBdsZyFbMLOySsc4DaJ+l3YJbBfjZgjvsbUjMC\nMesg33uZKUpANI3af6creYhJuBoGRB5ZmnOzPFO1jedDXli9Z328VZiqE5xWJxxo\n4BFPo3WhtI6Teh0tVUwljxF4Z/7VVyqgDOfUI4XFgVouXqa66wy33La2kB00k0T0\nOYgD3KNk9m79L8/H5eKfiKG1M7n+K0I8gnS5tyQg3dJ18K6SXrqSOz3eZun67KF6\njjj68hRZKWq0TSOVMN944tn+ospjCK0M/HrZlOZnsmcHqeQqMmScV5HYgeklReRA\n0YSTjfUtW12wQ171PmxFgwM+aripKeSfG//Mq1zDRQEJ0fDv4xQFMGvfLwnYa9Tk\nj4fLPNXv4/1zCEb7rNibp0Mfk55YZowj65TiqcA/6HEEn5ohV+NUP2Bqfiq//YvF\nDn0CzylRgiI7V0fi2BiaIH+ovnmzXZrdt4RE0hrzJ7HB9D6MbQ8=\n=o3MQ\n-----END PGP SIGNATURE-----",
        "payload": "tree a0f82785a44f15c3a423aacc89efb89759f81a15\nparent b166d54c3cbb0c028210cee977b3dcde5ac5474f\nauthor fanquake <fanquake@gmail.com> 1623396736 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261560 +0800\n\ntest: use f-strings in feature_segwit.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31bdb33dcb8345df1bb94b28e811252a918d7dcb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31bdb33dcb8345df1bb94b28e811252a918d7dcb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31bdb33dcb8345df1bb94b28e811252a918d7dcb/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b166d54c3cbb0c028210cee977b3dcde5ac5474f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b166d54c3cbb0c028210cee977b3dcde5ac5474f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b166d54c3cbb0c028210cee977b3dcde5ac5474f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6f1cecce588b501843279e708b78e6aa743bd95f",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31bdb33dcb8345df1bb94b28e811252a918d7dcb/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31bdb33dcb8345df1bb94b28e811252a918d7dcb/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=31bdb33dcb8345df1bb94b28e811252a918d7dcb",
        "patch": "@@ -65,7 +65,7 @@ def find_spendable_utxo(node, min_value):\n         if utxo['spendable']:\n             return utxo\n \n-    raise AssertionError(\"Unspent output equal or higher than %s not found\" % min_value)\n+    raise AssertionError(f\"Unspent output equal or higher than {min_value} not found\")\n \n txs_mined = {} # txindex from txid to blockhash\n "
      }
    ]
  },
  {
    "sha": "86d958262dff43002820d58ccb8958e2dbfb9d5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmQ5NTgyNjJkZmY0MzAwMjgyMGQ1OGNjYjg5NThlMmRiZmI5ZDVi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T07:38:25Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:20Z"
      },
      "message": "test: use f-strings in feature_proxy.py",
      "tree": {
        "sha": "7a69135ae592373ba804c6f2557be3f80d99887c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a69135ae592373ba804c6f2557be3f80d99887c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86d958262dff43002820d58ccb8958e2dbfb9d5b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvgACgkQLuufXMCV\nJsE9IxAAoHQegtZoI2NxA3N/0+axSot2Wgp4wBqGFN6CvhIDuGupPI4OI9xQsags\nQgKovuPNHawORVbSgMVkqpGgFxOIwsLzYkxjks66WiGgI8Y1fLgzEWKxhwPmgAnT\n74zdDHS7XNeHEfYrULkFwe3MWztP9RDZFDFI4Lg7Ube/eU3HAYP5iiotPLLsEnUv\nQJ96lOHHrdv4oYW6LqaKeXy+zDAcDAP6LGJl7OxVFO9BQbBeJBLbBlV6F5EbdBoV\n89/89Vl11mR4wYkP7fONKzQBnPY1312C7U/migUaNKOzGydwHoc1FkzDk62JAvo8\naWro4dyjbCzf1U8+2SqEIYykbmetqc3lrYtSB9Ee81JeeC2BDEXl0aZdtXYel4Pm\n2Ohil8744RiBzdLgtzo6hHwudt2lMOddnQX/rIUWrQHVNIT3aPV0MvMfpdxmWCoZ\nrE1dxtCrPoVy5oVJkZ0ujij+fbLf3rbb1ohd0B9z0rJOaN+n/2DEuPpfNUbgQreR\nbiRqGstepNIMRxE3SGSuCmnwJGxmE9Ww/MVYr63B2EJj4p5HTfS6HA5YTOaNHftZ\nutO5wIE0QidNx6lzVFm5FdV6F63kxFxJHAe6fQA5PYVjrllKFFvn3uRljq0b6uQp\niBOzFajAjfJ2PXRcb3o4NaKsnh1AxHIWBAvW3b0zHjbTn1v/664=\n=DYcX\n-----END PGP SIGNATURE-----",
        "payload": "tree 7a69135ae592373ba804c6f2557be3f80d99887c\nparent 31bdb33dcb8345df1bb94b28e811252a918d7dcb\nauthor fanquake <fanquake@gmail.com> 1623397105 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261560 +0800\n\ntest: use f-strings in feature_proxy.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86d958262dff43002820d58ccb8958e2dbfb9d5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86d958262dff43002820d58ccb8958e2dbfb9d5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86d958262dff43002820d58ccb8958e2dbfb9d5b/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31bdb33dcb8345df1bb94b28e811252a918d7dcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31bdb33dcb8345df1bb94b28e811252a918d7dcb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31bdb33dcb8345df1bb94b28e811252a918d7dcb"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "2fb5e328f539f8dc62d2d07ec2a539541092ca34",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86d958262dff43002820d58ccb8958e2dbfb9d5b/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86d958262dff43002820d58ccb8958e2dbfb9d5b/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=86d958262dff43002820d58ccb8958e2dbfb9d5b",
        "patch": "@@ -97,14 +97,14 @@ def setup_nodes(self):\n         # Note: proxies are not used to connect to local nodes. This is because the proxy to\n         # use is based on CService.GetNetwork(), which returns NET_UNROUTABLE for localhost.\n         args = [\n-            ['-listen', '-proxy=%s:%i' % (self.conf1.addr),'-proxyrandomize=1'],\n-            ['-listen', '-proxy=%s:%i' % (self.conf1.addr),'-onion=%s:%i' % (self.conf2.addr),\n-                '-i2psam=%s:%i' % (self.i2p_sam), '-i2pacceptincoming=0', '-proxyrandomize=0'],\n-            ['-listen', '-proxy=%s:%i' % (self.conf2.addr),'-proxyrandomize=1'],\n+            ['-listen', f'-proxy={self.conf1.addr[0]}:{self.conf1.addr[1]}','-proxyrandomize=1'],\n+            ['-listen', f'-proxy={self.conf1.addr[0]}:{self.conf1.addr[1]}',f'-onion={self.conf2.addr[0]}:{self.conf2.addr[1]}',\n+                f'-i2psam={self.i2p_sam[0]}:{self.i2p_sam[1]}', '-i2pacceptincoming=0', '-proxyrandomize=0'],\n+            ['-listen', f'-proxy={self.conf2.addr[0]}:{self.conf2.addr[1]}','-proxyrandomize=1'],\n             []\n         ]\n         if self.have_ipv6:\n-            args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n+            args[3] = ['-listen', f'-proxy=[{self.conf3.addr[0]}]:{self.conf3.addr[1]}','-proxyrandomize=0', '-noonion']\n         self.add_nodes(self.num_nodes, extra_args=args)\n         self.start_nodes()\n \n@@ -116,7 +116,7 @@ def network_test(self, node, addr, network):\n     def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []\n         addr = \"15.61.23.23:1234\"\n-        self.log.debug(\"Test: outgoing IPv4 connection through node for address {}\".format(addr))\n+        self.log.debug(f\"Test: outgoing IPv4 connection through node for address {addr}\")\n         node.addnode(addr, \"onetry\")\n         cmd = proxies[0].queue.get()\n         assert isinstance(cmd, Socks5Command)\n@@ -132,7 +132,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n \n         if self.have_ipv6:\n             addr = \"[1233:3432:2434:2343:3234:2345:6546:4534]:5443\"\n-            self.log.debug(\"Test: outgoing IPv6 connection through node for address {}\".format(addr))\n+            self.log.debug(f\"Test: outgoing IPv6 connection through node for address {addr}\")\n             node.addnode(addr, \"onetry\")\n             cmd = proxies[1].queue.get()\n             assert isinstance(cmd, Socks5Command)\n@@ -148,7 +148,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n \n         if test_onion:\n             addr = \"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion:8333\"\n-            self.log.debug(\"Test: outgoing onion connection through node for address {}\".format(addr))\n+            self.log.debug(f\"Test: outgoing onion connection through node for address {addr}\")\n             node.addnode(addr, \"onetry\")\n             cmd = proxies[2].queue.get()\n             assert isinstance(cmd, Socks5Command)\n@@ -162,7 +162,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n             self.network_test(node, addr, network=NET_ONION)\n \n         addr = \"node.noumenon:8333\"\n-        self.log.debug(\"Test: outgoing DNS name connection through node for address {}\".format(addr))\n+        self.log.debug(f\"Test: outgoing DNS name connection through node for address {addr}\")\n         node.addnode(addr, \"onetry\")\n         cmd = proxies[3].queue.get()\n         assert isinstance(cmd, Socks5Command)\n@@ -218,12 +218,12 @@ def networks_dict(d):\n         n1 = networks_dict(self.nodes[1].getnetworkinfo())\n         assert_equal(NETWORKS, n1.keys())\n         for net in ['ipv4', 'ipv6']:\n-            assert_equal(n1[net]['proxy'], '%s:%i' % (self.conf1.addr))\n+            assert_equal(n1[net]['proxy'], f'{self.conf1.addr[0]}:{self.conf1.addr[1]}')\n             assert_equal(n1[net]['proxy_randomize_credentials'], False)\n-        assert_equal(n1['onion']['proxy'], '%s:%i' % (self.conf2.addr))\n+        assert_equal(n1['onion']['proxy'], f'{self.conf2.addr[0]}:{self.conf2.addr[1]}')\n         assert_equal(n1['onion']['proxy_randomize_credentials'], False)\n         assert_equal(n1['onion']['reachable'], True)\n-        assert_equal(n1['i2p']['proxy'], '%s:%i' % (self.i2p_sam))\n+        assert_equal(n1['i2p']['proxy'], f'{self.i2p_sam[0]}:{self.i2p_sam[1]}')\n         assert_equal(n1['i2p']['proxy_randomize_credentials'], False)\n         assert_equal(n1['i2p']['reachable'], True)\n \n@@ -234,7 +234,7 @@ def networks_dict(d):\n                 expected_proxy = ''\n                 expected_randomize = False\n             else:\n-                expected_proxy = '%s:%i' % (self.conf2.addr)\n+                expected_proxy = f'{self.conf2.addr[0]}:{self.conf2.addr[1]}'\n                 expected_randomize = True\n             assert_equal(n2[net]['proxy'], expected_proxy)\n             assert_equal(n2[net]['proxy_randomize_credentials'], expected_randomize)\n@@ -248,7 +248,7 @@ def networks_dict(d):\n                 if net == NET_I2P:\n                     expected_proxy = ''\n                 else:\n-                    expected_proxy = '[%s]:%i' % (self.conf3.addr)\n+                    expected_proxy = f'[{self.conf3.addr[0]}]:{self.conf3.addr[1]}'\n                 assert_equal(n3[net]['proxy'], expected_proxy)\n                 assert_equal(n3[net]['proxy_randomize_credentials'], False)\n             assert_equal(n3['onion']['reachable'], False)"
      }
    ]
  },
  {
    "sha": "c2a5d560df2824df5731100c2584e8ad7a3d7bc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmE1ZDU2MGRmMjgyNGRmNTczMTEwMGMyNTg0ZThhZDdhM2Q3YmMy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-12T06:26:31Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:20Z"
      },
      "message": "test: use f-strings in interface_*.py tests",
      "tree": {
        "sha": "38959dad0ab73cc9fefaeb8eb5d4a1b1f14870d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38959dad0ab73cc9fefaeb8eb5d4a1b1f14870d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2a5d560df2824df5731100c2584e8ad7a3d7bc2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvgACgkQLuufXMCV\nJsFoOg/+I4nTLn5aUtA+hCCbuRjSgdh7qNFnxxjXg7yqznc9TvValuLwaW41DHwu\n+1PiFKeUD1MGGhtGsGo0TSHa/0zKB1Zil7TdJLqrpJ03EmdDQmgglpMaN3OnNHjN\n61Yro6SoUc974H8wmGeYvoevHjsQxm//0nwhKv8mTD0isFVD22VSTKp/021UxE2B\nM2f9ppbQj+FoVHvQig36n4O4tIrYSkw2MWU3/LBuF2ZFUOkFrg21Sc9yEOMIpoOH\nERVeAnWrWJplcHAZfWDGc2dbUR8D+GzSLPzUDU3WZsvmxHX3hJ5qocooBys/Sb2w\noSveOc2i7IWsKuALypZDcmA4G61THMfvezB+nNS4ZP7vjhrXraP+yalCX9bscnyU\nTuDzJuIG8oGCC82HnNkfsuEUSKe7EWp4TgDRQPzB95NVnLl2SW1vaq+3l6HLqO/O\npj3gMRLkdVarkAiQb+Xjw5Bvh+WgmA6r2qtMJ2zv3TtZrV1D9PEnewogvYmmTiXy\nGj32vKDvs/HQSqo8CdN46O4opFcPcVyJYp2MmalWjMXwK/FLVpDHJsvq8vJMQJCo\nsTtgLsv7p6RKeEmyMP6cxtHWsCpAh9wQW/FnfrWmI3Z2dqEt+9e/hJSlxi36HGDB\nKW3IedLUP2V2IUabLLHih11mSON0rhkB+lqtADuAF5ZpNoKZRgo=\n=CSWn\n-----END PGP SIGNATURE-----",
        "payload": "tree 38959dad0ab73cc9fefaeb8eb5d4a1b1f14870d3\nparent 86d958262dff43002820d58ccb8958e2dbfb9d5b\nauthor fanquake <fanquake@gmail.com> 1623479191 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261560 +0800\n\ntest: use f-strings in interface_*.py tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2a5d560df2824df5731100c2584e8ad7a3d7bc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2a5d560df2824df5731100c2584e8ad7a3d7bc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2a5d560df2824df5731100c2584e8ad7a3d7bc2/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86d958262dff43002820d58ccb8958e2dbfb9d5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86d958262dff43002820d58ccb8958e2dbfb9d5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86d958262dff43002820d58ccb8958e2dbfb9d5b"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 54,
      "deletions": 54
    },
    "files": [
      {
        "sha": "4b5363ec49bdc519ad0a7cac70eb9cc0fb4164ee",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2a5d560df2824df5731100c2584e8ad7a3d7bc2/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2a5d560df2824df5731100c2584e8ad7a3d7bc2/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=c2a5d560df2824df5731100c2584e8ad7a3d7bc2",
        "patch": "@@ -87,12 +87,12 @@ def run_test(self):\n         user, password = get_auth_cookie(self.nodes[0].datadir, self.chain)\n \n         self.log.info(\"Test -stdinrpcpass option\")\n-        assert_equal(BLOCKS, self.nodes[0].cli('-rpcuser={}'.format(user), '-stdinrpcpass', input=password).getblockcount())\n-        assert_raises_process_error(1, 'Incorrect rpcuser or rpcpassword', self.nodes[0].cli('-rpcuser={}'.format(user), '-stdinrpcpass', input='foo').echo)\n+        assert_equal(BLOCKS, self.nodes[0].cli(f'-rpcuser={user}', '-stdinrpcpass', input=password).getblockcount())\n+        assert_raises_process_error(1, 'Incorrect rpcuser or rpcpassword', self.nodes[0].cli(f'-rpcuser={user}', '-stdinrpcpass', input='foo').echo)\n \n         self.log.info(\"Test -stdin and -stdinrpcpass\")\n-        assert_equal(['foo', 'bar'], self.nodes[0].cli('-rpcuser={}'.format(user), '-stdin', '-stdinrpcpass', input=password + '\\nfoo\\nbar').echo())\n-        assert_raises_process_error(1, 'Incorrect rpcuser or rpcpassword', self.nodes[0].cli('-rpcuser={}'.format(user), '-stdin', '-stdinrpcpass', input='foo').echo)\n+        assert_equal(['foo', 'bar'], self.nodes[0].cli(f'-rpcuser={user}', '-stdin', '-stdinrpcpass', input=f'{password}\\nfoo\\nbar').echo())\n+        assert_raises_process_error(1, 'Incorrect rpcuser or rpcpassword', self.nodes[0].cli(f'-rpcuser={user}', '-stdin', '-stdinrpcpass', input='foo').echo)\n \n         self.log.info(\"Test connecting to a non-existing server\")\n         assert_raises_process_error(1, \"Could not connect to the server\", self.nodes[0].cli('-rpcport=1').echo)\n@@ -150,8 +150,8 @@ def run_test(self):\n             w1 = self.nodes[0].get_wallet_rpc(wallets[0])\n             w2 = self.nodes[0].get_wallet_rpc(wallets[1])\n             w3 = self.nodes[0].get_wallet_rpc(wallets[2])\n-            rpcwallet2 = '-rpcwallet={}'.format(wallets[1])\n-            rpcwallet3 = '-rpcwallet={}'.format(wallets[2])\n+            rpcwallet2 = f'-rpcwallet={wallets[1]}'\n+            rpcwallet3 = f'-rpcwallet={wallets[2]}'\n             w1.walletpassphrase(password, self.rpc_timeout)\n             w2.encryptwallet(password)\n             w1.sendtoaddress(w2.getnewaddress(), amounts[1])\n@@ -162,7 +162,7 @@ def run_test(self):\n \n             self.log.info(\"Test -getinfo with multiple wallets and -rpcwallet returns specified wallet balance\")\n             for i in range(len(wallets)):\n-                cli_get_info_string = self.nodes[0].cli('-getinfo', '-rpcwallet={}'.format(wallets[i])).send_cli()\n+                cli_get_info_string = self.nodes[0].cli('-getinfo', f'-rpcwallet={wallets[i]}').send_cli()\n                 cli_get_info = cli_get_info_string_to_dict(cli_get_info_string)\n                 assert 'Balances' not in cli_get_info_string\n                 assert_equal(cli_get_info[\"Wallet\"], wallets[i])\n@@ -296,7 +296,7 @@ def run_test(self):\n         self.log.info(\"Test -version with node stopped\")\n         self.stop_node(0)\n         cli_response = self.nodes[0].cli('-version').send_cli()\n-        assert \"{} RPC client version\".format(self.config['environment']['PACKAGE_NAME']) in cli_response\n+        assert f\"{self.config['environment']['PACKAGE_NAME']} RPC client version\" in cli_response\n \n         self.log.info(\"Test -rpcwait option successfully waits for RPC connection\")\n         self.nodes[0].start()  # start node without RPC connection"
      },
      {
        "sha": "075224c011359be5b8112540fb48295bc0bc0813",
        "filename": "test/functional/interface_http.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2a5d560df2824df5731100c2584e8ad7a3d7bc2/test/functional/interface_http.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2a5d560df2824df5731100c2584e8ad7a3d7bc2/test/functional/interface_http.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_http.py?ref=c2a5d560df2824df5731100c2584e8ad7a3d7bc2",
        "patch": "@@ -24,8 +24,8 @@ def run_test(self):\n         # lowlevel check for http persistent connection #\n         #################################################\n         url = urllib.parse.urlparse(self.nodes[0].url)\n-        authpair = url.username + ':' + url.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        authpair = f'{url.username}:{url.password}'\n+        headers = {\"Authorization\": f\"Basic {str_to_b64str(authpair)}\"}\n \n         conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -42,7 +42,7 @@ def run_test(self):\n         conn.close()\n \n         #same should be if we add keep-alive because this should be the std. behaviour\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair), \"Connection\": \"keep-alive\"}\n+        headers = {\"Authorization\": f\"Basic {str_to_b64str(authpair)}\", \"Connection\": \"keep-alive\"}\n \n         conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -59,7 +59,7 @@ def run_test(self):\n         conn.close()\n \n         #now do the same with \"Connection: close\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair), \"Connection\":\"close\"}\n+        headers = {\"Authorization\": f\"Basic {str_to_b64str(authpair)}\", \"Connection\":\"close\"}\n \n         conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -70,8 +70,8 @@ def run_test(self):\n \n         #node1 (2nd node) is running with disabled keep-alive option\n         urlNode1 = urllib.parse.urlparse(self.nodes[1].url)\n-        authpair = urlNode1.username + ':' + urlNode1.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        authpair = f'{urlNode1.username}:{urlNode1.password}'\n+        headers = {\"Authorization\": f\"Basic {str_to_b64str(authpair)}\"}\n \n         conn = http.client.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n@@ -81,8 +81,8 @@ def run_test(self):\n \n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is on\n         urlNode2 = urllib.parse.urlparse(self.nodes[2].url)\n-        authpair = urlNode2.username + ':' + urlNode2.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        authpair = f'{urlNode2.username}:{urlNode2.password}'\n+        headers = {\"Authorization\": f\"Basic {str_to_b64str(authpair)}\"}\n \n         conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n@@ -94,13 +94,13 @@ def run_test(self):\n         # Check excessive request size\n         conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n-        conn.request('GET', '/' + ('x'*1000), '', headers)\n+        conn.request('GET', f'/{\"x\"*1000}', '', headers)\n         out1 = conn.getresponse()\n         assert_equal(out1.status, http.client.NOT_FOUND)\n \n         conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n-        conn.request('GET', '/' + ('x'*10000), '', headers)\n+        conn.request('GET', f'/{\"x\"*10000}', '', headers)\n         out1 = conn.getresponse()\n         assert_equal(out1.status, http.client.BAD_REQUEST)\n "
      },
      {
        "sha": "47c95f56731b06f62fd5461c1be83ef0a9303abe",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 31,
        "deletions": 31,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2a5d560df2824df5731100c2584e8ad7a3d7bc2/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2a5d560df2824df5731100c2584e8ad7a3d7bc2/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=c2a5d560df2824df5731100c2584e8ad7a3d7bc2",
        "patch": "@@ -57,7 +57,7 @@ def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body=\n             rest_uri += '.hex'\n \n         conn = http.client.HTTPConnection(self.url.hostname, self.url.port)\n-        self.log.debug('%s %s %s', http_method, rest_uri, body)\n+        self.log.debug(f'{http_method} {rest_uri} {body}')\n         if http_method == 'GET':\n             conn.request('GET', rest_uri)\n         elif http_method == 'POST':\n@@ -92,11 +92,11 @@ def run_test(self):\n \n         self.log.info(\"Test the /tx URI\")\n \n-        json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n+        json_obj = self.test_rest_request(f\"/tx/{txid}\")\n         assert_equal(json_obj['txid'], txid)\n \n         # Check hex format response\n-        hex_response = self.test_rest_request(\"/tx/{}\".format(txid), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n+        hex_response = self.test_rest_request(f\"/tx/{txid}\", req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than_or_equal(int(hex_response.getheader('content-length')),\n                                      json_obj['size']*2)\n \n@@ -114,7 +114,7 @@ def run_test(self):\n         assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n \n         # Check chainTip response\n-        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        json_obj = self.test_rest_request(f\"/getutxos/{spending[0]}-{spending[1]}\")\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n         # Make sure there is one utxo\n@@ -123,7 +123,7 @@ def run_test(self):\n \n         self.log.info(\"Query a spent TXO using the /getutxos URI\")\n \n-        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spent))\n+        json_obj = self.test_rest_request(f\"/getutxos/{spent[0]}-{spent[1]}\")\n \n         # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n@@ -136,7 +136,7 @@ def run_test(self):\n \n         self.log.info(\"Query two TXOs using the /getutxos URI\")\n \n-        json_obj = self.test_rest_request(\"/getutxos/{}-{}/{}-{}\".format(*(spending + spent)))\n+        json_obj = self.test_rest_request(f\"/getutxos/{spending[0]}-{spending[1]}/{spent[0]}-{spent[1]}\")\n \n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['bitmap'], \"10\")\n@@ -163,32 +163,32 @@ def run_test(self):\n \n         # do a tx and don't sync\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n-        json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n+        json_obj = self.test_rest_request(f\"/tx/{txid}\")\n         # get the spent output to later check for utxo (should be spent by then)\n         spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n         # get n of 0.1 outpoint\n         n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n         spending = (txid, n)\n \n-        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        json_obj = self.test_rest_request(f\"/getutxos/{spending[0]}-{spending[1]}\")\n         assert_equal(len(json_obj['utxos']), 0)\n \n-        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spending))\n+        json_obj = self.test_rest_request(f\"/getutxos/checkmempool/{spending[0]}-{spending[1]}\")\n         assert_equal(len(json_obj['utxos']), 1)\n \n-        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spent))\n+        json_obj = self.test_rest_request(f\"/getutxos/{spent[0]}-{spent[1]}\")\n         assert_equal(len(json_obj['utxos']), 1)\n \n-        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spent))\n+        json_obj = self.test_rest_request(f\"/getutxos/checkmempool/{spent[0]}-{spent[1]}\")\n         assert_equal(len(json_obj['utxos']), 0)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        json_obj = self.test_rest_request(f\"/getutxos/{spending[0]}-{spending[1]}\")\n         assert_equal(len(json_obj['utxos']), 1)\n \n-        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spending))\n+        json_obj = self.test_rest_request(f\"/getutxos/checkmempool/{spending[0]}-{spending[1]}\")\n         assert_equal(len(json_obj['utxos']), 1)\n \n         # Do some invalid requests\n@@ -197,11 +197,11 @@ def run_test(self):\n         self.test_rest_request(\"/getutxos/checkmempool\", http_method='POST', req_type=ReqType.JSON, status=400, ret_type=RetType.OBJ)\n \n         # Test limits\n-        long_uri = '/'.join([\"{}-{}\".format(txid, n_) for n_ in range(20)])\n-        self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=400, ret_type=RetType.OBJ)\n+        long_uri = '/'.join([f\"{txid}-{n_}\" for n_ in range(20)])\n+        self.test_rest_request(f\"/getutxos/checkmempool/{long_uri}\", http_method='POST', status=400, ret_type=RetType.OBJ)\n \n-        long_uri = '/'.join(['{}-{}'.format(txid, n_) for n_ in range(15)])\n-        self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=200)\n+        long_uri = '/'.join([f'{txid}-{n_}' for n_ in range(15)])\n+        self.test_rest_request(f\"/getutxos/checkmempool/{long_uri}\", http_method='POST', status=200)\n \n         self.nodes[0].generate(1)  # generate block to not affect upcoming tests\n         self.sync_all()\n@@ -215,42 +215,42 @@ def run_test(self):\n \n         # Check result if block is not in the active chain\n         self.nodes[0].invalidateblock(bb_hash)\n-        assert_equal(self.test_rest_request('/headers/1/{}'.format(bb_hash)), [])\n-        self.test_rest_request('/block/{}'.format(bb_hash))\n+        assert_equal(self.test_rest_request(f'/headers/1/{bb_hash}'), [])\n+        self.test_rest_request(f'/block/{bb_hash}')\n         self.nodes[0].reconsiderblock(bb_hash)\n \n         # Check binary format\n-        response = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n+        response = self.test_rest_request(f\"/block/{bb_hash}\", req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_greater_than(int(response.getheader('content-length')), BLOCK_HEADER_SIZE)\n         response_bytes = response.read()\n \n         # Compare with block header\n-        response_header = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n+        response_header = self.test_rest_request(f\"/headers/1/{bb_hash}\", req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_equal(int(response_header.getheader('content-length')), BLOCK_HEADER_SIZE)\n         response_header_bytes = response_header.read()\n         assert_equal(response_bytes[:BLOCK_HEADER_SIZE], response_header_bytes)\n \n         # Check block hex format\n-        response_hex = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n+        response_hex = self.test_rest_request(f\"/block/{bb_hash}\", req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_hex.getheader('content-length')), BLOCK_HEADER_SIZE*2)\n         response_hex_bytes = response_hex.read().strip(b'\\n')\n         assert_equal(response_bytes.hex().encode(), response_hex_bytes)\n \n         # Compare with hex block header\n-        response_header_hex = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n+        response_header_hex = self.test_rest_request(f\"/headers/1/{bb_hash}\", req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), BLOCK_HEADER_SIZE*2)\n         response_header_hex_bytes = response_header_hex.read(BLOCK_HEADER_SIZE*2)\n         assert_equal(response_bytes[:BLOCK_HEADER_SIZE].hex().encode(), response_header_hex_bytes)\n \n         # Check json format\n-        block_json_obj = self.test_rest_request(\"/block/{}\".format(bb_hash))\n+        block_json_obj = self.test_rest_request(f\"/block/{bb_hash}\")\n         assert_equal(block_json_obj['hash'], bb_hash)\n-        assert_equal(self.test_rest_request(\"/blockhashbyheight/{}\".format(block_json_obj['height']))['blockhash'], bb_hash)\n+        assert_equal(self.test_rest_request(f\"/blockhashbyheight/{block_json_obj['height']}\")['blockhash'], bb_hash)\n \n         # Check hex/bin format\n-        resp_hex = self.test_rest_request(\"/blockhashbyheight/{}\".format(block_json_obj['height']), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n+        resp_hex = self.test_rest_request(f\"/blockhashbyheight/{block_json_obj['height']}\", req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_equal(resp_hex.read().decode('utf-8').rstrip(), bb_hash)\n-        resp_bytes = self.test_rest_request(\"/blockhashbyheight/{}\".format(block_json_obj['height']), req_type=ReqType.BIN, ret_type=RetType.BYTES)\n+        resp_bytes = self.test_rest_request(f\"/blockhashbyheight/{block_json_obj['height']}\", req_type=ReqType.BIN, ret_type=RetType.BYTES)\n         blockhash = resp_bytes[::-1].hex()\n         assert_equal(blockhash, bb_hash)\n \n@@ -264,7 +264,7 @@ def run_test(self):\n         self.test_rest_request(\"/blockhashbyheight/\", ret_type=RetType.OBJ, status=400)\n \n         # Compare with json block header\n-        json_obj = self.test_rest_request(\"/headers/1/{}\".format(bb_hash))\n+        json_obj = self.test_rest_request(f\"/headers/1/{bb_hash}\")\n         assert_equal(len(json_obj), 1)  # ensure that there is one header in the json response\n         assert_equal(json_obj[0]['hash'], bb_hash)  # request/response hash should be the same\n \n@@ -276,7 +276,7 @@ def run_test(self):\n         # See if we can get 5 headers in one response\n         self.nodes[1].generate(5)\n         self.sync_all()\n-        json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n+        json_obj = self.test_rest_request(f\"/headers/5/{bb_hash}\")\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n \n         self.log.info(\"Test tx inclusion in the /mempool and /block URIs\")\n@@ -306,13 +306,13 @@ def run_test(self):\n         self.sync_all()\n \n         # Check if the 3 tx show up in the new block\n-        json_obj = self.test_rest_request(\"/block/{}\".format(newblockhash[0]))\n+        json_obj = self.test_rest_request(f\"/block/{newblockhash[0]}\")\n         non_coinbase_txs = {tx['txid'] for tx in json_obj['tx']\n                             if 'coinbase' not in tx['vin'][0]}\n         assert_equal(non_coinbase_txs, set(txs))\n \n         # Check the same but without tx details\n-        json_obj = self.test_rest_request(\"/block/notxdetails/{}\".format(newblockhash[0]))\n+        json_obj = self.test_rest_request(f\"/block/notxdetails/{newblockhash[0]}\")\n         for tx in txs:\n             assert tx in json_obj['tx']\n "
      },
      {
        "sha": "89a7d29b244f486832c49dafeedf9c834a64edea",
        "filename": "test/functional/interface_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2a5d560df2824df5731100c2584e8ad7a3d7bc2/test/functional/interface_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2a5d560df2824df5731100c2584e8ad7a3d7bc2/test/functional/interface_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rpc.py?ref=c2a5d560df2824df5731100c2584e8ad7a3d7bc2",
        "patch": "@@ -16,7 +16,7 @@ def expect_http_status(expected_http_status, expected_rpc_code,\n                        fcn, *args):\n     try:\n         fcn(*args)\n-        raise AssertionError(\"Expected RPC error %d, got none\" % expected_rpc_code)\n+        raise AssertionError(f\"Expected RPC error {expected_rpc_code}, got none\")\n     except JSONRPCException as exc:\n         assert_equal(exc.error[\"code\"], expected_rpc_code)\n         assert_equal(exc.http_status, expected_http_status)"
      },
      {
        "sha": "61b96a8250e6715db8074f2ca4e7aacf2c004ad0",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2a5d560df2824df5731100c2584e8ad7a3d7bc2/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2a5d560df2824df5731100c2584e8ad7a3d7bc2/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=c2a5d560df2824df5731100c2584e8ad7a3d7bc2",
        "patch": "@@ -132,7 +132,7 @@ def setup_zmq_test(self, services, *, recv_timeout=60, sync_blocks=True):\n             socket = self.ctx.socket(zmq.SUB)\n             subscribers.append(ZMQSubscriber(socket, topic.encode()))\n \n-        self.restart_node(0, [\"-zmqpub%s=%s\" % (topic, address) for topic, address in services] +\n+        self.restart_node(0, [f\"-zmqpub{topic}={address}\" for topic, address in services] +\n                              self.extra_args[0])\n \n         for i, sub in enumerate(subscribers):\n@@ -184,7 +184,7 @@ def test_basic(self):\n         rawtx = subs[3]\n \n         num_blocks = 5\n-        self.log.info(\"Generate %(n)d blocks (and %(n)d coinbase txes)\" % {\"n\": num_blocks})\n+        self.log.info(f\"Generate {num_blocks} blocks (and {num_blocks} coinbase txes)\")\n         genhashes = self.nodes[0].generatetoaddress(num_blocks, ADDRESS_BCRT1_UNSPENDABLE)\n \n         self.sync_all()\n@@ -504,7 +504,7 @@ def test_mempool_sync(self):\n             if mempool_sequence is not None:\n                 zmq_mem_seq = mempool_sequence\n                 if zmq_mem_seq > get_raw_seq:\n-                    raise Exception(\"We somehow jumped mempool sequence numbers! zmq_mem_seq: {} > get_raw_seq: {}\".format(zmq_mem_seq, get_raw_seq))\n+                    raise Exception(f\"We somehow jumped mempool sequence numbers! zmq_mem_seq: {zmq_mem_seq} > get_raw_seq: {get_raw_seq}\")\n \n         # 4) Moving forward, we apply the delta to our local view\n         #    remaining txs(5) + 1 rbf(A+R) + 1 block connect + 1 final tx\n@@ -520,7 +520,7 @@ def test_mempool_sync(self):\n                         assert mempool_sequence > expected_sequence\n                         r_gap += mempool_sequence - expected_sequence\n                     else:\n-                        raise Exception(\"WARNING: txhash has unexpected mempool sequence value: {} vs expected {}\".format(mempool_sequence, expected_sequence))\n+                        raise Exception(f\"WARNING: txhash has unexpected mempool sequence value: {mempool_sequence} vs expected {expected_sequence}\")\n             if label == \"A\":\n                 assert hash_str not in mempool_view\n                 mempool_view.add(hash_str)"
      }
    ]
  },
  {
    "sha": "68faa87881f5334b2528db4adc72ec19d94316a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGZhYTg3ODgxZjUzMzRiMjUyOGRiNGFkYzcyZWMxOWQ5NDMxNmEz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-12T07:24:35Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-18T04:39:20Z"
      },
      "message": "test: use f-strings in mining_*.py tests",
      "tree": {
        "sha": "6d738cd9c2f79be08284f8fe33db09fbf638cf50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d738cd9c2f79be08284f8fe33db09fbf638cf50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68faa87881f5334b2528db4adc72ec19d94316a3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEcjvgACgkQLuufXMCV\nJsHhEg/9GaoFs6DN+7dznLmE/rPZIiTRJG7XOdZs9dwI7ikz914Rn8DCrgPHIv6g\nMRWyj5Jpjf8Ewst7tpSY9E+DD+Swdz9SIpW/9gpxcJZqliwfWnK7J844yMM89kbg\n+W34J2ODvaye/0g8LnDgdN6f8J5cEg9Uds9phQBB2Bzp62zLQvbxrK4w2eWPSSaa\naFtBouWzBHIOtkzlXSOl+Op86hF0W/wmeM4HgG1fKJU1rE+RwNdyCytzdZPk97bn\nJFL6uyVw8Ql8JLA15s9b7rrZWdMFhgPpfL6bwtlQv2nIuzqmHkJtEDnykXrQISCs\nJNj08GUGCltLxgrfgks0HBKn1cTWsBsiq/U+E6tkSK+NTuk85TnANHetsL4byi3y\nzp+6LFPYr5ya6TxT5c8jKqZ1YQW3lrK69MSp+BGY1yfA9trsVtn0cSt0fnfDZDY8\nt5ZB1viKSHuDFSmjVA8nvvguqGrBRsn/5H/+nLnVvr92zUYy5+WVR6VdsPfdT7FW\nGz2kO/2J1fi0mkxR8qgeVq3nwI9aRwhHu/P6ItRujjZjqX5JodL2O9pdHvbSHkdH\nSpEYxWdFDFFR9Y/PxQQXdxw84uP1Lpocyi/PH6FGnC5y9VgQRd654sYRt4SDD5Ef\nNKF/mPwVqOnKVnO56uPyD10Syjl69TTJIh49sw5YoLSsTFjqQU0=\n=5NQv\n-----END PGP SIGNATURE-----",
        "payload": "tree 6d738cd9c2f79be08284f8fe33db09fbf638cf50\nparent c2a5d560df2824df5731100c2584e8ad7a3d7bc2\nauthor fanquake <fanquake@gmail.com> 1623482675 +0800\ncommitter fanquake <fanquake@gmail.com> 1629261560 +0800\n\ntest: use f-strings in mining_*.py tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68faa87881f5334b2528db4adc72ec19d94316a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68faa87881f5334b2528db4adc72ec19d94316a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68faa87881f5334b2528db4adc72ec19d94316a3/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2a5d560df2824df5731100c2584e8ad7a3d7bc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2a5d560df2824df5731100c2584e8ad7a3d7bc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2a5d560df2824df5731100c2584e8ad7a3d7bc2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "23711646a2fb304a420974fd8f965fcade779106",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68faa87881f5334b2528db4adc72ec19d94316a3/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68faa87881f5334b2528db4adc72ec19d94316a3/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=68faa87881f5334b2528db4adc72ec19d94316a3",
        "patch": "@@ -65,10 +65,10 @@ def mine_chain(self):\n         assert_equal(mining_info['currentblockweight'], 4000)\n \n         self.log.info('test blockversion')\n-        self.restart_node(0, extra_args=['-mocktime={}'.format(t), '-blockversion=1337'])\n+        self.restart_node(0, extra_args=[f'-mocktime={t}', '-blockversion=1337'])\n         self.connect_nodes(0, 1)\n         assert_equal(1337, self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS)['version'])\n-        self.restart_node(0, extra_args=['-mocktime={}'.format(t)])\n+        self.restart_node(0, extra_args=[f'-mocktime={t}'])\n         self.connect_nodes(0, 1)\n         assert_equal(VERSIONBITS_TOP_BITS + (1 << VERSIONBITS_DEPLOYMENT_TESTDUMMY_BIT), self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS)['version'])\n         self.restart_node(0)"
      }
    ]
  }
]