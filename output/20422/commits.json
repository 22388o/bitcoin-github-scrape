[
  {
    "sha": "4d70d3d7fe29db38a1f9c84a3a6167ca57b38479",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDcwZDNkN2ZlMjlkYjM4YTFmOWM4NGEzYTYxNjdjYTU3YjM4NDc5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-08T06:43:58Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-30T06:54:18Z"
      },
      "message": "build: automatically determine macOS translations\n\nRather than using OSX_QT_TRANSLATIONS which must be manually updated,\nand we forget to update anyway, i.e: #19059, automatically find and copy\navailable translations from the translations directory.",
      "tree": {
        "sha": "54d50615558e5f3b1fd38d9d3622ce4c2e19989e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54d50615558e5f3b1fd38d9d3622ce4c2e19989e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d70d3d7fe29db38a1f9c84a3a6167ca57b38479",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/ElxoACgkQLuufXMCV\nJsEPcBAAqoECKdLoWkuk3FbNcFmCUvV3lUJLxvxjjYw+/TA/EhrrrwdCvztH/BvV\ndvqoes1pwpPlec/PXFJK9MgN2tG0V0VhDRYofS3SY00zNVzQdz8g/4AU5LFax3zr\nkNRlFB61Oo0nUfbuAiYODxOZTmt6RsUdQ6ohnykX0CuBRCl1L5tHGuYA4KEC0mIN\nJUqvKogYi2S9B+SirxP+vdfyNruflZMWC5ysoqJX2m/EsnSMsdDLxGgcVIHB5kwr\nviQar7u7aNHEMTinvR+OAtK2ESuCARWj7StRzF0mUwa7YCnIVvzDvpOlR9c2RAXc\nHpzibFwZedMBZNOwLH4gtvUuV5SzZVZ5KBMt62nog72TPnu3n6Lgma1PWCLty/fU\n11LAhnn4rXWaO/RqjMItyDStg00nZ8D03wtS4T68XjTovO/KaxVl1lfSwpKTr3sK\nslyZWWYBoMkgi58qZETle8H3MpkrZogTI6RdZFjKhoh+k+Clt6SBW4t0UlSxdNLD\nuFsYdZqwAtR/0uCHY5xvbi8ccl/WL/vcVNFguztTd3zpNS4EtFkDw8NQDYhejZ0C\n9qL0LhMeqmT2FTKWw4B7H15MlbfE9caEG/KtKm5fGUmyz+E51j8WJ+jbkJFwCBpL\nhyKNh3YNtZeJ29joRu8SmxvM2y2e2tRuyk55kL76nQyLNXMlHxc=\n=obPw\n-----END PGP SIGNATURE-----",
        "payload": "tree 54d50615558e5f3b1fd38d9d3622ce4c2e19989e\nparent 2e1336dbfe8af43e2960a74c8c7c9aa4650aef0e\nauthor fanquake <fanquake@gmail.com> 1604817838 +0800\ncommitter fanquake <fanquake@gmail.com> 1606719258 +0800\n\nbuild: automatically determine macOS translations\n\nRather than using OSX_QT_TRANSLATIONS which must be manually updated,\nand we forget to update anyway, i.e: #19059, automatically find and copy\navailable translations from the translations directory.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d70d3d7fe29db38a1f9c84a3a6167ca57b38479",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d70d3d7fe29db38a1f9c84a3a6167ca57b38479",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d70d3d7fe29db38a1f9c84a3a6167ca57b38479/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e1336dbfe8af43e2960a74c8c7c9aa4650aef0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1336dbfe8af43e2960a74c8c7c9aa4650aef0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e1336dbfe8af43e2960a74c8c7c9aa4650aef0e"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 23,
      "deletions": 46
    },
    "files": [
      {
        "sha": "f7e2fbbd28b456b973b173afc1ff1e5c2ce25533",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d70d3d7fe29db38a1f9c84a3a6167ca57b38479/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d70d3d7fe29db38a1f9c84a3a6167ca57b38479/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=4d70d3d7fe29db38a1f9c84a3a6167ca57b38479",
        "patch": "@@ -41,7 +41,6 @@ OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n OSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\n-OSX_QT_TRANSLATIONS = ar,bg,ca,cs,da,de,es,fa,fi,fr,gd,gl,he,hu,it,ja,ko,lt,lv,pl,pt,ru,sk,sl,sv,uk,zh_CN,zh_TW\n \n DIST_CONTRIB = \\\n \t       $(top_srcdir)/contrib/linearize/linearize-data.py \\\n@@ -117,7 +116,7 @@ osx_volname:\n \n if BUILD_DARWIN\n $(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING) $(OSX_BACKGROUND_IMAGE)\n-\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -add-qt-tr $(OSX_QT_TRANSLATIONS) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2 -volname $(OSX_VOLNAME)\n+\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2 -volname $(OSX_VOLNAME)\n \n $(OSX_BACKGROUND_IMAGE).png: contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n \tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d 36 -p 36 -o $@\n@@ -151,7 +150,7 @@ $(APP_DIST_DIR)/.DS_Store: $(OSX_DSSTORE_GEN)\n \t$(PYTHON) $< \"$@\" \"$(OSX_VOLNAME)\"\n \n $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n-\tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2\n+\tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -verbose 2\n \n deploydir: $(APP_DIST_EXTRAS)\n endif"
      },
      {
        "sha": "5dd46ccecf88c24be9241798731f2dd71421382c",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 21,
        "deletions": 42,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d70d3d7fe29db38a1f9c84a3a6167ca57b38479/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d70d3d7fe29db38a1f9c84a3a6167ca57b38479/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=4d70d3d7fe29db38a1f9c84a3a6167ca57b38479",
        "patch": "@@ -17,8 +17,9 @@\n #\n \n import subprocess, sys, re, os, shutil, stat, os.path, time\n-from string import Template\n from argparse import ArgumentParser\n+from pathlib import Path\n+from string import Template\n from typing import List, Optional\n \n # This is ported from the original macdeployqt with modifications\n@@ -526,8 +527,7 @@ ap.add_argument(\"-no-strip\", dest=\"strip\", action=\"store_false\", default=True, h\n ap.add_argument(\"-sign\", dest=\"sign\", action=\"store_true\", default=False, help=\"sign .app bundle with codesign tool\")\n ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image; if basename is not specified, a camel-cased version of the app name is used\")\n ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fancy looking disk image using the given plist file with instructions; requires -dmg to work\")\n-ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's resources; the language list must be separated with commas, not with whitespace\")\n-ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translation files\")\n+ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translations. Base translations will automatically be added to the bundle's resources.\")\n ap.add_argument(\"-add-resources\", nargs=\"+\", metavar=\"path\", default=[], help=\"list of additional files or folders to be copied into the bundle's resources; must be the last argument\")\n ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom volume name for dmg\")\n \n@@ -547,15 +547,6 @@ if not os.path.exists(app_bundle):\n app_bundle_name = os.path.splitext(os.path.basename(app_bundle))[0]\n \n # ------------------------------------------------\n-translations_dir = None\n-if config.translations_dir and config.translations_dir[0]:\n-    if os.path.exists(config.translations_dir[0]):\n-        translations_dir = config.translations_dir[0]\n-    else:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find translation dir \\\"{}\\\"\\n\".format(translations_dir))\n-        sys.exit(1)\n-# ------------------------------------------------\n \n for p in config.add_resources:\n     if verbose >= 3:\n@@ -684,26 +675,24 @@ if config.plugins:\n \n # ------------------------------------------------\n \n-if len(config.add_qt_tr) == 0:\n-    add_qt_tr = []\n-else:\n-    if translations_dir is not None:\n-        qt_tr_dir = translations_dir\n-    else:\n-        if deploymentInfo.qtPath is not None:\n-            qt_tr_dir = os.path.join(deploymentInfo.qtPath, \"translations\")\n-        else:\n-            sys.stderr.write(\"Error: Could not find Qt translation path\\n\")\n-            sys.exit(1)\n-    add_qt_tr = [\"qt_{}.qm\".format(lng) for lng in config.add_qt_tr[0].split(\",\")]\n-    for lng_file in add_qt_tr:\n-        p = os.path.join(qt_tr_dir, lng_file)\n-        if verbose >= 3:\n-            print(\"Checking for \\\"{}\\\"...\".format(p))\n-        if not os.path.exists(p):\n-            if verbose >= 1:\n-                sys.stderr.write(\"Error: Could not find Qt translation file \\\"{}\\\"\\n\".format(lng_file))\n-                sys.exit(1)\n+if config.translations_dir:\n+    if not Path(config.translations_dir[0]).exists():\n+        sys.stderr.write(\"Error: Could not find translation dir \\\"{}\\\"\\n\".format(config.translations_dir[0]))\n+        sys.exit(1)\n+\n+if verbose >= 2:\n+    print(\"+ Adding Qt translations +\")\n+\n+translations = Path(config.translations_dir[0])\n+\n+regex = re.compile('qt_[a-z]*(.qm|_[A-Z]*.qm)')\n+\n+lang_files = [x for x in translations.iterdir() if regex.match(x.name)]\n+\n+for file in lang_files:\n+    if verbose >= 3:\n+        print(file.as_posix(), \"->\", os.path.join(applicationBundle.resourcesPath, file.name))\n+    shutil.copy2(file.as_posix(), os.path.join(applicationBundle.resourcesPath, file.name))\n \n # ------------------------------------------------\n \n@@ -715,16 +704,6 @@ with open(os.path.join(applicationBundle.resourcesPath, \"qt.conf\"), \"wb\") as f:\n \n # ------------------------------------------------\n \n-if len(add_qt_tr) > 0 and verbose >= 2:\n-    print(\"+ Adding Qt translations +\")\n-\n-for lng_file in add_qt_tr:\n-    if verbose >= 3:\n-        print(os.path.join(qt_tr_dir, lng_file), \"->\", os.path.join(applicationBundle.resourcesPath, lng_file))\n-    shutil.copy2(os.path.join(qt_tr_dir, lng_file), os.path.join(applicationBundle.resourcesPath, lng_file))\n-\n-# ------------------------------------------------\n-\n if len(config.add_resources) > 0 and verbose >= 2:\n     print(\"+ Adding additional resources +\")\n "
      },
      {
        "sha": "37947dad520856bd9f645f17031b83608b176182",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d70d3d7fe29db38a1f9c84a3a6167ca57b38479/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d70d3d7fe29db38a1f9c84a3a6167ca57b38479/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=4d70d3d7fe29db38a1f9c84a3a6167ca57b38479",
        "patch": "@@ -14,7 +14,6 @@ $(package)_patches+= fix_android_qmake_conf.patch fix_android_jni_static.patch d\n $(package)_patches+= freetype_back_compat.patch drop_lrelease_dependency.patch fix_powerpc_libpng.patch\n $(package)_patches+= fix_mingw_cross_compile.patch fix_qpainter_non_determinism.patch\n \n-# Update OSX_QT_TRANSLATIONS when this is updated\n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=fb5a47799754af73d3bf501fe513342cfe2fc37f64e80df5533f6110e804220c\n "
      }
    ]
  },
  {
    "sha": "464b34d4c328d5109b8dd197da9e7f00d1b843c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjRiMzRkNGMzMjhkNTEwOWI4ZGQxOTdkYTllN2YwMGQxYjg0M2My",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-09T02:50:19Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-30T06:54:19Z"
      },
      "message": "macdeploy: remove codesigning argument",
      "tree": {
        "sha": "6212d21d4769c885f7696c5f6a0f4337e3515f24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6212d21d4769c885f7696c5f6a0f4337e3515f24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/464b34d4c328d5109b8dd197da9e7f00d1b843c2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/ElxsACgkQLuufXMCV\nJsGzXRAAm1aBAdOp0/icJ48I0Grz94JgBG7uWTLykHXJRzt3G5PrPKkSlbLTmEAm\nfI3Vbl9vRf4+KBOQ2GFaz44wdMprEJITpNwsqmQ2SQyZdIhzay1Rcd2N6Kc7sZLR\nZIDGbcdMQsU22kOrm5RcszF5HvxEeJk5gNxOSwe1VOfdyKjuJ9VRSqEzqzlH6xPz\nTffiKbzic8WgVAL4FL9BkTKN+hrqMCiyaVnN7AxqhE6o3vrHhOM7cGnZw5S8KyxY\ndbRpkwuTzu8XeAGjXDrTdmCZimerTsk8rhHcq2Mn9ygaOns/5TEYsgDFqTQY1Gpn\nas2N7hrAPL74Na1yTyc698uthpyapG4V2f6wkWXAznLbCXQfSAMha6/YBhumbNzc\neS+o8w8DyfyhHDcmOZA6ly9YqBsd581Y8F+VVdq9xDD8o642ZeKIlhMYYsGia8/X\nDkgOj7dfDKz7Qf90yAeJia4mJpdUysqNS6OmhKEqY9o9gfZSu1hH4lDpcEwze0Xk\nfA/4gjBd75MVUIKf5bE4MBrs/SJho+NTASRWb+zjhwaifBqqkIVlwo1G5jR/MOl+\n/yl3NbtRS7McZct3ZK2texC9rMuN+DE0GohdYAKCfS9ijeuwmW30WwPVp9Rz3UNZ\nAL2YR1Hgs1EclsDION96CQHm+elofLiT1GXayboeleqLdXk5HjU=\n=4MY8\n-----END PGP SIGNATURE-----",
        "payload": "tree 6212d21d4769c885f7696c5f6a0f4337e3515f24\nparent 4d70d3d7fe29db38a1f9c84a3a6167ca57b38479\nauthor fanquake <fanquake@gmail.com> 1604890219 +0800\ncommitter fanquake <fanquake@gmail.com> 1606719259 +0800\n\nmacdeploy: remove codesigning argument\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464b34d4c328d5109b8dd197da9e7f00d1b843c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/464b34d4c328d5109b8dd197da9e7f00d1b843c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464b34d4c328d5109b8dd197da9e7f00d1b843c2/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d70d3d7fe29db38a1f9c84a3a6167ca57b38479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d70d3d7fe29db38a1f9c84a3a6167ca57b38479",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d70d3d7fe29db38a1f9c84a3a6167ca57b38479"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 1,
      "deletions": 15
    },
    "files": [
      {
        "sha": "80d4fcdcbac2bbf794a101c8708838083530bd51",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 1,
        "deletions": 15,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/464b34d4c328d5109b8dd197da9e7f00d1b843c2/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/464b34d4c328d5109b8dd197da9e7f00d1b843c2/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=464b34d4c328d5109b8dd197da9e7f00d1b843c2",
        "patch": "@@ -514,17 +514,12 @@ ap = ArgumentParser(description=\"\"\"Improved version of macdeployqt.\n Outputs a ready-to-deploy app in a folder \"dist\" and optionally wraps it in a .dmg file.\n Note, that the \"dist\" folder will be deleted before deploying on each run.\n \n-Optionally, Qt translation files (.qm) and additional resources can be added to the bundle.\n-\n-Also optionally signs the .app bundle; set the CODESIGNARGS environment variable to pass arguments\n-to the codesign tool.\n-E.g. CODESIGNARGS='--sign \"Developer ID Application: ...\" --keychain /encrypted/foo.keychain'\"\"\")\n+Optionally, Qt translation files (.qm) and additional resources can be added to the bundle.\"\"\")\n \n ap.add_argument(\"app_bundle\", nargs=1, metavar=\"app-bundle\", help=\"application bundle to be deployed\")\n ap.add_argument(\"-verbose\", type=int, nargs=1, default=[1], metavar=\"<0-3>\", help=\"0 = no output, 1 = error/warning (default), 2 = normal, 3 = debug\")\n ap.add_argument(\"-no-plugins\", dest=\"plugins\", action=\"store_false\", default=True, help=\"skip plugin deployment\")\n ap.add_argument(\"-no-strip\", dest=\"strip\", action=\"store_false\", default=True, help=\"don't run 'strip' on the binaries\")\n-ap.add_argument(\"-sign\", dest=\"sign\", action=\"store_true\", default=False, help=\"sign .app bundle with codesign tool\")\n ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image; if basename is not specified, a camel-cased version of the app name is used\")\n ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fancy looking disk image using the given plist file with instructions; requires -dmg to work\")\n ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translations. Base translations will automatically be added to the bundle's resources.\")\n@@ -718,15 +713,6 @@ for p in config.add_resources:\n \n # ------------------------------------------------\n \n-if config.sign and 'CODESIGNARGS' not in os.environ:\n-    print(\"You must set the CODESIGNARGS environment variable. Skipping signing.\")\n-elif config.sign:\n-    if verbose >= 1:\n-        print(\"Code-signing app bundle {}\".format(target))\n-    subprocess.check_call(\"codesign --force {} {}\".format(os.environ['CODESIGNARGS'], target), shell=True)\n-\n-# ------------------------------------------------\n-\n if config.dmg is not None:\n \n     def runHDIUtil(verb: str, image_basename: str, **kwargs) -> int:"
      }
    ]
  },
  {
    "sha": "827d382aa79d503470cc7abb0000cc365db06f12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjdkMzgyYWE3OWQ1MDM0NzBjYzdhYmIwMDAwY2MzNjVkYjA2ZjEy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-09T02:51:20Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-30T06:54:19Z"
      },
      "message": "macdeploy: remove add-resources argument",
      "tree": {
        "sha": "abae20f2d45d97b259dc96ac129cd3b8a4ddb596",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abae20f2d45d97b259dc96ac129cd3b8a4ddb596"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/827d382aa79d503470cc7abb0000cc365db06f12",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/ElxsACgkQLuufXMCV\nJsFrQw/+Mkytmuz8U5D7yLIa62vjBKHpas/ypcwS+OeQk2lGeJ4mXhW5ygmZTwM3\nL3uONK3HBuvIf6/9SlE0BjGWjQ96Pd8F3irDGde1uo5huGBGBce1VFvrLCcOajGo\nPi9eafEq1t5QmGDkt29/0AvvjmWDOiEkFiY4eBIURuPDvAaYGEgM4CQhRrbS+dmg\nGRfSbgLXw5blxr/8biFzj5XpUmr9rIap06ArhsMcDP89YfkSlRfjiYn3Ak9qv4Pl\npN2sIM66OkcO5VmQVqX/F3qB+r2OPRzIQBR1pSff3hEQvm9qcYXGULFXwrMweKQk\nGMrj1ujRNk6FY2M2QYWags7PtOYz0JV4Cu8Paf+vjjnspw1bjNIbdVJLnMIdN6g0\nO24vSzMyx3Oo3jX/WRWZsp2Bfat0l/z96fGMuPG7Zl1k89D+qrUffIS6wB8CtMOg\nJkvAlenaRwEq2j1d7mQ2hqC6Tk9D9v9UwSIPnecRe8Ex6g0df1cnawYyEhK+CLFq\ndE0E6ep7It6CvfPqhqVyfQgEQ6zcD4RJHs3b2EaBWavnb4K4xtCUhmNvVEnkgZge\njC8XajDjeNBZwQ4pvmz+JUm2vb5vfwVPh2clkN1OFRD8MOsUdLl0Zp8/Xk2C71VV\nV3AXBrX9gAqDAWK7CWb/S1c4gx2gwmqJ+aHYhgpVU7cVkXZWUow=\n=Mpvq\n-----END PGP SIGNATURE-----",
        "payload": "tree abae20f2d45d97b259dc96ac129cd3b8a4ddb596\nparent 464b34d4c328d5109b8dd197da9e7f00d1b843c2\nauthor fanquake <fanquake@gmail.com> 1604890280 +0800\ncommitter fanquake <fanquake@gmail.com> 1606719259 +0800\n\nmacdeploy: remove add-resources argument\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/827d382aa79d503470cc7abb0000cc365db06f12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/827d382aa79d503470cc7abb0000cc365db06f12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/827d382aa79d503470cc7abb0000cc365db06f12/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "464b34d4c328d5109b8dd197da9e7f00d1b843c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464b34d4c328d5109b8dd197da9e7f00d1b843c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/464b34d4c328d5109b8dd197da9e7f00d1b843c2"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 1,
      "deletions": 26
    },
    "files": [
      {
        "sha": "5ceceda101d579d9645ff9b4e7f30a1d65a241e7",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 1,
        "deletions": 26,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827d382aa79d503470cc7abb0000cc365db06f12/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827d382aa79d503470cc7abb0000cc365db06f12/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=827d382aa79d503470cc7abb0000cc365db06f12",
        "patch": "@@ -514,7 +514,7 @@ ap = ArgumentParser(description=\"\"\"Improved version of macdeployqt.\n Outputs a ready-to-deploy app in a folder \"dist\" and optionally wraps it in a .dmg file.\n Note, that the \"dist\" folder will be deleted before deploying on each run.\n \n-Optionally, Qt translation files (.qm) and additional resources can be added to the bundle.\"\"\")\n+Optionally, Qt translation files (.qm) can be added to the bundle.\"\"\")\n \n ap.add_argument(\"app_bundle\", nargs=1, metavar=\"app-bundle\", help=\"application bundle to be deployed\")\n ap.add_argument(\"-verbose\", type=int, nargs=1, default=[1], metavar=\"<0-3>\", help=\"0 = no output, 1 = error/warning (default), 2 = normal, 3 = debug\")\n@@ -523,7 +523,6 @@ ap.add_argument(\"-no-strip\", dest=\"strip\", action=\"store_false\", default=True, h\n ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image; if basename is not specified, a camel-cased version of the app name is used\")\n ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fancy looking disk image using the given plist file with instructions; requires -dmg to work\")\n ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translations. Base translations will automatically be added to the bundle's resources.\")\n-ap.add_argument(\"-add-resources\", nargs=\"+\", metavar=\"path\", default=[], help=\"list of additional files or folders to be copied into the bundle's resources; must be the last argument\")\n ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom volume name for dmg\")\n \n config = ap.parse_args()\n@@ -543,16 +542,6 @@ app_bundle_name = os.path.splitext(os.path.basename(app_bundle))[0]\n \n # ------------------------------------------------\n \n-for p in config.add_resources:\n-    if verbose >= 3:\n-        print(\"Checking for \\\"%s\\\"...\" % p)\n-    if not os.path.exists(p):\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find additional resource file \\\"{}\\\"\\n\".format(p))\n-        sys.exit(1)\n-\n-# ------------------------------------------------\n-\n if len(config.fancy) == 1:\n     if verbose >= 3:\n         print(\"Fancy: Importing plistlib...\")\n@@ -699,20 +688,6 @@ with open(os.path.join(applicationBundle.resourcesPath, \"qt.conf\"), \"wb\") as f:\n \n # ------------------------------------------------\n \n-if len(config.add_resources) > 0 and verbose >= 2:\n-    print(\"+ Adding additional resources +\")\n-\n-for p in config.add_resources:\n-    t = os.path.join(applicationBundle.resourcesPath, os.path.basename(p))\n-    if verbose >= 3:\n-        print(p, \"->\", t)\n-    if os.path.isdir(p):\n-        shutil.copytree(p, t, symlinks=True)\n-    else:\n-        shutil.copy2(p, t)\n-\n-# ------------------------------------------------\n-\n if config.dmg is not None:\n \n     def runHDIUtil(verb: str, image_basename: str, **kwargs) -> int:"
      }
    ]
  },
  {
    "sha": "0ab4018c1217f82dffd65e973d9cccf13af2ef50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWI0MDE4YzEyMTdmODJkZmZkNjVlOTczZDljY2NmMTNhZjJlZjUw",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-09T03:10:39Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-30T06:54:19Z"
      },
      "message": "macdeploy: have a single level of logging output\n\n4 different levels of verbosity is overkill for a fairly simple script, which\nwas always being run at 2 in any case.",
      "tree": {
        "sha": "b55c65ebd5a6ed68d8e9a93020c1ae8595b83317",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b55c65ebd5a6ed68d8e9a93020c1ae8595b83317"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ab4018c1217f82dffd65e973d9cccf13af2ef50",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/ElxsACgkQLuufXMCV\nJsFcvRAAqw8CtNKe6/dPl8BZDOFzPL0BQoWJB3KmGavGRcaE+lZ77tlniRTUf8F8\ncD6DEgI1AVsqLAIWrrwCY5xRlWFV5AiTtOe5Qrk2T0Bnb5zHxlPwrVkBSylLpeXp\nsqjkkasLRnotfXWZg333lSAVRL/PWgNYBUvTYu9uwU+mdF0zfJqBFGUy19/AJBnA\nhZw+1bzsgIxTd761fLiq2W5+PchvUXAX83ak29MWc+e1SgdqfigY6hyRvkVhsWAR\nVlrMUVbxCMJdfbJUCCVpcytRz3+bAfZPHcX7qqsLEMap9AFpfTO8W4onrIFgUbH9\n2su4KQJ8mdScIO26Nu+K/8rcc5dDmg05tqikbNtxFND5Wp9l51rh9vcrn0ry3pEp\no5H1uAxFRcI+njl7/DFOPfTJA0re26ikEiG0Zjm1+PD0U/+YllbZkm6CCLSMK2TB\nonnw4rBbcC4xMmSPtKoM5badDiw2GCfRTey8dnVzMQZPEjEpwKaPAoaZJS0MSBou\nFK5XHP60Lf4Bf9i1Cy6VZcqsFOOxof3OHO8VAogQEPns7TU4/PnPW3p9gMLiyJYi\nVTPMhuofpgBj4j1GsFADffxnWQux1/cha7oQ5rq+7kammxRMpciE1L7KZ9Q/2dDA\nZTxeh2U26pqh2H++hnoDv1wpqroqKRwKnpRDRe0ladDS9Th7lY8=\n=/hV2\n-----END PGP SIGNATURE-----",
        "payload": "tree b55c65ebd5a6ed68d8e9a93020c1ae8595b83317\nparent 827d382aa79d503470cc7abb0000cc365db06f12\nauthor fanquake <fanquake@gmail.com> 1604891439 +0800\ncommitter fanquake <fanquake@gmail.com> 1606719259 +0800\n\nmacdeploy: have a single level of logging output\n\n4 different levels of verbosity is overkill for a fairly simple script, which\nwas always being run at 2 in any case.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ab4018c1217f82dffd65e973d9cccf13af2ef50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ab4018c1217f82dffd65e973d9cccf13af2ef50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ab4018c1217f82dffd65e973d9cccf13af2ef50/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "827d382aa79d503470cc7abb0000cc365db06f12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/827d382aa79d503470cc7abb0000cc365db06f12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/827d382aa79d503470cc7abb0000cc365db06f12"
      }
    ],
    "stats": {
      "total": 141,
      "additions": 57,
      "deletions": 84
    },
    "files": [
      {
        "sha": "0bef64ece89ccf163d012ebc8ee24b8bb128a4a4",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ab4018c1217f82dffd65e973d9cccf13af2ef50/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ab4018c1217f82dffd65e973d9cccf13af2ef50/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=0ab4018c1217f82dffd65e973d9cccf13af2ef50",
        "patch": "@@ -116,7 +116,7 @@ osx_volname:\n \n if BUILD_DARWIN\n $(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING) $(OSX_BACKGROUND_IMAGE)\n-\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2 -volname $(OSX_VOLNAME)\n+\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -volname $(OSX_VOLNAME)\n \n $(OSX_BACKGROUND_IMAGE).png: contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n \tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d 36 -p 36 -o $@\n@@ -150,7 +150,7 @@ $(APP_DIST_DIR)/.DS_Store: $(OSX_DSSTORE_GEN)\n \t$(PYTHON) $< \"$@\" \"$(OSX_VOLNAME)\"\n \n $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n-\tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -verbose 2\n+\tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR)\n \n deploydir: $(APP_DIST_EXTRAS)\n endif"
      },
      {
        "sha": "effcf6dc94056c911c7241f73d5aa90d4d645740",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 55,
        "deletions": 82,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ab4018c1217f82dffd65e973d9cccf13af2ef50/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ab4018c1217f82dffd65e973d9cccf13af2ef50/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=0ab4018c1217f82dffd65e973d9cccf13af2ef50",
        "patch": "@@ -194,16 +194,15 @@ class DeploymentInfo(object):\n         return False\n \n def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Inspecting with otool: \" + binaryPath)\n     otoolbin=os.getenv(\"OTOOL\", \"otool\")\n     otool = subprocess.Popen([otoolbin, \"-L\", binaryPath], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n     o_stdout, o_stderr = otool.communicate()\n     if otool.returncode != 0:\n-        if verbose >= 1:\n-            sys.stderr.write(o_stderr)\n-            sys.stderr.flush()\n-            raise RuntimeError(\"otool failed with return code {}\".format(otool.returncode))\n+        sys.stderr.write(o_stderr)\n+        sys.stderr.flush()\n+        raise RuntimeError(\"otool failed with return code {}\".format(otool.returncode))\n \n     otoolLines = o_stdout.split(\"\\n\")\n     otoolLines.pop(0) # First line is the inspected binary\n@@ -215,7 +214,7 @@ def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n         line = line.replace(\"@loader_path\", os.path.dirname(binaryPath))\n         info = FrameworkInfo.fromOtoolLibraryLine(line.strip())\n         if info is not None:\n-            if verbose >= 3:\n+            if verbose:\n                 print(\"Found framework:\")\n                 print(info)\n             libraries.append(info)\n@@ -227,23 +226,23 @@ def runInstallNameTool(action: str, *args):\n     subprocess.check_call([installnametoolbin, \"-\"+action] + list(args))\n \n def changeInstallName(oldName: str, newName: str, binaryPath: str, verbose: int):\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Using install_name_tool:\")\n         print(\" in\", binaryPath)\n         print(\" change reference\", oldName)\n         print(\" to\", newName)\n     runInstallNameTool(\"change\", oldName, newName, binaryPath)\n \n def changeIdentification(id: str, binaryPath: str, verbose: int):\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Using install_name_tool:\")\n         print(\" change identification in\", binaryPath)\n         print(\" to\", id)\n     runInstallNameTool(\"id\", id, binaryPath)\n \n def runStrip(binaryPath: str, verbose: int):\n     stripbin=os.getenv(\"STRIP\", \"strip\")\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Using strip:\")\n         print(\" stripped\", binaryPath)\n     subprocess.check_call([stripbin, \"-x\", binaryPath])\n@@ -267,7 +266,7 @@ def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional\n         os.makedirs(toDir)\n     \n     shutil.copy2(fromPath, toPath)\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Copied:\", fromPath)\n         print(\" to:\", toPath)\n \n@@ -281,13 +280,12 @@ def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional\n         linkto = framework.version\n         if not os.path.exists(linkfrom):\n             os.symlink(linkto, linkfrom)\n-            if verbose >= 2:\n-                print(\"Linked:\", linkfrom, \"->\", linkto)\n+            print(\"Linked:\", linkfrom, \"->\", linkto)\n         fromResourcesDir = framework.sourceResourcesDirectory\n         if os.path.exists(fromResourcesDir):\n             toResourcesDir = os.path.join(path, framework.destinationResourcesDirectory)\n             shutil.copytree(fromResourcesDir, toResourcesDir, symlinks=True)\n-            if verbose >= 3:\n+            if verbose:\n                 print(\"Copied resources:\", fromResourcesDir)\n                 print(\" to:\", toResourcesDir)\n         fromContentsDir = framework.sourceVersionContentsDirectory\n@@ -296,15 +294,15 @@ def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional\n         if os.path.exists(fromContentsDir):\n             toContentsDir = os.path.join(path, framework.destinationVersionContentsDirectory)\n             shutil.copytree(fromContentsDir, toContentsDir, symlinks=True)\n-            if verbose >= 3:\n+            if verbose:\n                 print(\"Copied Contents:\", fromContentsDir)\n                 print(\" to:\", toContentsDir)\n     elif framework.frameworkName.startswith(\"libQtGui\"): # Copy qt_menu.nib (applies to non-framework layout)\n         qtMenuNibSourcePath = os.path.join(framework.frameworkDirectory, \"Resources\", \"qt_menu.nib\")\n         qtMenuNibDestinationPath = os.path.join(path, \"Contents\", \"Resources\", \"qt_menu.nib\")\n         if os.path.exists(qtMenuNibSourcePath) and not os.path.exists(qtMenuNibDestinationPath):\n             shutil.copytree(qtMenuNibSourcePath, qtMenuNibDestinationPath, symlinks=True)\n-            if verbose >= 3:\n+            if verbose:\n                 print(\"Copied for libQtGui:\", qtMenuNibSourcePath)\n                 print(\" to:\", qtMenuNibDestinationPath)\n     \n@@ -318,16 +316,14 @@ def deployFrameworks(frameworks: List[FrameworkInfo], bundlePath: str, binaryPat\n         framework = frameworks.pop(0)\n         deploymentInfo.deployedFrameworks.append(framework.frameworkName)\n         \n-        if verbose >= 2:\n-            print(\"Processing\", framework.frameworkName, \"...\")\n+        print(\"Processing\", framework.frameworkName, \"...\")\n         \n         # Get the Qt path from one of the Qt frameworks\n         if deploymentInfo.qtPath is None and framework.isQtFramework():\n             deploymentInfo.detectQtPath(framework.frameworkDirectory)\n         \n         if framework.installName.startswith(\"@executable_path\") or framework.installName.startswith(bundlePath):\n-            if verbose >= 2:\n-                print(framework.frameworkName, \"already deployed, skipping.\")\n+            print(framework.frameworkName, \"already deployed, skipping.\")\n             continue\n         \n         # install_name_tool the new id into the binary\n@@ -358,7 +354,7 @@ def deployFrameworks(frameworks: List[FrameworkInfo], bundlePath: str, binaryPat\n \n def deployFrameworksForAppBundle(applicationBundle: ApplicationBundleInfo, strip: bool, verbose: int) -> DeploymentInfo:\n     frameworks = getFrameworks(applicationBundle.binaryPath, verbose)\n-    if len(frameworks) == 0 and verbose >= 1:\n+    if len(frameworks) == 0:\n         print(\"Warning: Could not find any external frameworks to deploy in {}.\".format(applicationBundle.path))\n         return DeploymentInfo()\n     else:\n@@ -478,8 +474,7 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n             plugins.append((pluginDirectory, pluginName))\n     \n     for pluginDirectory, pluginName in plugins:\n-        if verbose >= 2:\n-            print(\"Processing plugin\", os.path.join(pluginDirectory, pluginName), \"...\")\n+        print(\"Processing plugin\", os.path.join(pluginDirectory, pluginName), \"...\")\n         \n         sourcePath = os.path.join(deploymentInfo.pluginPath, pluginDirectory, pluginName)\n         destinationDirectory = os.path.join(appBundleInfo.pluginPath, pluginDirectory)\n@@ -488,7 +483,7 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n         \n         destinationPath = os.path.join(destinationDirectory, pluginName)\n         shutil.copy2(sourcePath, destinationPath)\n-        if verbose >= 3:\n+        if verbose:\n             print(\"Copied:\", sourcePath)\n             print(\" to:\", destinationPath)\n         \n@@ -517,7 +512,7 @@ Note, that the \"dist\" folder will be deleted before deploying on each run.\n Optionally, Qt translation files (.qm) can be added to the bundle.\"\"\")\n \n ap.add_argument(\"app_bundle\", nargs=1, metavar=\"app-bundle\", help=\"application bundle to be deployed\")\n-ap.add_argument(\"-verbose\", type=int, nargs=1, default=[1], metavar=\"<0-3>\", help=\"0 = no output, 1 = error/warning (default), 2 = normal, 3 = debug\")\n+ap.add_argument(\"-verbose\", nargs=\"?\", const=True, help=\"Output additional debugging information\")\n ap.add_argument(\"-no-plugins\", dest=\"plugins\", action=\"store_false\", default=True, help=\"skip plugin deployment\")\n ap.add_argument(\"-no-strip\", dest=\"strip\", action=\"store_false\", default=True, help=\"don't run 'strip' on the binaries\")\n ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image; if basename is not specified, a camel-cased version of the app name is used\")\n@@ -527,45 +522,41 @@ ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom\n \n config = ap.parse_args()\n \n-verbose = config.verbose[0]\n+verbose = config.verbose\n \n # ------------------------------------------------\n \n app_bundle = config.app_bundle[0]\n \n if not os.path.exists(app_bundle):\n-    if verbose >= 1:\n-        sys.stderr.write(\"Error: Could not find app bundle \\\"{}\\\"\\n\".format(app_bundle))\n+    sys.stderr.write(\"Error: Could not find app bundle \\\"{}\\\"\\n\".format(app_bundle))\n     sys.exit(1)\n \n app_bundle_name = os.path.splitext(os.path.basename(app_bundle))[0]\n \n # ------------------------------------------------\n \n if len(config.fancy) == 1:\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Fancy: Importing plistlib...\")\n     try:\n         import plistlib\n     except ImportError:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not import plistlib which is required for fancy disk images.\\n\")\n+        sys.stderr.write(\"Error: Could not import plistlib which is required for fancy disk images.\\n\")\n         sys.exit(1)\n     \n     p = config.fancy[0]\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Fancy: Loading \\\"{}\\\"...\".format(p))\n     if not os.path.exists(p):\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n+        sys.stderr.write(\"Error: Could not find fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n         sys.exit(1)\n     \n     try:\n         with open(p, 'rb') as fp:\n             fancy = plistlib.load(fp, fmt=plistlib.FMT_XML)\n     except:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not parse fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n+        sys.stderr.write(\"Error: Could not parse fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n         sys.exit(1)\n     \n     try:\n@@ -578,19 +569,17 @@ if len(config.fancy) == 1:\n             for key, value in fancy[\"items_position\"].items():\n                 assert isinstance(value, list) and len(value) == 2 and isinstance(value[0], int) and isinstance(value[1], int)\n     except:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Bad format of fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n+        sys.stderr.write(\"Error: Bad format of fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n         sys.exit(1)\n     \n     if \"background_picture\" in fancy:\n         bp = fancy[\"background_picture\"]\n-        if verbose >= 3:\n+        if verbose:\n             print(\"Fancy: Resolving background picture \\\"{}\\\"...\".format(bp))\n         if not os.path.exists(bp):\n             bp = os.path.join(os.path.dirname(p), bp)\n             if not os.path.exists(bp):\n-                if verbose >= 1:\n-                    sys.stderr.write(\"Error: Could not find background picture at \\\"{}\\\" or \\\"{}\\\"\\n\".format(fancy[\"background_picture\"], bp))\n+                sys.stderr.write(\"Error: Could not find background picture at \\\"{}\\\" or \\\"{}\\\"\\n\".format(fancy[\"background_picture\"], bp))\n                 sys.exit(1)\n             else:\n                 fancy[\"background_picture\"] = bp\n@@ -600,8 +589,7 @@ else:\n # ------------------------------------------------\n \n if os.path.exists(\"dist\"):\n-    if verbose >= 2:\n-        print(\"+ Removing old dist folder +\")\n+    print(\"+ Removing old dist folder +\")\n     \n     shutil.rmtree(\"dist\")\n \n@@ -616,9 +604,8 @@ else:\n \n target = os.path.join(\"dist\", \"Bitcoin-Qt.app\")\n \n-if verbose >= 2:\n-    print(\"+ Copying source bundle +\")\n-if verbose >= 3:\n+print(\"+ Copying source bundle +\")\n+if verbose:\n     print(app_bundle, \"->\", target)\n \n os.mkdir(\"dist\")\n@@ -628,33 +615,28 @@ applicationBundle = ApplicationBundleInfo(target)\n \n # ------------------------------------------------\n \n-if verbose >= 2:\n-    print(\"+ Deploying frameworks +\")\n+print(\"+ Deploying frameworks +\")\n \n try:\n     deploymentInfo = deployFrameworksForAppBundle(applicationBundle, config.strip, verbose)\n     if deploymentInfo.qtPath is None:\n         deploymentInfo.qtPath = os.getenv(\"QTDIR\", None)\n         if deploymentInfo.qtPath is None:\n-            if verbose >= 1:\n-                sys.stderr.write(\"Warning: Could not detect Qt's path, skipping plugin deployment!\\n\")\n+            sys.stderr.write(\"Warning: Could not detect Qt's path, skipping plugin deployment!\\n\")\n             config.plugins = False\n except RuntimeError as e:\n-    if verbose >= 1:\n-        sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n+    sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n     sys.exit(1)\n \n # ------------------------------------------------\n \n if config.plugins:\n-    if verbose >= 2:\n-        print(\"+ Deploying plugins +\")\n+    print(\"+ Deploying plugins +\")\n     \n     try:\n         deployPlugins(applicationBundle, deploymentInfo, config.strip, verbose)\n     except RuntimeError as e:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n+        sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n         sys.exit(1)\n \n # ------------------------------------------------\n@@ -664,8 +646,7 @@ if config.translations_dir:\n         sys.stderr.write(\"Error: Could not find translation dir \\\"{}\\\"\\n\".format(config.translations_dir[0]))\n         sys.exit(1)\n \n-if verbose >= 2:\n-    print(\"+ Adding Qt translations +\")\n+print(\"+ Adding Qt translations +\")\n \n translations = Path(config.translations_dir[0])\n \n@@ -674,14 +655,13 @@ regex = re.compile('qt_[a-z]*(.qm|_[A-Z]*.qm)')\n lang_files = [x for x in translations.iterdir() if regex.match(x.name)]\n \n for file in lang_files:\n-    if verbose >= 3:\n+    if verbose:\n         print(file.as_posix(), \"->\", os.path.join(applicationBundle.resourcesPath, file.name))\n     shutil.copy2(file.as_posix(), os.path.join(applicationBundle.resourcesPath, file.name))\n \n # ------------------------------------------------\n \n-if verbose >= 2:\n-    print(\"+ Installing qt.conf +\")\n+print(\"+ Installing qt.conf +\")\n \n with open(os.path.join(applicationBundle.resourcesPath, \"qt.conf\"), \"wb\") as f:\n     f.write(qt_conf.encode())\n@@ -696,9 +676,7 @@ if config.dmg is not None:\n             del kwargs[\"capture_stdout\"]\n             run = subprocess.check_output\n         else:\n-            if verbose < 2:\n-                hdiutil_args.append(\"-quiet\")\n-            elif verbose >= 3:\n+            if verbose:\n                 hdiutil_args.append(\"-verbose\")\n             run = subprocess.check_call\n         \n@@ -709,11 +687,10 @@ if config.dmg is not None:\n         \n         return run(hdiutil_args, universal_newlines=True)\n     \n-    if verbose >= 2:\n-        if fancy is None:\n-            print(\"+ Creating .dmg disk image +\")\n-        else:\n-            print(\"+ Preparing .dmg disk image +\")\n+    if fancy is None:\n+        print(\"+ Creating .dmg disk image +\")\n+    else:\n+        print(\"+ Preparing .dmg disk image +\")\n     \n     if config.dmg != \"\":\n         dmg_name = config.dmg\n@@ -727,22 +704,22 @@ if config.dmg is not None:\n         except subprocess.CalledProcessError as e:\n             sys.exit(e.returncode)\n     else:\n-        if verbose >= 3:\n+        if verbose:\n             print(\"Determining size of \\\"dist\\\"...\")\n         size = 0\n         for path, dirs, files in os.walk(\"dist\"):\n             for file in files:\n                 size += os.path.getsize(os.path.join(path, file))\n         size += int(size * 0.15)\n         \n-        if verbose >= 3:\n+        if verbose:\n             print(\"Creating temp image for modification...\")\n         try:\n             runHDIUtil(\"create\", dmg_name + \".temp\", srcfolder=\"dist\", format=\"UDRW\", size=size, volname=volname, ov=True)\n         except subprocess.CalledProcessError as e:\n             sys.exit(e.returncode)\n         \n-        if verbose >= 3:\n+        if verbose:\n             print(\"Attaching temp image...\")\n         try:\n             output = runHDIUtil(\"attach\", dmg_name + \".temp\", readwrite=True, noverify=True, noautoopen=True, capture_stdout=True)\n@@ -753,13 +730,12 @@ if config.dmg is not None:\n         disk_root = m.group(0)\n         disk_name = m.group(1)\n         \n-        if verbose >= 2:\n-            print(\"+ Applying fancy settings +\")\n+        print(\"+ Applying fancy settings +\")\n         \n         if \"background_picture\" in fancy:\n             bg_path = os.path.join(disk_root, \".background\", os.path.basename(fancy[\"background_picture\"]))\n             os.mkdir(os.path.dirname(bg_path))\n-            if verbose >= 3:\n+            if verbose:\n                 print(fancy[\"background_picture\"], \"->\", bg_path)\n             shutil.copy2(fancy[\"background_picture\"], bg_path)\n         else:\n@@ -821,18 +797,16 @@ if config.dmg is not None:\n             params[\"background_commands\"] = bgscript.substitute({\"bgpic\" : os.path.basename(bg_path), \"disk\" : params[\"disk\"]})\n \n         s = appscript.substitute(params)\n-        if verbose >= 2:\n-            print(\"Running AppleScript:\")\n-            print(s)\n+        print(\"Running AppleScript:\")\n+        print(s)\n \n         p = subprocess.Popen(['osascript', '-'], stdin=subprocess.PIPE)\n         p.communicate(input=s.encode('utf-8'))\n         if p.returncode:\n             print(\"Error running osascript.\")\n \n-        if verbose >= 2:\n-            print(\"+ Finalizing .dmg disk image +\")\n-            time.sleep(5)\n+        print(\"+ Finalizing .dmg disk image +\")\n+        time.sleep(5)\n         \n         try:\n             runHDIUtil(\"convert\", dmg_name + \".temp\", format=\"UDBZ\", o=dmg_name + \".dmg\", ov=True)\n@@ -843,7 +817,6 @@ if config.dmg is not None:\n \n # ------------------------------------------------\n \n-if verbose >= 2:\n-    print(\"+ Done +\")\n+print(\"+ Done +\")\n \n sys.exit(0)"
      }
    ]
  },
  {
    "sha": "32347cd56aaae95f3f4c78be9270565285280d72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjM0N2NkNTZhYWFlOTVmM2Y0Yzc4YmU5MjcwNTY1Mjg1MjgwZDcy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-09T03:18:14Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-30T06:54:19Z"
      },
      "message": "macdeploy: assume plistlib is available\n\nWe already require Python 3.5 or later",
      "tree": {
        "sha": "dc8c897c7e314d533ef8ef686549e78d60f33afc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc8c897c7e314d533ef8ef686549e78d60f33afc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32347cd56aaae95f3f4c78be9270565285280d72",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/ElxsACgkQLuufXMCV\nJsFmQBAAuCoeu38rt7SFG3xf3IS6PlDps5LLoq9vaCk03LYg+8T++DjGfyBPwIM3\nateSaQp2vTOi4h7hY2SA1JVZNqhix8YkJs+jksEGcIwUOhSx2ClM6ydNvyAyhmth\npFQA2IoFyJsjRM6GN5TtenFc5UoyKtZt70EJWySF9NMcURuRwJkVQgtx3mdu9ECc\n5kI4sBgcCa3+bmhcsiviiSO7GgrIZw68HHClIW6vimvfGOUn5ramGvkRdg2rIejJ\n7KpKxyRLVR1b63DbnRHgnK5xbCaAKPYTvGh5oywSnb/suqAy+4fJab05hnEG5TXw\njm2c+Wck/+TQhXR+EEAdQkgGDFkpoDCJVDVN51vRhwHFE0dC/kLI+uiFQcHAiD68\nsL1z5iiUrpxJ/T2C/afAigJNHpX/GM7GQXGQP+gJ8bkkaEYQnmD0n3Uj7GrRxh0z\nkaQGAiexAYPDxMwwuAaXtjaY8Hx949b79TQQM+c+yn0ySvw0j6iCYl/zeGCJWb1m\nq4s565Hq9XSc/04lS0zv2ZrfdrTcWTE4yH9c5eEs4tXNI0/OUEhtcuP1MnsRXqoH\nVEHh4kK3D3Py30KWZ9wXxBlRRUC5PrgFGqfGTSO6inYK+RiDzLKr8NPzwUrHaFiw\neSFvpfdwT5gP0+qd6xgs9u70ifphTyMM0NWNmJbT7791ZMMvQBs=\n=8mJC\n-----END PGP SIGNATURE-----",
        "payload": "tree dc8c897c7e314d533ef8ef686549e78d60f33afc\nparent 0ab4018c1217f82dffd65e973d9cccf13af2ef50\nauthor fanquake <fanquake@gmail.com> 1604891894 +0800\ncommitter fanquake <fanquake@gmail.com> 1606719259 +0800\n\nmacdeploy: assume plistlib is available\n\nWe already require Python 3.5 or later\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32347cd56aaae95f3f4c78be9270565285280d72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32347cd56aaae95f3f4c78be9270565285280d72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32347cd56aaae95f3f4c78be9270565285280d72/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ab4018c1217f82dffd65e973d9cccf13af2ef50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ab4018c1217f82dffd65e973d9cccf13af2ef50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ab4018c1217f82dffd65e973d9cccf13af2ef50"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 1,
      "deletions": 7
    },
    "files": [
      {
        "sha": "717d8ddb61472ab1b07cc19ccc9583a6c9e490f6",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32347cd56aaae95f3f4c78be9270565285280d72/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32347cd56aaae95f3f4c78be9270565285280d72/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=32347cd56aaae95f3f4c78be9270565285280d72",
        "patch": "@@ -16,6 +16,7 @@\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n #\n \n+import plistlib\n import subprocess, sys, re, os, shutil, stat, os.path, time\n from argparse import ArgumentParser\n from pathlib import Path\n@@ -537,13 +538,6 @@ app_bundle_name = os.path.splitext(os.path.basename(app_bundle))[0]\n # ------------------------------------------------\n \n if len(config.fancy) == 1:\n-    if verbose:\n-        print(\"Fancy: Importing plistlib...\")\n-    try:\n-        import plistlib\n-    except ImportError:\n-        sys.stderr.write(\"Error: Could not import plistlib which is required for fancy disk images.\\n\")\n-        sys.exit(1)\n     \n     p = config.fancy[0]\n     if verbose:"
      }
    ]
  },
  {
    "sha": "6390a04862c043cd2bdf3610f3bcf9cb5526659f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzkwYTA0ODYyYzA0M2NkMmJkZjM2MTBmM2JjZjljYjU1MjY2NTlm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-09T09:47:21Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-30T06:54:19Z"
      },
      "message": "macdeploy: consolidate .DS_Store generation\n\nRather than two lots of logic doing roughly the same thing, dependent on if\nyou're compiling on Linux or macOS, combine the .DS store generation into\nmacdeployqtplus.\n\nThis also removes the -fancy and -volname options.",
      "tree": {
        "sha": "1078d95bd508587410e9d0ede90a373cc7301c25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1078d95bd508587410e9d0ede90a373cc7301c25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6390a04862c043cd2bdf3610f3bcf9cb5526659f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/ElxsACgkQLuufXMCV\nJsF46xAAvgl5RyYbmTqTzqbOyn+pRdf8FDU5jydSlhES6qc9aKkPREWwjPHIe/j0\nuAtspNzlNZRk/kGitie32h4YodcUpj/D/CLo6gmztWzxCVegUb5Qd4BorU+VhN+H\ns5f6k8ed7tXfg63vvSUgd4Sl/SfhO3ewxzTOO55+STjGtAIwDmjf2S3iE9a5fgbh\nI/sCOZ0SXxk425AUQ6xf5UZpbbSEpu+T/FQMkIIKd1D7dfzppbvlyIiMpyi4ocTX\nebXqOJbtVWRQU+lc0dlGCSMxA6e+iJVSMSxYlRzB726cym1PSCj75UA0X3aOiPgn\nOWVt6GekUATdYhxuUY0rdDdmdJp3+eBClbYmjYOzcLKTm8auu82t1rysWBHKsfV9\nmHst8y+lnhyVKzZU32HldMQiihZnMdgQkms0t76cHLzn9gpDAq+4l2TbvxC/Nzgx\nQa5qwsAr1atcuF8jfr7OEU/KAjDmqBSRIjwExTETnXRnKqsv5nXz7mexwmjHa0BT\nL6paXl8J+fdsp/DOSA6SPHgM+QGQNEerJNyRL/9VIPw6H9BZJKX/B2VVJbBwnfAy\nNWHyQXC3dkJ1OhVl39FO0cOJo9BIRQ4Lh0FCS5Dmrkw269tRzb/Abig9dks1m0Py\nuB4qg+k+QNazUTj7+Oa0RLgoy8n9G3a+ooUnd1XNSWBTOUJLpnY=\n=1SEg\n-----END PGP SIGNATURE-----",
        "payload": "tree 1078d95bd508587410e9d0ede90a373cc7301c25\nparent 32347cd56aaae95f3f4c78be9270565285280d72\nauthor fanquake <fanquake@gmail.com> 1604915241 +0800\ncommitter fanquake <fanquake@gmail.com> 1606719259 +0800\n\nmacdeploy: consolidate .DS_Store generation\n\nRather than two lots of logic doing roughly the same thing, dependent on if\nyou're compiling on Linux or macOS, combine the .DS store generation into\nmacdeployqtplus.\n\nThis also removes the -fancy and -volname options.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6390a04862c043cd2bdf3610f3bcf9cb5526659f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6390a04862c043cd2bdf3610f3bcf9cb5526659f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6390a04862c043cd2bdf3610f3bcf9cb5526659f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32347cd56aaae95f3f4c78be9270565285280d72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32347cd56aaae95f3f4c78be9270565285280d72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32347cd56aaae95f3f4c78be9270565285280d72"
      }
    ],
    "stats": {
      "total": 393,
      "additions": 104,
      "deletions": 289
    },
    "files": [
      {
        "sha": "2b7a775e89e4beca81cf84674159e93f2b308f2a",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6390a04862c043cd2bdf3610f3bcf9cb5526659f/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6390a04862c043cd2bdf3610f3bcf9cb5526659f/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=6390a04862c043cd2bdf3610f3bcf9cb5526659f",
        "patch": "@@ -36,9 +36,7 @@ OSX_DMG = $(OSX_VOLNAME).dmg\n OSX_BACKGROUND_SVG=background.svg\n OSX_BACKGROUND_IMAGE=background.tiff\n OSX_BACKGROUND_IMAGE_DPIS=36 72\n-OSX_DSSTORE_GEN=$(top_srcdir)/contrib/macdeploy/custom_dsstore.py\n OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n-OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n OSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\n \n@@ -58,9 +56,8 @@ WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n   $(top_srcdir)/share/pixmaps/nsis-wizard.bmp \\\n   $(top_srcdir)/doc/README_windows.txt\n \n-OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n+OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_INSTALLER_ICONS) \\\n   $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_SVG) \\\n-  $(OSX_DSSTORE_GEN) \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n \n@@ -116,7 +113,7 @@ osx_volname:\n \n if BUILD_DARWIN\n $(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING) $(OSX_BACKGROUND_IMAGE)\n-\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -volname $(OSX_VOLNAME)\n+\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) $(OSX_VOLNAME) -translations-dir=$(QT_TRANSLATION_DIR) -dmg\n \n $(OSX_BACKGROUND_IMAGE).png: contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n \tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d 36 -p 36 -o $@\n@@ -146,11 +143,8 @@ $(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): $(OSX_BACKGROUND_IMAGE_DPIF\n \t$(MKDIR_P) $(@D)\n \t$(TIFFCP) -c none $(OSX_BACKGROUND_IMAGE_DPIFILES) $@\n \n-$(APP_DIST_DIR)/.DS_Store: $(OSX_DSSTORE_GEN)\n-\t$(PYTHON) $< \"$@\" \"$(OSX_VOLNAME)\"\n-\n $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n-\tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR)\n+\tINSTALLNAMETOOL=$(INSTALLNAMETOOL) OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) $(OSX_VOLNAME) -translations-dir=$(QT_TRANSLATION_DIR)\n \n deploydir: $(APP_DIST_EXTRAS)\n endif"
      },
      {
        "sha": "6c3db2620b8eb6e23ecf7c3c8ae1b51ae855b041",
        "filename": "contrib/macdeploy/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6390a04862c043cd2bdf3610f3bcf9cb5526659f/contrib/macdeploy/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6390a04862c043cd2bdf3610f3bcf9cb5526659f/contrib/macdeploy/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/README.md?ref=6390a04862c043cd2bdf3610f3bcf9cb5526659f",
        "patch": "@@ -6,11 +6,7 @@ The `macdeployqtplus` script should not be run manually. Instead, after building\n make deploy\n ```\n \n-During the deployment process, the disk image window will pop up briefly\n-when the fancy settings are applied. This is normal, please do not interfere,\n-the process will unmount the DMG and cleanup before finishing.\n-\n-When complete, it will have produced `Bitcoin-Qt.dmg`.\n+When complete, it will have produced `Bitcoin-Core.dmg`.\n \n ## SDK Extraction\n \n@@ -111,7 +107,7 @@ broken. Only the compression feature is currently used. Ideally, the creation co\n and `genisoimage` would no longer be necessary.\n \n Background images and other features can be added to DMG files by inserting a\n-`.DS_Store` before creation. This is generated by the script `contrib/macdeploy/custom_dsstore.py`.\n+`.DS_Store` during creation.\n \n As of OS X 10.9 Mavericks, using an Apple-blessed key to sign binaries is a requirement in\n order to satisfy the new Gatekeeper requirements. Because this private key cannot be"
      },
      {
        "sha": "7ab42ea5d4de6c53c0eb9cbb8a41fc712e03b671",
        "filename": "contrib/macdeploy/custom_dsstore.py",
        "status": "removed",
        "additions": 0,
        "deletions": 58,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32347cd56aaae95f3f4c78be9270565285280d72/contrib/macdeploy/custom_dsstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32347cd56aaae95f3f4c78be9270565285280d72/contrib/macdeploy/custom_dsstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/custom_dsstore.py?ref=32347cd56aaae95f3f4c78be9270565285280d72",
        "patch": "@@ -1,58 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2013-2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-from ds_store import DSStore\n-from mac_alias import Alias\n-import sys\n-\n-output_file = sys.argv[1]\n-package_name_ns = sys.argv[2]\n-\n-ds = DSStore.open(output_file, 'w+')\n-ds['.']['bwsp'] = {\n-    'ShowStatusBar': False,\n-    'WindowBounds': '{{300, 280}, {500, 343}}',\n-    'ContainerShowSidebar': False,\n-    'SidebarWidth': 0,\n-    'ShowTabView': False,\n-    'PreviewPaneVisibility': False,\n-    'ShowToolbar': False,\n-    'ShowSidebar': False,\n-    'ShowPathbar': True\n-}\n-\n-icvp = {\n-    'gridOffsetX': 0.0,\n-    'textSize': 12.0,\n-    'viewOptionsVersion': 1,\n-    'backgroundImageAlias': b'\\x00\\x00\\x00\\x00\\x02\\x1e\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd1\\x94\\\\\\xb0H+\\x00\\x05\\x00\\x00\\x00\\x98\\x0fbackground.tiff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\r\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b.background\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x98\\x00\\x0e\\x00 \\x00\\x0f\\x00b\\x00a\\x00c\\x00k\\x00g\\x00r\\x00o\\x00u\\x00n\\x00d\\x00.\\x00t\\x00i\\x00f\\x00f\\x00\\x0f\\x00\\x02\\x00\\x00\\x00\\x12\\x00\\x1c/.background/background.tiff\\x00\\x14\\x01\\x06\\x00\\x00\\x00\\x00\\x01\\x06\\x00\\x02\\x00\\x00\\x0cMacintosh HD\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xce\\x97\\xab\\xc3H+\\x00\\x00\\x01\\x88[\\x88\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02u\\xab\\x8d\\xd1\\x94\\\\\\xb0devrddsk\\xff\\xff\\xff\\xff\\x00\\x00\\t \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07bitcoin\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xce\\x97\\xab\\xc3\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x01\\x00\\x14\\x01\\x88[\\x88\\x00\\x16\\xa9\\t\\x00\\x08\\xfaR\\x00\\x08\\xfaQ\\x00\\x02d\\x8e\\x00\\x0e\\x00\\x02\\x00\\x00\\x00\\x0f\\x00\\x1a\\x00\\x0c\\x00M\\x00a\\x00c\\x00i\\x00n\\x00t\\x00o\\x00s\\x00h\\x00 \\x00H\\x00D\\x00\\x13\\x00\\x01/\\x00\\x00\\x15\\x00\\x02\\x00\\x14\\xff\\xff\\x00\\x00\\xff\\xff\\x00\\x00',\n-    'backgroundColorBlue': 1.0,\n-    'iconSize': 96.0,\n-    'backgroundColorGreen': 1.0,\n-    'arrangeBy': 'none',\n-    'showIconPreview': True,\n-    'gridSpacing': 100.0,\n-    'gridOffsetY': 0.0,\n-    'showItemInfo': False,\n-    'labelOnBottom': True,\n-    'backgroundType': 2,\n-    'backgroundColorRed': 1.0\n-}\n-alias = Alias.from_bytes(icvp['backgroundImageAlias'])\n-alias.volume.name = package_name_ns\n-alias.volume.posix_path = '/Volumes/' + package_name_ns\n-alias.volume.disk_image_alias.target.filename = package_name_ns + '.temp.dmg'\n-alias.volume.disk_image_alias.target.carbon_path = 'Macintosh HD:Users:\\x00bitcoinuser:\\x00Documents:\\x00bitcoin:\\x00bitcoin:\\x00' + package_name_ns + '.temp.dmg'\n-alias.volume.disk_image_alias.target.posix_path = 'Users/bitcoinuser/Documents/bitcoin/bitcoin/' + package_name_ns + '.temp.dmg'\n-alias.target.carbon_path = package_name_ns + ':.background:\\x00background.tiff'\n-icvp['backgroundImageAlias'] = alias.to_bytes()\n-ds['.']['icvp'] = icvp\n-\n-ds['.']['vSrn'] = ('long', 1)\n-\n-ds['Applications']['Iloc'] = (370, 156)\n-ds['Bitcoin-Qt.app']['Iloc'] = (128, 156)\n-\n-ds.flush()\n-ds.close()"
      },
      {
        "sha": "ef277a7f14ad66ecdb8597a865a54b9506fd0ff9",
        "filename": "contrib/macdeploy/fancy.plist",
        "status": "removed",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32347cd56aaae95f3f4c78be9270565285280d72/contrib/macdeploy/fancy.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32347cd56aaae95f3f4c78be9270565285280d72/contrib/macdeploy/fancy.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/fancy.plist?ref=32347cd56aaae95f3f4c78be9270565285280d72",
        "patch": "@@ -1,32 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n-<plist version=\"1.0\">\n-<dict>\n-\t<key>window_bounds</key>\n-\t<array>\n-\t\t<integer>300</integer>\n-\t\t<integer>300</integer>\n-\t\t<integer>800</integer>\n-\t\t<integer>620</integer>\n-\t</array>\n-\t<key>background_picture</key>\n-\t<string>background.tiff</string>\n-\t<key>icon_size</key>\n-\t<integer>96</integer>\n-\t<key>applications_symlink</key>\n-\t<true/>\n-\t<key>items_position</key>\n-\t<dict>\n-\t\t<key>Applications</key>\n-\t\t<array>\n-\t\t\t<integer>370</integer>\n-\t\t\t<integer>156</integer>\n-\t\t</array>\n-\t\t<key>Bitcoin-Qt.app</key>\n-\t\t<array>\n-\t\t\t<integer>128</integer>\n-\t\t\t<integer>156</integer>\n-\t\t</array>\n-\t</dict>\n-</dict>\n-</plist>"
      },
      {
        "sha": "d59e1d6fe5c6bc0e2d6aebf6be34ac953fadf592",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 99,
        "deletions": 184,
        "changes": 283,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6390a04862c043cd2bdf3610f3bcf9cb5526659f/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6390a04862c043cd2bdf3610f3bcf9cb5526659f/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=6390a04862c043cd2bdf3610f3bcf9cb5526659f",
        "patch": "@@ -17,10 +17,11 @@\n #\n \n import plistlib\n-import subprocess, sys, re, os, shutil, stat, os.path, time\n+import subprocess, sys, re, os, shutil, stat, os.path\n from argparse import ArgumentParser\n+from ds_store import DSStore\n+from mac_alias import Alias\n from pathlib import Path\n-from string import Template\n from typing import List, Optional\n \n # This is ported from the original macdeployqt with modifications\n@@ -513,13 +514,12 @@ Note, that the \"dist\" folder will be deleted before deploying on each run.\n Optionally, Qt translation files (.qm) can be added to the bundle.\"\"\")\n \n ap.add_argument(\"app_bundle\", nargs=1, metavar=\"app-bundle\", help=\"application bundle to be deployed\")\n+ap.add_argument(\"appname\", nargs=1, metavar=\"appname\", help=\"name of the app being deployed\")\n ap.add_argument(\"-verbose\", nargs=\"?\", const=True, help=\"Output additional debugging information\")\n ap.add_argument(\"-no-plugins\", dest=\"plugins\", action=\"store_false\", default=True, help=\"skip plugin deployment\")\n ap.add_argument(\"-no-strip\", dest=\"strip\", action=\"store_false\", default=True, help=\"don't run 'strip' on the binaries\")\n-ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image; if basename is not specified, a camel-cased version of the app name is used\")\n-ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fancy looking disk image using the given plist file with instructions; requires -dmg to work\")\n+ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image\")\n ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translations. Base translations will automatically be added to the bundle's resources.\")\n-ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom volume name for dmg\")\n \n config = ap.parse_args()\n \n@@ -533,53 +533,6 @@ if not os.path.exists(app_bundle):\n     sys.stderr.write(\"Error: Could not find app bundle \\\"{}\\\"\\n\".format(app_bundle))\n     sys.exit(1)\n \n-app_bundle_name = os.path.splitext(os.path.basename(app_bundle))[0]\n-\n-# ------------------------------------------------\n-\n-if len(config.fancy) == 1:\n-    \n-    p = config.fancy[0]\n-    if verbose:\n-        print(\"Fancy: Loading \\\"{}\\\"...\".format(p))\n-    if not os.path.exists(p):\n-        sys.stderr.write(\"Error: Could not find fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n-        sys.exit(1)\n-    \n-    try:\n-        with open(p, 'rb') as fp:\n-            fancy = plistlib.load(fp, fmt=plistlib.FMT_XML)\n-    except:\n-        sys.stderr.write(\"Error: Could not parse fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n-        sys.exit(1)\n-    \n-    try:\n-        assert \"window_bounds\" not in fancy or (isinstance(fancy[\"window_bounds\"], list) and len(fancy[\"window_bounds\"]) == 4)\n-        assert \"background_picture\" not in fancy or isinstance(fancy[\"background_picture\"], str)\n-        assert \"icon_size\" not in fancy or isinstance(fancy[\"icon_size\"], int)\n-        assert \"applications_symlink\" not in fancy or isinstance(fancy[\"applications_symlink\"], bool)\n-        if \"items_position\" in fancy:\n-            assert isinstance(fancy[\"items_position\"], dict)\n-            for key, value in fancy[\"items_position\"].items():\n-                assert isinstance(value, list) and len(value) == 2 and isinstance(value[0], int) and isinstance(value[1], int)\n-    except:\n-        sys.stderr.write(\"Error: Bad format of fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n-        sys.exit(1)\n-    \n-    if \"background_picture\" in fancy:\n-        bp = fancy[\"background_picture\"]\n-        if verbose:\n-            print(\"Fancy: Resolving background picture \\\"{}\\\"...\".format(bp))\n-        if not os.path.exists(bp):\n-            bp = os.path.join(os.path.dirname(p), bp)\n-            if not os.path.exists(bp):\n-                sys.stderr.write(\"Error: Could not find background picture at \\\"{}\\\" or \\\"{}\\\"\\n\".format(fancy[\"background_picture\"], bp))\n-                sys.exit(1)\n-            else:\n-                fancy[\"background_picture\"] = bp\n-else:\n-    fancy = None\n-\n # ------------------------------------------------\n \n if os.path.exists(\"dist\"):\n@@ -589,10 +542,7 @@ if os.path.exists(\"dist\"):\n \n # ------------------------------------------------\n \n-if len(config.volname) == 1:\n-    volname = config.volname[0]\n-else:\n-    volname = app_bundle_name\n+appname = config.appname[0]\n \n # ------------------------------------------------\n \n@@ -662,6 +612,50 @@ with open(os.path.join(applicationBundle.resourcesPath, \"qt.conf\"), \"wb\") as f:\n \n # ------------------------------------------------\n \n+print(\"+ Generating .DS_Store +\")\n+\n+output_file = os.path.join(\"dist\", \".DS_Store\")\n+\n+ds = DSStore.open(output_file, 'w+')\n+\n+ds['.']['bwsp'] = {\n+    'WindowBounds': '{{300, 280}, {500, 343}}',\n+    'PreviewPaneVisibility': False,\n+}\n+\n+icvp = {\n+    'gridOffsetX': 0.0,\n+    'textSize': 12.0,\n+    'viewOptionsVersion': 1,\n+    'backgroundImageAlias': b'\\x00\\x00\\x00\\x00\\x02\\x1e\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd1\\x94\\\\\\xb0H+\\x00\\x05\\x00\\x00\\x00\\x98\\x0fbackground.tiff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\r\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b.background\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x98\\x00\\x0e\\x00 \\x00\\x0f\\x00b\\x00a\\x00c\\x00k\\x00g\\x00r\\x00o\\x00u\\x00n\\x00d\\x00.\\x00t\\x00i\\x00f\\x00f\\x00\\x0f\\x00\\x02\\x00\\x00\\x00\\x12\\x00\\x1c/.background/background.tiff\\x00\\x14\\x01\\x06\\x00\\x00\\x00\\x00\\x01\\x06\\x00\\x02\\x00\\x00\\x0cMacintosh HD\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xce\\x97\\xab\\xc3H+\\x00\\x00\\x01\\x88[\\x88\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02u\\xab\\x8d\\xd1\\x94\\\\\\xb0devrddsk\\xff\\xff\\xff\\xff\\x00\\x00\\t \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07bitcoin\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xce\\x97\\xab\\xc3\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x01\\x00\\x14\\x01\\x88[\\x88\\x00\\x16\\xa9\\t\\x00\\x08\\xfaR\\x00\\x08\\xfaQ\\x00\\x02d\\x8e\\x00\\x0e\\x00\\x02\\x00\\x00\\x00\\x0f\\x00\\x1a\\x00\\x0c\\x00M\\x00a\\x00c\\x00i\\x00n\\x00t\\x00o\\x00s\\x00h\\x00 \\x00H\\x00D\\x00\\x13\\x00\\x01/\\x00\\x00\\x15\\x00\\x02\\x00\\x14\\xff\\xff\\x00\\x00\\xff\\xff\\x00\\x00',\n+    'backgroundColorBlue': 1.0,\n+    'iconSize': 96.0,\n+    'backgroundColorGreen': 1.0,\n+    'arrangeBy': 'none',\n+    'showIconPreview': True,\n+    'gridSpacing': 100.0,\n+    'gridOffsetY': 0.0,\n+    'showItemInfo': False,\n+    'labelOnBottom': True,\n+    'backgroundType': 2,\n+    'backgroundColorRed': 1.0\n+}\n+alias = Alias().from_bytes(icvp['backgroundImageAlias'])\n+alias.volume.name = appname\n+alias.volume.posix_path = '/Volumes/' + appname\n+icvp['backgroundImageAlias'] = alias.to_bytes()\n+ds['.']['icvp'] = icvp\n+\n+ds['.']['vSrn'] = ('long', 1)\n+\n+ds['Applications']['Iloc'] = (370, 156)\n+ds['Bitcoin-Qt.app']['Iloc'] = (128, 156)\n+\n+ds.flush()\n+ds.close()\n+\n+# ------------------------------------------------\n+\n if config.dmg is not None:\n \n     def runHDIUtil(verb: str, image_basename: str, **kwargs) -> int:\n@@ -680,134 +674,55 @@ if config.dmg is not None:\n                 hdiutil_args.append(str(value))\n         \n         return run(hdiutil_args, universal_newlines=True)\n-    \n-    if fancy is None:\n-        print(\"+ Creating .dmg disk image +\")\n-    else:\n-        print(\"+ Preparing .dmg disk image +\")\n-    \n-    if config.dmg != \"\":\n-        dmg_name = config.dmg\n-    else:\n-        spl = app_bundle_name.split(\" \")\n-        dmg_name = spl[0] + \"\".join(p.capitalize() for p in spl[1:])\n-    \n-    if fancy is None:\n-        try:\n-            runHDIUtil(\"create\", dmg_name, srcfolder=\"dist\", format=\"UDBZ\", volname=volname, ov=True)\n-        except subprocess.CalledProcessError as e:\n-            sys.exit(e.returncode)\n-    else:\n-        if verbose:\n-            print(\"Determining size of \\\"dist\\\"...\")\n-        size = 0\n-        for path, dirs, files in os.walk(\"dist\"):\n-            for file in files:\n-                size += os.path.getsize(os.path.join(path, file))\n-        size += int(size * 0.15)\n-        \n-        if verbose:\n-            print(\"Creating temp image for modification...\")\n-        try:\n-            runHDIUtil(\"create\", dmg_name + \".temp\", srcfolder=\"dist\", format=\"UDRW\", size=size, volname=volname, ov=True)\n-        except subprocess.CalledProcessError as e:\n-            sys.exit(e.returncode)\n-        \n-        if verbose:\n-            print(\"Attaching temp image...\")\n-        try:\n-            output = runHDIUtil(\"attach\", dmg_name + \".temp\", readwrite=True, noverify=True, noautoopen=True, capture_stdout=True)\n-        except subprocess.CalledProcessError as e:\n-            sys.exit(e.returncode)\n-\n-        m = re.search(r\"/Volumes/(.+$)\", output)\n-        disk_root = m.group(0)\n-        disk_name = m.group(1)\n-        \n-        print(\"+ Applying fancy settings +\")\n-        \n-        if \"background_picture\" in fancy:\n-            bg_path = os.path.join(disk_root, \".background\", os.path.basename(fancy[\"background_picture\"]))\n-            os.mkdir(os.path.dirname(bg_path))\n-            if verbose:\n-                print(fancy[\"background_picture\"], \"->\", bg_path)\n-            shutil.copy2(fancy[\"background_picture\"], bg_path)\n-        else:\n-            bg_path = None\n-        \n-        if fancy.get(\"applications_symlink\", False):\n-            os.symlink(\"/Applications\", os.path.join(disk_root, \"Applications\"))\n-        \n-        # The Python appscript package broke with OSX 10.8 and isn't being fixed.\n-        # So we now build up an AppleScript string and use the osascript command\n-        # to make the .dmg file pretty:\n-        appscript = Template( \"\"\"\n-        on run argv\n-           tell application \"Finder\"\n-             tell disk \"$disk\"\n-                   open\n-                   set current view of container window to icon view\n-                   set toolbar visible of container window to false\n-                   set statusbar visible of container window to false\n-                   set the bounds of container window to {$window_bounds}\n-                   set theViewOptions to the icon view options of container window\n-                   set arrangement of theViewOptions to not arranged\n-                   set icon size of theViewOptions to $icon_size\n-                   $background_commands\n-                   $items_positions\n-                   close -- close/reopen works around a bug...\n-                   open\n-                   update without registering applications\n-                   delay 5\n-                   eject\n-             end tell\n-           end tell\n-        end run\n-        \"\"\")\n-\n-        itemscript = Template('set position of item \"${item}\" of container window to {${position}}')\n-        items_positions = []\n-        if \"items_position\" in fancy:\n-            for name, position in fancy[\"items_position\"].items():\n-                params = { \"item\" : name, \"position\" : \",\".join([str(p) for p in position]) }\n-                items_positions.append(itemscript.substitute(params))\n-\n-        params = {\n-            \"disk\" : volname,\n-            \"window_bounds\" : \"300,300,800,620\",\n-            \"icon_size\" : \"96\",\n-            \"background_commands\" : \"\",\n-            \"items_positions\" : \"\\n                   \".join(items_positions)\n-            }\n-        if \"window_bounds\" in fancy:\n-            params[\"window_bounds\"] = \",\".join([str(p) for p in fancy[\"window_bounds\"]])\n-        if \"icon_size\" in fancy:\n-            params[\"icon_size\"] = str(fancy[\"icon_size\"])\n-        if bg_path is not None:\n-            # Set background file, then call SetFile to make it invisible.\n-            # (note: making it invisible first makes set background picture fail)\n-            bgscript = Template(\"\"\"set background picture of theViewOptions to file \".background:$bgpic\"\n-                   do shell script \"SetFile -a V /Volumes/$disk/.background/$bgpic\" \"\"\")\n-            params[\"background_commands\"] = bgscript.substitute({\"bgpic\" : os.path.basename(bg_path), \"disk\" : params[\"disk\"]})\n-\n-        s = appscript.substitute(params)\n-        print(\"Running AppleScript:\")\n-        print(s)\n-\n-        p = subprocess.Popen(['osascript', '-'], stdin=subprocess.PIPE)\n-        p.communicate(input=s.encode('utf-8'))\n-        if p.returncode:\n-            print(\"Error running osascript.\")\n-\n-        print(\"+ Finalizing .dmg disk image +\")\n-        time.sleep(5)\n-        \n-        try:\n-            runHDIUtil(\"convert\", dmg_name + \".temp\", format=\"UDBZ\", o=dmg_name + \".dmg\", ov=True)\n-        except subprocess.CalledProcessError as e:\n-            sys.exit(e.returncode)\n-        \n-        os.unlink(dmg_name + \".temp.dmg\")\n+\n+    print(\"+ Preparing .dmg disk image +\")\n+\n+    if verbose:\n+        print(\"Determining size of \\\"dist\\\"...\")\n+    size = 0\n+    for path, dirs, files in os.walk(\"dist\"):\n+        for file in files:\n+            size += os.path.getsize(os.path.join(path, file))\n+    size += int(size * 0.15)\n+\n+    if verbose:\n+        print(\"Creating temp image for modification...\")\n+    try:\n+        runHDIUtil(\"create\", appname + \".temp\", srcfolder=\"dist\", format=\"UDRW\", size=size, volname=appname, ov=True)\n+    except subprocess.CalledProcessError as e:\n+        sys.exit(e.returncode)\n+\n+    if verbose:\n+        print(\"Attaching temp image...\")\n+    try:\n+        output = runHDIUtil(\"attach\", appname + \".temp\", readwrite=True, noverify=True, noautoopen=True, capture_stdout=True)\n+    except subprocess.CalledProcessError as e:\n+        sys.exit(e.returncode)\n+\n+    m = re.search(r\"/Volumes/(.+$)\", output)\n+    disk_root = m.group(0)\n+\n+    print(\"+ Applying fancy settings +\")\n+\n+    bg_path = os.path.join(disk_root, \".background\", os.path.basename('background.tiff'))\n+    os.mkdir(os.path.dirname(bg_path))\n+    if verbose:\n+        print('background.tiff', \"->\", bg_path)\n+    shutil.copy2('background.tiff', bg_path)\n+\n+    os.symlink(\"/Applications\", os.path.join(disk_root, \"Applications\"))\n+\n+    print(\"+ Finalizing .dmg disk image +\")\n+\n+    subprocess.run([\"hdiutil\", \"detach\", \"/Volumes/{}\".format(appname)], universal_newlines=True)\n+\n+    try:\n+        runHDIUtil(\"convert\", appname + \".temp\", format=\"UDBZ\", o=appname + \".dmg\", ov=True)\n+    except subprocess.CalledProcessError as e:\n+        print(e)\n+        sys.exit(e.returncode)\n+\n+    os.unlink(appname + \".temp.dmg\")\n \n # ------------------------------------------------\n "
      }
    ]
  },
  {
    "sha": "ccb0325b1bd1cee5a76382a16901dc80ea8f50d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2IwMzI1YjFiZDFjZWU1YTc2MzgyYTE2OTAxZGM4MGVhOGY1MGQ4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-09T09:49:11Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-30T06:54:20Z"
      },
      "message": "macdeploy: move qt_conf to where it's used",
      "tree": {
        "sha": "11b2d0a9b56ef9e7743967a844ef1f63345438ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11b2d0a9b56ef9e7743967a844ef1f63345438ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccb0325b1bd1cee5a76382a16901dc80ea8f50d8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/ElxwACgkQLuufXMCV\nJsHPuw//ZF+LSRB2uAif+7run0I3xYUA/HzGGyBk7teewqs4uDbDWQAOgJe4G8wH\nJuOqf2dnu5e8aioz1/ID2AI38N7vUSIauLc1B3sBI5E3mDkBrPvtgSeZQPnwt6PF\noEgeUg7gqGQBcN8t9m94qG9rxvZl2COEp0pAn4Xq8gKGmQnG+4ZE4nhie6NmRYwf\nuGmpOzsTCQG4YG5F3uyGmqD68Fpk6KB/1v/n60vjS3SiR7xjS4VO93LSyJTBo8iw\nNUFDet205jYcE9C9/LWs/xD/IGykNyCzB0V4sPxtdRHP3bNFzv9/ZpK2XljlJkr7\ndiwSS9J18wg0e4K6d4LBHfWO/MBAv+EHOhVEYKwicZOKOOMbFn7pR8tFaE4vxfk5\nCmCT37RlMRobCXwgoqs99N/1Q1wedHHxhtP7rcNXYDoXMXA+Bzcsitiddp1DRyf5\n++HGaxP9IyPbFDpz78qPs3Z+Q9vxibTdRG7/vLAYgO4AIvnBSp1pLeFFXALAtwM2\nuxtXgvykpkHp0tybrByBlBwxfuj01/BNf37I5Ymq1PSa6LL753zWY4G52y/hjauZ\nJ8Qu/oVnNUcQcTs5LOQIcW8mAlGVBBv8MQRsvIJTJRKkgSW1h0sBwC4aKMXdI7ZO\naKc3AhDcZ9Xl964ATodz7QJbn+yOJZ5oBsTeEMcnVB2QVT+eWJo=\n=uQ7F\n-----END PGP SIGNATURE-----",
        "payload": "tree 11b2d0a9b56ef9e7743967a844ef1f63345438ea\nparent 6390a04862c043cd2bdf3610f3bcf9cb5526659f\nauthor fanquake <fanquake@gmail.com> 1604915351 +0800\ncommitter fanquake <fanquake@gmail.com> 1606719260 +0800\n\nmacdeploy: move qt_conf to where it's used\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb0325b1bd1cee5a76382a16901dc80ea8f50d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccb0325b1bd1cee5a76382a16901dc80ea8f50d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb0325b1bd1cee5a76382a16901dc80ea8f50d8/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6390a04862c043cd2bdf3610f3bcf9cb5526659f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6390a04862c043cd2bdf3610f3bcf9cb5526659f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6390a04862c043cd2bdf3610f3bcf9cb5526659f"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2b744e936a9506415548a7c6cf5e7db084eee89f",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb0325b1bd1cee5a76382a16901dc80ea8f50d8/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb0325b1bd1cee5a76382a16901dc80ea8f50d8/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=ccb0325b1bd1cee5a76382a16901dc80ea8f50d8",
        "patch": "@@ -501,11 +501,6 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n             if dependency.frameworkName not in deploymentInfo.deployedFrameworks:\n                 deployFrameworks([dependency], appBundleInfo.path, destinationPath, strip, verbose, deploymentInfo)\n \n-qt_conf=\"\"\"[Paths]\n-Translations=Resources\n-Plugins=PlugIns\n-\"\"\"\n-\n ap = ArgumentParser(description=\"\"\"Improved version of macdeployqt.\n \n Outputs a ready-to-deploy app in a folder \"dist\" and optionally wraps it in a .dmg file.\n@@ -607,6 +602,11 @@ for file in lang_files:\n \n print(\"+ Installing qt.conf +\")\n \n+qt_conf=\"\"\"[Paths]\n+Translations=Resources\n+Plugins=PlugIns\n+\"\"\"\n+\n with open(os.path.join(applicationBundle.resourcesPath, \"qt.conf\"), \"wb\") as f:\n     f.write(qt_conf.encode())\n "
      }
    ]
  },
  {
    "sha": "adaa26202b965346566b5adff2fc5cee65955dfe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGFhMjYyMDJiOTY1MzQ2NTY2YjVhZGZmMmZjNWNlZTY1OTU1ZGZl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-11T05:16:27Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-30T06:54:20Z"
      },
      "message": "macdeploy: remove existing Bitcoin-Core.dmg if present",
      "tree": {
        "sha": "5db8a461b406d1f70d5f852d629f772526bb54ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5db8a461b406d1f70d5f852d629f772526bb54ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adaa26202b965346566b5adff2fc5cee65955dfe",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/ElxwACgkQLuufXMCV\nJsHBaw//cjiT2ivtO/LhRp8/o34qHV6/4eBl/gpeG24LZZEMBB+wcedyXBKG+uzm\n5npNl/KKCk367iabvIR23Y26tZZDm9waIx4Yl1qZUM9YOy7oxrbLe6EQI6T1ctek\nuFqWLTX5gKeyQP38MtvD/4+I7+517tDvrITuNwxjXrA2ZbcVRkZ3qmyZRp9OXsL5\nDfSwk7mnErEKwa/ruxq7jhmVVN1jBDrNMuybeyiDfAOwk6/qIZ3s8kxYGf+Fc8vE\naE2lzshOkAvnXk6M6dlxq3pg7iXexHBY0A2uzUTa9P9OLy5BMlhl9tgQC3uy84ku\nHnT1fONTRkoEMppdSepXmqNSENz1LqRsRWyCLDvksPCmssaOLxnHQrUQltsuabCY\nn6l6lJ1zV2kzdOBGKd21uo2iOb/jttTwaHllxRw/rL52F14Jr40wULJYEvCAvOmu\ntPGSZbkBg16QvdO1aAPcUD9gLOSwvysrb4/8/d6b6Kakkt+IV+8mrmxp0Bbh5S2N\nHAPDri+OsV6VxGCTpXyz5v4DoiNj+gJ/PO55Y89GVW7K8+CiPioqcLbZ30v0Jiia\nydBAG0OrGFloeaKccJH7Qo1oZn2XoZtm3cUq8U8cBeeC/ly2iBDzeE7wLjx7WkSW\nG/22ipOAPQvEF2kkm5ITpIZaWO06lCuAUq14h9pFfugOrb2lbAc=\n=u/9a\n-----END PGP SIGNATURE-----",
        "payload": "tree 5db8a461b406d1f70d5f852d629f772526bb54ca\nparent ccb0325b1bd1cee5a76382a16901dc80ea8f50d8\nauthor fanquake <fanquake@gmail.com> 1605071787 +0800\ncommitter fanquake <fanquake@gmail.com> 1606719260 +0800\n\nmacdeploy: remove existing Bitcoin-Core.dmg if present\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adaa26202b965346566b5adff2fc5cee65955dfe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/adaa26202b965346566b5adff2fc5cee65955dfe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adaa26202b965346566b5adff2fc5cee65955dfe/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccb0325b1bd1cee5a76382a16901dc80ea8f50d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb0325b1bd1cee5a76382a16901dc80ea8f50d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccb0325b1bd1cee5a76382a16901dc80ea8f50d8"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0349e423bdd1e4556a9055de8b1ce86b83810ae0",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adaa26202b965346566b5adff2fc5cee65955dfe/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adaa26202b965346566b5adff2fc5cee65955dfe/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=adaa26202b965346566b5adff2fc5cee65955dfe",
        "patch": "@@ -523,6 +523,7 @@ verbose = config.verbose\n # ------------------------------------------------\n \n app_bundle = config.app_bundle[0]\n+appname = config.appname[0]\n \n if not os.path.exists(app_bundle):\n     sys.stderr.write(\"Error: Could not find app bundle \\\"{}\\\"\\n\".format(app_bundle))\n@@ -531,13 +532,12 @@ if not os.path.exists(app_bundle):\n # ------------------------------------------------\n \n if os.path.exists(\"dist\"):\n-    print(\"+ Removing old dist folder +\")\n-    \n+    print(\"+ Removing existing dist folder +\")\n     shutil.rmtree(\"dist\")\n \n-# ------------------------------------------------\n-\n-appname = config.appname[0]\n+if os.path.exists(appname + \".dmg\"):\n+    print(\"+ Removing existing DMG +\")\n+    os.unlink(appname + \".dmg\")\n \n # ------------------------------------------------\n "
      }
    ]
  },
  {
    "sha": "a42aa94c54699833723076f3bfaeeac668523a69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDJhYTk0YzU0Njk5ODMzNzIzMDc2ZjNiZmFlZWFjNjY4NTIzYTY5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-11T07:29:00Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-30T06:54:20Z"
      },
      "message": "macdeploy: remove runHDIUtil in favor of directly calling subprocess.run",
      "tree": {
        "sha": "dd6532cce4df4da0bef41ca5affb41329b369b48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd6532cce4df4da0bef41ca5affb41329b369b48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a42aa94c54699833723076f3bfaeeac668523a69",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/ElxwACgkQLuufXMCV\nJsFvXRAAvLBp2ecuJ9O6+ixuYKvimMv0FbXhYOtaYhQzJsF1OhB2VXZVOqfLiN6r\nzWdzj9GG/WvwEZljI3EypElvXmedAe1Z1PtxrY2pYPNibnzYnpwsTKzLfaleDHs3\nKSKHPGvrVG0by+bXENNWge1bejUOhVmZXSdt4Ck1vEgMpy5WnEEj82ZeDL2aReUZ\ngg87DPgPN7fm8UFPd+cnMGyNNFpLsGfmQNu9PWT8TcvKTKXymWJNqHGyX+0NN6GQ\n0qhB/ILpu4bXaeIwbYYQyS0DTWJymGgzUUX+OZNZPVLw0owiZxBOkq2PiGHTz2VJ\nTwaJbM44M8ogAWRqQUQEv9ImbaDJu17XEim81wMj69ChZMWhapHcbo24/ucm4Mib\nGmmU9WT56QiIShrbaj1dMuXoSrfwuz2yecsHMeBSi+YATVLZUlaY4jePwtxJdenJ\nmWFT4+Rws1ABTEk0ujrOjKd3dfT+7lUNFLm7je9ZgMv+Gs8Rc3831YXvnzTT0zX8\ncCGGEylsaWytE8lrnb2N5dMI4CUoGc5A6v3phMO3wp3rmfwx7f0wayzVv5OkpRsO\nXNW04zW664YZMs0Qk3fUYuvOCopDgtFlygYtOopFVbRTPWZVFo2osEcfEfpnKxSG\nJb2mvbykxTx/jSVaKJT0k8xggMklcSJ24xqNWd9B+V7h02oTDBI=\n=cHGp\n-----END PGP SIGNATURE-----",
        "payload": "tree dd6532cce4df4da0bef41ca5affb41329b369b48\nparent adaa26202b965346566b5adff2fc5cee65955dfe\nauthor fanquake <fanquake@gmail.com> 1605079740 +0800\ncommitter fanquake <fanquake@gmail.com> 1606719260 +0800\n\nmacdeploy: remove runHDIUtil in favor of directly calling subprocess.run\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a42aa94c54699833723076f3bfaeeac668523a69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a42aa94c54699833723076f3bfaeeac668523a69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a42aa94c54699833723076f3bfaeeac668523a69/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "adaa26202b965346566b5adff2fc5cee65955dfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adaa26202b965346566b5adff2fc5cee65955dfe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adaa26202b965346566b5adff2fc5cee65955dfe"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 15,
      "deletions": 39
    },
    "files": [
      {
        "sha": "57e0da83fe4ea0954a489669938004dfb67122b9",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 15,
        "deletions": 39,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a42aa94c54699833723076f3bfaeeac668523a69/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a42aa94c54699833723076f3bfaeeac668523a69/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=a42aa94c54699833723076f3bfaeeac668523a69",
        "patch": "@@ -17,11 +17,12 @@\n #\n \n import plistlib\n-import subprocess, sys, re, os, shutil, stat, os.path\n+import sys, re, os, shutil, stat, os.path\n from argparse import ArgumentParser\n from ds_store import DSStore\n from mac_alias import Alias\n from pathlib import Path\n+from subprocess import PIPE, run\n from typing import List, Optional\n \n # This is ported from the original macdeployqt with modifications\n@@ -199,14 +200,13 @@ def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n     if verbose:\n         print(\"Inspecting with otool: \" + binaryPath)\n     otoolbin=os.getenv(\"OTOOL\", \"otool\")\n-    otool = subprocess.Popen([otoolbin, \"-L\", binaryPath], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n-    o_stdout, o_stderr = otool.communicate()\n+    otool = run([otoolbin, \"-L\", binaryPath], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n     if otool.returncode != 0:\n-        sys.stderr.write(o_stderr)\n+        sys.stderr.write(otool.stderr)\n         sys.stderr.flush()\n         raise RuntimeError(\"otool failed with return code {}\".format(otool.returncode))\n \n-    otoolLines = o_stdout.split(\"\\n\")\n+    otoolLines = otool.stdout.split(\"\\n\")\n     otoolLines.pop(0) # First line is the inspected binary\n     if \".framework\" in binaryPath or binaryPath.endswith(\".dylib\"):\n         otoolLines.pop(0) # Frameworks and dylibs list themselves as a dependency.\n@@ -225,7 +225,7 @@ def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n \n def runInstallNameTool(action: str, *args):\n     installnametoolbin=os.getenv(\"INSTALLNAMETOOL\", \"install_name_tool\")\n-    subprocess.check_call([installnametoolbin, \"-\"+action] + list(args))\n+    run([installnametoolbin, \"-\"+action] + list(args), check=True)\n \n def changeInstallName(oldName: str, newName: str, binaryPath: str, verbose: int):\n     if verbose:\n@@ -247,7 +247,7 @@ def runStrip(binaryPath: str, verbose: int):\n     if verbose:\n         print(\"Using strip:\")\n         print(\" stripped\", binaryPath)\n-    subprocess.check_call([stripbin, \"-x\", binaryPath])\n+    run([stripbin, \"-x\", binaryPath], check=True)\n \n def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional[str]:\n     if framework.sourceFilePath.startswith(\"Qt\"):\n@@ -658,23 +658,6 @@ ds.close()\n \n if config.dmg is not None:\n \n-    def runHDIUtil(verb: str, image_basename: str, **kwargs) -> int:\n-        hdiutil_args = [\"hdiutil\", verb, image_basename + \".dmg\"]\n-        if \"capture_stdout\" in kwargs:\n-            del kwargs[\"capture_stdout\"]\n-            run = subprocess.check_output\n-        else:\n-            if verbose:\n-                hdiutil_args.append(\"-verbose\")\n-            run = subprocess.check_call\n-        \n-        for key, value in kwargs.items():\n-            hdiutil_args.append(\"-\" + key)\n-            if value is not True:\n-                hdiutil_args.append(str(value))\n-        \n-        return run(hdiutil_args, universal_newlines=True)\n-\n     print(\"+ Preparing .dmg disk image +\")\n \n     if verbose:\n@@ -687,17 +670,14 @@ if config.dmg is not None:\n \n     if verbose:\n         print(\"Creating temp image for modification...\")\n-    try:\n-        runHDIUtil(\"create\", appname + \".temp\", srcfolder=\"dist\", format=\"UDRW\", size=size, volname=appname, ov=True)\n-    except subprocess.CalledProcessError as e:\n-        sys.exit(e.returncode)\n+\n+    tempname = appname + \".temp.dmg\"\n+\n+    run([\"hdiutil\", \"create\", tempname, \"-srcfolder\", \"dist\", \"-format\", \"UDRW\", \"-size\", str(size), \"-volname\", appname], check=True, universal_newlines=True)\n \n     if verbose:\n         print(\"Attaching temp image...\")\n-    try:\n-        output = runHDIUtil(\"attach\", appname + \".temp\", readwrite=True, noverify=True, noautoopen=True, capture_stdout=True)\n-    except subprocess.CalledProcessError as e:\n-        sys.exit(e.returncode)\n+    output = run([\"hdiutil\", \"attach\", tempname, \"-readwrite\"], check=True, universal_newlines=True, stdout=PIPE).stdout\n \n     m = re.search(r\"/Volumes/(.+$)\", output)\n     disk_root = m.group(0)\n@@ -714,15 +694,11 @@ if config.dmg is not None:\n \n     print(\"+ Finalizing .dmg disk image +\")\n \n-    subprocess.run([\"hdiutil\", \"detach\", \"/Volumes/{}\".format(appname)], universal_newlines=True)\n+    run([\"hdiutil\", \"detach\", \"/Volumes/{}\".format(appname)], universal_newlines=True)\n \n-    try:\n-        runHDIUtil(\"convert\", appname + \".temp\", format=\"UDBZ\", o=appname + \".dmg\", ov=True)\n-    except subprocess.CalledProcessError as e:\n-        print(e)\n-        sys.exit(e.returncode)\n+    run([\"hdiutil\", \"convert\", tempname, \"-format\", \"UDZO\", \"-o\", appname, \"-imagekey\", \"zlib-level=9\"], check=True, universal_newlines=True)\n \n-    os.unlink(appname + \".temp.dmg\")\n+    os.unlink(tempname)\n \n # ------------------------------------------------\n "
      }
    ]
  },
  {
    "sha": "5d2cbdf772030b203ab1b32c65481ce3fc524b22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDJjYmRmNzcyMDMwYjIwM2FiMWIzMmM2NTQ4MWNlM2ZjNTI0YjIy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-13T07:38:03Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-30T06:54:20Z"
      },
      "message": "macdeploy: use Python 3.6",
      "tree": {
        "sha": "5c4dd5d458f90bc716498df5b46ad0908e7eb12b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c4dd5d458f90bc716498df5b46ad0908e7eb12b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d2cbdf772030b203ab1b32c65481ce3fc524b22",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/ElxwACgkQLuufXMCV\nJsH0VxAAj5YjekXUjUjn7IkqJHrN9/4QXC0mOcEPzSIBV6GZXsXdVsThd5MSp2Zj\nfM5kU30Q1vCiO9m3CUQo3Txjd4UKIJBth8eJY3t8Em+e6zBsJ38OdvfgM5XWS7Ny\n7QIJhs1NxzaSYbRbnb/zuR3CRB2QMLHknobSRkN3oNs7zCnYW3CedSKU/LRCbS2+\nCoGuE0s154WygOPJC09owsauTcF1UiC5/6lznJUmvjjYumtP9A2CzlYQ+nvwkvfB\n1hmJ7b16MJpB48bH/1QGijwhSZiwzqW+3p5aktif4tqb7yrQpyLNw+YqZABXgW7v\ny0F6IAYVFi3SQ//WmztmbYRbkzUUinDJNFL1NJFEMlHLqzvwWlJpHkx7/5A7tt3T\n21UxtxMWjOYVkwRRTAyPC66ROcXzdFzQtie4FWfjtmKfjrc4xauvOUQKXvbSzawv\n0SoFP7pfcq8JNYP9ep5Q9rDioUz27kGL6Z50lPugVLOK6x3lkvsWomDDpCHKF+Zv\npbSmMPH/kCO9Z9tWA/akrVHFQSGGEXCPl44umGjYarVRC5c01ZbKcaaGe/5bpPxi\n88ycfVTJAcZtlNz4t3t3YQsbJqnIMGNDvl5RhYmCwlv4s2VOmloAdu6b+mPefml/\n7NJBqvcHPGDrhwk3AAqs76yTZM9ecLSsMwyVKVSEBfj5ajla5Sg=\n=oTGH\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c4dd5d458f90bc716498df5b46ad0908e7eb12b\nparent a42aa94c54699833723076f3bfaeeac668523a69\nauthor fanquake <fanquake@gmail.com> 1605253083 +0800\ncommitter fanquake <fanquake@gmail.com> 1606719260 +0800\n\nmacdeploy: use Python 3.6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d2cbdf772030b203ab1b32c65481ce3fc524b22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d2cbdf772030b203ab1b32c65481ce3fc524b22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d2cbdf772030b203ab1b32c65481ce3fc524b22/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a42aa94c54699833723076f3bfaeeac668523a69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a42aa94c54699833723076f3bfaeeac668523a69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a42aa94c54699833723076f3bfaeeac668523a69"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 32,
      "deletions": 44
    },
    "files": [
      {
        "sha": "9bf33052885654c06889a21431062d543b28e4fa",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 32,
        "deletions": 44,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d2cbdf772030b203ab1b32c65481ce3fc524b22/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d2cbdf772030b203ab1b32c65481ce3fc524b22/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=5d2cbdf772030b203ab1b32c65481ce3fc524b22",
        "patch": "@@ -53,28 +53,18 @@ class FrameworkInfo(object):\n             return False\n     \n     def __str__(self):\n-        return \"\"\" Framework name: {}\n- Framework directory: {}\n- Framework path: {}\n- Binary name: {}\n- Binary directory: {}\n- Binary path: {}\n- Version: {}\n- Install name: {}\n- Deployed install name: {}\n- Source file Path: {}\n- Deployed Directory (relative to bundle): {}\n-\"\"\".format(self.frameworkName,\n-       self.frameworkDirectory,\n-       self.frameworkPath,\n-       self.binaryName,\n-       self.binaryDirectory,\n-       self.binaryPath,\n-       self.version,\n-       self.installName,\n-       self.deployedInstallName,\n-       self.sourceFilePath,\n-       self.destinationDirectory)\n+        return f\"\"\" Framework name: {frameworkName}\n+ Framework directory: {self.frameworkDirectory}\n+ Framework path: {self.frameworkPath}\n+ Binary name: {self.binaryName}\n+ Binary directory: {self.binaryDirectory}\n+ Binary path: {self.binaryPath}\n+ Version: {self.version}\n+ Install name: {self.installName}\n+ Deployed install name: {self.deployedInstallName}\n+ Source file Path: {self.sourceFilePath}\n+ Deployed Directory (relative to bundle): {self.destinationDirectory}\n+\"\"\"\n     \n     def isDylib(self):\n         return self.frameworkName.endswith(\".dylib\")\n@@ -101,7 +91,7 @@ class FrameworkInfo(object):\n         \n         m = cls.reOLine.match(line)\n         if m is None:\n-            raise RuntimeError(\"otool line could not be parsed: \" + line)\n+            raise RuntimeError(f\"otool line could not be parsed: {line}\")\n         \n         path = m.group(1)\n         \n@@ -121,7 +111,7 @@ class FrameworkInfo(object):\n             info.version = \"-\"\n             \n             info.installName = path\n-            info.deployedInstallName = \"@executable_path/../Frameworks/\" + info.binaryName\n+            info.deployedInstallName = f\"@executable_path/../Frameworks/{info.binaryName}\"\n             info.sourceFilePath = path\n             info.destinationDirectory = cls.bundleFrameworkDirectory\n         else:\n@@ -133,7 +123,7 @@ class FrameworkInfo(object):\n                     break\n                 i += 1\n             if i == len(parts):\n-                raise RuntimeError(\"Could not find .framework or .dylib in otool line: \" + line)\n+                raise RuntimeError(f\"Could not find .framework or .dylib in otool line: {line}\")\n             \n             info.frameworkName = parts[i]\n             info.frameworkDirectory = \"/\".join(parts[:i])\n@@ -144,7 +134,7 @@ class FrameworkInfo(object):\n             info.binaryPath = os.path.join(info.binaryDirectory, info.binaryName)\n             info.version = parts[i+2]\n             \n-            info.deployedInstallName = \"@executable_path/../Frameworks/\" + os.path.join(info.frameworkName, info.binaryPath)\n+            info.deployedInstallName = f\"@executable_path/../Frameworks/{os.path.join(info.frameworkName, info.binaryPath)}\"\n             info.destinationDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, info.binaryDirectory)\n             \n             info.sourceResourcesDirectory = os.path.join(info.frameworkPath, \"Resources\")\n@@ -158,10 +148,10 @@ class FrameworkInfo(object):\n class ApplicationBundleInfo(object):\n     def __init__(self, path: str):\n         self.path = path\n-        appName = \"Bitcoin-Qt\"\n-        self.binaryPath = os.path.join(path, \"Contents\", \"MacOS\", appName)\n+        # for backwards compatibility reasons, this must remain as Bitcoin-Qt\n+        self.binaryPath = os.path.join(path, \"Contents\", \"MacOS\", \"Bitcoin-Qt\")\n         if not os.path.exists(self.binaryPath):\n-            raise RuntimeError(\"Could not find bundle binary for \" + path)\n+            raise RuntimeError(f\"Could not find bundle binary for {path}\")\n         self.resourcesPath = os.path.join(path, \"Contents\", \"Resources\")\n         self.pluginPath = os.path.join(path, \"Contents\", \"PlugIns\")\n \n@@ -185,26 +175,24 @@ class DeploymentInfo(object):\n                 self.pluginPath = pluginPath\n     \n     def usesFramework(self, name: str) -> bool:\n-        nameDot = \"{}.\".format(name)\n-        libNameDot = \"lib{}.\".format(name)\n         for framework in self.deployedFrameworks:\n             if framework.endswith(\".framework\"):\n-                if framework.startswith(nameDot):\n+                if framework.startswith(f\"{name}.\"):\n                     return True\n             elif framework.endswith(\".dylib\"):\n-                if framework.startswith(libNameDot):\n+                if framework.startswith(f\"lib{name}.\"):\n                     return True\n         return False\n \n def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n     if verbose:\n-        print(\"Inspecting with otool: \" + binaryPath)\n+        print(f\"Inspecting with otool: {binaryPath}\")\n     otoolbin=os.getenv(\"OTOOL\", \"otool\")\n     otool = run([otoolbin, \"-L\", binaryPath], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n     if otool.returncode != 0:\n         sys.stderr.write(otool.stderr)\n         sys.stderr.flush()\n-        raise RuntimeError(\"otool failed with return code {}\".format(otool.returncode))\n+        raise RuntimeError(f\"otool failed with return code {otool.returncode}\")\n \n     otoolLines = otool.stdout.split(\"\\n\")\n     otoolLines.pop(0) # First line is the inspected binary\n@@ -252,14 +240,14 @@ def runStrip(binaryPath: str, verbose: int):\n def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional[str]:\n     if framework.sourceFilePath.startswith(\"Qt\"):\n         #standard place for Nokia Qt installer's frameworks\n-        fromPath = \"/Library/Frameworks/\" + framework.sourceFilePath\n+        fromPath = f\"/Library/Frameworks/{framework.sourceFilePath}\"\n     else:\n         fromPath = framework.sourceFilePath\n     toDir = os.path.join(path, framework.destinationDirectory)\n     toPath = os.path.join(toDir, framework.binaryName)\n     \n     if not os.path.exists(fromPath):\n-        raise RuntimeError(\"No file at \" + fromPath)\n+        raise RuntimeError(f\"No file at {fromPath}\")\n     \n     if os.path.exists(toPath):\n         return None # Already there\n@@ -357,7 +345,7 @@ def deployFrameworks(frameworks: List[FrameworkInfo], bundlePath: str, binaryPat\n def deployFrameworksForAppBundle(applicationBundle: ApplicationBundleInfo, strip: bool, verbose: int) -> DeploymentInfo:\n     frameworks = getFrameworks(applicationBundle.binaryPath, verbose)\n     if len(frameworks) == 0:\n-        print(\"Warning: Could not find any external frameworks to deploy in {}.\".format(applicationBundle.path))\n+        print(f\"Warning: Could not find any external frameworks to deploy in {applicationBundle.path}.\")\n         return DeploymentInfo()\n     else:\n         return deployFrameworks(frameworks, applicationBundle.path, applicationBundle.binaryPath, strip, verbose)\n@@ -526,7 +514,7 @@ app_bundle = config.app_bundle[0]\n appname = config.appname[0]\n \n if not os.path.exists(app_bundle):\n-    sys.stderr.write(\"Error: Could not find app bundle \\\"{}\\\"\\n\".format(app_bundle))\n+    sys.stderr.write(f\"Error: Could not find app bundle \\\"{app_bundle}\\\"\\n\")\n     sys.exit(1)\n \n # ------------------------------------------------\n@@ -564,7 +552,7 @@ try:\n             sys.stderr.write(\"Warning: Could not detect Qt's path, skipping plugin deployment!\\n\")\n             config.plugins = False\n except RuntimeError as e:\n-    sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n+    sys.stderr.write(f\"Error: {str(e)}\\n\")\n     sys.exit(1)\n \n # ------------------------------------------------\n@@ -575,14 +563,14 @@ if config.plugins:\n     try:\n         deployPlugins(applicationBundle, deploymentInfo, config.strip, verbose)\n     except RuntimeError as e:\n-        sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n+        sys.stderr.write(f\"Error: {str(e)}\\n\")\n         sys.exit(1)\n \n # ------------------------------------------------\n \n if config.translations_dir:\n     if not Path(config.translations_dir[0]).exists():\n-        sys.stderr.write(\"Error: Could not find translation dir \\\"{}\\\"\\n\".format(config.translations_dir[0]))\n+        sys.stderr.write(f\"Error: Could not find translation dir \\\"{config.translations_dir[0]}\\\"\\n\")\n         sys.exit(1)\n \n print(\"+ Adding Qt translations +\")\n@@ -671,7 +659,7 @@ if config.dmg is not None:\n     if verbose:\n         print(\"Creating temp image for modification...\")\n \n-    tempname = appname + \".temp.dmg\"\n+    tempname: str = appname + \".temp.dmg\"\n \n     run([\"hdiutil\", \"create\", tempname, \"-srcfolder\", \"dist\", \"-format\", \"UDRW\", \"-size\", str(size), \"-volname\", appname], check=True, universal_newlines=True)\n \n@@ -694,7 +682,7 @@ if config.dmg is not None:\n \n     print(\"+ Finalizing .dmg disk image +\")\n \n-    run([\"hdiutil\", \"detach\", \"/Volumes/{}\".format(appname)], universal_newlines=True)\n+    run([\"hdiutil\", \"detach\", f\"/Volumes/{appname}\"], universal_newlines=True)\n \n     run([\"hdiutil\", \"convert\", tempname, \"-format\", \"UDZO\", \"-o\", appname, \"-imagekey\", \"zlib-level=9\"], check=True, universal_newlines=True)\n "
      }
    ]
  },
  {
    "sha": "b685f60a08007e0ae8a5564ee68cd94f9015d899",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjg1ZjYwYTA4MDA3ZTBhZThhNTU2NGVlNjhjZDk0ZjkwMTVkODk5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-30T07:39:09Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-30T07:39:09Z"
      },
      "message": "build: mac_alias 2.1.1",
      "tree": {
        "sha": "1343d239c50da40d0c46f16555cf98cd99df0b93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1343d239c50da40d0c46f16555cf98cd99df0b93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b685f60a08007e0ae8a5564ee68cd94f9015d899",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/EoaUACgkQLuufXMCV\nJsGulQ//WeVuCrQZxlwJGzQftt+AlznXgjKNj6u8W/9Zh2YsES60BuMH7w7C8m+e\nUGerNzEr8rYMPjL/L7aGcBN+31wa3DNp7gyG2woN/wF8VCSZWAvliWa/eUeKkUOI\nWbfS/SLDdqmJsxIl83OsWuFlLHKfhAxotoJ9XmA8h/0uTyTFmJw5A7XfvT/+Xlfu\nL1yIfPQnAazOhGXGYSsoIGsBZqIoXz5kxnijchAQJYpNoihtWj43TDsuloTsqGRe\nSh6LHaYT1gIpeXDeox+MI7zecp2yuifzFtQhyYT/DER6EHrpe+zNaVzLD1o/Nx6t\nI+b+HYTqi0VakGF2x1fXWgj363u/zVRztpnIk4EK28gnjih8MUquD5RqYJ90U7cE\nOaMN5IMDPBBN9ps50CsSeovKXoKj6ZXfNyWCK6VJrr/nY7VcWO2Jy5vc4vAedxC3\n/EAOqMf+J37OBICOuxDboOxV/NmrcB9U7tZUaTa1jlLJY7JiP9PV2s4f3km/sUb6\nLODP8/kgpu9drpiA/M+oDAmRuQi10KO2s1EGKcBQKYfnBUxJHwrm1CqMoQuGfOhK\nv2lPCCzbZ9qgaOoMfrB2djyNJk4/6JmIgmNixdAWVxIXFAod03/zG61rbC6TnUyT\n26n/ArXpOuf2oYHgsOPdI7qIIWPIZAXl42x9Pgj6VzSkr24gt9I=\n=mgff\n-----END PGP SIGNATURE-----",
        "payload": "tree 1343d239c50da40d0c46f16555cf98cd99df0b93\nparent 5d2cbdf772030b203ab1b32c65481ce3fc524b22\nauthor fanquake <fanquake@gmail.com> 1606721949 +0800\ncommitter fanquake <fanquake@gmail.com> 1606721949 +0800\n\nbuild: mac_alias 2.1.1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b685f60a08007e0ae8a5564ee68cd94f9015d899",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b685f60a08007e0ae8a5564ee68cd94f9015d899",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b685f60a08007e0ae8a5564ee68cd94f9015d899/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d2cbdf772030b203ab1b32c65481ce3fc524b22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d2cbdf772030b203ab1b32c65481ce3fc524b22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d2cbdf772030b203ab1b32c65481ce3fc524b22"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5fe027fb8a51b894d0832d220407ebae11d89e20",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b685f60a08007e0ae8a5564ee68cd94f9015d899/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b685f60a08007e0ae8a5564ee68cd94f9015d899/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=b685f60a08007e0ae8a5564ee68cd94f9015d899",
        "patch": "@@ -1,8 +1,8 @@\n package=native_mac_alias\n-$(package)_version=2.0.7\n+$(package)_version=2.1.1\n $(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n $(package)_file_name=v$($(package)_version).tar.gz\n-$(package)_sha256_hash=6f606d3b6bccd2112aeabf1a063f5b5ece87005a5d7e97c8faca23b916e88838\n+$(package)_sha256_hash=c0ffceee14f7d04a6eb323fb7b8217dc3f373b346198d2ca42300a8362db7efa\n $(package)_install_libdir=$(build_prefix)/lib/python3/dist-packages\n \n define $(package)_build_cmds"
      }
    ]
  }
]