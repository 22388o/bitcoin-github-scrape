practicalswift,2018-06-11T18:32:38Z,"Oh, nice find! How was this issue found?",https://github.com/bitcoin/bitcoin/pull/13437#issuecomment-396341640,396341640,
MarcoFalke,2018-06-11T18:55:47Z,"@practicalswift \n\n* Importprunedfunds\n* removeprunedfunds\n* listtransactions -> invalid read\n\nSee also (related?) issue #9729\n\nI can reproduce on 0.15 and master, haven't checked 0.16.",https://github.com/bitcoin/bitcoin/pull/13437#issuecomment-396348868,396348868,
jonasschnelli,2018-06-12T09:04:25Z,@MarcoFalke: can you elaborate a bit more and/or add some source code documentations. A class self-referencing multimap in `CWalletTx` seems not ideal and I wonder if there are other ways to prevent the invalid access.,https://github.com/bitcoin/bitcoin/pull/13437#issuecomment-396519530,396519530,
MarcoFalke,2018-06-12T12:14:49Z,"If someone finds a more elegant solution to erase from both (`mapWallet` and `wtxOrdered`) in `ZapSelectTx`, which is the only behaviour change in this pull, I am all for it.",https://github.com/bitcoin/bitcoin/pull/13437#issuecomment-396567925,396567925,
promag,2018-06-14T00:57:35Z,Should backport?,https://github.com/bitcoin/bitcoin/pull/13437#issuecomment-397133662,397133662,
DrahtBot,2018-06-14T20:20:47Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13249 (Make objects in range declarations immutable by default by practicalswift)\n* #10973 (Refactor: separate wallet from node by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that s",https://github.com/bitcoin/bitcoin/pull/13437#issuecomment-397425768,397425768,
laanwj,2018-06-18T15:33:25Z,"utACK faa18ca046e9043b2cf68cb1bd17cc8c60fe26d9\n\n> If someone finds a more elegant solution to erase from both (mapWallet and wtxOrdered) in ZapSelectTx, which is the only behaviour change in this pull, I am all for it.\n\nI kind of like this solution of storing the iterator to be able to remove it later.",https://github.com/bitcoin/bitcoin/pull/13437#issuecomment-398096118,398096118,
jnewbery,2018-06-18T20:47:10Z,tested ACK faa18ca046e9043b2cf68cb1bd17cc8c60fe26d9,https://github.com/bitcoin/bitcoin/pull/13437#issuecomment-398190228,398190228,
fanquake,2018-07-13T23:57:59Z,Should be backported in #13644.,https://github.com/bitcoin/bitcoin/pull/13437#issuecomment-404981802,404981802,
promag,2018-06-12T07:15:24Z,"nit, could change to `const uint256&`.",https://github.com/bitcoin/bitcoin/pull/13437#discussion_r194635288,194635288,src/wallet/wallet.cpp
Empact,2018-06-12T08:48:15Z,"May be a good place to use `std::tie` for more self-documenting code.\nhttp://en.cppreference.com/w/cpp/utility/tuple/tie",https://github.com/bitcoin/bitcoin/pull/13437#discussion_r194659613,194659613,src/wallet/wallet.cpp
promag,2018-06-12T15:19:56Z,"Remove, `nOrderPos` should be enough for fast lookup in `wtxOrdered`.",https://github.com/bitcoin/bitcoin/pull/13437#discussion_r194780909,194780909,src/wallet/wallet.h
promag,2018-06-12T15:21:59Z,"Something like:\n```cpp\nfor (const auto& it_wtxOrdered = wtxOrdered.lower_bound(it->second.nOrderPos; ...) {\n    if (&it_wtxOrdered->second.first == &it->second) {\n    }\n}\n```",https://github.com/bitcoin/bitcoin/pull/13437#discussion_r194781724,194781724,src/wallet/wallet.cpp
MarcoFalke,2018-06-12T16:06:15Z,"@promag IIRC, `nOrderPos` is updated while the cache keeps the old value...\n\nIf I do this, I'd have to open a new pull request, since this is a different fix.",https://github.com/bitcoin/bitcoin/pull/13437#discussion_r194798606,194798606,src/wallet/wallet.h
promag,2018-06-12T17:39:47Z,Either way storing a map/multimap iterator is safe (while the entry exists) and this is the most performant solution AFAIK.,https://github.com/bitcoin/bitcoin/pull/13437#discussion_r194828294,194828294,src/wallet/wallet.h
