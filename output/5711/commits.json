[
  {
    "sha": "4401b2d7c52e0f3841225369fb0d10767c51aaa2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDAxYjJkN2M1MmUwZjM4NDEyMjUzNjlmYjBkMTA3NjdjNTFhYWEy",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2014-10-19T08:46:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-28T06:41:54Z"
      },
      "message": "Removed main.h dependency from rpcserver.cpp\n\nRebased by @laanwj:\n\n- update for RPC methods added since 84d13ee: setmocktime,\n  invalidateblock, reconsiderblock. Only the first, setmocktime, required a change,\n  the other two are thread safe.",
      "tree": {
        "sha": "29b0b989569f1a16cba69c287a30e0db220343b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29b0b989569f1a16cba69c287a30e0db220343b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4401b2d7c52e0f3841225369fb0d10767c51aaa2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4401b2d7c52e0f3841225369fb0d10767c51aaa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4401b2d7c52e0f3841225369fb0d10767c51aaa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4401b2d7c52e0f3841225369fb0d10767c51aaa2/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b5f5294bba0448c0349ad41cd0e7e107a500b9d"
      }
    ],
    "stats": {
      "total": 262,
      "additions": 224,
      "deletions": 38
    },
    "files": [
      {
        "sha": "7054264c0bbf1778ddf8ecd0c860a5304cac7248",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -234,6 +234,26 @@ bool static Bind(const CService &addr, unsigned int flags) {\n     return true;\n }\n \n+void OnRPCStopped()\n+{\n+    cvBlockChange.notify_all();\n+    LogPrint(\"rpc\", \"RPC stopped.\\n\");\n+}\n+\n+void OnRPCPreCommand(const CRPCCommand& cmd)\n+{\n+#ifdef ENABLE_WALLET\n+    if (cmd.reqWallet && !pwalletMain)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n+#endif\n+\n+    // Observe safe mode\n+    string strWarning = GetWarnings(\"rpc\");\n+    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n+        !cmd.okSafeMode)\n+        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+}\n+\n std::string HelpMessage(HelpMessageMode mode)\n {\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n@@ -802,6 +822,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (fServer)\n     {\n         uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n+        RPCServer::OnStopped(&OnRPCStopped);\n+        RPCServer::OnPreCommand(&OnRPCPreCommand);\n         StartRPCThreads();\n     }\n "
      },
      {
        "sha": "293d6d5619a2325bfba31b077c226e4c3e8aaf82",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -105,6 +105,7 @@ Value getblockcount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockcount\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return chainActive.Height();\n }\n \n@@ -121,6 +122,7 @@ Value getbestblockhash(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return chainActive.Tip()->GetBlockHash().GetHex();\n }\n \n@@ -137,6 +139,7 @@ Value getdifficulty(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getdifficulty\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return GetDifficulty();\n }\n \n@@ -173,6 +176,8 @@ Value getrawmempool(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawmempool\", \"true\")\n         );\n \n+    LOCK(cs_main);\n+\n     bool fVerbose = false;\n     if (params.size() > 0)\n         fVerbose = params[0].get_bool();\n@@ -233,6 +238,8 @@ Value getblockhash(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockhash\", \"1000\")\n         );\n \n+    LOCK(cs_main);\n+\n     int nHeight = params[0].get_int();\n     if (nHeight < 0 || nHeight > chainActive.Height())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n@@ -277,6 +284,8 @@ Value getblock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n         );\n \n+    LOCK(cs_main);\n+\n     std::string strHash = params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n@@ -326,6 +335,8 @@ Value gettxoutsetinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object ret;\n \n     CCoinsStats stats;\n@@ -380,6 +391,8 @@ Value gettxout(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettxout\", \"\\\"txid\\\", 1\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object ret;\n \n     std::string strHash = params[0].get_str();\n@@ -436,6 +449,8 @@ Value verifychain(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"verifychain\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     int nCheckLevel = GetArg(\"-checklevel\", 3);\n     int nCheckDepth = GetArg(\"-checkblocks\", 288);\n     if (params.size() > 0)\n@@ -467,6 +482,8 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockchaininfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n     obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n@@ -526,6 +543,8 @@ Value getchaintips(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getchaintips\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     /* Build up a list of chain tips.  We start with the list of all\n        known blocks, and successively remove blocks that appear as pprev\n        of another block.  */"
      },
      {
        "sha": "b9c92a06c5deb2e8696019a51d0d29fa69a41c95",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -91,6 +91,8 @@ Value importprivkey(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importprivkey\", \"\\\"mykey\\\", \\\"testing\\\", false\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strSecret = params[0].get_str();\n@@ -158,6 +160,8 @@ Value importaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CScript script;\n \n     CBitcoinAddress address(params[0].get_str());\n@@ -223,6 +227,8 @@ Value importwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importwallet\", \"\\\"test\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     ifstream file;\n@@ -322,6 +328,8 @@ Value dumpprivkey(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strAddress = params[0].get_str();\n@@ -351,6 +359,8 @@ Value dumpwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     ofstream file;"
      },
      {
        "sha": "369b3fb4d7872639d305033b3bacdacf10f78230",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -88,6 +88,7 @@ Value getnetworkhashps(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnetworkhashps\", \"\")\n        );\n \n+    LOCK(cs_main);\n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n \n@@ -107,6 +108,7 @@ Value getgenerate(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getgenerate\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return GetBoolArg(\"-gen\", false);\n }\n \n@@ -200,7 +202,6 @@ Value setgenerate(const Array& params, bool fHelp)\n \n     return Value::null;\n }\n-\n #endif\n \n \n@@ -228,6 +229,9 @@ Value getmininginfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getmininginfo\", \"\")\n         );\n \n+\n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n     obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n@@ -268,8 +272,9 @@ Value prioritisetransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n         );\n \n-    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n+    LOCK(cs_main);\n \n+    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n     CAmount nAmount = params[2].get_int64();\n \n     mempool.PrioritiseTransaction(hash, params[0].get_str(), params[1].get_real(), nAmount);\n@@ -358,6 +363,8 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblocktemplate\", \"\")\n          );\n \n+    LOCK(cs_main);\n+\n     std::string strMode = \"template\";\n     Value lpval = Value::null;\n     if (params.size() > 0)"
      },
      {
        "sha": "8d260b1cc9b0cc657f3e1990ae0b82aad9dbbfcb",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -69,6 +69,12 @@ Value getinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getinfo\", \"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n+\n     proxyType proxy;\n     GetProxy(NET_IPV4, proxy);\n \n@@ -172,6 +178,12 @@ Value validateaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n+\n     CBitcoinAddress address(params[0].get_str());\n     bool isValid = address.IsValid();\n \n@@ -329,6 +341,8 @@ Value verifymessage(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"signature\\\", \\\"my message\\\"\")\n         );\n \n+    LOCK(cs_main);\n+\n     string strAddress  = params[0].get_str();\n     string strSign     = params[1].get_str();\n     string strMessage  = params[2].get_str();\n@@ -372,6 +386,8 @@ Value setmocktime(const Array& params, bool fHelp)\n     if (!Params().MineBlocksOnDemand())\n         throw runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n \n+    LOCK(cs_main);\n+\n     RPCTypeCheck(params, boost::assign::list_of(int_type));\n     SetMockTime(params[0].get_int64());\n "
      },
      {
        "sha": "6306fd4406051fca36646e28ffd79c9796c791ef",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -34,7 +34,8 @@ Value getconnectioncount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getconnectioncount\", \"\")\n         );\n \n-    LOCK(cs_vNodes);\n+    LOCK2(cs_main, cs_vNodes);\n+\n     return (int)vNodes.size();\n }\n \n@@ -52,7 +53,8 @@ Value ping(const Array& params, bool fHelp)\n         );\n \n     // Request that each node send a ping during next message processing pass\n-    LOCK(cs_vNodes);\n+    LOCK2(cs_main, cs_vNodes);\n+\n     BOOST_FOREACH(CNode* pNode, vNodes) {\n         pNode->fPingQueued = true;\n     }\n@@ -113,6 +115,8 @@ Value getpeerinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getpeerinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     vector<CNodeStats> vstats;\n     CopyNodeStats(vstats);\n \n@@ -411,6 +415,8 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnetworkinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n     obj.push_back(Pair(\"subversion\","
      },
      {
        "sha": "0859c0e6113fb5dd7df647a65839414cef2cbd9e",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -169,6 +169,8 @@ Value getrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", 1\")\n         );\n \n+    LOCK(cs_main);\n+\n     uint256 hash = ParseHashV(params[0], \"parameter 1\");\n \n     bool fVerbose = false;\n@@ -256,6 +258,7 @@ Value listunspent(const Array& params, bool fHelp)\n     Array results;\n     vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n     pwalletMain->AvailableCoins(vecOutputs, false);\n     BOOST_FOREACH(const COutput& out, vecOutputs) {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n@@ -334,6 +337,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(array_type)(obj_type));\n \n     Array inputs = params[0].get_array();\n@@ -428,6 +432,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     CTransaction tx;\n@@ -466,6 +471,7 @@ Value decodescript(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     Object r;\n@@ -532,6 +538,11 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n     RPCTypeCheck(params, boost::assign::list_of(str_type)(array_type)(array_type)(str_type), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n@@ -591,7 +602,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         }\n     }\n #ifdef ENABLE_WALLET\n-    else\n+    else if (pwalletMain)\n         EnsureWalletIsUnlocked();\n #endif\n \n@@ -722,6 +733,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n \n     // parse hex string from parameter"
      },
      {
        "sha": "f5f8bb22a266f0f52dac70043486466e8b0cd625",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 31,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -7,9 +7,11 @@\n \n #include \"base58.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"random.h\"\n+#include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif\n@@ -23,11 +25,13 @@\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n+#include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace boost::asio;\n using namespace json_spirit;\n+using namespace RPCServer;\n using namespace std;\n \n static std::string strRPCUserColonPass;\n@@ -46,6 +50,34 @@ static boost::asio::io_service::work *rpc_dummy_work = NULL;\n static std::vector<CSubNet> rpc_allow_subnets; //!< List of subnets to allow RPC connections from\n static std::vector< boost::shared_ptr<ip::tcp::acceptor> > rpc_acceptors;\n \n+static struct CRPCSignals\n+{\n+    boost::signals2::signal<void ()> Started;\n+    boost::signals2::signal<void ()> Stopped;\n+    boost::signals2::signal<void (const CRPCCommand&)> PreCommand;\n+    boost::signals2::signal<void (const CRPCCommand&)> PostCommand;\n+} g_rpcSignals;\n+\n+void RPCServer::OnStarted(boost::function<void ()> slot)\n+{\n+    g_rpcSignals.Started.connect(slot);\n+}\n+\n+void RPCServer::OnStopped(boost::function<void ()> slot)\n+{\n+    g_rpcSignals.Stopped.connect(slot);\n+}\n+\n+void RPCServer::OnPreCommand(boost::function<void (const CRPCCommand&)> slot)\n+{\n+    g_rpcSignals.PreCommand.connect(boost::bind(slot, _1));\n+}\n+\n+void RPCServer::OnPostCommand(boost::function<void (const CRPCCommand&)> slot)\n+{\n+    g_rpcSignals.PostCommand.connect(boost::bind(slot, _1));\n+}\n+\n void RPCTypeCheck(const Array& params,\n                   const list<Value_type>& typesExpected,\n                   bool fAllowNull)\n@@ -693,6 +725,7 @@ void StartRPCThreads()\n     for (int i = 0; i < GetArg(\"-rpcthreads\", 4); i++)\n         rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n     fRPCRunning = true;\n+    g_rpcSignals.Started();\n }\n \n void StartDummyRPCThread()\n@@ -735,7 +768,7 @@ void StopRPCThreads()\n     deadlineTimers.clear();\n \n     rpc_io_service->stop();\n-    cvBlockChange.notify_all();\n+    g_rpcSignals.Stopped();\n     if (rpc_worker_group != NULL)\n         rpc_worker_group->join_all();\n     delete rpc_dummy_work; rpc_dummy_work = NULL;\n@@ -978,45 +1011,20 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n     if (!pcmd)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n-#ifdef ENABLE_WALLET\n-    if (pcmd->reqWallet && !pwalletMain)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n-#endif\n \n-    // Observe safe mode\n-    string strWarning = GetWarnings(\"rpc\");\n-    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n-        !pcmd->okSafeMode)\n-        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+    g_rpcSignals.PreCommand(*pcmd);\n \n     try\n     {\n         // Execute\n-        Value result;\n-        {\n-            if (pcmd->threadSafe)\n-                result = pcmd->actor(params, false);\n-#ifdef ENABLE_WALLET\n-            else if (!pwalletMain) {\n-                LOCK(cs_main);\n-                result = pcmd->actor(params, false);\n-            } else {\n-                LOCK2(cs_main, pwalletMain->cs_wallet);\n-                result = pcmd->actor(params, false);\n-            }\n-#else // ENABLE_WALLET\n-            else {\n-                LOCK(cs_main);\n-                result = pcmd->actor(params, false);\n-            }\n-#endif // !ENABLE_WALLET\n-        }\n-        return result;\n+        return pcmd->actor(params, false);\n     }\n     catch (const std::exception& e)\n     {\n         throw JSONRPCError(RPC_MISC_ERROR, e.what());\n     }\n+\n+    g_rpcSignals.PostCommand(*pcmd);\n }\n \n std::string HelpExampleCli(string methodname, string args){"
      },
      {
        "sha": "41cd9da160e94f33000f4b0c8fcdb0b7b73dc660",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -19,6 +19,16 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_writer_template.h\"\n \n+class CRPCCommand;\n+\n+namespace RPCServer\n+{\n+    void OnStarted(boost::function<void ()> slot);\n+    void OnStopped(boost::function<void ()> slot);\n+    void OnPreCommand(boost::function<void (const CRPCCommand&)> slot);\n+    void OnPostCommand(boost::function<void (const CRPCCommand&)> slot);\n+}\n+\n class CBlockIndex;\n class CNetAddr;\n "
      },
      {
        "sha": "338b648503f3cea9a07ed21a8ab151fc3e663cc6",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 2,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -90,6 +90,8 @@ Value getnewaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnewaddress\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount;\n     if (params.size() > 0)\n@@ -164,13 +166,14 @@ Value getaccountaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount = AccountFromValue(params[0]);\n \n     Value ret;\n \n     ret = GetAccountAddress(strAccount).ToString();\n-\n     return ret;\n }\n \n@@ -189,6 +192,8 @@ Value getrawchangeaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n        );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (!pwalletMain->IsLocked())\n         pwalletMain->TopUpKeyPool();\n \n@@ -219,11 +224,12 @@ Value setaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n-\n     string strAccount;\n     if (params.size() > 1)\n         strAccount = AccountFromValue(params[1]);\n@@ -262,6 +268,8 @@ Value getaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -292,6 +300,8 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaddressesbyaccount\", \"\\\"tabby\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n \n     // Find all addresses that have the given account\n@@ -363,6 +373,8 @@ Value sendtoaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -409,6 +421,8 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listaddressgroupings\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     Array jsonGroupings;\n     map<CTxDestination, CAmount> balances = pwalletMain->GetAddressBalances();\n     BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n@@ -454,6 +468,8 @@ Value signmessage(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"my message\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strAddress = params[0].get_str();\n@@ -504,6 +520,8 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", 6\")\n        );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n     if (!address.IsValid())\n@@ -557,6 +575,8 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getreceivedbyaccount\", \"\\\"tabby\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Minimum confirmations\n     int nMinDepth = 1;\n     if (params.size() > 1)\n@@ -643,6 +663,8 @@ Value getbalance(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (params.size() == 0)\n         return  ValueFromAmount(pwalletMain->GetBalance());\n \n@@ -695,6 +717,9 @@ Value getunconfirmedbalance(const Array &params, bool fHelp)\n         throw runtime_error(\n                 \"getunconfirmedbalance\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ValueFromAmount(pwalletMain->GetUnconfirmedBalance());\n }\n \n@@ -721,6 +746,8 @@ Value movecmd(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n     CAmount nAmount = AmountFromValue(params[2]);\n@@ -793,6 +820,8 @@ Value sendfrom(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendfrom\", \"\\\"tabby\\\", \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.01, 6, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n@@ -850,6 +879,8 @@ Value sendmany(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n     Object sendTo = params[1].get_obj();\n     int nMinDepth = 1;\n@@ -935,6 +966,8 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n         throw runtime_error(msg);\n     }\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount;\n     if (params.size() > 2)\n         strAccount = AccountFromValue(params[2]);\n@@ -1110,6 +1143,8 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ListReceived(params, false);\n }\n \n@@ -1141,6 +1176,8 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listreceivedbyaccount\", \"6, true, true\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ListReceived(params, true);\n }\n \n@@ -1292,6 +1329,8 @@ Value listtransactions(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = \"*\";\n     if (params.size() > 0)\n         strAccount = params[0].get_str();\n@@ -1372,6 +1411,8 @@ Value listaccounts(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listaccounts\", \"6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     int nMinDepth = 1;\n     if (params.size() > 0)\n         nMinDepth = params[0].get_int();\n@@ -1460,6 +1501,8 @@ Value listsinceblock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBlockIndex *pindex = NULL;\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n@@ -1546,6 +1589,8 @@ Value gettransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n@@ -1594,6 +1639,8 @@ Value backupwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strDest = params[0].get_str();\n     if (!BackupWallet(*pwalletMain, strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n@@ -1616,6 +1663,8 @@ Value keypoolrefill(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n     unsigned int kpSize = 0;\n     if (params.size() > 0) {\n@@ -1663,6 +1712,8 @@ Value walletpassphrase(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletpassphrase\", \"\\\"my pass phrase\\\", 60\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1710,6 +1761,8 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1756,6 +1809,8 @@ Value walletlock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletlock\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1797,6 +1852,8 @@ Value encryptwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"encryptwallet\", \"\\\"my pass phrase\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (pwalletMain->IsCrypted())\n@@ -1861,6 +1918,8 @@ Value lockunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (params.size() == 1)\n         RPCTypeCheck(params, boost::assign::list_of(bool_type));\n     else\n@@ -1930,6 +1989,8 @@ Value listlockunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listlockunspent\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     vector<COutPoint> vOutpts;\n     pwalletMain->ListLockedCoins(vOutpts);\n \n@@ -1961,6 +2022,8 @@ Value settxfee(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"settxfee\", \"0.00001\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Amount\n     CAmount nAmount = 0;\n     if (params[0].get_real() != 0.0)\n@@ -1992,6 +2055,8 @@ Value getwalletinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getwalletinfo\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     Object obj;\n     obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n     obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));"
      },
      {
        "sha": "27e80e813b77ca0754d8e2a8165a35ffb97d6fe5",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -142,6 +142,17 @@ class CMutexLock\n             Enter(pszName, pszFile, nLine);\n     }\n \n+    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false)\n+    {\n+        if (!pmutexIn) return;\n+\n+        lock = boost::unique_lock<Mutex>(*pmutexIn, boost::defer_lock);\n+        if (fTry)\n+            TryEnter(pszName, pszFile, nLine);\n+        else\n+            Enter(pszName, pszFile, nLine);\n+    }\n+\n     ~CMutexLock()\n     {\n         if (lock.owns_lock())"
      }
    ]
  },
  {
    "sha": "5ebe0956b391cfa782fd97bb417d20b479df6a36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWJlMDk1NmIzOTFjZmE3ODJmZDk3YmI0MTdkMjBiNDc5ZGY2YTM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T12:52:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-28T06:41:54Z"
      },
      "message": "Trim RPC command table\n\n- invalidateblock and reconsiderblock were defined doubly\n- remove no-longer-used threadSafe, as locks have been pushed down",
      "tree": {
        "sha": "3307c1727409243c0707c51700d792097970b2e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3307c1727409243c0707c51700d792097970b2e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ebe0956b391cfa782fd97bb417d20b479df6a36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ebe0956b391cfa782fd97bb417d20b479df6a36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ebe0956b391cfa782fd97bb417d20b479df6a36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ebe0956b391cfa782fd97bb417d20b479df6a36/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4401b2d7c52e0f3841225369fb0d10767c51aaa2"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 84,
      "deletions": 87
    },
    "files": [
      {
        "sha": "823b1fcf240b3e41e967c0f68c48bb430fec4e3d",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 84,
        "deletions": 86,
        "changes": 170,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ebe0956b391cfa782fd97bb417d20b479df6a36/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ebe0956b391cfa782fd97bb417d20b479df6a36/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=5ebe0956b391cfa782fd97bb417d20b479df6a36",
        "patch": "@@ -271,112 +271,110 @@ Value stop(const Array& params, bool fHelp)\n  * Call Table\n  */\n static const CRPCCommand vRPCCommands[] =\n-{ //  category              name                      actor (function)         okSafeMode threadSafe reqWallet\n-  //  --------------------- ------------------------  -----------------------  ---------- ---------- ---------\n+{ //  category              name                      actor (function)         okSafeMode reqWallet\n+  //  --------------------- ------------------------  -----------------------  ---------- ---------\n     /* Overall control/query calls */\n-    { \"control\",            \"getinfo\",                &getinfo,                true,      false,      false }, /* uses wallet if enabled */\n-    { \"control\",            \"help\",                   &help,                   true,      true,       false },\n-    { \"control\",            \"stop\",                   &stop,                   true,      true,       false },\n+    { \"control\",            \"getinfo\",                &getinfo,                true,      false }, /* uses wallet if enabled */\n+    { \"control\",            \"help\",                   &help,                   true,      false },\n+    { \"control\",            \"stop\",                   &stop,                   true,      false },\n \n     /* P2P networking */\n-    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,      false,      false },\n-    { \"network\",            \"addnode\",                &addnode,                true,      true,       false },\n-    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true,       false },\n-    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true,      false,      false },\n-    { \"network\",            \"getnettotals\",           &getnettotals,           true,      true,       false },\n-    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,      false,      false },\n-    { \"network\",            \"ping\",                   &ping,                   true,      false,      false },\n+    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,      false },\n+    { \"network\",            \"addnode\",                &addnode,                true,      false },\n+    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,      false },\n+    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true,      false },\n+    { \"network\",            \"getnettotals\",           &getnettotals,           true,      false },\n+    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,      false },\n+    { \"network\",            \"ping\",                   &ping,                   true,      false },\n \n     /* Block chain and UTXO */\n-    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,      false,      false },\n-    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,      false,      false },\n-    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,      false,      false },\n-    { \"blockchain\",         \"getblock\",               &getblock,               true,      false,      false },\n-    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,      false,      false },\n-    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,      false,      false },\n-    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,      false,      false },\n-    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,      true,       false },\n-    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,      false,      false },\n-    { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false,      false },\n-    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false,      false },\n-    { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false,      false },\n-    { \"blockchain\",         \"invalidateblock\",        &invalidateblock,        true,      true,       false },\n-    { \"blockchain\",         \"reconsiderblock\",        &reconsiderblock,        true,      true,       false },\n+    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,      false },\n+    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,      false },\n+    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,      false },\n+    { \"blockchain\",         \"getblock\",               &getblock,               true,      false },\n+    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,      false },\n+    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,      false },\n+    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,      false },\n+    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,      false },\n+    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,      false },\n+    { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false },\n+    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false },\n+    { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false },\n \n     /* Mining */\n-    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },\n-    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,      false,      false },\n-    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,      false,      false },\n-    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,      false,      false },\n-    { \"mining\",             \"submitblock\",            &submitblock,            true,      true,       false },\n+    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false },\n+    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,      false },\n+    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,      false },\n+    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,      false },\n+    { \"mining\",             \"submitblock\",            &submitblock,            true,      false },\n \n #ifdef ENABLE_WALLET\n     /* Coin generation */\n-    { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false,      false },\n-    { \"generating\",         \"setgenerate\",            &setgenerate,            true,      true,       false },\n+    { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false },\n+    { \"generating\",         \"setgenerate\",            &setgenerate,            true,      false },\n #endif\n \n     /* Raw transactions */\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false,      false },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false,      false },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false,      false },\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false,      false },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false,      false },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false,      false }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false },\n+    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false },\n+    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false },\n+    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false },\n+    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false },\n+    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false }, /* uses wallet if enabled */\n \n     /* Utility functions */\n-    { \"util\",               \"createmultisig\",         &createmultisig,         true,      true ,      false },\n-    { \"util\",               \"validateaddress\",        &validateaddress,        true,      false,      false }, /* uses wallet if enabled */\n-    { \"util\",               \"verifymessage\",          &verifymessage,          true,      false,      false },\n-    { \"util\",               \"estimatefee\",            &estimatefee,            true,      true,       false },\n-    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,      true,       false },\n+    { \"util\",               \"createmultisig\",         &createmultisig,         true,      false },\n+    { \"util\",               \"validateaddress\",        &validateaddress,        true,      false }, /* uses wallet if enabled */\n+    { \"util\",               \"verifymessage\",          &verifymessage,          true,      false },\n+    { \"util\",               \"estimatefee\",            &estimatefee,            true,      false },\n+    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,      false },\n \n     /* Not shown in help */\n-    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,      true,       false },\n-    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,      true,       false },\n-    { \"hidden\",             \"setmocktime\",            &setmocktime,            true,      false,      false },\n+    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,      false },\n+    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,      false },\n+    { \"hidden\",             \"setmocktime\",            &setmocktime,            true,      false },\n \n #ifdef ENABLE_WALLET\n     /* Wallet */\n-    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true,      false,      true },\n-    { \"wallet\",             \"backupwallet\",           &backupwallet,           true,      false,      true },\n-    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true,      false,      true },\n-    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true,      false,      true },\n-    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true,      false,      true },\n-    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true,      false,      true },\n-    { \"wallet\",             \"getaccount\",             &getaccount,             true,      false,      true },\n-    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,      false,      true },\n-    { \"wallet\",             \"getbalance\",             &getbalance,             false,     false,      true },\n-    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true,      false,      true },\n-    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true,      false,      true },\n-    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,     false,      true },\n-    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,     false,      true },\n-    { \"wallet\",             \"gettransaction\",         &gettransaction,         false,     false,      true },\n-    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false,     false,      true },\n-    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false,     false,      true },\n-    { \"wallet\",             \"importprivkey\",          &importprivkey,          true,      false,      true },\n-    { \"wallet\",             \"importwallet\",           &importwallet,           true,      false,      true },\n-    { \"wallet\",             \"importaddress\",          &importaddress,          true,      false,      true },\n-    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true,      false,      true },\n-    { \"wallet\",             \"listaccounts\",           &listaccounts,           false,     false,      true },\n-    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false,     false,      true },\n-    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n-    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,     false,      true },\n-    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,     false,      true },\n-    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false,     false,      true },\n-    { \"wallet\",             \"listtransactions\",       &listtransactions,       false,     false,      true },\n-    { \"wallet\",             \"listunspent\",            &listunspent,            false,     false,      true },\n-    { \"wallet\",             \"lockunspent\",            &lockunspent,            true,      false,      true },\n-    { \"wallet\",             \"move\",                   &movecmd,                false,     false,      true },\n-    { \"wallet\",             \"sendfrom\",               &sendfrom,               false,     false,      true },\n-    { \"wallet\",             \"sendmany\",               &sendmany,               false,     false,      true },\n-    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false,     false,      true },\n-    { \"wallet\",             \"setaccount\",             &setaccount,             true,      false,      true },\n-    { \"wallet\",             \"settxfee\",               &settxfee,               true,      false,      true },\n-    { \"wallet\",             \"signmessage\",            &signmessage,            true,      false,      true },\n-    { \"wallet\",             \"walletlock\",             &walletlock,             true,      false,      true },\n-    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true,      false,      true },\n-    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true,      false,      true },\n+    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true,      true },\n+    { \"wallet\",             \"backupwallet\",           &backupwallet,           true,      true },\n+    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true,      true },\n+    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true,      true },\n+    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true,      true },\n+    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true,      true },\n+    { \"wallet\",             \"getaccount\",             &getaccount,             true,      true },\n+    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,      true },\n+    { \"wallet\",             \"getbalance\",             &getbalance,             false,     true },\n+    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true,      true },\n+    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true,      true },\n+    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,     true },\n+    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,     true },\n+    { \"wallet\",             \"gettransaction\",         &gettransaction,         false,     true },\n+    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false,     true },\n+    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false,     true },\n+    { \"wallet\",             \"importprivkey\",          &importprivkey,          true,      true },\n+    { \"wallet\",             \"importwallet\",           &importwallet,           true,      true },\n+    { \"wallet\",             \"importaddress\",          &importaddress,          true,      true },\n+    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true,      true },\n+    { \"wallet\",             \"listaccounts\",           &listaccounts,           false,     true },\n+    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false,     true },\n+    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false,     true },\n+    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,     true },\n+    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,     true },\n+    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false,     true },\n+    { \"wallet\",             \"listtransactions\",       &listtransactions,       false,     true },\n+    { \"wallet\",             \"listunspent\",            &listunspent,            false,     true },\n+    { \"wallet\",             \"lockunspent\",            &lockunspent,            true,      true },\n+    { \"wallet\",             \"move\",                   &movecmd,                false,     true },\n+    { \"wallet\",             \"sendfrom\",               &sendfrom,               false,     true },\n+    { \"wallet\",             \"sendmany\",               &sendmany,               false,     true },\n+    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false,     true },\n+    { \"wallet\",             \"setaccount\",             &setaccount,             true,      true },\n+    { \"wallet\",             \"settxfee\",               &settxfee,               true,      true },\n+    { \"wallet\",             \"signmessage\",            &signmessage,            true,      true },\n+    { \"wallet\",             \"walletlock\",             &walletlock,             true,      true },\n+    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true,      true },\n+    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true,      true },\n #endif // ENABLE_WALLET\n };\n "
      },
      {
        "sha": "f63438ecb882422f6035c0e8f329d5685dc9fdb0",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ebe0956b391cfa782fd97bb417d20b479df6a36/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ebe0956b391cfa782fd97bb417d20b479df6a36/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=5ebe0956b391cfa782fd97bb417d20b479df6a36",
        "patch": "@@ -98,7 +98,6 @@ class CRPCCommand\n     std::string name;\n     rpcfn_type actor;\n     bool okSafeMode;\n-    bool threadSafe;\n     bool reqWallet;\n };\n "
      }
    ]
  }
]