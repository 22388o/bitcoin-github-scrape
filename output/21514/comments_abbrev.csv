DrahtBot,2021-03-23 21:57:57,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22087 by amadeuszpawlik\n* #20018 by dhruv\n\nIf you consider this pull request important, please also help to review the",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-805293720,805293720,
laanwj,2021-03-25 10:00:29,"Concept ACK\n\nI think it would be a useful abstraction to introduce `CService::HasPort` or something like that. There are more protocols that do not have multi-port endpoints (UNIX sockets come to mind as an important one) and it would be slightly clearer than special-casing I2P.",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-806517937,806517937,
vasild,2021-03-30 10:44:11,"`5c3eaea36...f30e489c3`: added an abstraction to check if a given network is using ports, making this not I2P specific.\n\n""uses ports or not"" is a per-network property (like IPv4 uses ports, I2P does not use ports), so I added a standalone function that takes an `enum Network` argument to check for that instead of adding a `CNetAddr` or `CService` method. It is not required to have a `CNetAddr`",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-810118195,810118195,
jonatack,2021-03-30 13:36:12,Thanks for working on this! Will review soon.,https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-810251498,810251498,
vasild,2021-04-01 16:57:21,`f30e489c3...5be0a46b1`: address suggestions,https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-812041193,812041193,
jonatack,2021-04-01 17:54:21,re-ACK 5be0a46b1623536d98aec641af0d24401995e837,https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-812072399,812072399,
sipa,2021-04-01 18:41:06,Would it make sense to make it illegal for I2P hostnames to have a port in the first place?,https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-812098165,812098165,
vasild,2021-04-02 15:53:08,"> Would it make sense to make it illegal for I2P hostnames to have a port in the first place?\n\nWe receive I2P host names from the outside world from:\n* command line arguments\n* RPC\n* the P2P layer via gossip\n* (is there more to this?)\n\nThe first two receive string arguments, so we can parse them and reject/return an error if we see an I2P address followed by `:port`. I am -0.1 on t",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-812588585,812588585,
sipa,2021-04-02 16:25:05,"Hmm can you explain a bit more what changes in later SAM protocols? The ability to create ""portful"" services, the ability to connect to them, both, ... what happens when an older-protocol node tries to connect to portful newer-protocol node or the other way around?\n\nThis may inform what to do, if we envision ever adopting a later version.",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-812601775,812601775,
jonatack,2021-04-02 16:36:01,"If helpful, \n\n- https://github.com/PurpleI2P/i2pd/wiki/Roadmap has ""Implement SAM v3.3"" on the roadmap (but the last update to the roadmap was in 2016; the code repo appears to be active however)\n- https://i2pd.readthedocs.io/en/latest/user-guide/configuration/#sam-interface is the current i2pd SAM interface doc\n- https://github.com/PurpleI2P/i2pd/wiki/Differences-between-i2pd-and-Java-I2P",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-812606208,812606208,
vasild,2021-04-02 17:34:47,"@sipa, short answer - it works either way. Long answer:\n\n> Hmm can you explain a bit more what changes in later SAM protocols? The ability to create ""portful"" services, the ability to connect to them, both,\n\nBoth. The SAM protocol is described here: https://geti2p.net/en/docs/api/samv3 (relevant: ""Version 3.2 Changes"" and ""FROM_PORT"" / ""TO_PORT"").\n\n> what happens when an older-protocol",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-812632520,812632520,
sipa,2021-04-07 16:25:40,"@vasild So... that kind of calls for treating the lack of ports right now as forcing port=0. I guess that's a bit annoying to implement, but if it's possible perhaps the most forward-compatible approach:\n* Make the default port in I2P connections 0 (rather than 8333/18333 etc).\n* Refuse to make outgoing connections that don't have port field equal to 0\n* Still print it in output/ToString con",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-815049933,815049933,
vasild,2021-04-09 08:44:24,"`5be0a46b1...9ea6503d7`: in the added test, use python's dict (`[]`) instead of set (`{}`) to make the order of execution deterministic (would help with [diagnosis if the test fails](https://github.com/bitcoin/bitcoin/pull/21514#discussion_r605842743))",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-816525914,816525914,
vasild,2021-04-09 09:48:36,"@sipa, I made some further experiments. Since one may connect to I2P in ways other than using the SAM protocol, I tried using the I2P router's HTTP proxy to connect to a SAM 3.2 listener (who has done `SESSION CREATE ... FROM_PORT=100 TO_PORT=200`). All went as expected:\n\n* Entering `http://foo.b32.i2p` in the browser, the listener receives `... FROM_PORT=0 TO_PORT=80`\n* Entering `https://fo",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-816564719,816564719,
vasild,2021-04-12 15:07:58,"So, it looks like with I2P we listen on just `address` (not on `address:port` like in TCP). The listener receives the port the client is connecting to as a parameter along with the incoming connection (or port=0 if the client uses SAM 3.1 or older). This means that in I2P it is not possible to have two different programs listening on the same address but different port like in TCP.",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-817890395,817890395,
naumenkogs,2021-04-16 10:03:31,"Concept ACK on improving abstractions.\nHaven't verify the mentioned problem.",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-821067320,821067320,
jonatack,2021-05-05 15:50:26,"re-ACK 9ea6503d753a3c84bc2ea3b3e61504e8bd46c40c modulo ensuring this change is compatible with the I2P seeds and non-default port check in net.cpp::CConnman::ThreadOpenConnections.\n\n(When testing the I2P seed nodes for #21825, I first tried adding them with no port numbers. Testing with a fresh peers.dat and only those I2P seeds in chainparamsseeds and in my AddrMan, I realizing they weren't o",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-832804940,832804940,
jonatack,2021-05-19 14:44:00,Would be good to have this fixed for v22.,https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-844174325,844174325,
vasild,2021-05-31 16:19:16,`9ea6503d75...6d8d59284b`: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-851583806,851583806,
vasild,2021-05-31 16:32:47,"> @vasild So... that kind of calls for treating the lack of ports right now as forcing port=0...\n\nThat makes sense (too). Implemented in https://github.com/bitcoin/bitcoin/pull/22112, lets see if it will fly better than this PR :)",https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-851589118,851589118,
vasild,2021-07-13 15:40:23,Closing in favor of #22112 (which was merged).,https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-879196207,879196207,
jonatack,2021-03-31 13:58:03,44cf17a maybe add a unit test assertion,https://github.com/bitcoin/bitcoin/pull/21514#discussion_r604922210,604922210,src/netaddress.h
jonatack,2021-03-31 14:20:03,987d372 Verified that these new assertions fail without the change to `ToStringIPPort()` in the same commit.,https://github.com/bitcoin/bitcoin/pull/21514#discussion_r604941036,604941036,src/test/netbase_tests.cpp
jonatack,2021-03-31 14:23:14,8f4bd325 This I2P address string is created 4 times in this test file now; perhaps hoist to a constant.,https://github.com/bitcoin/bitcoin/pull/21514#discussion_r604943949,604943949,src/test/netbase_tests.cpp
jonatack,2021-03-31 14:33:25,8f4bd325 can also test passing `RemovePortIfIrrelevant()` a vector of addresses,https://github.com/bitcoin/bitcoin/pull/21514#discussion_r604952955,604952955,src/test/netbase_tests.cpp
jonatack,2021-03-31 14:46:30,"6f19e34 suggested simplification\n```diff\n     def test_addnode_and_connect_i2p(self):\n-        self.log.info('Test that ports are removed from -addnode= and -connect= I2P addresses')\n-\n+        self.log.info(""Test ports are removed from I2P addresses passed to -addnode/-connect"")\n         i2p_addr = ""ukeu3k5oycgaauneqgtnvselmt4yemvoilkln7jpvamvfx7dnkdq.b32.i2p""\n         i2p_addr_with",https://github.com/bitcoin/bitcoin/pull/21514#discussion_r604964280,604964280,test/functional/feature_config_args.py
jonatack,2021-03-31 15:07:59,"While here, maybe sneak this minor fixup into the commit\n```diff\n-bool static TestParse(std::string src, std::string canon)\n+bool static TestParse(const std::string& src, const std::string& canon)\n {\n-    CService addr(LookupNumeric(src, 65535));\n+    CService addr{LookupNumeric(src, 65535)};\n```\n",https://github.com/bitcoin/bitcoin/pull/21514#discussion_r604982203,604982203,src/test/netbase_tests.cpp
vasild,2021-04-01 14:20:16,Trying to order `CService` objects wouldn't compile.,https://github.com/bitcoin/bitcoin/pull/21514#discussion_r605696588,605696588,src/netaddress.h
vasild,2021-04-01 14:36:30,"I prefer to keep it local to each test. It is just a random address, does not need to be equal in all test cases.",https://github.com/bitcoin/bitcoin/pull/21514#discussion_r605709093,605709093,src/test/netbase_tests.cpp
vasild,2021-04-01 16:41:11,Done.,https://github.com/bitcoin/bitcoin/pull/21514#discussion_r605798867,605798867,src/test/netbase_tests.cpp
vasild,2021-04-01 16:56:23,"Taketh, thanks!\n\nOne minor downside of the new variant is that if we get exception on line 224, then it is not clear whether the problem is in `-addnode` or `-connect`.",https://github.com/bitcoin/bitcoin/pull/21514#discussion_r605808095,605808095,test/functional/feature_config_args.py
jonatack,2021-04-01 17:53:51,"Good point, `loglevel=debug` (logged by the CI in case of failure) would reliably indicate which one if we use an array/dict rather than a set:\n\n```diff\n-        for option in {""addnode"", ""connect""}:\n+        for option in [""addnode"", ""connect""]:\n```\nor by adding, for instance\n```diff\n         for option in {""addnode"", ""connect""}:\n+            self.log.debug(f""-{option}"")\n     ",https://github.com/bitcoin/bitcoin/pull/21514#discussion_r605842743,605842743,test/functional/feature_config_args.py
vasild,2021-04-07 16:22:05,"> ...would reliably indicate which one if we use an array/dict rather than a set...\n\nHmm, I tried this, but did not see any difference in the output, what am I missing? (I sneaked a deliberate change of the expected message if the option is e.g. `addnode` in order to trigger a failure).",https://github.com/bitcoin/bitcoin/pull/21514#discussion_r608806324,608806324,test/functional/feature_config_args.py
jonatack,2021-04-07 17:01:07,I wasn't very clear. I meant that it would have a fixed order so you would know which failure it is. Array + debug logging probably best.,https://github.com/bitcoin/bitcoin/pull/21514#discussion_r608835334,608835334,test/functional/feature_config_args.py
