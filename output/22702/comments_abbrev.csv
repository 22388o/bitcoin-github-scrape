practicalswift,2021-08-15 18:46:11,"Concept ACK\n\nThe numbers look very promising!\n\nSeems like this could be one of those rare optimization opportunities actually worth pursuing :)",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-899094330,899094330,
JeremyRubin,2021-08-15 19:11:58,"I'm curious what the impact would be on the performance if you allocated N chunks at a time, always, to fill a page.\n\nE.g., if you want to allocate one node, always allocate something like `aligned_alloc(sysconf(_SC_PAGESIZE), size)` and divide it up into a bunch of pointers for the free list.\n\nCool properties of doing so: Better cache alignment on items added around the same time, fewer t",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-899097140,899097140,
martinus,2021-08-16 05:52:41,"> I'm curious what the impact would be on the performance if you allocated N chunks at a time, always, to fill a page.\n\nI've run the benchmark with `::aligned_alloc(sysconf(_SC_PAGESIZE), ...);` and only allocating a single page, and at least in the benchmark there's no difference:\n\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------------------:|-----",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-899241874,899241874,
JeremyRubin,2021-08-16 09:19:46,Do you have specific code for that? The changes sounded a bit more complex than just aligning the allocator. Did you divide the allocation into N free list chunks? Or just over-allocate?,https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-899359234,899359234,
martinus,2021-08-16 10:03:36,"> Do you have specific code for that? The changes sounded a bit more complex than just aligning the allocator. Did you divide the allocation into N free list chunks? Or just over-allocate?\n\n`MemoryResource::AllocateNewBlock` is the only place where I actually malloc a new block that's divided into the chunks. Here I've replaced the `::operator new(num_chunks* m_chunk_size_bytes)` with `::allig",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-899385299,899385299,
jamesob,2021-08-16 14:13:15,"Some fresh benches in (high dbcache). Continuing to see fairly substantial time/memory improvements with this change.\n\n![ibd local range 500000 540000](https://user-images.githubusercontent.com/73197/129577300-d73f42aa-8598-4418-9375-2a7c4521701a.png)\n\n#### commands index\n|          bench name           |                                                                                    ",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-899545273,899545273,
martinus,2021-08-16 17:46:45,"Thanks for the benchmark! Good to see its 8.4% faster. I think the only reason the memory is lower is because the `memusage::DynamicUsage` now overestimates the memory requirements of the `std::unordered_map` that uses the node_allocator. I guess I should correct that. Then the memory usage should stay roughly the same (as it should, that's what `-dbcache` is for), but the number of transactions t",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-899698242,899698242,
JeremyRubin,2021-08-16 19:22:09,"> `MemoryResource::AllocateNewBlock` is the only place where I actually malloc a new block that's divided into the chunks. Here I've replaced the `::operator new(num_chunks* m_chunk_size_bytes)` with `::alligned_alloc(sysconf(_SC_PAGESIZE), num_chunks* m_chunk_size_bytes)`. And use `free` in `~MemoryResource`.\n> I also changed the default allocation size `m_block_size_bytes` from 262144 to `sysc",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-899759585,899759585,
JeremyRubin,2021-08-16 19:29:56,"might also be interesting to bump the CScript prevector size from 28 to 35 (7 bytes). This would help with the above as well because if we're 104/128 byte aligned we have the capacity & then we'd also save a prevector allocation (which means the vector costs 25 bytes + 34-35 bytes) for a non p2sh segwit v0-v1 output, and also means even more indirection.\n\nThis might have system impacts very br",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-899763888,899763888,
0xB10C,2021-08-17 22:04:46,I've benchmarked the performance of `CChainState::ConnectBlock` between cde8a991f525b72d3a7ac76e0c83aaa611169f22 (PR) and the mergebase 803ef70fd9f65ef800567ff9456fac525bc3e3c2 (MB) using the [`validation::connect_block`](https://github.com/bitcoin/bitcoin/blob/master/doc/tracing.md#tracepoint-validationblock_connected) tracepoint. The tracepoint reports the time it took to connect each block. Thi,https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-900662089,900662089,
martinus,2021-08-18 07:03:09,"@JeremyRubin I actually tried to bump it up to 128 byte to see what that does, but I didn't see any major difference. The benchmark got maybe 1% slower, but maybe the benchmark is also not very realistic. I also tried to reduce the size by 8 byte (which can be done by making use of the `Coin`'s padding in `CCoinsCacheEntry`, I might open anothe PR for that), and it got about ~1% faster. I think th",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-900871568,900871568,
jonatack,2021-08-18 21:00:09,"> @jonatack Thanks for the review! I'm not sure though how I should best incorporate your changes? Should I copy them and add a `Co-authored-by` in the commit message? (I've never done that)\n\nThanks! I'd say squash in the changes you want to keep. You can add an empty line followed by `Co-authored-by: Jon Atack <jon@atack.com>` to the bottom of a commit message if you like, but it was just a r",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-901426870,901426870,
jamesob,2021-08-19 16:17:16,"Bench results with more modest dbcache (800): 6% speedup, 6.7% less memory usage.\n\n|          bench name           |                                                                                                    command                                                                                                     |\n|-------------------------------|-----------------------------------",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-902047745,902047745,
martinus,2021-08-20 17:03:40,"I've now updated the code with correct memory estimation, and benchmarked it. I had a fully synchronized node, and ran `-reindex-chainstate` from block 0 to 690000. All done on a Intel i7 8700, locked to 3200 MHz. I used this command:\n\n```sh\n/usr/bin/time -v bitcoind -datadir=/run/media/martinus/big/bitcoin/db -dbcache=5000 -assumevalid=00000000000000000002a23d6df20eecec15b21d32c75833cce28f1",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-902831715,902831715,
martinus,2021-08-22 17:28:11,"Unfortunately Microsofts implementation of unordered_map behaves quite a bit different from libc++ and libstdc++, so the heuristic that I'm using to detect the node size doesn't work. I've added a WIP to the header until I've fixed this. Most likely I'll ditch the heuristic completely, and properly calculate the correct size. I'm already doing that in the tests anyways (except for windows)",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-903302726,903302726,
martinus,2021-08-27 06:27:22,"I've run the same benchmark as https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-902831715 again, but this time with `-dbcache=10000`, and on my brand new much faster SSD (NVMe Corsair MP400). The results are very similar as before, just both runs are relatively faster. Interestingly, with such a large dbsize the branch never needs to flush the cache, only when finished, while master has ",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-906958642,906958642,
martinus,2021-08-27 07:46:48,"I've removed `[WIP]` in the title after the code cleanup & fixes, everything should work now as expected on all platforms",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-907000522,907000522,
0xB10C,2021-09-03 09:50:33,I think it would be better to not @ @jonatack in the commit message. IIRC he'll get a notification each time this commit is included in some bitcoin-fork.,https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-912411850,912411850,
martinus,2021-09-03 12:47:17,"> I think it would be better to not @ @jonatack in the commit message. IIRC he'll get a notification each time this commit is included in some bitcoin-fork.\n\nAh right, it even says so in `CONTRIBUTING.md`. I'll change the commit message.",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-912511422,912511422,
jonatack,2021-09-03 12:58:16,"The @ is not bothersome until merge, so it can wait until need to retouch.",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-912519251,912519251,
benthecarman,2021-09-04 00:17:55,"tACK 952c37a31c39b7acdb5ab2634a354a1c548708a2\n\nDid IDB on a testnet node, ubuntu 20.04",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-912873136,912873136,
DrahtBot,2021-09-09 17:28:40,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23546](https://github.com/bitcoin/bitcoin/pull/23546) (scripted-diff: Use clang-tidy syntax for C++ named arguments (tes",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-916295394,916295394,
jamesob,2021-10-12 14:17:02,"Given the high potential performance benefit of this PR, it'd be great to see it move forward somehow.\n\n@martinus: are there any limitations or concerns you have about this? Are there any risks in particular we should be testing for?\n\n@sipa @ryanofsky @TheBlueMatt: given you're some resident C++/systems experts, are there any concerns you have? Tests you'd like to see?\n\nI just want to ",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-941055887,941055887,
sipa,2021-10-12 14:30:24,"It's been on my list to go through the code in detail.\n\nSo far, my biggest concern is that the object size gets computed incorrectly by a future libstdc++ (or equivalent) change, and we'll silently fall back to old performance.\n\n@martinus What do you think the impact would be from having a list of memory blobs per allocation size? That would alleviate any such concerns, but I'm not sure whethe",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-941067769,941067769,
ryanofsky,2021-10-12 15:03:05,"> @sipa @ryanofsky @TheBlueMatt: given you're some resident C++/systems experts, are there any concerns you have? Tests you'd like to see?\n\nNo specific concerns from me. It's just a PR adding a lot of dense code that will take time to read over. This seems like a very worthwhile change if it is speeding up IBD, and it seems less risky than other more invasive performance improvements.\n\nDum",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-941097068,941097068,
sipa,2021-10-12 15:14:58,"@ryanofsky I'm not exactly sure where the name ""node based"" comes from, but my interpretation is this: it's an allocator that optimizes the allocation of lots of objects of one specific preset size, without the ability to return individual memory back to the system. Such an allocator is specifically useful for standard library collection types which involve a separately-allocated object (which I g",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-941108553,941108553,
ryanofsky,2021-10-12 15:24:30,"Yeah I don't mean to quibble over the name. I'm sure it's appropriate. Just suggesting to make not make the term seem like assumed knowledge for reviewing the PR. Naively I would think ""separately-allocated object"" would apply to trees and lists but not hash tables so `{,unordered_}` part of this is specifically what's confusing me here. But I should just sit down and read `node_allocator.h`, sinc",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-941117614,941117614,
sipa,2021-10-12 15:27:56,"@ryanofsky Yeah I'm just trying to explain my understanding, not nit about the name. `std::unordered_{multi,}{set}{map}` use a single hashtable with pointers that start singly-linked lists of objects in that bucket, each of which points to the next one. Those objects are potential candidates for optimization by the allocator (the hashtable itself isn't).",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-941121006,941121006,
martinus,2021-10-12 15:29:16,"@jamesob concerning limitations, I can't really think of much... I think the biggest change is that the `MemoryResource` doesn't free memory any more. So once the map reaches a size, memory usage won't decrease even when the map gets smaller. You can see that nicely in this graph: https://user-images.githubusercontent.com/14386/131080505-23278cc5-8977-4a73-beec-4f2ece769fae.png The blue line is me",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-941122228,941122228,
ryanofsky,2021-10-12 15:30:06,Makes sense! I didn't know that about those containers.,https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-941122988,941122988,
sipa,2021-10-12 15:30:54,"@martinus Ah good, the unit tests covering this that way mostly alleviates my concern. I'll review the code.",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-941123677,941123677,
martinus,2021-10-23 14:07:12,Thanks a lot for the detailed review @ryanofsky! I'll go through all that and see what I can do,https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-950158246,950158246,
martinus,2021-10-26 14:38:09,"@ryanofsky I have done quite a bit of refactoring based on your suggestion, thanks again! It's a big change unfortunately, but I think it addresses almost everything you mentioned.",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-952007669,952007669,
martinus,2021-11-02 14:08:25,"Thanks again @ryanofsky, I'll of course look through your review closely again but I don't have much time right now, so it can take a while.",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-957655782,957655782,
sipa,2021-11-07 18:02:44,"A few high-level comments:\n* I think it would be nice to split up the first commit more (e.g. separating the introduction of the allocator from the changes to make the UTXO set use it)\n* Don't @ mention people in the PR description; they'll get random spam anytime j-random-altcoin cherry-picks it.\n* I find the ""semantic"" cyclic dependency between node_allocator and memusage (as in: neither c",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-962655193,962655193,
martinus,2021-11-07 18:03:47,"I have rebased & squashed to e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5 and integrated most suggestions from @ryanofsky. This update is mostly style improvements, deduplicating code, but also two correctness improvements:\n\n* `MemoryResource::Deallocate` previously just `static_cast` void* to FreeList. This was technically undefined behavior. Instead, I'm now using placement new.\n* `MemoryResou",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-962655357,962655357,
martinus,2021-11-08 08:10:15,"@sipa I'll split up the node_allocator into multiple files, and also into multiple commits. It's a bit tricky though to get rid of the cyclic dependency, because MemoryResource needs some functionality of memusage to calculate its dynamic usage, and memusage needs to know the Allocator.",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-962905590,962905590,
ryanofsky,2021-11-09 20:05:00,"> It's a bit tricky though to get rid of the cyclic dependency, because MemoryResource needs some functionality of memusage to calculate its dynamic usage, and memusage needs to know the Allocator.\n\nFWIW, I gave a suggestion to remove the circular dependency in https://github.com/bitcoin/bitcoin/pull/22702#discussion_r737676396. Instead of not including the size of allocated nodes in the conta",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-964493772,964493772,
martinus,2021-11-14 08:18:26,"Rebased e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5 ->  290649c with plenty of refactoring. No functional changes.\n\n* Split code into multiple files, each with its own concern.\n* Split up commits into logical chunks\n* Added another test for `NodeSize` calculation\n",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-968245254,968245254,
martinus,2021-11-15 20:27:55,Rebased to 8dfd71ca7fddf1a9436d04a16f5a8d9d98ee8c74 to resolve conflicts,https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-969292463,969292463,
ryanofsky,2021-11-17 21:21:07,"I'm starting to catch up on this, but so far the new changes look great, and it's nice the way this is now split up into smaller commits and files. I think being able to look at different parts in isolation now makes this PR more approachable and easier to review.",https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-972049312,972049312,
JeremyRubin,2021-08-15 18:56:43,last in first out?,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r689129302,689129302,src/support/allocators/node_allocator.h
JeremyRubin,2021-08-15 18:57:28,gie -> give,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r689129360,689129360,src/support/allocators/node_allocator.h
jonatack,2021-08-17 10:55:25,"Tested that `IsMultiple()` can be removed (Debian Clang 13)\n\n```\ntest/node_allocator_tests.cpp:245:16: warning: unused function 'isMultiple' [-Wunused-function]\nconstexpr bool isMultiple(size_t a, size_t b)\n               ^\n1 warning generated.\n```\n",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r690258262,690258262,src/test/node_allocator_tests.cpp
jonatack,2021-08-17 11:04:06,"Perhaps rule of 5 (https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-five, https://www.stroustrup.com/C++11FAQ.html#default)\n```diff \n     /**\n-     * Copying a memory resource is not allowed, it is an immobile object.\n+     * Copying/moving a memory resource is not allowed; it is an immobile object.\n      */\n     MemoryResource(const MemoryResource&) = delete;\n     Mem",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r690263859,690263859,src/support/allocators/node_allocator.h
sipa,2021-08-20 20:51:51,This does not sound like a disadvantage when formulated this way?,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r693212773,693212773,src/support/allocators/node_allocator.h
sipa,2021-08-20 20:58:04,"""A contains"" ... what is A?",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r693215356,693215356,src/support/allocators/node_allocator.h
sipa,2021-08-20 21:07:09,I think this comment is incorrect (this is the size of one chunk; blocks are a multiple of that).,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r693219259,693219259,src/support/allocators/node_allocator.h
sipa,2021-08-20 21:21:34,"Perhaps add a comment here explaining that the `next` pointer of in-use elements actually doesn't matter until it's deallocated, so it doesn't need initialization here.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r693225214,693225214,src/support/allocators/node_allocator.h
martinus,2021-08-21 05:35:40,"yes I wanted to clarify that the linked list's can become relatively random access pattern into the memory, which can be slower due to lots of cache misses. I'll fix the comment",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r693308019,693308019,src/support/allocators/node_allocator.h
martinus,2021-08-21 05:36:28,"Should be just ""Contains all allocated blocks of memory""",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r693308135,693308135,src/support/allocators/node_allocator.h
jonatack,2021-08-25 20:50:36,"As far as I can tell, this can remain `1 << 10` (1024).\n\nIn both cases, invoking the test with `src/test/test_bitcoin -t validation_flush_tests -l test_suite` prints `CoinsTip usage percentage: 0.997634`\n```suggestion\n            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10), // 1024\n```",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r696103452,696103452,src/test/validation_flush_tests.cpp
jonatack,2021-08-25 21:25:28,"```suggestion\n            // map_a now uses mr_b, since propagate_on_container_move_assignment is std::true_type\n```",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r696124457,696124457,src/test/node_allocator_tests.cpp
martinus,2021-08-27 05:53:58,"thanks, I've updated the comment",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r697171063,697171063,src/support/allocators/node_allocator.h
martinus,2021-08-27 05:54:08,I've updated the comment,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r697171107,697171107,src/support/allocators/node_allocator.h
martinus,2021-08-27 05:54:40,"Thanks again, I've squashed your review and rebased",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r697171287,697171287,src/test/validation_flush_tests.cpp
benthecarman,2021-09-03 02:00:35,will this be handled correctly in the case of overflow?,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r701533891,701533891,src/bench/node_allocator.cpp
martinus,2021-09-03 05:29:14,"I think `p.n` cannot overflow here. It is initialized to 0, and since I've specified the number of iterations each measurement will have exactly 50000 iterations. I do this so I can be sure each measurement has exactly the same number of calls to `map.clear();`, which gives more stable benchmark results. Nanobench defaults to 11 measurements, so in total n will reach 550000.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r701594319,701594319,src/bench/node_allocator.cpp
martinus,2021-10-14 06:27:38,"typo: ""puts p back into the free list **if** it was...""",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r728671072,728671072,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 15:34:03,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\n`m_untouched_memory_end` is always `m_allocated_blocks.back() + alloc_size`. Seems like it would be safer and less confusing to drop this unnecessary variable. Safer to avoid possibility of bugs where object gets into an inconsistent state. Less confusing to need one less variable to understand this",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734648036,734648036,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 15:54:37,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nWhy are individual allocations sometimes called ""chunks"" and sometimes called ""nodes""? Can we drop ""chunk"" terminology and just refer to individual allocations consistently as nodes? \n\nPersonally I would love to drop the custom chunk/node/block terms entirely, just call the allocator a fixed siz",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734663213,734663213,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 16:15:44,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nStrictly speaking, keeping ChunkNode structs aligned shouldn't be required, because we could `memcpy` them to and from the empty spaces instead of `static_cast`ing them. But I guess not taking the max alignment is unlikely to save any space, if we already need to use the max size anyway? \n\nIn an",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734678036,734678036,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 19:11:34,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nIt seems like it would be more ideal for chunk_size_bytes to be a compile time constant (template parameter) instead of a runtime constant (class member), since in all cases can be known at compile time, and the fact that it isn't mean that other things like size of a block can't be constant either.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734785167,734785167,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 20:30:21,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nThis could go away using std::unique_ptr",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734826521,734826521,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 20:41:04,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nExposing this method seems pretty dubious. Maybe do `friend class MemoryResourceTester;` instead and move it to test code. My concerns here are verbosity of this header, and temptation for someone to call this inappropriately in some performance counter or log statement. If this should be exposed pu",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734831606,734831606,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 20:49:24,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nSuggestion not for here, but I wouldn't mind some other PR adding simple `CEIL_DIV`, `ROUND_UP` util macros and using them places like this.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734835564,734835564,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 20:56:20,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nThis should be removed since it's true by definition that `sizeof` returns `char` sized units and `sizeof(char)` is `1`. Size of a char can vary (it is `CHAR_BIT` bits which is usually `8`), but I don't think any code here depends on a particular char size. ",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734838852,734838852,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 21:04:23,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nI think this should be named `MaxBlockSizeBytes` instead of `BlockSizeBytes` since actual block size may be slightly less depending on alignment. Also convention is to use snake case for variable/constant names and camel case for type/function names, so maybe would be good `MAX_BLOCK_SIZE_BYTES` to ",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734842535,734842535,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 21:13:50,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nThis doesn't doesn't really have anything to do with `MemoryResource`, and I'd think it should be part of the `Allocator` paragraph not the `MemoryResource` one. I'd reshuffle this design section a little bit and put `MemoryResource` paragraph first, `Allocator` paragraph second, and information abo",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734846594,734846594,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 21:21:34,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nCurious, when does rebinding happen? Maybe say something about when/if this would happen in a sentence here.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734849669,734849669,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 21:34:11,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nThese construct methods seem sketchy and prone to misuse. Can we drop these? The one place these are called is in `ReallocateCache` and it should be possible to eliminate them there by keeping the existing placement new:\n\n```c++\n::new (&cacheCoinsMemoryResource) MemoryResource{CCoinsMapFactory",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734854608,734854608,src/support/allocators/node_allocator.h
ryanofsky,2021-10-22 21:44:28,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nI think it makes sense to add ReallocateCache cache (though I would be curious if someone knows a reason it wasn't added here initially).\n\nBut if we are going to add this here I think we should remove the other `ReallocateCache()` call in `validation.h` which is now redundant, and make the `Real",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734858608,734858608,src/coins.cpp
ryanofsky,2021-10-22 21:51:16,"In commit ""Add allocator for node based containers"" (952c37a31c39b7acdb5ab2634a354a1c548708a2)\n\nJust so this information is easily accessible, can you add a comment about how this is tested for accuracy or where the tests can be found?",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734861053,734861053,src/memusage.h
martinus,2021-10-23 08:20:03,"`ReallocateCache` is now necessary here, because Flush is triggered when memory is full, and with the node_allocator clear() does not free any memory the memory usage would stay constant. It was not necessary before because clear() already deallocated all of the nodes and only kept the memory for the unordered_map's internal indexing array.\n\nRight! `CoinsTip().ReallocateCache();` in validation",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r734941728,734941728,src/coins.cpp
martinus,2021-10-24 10:27:17,I'd prefer to keep that member variable because it is used in `Allocate(size_t n)` which should be really fast. I think it would be a bit slower with additional indirections. Also I currently don't need special handling for when nothing is allocated yet because both pointers are initialized to nullptr,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r735096984,735096984,src/support/allocators/node_allocator.h
martinus,2021-10-24 17:15:03,"The C++ API for allocators is a bit stupid, it actually happens all the time. No allocation actually ever happens with the `std::pair<const Key, Value>` type, the container's rebind to the internal node type, possibly to some control structure, and for unordered_map to the underlying array type. I'll add a comment",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r735146196,735146196,src/support/allocators/node_allocator.h
martinus,2021-10-24 17:25:15,Right! I'll switch to using `std::unique_ptr<char[]>`.,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r735147340,735147340,src/support/allocators/node_allocator.h
martinus,2021-10-24 17:28:34,"I've tried to make it a template argument before, but couldn't get it to compile. But I've tried it again and figured it out now, the main issue that I missed is that the `Allocator` then needs to have a `struct rebind` for this to work. (this is described in a little footnote here: https://en.cppreference.com/w/cpp/named_req/Allocator#cite_note-2 The rebind is *not* optional because the second te",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r735147664,735147664,src/support/allocators/node_allocator.h
martinus,2021-10-25 06:04:47,"Good idea, I didn't think about writing it that way",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r735279551,735279551,src/support/allocators/node_allocator.h
martinus,2021-10-25 06:45:04,"I prefer to keep the alignment here, as far as I remember some systems can produce very slow code when using memcpy without the alignment requirement. It shouldn't matter for x86 though. I'll add a comment",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r735298577,735298577,src/support/allocators/node_allocator.h
martinus,2021-10-26 06:00:08,When refactoring to use compile time `NODE_SIZE_BYTES` (renamed to `ALLOCATION_SIZE_BYTES`) I can now calculate the correct blocksize right here.,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736176745,736176745,src/support/allocators/node_allocator.h
martinus,2021-10-26 06:02:44,I also wasn't really sure what terms to use. I'll try to clean that up.,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736177958,736177958,src/support/allocators/node_allocator.h
martinus,2021-10-26 06:03:57,"That's a good idea, then I can move `NumFreeChunks` and `NumBlocks` to the test class because it shouldn't be needed anywhere else",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736178494,736178494,src/support/allocators/node_allocator.h
martinus,2021-10-26 08:46:35,fixed in 89c62017f2a099de5353579b08f79037805ca70f,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736298809,736298809,src/support/allocators/node_allocator.h
martinus,2021-10-26 08:47:48,Done in 89c62017f2a099de5353579b08f79037805ca70f,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736299928,736299928,src/support/allocators/node_allocator.h
martinus,2021-10-26 08:48:06,done in 89c62017f2a099de5353579b08f79037805ca70f,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736300228,736300228,src/support/allocators/node_allocator.h
martinus,2021-10-26 08:48:18,done in 89c62017f2a099de5353579b08f79037805ca70f,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736300410,736300410,src/support/allocators/node_allocator.h
martinus,2021-10-26 08:48:35,done in 89c62017f2a099de5353579b08f79037805ca70f,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736300724,736300724,src/support/allocators/node_allocator.h
martinus,2021-10-26 08:48:51,done in 89c62017f2a099de5353579b08f79037805ca70f,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736300998,736300998,src/support/allocators/node_allocator.h
martinus,2021-10-26 08:49:07,reshuffled in 89c62017f2a099de5353579b08f79037805ca70f,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736301223,736301223,src/support/allocators/node_allocator.h
martinus,2021-10-26 08:49:18,comment added in 89c62017f2a099de5353579b08f79037805ca70f,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736301409,736301409,src/support/allocators/node_allocator.h
martinus,2021-10-26 08:49:39,done in 89c62017f2a099de5353579b08f79037805ca70f,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736301727,736301727,src/support/allocators/node_allocator.h
martinus,2021-10-26 08:52:12,Done that in a separate commit in 1e4a65b21c70ee745a8ae02c3af109f4f5e16422,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736304047,736304047,src/coins.cpp
martinus,2021-10-26 10:51:22,Added in a91b603 ,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736401678,736401678,src/memusage.h
ryanofsky,2021-10-26 19:51:22,"To confirm, replacing `unordered_node<X>` with `std::pair<X, void*>` is just a simplification for consistent style, not a change in behavior?\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736869134,736869134,src/memusage.h
ryanofsky,2021-10-26 23:02:51,"Filling this fake transaction just to throw it all away and call `tx.GetHash`  seems unnecessarily complicated. Could just construct the outpoint with any uint256 instead of a real transaction hash\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736984281,736984281,src/bench/node_allocator.cpp
ryanofsky,2021-10-26 23:10:05,"Would be good to replace `std::pair<const Key, Value>` with `ContainerType::value_type` to make this more obvious.\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736987229,736987229,src/memusage.h
ryanofsky,2021-10-26 23:20:05,"Could be shortened to `NodeSize<ContainerType>`\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r736991419,736991419,src/memusage.h
ryanofsky,2021-10-27 15:41:39,"Would s/destroyed by the Allocator/freed/ to be clear this happens independently of the allocator, and whether or not it is used.\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r737604676,737604676,src/support/allocators/node_allocator.h
ryanofsky,2021-10-27 15:44:26,"Should drop ""which is given in the constructor"", since it's not true anymore and is not a really relevant detail describing the high level behavior here.\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r737607359,737607359,src/support/allocators/node_allocator.h
ryanofsky,2021-10-27 15:55:38,"It is unexpected to mention std::unordered_map here when everything above is talking about containers generally.  Also unclear what ""all cases"" is referring to. Would drop last two sentences and just say something like:\n\n> Using node_allocator with a standard container types like std::list, std::unordered_map requires knowing node sizes of those containers which are non-standard implementation",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r737617919,737617919,src/support/allocators/node_allocator.h
ryanofsky,2021-10-27 16:10:13,"It seems like it would be better to make this a `static_assert` than an `if constexpr`. I also don't see a reason for this method to take an `n` argument. Switching to `static_assert` and dropping `n` argument here would have the following advantages:\n\n- It would simplify this method and remove footguns where calling it incorrectly could result in bad runtime behavior instead of a compile time",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r737631026,737631026,src/support/allocators/node_allocator.h
ryanofsky,2021-10-27 16:19:22,"Would expect `FreeList*` instead of `void*`. `void*` could make sense if these were ever pointers to something besides FreeLists, but if `next` is ever non-null it is always pointing to a FreeList.\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r737638806,737638806,src/support/allocators/node_allocator.h
ryanofsky,2021-10-27 16:20:00,"Again seems like type should be `FreeList*` not `void*`\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r737639301,737639301,src/support/allocators/node_allocator.h
ryanofsky,2021-10-27 16:27:02,"If you prefer to keep this variable, I think for clarity it should have a comment like\n\n// m_untouched_memory_end member variable is redundant, and is always equal to (m_allocated_pools.back().get() + POOL_SIZE_BYTES) whenever it is accessed, but m_untouched_memory_end caches this for clarity and efficiency.\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)\n",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r737646193,737646193,src/support/allocators/node_allocator.h
ryanofsky,2021-10-27 17:05:19,"Having this special case to handle shared memory resources seems clunky, especially because it adds a circular dependency between memusage and node_allocator types, instead of letting node_allocator have a one-way dependency on memusage.\n\nAlso it seems like awkward accounting to have dynamic usage of containers not actually include the memory they are using, and for all the cost of all memory ",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r737676396,737676396,src/memusage.h
ryanofsky,2021-10-27 17:17:05,"I don't see a reason to tie this to unordered_map. Would suggest renaming this from `UnorderedMapFactory` to just `Factory`, taking a `typename Container` template argument and calling `NodeSize<Container>::Value()` below\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r737686220,737686220,src/support/allocators/node_allocator.h
ryanofsky,2021-10-27 17:24:42,"This `CreateContainer` method seems like a pretty superfluous wrapper around the `ContainerType` constructor. Maybe we don't need a factory class at all and can just provide some template typedefs for ccoins to use:\n\n```\ntemplate<typename BaseContainer>\nusing MemoryResourceType = MemoryResource<NodeSize<BaseContainer>::Value()>;\n\ntemplate<typename BaseContainer>\nusing AllocatorType =",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r737691663,737691663,src/support/allocators/node_allocator.h
ryanofsky,2021-10-28 16:15:17,"Putting this comment next to this typedef is a little confusing, because the comment is describing _simulating pairs_ which simulate nonstandard internal data structures, but this pair isn't really simulating anything, since it's actually part of standard container definition.\n\nWould suggest either moving comment, or only using std::pair for simulated pairs, or doing both things. By only using",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738550995,738550995,src/memusage.h
ryanofsky,2021-10-28 16:38:33,"Can you use [#elif](https://en.cppreference.com/w/cpp/preprocessor/conditional) above to get rid of this nesting and just make a flat list of cases?\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738569770,738569770,src/memusage.h
ryanofsky,2021-10-28 16:57:56,"In practice, this is probably fine, but logically and in theory, it seems like there is a bug here because this is only using node size to determine allocation size, ignoring node alignment and FreeList size and alignment. It seems like this should be using the `RequiredAllocationSizeBytes` function to take these things into account, like:\n\n```diff\ndiff --git a/src/support/allocators/node_al",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738584696,738584696,src/support/allocators/node_allocator.h
ryanofsky,2021-10-28 17:07:16,"I'm curious why this is phrased negatively. Is there some downside to swapping allocators when containers are swapped? Swapping everything in the container when the container is swapped seems like the obvious and good thing to do.\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)\n",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738591542,738591542,src/support/allocators/node_allocator.h
ryanofsky,2021-10-28 17:10:21,"Again wondering why it's phrased like we ""have to"" do these things. Is there some downside, or some particular way this is not ideal for our use-case?\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738593890,738593890,src/support/allocators/node_allocator.h
ryanofsky,2021-10-28 17:22:05,"This is interesting. It seems to suggest about the [concern](https://github.com/bitcoin/bitcoin/pull/22702#issuecomment-941067769) that if ""the object size gets computed incorrectly by a future libstdc++ change... we'll silently fall back to old performance"" that in theory we could detect at compile time, not runtime, whether a container implementation was calling `Allocator::allocate` with an une",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738601940,738601940,src/support/allocators/node_allocator.h
ryanofsky,2021-10-28 17:32:40,"Probably should use snake case variable names\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)\n",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738609379,738609379,src/test/node_allocator_tests.cpp
ryanofsky,2021-10-28 17:36:08,"Might suggest calling this something like `CHECK_NUMS_FREES_POOLS` just so it's easier to remember what the arguments are to this guy below (and what it is doing).\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738611918,738611918,src/test/node_allocator_tests.cpp
ryanofsky,2021-10-28 17:45:23,"Writing this comment feels like reaching new depths of pedantry, but it doesn't seem guaranteed that `void*` is bigger than `char`. It can't be smaller, because sizeof(char) is always 1, but if they are the same size, then the test isn't really meaningful. I guess my suggestion would be to replace `void*` with a type guaranteed to be bigger like `std::pair<char, char>`.\n\n(Version: a91b6032f037",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738618356,738618356,src/test/node_allocator_tests.cpp
ryanofsky,2021-10-28 18:01:13,"Could do a stricter check?\n\n```\nBOOST_CHECK(node_allocator::MemoryResourceTester::NumFreeAllocations(mr) >=\n                    num_free_allocations + 1000);\n```\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)\n",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738629705,738629705,src/test/node_allocator_tests.cpp
ryanofsky,2021-10-28 18:06:22,"Can you add ""because its contents were moved to m"" to this comment? I was a little confused by what this was doing at first, and the extra hint would have helped.\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738633199,738633199,src/test/node_allocator_tests.cpp
ryanofsky,2021-10-28 18:16:54,"Why only >50 here, not >=1000 again?\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738640412,738640412,src/test/node_allocator_tests.cpp
ryanofsky,2021-10-28 18:23:52,"It seems like another thing these tests could be checking for aside from number of free allocations and number of pools is amount of slack space the last pool (untouched_end - untouched_iterator)/alloc size.\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738645071,738645071,src/test/node_allocator_tests.cpp
ryanofsky,2021-10-28 18:30:33,"I get that it makes sense to have test coverage for std::unordered_map, but I feel like it would be if ideal if unordered_map vagaries with IN_RANGE(1U, 2U) (101U, 102U) soft checks were confined to ~one test, and all other tests used a simpler container like `std::list` that was easier to think about and had better defined allocation behavior, so the tests would be easier to understand, less frag",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738649391,738649391,src/test/node_allocator_tests.cpp
ryanofsky,2021-10-28 18:52:57,"Amount of code duplication between different_memoryresource_* tests is a little eye-watering. This seems like a place where `BOOST_FIXTURE_TEST_CASE` and a test fixture with `unordered_map m_map_a` and `optional<unordered_map> m_map_b` members and some helper methods would cut down duplication and make the checks more human readable.\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738664163,738664163,src/test/node_allocator_tests.cpp
ryanofsky,2021-10-28 18:56:55,"Could all of this just be\n\n```c++\ntemplate<size_t SIZE, size_t ALIGN>\nstruct alignas(ALIGN) A {\n    char data[SIZE];\n};\n```\n\n?\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)\n",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738666780,738666780,src/test/node_allocator_tests.cpp
ryanofsky,2021-10-28 19:05:36,"IMO would be good to move these A8 and bigger checks out of the preprocessor block to deduplicate and make it obvious these are all the same whether you have have 4 byte or 8 byte pointers.\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738672539,738672539,src/test/node_allocator_tests.cpp
ryanofsky,2021-10-28 19:08:29,"Suggest writing `/* not noexcept */` to make comment intent more plain.\n\nAlso, I have only the vaguest understanding of noexcept but could this be [`noexcept(false)`](https://en.cppreference.com/w/cpp/language/noexcept_spec)?\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)\n",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738674496,738674496,src/test/node_allocator_tests.cpp
ryanofsky,2021-10-28 19:13:31,"The hidden mystery of node_allocator_tests is revealed! This is reason for all the IN_RANGE(101, 102) stuff :arrow_up:. I wish there was a spoiler tag.\n\n(Version: a91b6032f037ab1a26ac4baa761e809fbfeb1bdd)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r738677808,738677808,src/test/node_allocator_tests.cpp
martinus,2021-10-29 08:08:09,"I'll reword my comment, I meant that the default for `propagate_on_container_swap` is `std::false_type`, which is bad because that's undefined behavior. I'll change the comment:\n\n```cpp\n    /**\n     * The default for propagate_on_container_swap is std::false_type. This is bad,because swapping\n     * two containers with unequal allocators but not propagating the allocator is undefined\n ",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r739020569,739020569,src/support/allocators/node_allocator.h
martinus,2021-10-29 08:11:02,"exactly, I found it simpler & less code to just use `std::pair<...>` than writing many unordered_node implementations.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r739022522,739022522,src/memusage.h
martinus,2021-10-29 08:13:23,Maybe I shouldn't have but that reveal at the very last place where that `CHECK_IN_RANGE` is used :sweat_smile:,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r739024690,739024690,src/test/node_allocator_tests.cpp
martinus,2021-10-29 08:16:20,"Ah, I didn't know that it's possible to use a template argument in `alignas`, that simplifies things :+1: ",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r739026986,739026986,src/test/node_allocator_tests.cpp
martinus,2021-11-05 14:58:32,right! I just copied that code without really thinking too much about it. I'll clean that up.,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r743735888,743735888,src/bench/node_allocator.cpp
martinus,2021-11-06 06:41:29,"Reading through the code again I now think that I actually have undefined behavior: I'm basically `reinterpret_cast`ing `T*` to `FreeList*`, and both types are completely unrelated, so according to the type aliasing rules accessing this is undefined behavior:\n\n> Performing a class member access that designates a non-static data member or a non-static member function on a glvalue that does not ",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744084248,744084248,src/support/allocators/node_allocator.h
martinus,2021-11-06 07:46:57,"I guess I didn't have enough coffee yet. I can't use reinterpret_cast, but since the `T` was already destroyed, I can use placement new in that memory to create the `FreeList`. No reinterpret_cast needed at all.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744096236,744096236,src/support/allocators/node_allocator.h
martinus,2021-11-06 10:50:24,"I'd like to keep the `CreateContainer` here because otherwise constructing an unordered_map is quite a lot of non-obvious code, like first argument is always 0, then create a temporary hash of the correct typ, equals, and finally the Allocator.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744111409,744111409,src/support/allocators/node_allocator.h
martinus,2021-11-06 11:14:11,"Thanks, and I agree that is the correct way to do it. I don't think it was a bug though, at least the worst thing that could happen was that it falls back to default `::operator new`, but for that there are unit tests too.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744113403,744113403,src/support/allocators/node_allocator.h
martinus,2021-11-06 11:17:30,"no real downside, it's just that because the allocator has a state it also has to be propagated.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744113774,744113774,src/support/allocators/node_allocator.h
martinus,2021-11-06 11:29:25,it sure can be made stricter :+1: ,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744114802,744114802,src/test/node_allocator_tests.cpp
martinus,2021-11-06 11:41:53,`noexcept(false)` and writing nothing is equivalent,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744115818,744115818,src/test/node_allocator_tests.cpp
martinus,2021-11-07 17:24:56,Done in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744290144,744290144,src/bench/node_allocator.cpp
martinus,2021-11-07 17:26:00,Split that code up into two methods in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744290224,744290224,src/memusage.h
martinus,2021-11-07 17:26:41,done in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744290282,744290282,src/memusage.h
martinus,2021-11-07 17:27:09,done in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744290330,744290330,src/support/allocators/node_allocator.h
martinus,2021-11-07 17:29:11,done in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744290597,744290597,src/support/allocators/node_allocator.h
martinus,2021-11-07 17:30:17,"Hm, I don't really want to add a counter for `m_free_allocations` but also don't want to iterate through the freelist. I think it's ok to keep the `MemoryResource::DynamicMemoryUsage` as it is because all that memory is the responsibility of that class. I got rid of the `if constexpr` though in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5.\n",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744290749,744290749,src/support/allocators/node_allocator.h
martinus,2021-11-07 17:31:44,"`MemoryResource::Deallocate` now uses pacement new in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5, and uses the returned pointer.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744290919,744290919,src/support/allocators/node_allocator.h
martinus,2021-11-07 17:32:28,done in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5. I also changed the `m_untouched_memory_iterator` and `m_untouched_memory_end` from `void*` to `char*`.,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744291003,744291003,src/support/allocators/node_allocator.h
martinus,2021-11-07 17:46:26,Moved comment in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744292595,744292595,src/memusage.h
martinus,2021-11-07 17:46:44,done in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744292623,744292623,src/memusage.h
martinus,2021-11-07 17:47:10,Done in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744292648,744292648,src/support/allocators/node_allocator.h
martinus,2021-11-07 17:47:42,changed in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744292730,744292730,src/support/allocators/node_allocator.h
martinus,2021-11-07 17:49:05,done in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744292887,744292887,src/test/node_allocator_tests.cpp
martinus,2021-11-07 17:49:42,done in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744292960,744292960,src/test/node_allocator_tests.cpp
martinus,2021-11-07 17:50:15,stricter check in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744293033,744293033,src/test/node_allocator_tests.cpp
martinus,2021-11-07 17:51:04,"done in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5, and renamed the struct to `AlignedSize`",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744293137,744293137,src/test/node_allocator_tests.cpp
martinus,2021-11-07 17:52:19,Moved that comment up in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744293305,744293305,src/test/node_allocator_tests.cpp
martinus,2021-11-07 17:55:55,"deduplicated in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5. Also I have added a\n\n```cpp\nstatic_assert(__STDCPP_DEFAULT_NEW_ALIGNMENT__ >= std::alignment_of_v<T>, ""make sure AllocatePool() aligns correctly"");\n```\nInto `Allocate`, because actually the 16 byte alignments are not allowed when the pools are not correctly aligned as well.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744293678,744293678,src/test/node_allocator_tests.cpp
martinus,2021-11-07 17:56:23,deduplicated in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744293738,744293738,src/test/node_allocator_tests.cpp
martinus,2021-11-07 17:57:07,stricter in e2a5547f12e5da2718ba17ebac5d5aeb5a2e24d5,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r744293834,744293834,src/test/node_allocator_tests.cpp
martinus,2021-11-13 07:09:03,"I've played with this for a while now, but it doesn't work that way because in memusage.h I still need to know if the `node_allocator` is used for a container, because the node sizes are different. For the standard `std::unordered_map` I need to use `memusage::MallocUsage` for the nodes, and for `node_allocator` I have use the node size directly. So I need at least a forward declaration of `node_a",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r748692014,748692014,src/memusage.h
ryanofsky,2021-11-18 20:55:43,"In commit ""Correctly calculate node size for std::unordered_map"" (119c3b90d6b7e9b81915a09f5ca5370f2ef1ea57)\n\nMight be good to replace this with a loop and verify there is exactly 1 entry with 123 allocations (and the expected size), instead of at least 1.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r752618528,752618528,src/test/node_size_tests.cpp
ryanofsky,2021-11-22 15:41:28,"In commit ""Add allocator for node based containers"" (96d8e33acaa079491403d8e8afa6709978dec205)\n\nWould drop ""which is given in constructor"" (no longer true)",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r754399389,754399389,src/support/allocators/node_allocator/allocator.h
ryanofsky,2021-11-22 16:25:00,"In commit ""Add allocator for node based containers"" (96d8e33acaa079491403d8e8afa6709978dec205)\n\nPurpose of this test could be a made a little clearer with comment like ""Verify that MemoryResource specialized for a larger char pair type will do smaller single char allocations as well""",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r754440401,754440401,src/test/node_allocator_tests.cpp
ryanofsky,2021-11-22 16:25:55,"In commit ""Add allocator for node based containers"" (96d8e33acaa079491403d8e8afa6709978dec205)\n\nTest is no longer using void*. Probably would just say `// freelist is used` or drop comment.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r754441290,754441290,src/test/node_allocator_tests.cpp
ryanofsky,2021-11-22 17:17:01,"In commit ""Make use of node_allocator in CCoinsMap"" (66f745394ddfb546b9d0d29fe764110944dea158)\n\nExtra punctuation here `s/cacheCoins' MemoryResource/cacheCoinsMemoryResource/`",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r754483868,754483868,src/test/validation_flush_tests.cpp
ryanofsky,2021-11-22 18:02:43,"In commit ""Add allocator for node based containers"" (96d8e33acaa079491403d8e8afa6709978dec205)\n\nIt doesn't seem like this static_assert is verifying anything related to our code. It's not calling any of our own functions, just verifying a relationship between `__STDCPP_DEFAULT_NEW_ALIGNMENT__` and `std::alignment_of`. Also assert message doesn't seem to make sense. Check might make more sense ",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r754518240,754518240,src/support/allocators/node_allocator/memory_resource.h
sipa,2021-11-22 18:19:48,I'm somewhat surprised that the compiler/language doesn't automatically declare a function non-throwing if all its calls are declared to be noexcept. Are you sure that's not a risk here?,https://github.com/bitcoin/bitcoin/pull/22702#discussion_r754529782,754529782,src/test/node_allocator_helpers.h
ryanofsky,2021-11-22 20:37:12,"In commit ""Correctly calculate node size for std::unordered_map"" (119c3b90d6b7e9b81915a09f5ca5370f2ef1ea57)\n\nI think it would make more sense to move this class back to `src/memusage.h`, or to a new `src/memusage_nodesize.h` file, instead of making it part of `node_allocator`. This is a helper class for figuring out memory usage of a standard container, so functionally it is more related to me",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r754617015,754617015,src/support/allocators/node_allocator/node_size.h
sipa,2021-11-22 21:05:52,"Nit: I think with C++17, this can be a constexpr static member variable, rather than a function (`static constexpr size_t VALUE = sizeof(SimulatedNodeType);`).",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r754634360,754634360,src/support/allocators/node_allocator/node_size.h
ryanofsky,2021-11-22 21:32:09,"In commit ""Add allocator for node based containers"" (96d8e33acaa079491403d8e8afa6709978dec205)\n\nI still think it's unfortunate to be adding this `memusage` specialization when it is not necessary. I don't like how it:\n\n- Makes memusage.h depend node_allocator, when the job of memusage is just to tell us about memory usage of standard types, and it shouldn't need to be referencing a particu",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r754650139,754650139,src/memusage.h
martinus,2021-11-25 06:15:56,"I think that check is necessary. In `AllocatePool` I'm doing `new char[POOL_SIZE_BYTES]`, and this uses `__STDCPP_DEFAULT_NEW_ALIGNMENT__` as the alignment for the pool's memory. So if you try to use the node_allocator with a type that has an alignment > `__STDCPP_DEFAULT_NEW_ALIGNMENT__` this is a problem, even when `detail::RequiredAllocationSizeBytes` is done correctly. I had a test case that u",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r756597523,756597523,src/support/allocators/node_allocator/memory_resource.h
martinus,2021-11-25 06:23:50,"I think this is safe, the standard says that only a handful functions are implicitly nothrowing: default ctor and dtor, move & copy ctor, move & assignment operator. There has been a proposal for a `noexcept(auto)` to add implicitly nothrowing anywhere else, but it seems that there were too many problems.",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r756600644,756600644,src/test/node_allocator_helpers.h
martinus,2021-11-27 07:40:10,"Thanks for the patch! This makes discussion a lot easier. I think there's one bug in it, this now overestimates memory usage. In `memusage.h` all maps are now calculated like this:\n\n```cpp\nreturn MallocUsage(node_size) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n```\nTo correct for the incorrectly added `MallocUsage(node_size) * m.size()` it should be `memoryusage::MallocU",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r757753231,757753231,src/memusage.h
ryanofsky,2021-11-30 19:47:16,"re: https://github.com/bitcoin/bitcoin/pull/22702#discussion_r756597523\n\n> I think that check is necessary. In `AllocatePool` I'm doing `new char[POOL_SIZE_BYTES]`\n\nMaybe can move check closer to where it's needed\n\n<details><summary>Diff</summary><p>\n\n```diff\ndiff --git a/src/support/allocators/node_allocator/memory_resource.h b/src/support/allocators/node_allocator/memory_resour",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r759607661,759607661,src/support/allocators/node_allocator/memory_resource.h
ryanofsky,2021-11-30 19:59:18,"re: https://github.com/bitcoin/bitcoin/pull/22702#discussion_r754650139\n\n> Thanks for the patch! This makes discussion a lot easier. I think there's one bug in it [...]\n\nThat's a good catch, but there is an easier fix for for that bug. Space internally wasted by MemoryResource should count towards MemoryResource usage. The fix actually simplifies code even more\n\n<details><summary>Diff<",https://github.com/bitcoin/bitcoin/pull/22702#discussion_r759616047,759616047,src/memusage.h
