[
  {
    "sha": "2ec0d5f0b430ff1de3c5c266b94810ec40c523ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWMwZDVmMGI0MzBmZjFkZTNjNWMyNjZiOTQ4MTBlYzQwYzUyM2Vj",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-04T21:02:38Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-26T20:38:29Z"
      },
      "message": "Just some comments on what I'm aiming to do here",
      "tree": {
        "sha": "da5d44a6d3c55c4e7f9c67310418b4d6785450c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da5d44a6d3c55c4e7f9c67310418b4d6785450c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ec0d5f0b430ff1de3c5c266b94810ec40c523ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ec0d5f0b430ff1de3c5c266b94810ec40c523ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ec0d5f0b430ff1de3c5c266b94810ec40c523ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ec0d5f0b430ff1de3c5c266b94810ec40c523ec/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23826f1b7fd070894cfabdbf49b0a3840e6f33a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23826f1b7fd070894cfabdbf49b0a3840e6f33a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23826f1b7fd070894cfabdbf49b0a3840e6f33a6"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 24,
      "deletions": 6
    },
    "files": [
      {
        "sha": "541c2c3c911774cc49f9b6b11ff76079a786ccdd",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 6,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec0d5f0b430ff1de3c5c266b94810ec40c523ec/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec0d5f0b430ff1de3c5c266b94810ec40c523ec/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=2ec0d5f0b430ff1de3c5c266b94810ec40c523ec",
        "patch": "@@ -6,6 +6,8 @@\n #include <boost/assign/list_of.hpp>\n \n #include \"wallet.h\"\n+// TODO: Remove this include after removing all dependencies\n+// NOTE: DO NOT ADD NEW DEPENDENCIES ON CWalletDB!\n #include \"walletdb.h\"\n #include \"bitcoinrpc.h\"\n #include \"init.h\"\n@@ -19,19 +21,22 @@ using namespace json_spirit;\n int64 nWalletUnlockTime;\n static CCriticalSection cs_nWalletUnlockTime;\n \n+// TODO: Move to rpchelpers.cpp\n std::string HelpRequiringPassphrase()\n {\n     return pwalletMain->IsCrypted()\n         ? \"\\nrequires wallet passphrase to be set with walletpassphrase first\"\n         : \"\";\n }\n \n+// TODO: Move to rpchelpers.cpp\n void EnsureWalletIsUnlocked()\n {\n     if (pwalletMain->IsLocked())\n         throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n }\n \n+// TODO: Move to rpchelpers.cpp\n void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n@@ -51,6 +56,7 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n+// TODO: Move to rpchelpers.cpp\n string AccountFromValue(const Value& value)\n {\n     string strAccount = value.get_str();\n@@ -118,7 +124,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n     return CBitcoinAddress(keyID).ToString();\n }\n \n-\n+// TODO: Move to CBitcoinAddress::GetAccountAddress(const std::string strAccount, const bool bForceNew)\n CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n@@ -236,6 +242,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n \n     // Find all addresses that have the given account\n     Array ret;\n+    // TODO: Move bulk to std::vector<string> CWallet::GetAddressesByAccount(const std::string strAccount)\n     BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n@@ -394,6 +401,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     scriptPubKey.SetDestination(address.Get());\n+    // TODO: Should look like if (!pwalletMain->IsMyAddress(address))\n     if (!IsMine(*pwalletMain,scriptPubKey))\n         return (double)0.0;\n \n@@ -402,6 +410,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n     if (params.size() > 1)\n         nMinDepth = params[1].get_int();\n \n+    // TODO: Replace whole block with return ValueFromAmount(pwalletMain->GetAddressTally(nMinDepth))\n     // Tally\n     int64 nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -419,7 +428,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n     return  ValueFromAmount(nAmount);\n }\n \n-\n+// TODO: Move to set<CTxDestination> CWallet::GetAccountAddresses(const std::string strAccount)\n void GetAccountAddresses(string strAccount, set<CTxDestination>& setAddress)\n {\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& item, pwalletMain->mapAddressBook)\n@@ -448,6 +457,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     set<CTxDestination> setAddress;\n     GetAccountAddresses(strAccount, setAddress);\n \n+    // TODO: Replace whole block with return ValueFromAmount(pwalletMain->GetAccountTally(strAccount, nMinDepth))\n     // Tally\n     int64 nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -468,7 +478,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     return (double)nAmount / (double)COIN;\n }\n \n-\n+// TODO: Move to int64 CWallet::GetAccountBalance(const string& strAccount, const int nMinDepth)\n int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n {\n     int64 nBalance = 0;\n@@ -494,6 +504,7 @@ int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinD\n     return nBalance;\n }\n \n+// TODO: Move to int64 CWallet::GetAccountBalance(const string& strAccount, const int nMinDepth)\n int64 GetAccountBalance(const string& strAccount, int nMinDepth)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n@@ -517,6 +528,7 @@ Value getbalance(const Array& params, bool fHelp)\n         nMinDepth = params[1].get_int();\n \n     if (params[0].get_str() == \"*\") {\n+    \t// TODO: Why is there a \"different way\" if both \"should always return the same number\"?\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and getbalance '*' should always return the same number.\n@@ -569,6 +581,7 @@ Value movecmd(const Array& params, bool fHelp)\n     if (params.size() > 4)\n         strComment = params[4].get_str();\n \n+    // TODO: replace block with pwalletMain->MoveBalance(string from, string to, int64 amount, unused, string comment)\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n     if (!walletdb.TxnBegin())\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n@@ -808,7 +821,7 @@ Value createmultisig(const Array& params, bool fHelp)\n     return result;\n }\n \n-\n+// TODO: Move to wallet.h\n struct tallyitem\n {\n     int64 nAmount;\n@@ -820,6 +833,7 @@ struct tallyitem\n     }\n };\n \n+// TODO: Move bulk to std::vector<std::map<std::string, std::object> > CWallet::ListReceived\n Value ListReceived(const Array& params, bool fByAccounts)\n {\n     // Minimum confirmations\n@@ -941,6 +955,7 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n     return ListReceived(params, true);\n }\n \n+// TODO: std::vector<> CWalletTx::(const string& strAccount, int nMinDepth, bool fLong)\n void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n {\n     int64 nFee;\n@@ -1002,6 +1017,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     }\n }\n \n+// TODO: Move to rpchelpers.cpp\n void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Array& ret)\n {\n     bool fAllAccounts = (strAccount == string(\"*\"));\n@@ -1041,6 +1057,7 @@ Value listtransactions(const Array& params, bool fHelp)\n     if (nFrom < 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative from\");\n \n+    // TODO: return ArrayFromVector(pwalletMain->GetTxList(string strAccount, int ncount, int nfrom);\n     Array ret;\n \n     std::list<CAccountingEntry> acentries;\n@@ -1088,6 +1105,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     if (params.size() > 0)\n         nMinDepth = params[0].get_int();\n \n+    // TODO: return ObjectFromMap(pwalletMain->GetAccountList(int nMindepth);\n     map<string, int64> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& entry, pwalletMain->mapAddressBook) {\n         if (IsMine(*pwalletMain, entry.first)) // This address belongs to me\n@@ -1156,7 +1174,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n     int depth = pindex ? (1 + nBestHeight - pindex->nHeight) : -1;\n \n     Array transactions;\n-\n+    // TODO: transactions = ArrayFromVector(std::vector<tx?> CWallet->GetTransactionList(int nDepth)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n@@ -1257,7 +1275,7 @@ Value keypoolrefill(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n-\n+// TODO: CWallet::ThreadTopUpKeyPool\n void ThreadTopUpKeyPool(void* parg)\n {\n     // Make this thread recognisable as the key-topping-up thread"
      }
    ]
  },
  {
    "sha": "dc90bea8ad9ab2371cbc0a08869436c5853eaee1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzkwYmVhOGFkOWFiMjM3MWNiYzBhMDg4Njk0MzZjNTg1M2VhZWUx",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-04T21:20:51Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-26T20:38:29Z"
      },
      "message": "more TODO comments for things to be moved to rpchelpers.cpp",
      "tree": {
        "sha": "3eb331db69546ae9e710deb66f648ca82816b588",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3eb331db69546ae9e710deb66f648ca82816b588"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc90bea8ad9ab2371cbc0a08869436c5853eaee1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc90bea8ad9ab2371cbc0a08869436c5853eaee1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc90bea8ad9ab2371cbc0a08869436c5853eaee1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc90bea8ad9ab2371cbc0a08869436c5853eaee1/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ec0d5f0b430ff1de3c5c266b94810ec40c523ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ec0d5f0b430ff1de3c5c266b94810ec40c523ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ec0d5f0b430ff1de3c5c266b94810ec40c523ec"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9bd320d617f90504988587606a31c0c3d965b93b",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc90bea8ad9ab2371cbc0a08869436c5853eaee1/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc90bea8ad9ab2371cbc0a08869436c5853eaee1/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=dc90bea8ad9ab2371cbc0a08869436c5853eaee1",
        "patch": "@@ -9,6 +9,7 @@\n using namespace json_spirit;\n using namespace std;\n \n+// TODO: move to rpchelpers.cpp\n double GetDifficulty(const CBlockIndex* blockindex)\n {\n     // Floating point number that is a multiple of the minimum difficulty,\n@@ -40,7 +41,7 @@ double GetDifficulty(const CBlockIndex* blockindex)\n     return dDiff;\n }\n \n-\n+// TODO: move to rpchelpers.cpp\n Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n {\n     Object result;"
      },
      {
        "sha": "b15182937eb8e5ad75f7b810cab92dba4a292f6a",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc90bea8ad9ab2371cbc0a08869436c5853eaee1/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc90bea8ad9ab2371cbc0a08869436c5853eaee1/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=dc90bea8ad9ab2371cbc0a08869436c5853eaee1",
        "patch": "@@ -19,6 +19,7 @@ Value getconnectioncount(const Array& params, bool fHelp)\n     return (int)vNodes.size();\n }\n \n+// TODO: move to rpchelpers.cpp\n static void CopyNodeStats(std::vector<CNodeStats>& vstats)\n {\n     vstats.clear();"
      },
      {
        "sha": "3b650d3eec74f916555e88e93506ab28f7fa08bf",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc90bea8ad9ab2371cbc0a08869436c5853eaee1/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc90bea8ad9ab2371cbc0a08869436c5853eaee1/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=dc90bea8ad9ab2371cbc0a08869436c5853eaee1",
        "patch": "@@ -22,6 +22,7 @@ using namespace json_spirit;\n // Utilities: convert hex-encoded Values\n // (throws error if not hex).\n //\n+// TODO: move to rpchelpers.cpp\n uint256 ParseHashV(const Value& v, string strName)\n {\n     string strHex;\n@@ -33,10 +34,14 @@ uint256 ParseHashV(const Value& v, string strName)\n     result.SetHex(strHex);\n     return result;\n }\n+\n+// TODO: move to rpchelpers.cpp\n uint256 ParseHashO(const Object& o, string strKey)\n {\n     return ParseHashV(find_value(o, strKey), strKey);\n }\n+\n+// TODO: move to rpchelpers.cpp\n vector<unsigned char> ParseHexV(const Value& v, string strName)\n {\n     string strHex;\n@@ -46,11 +51,14 @@ vector<unsigned char> ParseHexV(const Value& v, string strName)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n     return ParseHex(strHex);\n }\n+\n+// TODO: move to rpchelpers.cpp\n vector<unsigned char> ParseHexO(const Object& o, string strKey)\n {\n     return ParseHexV(find_value(o, strKey), strKey);\n }\n \n+// TODO: move to rpchelpers.cpp\n void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out)\n {\n     txnouttype type;\n@@ -75,6 +83,7 @@ void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out)\n     out.push_back(Pair(\"addresses\", a));\n }\n \n+// TODO: move to rpchelpers.cpp\n void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n {\n     entry.push_back(Pair(\"txid\", tx.GetHash().GetHex()));"
      }
    ]
  },
  {
    "sha": "f08745e91048396d7338aabf13b0be13a4880735",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDg3NDVlOTEwNDgzOTZkNzMzOGFhYmYxM2IwYmUxM2E0ODgwNzM1",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-05T10:50:55Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-26T20:39:25Z"
      },
      "message": "Make GetAccountAddress and SetAccount into methods of CWallet",
      "tree": {
        "sha": "fce29c22b72742e79d1644860bd3ccb67ccb34f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fce29c22b72742e79d1644860bd3ccb67ccb34f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f08745e91048396d7338aabf13b0be13a4880735",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08745e91048396d7338aabf13b0be13a4880735",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f08745e91048396d7338aabf13b0be13a4880735",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08745e91048396d7338aabf13b0be13a4880735/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc90bea8ad9ab2371cbc0a08869436c5853eaee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc90bea8ad9ab2371cbc0a08869436c5853eaee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc90bea8ad9ab2371cbc0a08869436c5853eaee1"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 69,
      "deletions": 69
    },
    "files": [
      {
        "sha": "2570524cb2e22774b1429b3111d2e766aa6b4ab2",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 69,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f08745e91048396d7338aabf13b0be13a4880735/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f08745e91048396d7338aabf13b0be13a4880735/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=f08745e91048396d7338aabf13b0be13a4880735",
        "patch": "@@ -52,7 +52,7 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     entry.push_back(Pair(\"txid\", wtx.GetHash().GetHex()));\n     entry.push_back(Pair(\"time\", (boost::int64_t)wtx.GetTxTime()));\n     entry.push_back(Pair(\"timereceived\", (boost::int64_t)wtx.nTimeReceived));\n-    BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n+    BOOST_FOREACH(const PAIRTYPE(string, string)& item, wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n@@ -94,8 +94,6 @@ Value getinfo(const Array& params, bool fHelp)\n     return obj;\n }\n \n-\n-\n Value getnewaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n@@ -124,45 +122,6 @@ Value getnewaddress(const Array& params, bool fHelp)\n     return CBitcoinAddress(keyID).ToString();\n }\n \n-// TODO: Move to CBitcoinAddress::GetAccountAddress(const std::string strAccount, const bool bForceNew)\n-CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n-{\n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n-\n-    CAccount account;\n-    walletdb.ReadAccount(strAccount, account);\n-\n-    bool bKeyUsed = false;\n-\n-    // Check if the current key has been used\n-    if (account.vchPubKey.IsValid())\n-    {\n-        CScript scriptPubKey;\n-        scriptPubKey.SetDestination(account.vchPubKey.GetID());\n-        for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n-             it != pwalletMain->mapWallet.end() && account.vchPubKey.IsValid();\n-             ++it)\n-        {\n-            const CWalletTx& wtx = (*it).second;\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-                if (txout.scriptPubKey == scriptPubKey)\n-                    bKeyUsed = true;\n-        }\n-    }\n-\n-    // Generate a new key\n-    if (!account.vchPubKey.IsValid() || bForceNew || bKeyUsed)\n-    {\n-        if (!pwalletMain->GetKeyFromPool(account.vchPubKey, false))\n-            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n-\n-        pwalletMain->SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n-        walletdb.WriteAccount(strAccount, account);\n-    }\n-\n-    return CBitcoinAddress(account.vchPubKey.GetID());\n-}\n-\n Value getaccountaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n@@ -172,46 +131,32 @@ Value getaccountaddress(const Array& params, bool fHelp)\n \n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount = AccountFromValue(params[0]);\n-\n-    Value ret;\n-\n-    ret = GetAccountAddress(strAccount).ToString();\n-\n-    return ret;\n+    CBitcoinAddress address = pwalletMain->GetAccountAddress(strAccount, false);\n+    if (address.IsValid())\n+    \treturn address.ToString();\n+    throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n }\n \n-\n-\n Value setaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"setaccount <bitcoinaddress> <account>\\n\"\n-            \"Sets the account associated with the given address.\");\n+            \"setaccount <bitcoinaddress> [account]\\n\"\n+            \"Sets the address's account to [account] or \\\"\\\".\");\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n-\n     string strAccount;\n     if (params.size() > 1)\n         strAccount = AccountFromValue(params[1]);\n \n-    // Detect when changing the account of an address that is the 'unused current key' of another account:\n-    if (pwalletMain->mapAddressBook.count(address.Get()))\n-    {\n-        string strOldAccount = pwalletMain->mapAddressBook[address.Get()];\n-        if (address == GetAccountAddress(strOldAccount))\n-            GetAccountAddress(strOldAccount, true);\n-    }\n-\n-    pwalletMain->SetAddressBookName(address.Get(), strAccount);\n-\n+    // TODO: Use the return code for something\n+    pwalletMain->SetAccount(address, strAccount);\n     return Value::null;\n }\n \n-\n Value getaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n@@ -230,7 +175,6 @@ Value getaccount(const Array& params, bool fHelp)\n     return strAccount;\n }\n \n-\n Value getaddressesbyaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n@@ -402,7 +346,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     scriptPubKey.SetDestination(address.Get());\n     // TODO: Should look like if (!pwalletMain->IsMyAddress(address))\n-    if (!IsMine(*pwalletMain,scriptPubKey))\n+    if (!IsMine(*pwalletMain, scriptPubKey))\n         return (double)0.0;\n \n     // Minimum confirmations\n@@ -420,9 +364,8 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n             continue;\n \n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-            if (txout.scriptPubKey == scriptPubKey)\n-                if (wtx.GetDepthInMainChain() >= nMinDepth)\n-                    nAmount += txout.nValue;\n+            if (txout.scriptPubKey == scriptPubKey && wtx.GetDepthInMainChain() >= nMinDepth)\n+                nAmount += txout.nValue;\n     }\n \n     return  ValueFromAmount(nAmount);"
      },
      {
        "sha": "8f9509fc960a6411ac52bb3734c74a8b4c833449",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f08745e91048396d7338aabf13b0be13a4880735/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f08745e91048396d7338aabf13b0be13a4880735/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=f08745e91048396d7338aabf13b0be13a4880735",
        "patch": "@@ -1804,3 +1804,58 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n     }\n }\n \n+CBitcoinAddress CWallet::GetAccountAddress(const std::string strAccount, bool bForceNew=false)\n+{\n+    CWalletDB walletdb(strWalletFile);\n+    CAccount account;\n+    walletdb.ReadAccount(strAccount, account);\n+    bool bKeyUsed = false;\n+\n+    // Check if the current key has been used\n+    if (account.vchPubKey.IsValid())\n+    {\n+        CScript scriptPubKey;\n+        scriptPubKey.SetDestination(account.vchPubKey.GetID());\n+        // TODO: Is this IsValid() check really necessary here?\n+        for (map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n+             it != mapWallet.end() && account.vchPubKey.IsValid() && !bKeyUsed;\n+             ++it)\n+        {\n+            //const CWalletTx& wtx = (*it).second;\n+            BOOST_FOREACH(const CTxOut& txout, (*it).second.vout)\n+                if (txout.scriptPubKey == scriptPubKey)\n+                {\n+                    bKeyUsed = true;\n+                    break;\n+                }\n+        }\n+    }\n+\n+    // Generate a new key\n+    if (!account.vchPubKey.IsValid() || bForceNew || bKeyUsed)\n+    {\n+    \t// Caller must check validity to detect keypool depletion\n+        if (!GetKeyFromPool(account.vchPubKey, false))\n+        \treturn CBitcoinAddress();\n+\n+        // TODO: Do something with the return code\n+        SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n+        walletdb.WriteAccount(strAccount, account);\n+    }\n+\n+    return CBitcoinAddress(account.vchPubKey.GetID());\n+}\n+\n+bool CWallet::SetAccount(const CBitcoinAddress address, const std::string strAccount)\n+{\n+    // Detect when changing the account of an address that is the 'unused current key' of another account:\n+    CTxDestination dest = address.Get();\n+\tif (mapAddressBook.count(dest))\n+    {\n+        string strOldAccount = mapAddressBook[dest];\n+        if (address == GetAccountAddress(strOldAccount, false) && !GetAccountAddress(strOldAccount, true).IsValid())\n+            return false;\n+    }\n+\n+    return SetAddressBookName(dest, strAccount);\n+}"
      },
      {
        "sha": "18707dca37d12d88cdc837b5805bb4867fb32ef9",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f08745e91048396d7338aabf13b0be13a4880735/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f08745e91048396d7338aabf13b0be13a4880735/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=f08745e91048396d7338aabf13b0be13a4880735",
        "patch": "@@ -290,6 +290,8 @@ class CWallet : public CCryptoKeyStore\n     bool GetTransaction(const uint256 &hashTx, CWalletTx& wtx);\n \n     bool SetDefaultKey(const CPubKey &vchPubKey);\n+    CBitcoinAddress GetAccountAddress(const std::string strAccount, bool bForceNew);\n+    bool SetAccount(const CBitcoinAddress address, const std::string strAccount);\n \n     // signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);"
      }
    ]
  },
  {
    "sha": "4e32558e141e3fdb65fb7a651a7903cd676423d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTMyNTU4ZTE0MWUzZmRiNjVmYjdhNjUxYTc5MDNjZDY3NjQyM2Qw",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-05T17:23:22Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-26T20:39:25Z"
      },
      "message": "move some stuff touched by setaccount into methods of CWallet",
      "tree": {
        "sha": "f54c7da7f48bc407a73be83090cef374aa6bded6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f54c7da7f48bc407a73be83090cef374aa6bded6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e32558e141e3fdb65fb7a651a7903cd676423d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e32558e141e3fdb65fb7a651a7903cd676423d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e32558e141e3fdb65fb7a651a7903cd676423d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e32558e141e3fdb65fb7a651a7903cd676423d0/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f08745e91048396d7338aabf13b0be13a4880735",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08745e91048396d7338aabf13b0be13a4880735",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f08745e91048396d7338aabf13b0be13a4880735"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 35,
      "deletions": 27
    },
    "files": [
      {
        "sha": "21ce3f61c8b5938ac7d13b209ef0d074434fbb96",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 27,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e32558e141e3fdb65fb7a651a7903cd676423d0/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e32558e141e3fdb65fb7a651a7903cd676423d0/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=4e32558e141e3fdb65fb7a651a7903cd676423d0",
        "patch": "@@ -331,7 +331,6 @@ Value verifymessage(const Array& params, bool fHelp)\n     return (key.GetPubKey().GetID() == keyID);\n }\n \n-\n Value getreceivedbyaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -341,34 +340,13 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n \n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n-    CScript scriptPubKey;\n-    if (!address.IsValid())\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    scriptPubKey.SetDestination(address.Get());\n-    // TODO: Should look like if (!pwalletMain->IsMyAddress(address))\n-    if (!IsMine(*pwalletMain, scriptPubKey))\n-        return (double)0.0;\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n     if (params.size() > 1)\n         nMinDepth = params[1].get_int();\n \n-    // TODO: Replace whole block with return ValueFromAmount(pwalletMain->GetAddressTally(nMinDepth))\n-    // Tally\n-    int64 nAmount = 0;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n-    {\n-        const CWalletTx& wtx = (*it).second;\n-        if (wtx.IsCoinBase() || !wtx.IsFinal())\n-            continue;\n-\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-            if (txout.scriptPubKey == scriptPubKey && wtx.GetDepthInMainChain() >= nMinDepth)\n-                nAmount += txout.nValue;\n-    }\n-\n-    return  ValueFromAmount(nAmount);\n+    return ValueFromAmount(pwalletMain->GetAddressTally(address, nMinDepth));\n }\n \n // TODO: Move to set<CTxDestination> CWallet::GetAccountAddresses(const std::string strAccount)\n@@ -412,7 +390,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             CTxDestination address;\n-            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwalletMain, address) && setAddress.count(address))\n+            if (ExtractDestination(txout.scriptPubKey, address) && pwalletMain->IsMyAddress(address) && setAddress.count(address))\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n         }\n@@ -805,7 +783,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             CTxDestination address;\n-            if (!ExtractDestination(txout.scriptPubKey, address) || !IsMine(*pwalletMain, address))\n+            if (!ExtractDestination(txout.scriptPubKey, address) || !pwalletMain->IsMyAddress(address))\n                 continue;\n \n             tallyitem& item = mapTally[address];\n@@ -1051,7 +1029,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     // TODO: return ObjectFromMap(pwalletMain->GetAccountList(int nMindepth);\n     map<string, int64> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& entry, pwalletMain->mapAddressBook) {\n-        if (IsMine(*pwalletMain, entry.first)) // This address belongs to me\n+        if (pwalletMain->IsMyAddress(CBitcoinAddress(entry.first))) // This address belongs to me\n             mapAccountBalances[entry.second] = 0;\n     }\n \n@@ -1450,7 +1428,7 @@ Value validateaddress(const Array& params, bool fHelp)\n         CTxDestination dest = address.Get();\n         string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n-        bool fMine = IsMine(*pwalletMain, dest);\n+        bool fMine = pwalletMain->IsMyAddress(address);\n         ret.push_back(Pair(\"ismine\", fMine));\n         if (fMine) {\n             Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);"
      },
      {
        "sha": "003c0b78293b50e76a0de94480aa4198b30bfb2d",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e32558e141e3fdb65fb7a651a7903cd676423d0/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e32558e141e3fdb65fb7a651a7903cd676423d0/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=4e32558e141e3fdb65fb7a651a7903cd676423d0",
        "patch": "@@ -1859,3 +1859,31 @@ bool CWallet::SetAccount(const CBitcoinAddress address, const std::string strAcc\n \n     return SetAddressBookName(dest, strAccount);\n }\n+\n+bool CWallet::IsMyAddress(const CBitcoinAddress& address) const\n+{\n+    CScript scriptPubKey;\n+    scriptPubKey.SetDestination(address.Get());\n+    return ::IsMine(*this, scriptPubKey);\n+}\n+\n+int64 CWallet::GetAddressTally(const CBitcoinAddress address, int nMinDepth)\n+{\n+    if (!IsMyAddress(address))\n+        return 0;\n+\n+    int64 nAmount = 0;\n+    CScript scriptPubKey;\n+    scriptPubKey.SetDestination(address.Get());\n+    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+    {\n+        const CWalletTx& wtx = (*it).second;\n+        if (wtx.IsCoinBase() || !wtx.IsFinal())\n+            continue;\n+\n+        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            if (txout.scriptPubKey == scriptPubKey && wtx.GetDepthInMainChain() >= nMinDepth)\n+                nAmount += txout.nValue;\n+    }\n+    return nAmount;\n+}"
      },
      {
        "sha": "162d0aad48a5cde644f547b224ecc3dffb8c2ede",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e32558e141e3fdb65fb7a651a7903cd676423d0/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e32558e141e3fdb65fb7a651a7903cd676423d0/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=4e32558e141e3fdb65fb7a651a7903cd676423d0",
        "patch": "@@ -203,6 +203,7 @@ class CWallet : public CCryptoKeyStore\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n+    bool IsMyAddress(const CBitcoinAddress& address) const;\n     int64 GetCredit(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n@@ -292,6 +293,7 @@ class CWallet : public CCryptoKeyStore\n     bool SetDefaultKey(const CPubKey &vchPubKey);\n     CBitcoinAddress GetAccountAddress(const std::string strAccount, bool bForceNew);\n     bool SetAccount(const CBitcoinAddress address, const std::string strAccount);\n+    int64 GetAddressTally(const CBitcoinAddress address, int nMinDepth);\n \n     // signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);"
      }
    ]
  },
  {
    "sha": "539e241d8113da9f1a067c506e47cdb8728aec88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzllMjQxZDgxMTNkYTlmMWEwNjdjNTA2ZTQ3Y2RiODcyOGFlYzg4",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-06T17:16:56Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-26T20:39:26Z"
      },
      "message": "Some touch-ups per Diapolo's diff comments.",
      "tree": {
        "sha": "f95c80f88e4de136278cc970f502465bb4257c56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f95c80f88e4de136278cc970f502465bb4257c56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/539e241d8113da9f1a067c506e47cdb8728aec88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/539e241d8113da9f1a067c506e47cdb8728aec88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/539e241d8113da9f1a067c506e47cdb8728aec88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/539e241d8113da9f1a067c506e47cdb8728aec88/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e32558e141e3fdb65fb7a651a7903cd676423d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e32558e141e3fdb65fb7a651a7903cd676423d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e32558e141e3fdb65fb7a651a7903cd676423d0"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 15,
      "deletions": 10
    },
    "files": [
      {
        "sha": "160b548f8e9fe337cbc7eca8ff1cc4bfd118b5a3",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/539e241d8113da9f1a067c506e47cdb8728aec88/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/539e241d8113da9f1a067c506e47cdb8728aec88/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=539e241d8113da9f1a067c506e47cdb8728aec88",
        "patch": "@@ -168,10 +168,13 @@ Value getaccount(const Array& params, bool fHelp)\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n+    // TODO: Exception if !pwalletMain->IsMyAddress(address)?\n     string strAccount;\n+    // TODO: std::string CWallet::GetAccount(const CBitcoinAddress& address)\n     map<CTxDestination, string>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n     if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.empty())\n         strAccount = (*mi).second;\n+    // TODO: Exception if account not found?\n     return strAccount;\n }\n \n@@ -185,6 +188,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     string strAccount = AccountFromValue(params[0]);\n \n     // Find all addresses that have the given account\n+    // TODO: return VectorToArray(pwalletMain->GetAddressesByAccount(strAccount));\n     Array ret;\n     // TODO: Move bulk to std::vector<string> CWallet::GetAddressesByAccount(const std::string strAccount)\n     BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n@@ -212,6 +216,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     // Amount\n     int64 nAmount = AmountFromValue(params[1]);\n \n+    // TODO: string strError = pwalletMain->SendToAddress(address, nAmount, comment, commentto);\n     // Wallet comments\n     CWalletTx wtx;\n     if (params.size() > 2 && params[2].type() != null_type && !params[2].get_str().empty())\n@@ -390,7 +395,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             CTxDestination address;\n-            if (ExtractDestination(txout.scriptPubKey, address) && pwalletMain->IsMyAddress(address) && setAddress.count(address))\n+            if (ExtractDestination(txout.scriptPubKey, address) && pwalletMain->IsMine(address) && setAddress.count(address))\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n         }\n@@ -783,7 +788,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             CTxDestination address;\n-            if (!ExtractDestination(txout.scriptPubKey, address) || !pwalletMain->IsMyAddress(address))\n+            if (!ExtractDestination(txout.scriptPubKey, address) || !pwalletMain->IsMine(address))\n                 continue;\n \n             tallyitem& item = mapTally[address];\n@@ -1029,7 +1034,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     // TODO: return ObjectFromMap(pwalletMain->GetAccountList(int nMindepth);\n     map<string, int64> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& entry, pwalletMain->mapAddressBook) {\n-        if (pwalletMain->IsMyAddress(CBitcoinAddress(entry.first))) // This address belongs to me\n+        if (pwalletMain->IsMine(CBitcoinAddress(entry.first))) // This address belongs to me\n             mapAccountBalances[entry.second] = 0;\n     }\n \n@@ -1428,7 +1433,7 @@ Value validateaddress(const Array& params, bool fHelp)\n         CTxDestination dest = address.Get();\n         string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n-        bool fMine = pwalletMain->IsMyAddress(address);\n+        bool fMine = pwalletMain->IsMine(address);\n         ret.push_back(Pair(\"ismine\", fMine));\n         if (fMine) {\n             Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);"
      },
      {
        "sha": "68c9c1bfec6077c303da254344e2c5480e9701ba",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/539e241d8113da9f1a067c506e47cdb8728aec88/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/539e241d8113da9f1a067c506e47cdb8728aec88/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=539e241d8113da9f1a067c506e47cdb8728aec88",
        "patch": "@@ -1834,9 +1834,9 @@ CBitcoinAddress CWallet::GetAccountAddress(const std::string strAccount, bool bF\n     // Generate a new key\n     if (!account.vchPubKey.IsValid() || bForceNew || bKeyUsed)\n     {\n-    \t// Caller must check validity to detect keypool depletion\n+        // Caller must check validity to detect keypool depletion\n         if (!GetKeyFromPool(account.vchPubKey, false))\n-        \treturn CBitcoinAddress();\n+            return CBitcoinAddress();\n \n         // TODO: Do something with the return code\n         SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n@@ -1850,7 +1850,7 @@ bool CWallet::SetAccount(const CBitcoinAddress address, const std::string strAcc\n {\n     // Detect when changing the account of an address that is the 'unused current key' of another account:\n     CTxDestination dest = address.Get();\n-\tif (mapAddressBook.count(dest))\n+    if (mapAddressBook.count(dest))\n     {\n         string strOldAccount = mapAddressBook[dest];\n         if (address == GetAccountAddress(strOldAccount, false) && !GetAccountAddress(strOldAccount, true).IsValid())\n@@ -1860,7 +1860,7 @@ bool CWallet::SetAccount(const CBitcoinAddress address, const std::string strAcc\n     return SetAddressBookName(dest, strAccount);\n }\n \n-bool CWallet::IsMyAddress(const CBitcoinAddress& address) const\n+bool CWallet::IsMine(const CBitcoinAddress& address) const\n {\n     CScript scriptPubKey;\n     scriptPubKey.SetDestination(address.Get());\n@@ -1869,7 +1869,7 @@ bool CWallet::IsMyAddress(const CBitcoinAddress& address) const\n \n int64 CWallet::GetAddressTally(const CBitcoinAddress address, int nMinDepth)\n {\n-    if (!IsMyAddress(address))\n+    if (!IsMine(address))\n         return 0;\n \n     int64 nAmount = 0;"
      },
      {
        "sha": "466e2a994727427bb1eaf344927a88a13946656e",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/539e241d8113da9f1a067c506e47cdb8728aec88/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/539e241d8113da9f1a067c506e47cdb8728aec88/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=539e241d8113da9f1a067c506e47cdb8728aec88",
        "patch": "@@ -203,7 +203,7 @@ class CWallet : public CCryptoKeyStore\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n-    bool IsMyAddress(const CBitcoinAddress& address) const;\n+    bool IsMine(const CBitcoinAddress& address) const;\n     int64 GetCredit(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))"
      }
    ]
  },
  {
    "sha": "6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjhmMzViZGE4ZDUyYmQ0YmViZjQ0NmEyZjVjMTU2MWUzYjAwZWNh",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-07T22:49:56Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-26T20:40:03Z"
      },
      "message": "make GetAccountBalance a method of CWallet; clean up some spacing",
      "tree": {
        "sha": "0a6e23b80d01b8ac38bdf5f96ecfc4990df0d428",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a6e23b80d01b8ac38bdf5f96ecfc4990df0d428"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "539e241d8113da9f1a067c506e47cdb8728aec88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/539e241d8113da9f1a067c506e47cdb8728aec88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/539e241d8113da9f1a067c506e47cdb8728aec88"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 31,
      "deletions": 45
    },
    "files": [
      {
        "sha": "a6c1fd59da9b36229da7c70c8f64bce217d1fa3f",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 45,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca",
        "patch": "@@ -404,40 +404,6 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     return (double)nAmount / (double)COIN;\n }\n \n-// TODO: Move to int64 CWallet::GetAccountBalance(const string& strAccount, const int nMinDepth)\n-int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n-{\n-    int64 nBalance = 0;\n-\n-    // Tally wallet transactions\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n-    {\n-        const CWalletTx& wtx = (*it).second;\n-        if (!wtx.IsFinal())\n-            continue;\n-\n-        int64 nReceived, nSent, nFee;\n-        wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee);\n-\n-        if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n-            nBalance += nReceived;\n-        nBalance -= nSent + nFee;\n-    }\n-\n-    // Tally internal accounting entries\n-    nBalance += walletdb.GetAccountCreditDebit(strAccount);\n-\n-    return nBalance;\n-}\n-\n-// TODO: Move to int64 CWallet::GetAccountBalance(const string& strAccount, const int nMinDepth)\n-int64 GetAccountBalance(const string& strAccount, int nMinDepth)\n-{\n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n-    return GetAccountBalance(walletdb, strAccount, nMinDepth);\n-}\n-\n-\n Value getbalance(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n@@ -484,12 +450,11 @@ Value getbalance(const Array& params, bool fHelp)\n \n     string strAccount = AccountFromValue(params[0]);\n \n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64 nBalance = pwalletMain->GetAccountBalance(strAccount, nMinDepth);\n \n     return ValueFromAmount(nBalance);\n }\n \n-\n Value movecmd(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 3 || params.size() > 5)\n@@ -540,7 +505,6 @@ Value movecmd(const Array& params, bool fHelp)\n     return true;\n }\n \n-\n Value sendfrom(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 3 || params.size() > 6)\n@@ -568,7 +532,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64 nBalance = pwalletMain->GetAccountBalance(strAccount, nMinDepth);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -580,7 +544,6 @@ Value sendfrom(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n-\n Value sendmany(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 4)\n@@ -625,7 +588,7 @@ Value sendmany(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64 nBalance = pwalletMain->GetAccountBalance(strAccount, nMinDepth);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -1167,7 +1130,6 @@ Value gettransaction(const Array& params, bool fHelp)\n     return entry;\n }\n \n-\n Value backupwallet(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n@@ -1182,7 +1144,6 @@ Value backupwallet(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n-\n Value keypoolrefill(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 0)\n@@ -1292,7 +1253,6 @@ Value walletpassphrase(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n-\n Value walletpassphrasechange(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n@@ -1325,7 +1285,6 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n-\n Value walletlock(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 0))\n@@ -1348,7 +1307,6 @@ Value walletlock(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n-\n Value encryptwallet(const Array& params, bool fHelp)\n {\n     if (!pwalletMain->IsCrypted() && (fHelp || params.size() != 1))"
      },
      {
        "sha": "d8049bdf3b006da0c528d56263e0583f73138c03",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca",
        "patch": "@@ -1887,3 +1887,30 @@ int64 CWallet::GetAddressTally(const CBitcoinAddress address, int nMinDepth)\n     }\n     return nAmount;\n }\n+\n+int64 CWallet::GetAccountBalance(const string& strAccount, int nMinDepth)\n+{\n+\tCWalletDB walletdb(strWalletFile);\n+    int64 nBalance = 0;\n+    // Moved out of loop to avoid some unneeded operations\n+    int64 nReceived, nSent, nFee;\n+\n+    // Tally wallet transactions\n+    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+    {\n+        const CWalletTx& wtx = (*it).second;\n+        if (!wtx.IsFinal())\n+            continue;\n+\n+        wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee);\n+\n+        if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n+            nBalance += nReceived;\n+        nBalance -= nSent + nFee;\n+    }\n+\n+    // Tally internal accounting entries\n+    nBalance += walletdb.GetAccountCreditDebit(strAccount);\n+\n+    return nBalance;\n+}"
      },
      {
        "sha": "54876231cc42d435edec8bfb8e6a7fd5683cfaf8",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca",
        "patch": "@@ -293,6 +293,7 @@ class CWallet : public CCryptoKeyStore\n     bool SetDefaultKey(const CPubKey &vchPubKey);\n     CBitcoinAddress GetAccountAddress(const std::string strAccount, bool bForceNew);\n     bool SetAccount(const CBitcoinAddress address, const std::string strAccount);\n+    int64 GetAccountBalance(const std::string& strAccount, int nMinDepth);\n     int64 GetAddressTally(const CBitcoinAddress address, int nMinDepth);\n \n     // signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower"
      }
    ]
  },
  {
    "sha": "d4c4aadb7b8f2c94846635b01fb6264ea2a1f414",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGM0YWFkYjdiOGYyYzk0ODQ2NjM1YjAxZmI2MjY0ZWEyYTFmNDE0",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-07T23:35:44Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-26T20:40:03Z"
      },
      "message": "make GetAccountAddresses into a method of CWallet",
      "tree": {
        "sha": "b60fa03f0930f184a689723228b1b80f5fe2746f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b60fa03f0930f184a689723228b1b80f5fe2746f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4c4aadb7b8f2c94846635b01fb6264ea2a1f414",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4c4aadb7b8f2c94846635b01fb6264ea2a1f414",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4c4aadb7b8f2c94846635b01fb6264ea2a1f414",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4c4aadb7b8f2c94846635b01fb6264ea2a1f414/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f8f35bda8d52bd4bebf446a2f5c1561e3b00eca"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 16,
      "deletions": 14
    },
    "files": [
      {
        "sha": "ded28c1ccd55c1dd80ddfa51d6fdf0d739fe3798",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 14,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4c4aadb7b8f2c94846635b01fb6264ea2a1f414/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4c4aadb7b8f2c94846635b01fb6264ea2a1f414/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=d4c4aadb7b8f2c94846635b01fb6264ea2a1f414",
        "patch": "@@ -354,18 +354,6 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n     return ValueFromAmount(pwalletMain->GetAddressTally(address, nMinDepth));\n }\n \n-// TODO: Move to set<CTxDestination> CWallet::GetAccountAddresses(const std::string strAccount)\n-void GetAccountAddresses(string strAccount, set<CTxDestination>& setAddress)\n-{\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& item, pwalletMain->mapAddressBook)\n-    {\n-        const CTxDestination& address = item.first;\n-        const string& strName = item.second;\n-        if (strName == strAccount)\n-            setAddress.insert(address);\n-    }\n-}\n-\n Value getreceivedbyaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -380,8 +368,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n \n     // Get the set of pub keys assigned to account\n     string strAccount = AccountFromValue(params[0]);\n-    set<CTxDestination> setAddress;\n-    GetAccountAddresses(strAccount, setAddress);\n+    set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n \n     // TODO: Replace whole block with return ValueFromAmount(pwalletMain->GetAccountTally(strAccount, nMinDepth))\n     // Tally"
      },
      {
        "sha": "cf1f3d7a3832563628bda79365f62b3e11cd4cf3",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4c4aadb7b8f2c94846635b01fb6264ea2a1f414/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4c4aadb7b8f2c94846635b01fb6264ea2a1f414/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=d4c4aadb7b8f2c94846635b01fb6264ea2a1f414",
        "patch": "@@ -1914,3 +1914,17 @@ int64 CWallet::GetAccountBalance(const string& strAccount, int nMinDepth)\n \n     return nBalance;\n }\n+\n+// TODO: Move to set<CTxDestination> CWallet::GetAccountAddresses(const std::string strAccount)\n+std::set<CTxDestination> CWallet::GetAccountAddresses(std::string strAccount)\n+{\n+\tset<CTxDestination> setRet;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& item, mapAddressBook)\n+    {\n+        const CTxDestination& address = item.first;\n+        const string& strName = item.second;\n+        if (strName == strAccount)\n+            setRet.insert(address);\n+    }\n+    return setRet;\n+}"
      },
      {
        "sha": "09ee74c1b544b2367e486f9f8fb6b8e4b1884bee",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4c4aadb7b8f2c94846635b01fb6264ea2a1f414/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4c4aadb7b8f2c94846635b01fb6264ea2a1f414/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=d4c4aadb7b8f2c94846635b01fb6264ea2a1f414",
        "patch": "@@ -295,6 +295,7 @@ class CWallet : public CCryptoKeyStore\n     bool SetAccount(const CBitcoinAddress address, const std::string strAccount);\n     int64 GetAccountBalance(const std::string& strAccount, int nMinDepth);\n     int64 GetAddressTally(const CBitcoinAddress address, int nMinDepth);\n+    std::set<CTxDestination> GetAccountAddresses(std::string strAccount);\n \n     // signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);"
      }
    ]
  },
  {
    "sha": "981ff1fc12e87f76f9619f38eee950bf237b8058",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODFmZjFmYzEyZTg3Zjc2Zjk2MTlmMzhlZWU5NTBiZjIzN2I4MDU4",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-07T23:46:19Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-26T20:40:03Z"
      },
      "message": "snip an unneeded comment; inline a couple of variables in\nCWallet::GetAccountAddresses()",
      "tree": {
        "sha": "584dc2b3cd61bcc302e532dc3a294bb472dca54e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/584dc2b3cd61bcc302e532dc3a294bb472dca54e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/981ff1fc12e87f76f9619f38eee950bf237b8058",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/981ff1fc12e87f76f9619f38eee950bf237b8058",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/981ff1fc12e87f76f9619f38eee950bf237b8058",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/981ff1fc12e87f76f9619f38eee950bf237b8058/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4c4aadb7b8f2c94846635b01fb6264ea2a1f414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4c4aadb7b8f2c94846635b01fb6264ea2a1f414",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4c4aadb7b8f2c94846635b01fb6264ea2a1f414"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "eb9aa4ab9d245032a6dcb6b7dd536ec61f64282b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/981ff1fc12e87f76f9619f38eee950bf237b8058/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/981ff1fc12e87f76f9619f38eee950bf237b8058/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=981ff1fc12e87f76f9619f38eee950bf237b8058",
        "patch": "@@ -1915,16 +1915,14 @@ int64 CWallet::GetAccountBalance(const string& strAccount, int nMinDepth)\n     return nBalance;\n }\n \n-// TODO: Move to set<CTxDestination> CWallet::GetAccountAddresses(const std::string strAccount)\n std::set<CTxDestination> CWallet::GetAccountAddresses(std::string strAccount)\n {\n \tset<CTxDestination> setRet;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& item, mapAddressBook)\n     {\n-        const CTxDestination& address = item.first;\n-        const string& strName = item.second;\n-        if (strName == strAccount)\n-            setRet.insert(address);\n+        if (item.second == strAccount)\n+        \t// push address into set\n+            setRet.insert(item.first);\n     }\n     return setRet;\n }"
      }
    ]
  },
  {
    "sha": "79fd78ad2cdfd7ccdd9ef0bf4d15d11848bd20d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OWZkNzhhZDJjZGZkN2NjZGQ5ZWYwYmY0ZDE1ZDExODQ4YmQyMGQ2",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-08T00:14:13Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-26T20:40:03Z"
      },
      "message": "use CWallet::GetAccountAddresses() in getaddressesbyaccount()",
      "tree": {
        "sha": "4cd3e20794dcab4fd0603b876dd33aa09a64b5e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cd3e20794dcab4fd0603b876dd33aa09a64b5e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79fd78ad2cdfd7ccdd9ef0bf4d15d11848bd20d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79fd78ad2cdfd7ccdd9ef0bf4d15d11848bd20d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79fd78ad2cdfd7ccdd9ef0bf4d15d11848bd20d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79fd78ad2cdfd7ccdd9ef0bf4d15d11848bd20d6/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "981ff1fc12e87f76f9619f38eee950bf237b8058",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/981ff1fc12e87f76f9619f38eee950bf237b8058",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/981ff1fc12e87f76f9619f38eee950bf237b8058"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 4,
      "deletions": 9
    },
    "files": [
      {
        "sha": "1dbd100e5e65190c686c5b89f48dbb7eead582ce",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79fd78ad2cdfd7ccdd9ef0bf4d15d11848bd20d6/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79fd78ad2cdfd7ccdd9ef0bf4d15d11848bd20d6/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=79fd78ad2cdfd7ccdd9ef0bf4d15d11848bd20d6",
        "patch": "@@ -188,16 +188,11 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     string strAccount = AccountFromValue(params[0]);\n \n     // Find all addresses that have the given account\n-    // TODO: return VectorToArray(pwalletMain->GetAddressesByAccount(strAccount));\n+    // TODO: use vectors instead of sets?\n+    std::set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n     Array ret;\n-    // TODO: Move bulk to std::vector<string> CWallet::GetAddressesByAccount(const std::string strAccount)\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n-    {\n-        const CBitcoinAddress& address = item.first;\n-        const string& strName = item.second;\n-        if (strName == strAccount)\n-            ret.push_back(address.ToString());\n-    }\n+    BOOST_FOREACH(const CTxDestination& item, setAddress)\n+    \tret.push_back(CBitcoinAddress(item).ToString());\n     return ret;\n }\n "
      }
    ]
  },
  {
    "sha": "15cf6f3db5829f9694feeab2ba07cec21055e257",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWNmNmYzZGI1ODI5Zjk2OTRmZWVhYjJiYTA3Y2VjMjEwNTVlMjU3",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-08T21:36:39Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-26T20:40:03Z"
      },
      "message": "indentation fix",
      "tree": {
        "sha": "49771d644b04d98245595a29b2e205aec71d7981",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49771d644b04d98245595a29b2e205aec71d7981"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15cf6f3db5829f9694feeab2ba07cec21055e257",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15cf6f3db5829f9694feeab2ba07cec21055e257",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15cf6f3db5829f9694feeab2ba07cec21055e257",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15cf6f3db5829f9694feeab2ba07cec21055e257/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79fd78ad2cdfd7ccdd9ef0bf4d15d11848bd20d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79fd78ad2cdfd7ccdd9ef0bf4d15d11848bd20d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79fd78ad2cdfd7ccdd9ef0bf4d15d11848bd20d6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f5583e60d0c9f6c9856fdbba4544083981fc2dcb",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15cf6f3db5829f9694feeab2ba07cec21055e257/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15cf6f3db5829f9694feeab2ba07cec21055e257/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=15cf6f3db5829f9694feeab2ba07cec21055e257",
        "patch": "@@ -192,7 +192,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     std::set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n     Array ret;\n     BOOST_FOREACH(const CTxDestination& item, setAddress)\n-    \tret.push_back(CBitcoinAddress(item).ToString());\n+        ret.push_back(CBitcoinAddress(item).ToString());\n     return ret;\n }\n "
      }
    ]
  },
  {
    "sha": "603970d71ec9ca99fd0100179b9ff7c1a2f4c116",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDM5NzBkNzFlYzljYTk5ZmQwMTAwMTc5YjlmZjdjMWEyZjRjMTE2",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-25T20:59:54Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-26T20:40:04Z"
      },
      "message": "Remove CBitcoinAddress deps in wallet.cpp; Remove an inappropriate TODO.",
      "tree": {
        "sha": "4510e304ee800becba92a6830fa98156c918187e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4510e304ee800becba92a6830fa98156c918187e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/603970d71ec9ca99fd0100179b9ff7c1a2f4c116",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/603970d71ec9ca99fd0100179b9ff7c1a2f4c116",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/603970d71ec9ca99fd0100179b9ff7c1a2f4c116",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/603970d71ec9ca99fd0100179b9ff7c1a2f4c116/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15cf6f3db5829f9694feeab2ba07cec21055e257",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15cf6f3db5829f9694feeab2ba07cec21055e257",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15cf6f3db5829f9694feeab2ba07cec21055e257"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 14,
      "deletions": 16
    },
    "files": [
      {
        "sha": "e650a521cfb761d92be720f07341afac2f3decd2",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/603970d71ec9ca99fd0100179b9ff7c1a2f4c116/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/603970d71ec9ca99fd0100179b9ff7c1a2f4c116/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=603970d71ec9ca99fd0100179b9ff7c1a2f4c116",
        "patch": "@@ -131,7 +131,7 @@ Value getaccountaddress(const Array& params, bool fHelp)\n \n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount = AccountFromValue(params[0]);\n-    CBitcoinAddress address = pwalletMain->GetAccountAddress(strAccount, false);\n+    CBitcoinAddress address = CBitcoinAddress(pwalletMain->GetAccountAddress(strAccount, false));\n     if (address.IsValid())\n     \treturn address.ToString();\n     throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n@@ -153,7 +153,7 @@ Value setaccount(const Array& params, bool fHelp)\n         strAccount = AccountFromValue(params[1]);\n \n     // TODO: Use the return code for something\n-    pwalletMain->SetAccount(address, strAccount);\n+    pwalletMain->SetAccount(address.Get(), strAccount);\n     return Value::null;\n }\n \n@@ -346,7 +346,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n     if (params.size() > 1)\n         nMinDepth = params[1].get_int();\n \n-    return ValueFromAmount(pwalletMain->GetAddressTally(address, nMinDepth));\n+    return ValueFromAmount(pwalletMain->GetAddressTally(address.Get(), nMinDepth));\n }\n \n Value getreceivedbyaccount(const Array& params, bool fHelp)\n@@ -402,7 +402,6 @@ Value getbalance(const Array& params, bool fHelp)\n         nMinDepth = params[1].get_int();\n \n     if (params[0].get_str() == \"*\") {\n-    \t// TODO: Why is there a \"different way\" if both \"should always return the same number\"?\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and getbalance '*' should always return the same number."
      },
      {
        "sha": "c3f78f7be414f054a20c747a052dea8ba53e9f1c",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/603970d71ec9ca99fd0100179b9ff7c1a2f4c116/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/603970d71ec9ca99fd0100179b9ff7c1a2f4c116/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=603970d71ec9ca99fd0100179b9ff7c1a2f4c116",
        "patch": "@@ -1804,7 +1804,7 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n     }\n }\n \n-CBitcoinAddress CWallet::GetAccountAddress(const std::string strAccount, bool bForceNew=false)\n+CTxDestination CWallet::GetAccountAddress(const std::string strAccount, bool bForceNew=false)\n {\n     CWalletDB walletdb(strWalletFile);\n     CAccount account;\n@@ -1836,24 +1836,23 @@ CBitcoinAddress CWallet::GetAccountAddress(const std::string strAccount, bool bF\n     {\n         // Caller must check validity to detect keypool depletion\n         if (!GetKeyFromPool(account.vchPubKey, false))\n-            return CBitcoinAddress();\n+            return CTxDestination();\n \n         // TODO: Do something with the return code\n         SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n         walletdb.WriteAccount(strAccount, account);\n     }\n \n-    return CBitcoinAddress(account.vchPubKey.GetID());\n+    return CTxDestination(account.vchPubKey.GetID());\n }\n \n-bool CWallet::SetAccount(const CBitcoinAddress address, const std::string strAccount)\n+bool CWallet::SetAccount(const CTxDestination& dest, const std::string strAccount)\n {\n     // Detect when changing the account of an address that is the 'unused current key' of another account:\n-    CTxDestination dest = address.Get();\n     if (mapAddressBook.count(dest))\n     {\n         string strOldAccount = mapAddressBook[dest];\n-        if (address == GetAccountAddress(strOldAccount, false) && !GetAccountAddress(strOldAccount, true).IsValid())\n+        if (dest == GetAccountAddress(strOldAccount, false) && !CBitcoinAddress(GetAccountAddress(strOldAccount, true)).IsValid())\n             return false;\n     }\n \n@@ -1867,14 +1866,14 @@ bool CWallet::IsMine(const CBitcoinAddress& address) const\n     return ::IsMine(*this, scriptPubKey);\n }\n \n-int64 CWallet::GetAddressTally(const CBitcoinAddress address, int nMinDepth)\n+int64 CWallet::GetAddressTally(const CTxDestination& dest, int nMinDepth)\n {\n-    if (!IsMine(address))\n+    if (!IsMine(CBitcoinAddress(dest)))\n         return 0;\n \n     int64 nAmount = 0;\n     CScript scriptPubKey;\n-    scriptPubKey.SetDestination(address.Get());\n+    scriptPubKey.SetDestination(dest);\n     for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;"
      },
      {
        "sha": "f2293003e7d4238cf84562088b40e62bec6a0ae7",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/603970d71ec9ca99fd0100179b9ff7c1a2f4c116/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/603970d71ec9ca99fd0100179b9ff7c1a2f4c116/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=603970d71ec9ca99fd0100179b9ff7c1a2f4c116",
        "patch": "@@ -291,10 +291,10 @@ class CWallet : public CCryptoKeyStore\n     bool GetTransaction(const uint256 &hashTx, CWalletTx& wtx);\n \n     bool SetDefaultKey(const CPubKey &vchPubKey);\n-    CBitcoinAddress GetAccountAddress(const std::string strAccount, bool bForceNew);\n-    bool SetAccount(const CBitcoinAddress address, const std::string strAccount);\n+    CTxDestination GetAccountAddress(const std::string strAccount, bool bForceNew);\n+    bool SetAccount(const CTxDestination& dest, const std::string strAccount);\n     int64 GetAccountBalance(const std::string& strAccount, int nMinDepth);\n-    int64 GetAddressTally(const CBitcoinAddress address, int nMinDepth);\n+    int64 GetAddressTally(const CTxDestination& dest, int nMinDepth);\n     std::set<CTxDestination> GetAccountAddresses(std::string strAccount);\n \n     // signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower"
      }
    ]
  },
  {
    "sha": "cf9949e19101802fc76e144c10bb3ef68b0a58d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjk5NDllMTkxMDE4MDJmYzc2ZTE0NGMxMGJiM2VmNjhiMGE1OGQ3",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-27T15:45:33Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-27T15:45:33Z"
      },
      "message": "replace CWallet::IsMine(CBitcoinAddress&) with\nCWallet::IsMine(CTxDestination&)",
      "tree": {
        "sha": "8166110fb20653a303018ec53152aab1f9d4bb75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8166110fb20653a303018ec53152aab1f9d4bb75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf9949e19101802fc76e144c10bb3ef68b0a58d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf9949e19101802fc76e144c10bb3ef68b0a58d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf9949e19101802fc76e144c10bb3ef68b0a58d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf9949e19101802fc76e144c10bb3ef68b0a58d7/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "603970d71ec9ca99fd0100179b9ff7c1a2f4c116",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/603970d71ec9ca99fd0100179b9ff7c1a2f4c116",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/603970d71ec9ca99fd0100179b9ff7c1a2f4c116"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 7,
      "deletions": 11
    },
    "files": [
      {
        "sha": "8be15a4dfde527c202746257e6e2e6c1cb4f2b8a",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9949e19101802fc76e144c10bb3ef68b0a58d7/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9949e19101802fc76e144c10bb3ef68b0a58d7/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=cf9949e19101802fc76e144c10bb3ef68b0a58d7",
        "patch": "@@ -978,7 +978,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     // TODO: return ObjectFromMap(pwalletMain->GetAccountList(int nMindepth);\n     map<string, int64> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& entry, pwalletMain->mapAddressBook) {\n-        if (pwalletMain->IsMine(CBitcoinAddress(entry.first))) // This address belongs to me\n+        if (pwalletMain->IsMine(entry.first)) // This address belongs to me\n             mapAccountBalances[entry.second] = 0;\n     }\n \n@@ -1372,7 +1372,7 @@ Value validateaddress(const Array& params, bool fHelp)\n         CTxDestination dest = address.Get();\n         string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n-        bool fMine = pwalletMain->IsMine(address);\n+        bool fMine = pwalletMain->IsMine(dest);\n         ret.push_back(Pair(\"ismine\", fMine));\n         if (fMine) {\n             Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);"
      },
      {
        "sha": "0bd6568d128baacc6908f5851b8e7d649958ab4f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9949e19101802fc76e144c10bb3ef68b0a58d7/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9949e19101802fc76e144c10bb3ef68b0a58d7/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=cf9949e19101802fc76e144c10bb3ef68b0a58d7",
        "patch": "@@ -1859,16 +1859,9 @@ bool CWallet::SetAccount(const CTxDestination& dest, const std::string strAccoun\n     return SetAddressBookName(dest, strAccount);\n }\n \n-bool CWallet::IsMine(const CBitcoinAddress& address) const\n-{\n-    CScript scriptPubKey;\n-    scriptPubKey.SetDestination(address.Get());\n-    return ::IsMine(*this, scriptPubKey);\n-}\n-\n int64 CWallet::GetAddressTally(const CTxDestination& dest, int nMinDepth)\n {\n-    if (!IsMine(CBitcoinAddress(dest)))\n+    if (!IsMine(dest))\n         return 0;\n \n     int64 nAmount = 0;"
      },
      {
        "sha": "036697519ed9ef32da3c8523bcc0c8bc3b6a23eb",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9949e19101802fc76e144c10bb3ef68b0a58d7/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9949e19101802fc76e144c10bb3ef68b0a58d7/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=cf9949e19101802fc76e144c10bb3ef68b0a58d7",
        "patch": "@@ -203,7 +203,10 @@ class CWallet : public CCryptoKeyStore\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n-    bool IsMine(const CBitcoinAddress& address) const;\n+    bool IsMine(const CTxDestination& dest) const\n+    {\n+    \treturn ::IsMine(*this, dest);\n+    }\n     int64 GetCredit(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))"
      }
    ]
  },
  {
    "sha": "943e7768f33a7c766d1be5db8aea64a46e37253b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDNlNzc2OGYzM2E3Yzc2NmQxYmU1ZGI4YWVhNjRhNDZlMzcyNTNi",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-27T18:17:31Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2012-12-27T18:17:31Z"
      },
      "message": "RPC commands now no longer depend on walletdb.h/CWalletDB",
      "tree": {
        "sha": "4a74f2a14ed89dcd8f8340a381f6dee422e5efbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a74f2a14ed89dcd8f8340a381f6dee422e5efbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/943e7768f33a7c766d1be5db8aea64a46e37253b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/943e7768f33a7c766d1be5db8aea64a46e37253b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/943e7768f33a7c766d1be5db8aea64a46e37253b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/943e7768f33a7c766d1be5db8aea64a46e37253b/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf9949e19101802fc76e144c10bb3ef68b0a58d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf9949e19101802fc76e144c10bb3ef68b0a58d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf9949e19101802fc76e144c10bb3ef68b0a58d7"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 42,
      "deletions": 35
    },
    "files": [
      {
        "sha": "5fba106d6a0e20c005a23a65be5be48935796d29",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 34,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/943e7768f33a7c766d1be5db8aea64a46e37253b/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/943e7768f33a7c766d1be5db8aea64a46e37253b/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=943e7768f33a7c766d1be5db8aea64a46e37253b",
        "patch": "@@ -6,9 +6,7 @@\n #include <boost/assign/list_of.hpp>\n \n #include \"wallet.h\"\n-// TODO: Remove this include after removing all dependencies\n-// NOTE: DO NOT ADD NEW DEPENDENCIES ON CWalletDB!\n-#include \"walletdb.h\"\n+// NOTE: Do NOT add dependencies on walletdb.h!\n #include \"bitcoinrpc.h\"\n #include \"init.h\"\n #include \"base58.h\"\n@@ -453,36 +451,8 @@ Value movecmd(const Array& params, bool fHelp)\n     if (params.size() > 4)\n         strComment = params[4].get_str();\n \n-    // TODO: replace block with pwalletMain->MoveBalance(string from, string to, int64 amount, unused, string comment)\n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n-    if (!walletdb.TxnBegin())\n-        throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n-\n-    int64 nNow = GetAdjustedTime();\n-\n-    // Debit\n-    CAccountingEntry debit;\n-    debit.nOrderPos = pwalletMain->IncOrderPosNext(&walletdb);\n-    debit.strAccount = strFrom;\n-    debit.nCreditDebit = -nAmount;\n-    debit.nTime = nNow;\n-    debit.strOtherAccount = strTo;\n-    debit.strComment = strComment;\n-    walletdb.WriteAccountingEntry(debit);\n-\n-    // Credit\n-    CAccountingEntry credit;\n-    credit.nOrderPos = pwalletMain->IncOrderPosNext(&walletdb);\n-    credit.strAccount = strTo;\n-    credit.nCreditDebit = nAmount;\n-    credit.nTime = nNow;\n-    credit.strOtherAccount = strFrom;\n-    credit.strComment = strComment;\n-    walletdb.WriteAccountingEntry(credit);\n-\n-    if (!walletdb.TxnCommit())\n-        throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n-\n+    if (!pwalletMain->MoveBalance(strFrom, strTo, nAmount, strComment))\n+    \tthrow JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n     return true;\n }\n \n@@ -1004,7 +974,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     }\n \n     list<CAccountingEntry> acentries;\n-    CWalletDB(pwalletMain->strWalletFile).ListAccountCreditDebit(\"*\", acentries);\n+    pwalletMain->ListAccountCreditDebit(\"*\", acentries);\n     BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n "
      },
      {
        "sha": "7fbe16282f95c0572a2af90113184e0f2c4bb833",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/943e7768f33a7c766d1be5db8aea64a46e37253b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/943e7768f33a7c766d1be5db8aea64a46e37253b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=943e7768f33a7c766d1be5db8aea64a46e37253b",
        "patch": "@@ -1918,3 +1918,36 @@ std::set<CTxDestination> CWallet::GetAccountAddresses(std::string strAccount)\n     }\n     return setRet;\n }\n+\n+bool CWallet::MoveBalance(const std::string& strFrom, const std::string& strTo, const int64 nAmount, const std::string& strComment)\n+{\n+    CWalletDB walletdb(strWalletFile);\n+    if (!walletdb.TxnBegin())\n+        return false;\n+\n+    int64 nNow = GetAdjustedTime();\n+\n+    // Debit\n+    CAccountingEntry debit;\n+    debit.nOrderPos = IncOrderPosNext(&walletdb);\n+    debit.strAccount = strFrom;\n+    debit.nCreditDebit = -nAmount;\n+    debit.nTime = nNow;\n+    debit.strOtherAccount = strTo;\n+    debit.strComment = strComment;\n+    walletdb.WriteAccountingEntry(debit);\n+\n+    // Credit\n+    CAccountingEntry credit;\n+    credit.nOrderPos = IncOrderPosNext(&walletdb);\n+    credit.strAccount = strTo;\n+    credit.nCreditDebit = nAmount;\n+    credit.nTime = nNow;\n+    credit.strOtherAccount = strFrom;\n+    credit.strComment = strComment;\n+    walletdb.WriteAccountingEntry(credit);\n+\n+    if (!walletdb.TxnCommit())\n+        return false;\n+    return true;\n+}"
      },
      {
        "sha": "d8bed60192b41b94a1b057120be3241456d86759",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/943e7768f33a7c766d1be5db8aea64a46e37253b/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/943e7768f33a7c766d1be5db8aea64a46e37253b/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=943e7768f33a7c766d1be5db8aea64a46e37253b",
        "patch": "@@ -299,7 +299,11 @@ class CWallet : public CCryptoKeyStore\n     int64 GetAccountBalance(const std::string& strAccount, int nMinDepth);\n     int64 GetAddressTally(const CTxDestination& dest, int nMinDepth);\n     std::set<CTxDestination> GetAccountAddresses(std::string strAccount);\n-\n+    void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries)\n+    {\n+        CWalletDB(strWalletFile).ListAccountCreditDebit(strAccount, entries);\n+    }\n+    bool MoveBalance(const std::string& strFrom, const std::string& strTo, const int64 nAmount, const std::string& strComment);\n     // signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n "
      }
    ]
  },
  {
    "sha": "4debb8059a3d29a88b72b2bc61a4e0f6bfc7e522",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGViYjgwNTlhM2QyOWE4OGI3MmIyYmM2MWE0ZTBmNmJmYzdlNTIy",
    "commit": {
      "author": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2013-01-06T00:57:53Z"
      },
      "committer": {
        "name": "Mike Gogulski",
        "email": "mike@gogulski.com",
        "date": "2013-01-06T00:57:53Z"
      },
      "message": "Removed all my note-to-self TODOs",
      "tree": {
        "sha": "f8dc0fb5679117cfdcb47a3c6be86e496f9734b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8dc0fb5679117cfdcb47a3c6be86e496f9734b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4debb8059a3d29a88b72b2bc61a4e0f6bfc7e522",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4debb8059a3d29a88b72b2bc61a4e0f6bfc7e522",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4debb8059a3d29a88b72b2bc61a4e0f6bfc7e522",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4debb8059a3d29a88b72b2bc61a4e0f6bfc7e522/comments",
    "author": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikegogulski",
      "id": 118625,
      "node_id": "MDQ6VXNlcjExODYyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/118625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikegogulski",
      "html_url": "https://github.com/mikegogulski",
      "followers_url": "https://api.github.com/users/mikegogulski/followers",
      "following_url": "https://api.github.com/users/mikegogulski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikegogulski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikegogulski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikegogulski/subscriptions",
      "organizations_url": "https://api.github.com/users/mikegogulski/orgs",
      "repos_url": "https://api.github.com/users/mikegogulski/repos",
      "events_url": "https://api.github.com/users/mikegogulski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikegogulski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "943e7768f33a7c766d1be5db8aea64a46e37253b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/943e7768f33a7c766d1be5db8aea64a46e37253b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/943e7768f33a7c766d1be5db8aea64a46e37253b"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 0,
      "deletions": 21
    },
    "files": [
      {
        "sha": "162f1760996a1b7e45c3d005669f067b01ad33c9",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4debb8059a3d29a88b72b2bc61a4e0f6bfc7e522/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4debb8059a3d29a88b72b2bc61a4e0f6bfc7e522/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=4debb8059a3d29a88b72b2bc61a4e0f6bfc7e522",
        "patch": "@@ -19,22 +19,19 @@ using namespace json_spirit;\n int64 nWalletUnlockTime;\n static CCriticalSection cs_nWalletUnlockTime;\n \n-// TODO: Move to rpchelpers.cpp\n std::string HelpRequiringPassphrase()\n {\n     return pwalletMain->IsCrypted()\n         ? \"\\nrequires wallet passphrase to be set with walletpassphrase first\"\n         : \"\";\n }\n \n-// TODO: Move to rpchelpers.cpp\n void EnsureWalletIsUnlocked()\n {\n     if (pwalletMain->IsLocked())\n         throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n }\n \n-// TODO: Move to rpchelpers.cpp\n void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n@@ -54,7 +51,6 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n-// TODO: Move to rpchelpers.cpp\n string AccountFromValue(const Value& value)\n {\n     string strAccount = value.get_str();\n@@ -150,7 +146,6 @@ Value setaccount(const Array& params, bool fHelp)\n     if (params.size() > 1)\n         strAccount = AccountFromValue(params[1]);\n \n-    // TODO: Use the return code for something\n     pwalletMain->SetAccount(address.Get(), strAccount);\n     return Value::null;\n }\n@@ -166,13 +161,10 @@ Value getaccount(const Array& params, bool fHelp)\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n-    // TODO: Exception if !pwalletMain->IsMyAddress(address)?\n     string strAccount;\n-    // TODO: std::string CWallet::GetAccount(const CBitcoinAddress& address)\n     map<CTxDestination, string>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n     if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.empty())\n         strAccount = (*mi).second;\n-    // TODO: Exception if account not found?\n     return strAccount;\n }\n \n@@ -186,7 +178,6 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     string strAccount = AccountFromValue(params[0]);\n \n     // Find all addresses that have the given account\n-    // TODO: use vectors instead of sets?\n     std::set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n     Array ret;\n     BOOST_FOREACH(const CTxDestination& item, setAddress)\n@@ -209,7 +200,6 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     // Amount\n     int64 nAmount = AmountFromValue(params[1]);\n \n-    // TODO: string strError = pwalletMain->SendToAddress(address, nAmount, comment, commentto);\n     // Wallet comments\n     CWalletTx wtx;\n     if (params.size() > 2 && params[2].type() != null_type && !params[2].get_str().empty())\n@@ -363,7 +353,6 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     string strAccount = AccountFromValue(params[0]);\n     set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n \n-    // TODO: Replace whole block with return ValueFromAmount(pwalletMain->GetAccountTally(strAccount, nMinDepth))\n     // Tally\n     int64 nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -661,7 +650,6 @@ Value createmultisig(const Array& params, bool fHelp)\n     return result;\n }\n \n-// TODO: Move to wallet.h\n struct tallyitem\n {\n     int64 nAmount;\n@@ -673,7 +661,6 @@ struct tallyitem\n     }\n };\n \n-// TODO: Move bulk to std::vector<std::map<std::string, std::object> > CWallet::ListReceived\n Value ListReceived(const Array& params, bool fByAccounts)\n {\n     // Minimum confirmations\n@@ -795,7 +782,6 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n     return ListReceived(params, true);\n }\n \n-// TODO: std::vector<> CWalletTx::(const string& strAccount, int nMinDepth, bool fLong)\n void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n {\n     int64 nFee;\n@@ -857,7 +843,6 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     }\n }\n \n-// TODO: Move to rpchelpers.cpp\n void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Array& ret)\n {\n     bool fAllAccounts = (strAccount == string(\"*\"));\n@@ -897,7 +882,6 @@ Value listtransactions(const Array& params, bool fHelp)\n     if (nFrom < 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative from\");\n \n-    // TODO: return ArrayFromVector(pwalletMain->GetTxList(string strAccount, int ncount, int nfrom);\n     Array ret;\n \n     std::list<CAccountingEntry> acentries;\n@@ -945,7 +929,6 @@ Value listaccounts(const Array& params, bool fHelp)\n     if (params.size() > 0)\n         nMinDepth = params[0].get_int();\n \n-    // TODO: return ObjectFromMap(pwalletMain->GetAccountList(int nMindepth);\n     map<string, int64> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& entry, pwalletMain->mapAddressBook) {\n         if (pwalletMain->IsMine(entry.first)) // This address belongs to me\n@@ -1014,7 +997,6 @@ Value listsinceblock(const Array& params, bool fHelp)\n     int depth = pindex ? (1 + nBestHeight - pindex->nHeight) : -1;\n \n     Array transactions;\n-    // TODO: transactions = ArrayFromVector(std::vector<tx?> CWallet->GetTransactionList(int nDepth)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n@@ -1113,7 +1095,6 @@ Value keypoolrefill(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n-// TODO: CWallet::ThreadTopUpKeyPool\n void ThreadTopUpKeyPool(void* parg)\n {\n     // Make this thread recognisable as the key-topping-up thread"
      },
      {
        "sha": "5cd2aa8f9f47ffc221b5f728e1014ec2a76f76e7",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4debb8059a3d29a88b72b2bc61a4e0f6bfc7e522/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4debb8059a3d29a88b72b2bc61a4e0f6bfc7e522/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=4debb8059a3d29a88b72b2bc61a4e0f6bfc7e522",
        "patch": "@@ -1816,7 +1816,6 @@ CTxDestination CWallet::GetAccountAddress(const std::string strAccount, bool bFo\n     {\n         CScript scriptPubKey;\n         scriptPubKey.SetDestination(account.vchPubKey.GetID());\n-        // TODO: Is this IsValid() check really necessary here?\n         for (map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n              it != mapWallet.end() && account.vchPubKey.IsValid() && !bKeyUsed;\n              ++it)\n@@ -1838,7 +1837,6 @@ CTxDestination CWallet::GetAccountAddress(const std::string strAccount, bool bFo\n         if (!GetKeyFromPool(account.vchPubKey, false))\n             return CTxDestination();\n \n-        // TODO: Do something with the return code\n         SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n         walletdb.WriteAccount(strAccount, account);\n     }"
      }
    ]
  }
]