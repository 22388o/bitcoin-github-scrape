sipa,2013-06-24T20:25:45Z,Tested by running a -reindex on mainnet.\n,https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-19933264,19933264,
Mazo,2013-06-26T10:22:32Z,What kind of effect does this have on the blockchain size?\n,https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20038134,20038134,
jgarzik,2013-06-26T11:56:19Z,"@Mazo None.  The blockchain continues to store every single transaction, from 2009 through eternity.\n",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20041961,20041961,
mikehearn,2013-07-05T10:36:46Z,It looks good to me. Are there any unit tests for blocks and UTXO set changes? If so it'd be good to add a test for this.\n,https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20512612,20512612,
TheBlueMatt,2013-07-07T13:02:26Z,/me votes new tests be added to https://code.google.com/p/bitcoinj/source/browse/core/src/test/java/com/google/bitcoin/core/FullBlockTestGenerator.java\n,https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20570406,20570406,
sipa,2013-07-07T13:05:03Z,"How would you test it? There is no observable difference.\n\nYou can try to create OP_RETURN outputs and try to spend them, and see that fails, but that's true before and after this PR (which doesn't mean it's a useless test).\n",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20570436,20570436,
TheBlueMatt,2013-07-07T13:09:07Z,"Well, yes, testing this properly probably cant be done out-of-process (maybe over rpc, though), but adding some OP_RETURN scripts to the block test-set (and some that look semi-unspendable, eg OP_RETURN in an IF) would be really nice.\n",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20570479,20570479,
petertodd,2013-07-08T15:35:45Z,"@sipa @TheBlueMatt I added tests for attempting to spend OP_RETURNS, including with IF's and similar, to the unit tests actually. I agree there should be tests to ensure they don't end up in the UTXO set though.\n",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20614082,20614082,
BitcoinPullTester,2013-07-09T22:48:44Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/ec84e81e8383b3b1e1ef4a6dbcb088193d8de5d7 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20711011,20711011,
sipa,2013-07-09T22:51:04Z,"@petertodd @TheBlueMatt I agree we need tests to verify that such unspendable outputs don't end up in the UTXO set, but I disagree it should be part of pulltester. This does not affect network interaction, but is a client-side optimization.\n",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20711109,20711109,
TheBlueMatt,2013-07-10T10:12:09Z,"The point of adding it to pull-tester is that if it is done wrong, it is network interaction.\n\nPieter Wuille notifications@github.com wrote:\n\n> @petertodd @TheBlueMatt I agree we need tests to verify that such\n> unspendable outputs don't end up in the UTXO set, but I disagree it\n> should be part of pulltester. This does not affect network interaction,\n> but is a client-side optimization.\n>",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20732918,20732918,
sipa,2013-07-10T21:28:41Z,"@TheBlueMatt Just to be clear: I'm all for adding tests to pulltester intended to trigger edge cases related to handling of provably-unspendable outputs. I'm just not in favor of making pulltester use more than the P2P interface for testing (i.e., making it a whitebox rather than blackbox test) - tests for checking that unspendable outputs do not end up in the UTXO set are for unit tests, not for ",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20774728,20774728,
petertodd,2013-07-11T07:16:18Z,Over the network how would you know if a peer wasn't doing OP_RETURN pruning properly anyway if their script implementation was correct?\n,https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20794259,20794259,
sipa,2013-07-14T11:59:16Z,"@petertodd That's my point - anyone in the network only cares whether your script/verification implementation is correct. Only you care about whether it's not using more storage than necessary.\n\nI prefer the block-acceptance tests to remain implementation-independent, so it can remain as generic as possible, and be used to find bugs that could lead to non-convergence - not only for bitcoind/bitc",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20935344,20935344,
jgarzik,2013-07-19T15:16:05Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-21255851,21255851,
gmaxwell,2013-07-19T15:21:35Z,"So this will make the gettxoutsetinfo on existing nodes diverge until everyone does a -reindex. Likewise, gettxout will return different results. Is this a problem?\n\nOne possibility would be to write a small piece of code that checks at startup to see if a particular OP_RETURN output is in the UTXO set, and if it is, traverses the set to remove all of them. At a minimum there should likely be a ",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-21256241,21256241,
petertodd,2013-07-19T15:36:32Z,@gmaxwell sounds like a good idea to me. The canary txout should be the first op_return in the chain of course. \n,https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-21257372,21257372,
petertodd,2013-07-19T15:36:56Z,"Oh, and don't forget test net...\n",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-21257403,21257403,
sipa,2013-07-20T11:27:47Z,"How about only enabling this when a ""prune_op_return"" flag is set in the database, which can only be set/changed at initial creation/reindex, and outputting this flag as part of gettxoutsetinfo?\n",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-21292138,21292138,
jgarzik,2013-07-20T15:14:59Z,@sipa ACK.  Definitely output the flag via gettxsetinfo.\n,https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-21295037,21295037,
petertodd,2013-07-22T12:24:41Z,"@sipa A flag sounds like less work, and few people would be affected, so go ahead and do it that way.\n\nThe important thing is to give users an understanding of why two different UTXO hashes don't match. Maybe add a UTXO version number, and just increment it every time we change something? IMO it's fine to have a meta version -1 that gets set if you run some dev code that puts the UTXO database i",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-21340353,21340353,
jgarzik,2013-07-22T14:22:29Z,Either a version number or simply list of flags that might permute the output.\n,https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-21347176,21347176,
gmaxwell,2013-08-23T21:35:21Z,"Perfect is the enemy of good.  I think the inconsistent values here can be resolved by anyone who wants to create UTXO tree hashes for proofs, and otherwise by reindexing. I think we should just take this as is.\n",https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-23192625,23192625,
jgarzik,2013-08-25T02:59:32Z,Let's get this merged.\n,https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-23220931,23220931,
