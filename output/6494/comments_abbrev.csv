rebroad,2015-07-30T20:55:02Z,"This isn't really needed is it? If a node is already sending ""getheaders"" then presumably a node can assume it prefers headers rather than invs, perhaps?\n",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-126483990,126483990,
sdaftuar,2015-07-31T00:28:35Z,"@rebroad  Sorry, I just realized I should have emphasized more clearly that this PR also includes code to enable direct-fetching of blocks based on headers messages.  Without that change, nodes that received a headers message would otherwise wait to download blocks through the existing parallel fetch mechanism, which would generally make headers-announcement inferior to inv-announcements (because ",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-126529816,126529816,
rebroad,2015-07-31T11:35:05Z,@sdaftuar Why not use the existing parallel fetch mechanism? I don't see any advantage in fetching the block outside of that.\n,https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-126661302,126661302,
sipa,2015-07-31T12:37:47Z,"The existing parallel fetch mechanism has a delay and an extra roundtrip,\nbecause it first needs to ask for headers before it can start fetching any\nblock.\n\nSending all headers immediately when announcing the block avoids that\nround-trip, potentially improving propagation speed significantly over\nhigh-latency links.\n",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-126677054,126677054,
sdaftuar,2015-08-03T17:44:09Z,Fixed @casey's nits\n,https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-127344879,127344879,
sdaftuar,2015-09-09T17:09:18Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-138978021,138978021,
sdaftuar,2015-09-24T15:38:00Z,"I'm planning to send the draft BIP out to the mailing list for comments, but before I do so, does anyone here have any guidance about whether it is necessary to bump the protocol version to introduce the new `sendheaders` p2p message?  It is safe to ignore the message, but I'm not sure if its generally considered helpful to change the protocol version when adding even an optional message...\n",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-142966413,142966413,
laanwj,2015-09-24T15:58:02Z,"I think it's helpful to bump the protocol version in this case. Although it's only an optional hint, it may provide more clarity (eg when documenting) and help troubleshooting.\n",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-142972322,142972322,
laanwj,2015-10-06T09:52:50Z,How is the BIP for this coming along? Need any help?\n,https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-145803573,145803573,
sdaftuar,2015-10-06T14:34:39Z,"@theuni suggested some alternate ideas to the ""sendheaders"" p2p message: either extend the version message to include a bool that indicates the preference to receive headers announcements, or even just allocate a service bit that indicates that preference.\n\nBetween those 3 options I don't feel strongly about the best way to deploy -- and in particular I can understand why it might not be great t",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-145875499,145875499,
sipa,2015-10-06T14:42:21Z,"@sdaftuar @theuni Extending ""version"" continuously isn't a very scalable approach, and requires pretty strong consensus to do, as the order of entries matters. I don't really understand why we kept doing that for so long.\n\nA service bit has the same ""synchronization"" problem, but does have the extra advantage of making the property searchable.\n",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-145878356,145878356,
gmaxwell,2015-10-06T16:25:27Z,"I don't think it's important that the property is searchable.  For me I'd ask should this be its own message, or should we define a ""flags"" message, for sending more, non-searchable capabilities.\n",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-145918734,145918734,
theuni,2015-10-08T02:16:40Z,"@sipa @gmaxwell My preference for not sending a new messages comes from an event-driven implementor's POV. If a remote nodes are allowed to switch preferences mid-stream, it can greatly (and needlessly) complicate the local node's sending logic.\n\nThe easy way to avoid that is to disallow changing the preference _back_ once set (this seems to be the case in @sdaftuar's BIP). Taking that a step fu",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-146395507,146395507,
sdaftuar,2015-10-16T18:27:45Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-148794761,148794761,
gavinandresen,2015-10-21T19:34:17Z,"This significantly speeds up new block propagation in the normal, build-on-the-best-chain case.\n\nBenchmark numbers from a 5-node, 4-network-hop test network I created that relays empty blocks from massachusetts to los angeles and back, twice (round-trip latency of 100 msec):\n\nBefore:  1,300 msec latency from first block-creating node sending an 'inv' to last node in the chain receiving the 'bl",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-150002489,150002489,
gmaxwell,2015-10-21T23:56:42Z,"@gavinandresen Any chance you could repeat your test with the code in #6867?  (This change is great, and we should do it, but I expect that almost all of the improvement in that benchmark will be from setting TCP_NODELAY.)\n",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-150057108,150057108,
gavinandresen,2015-10-22T00:18:14Z,"Yes, I'll re-run tomorrow when I'm back in my office.\n\n## \n\nGavin Andresen\n\n> On Oct 21, 2015, at 7:56 PM, Gregory Maxwell notifications@github.com wrote:\n> \n> @gavinandresen Any chance you could repeat your test with the code in #6867? (This change is great, and we should do it, but I expect that almost all of the improvement in that benchmark will be from setting TCP_NODELAY.)\n> \n> â€”\n",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-150061027,150061027,
sdaftuar,2015-10-23T20:46:39Z,I believe this is ready for review; so far it doesn't seem like the BIP (which relates to activation/deployment only) is likely to change substantively from what was originally proposed (see bitcoin/bips#221).  It would be great to get this merged for 0.12 if possible.\n,https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-150686158,150686158,
laanwj,2015-11-13T12:22:30Z,"> I don't think it's important that the property is searchable. For me I'd ask should this be its own message, or should we define a ""flags"" message, for sending more, non-searchable capabilities.\n\nLate to the party, but I prefer the way how it is implemented now - to have a separate message for requesting this feature - to a generic 'flags' message, as well as to adding a version bit.\n\nRation",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-156417477,156417477,
sipa,2015-11-13T16:22:39Z,"Concept ACK. Thorough code review ACK with one small nit. Lightly tested (two peers with this pull succesfully relay blocks across the internet, verified with -debug=net).\n",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-156478436,156478436,
sipa,2015-11-13T16:25:44Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-156479219,156479219,
sdaftuar,2015-11-13T18:25:12Z,Rebased and added log message when trying to announce a stale block.\n,https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-156509115,156509115,
sdaftuar,2015-11-16T22:03:47Z,"I'm looking into an issue @morcos noticed this afternoon; it seems problematic to update pindexBestKnownBlock from a locator received with a getheaders message, because that would imply we can download such blocks from our peer. Yet our peer can generate locators from headers they have rather than from blocks they have.\n\nI am testing just removing that block of code; will update this PR once I c",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-157185700,157185700,
sipa,2015-11-16T22:42:08Z,"@sdaftuar @morcos Good catch, and too bad. I doubt it matters much.\n",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-157195256,157195256,
sdaftuar,2015-11-17T15:40:41Z,"Updated this PR to eliminate updating `pindexBestKnownBlock` from the locator, and squashed back down to one commit.\n\nThe reason I had put this in initially was that I was concerned about there being a potential bootstrapping problem, but after further thought and some light testing I don't think there's a problem.  The initial getheaders sync that happens after a connection is established shoul",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-157407642,157407642,
sdaftuar,2015-11-18T13:17:32Z,"Pushed a commit to address @morcos' comments.\n\nIn cleaning up the RPC test I was surprised with what happens to `pindexBestHeaderSent` when a peer sends a getheaders with a locator that is up-to-date with our tip.  Though I took out the code to parse the locator and update `pindexBestKnownBlock`, it turns out that if we generate no headers to return then we will end up setting `pindexBestHeaderS",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-157709651,157709651,
sdaftuar,2015-11-23T20:49:18Z,"I discovered there were some problems in the direct fetch logic.\n\nThe code was structured so that we could only direct fetch blocks which were announced in a set of headers.  However, in the case of a reorg, we may have some of the headers on the reorged-to-chain, which our peers will not re-announce to us -- meaning that the direct-fetch logic wouldn't request needed missing blocks immediately.",https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-159060094,159060094,
dcousens,2015-11-24T01:39:01Z,Great work @sdaftuar \n,https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-159124255,159124255,
sipa,2015-11-28T13:03:55Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-160294074,160294074,
sipa,2015-11-29T12:06:49Z,Closed via #7129.\n,https://github.com/bitcoin/bitcoin/pull/6494#issuecomment-160411793,160411793,
sipa,2015-11-13T16:10:59Z,"Can't this result in duplicate in-flights? The fact that it's not yet our tip does not imply we're not downloading it yet.\n\nEDIT: nevermind, those aren't added to vToFetch.\n",https://github.com/bitcoin/bitcoin/pull/6494#discussion_r44799570,44799570,src/main.cpp
sipa,2015-11-13T16:17:20Z,Do we still want to inv in this case?\n,https://github.com/bitcoin/bitcoin/pull/6494#discussion_r44800419,44800419,src/main.cpp
sdaftuar,2015-11-13T17:58:21Z,"It's possible (probable?) that the last entry in vBlockHashesToAnnounce is our current tip (so we do want to inv it), but it is also possible that it hasn't made it there yet, and that last entry is some old tip that has now been reorged out.\n\nI think it would be safe to add a check below to only inv the last item if it's an ancestor of our current tip; does that sound right?  \n",https://github.com/bitcoin/bitcoin/pull/6494#discussion_r44812615,44812615,src/main.cpp
sipa,2015-11-13T18:09:19Z,"I think it's harmless, as the current code in this PR mimicks the old behaviour. But if we're doing the check anyway, I think we can skip the entry.\n",https://github.com/bitcoin/bitcoin/pull/6494#discussion_r44813816,44813816,src/main.cpp
sdaftuar,2015-11-13T18:11:46Z,"I think the code to address this edge case is easy to write, but I believe this situation is so rare that it might be better to not add this code that we can't really test?  (At least I can't figure out how I'd test it...)\n\nI think it might be better to just add a `LogPrint(""net"", ...)` debug message in the event that we're sending an inv for a block that is not on the main chain, rather than ch",https://github.com/bitcoin/bitcoin/pull/6494#discussion_r44814050,44814050,src/main.cpp
sipa,2015-11-13T18:13:10Z,Fair enough. It won't hurt.\n,https://github.com/bitcoin/bitcoin/pull/6494#discussion_r44814190,44814190,src/main.cpp
morcos,2015-11-17T18:10:35Z,It might be better to delete this check.  pindexLast shouldn't be set to a block that returns false from AcceptBlockHeader even if we already have the header.\n,https://github.com/bitcoin/bitcoin/pull/6494#discussion_r45095904,45095904,src/main.cpp
morcos,2015-11-17T18:24:50Z,add !fimporting && !fReindex\n,https://github.com/bitcoin/bitcoin/pull/6494#discussion_r45097901,45097901,src/main.cpp
morcos,2015-11-17T18:25:28Z,nit: already checked fCanDirectFetch above.   maybe check vToFetch.size() \n,https://github.com/bitcoin/bitcoin/pull/6494#discussion_r45098001,45098001,src/main.cpp
morcos,2015-11-17T19:59:07Z,comment incorrect\n,https://github.com/bitcoin/bitcoin/pull/6494#discussion_r45111900,45111900,qa/rpc-tests/sendheaders.py
morcos,2015-11-17T20:04:34Z,this shouldn't be necessary\n,https://github.com/bitcoin/bitcoin/pull/6494#discussion_r45112773,45112773,qa/rpc-tests/sendheaders.py
morcos,2015-11-17T20:05:17Z,why do you do this?\n,https://github.com/bitcoin/bitcoin/pull/6494#discussion_r45112859,45112859,qa/rpc-tests/sendheaders.py
sdaftuar,2015-11-17T20:40:45Z,This block of code already has a guard so that we don't process headers received while importing/reindexing.\n,https://github.com/bitcoin/bitcoin/pull/6494#discussion_r45117256,45117256,src/main.cpp
sdaftuar,2015-11-17T21:02:29Z,"Surprisingly, this code is necessary to make the test work.  Turns out there's an unusual feature in the getheaders handling, where we set `pindexBestHeaderSent` to `chainActive.Tip()` in two situations: if we actually are sending the tip, or if we have nothing to send.  I think the latter case can only happen if our peer has our tip in their locator, so I believe this behavior is desirable, if su",https://github.com/bitcoin/bitcoin/pull/6494#discussion_r45120068,45120068,qa/rpc-tests/sendheaders.py
sdaftuar,2015-11-24T13:18:42Z,Looks like I forgot to remove this.\n,https://github.com/bitcoin/bitcoin/pull/6494#discussion_r45733142,45733142,src/main.cpp
