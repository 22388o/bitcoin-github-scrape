[
  {
    "sha": "d1e26d4e71460ffd50c3190385c759b48ab343e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWUyNmQ0ZTcxNDYwZmZkNTBjMzE5MDM4NWM3NTliNDhhYjM0M2U5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-20T11:53:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-26T11:25:20Z"
      },
      "message": "Move CMedianFilter to timedata.cpp\n\nNow that we no longer use the median filter to keep track of\nthe number of blocks of peers, that's the only place it is used.",
      "tree": {
        "sha": "a2455079d68500e91c4c2cd70a0b4df8946b7193",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2455079d68500e91c4c2cd70a0b4df8946b7193"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1e26d4e71460ffd50c3190385c759b48ab343e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1e26d4e71460ffd50c3190385c759b48ab343e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1e26d4e71460ffd50c3190385c759b48ab343e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1e26d4e71460ffd50c3190385c759b48ab343e9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49f954f154e3576a6a8270e00ab95f52dd02c667",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49f954f154e3576a6a8270e00ab95f52dd02c667",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49f954f154e3576a6a8270e00ab95f52dd02c667"
      }
    ],
    "stats": {
      "total": 179,
      "additions": 98,
      "deletions": 81
    },
    "files": [
      {
        "sha": "b4360831bb5f05323f22437ab73754603fc5c7a3",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e26d4e71460ffd50c3190385c759b48ab343e9/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e26d4e71460ffd50c3190385c759b48ab343e9/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d1e26d4e71460ffd50c3190385c759b48ab343e9",
        "patch": "@@ -61,6 +61,7 @@ BITCOIN_TESTS =\\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n   test/test_bitcoin.cpp \\\n+  test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n   test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\"
      },
      {
        "sha": "aa4fa0d500e88e2ea37457196b92a8476ceecdf9",
        "filename": "src/test/timedata_tests.cpp",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e26d4e71460ffd50c3190385c759b48ab343e9/src/test/timedata_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e26d4e71460ffd50c3190385c759b48ab343e9/src/test/timedata_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/timedata_tests.cpp?ref=d1e26d4e71460ffd50c3190385c759b48ab343e9",
        "patch": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include \"timedata.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(timedata_tests)\n+\n+BOOST_AUTO_TEST_CASE(util_MedianFilter)\n+{\n+    CMedianFilter<int> filter(5, 15);\n+\n+    BOOST_CHECK_EQUAL(filter.median(), 15);\n+\n+    filter.input(20); // [15 20]\n+    BOOST_CHECK_EQUAL(filter.median(), 17);\n+\n+    filter.input(30); // [15 20 30]\n+    BOOST_CHECK_EQUAL(filter.median(), 20);\n+\n+    filter.input(3); // [3 15 20 30]\n+    BOOST_CHECK_EQUAL(filter.median(), 17);\n+\n+    filter.input(7); // [3 7 15 20 30]\n+    BOOST_CHECK_EQUAL(filter.median(), 15);\n+\n+    filter.input(18); // [3 7 18 20 30]\n+    BOOST_CHECK_EQUAL(filter.median(), 18);\n+\n+    filter.input(0); // [0 3 7 18 30]\n+    BOOST_CHECK_EQUAL(filter.median(), 7);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "31fcd3e92a4f27f8e84b0c82f5d5052fc2e5dba5",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e26d4e71460ffd50c3190385c759b48ab343e9/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e26d4e71460ffd50c3190385c759b48ab343e9/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=d1e26d4e71460ffd50c3190385c759b48ab343e9",
        "patch": "@@ -36,31 +36,6 @@ BOOST_AUTO_TEST_CASE(util_criticalsection)\n     } while(0);\n }\n \n-BOOST_AUTO_TEST_CASE(util_MedianFilter)\n-{\n-    CMedianFilter<int> filter(5, 15);\n-\n-    BOOST_CHECK_EQUAL(filter.median(), 15);\n-\n-    filter.input(20); // [15 20]\n-    BOOST_CHECK_EQUAL(filter.median(), 17);\n-\n-    filter.input(30); // [15 20 30]\n-    BOOST_CHECK_EQUAL(filter.median(), 20);\n-\n-    filter.input(3); // [3 15 20 30]\n-    BOOST_CHECK_EQUAL(filter.median(), 17);\n-\n-    filter.input(7); // [3 7 15 20 30]\n-    BOOST_CHECK_EQUAL(filter.median(), 15);\n-\n-    filter.input(18); // [3 7 18 20 30]\n-    BOOST_CHECK_EQUAL(filter.median(), 18);\n-\n-    filter.input(0); // [0 3 7 18 30]\n-    BOOST_CHECK_EQUAL(filter.median(), 7);\n-}\n-\n static const unsigned char ParseHex_expected[65] = {\n     0x04, 0x67, 0x8a, 0xfd, 0xb0, 0xfe, 0x55, 0x48, 0x27, 0x19, 0x67, 0xf1, 0xa6, 0x71, 0x30, 0xb7,\n     0x10, 0x5c, 0xd6, 0xa8, 0x28, 0xe0, 0x39, 0x09, 0xa6, 0x79, 0x62, 0xe0, 0xea, 0x1f, 0x61, 0xde,"
      },
      {
        "sha": "d0c84b3183b1124570594301d41a17b95e397e6f",
        "filename": "src/timedata.h",
        "status": "modified",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e26d4e71460ffd50c3190385c759b48ab343e9/src/timedata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e26d4e71460ffd50c3190385c759b48ab343e9/src/timedata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.h?ref=d1e26d4e71460ffd50c3190385c759b48ab343e9",
        "patch": "@@ -6,9 +6,68 @@\n #define BITCOIN_TIMEDATA_H\n \n #include <stdint.h>\n+#include <vector>\n+#include <algorithm>\n+#include <assert.h>\n \n class CNetAddr;\n \n+/** Median filter over a stream of values.\n+ * Returns the median of the last N numbers\n+ */\n+template <typename T> class CMedianFilter\n+{\n+private:\n+    std::vector<T> vValues;\n+    std::vector<T> vSorted;\n+    unsigned int nSize;\n+public:\n+    CMedianFilter(unsigned int size, T initial_value):\n+        nSize(size)\n+    {\n+        vValues.reserve(size);\n+        vValues.push_back(initial_value);\n+        vSorted = vValues;\n+    }\n+\n+    void input(T value)\n+    {\n+        if(vValues.size() == nSize)\n+        {\n+            vValues.erase(vValues.begin());\n+        }\n+        vValues.push_back(value);\n+\n+        vSorted.resize(vValues.size());\n+        std::copy(vValues.begin(), vValues.end(), vSorted.begin());\n+        std::sort(vSorted.begin(), vSorted.end());\n+    }\n+\n+    T median() const\n+    {\n+        int size = vSorted.size();\n+        assert(size>0);\n+        if(size & 1) // Odd number of elements\n+        {\n+            return vSorted[size/2];\n+        }\n+        else // Even number of elements\n+        {\n+            return (vSorted[size/2-1] + vSorted[size/2]) / 2;\n+        }\n+    }\n+\n+    int size() const\n+    {\n+        return vValues.size();\n+    }\n+\n+    std::vector<T> sorted () const\n+    {\n+        return vSorted;\n+    }\n+};\n+\n /* Functions to keep track of adjusted P2P time */\n int64_t GetTimeOffset();\n int64_t GetAdjustedTime();"
      },
      {
        "sha": "e813c86804cd9c2c59df493fa01fe3088e16d571",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 56,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e26d4e71460ffd50c3190385c759b48ab343e9/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e26d4e71460ffd50c3190385c759b48ab343e9/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=d1e26d4e71460ffd50c3190385c759b48ab343e9",
        "patch": "@@ -356,62 +356,6 @@ bool TimingResistantEqual(const T& a, const T& b)\n     return accumulator == 0;\n }\n \n-/** Median filter over a stream of values.\n- * Returns the median of the last N numbers\n- */\n-template <typename T> class CMedianFilter\n-{\n-private:\n-    std::vector<T> vValues;\n-    std::vector<T> vSorted;\n-    unsigned int nSize;\n-public:\n-    CMedianFilter(unsigned int size, T initial_value):\n-        nSize(size)\n-    {\n-        vValues.reserve(size);\n-        vValues.push_back(initial_value);\n-        vSorted = vValues;\n-    }\n-\n-    void input(T value)\n-    {\n-        if(vValues.size() == nSize)\n-        {\n-            vValues.erase(vValues.begin());\n-        }\n-        vValues.push_back(value);\n-\n-        vSorted.resize(vValues.size());\n-        std::copy(vValues.begin(), vValues.end(), vSorted.begin());\n-        std::sort(vSorted.begin(), vSorted.end());\n-    }\n-\n-    T median() const\n-    {\n-        int size = vSorted.size();\n-        assert(size>0);\n-        if(size & 1) // Odd number of elements\n-        {\n-            return vSorted[size/2];\n-        }\n-        else // Even number of elements\n-        {\n-            return (vSorted[size/2-1] + vSorted[size/2]) / 2;\n-        }\n-    }\n-\n-    int size() const\n-    {\n-        return vValues.size();\n-    }\n-\n-    std::vector<T> sorted () const\n-    {\n-        return vSorted;\n-    }\n-};\n-\n #ifdef WIN32\n inline void SetThreadPriority(int nPriority)\n {"
      }
    ]
  },
  {
    "sha": "121d6ad9dbedd6a13b12d75a4c48505797d8de9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjFkNmFkOWRiZWRkNmExM2IxMmQ3NWE0YzQ4NTA1Nzk3ZDhkZTlk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-20T14:32:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-26T11:25:21Z"
      },
      "message": "Remove unused `alignup` function from util.h",
      "tree": {
        "sha": "00da4dcf8d9bb375e8075e2896fde701bc1cf7b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00da4dcf8d9bb375e8075e2896fde701bc1cf7b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/121d6ad9dbedd6a13b12d75a4c48505797d8de9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/121d6ad9dbedd6a13b12d75a4c48505797d8de9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/121d6ad9dbedd6a13b12d75a4c48505797d8de9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/121d6ad9dbedd6a13b12d75a4c48505797d8de9d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1e26d4e71460ffd50c3190385c759b48ab343e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1e26d4e71460ffd50c3190385c759b48ab343e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1e26d4e71460ffd50c3190385c759b48ab343e9"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 0,
      "deletions": 14
    },
    "files": [
      {
        "sha": "10fc5dd58e69d1f3ab0e22dcde832dd0b2f59520",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/121d6ad9dbedd6a13b12d75a4c48505797d8de9d/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/121d6ad9dbedd6a13b12d75a4c48505797d8de9d/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=121d6ad9dbedd6a13b12d75a4c48505797d8de9d",
        "patch": "@@ -46,20 +46,6 @@ static const int64_t CENT = 1000000;\n // This is needed because the foreach macro can't get over the comma in pair<t1, t2>\n #define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n \n-// Align by increasing pointer, must have extra space at end of buffer\n-template <size_t nBytes, typename T>\n-T* alignup(T* p)\n-{\n-    union\n-    {\n-        T* ptr;\n-        size_t n;\n-    } u;\n-    u.ptr = p;\n-    u.n = (u.n + (nBytes-1)) & ~(nBytes-1);\n-    return u.ptr;\n-}\n-\n #ifdef WIN32\n #define MSG_DONTWAIT        0\n "
      }
    ]
  },
  {
    "sha": "f780e65ac632d2cad51d00c2b4a93248a5df91a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzgwZTY1YWM2MzJkMmNhZDUxZDAwYzJiNGE5MzI0OGE1ZGY5MWE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-20T14:59:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-26T11:25:21Z"
      },
      "message": "Remove unused function `ByteReverse` from util.h",
      "tree": {
        "sha": "ac32c82183a3ca6525ce1b5b2196b2ab9d2e59c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac32c82183a3ca6525ce1b5b2196b2ab9d2e59c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f780e65ac632d2cad51d00c2b4a93248a5df91a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f780e65ac632d2cad51d00c2b4a93248a5df91a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f780e65ac632d2cad51d00c2b4a93248a5df91a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f780e65ac632d2cad51d00c2b4a93248a5df91a6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "121d6ad9dbedd6a13b12d75a4c48505797d8de9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/121d6ad9dbedd6a13b12d75a4c48505797d8de9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/121d6ad9dbedd6a13b12d75a4c48505797d8de9d"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 0,
      "deletions": 6
    },
    "files": [
      {
        "sha": "785d4056e748cde52e0a8fd563a293220caee2f3",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f780e65ac632d2cad51d00c2b4a93248a5df91a6/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f780e65ac632d2cad51d00c2b4a93248a5df91a6/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f780e65ac632d2cad51d00c2b4a93248a5df91a6",
        "patch": "@@ -372,12 +372,6 @@ inline void SetThreadPriority(int nPriority)\n \n void RenameThread(const char* name);\n \n-inline uint32_t ByteReverse(uint32_t value)\n-{\n-    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);\n-    return (value<<16) | (value>>16);\n-}\n-\n // Standard wrapper for do-something-forever thread functions.\n // \"Forever\" really means until the thread is interrupted.\n // Use it like:"
      }
    ]
  },
  {
    "sha": "610a8c075958aa95b97f62a7ab020a543694c23d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTBhOGMwNzU5NThhYTk1Yjk3ZjYyYTdhYjAyMGE1NDM2OTRjMjNk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-20T15:43:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-26T11:25:21Z"
      },
      "message": "Move SetThreadPriority implementation to util.cpp instead of the header\n\nPut the THREAD_* and PRIO_ constants in compat.h.",
      "tree": {
        "sha": "8639401fd1aeeac4314c44552d4473c1f8652109",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8639401fd1aeeac4314c44552d4473c1f8652109"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/610a8c075958aa95b97f62a7ab020a543694c23d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610a8c075958aa95b97f62a7ab020a543694c23d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/610a8c075958aa95b97f62a7ab020a543694c23d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610a8c075958aa95b97f62a7ab020a543694c23d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f780e65ac632d2cad51d00c2b4a93248a5df91a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f780e65ac632d2cad51d00c2b4a93248a5df91a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f780e65ac632d2cad51d00c2b4a93248a5df91a6"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 25,
      "deletions": 28
    },
    "files": [
      {
        "sha": "3f0a8b6158c1e08775e40407754921984810bf1c",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/610a8c075958aa95b97f62a7ab020a543694c23d/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/610a8c075958aa95b97f62a7ab020a543694c23d/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=610a8c075958aa95b97f62a7ab020a543694c23d",
        "patch": "@@ -59,4 +59,15 @@ typedef u_int SOCKET;\n #define SOCKET_ERROR        -1\n #endif\n \n+#ifndef WIN32\n+// PRIO_MAX is not defined on Solaris\n+#ifndef PRIO_MAX\n+#define PRIO_MAX 20\n+#endif\n+#define THREAD_PRIORITY_LOWEST          PRIO_MAX\n+#define THREAD_PRIORITY_BELOW_NORMAL    2\n+#define THREAD_PRIORITY_NORMAL          0\n+#define THREAD_PRIORITY_ABOVE_NORMAL    (-2)\n+#endif\n+\n #endif // _BITCOIN_COMPAT_H"
      },
      {
        "sha": "606f5a60f95ad8d3127927fdf784664ad8499e73",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/610a8c075958aa95b97f62a7ab020a543694c23d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/610a8c075958aa95b97f62a7ab020a543694c23d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=610a8c075958aa95b97f62a7ab020a543694c23d",
        "patch": "@@ -1286,3 +1286,16 @@ std::string FormatParagraph(const std::string in, size_t width, size_t indent)\n     }\n     return out.str();\n }\n+\n+void SetThreadPriority(int nPriority)\n+{\n+#ifdef WIN32\n+    SetThreadPriority(GetCurrentThread(), nPriority);\n+#else // WIN32\n+#ifdef PRIO_THREAD\n+    setpriority(PRIO_THREAD, 0, nPriority);\n+#else // PRIO_THREAD\n+    setpriority(PRIO_PROCESS, 0, nPriority);\n+#endif // PRIO_THREAD\n+#endif // WIN32\n+}"
      },
      {
        "sha": "939e59c301333688cdf355d7bb2ae108df8b6190",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 28,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/610a8c075958aa95b97f62a7ab020a543694c23d/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/610a8c075958aa95b97f62a7ab020a543694c23d/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=610a8c075958aa95b97f62a7ab020a543694c23d",
        "patch": "@@ -342,34 +342,7 @@ bool TimingResistantEqual(const T& a, const T& b)\n     return accumulator == 0;\n }\n \n-#ifdef WIN32\n-inline void SetThreadPriority(int nPriority)\n-{\n-    SetThreadPriority(GetCurrentThread(), nPriority);\n-}\n-#else\n-\n-// PRIO_MAX is not defined on Solaris\n-#ifndef PRIO_MAX\n-#define PRIO_MAX 20\n-#endif\n-#define THREAD_PRIORITY_LOWEST          PRIO_MAX\n-#define THREAD_PRIORITY_BELOW_NORMAL    2\n-#define THREAD_PRIORITY_NORMAL          0\n-#define THREAD_PRIORITY_ABOVE_NORMAL    (-2)\n-\n-inline void SetThreadPriority(int nPriority)\n-{\n-    // It's unclear if it's even possible to change thread priorities on Linux,\n-    // but we really and truly need it for the generation threads.\n-#ifdef PRIO_THREAD\n-    setpriority(PRIO_THREAD, 0, nPriority);\n-#else\n-    setpriority(PRIO_PROCESS, 0, nPriority);\n-#endif\n-}\n-#endif\n-\n+void SetThreadPriority(int nPriority);\n void RenameThread(const char* name);\n \n // Standard wrapper for do-something-forever thread functions."
      }
    ]
  },
  {
    "sha": "651480c8e453e7df9d735f684e6a3e368c777ac0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTE0ODBjOGU0NTNlN2RmOWQ3MzVmNjg0ZTZhM2UzNjhjNzc3YWMw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-21T03:17:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-26T11:25:21Z"
      },
      "message": "move functions in main and net to implementation files",
      "tree": {
        "sha": "8e65497aec4660779c8b9faedcb62251fc3d5ab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e65497aec4660779c8b9faedcb62251fc3d5ab0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/651480c8e453e7df9d735f684e6a3e368c777ac0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/651480c8e453e7df9d735f684e6a3e368c777ac0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/651480c8e453e7df9d735f684e6a3e368c777ac0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/651480c8e453e7df9d735f684e6a3e368c777ac0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "610a8c075958aa95b97f62a7ab020a543694c23d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610a8c075958aa95b97f62a7ab020a543694c23d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/610a8c075958aa95b97f62a7ab020a543694c23d"
      }
    ],
    "stats": {
      "total": 437,
      "additions": 226,
      "deletions": 211
    },
    "files": [
      {
        "sha": "d9f897f44771e697927d4580bd7b40fe617e0063",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/651480c8e453e7df9d735f684e6a3e368c777ac0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/651480c8e453e7df9d735f684e6a3e368c777ac0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=651480c8e453e7df9d735f684e6a3e368c777ac0",
        "patch": "@@ -4655,7 +4655,68 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n }\n \n \n+bool CBlockUndo::WriteToDisk(CDiskBlockPos &pos, const uint256 &hashBlock)\n+{\n+    // Open history file to append\n+    CAutoFile fileout = CAutoFile(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n+    if (!fileout)\n+        return error(\"CBlockUndo::WriteToDisk : OpenUndoFile failed\");\n+\n+    // Write index header\n+    unsigned int nSize = fileout.GetSerializeSize(*this);\n+    fileout << FLATDATA(Params().MessageStart()) << nSize;\n+\n+    // Write undo data\n+    long fileOutPos = ftell(fileout);\n+    if (fileOutPos < 0)\n+        return error(\"CBlockUndo::WriteToDisk : ftell failed\");\n+    pos.nPos = (unsigned int)fileOutPos;\n+    fileout << *this;\n+\n+    // calculate & write checksum\n+    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n+    hasher << hashBlock;\n+    hasher << *this;\n+    fileout << hasher.GetHash();\n+\n+    // Flush stdio buffers and commit to disk before returning\n+    fflush(fileout);\n+    if (!IsInitialBlockDownload())\n+        FileCommit(fileout);\n+\n+    return true;\n+}\n+\n+bool CBlockUndo::ReadFromDisk(const CDiskBlockPos &pos, const uint256 &hashBlock)\n+{\n+    // Open history file to read\n+    CAutoFile filein = CAutoFile(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    if (!filein)\n+        return error(\"CBlockUndo::ReadFromDisk : OpenBlockFile failed\");\n+\n+    // Read block\n+    uint256 hashChecksum;\n+    try {\n+        filein >> *this;\n+        filein >> hashChecksum;\n+    }\n+    catch (std::exception &e) {\n+        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+\n+    // Verify checksum\n+    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n+    hasher << hashBlock;\n+    hasher << *this;\n+    if (hashChecksum != hasher.GetHash())\n+        return error(\"CBlockUndo::ReadFromDisk : Checksum mismatch\");\n+\n+    return true;\n+}\n \n+ std::string CBlockFileInfo::ToString() const {\n+     return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst).c_str(), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast).c_str());\n+ }\n \n \n "
      },
      {
        "sha": "0db631f6d62fc7ebf46c9836a9bb9d825219bbab",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 61,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/651480c8e453e7df9d735f684e6a3e368c777ac0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/651480c8e453e7df9d735f684e6a3e368c777ac0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=651480c8e453e7df9d735f684e6a3e368c777ac0",
        "patch": "@@ -312,64 +312,8 @@ class CBlockUndo\n         READWRITE(vtxundo);\n     )\n \n-    bool WriteToDisk(CDiskBlockPos &pos, const uint256 &hashBlock)\n-    {\n-        // Open history file to append\n-        CAutoFile fileout = CAutoFile(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n-        if (!fileout)\n-            return error(\"CBlockUndo::WriteToDisk : OpenUndoFile failed\");\n-\n-        // Write index header\n-        unsigned int nSize = fileout.GetSerializeSize(*this);\n-        fileout << FLATDATA(Params().MessageStart()) << nSize;\n-\n-        // Write undo data\n-        long fileOutPos = ftell(fileout);\n-        if (fileOutPos < 0)\n-            return error(\"CBlockUndo::WriteToDisk : ftell failed\");\n-        pos.nPos = (unsigned int)fileOutPos;\n-        fileout << *this;\n-\n-        // calculate & write checksum\n-        CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n-        hasher << hashBlock;\n-        hasher << *this;\n-        fileout << hasher.GetHash();\n-\n-        // Flush stdio buffers and commit to disk before returning\n-        fflush(fileout);\n-        if (!IsInitialBlockDownload())\n-            FileCommit(fileout);\n-\n-        return true;\n-    }\n-\n-    bool ReadFromDisk(const CDiskBlockPos &pos, const uint256 &hashBlock)\n-    {\n-        // Open history file to read\n-        CAutoFile filein = CAutoFile(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n-        if (!filein)\n-            return error(\"CBlockUndo::ReadFromDisk : OpenBlockFile failed\");\n-\n-        // Read block\n-        uint256 hashChecksum;\n-        try {\n-            filein >> *this;\n-            filein >> hashChecksum;\n-        }\n-        catch (std::exception &e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n-        }\n-\n-        // Verify checksum\n-        CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n-        hasher << hashBlock;\n-        hasher << *this;\n-        if (hashChecksum != hasher.GetHash())\n-            return error(\"CBlockUndo::ReadFromDisk : Checksum mismatch\");\n-\n-        return true;\n-    }\n+    bool WriteToDisk(CDiskBlockPos &pos, const uint256 &hashBlock);\n+    bool ReadFromDisk(const CDiskBlockPos &pos, const uint256 &hashBlock);\n };\n \n \n@@ -625,9 +569,7 @@ class CBlockFileInfo\n          SetNull();\n      }\n \n-     std::string ToString() const {\n-         return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst).c_str(), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast).c_str());\n-     }\n+     std::string ToString() const;\n \n      // update statistics (does not update nSize)\n      void AddBlock(unsigned int nHeightIn, uint64_t nTimeIn) {"
      },
      {
        "sha": "440c271a5e9fbab6c3e4b5bd8fb71a5752104815",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 154,
        "deletions": 0,
        "changes": 154,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/651480c8e453e7df9d735f684e6a3e368c777ac0/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/651480c8e453e7df9d735f684e6a3e368c777ac0/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=651480c8e453e7df9d735f684e6a3e368c777ac0",
        "patch": "@@ -2037,3 +2037,157 @@ bool CAddrDB::Read(CAddrMan& addr)\n \n     return true;\n }\n+\n+unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", 5*1000); }\n+unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n+\n+CNode::CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn, bool fInboundIn) : ssSend(SER_NETWORK, INIT_PROTO_VERSION), setAddrKnown(5000)\n+{\n+    nServices = 0;\n+    hSocket = hSocketIn;\n+    nRecvVersion = INIT_PROTO_VERSION;\n+    nLastSend = 0;\n+    nLastRecv = 0;\n+    nSendBytes = 0;\n+    nRecvBytes = 0;\n+    nTimeConnected = GetTime();\n+    addr = addrIn;\n+    addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n+    nVersion = 0;\n+    strSubVer = \"\";\n+    fWhitelisted = false;\n+    fOneShot = false;\n+    fClient = false; // set by version message\n+    fInbound = fInboundIn;\n+    fNetworkNode = false;\n+    fSuccessfullyConnected = false;\n+    fDisconnect = false;\n+    nRefCount = 0;\n+    nSendSize = 0;\n+    nSendOffset = 0;\n+    hashContinue = 0;\n+    pindexLastGetBlocksBegin = 0;\n+    hashLastGetBlocksEnd = 0;\n+    nStartingHeight = -1;\n+    fStartSync = false;\n+    fGetAddr = false;\n+    fRelayTxes = false;\n+    setInventoryKnown.max_size(SendBufferSize() / 1000);\n+    pfilter = new CBloomFilter();\n+    nPingNonceSent = 0;\n+    nPingUsecStart = 0;\n+    nPingUsecTime = 0;\n+    fPingQueued = false;\n+\n+    {\n+        LOCK(cs_nLastNodeId);\n+        id = nLastNodeId++;\n+    }\n+\n+    if (fLogIPs)\n+        LogPrint(\"net\", \"Added connection to %s peer=%d\\n\", addrName, id);\n+    else\n+        LogPrint(\"net\", \"Added connection peer=%d\\n\", id);\n+\n+    // Be shy and don't send version until we hear\n+    if (hSocket != INVALID_SOCKET && !fInbound)\n+        PushVersion();\n+\n+    GetNodeSignals().InitializeNode(GetId(), this);\n+}\n+\n+CNode::~CNode()\n+{\n+    CloseSocket(hSocket);\n+\n+    if (pfilter)\n+        delete pfilter;\n+\n+    GetNodeSignals().FinalizeNode(GetId());\n+}\n+\n+void CNode::AskFor(const CInv& inv)\n+{\n+    // We're using mapAskFor as a priority queue,\n+    // the key is the earliest time the request can be sent\n+    int64_t nRequestTime;\n+    limitedmap<CInv, int64_t>::const_iterator it = mapAlreadyAskedFor.find(inv);\n+    if (it != mapAlreadyAskedFor.end())\n+        nRequestTime = it->second;\n+    else\n+        nRequestTime = 0;\n+    LogPrint(\"net\", \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str(), id);\n+\n+    // Make sure not to reuse time indexes to keep things in the same order\n+    int64_t nNow = GetTimeMicros() - 1000000;\n+    static int64_t nLastTime;\n+    ++nLastTime;\n+    nNow = std::max(nNow, nLastTime);\n+    nLastTime = nNow;\n+\n+    // Each retry is 2 minutes after the last\n+    nRequestTime = std::max(nRequestTime + 2 * 60 * 1000000, nNow);\n+    if (it != mapAlreadyAskedFor.end())\n+        mapAlreadyAskedFor.update(it, nRequestTime);\n+    else\n+        mapAlreadyAskedFor.insert(std::make_pair(inv, nRequestTime));\n+    mapAskFor.insert(std::make_pair(nRequestTime, inv));\n+}\n+\n+void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSend)\n+{\n+    ENTER_CRITICAL_SECTION(cs_vSend);\n+    assert(ssSend.size() == 0);\n+    ssSend << CMessageHeader(pszCommand, 0);\n+    LogPrint(\"net\", \"sending: %s \", pszCommand);\n+}\n+\n+void CNode::AbortMessage() UNLOCK_FUNCTION(cs_vSend)\n+{\n+    ssSend.clear();\n+\n+    LEAVE_CRITICAL_SECTION(cs_vSend);\n+\n+    LogPrint(\"net\", \"(aborted)\\n\");\n+}\n+\n+void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n+{\n+    // The -*messagestest options are intentionally not documented in the help message,\n+    // since they are only used during development to debug the networking code and are\n+    // not intended for end-users.\n+    if (mapArgs.count(\"-dropmessagestest\") && GetRand(GetArg(\"-dropmessagestest\", 2)) == 0)\n+    {\n+        LogPrint(\"net\", \"dropmessages DROPPING SEND MESSAGE\\n\");\n+        AbortMessage();\n+        return;\n+    }\n+    if (mapArgs.count(\"-fuzzmessagestest\"))\n+        Fuzz(GetArg(\"-fuzzmessagestest\", 10));\n+\n+    if (ssSend.size() == 0)\n+        return;\n+\n+    // Set the size\n+    unsigned int nSize = ssSend.size() - CMessageHeader::HEADER_SIZE;\n+    memcpy((char*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], &nSize, sizeof(nSize));\n+\n+    // Set the checksum\n+    uint256 hash = Hash(ssSend.begin() + CMessageHeader::HEADER_SIZE, ssSend.end());\n+    unsigned int nChecksum = 0;\n+    memcpy(&nChecksum, &hash, sizeof(nChecksum));\n+    assert(ssSend.size () >= CMessageHeader::CHECKSUM_OFFSET + sizeof(nChecksum));\n+    memcpy((char*)&ssSend[CMessageHeader::CHECKSUM_OFFSET], &nChecksum, sizeof(nChecksum));\n+\n+    LogPrint(\"net\", \"(%d bytes) peer=%d\\n\", nSize, id);\n+\n+    std::deque<CSerializeData>::iterator it = vSendMsg.insert(vSendMsg.end(), CSerializeData());\n+    ssSend.GetAndClear(*it);\n+    nSendSize += (*it).size();\n+\n+    // If write queue empty, attempt \"optimistic write\"\n+    if (it == vSendMsg.begin())\n+        SocketSendData(this);\n+\n+    LEAVE_CRITICAL_SECTION(cs_vSend);\n+}"
      },
      {
        "sha": "2b4732c9deed5c0e936b62386e1520fa532cec6a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 8,
        "deletions": 150,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/651480c8e453e7df9d735f684e6a3e368c777ac0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/651480c8e453e7df9d735f684e6a3e368c777ac0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=651480c8e453e7df9d735f684e6a3e368c777ac0",
        "patch": "@@ -51,8 +51,8 @@ static const bool DEFAULT_UPNP = USE_UPNP;\n static const bool DEFAULT_UPNP = false;\n #endif\n \n-inline unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", 5*1000); }\n-inline unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n+unsigned int ReceiveFloodSize();\n+unsigned int SendBufferSize();\n \n void AddOneShot(std::string strDest);\n bool RecvLine(SOCKET hSocket, std::string& strLine);\n@@ -300,70 +300,8 @@ class CNode\n     // Whether a ping is requested.\n     bool fPingQueued;\n \n-    CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = \"\", bool fInboundIn=false) : ssSend(SER_NETWORK, INIT_PROTO_VERSION), setAddrKnown(5000)\n-    {\n-        nServices = 0;\n-        hSocket = hSocketIn;\n-        nRecvVersion = INIT_PROTO_VERSION;\n-        nLastSend = 0;\n-        nLastRecv = 0;\n-        nSendBytes = 0;\n-        nRecvBytes = 0;\n-        nTimeConnected = GetTime();\n-        addr = addrIn;\n-        addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n-        nVersion = 0;\n-        strSubVer = \"\";\n-        fWhitelisted = false;\n-        fOneShot = false;\n-        fClient = false; // set by version message\n-        fInbound = fInboundIn;\n-        fNetworkNode = false;\n-        fSuccessfullyConnected = false;\n-        fDisconnect = false;\n-        nRefCount = 0;\n-        nSendSize = 0;\n-        nSendOffset = 0;\n-        hashContinue = 0;\n-        pindexLastGetBlocksBegin = 0;\n-        hashLastGetBlocksEnd = 0;\n-        nStartingHeight = -1;\n-        fStartSync = false;\n-        fGetAddr = false;\n-        fRelayTxes = false;\n-        setInventoryKnown.max_size(SendBufferSize() / 1000);\n-        pfilter = new CBloomFilter();\n-        nPingNonceSent = 0;\n-        nPingUsecStart = 0;\n-        nPingUsecTime = 0;\n-        fPingQueued = false;\n-\n-        {\n-            LOCK(cs_nLastNodeId);\n-            id = nLastNodeId++;\n-        }\n-\n-        if (fLogIPs)\n-            LogPrint(\"net\", \"Added connection to %s peer=%d\\n\", addrName, id);\n-        else\n-            LogPrint(\"net\", \"Added connection peer=%d\\n\", id);\n-\n-        // Be shy and don't send version until we hear\n-        if (hSocket != INVALID_SOCKET && !fInbound)\n-            PushVersion();\n-\n-        GetNodeSignals().InitializeNode(GetId(), this);\n-    }\n-\n-    ~CNode()\n-    {\n-        CloseSocket(hSocket);\n-\n-        if (pfilter)\n-            delete pfilter;\n-\n-        GetNodeSignals().FinalizeNode(GetId());\n-    }\n+    CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = \"\", bool fInboundIn=false);\n+    ~CNode();\n \n private:\n     // Network usage totals\n@@ -452,96 +390,16 @@ class CNode\n         }\n     }\n \n-    void AskFor(const CInv& inv)\n-    {\n-        // We're using mapAskFor as a priority queue,\n-        // the key is the earliest time the request can be sent\n-        int64_t nRequestTime;\n-        limitedmap<CInv, int64_t>::const_iterator it = mapAlreadyAskedFor.find(inv);\n-        if (it != mapAlreadyAskedFor.end())\n-            nRequestTime = it->second;\n-        else\n-            nRequestTime = 0;\n-        LogPrint(\"net\", \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str(), id);\n-\n-        // Make sure not to reuse time indexes to keep things in the same order\n-        int64_t nNow = GetTimeMicros() - 1000000;\n-        static int64_t nLastTime;\n-        ++nLastTime;\n-        nNow = std::max(nNow, nLastTime);\n-        nLastTime = nNow;\n-\n-        // Each retry is 2 minutes after the last\n-        nRequestTime = std::max(nRequestTime + 2 * 60 * 1000000, nNow);\n-        if (it != mapAlreadyAskedFor.end())\n-            mapAlreadyAskedFor.update(it, nRequestTime);\n-        else\n-            mapAlreadyAskedFor.insert(std::make_pair(inv, nRequestTime));\n-        mapAskFor.insert(std::make_pair(nRequestTime, inv));\n-    }\n-\n-\n+    void AskFor(const CInv& inv);\n \n     // TODO: Document the postcondition of this function.  Is cs_vSend locked?\n-    void BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSend)\n-    {\n-        ENTER_CRITICAL_SECTION(cs_vSend);\n-        assert(ssSend.size() == 0);\n-        ssSend << CMessageHeader(pszCommand, 0);\n-        LogPrint(\"net\", \"sending: %s \", pszCommand);\n-    }\n+    void BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSend);\n \n     // TODO: Document the precondition of this function.  Is cs_vSend locked?\n-    void AbortMessage() UNLOCK_FUNCTION(cs_vSend)\n-    {\n-        ssSend.clear();\n-\n-        LEAVE_CRITICAL_SECTION(cs_vSend);\n-\n-        LogPrint(\"net\", \"(aborted)\\n\");\n-    }\n+    void AbortMessage() UNLOCK_FUNCTION(cs_vSend);\n \n     // TODO: Document the precondition of this function.  Is cs_vSend locked?\n-    void EndMessage() UNLOCK_FUNCTION(cs_vSend)\n-    {\n-        // The -*messagestest options are intentionally not documented in the help message,\n-        // since they are only used during development to debug the networking code and are\n-        // not intended for end-users.\n-        if (mapArgs.count(\"-dropmessagestest\") && GetRand(GetArg(\"-dropmessagestest\", 2)) == 0)\n-        {\n-            LogPrint(\"net\", \"dropmessages DROPPING SEND MESSAGE\\n\");\n-            AbortMessage();\n-            return;\n-        }\n-        if (mapArgs.count(\"-fuzzmessagestest\"))\n-            Fuzz(GetArg(\"-fuzzmessagestest\", 10));\n-\n-        if (ssSend.size() == 0)\n-            return;\n-\n-        // Set the size\n-        unsigned int nSize = ssSend.size() - CMessageHeader::HEADER_SIZE;\n-        memcpy((char*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], &nSize, sizeof(nSize));\n-\n-        // Set the checksum\n-        uint256 hash = Hash(ssSend.begin() + CMessageHeader::HEADER_SIZE, ssSend.end());\n-        unsigned int nChecksum = 0;\n-        memcpy(&nChecksum, &hash, sizeof(nChecksum));\n-        assert(ssSend.size () >= CMessageHeader::CHECKSUM_OFFSET + sizeof(nChecksum));\n-        memcpy((char*)&ssSend[CMessageHeader::CHECKSUM_OFFSET], &nChecksum, sizeof(nChecksum));\n-\n-        LogPrint(\"net\", \"(%d bytes) peer=%d\\n\", nSize, id);\n-\n-        std::deque<CSerializeData>::iterator it = vSendMsg.insert(vSendMsg.end(), CSerializeData());\n-        ssSend.GetAndClear(*it);\n-        nSendSize += (*it).size();\n-\n-        // If write queue empty, attempt \"optimistic write\"\n-        if (it == vSendMsg.begin())\n-            SocketSendData(this);\n-\n-        LEAVE_CRITICAL_SECTION(cs_vSend);\n-    }\n+    void EndMessage() UNLOCK_FUNCTION(cs_vSend);\n \n     void PushVersion();\n "
      }
    ]
  },
  {
    "sha": "af8297c010154243cb11b27184a9badb4e03ecb0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjgyOTdjMDEwMTU0MjQzY2IxMWIyNzE4NGE5YmFkYjRlMDNlY2Iw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-21T03:04:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-26T11:25:21Z"
      },
      "message": "Move functions in wallet.h to implementation file\n\nBreaks compile-time dependency of wallet.h on util.",
      "tree": {
        "sha": "914f153d33ec3b9e9536e841b4881142e15efb51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/914f153d33ec3b9e9536e841b4881142e15efb51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af8297c010154243cb11b27184a9badb4e03ecb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af8297c010154243cb11b27184a9badb4e03ecb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af8297c010154243cb11b27184a9badb4e03ecb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af8297c010154243cb11b27184a9badb4e03ecb0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "651480c8e453e7df9d735f684e6a3e368c777ac0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/651480c8e453e7df9d735f684e6a3e368c777ac0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/651480c8e453e7df9d735f684e6a3e368c777ac0"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 20,
      "deletions": 15
    },
    "files": [
      {
        "sha": "ee4793b3f187b708e79ade3fab4ff58b4a2ce161",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8297c010154243cb11b27184a9badb4e03ecb0/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8297c010154243cb11b27184a9badb4e03ecb0/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=af8297c010154243cb11b27184a9badb4e03ecb0",
        "patch": "@@ -2168,3 +2168,20 @@ bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, st\n     }\n     return false;\n }\n+\n+CKeyPool::CKeyPool()\n+{\n+    nTime = GetTime();\n+}\n+\n+CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn)\n+{\n+    nTime = GetTime();\n+    vchPubKey = vchPubKeyIn;\n+}\n+\n+CWalletKey::CWalletKey(int64_t nExpires)\n+{\n+    nTimeCreated = (nExpires ? GetTime() : 0);\n+    nTimeExpires = nExpires;\n+}"
      },
      {
        "sha": "7cbbb2a6ed60051825238f2f873b34e8945b89b3",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 15,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8297c010154243cb11b27184a9badb4e03ecb0/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8297c010154243cb11b27184a9badb4e03ecb0/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=af8297c010154243cb11b27184a9badb4e03ecb0",
        "patch": "@@ -61,16 +61,8 @@ class CKeyPool\n     int64_t nTime;\n     CPubKey vchPubKey;\n \n-    CKeyPool()\n-    {\n-        nTime = GetTime();\n-    }\n-\n-    CKeyPool(const CPubKey& vchPubKeyIn)\n-    {\n-        nTime = GetTime();\n-        vchPubKey = vchPubKeyIn;\n-    }\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn);\n \n     IMPLEMENT_SERIALIZE\n     (\n@@ -840,11 +832,7 @@ class CWalletKey\n     //// todo: add something to note what created it (user, getnewaddress, change)\n     ////   maybe should have a map<string, string> property map\n \n-    CWalletKey(int64_t nExpires=0)\n-    {\n-        nTimeCreated = (nExpires ? GetTime() : 0);\n-        nTimeExpires = nExpires;\n-    }\n+    CWalletKey(int64_t nExpires=0);\n \n     IMPLEMENT_SERIALIZE\n     ("
      }
    ]
  },
  {
    "sha": "b4aa769bcb82519024ee54fc84a37c34420d53b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGFhNzY5YmNiODI1MTkwMjRlZTU0ZmM4NGEzN2MzNDQyMGQ1M2I4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-21T13:50:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-26T11:25:21Z"
      },
      "message": "Move `S_I*` constants and `MSG_NOSIGNAL` to compat.h",
      "tree": {
        "sha": "9a54ee0151c53ab94e7eddfeec9e0fcabfa8fc9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a54ee0151c53ab94e7eddfeec9e0fcabfa8fc9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4aa769bcb82519024ee54fc84a37c34420d53b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4aa769bcb82519024ee54fc84a37c34420d53b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4aa769bcb82519024ee54fc84a37c34420d53b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4aa769bcb82519024ee54fc84a37c34420d53b8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af8297c010154243cb11b27184a9badb4e03ecb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af8297c010154243cb11b27184a9badb4e03ecb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af8297c010154243cb11b27184a9badb4e03ecb0"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "4fc28a36e005d51cbeccd7044825242633153d23",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4aa769bcb82519024ee54fc84a37c34420d53b8/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4aa769bcb82519024ee54fc84a37c34420d53b8/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=b4aa769bcb82519024ee54fc84a37c34420d53b8",
        "patch": "@@ -59,6 +59,20 @@ typedef u_int SOCKET;\n #define SOCKET_ERROR        -1\n #endif\n \n+#ifdef WIN32\n+#ifndef S_IRUSR\n+#define S_IRUSR             0400\n+#define S_IWUSR             0200\n+#endif\n+#else\n+#define MAX_PATH            1024\n+#endif\n+\n+// As Solaris does not have the MSG_NOSIGNAL flag for send(2) syscall, it is defined as 0\n+#if !defined(HAVE_MSG_NOSIGNAL) && !defined(MSG_NOSIGNAL)\n+#define MSG_NOSIGNAL 0\n+#endif\n+\n #ifndef WIN32\n // PRIO_MAX is not defined on Solaris\n #ifndef PRIO_MAX"
      },
      {
        "sha": "e0feca07ca90fe620500eb854cbf5b7f563e997d",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4aa769bcb82519024ee54fc84a37c34420d53b8/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4aa769bcb82519024ee54fc84a37c34420d53b8/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=b4aa769bcb82519024ee54fc84a37c34420d53b8",
        "patch": "@@ -46,20 +46,6 @@ static const int64_t CENT = 1000000;\n // This is needed because the foreach macro can't get over the comma in pair<t1, t2>\n #define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n \n-#ifdef WIN32\n-#define MSG_DONTWAIT        0\n-\n-#ifndef S_IRUSR\n-#define S_IRUSR             0400\n-#define S_IWUSR             0200\n-#endif\n-#else\n-#define MAX_PATH            1024\n-#endif\n-// As Solaris does not have the MSG_NOSIGNAL flag for send(2) syscall, it is defined as 0\n-#if !defined(HAVE_MSG_NOSIGNAL) && !defined(MSG_NOSIGNAL)\n-#define MSG_NOSIGNAL 0\n-#endif\n \n inline void MilliSleep(int64_t n)\n {"
      }
    ]
  },
  {
    "sha": "6e5fd003e04b81115b6b164b21f048472d575535",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTVmZDAwM2UwNGI4MTExNWI2YjE2NGIyMWYwNDg0NzJkNTc1NTM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-21T14:11:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-26T11:25:21Z"
      },
      "message": "Move `*Version()` functions to version.h/cpp",
      "tree": {
        "sha": "7420ebadf22b1b10bebd08ad3294abc7e8a9b565",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7420ebadf22b1b10bebd08ad3294abc7e8a9b565"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e5fd003e04b81115b6b164b21f048472d575535",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e5fd003e04b81115b6b164b21f048472d575535",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e5fd003e04b81115b6b164b21f048472d575535",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e5fd003e04b81115b6b164b21f048472d575535/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4aa769bcb82519024ee54fc84a37c34420d53b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4aa769bcb82519024ee54fc84a37c34420d53b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4aa769bcb82519024ee54fc84a37c34420d53b8"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 36,
      "deletions": 28
    },
    "files": [
      {
        "sha": "10ca26ff2bc4f85079c70247dd05322c2a20759e",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e5fd003e04b81115b6b164b21f048472d575535/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e5fd003e04b81115b6b164b21f048472d575535/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=6e5fd003e04b81115b6b164b21f048472d575535",
        "patch": "@@ -8,6 +8,7 @@\n #include \"rpcclient.h\"\n #include \"rpcprotocol.h\"\n #include \"chainparamsbase.h\"\n+#include \"version.h\"\n \n #include <boost/filesystem/operations.hpp>\n "
      },
      {
        "sha": "1a39894c9bf3232d1431bcbb403b99245bcf33a4",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e5fd003e04b81115b6b164b21f048472d575535/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e5fd003e04b81115b6b164b21f048472d575535/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=6e5fd003e04b81115b6b164b21f048472d575535",
        "patch": "@@ -10,9 +10,9 @@\n #include \"clientmodel.h\"\n #include \"guiutil.h\"\n \n-#include \"clientversion.h\"\n #include \"init.h\"\n #include \"util.h\"\n+#include \"version.h\"\n \n #include <QLabel>\n #include <QRegExp>"
      },
      {
        "sha": "a4deddbed36aa85563a6f42bbb60903bc7ce107e",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e5fd003e04b81115b6b164b21f048472d575535/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e5fd003e04b81115b6b164b21f048472d575535/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=6e5fd003e04b81115b6b164b21f048472d575535",
        "patch": "@@ -6,6 +6,7 @@\n #include \"rpcprotocol.h\"\n \n #include \"util.h\"\n+#include \"version.h\"\n \n #include <stdint.h>\n "
      },
      {
        "sha": "73d49a1fe4d79645894215e981ef4f5fab191996",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e5fd003e04b81115b6b164b21f048472d575535/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e5fd003e04b81115b6b164b21f048472d575535/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=6e5fd003e04b81115b6b164b21f048472d575535",
        "patch": "@@ -121,6 +121,7 @@ namespace tfm = tinyformat;\n #include <cassert>\n #include <iostream>\n #include <sstream>\n+#include <stdexcept>\n \n #ifndef TINYFORMAT_ERROR\n #   define TINYFORMAT_ERROR(reason) assert(0 && reason)"
      },
      {
        "sha": "80d27d582640089513b691a1cd60edadddc8e5eb",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e5fd003e04b81115b6b164b21f048472d575535/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e5fd003e04b81115b6b164b21f048472d575535/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=6e5fd003e04b81115b6b164b21f048472d575535",
        "patch": "@@ -13,7 +13,6 @@\n #include \"random.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n-#include \"version.h\"\n \n #include <stdarg.h>\n \n@@ -1116,30 +1115,6 @@ void SetMockTime(int64_t nMockTimeIn)\n     nMockTime = nMockTimeIn;\n }\n \n-string FormatVersion(int nVersion)\n-{\n-    if (nVersion%100 == 0)\n-        return strprintf(\"%d.%d.%d\", nVersion/1000000, (nVersion/10000)%100, (nVersion/100)%100);\n-    else\n-        return strprintf(\"%d.%d.%d.%d\", nVersion/1000000, (nVersion/10000)%100, (nVersion/100)%100, nVersion%100);\n-}\n-\n-string FormatFullVersion()\n-{\n-    return CLIENT_BUILD;\n-}\n-\n-// Format the subversion field according to BIP 14 spec (https://en.bitcoin.it/wiki/BIP_0014)\n-std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)\n-{\n-    std::ostringstream ss;\n-    ss << \"/\";\n-    ss << name << \":\" << FormatVersion(nClientVersion);\n-    if (!comments.empty())\n-        ss << \"(\" << boost::algorithm::join(comments, \"; \") << \")\";\n-    ss << \"/\";\n-    return ss.str();\n-}\n \n #ifdef WIN32\n boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)"
      },
      {
        "sha": "cfbf30c6a4ec36a4aae4f10f0cad625401eb900b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e5fd003e04b81115b6b164b21f048472d575535/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e5fd003e04b81115b6b164b21f048472d575535/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=6e5fd003e04b81115b6b164b21f048472d575535",
        "patch": "@@ -156,8 +156,6 @@ boost::filesystem::path GetTempPath();\n void ShrinkDebugFile();\n int64_t GetTime();\n void SetMockTime(int64_t nMockTimeIn);\n-std::string FormatFullVersion();\n-std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments);\n void runCommand(std::string strCommand);\n \n inline std::string i64tostr(int64_t n)"
      },
      {
        "sha": "8311041ed2827244c29d48cc2b7a756e465c238f",
        "filename": "src/version.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e5fd003e04b81115b6b164b21f048472d575535/src/version.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e5fd003e04b81115b6b164b21f048472d575535/src/version.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.cpp?ref=6e5fd003e04b81115b6b164b21f048472d575535",
        "patch": "@@ -4,7 +4,10 @@\n \n #include \"version.h\"\n \n+#include \"tinyformat.h\"\n+\n #include <string>\n+#include <boost/algorithm/string/join.hpp>\n \n // Name of client reported in the 'version' message. Report the same name\n // for both bitcoind and bitcoin-qt, to make it harder for attackers to\n@@ -69,3 +72,28 @@ const std::string CLIENT_NAME(\"Satoshi\");\n \n const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);\n const std::string CLIENT_DATE(BUILD_DATE);\n+\n+static std::string FormatVersion(int nVersion)\n+{\n+    if (nVersion%100 == 0)\n+        return strprintf(\"%d.%d.%d\", nVersion/1000000, (nVersion/10000)%100, (nVersion/100)%100);\n+    else\n+        return strprintf(\"%d.%d.%d.%d\", nVersion/1000000, (nVersion/10000)%100, (nVersion/100)%100, nVersion%100);\n+}\n+\n+std::string FormatFullVersion()\n+{\n+    return CLIENT_BUILD;\n+}\n+\n+// Format the subversion field according to BIP 14 spec (https://en.bitcoin.it/wiki/BIP_0014)\n+std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)\n+{\n+    std::ostringstream ss;\n+    ss << \"/\";\n+    ss << name << \":\" << FormatVersion(nClientVersion);\n+    if (!comments.empty())\n+        ss << \"(\" << boost::algorithm::join(comments, \"; \") << \")\";\n+    ss << \"/\";\n+    return ss.str();\n+}"
      },
      {
        "sha": "3a6c0f37193b500381c0b371a52d9718a755360b",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e5fd003e04b81115b6b164b21f048472d575535/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e5fd003e04b81115b6b164b21f048472d575535/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=6e5fd003e04b81115b6b164b21f048472d575535",
        "patch": "@@ -7,6 +7,7 @@\n #include \"clientversion.h\"\n \n #include <string>\n+#include <vector>\n \n //\n // client versioning\n@@ -48,4 +49,7 @@ static const int BIP0031_VERSION = 60000;\n // \"mempool\" command, enhanced \"getdata\" behavior starts with this version\n static const int MEMPOOL_GD_VERSION = 60002;\n \n+std::string FormatFullVersion();\n+std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments);\n+\n #endif"
      }
    ]
  },
  {
    "sha": "f841aa2892ffd97d564deee103555149d9fbcd9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODQxYWEyODkyZmZkOTdkNTY0ZGVlZTEwMzU1NTE0OWQ5ZmJjZDlh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-20T14:33:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-26T11:25:22Z"
      },
      "message": "Move `COIN` and `CENT` to core.h\n\nEventually these should end up in `money.h` after monetary\namounts are typedef'ed, but at least they don't belong in `util.h`.",
      "tree": {
        "sha": "170047b2b225aa762b298d6f8d7fed7c2b230fea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/170047b2b225aa762b298d6f8d7fed7c2b230fea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f841aa2892ffd97d564deee103555149d9fbcd9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f841aa2892ffd97d564deee103555149d9fbcd9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f841aa2892ffd97d564deee103555149d9fbcd9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f841aa2892ffd97d564deee103555149d9fbcd9a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e5fd003e04b81115b6b164b21f048472d575535",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e5fd003e04b81115b6b164b21f048472d575535",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e5fd003e04b81115b6b164b21f048472d575535"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e3ceac97aa6b2383be68f77b2efd1eb65198047f",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f841aa2892ffd97d564deee103555149d9fbcd9a/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f841aa2892ffd97d564deee103555149d9fbcd9a/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=f841aa2892ffd97d564deee103555149d9fbcd9a",
        "patch": "@@ -14,6 +14,9 @@\n \n class CTransaction;\n \n+static const int64_t COIN = 100000000;\n+static const int64_t CENT = 1000000;\n+\n /** No amount larger than this (in satoshi) is valid */\n static const int64_t MAX_MONEY = 21000000 * COIN;\n inline bool MoneyRange(int64_t nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }"
      },
      {
        "sha": "cbd311574a342c45eb0717af3146e6d37d9652d4",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f841aa2892ffd97d564deee103555149d9fbcd9a/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f841aa2892ffd97d564deee103555149d9fbcd9a/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f841aa2892ffd97d564deee103555149d9fbcd9a",
        "patch": "@@ -34,9 +34,6 @@\n \n class uint256;\n \n-static const int64_t COIN = 100000000;\n-static const int64_t CENT = 1000000;\n-\n #define BEGIN(a)            ((char*)&(a))\n #define END(a)              ((char*)&((&(a))[1]))\n #define UBEGIN(a)           ((unsigned char*)&(a))"
      }
    ]
  },
  {
    "sha": "ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDQ5YzI1NmMzM2JmZTQwODhmZDNjN2VjYjdkMjhjYjgxYThmYzcw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-21T14:11:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-26T11:25:22Z"
      },
      "message": "Split up util.cpp/h\n\nSplit up util.cpp/h into:\n\n- string utilities (hex, base32, base64): no internal dependencies, no dependency on boost (apart from foreach)\n- money utilities (parsesmoney, formatmoney)\n- time utilities (gettime*, sleep, format date):\n- and the rest (logging, argument parsing, config file parsing)\n\nThe latter is basically the environment and OS handling,\nand is stripped of all utility functions, so we may want to\nrename it to something else than util.cpp/h for clarity (Matt suggested\nosinterface).\n\nBreaks dependency of sha256.cpp on all the things pulled in by util.",
      "tree": {
        "sha": "c4152c73cf6a424a882a125fa89c59ee6869bb86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4152c73cf6a424a882a125fa89c59ee6869bb86"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f841aa2892ffd97d564deee103555149d9fbcd9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f841aa2892ffd97d564deee103555149d9fbcd9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f841aa2892ffd97d564deee103555149d9fbcd9a"
      }
    ],
    "stats": {
      "total": 1609,
      "additions": 875,
      "deletions": 734
    },
    "files": [
      {
        "sha": "655bfc88c3be1098ccaee96d212768cf01d5f133",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -109,6 +109,9 @@ BITCOIN_CORE_H = \\\n   ui_interface.h \\\n   uint256.h \\\n   util.h \\\n+  utilstrencodings.h \\\n+  utilmoneystr.h \\\n+  utiltime.h \\\n   version.h \\\n   walletdb.h \\\n   wallet.h \\\n@@ -219,6 +222,9 @@ libbitcoin_util_a_SOURCES = \\\n   sync.cpp \\\n   uint256.cpp \\\n   util.cpp \\\n+  utilstrencodings.cpp \\\n+  utilmoneystr.cpp \\\n+  utiltime.cpp \\\n   version.cpp \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "3271ecfbfd307338d7fe8a8e2a1a70bb7f7e84ee",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -19,6 +19,7 @@\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/foreach.hpp>\n+#include <boost/thread.hpp>\n \n using namespace std;\n "
      },
      {
        "sha": "871aaf93df5ed045072117ee5e606bf0e3246dcb",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -8,6 +8,7 @@\n #include \"rpcclient.h\"\n #include \"rpcprotocol.h\"\n #include \"chainparamsbase.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <boost/filesystem/operations.hpp>"
      },
      {
        "sha": "75f0fb69f26e42a21422c9a7b58db8d2c9984053",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"base58.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n #include \"core.h\"\n #include \"main.h\"         // for MAX_BLOCK_SIZE\n #include \"keystore.h\""
      },
      {
        "sha": "5be8708979b7f97ec1ce0133b250136245d84d1f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n \n /* Introduction text for doxygen: */\n "
      },
      {
        "sha": "b395b5c0908eba93f9f1aa621554f1dc354ea5b6",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -8,6 +8,7 @@\n #include \"core.h\"\n #include \"serialize.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n #include \"base58.h\"\n \n using namespace std;"
      },
      {
        "sha": "8aa2bb05177181870612f506e1f8185022f34562",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -5,6 +5,7 @@\n #include \"crypter.h\"\n \n #include \"script.h\"\n+#include \"util.h\"\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "8c139843a1818aeb8e0f6f427e5cfeba85287605",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -9,6 +9,7 @@\n #include \"hash.h\"\n #include \"protocol.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <stdint.h>\n \n@@ -17,6 +18,7 @@\n #endif\n \n #include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n #include <boost/version.hpp>\n #include <openssl/rand.h>\n "
      },
      {
        "sha": "e972413c4b9cbffd8cb2f80ebdb3b26244064326",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -19,6 +19,7 @@\n #include \"txdb.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n #ifdef ENABLE_WALLET\n #include \"db.h\"\n #include \"wallet.h\"\n@@ -36,6 +37,7 @@\n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/interprocess/sync/file_lock.hpp>\n+#include <boost/thread.hpp>\n #include <openssl/crypto.h>\n \n using namespace boost;"
      },
      {
        "sha": "c6322eadce82b1a3daefba05867fe7d6f840c923",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -8,6 +8,7 @@\n #include \"crypter.h\"\n #include \"key.h\"\n #include \"script.h\"\n+#include \"util.h\"\n \n #include <boost/foreach.hpp>\n "
      },
      {
        "sha": "322f580f10b0ae369e3b16e14003a8543d720b9b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -24,6 +24,7 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n+#include <boost/thread.hpp>\n \n using namespace std;\n using namespace boost;"
      },
      {
        "sha": "8696edcf6e9d97e7675342de3bdfb2e777bdf76d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -3,19 +3,21 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <inttypes.h>\n-\n #include \"miner.h\"\n \n #include \"core.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"pow.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif\n \n+#include <boost/thread.hpp>\n+\n using namespace std;\n \n //////////////////////////////////////////////////////////////////////////////"
      },
      {
        "sha": "e2adba85175565ec4695ae427980913c75cf6448",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -28,6 +28,7 @@\n #endif\n \n #include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n \n // Dump addresses to peers.dat every 15 minutes (900s)\n #define DUMP_ADDRESSES_INTERVAL 900"
      },
      {
        "sha": "bfad32b2c17ab37faa0deaa314b1a43871103b79",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -16,7 +16,7 @@\n #include \"random.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n-#include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <deque>\n #include <stdint.h>\n@@ -25,6 +25,7 @@\n #include <arpa/inet.h>\n #endif\n \n+#include <boost/filesystem/path.hpp>\n #include <boost/foreach.hpp>\n #include <boost/signals2/signal.hpp>\n "
      },
      {
        "sha": "d5821d4465bc81e3b114bf0fa47820e284b2fe09",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -13,6 +13,7 @@\n #include \"sync.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #ifdef HAVE_GETADDRINFO_A\n #include <netdb.h>\n@@ -27,6 +28,7 @@\n \n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n+#include <boost/thread.hpp>\n \n #if !defined(HAVE_MSG_NOSIGNAL) && !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0"
      },
      {
        "sha": "8b00fd40571a6435e3aec86dd2fa75f13b3de345",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -8,6 +8,7 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n \n+#include <cstdio>\n #include <stdint.h>\n #include <string>\n "
      },
      {
        "sha": "b091cbec3dc689f1a86c7482bd2c37ff4232d6c7",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -9,6 +9,7 @@\n #include \"core.h\"\n #include \"main.h\"\n #include \"uint256.h\"\n+#include \"util.h\"\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n {"
      },
      {
        "sha": "12277a8ad0040e9ed587440ef5672a1553a8b9bd",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -33,6 +33,7 @@\n #include <stdint.h>\n \n #include <boost/filesystem/operations.hpp>\n+#include <boost/thread.hpp>\n #include <QApplication>\n #include <QDebug>\n #include <QLibraryInfo>"
      },
      {
        "sha": "d0a5ff13c3ac72275d2b645bd90875a77739663c",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -24,6 +24,7 @@\n #endif\n \n #include \"init.h\"\n+#include \"util.h\"\n #include \"ui_interface.h\"\n \n #include <iostream>"
      },
      {
        "sha": "9c9ff5b3a1a103635972b5427c78f5b69e7ff525",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -13,6 +13,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"ui_interface.h\"\n+#include \"util.h\"\n \n #include <stdint.h>\n "
      },
      {
        "sha": "c775a7f8d64c841a0ff0a73b83045e820117648a",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -21,6 +21,7 @@\n #include \"wallet.h\" // for CWallet::minTxFee\n #endif\n \n+#include <boost/thread.hpp>\n #include <QDir>\n #include <QIntValidator>\n #include <QLocale>"
      },
      {
        "sha": "f6a4b599de50332f017c8f5de8b3062497b1ed3b",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -11,6 +11,7 @@\n \n #include \"base58.h\"\n #include \"ui_interface.h\"\n+#include \"util.h\"\n #include \"wallet.h\"\n \n #include <cstdlib>"
      },
      {
        "sha": "8258e719a3639fb1c62d59bf03d6b1daf7e7f262",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -15,6 +15,7 @@\n #include \"transactionrecord.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n+#include \"util.h\"\n #include \"wallet.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "7df9d1bc2df42a6bc1a9862158ad36b63279ed5b",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -11,9 +11,10 @@\n #include \"guiutil.h\"\n \n #include \"init.h\"\n-#include \"util.h\"\n #include \"version.h\"\n \n+#include <stdio.h>\n+\n #include <QLabel>\n #include <QRegExp>\n #include <QVBoxLayout>"
      },
      {
        "sha": "22c942acc04163c002a3612f7b8a552b023541f7",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -8,12 +8,14 @@\n #ifdef WIN32\n #include \"compat.h\" // for Windows API\n #endif\n+#include \"serialize.h\" // for begin_ptr(vec)\n #include \"util.h\" // for LogPrint()\n+#include \"utilstrencodings.h\" // for GetTime()\n \n #ifndef WIN32\n #include <sys/time.h>\n #endif\n-\n+#include <limits>\n #include <openssl/crypto.h>\n #include <openssl/err.h>\n #include <openssl/rand.h>"
      },
      {
        "sha": "58cab140454b997af5f4fecafa616ca2db69544e",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -7,6 +7,7 @@\n #include \"main.h\"\n #include \"rpcserver.h\"\n #include \"sync.h\"\n+#include \"util.h\"\n \n #include <stdint.h>\n "
      },
      {
        "sha": "e68ddee04096942b580c22a7e61a8171fc39de47",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -7,6 +7,8 @@\n #include \"init.h\"\n #include \"main.h\"\n #include \"sync.h\"\n+#include \"utiltime.h\"\n+#include \"util.h\"\n #include \"wallet.h\"\n \n #include <fstream>"
      },
      {
        "sha": "6e508abcda42fac25043edc9037d0958b85a28ef",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -11,6 +11,7 @@\n #include \"miner.h\"\n #include \"pow.h\"\n #include \"core_io.h\"\n+#include \"util.h\"\n #ifdef ENABLE_WALLET\n #include \"db.h\"\n #include \"wallet.h\""
      },
      {
        "sha": "808b9bbd2a73ab3a7b79d8bb554be77cc72c7d43",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -6,6 +6,9 @@\n #include \"rpcprotocol.h\"\n \n #include \"util.h\"\n+#include \"tinyformat.h\"\n+#include \"utilstrencodings.h\"\n+#include \"utiltime.h\"\n #include \"version.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "c9133bd3d272a1e188a5934e77778b10653b4694",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -23,6 +23,7 @@\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n+#include <boost/thread.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace boost;\n@@ -82,6 +83,11 @@ void RPCTypeCheck(const Object& o,\n     }\n }\n \n+static inline int64_t roundint64(double d)\n+{\n+    return (int64_t)(d > 0 ? d + 0.5 : d - 0.5);\n+}\n+\n int64_t AmountFromValue(const Value& value)\n {\n     double dAmount = value.get_real();"
      },
      {
        "sha": "4c7bb10c372aee528217b33c98e78d07e6a33651",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -18,8 +18,9 @@\n #include \"util.h\"\n \n #include <boost/foreach.hpp>\n-#include <boost/tuple/tuple.hpp>\n+#include <boost/thread.hpp>\n #include <boost/tuple/tuple_comparison.hpp>\n+#include <boost/tuple/tuple.hpp>\n \n using namespace std;\n using namespace boost;"
      },
      {
        "sha": "462e3f23028974cf74a920e1d394f8a604ea14a5",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -7,7 +7,8 @@\n #define H_BITCOIN_SCRIPT\n \n #include \"key.h\"\n-#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"tinyformat.h\"\n \n #include <stdexcept>\n #include <stdint.h>"
      },
      {
        "sha": "4ecf6e253574b882c2c7a213abf0092d36ca56c9",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -14,6 +14,7 @@\n #include \"pow.h\"\n #include \"script.h\"\n #include \"serialize.h\"\n+#include \"util.h\"\n \n #include <stdint.h>\n "
      },
      {
        "sha": "4af87cf8ef79d4c46eff20a44b11031bd20b3347",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -11,6 +11,7 @@\n \n #include \"serialize.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <fstream>"
      },
      {
        "sha": "69888da3dfa010bfca53a040b4e4437524a6064d",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -4,6 +4,8 @@\n \n #include \"util.h\"\n \n+#include \"allocators.h\"\n+\n #include <boost/test/unit_test.hpp>\n \n BOOST_AUTO_TEST_SUITE(allocator_tests)"
      },
      {
        "sha": "68617abbdd5f844ac22c7556bb5b37582bff9d09",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "f2bf3326ad8d8e43c98cd887cf52b84f77a8765c",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "fdea12846a083392e52dc7b3703c03f7f0784598",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -9,6 +9,7 @@\n \n \n #include \"main.h\"\n+#include \"utiltime.h\"\n \n #include <cstdio>\n "
      },
      {
        "sha": "a3eec270ee9aad290c783fb30842fd00209d2cac",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -6,7 +6,7 @@\n #include \"crypto/sha1.h\"\n #include \"crypto/sha2.h\"\n #include \"random.h\"\n-#include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <vector>\n "
      },
      {
        "sha": "b8e290f071fda3e2573f8db7d6ea033f812f3a7b",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"hash.h\"\n-#include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <vector>\n "
      },
      {
        "sha": "68fad8d038e80381695efa08a4da8ab88ae4f662",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -16,6 +16,7 @@\n \n #include <boost/filesystem.hpp>\n #include <boost/test/unit_test.hpp>\n+#include <boost/thread.hpp>\n \n CClientUIInterface uiInterface;\n CWallet* pwalletMain;"
      },
      {
        "sha": "e077c9de3bf3804d0de6e5137404a9aa687f64ea",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -4,8 +4,11 @@\n \n #include \"util.h\"\n \n+#include \"core.h\"\n #include \"random.h\"\n #include \"sync.h\"\n+#include \"utilstrencodings.h\"\n+#include \"utilmoneystr.h\"\n \n #include <stdint.h>\n #include <vector>"
      },
      {
        "sha": "40cdb33f7a8fd2bb5e88aa7eb0647f8b2a435842",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -8,6 +8,7 @@\n #include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/foreach.hpp>\n \n@@ -35,6 +36,11 @@ int64_t GetAdjustedTime()\n     return GetTime() + GetTimeOffset();\n }\n \n+static int64_t abs64(int64_t n)\n+{\n+    return (n >= 0 ? n : -n);\n+}\n+\n void AddTimeData(const CNetAddr& ip, int64_t nTime)\n {\n     int64_t nOffsetSample = nTime - GetTime();"
      },
      {
        "sha": "a3a9b3153476f7f01118457a594ee7fdfe8e947c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -9,6 +9,7 @@\n #include \"pow.h\"\n #include \"uint256.h\"\n \n+#include <boost/thread.hpp>\n #include <stdint.h>\n \n using namespace std;"
      },
      {
        "sha": "b327e1c732c99a51416d6a6d88d5d612a278a0d6",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"core.h\"\n #include \"txmempool.h\"\n+#include \"util.h\"\n \n #include <boost/circular_buffer.hpp>\n "
      },
      {
        "sha": "feda0ca5a9d4c1c1882671dca27659d8f8f277a8",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -4,7 +4,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"uint256.h\"\n-#include \"util.h\"\n+\n+#include \"utilstrencodings.h\"\n \n #include <stdio.h>\n #include <string.h>"
      },
      {
        "sha": "5a4e187f9e2a7917bfd356acdad070820c14f1bb",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 547,
        "changes": 551,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -11,13 +11,13 @@\n \n #include \"chainparamsbase.h\"\n #include \"random.h\"\n+#include \"serialize.h\"\n #include \"sync.h\"\n-#include \"uint256.h\"\n+#include \"utilstrencodings.h\"\n+#include \"utiltime.h\"\n \n #include <stdarg.h>\n \n-#include <boost/date_time/posix_time/posix_time.hpp>\n-\n #ifndef WIN32\n // for posix_fallocate\n #ifdef __linux__\n@@ -75,6 +75,7 @@\n #include <boost/foreach.hpp>\n #include <boost/program_options/detail/config_file.hpp>\n #include <boost/program_options/parsers.hpp>\n+#include <boost/thread.hpp>\n #include <openssl/crypto.h>\n #include <openssl/rand.h>\n \n@@ -243,148 +244,6 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n-string FormatMoney(int64_t n, bool fPlus)\n-{\n-    // Note: not using straight sprintf here because we do NOT want\n-    // localized number formatting.\n-    int64_t n_abs = (n > 0 ? n : -n);\n-    int64_t quotient = n_abs/COIN;\n-    int64_t remainder = n_abs%COIN;\n-    string str = strprintf(\"%d.%08d\", quotient, remainder);\n-\n-    // Right-trim excess zeros before the decimal point:\n-    int nTrim = 0;\n-    for (int i = str.size()-1; (str[i] == '0' && isdigit(str[i-2])); --i)\n-        ++nTrim;\n-    if (nTrim)\n-        str.erase(str.size()-nTrim, nTrim);\n-\n-    if (n < 0)\n-        str.insert((unsigned int)0, 1, '-');\n-    else if (fPlus && n > 0)\n-        str.insert((unsigned int)0, 1, '+');\n-    return str;\n-}\n-\n-\n-bool ParseMoney(const string& str, int64_t& nRet)\n-{\n-    return ParseMoney(str.c_str(), nRet);\n-}\n-\n-bool ParseMoney(const char* pszIn, int64_t& nRet)\n-{\n-    string strWhole;\n-    int64_t nUnits = 0;\n-    const char* p = pszIn;\n-    while (isspace(*p))\n-        p++;\n-    for (; *p; p++)\n-    {\n-        if (*p == '.')\n-        {\n-            p++;\n-            int64_t nMult = CENT*10;\n-            while (isdigit(*p) && (nMult > 0))\n-            {\n-                nUnits += nMult * (*p++ - '0');\n-                nMult /= 10;\n-            }\n-            break;\n-        }\n-        if (isspace(*p))\n-            break;\n-        if (!isdigit(*p))\n-            return false;\n-        strWhole.insert(strWhole.end(), *p);\n-    }\n-    for (; *p; p++)\n-        if (!isspace(*p))\n-            return false;\n-    if (strWhole.size() > 10) // guard against 63 bit overflow\n-        return false;\n-    if (nUnits < 0 || nUnits > COIN)\n-        return false;\n-    int64_t nWhole = atoi64(strWhole);\n-    int64_t nValue = nWhole*COIN + nUnits;\n-\n-    nRet = nValue;\n-    return true;\n-}\n-\n-// safeChars chosen to allow simple messages/URLs/email addresses, but avoid anything\n-// even possibly remotely dangerous like & or >\n-static string safeChars(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 .,;_/:?@\");\n-string SanitizeString(const string& str)\n-{\n-    string strResult;\n-    for (std::string::size_type i = 0; i < str.size(); i++)\n-    {\n-        if (safeChars.find(str[i]) != std::string::npos)\n-            strResult.push_back(str[i]);\n-    }\n-    return strResult;\n-}\n-\n-const signed char p_util_hexdigit[256] =\n-{ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  0,1,2,3,4,5,6,7,8,9,-1,-1,-1,-1,-1,-1,\n-  -1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, };\n-\n-signed char HexDigit(char c)\n-{\n-    return p_util_hexdigit[(unsigned char)c];\n-}\n-\n-bool IsHex(const string& str)\n-{\n-    BOOST_FOREACH(char c, str)\n-    {\n-        if (HexDigit(c) < 0)\n-            return false;\n-    }\n-    return (str.size() > 0) && (str.size()%2 == 0);\n-}\n-\n-vector<unsigned char> ParseHex(const char* psz)\n-{\n-    // convert hex dump to vector\n-    vector<unsigned char> vch;\n-    while (true)\n-    {\n-        while (isspace(*psz))\n-            psz++;\n-        signed char c = HexDigit(*psz++);\n-        if (c == (signed char)-1)\n-            break;\n-        unsigned char n = (c << 4);\n-        c = HexDigit(*psz++);\n-        if (c == (signed char)-1)\n-            break;\n-        n |= c;\n-        vch.push_back(n);\n-    }\n-    return vch;\n-}\n-\n-vector<unsigned char> ParseHex(const string& str)\n-{\n-    return ParseHex(str.c_str());\n-}\n-\n static void InterpretNegativeSetting(string name, map<string, string>& mapSettingsRet)\n {\n     // interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set\n@@ -482,334 +341,6 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n         return SoftSetArg(strArg, std::string(\"0\"));\n }\n \n-\n-string EncodeBase64(const unsigned char* pch, size_t len)\n-{\n-    static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n-\n-    string strRet=\"\";\n-    strRet.reserve((len+2)/3*4);\n-\n-    int mode=0, left=0;\n-    const unsigned char *pchEnd = pch+len;\n-\n-    while (pch<pchEnd)\n-    {\n-        int enc = *(pch++);\n-        switch (mode)\n-        {\n-            case 0: // we have no bits\n-                strRet += pbase64[enc >> 2];\n-                left = (enc & 3) << 4;\n-                mode = 1;\n-                break;\n-\n-            case 1: // we have two bits\n-                strRet += pbase64[left | (enc >> 4)];\n-                left = (enc & 15) << 2;\n-                mode = 2;\n-                break;\n-\n-            case 2: // we have four bits\n-                strRet += pbase64[left | (enc >> 6)];\n-                strRet += pbase64[enc & 63];\n-                mode = 0;\n-                break;\n-        }\n-    }\n-\n-    if (mode)\n-    {\n-        strRet += pbase64[left];\n-        strRet += '=';\n-        if (mode == 1)\n-            strRet += '=';\n-    }\n-\n-    return strRet;\n-}\n-\n-string EncodeBase64(const string& str)\n-{\n-    return EncodeBase64((const unsigned char*)str.c_str(), str.size());\n-}\n-\n-vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n-{\n-    static const int decode64_table[256] =\n-    {\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1,\n-        -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n-        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,\n-        29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n-        49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n-    };\n-\n-    if (pfInvalid)\n-        *pfInvalid = false;\n-\n-    vector<unsigned char> vchRet;\n-    vchRet.reserve(strlen(p)*3/4);\n-\n-    int mode = 0;\n-    int left = 0;\n-\n-    while (1)\n-    {\n-         int dec = decode64_table[(unsigned char)*p];\n-         if (dec == -1) break;\n-         p++;\n-         switch (mode)\n-         {\n-             case 0: // we have no bits and get 6\n-                 left = dec;\n-                 mode = 1;\n-                 break;\n-\n-              case 1: // we have 6 bits and keep 4\n-                  vchRet.push_back((left<<2) | (dec>>4));\n-                  left = dec & 15;\n-                  mode = 2;\n-                  break;\n-\n-             case 2: // we have 4 bits and get 6, we keep 2\n-                 vchRet.push_back((left<<4) | (dec>>2));\n-                 left = dec & 3;\n-                 mode = 3;\n-                 break;\n-\n-             case 3: // we have 2 bits and get 6\n-                 vchRet.push_back((left<<6) | dec);\n-                 mode = 0;\n-                 break;\n-         }\n-    }\n-\n-    if (pfInvalid)\n-        switch (mode)\n-        {\n-            case 0: // 4n base64 characters processed: ok\n-                break;\n-\n-            case 1: // 4n+1 base64 character processed: impossible\n-                *pfInvalid = true;\n-                break;\n-\n-            case 2: // 4n+2 base64 characters processed: require '=='\n-                if (left || p[0] != '=' || p[1] != '=' || decode64_table[(unsigned char)p[2]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 3: // 4n+3 base64 characters processed: require '='\n-                if (left || p[0] != '=' || decode64_table[(unsigned char)p[1]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-        }\n-\n-    return vchRet;\n-}\n-\n-string DecodeBase64(const string& str)\n-{\n-    vector<unsigned char> vchRet = DecodeBase64(str.c_str());\n-    return string((const char*)&vchRet[0], vchRet.size());\n-}\n-\n-string EncodeBase32(const unsigned char* pch, size_t len)\n-{\n-    static const char *pbase32 = \"abcdefghijklmnopqrstuvwxyz234567\";\n-\n-    string strRet=\"\";\n-    strRet.reserve((len+4)/5*8);\n-\n-    int mode=0, left=0;\n-    const unsigned char *pchEnd = pch+len;\n-\n-    while (pch<pchEnd)\n-    {\n-        int enc = *(pch++);\n-        switch (mode)\n-        {\n-            case 0: // we have no bits\n-                strRet += pbase32[enc >> 3];\n-                left = (enc & 7) << 2;\n-                mode = 1;\n-                break;\n-\n-            case 1: // we have three bits\n-                strRet += pbase32[left | (enc >> 6)];\n-                strRet += pbase32[(enc >> 1) & 31];\n-                left = (enc & 1) << 4;\n-                mode = 2;\n-                break;\n-\n-            case 2: // we have one bit\n-                strRet += pbase32[left | (enc >> 4)];\n-                left = (enc & 15) << 1;\n-                mode = 3;\n-                break;\n-\n-            case 3: // we have four bits\n-                strRet += pbase32[left | (enc >> 7)];\n-                strRet += pbase32[(enc >> 2) & 31];\n-                left = (enc & 3) << 3;\n-                mode = 4;\n-                break;\n-\n-            case 4: // we have two bits\n-                strRet += pbase32[left | (enc >> 5)];\n-                strRet += pbase32[enc & 31];\n-                mode = 0;\n-        }\n-    }\n-\n-    static const int nPadding[5] = {0, 6, 4, 3, 1};\n-    if (mode)\n-    {\n-        strRet += pbase32[left];\n-        for (int n=0; n<nPadding[mode]; n++)\n-             strRet += '=';\n-    }\n-\n-    return strRet;\n-}\n-\n-string EncodeBase32(const string& str)\n-{\n-    return EncodeBase32((const unsigned char*)str.c_str(), str.size());\n-}\n-\n-vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n-{\n-    static const int decode32_table[256] =\n-    {\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n-        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1,  0,  1,  2,\n-         3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n-        23, 24, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n-    };\n-\n-    if (pfInvalid)\n-        *pfInvalid = false;\n-\n-    vector<unsigned char> vchRet;\n-    vchRet.reserve((strlen(p))*5/8);\n-\n-    int mode = 0;\n-    int left = 0;\n-\n-    while (1)\n-    {\n-         int dec = decode32_table[(unsigned char)*p];\n-         if (dec == -1) break;\n-         p++;\n-         switch (mode)\n-         {\n-             case 0: // we have no bits and get 5\n-                 left = dec;\n-                 mode = 1;\n-                 break;\n-\n-              case 1: // we have 5 bits and keep 2\n-                  vchRet.push_back((left<<3) | (dec>>2));\n-                  left = dec & 3;\n-                  mode = 2;\n-                  break;\n-\n-             case 2: // we have 2 bits and keep 7\n-                 left = left << 5 | dec;\n-                 mode = 3;\n-                 break;\n-\n-             case 3: // we have 7 bits and keep 4\n-                 vchRet.push_back((left<<1) | (dec>>4));\n-                 left = dec & 15;\n-                 mode = 4;\n-                 break;\n-\n-             case 4: // we have 4 bits, and keep 1\n-                 vchRet.push_back((left<<4) | (dec>>1));\n-                 left = dec & 1;\n-                 mode = 5;\n-                 break;\n-\n-             case 5: // we have 1 bit, and keep 6\n-                 left = left << 5 | dec;\n-                 mode = 6;\n-                 break;\n-\n-             case 6: // we have 6 bits, and keep 3\n-                 vchRet.push_back((left<<2) | (dec>>3));\n-                 left = dec & 7;\n-                 mode = 7;\n-                 break;\n-\n-             case 7: // we have 3 bits, and keep 0\n-                 vchRet.push_back((left<<5) | dec);\n-                 mode = 0;\n-                 break;\n-         }\n-    }\n-\n-    if (pfInvalid)\n-        switch (mode)\n-        {\n-            case 0: // 8n base32 characters processed: ok\n-                break;\n-\n-            case 1: // 8n+1 base32 characters processed: impossible\n-            case 3: //   +3\n-            case 6: //   +6\n-                *pfInvalid = true;\n-                break;\n-\n-            case 2: // 8n+2 base32 characters processed: require '======'\n-                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || p[3] != '=' || p[4] != '=' || p[5] != '=' || decode32_table[(unsigned char)p[6]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 4: // 8n+4 base32 characters processed: require '===='\n-                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || p[3] != '=' || decode32_table[(unsigned char)p[4]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 5: // 8n+5 base32 characters processed: require '==='\n-                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || decode32_table[(unsigned char)p[3]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 7: // 8n+7 base32 characters processed: require '='\n-                if (left || p[0] != '=' || decode32_table[(unsigned char)p[1]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-        }\n-\n-    return vchRet;\n-}\n-\n-string DecodeBase32(const string& str)\n-{\n-    vector<unsigned char> vchRet = DecodeBase32(str.c_str());\n-    return string((const char*)&vchRet[0], vchRet.size());\n-}\n-\n static std::string FormatException(std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32\n@@ -1101,21 +632,6 @@ void ShrinkDebugFile()\n         fclose(file);\n }\n \n-static int64_t nMockTime = 0;  // For unit testing\n-\n-int64_t GetTime()\n-{\n-    if (nMockTime) return nMockTime;\n-\n-    return time(NULL);\n-}\n-\n-void SetMockTime(int64_t nMockTimeIn)\n-{\n-    nMockTime = nMockTimeIn;\n-}\n-\n-\n #ifdef WIN32\n boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)\n {\n@@ -1186,20 +702,6 @@ void RenameThread(const char* name)\n #endif\n }\n \n-bool ParseInt32(const std::string& str, int32_t *out)\n-{\n-    char *endp = NULL;\n-    errno = 0; // strtol will not set errno if valid\n-    long int n = strtol(str.c_str(), &endp, 10);\n-    if(out) *out = (int)n;\n-    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n-    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n-    // platforms the size of these types may be different.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int32_t>::min() &&\n-        n <= std::numeric_limits<int32_t>::max();\n-}\n-\n void SetupEnvironment()\n {\n #ifndef WIN32\n@@ -1217,51 +719,6 @@ void SetupEnvironment()\n #endif\n }\n \n-std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)\n-{\n-    // std::locale takes ownership of the pointer\n-    std::locale loc(std::locale::classic(), new boost::posix_time::time_facet(pszFormat));\n-    std::stringstream ss;\n-    ss.imbue(loc);\n-    ss << boost::posix_time::from_time_t(nTime);\n-    return ss.str();\n-}\n-\n-std::string FormatParagraph(const std::string in, size_t width, size_t indent)\n-{\n-    std::stringstream out;\n-    size_t col = 0;\n-    size_t ptr = 0;\n-    while(ptr < in.size())\n-    {\n-        // Find beginning of next word\n-        ptr = in.find_first_not_of(' ', ptr);\n-        if (ptr == std::string::npos)\n-            break;\n-        // Find end of next word\n-        size_t endword = in.find_first_of(' ', ptr);\n-        if (endword == std::string::npos)\n-            endword = in.size();\n-        // Add newline and indentation if this wraps over the allowed width\n-        if (col > 0)\n-        {\n-            if ((col + endword - ptr) > width)\n-            {\n-                out << '\\n';\n-                for(size_t i=0; i<indent; ++i)\n-                    out << ' ';\n-                col = 0;\n-            } else\n-                out << ' ';\n-        }\n-        // Append word\n-        out << in.substr(ptr, endword - ptr);\n-        col += endword - ptr;\n-        ptr = endword;\n-    }\n-    return out.str();\n-}\n-\n void SetThreadPriority(int nPriority)\n {\n #ifdef WIN32"
      },
      {
        "sha": "30f7c15c89d3c623cfcedb1314872b16dc9cd2e7",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 170,
        "changes": 176,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -3,6 +3,10 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+/**\n+ * Server/client environment: argument handling, config file parsing,\n+ * logging, thread wrappers\n+ */\n #ifndef BITCOIN_UTIL_H\n #define BITCOIN_UTIL_H\n \n@@ -11,53 +15,17 @@\n #endif\n \n #include \"compat.h\"\n-#include \"serialize.h\"\n+#include \"utiltime.h\"\n #include \"tinyformat.h\"\n \n-#include <cstdio>\n #include <exception>\n #include <map>\n-#include <stdarg.h>\n #include <stdint.h>\n #include <string>\n-#include <utility>\n #include <vector>\n \n-#ifndef WIN32\n-#include <sys/resource.h>\n-#include <sys/time.h>\n-#include <sys/types.h>\n-#endif\n-\n #include <boost/filesystem/path.hpp>\n-#include <boost/thread.hpp>\n-\n-class uint256;\n-\n-#define BEGIN(a)            ((char*)&(a))\n-#define END(a)              ((char*)&((&(a))[1]))\n-#define UBEGIN(a)           ((unsigned char*)&(a))\n-#define UEND(a)             ((unsigned char*)&((&(a))[1]))\n-#define ARRAYLEN(array)     (sizeof(array)/sizeof((array)[0]))\n-\n-// This is needed because the foreach macro can't get over the comma in pair<t1, t2>\n-#define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n-\n-\n-inline void MilliSleep(int64_t n)\n-{\n-// Boost's sleep_for was uninterruptable when backed by nanosleep from 1.50\n-// until fixed in 1.52. Use the deprecated sleep method for the broken case.\n-// See: https://svn.boost.org/trac/boost/ticket/7238\n-#if defined(HAVE_WORKING_BOOST_SLEEP_FOR)\n-    boost::this_thread::sleep_for(boost::chrono::milliseconds(n));\n-#elif defined(HAVE_WORKING_BOOST_SLEEP)\n-    boost::this_thread::sleep(boost::posix_time::milliseconds(n));\n-#else\n-//should never get here\n-#error missing boost sleep implementation\n-#endif\n-}\n+#include <boost/thread/exceptions.hpp>\n \n extern std::map<std::string, std::string> mapArgs;\n extern std::map<std::string, std::vector<std::string> > mapMultiArgs;\n@@ -115,22 +83,6 @@ static inline bool error(const char* format)\n }\n \n void PrintExceptionContinue(std::exception* pex, const char* pszThread);\n-std::string FormatMoney(int64_t n, bool fPlus=false);\n-bool ParseMoney(const std::string& str, int64_t& nRet);\n-bool ParseMoney(const char* pszIn, int64_t& nRet);\n-std::string SanitizeString(const std::string& str);\n-std::vector<unsigned char> ParseHex(const char* psz);\n-std::vector<unsigned char> ParseHex(const std::string& str);\n-signed char HexDigit(char c);\n-bool IsHex(const std::string& str);\n-std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid = NULL);\n-std::string DecodeBase64(const std::string& str);\n-std::string EncodeBase64(const unsigned char* pch, size_t len);\n-std::string EncodeBase64(const std::string& str);\n-std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid = NULL);\n-std::string DecodeBase32(const std::string& str);\n-std::string EncodeBase32(const unsigned char* pch, size_t len);\n-std::string EncodeBase32(const std::string& str);\n void ParseParameters(int argc, const char*const argv[]);\n void FileCommit(FILE *fileout);\n bool TruncateFile(FILE *file, unsigned int length);\n@@ -151,109 +103,8 @@ boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n boost::filesystem::path GetTempPath();\n void ShrinkDebugFile();\n-int64_t GetTime();\n-void SetMockTime(int64_t nMockTimeIn);\n void runCommand(std::string strCommand);\n \n-inline std::string i64tostr(int64_t n)\n-{\n-    return strprintf(\"%d\", n);\n-}\n-\n-inline std::string itostr(int n)\n-{\n-    return strprintf(\"%d\", n);\n-}\n-\n-inline int64_t atoi64(const char* psz)\n-{\n-#ifdef _MSC_VER\n-    return _atoi64(psz);\n-#else\n-    return strtoll(psz, NULL, 10);\n-#endif\n-}\n-\n-inline int64_t atoi64(const std::string& str)\n-{\n-#ifdef _MSC_VER\n-    return _atoi64(str.c_str());\n-#else\n-    return strtoll(str.c_str(), NULL, 10);\n-#endif\n-}\n-\n-inline int atoi(const std::string& str)\n-{\n-    return atoi(str.c_str());\n-}\n-\n-/**\n- * Convert string to signed 32-bit integer with strict parse error feedback.\n- * @returns true if the entire string could be parsed as valid integer,\n- *   false if not the entire string could be parsed or when overflow or underflow occured.\n- */\n-bool ParseInt32(const std::string& str, int32_t *out);\n-\n-inline int roundint(double d)\n-{\n-    return (int)(d > 0 ? d + 0.5 : d - 0.5);\n-}\n-\n-inline int64_t roundint64(double d)\n-{\n-    return (int64_t)(d > 0 ? d + 0.5 : d - 0.5);\n-}\n-\n-inline int64_t abs64(int64_t n)\n-{\n-    return (n >= 0 ? n : -n);\n-}\n-\n-template<typename T>\n-std::string HexStr(const T itbegin, const T itend, bool fSpaces=false)\n-{\n-    std::string rv;\n-    static const char hexmap[16] = { '0', '1', '2', '3', '4', '5', '6', '7',\n-                                     '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n-    rv.reserve((itend-itbegin)*3);\n-    for(T it = itbegin; it < itend; ++it)\n-    {\n-        unsigned char val = (unsigned char)(*it);\n-        if(fSpaces && it != itbegin)\n-            rv.push_back(' ');\n-        rv.push_back(hexmap[val>>4]);\n-        rv.push_back(hexmap[val&15]);\n-    }\n-\n-    return rv;\n-}\n-\n-template<typename T>\n-inline std::string HexStr(const T& vch, bool fSpaces=false)\n-{\n-    return HexStr(vch.begin(), vch.end(), fSpaces);\n-}\n-\n-/** Format a paragraph of text to a fixed width, adding spaces for\n- * indentation to any added line.\n- */\n-std::string FormatParagraph(const std::string in, size_t width=79, size_t indent=0);\n-\n-inline int64_t GetTimeMillis()\n-{\n-    return (boost::posix_time::ptime(boost::posix_time::microsec_clock::universal_time()) -\n-            boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n-}\n-\n-inline int64_t GetTimeMicros()\n-{\n-    return (boost::posix_time::ptime(boost::posix_time::microsec_clock::universal_time()) -\n-            boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n-}\n-\n-std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime);\n-\n inline bool IsSwitchChar(char c)\n {\n #ifdef WIN32\n@@ -308,21 +159,6 @@ bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n  */\n bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n-/**\n- * Timing-attack-resistant comparison.\n- * Takes time proportional to length\n- * of first argument.\n- */\n-template <typename T>\n-bool TimingResistantEqual(const T& a, const T& b)\n-{\n-    if (b.size() == 0) return a.size() == 0;\n-    size_t accumulator = a.size() ^ b.size();\n-    for (size_t i = 0; i < a.size(); i++)\n-        accumulator |= a[i] ^ b[i%b.size()];\n-    return accumulator == 0;\n-}\n-\n void SetThreadPriority(int nPriority);\n void RenameThread(const char* name);\n "
      },
      {
        "sha": "1bd48d8d4ce4236a3befba2b0dd2d814fcf20291",
        "filename": "src/utilmoneystr.cpp",
        "status": "added",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/utilmoneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/utilmoneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -0,0 +1,75 @@\n+#include \"utilmoneystr.h\"\n+\n+#include \"core.h\"\n+#include \"tinyformat.h\"\n+\n+using namespace std;\n+\n+string FormatMoney(int64_t n, bool fPlus)\n+{\n+    // Note: not using straight sprintf here because we do NOT want\n+    // localized number formatting.\n+    int64_t n_abs = (n > 0 ? n : -n);\n+    int64_t quotient = n_abs/COIN;\n+    int64_t remainder = n_abs%COIN;\n+    string str = strprintf(\"%d.%08d\", quotient, remainder);\n+\n+    // Right-trim excess zeros before the decimal point:\n+    int nTrim = 0;\n+    for (int i = str.size()-1; (str[i] == '0' && isdigit(str[i-2])); --i)\n+        ++nTrim;\n+    if (nTrim)\n+        str.erase(str.size()-nTrim, nTrim);\n+\n+    if (n < 0)\n+        str.insert((unsigned int)0, 1, '-');\n+    else if (fPlus && n > 0)\n+        str.insert((unsigned int)0, 1, '+');\n+    return str;\n+}\n+\n+\n+bool ParseMoney(const string& str, int64_t& nRet)\n+{\n+    return ParseMoney(str.c_str(), nRet);\n+}\n+\n+bool ParseMoney(const char* pszIn, int64_t& nRet)\n+{\n+    string strWhole;\n+    int64_t nUnits = 0;\n+    const char* p = pszIn;\n+    while (isspace(*p))\n+        p++;\n+    for (; *p; p++)\n+    {\n+        if (*p == '.')\n+        {\n+            p++;\n+            int64_t nMult = CENT*10;\n+            while (isdigit(*p) && (nMult > 0))\n+            {\n+                nUnits += nMult * (*p++ - '0');\n+                nMult /= 10;\n+            }\n+            break;\n+        }\n+        if (isspace(*p))\n+            break;\n+        if (!isdigit(*p))\n+            return false;\n+        strWhole.insert(strWhole.end(), *p);\n+    }\n+    for (; *p; p++)\n+        if (!isspace(*p))\n+            return false;\n+    if (strWhole.size() > 10) // guard against 63 bit overflow\n+        return false;\n+    if (nUnits < 0 || nUnits > COIN)\n+        return false;\n+    int64_t nWhole = atoi64(strWhole);\n+    int64_t nValue = nWhole*COIN + nUnits;\n+\n+    nRet = nValue;\n+    return true;\n+}"
      },
      {
        "sha": "f0c61aa13828469d749e0426fd10772f3a65c44f",
        "filename": "src/utilmoneystr.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/utilmoneystr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/utilmoneystr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.h?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+/**\n+ * Money parsing/formatting utilities.\n+ */\n+#ifndef BITCOIN_UTILMONEYSTR_H\n+#define BITCOIN_UTILMONEYSTR_H\n+\n+#include <stdint.h>\n+#include <string>\n+\n+std::string FormatMoney(int64_t n, bool fPlus=false);\n+bool ParseMoney(const std::string& str, int64_t& nRet);\n+bool ParseMoney(const char* pszIn, int64_t& nRet);\n+\n+#endif // BITCOIN_UTILMONEYSTR_H"
      },
      {
        "sha": "ef1355510420e0d494715b8b74b984a5fbc67956",
        "filename": "src/utilstrencodings.cpp",
        "status": "added",
        "additions": 496,
        "deletions": 0,
        "changes": 496,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -0,0 +1,496 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"utilstrencodings.h\"\n+\n+#include \"tinyformat.h\"\n+\n+#include <boost/foreach.hpp>\n+#include <errno.h>\n+#include <limits>\n+\n+using namespace std;\n+\n+// safeChars chosen to allow simple messages/URLs/email addresses, but avoid anything\n+// even possibly remotely dangerous like & or >\n+static string safeChars(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 .,;_/:?@\");\n+string SanitizeString(const string& str)\n+{\n+    string strResult;\n+    for (std::string::size_type i = 0; i < str.size(); i++)\n+    {\n+        if (safeChars.find(str[i]) != std::string::npos)\n+            strResult.push_back(str[i]);\n+    }\n+    return strResult;\n+}\n+\n+const signed char p_util_hexdigit[256] =\n+{ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  0,1,2,3,4,5,6,7,8,9,-1,-1,-1,-1,-1,-1,\n+  -1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, };\n+\n+signed char HexDigit(char c)\n+{\n+    return p_util_hexdigit[(unsigned char)c];\n+}\n+\n+bool IsHex(const string& str)\n+{\n+    BOOST_FOREACH(char c, str)\n+    {\n+        if (HexDigit(c) < 0)\n+            return false;\n+    }\n+    return (str.size() > 0) && (str.size()%2 == 0);\n+}\n+\n+vector<unsigned char> ParseHex(const char* psz)\n+{\n+    // convert hex dump to vector\n+    vector<unsigned char> vch;\n+    while (true)\n+    {\n+        while (isspace(*psz))\n+            psz++;\n+        signed char c = HexDigit(*psz++);\n+        if (c == (signed char)-1)\n+            break;\n+        unsigned char n = (c << 4);\n+        c = HexDigit(*psz++);\n+        if (c == (signed char)-1)\n+            break;\n+        n |= c;\n+        vch.push_back(n);\n+    }\n+    return vch;\n+}\n+\n+vector<unsigned char> ParseHex(const string& str)\n+{\n+    return ParseHex(str.c_str());\n+}\n+\n+string EncodeBase64(const unsigned char* pch, size_t len)\n+{\n+    static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n+\n+    string strRet=\"\";\n+    strRet.reserve((len+2)/3*4);\n+\n+    int mode=0, left=0;\n+    const unsigned char *pchEnd = pch+len;\n+\n+    while (pch<pchEnd)\n+    {\n+        int enc = *(pch++);\n+        switch (mode)\n+        {\n+            case 0: // we have no bits\n+                strRet += pbase64[enc >> 2];\n+                left = (enc & 3) << 4;\n+                mode = 1;\n+                break;\n+\n+            case 1: // we have two bits\n+                strRet += pbase64[left | (enc >> 4)];\n+                left = (enc & 15) << 2;\n+                mode = 2;\n+                break;\n+\n+            case 2: // we have four bits\n+                strRet += pbase64[left | (enc >> 6)];\n+                strRet += pbase64[enc & 63];\n+                mode = 0;\n+                break;\n+        }\n+    }\n+\n+    if (mode)\n+    {\n+        strRet += pbase64[left];\n+        strRet += '=';\n+        if (mode == 1)\n+            strRet += '=';\n+    }\n+\n+    return strRet;\n+}\n+\n+string EncodeBase64(const string& str)\n+{\n+    return EncodeBase64((const unsigned char*)str.c_str(), str.size());\n+}\n+\n+vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n+{\n+    static const int decode64_table[256] =\n+    {\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1,\n+        -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n+        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,\n+        29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n+        49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n+    };\n+\n+    if (pfInvalid)\n+        *pfInvalid = false;\n+\n+    vector<unsigned char> vchRet;\n+    vchRet.reserve(strlen(p)*3/4);\n+\n+    int mode = 0;\n+    int left = 0;\n+\n+    while (1)\n+    {\n+         int dec = decode64_table[(unsigned char)*p];\n+         if (dec == -1) break;\n+         p++;\n+         switch (mode)\n+         {\n+             case 0: // we have no bits and get 6\n+                 left = dec;\n+                 mode = 1;\n+                 break;\n+\n+              case 1: // we have 6 bits and keep 4\n+                  vchRet.push_back((left<<2) | (dec>>4));\n+                  left = dec & 15;\n+                  mode = 2;\n+                  break;\n+\n+             case 2: // we have 4 bits and get 6, we keep 2\n+                 vchRet.push_back((left<<4) | (dec>>2));\n+                 left = dec & 3;\n+                 mode = 3;\n+                 break;\n+\n+             case 3: // we have 2 bits and get 6\n+                 vchRet.push_back((left<<6) | dec);\n+                 mode = 0;\n+                 break;\n+         }\n+    }\n+\n+    if (pfInvalid)\n+        switch (mode)\n+        {\n+            case 0: // 4n base64 characters processed: ok\n+                break;\n+\n+            case 1: // 4n+1 base64 character processed: impossible\n+                *pfInvalid = true;\n+                break;\n+\n+            case 2: // 4n+2 base64 characters processed: require '=='\n+                if (left || p[0] != '=' || p[1] != '=' || decode64_table[(unsigned char)p[2]] != -1)\n+                    *pfInvalid = true;\n+                break;\n+\n+            case 3: // 4n+3 base64 characters processed: require '='\n+                if (left || p[0] != '=' || decode64_table[(unsigned char)p[1]] != -1)\n+                    *pfInvalid = true;\n+                break;\n+        }\n+\n+    return vchRet;\n+}\n+\n+string DecodeBase64(const string& str)\n+{\n+    vector<unsigned char> vchRet = DecodeBase64(str.c_str());\n+    return string((const char*)&vchRet[0], vchRet.size());\n+}\n+\n+string EncodeBase32(const unsigned char* pch, size_t len)\n+{\n+    static const char *pbase32 = \"abcdefghijklmnopqrstuvwxyz234567\";\n+\n+    string strRet=\"\";\n+    strRet.reserve((len+4)/5*8);\n+\n+    int mode=0, left=0;\n+    const unsigned char *pchEnd = pch+len;\n+\n+    while (pch<pchEnd)\n+    {\n+        int enc = *(pch++);\n+        switch (mode)\n+        {\n+            case 0: // we have no bits\n+                strRet += pbase32[enc >> 3];\n+                left = (enc & 7) << 2;\n+                mode = 1;\n+                break;\n+\n+            case 1: // we have three bits\n+                strRet += pbase32[left | (enc >> 6)];\n+                strRet += pbase32[(enc >> 1) & 31];\n+                left = (enc & 1) << 4;\n+                mode = 2;\n+                break;\n+\n+            case 2: // we have one bit\n+                strRet += pbase32[left | (enc >> 4)];\n+                left = (enc & 15) << 1;\n+                mode = 3;\n+                break;\n+\n+            case 3: // we have four bits\n+                strRet += pbase32[left | (enc >> 7)];\n+                strRet += pbase32[(enc >> 2) & 31];\n+                left = (enc & 3) << 3;\n+                mode = 4;\n+                break;\n+\n+            case 4: // we have two bits\n+                strRet += pbase32[left | (enc >> 5)];\n+                strRet += pbase32[enc & 31];\n+                mode = 0;\n+        }\n+    }\n+\n+    static const int nPadding[5] = {0, 6, 4, 3, 1};\n+    if (mode)\n+    {\n+        strRet += pbase32[left];\n+        for (int n=0; n<nPadding[mode]; n++)\n+             strRet += '=';\n+    }\n+\n+    return strRet;\n+}\n+\n+string EncodeBase32(const string& str)\n+{\n+    return EncodeBase32((const unsigned char*)str.c_str(), str.size());\n+}\n+\n+vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n+{\n+    static const int decode32_table[256] =\n+    {\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n+        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1,  0,  1,  2,\n+         3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n+        23, 24, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n+    };\n+\n+    if (pfInvalid)\n+        *pfInvalid = false;\n+\n+    vector<unsigned char> vchRet;\n+    vchRet.reserve((strlen(p))*5/8);\n+\n+    int mode = 0;\n+    int left = 0;\n+\n+    while (1)\n+    {\n+         int dec = decode32_table[(unsigned char)*p];\n+         if (dec == -1) break;\n+         p++;\n+         switch (mode)\n+         {\n+             case 0: // we have no bits and get 5\n+                 left = dec;\n+                 mode = 1;\n+                 break;\n+\n+              case 1: // we have 5 bits and keep 2\n+                  vchRet.push_back((left<<3) | (dec>>2));\n+                  left = dec & 3;\n+                  mode = 2;\n+                  break;\n+\n+             case 2: // we have 2 bits and keep 7\n+                 left = left << 5 | dec;\n+                 mode = 3;\n+                 break;\n+\n+             case 3: // we have 7 bits and keep 4\n+                 vchRet.push_back((left<<1) | (dec>>4));\n+                 left = dec & 15;\n+                 mode = 4;\n+                 break;\n+\n+             case 4: // we have 4 bits, and keep 1\n+                 vchRet.push_back((left<<4) | (dec>>1));\n+                 left = dec & 1;\n+                 mode = 5;\n+                 break;\n+\n+             case 5: // we have 1 bit, and keep 6\n+                 left = left << 5 | dec;\n+                 mode = 6;\n+                 break;\n+\n+             case 6: // we have 6 bits, and keep 3\n+                 vchRet.push_back((left<<2) | (dec>>3));\n+                 left = dec & 7;\n+                 mode = 7;\n+                 break;\n+\n+             case 7: // we have 3 bits, and keep 0\n+                 vchRet.push_back((left<<5) | dec);\n+                 mode = 0;\n+                 break;\n+         }\n+    }\n+\n+    if (pfInvalid)\n+        switch (mode)\n+        {\n+            case 0: // 8n base32 characters processed: ok\n+                break;\n+\n+            case 1: // 8n+1 base32 characters processed: impossible\n+            case 3: //   +3\n+            case 6: //   +6\n+                *pfInvalid = true;\n+                break;\n+\n+            case 2: // 8n+2 base32 characters processed: require '======'\n+                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || p[3] != '=' || p[4] != '=' || p[5] != '=' || decode32_table[(unsigned char)p[6]] != -1)\n+                    *pfInvalid = true;\n+                break;\n+\n+            case 4: // 8n+4 base32 characters processed: require '===='\n+                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || p[3] != '=' || decode32_table[(unsigned char)p[4]] != -1)\n+                    *pfInvalid = true;\n+                break;\n+\n+            case 5: // 8n+5 base32 characters processed: require '==='\n+                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || decode32_table[(unsigned char)p[3]] != -1)\n+                    *pfInvalid = true;\n+                break;\n+\n+            case 7: // 8n+7 base32 characters processed: require '='\n+                if (left || p[0] != '=' || decode32_table[(unsigned char)p[1]] != -1)\n+                    *pfInvalid = true;\n+                break;\n+        }\n+\n+    return vchRet;\n+}\n+\n+string DecodeBase32(const string& str)\n+{\n+    vector<unsigned char> vchRet = DecodeBase32(str.c_str());\n+    return string((const char*)&vchRet[0], vchRet.size());\n+}\n+\n+bool ParseInt32(const std::string& str, int32_t *out)\n+{\n+    char *endp = NULL;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if(out) *out = (int)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int32_t>::min() &&\n+        n <= std::numeric_limits<int32_t>::max();\n+}\n+\n+std::string FormatParagraph(const std::string in, size_t width, size_t indent)\n+{\n+    std::stringstream out;\n+    size_t col = 0;\n+    size_t ptr = 0;\n+    while(ptr < in.size())\n+    {\n+        // Find beginning of next word\n+        ptr = in.find_first_not_of(' ', ptr);\n+        if (ptr == std::string::npos)\n+            break;\n+        // Find end of next word\n+        size_t endword = in.find_first_of(' ', ptr);\n+        if (endword == std::string::npos)\n+            endword = in.size();\n+        // Add newline and indentation if this wraps over the allowed width\n+        if (col > 0)\n+        {\n+            if ((col + endword - ptr) > width)\n+            {\n+                out << '\\n';\n+                for(size_t i=0; i<indent; ++i)\n+                    out << ' ';\n+                col = 0;\n+            } else\n+                out << ' ';\n+        }\n+        // Append word\n+        out << in.substr(ptr, endword - ptr);\n+        col += endword - ptr;\n+        ptr = endword;\n+    }\n+    return out.str();\n+}\n+\n+std::string i64tostr(int64_t n)\n+{\n+    return strprintf(\"%d\", n);\n+}\n+\n+std::string itostr(int n)\n+{\n+    return strprintf(\"%d\", n);\n+}\n+\n+int64_t atoi64(const char* psz)\n+{\n+#ifdef _MSC_VER\n+    return _atoi64(psz);\n+#else\n+    return strtoll(psz, NULL, 10);\n+#endif\n+}\n+\n+int64_t atoi64(const std::string& str)\n+{\n+#ifdef _MSC_VER\n+    return _atoi64(str.c_str());\n+#else\n+    return strtoll(str.c_str(), NULL, 10);\n+#endif\n+}\n+\n+int atoi(const std::string& str)\n+{\n+    return atoi(str.c_str());\n+}"
      },
      {
        "sha": "0b8c1a17818ad5c519c710816859857d1989aea1",
        "filename": "src/utilstrencodings.h",
        "status": "added",
        "additions": 97,
        "deletions": 0,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+/**\n+ * Utilities for converting data from/to strings.\n+ */\n+#ifndef BITCOIN_UTILSTRENCODINGS_H\n+#define BITCOIN_UTILSTRENCODINGS_H\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+#define BEGIN(a)            ((char*)&(a))\n+#define END(a)              ((char*)&((&(a))[1]))\n+#define UBEGIN(a)           ((unsigned char*)&(a))\n+#define UEND(a)             ((unsigned char*)&((&(a))[1]))\n+#define ARRAYLEN(array)     (sizeof(array)/sizeof((array)[0]))\n+\n+// This is needed because the foreach macro can't get over the comma in pair<t1, t2>\n+#define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n+\n+std::string SanitizeString(const std::string& str);\n+std::vector<unsigned char> ParseHex(const char* psz);\n+std::vector<unsigned char> ParseHex(const std::string& str);\n+signed char HexDigit(char c);\n+bool IsHex(const std::string& str);\n+std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid = NULL);\n+std::string DecodeBase64(const std::string& str);\n+std::string EncodeBase64(const unsigned char* pch, size_t len);\n+std::string EncodeBase64(const std::string& str);\n+std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid = NULL);\n+std::string DecodeBase32(const std::string& str);\n+std::string EncodeBase32(const unsigned char* pch, size_t len);\n+std::string EncodeBase32(const std::string& str);\n+\n+std::string i64tostr(int64_t n);\n+std::string itostr(int n);\n+int64_t atoi64(const char* psz);\n+int64_t atoi64(const std::string& str);\n+int atoi(const std::string& str);\n+\n+/**\n+ * Convert string to signed 32-bit integer with strict parse error feedback.\n+ * @returns true if the entire string could be parsed as valid integer,\n+ *   false if not the entire string could be parsed or when overflow or underflow occured.\n+ */\n+bool ParseInt32(const std::string& str, int32_t *out);\n+\n+template<typename T>\n+std::string HexStr(const T itbegin, const T itend, bool fSpaces=false)\n+{\n+    std::string rv;\n+    static const char hexmap[16] = { '0', '1', '2', '3', '4', '5', '6', '7',\n+                                     '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n+    rv.reserve((itend-itbegin)*3);\n+    for(T it = itbegin; it < itend; ++it)\n+    {\n+        unsigned char val = (unsigned char)(*it);\n+        if(fSpaces && it != itbegin)\n+            rv.push_back(' ');\n+        rv.push_back(hexmap[val>>4]);\n+        rv.push_back(hexmap[val&15]);\n+    }\n+\n+    return rv;\n+}\n+\n+template<typename T>\n+inline std::string HexStr(const T& vch, bool fSpaces=false)\n+{\n+    return HexStr(vch.begin(), vch.end(), fSpaces);\n+}\n+\n+/** Format a paragraph of text to a fixed width, adding spaces for\n+ * indentation to any added line.\n+ */\n+std::string FormatParagraph(const std::string in, size_t width=79, size_t indent=0);\n+\n+/**\n+ * Timing-attack-resistant comparison.\n+ * Takes time proportional to length\n+ * of first argument.\n+ */\n+template <typename T>\n+bool TimingResistantEqual(const T& a, const T& b)\n+{\n+    if (b.size() == 0) return a.size() == 0;\n+    size_t accumulator = a.size() ^ b.size();\n+    for (size_t i = 0; i < a.size(); i++)\n+        accumulator |= a[i] ^ b[i%b.size()];\n+    return accumulator == 0;\n+}\n+\n+#endif // BITCOIN_UTILSTRENCODINGS_H"
      },
      {
        "sha": "78f0342cbab375f6aba59e6d230134a211d99cf7",
        "filename": "src/utiltime.cpp",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include \"utiltime.h\"\n+\n+#include <boost/date_time/posix_time/posix_time.hpp>\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static int64_t nMockTime = 0;  // For unit testing\n+\n+int64_t GetTime()\n+{\n+    if (nMockTime) return nMockTime;\n+\n+    return time(NULL);\n+}\n+\n+void SetMockTime(int64_t nMockTimeIn)\n+{\n+    nMockTime = nMockTimeIn;\n+}\n+\n+int64_t GetTimeMillis()\n+{\n+    return (boost::posix_time::ptime(boost::posix_time::microsec_clock::universal_time()) -\n+            boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n+}\n+\n+int64_t GetTimeMicros()\n+{\n+    return (boost::posix_time::ptime(boost::posix_time::microsec_clock::universal_time()) -\n+            boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n+}\n+\n+void MilliSleep(int64_t n)\n+{\n+// Boost's sleep_for was uninterruptable when backed by nanosleep from 1.50\n+// until fixed in 1.52. Use the deprecated sleep method for the broken case.\n+// See: https://svn.boost.org/trac/boost/ticket/7238\n+#if defined(HAVE_WORKING_BOOST_SLEEP_FOR)\n+    boost::this_thread::sleep_for(boost::chrono::milliseconds(n));\n+#elif defined(HAVE_WORKING_BOOST_SLEEP)\n+    boost::this_thread::sleep(boost::posix_time::milliseconds(n));\n+#else\n+//should never get here\n+#error missing boost sleep implementation\n+#endif\n+}\n+\n+std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)\n+{\n+    // std::locale takes ownership of the pointer\n+    std::locale loc(std::locale::classic(), new boost::posix_time::time_facet(pszFormat));\n+    std::stringstream ss;\n+    ss.imbue(loc);\n+    ss << boost::posix_time::from_time_t(nTime);\n+    return ss.str();\n+}"
      },
      {
        "sha": "500ae4dab97e1f1d87ea43d3d53bb7a140d5303f",
        "filename": "src/utiltime.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTILTIME_H\n+#define BITCOIN_UTILTIME_H\n+\n+#include <stdint.h>\n+#include <string>\n+\n+int64_t GetTime();\n+int64_t GetTimeMillis();\n+int64_t GetTimeMicros();\n+void SetMockTime(int64_t nMockTimeIn);\n+void MilliSleep(int64_t n);\n+\n+std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime);\n+\n+#endif"
      },
      {
        "sha": "91f7eaa560a8f5e895146438c7e09e85499fcca8",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -10,8 +10,11 @@\n #include \"coincontrol.h\"\n #include \"net.h\"\n #include \"timedata.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n \n #include <boost/algorithm/string/replace.hpp>\n+#include <boost/thread.hpp>\n \n using namespace std;\n \n@@ -37,6 +40,11 @@ struct CompareValueOnly\n     }\n };\n \n+std::string COutput::ToString() const\n+{\n+    return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->vout[i].nValue).c_str());\n+}\n+\n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n {\n     LOCK(cs_wallet);"
      },
      {
        "sha": "bdb026472932c20a115ba8a3527a47cc01090ef8",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -11,7 +11,6 @@\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"ui_interface.h\"\n-#include \"util.h\"\n #include \"walletdb.h\"\n \n #include <algorithm>\n@@ -812,10 +811,7 @@ class COutput\n         tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn;\n     }\n \n-    std::string ToString() const\n-    {\n-        return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->vout[i].nValue).c_str());\n-    }\n+    std::string ToString() const;\n };\n \n "
      },
      {
        "sha": "2fa60716585595bd33c6af1d233d5d73f6b4847f",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=ad49c256c33bfe4088fd3c7ecb7d28cb81a8fc70",
        "patch": "@@ -9,10 +9,13 @@\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\"\n+#include \"utiltime.h\"\n+#include \"util.h\"\n #include \"wallet.h\"\n \n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n+#include <boost/thread.hpp>\n \n using namespace std;\n using namespace boost;"
      }
    ]
  }
]