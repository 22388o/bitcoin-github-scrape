sipa,2012-07-03T08:22:07Z,"Interesting. I definitely want shared locks at some point in the future.\n\nYou seem to implement some own implementation for a recursive shared lock? That certainly needs a lot of testing, as it can easily have subtle bugs. Maybe it is easier to clean up the code so that we don't need recursive locking at all (if all data structures are properly encapsulated, you can put the taking of locks in al",https://github.com/bitcoin/bitcoin/pull/1551#issuecomment-6728608,6728608,
TheBlueMatt,2012-07-03T14:15:01Z,"Sadly, boost only provides recursive locking support in boost::recursive_mutex, not in boost::shared_mutex.  Thus I had to add recursive checking to CCriticalSection.  In terms of making bitcoin not need recursive locks...that would get very ugly.  Bitcoin is such a mess as it is, trying to track down all the cases where we depend on recursive locks, I would think, would be quite a bit of effort. ",https://github.com/bitcoin/bitcoin/pull/1551#issuecomment-6735366,6735366,
BitcoinPullTester,2012-08-09T12:50:57Z,"Automatic sanity-testing: FAILED, see http://jenkins.bluematt.me/pull-tester/d3d8bf6f924678961c5f8200757f1deaa8630981 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts\n2. It does not merge cleanly onto current master\n3.",https://github.com/bitcoin/bitcoin/pull/1551#issuecomment-7613114,7613114,
jgarzik,2012-09-05T01:12:26Z,"Recommend closing, for now.  No ACKs gathered, and it seems to me like a _valid_ tool for our toolbox, without an immediate demonstrated need.  Our locks do not seem highly contended, which seems to bump this quite down the priority scale down to ""theoretically useful.""\n",https://github.com/bitcoin/bitcoin/pull/1551#issuecomment-8284685,8284685,
sipa,2012-09-05T01:16:50Z,"@jgarzik Not contended? We have a cs_main that blocks anything useful being done in parallel. Since many tasks only need read-only access to data structures, shared locks could increase parallellism massively.\n\nThat said, I still disagree with an implementation that releases a lock when trying to go from shared to exclusive.\n",https://github.com/bitcoin/bitcoin/pull/1551#issuecomment-8284759,8284759,
TheBlueMatt,2012-09-05T01:42:29Z,ACK on lack of ACKs\n,https://github.com/bitcoin/bitcoin/pull/1551#issuecomment-8285175,8285175,
luke-jr,2012-09-20T22:56:46Z,"FWIW, the new tests in this seem to fail occasionally.\n",https://github.com/bitcoin/bitcoin/pull/1551#issuecomment-8748568,8748568,
TheBlueMatt,2012-09-20T23:02:44Z,"Yea, it didnt work 100%, but I never got around to debugging it, and it was never a high priority (no interest anyway...)\n",https://github.com/bitcoin/bitcoin/pull/1551#issuecomment-8748698,8748698,
laanwj,2012-09-21T11:47:46Z,"This is a nice idea and will allow for some extra concurrency, but it makes reasoning in the current mess that is bitcoin locking even harder.\n\nI agree with sipa that we first need to get rid of recursive locks (and in the meantime, get getter insight into the current mess), before introducing  more complex locking primitives. \n",https://github.com/bitcoin/bitcoin/pull/1551#issuecomment-8762141,8762141,
sipa,2012-07-03T14:22:17Z,"This should just cause a fatal error. It's a programming error to try to go from a shared lock to an exclusive lock, and this implementation is almost certainly never what someone wants (it releases the lock entirely).\n",https://github.com/bitcoin/bitcoin/pull/1551#discussion_r1092570,1092570,src/sync.cpp
TheBlueMatt,2012-07-03T14:31:51Z,"In the traditional strict model, sure.  But if you are holding a SHARED_LOCK in one function which then calls another which requests a LOCK (and which would have been called in the same way no matter what the originally read data held), its not necessarily an error.  By providing support for that case here, adding SHARED_LOCKs to bitcoin takes a ton less auditing.\n\nIn terms of the implementation",https://github.com/bitcoin/bitcoin/pull/1551#discussion_r1092647,1092647,src/sync.cpp
sipa,2012-07-03T14:42:04Z,"There's no point in implementing it. The only case where you'd use it, is something that needs to be solved in another way: you'd need to have taken an upgradable lock in the first place. If data was read while in the shared lock, and used to make an update while having the exclusive lock, the results will be wrong if an update happens in between.\n\nIdeally, every public method of a well-encapsul",https://github.com/bitcoin/bitcoin/pull/1551#discussion_r1092727,1092727,src/sync.cpp
TheBlueMatt,2012-07-03T23:48:35Z,"My point was less of doing something in one session and more of doing it it multiple ""sessions"" that are really recursive calls that are very non-obvious.  This is especially a problem with cs_main, which covers multiple, largely unrelated data structures.  Yes, if Bitcoin were designed properly and if the switch to using shared/upgrade/unique locks were instant, it likely wouldn't be an issue.  H",https://github.com/bitcoin/bitcoin/pull/1551#discussion_r1097537,1097537,src/sync.cpp
TheBlueMatt,2012-07-04T00:00:15Z,"Added a printf(""WARNING: Upgrading directly from shared to exclusive mutex, something is wrong here: %s:%d\n"" if we upgrade directly from a shared to an exclusive lock.\n",https://github.com/bitcoin/bitcoin/pull/1551#discussion_r1097566,1097566,src/sync.cpp
