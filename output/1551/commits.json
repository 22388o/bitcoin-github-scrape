[
  {
    "sha": "1e037c96c825ab39a5c13636ad1d99a9e0894d88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTAzN2M5NmM4MjVhYjM5YTVjMTM2MzZhZDFkOTlhOWUwODk0ZDg4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-02T23:15:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-03T14:26:15Z"
      },
      "message": "Make test_bitcoin quiet again.",
      "tree": {
        "sha": "5480363e082fdead58f084923ed369dd00869612",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5480363e082fdead58f084923ed369dd00869612"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e037c96c825ab39a5c13636ad1d99a9e0894d88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e037c96c825ab39a5c13636ad1d99a9e0894d88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e037c96c825ab39a5c13636ad1d99a9e0894d88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e037c96c825ab39a5c13636ad1d99a9e0894d88/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "da1103f4f8288cffc9ea475254fdeb258f04de77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da1103f4f8288cffc9ea475254fdeb258f04de77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da1103f4f8288cffc9ea475254fdeb258f04de77"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ec9624e136bf91b8dcb59be021bcaa45e08ac202",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e037c96c825ab39a5c13636ad1d99a9e0894d88/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e037c96c825ab39a5c13636ad1d99a9e0894d88/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=1e037c96c825ab39a5c13636ad1d99a9e0894d88",
        "patch": "@@ -7,12 +7,12 @@\n CWallet* pwalletMain;\n CClientUIInterface uiInterface;\n \n-extern bool fPrintToConsole;\n+extern bool fDontPrint;\n extern void noui_connect();\n \n struct TestingSetup {\n     TestingSetup() {\n-        fPrintToConsole = true; // don't want to write to debug.log file\n+        fDontPrint = true; // don't want to write to debug.log file\n         noui_connect();\n         pwalletMain = new CWallet();\n         RegisterWallet(pwalletMain);"
      },
      {
        "sha": "67a2b2f5c455f500a7cfeee0fd52a0080aab2e8b",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e037c96c825ab39a5c13636ad1d99a9e0894d88/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e037c96c825ab39a5c13636ad1d99a9e0894d88/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=1e037c96c825ab39a5c13636ad1d99a9e0894d88",
        "patch": "@@ -60,6 +60,7 @@ map<string, vector<string> > mapMultiArgs;\n bool fDebug = false;\n bool fDebugNet = false;\n bool fPrintToConsole = false;\n+bool fDontPrint = false;\n bool fPrintToDebugger = false;\n bool fRequestShutdown = false;\n bool fShutdown = false;\n@@ -202,7 +203,7 @@ inline int OutputDebugStringF(const char* pszFormat, ...)\n         ret = vprintf(pszFormat, arg_ptr);\n         va_end(arg_ptr);\n     }\n-    else\n+    else if (!fDontPrint)\n     {\n         // print to debug.log\n         static FILE* fileout = NULL;"
      }
    ]
  },
  {
    "sha": "86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmY4YTQ2YWIwYzBmOGJjODVhYjA2YjRkNzkwZjk1ZGJjMDA0ZWEw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T15:46:45Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-03T14:26:33Z"
      },
      "message": "Add shared/upgrade lock support to CCriticalSection.",
      "tree": {
        "sha": "1d1d14a437f14f2d5a6046aee444bfaddc8098d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d1d14a437f14f2d5a6046aee444bfaddc8098d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "1e037c96c825ab39a5c13636ad1d99a9e0894d88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e037c96c825ab39a5c13636ad1d99a9e0894d88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e037c96c825ab39a5c13636ad1d99a9e0894d88"
      }
    ],
    "stats": {
      "total": 260,
      "additions": 255,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ca6157763c4b7443b246e10bb4b2a734bbe9a50e",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 231,
        "deletions": 0,
        "changes": 231,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0",
        "patch": "@@ -126,3 +126,234 @@ void LeaveCritical()\n }\n \n #endif /* DEBUG_LOCKORDER */\n+\n+\n+static void do_nothing (int* pBool) {}\n+\n+CCriticalSection::CCriticalSection() : nHasExclusive(&do_nothing), \n+nHasUpgrade(&do_nothing), nHadUpgrade(&do_nothing), \n+nHasShared(&do_nothing), nHadShared(&do_nothing) {}\n+\n+void CCriticalSection::lock()\n+{\n+    if (nHasExclusive.get() > (int*)0)\n+    {\n+        nHasExclusive.reset(nHasExclusive.get() + 1);\n+        return;\n+    }\n+\n+    if (nHasShared.get() > (int*)0)\n+    {\n+        mutex.unlock_shared();\n+        mutex.lock();\n+\n+        nHadShared.reset(nHasShared.get());\n+        nHasShared.reset((int*) 0);\n+    }\n+    else if (nHasUpgrade.get() > (int*)0)\n+    {\n+        mutex.unlock_upgrade_and_lock();\n+\n+        nHadUpgrade.reset(nHasUpgrade.get());\n+        nHasUpgrade.reset((int*) 0);\n+    }\n+    else\n+        mutex.lock();\n+\n+    nHasExclusive.reset((int*) 1);\n+}\n+\n+bool CCriticalSection::try_lock()\n+{\n+    if (nHasExclusive.get() > (int*)0)\n+    {\n+        nHasExclusive.reset(nHasExclusive.get() + 1);\n+        return true;\n+    }\n+\n+    if (nHasShared.get() > (int*)0)\n+    {\n+        mutex.unlock_shared();\n+        if (mutex.try_lock())\n+        {\n+            nHadShared.reset(nHasShared.get());\n+            nHasShared.reset((int*) 0);\n+            nHasExclusive.reset((int*) 1);\n+            return true;\n+        }\n+        else\n+        {\n+            mutex.lock_shared();\n+            return false;\n+        }\n+    }\n+    else if (nHasUpgrade.get() > (int*)0)\n+    {\n+        mutex.unlock_upgrade();\n+        if (mutex.try_lock())\n+        {\n+            nHadUpgrade.reset(nHasUpgrade.get());\n+            nHasUpgrade.reset((int*) 0);\n+            nHasExclusive.reset((int*) 1);\n+            return true;\n+        }\n+        else\n+        {\n+            mutex.lock_upgrade();\n+            return false;\n+        }\n+    }\n+    else\n+    {\n+        if (mutex.try_lock())\n+        {\n+            nHasExclusive.reset((int*) 1);\n+            return true;\n+        }\n+        else\n+            return false;\n+    }\n+}\n+\n+void CCriticalSection::unlock()\n+{\n+    if (nHasExclusive.get() == (int*)0)\n+        return;\n+    else if (nHasExclusive.get() > (int*)1)\n+    {\n+        nHasExclusive.reset(nHasExclusive.get() - 1);\n+        return;\n+    }\n+\n+    if (nHadUpgrade.get() > (int*)0)\n+    {\n+        mutex.unlock_and_lock_upgrade();\n+\n+        nHasUpgrade.reset(nHadUpgrade.get());\n+        nHadUpgrade.reset((int*) 0);\n+    }\n+    else if (nHadShared.get() > (int*)0)\n+    {\n+        mutex.unlock();\n+        mutex.lock_shared();\n+\n+        nHasShared.reset(nHadShared.get());\n+        nHadShared.reset((int*) 0);\n+    }\n+    else\n+        mutex.unlock();\n+\n+    nHasExclusive.reset((int*) 0);\n+}\n+\n+void CCriticalSection::lock_upgrade()\n+{\n+    if (nHasExclusive.get() > (int*)0)\n+    {\n+        nHadUpgrade.reset(nHadUpgrade.get() + 1);\n+        return;\n+    }\n+    else if (nHasUpgrade.get() > (int*)0)\n+    {\n+        nHasUpgrade.reset(nHasUpgrade.get() + 1);\n+        return;\n+    }\n+\n+    if (nHasShared.get() > (int*)0)\n+    {\n+        mutex.unlock_shared();\n+        mutex.lock_upgrade();\n+\n+        nHadShared.reset(nHasShared.get());\n+        nHasShared.reset((int*) 0);\n+    }\n+    else\n+        mutex.lock_upgrade();\n+\n+    nHasUpgrade.reset((int*) 1);\n+}\n+\n+void CCriticalSection::unlock_upgrade()\n+{\n+    if (nHasExclusive.get() > (int*)0)\n+    {\n+        if (nHadUpgrade.get() > (int*)0)\n+            nHadUpgrade.reset(nHadUpgrade.get() - 1);\n+        return;\n+    }\n+    else if (nHasUpgrade.get() > (int*)1)\n+    {\n+        nHasUpgrade.reset(nHasUpgrade.get() - 1);\n+        return;\n+    }\n+\n+    if (nHadShared.get() > (int*)0)\n+    {\n+        mutex.unlock_upgrade_and_lock_shared();\n+\n+        nHasShared.reset(nHadShared.get());\n+        nHadShared.reset((int*) 0);\n+    }\n+    else\n+        mutex.unlock_upgrade();\n+\n+    nHasUpgrade.reset((int*) 0);\n+}\n+\n+void CCriticalSection::lock_shared()\n+{\n+    if (nHasExclusive.get() > (int*)0 || nHasUpgrade.get() > (int*)0)\n+    {\n+        nHadShared.reset(nHadShared.get() + 1);\n+        return;\n+    }\n+    else if (nHasShared.get() > (int*)0)\n+    {\n+        nHasShared.reset(nHasShared.get() + 1);\n+        return;\n+    }\n+\n+    mutex.lock_shared();\n+    nHasShared.reset((int*) 1);\n+}\n+\n+bool CCriticalSection::try_lock_shared()\n+{\n+    if (nHasExclusive.get() > (int*)0 || nHasUpgrade.get() > (int*)0)\n+    {\n+        nHadShared.reset(nHadShared.get() + 1);\n+        return true;\n+    }\n+    else if (nHasShared.get() > (int*)0)\n+    {\n+        nHasShared.reset(nHasShared.get() + 1);\n+        return true;\n+    }\n+\n+    if (mutex.try_lock_shared())\n+    {\n+        nHasShared.reset((int*) 1);\n+        return true;\n+    }\n+    else\n+        return false;\n+}\n+\n+void CCriticalSection::unlock_shared()\n+{\n+    if (nHasExclusive.get() > (int*)0 || nHasUpgrade.get() > (int*)0)\n+    {\n+        if (nHadShared.get() > (int*)0)\n+            nHadShared.reset(nHadShared.get() - 1);\n+        return;\n+    }\n+    else if (nHasShared.get() > (int*)1)\n+    {\n+        nHasShared.reset(nHasShared.get() - 1);\n+        return;\n+    }\n+\n+    mutex.unlock_shared();\n+    nHasShared.reset((int*) 0);\n+}\n+"
      },
      {
        "sha": "4aabbab9ffc30d74ad70cb018a9a4ee4f308f424",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 24,
        "deletions": 5,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0",
        "patch": "@@ -6,18 +6,37 @@\n #define BITCOIN_SYNC_H\n \n #include <boost/thread/mutex.hpp>\n-#include <boost/thread/recursive_mutex.hpp>\n+#include <boost/thread/shared_mutex.hpp>\n #include <boost/thread/locks.hpp>\n #include <boost/thread/condition_variable.hpp>\n+#include <boost/thread/tss.hpp>\n \n \n \n \n-/** Wrapped boost mutex: supports recursive locking, but no waiting  */\n-typedef boost::recursive_mutex CCriticalSection;\n+/** Extend boost::shared_mutex to have recursive support */\n+class CCriticalSection\n+{\n+    boost::thread_specific_ptr<int> nHasExclusive;\n+    boost::thread_specific_ptr<int> nHasUpgrade;\n+    boost::thread_specific_ptr<int> nHadUpgrade;\n+    boost::thread_specific_ptr<int> nHasShared;\n+    boost::thread_specific_ptr<int> nHadShared;\n+    boost::shared_mutex mutex;\n+public:\n+    CCriticalSection();\n+\n+    void lock();\n+    bool try_lock();\n+    void unlock();\n \n-/** Wrapped boost mutex: supports waiting but not recursive locking */\n-typedef boost::mutex CWaitableCriticalSection;\n+    void lock_upgrade();\n+    void unlock_upgrade();\n+\n+    void lock_shared();\n+    bool try_lock_shared();\n+    void unlock_shared();\n+};\n \n #ifdef DEBUG_LOCKORDER\n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false);"
      }
    ]
  },
  {
    "sha": "a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWNlMmM1MjBiYTFjOGYzMjcwZDMwYjhiYjFjMzI5YWUyNTUwNWJi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-03T14:25:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-03T14:26:33Z"
      },
      "message": "Upgrade CCriticalBlock to add Shared/Upgrade locks.",
      "tree": {
        "sha": "890726b3f3f1fdee6c3d229de0373d5e6387ef8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/890726b3f3f1fdee6c3d229de0373d5e6387ef8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86f8a46ab0c0f8bc85ab06b4d790f95dbc004ea0"
      }
    ],
    "stats": {
      "total": 185,
      "additions": 119,
      "deletions": 66
    },
    "files": [
      {
        "sha": "2743f4baae20ef27aaad669b82e2b10f0b5c15d5",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb",
        "patch": "@@ -357,3 +357,93 @@ void CCriticalSection::unlock_shared()\n     nHasShared.reset((int*) 0);\n }\n \n+\n+\n+\n+void CCriticalBlock::Enter(const char* pszName, const char* pszFile, int nLine)\n+{\n+    if (!fOwnsLock)\n+    {\n+        EnterCritical(pszName, pszFile, nLine, (void*)pmutex);\n+#ifdef DEBUG_LOCKCONTENTION\n+        bool fLocked;\n+        switch (lockType)\n+        {\n+        case UNIQUE:\n+            fLocked = pmutex->try_lock();\n+            break;\n+        case UPGRADE:\n+            pmutex->lock_upgrade();\n+            fLocked = true;\n+            break;\n+        case SHARED:\n+            fLocked = pmutex->try_lock_shared();\n+            break;\n+        }\n+        if (!fLocked)\n+        {\n+            PrintLockContention(pszName, pszFile, nLine);\n+#endif\n+        switch (lockType)\n+        {\n+        case UNIQUE:\n+            pmutex->lock();\n+            break;\n+        case UPGRADE:\n+            pmutex->lock_upgrade();\n+            break;\n+        case SHARED:\n+            pmutex->lock_shared();\n+            break;\n+        }\n+#ifdef DEBUG_LOCKCONTENTION\n+        }\n+#endif\n+        fOwnsLock = true;\n+    }\n+}\n+\n+void CCriticalBlock::Leave()\n+{\n+    if (fOwnsLock)\n+    {\n+        switch (lockType)\n+        {\n+        case UNIQUE:\n+            pmutex->unlock();\n+            break;\n+        case UPGRADE:\n+            pmutex->unlock_upgrade();\n+            break;\n+        case SHARED:\n+            pmutex->unlock_shared();\n+            break;\n+        }\n+        LeaveCritical();\n+    }\n+}\n+\n+bool CCriticalBlock::TryEnter(const char* pszName, const char* pszFile, int nLine)\n+{\n+    if (!fOwnsLock)\n+    {\n+        EnterCritical(pszName, pszFile, nLine, (void*)pmutex, true);\n+        switch (lockType)\n+        {\n+        case UNIQUE:\n+            fOwnsLock = pmutex->try_lock();\n+            break;\n+        case UPGRADE:\n+            pmutex->lock_upgrade();\n+            fOwnsLock = true;\n+            break;\n+        case SHARED:\n+            fOwnsLock = pmutex->try_lock_shared();\n+            break;\n+        }\n+        if (!fOwnsLock)\n+            LeaveCritical();\n+    }\n+    return fOwnsLock;\n+}\n+"
      },
      {
        "sha": "d106e73acb530efa990a4f133f3e42d978aad243",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 29,
        "deletions": 66,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb",
        "patch": "@@ -38,95 +38,58 @@ class CCriticalSection\n     void unlock_shared();\n };\n \n-#ifdef DEBUG_LOCKORDER\n-void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false);\n-void LeaveCritical();\n-#else\n-void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n-void static inline LeaveCritical() {}\n-#endif\n-\n-#ifdef DEBUG_LOCKCONTENTION\n-void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n-#endif\n-\n-/** Wrapper around boost::interprocess::scoped_lock */\n-template<typename Mutex>\n-class CMutexLock\n+/** RAII wrapper around CCriticalSection */\n+class CCriticalBlock\n {\n+public:\n+    enum LockType { UNIQUE, UPGRADE, SHARED };\n private:\n-    boost::unique_lock<Mutex> lock;\n+    CCriticalSection* pmutex;\n+    bool fOwnsLock;\n+    LockType lockType;\n public:\n+    void Enter(const char* pszName, const char* pszFile, int nLine);\n+    void Leave();\n+    bool TryEnter(const char* pszName, const char* pszFile, int nLine);\n \n-    void Enter(const char* pszName, const char* pszFile, int nLine)\n-    {\n-        if (!lock.owns_lock())\n-        {\n-            EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()));\n-#ifdef DEBUG_LOCKCONTENTION\n-            if (!lock.try_lock())\n-            {\n-                PrintLockContention(pszName, pszFile, nLine);\n-#endif\n-            lock.lock();\n-#ifdef DEBUG_LOCKCONTENTION\n-            }\n-#endif\n-        }\n-    }\n-\n-    void Leave()\n-    {\n-        if (lock.owns_lock())\n-        {\n-            lock.unlock();\n-            LeaveCritical();\n-        }\n-    }\n-\n-    bool TryEnter(const char* pszName, const char* pszFile, int nLine)\n-    {\n-        if (!lock.owns_lock())\n-        {\n-            EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()), true);\n-            lock.try_lock();\n-            if (!lock.owns_lock())\n-                LeaveCritical();\n-        }\n-        return lock.owns_lock();\n-    }\n-\n-    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::defer_lock)\n+    CCriticalBlock(CCriticalSection& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false, LockType lockTypeIn = UNIQUE)\n+        : pmutex(&mutexIn), fOwnsLock(false), lockType(lockTypeIn)\n     {\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n         else\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    ~CMutexLock()\n+    ~CCriticalBlock()\n     {\n-        if (lock.owns_lock())\n-            LeaveCritical();\n+        if (fOwnsLock)\n+            Leave();\n     }\n \n     operator bool()\n     {\n-        return lock.owns_lock();\n-    }\n-\n-    boost::unique_lock<Mutex> &GetLock()\n-    {\n-        return lock;\n+        return fOwnsLock;\n     }\n };\n \n-typedef CMutexLock<CCriticalSection> CCriticalBlock;\n-\n #define LOCK(cs) CCriticalBlock criticalblock(cs, #cs, __FILE__, __LINE__)\n #define LOCK2(cs1,cs2) CCriticalBlock criticalblock1(cs1, #cs1, __FILE__, __LINE__),criticalblock2(cs2, #cs2, __FILE__, __LINE__)\n #define TRY_LOCK(cs,name) CCriticalBlock name(cs, #cs, __FILE__, __LINE__, true)\n \n+#define SHARED_LOCK(cs) CCriticalBlock shared_criticalblock(cs, #cs, __FILE__, __LINE__, false, CCriticalBlock::SHARED)\n+#define TRY_SHARED_LOCK(cs,name) CCriticalBlock name(cs, #cs, __FILE__, __LINE__, true, CCriticalBlock::SHARED)\n+\n+#define UPGRADE_LOCK(cs) CCriticalBlock shared_criticalblock(cs, #cs, __FILE__, __LINE__, false, CCriticalBlock::UPGRADE)\n+\n+#ifdef DEBUG_LOCKORDER\n+void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false);\n+void LeaveCritical();\n+#else\n+void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n+void static inline LeaveCritical() {}\n+#endif\n+\n #define ENTER_CRITICAL_SECTION(cs) \\\n     { \\\n         EnterCritical(#cs, __FILE__, __LINE__, (void*)(&cs)); \\"
      }
    ]
  },
  {
    "sha": "b3226fffabdf357425953b95bf16f3c2b8461e58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzIyNmZmZmFiZGYzNTc0MjU5NTNiOTViZjE2ZjNjMmI4NDYxZTU4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-02T23:16:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-04T00:59:41Z"
      },
      "message": "Add locking test cases.",
      "tree": {
        "sha": "c33c076e19f6523ce8f62fe81b77461c3b4ef708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c33c076e19f6523ce8f62fe81b77461c3b4ef708"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3226fffabdf357425953b95bf16f3c2b8461e58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3226fffabdf357425953b95bf16f3c2b8461e58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3226fffabdf357425953b95bf16f3c2b8461e58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3226fffabdf357425953b95bf16f3c2b8461e58/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1ce2c520ba1c8f3270d30b8bb1c329ae25505bb"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 128,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e20a0bbc88c4e3c1c1508549a372db95ac6b6b64",
        "filename": "src/test/sync_tests.cpp",
        "status": "added",
        "additions": 128,
        "deletions": 0,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3226fffabdf357425953b95bf16f3c2b8461e58/src/test/sync_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3226fffabdf357425953b95bf16f3c2b8461e58/src/test/sync_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sync_tests.cpp?ref=b3226fffabdf357425953b95bf16f3c2b8461e58",
        "patch": "@@ -0,0 +1,128 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+BOOST_AUTO_TEST_SUITE(sync_tests)\n+\n+CCriticalSection cs;\n+int nIsInCS = 0;\n+bool fIsInSharedCS = false;\n+bool fIsInUpgradeCS = false;\n+bool fThreadOneDone = false;\n+bool fThreadTwoDone = false;\n+\n+void ThreadOne(void* parg)\n+{\n+    {\n+        LOCK(cs);\n+        nIsInCS++;\n+        Sleep(100);\n+        nIsInCS--;\n+    }\n+    Sleep(50);\n+    BOOST_CHECK_MESSAGE(nIsInCS != 0, \"LOCK doesnt unlock.\");\n+    BOOST_CHECK_MESSAGE(nIsInCS != 1, \"Multiple LOCKs in a thread deadlocks.\");\n+    BOOST_CHECK_MESSAGE(nIsInCS == 2, \"See previous error, or int++/-- is broken.\");\n+    {\n+        LOCK(cs);\n+    }\n+    BOOST_CHECK_MESSAGE(nIsInCS == 0, \"Recursive lock unlocks fully after first unlock.\");\n+    // Finished first test set (200ms in Sleeps)\n+    Sleep(50);\n+    {\n+        SHARED_LOCK(cs);\n+        BOOST_CHECK_MESSAGE(fIsInSharedCS, \"Cant get a shared lock.\");\n+        {\n+            LOCK(cs);\n+            BOOST_CHECK_MESSAGE(!fIsInSharedCS, \"Lock upgrade from shared doesn't wait.\");\n+            nIsInCS++;\n+            Sleep(100);\n+            nIsInCS--;\n+        }\n+    }\n+    Sleep(25);\n+    {\n+        SHARED_LOCK(cs);\n+        BOOST_CHECK_MESSAGE(nIsInCS == 0, \"SHARED_LOCK doesn't wait for LOCK.\");\n+    }\n+    // Finished second test set (300ms in Sleeps)\n+    Sleep(25);\n+    {\n+        UPGRADE_LOCK(cs);\n+        fIsInUpgradeCS = true;\n+        Sleep(75);\n+        {\n+            LOCK(cs);\n+            BOOST_CHECK_MESSAGE(!fIsInSharedCS, \"Lock upgrade from upgrade doesn't wait.\");\n+            nIsInCS++;\n+            Sleep(50);\n+            nIsInCS--;\n+        }\n+        Sleep(50);\n+        fIsInUpgradeCS = false;\n+    }\n+    // Finished third test set (225ms in Sleeps)\n+    fThreadOneDone = true;\n+}\n+\n+void ThreadTwo(void* parg)\n+{\n+    Sleep(50);\n+    {\n+        LOCK(cs);\n+        BOOST_CHECK_MESSAGE(nIsInCS == 0, \"LOCK doesn't lock.\");\n+        nIsInCS++;\n+        {\n+            LOCK(cs);\n+            nIsInCS++;\n+            Sleep(50);\n+            nIsInCS--;\n+        }\n+        Sleep(50);\n+        nIsInCS--;\n+    }\n+    // Finished first test set (200ms in Sleeps)\n+    Sleep(25);\n+    {\n+        SHARED_LOCK(cs);\n+        fIsInSharedCS = true;\n+        Sleep(75);\n+        fIsInSharedCS = false;\n+    }\n+    Sleep(25);\n+    {\n+        LOCK(cs);\n+        BOOST_CHECK_MESSAGE(nIsInCS == 0, \"LOCK doesn't lock after SHARED_LOCK.\");\n+        nIsInCS++;\n+        Sleep(100);\n+        nIsInCS--;\n+    }\n+    // Finished second test set (300ms in Sleeps)\n+    Sleep(50);\n+    {\n+        SHARED_LOCK(cs);\n+        BOOST_CHECK_MESSAGE(fIsInUpgradeCS, \"SHARED_LOCK waits for UPGRADE_LOCK.\");\n+        fIsInSharedCS = true;\n+        Sleep(75);\n+        fIsInSharedCS = false;\n+    }\n+    {\n+        UPGRADE_LOCK(cs);\n+        BOOST_CHECK_MESSAGE(nIsInCS == 0, \"UPGRADE_LOCK doesn't wait for LOCK.\");\n+        BOOST_CHECK_MESSAGE(!fIsInUpgradeCS, \"UPGRADE_LOCK is non-exclusive.\");\n+    }\n+    // Finished third test set (225ms in Sleeps)\n+    fThreadTwoDone = true;\n+}\n+\n+BOOST_AUTO_TEST_CASE(lock_tests)\n+{\n+    BOOST_CHECK_MESSAGE(CreateThread(ThreadOne, NULL), \"CreateThread Failed!\");\n+    BOOST_CHECK_MESSAGE(CreateThread(ThreadTwo, NULL), \"CreateThread Failed!\");\n+    Sleep(750);\n+    BOOST_CHECK_MESSAGE(fThreadOneDone, \"CreateThread doesn't create thread or LOCK/SHARED_LOCK deadlocks.\");\n+    BOOST_CHECK_MESSAGE(fThreadTwoDone, \"CreateThread doesn't create thread or LOCK/SHARED_LOCK deadlocks.\");\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "d3d8bf6f924678961c5f8200757f1deaa8630981",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2Q4YmY2ZjkyNDY3ODk2MWM1ZjgyMDA3NTdmMWRlYWE4NjMwOTgx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-03T23:58:54Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-04T01:08:28Z"
      },
      "message": "Add a warning if we upgrade directly from shared->exclusive lock.",
      "tree": {
        "sha": "ad2560a89210f26d85ca91795f86c2999ced1dcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad2560a89210f26d85ca91795f86c2999ced1dcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3d8bf6f924678961c5f8200757f1deaa8630981",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d8bf6f924678961c5f8200757f1deaa8630981",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3d8bf6f924678961c5f8200757f1deaa8630981",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d8bf6f924678961c5f8200757f1deaa8630981/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "b3226fffabdf357425953b95bf16f3c2b8461e58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3226fffabdf357425953b95bf16f3c2b8461e58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3226fffabdf357425953b95bf16f3c2b8461e58"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3dcf8853fb748b2e8ff4614cea7b088c561cd139",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3d8bf6f924678961c5f8200757f1deaa8630981/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3d8bf6f924678961c5f8200757f1deaa8630981/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=d3d8bf6f924678961c5f8200757f1deaa8630981",
        "patch": "@@ -128,6 +128,14 @@ void LeaveCritical()\n #endif /* DEBUG_LOCKORDER */\n \n \n+void CheckLockUpgrade(const char* pszFile, int nLine, CCriticalSection& cs)\n+{\n+    if (cs.has_shared())\n+        printf(\"WARNING: Upgrading directly from shared to exclusive mutex, something is wrong here: %s:%d\\n\", pszFile, nLine);\n+\n+}\n+\n+\n static void do_nothing (int* pBool) {}\n \n CCriticalSection::CCriticalSection() : nHasExclusive(&do_nothing), \n@@ -357,6 +365,11 @@ void CCriticalSection::unlock_shared()\n     nHasShared.reset((int*) 0);\n }\n \n+bool CCriticalSection::has_shared()\n+{\n+    return nHasShared.get() > (int*)0;\n+}\n+\n \n \n \n@@ -370,6 +383,7 @@ void CCriticalBlock::Enter(const char* pszName, const char* pszFile, int nLine)\n         switch (lockType)\n         {\n         case UNIQUE:\n+            CheckLockUpgrade(pszFile, nLine, *pmutex);\n             fLocked = pmutex->try_lock();\n             break;\n         case UPGRADE:\n@@ -387,6 +401,7 @@ void CCriticalBlock::Enter(const char* pszName, const char* pszFile, int nLine)\n         switch (lockType)\n         {\n         case UNIQUE:\n+            CheckLockUpgrade(pszFile, nLine, *pmutex);\n             pmutex->lock();\n             break;\n         case UPGRADE:\n@@ -431,6 +446,7 @@ bool CCriticalBlock::TryEnter(const char* pszName, const char* pszFile, int nLin\n         switch (lockType)\n         {\n         case UNIQUE:\n+            CheckLockUpgrade(pszFile, nLine, *pmutex);\n             fOwnsLock = pmutex->try_lock();\n             break;\n         case UPGRADE:"
      },
      {
        "sha": "9635f7315858f07367d027e961be170e0aaffd13",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3d8bf6f924678961c5f8200757f1deaa8630981/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3d8bf6f924678961c5f8200757f1deaa8630981/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=d3d8bf6f924678961c5f8200757f1deaa8630981",
        "patch": "@@ -36,6 +36,9 @@ class CCriticalSection\n     void lock_shared();\n     bool try_lock_shared();\n     void unlock_shared();\n+\n+    // Temporary function to allow useful warnings when upgrading shared->exclusive\n+    bool has_shared();\n };\n \n /** RAII wrapper around CCriticalSection */\n@@ -90,9 +93,12 @@ void static inline EnterCritical(const char* pszName, const char* pszFile, int n\n void static inline LeaveCritical() {}\n #endif\n \n+void CheckLockUpgrade(const char* pszfile, int nLine, CCriticalSection& cs);\n+\n #define ENTER_CRITICAL_SECTION(cs) \\\n     { \\\n         EnterCritical(#cs, __FILE__, __LINE__, (void*)(&cs)); \\\n+        CheckLockUpgrade(__FILE__, __LINE__, cs); \\\n         (cs).lock(); \\\n     }\n "
      }
    ]
  }
]