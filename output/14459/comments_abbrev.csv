ch4ot1c,2018-10-11T00:28:20Z,See above comment.,https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-428776882,428776882,
DrahtBot,2018-10-20T10:03:38Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14987](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14987.html) (RPCHelpMan: Pass through Result and Example",https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-431567043,431567043,
MarcoFalke,2018-10-21T02:32:53Z,"* importprunedfunds has arguments, but they are not listed in the help string. Mind adding them?\n* uptime takes (and ignores) a dummy argument, whereas it shouldn't. Mind fixing the code to throw when a dummy is provided?",https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-431633809,431633809,
MarcoFalke,2018-10-21T04:52:25Z,"`prioritisetransaction` has an argument with a space. Mind to replace the space with underscore?\n`getbalance` has an argument name with a opening bracket. Mind to remove those brackets from the name?",https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-431638807,431638807,
ch4ot1c,2018-10-21T05:08:10Z,"~`prioritisetransaction` and `getbalance` changes are already in the PR.~\n\nEdit: All above issues by MarcoFalke have been resolved by the latest code having transitioned to `RPCHelpMan`.",https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-431639403,431639403,
MarcoFalke,2018-11-13T21:53:51Z,"Could rebase and squash with something like:\n\n```sh\ngit fetch bitcoin\ngit checkout fix/rpc-descriptions\ngit merge bitcoin/master\ngit reset --soft bitcoin/master\ngit commit -m ""More RPC help description fixes""\ngit push origin fix/rpc-descriptions --force",https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-438452384,438452384,
practicalswift,2018-12-08T12:28:58Z,This PR doesn't compile when rebased on `master`,https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-445455676,445455676,
laanwj,2018-12-13T12:11:39Z,utACK 2f6fff743a2f1e7c51bee41c18498b4043ba9e48,https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-446947126,446947126,
MarcoFalke,2018-12-13T17:34:24Z,"`src/rpc/util.cpp` uses ""json object"". Imo everything should use the same",https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-447054599,447054599,
ch4ot1c,2018-12-13T22:01:18Z,"@MarcoFalke ~I see. To confirm, `json array` and `json object` everywhere applicable, preferred over `array` and `object`, aka `util.cpp` is set in stone? Will redo as a scripted-diff once more.~\n\nEdit: Done. Note: `an array` and `an object` is still used in [bitcoin-core/univalue](https://github.com/bitcoin-core/univalue/blob/7fba60b5ad0b579068af79209c2731992aeada70/lib/univalue_get.cpp#L79),",https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-447136252,447136252,
ch4ot1c,2018-12-28T21:28:54Z,Rebased and ready for review @MarcoFalke. Let me know how you'd like this squashed.,https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-450430300,450430300,
laanwj,2019-01-14T16:43:56Z,"Concept ACK.\n\nThough I think the jargon switch to `numeric` loses information.\n\nThe code, in practice, makes a difference between `numeric` (in general) and `integer`. For example where `get_int` is used, only an integer will be accepted. Not a decimal value with a point.\n",https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-454073702,454073702,
DrahtBot,2019-01-29T15:39:00Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/14459#issuecomment-458587084,458587084,
promag,2018-10-11T00:07:27Z,`dummy` is a string.,https://github.com/bitcoin/bitcoin/pull/14459#discussion_r224279274,224279274,src/wallet/rpcwallet.cpp
MarcoFalke,2018-10-21T04:51:44Z,Can be fixed instead by replacing `> 1` with `> 0` a few lines up?,https://github.com/bitcoin/bitcoin/pull/14459#discussion_r226847541,226847541,src/rpc/server.cpp
MarcoFalke,2018-10-21T04:55:55Z,"```suggestion\n             ""importmulti \""requests\"" ( \""options\"" )\n""\n```",https://github.com/bitcoin/bitcoin/pull/14459#discussion_r226847586,226847586,src/wallet/rpcdump.cpp
ch4ot1c,2018-10-21T04:59:30Z,"Ah, that was what I thought at first.",https://github.com/bitcoin/bitcoin/pull/14459#discussion_r226847625,226847625,src/rpc/server.cpp
MarcoFalke,2018-10-21T05:35:11Z,Half of the changes seem to be of this fashion. Mind to create a primitive scripted-diff commit in a separate pull request to get the easy to review things out of the way?,https://github.com/bitcoin/bitcoin/pull/14459#discussion_r226848205,226848205,src/zmq/zmqrpc.cpp
ch4ot1c,2018-10-21T08:42:42Z,"Damn, they need to make a `sed`-builder plugin alongside find-and-replace in vscode, that supports negation. Way easier workflow for newer contributors than all the nuanced escape characters that are necessary in *nix tools.\n\nIs it preferred to use `git grep (-l) (-L)` or `find . x` in scripted diffs?\n\n~Also, does this really make it easier to review for correctness? I'm not so sure.~ Veri",https://github.com/bitcoin/bitcoin/pull/14459#discussion_r226853509,226853509,src/zmq/zmqrpc.cpp
ch4ot1c,2018-10-21T08:51:04Z,"And on Mac, `gsed` is needed to replicate `sed` behavior performed in scripted-diffs",https://github.com/bitcoin/bitcoin/pull/14459#discussion_r226853780,226853780,src/zmq/zmqrpc.cpp
MarcoFalke,2018-10-21T13:30:35Z,"I'd do it like this: `sed -i --regexp-extended -e 's/\(json (array|object)/(\1/g' $(git grep -l '(json ')`. There might be a hack to make it work on macOS, but we mostly care that it runs on Ubuntu et al.",https://github.com/bitcoin/bitcoin/pull/14459#discussion_r226863081,226863081,src/zmq/zmqrpc.cpp
ch4ot1c,2018-12-14T17:20:58Z,`A json array` here instead?,https://github.com/bitcoin/bitcoin/pull/14459#discussion_r241829254,241829254,src/rpc/mining.cpp
