[
  {
    "sha": "d6967451eb51f1c393cbe854260fcc540735dd0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjk2NzQ1MWViNTFmMWMzOTNjYmU4NTQyNjBmY2M1NDA3MzVkZDBh",
    "commit": {
      "author": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2016-01-28T08:37:05Z"
      },
      "committer": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2016-02-02T21:55:34Z"
      },
      "message": "AcceptToMempool: extract various policy functions",
      "tree": {
        "sha": "6c696dd0c8cd3e2901ea6b1cae8a20ca308e39a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c696dd0c8cd3e2901ea6b1cae8a20ca308e39a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6967451eb51f1c393cbe854260fcc540735dd0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6967451eb51f1c393cbe854260fcc540735dd0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6967451eb51f1c393cbe854260fcc540735dd0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6967451eb51f1c393cbe854260fcc540735dd0a/comments",
    "author": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd13fe7ca01b6104ce591af2b90ee6951ccc5a16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd13fe7ca01b6104ce591af2b90ee6951ccc5a16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd13fe7ca01b6104ce591af2b90ee6951ccc5a16"
      }
    ],
    "stats": {
      "total": 223,
      "additions": 125,
      "deletions": 98
    },
    "files": [
      {
        "sha": "c07177e36988bc467de403711fc746fe07599590",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 125,
        "deletions": 98,
        "changes": 223,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6967451eb51f1c393cbe854260fcc540735dd0a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6967451eb51f1c393cbe854260fcc540735dd0a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d6967451eb51f1c393cbe854260fcc540735dd0a",
        "patch": "@@ -812,6 +812,10 @@ std::string FormatStateMessage(const CValidationState &state)\n         state.GetRejectCode());\n }\n \n+bool HasConflicts(CTxMemPool& pool, const CTransaction& tx, set<uint256>& setConflicts);\n+bool IsNewTransaction(CTxMemPool& pool, CValidationState &state, const CTransaction& tx, CCoinsViewCache& view, CAmount& nValueIn, bool* pfMissingInputs, std::vector<uint256>& vHashTxnToUncache);\n+bool IsRateLimited (unsigned int nSize, CAmount nModifiedFees);\n+\n bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                               bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee,\n                               std::vector<uint256>& vHashTxnToUncache)\n@@ -845,101 +849,33 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n \n     // Check for conflicts with in-memory transactions\n     set<uint256> setConflicts;\n-    {\n-    LOCK(pool.cs); // protect pool.mapNextTx\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin)\n-    {\n-        if (pool.mapNextTx.count(txin.prevout))\n-        {\n-            const CTransaction *ptxConflicting = pool.mapNextTx[txin.prevout].ptx;\n-            if (!setConflicts.count(ptxConflicting->GetHash()))\n-            {\n-                // Allow opt-out of transaction replacement by setting\n-                // nSequence >= maxint-1 on all inputs.\n-                //\n-                // maxint-1 is picked to still allow use of nLockTime by\n-                // non-replacable transactions. All inputs rather than just one\n-                // is for the sake of multi-party protocols, where we don't\n-                // want a single party to be able to disable replacement.\n-                //\n-                // The opt-out ignores descendants as anyone relying on\n-                // first-seen mempool behavior should be checking all\n-                // unconfirmed ancestors anyway; doing otherwise is hopelessly\n-                // insecure.\n-                bool fReplacementOptOut = true;\n-                if (fPermitReplacement)\n-                {\n-                    BOOST_FOREACH(const CTxIn &txin, ptxConflicting->vin)\n-                    {\n-                        if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1)\n-                        {\n-                            fReplacementOptOut = false;\n-                            break;\n-                        }\n-                    }\n-                }\n-                if (fReplacementOptOut)\n-                    return state.Invalid(false, REJECT_CONFLICT, \"txn-mempool-conflict\");\n-\n-                setConflicts.insert(ptxConflicting->GetHash());\n-            }\n-        }\n-    }\n-    }\n+    if (HasConflicts(pool, tx, setConflicts))\n+        return state.Invalid(false, REJECT_CONFLICT, \"txn-mempool-conflict\");\n \n     {\n         CCoinsView dummy;\n         CCoinsViewCache view(&dummy);\n \n         CAmount nValueIn = 0;\n-        {\n-        LOCK(pool.cs);\n-        CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n-        view.SetBackend(viewMemPool);\n-\n-        // do we already have it?\n-        bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(hash);\n-        if (view.HaveCoins(hash)) {\n-            if (!fHadTxInCache)\n-                vHashTxnToUncache.push_back(hash);\n-            return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n-        }\n-\n-        // do all inputs exist?\n-        // Note that this does not check for the presence of actual outputs (see the next check for that),\n-        // and only helps with filling in pfMissingInputs (to determine missing vs spent).\n-        BOOST_FOREACH(const CTxIn txin, tx.vin) {\n-            if (!pcoinsTip->HaveCoinsInCache(txin.prevout.hash))\n-                vHashTxnToUncache.push_back(txin.prevout.hash);\n-            if (!view.HaveCoins(txin.prevout.hash)) {\n-                if (pfMissingInputs)\n-                    *pfMissingInputs = true;\n-                return false; // fMissingInputs and !state.IsInvalid() is used to detect this condition, don't set state.Invalid()\n-            }\n-        }\n \n-        // are the actual inputs available?\n-        if (!view.HaveInputs(tx))\n-            return state.Invalid(false, REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+        {\n+            LOCK(pool.cs);\n \n-        // Bring the best block into scope\n-        view.GetBestBlock();\n+            CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n+            view.SetBackend(viewMemPool);\n \n-        nValueIn = view.GetValueIn(tx);\n+            if (!IsNewTransaction(pool, state, tx, view, nValueIn, pfMissingInputs, vHashTxnToUncache)) return false;\n \n-        // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n-        view.SetBackend(dummy);\n+            // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n+            view.SetBackend(dummy);\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n-\n         CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n+        CAmount nFees = nValueIn - nValueOut;\n         // nModifiedFees includes any fee deltas from PrioritiseTransaction\n         CAmount nModifiedFees = nFees;\n         double nPriorityDummy = 0;\n@@ -959,6 +895,9 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n             }\n         }\n \n+        unsigned int nSigOps = GetLegacySigOpCount(tx);\n+        nSigOps += GetP2SHSigOpCount(tx, view);\n+\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps);\n         unsigned int nSize = entry.GetTxSize();\n \n@@ -982,24 +921,8 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         // Continuously rate-limit free (really, very-low-fee) transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nModifiedFees < ::minRelayTxFee.GetFee(nSize))\n-        {\n-            static CCriticalSection csFreeLimiter;\n-            static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount + nSize >= GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) * 10 * 1000)\n-                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n+        if (fLimitFree && IsRateLimited(nSize, nModifiedFees)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n         }\n \n         if (fRejectAbsurdFee && nFees > maxTxFee)\n@@ -1231,6 +1154,110 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return res;\n }\n \n+// TODO: move to policy/\n+bool HasConflicts(CTxMemPool& pool, const CTransaction& tx, set<uint256>& setConflicts) {\n+    LOCK(pool.cs); // protect pool.mapNextTx\n+    BOOST_FOREACH(const CTxIn &txin, tx.vin)\n+    {\n+        if (pool.mapNextTx.count(txin.prevout))\n+        {\n+            const CTransaction *ptxConflicting = pool.mapNextTx[txin.prevout].ptx;\n+            if (!setConflicts.count(ptxConflicting->GetHash()))\n+            {\n+                // Allow opt-out of transaction replacement by setting\n+                // nSequence >= maxint-1 on all inputs.\n+                //\n+                // maxint-1 is picked to still allow use of nLockTime by\n+                // non-replacable transactions. All inputs rather than just one\n+                // is for the sake of multi-party protocols, where we don't\n+                // want a single party to be able to disable replacement.\n+                //\n+                // The opt-out ignores descendants as anyone relying on\n+                // first-seen mempool behavior should be checking all\n+                // unconfirmed ancestors anyway; doing otherwise is hopelessly\n+                // insecure.\n+                bool fReplacementOptOut = true;\n+                if (fPermitReplacement)\n+                {\n+                    BOOST_FOREACH(const CTxIn &txin, ptxConflicting->vin)\n+                    {\n+                        if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1)\n+                        {\n+                            fReplacementOptOut = false;\n+                            break;\n+                        }\n+                    }\n+                }\n+                if (fReplacementOptOut)\n+                    return true;\n+\n+                setConflicts.insert(ptxConflicting->GetHash());\n+            }\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+bool IsNewTransaction(CTxMemPool& pool, CValidationState &state, const CTransaction& tx, CCoinsViewCache& view, CAmount& nValueIn, bool* pfMissingInputs, std::vector<uint256>& vHashTxnToUncache) {\n+    const uint256 hash = tx.GetHash();\n+\n+    // do we already have it?\n+    bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(hash);\n+    if (view.HaveCoins(hash)) {\n+        if (!fHadTxInCache)\n+            vHashTxnToUncache.push_back(hash);\n+        return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n+    }\n+\n+    // do all inputs exist?\n+    // Note that this does not check for the presence of actual outputs (see the next check for that),\n+    // and only helps with filling in pfMissingInputs (to determine missing vs spent).\n+    BOOST_FOREACH(const CTxIn txin, tx.vin) {\n+        if (!pcoinsTip->HaveCoinsInCache(txin.prevout.hash))\n+            vHashTxnToUncache.push_back(txin.prevout.hash);\n+        if (!view.HaveCoins(txin.prevout.hash)) {\n+            if (pfMissingInputs)\n+                *pfMissingInputs = true;\n+            return false; // fMissingInputs and !state.IsInvalid() is used to detect this condition, don't set state.Invalid()\n+        }\n+    }\n+\n+    // are the actual inputs available?\n+    if (!view.HaveInputs(tx))\n+        return state.Invalid(false, REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+\n+    // Bring the best block into scope\n+    view.GetBestBlock();\n+\n+    nValueIn = view.GetValueIn(tx);\n+\n+    return true;\n+}\n+\n+bool IsRateLimited (unsigned int nSize, CAmount nModifiedFees) {\n+    if (nModifiedFees >= ::minRelayTxFee.GetFee(nSize)) return false;\n+\n+    static CCriticalSection csFreeLimiter;\n+    static double dFreeCount;\n+    static int64_t nLastTime;\n+    int64_t nNow = GetTime();\n+\n+    LOCK(csFreeLimiter);\n+\n+    // Use an exponentially decaying ~10-minute window:\n+    dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n+    nLastTime = nNow;\n+\n+    // -limitfreerelay unit is thousand-bytes-per-minute\n+    // At default rate it would take over a month to fill 1GB\n+    if (dFreeCount + nSize >= GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) * 10 * 1000)\n+        return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n+\n+    LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n+    dFreeCount += nSize;\n+}\n+\n /** Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock */\n bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n {\n@@ -3545,7 +3572,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state))\n-            return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__, \n+            return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__,\n                          pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n@@ -3633,7 +3660,7 @@ bool LoadBlockIndex()\n     return true;\n }\n \n-bool InitBlockIndex(const CChainParams& chainparams) \n+bool InitBlockIndex(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n "
      }
    ]
  },
  {
    "sha": "e8dc63413927b5b0b3174ca1b31641245a5a84a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGRjNjM0MTM5MjdiNWIwYjMxNzRjYTFiMzE2NDEyNDVhNWE4NGEy",
    "commit": {
      "author": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2016-02-02T21:34:50Z"
      },
      "committer": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2016-02-02T21:55:35Z"
      },
      "message": "main: s/HasConflicts/HasReplaceableConflicts",
      "tree": {
        "sha": "b1df6281241d2f79122978a2b9ebcc7885602af4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1df6281241d2f79122978a2b9ebcc7885602af4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8dc63413927b5b0b3174ca1b31641245a5a84a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8dc63413927b5b0b3174ca1b31641245a5a84a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8dc63413927b5b0b3174ca1b31641245a5a84a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8dc63413927b5b0b3174ca1b31641245a5a84a2/comments",
    "author": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6967451eb51f1c393cbe854260fcc540735dd0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6967451eb51f1c393cbe854260fcc540735dd0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6967451eb51f1c393cbe854260fcc540735dd0a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9a85999fa625c52f13dd1b700a6672b4052564d4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8dc63413927b5b0b3174ca1b31641245a5a84a2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8dc63413927b5b0b3174ca1b31641245a5a84a2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e8dc63413927b5b0b3174ca1b31641245a5a84a2",
        "patch": "@@ -812,7 +812,7 @@ std::string FormatStateMessage(const CValidationState &state)\n         state.GetRejectCode());\n }\n \n-bool HasConflicts(CTxMemPool& pool, const CTransaction& tx, set<uint256>& setConflicts);\n+bool HasReplacableConflicts(CTxMemPool& pool, const CTransaction& tx, set<uint256>& setConflicts);\n bool IsNewTransaction(CTxMemPool& pool, CValidationState &state, const CTransaction& tx, CCoinsViewCache& view, CAmount& nValueIn, bool* pfMissingInputs, std::vector<uint256>& vHashTxnToUncache);\n bool IsRateLimited (unsigned int nSize, CAmount nModifiedFees);\n \n@@ -849,7 +849,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n \n     // Check for conflicts with in-memory transactions\n     set<uint256> setConflicts;\n-    if (HasConflicts(pool, tx, setConflicts))\n+    if (HasReplacableConflicts(pool, tx, setConflicts))\n         return state.Invalid(false, REJECT_CONFLICT, \"txn-mempool-conflict\");\n \n     {\n@@ -1155,7 +1155,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n }\n \n // TODO: move to policy/\n-bool HasConflicts(CTxMemPool& pool, const CTransaction& tx, set<uint256>& setConflicts) {\n+bool HasReplacableConflicts(CTxMemPool& pool, const CTransaction& tx, set<uint256>& setConflicts) {\n     LOCK(pool.cs); // protect pool.mapNextTx\n     BOOST_FOREACH(const CTxIn &txin, tx.vin)\n     {"
      }
    ]
  },
  {
    "sha": "726d1c2043cba1aa29b3dc948b3a6672b878161b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjZkMWMyMDQzY2JhMWFhMjliM2RjOTQ4YjNhNjY3MmI4NzgxNjFi",
    "commit": {
      "author": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2016-02-02T21:46:13Z"
      },
      "committer": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2016-02-02T21:55:35Z"
      },
      "message": "MOVE-ONLY: move HasReplaceableConflicts to CTxMempool::GetConflicts",
      "tree": {
        "sha": "3d66f2cdbcdc599d093f5cf6bebfc041ccb4c658",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d66f2cdbcdc599d093f5cf6bebfc041ccb4c658"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/726d1c2043cba1aa29b3dc948b3a6672b878161b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/726d1c2043cba1aa29b3dc948b3a6672b878161b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/726d1c2043cba1aa29b3dc948b3a6672b878161b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/726d1c2043cba1aa29b3dc948b3a6672b878161b/comments",
    "author": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8dc63413927b5b0b3174ca1b31641245a5a84a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8dc63413927b5b0b3174ca1b31641245a5a84a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8dc63413927b5b0b3174ca1b31641245a5a84a2"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 55,
      "deletions": 48
    },
    "files": [
      {
        "sha": "be90786eb47aa30eb76e9dc6dd2c209a2ac4a2db",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 45,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/726d1c2043cba1aa29b3dc948b3a6672b878161b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/726d1c2043cba1aa29b3dc948b3a6672b878161b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=726d1c2043cba1aa29b3dc948b3a6672b878161b",
        "patch": "@@ -812,7 +812,6 @@ std::string FormatStateMessage(const CValidationState &state)\n         state.GetRejectCode());\n }\n \n-bool HasReplacableConflicts(CTxMemPool& pool, const CTransaction& tx, set<uint256>& setConflicts);\n bool IsNewTransaction(CTxMemPool& pool, CValidationState &state, const CTransaction& tx, CCoinsViewCache& view, CAmount& nValueIn, bool* pfMissingInputs, std::vector<uint256>& vHashTxnToUncache);\n bool IsRateLimited (unsigned int nSize, CAmount nModifiedFees);\n \n@@ -849,7 +848,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n \n     // Check for conflicts with in-memory transactions\n     set<uint256> setConflicts;\n-    if (HasReplacableConflicts(pool, tx, setConflicts))\n+    if (pool.GetConflicts(tx, setConflicts))\n         return state.Invalid(false, REJECT_CONFLICT, \"txn-mempool-conflict\");\n \n     {\n@@ -1155,49 +1154,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n }\n \n // TODO: move to policy/\n-bool HasReplacableConflicts(CTxMemPool& pool, const CTransaction& tx, set<uint256>& setConflicts) {\n-    LOCK(pool.cs); // protect pool.mapNextTx\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin)\n-    {\n-        if (pool.mapNextTx.count(txin.prevout))\n-        {\n-            const CTransaction *ptxConflicting = pool.mapNextTx[txin.prevout].ptx;\n-            if (!setConflicts.count(ptxConflicting->GetHash()))\n-            {\n-                // Allow opt-out of transaction replacement by setting\n-                // nSequence >= maxint-1 on all inputs.\n-                //\n-                // maxint-1 is picked to still allow use of nLockTime by\n-                // non-replacable transactions. All inputs rather than just one\n-                // is for the sake of multi-party protocols, where we don't\n-                // want a single party to be able to disable replacement.\n-                //\n-                // The opt-out ignores descendants as anyone relying on\n-                // first-seen mempool behavior should be checking all\n-                // unconfirmed ancestors anyway; doing otherwise is hopelessly\n-                // insecure.\n-                bool fReplacementOptOut = true;\n-                if (fPermitReplacement)\n-                {\n-                    BOOST_FOREACH(const CTxIn &txin, ptxConflicting->vin)\n-                    {\n-                        if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1)\n-                        {\n-                            fReplacementOptOut = false;\n-                            break;\n-                        }\n-                    }\n-                }\n-                if (fReplacementOptOut)\n-                    return true;\n-\n-                setConflicts.insert(ptxConflicting->GetHash());\n-            }\n-        }\n-    }\n-\n-    return false;\n-}\n \n bool IsNewTransaction(CTxMemPool& pool, CValidationState &state, const CTransaction& tx, CCoinsViewCache& view, CAmount& nValueIn, bool* pfMissingInputs, std::vector<uint256>& vHashTxnToUncache) {\n     const uint256 hash = tx.GetHash();"
      },
      {
        "sha": "ecfc98bc5c77dc93c1e9a3b3ac8f75132ac3610a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 1,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/726d1c2043cba1aa29b3dc948b3a6672b878161b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/726d1c2043cba1aa29b3dc948b3a6672b878161b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=726d1c2043cba1aa29b3dc948b3a6672b878161b",
        "patch": "@@ -55,6 +55,51 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+bool GetConflicts(const CTransaction& tx, set<uint256>& setConflicts) {\n+    LOCK(cs);\n+\n+    BOOST_FOREACH(const CTxIn &txin, tx.vin)\n+    {\n+        if (this->mapNextTx.count(txin.prevout))\n+        {\n+            const CTransaction *ptxConflicting = this->mapNextTx[txin.prevout].ptx;\n+            if (!setConflicts.count(ptxConflicting->GetHash()))\n+            {\n+                // Allow opt-out of transaction replacement by setting\n+                // nSequence >= maxint-1 on all inputs.\n+                //\n+                // maxint-1 is picked to still allow use of nLockTime by\n+                // non-replacable transactions. All inputs rather than just one\n+                // is for the sake of multi-party protocols, where we don't\n+                // want a single party to be able to disable replacement.\n+                //\n+                // The opt-out ignores descendants as anyone relying on\n+                // first-seen mempool behavior should be checking all\n+                // unconfirmed ancestors anyway; doing otherwise is hopelessly\n+                // insecure.\n+                bool fReplacementOptOut = true;\n+                if (fPermitReplacement)\n+                {\n+                    BOOST_FOREACH(const CTxIn &txin, ptxConflicting->vin)\n+                    {\n+                        if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1)\n+                        {\n+                            fReplacementOptOut = false;\n+                            break;\n+                        }\n+                    }\n+                }\n+                if (fReplacementOptOut)\n+                    return true;\n+\n+                setConflicts.insert(ptxConflicting->GetHash());\n+            }\n+        }\n+    }\n+\n+    return false;\n+}\n+\n void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n {\n     nModFeesWithDescendants += newFeeDelta - feeDelta;\n@@ -274,7 +319,7 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove)\n         // should be a bit faster.\n         // However, if we happen to be in the middle of processing a reorg, then\n         // the mempool can be in an inconsistent state.  In this case, the set\n-        // of ancestors reachable via mapLinks will be the same as the set of \n+        // of ancestors reachable via mapLinks will be the same as the set of\n         // ancestors whose packages include this transaction, because when we\n         // add a new transaction to the mempool in addUnchecked(), we assume it\n         // has no children, and in the case of a reorg where that assumption is"
      },
      {
        "sha": "61ff39cce84ecf81c55c1a9aa2c583dac4fff061",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/726d1c2043cba1aa29b3dc948b3a6672b878161b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/726d1c2043cba1aa29b3dc948b3a6672b878161b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=726d1c2043cba1aa29b3dc948b3a6672b878161b",
        "patch": "@@ -102,6 +102,12 @@ class CTxMemPoolEntry\n     int64_t GetModifiedFee() const { return nFee + feeDelta; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n \n+    /*\n+     * Fills setConflicts with any conflicting non-final transactions for tx.\n+     * Returns false if any conflicts exist with final transactions.\n+     */\n+    bool GetConflicts (const CTransaction& tx, std::set<uint256>& setConflicts) const;\n+\n     // Adjusts the descendant state, if this entry is not dirty.\n     void UpdateState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n     // Updates the fee delta used for mining priority score, and the\n@@ -530,7 +536,7 @@ class CTxMemPool\n \n     /** Estimate priority needed to get into the next nBlocks */\n     double estimatePriority(int nBlocks) const;\n-    \n+\n     /** Write/Read estimates to disk */\n     bool WriteFeeEstimates(CAutoFile& fileout) const;\n     bool ReadFeeEstimates(CAutoFile& filein);\n@@ -576,7 +582,7 @@ class CTxMemPool\n     void removeUnchecked(txiter entry);\n };\n \n-/** \n+/**\n  * CCoinsView that brings transactions from a memorypool into view.\n  * It does not check for spendings by memory pool transactions.\n  */"
      }
    ]
  },
  {
    "sha": "1efdc4fbf0911e9e9a6a99690a215ffb5e3a772c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWZkYzRmYmYwOTExZTllOWE2YTk5NjkwYTIxNWZmYjVlM2E3NzJj",
    "commit": {
      "author": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2016-02-02T22:00:59Z"
      },
      "committer": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2016-02-02T22:00:59Z"
      },
      "message": "IsRateLimited fix,  return true not state.DoS",
      "tree": {
        "sha": "806cbc0fce5fa750c671d0e7da9394306daf56fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/806cbc0fce5fa750c671d0e7da9394306daf56fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1efdc4fbf0911e9e9a6a99690a215ffb5e3a772c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1efdc4fbf0911e9e9a6a99690a215ffb5e3a772c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1efdc4fbf0911e9e9a6a99690a215ffb5e3a772c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1efdc4fbf0911e9e9a6a99690a215ffb5e3a772c/comments",
    "author": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "726d1c2043cba1aa29b3dc948b3a6672b878161b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/726d1c2043cba1aa29b3dc948b3a6672b878161b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/726d1c2043cba1aa29b3dc948b3a6672b878161b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3dbb8e1924b3e3e9a20841a4f7495d46c5f847d9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1efdc4fbf0911e9e9a6a99690a215ffb5e3a772c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1efdc4fbf0911e9e9a6a99690a215ffb5e3a772c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1efdc4fbf0911e9e9a6a99690a215ffb5e3a772c",
        "patch": "@@ -1208,7 +1208,7 @@ bool IsRateLimited (unsigned int nSize, CAmount nModifiedFees) {\n     // -limitfreerelay unit is thousand-bytes-per-minute\n     // At default rate it would take over a month to fill 1GB\n     if (dFreeCount + nSize >= GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) * 10 * 1000)\n-        return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n+        return true;\n \n     LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n     dFreeCount += nSize;"
      }
    ]
  }
]