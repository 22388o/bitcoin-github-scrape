DrahtBot,2020-12-22 20:40:05,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21148 (Split orphan handling from net_processing into txorphanage by ajtowns)\n* #21146 (validation/coins: limit MemPoolA",https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-749765104,749765104,
DrahtBot,2021-01-13 11:46:12,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @sipa @fjahr have been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-759396488,759396488,
jnewbery,2021-02-01 12:17:08,https://github.com/bitcoin/bitcoin/pull/20749 is merged. Rebase please :slightly_smiling_face: ,https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-770814524,770814524,
dongcarl,2021-02-01 16:57:27,"Pushed 5803d30babf19a86828b1d967b0d38ee8c6551c4 -> 8d435f277f44dbd6807c809c34411b6f1f85b4bc\n- Rebased over master since ""#20749 | [Bundle 1/n] Prune g_chainman usage related to ::LookupBlockIndex"" is now merged!",https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-771002168,771002168,
dongcarl,2021-02-02 02:47:46,"Pushed 8d435f277f44dbd6807c809c34411b6f1f85b4bc -> 64db9d61f4c23acb8b68b1a778db02aed0f582f1\n- Rebased over master for #21051\n- Addressed https://github.com/bitcoin/bitcoin/pull/20750#discussion_r568151119",https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-771310683,771310683,
dongcarl,2021-02-02 20:13:41,"> Side-question, what's your heuristic to divide your bundles ?\n\nIt's mostly bundles of functions which call each other, not too scientific, but works!",https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-771947648,771947648,
glozow,2021-02-06 00:31:28,"I have a question - when is it necessary to pass the entire `CChainState`? For most of these functions, it makes perfect sense to me (and I think args should be removed when they can be retrieved from the chainstate), but in others, it seems like the function could just use a specific member of chainstate because their responsibility is narrower.\n\nFor example, in e83c8538ec022fa29bed2894471cde",https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-774359810,774359810,
ariard,2021-02-08 12:32:21,Code Review ACK 64db9d6,https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-775114721,775114721,
dongcarl,2021-02-08 20:04:38,"@glozow \n\n> I have a question - when is it necessary to pass the entire `CChainState`? For most of these functions, it makes perfect sense to me (and I think args should be removed when they can be retrieved from the chainstate), but in others, it seems like the function could just use a specific member of chainstate because their responsibility is narrower.\n\nYou're right! I think most of ",https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-775409393,775409393,
ariard,2021-02-12 13:56:08,"Code Review ACK 2eceb88, code changes are adding new asserts in few locations and dropping `CChainState` /`CCoinsViewCache` args when only one was useful. Also dropping passing `nMemPoolHeight` through `removeForReorg`.",https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-778209850,778209850,
dongcarl,2021-02-16 18:43:26,"Pushed 2eceb88e52e06e5d58c864b67ff65bc91749eeb1 -> 15f0042cb77c0dc4e4f137172d6e871dd2bc55a9\n- Addressed https://github.com/bitcoin/bitcoin/pull/20750#discussion_r572993634\n- Addressed https://github.com/bitcoin/bitcoin/pull/20750#discussion_r573004038\n- Rebased due to conflicts with #21062",https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-780041176,780041176,
glozow,2021-02-16 20:07:52,"reACK https://github.com/bitcoin/bitcoin/commit/15f0042cb77c0dc4e4f137172d6e871dd2bc55a9\n\nOnly changes are renaming to `active_chainstate` in `IsCurrentForFeeEstimation` and using `coins_cache` in `LimitMempoolSize`",https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-780087046,780087046,
MarcoFalke,2021-02-18 09:27:06,Needs rebase,https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-781208211,781208211,
laanwj,2021-02-18 11:58:27,">Needs rebase\n\nIt does, git manages to merge but currently the build fails with\n```\n/…/bitcoin/src/test/util/setup_common.cpp:305:44: error: no matching function for call to 'AcceptToMemoryPool'\n        const MempoolAcceptResult result = AcceptToMemoryPool(*m_node.mempool.get(), MakeTransactionRef(mempool_txn), /* bypass_limits */ false);\n                                           ^~~~",https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-781293235,781293235,
dongcarl,2021-02-18 19:57:01,"Pushed 15f0042cb77c0dc4e4f137172d6e871dd2bc55a9 -> e8ae1db864b09a47c736631e6cd3f5ec17929850\n- Rebased to fix silent conflict as mentioned in https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-781293235 ",https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-781598329,781598329,
glozow,2021-02-19 20:56:19,"reACK https://github.com/bitcoin/bitcoin/commit/e8ae1db864b09a47c736631e6cd3f5ec17929850 via `git range-diff 15f0042...e8ae1db`, only change is fixing ATMP call from conflict",https://github.com/bitcoin/bitcoin/pull/20750#issuecomment-782344415,782344415,
ariard,2021-02-01 21:27:53,I think you can make this a `const` ?,https://github.com/bitcoin/bitcoin/pull/20750#discussion_r568151119,568151119,src/validation.cpp
ariard,2021-02-01 22:06:14,whitespace?,https://github.com/bitcoin/bitcoin/pull/20750#discussion_r568172801,568172801,src/test/validation_block_tests.cpp
ariard,2021-02-01 22:08:09,"I think the scripted-diff is too much expansive here.\n\nEDIT: note for reviewers, fixed in next commit.",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r568173888,568173888,src/txmempool.cpp
dongcarl,2021-02-02 02:36:46,This is fixed in the subsequent commit!,https://github.com/bitcoin/bitcoin/pull/20750#discussion_r568281967,568281967,src/test/validation_block_tests.cpp
dongcarl,2021-02-02 02:37:25,"Yeah I should have used a clang-tidy script for this... Oh well, perhaps we can set that up in the future.",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r568282178,568282178,src/txmempool.cpp
dongcarl,2021-02-02 02:48:32,Done! See: e5198eff4b80d0d39d1cd9b3da317b25026c436d,https://github.com/bitcoin/bitcoin/pull/20750#discussion_r568285872,568285872,src/validation.cpp
ryanofsky,2021-02-02 20:50:40,"In commit ""validation: Add chainstate member to MemPoolAccept"" (dd7e989b0a4ad6949ccb70d13405f7af3f05b724)\n\nAssert might be more meaningful if it were added all the places the new m_active_chainstate member is used",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r568920966,568920966,src/validation.cpp
jnewbery,2021-02-04 13:42:43,"I find these 200+ character lines very difficult to parse. It'd be nice if PRs didn't make them even longer and more unreadable. Consider something like:\n\n```suggestion\nbool CheckSequenceLocks(CChainState& active_chainstate, const CTxMemPool& pool,\n                        const CTransaction& tx, int flags, LockPoints* lp = nullptr,\n                        bool useExistingLockPoints = fal",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r570231664,570231664,src/validation.h
jnewbery,2021-02-04 13:47:30,"Again, this change makes it harder to read this function declaration.",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r570234939,570234939,src/validation.h
jnewbery,2021-02-04 13:52:45,There's no need to pass in a `CCoinsViewCache *` or `nMemPoolHeight` here any more. You can just get them from the `CChainState&`.,https://github.com/bitcoin/bitcoin/pull/20750#discussion_r570238813,570238813,src/txmempool.cpp
dongcarl,2021-02-08 19:59:15,Agreed! Done in: 76a4aa60dbc8e142a72c84cf35ebc04c7654866f,https://github.com/bitcoin/bitcoin/pull/20750#discussion_r572331011,572331011,src/validation.cpp
dongcarl,2021-02-08 19:59:39,"Done in: bf2927643162c650f2a54dd33a83eccaa67ac50c, added a not to myself to review the future commits for this!",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r572331260,572331260,src/validation.h
dongcarl,2021-02-08 20:00:24,"Done in: 2eceb88e52e06e5d58c864b67ff65bc91749eeb1, added a not to myself to review the future commits for this!",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r572331746,572331746,src/validation.h
dongcarl,2021-02-08 20:00:59,"Done in: 6dd22bc4b052f42cb9d102e940a4196d62c975fb\nMuch cleaner!",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r572332120,572332120,src/txmempool.cpp
glozow,2021-02-09 15:39:28,I thiiiiink this only needs the `CCoinsViewCache` CoinsTip?,https://github.com/bitcoin/bitcoin/pull/20750#discussion_r572993634,572993634,src/validation.cpp
glozow,2021-02-09 15:40:27,`mempool` not needed if you can get it from `active_chainstate`,https://github.com/bitcoin/bitcoin/pull/20750#discussion_r572994493,572994493,src/validation.cpp
glozow,2021-02-09 15:41:05,"same, `pool` not needed if you can get it from `active_chainstate`",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r572995016,572995016,src/validation.cpp
glozow,2021-02-09 15:41:26,"same, `pool` not needed if you can get it from `active_chainstate`",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r572995319,572995319,src/validation.h
glozow,2021-02-09 15:41:44,"same, `pool` not needed if you can get it from `active_chainstate`",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r572995538,572995538,src/validation.h
glozow,2021-02-09 15:51:32,nit: not sure why this is `chainstate` and not `active_chainstate` like the others?,https://github.com/bitcoin/bitcoin/pull/20750#discussion_r573004038,573004038,src/validation.cpp
MarcoFalke,2021-02-19 18:46:06,"nit in d015eaa550027a387cd548cf0bcfa1a4c31a3374: For new code it would be good to use the new style (`&` is left-attaching). Also, what about passing a const reference instead of a pointer? I know this is only theoretical, but previously if the tip was nullptr, then `Height()` evaluated to `-1`, now it evaluates to UB. Also, in the comment in this function, you'll need to replace `::ChainActive().",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r579400663,579400663,src/validation.cpp
MarcoFalke,2021-02-19 18:58:38,"nit: maybe exclude this file from the scripted diff? Also nit: git comes with an exclude syntax for files, so you don't have to use `grep -v`",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r579408143,579408143,src/txmempool.cpp
dongcarl,2021-02-19 21:42:39,"Right, this makes sense. I'm going to put this nit off until the next bundle so that I don't invalidate ACKs if that's alright with you! I added it as a ""Note to self"" in the next bundle.",https://github.com/bitcoin/bitcoin/pull/20750#discussion_r579492355,579492355,src/validation.cpp
dongcarl,2021-02-19 21:43:32,Yeah the git syntax was confusing so I wanted to just use `grep` since it's more commonly used 😬. I will make this change if there are other substantial changes that requires a push!,https://github.com/bitcoin/bitcoin/pull/20750#discussion_r579492739,579492739,src/txmempool.cpp
