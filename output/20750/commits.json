[
  {
    "sha": "d1f932b0b0685690e5142272a2ed6a21237fbf05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWY5MzJiMGIwNjg1NjkwZTUxNDIyNzJhMmVkNmEyMTIzN2ZiZjA1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T20:35:38Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:43:28Z"
      },
      "message": "validation: Pass in coins cache to ::LimitMempoolSize",
      "tree": {
        "sha": "b85385d425338417a6b1da14205bc208a1cfd22d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b85385d425338417a6b1da14205bc208a1cfd22d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1f932b0b0685690e5142272a2ed6a21237fbf05",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1f932b0b0685690e5142272a2ed6a21237fbf05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1f932b0b0685690e5142272a2ed6a21237fbf05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1f932b0b0685690e5142272a2ed6a21237fbf05/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b805dbb0b9c90dadef0424e5b3bf86ac308e103e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b805dbb0b9c90dadef0424e5b3bf86ac308e103e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b805dbb0b9c90dadef0424e5b3bf86ac308e103e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0225786183f8492d55fd6ed6071f4a7ca2643b05",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1f932b0b0685690e5142272a2ed6a21237fbf05/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1f932b0b0685690e5142272a2ed6a21237fbf05/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d1f932b0b0685690e5142272a2ed6a21237fbf05",
        "patch": "@@ -329,7 +329,7 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n // Returns the script flags which should be checked for a given block\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);\n \n-static void LimitMempoolSize(CTxMemPool& pool, size_t limit, std::chrono::seconds age)\n+static void LimitMempoolSize(CTxMemPool& pool, CCoinsViewCache& coins_cache, size_t limit, std::chrono::seconds age)\n     EXCLUSIVE_LOCKS_REQUIRED(pool.cs, ::cs_main)\n {\n     int expired = pool.Expire(GetTime<std::chrono::seconds>() - age);\n@@ -339,8 +339,9 @@ static void LimitMempoolSize(CTxMemPool& pool, size_t limit, std::chrono::second\n \n     std::vector<COutPoint> vNoSpendsRemaining;\n     pool.TrimToSize(limit, &vNoSpendsRemaining);\n+    assert(std::addressof(::ChainstateActive().CoinsTip()) == std::addressof(coins_cache));\n     for (const COutPoint& removed : vNoSpendsRemaining)\n-        ::ChainstateActive().CoinsTip().Uncache(removed);\n+        coins_cache.Uncache(removed);\n }\n \n static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n@@ -403,7 +404,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     // We also need to remove any now-immature transactions\n     mempool.removeForReorg(&::ChainstateActive().CoinsTip(), ::ChainActive().Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n-    LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    LimitMempoolSize(mempool, ::ChainstateActive().CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n /**\n@@ -1015,7 +1016,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n-        LimitMempoolSize(m_pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        LimitMempoolSize(m_pool, ::ChainstateActive().CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }"
      }
    ]
  },
  {
    "sha": "73a6d2b7bea832fe24870dd7593c8fc1028e8d57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2E2ZDJiN2JlYTgzMmZlMjQ4NzBkZDc1OTNjOGZjMTAyOGU4ZDU3",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T20:36:06Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:43:28Z"
      },
      "message": "validation: Pass in chainstate to IsCurrentForFeeEstimation",
      "tree": {
        "sha": "337a6c8e7ff53110b9a3a7d8251b2cbb34b811dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/337a6c8e7ff53110b9a3a7d8251b2cbb34b811dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73a6d2b7bea832fe24870dd7593c8fc1028e8d57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73a6d2b7bea832fe24870dd7593c8fc1028e8d57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73a6d2b7bea832fe24870dd7593c8fc1028e8d57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73a6d2b7bea832fe24870dd7593c8fc1028e8d57/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1f932b0b0685690e5142272a2ed6a21237fbf05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1f932b0b0685690e5142272a2ed6a21237fbf05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1f932b0b0685690e5142272a2ed6a21237fbf05"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d63a9e9a40844b368b9297db7964870afc46dda1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73a6d2b7bea832fe24870dd7593c8fc1028e8d57/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73a6d2b7bea832fe24870dd7593c8fc1028e8d57/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=73a6d2b7bea832fe24870dd7593c8fc1028e8d57",
        "patch": "@@ -344,14 +344,15 @@ static void LimitMempoolSize(CTxMemPool& pool, CCoinsViewCache& coins_cache, siz\n         coins_cache.Uncache(removed);\n }\n \n-static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static bool IsCurrentForFeeEstimation(CChainState& active_chainstate) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n-    if (::ChainstateActive().IsInitialBlockDownload())\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    if (active_chainstate.IsInitialBlockDownload())\n         return false;\n-    if (::ChainActive().Tip()->GetBlockTime() < count_seconds(GetTime<std::chrono::seconds>() - MAX_FEE_ESTIMATION_TIP_AGE))\n+    if (active_chainstate.m_chain.Tip()->GetBlockTime() < count_seconds(GetTime<std::chrono::seconds>() - MAX_FEE_ESTIMATION_TIP_AGE))\n         return false;\n-    if (::ChainActive().Height() < pindexBestHeader->nHeight - 1)\n+    if (active_chainstate.m_chain.Height() < pindexBestHeader->nHeight - 1)\n         return false;\n     return true;\n }\n@@ -1009,7 +1010,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation() && m_pool.HasNoInputsOf(tx);\n+    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation(::ChainstateActive()) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, setAncestors, validForFeeEstimation);"
      }
    ]
  },
  {
    "sha": "252b489c9f9c9e7dceb919e9cbd208ea72d75e68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTJiNDg5YzlmOWM5ZTdkY2ViOTE5ZTljYmQyMDhlYTcyZDc1ZTY4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T20:42:01Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:43:28Z"
      },
      "message": "validation: Pass in coins tip to CheckInputsFromMempoolAndCache",
      "tree": {
        "sha": "e448eb3c557d315f5a1123bf20300388a650f088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e448eb3c557d315f5a1123bf20300388a650f088"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/252b489c9f9c9e7dceb919e9cbd208ea72d75e68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252b489c9f9c9e7dceb919e9cbd208ea72d75e68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/252b489c9f9c9e7dceb919e9cbd208ea72d75e68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252b489c9f9c9e7dceb919e9cbd208ea72d75e68/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73a6d2b7bea832fe24870dd7593c8fc1028e8d57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73a6d2b7bea832fe24870dd7593c8fc1028e8d57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73a6d2b7bea832fe24870dd7593c8fc1028e8d57"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b049acb8855a4fbb216d100ee7c3ccf3007afe6c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/252b489c9f9c9e7dceb919e9cbd208ea72d75e68/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/252b489c9f9c9e7dceb919e9cbd208ea72d75e68/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=252b489c9f9c9e7dceb919e9cbd208ea72d75e68",
        "patch": "@@ -415,7 +415,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n * */\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state,\n                 const CCoinsViewCache& view, const CTxMemPool& pool,\n-                unsigned int flags, PrecomputedTransactionData& txdata)\n+                unsigned int flags, PrecomputedTransactionData& txdata, CCoinsViewCache& coins_tip)\n                 EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\n {\n     AssertLockHeld(cs_main);\n@@ -440,7 +440,8 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n             assert(txFrom->vout.size() > txin.prevout.n);\n             assert(txFrom->vout[txin.prevout.n] == coin.out);\n         } else {\n-            const Coin& coinFromUTXOSet = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\n+            assert(std::addressof(::ChainstateActive().CoinsTip()) == std::addressof(coins_tip));\n+            const Coin& coinFromUTXOSet = coins_tip.AccessCoin(txin.prevout);\n             assert(!coinFromUTXOSet.IsSpent());\n             assert(coinFromUTXOSet.out == coin.out);\n         }\n@@ -970,7 +971,7 @@ bool MemPoolAccept::ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, P\n     // invalid blocks (using TestBlockValidity), however allowing such\n     // transactions into the mempool can be exploited as a DoS attack.\n     unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(::ChainActive().Tip(), chainparams.GetConsensus());\n-    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata)) {\n+    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata, ::ChainstateActive().CoinsTip())) {\n         return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputScripts failed against latest-block but not STANDARD flags %s, %s\",\n                 __func__, hash.ToString(), state.ToString());\n     }"
      }
    ]
  },
  {
    "sha": "d015eaa550027a387cd548cf0bcfa1a4c31a3374",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDE1ZWFhNTUwMDI3YTM4N2NkNTQ4Y2YwYmNmYTFhNGMzMWEzMzc0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:17:45Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:43:28Z"
      },
      "message": "validation: Pass in chain tip to ::CheckFinalTx",
      "tree": {
        "sha": "f4eb6c6dde406c7ffcd2d37e9cf694a9fbdee22a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4eb6c6dde406c7ffcd2d37e9cf694a9fbdee22a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d015eaa550027a387cd548cf0bcfa1a4c31a3374",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d015eaa550027a387cd548cf0bcfa1a4c31a3374",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d015eaa550027a387cd548cf0bcfa1a4c31a3374",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d015eaa550027a387cd548cf0bcfa1a4c31a3374/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "252b489c9f9c9e7dceb919e9cbd208ea72d75e68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252b489c9f9c9e7dceb919e9cbd208ea72d75e68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/252b489c9f9c9e7dceb919e9cbd208ea72d75e68"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8f076ce7890057acb952f23404e54bf5c5c2ae29",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d015eaa550027a387cd548cf0bcfa1a4c31a3374/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d015eaa550027a387cd548cf0bcfa1a4c31a3374/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d015eaa550027a387cd548cf0bcfa1a4c31a3374",
        "patch": "@@ -205,8 +205,14 @@ static FlatFileSeq BlockFileSeq();\n static FlatFileSeq UndoFileSeq();\n \n bool CheckFinalTx(const CTransaction &tx, int flags)\n+{\n+    return CheckFinalTx(::ChainActive().Tip(), tx, flags);\n+}\n+\n+bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n+    assert(std::addressof(*::ChainActive().Tip()) == std::addressof(*active_chain_tip));\n \n     // By convention a negative value for flags indicates that the\n     // current network-enforced consensus rules should be used. In\n@@ -222,15 +228,15 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     // evaluated is what is used. Thus if we want to know if a\n     // transaction can be part of the *next* block, we need to call\n     // IsFinalTx() with one more than ::ChainActive().Height().\n-    const int nBlockHeight = ::ChainActive().Height() + 1;\n+    const int nBlockHeight = active_chain_tip->nHeight + 1;\n \n     // BIP113 requires that time-locked transactions have nLockTime set to\n     // less than the median time of the previous block they're contained in.\n     // When the next block is created its previous block will be the current\n     // chain tip, so we use that to calculate the median time passed to\n     // IsFinalTx() if LOCKTIME_MEDIAN_TIME_PAST is set.\n     const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n-                             ? ::ChainActive().Tip()->GetMedianTimePast()\n+                             ? active_chain_tip->GetMedianTimePast()\n                              : GetAdjustedTime();\n \n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n@@ -599,7 +605,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+    if (!CheckFinalTx(::ChainActive().Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-final\");\n \n     // is it already in the memory pool?"
      },
      {
        "sha": "16bf14875bc98e314ca934b0f46c252010f31a70",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d015eaa550027a387cd548cf0bcfa1a4c31a3374/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d015eaa550027a387cd548cf0bcfa1a4c31a3374/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d015eaa550027a387cd548cf0bcfa1a4c31a3374",
        "patch": "@@ -249,6 +249,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n  * See consensus/consensus.h for flag definitions.\n  */\n bool CheckFinalTx(const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Test whether the LockPoints height and time are still valid on the current chain"
      }
    ]
  },
  {
    "sha": "7031cf89db943d3e73597d2f9fa4a41908558e6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDMxY2Y4OWRiOTQzZDNlNzM1OTdkMmY5ZmE0YTQxOTA4NTU4ZTZj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:25:06Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:43:28Z"
      },
      "message": "scripted-diff: Invoke ::CheckFinalTx with chain tip\n\n-BEGIN VERIFY SCRIPT-\nfind_regex='\\bCheckFinalTx\\(' \\\n    && git grep -l -E \"$find_regex\" -- src \\\n        | grep -v '^src/validation\\.\\(cpp\\|h\\)$' \\\n        | xargs sed -i -E 's@'\"$find_regex\"'@\\0::ChainActive().Tip(), @g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "d1fefb27e8b60f38196c294e0ce9074d844a00af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1fefb27e8b60f38196c294e0ce9074d844a00af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7031cf89db943d3e73597d2f9fa4a41908558e6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7031cf89db943d3e73597d2f9fa4a41908558e6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7031cf89db943d3e73597d2f9fa4a41908558e6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7031cf89db943d3e73597d2f9fa4a41908558e6c/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d015eaa550027a387cd548cf0bcfa1a4c31a3374",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d015eaa550027a387cd548cf0bcfa1a4c31a3374",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d015eaa550027a387cd548cf0bcfa1a4c31a3374"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ec976fe9bfa9e048897b04d2eee364c23e808e02",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7031cf89db943d3e73597d2f9fa4a41908558e6c/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7031cf89db943d3e73597d2f9fa4a41908558e6c/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=7031cf89db943d3e73597d2f9fa4a41908558e6c",
        "patch": "@@ -441,7 +441,7 @@ class ChainImpl : public Chain\n     bool checkFinalTx(const CTransaction& tx) override\n     {\n         LOCK(cs_main);\n-        return CheckFinalTx(tx);\n+        return CheckFinalTx(::ChainActive().Tip(), tx);\n     }\n     Optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {"
      },
      {
        "sha": "7d2f545afe9dd4859335b8953128fba3f8a964af",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7031cf89db943d3e73597d2f9fa4a41908558e6c/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7031cf89db943d3e73597d2f9fa4a41908558e6c/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=7031cf89db943d3e73597d2f9fa4a41908558e6c",
        "patch": "@@ -437,7 +437,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = 0;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(CheckFinalTx(CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n     BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(::ChainActive().Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n \n@@ -447,7 +447,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(CheckFinalTx(CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n@@ -463,7 +463,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = ::ChainActive().Tip()->nHeight + 1;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(CTransaction(tx), flags)); // Locktime fails\n+    BOOST_CHECK(!CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     BOOST_CHECK(IsFinalTx(CTransaction(tx), ::ChainActive().Tip()->nHeight + 2, ::ChainActive().Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n \n@@ -474,7 +474,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = baseheight + 4;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(CTransaction(tx), flags)); // Locktime fails\n+    BOOST_CHECK(!CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     BOOST_CHECK(IsFinalTx(CTransaction(tx), ::ChainActive().Tip()->nHeight + 2, ::ChainActive().Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n \n@@ -483,7 +483,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = ::ChainActive().Tip()->nHeight + 1;\n     tx.nLockTime = 0;\n     tx.vin[0].nSequence = 0;\n-    BOOST_CHECK(CheckFinalTx(CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     tx.vin[0].nSequence = 1;\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail"
      },
      {
        "sha": "0a5a295bb76f76157027ba192bb6c2c47da70356",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7031cf89db943d3e73597d2f9fa4a41908558e6c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7031cf89db943d3e73597d2f9fa4a41908558e6c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7031cf89db943d3e73597d2f9fa4a41908558e6c",
        "patch": "@@ -512,7 +512,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n         bool validLP =  TestLockPointValidity(&lp);\n-        if (!CheckFinalTx(tx, flags) || !CheckSequenceLocks(*this, tx, flags, &lp, validLP)) {\n+        if (!CheckFinalTx(::ChainActive().Tip(), tx, flags) || !CheckSequenceLocks(*this, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n             txToRemove.insert(it);"
      }
    ]
  },
  {
    "sha": "577b774d0c664b891bc9e1550ef179a655a466ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzdiNzc0ZDBjNjY0Yjg5MWJjOWUxNTUwZWYxNzlhNjU1YTQ2NmFk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-18T20:27:35Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:43:28Z"
      },
      "message": "validation: Remove old CheckFinalTx w/o chain tip param",
      "tree": {
        "sha": "2233cf5de8f50e0fdc34af796acee7f1ff0d13b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2233cf5de8f50e0fdc34af796acee7f1ff0d13b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/577b774d0c664b891bc9e1550ef179a655a466ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/577b774d0c664b891bc9e1550ef179a655a466ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/577b774d0c664b891bc9e1550ef179a655a466ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/577b774d0c664b891bc9e1550ef179a655a466ad/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7031cf89db943d3e73597d2f9fa4a41908558e6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7031cf89db943d3e73597d2f9fa4a41908558e6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7031cf89db943d3e73597d2f9fa4a41908558e6c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 0,
      "deletions": 6
    },
    "files": [
      {
        "sha": "9cf147d9c8b3c230e510701d786357abe4adb62b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/577b774d0c664b891bc9e1550ef179a655a466ad/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/577b774d0c664b891bc9e1550ef179a655a466ad/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=577b774d0c664b891bc9e1550ef179a655a466ad",
        "patch": "@@ -204,11 +204,6 @@ static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly = false);\n static FlatFileSeq BlockFileSeq();\n static FlatFileSeq UndoFileSeq();\n \n-bool CheckFinalTx(const CTransaction &tx, int flags)\n-{\n-    return CheckFinalTx(::ChainActive().Tip(), tx, flags);\n-}\n-\n bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);"
      },
      {
        "sha": "704167fee0a5db5e0df1b08d5556c1083f7c802e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/577b774d0c664b891bc9e1550ef179a655a466ad/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/577b774d0c664b891bc9e1550ef179a655a466ad/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=577b774d0c664b891bc9e1550ef179a655a466ad",
        "patch": "@@ -248,7 +248,6 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**"
      }
    ]
  },
  {
    "sha": "4c15942b79c46256950df17c348302679e668ebc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzE1OTQyYjc5YzQ2MjU2OTUwZGYxN2MzNDgzMDI2NzllNjY4ZWJj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:29:10Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:43:28Z"
      },
      "message": "validation: Pass in chainstate to ::CheckSequenceLocks",
      "tree": {
        "sha": "3d0bdb6012fb8b5a25a4df0b5735d612959dc175",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d0bdb6012fb8b5a25a4df0b5735d612959dc175"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c15942b79c46256950df17c348302679e668ebc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c15942b79c46256950df17c348302679e668ebc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c15942b79c46256950df17c348302679e668ebc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c15942b79c46256950df17c348302679e668ebc/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "577b774d0c664b891bc9e1550ef179a655a466ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/577b774d0c664b891bc9e1550ef179a655a466ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/577b774d0c664b891bc9e1550ef179a655a466ad"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8275abac86068411104beccf598839d4f125b022",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c15942b79c46256950df17c348302679e668ebc/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c15942b79c46256950df17c348302679e668ebc/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=4c15942b79c46256950df17c348302679e668ebc",
        "patch": "@@ -28,7 +28,7 @@ struct MinerTestingSetup : public TestingSetup {\n     void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs);\n     bool TestSequenceLocks(const CTransaction& tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs)\n     {\n-        return CheckSequenceLocks(*m_node.mempool, tx, flags);\n+        return CheckSequenceLocks(::ChainstateActive(), *m_node.mempool, tx, flags);\n     }\n     BlockAssembler AssemblerForTest(const CChainParams& params);\n };"
      },
      {
        "sha": "197cd6cd4bd8235b33675a2fb84ab0b1b48d8333",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c15942b79c46256950df17c348302679e668ebc/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c15942b79c46256950df17c348302679e668ebc/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4c15942b79c46256950df17c348302679e668ebc",
        "patch": "@@ -512,7 +512,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n         bool validLP =  TestLockPointValidity(&lp);\n-        if (!CheckFinalTx(::ChainActive().Tip(), tx, flags) || !CheckSequenceLocks(*this, tx, flags, &lp, validLP)) {\n+        if (!CheckFinalTx(::ChainActive().Tip(), tx, flags) || !CheckSequenceLocks(::ChainstateActive(), *this, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n             txToRemove.insert(it);"
      },
      {
        "sha": "4552729591e5877f95fc09f142195efe1795c4a6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c15942b79c46256950df17c348302679e668ebc/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c15942b79c46256950df17c348302679e668ebc/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4c15942b79c46256950df17c348302679e668ebc",
        "patch": "@@ -255,22 +255,23 @@ bool TestLockPointValidity(const LockPoints* lp)\n     return true;\n }\n \n-bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp, bool useExistingLockPoints)\n+bool CheckSequenceLocks(CChainState& active_chainstate, const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp, bool useExistingLockPoints)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(pool.cs);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n \n-    CBlockIndex* tip = ::ChainActive().Tip();\n+    CBlockIndex* tip = active_chainstate.m_chain.Tip();\n     assert(tip != nullptr);\n \n     CBlockIndex index;\n     index.pprev = tip;\n-    // CheckSequenceLocks() uses ::ChainActive().Height()+1 to evaluate\n+    // CheckSequenceLocks() uses active_chainstate.m_chain.Height()+1 to evaluate\n     // height based locks because when SequenceLocks() is called within\n     // ConnectBlock(), the height of the block *being*\n     // evaluated is what is used.\n     // Thus if we want to know if a transaction can be part of the\n-    // *next* block, we need to use one more than ::ChainActive().Height()\n+    // *next* block, we need to use one more than active_chainstate.m_chain.Height()\n     index.nHeight = tip->nHeight + 1;\n \n     std::pair<int, int64_t> lockPair;\n@@ -280,8 +281,8 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n         lockPair.second = lp->time;\n     }\n     else {\n-        // CoinsTip() contains the UTXO set for ::ChainActive().Tip()\n-        CCoinsViewMemPool viewMemPool(&::ChainstateActive().CoinsTip(), pool);\n+        // CoinsTip() contains the UTXO set for active_chainstate.m_chain.Tip()\n+        CCoinsViewMemPool viewMemPool(&active_chainstate.CoinsTip(), pool);\n         std::vector<int> prevheights;\n         prevheights.resize(tx.vin.size());\n         for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n@@ -684,7 +685,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // be mined yet.\n     // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n     // CoinsViewCache instead of create its own\n-    if (!CheckSequenceLocks(m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n+    if (!CheckSequenceLocks(::ChainstateActive(), m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-BIP68-final\");\n \n     if (!Consensus::CheckTxInputs(tx, state, m_view, g_chainman.m_blockman.GetSpendHeight(m_view), ws.m_base_fees)) {"
      },
      {
        "sha": "d03c8801b6d9c38b2651f6f15346b92fdecba741",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c15942b79c46256950df17c348302679e668ebc/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c15942b79c46256950df17c348302679e668ebc/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=4c15942b79c46256950df17c348302679e668ebc",
        "patch": "@@ -266,7 +266,7 @@ bool TestLockPointValidity(const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_mai\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, pool.cs);\n+bool CheckSequenceLocks(CChainState& active_chainstate, const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, pool.cs);\n \n /**\n  * Closure representing one script verification"
      }
    ]
  },
  {
    "sha": "d8a816329c878b5973d28d370c0f64ebbdde716b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGE4MTYzMjljODc4YjU5NzNkMjhkMzcwYzBmNjRlYmJkZGU3MTZi",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T20:53:57Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:43:28Z"
      },
      "message": "validation: Add chainstate member to MemPoolAccept",
      "tree": {
        "sha": "8b7034cda31781d6e1fcc5b345d12a6bdc8977db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b7034cda31781d6e1fcc5b345d12a6bdc8977db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8a816329c878b5973d28d370c0f64ebbdde716b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a816329c878b5973d28d370c0f64ebbdde716b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a816329c878b5973d28d370c0f64ebbdde716b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a816329c878b5973d28d370c0f64ebbdde716b/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c15942b79c46256950df17c348302679e668ebc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c15942b79c46256950df17c348302679e668ebc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c15942b79c46256950df17c348302679e668ebc"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 27,
      "deletions": 13
    },
    "files": [
      {
        "sha": "e658476c7f874f8ec60385922277a2921ba040ee",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 13,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a816329c878b5973d28d370c0f64ebbdde716b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a816329c878b5973d28d370c0f64ebbdde716b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d8a816329c878b5973d28d370c0f64ebbdde716b",
        "patch": "@@ -458,11 +458,13 @@ namespace {\n class MemPoolAccept\n {\n public:\n-    explicit MemPoolAccept(CTxMemPool& mempool) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&::ChainstateActive().CoinsTip(), m_pool),\n+    explicit MemPoolAccept(CTxMemPool& mempool, CChainState& active_chainstate) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&active_chainstate.CoinsTip(), m_pool), m_active_chainstate(active_chainstate),\n         m_limit_ancestors(gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n         m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n         m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n-        m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {}\n+        m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n+        assert(std::addressof(::ChainstateActive()) == std::addressof(m_active_chainstate));\n+    }\n \n     // We put the arguments we're handed into a struct, so we can pass them\n     // around easier.\n@@ -547,6 +549,8 @@ class MemPoolAccept\n     CCoinsViewMemPool m_viewmempool;\n     CCoinsView m_dummy;\n \n+    CChainState& m_active_chainstate;\n+\n     // The package limits in effect at the time of invocation.\n     const size_t m_limit_ancestors;\n     const size_t m_limit_ancestor_size;\n@@ -601,7 +605,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(::ChainActive().Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+    assert(std::addressof(::ChainActive()) == std::addressof(m_active_chainstate.m_chain));\n+    if (!CheckFinalTx(m_active_chainstate.m_chain.Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -649,7 +654,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     LockPoints lp;\n     m_view.SetBackend(m_viewmempool);\n \n-    const CCoinsViewCache& coins_cache = ::ChainstateActive().CoinsTip();\n+    assert(std::addressof(::ChainstateActive().CoinsTip()) == std::addressof(m_active_chainstate.CoinsTip()));\n+    const CCoinsViewCache& coins_cache = m_active_chainstate.CoinsTip();\n     // do all inputs exist?\n     for (const CTxIn& txin : tx.vin) {\n         if (!coins_cache.HaveCoinInCache(txin.prevout)) {\n@@ -685,16 +691,19 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // be mined yet.\n     // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n     // CoinsViewCache instead of create its own\n-    if (!CheckSequenceLocks(::ChainstateActive(), m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(m_active_chainstate));\n+    if (!CheckSequenceLocks(m_active_chainstate, m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-BIP68-final\");\n \n-    if (!Consensus::CheckTxInputs(tx, state, m_view, g_chainman.m_blockman.GetSpendHeight(m_view), ws.m_base_fees)) {\n+    assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_active_chainstate.m_blockman));\n+    if (!Consensus::CheckTxInputs(tx, state, m_view, m_active_chainstate.m_blockman.GetSpendHeight(m_view), ws.m_base_fees)) {\n         return false; // state filled in by CheckTxInputs\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n     const auto& params = args.m_chainparams.GetConsensus();\n-    auto taproot_state = VersionBitsState(::ChainActive().Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n+    assert(std::addressof(::ChainActive()) == std::addressof(m_active_chainstate.m_chain));\n+    auto taproot_state = VersionBitsState(m_active_chainstate.m_chain.Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n     if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_state == ThresholdState::ACTIVE)) {\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n     }\n@@ -720,7 +729,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         }\n     }\n \n-    entry.reset(new CTxMemPoolEntry(ptx, ws.m_base_fees, nAcceptTime, ::ChainActive().Height(),\n+    assert(std::addressof(::ChainActive()) == std::addressof(m_active_chainstate.m_chain));\n+    entry.reset(new CTxMemPoolEntry(ptx, ws.m_base_fees, nAcceptTime, m_active_chainstate.m_chain.Height(),\n             fSpendsCoinbase, nSigOpsCost, lp));\n     unsigned int nSize = entry->GetTxSize();\n \n@@ -972,8 +982,10 @@ bool MemPoolAccept::ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, P\n     // There is a similar check in CreateNewBlock() to prevent creating\n     // invalid blocks (using TestBlockValidity), however allowing such\n     // transactions into the mempool can be exploited as a DoS attack.\n-    unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(::ChainActive().Tip(), chainparams.GetConsensus());\n-    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata, ::ChainstateActive().CoinsTip())) {\n+    assert(std::addressof(::ChainActive()) == std::addressof(m_active_chainstate.m_chain));\n+    unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(m_active_chainstate.m_chain.Tip(), chainparams.GetConsensus());\n+    assert(std::addressof(::ChainstateActive().CoinsTip()) == std::addressof(m_active_chainstate.CoinsTip()));\n+    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata, m_active_chainstate.CoinsTip())) {\n         return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputScripts failed against latest-block but not STANDARD flags %s, %s\",\n                 __func__, hash.ToString(), state.ToString());\n     }\n@@ -1013,14 +1025,16 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation(::ChainstateActive()) && m_pool.HasNoInputsOf(tx);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(m_active_chainstate));\n+    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, setAncestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n-        LimitMempoolSize(m_pool, ::ChainstateActive().CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        assert(std::addressof(::ChainstateActive().CoinsTip()) == std::addressof(m_active_chainstate.CoinsTip()));\n+        LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n@@ -1069,7 +1083,7 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n     std::vector<COutPoint> coins_to_uncache;\n     MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache, test_accept };\n \n-    const MempoolAcceptResult result = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n+    const MempoolAcceptResult result = MemPoolAccept(pool, ::ChainstateActive()).AcceptSingleTransaction(tx, args);\n     if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n         // this is to prevent memory DoS in case we receive a large number of"
      }
    ]
  },
  {
    "sha": "3a205c43dc03cc833daba93087279402f640965b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTIwNWM0M2RjMDNjYzgzM2RhYmE5MzA4NzI3OTQwMmY2NDA5NjVi",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T20:08:41Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:43:28Z"
      },
      "message": "validation: Pass in chainstate to AcceptToMemoryPoolWithTime",
      "tree": {
        "sha": "6913f97b6ae61daf54df2085b9f1cbc5fbbcde8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6913f97b6ae61daf54df2085b9f1cbc5fbbcde8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a205c43dc03cc833daba93087279402f640965b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a205c43dc03cc833daba93087279402f640965b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a205c43dc03cc833daba93087279402f640965b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a205c43dc03cc833daba93087279402f640965b/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8a816329c878b5973d28d370c0f64ebbdde716b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a816329c878b5973d28d370c0f64ebbdde716b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a816329c878b5973d28d370c0f64ebbdde716b"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "eb0e66ee303dd6cce5d0756294a2b45514a2ff33",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a205c43dc03cc833daba93087279402f640965b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a205c43dc03cc833daba93087279402f640965b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3a205c43dc03cc833daba93087279402f640965b",
        "patch": "@@ -1076,32 +1076,34 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool,\n+                                                      CChainState& active_chainstate,\n                                                       const CTransactionRef &tx, int64_t nAcceptTime,\n                                                       bool bypass_limits, bool test_accept)\n                                                       EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n     MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache, test_accept };\n \n-    const MempoolAcceptResult result = MemPoolAccept(pool, ::ChainstateActive()).AcceptSingleTransaction(tx, args);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    const MempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);\n     if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n         // this is to prevent memory DoS in case we receive a large number of\n         // invalid transactions that attempt to overrun the in-memory coins cache\n         // (`CCoinsViewCache::cacheCoins`).\n \n         for (const COutPoint& hashTx : coins_to_uncache)\n-            ::ChainstateActive().CoinsTip().Uncache(hashTx);\n+            active_chainstate.CoinsTip().Uncache(hashTx);\n     }\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n     BlockValidationState state_dummy;\n-    ::ChainstateActive().FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\n+    active_chainstate.FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\n     return result;\n }\n \n MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef &tx, bool bypass_limits, bool test_accept)\n {\n-    return AcceptToMemoryPoolWithTime(Params(), pool, tx, GetTime(), bypass_limits, test_accept);\n+    return AcceptToMemoryPoolWithTime(Params(), pool, ::ChainstateActive(), tx, GetTime(), bypass_limits, test_accept);\n }\n \n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)\n@@ -5050,7 +5052,7 @@ bool LoadMempool(CTxMemPool& pool)\n             }\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                if (AcceptToMemoryPoolWithTime(chainparams, pool, tx, nTime, false /* bypass_limits */,\n+                if (AcceptToMemoryPoolWithTime(chainparams, pool, ::ChainstateActive(), tx, nTime, false /* bypass_limits */,\n                                                false /* test_accept */).m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                     ++count;\n                 } else {"
      }
    ]
  },
  {
    "sha": "d0da7ea57ab932eca956458fb3633585ff3c0003",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGRhN2VhNTdhYjkzMmVjYTk1NjQ1OGZiMzYzMzU4NWZmM2MwMDAz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T20:18:51Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:43:28Z"
      },
      "message": "validation: Pass in chainstate to ::LoadMempool",
      "tree": {
        "sha": "ac597a9612534151d791149a981e1cb1f2066d93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac597a9612534151d791149a981e1cb1f2066d93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0da7ea57ab932eca956458fb3633585ff3c0003",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0da7ea57ab932eca956458fb3633585ff3c0003",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0da7ea57ab932eca956458fb3633585ff3c0003",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0da7ea57ab932eca956458fb3633585ff3c0003/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a205c43dc03cc833daba93087279402f640965b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a205c43dc03cc833daba93087279402f640965b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a205c43dc03cc833daba93087279402f640965b"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8a0820515f3f77391c6357285980c95fe75cda68",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0da7ea57ab932eca956458fb3633585ff3c0003/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0da7ea57ab932eca956458fb3633585ff3c0003/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d0da7ea57ab932eca956458fb3633585ff3c0003",
        "patch": "@@ -4182,7 +4182,7 @@ bool static LoadBlockIndexDB(ChainstateManager& chainman, const CChainParams& ch\n void CChainState::LoadMempool(const ArgsManager& args)\n {\n     if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        ::LoadMempool(m_mempool);\n+        ::LoadMempool(m_mempool, ::ChainstateActive());\n     }\n     m_mempool.SetIsLoaded(!ShutdownRequested());\n }\n@@ -5012,7 +5012,7 @@ int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::D\n \n static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n-bool LoadMempool(CTxMemPool& pool)\n+bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate)\n {\n     const CChainParams& chainparams = Params();\n     int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n@@ -5052,7 +5052,8 @@ bool LoadMempool(CTxMemPool& pool)\n             }\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                if (AcceptToMemoryPoolWithTime(chainparams, pool, ::ChainstateActive(), tx, nTime, false /* bypass_limits */,\n+                assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+                if (AcceptToMemoryPoolWithTime(chainparams, pool, active_chainstate, tx, nTime, false /* bypass_limits */,\n                                                false /* test_accept */).m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "cc59b8f706a81ae2c81d6ee49a85a8dcf7bca670",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0da7ea57ab932eca956458fb3633585ff3c0003/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0da7ea57ab932eca956458fb3633585ff3c0003/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d0da7ea57ab932eca956458fb3633585ff3c0003",
        "patch": "@@ -1024,7 +1024,7 @@ CBlockFileInfo* GetBlockFileInfo(size_t n);\n bool DumpMempool(const CTxMemPool& pool);\n \n /** Load the mempool from disk. */\n-bool LoadMempool(CTxMemPool& pool);\n+bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate);\n \n //! Check whether the block associated with this index entry is pruned or not.\n inline bool IsBlockPruned(const CBlockIndex* pblockindex)"
      }
    ]
  },
  {
    "sha": "229bc37b5f18cffbc85efbad3b6e9047c6951e95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjliYzM3YjVmMThjZmZiYzg1ZWZiYWQzYjZlOTA0N2M2OTUxZTk1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:00:04Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:43:28Z"
      },
      "message": "validation: Pass in chainstate to ::AcceptToMemoryPool",
      "tree": {
        "sha": "9ff10d35067ac507f3d5a503c31e1556b553bba2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ff10d35067ac507f3d5a503c31e1556b553bba2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/229bc37b5f18cffbc85efbad3b6e9047c6951e95",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/229bc37b5f18cffbc85efbad3b6e9047c6951e95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/229bc37b5f18cffbc85efbad3b6e9047c6951e95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/229bc37b5f18cffbc85efbad3b6e9047c6951e95/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0da7ea57ab932eca956458fb3633585ff3c0003",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0da7ea57ab932eca956458fb3633585ff3c0003",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0da7ea57ab932eca956458fb3633585ff3c0003"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e40a273257ed72e4a9cfe4c0c5e9d1e0d46276ed",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/229bc37b5f18cffbc85efbad3b6e9047c6951e95/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/229bc37b5f18cffbc85efbad3b6e9047c6951e95/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=229bc37b5f18cffbc85efbad3b6e9047c6951e95",
        "patch": "@@ -387,7 +387,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+            AcceptToMemoryPool(::ChainstateActive(), mempool, *it, true /* bypass_limits */).m_result_type != MempoolAcceptResult::ResultType::VALID) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n@@ -1103,7 +1103,13 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n \n MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef &tx, bool bypass_limits, bool test_accept)\n {\n-    return AcceptToMemoryPoolWithTime(Params(), pool, ::ChainstateActive(), tx, GetTime(), bypass_limits, test_accept);\n+    return AcceptToMemoryPool(::ChainstateActive(), pool, tx, bypass_limits, test_accept);\n+}\n+\n+MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx, bool bypass_limits, bool test_accept)\n+{\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)"
      },
      {
        "sha": "80ef0eaa7deb197e1abda131ac289bac47695084",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/229bc37b5f18cffbc85efbad3b6e9047c6951e95/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/229bc37b5f18cffbc85efbad3b6e9047c6951e95/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=229bc37b5f18cffbc85efbad3b6e9047c6951e95",
        "patch": "@@ -225,6 +225,8 @@ struct MempoolAcceptResult {\n  */\n MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef& tx,\n                                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n+                                       bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);"
      }
    ]
  },
  {
    "sha": "3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzA0NDMzYzRmNWVjZjlmMTk2ODYwYjJjY2VjYWUwZDJjOGI1ZjZl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:09:38Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:49:06Z"
      },
      "message": "scripted-diff: Invoke ::AcceptToMemoryPool with chainstate\n\n-BEGIN VERIFY SCRIPT-\nfind_regex='\\bAcceptToMemoryPool\\(' \\\n    && git grep -l -E \"$find_regex\" -- src \\\n        | grep -v '^src/validation\\.\\(cpp\\|h\\)$' \\\n        | xargs sed -i -E 's@'\"$find_regex\"'@\\0::ChainstateActive(), @g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "05507005150626b0188240390cfc849405edd270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05507005150626b0188240390cfc849405edd270"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "229bc37b5f18cffbc85efbad3b6e9047c6951e95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/229bc37b5f18cffbc85efbad3b6e9047c6951e95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/229bc37b5f18cffbc85efbad3b6e9047c6951e95"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "8f656c44d9e4bddf8e26bfa88769e339c2537373",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
        "patch": "@@ -48,7 +48,7 @@ static void AssembleBlock(benchmark::Bench& bench)\n         LOCK(::cs_main); // Required for ::AcceptToMemoryPool.\n \n         for (const auto& txr : txs) {\n-            const MempoolAcceptResult res = ::AcceptToMemoryPool(*test_setup.m_node.mempool, txr, false /* bypass_limits */);\n+            const MempoolAcceptResult res = ::AcceptToMemoryPool(::ChainstateActive(), *test_setup.m_node.mempool, txr, false /* bypass_limits */);\n             assert(res.m_result_type == MempoolAcceptResult::ResultType::VALID);\n         }\n     }"
      },
      {
        "sha": "a26b174244b9368fb4bd987d2adcba2b7ce44f55",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
        "patch": "@@ -2236,7 +2236,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         if (orphan_it == mapOrphanTransactions.end()) continue;\n \n         const CTransactionRef porphanTx = orphan_it->second.tx;\n-        const MempoolAcceptResult result = AcceptToMemoryPool(m_mempool, porphanTx, false /* bypass_limits */);\n+        const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), m_mempool, porphanTx, false /* bypass_limits */);\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n@@ -3258,7 +3258,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n-        const MempoolAcceptResult result = AcceptToMemoryPool(m_mempool, ptx, false /* bypass_limits */);\n+        const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), m_mempool, ptx, false /* bypass_limits */);\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {"
      },
      {
        "sha": "3b3fab7b6bac447938d082fcc134241462592c7b",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
        "patch": "@@ -53,7 +53,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (max_tx_fee > 0) {\n             // First, call ATMP with test_accept and check the fee. If ATMP\n             // fails here, return error immediately.\n-            const MempoolAcceptResult result = AcceptToMemoryPool(*node.mempool, tx, false /* bypass_limits */,\n+            const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *node.mempool, tx, false /* bypass_limits */,\n                                                                   true /* test_accept */);\n             if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n                 return HandleATMPError(result.m_state, err_string);\n@@ -62,7 +62,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n             }\n         }\n         // Try to submit the transaction to the mempool.\n-        const MempoolAcceptResult result = AcceptToMemoryPool(*node.mempool, tx, false /* bypass_limits */,\n+        const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *node.mempool, tx, false /* bypass_limits */,\n                                                               false /* test_accept */);\n         if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n             return HandleATMPError(result.m_state, err_string);"
      },
      {
        "sha": "47c776bbd1d298859b68c56af162eaf2d2770ebc",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
        "patch": "@@ -946,7 +946,7 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(mempool, std::move(tx),\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n                                                   false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP."
      },
      {
        "sha": "8d14071297b2cc348713654cd972a5be86407e3d",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
        "patch": "@@ -33,7 +33,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     LOCK(cs_main);\n \n     unsigned int initialPoolSize = m_node.mempool->size();\n-    const MempoolAcceptResult result = AcceptToMemoryPool(*m_node.mempool, MakeTransactionRef(coinbaseTx),\n+    const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool, MakeTransactionRef(coinbaseTx),\n                 true /* bypass_limits */);\n \n     BOOST_CHECK(result.m_result_type == MempoolAcceptResult::ResultType::INVALID);"
      },
      {
        "sha": "288f807abd2cc230e330058009e110f90d9abf22",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
        "patch": "@@ -28,7 +28,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     const auto ToMemPool = [this](const CMutableTransaction& tx) {\n         LOCK(cs_main);\n \n-        const MempoolAcceptResult result = AcceptToMemoryPool(*m_node.mempool, MakeTransactionRef(tx),\n+        const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool, MakeTransactionRef(tx),\n             true /* bypass_limits */);\n         return result.m_result_type == MempoolAcceptResult::ResultType::VALID;\n     };"
      },
      {
        "sha": "1ffe43553120c6a205f5ff11e0eefe8b38f70d09",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
        "patch": "@@ -303,7 +303,7 @@ CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(CTransactio\n     // Add transaction to the mempool\n     {\n         LOCK(cs_main);\n-        const MempoolAcceptResult result = AcceptToMemoryPool(*m_node.mempool.get(), MakeTransactionRef(mempool_txn), /* bypass_limits */ false);\n+        const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool.get(), MakeTransactionRef(mempool_txn), /* bypass_limits */ false);\n         assert(result.m_result_type == MempoolAcceptResult::ResultType::VALID);\n     }\n "
      },
      {
        "sha": "5dd6ea79a4ff679f0ebf232fcc63b291691ad5a9",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
        "patch": "@@ -284,7 +284,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n         {\n             LOCK(cs_main);\n             for (const auto& tx : txs) {\n-                const MempoolAcceptResult result = AcceptToMemoryPool(*m_node.mempool, tx, false /* bypass_limits */);\n+                const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool, tx, false /* bypass_limits */);\n                 BOOST_REQUIRE(result.m_result_type == MempoolAcceptResult::ResultType::VALID);\n             }\n         }"
      },
      {
        "sha": "9f32275a77066612e7f19871b86b7f2461b14b58",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
        "patch": "@@ -356,7 +356,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n {\n     // Add to memory pool without checking anything.\n-    // Used by AcceptToMemoryPool(), which DOES do\n+    // Used by AcceptToMemoryPool(::ChainstateActive(), ), which DOES do\n     // all the appropriate checks.\n     indexed_transaction_set::iterator newit = mapTx.insert(entry).first;\n "
      }
    ]
  },
  {
    "sha": "417dafc1ee07af3319c2fe89758123cb8362ff16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTdkYWZjMWVlMDdhZjMzMTljMmZlODk3NTgxMjNjYjgzNjJmZjE2",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-18T20:39:32Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:49:10Z"
      },
      "message": "validation: Remove old AcceptToMemoryPool w/o chainstate param",
      "tree": {
        "sha": "58b6d7f33814787950ca385903bf417ebbd4ab5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58b6d7f33814787950ca385903bf417ebbd4ab5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/417dafc1ee07af3319c2fe89758123cb8362ff16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/417dafc1ee07af3319c2fe89758123cb8362ff16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/417dafc1ee07af3319c2fe89758123cb8362ff16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/417dafc1ee07af3319c2fe89758123cb8362ff16/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3704433c4f5ecf9f196860b2ccecae0d2c8b5f6e"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 0,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0b4f0dbb4ceaad03b00b8f154c59506812c93563",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/417dafc1ee07af3319c2fe89758123cb8362ff16/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/417dafc1ee07af3319c2fe89758123cb8362ff16/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=417dafc1ee07af3319c2fe89758123cb8362ff16",
        "patch": "@@ -1101,11 +1101,6 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n     return result;\n }\n \n-MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef &tx, bool bypass_limits, bool test_accept)\n-{\n-    return AcceptToMemoryPool(::ChainstateActive(), pool, tx, bypass_limits, test_accept);\n-}\n-\n MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx, bool bypass_limits, bool test_accept)\n {\n     assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));"
      },
      {
        "sha": "739f4f1d99640166b4391a5441b6a63dc1af4a91",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/417dafc1ee07af3319c2fe89758123cb8362ff16/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/417dafc1ee07af3319c2fe89758123cb8362ff16/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=417dafc1ee07af3319c2fe89758123cb8362ff16",
        "patch": "@@ -223,8 +223,6 @@ struct MempoolAcceptResult {\n  * @param[in]  bypass_limits   When true, don't enforce mempool fee limits.\n  * @param[in]  test_accept     When true, run validation checks but don't submit to mempool.\n  */\n-MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef& tx,\n-                                       bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n                                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n "
      }
    ]
  },
  {
    "sha": "120aaba9ac41af71a760aa0969dd090e96786fb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjBhYWJhOWFjNDFhZjcxYTc2MGFhMDk2OWRkMDkwZTk2Nzg2ZmIz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T14:25:16Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:49:10Z"
      },
      "message": "tree-wide: Fix erroneous AcceptToMemoryPool replacements",
      "tree": {
        "sha": "5a9b9bef714e040e0c605ec5762aaccc8f380ad2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a9b9bef714e040e0c605ec5762aaccc8f380ad2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/120aaba9ac41af71a760aa0969dd090e96786fb3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/120aaba9ac41af71a760aa0969dd090e96786fb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/120aaba9ac41af71a760aa0969dd090e96786fb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/120aaba9ac41af71a760aa0969dd090e96786fb3/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "417dafc1ee07af3319c2fe89758123cb8362ff16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/417dafc1ee07af3319c2fe89758123cb8362ff16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/417dafc1ee07af3319c2fe89758123cb8362ff16"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "197cd6cd4bd8235b33675a2fb84ab0b1b48d8333",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/120aaba9ac41af71a760aa0969dd090e96786fb3/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/120aaba9ac41af71a760aa0969dd090e96786fb3/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=120aaba9ac41af71a760aa0969dd090e96786fb3",
        "patch": "@@ -356,7 +356,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n {\n     // Add to memory pool without checking anything.\n-    // Used by AcceptToMemoryPool(::ChainstateActive(), ), which DOES do\n+    // Used by AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n     indexed_transaction_set::iterator newit = mapTx.insert(entry).first;\n "
      }
    ]
  },
  {
    "sha": "71734c65dc491a4bb654ccbb7a1dd0e12131cee4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTczNGM2NWRjNDkxYTRiYjY1NGNjYmI3YTFkZDBlMTIxMzFjZWU0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:40:00Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:49:10Z"
      },
      "message": "validation: Pass in chain to ::TestLockPointValidity",
      "tree": {
        "sha": "96da01e7a131140c02a2085711ec8b17ec927493",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96da01e7a131140c02a2085711ec8b17ec927493"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71734c65dc491a4bb654ccbb7a1dd0e12131cee4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71734c65dc491a4bb654ccbb7a1dd0e12131cee4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71734c65dc491a4bb654ccbb7a1dd0e12131cee4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71734c65dc491a4bb654ccbb7a1dd0e12131cee4/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "120aaba9ac41af71a760aa0969dd090e96786fb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/120aaba9ac41af71a760aa0969dd090e96786fb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/120aaba9ac41af71a760aa0969dd090e96786fb3"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "031077fa757b2fb03e907653ffab0f1139ea6313",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71734c65dc491a4bb654ccbb7a1dd0e12131cee4/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71734c65dc491a4bb654ccbb7a1dd0e12131cee4/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=71734c65dc491a4bb654ccbb7a1dd0e12131cee4",
        "patch": "@@ -511,7 +511,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n-        bool validLP =  TestLockPointValidity(&lp);\n+        bool validLP =  TestLockPointValidity(::ChainActive(), &lp);\n         if (!CheckFinalTx(::ChainActive().Tip(), tx, flags) || !CheckSequenceLocks(::ChainstateActive(), *this, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints."
      },
      {
        "sha": "870f41a16ffc213d133e0711b9725d968839817c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71734c65dc491a4bb654ccbb7a1dd0e12131cee4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71734c65dc491a4bb654ccbb7a1dd0e12131cee4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=71734c65dc491a4bb654ccbb7a1dd0e12131cee4",
        "patch": "@@ -237,7 +237,7 @@ bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, i\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n-bool TestLockPointValidity(const LockPoints* lp)\n+bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp)\n {\n     AssertLockHeld(cs_main);\n     assert(lp);\n@@ -246,7 +246,8 @@ bool TestLockPointValidity(const LockPoints* lp)\n     if (lp->maxInputBlock) {\n         // Check whether ::ChainActive() is an extension of the block at which the LockPoints\n         // calculation was valid.  If not LockPoints are no longer valid\n-        if (!::ChainActive().Contains(lp->maxInputBlock)) {\n+        assert(std::addressof(::ChainActive()) == std::addressof(active_chain));\n+        if (!active_chain.Contains(lp->maxInputBlock)) {\n             return false;\n         }\n     }"
      },
      {
        "sha": "7fc0d31c702ff8b42f286fa75fda4359c9a07b28",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71734c65dc491a4bb654ccbb7a1dd0e12131cee4/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71734c65dc491a4bb654ccbb7a1dd0e12131cee4/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=71734c65dc491a4bb654ccbb7a1dd0e12131cee4",
        "patch": "@@ -253,7 +253,7 @@ bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, i\n /**\n  * Test whether the LockPoints height and time are still valid on the current chain\n  */\n-bool TestLockPointValidity(const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Check if transaction will be BIP 68 final in the next block to be created."
      }
    ]
  },
  {
    "sha": "714201881251a787423fbca34f70fed505e9dc28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTQyMDE4ODEyNTFhNzg3NDIzZmJjYTM0ZjcwZmVkNTA1ZTlkYzI4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:48:55Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:49:10Z"
      },
      "message": "validation: Pass in chainstate to CTxMemPool::removeForReorg\n\nSeveral other parameters are now redundant since they can be safely\nobtained from the chainstate given that ::cs_main is locked. These are\nnow removed.",
      "tree": {
        "sha": "e4dc2e14008727f3755ec41a1afe4bef762af618",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4dc2e14008727f3755ec41a1afe4bef762af618"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/714201881251a787423fbca34f70fed505e9dc28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/714201881251a787423fbca34f70fed505e9dc28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/714201881251a787423fbca34f70fed505e9dc28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/714201881251a787423fbca34f70fed505e9dc28/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71734c65dc491a4bb654ccbb7a1dd0e12131cee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71734c65dc491a4bb654ccbb7a1dd0e12131cee4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71734c65dc491a4bb654ccbb7a1dd0e12131cee4"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "899835019a752d3e55b7b692d32861a7d3aa6834",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/714201881251a787423fbca34f70fed505e9dc28/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/714201881251a787423fbca34f70fed505e9dc28/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=714201881251a787423fbca34f70fed505e9dc28",
        "patch": "@@ -503,16 +503,17 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n         RemoveStaged(setAllRemoves, false, reason);\n }\n \n-void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n+void CTxMemPool::removeForReorg(CChainState& active_chainstate, int flags)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     AssertLockHeld(cs);\n     setEntries txToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n-        bool validLP =  TestLockPointValidity(::ChainActive(), &lp);\n-        if (!CheckFinalTx(::ChainActive().Tip(), tx, flags) || !CheckSequenceLocks(::ChainstateActive(), *this, tx, flags, &lp, validLP)) {\n+        assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+        bool validLP =  TestLockPointValidity(active_chainstate.m_chain, &lp);\n+        if (!CheckFinalTx(active_chainstate.m_chain.Tip(), tx, flags) || !CheckSequenceLocks(active_chainstate, *this, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n             txToRemove.insert(it);\n@@ -521,8 +522,9 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n                 indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n                 if (it2 != mapTx.end())\n                     continue;\n-                const Coin &coin = pcoins->AccessCoin(txin.prevout);\n+                const Coin &coin = active_chainstate.CoinsTip().AccessCoin(txin.prevout);\n                 if (m_check_ratio != 0) assert(!coin.IsSpent());\n+                unsigned int nMemPoolHeight = active_chainstate.m_chain.Tip()->nHeight + 1;\n                 if (coin.IsSpent() || (coin.IsCoinBase() && ((signed long)nMemPoolHeight) - coin.nHeight < COINBASE_MATURITY)) {\n                     txToRemove.insert(it);\n                     break;"
      },
      {
        "sha": "b8de326737a21a7c467be46fc56f85cc7cfbeaea",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/714201881251a787423fbca34f70fed505e9dc28/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/714201881251a787423fbca34f70fed505e9dc28/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=714201881251a787423fbca34f70fed505e9dc28",
        "patch": "@@ -29,6 +29,7 @@\n #include <boost/multi_index/sequenced_index.hpp>\n \n class CBlockIndex;\n+class CChainState;\n extern RecursiveMutex cs_main;\n \n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n@@ -616,7 +617,7 @@ class CTxMemPool\n     void addUnchecked(const CTxMemPoolEntry& entry, setEntries& setAncestors, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n \n     void removeRecursive(const CTransaction& tx, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void removeForReorg(const CCoinsViewCache* pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n+    void removeForReorg(CChainState& active_chainstate, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n     void removeConflicts(const CTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight) EXCLUSIVE_LOCKS_REQUIRED(cs);\n "
      },
      {
        "sha": "36b24b371aea5ac4b0b65b0d48427bdc24e2a231",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/714201881251a787423fbca34f70fed505e9dc28/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/714201881251a787423fbca34f70fed505e9dc28/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=714201881251a787423fbca34f70fed505e9dc28",
        "patch": "@@ -406,7 +406,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     mempool.UpdateTransactionsFromBlock(vHashUpdate);\n \n     // We also need to remove any now-immature transactions\n-    mempool.removeForReorg(&::ChainstateActive().CoinsTip(), ::ChainActive().Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+    mempool.removeForReorg(::ChainstateActive(), STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n     LimitMempoolSize(mempool, ::ChainstateActive().CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }"
      }
    ]
  },
  {
    "sha": "0a9a24d8c717e88e36e16014630cec8eada8dfcb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTlhMjRkOGM3MTdlODhlMzZlMTYwMTQ2MzBjZWM4ZWFkYThkZmNi",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:53:51Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:49:10Z"
      },
      "message": "validation: Pass in chainstate to UpdateMempoolForReorg",
      "tree": {
        "sha": "177ad7508e1b13a6be4fe8aaa54c680284925caf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/177ad7508e1b13a6be4fe8aaa54c680284925caf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a9a24d8c717e88e36e16014630cec8eada8dfcb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a9a24d8c717e88e36e16014630cec8eada8dfcb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a9a24d8c717e88e36e16014630cec8eada8dfcb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a9a24d8c717e88e36e16014630cec8eada8dfcb/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "714201881251a787423fbca34f70fed505e9dc28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/714201881251a787423fbca34f70fed505e9dc28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/714201881251a787423fbca34f70fed505e9dc28"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6591566f0ab3a560156177d1899cc4645d7846fe",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a9a24d8c717e88e36e16014630cec8eada8dfcb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a9a24d8c717e88e36e16014630cec8eada8dfcb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0a9a24d8c717e88e36e16014630cec8eada8dfcb",
        "patch": "@@ -373,10 +373,11 @@ static bool IsCurrentForFeeEstimation(CChainState& active_chainstate) EXCLUSIVE_\n  * and instead just erase from the mempool as needed.\n  */\n \n-static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransactions& disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\n+static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& mempool, DisconnectedBlockTransactions& disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(mempool.cs);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     std::vector<uint256> vHashUpdate;\n     // disconnectpool's insertion_order index sorts the entries from\n     // oldest to newest, but the oldest entry will be the last tx from the\n@@ -388,7 +389,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            AcceptToMemoryPool(::ChainstateActive(), mempool, *it, true /* bypass_limits */).m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+            AcceptToMemoryPool(active_chainstate, mempool, *it, true /* bypass_limits */).m_result_type != MempoolAcceptResult::ResultType::VALID) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n@@ -406,9 +407,9 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     mempool.UpdateTransactionsFromBlock(vHashUpdate);\n \n     // We also need to remove any now-immature transactions\n-    mempool.removeForReorg(::ChainstateActive(), STANDARD_LOCKTIME_VERIFY_FLAGS);\n+    mempool.removeForReorg(active_chainstate, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n-    LimitMempoolSize(mempool, ::ChainstateActive().CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    LimitMempoolSize(mempool, active_chainstate.CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n /**\n@@ -2716,7 +2717,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n         if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n             // This is likely a fatal error, but keep the mempool consistent,\n             // just in case. Only remove from the mempool in this case.\n-            UpdateMempoolForReorg(m_mempool, disconnectpool, false);\n+            UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, false);\n \n             // If we're unable to disconnect a block during normal operation,\n             // then that is a failure of our local system -- we should abort\n@@ -2760,7 +2761,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n                     // A system error occurred (disk space, database error, ...).\n                     // Make the mempool consistent with the current tip, just in case\n                     // any observers try to use it before shutdown.\n-                    UpdateMempoolForReorg(m_mempool, disconnectpool, false);\n+                    UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, false);\n                     return false;\n                 }\n             } else {\n@@ -2777,7 +2778,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n     if (fBlocksDisconnected) {\n         // If any blocks were disconnected, disconnectpool may be non empty.  Add\n         // any disconnected transactions back to the mempool.\n-        UpdateMempoolForReorg(m_mempool, disconnectpool, true);\n+        UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, true);\n     }\n     m_mempool.check(&CoinsTip());\n \n@@ -3014,7 +3015,7 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, const CChainParam\n         // transactions back to the mempool if disconnecting was successful,\n         // and we're not doing a very deep invalidation (in which case\n         // keeping the mempool up to date is probably futile anyway).\n-        UpdateMempoolForReorg(m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n         if (!ret) return false;\n         assert(invalid_walk_tip->pprev == m_chain.Tip());\n "
      }
    ]
  },
  {
    "sha": "8c824819c85005ee6c783e9f8fa43ff91716e33d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzgyNDgxOWM4NTAwNWVlNmM3ODNlOWY4ZmE0M2ZmOTE3MTZlMzNk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-17T18:26:57Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:49:10Z"
      },
      "message": "validation: Use *this in CChainState::LoadMempool",
      "tree": {
        "sha": "1772276d3003fa707b0eafbd0ec53e42cb99b761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1772276d3003fa707b0eafbd0ec53e42cb99b761"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c824819c85005ee6c783e9f8fa43ff91716e33d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c824819c85005ee6c783e9f8fa43ff91716e33d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c824819c85005ee6c783e9f8fa43ff91716e33d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c824819c85005ee6c783e9f8fa43ff91716e33d/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a9a24d8c717e88e36e16014630cec8eada8dfcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a9a24d8c717e88e36e16014630cec8eada8dfcb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a9a24d8c717e88e36e16014630cec8eada8dfcb"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "751a95611a23b43544b78594cbea4ffe96ff7ee9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c824819c85005ee6c783e9f8fa43ff91716e33d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c824819c85005ee6c783e9f8fa43ff91716e33d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8c824819c85005ee6c783e9f8fa43ff91716e33d",
        "patch": "@@ -4185,7 +4185,8 @@ bool static LoadBlockIndexDB(ChainstateManager& chainman, const CChainParams& ch\n void CChainState::LoadMempool(const ArgsManager& args)\n {\n     if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        ::LoadMempool(m_mempool, ::ChainstateActive());\n+        assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+        ::LoadMempool(m_mempool, *this);\n     }\n     m_mempool.SetIsLoaded(!ShutdownRequested());\n }"
      }
    ]
  },
  {
    "sha": "8f5c100064bea720351d450f8116ff3abe0515cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjVjMTAwMDY0YmVhNzIwMzUxZDQ1MGY4MTE2ZmYzYWJlMDUxNWNj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-08T19:12:12Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:49:10Z"
      },
      "message": "style-only: Make CheckSequenceLock signature readable",
      "tree": {
        "sha": "cc32dd69222e80e70c3a098cff710299d145c4a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc32dd69222e80e70c3a098cff710299d145c4a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f5c100064bea720351d450f8116ff3abe0515cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f5c100064bea720351d450f8116ff3abe0515cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f5c100064bea720351d450f8116ff3abe0515cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f5c100064bea720351d450f8116ff3abe0515cc/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c824819c85005ee6c783e9f8fa43ff91716e33d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c824819c85005ee6c783e9f8fa43ff91716e33d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c824819c85005ee6c783e9f8fa43ff91716e33d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "08079a6d08d0d0b3709680a8508d96da91df13b7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f5c100064bea720351d450f8116ff3abe0515cc/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f5c100064bea720351d450f8116ff3abe0515cc/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8f5c100064bea720351d450f8116ff3abe0515cc",
        "patch": "@@ -256,7 +256,12 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp)\n     return true;\n }\n \n-bool CheckSequenceLocks(CChainState& active_chainstate, const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp, bool useExistingLockPoints)\n+bool CheckSequenceLocks(CChainState& active_chainstate,\n+                        const CTxMemPool& pool,\n+                        const CTransaction& tx,\n+                        int flags,\n+                        LockPoints* lp,\n+                        bool useExistingLockPoints)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(pool.cs);"
      },
      {
        "sha": "4e4bdbea54b882fcaa298c62305edaf672acd625",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f5c100064bea720351d450f8116ff3abe0515cc/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f5c100064bea720351d450f8116ff3abe0515cc/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=8f5c100064bea720351d450f8116ff3abe0515cc",
        "patch": "@@ -266,7 +266,12 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp) EXCLUSIVE\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckSequenceLocks(CChainState& active_chainstate, const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, pool.cs);\n+bool CheckSequenceLocks(CChainState& active_chainstate,\n+                        const CTxMemPool& pool,\n+                        const CTransaction& tx,\n+                        int flags,\n+                        LockPoints* lp = nullptr,\n+                        bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, pool.cs);\n \n /**\n  * Closure representing one script verification"
      }
    ]
  },
  {
    "sha": "e8ae1db864b09a47c736631e6cd3f5ec17929850",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGFlMWRiODY0YjA5YTQ3YzczNjYzMWU2Y2QzZjVlYzE3OTI5ODUw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-08T19:16:16Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-18T19:49:10Z"
      },
      "message": "style-only: Make AcceptToMemoryPool signature readable",
      "tree": {
        "sha": "15f28c29f190f8a772a616e6a53f282cdb840278",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15f28c29f190f8a772a616e6a53f282cdb840278"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8ae1db864b09a47c736631e6cd3f5ec17929850",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8ae1db864b09a47c736631e6cd3f5ec17929850",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8ae1db864b09a47c736631e6cd3f5ec17929850",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8ae1db864b09a47c736631e6cd3f5ec17929850/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f5c100064bea720351d450f8116ff3abe0515cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f5c100064bea720351d450f8116ff3abe0515cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f5c100064bea720351d450f8116ff3abe0515cc"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1b8fb1fd45e02c7cfbb52ec6b1e406c833428320",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8ae1db864b09a47c736631e6cd3f5ec17929850/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8ae1db864b09a47c736631e6cd3f5ec17929850/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e8ae1db864b09a47c736631e6cd3f5ec17929850",
        "patch": "@@ -1108,7 +1108,8 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n     return result;\n }\n \n-MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx, bool bypass_limits, bool test_accept)\n+MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n+                                       bool bypass_limits, bool test_accept)\n {\n     assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);"
      }
    ]
  }
]