[
  {
    "sha": "a5e33d3b782d33dc71653912e2d370f9a06b79e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWUzM2QzYjc4MmQzM2RjNzE2NTM5MTJlMmQzNzBmOWEwNmI3OWU0",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-13T07:38:34Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-13T07:40:49Z"
      },
      "message": "Fee estimation: extend bucket ranges consistently\n\nWhen calculating a median fee for a confirmation target at a particular\nthreshold, we analyse buckets in ranges rather than individually in\ncase some buckets have very little data. This patch ensures the breaks\nbetween ranges are independent of the the confirmation target.",
      "tree": {
        "sha": "881d681f33c78efcd115794c2f66ed9886615f4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/881d681f33c78efcd115794c2f66ed9886615f4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5e33d3b782d33dc71653912e2d370f9a06b79e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5e33d3b782d33dc71653912e2d370f9a06b79e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5e33d3b782d33dc71653912e2d370f9a06b79e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5e33d3b782d33dc71653912e2d370f9a06b79e4/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf3189eda65d269fee6a70681ab390bd7cebf7d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3189eda65d269fee6a70681ab390bd7cebf7d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3189eda65d269fee6a70681ab390bd7cebf7d7"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 14,
      "deletions": 1
    },
    "files": [
      {
        "sha": "660d477f6df647323e83223599ba2f495aae67b3",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5e33d3b782d33dc71653912e2d370f9a06b79e4/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5e33d3b782d33dc71653912e2d370f9a06b79e4/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=a5e33d3b782d33dc71653912e2d370f9a06b79e4",
        "patch": "@@ -223,6 +223,11 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n     unsigned int curFarBucket = maxbucketindex;\n     unsigned int bestFarBucket = maxbucketindex;\n \n+    // We'll always group buckets into sets tha meets sufficientTxVal --\n+    // this ensures that we're using consistent groups between different\n+    // confirmation targets.\n+    double partialNum = 0;\n+\n     bool foundAnswer = false;\n     unsigned int bins = unconfTxs.size();\n     bool newBucketRange = true;\n@@ -238,6 +243,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n         }\n         curFarBucket = bucket;\n         nConf += confAvg[periodTarget - 1][bucket];\n+        partialNum += txCtAvg[bucket];\n         totalNum += txCtAvg[bucket];\n         failNum += failAvg[periodTarget - 1][bucket];\n         for (unsigned int confct = confTarget; confct < GetMaxConfirms(); confct++)\n@@ -247,7 +253,14 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n         // we can test for success\n         // (Only count the confirmed data points, so that each confirmation count\n         // will be looking at the same amount of data and same bucket breaks)\n-        if (totalNum >= sufficientTxVal / (1 - decay)) {\n+\n+        if (partialNum < sufficientTxVal / (1 - decay)) {\n+            // the buckets we've added in this round aren't sufficient\n+            // so keep adding\n+            continue;\n+        } else {\n+            partialNum = 0; // reset for the next range we'll add\n+\n             double curPct = nConf / (totalNum + failNum + extraNum);\n \n             // Check to see if we are no longer getting confirmed at the success rate"
      }
    ]
  }
]