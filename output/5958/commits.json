[
  {
    "sha": "231072fe7bc4909052e8f84a57101a91e76d9470",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzEwNzJmZTdiYzQ5MDkwNTJlOGY4NGE1NzEwMWE5MWU3NmQ5NDcw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-01T13:08:00Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-07T09:05:23Z"
      },
      "message": "[QA] add multisig rpc tests",
      "tree": {
        "sha": "8b05a1ddc012d31e14ba22a205986918d3e32eeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b05a1ddc012d31e14ba22a205986918d3e32eeb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/231072fe7bc4909052e8f84a57101a91e76d9470",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/231072fe7bc4909052e8f84a57101a91e76d9470",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/231072fe7bc4909052e8f84a57101a91e76d9470",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/231072fe7bc4909052e8f84a57101a91e76d9470/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40f5e8dc2ab17b34b24ee6e0391e18ae7065cff9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f5e8dc2ab17b34b24ee6e0391e18ae7065cff9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40f5e8dc2ab17b34b24ee6e0391e18ae7065cff9"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 84,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ecde45059bcfef96c115e80b8eb6a044d6821f52",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/231072fe7bc4909052e8f84a57101a91e76d9470/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/231072fe7bc4909052e8f84a57101a91e76d9470/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=231072fe7bc4909052e8f84a57101a91e76d9470",
        "patch": "@@ -31,9 +31,10 @@ testScripts=(\n     'proxy_test.py'\n     'merkle_blocks.py'\n     'signrawtransactions.py'\n-#    'forknotify.py'\n     'maxblocksinflight.py'\n     'invalidblockrequest.py'\n+    'rawtransactions.py'\n+#    'forknotify.py'\n );\n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n     for (( i = 0; i < ${#testScripts[@]}; i++ ))"
      },
      {
        "sha": "3d80c97d74c630037e6b46b8d94a3978f6078d9b",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 82,
        "deletions": 7,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/231072fe7bc4909052e8f84a57101a91e76d9470/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/231072fe7bc4909052e8f84a57101a91e76d9470/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=231072fe7bc4909052e8f84a57101a91e76d9470",
        "patch": "@@ -15,7 +15,7 @@\n \n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n-    \n+\n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 3)\n@@ -28,16 +28,16 @@ def setup_network(self, split=False):\n         #proxy = AuthServiceProxy(url)\n         #proxy.url = url # store URL on proxy for info\n         #self.nodes.append(proxy)\n-        \n+\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        \n+\n         self.is_network_split=False\n         self.sync_all()\n-    \n+\n     def run_test(self):\n-        \n+\n         #prepare some coins for multiple *rawtransaction commands\n         self.nodes[2].generate(1)\n         self.nodes[0].generate(101)\n@@ -56,14 +56,89 @@ def run_test(self):\n         outputs = { self.nodes[0].getnewaddress() : 4.998 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n-        \n+\n         errorString = \"\"\n         try:\n             rawtx   = self.nodes[2].sendrawtransaction(rawtx['hex'])\n         except JSONRPCException,e:\n             errorString = e.error['message']\n+\n+        assert_equal(\"Missing inputs\" in errorString, True);\n+\n+        #########################\n+        # RAW TX MULTISIG TESTS #\n+        #########################\n+        # 2of2 test\n+        addr1 = self.nodes[2].getnewaddress()\n+        addr2 = self.nodes[2].getnewaddress()\n+\n+        addr1Obj = self.nodes[2].validateaddress(addr1)\n+        addr2Obj = self.nodes[2].validateaddress(addr2)\n+\n+        mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])\n+        mSigObjValid = self.nodes[2].validateaddress(mSigObj)\n+\n+        #use balance deltas instead of absolute values\n+        bal = self.nodes[2].getbalance()\n+\n+        # send 1.2 BTC to msig adr\n+        txId       = self.nodes[0].sendtoaddress(mSigObj, 1.2);\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n+\n+\n+\n+\n+        # 2of3 test from different nodes\n+        bal = self.nodes[2].getbalance()\n+        addr1 = self.nodes[1].getnewaddress()\n+        addr2 = self.nodes[2].getnewaddress()\n+        addr3 = self.nodes[2].getnewaddress()\n+\n+        addr1Obj = self.nodes[1].validateaddress(addr1)\n+        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr3Obj = self.nodes[2].validateaddress(addr3)\n+\n+        mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])\n+        mSigObjValid = self.nodes[2].validateaddress(mSigObj)\n+\n+        txId       = self.nodes[0].sendtoaddress(mSigObj, 2.2);\n+        decTx = self.nodes[0].gettransaction(txId)\n+        rawTx = self.nodes[0].decoderawtransaction(decTx['hex'])\n+        sPK = rawTx['vout'][0]['scriptPubKey']['hex']\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        #THIS IS A INCOMPLETE FEATURE\n+        #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n+        assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n+\n+        txDetails = self.nodes[0].gettransaction(txId, True)\n+        rawTx = self.nodes[0].decoderawtransaction(txDetails['hex'])\n+        vout = False\n+        for outpoint in rawTx['vout']:\n+            if outpoint['value'] == Decimal('2.20000000'):\n+                vout = outpoint\n+                break;\n+\n+        bal = self.nodes[0].getbalance()\n+        inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex']}]\n+        outputs = { self.nodes[0].getnewaddress() : 2.19 }\n+        rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawTxPartialSigned = self.nodes[1].signrawtransaction(rawTx, inputs)\n+        assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n         \n-        assert_equal(\"Missing inputs\" in errorString, True);        \n+        rawTxSigned = self.nodes[2].signrawtransaction(rawTx, inputs)\n+        assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n+        self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n+        rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n \n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      }
    ]
  }
]