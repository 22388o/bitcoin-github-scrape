[
  {
    "sha": "2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmY3NDJmZDc4YmU1ZTVmZWJiZTA1ZDhiMmZlMjBmNWNjYmM1MWFj",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-26T14:39:40Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-12-08T01:42:36Z"
      },
      "message": "Build empty block on when chainTip changes.\n\nReduce latency of switching to new block.",
      "tree": {
        "sha": "3d6fac94bbaf1908911108b18680eb6d2e44921b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d6fac94bbaf1908911108b18680eb6d2e44921b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc0305d15aa02819cd4763e1efe3876d674faea7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc0305d15aa02819cd4763e1efe3876d674faea7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc0305d15aa02819cd4763e1efe3876d674faea7"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ba935275723cca344e24a818e13c3e0084581c5d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac",
        "patch": "@@ -71,7 +71,7 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n     return nNewTime - nOldTime;\n }\n \n-CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn)\n+CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn, bool fBuildEmptyBlock)\n {\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n@@ -160,6 +160,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n         while (mi != mempool.mapTx.get<3>().end() || !clearedTxs.empty())\n         {\n+            if (fBuildEmptyBlock) break;\n             bool priorityTx = false;\n             if (fPriorityBlock && !vecPriority.empty()) { // add a tx from priority queue to fill the blockprioritysize\n                 priorityTx = true;"
      },
      {
        "sha": "892376f87f330b46f099dc396749356ae9dfdbfc",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac",
        "patch": "@@ -32,7 +32,7 @@ struct CBlockTemplate\n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams);\n /** Generate a new block, without valid proof-of-work */\n-CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn);\n+CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn, bool fBuildEmptyBlock=false);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);"
      },
      {
        "sha": "40687b99a3569863ac8e33d492f72de6fb6c2ce4",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac",
        "patch": "@@ -441,6 +441,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n     static unsigned int nTransactionsUpdatedLast;\n+    bool fBuildEmptyBlock = false;\n \n     if (!lpval.isNull())\n     {\n@@ -480,6 +481,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n                     checktxtime += boost::posix_time::seconds(10);\n                 }\n             }\n+\n+            if (chainActive.Tip()->GetBlockHash() != hashWatchedChain)\n+                fBuildEmptyBlock = true;\n         }\n         ENTER_CRITICAL_SECTION(cs_main);\n \n@@ -510,7 +514,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             pblocktemplate = NULL;\n         }\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = CreateNewBlock(Params(), scriptDummy);\n+        pblocktemplate = CreateNewBlock(Params(), scriptDummy, fBuildEmptyBlock);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n "
      }
    ]
  },
  {
    "sha": "16ca72bd68bc6dcf411feb69b2a00535d75a1c42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmNhNzJiZDY4YmM2ZGNmNDExZmViNjliMmEwMDUzNWQ3NWExYzQy",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-12-08T01:56:54Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-12-08T01:56:54Z"
      },
      "message": "Place all of the transaction selection logic in conditional gated by fBuildEmptyBlock",
      "tree": {
        "sha": "33e60ee0c8d3668e30e519ec65d2b30b40bbcb10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33e60ee0c8d3668e30e519ec65d2b30b40bbcb10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16ca72bd68bc6dcf411feb69b2a00535d75a1c42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16ca72bd68bc6dcf411feb69b2a00535d75a1c42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16ca72bd68bc6dcf411feb69b2a00535d75a1c42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16ca72bd68bc6dcf411feb69b2a00535d75a1c42/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ff742fd78be5e5febbe05d8b2fe20f5ccbc51ac"
      }
    ],
    "stats": {
      "total": 229,
      "additions": 115,
      "deletions": 114
    },
    "files": [
      {
        "sha": "976605787e2f890be3adb1de6c13181eedbfcd04",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 115,
        "deletions": 114,
        "changes": 229,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16ca72bd68bc6dcf411feb69b2a00535d75a1c42/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16ca72bd68bc6dcf411feb69b2a00535d75a1c42/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=16ca72bd68bc6dcf411feb69b2a00535d75a1c42",
        "patch": "@@ -137,137 +137,138 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         pblock->nTime = GetAdjustedTime();\n         const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n \n-        int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? nMedianTimePast\n-                                : pblock->GetBlockTime();\n-\n-        bool fPriorityBlock = nBlockPrioritySize > 0;\n-        if (fPriorityBlock) {\n-            vecPriority.reserve(mempool.mapTx.size());\n-            for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n-                 mi != mempool.mapTx.end(); ++mi)\n-            {\n-                double dPriority = mi->GetPriority(nHeight);\n-                CAmount dummy;\n-                mempool.ApplyDeltas(mi->GetTx().GetHash(), dPriority, dummy);\n-                vecPriority.push_back(TxCoinAgePriority(dPriority, mi));\n+        if (!fBuildEmptyBlock) {\n+            int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n+                                    ? nMedianTimePast\n+                                    : pblock->GetBlockTime();\n+\n+            bool fPriorityBlock = nBlockPrioritySize > 0;\n+            if (fPriorityBlock) {\n+                vecPriority.reserve(mempool.mapTx.size());\n+                for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n+                     mi != mempool.mapTx.end(); ++mi)\n+                {\n+                    double dPriority = mi->GetPriority(nHeight);\n+                    CAmount dummy;\n+                    mempool.ApplyDeltas(mi->GetTx().GetHash(), dPriority, dummy);\n+                    vecPriority.push_back(TxCoinAgePriority(dPriority, mi));\n+                }\n+                std::make_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n             }\n-            std::make_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n-        }\n \n-        CTxMemPool::indexed_transaction_set::nth_index<3>::type::iterator mi = mempool.mapTx.get<3>().begin();\n-        CTxMemPool::txiter iter;\n-\n-        while (mi != mempool.mapTx.get<3>().end() || !clearedTxs.empty())\n-        {\n-            if (fBuildEmptyBlock) break;\n-            bool priorityTx = false;\n-            if (fPriorityBlock && !vecPriority.empty()) { // add a tx from priority queue to fill the blockprioritysize\n-                priorityTx = true;\n-                iter = vecPriority.front().second;\n-                actualPriority = vecPriority.front().first;\n-                std::pop_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n-                vecPriority.pop_back();\n-            }\n-            else if (clearedTxs.empty()) { // add tx with next highest score\n-                iter = mempool.mapTx.project<0>(mi);\n-                mi++;\n-            }\n-            else {  // try to add a previously postponed child tx\n-                iter = clearedTxs.top();\n-                clearedTxs.pop();\n-            }\n+            CTxMemPool::indexed_transaction_set::nth_index<3>::type::iterator mi = mempool.mapTx.get<3>().begin();\n+            CTxMemPool::txiter iter;\n \n-            if (inBlock.count(iter))\n-                continue; // could have been added to the priorityBlock\n+            while (mi != mempool.mapTx.get<3>().end() || !clearedTxs.empty())\n+            {\n+                bool priorityTx = false;\n+                if (fPriorityBlock && !vecPriority.empty()) { // add a tx from priority queue to fill the blockprioritysize\n+                    priorityTx = true;\n+                    iter = vecPriority.front().second;\n+                    actualPriority = vecPriority.front().first;\n+                    std::pop_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+                    vecPriority.pop_back();\n+                }\n+                else if (clearedTxs.empty()) { // add tx with next highest score\n+                    iter = mempool.mapTx.project<0>(mi);\n+                    mi++;\n+                }\n+                else {  // try to add a previously postponed child tx\n+                    iter = clearedTxs.top();\n+                    clearedTxs.pop();\n+                }\n \n-            const CTransaction& tx = iter->GetTx();\n+                if (inBlock.count(iter))\n+                    continue; // could have been added to the priorityBlock\n \n-            bool fOrphan = false;\n-            BOOST_FOREACH(CTxMemPool::txiter parent, mempool.GetMemPoolParents(iter))\n-            {\n-                if (!inBlock.count(parent)) {\n-                    fOrphan = true;\n-                    break;\n+                const CTransaction& tx = iter->GetTx();\n+\n+                bool fOrphan = false;\n+                BOOST_FOREACH(CTxMemPool::txiter parent, mempool.GetMemPoolParents(iter))\n+                {\n+                    if (!inBlock.count(parent)) {\n+                        fOrphan = true;\n+                        break;\n+                    }\n+                }\n+                if (fOrphan) {\n+                    if (priorityTx)\n+                        waitPriMap.insert(std::make_pair(iter,actualPriority));\n+                    else\n+                        waitSet.insert(iter);\n+                    continue;\n                 }\n-            }\n-            if (fOrphan) {\n-                if (priorityTx)\n-                    waitPriMap.insert(std::make_pair(iter,actualPriority));\n-                else\n-                    waitSet.insert(iter);\n-                continue;\n-            }\n \n-            unsigned int nTxSize = iter->GetTxSize();\n-            if (fPriorityBlock &&\n-                (nBlockSize + nTxSize >= nBlockPrioritySize || !AllowFree(actualPriority))) {\n-                fPriorityBlock = false;\n-                waitPriMap.clear();\n-            }\n-            if (!priorityTx &&\n-                (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockSize >= nBlockMinSize)) {\n-                break;\n-            }\n-            if (nBlockSize + nTxSize >= nBlockMaxSize) {\n-                if (nBlockSize >  nBlockMaxSize - 100 || lastFewTxs > 50) {\n+                unsigned int nTxSize = iter->GetTxSize();\n+                if (fPriorityBlock &&\n+                    (nBlockSize + nTxSize >= nBlockPrioritySize || !AllowFree(actualPriority))) {\n+                    fPriorityBlock = false;\n+                    waitPriMap.clear();\n+                }\n+                if (!priorityTx &&\n+                    (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockSize >= nBlockMinSize)) {\n                     break;\n                 }\n-                // Once we're within 1000 bytes of a full block, only look at 50 more txs\n-                // to try to fill the remaining space.\n-                if (nBlockSize > nBlockMaxSize - 1000) {\n-                    lastFewTxs++;\n+                if (nBlockSize + nTxSize >= nBlockMaxSize) {\n+                    if (nBlockSize >  nBlockMaxSize - 100 || lastFewTxs > 50) {\n+                        break;\n+                    }\n+                    // Once we're within 1000 bytes of a full block, only look at 50 more txs\n+                    // to try to fill the remaining space.\n+                    if (nBlockSize > nBlockMaxSize - 1000) {\n+                        lastFewTxs++;\n+                    }\n+                    continue;\n                 }\n-                continue;\n-            }\n \n-            if (!IsFinalTx(tx, nHeight, nLockTimeCutoff))\n-                continue;\n+                if (!IsFinalTx(tx, nHeight, nLockTimeCutoff))\n+                    continue;\n \n-            unsigned int nTxSigOps = iter->GetSigOpCount();\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS) {\n-                if (nBlockSigOps > MAX_BLOCK_SIGOPS - 2) {\n-                    break;\n+                unsigned int nTxSigOps = iter->GetSigOpCount();\n+                if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS) {\n+                    if (nBlockSigOps > MAX_BLOCK_SIGOPS - 2) {\n+                        break;\n+                    }\n+                    continue;\n                 }\n-                continue;\n-            }\n \n-            CAmount nTxFees = iter->GetFee();\n-            // Added\n-            pblock->vtx.push_back(tx);\n-            pblocktemplate->vTxFees.push_back(nTxFees);\n-            pblocktemplate->vTxSigOps.push_back(nTxSigOps);\n-            nBlockSize += nTxSize;\n-            ++nBlockTx;\n-            nBlockSigOps += nTxSigOps;\n-            nFees += nTxFees;\n-\n-            if (fPrintPriority)\n-            {\n-                double dPriority = iter->GetPriority(nHeight);\n-                CAmount dummy;\n-                mempool.ApplyDeltas(tx.GetHash(), dPriority, dummy);\n-                LogPrintf(\"priority %.1f fee %s txid %s\\n\",\n-                          dPriority , CFeeRate(iter->GetModifiedFee(), nTxSize).ToString(), tx.GetHash().ToString());\n-            }\n+                CAmount nTxFees = iter->GetFee();\n+                // Added\n+                pblock->vtx.push_back(tx);\n+                pblocktemplate->vTxFees.push_back(nTxFees);\n+                pblocktemplate->vTxSigOps.push_back(nTxSigOps);\n+                nBlockSize += nTxSize;\n+                ++nBlockTx;\n+                nBlockSigOps += nTxSigOps;\n+                nFees += nTxFees;\n+\n+                if (fPrintPriority)\n+                {\n+                    double dPriority = iter->GetPriority(nHeight);\n+                    CAmount dummy;\n+                    mempool.ApplyDeltas(tx.GetHash(), dPriority, dummy);\n+                    LogPrintf(\"priority %.1f fee %s txid %s\\n\",\n+                              dPriority , CFeeRate(iter->GetModifiedFee(), nTxSize).ToString(), tx.GetHash().ToString());\n+                }\n \n-            inBlock.insert(iter);\n+                inBlock.insert(iter);\n \n-            // Add transactions that depend on this one to the priority queue\n-            BOOST_FOREACH(CTxMemPool::txiter child, mempool.GetMemPoolChildren(iter))\n-            {\n-                if (fPriorityBlock) {\n-                    waitPriIter wpiter = waitPriMap.find(child);\n-                    if (wpiter != waitPriMap.end()) {\n-                        vecPriority.push_back(TxCoinAgePriority(wpiter->second,child));\n-                        std::push_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n-                        waitPriMap.erase(wpiter);\n+                // Add transactions that depend on this one to the priority queue\n+                BOOST_FOREACH(CTxMemPool::txiter child, mempool.GetMemPoolChildren(iter))\n+                {\n+                    if (fPriorityBlock) {\n+                        waitPriIter wpiter = waitPriMap.find(child);\n+                        if (wpiter != waitPriMap.end()) {\n+                            vecPriority.push_back(TxCoinAgePriority(wpiter->second,child));\n+                            std::push_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+                            waitPriMap.erase(wpiter);\n+                        }\n                     }\n-                }\n-                else {\n-                    if (waitSet.count(child)) {\n-                        clearedTxs.push(child);\n-                        waitSet.erase(child);\n+                    else {\n+                        if (waitSet.count(child)) {\n+                            clearedTxs.push(child);\n+                            waitSet.erase(child);\n+                        }\n                     }\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "b3c5a913321bee8fe1660048176247d73b60e101",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2M1YTkxMzMyMWJlZThmZTE2NjAwNDgxNzYyNDdkNzNiNjBlMTAx",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-12-08T02:43:09Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-12-08T02:43:09Z"
      },
      "message": "Move nMedianTimePast into select transactions block.",
      "tree": {
        "sha": "1ed57fe8d6d038155912aa269ef619a7bced8330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ed57fe8d6d038155912aa269ef619a7bced8330"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3c5a913321bee8fe1660048176247d73b60e101",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3c5a913321bee8fe1660048176247d73b60e101",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3c5a913321bee8fe1660048176247d73b60e101",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3c5a913321bee8fe1660048176247d73b60e101/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16ca72bd68bc6dcf411feb69b2a00535d75a1c42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16ca72bd68bc6dcf411feb69b2a00535d75a1c42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16ca72bd68bc6dcf411feb69b2a00535d75a1c42"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "217c9b0bf06963dc94e73fe998deb5cb148b6a62",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3c5a913321bee8fe1660048176247d73b60e101/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3c5a913321bee8fe1660048176247d73b60e101/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=b3c5a913321bee8fe1660048176247d73b60e101",
        "patch": "@@ -135,9 +135,10 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         CBlockIndex* pindexPrev = chainActive.Tip();\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n-        const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n \n         if (!fBuildEmptyBlock) {\n+            const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n+\n             int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n                                     ? nMedianTimePast\n                                     : pblock->GetBlockTime();"
      }
    ]
  }
]