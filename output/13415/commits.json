[
  {
    "sha": "28057de21a51d2162c46f3dee9bd16348c6bc484",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODA1N2RlMjFhNTFkMjE2MmM0NmYzZGVlOWJkMTYzNDhjNmJjNDg0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-06-07T18:54:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-15T19:44:01Z"
      },
      "message": "rpc: Add testblocktemplatevalidity",
      "tree": {
        "sha": "1aefedb5fa7c8ddb49399aa27225464813c1d6c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1aefedb5fa7c8ddb49399aa27225464813c1d6c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28057de21a51d2162c46f3dee9bd16348c6bc484",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28057de21a51d2162c46f3dee9bd16348c6bc484",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28057de21a51d2162c46f3dee9bd16348c6bc484",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28057de21a51d2162c46f3dee9bd16348c6bc484/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e393a18b513e11697db8585c46a8c8b2fd3238cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e393a18b513e11697db8585c46a8c8b2fd3238cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e393a18b513e11697db8585c46a8c8b2fd3238cd"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 50,
      "deletions": 3
    },
    "files": [
      {
        "sha": "90024d127e0af6624c0cbed4f5424e64b51fd00a",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28057de21a51d2162c46f3dee9bd16348c6bc484/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28057de21a51d2162c46f3dee9bd16348c6bc484/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=28057de21a51d2162c46f3dee9bd16348c6bc484",
        "patch": "@@ -258,6 +258,50 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n     return true;\n }\n \n+static UniValue testblocktemplatevalidity(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"testblocktemplatevalidity <hexdata>\\n\"\n+            \"Decode the given hexdata as a block and return if it is a valid template to work on.\\n\"\n+            \"It des not check if the block has sufficient work.\\n\"\n+            \"The block must be built on top of the current tip.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexdata\\\"      (string, required) The hex encoded block data.\\n\"\n+            \"\\nResult:\\n\"\n+            \" {\\n\"\n+            \"  \\\"block_hash\\\"     (string) The block hash in hex\\n\"\n+            \"  \\\"valid_template\\\" (boolean) If the block template is valid to work on\\n\"\n+            \"  \\\"invalid_msg\\\"    (string) Rejection string (only present when 'valid_template' is false)\\n\"\n+            \" }\\n\"\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"testblocktemplatevalidity\", \"\\\"aabbcc\\\"\") +\n+            HelpExampleRpc(\"testblocktemplatevalidity\", \"\\\"aabbcc\\\"\"));\n+    }\n+\n+    CBlock block;\n+    if (!DecodeHexBlk(block, request.params[0].get_str())) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n+    }\n+\n+    LOCK(cs_main);\n+    CBlockIndex* const tip = ::chainActive.Tip();\n+\n+    // TestBlockValidity only supports blocks built on the current Tip\n+    if (block.hashPrevBlock != tip->GetBlockHash()) {\n+        throw JSONRPCError(RPC_VERIFY_ERROR, \"Must submit block that is built on the current tip (\" + tip->GetBlockHash().GetHex() + \")\");\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"block_hash\", block.GetHash().GetHex());\n+    CValidationState state;\n+    bool valid_template = TestBlockValidity(state, Params(), block, /* pindexPrev */ tip, /* fCheckPOW */ false, /* fCheckMerkleRoot */ true);\n+    result.pushKV(\"valid_template\", valid_template);\n+    if (!valid_template) {\n+        result.pushKV(\"invalid_msg\", FormatStateMessage(state));\n+    }\n+    return result;\n+}\n \n // NOTE: Assumes a conclusive result; if result is inconclusive, it must be handled by caller\n static UniValue BIP22ValidationResult(const CValidationState& state)\n@@ -932,11 +976,13 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+// clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       {\"nblocks\",\"height\"} },\n     { \"mining\",             \"getmininginfo\",          &getmininginfo,          {} },\n+    { \"mining\",             \"testblocktemplatevalidity\",&testblocktemplatevalidity,{\"hexdata\"} },\n     { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  {\"txid\",\"dummy\",\"fee_delta\"} },\n     { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       {\"template_request\"} },\n     { \"mining\",             \"submitblock\",            &submitblock,            {\"hexdata\",\"dummy\"} },\n@@ -949,6 +995,7 @@ static const CRPCCommand commands[] =\n \n     { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         {\"conf_target\", \"threshold\"} },\n };\n+// clang-format on\n \n void RegisterMiningRPCCommands(CRPCTable &t)\n {"
      },
      {
        "sha": "8efa5f237cf83d41bb04bbc1d296cde7d0995de5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28057de21a51d2162c46f3dee9bd16348c6bc484/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28057de21a51d2162c46f3dee9bd16348c6bc484/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=28057de21a51d2162c46f3dee9bd16348c6bc484",
        "patch": "@@ -170,7 +170,7 @@ class CChainState {\n     // Block (dis)connection on a given view:\n     DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n     bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                    CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false);\n+                    CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false) const;\n \n     // Block disconnection on our pcoinsTip:\n     bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool);\n@@ -1803,7 +1803,7 @@ static int64_t nBlocksTotal = 0;\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck)\n+                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck) const\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n@@ -3583,7 +3583,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!g_chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!g_chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, /* fJustCheck */ true))\n         return false;\n     assert(state.IsValid());\n "
      }
    ]
  }
]