ryanofsky,2020-09-08 16:22:44,"This PR is an alternative to #19865. I still think #19865 is a better approach would prefer it. I think having two lock assertions is unnecessarily confusing and while AssertLockHeld was useful historically before we had compile-time checks, now it just adds noise and inconsistency. If we are going to have two assertions, though, at least this PR should make it easier to compare and choose between",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-688989957,688989957,
hebasto,2020-09-08 16:38:12,"`LockAssertion` was used (in a controversial way) in #19668 as it resolved problem. The initial #19668 version (https://github.com/hebasto/bitcoin/commits/pr19668.01) also had a commit that removes `LockAssertion`.\n\nSo, Concept ACK on better tooling and naming.",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-688999279,688999279,
ajtowns,2020-09-08 18:11:27,"> This PR is an alternative to #19865. I still think #19865 is a better approach would prefer it.\n\nI think there's two separate issues, (1) naming/behaviour for ""we can't prove to the compiler this is correct, so we'll just tell it to trust us"" and (2) ""do we need to manually add code for runtime checks that just duplicate the compile time checks?"". I think this improves (1) and #19685 is most",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-689048728,689048728,
ryanofsky,2020-09-17 20:36:42,"In IRC http://www.erisian.com.au/bitcoin-core-dev/log-2020-09-17.html#l-644, it was mentioned that WeaklyAssertLockHeld name is confusing. The name isn't intended to be confusing, but it is intended to discourage use. If you are writing an assert you should always favor `AssertLockHeld` over `WeaklyAssertLockHeld` and only fall back when the compiler forces you to because it can't prove that the m",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-694486228,694486228,
ryanofsky,2020-09-18 11:53:44,"> It is confusing because you can't weakly call `abort()` or semi-`exit()`.\n\nThis is really funny. The function is not called WeaklyAbort or WeaklyExit! It is called WeaklyAssert! \n\nAssert in english means [to state or declare positively](https://www.merriam-webster.com/dictionary/assert), ""often forcefully or aggressively"" like ""The suspect continued to assert his innocence."" You can stro",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-694824471,694824471,
aaronpuchert,2020-09-18 12:19:26,"FWIW, I also think ""weakly"" is something I wouldn't know how to interpret into this context. I've added a suggestion `{Proven,Unproven}AssertLockHeld` that isn't perfect but goes into a direction that I find worth exploring: one is a proven assertion (you could say a theorem) and the other an unproven assertion (you could say a conjecture or maybe axiom).",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-694834825,694834825,
ryanofsky,2020-09-18 12:30:35,"> I've added a suggestion `{Proven,Unproven}AssertLockHeld` that isn't perfect but goes into a direction that I find worth exploring: one is a proven assertion (you could say a theorem) and the other an unproven assertion (you could say a conjecture or maybe axiom).\n\nNice. I like UnprovenAssertLockHeld. Maybe UnsafelyAssertLockHeld would work too.\n",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-694839312,694839312,
vasild,2020-09-18 14:52:33,"Just to mention that, given that #19970 and #19918 overlap, I think #19918 (this PR) is better (if the weak name is changed).\n\nMy preference is for:\n`FORCE_THE_COMPILER_TO_THINK_THAT_WE_OWN_THE_MUTEX_AND_ASSERT_AT_RUNTIME_IF_WE_DONT()`, it would discourage usage, right?",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-694915308,694915308,
ryanofsky,2020-09-18 15:28:53,"> Just to mention that, given that #19970 and #19918 overlap, I think #19918 (this PR) is better (if the weak name is changed).\n> \n> My preference is for:\n> `FORCE_THE_COMPILER_TO_THINK_THAT_WE_OWN_THE_MUTEX_AND_ASSERT_AT_RUNTIME_IF_WE_DONT()`, it would discourage usage, right?\n\nSure, I assume that is a joke suggestion, but I am happy with all the alternate suggested pairs in https://git",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-694934771,694934771,
ajtowns,2020-09-19 06:34:48,"> `AssertLockHeld` states that the lock is held with confidence, because the compiler can check that the statement is true at compile time. `WeaklyAssertLockHeld` makes the statement with less confidence because the compiler can't check that it is true.\n\nFrom the perspective of the person writing the code, this seems exactly backwards: if you're not getting compile time checks, and have disabl",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-695173118,695173118,
ryanofsky,2020-09-19 11:48:10,"re: https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-695173118\n\nSure, I'm saying weak=unprovable and strong=provable, and you're saying actually strong=unprovable, and weak=provable. I think it's overthinking a little, but very neat, and I'm happy to use any names.\n\nAfter names are chosen, everything else in this approach is pretty simple. It does have two asserts, so it isn't qu",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-695203628,695203628,
ryanofsky,2020-09-19 12:11:06,After tough work getting table not to horizontally scroll I added ASSERT_EXCLUSIVE_LOCK_REQUIREMENT_SATISFIED to table of suggested names in https://github.com/bitcoin-core/bitcoin-devwiki/wiki/AssertLockHeld-PRs#disadvantages-of-2a-approach,https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-695205722,695205722,
DrahtBot,2020-09-19 13:43:55,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19979 (Use proper TSA attributes (attempt two) by hebasto)\n* #19970 (sync.h: fix LockAssertion error reporting by ajtown",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-695215267,695215267,
ryanofsky,2020-09-21 05:05:35,"Strongly updated 5c9eb2515a9e1d9ac58b29e5d8adb19748b39b17 -> 3f8f78f135d9e52f586e2a1a8af9899612eff5e3 ([`pr/lockb.2`](https://github.com/ryanofsky/bitcoin/commits/pr/lockb.2) -> [`pr/lockb.3`](https://github.com/ryanofsky/bitcoin/commits/pr/lockb.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/lockb.2..pr/lockb.3)). Just a few changes to wording to address some concerns.\n",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-695901380,695901380,
ryanofsky,2020-09-21 14:30:44,"@vasild, I don't understand the way you are looking at the ASSERT_EXCLUSIVE_LOCK function (regardless of which name you would choose for the function). You seem to believe according to your comments here and in https://github.com/bitcoin/bitcoin/pull/19979#pullrequestreview-492559322 that ASSERT_EXCLUSIVE_LOCK is less preferable to NO_THREAD_SAFETY_ANALYSIS because ASSERT_EXCLUSIVE_LOCK is ""extort",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-696154029,696154029,
vasild,2020-09-23 09:08:53,"> You seem to believe ... that `ASSERT_EXCLUSIVE_LOCK` is less preferable to `NO_THREAD_SAFETY_ANALYSIS`\n\nNo, I believe [having two assert functions] is less preferable to [one assert function + `NO_THREAD_SAFETY_ANALYSIS` in some exceptional places].\n\nOverall I think that the most important thing is to have a clean interface (whatever is exported by `sync.h`) - one that is impossible to m",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-697237256,697237256,
DrahtBot,2020-09-23 16:14:51,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-697621982,697621982,
MarcoFalke,2020-10-19 09:53:51,"![Untitled png](https://user-images.githubusercontent.com/6399679/96429838-afe1a500-1201-11eb-8ead-cf942393d790.jpg)\n",https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-711957572,711957572,
MarcoFalke,2020-10-25 13:42:33,Closing for now. Let me know if I should reopen,https://github.com/bitcoin/bitcoin/pull/19918#issuecomment-716150486,716150486,
ajtowns,2020-09-08 16:58:10,"developer-notes currently recommends ""Combine annotations in function declarations with run-time asserts in function definitions"", think these recommendations are better off there, and certainly having conflicting recommendations is worse.\n\nI think the only case where it's useful for virtual methods is if the parent class doesn't need the lock, but the child class does -- in that case invoking",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r485066540,485066540,src/sync.h
ajtowns,2020-09-08 18:04:08,"Maybe `LOCK_ALREADY_HELD(mutex)` would be better, comparable with `LOCK(mutex)`? This isn't a particularly weak assertion in anyway I can see, it's just one the compiler isn't able to verify at compile time.\n\n""Assert that a mutex was already locked in any possible way this code could be reached. If DEBUG_LOCKORDER is defined, a runtime check that the mutex was actually locked by this thread wi",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r485102739,485102739,src/sync.h
vasild,2020-09-14 07:50:02,"The compile time check is not an assertion (like `static_assert`), but is a warning. The code will get compiled with it if `--enable-werror` is not used during `./configure`. Maybe reword to:\n\n> Produce a compilation warning and assert at run time (only if `DEBUG_LOCKORDER` is defined) that a mutex is locked.",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487716721,487716721,src/sync.h
vasild,2020-09-14 07:54:53,Maybe just drop the above paragraph as it contradicts with the developer nodes? IMO the latter is correct.,https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487719492,487719492,src/sync.h
vasild,2020-09-14 08:02:18,"In non-debug build a code like:\n\n```cpp\nWeaklyAssertLockHeld(mutex_required_for_x);\nx = 1;\n```\n\nwhere the mutex is not held will **not** produce a compilation warning and will **not** assert at runtime. So the unprotected access will actually happen. This is because `ASSERT_EXCLUSIVE_LOCK` tells the compiler we are going to check, but we actually don't check (in non-debug build). May",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487723681,487723681,src/sync.h
vasild,2020-09-14 08:09:39,"As above, maybe replace ""assert at compile time"" with ""warn at compile time""?",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487727569,487727569,src/sync.h
ryanofsky,2020-09-14 20:23:26,"re: https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487716721\n\n> The compile time check is not an assertion (like `static_assert`), but is a warning.\n\nThanks, on CI these trigger fatal build errors and that seems like the most important thing, but I added a note about varying build behavior.",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r488198264,488198264,src/sync.h
ryanofsky,2020-09-14 20:23:43,"re: https://github.com/bitcoin/bitcoin/pull/19918#discussion_r485066540\n\n> developer-notes currently recommends ""Combine annotations in function declarations with run-time asserts in function definitions"", think these recommendations are better off there, and certainly having conflicting recommendations is worse.\n\nI don't love that recommendation, and the text doesn't give a rationale for ",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r488198378,488198378,src/sync.h
ryanofsky,2020-09-14 20:24:01,"re: https://github.com/bitcoin/bitcoin/pull/19918#discussion_r485102739\n\n> Maybe `LOCK_ALREADY_HELD(mutex)` would be better, comparable with `LOCK(mutex)`? [...]\n\nThis seems like a brain dump and I can't figure out the suggestion. Is it to rename one macro or rename two macros?\n\nThe point of this PR is to be a fallback if #19865 is rejected. #19865 says there should only be one assert:",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r488198543,488198543,src/sync.h
ryanofsky,2020-09-14 20:24:12,"re: https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487727569\n\n> As above, maybe replace ""assert at compile time"" with ""warn at compile time""?\n\nThanks, added a note about build differences. Assert is in the name of the function and is the commonly used name for a correctness check which isn't supposed to affect normal behavior, so I didn't change the top description.",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r488198641,488198641,src/sync.h
ajtowns,2020-09-14 22:45:36,"> But given that, it makes sense to use `AssertLockHeld` instead of `WeaklyAssertLockHeld` to provide runtime checking inside a lambda annotated with `EXCLUSIVE_LOCKS_REQUIRED` called through a `std::function`\n\nBoth the current `LockAssertion` and your proposed `WeaklyAssertLockHeld` do runtime checking, so there's no advantage there.\n\nI don't think AssertLockHeld in lambdas ever makes muc",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r488279455,488279455,src/sync.h
ajtowns,2020-09-14 22:53:44,"> This seems like a brain dump and I can't figure out the suggestion. Is it to rename one macro or rename two macros?\n\nJust to rename ""WeaklyAssertLockHeld"" to ""LOCK_ALREADY_HELD"" or similar.\n\nI don't think it's accurate to say one is ""less-preferred"" to the other -- they do different things, and are appropriate in different circumstances. Hopefully the circumstances where WeaklyAssertLock",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r488282255,488282255,src/sync.h
aaronpuchert,2020-09-16 21:46:41,"Thread safety attributes sit on declarations and not on types, but we can check the virtual overriding case. I'll have to look into that. (Theoretically it should be part of the type, but that would interact with other language features like overloading, so it was decided not to put it there.)",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r489772952,489772952,src/sync.h
aaronpuchert,2020-09-16 22:04:12,"> Note that ASSERT_EXCLUSIVE_LOCK has slightly weird scoping behaviour [...]\n\nThis is unrelated to scopes, the capability is assumed to be held after the assertion, regardless of whether we leave any scopes. (Think about it, there is no destructor for the assertion, so why would the scope ending change anything?)\n\nThis analysis works on the source-level CFG. We can inspect this by passing ",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r489780104,489780104,src/sync.h
ajtowns,2020-09-17 01:01:22,"Looking through the ""thread safety"" issues on bugzilla, this seems similar to the idea ""We could warn in -Wthread-safety-attributes if a declaration has attributes that weren't visible on an earlier declaration."" from https://bugs.llvm.org/show_bug.cgi?id=42849 ",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r489837659,489837659,src/sync.h
ryanofsky,2020-09-17 18:34:40,"re: https://github.com/bitcoin/bitcoin/pull/19918#discussion_r488282255\n\n> Just to rename ""WeaklyAssertLockHeld"" to ""LOCK_ALREADY_HELD"" or similar.\n\nI'm still not understanding why this is a good idea, but I made a space for it https://github.com/bitcoin-core/bitcoin-devwiki/wiki/AssertLockHeld-PRs",https://github.com/bitcoin/bitcoin/pull/19918#discussion_r490472714,490472714,src/sync.h
