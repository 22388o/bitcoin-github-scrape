[
  {
    "sha": "617661703ac29e0744f21de74501d033fdc53ff6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTc2NjE3MDNhYzI5ZTA3NDRmMjFkZTc0NTAxZDAzM2ZkYzUzZmY2",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-06T21:05:25Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-13T15:11:35Z"
      },
      "message": "validation: make CChainState::m_mempool optional\n\nSince we now have multiple chainstate objects, only one of them is active at any given\ntime. An active chainstate has a mempool, but there's no point to others having one.\n\nThis change will simplify proposed assumeutxo semantics. See the discussion here:\nhttps://github.com/bitcoin/bitcoin/pull/15606#pullrequestreview-692965905\n\nCo-authored-by: Russell Yanofsky <russ@yanofsky.org>",
      "tree": {
        "sha": "0c1914add1d688e1df8025516f555e89ee782544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c1914add1d688e1df8025516f555e89ee782544"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/617661703ac29e0744f21de74501d033fdc53ff6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmDtrSkACgkQepNdrbLE\nTwW7hA//YWGNbwCxw/7W63nl6zlDwNaXjWs5RtYR4LheMgRwMgy6z52cpNu1FpyI\nGVt3H33kma9mtPHcgR6srxmXxHK6POXl2o/RJ3bHJXt3ETGMRleg3XXw8j6lgxDL\nZwDTbMBBTcaqm+Kv9XkU6mdN4uxBvNalTRUct0K7u3N/Xwz3KocU5NstsYIe66tO\n+Ce697MtuZXbi5ubyZhC+DgUBcDz+nE+mA9jNMIn2WQM+neSHgH3cfemfAOh2oOV\nlvQKl+gtty4FM4t5ABs7c8X9fbHeR62huOrXKSHuX6YTf2NpTeE0kNOE9/vqvJPD\nwlUWtrIXzixhaZp+HT4+ptaecVJGLznNKfPSHjCPVqwHYSGN74tsYznFvLh3GDhs\nuyR/bYjZ+0E9bDv/9SIGSTC20azSKwtz1JErFOlyd5Z3X3VsTQ13YWxEu7QjjYl1\ng8YLiD+bL23nn4t76pmFbe9XCBDCknL/j2PoN5WjVUc9IUXdHrZruOvCWyU89+yJ\n2vDMPaYWbLy0Rcs7u3bvXexBS4OQaMNHs8eG+83pkpcJHI4XZ0qUIDHBiRQVmFfJ\nQzhcitZz7IHX36iAhVjq0PXM0l7Fp1BRbNWaVpj2JrkNZF3Z8C3HFAWk7mAsBE4F\nmqbRMp7y5pKSXymYKQ0yf2kv1X5IPCKS+X1ZBYcvvco0j2PEBeU=\n=5SPH\n-----END PGP SIGNATURE-----",
        "payload": "tree 0c1914add1d688e1df8025516f555e89ee782544\nparent 088b348dbe82689ce1782653c8fdcebb3b636eb5\nauthor James O'Beirne <james.obeirne@pm.me> 1625605525 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1626189095 -0400\n\nvalidation: make CChainState::m_mempool optional\n\nSince we now have multiple chainstate objects, only one of them is active at any given\ntime. An active chainstate has a mempool, but there's no point to others having one.\n\nThis change will simplify proposed assumeutxo semantics. See the discussion here:\nhttps://github.com/bitcoin/bitcoin/pull/15606#pullrequestreview-692965905\n\nCo-authored-by: Russell Yanofsky <russ@yanofsky.org>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/617661703ac29e0744f21de74501d033fdc53ff6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/617661703ac29e0744f21de74501d033fdc53ff6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/617661703ac29e0744f21de74501d033fdc53ff6/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088b348dbe82689ce1782653c8fdcebb3b636eb5"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 64,
      "deletions": 40
    },
    "files": [
      {
        "sha": "d85dc2380ec5d3cd40b9c8a46c181598e59262ea",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -1349,7 +1349,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             const int64_t load_block_index_start_time = GetTimeMillis();\n             try {\n                 LOCK(cs_main);\n-                chainman.InitializeChainstate(*Assert(node.mempool));\n+                chainman.InitializeChainstate(Assert(node.mempool.get()));\n                 chainman.m_total_coinstip_cache = nCoinCacheUsage;\n                 chainman.m_total_coinsdb_cache = nCoinDBCache;\n "
      },
      {
        "sha": "d9d236be1d5e66c24c12f5db66f9bcaf256b6c53",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -180,7 +180,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     // instead of unit tests, but for now we need these here.\n     RegisterAllCoreRPCCommands(tableRPC);\n \n-    m_node.chainman->InitializeChainstate(*m_node.mempool);\n+    m_node.chainman->InitializeChainstate(m_node.mempool.get());\n     m_node.chainman->ActiveChainstate().InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     assert(!m_node.chainman->ActiveChainstate().CanFlushToDisk());"
      },
      {
        "sha": "2893b412fbabaf91883a168d037899253428d19a",
        "filename": "src/test/validation_chainstate_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/test/validation_chainstate_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/test/validation_chainstate_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstate_tests.cpp?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -35,7 +35,7 @@ BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)\n         return outp;\n     };\n \n-    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(mempool));\n+    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(&mempool));\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     WITH_LOCK(::cs_main, c1.InitCoinsCache(1 << 23));"
      },
      {
        "sha": "0bd378631b97f2ec6c7c5b0b55da38faf0bdcfd8",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -36,7 +36,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n \n     // Create a legacy (IBD) chainstate.\n     //\n-    CChainState& c1 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(mempool));\n+    CChainState& c1 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(&mempool));\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -66,7 +66,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     //\n     const uint256 snapshot_blockhash = GetRandHash();\n     CChainState& c2 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(\n-        mempool, snapshot_blockhash));\n+        &mempool, snapshot_blockhash));\n     chainstates.push_back(&c2);\n \n     BOOST_CHECK_EQUAL(manager.SnapshotBlockhash().value(), snapshot_blockhash);\n@@ -129,7 +129,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n \n     // Create a legacy (IBD) chainstate.\n     //\n-    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(mempool));\n+    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(&mempool));\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -147,7 +147,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n \n     // Create a snapshot-based chainstate.\n     //\n-    CChainState& c2 = WITH_LOCK(cs_main, return manager.InitializeChainstate(mempool, GetRandHash()));\n+    CChainState& c2 = WITH_LOCK(cs_main, return manager.InitializeChainstate(&mempool, GetRandHash()));\n     chainstates.push_back(&c2);\n     c2.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);"
      },
      {
        "sha": "2572e2025b8f40da8c630de452dc1d849e3671c4",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -20,7 +20,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n {\n     CTxMemPool mempool;\n     BlockManager blockman{};\n-    CChainState chainstate{mempool, blockman};\n+    CChainState chainstate{&mempool, blockman};\n     chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n     WITH_LOCK(::cs_main, chainstate.InitCoinsCache(1 << 10));\n     CTxMemPool tx_pool{};"
      },
      {
        "sha": "1658b2cb763c17783d42995e96ca300a503f4189",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 25,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -329,7 +329,8 @@ static bool IsCurrentForFeeEstimation(CChainState& active_chainstate) EXCLUSIVE_\n     return true;\n }\n \n-/* Make mempool consistent after a reorg, by re-adding or recursively erasing\n+/**\n+ * Make mempool consistent after a reorg, by re-adding or recursively erasing\n  * disconnected block transactions from the mempool, and also removing any\n  * other transactions from the mempool that are no longer valid given the new\n  * tip/height.\n@@ -1208,7 +1209,7 @@ void CoinsViews::InitCache()\n     m_cacheview = std::make_unique<CCoinsViewCache>(&m_catcherview);\n }\n \n-CChainState::CChainState(CTxMemPool& mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash)\n+CChainState::CChainState(CTxMemPool* mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash)\n     : m_mempool(mempool),\n       m_params(::Params()),\n       m_blockman(blockman),\n@@ -2053,7 +2054,7 @@ bool CChainState::FlushStateToDisk(\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n \n-        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(&m_mempool);\n+        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(m_mempool);\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             // make sure we don't prune above the blockfilterindexes bestblocks\n@@ -2205,11 +2206,13 @@ static void AppendWarning(bilingual_str& res, const bilingual_str& warn)\n }\n \n /** Check warning conditions and do some notifications on new chain tip set. */\n-static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const CChainParams& chainParams, CChainState& active_chainstate)\n+static void UpdateTip(CTxMemPool* mempool, const CBlockIndex* pindexNew, const CChainParams& chainParams, CChainState& active_chainstate)\n     EXCLUSIVE_LOCKS_REQUIRED(::cs_main)\n {\n     // New best block\n-    mempool.AddTransactionsUpdated(1);\n+    if (mempool) {\n+        mempool->AddTransactionsUpdated(1);\n+    }\n \n     {\n         LOCK(g_best_block_mutex);\n@@ -2254,7 +2257,7 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n bool CChainState::DisconnectTip(BlockValidationState& state, DisconnectedBlockTransactions* disconnectpool)\n {\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(m_mempool.cs);\n+    if (m_mempool) AssertLockHeld(m_mempool->cs);\n \n     CBlockIndex *pindexDelete = m_chain.Tip();\n     assert(pindexDelete);\n@@ -2280,15 +2283,15 @@ bool CChainState::DisconnectTip(BlockValidationState& state, DisconnectedBlockTr\n         return false;\n     }\n \n-    if (disconnectpool) {\n+    if (disconnectpool && m_mempool) {\n         // Save transactions to re-add to mempool at end of reorg\n         for (auto it = block.vtx.rbegin(); it != block.vtx.rend(); ++it) {\n             disconnectpool->addTransaction(*it);\n         }\n         while (disconnectpool->DynamicMemoryUsage() > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n             // Drop the earliest entry, and remove its children from the mempool.\n             auto it = disconnectpool->queuedTx.get<insertion_order>().begin();\n-            m_mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n+            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n             disconnectpool->removeEntry(it);\n         }\n     }\n@@ -2357,7 +2360,7 @@ class ConnectTrace {\n bool CChainState::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool)\n {\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(m_mempool.cs);\n+    if (m_mempool) AssertLockHeld(m_mempool->cs);\n \n     assert(pindexNew->pprev == m_chain.Tip());\n     // Read block from disk.\n@@ -2401,8 +2404,10 @@ bool CChainState::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime5 - nTime4) * MILLI, nTimeChainState * MICRO, nTimeChainState * MILLI / nBlocksTotal);\n     // Remove conflicting transactions from the mempool.;\n-    m_mempool.removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n-    disconnectpool.removeForBlock(blockConnecting.vtx);\n+    if (m_mempool) {\n+        m_mempool->removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n+        disconnectpool.removeForBlock(blockConnecting.vtx);\n+    }\n     // Update m_chain & related variables.\n     m_chain.SetTip(pindexNew);\n     UpdateTip(m_mempool, pindexNew, m_params, *this);\n@@ -2495,7 +2500,7 @@ void CChainState::PruneBlockIndexCandidates() {\n bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n {\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(m_mempool.cs);\n+    if (m_mempool) AssertLockHeld(m_mempool->cs);\n \n     const CBlockIndex* pindexOldTip = m_chain.Tip();\n     const CBlockIndex* pindexFork = m_chain.FindFork(pindexMostWork);\n@@ -2507,7 +2512,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n         if (!DisconnectTip(state, &disconnectpool)) {\n             // This is likely a fatal error, but keep the mempool consistent,\n             // just in case. Only remove from the mempool in this case.\n-            UpdateMempoolForReorg(*this, m_mempool, disconnectpool, false);\n+            if (m_mempool) UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, false);\n \n             // If we're unable to disconnect a block during normal operation,\n             // then that is a failure of our local system -- we should abort\n@@ -2551,7 +2556,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n                     // A system error occurred (disk space, database error, ...).\n                     // Make the mempool consistent with the current tip, just in case\n                     // any observers try to use it before shutdown.\n-                    UpdateMempoolForReorg(*this, m_mempool, disconnectpool, false);\n+                    if (m_mempool) UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, false);\n                     return false;\n                 }\n             } else {\n@@ -2565,12 +2570,12 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n         }\n     }\n \n-    if (fBlocksDisconnected) {\n+    if (fBlocksDisconnected && m_mempool) {\n         // If any blocks were disconnected, disconnectpool may be non empty.  Add\n         // any disconnected transactions back to the mempool.\n-        UpdateMempoolForReorg(*this, m_mempool, disconnectpool, true);\n+        UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, true);\n     }\n-    m_mempool.check(*this);\n+    if (m_mempool) m_mempool->check(*this);\n \n     CheckForkWarningConditions();\n \n@@ -2642,7 +2647,8 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n \n         {\n             LOCK(cs_main);\n-            LOCK(m_mempool.cs); // Lock transaction pool for at least as long as it takes for connectTrace to be consumed\n+            // Lock transaction pool for at least as long as it takes for connectTrace to be consumed\n+            LOCK(MempoolMutex());\n             CBlockIndex* starting_tip = m_chain.Tip();\n             bool blocks_connected = false;\n             do {\n@@ -2792,7 +2798,9 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, CBlockIndex* pind\n         LimitValidationInterfaceQueue();\n \n         LOCK(cs_main);\n-        LOCK(m_mempool.cs); // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is called after DisconnectTip without unlocking in between\n+        // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is\n+        // called after DisconnectTip without unlocking in between\n+        LOCK(MempoolMutex());\n         if (!m_chain.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n         CBlockIndex *invalid_walk_tip = m_chain.Tip();\n@@ -2806,7 +2814,9 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, CBlockIndex* pind\n         // transactions back to the mempool if disconnecting was successful,\n         // and we're not doing a very deep invalidation (in which case\n         // keeping the mempool up to date is probably futile anyway).\n-        UpdateMempoolForReorg(*this, m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        if (m_mempool) {\n+            UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        }\n         if (!ret) return false;\n         assert(invalid_walk_tip->pprev == m_chain.Tip());\n \n@@ -3817,10 +3827,11 @@ bool CChainState::LoadBlockIndexDB()\n \n void CChainState::LoadMempool(const ArgsManager& args)\n {\n+    if (!m_mempool) return;\n     if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        ::LoadMempool(m_mempool, *this);\n+        ::LoadMempool(*m_mempool, *this);\n     }\n-    m_mempool.SetIsLoaded(!ShutdownRequested());\n+    m_mempool->SetIsLoaded(!ShutdownRequested());\n }\n \n bool CChainState::LoadChainTip()\n@@ -4684,7 +4695,8 @@ std::vector<CChainState*> ChainstateManager::GetAll()\n     return out;\n }\n \n-CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const std::optional<uint256>& snapshot_blockhash)\n+CChainState& ChainstateManager::InitializeChainstate(\n+    CTxMemPool* mempool, const std::optional<uint256>& snapshot_blockhash)\n {\n     bool is_snapshot = snapshot_blockhash.has_value();\n     std::unique_ptr<CChainState>& to_modify =\n@@ -4763,7 +4775,7 @@ bool ChainstateManager::ActivateSnapshot(\n     }\n \n     auto snapshot_chainstate = WITH_LOCK(::cs_main, return std::make_unique<CChainState>(\n-            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+        /* mempool */ nullptr, m_blockman, base_blockhash));\n \n     {\n         LOCK(::cs_main);\n@@ -4879,7 +4891,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n             }\n \n             const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n-                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+                return snapshot_chainstate.GetCoinsCacheSizeState(snapshot_chainstate.m_mempool));\n \n             if (snapshot_cache_state >=\n                     CoinsCacheSizeState::CRITICAL) {"
      },
      {
        "sha": "4823505cfc9ab8ed896d30bd9d5f897b7c27695a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -587,8 +587,9 @@ class CChainState\n      */\n     mutable std::atomic<bool> m_cached_finished_ibd{false};\n \n-    //! mempool that is kept in sync with the chain\n-    CTxMemPool& m_mempool;\n+    //! Optional mempool that is kept in sync with the chain.\n+    //! Only the active chainstate has a mempool.\n+    CTxMemPool* m_mempool;\n \n     const CChainParams& m_params;\n \n@@ -600,7 +601,10 @@ class CChainState\n     //! CChainState instances.\n     BlockManager& m_blockman;\n \n-    explicit CChainState(CTxMemPool& mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash = std::nullopt);\n+    explicit CChainState(\n+        CTxMemPool* mempool,\n+        BlockManager& blockman,\n+        std::optional<uint256> from_snapshot_blockhash = std::nullopt);\n \n     /**\n      * Initialize the CoinsViews UTXO set database management data structures. The in-memory\n@@ -729,7 +733,7 @@ class CChainState\n                       CCoinsViewCache& view, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Apply the effects of a block disconnection on the UTXO set.\n-    bool DisconnectTip(BlockValidationState& state, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n+    bool DisconnectTip(BlockValidationState& state, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n \n     // Manual block validity manipulation:\n     /** Mark a block as precious and reorganize.\n@@ -784,8 +788,8 @@ class CChainState\n     std::string ToString() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n private:\n-    bool ActivateBestChainStep(BlockValidationState& state, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n-    bool ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n+    bool ActivateBestChainStep(BlockValidationState& state, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n+    bool ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n \n     void InvalidBlockFound(CBlockIndex* pindex, const BlockValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n@@ -798,6 +802,12 @@ class CChainState\n \n     bool LoadBlockIndexDB() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    //! Indirection necessary to make lock annotations work with an optional mempool.\n+    RecursiveMutex* MempoolMutex() const LOCK_RETURNED(m_mempool->cs)\n+    {\n+        return m_mempool ? &m_mempool->cs : nullptr;\n+    }\n+\n     friend ChainstateManager;\n };\n \n@@ -907,7 +917,9 @@ class ChainstateManager\n     //                                  constructor\n     //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n     //!                                 is based on a snapshot.\n-    CChainState& InitializeChainstate(CTxMemPool& mempool, const std::optional<uint256>& snapshot_blockhash = std::nullopt)\n+    CChainState& InitializeChainstate(\n+        CTxMemPool* mempool,\n+        const std::optional<uint256>& snapshot_blockhash = std::nullopt)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     //! Get all chainstates currently being used."
      }
    ]
  },
  {
    "sha": "46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmUzZWZkMWU0YWUyZjA1OGVjZmZmZGFlZTdlODgyYzQzMDVlYjM1",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-09T17:06:19Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-13T15:12:16Z"
      },
      "message": "refactor: move UpdateMempoolForReorg into CChainState\n\nAllows fewer arguments and simplification of call sites.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "dc0f17b5617d2f467215bfcaef902f0f7481bef6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc0f17b5617d2f467215bfcaef902f0f7481bef6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmDtrVEACgkQepNdrbLE\nTwVq5A//SUbDr+OgxLItrq0YtnZ1ahQmXCDalxoDkCQQNCo3LiZEtcpOnAq5RMa6\n1HOPpK9e4+MC/ESGXL//B3HA2CzsDAAnNA7cCSycD0mKHXQAxPkae8/RpCWlB281\np3NAX/7GgCFIuLBSm2YDiSBus2VLIfzV2s0OO9SqOEgoWcDwMVvIfFF5SN18UWxR\nzbjLDrX3adhV7PE/Xz5o0glUNT5jyUKBTFu9Ln0L9S2Otkf084waGE06dAh7SWmP\n1xzsxakOU6EyLpy2KXmKpRhYp7E8KbFSSD5rKY7MFqVGSNRW1UlWCMejuK8uz1KB\ntNNlNqx+w4z73RiFCDmvP4Rf7EVnW37WuJgeyCfsWChfF6J2DbF8kp1RBqQekfjm\nIvCyvqR6G5Oy/FMHvyAXA2eF/WQkOS4YQdoK34YVcjn/IYbp6WNWWsDp4mwhyjfC\n95/9pNMRf3h9CmH1O28cNUh+MhQ5qBMcn8cPZGWd//NqXyQyLIX9v0s5osWpJa2Z\nUOaWPYODI2jmr/pFkH6LVUoPzRxPSg/tMdchMP8IdI5p41etrcLV2dZrBQOWmSsl\n9/eawOSxgNkwoTmzd056FqbwTcYQo9k7CACON//QUNFjtJHJh5doEJj23wILbY/Y\nA368cTNJZOEFANAn2ARhFLpyh/NNJaExMtQrgTRUmrtrjgSMegA=\n=/dl9\n-----END PGP SIGNATURE-----",
        "payload": "tree dc0f17b5617d2f467215bfcaef902f0f7481bef6\nparent 617661703ac29e0744f21de74501d033fdc53ff6\nauthor James O'Beirne <james.obeirne@pm.me> 1625850379 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1626189136 -0400\n\nrefactor: move UpdateMempoolForReorg into CChainState\n\nAllows fewer arguments and simplification of call sites.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "617661703ac29e0744f21de74501d033fdc53ff6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/617661703ac29e0744f21de74501d033fdc53ff6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/617661703ac29e0744f21de74501d033fdc53ff6"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 42,
      "deletions": 31
    },
    "files": [
      {
        "sha": "65fd20f7849746827401401d6cd02f534b8c93ef",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 31,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
        "patch": "@@ -329,24 +329,14 @@ static bool IsCurrentForFeeEstimation(CChainState& active_chainstate) EXCLUSIVE_\n     return true;\n }\n \n-/**\n- * Make mempool consistent after a reorg, by re-adding or recursively erasing\n- * disconnected block transactions from the mempool, and also removing any\n- * other transactions from the mempool that are no longer valid given the new\n- * tip/height.\n- *\n- * Note: we assume that disconnectpool only contains transactions that are NOT\n- * confirmed in the current chain nor already in the mempool (otherwise,\n- * in-mempool descendants of such transactions would be removed).\n- *\n- * Passing fAddToMempool=false will skip trying to add the transactions back,\n- * and instead just erase from the mempool as needed.\n- */\n-\n-static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& mempool, DisconnectedBlockTransactions& disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\n+void CChainState::MaybeUpdateMempoolForReorg(\n+    DisconnectedBlockTransactions& disconnectpool,\n+    bool fAddToMempool)\n {\n+    if (!m_mempool) return;\n+\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(mempool.cs);\n+    AssertLockHeld(m_mempool->cs);\n     std::vector<uint256> vHashUpdate;\n     // disconnectpool's insertion_order index sorts the entries from\n     // oldest to newest, but the oldest entry will be the last tx from the\n@@ -358,11 +348,13 @@ static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& me\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            AcceptToMemoryPool(active_chainstate, mempool, *it, true /* bypass_limits */).m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+            AcceptToMemoryPool(\n+                *this, *m_mempool, *it, true /* bypass_limits */).m_result_type !=\n+                    MempoolAcceptResult::ResultType::VALID) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n-            mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n-        } else if (mempool.exists((*it)->GetHash())) {\n+            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n+        } else if (m_mempool->exists((*it)->GetHash())) {\n             vHashUpdate.push_back((*it)->GetHash());\n         }\n         ++it;\n@@ -373,12 +365,16 @@ static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& me\n     // previously-confirmed transactions back to the mempool.\n     // UpdateTransactionsFromBlock finds descendants of any transactions in\n     // the disconnectpool that were added back and cleans up the mempool state.\n-    mempool.UpdateTransactionsFromBlock(vHashUpdate);\n+    m_mempool->UpdateTransactionsFromBlock(vHashUpdate);\n \n     // We also need to remove any now-immature transactions\n-    mempool.removeForReorg(active_chainstate, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+    m_mempool->removeForReorg(*this, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n-    LimitMempoolSize(mempool, active_chainstate.CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    LimitMempoolSize(\n+        *m_mempool,\n+        this->CoinsTip(),\n+        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+        std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n /**\n@@ -2247,7 +2243,7 @@ static void UpdateTip(CTxMemPool* mempool, const CBlockIndex* pindexNew, const C\n /** Disconnect m_chain's tip.\n   * After calling, the mempool will be in an inconsistent state, with\n   * transactions from disconnected blocks being added to disconnectpool.  You\n-  * should make the mempool consistent again by calling UpdateMempoolForReorg.\n+  * should make the mempool consistent again by calling MaybeUpdateMempoolForReorg.\n   * with cs_main held.\n   *\n   * If disconnectpool is nullptr, then no disconnected transactions are added to\n@@ -2512,7 +2508,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n         if (!DisconnectTip(state, &disconnectpool)) {\n             // This is likely a fatal error, but keep the mempool consistent,\n             // just in case. Only remove from the mempool in this case.\n-            if (m_mempool) UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, false);\n+            MaybeUpdateMempoolForReorg(disconnectpool, false);\n \n             // If we're unable to disconnect a block during normal operation,\n             // then that is a failure of our local system -- we should abort\n@@ -2556,7 +2552,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n                     // A system error occurred (disk space, database error, ...).\n                     // Make the mempool consistent with the current tip, just in case\n                     // any observers try to use it before shutdown.\n-                    if (m_mempool) UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, false);\n+                    MaybeUpdateMempoolForReorg(disconnectpool, false);\n                     return false;\n                 }\n             } else {\n@@ -2570,10 +2566,10 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n         }\n     }\n \n-    if (fBlocksDisconnected && m_mempool) {\n+    if (fBlocksDisconnected) {\n         // If any blocks were disconnected, disconnectpool may be non empty.  Add\n         // any disconnected transactions back to the mempool.\n-        UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, true);\n+        MaybeUpdateMempoolForReorg(disconnectpool, true);\n     }\n     if (m_mempool) m_mempool->check(*this);\n \n@@ -2798,7 +2794,7 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, CBlockIndex* pind\n         LimitValidationInterfaceQueue();\n \n         LOCK(cs_main);\n-        // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is\n+        // Lock for as long as disconnectpool is in scope to make sure MaybeUpdateMempoolForReorg is\n         // called after DisconnectTip without unlocking in between\n         LOCK(MempoolMutex());\n         if (!m_chain.Contains(pindex)) break;\n@@ -2814,9 +2810,7 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, CBlockIndex* pind\n         // transactions back to the mempool if disconnecting was successful,\n         // and we're not doing a very deep invalidation (in which case\n         // keeping the mempool up to date is probably futile anyway).\n-        if (m_mempool) {\n-            UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n-        }\n+        MaybeUpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n         if (!ret) return false;\n         assert(invalid_walk_tip->pprev == m_chain.Tip());\n "
      },
      {
        "sha": "68616f036afba59230fab1c5c3da8859a02b5e93",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
        "patch": "@@ -808,6 +808,23 @@ class CChainState\n         return m_mempool ? &m_mempool->cs : nullptr;\n     }\n \n+    /**\n+     * Make mempool consistent after a reorg, by re-adding or recursively erasing\n+     * disconnected block transactions from the mempool, and also removing any\n+     * other transactions from the mempool that are no longer valid given the new\n+     * tip/height.\n+     *\n+     * Note: we assume that disconnectpool only contains transactions that are NOT\n+     * confirmed in the current chain nor already in the mempool (otherwise,\n+     * in-mempool descendants of such transactions would be removed).\n+     *\n+     * Passing fAddToMempool=false will skip trying to add the transactions back,\n+     * and instead just erase from the mempool as needed.\n+     */\n+    void MaybeUpdateMempoolForReorg(\n+        DisconnectedBlockTransactions& disconnectpool,\n+        bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n+\n     friend ChainstateManager;\n };\n "
      }
    ]
  },
  {
    "sha": "4abf0779d6594e97222279110c328b75b5f3db7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWJmMDc3OWQ2NTk0ZTk3MjIyMjc5MTEwYzMyOGI3NWI1ZjNkYjdi",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-09T13:24:27Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-13T15:16:30Z"
      },
      "message": "refactor: no mempool arg to GetCoinsCacheSizeState\n\nUnnecessary argument since we can make use of this->m_mempool\n\nCo-authored-by: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "6b51997a3fcf69120f55712cbcf20962860485b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b51997a3fcf69120f55712cbcf20962860485b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4abf0779d6594e97222279110c328b75b5f3db7b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmDtrlEACgkQepNdrbLE\nTwXLnw/+O8mNkqzl99Y0iBH0Syb3yE1FcABG2oZdn4CSHTk3hITw+3my+4t+qhkr\n8IXABjZjr8SBgbBjPV9qSjM+vgoFGF95qw833uIGIZHhdz9u/AokT3Ds9H8GD8Jj\nVvc/06euA8+Z16LFfuPNw65zkZbktgXhz3kbThmkzwQ/SfiI2b1oEwk2tdDvW5yl\nHckJtifHFHX3rp3xGO6+zu8d/TfJyInRCEn7LQ90VPQCUt5CuZUM/uELv+XmnjYG\nymGbiKfMPt7HgL/+Sp6TUB+dIF7fMBoJIcCTxhAwuyX+5wnjZ6BwjR/r/40U9Def\ne1t3EsLxxZsLEvddXrxpTxCkvK9va50ANpBYKiLUMLeqdT+Wir5MJXpBbcFL21Mn\nsif1Wqjzeqio2ZS3UsEHVFY8Fwzk3QkWxtpeBfeGfujBmtmY25Wy4hCmMCgq3Atp\nr9nmdrJRW2np9vbsBJZBdP2jEoHUZlVBlFVIG38Zjkmnl78q2+D5+61lqhMJrDqJ\nymSQrACudGQaHyMKEm5KPAEDTp0Xdl8UQVBPjXf2KbC2cDaXcv5PKbzUcZynGHvD\nVpLAw3nUqpDVu9vqSE+do0mj9LQ9DeHNpXeGad4b/K23fJoYTcpYGshwblcGbqvA\nofPEFDW7DeX0n3LcYI/jiYPxW2GLFo10r/CpEYxE1GCUU/8bjp4=\n=jUdH\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b51997a3fcf69120f55712cbcf20962860485b4\nparent 46e3efd1e4ae2f058ecfffdaee7e882c4305eb35\nauthor James O'Beirne <james.obeirne@pm.me> 1625837067 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1626189390 -0400\n\nrefactor: no mempool arg to GetCoinsCacheSizeState\n\nUnnecessary argument since we can make use of this->m_mempool\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4abf0779d6594e97222279110c328b75b5f3db7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4abf0779d6594e97222279110c328b75b5f3db7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4abf0779d6594e97222279110c328b75b5f3db7b/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 16,
      "deletions": 21
    },
    "files": [
      {
        "sha": "22aafcaa6c69f7b2ef4599b3f865a22450e4c39f",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4abf0779d6594e97222279110c328b75b5f3db7b/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4abf0779d6594e97222279110c328b75b5f3db7b/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=4abf0779d6594e97222279110c328b75b5f3db7b",
        "patch": "@@ -23,7 +23,6 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n     CChainState chainstate{&mempool, blockman};\n     chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n     WITH_LOCK(::cs_main, chainstate.InitCoinsCache(1 << 10));\n-    CTxMemPool tx_pool{};\n \n     constexpr bool is_64_bit = sizeof(void*) == 8;\n \n@@ -57,7 +56,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n \n     // Without any coins in the cache, we shouldn't need to flush.\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n         CoinsCacheSizeState::OK);\n \n     // If the initial memory allocations of cacheCoins don't match these common\n@@ -72,7 +71,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         }\n \n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n             CoinsCacheSizeState::CRITICAL);\n \n         BOOST_TEST_MESSAGE(\"Exiting cache flush tests early due to unsupported arch\");\n@@ -93,34 +92,34 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         print_view_mem_usage(view);\n         BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n             CoinsCacheSizeState::OK);\n     }\n \n     // Adding some additional coins will push us over the edge to CRITICAL.\n     for (int i{0}; i < 4; ++i) {\n         add_coin(view);\n         print_view_mem_usage(view);\n-        if (chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0) ==\n+        if (chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0) ==\n             CoinsCacheSizeState::CRITICAL) {\n             break;\n         }\n     }\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n         CoinsCacheSizeState::CRITICAL);\n \n     // Passing non-zero max mempool usage should allow us more headroom.\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n         CoinsCacheSizeState::OK);\n \n     for (int i{0}; i < 3; ++i) {\n         add_coin(view);\n         print_view_mem_usage(view);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n             CoinsCacheSizeState::OK);\n     }\n \n@@ -136,31 +135,31 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         BOOST_CHECK(usage_percentage >= 0.9);\n         BOOST_CHECK(usage_percentage < 1);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 1 << 10),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, 1 << 10),\n             CoinsCacheSizeState::LARGE);\n     }\n \n     // Using the default max_* values permits way more coins to be added.\n     for (int i{0}; i < 1000; ++i) {\n         add_coin(view);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool),\n+            chainstate.GetCoinsCacheSizeState(),\n             CoinsCacheSizeState::OK);\n     }\n \n     // Flushing the view doesn't take us back to OK because cacheCoins has\n     // preallocated memory that doesn't get reclaimed even after flush.\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, 0),\n         CoinsCacheSizeState::CRITICAL);\n \n     view.SetBestBlock(InsecureRand256());\n     BOOST_CHECK(view.Flush());\n     print_view_mem_usage(view);\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, 0),\n         CoinsCacheSizeState::CRITICAL);\n }\n "
      },
      {
        "sha": "f3737392baee7dc2294ff6641bdda1c267238ac9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4abf0779d6594e97222279110c328b75b5f3db7b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4abf0779d6594e97222279110c328b75b5f3db7b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4abf0779d6594e97222279110c328b75b5f3db7b",
        "patch": "@@ -1998,20 +1998,18 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     return true;\n }\n \n-CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool* tx_pool)\n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()\n {\n     return this->GetCoinsCacheSizeState(\n-        tx_pool,\n         m_coinstip_cache_size_bytes,\n         gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n }\n \n CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n-    const CTxMemPool* tx_pool,\n     size_t max_coins_cache_size_bytes,\n     size_t max_mempool_size_bytes)\n {\n-    const int64_t nMempoolUsage = tx_pool ? tx_pool->DynamicMemoryUsage() : 0;\n+    const int64_t nMempoolUsage = m_mempool ? m_mempool->DynamicMemoryUsage() : 0;\n     int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n     int64_t nTotalSpace =\n         max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);\n@@ -2050,7 +2048,7 @@ bool CChainState::FlushStateToDisk(\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n \n-        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(m_mempool);\n+        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState();\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             // make sure we don't prune above the blockfilterindexes bestblocks\n@@ -4885,7 +4883,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n             }\n \n             const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n-                return snapshot_chainstate.GetCoinsCacheSizeState(snapshot_chainstate.m_mempool));\n+                return snapshot_chainstate.GetCoinsCacheSizeState());\n \n             if (snapshot_cache_state >=\n                     CoinsCacheSizeState::CRITICAL) {"
      },
      {
        "sha": "5505ec463f3fe9202ec4b56deba8d3aab9fa24ad",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4abf0779d6594e97222279110c328b75b5f3db7b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4abf0779d6594e97222279110c328b75b5f3db7b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=4abf0779d6594e97222279110c328b75b5f3db7b",
        "patch": "@@ -777,11 +777,9 @@ class CChainState\n     //! Dictates whether we need to flush the cache to disk or not.\n     //!\n     //! @return the state of the size of the coins cache.\n-    CoinsCacheSizeState GetCoinsCacheSizeState(const CTxMemPool* tx_pool)\n-        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    CoinsCacheSizeState GetCoinsCacheSizeState() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     CoinsCacheSizeState GetCoinsCacheSizeState(\n-        const CTxMemPool* tx_pool,\n         size_t max_coins_cache_size_bytes,\n         size_t max_mempool_size_bytes) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n "
      }
    ]
  },
  {
    "sha": "ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWI3YjM1YTM5MTQ1NzE3ZTJkOWQzNTZmZDM4MmJkMWY5NWQyYTVh",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-09T13:34:39Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-13T15:16:37Z"
      },
      "message": "refactor: move UpdateTip into CChainState\n\nMakes sense and saves on arguments.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "60a127d8fc290b5d46fbdd4959e898b6eba37ab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60a127d8fc290b5d46fbdd4959e898b6eba37ab0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmDtrlUACgkQepNdrbLE\nTwWK/A/7Bl5m+Akeoh18atWdPk8/0IvFTHXbgUyBRFIDcibYTeKZabTbeThqJnYy\nFvPROFRCaigq+B0SQnopT19Vkwc922jIfqGyA+GoyUX7Upm+5VXiPllkzJxtkoKP\nZi05+hCXwZEds9Yoifa1k6r9HeAy4D9BY+b4KM+a6Ir7ZuoQ2gWl1iOSN7gEqOmA\nwSj/1g947mEqzeUupyULIpWU0pU/a4TxmOZ1JtW+EkjM5LjbkpI5H9qaBMRRwg6i\nXASPp0biSlKVRGxR5Kc1635KdEUn+1gmlAeS2srqn/Lapj5bhB6Pzu3hvifQucFk\n2QJD+LlWLirF2i78hLxY+go/bmz7hNtkYeD4K9BYGsG0+cAcFhpgZqsvw4P1yzho\ngrMj1dRRh0W4R8ypVsCEe+XrRf6E9kmhd4PCxx2GNKZ7BwEmeoaKBdwlVtMH61KX\nnwoZXI/fjmA9yYliGrwnAJJ3cjtp6ATMglbHzLSzyk6yx6hIgzwhiCZxymyK8vhu\nZGdj8lzP4bsN4okXZ5N4KgQxK8qLT5jIX0o5AmYtWosrtmuodDDSFahMMWwcMgFl\nXkJjvVdHjLJonc+16QylHFGqB5ESBW9GYg574d2iwTiIhXDbCiBoTiyMnoK9TUlN\nsRB+0EyzNoj1svXArl7S1k9VzUOw6G3uA2xgwwLxo0vMO68pK/E=\n=4hy8\n-----END PGP SIGNATURE-----",
        "payload": "tree 60a127d8fc290b5d46fbdd4959e898b6eba37ab0\nparent 4abf0779d6594e97222279110c328b75b5f3db7b\nauthor James O'Beirne <james.obeirne@pm.me> 1625837679 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1626189397 -0400\n\nrefactor: move UpdateTip into CChainState\n\nMakes sense and saves on arguments.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4abf0779d6594e97222279110c328b75b5f3db7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4abf0779d6594e97222279110c328b75b5f3db7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4abf0779d6594e97222279110c328b75b5f3db7b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "bc72b619e7b829bb03ecc4292cc014d3cd83857f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
        "patch": "@@ -2199,13 +2199,11 @@ static void AppendWarning(bilingual_str& res, const bilingual_str& warn)\n     res += warn;\n }\n \n-/** Check warning conditions and do some notifications on new chain tip set. */\n-static void UpdateTip(CTxMemPool* mempool, const CBlockIndex* pindexNew, const CChainParams& chainParams, CChainState& active_chainstate)\n-    EXCLUSIVE_LOCKS_REQUIRED(::cs_main)\n+void CChainState::UpdateTip(const CBlockIndex* pindexNew)\n {\n     // New best block\n-    if (mempool) {\n-        mempool->AddTransactionsUpdated(1);\n+    if (m_mempool) {\n+        m_mempool->AddTransactionsUpdated(1);\n     }\n \n     {\n@@ -2215,11 +2213,11 @@ static void UpdateTip(CTxMemPool* mempool, const CBlockIndex* pindexNew, const C\n     }\n \n     bilingual_str warning_messages;\n-    if (!active_chainstate.IsInitialBlockDownload()) {\n+    if (!this->IsInitialBlockDownload()) {\n         const CBlockIndex* pindex = pindexNew;\n         for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {\n             WarningBitsConditionChecker checker(bit);\n-            ThresholdState state = checker.GetStateFor(pindex, chainParams.GetConsensus(), warningcache[bit]);\n+            ThresholdState state = checker.GetStateFor(pindex, m_params.GetConsensus(), warningcache[bit]);\n             if (state == ThresholdState::ACTIVE || state == ThresholdState::LOCKED_IN) {\n                 const bilingual_str warning = strprintf(_(\"Unknown new rules activated (versionbit %i)\"), bit);\n                 if (state == ThresholdState::ACTIVE) {\n@@ -2234,7 +2232,7 @@ static void UpdateTip(CTxMemPool* mempool, const CBlockIndex* pindexNew, const C\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n       FormatISO8601DateTime(pindexNew->GetBlockTime()),\n-      GuessVerificationProgress(chainParams.TxData(), pindexNew), active_chainstate.CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), active_chainstate.CoinsTip().GetCacheSize(),\n+      GuessVerificationProgress(m_params.TxData(), pindexNew), this->CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), this->CoinsTip().GetCacheSize(),\n       !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages.original) : \"\");\n }\n \n@@ -2292,7 +2290,7 @@ bool CChainState::DisconnectTip(BlockValidationState& state, DisconnectedBlockTr\n \n     m_chain.SetTip(pindexDelete->pprev);\n \n-    UpdateTip(m_mempool, pindexDelete->pprev, m_params, *this);\n+    UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     GetMainSignals().BlockDisconnected(pblock, pindexDelete);\n@@ -2404,7 +2402,7 @@ bool CChainState::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew\n     }\n     // Update m_chain & related variables.\n     m_chain.SetTip(pindexNew);\n-    UpdateTip(m_mempool, pindexNew, m_params, *this);\n+    UpdateTip(pindexNew);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);"
      },
      {
        "sha": "9a2be3ad9726023bb787d08e8023bfa753868cc6",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
        "patch": "@@ -823,6 +823,10 @@ class CChainState\n         DisconnectedBlockTransactions& disconnectpool,\n         bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n \n+    /** Check warning conditions and do some notifications on new chain tip set. */\n+    void UpdateTip(const CBlockIndex* pindexNew)\n+        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     friend ChainstateManager;\n };\n "
      }
    ]
  }
]