ryanofsky,2021-07-07 23:24:44,"Concept ACK. I think you can drop the second commit and add a `LOCK_RETURNED` helper method to be able to keep using lock annotations when m_mempool is null:\n\n```c++\nRecursiveMutex* MempoolMutex() const LOCK_RETURNED(m_mempool->cs) { return m_mempool ? &m_mempool->cs : nullptr; }\n```\n\nSeems to work for me in commit 8db5953e2d666fb9c25ae8f0df5b4c5c5897cd58\n",https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-875999127,875999127,
DrahtBot,2021-07-08 00:48:00,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22371 by MarcoFalke\n* #21526 by jamesob\n* #21464 by JeremyRubin\n\nIf you consider this pull request important, please ",https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-876031066,876031066,
jamesob,2021-07-08 02:05:13,"Rebased to remove the second commit per Russ' suggestion, which also addresses most of Marco's feedback.\n\n> Seems to work for me in commit 8db5953\n\nWow, that was wizardly. Thanks @ryanofsky!\n\n> I think std::variant can do this\n\nI'll look into this tomorrow.",https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-876061371,876061371,
naumenkogs,2021-07-08 09:46:15,Light code review ACK b17bb4c37d58ca49e877983a632bfcaa493be993,https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-876296570,876296570,
jonatack,2021-07-08 14:52:44,"Concept ACK, will review on next push.",https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-876506636,876506636,
jamesob,2021-07-08 16:13:08,"Rebased.\n\n> Note: Naively I'd expect the mempool pointer for the activated snapshot to be non-null, but I guess it could be set later when the snapshot is fully initialized.\n\nThis is a good point. I'd come up with a commit that implements the `std::variant` feedback (and am glad to have for learning about that), but @ryanofsky's point here makes that change inappropriate: with assumeutxo, ",https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-876568120,876568120,
jamesob,2021-07-09 17:24:33,"Thanks for the prompt attention, good people. I've pushed a rebase that includes pretty much all of @jnewbery's feedback. This widens the scope of the PR to encompass a bit of refactoring, but I think it's all reasonable stuff to include here.",https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-877340546,877340546,
jamesob,2021-07-09 18:50:15,Rebase to incorporate minor changes from @ryanofsky's feedback (https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667134941).,https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-877389354,877389354,
jamesob,2021-07-13 13:29:39,"Anyone have any idea what the deal is with libsecp tests failing on ARM here? \n![image](https://user-images.githubusercontent.com/73197/125460328-0c24f2b4-fa8b-4544-ad19-a0c1c1b082ee.png)\n\nThis doesn't look like a spurious failure.",https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-879089245,879089245,
ryanofsky,2021-07-13 14:22:51,"@MarcoFalke would probably be most knowledgeable about the qemu-arm coredump https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-879089245 https://cirrus-ci.com/task/6754077301276672?logs=ci#L3494, I was curious about that too. It seems like it is happening in a libsecp256k1 test so not related? But maybe there are ways to debug.\n\n(I don't want to bikeshed the style issues, since they d",https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-879133508,879133508,
MarcoFalke,2021-07-13 14:40:45,The `(~x[m][shift]) << (64 - (1 << usebits))) == 0` failure is expected: https://github.com/bitcoin-core/secp256k1/issues/610#issuecomment-482803876,https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-879147719,879147719,
MarcoFalke,2021-07-13 14:41:52,Could edit OP to remove the section that no longer applies to make sure it doesn't end up in the final merge commit?,https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-879148608,879148608,
jamesob,2021-07-13 15:14:52,"Pushed a rebase:\n- `TryUpdateMempool...` -> `MaybeUpdateMempool...`\n- Removed unnecessary `const`s\n- Removed outdated content from OP",https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-879176417,879176417,
jamesob,2021-07-13 15:28:17,- unnecessary `tx_pool` removed,https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-879187156,879187156,
jnewbery,2021-07-13 15:32:16,ACK ceb7b35a39145717e2d9d356fd382bd1f95d2a5a,https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-879190309,879190309,
naumenkogs,2021-07-15 08:51:30,ACK ceb7b35a39145717e2d9d356fd382bd1f95d2a5a,https://github.com/bitcoin/bitcoin/pull/22415#issuecomment-880518895,880518895,
MarcoFalke,2021-07-07 20:54:39,why the change from `true` -> `false`?,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r665699562,665699562,src/validation.cpp
MarcoFalke,2021-07-07 20:55:46,"Nice try, but leaving out the `{}` won't prevent the lock from being closed in the same line.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r665700194,665700194,src/validation.cpp
MarcoFalke,2021-07-07 20:56:03,same,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r665700380,665700380,src/validation.cpp
MarcoFalke,2021-07-07 20:56:41,"```suggestion\nvoid CChainState::mempoolHandleReorg(DisconnectedBlockTransactions& disconnectpool, bool add_to_mempool)\n{\n```\n\nproperly format new code?",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r665700718,665700718,src/validation.cpp
MarcoFalke,2021-07-07 20:57:56,"Would it be possible to combine the args so that *either* a mempool, or a hash can be passed, but not both? I think std::variant can do this",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r665701402,665701402,src/validation.h
jamesob,2021-07-08 01:31:20,Hey somebody's gotta keep review fun!,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r665807596,665807596,src/validation.cpp
jamesob,2021-07-08 01:32:21,Oh yeah d'oh. Sure could've used those missing annotations there.,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r665807889,665807889,src/validation.cpp
naumenkogs,2021-07-08 09:45:48,"Similarly to [this comment](https://github.com/bitcoin/bitcoin/pull/22415/commits/b17bb4c37d58ca49e877983a632bfcaa493be993#r665701402), can we somehow reflect that if mempool is nullptr, the second argument doesn't make sense?",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666040037,666040037,src/validation.h
MarcoFalke,2021-07-08 12:27:09,"```suggestion\n    RecursiveMutex* MempoolMutex() const LOCK_RETURNED(m_mempool->cs)\n    {\n```\n\nclang-format?",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666144964,666144964,src/validation.h
ryanofsky,2021-07-08 14:31:26,"In commit ""validation: make CChainState::m_mempool optional"" (b17bb4c37d58ca49e877983a632bfcaa493be993)\n\nMight be a little more obviously safe to write `Assert(node.mempool.get())` instead of `Assert(node.mempool).get()` since that version looks like the Assert function might be returning a temporary `unique_ptr` that would delete the mempool.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666249472,666249472,src/init.cpp
ryanofsky,2021-07-08 14:56:05,"In commit ""validation: make CChainState::m_mempool optional"" (b17bb4c37d58ca49e877983a632bfcaa493be993)\n\nNote: It could be nice to be able to write `AssertLockHeld(MempoolMutex()` for consistency with `LOCK(MempoolMutex())` and to avoid the if statement. But it'd be beyond scope of this PR since it'd require changing `AssertLockHeld` and there are other issues with that function anyway.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666272104,666272104,src/validation.cpp
ryanofsky,2021-07-08 14:59:59,"In commit ""validation: make CChainState::m_mempool optional"" (b17bb4c37d58ca49e877983a632bfcaa493be993)\n\nNote: Naively I'd expect the mempool pointer for the activated snapshot to be non-null, but I guess it could be set later when the snapshot is fully initialized.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666275700,666275700,src/validation.cpp
jamesob,2021-07-08 16:18:28,Not going this route for reasons mentioned in a recent comment: passing both is a valid approach if we are initializing a not-yet-to-tip snapshot chainstate in init.cpp.,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666340082,666340082,src/validation.h
jamesob,2021-07-08 16:18:59,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666340418,666340418,src/init.cpp
jonatack,2021-07-08 16:57:50,"(if you retouch)\n```suggestion\n            /* mempool */ nullptr, m_blockman, base_blockhash));\n```",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666368135,666368135,src/validation.cpp
naumenkogs,2021-07-09 06:41:51,"\n\nWhat do you think about making this std::optional<CTxMemPool, std::optional>?\n\nIn this case, snapshot_blockhash can't be possibly specified without mempool, and that's what I originally suggested.\n",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666708997,666708997,src/validation.h
jnewbery,2021-07-09 10:59:54,"Since you're updating both call sites for `CChainState::GetCoinsCacheSizeState(const CTxMemPool* tx_pool)`, maybe it makes sense to just remove the argument. There's no need to pass a data member of `CChainState` to a member function of `CChainState` - it can just use its own `m_mempool`.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666864433,666864433,src/validation.cpp
jnewbery,2021-07-09 11:13:42,"This `if (m_mempool)` condition can be at the level of the `if (disconnectpool)` above:\n\n```diff\n         return false;\n     }\n \n-    if (disconnectpool) {\n+    if (m_mempool && disconnectpool) {\n         // Save transactions to re-add to mempool at end of reorg\n         for (auto it = block.vtx.rbegin(); it != block.vtx.rend(); ++it) {\n             disconnectpool->addTransacti",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666871618,666871618,src/validation.cpp
jnewbery,2021-07-09 11:16:59,"This could be a member of `CChainState` to avoid passing `mempool`, `chainParams` and `active_chainstate`.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666874055,666874055,src/validation.cpp
jnewbery,2021-07-09 11:19:39,"No need to update `disconnectpool` if the mempool doesn't exist:\n\n```suggestion\n    if (m_mempool) {\n        m_mempool->removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n        disconnectpool.removeForBlock(blockConnecting.vtx);\n    }\n```",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666875394,666875394,src/validation.cpp
jnewbery,2021-07-09 11:30:49,"What do you think about updating `UpdateMempoolForReorg` to either be a member of `CChainState` or take `CTxMemPool` as an optional pointer, and then return immediately if mempool is null. That would avoid scattering so many `if (m_mempool)` checks across multiple validation functions.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r666881091,666881091,src/validation.cpp
jamesob,2021-07-09 17:16:52,Good call! Done. ,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667100285,667100285,src/validation.cpp
jamesob,2021-07-09 17:18:21,"Yup, also a good call. Fixed. Initially wasn't sure if there was some other purpose we might be using the disconnectpool for (since it's sometimes passed in as a mutable parameter) but after looking around it's clearly just used for mempool maintenance.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667101066,667101066,src/validation.cpp
jamesob,2021-07-09 17:18:37,"Agreed, done.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667101218,667101218,src/validation.cpp
jamesob,2021-07-09 17:18:48,:+1: ,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667101302,667101302,src/validation.cpp
jamesob,2021-07-09 17:19:19,I went ahead and threw it onto `CChainState` since I think that makes sense; can strip off the commit if there are any objections.,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667101565,667101565,src/validation.cpp
jamesob,2021-07-09 17:21:43,There are cases when we want to call this with a snapshot blockhash but not a mempool - during snapshot load time when we need a chainstate instance to populate/validate but don't want to yet make it the active chainstate in case loading the UTXO snapshot fails.,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667102878,667102878,src/validation.h
ryanofsky,2021-07-09 18:21:43,"In commit ""refactor: move UpdateMempoolForReorg into CChainState"" (7cdcd08d665570167b06a93e003369f7fa833cec)\n\n`active_chainstate` is always `*this` right? Can the parameter be dropped?",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667134941,667134941,src/validation.cpp
jamesob,2021-07-09 18:49:27,"Good catch, thanks. Always weary to assume active_chainstate == *this, but in this case (as you probably realized) only the active ever has a mempool, so it's a fine substitution.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667148994,667148994,src/validation.cpp
naumenkogs,2021-07-12 08:02:52,"This new `if` here is not needed, it's augmented by the check you added above (`if (disconnectpool && m_mempool) {`)? ",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667711900,667711900,src/validation.cpp
naumenkogs,2021-07-12 08:09:50,"Mixed feelings about this change. I like params reduction, but I think a reader might get confused: ""`UpdateMempoolForReorg`? But I don't have mempool.""\n\nI would slightly prefer changing the name to `UpdateMempoolForReorgIfExists` or `TryUpdateMempoolForReorg`, but feel free to ignore.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667716247,667716247,src/validation.cpp
jnewbery,2021-07-12 11:03:22,"This could be a const pointer:\n\n```suggestion\n    CTxMemPool* const m_mempool;\n```\n\nsince it's set in the initializer list and never modified.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667833810,667833810,src/validation.h
jnewbery,2021-07-12 11:09:24,"I was also surprised by this. Is the snapshot chainstate the one that eventually becomes our tip? In that case, don't we want it to have a mempool?",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667837165,667837165,src/validation.cpp
jnewbery,2021-07-12 11:11:51,nit: doxygen function comments should go with the function declaration. Do you mind moving this to the header file now that the declaration is there?,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667838641,667838641,src/validation.cpp
jnewbery,2021-07-12 11:18:06,No need for the `CChainState& active_chainstate` argument - this is a private method in `CChainState` where the `active_chainstate` arg is always `*this`. You can remove the argument and use the implicit `this` inside the function.,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r667842272,667842272,src/validation.h
jamesob,2021-07-12 17:13:15,"Yeah, this is a little confusing absent context, but basically the idea per @ryanofsky's feedback is that mempool presence should be used to indicate chainstate activeness, so we don't want to give the snapshot chainstate a mempool until we consider it active.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668111707,668111707,src/validation.cpp
jamesob,2021-07-12 17:16:17,"The pointer may actually be nulled out e.g. when we transition the initial IBD chainstate to the background (and give its mempool to the snapshot chainstate, which becomes our active).",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668113712,668113712,src/validation.h
jnewbery,2021-07-12 17:33:21,"ah, ok! I'm not totally up to date on how the different chainstate objects work in assumeutxo.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668125115,668125115,src/validation.h
jamesob,2021-07-12 18:00:16,"Good call - weird, thought I had made that change... maybe lost in rebase shuffle.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668143212,668143212,src/validation.h
jamesob,2021-07-12 18:42:57,"Fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668169676,668169676,src/validation.cpp
jamesob,2021-07-12 18:43:09,"Sounds good, fixed.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668169812,668169812,src/validation.cpp
jamesob,2021-07-12 18:43:17,"Good catch, thanks.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668169895,668169895,src/validation.cpp
jnewbery,2021-07-13 12:06:10,"This new name seems worse to me than the original (`UpdateMempoolForReorg()`). The `Try` suggests that this operation may fail or that it's best-effort. In fact, if a mempool exists then it really will be updated to be internally consistent.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668698941,668698941,src/validation.h
jnewbery,2021-07-13 12:09:46,There's no need to use `this->` to call member functions. `this->` is implicitly added before the names: https://en.cppreference.com/w/cpp/language/this.,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668701404,668701404,src/validation.cpp
jnewbery,2021-07-13 12:09:58,"As above, no need for `this->` here.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668701559,668701559,src/validation.cpp
jnewbery,2021-07-13 12:35:32,"These new `const` keywords on the `CChainstate::CChainstate` and `InitializeChainstate` arguments are harmless but unnecessary. When you're passing by value (which is what happens when you pass a pointer), making that argument const doesn't change the interface, since the argument is copied to a locally scoped parameter inside the function. It's only when passing by reference that marking argument",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668719890,668719890,src/validation.h
jnewbery,2021-07-13 12:40:49,No need for `this->`,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668723653,668723653,src/validation.cpp
jnewbery,2021-07-13 12:43:44,Any idea why there's a different `tx_pool` from `mempool` in this test? It's not used anywhere so presumably can be removed?,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668725963,668725963,src/test/validation_flush_tests.cpp
jamesob,2021-07-13 13:26:16,I prefer the `this->` prefix to be explicit about a member function call; last time I talked about this with others it was uncontroversial.,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668761642,668761642,src/validation.cpp
jamesob,2021-07-13 13:30:59,"Right but at least this makes it clear that we aren't going to do any pointer arithmetic on `mempool` in the body of the function, right?",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668765914,668765914,src/validation.h
jamesob,2021-07-13 13:42:07,If you felt this way it would have been helpful for you to chime in on @naumenkogs's original comment; doing commits back and forth on relatively cosmetic things like method names is not a good use of energy.,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668775580,668775580,src/validation.h
jamesob,2021-07-13 13:55:03,"Yep, looks like it. I think when I wrote these I wanted to cover the fact that you could pass in a mempool reference that wasn't owned by the chainstate, but I don't think there's any point in doing that now.",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668787380,668787380,src/test/validation_flush_tests.cpp
jnewbery,2021-07-13 13:57:19,Curious. I've never come across this style before.,https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668789480,668789480,src/validation.cpp
jnewbery,2021-07-13 14:00:33,"> this makes it clear that we aren't going to do any pointer arithmetic on mempool\n\n`mempool` inside the function is a copy of the pointer, and so whether or not it's mutated is not part of the contract with the caller, and so doesn't need to be in the function declaration. Like I said it's harmless, but you'll see that there are almost no examples in the code of pass by value parameters being",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668792472,668792472,src/validation.h
jnewbery,2021-07-13 14:20:59,"Sorry - I didn't see the original comment. Ultimately it's up to you what you put in your PR. I don't think that renaming this function is necessary, and is actually worse for the reasons I gave here, but if other people prefer the new name, that's also fine!",https://github.com/bitcoin/bitcoin/pull/22415#discussion_r668812004,668812004,src/validation.h
