[
  {
    "sha": "82451074c2bb13dc35b41f1051ff6282ee0d3a6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjQ1MTA3NGMyYmIxM2RjMzViNDFmMTA1MWZmNjI4MmVlMGQzYTZj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-04-21T21:56:29Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-04-21T22:18:43Z"
      },
      "message": "net: pass a reference into ConnectNode and copy it there\n\nNo functional change, just preparation for the following commits.",
      "tree": {
        "sha": "2a8280b0f1021c680b32c94d4bd5ad2a94f7ca9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a8280b0f1021c680b32c94d4bd5ad2a94f7ca9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82451074c2bb13dc35b41f1051ff6282ee0d3a6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82451074c2bb13dc35b41f1051ff6282ee0d3a6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82451074c2bb13dc35b41f1051ff6282ee0d3a6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82451074c2bb13dc35b41f1051ff6282ee0d3a6c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6548a47a5548b4b43510c548a9418673ab751de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6548a47a5548b4b43510c548a9418673ab751de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6548a47a5548b4b43510c548a9418673ab751de"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "de016550fd915d1db79a96e3776721cb287495a0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82451074c2bb13dc35b41f1051ff6282ee0d3a6c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82451074c2bb13dc35b41f1051ff6282ee0d3a6c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=82451074c2bb13dc35b41f1051ff6282ee0d3a6c",
        "patch": "@@ -340,7 +340,7 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n     return true;\n }\n \n-CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n+CNode* CConnman::ConnectNode(const CAddress& addrConnect, const char *pszDest, bool fCountFailure)\n {\n     if (pszDest == NULL) {\n         if (IsLocal(addrConnect))\n@@ -361,24 +361,25 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pszDest ? 0.0 : (double)(GetAdjustedTime() - addrConnect.nTime)/3600.0);\n \n     // Connect\n+    CAddress addrDest = addrConnect;\n     SOCKET hSocket;\n     bool proxyConnectionFailed = false;\n-    if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, Params().GetDefaultPort(), nConnectTimeout, &proxyConnectionFailed) :\n-                  ConnectSocket(addrConnect, hSocket, nConnectTimeout, &proxyConnectionFailed))\n+    if (pszDest ? ConnectSocketByName(addrDest, hSocket, pszDest, Params().GetDefaultPort(), nConnectTimeout, &proxyConnectionFailed) :\n+                  ConnectSocket(addrDest, hSocket, nConnectTimeout, &proxyConnectionFailed))\n     {\n         if (!IsSelectableSocket(hSocket)) {\n             LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n             CloseSocket(hSocket);\n             return NULL;\n         }\n \n-        if (pszDest && addrConnect.IsValid()) {\n+        if (pszDest && addrDest.IsValid()) {\n             // It is possible that we already have a connection to the IP/port pszDest resolved to.\n             // In that case, drop the connection that was just created, and return the existing CNode instead.\n             // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n             // name catch this early.\n             LOCK(cs_vNodes);\n-            CNode* pnode = FindNode((CService)addrConnect);\n+            CNode* pnode = FindNode((CService)addrDest);\n             if (pnode)\n             {\n                 pnode->MaybeSetAddrName(std::string(pszDest));\n@@ -388,20 +389,20 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             }\n         }\n \n-        addrman.Attempt(addrConnect, fCountFailure);\n+        addrman.Attempt(addrDest, fCountFailure);\n \n         // Add node\n         NodeId id = GetNewNodeId();\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n-        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, pszDest ? pszDest : \"\", false);\n-        pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n+        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrDest, CalculateKeyedNetGroup(addrDest), nonce, pszDest ? pszDest : \"\", false);\n+        pnode->nServicesExpected = ServiceFlags(addrDest.nServices & nRelevantServices);\n         pnode->AddRef();\n \n         return pnode;\n     } else if (!proxyConnectionFailed) {\n         // If connecting to the node failed, and failure is not caused by a problem connecting to\n         // the proxy, mark this as an attempt.\n-        addrman.Attempt(addrConnect, fCountFailure);\n+        addrman.Attempt(addrDest, fCountFailure);\n     }\n \n     return NULL;"
      }
    ]
  },
  {
    "sha": "4044e8220dc44f2258cee3d6f00b61663dd95c54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDQ0ZTgyMjBkYzQ0ZjIyNThjZWUzZDZmMDBiNjE2NjNkZDk1YzU0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-04-21T22:15:16Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-04-21T22:24:37Z"
      },
      "message": "net: combine OpenNetworkConnection and ConnectNode\n\nConnectNode is only called by OpenNetworkConnection, and only in one place.\nCombine them for preparation of splitting them into functions that are\nfriendlier for callbacks.",
      "tree": {
        "sha": "760bdabff09adedf343d095a51390e9f40e614bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/760bdabff09adedf343d095a51390e9f40e614bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4044e8220dc44f2258cee3d6f00b61663dd95c54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4044e8220dc44f2258cee3d6f00b61663dd95c54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4044e8220dc44f2258cee3d6f00b61663dd95c54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4044e8220dc44f2258cee3d6f00b61663dd95c54/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82451074c2bb13dc35b41f1051ff6282ee0d3a6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82451074c2bb13dc35b41f1051ff6282ee0d3a6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82451074c2bb13dc35b41f1051ff6282ee0d3a6c"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 39,
      "deletions": 59
    },
    "files": [
      {
        "sha": "a548def560bab91dd169a04d736ae4a31d5eff9c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 58,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4044e8220dc44f2258cee3d6f00b61663dd95c54/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4044e8220dc44f2258cee3d6f00b61663dd95c54/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4044e8220dc44f2258cee3d6f00b61663dd95c54",
        "patch": "@@ -340,19 +340,29 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n     return true;\n }\n \n-CNode* CConnman::ConnectNode(const CAddress& addrConnect, const char *pszDest, bool fCountFailure)\n+// if successful, this moves the passed grant to the constructed node\n+bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n {\n-    if (pszDest == NULL) {\n-        if (IsLocal(addrConnect))\n-            return NULL;\n+    //\n+    // Initiate outbound network connection\n+    //\n \n-        // Look for an existing connection\n-        CNode* pnode = FindNode((CService)addrConnect);\n-        if (pnode)\n-        {\n-            LogPrintf(\"Failed to open new connection, already connected\\n\");\n-            return NULL;\n-        }\n+    if (interruptNet) {\n+        return false;\n+    }\n+    if (!fNetworkActive) {\n+        return false;\n+    }\n+    if (IsLocal(addrConnect)) {\n+        return false;\n+    }\n+\n+    if (!pszDest) {\n+        if (FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n+            FindNode(addrConnect.ToStringIPPort()))\n+            return false;\n+    } else if (FindNode(std::string(pszDest))) {\n+        return false;\n     }\n \n     /// debug print\n@@ -370,7 +380,7 @@ CNode* CConnman::ConnectNode(const CAddress& addrConnect, const char *pszDest, b\n         if (!IsSelectableSocket(hSocket)) {\n             LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n             CloseSocket(hSocket);\n-            return NULL;\n+            return false;\n         }\n \n         if (pszDest && addrDest.IsValid()) {\n@@ -385,7 +395,7 @@ CNode* CConnman::ConnectNode(const CAddress& addrConnect, const char *pszDest, b\n                 pnode->MaybeSetAddrName(std::string(pszDest));\n                 CloseSocket(hSocket);\n                 LogPrintf(\"Failed to open new connection, already connected\\n\");\n-                return NULL;\n+                return false;\n             }\n         }\n \n@@ -398,14 +408,27 @@ CNode* CConnman::ConnectNode(const CAddress& addrConnect, const char *pszDest, b\n         pnode->nServicesExpected = ServiceFlags(addrDest.nServices & nRelevantServices);\n         pnode->AddRef();\n \n-        return pnode;\n+        if (grantOutbound)\n+            grantOutbound->MoveTo(pnode->grantOutbound);\n+        if (fOneShot)\n+            pnode->fOneShot = true;\n+        if (fFeeler)\n+            pnode->fFeeler = true;\n+        if (fAddnode)\n+            pnode->fAddnode = true;\n+\n+        GetNodeSignals().InitializeNode(pnode, *this);\n+        {\n+            LOCK(cs_vNodes);\n+            vNodes.push_back(pnode);\n+        }\n+        return true;\n     } else if (!proxyConnectionFailed) {\n         // If connecting to the node failed, and failure is not caused by a problem connecting to\n         // the proxy, mark this as an attempt.\n         addrman.Attempt(addrDest, fCountFailure);\n     }\n-\n-    return NULL;\n+    return false;\n }\n \n void CConnman::DumpBanlist()\n@@ -1911,48 +1934,6 @@ void CConnman::ThreadOpenAddedConnections()\n     }\n }\n \n-// if successful, this moves the passed grant to the constructed node\n-bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n-{\n-    //\n-    // Initiate outbound network connection\n-    //\n-    if (interruptNet) {\n-        return false;\n-    }\n-    if (!fNetworkActive) {\n-        return false;\n-    }\n-    if (!pszDest) {\n-        if (IsLocal(addrConnect) ||\n-            FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n-            FindNode(addrConnect.ToStringIPPort()))\n-            return false;\n-    } else if (FindNode(std::string(pszDest)))\n-        return false;\n-\n-    CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure);\n-\n-    if (!pnode)\n-        return false;\n-    if (grantOutbound)\n-        grantOutbound->MoveTo(pnode->grantOutbound);\n-    if (fOneShot)\n-        pnode->fOneShot = true;\n-    if (fFeeler)\n-        pnode->fFeeler = true;\n-    if (fAddnode)\n-        pnode->fAddnode = true;\n-\n-    GetNodeSignals().InitializeNode(pnode, *this);\n-    {\n-        LOCK(cs_vNodes);\n-        vNodes.push_back(pnode);\n-    }\n-\n-    return true;\n-}\n-\n void CConnman::ThreadMessageHandler()\n {\n     while (!flagInterruptMsgProc)"
      },
      {
        "sha": "a08159a8d794ad7cf1093cb717d933e5f50e6450",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4044e8220dc44f2258cee3d6f00b61663dd95c54/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4044e8220dc44f2258cee3d6f00b61663dd95c54/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4044e8220dc44f2258cee3d6f00b61663dd95c54",
        "patch": "@@ -306,7 +306,6 @@ class CConnman\n     CNode* FindNode(const CService& addr);\n \n     bool AttemptToEvictConnection();\n-    CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);\n     bool IsWhitelistedRange(const CNetAddr &addr);\n \n     void DeleteNode(CNode* pnode);"
      }
    ]
  },
  {
    "sha": "c0577133cb18c10cfe341d82a66e0f0c507ebb8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDU3NzEzM2NiMThjMTBjZmUzNDFkODJhNjZlMGYwYzUwN2ViYjhk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-04-21T22:35:44Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-04-21T22:35:44Z"
      },
      "message": "net: split socket creation out of connection",
      "tree": {
        "sha": "7423abc00b5ca44914c897e7210dd961ac30dafc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7423abc00b5ca44914c897e7210dd961ac30dafc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0577133cb18c10cfe341d82a66e0f0c507ebb8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0577133cb18c10cfe341d82a66e0f0c507ebb8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0577133cb18c10cfe341d82a66e0f0c507ebb8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0577133cb18c10cfe341d82a66e0f0c507ebb8d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4044e8220dc44f2258cee3d6f00b61663dd95c54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4044e8220dc44f2258cee3d6f00b61663dd95c54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4044e8220dc44f2258cee3d6f00b61663dd95c54"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 18,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4a45439cff7e92c6ce52ffd659c43ba77a2e63f2",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 3,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0577133cb18c10cfe341d82a66e0f0c507ebb8d/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0577133cb18c10cfe341d82a66e0f0c507ebb8d/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=c0577133cb18c10cfe341d82a66e0f0c507ebb8d",
        "patch": "@@ -413,7 +413,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     return true;\n }\n \n-bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)\n+bool CreateSocket(const CService &addrConnect, SOCKET& hSocketRet)\n {\n     hSocketRet = INVALID_SOCKET;\n \n@@ -445,6 +445,22 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n     if (!SetSocketNonBlocking(hSocket, true))\n         return error(\"ConnectSocketDirectly: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n+    hSocketRet = hSocket;\n+    return true;\n+}\n+\n+bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocket, int nTimeout)\n+{\n+    if (!CreateSocket(addrConnect, hSocket))\n+        return false;\n+\n+    struct sockaddr_storage sockaddr;\n+    socklen_t len = sizeof(sockaddr);\n+    if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\n+        LogPrintf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString());\n+        return false;\n+    }\n+\n     if (connect(hSocket, (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n     {\n         int nErr = WSAGetLastError();\n@@ -497,8 +513,6 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             return false;\n         }\n     }\n-\n-    hSocketRet = hSocket;\n     return true;\n }\n "
      },
      {
        "sha": "3e2df4e41454f26c219c7ac730289307758b94a3",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0577133cb18c10cfe341d82a66e0f0c507ebb8d/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0577133cb18c10cfe341d82a66e0f0c507ebb8d/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=c0577133cb18c10cfe341d82a66e0f0c507ebb8d",
        "patch": "@@ -55,6 +55,7 @@ bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout, bool\n bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed = 0);\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);\n+bool CreateSocket(const CService &addrConnect, SOCKET& hSocketRet);\n /** Close socket and set hSocket to INVALID_SOCKET */\n bool CloseSocket(SOCKET& hSocket);\n /** Disable or enable blocking-mode for a socket */"
      }
    ]
  },
  {
    "sha": "5a5272a5b08890e4bcd7f3927fc8f21ba8995d03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTUyNzJhNWIwODg5MGU0YmNkN2YzOTI3ZmM4ZjIxYmE4OTk1ZDAz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-04-26T19:50:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-04-26T19:51:01Z"
      },
      "message": "net: expose a few functions/structs from netbase\n\nThe next commits will move the connection logic out of netbase into net.",
      "tree": {
        "sha": "886aeccde43018d86419cb3f75b4c2e1bfe83af1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/886aeccde43018d86419cb3f75b4c2e1bfe83af1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a5272a5b08890e4bcd7f3927fc8f21ba8995d03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a5272a5b08890e4bcd7f3927fc8f21ba8995d03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a5272a5b08890e4bcd7f3927fc8f21ba8995d03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a5272a5b08890e4bcd7f3927fc8f21ba8995d03/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0577133cb18c10cfe341d82a66e0f0c507ebb8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0577133cb18c10cfe341d82a66e0f0c507ebb8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0577133cb18c10cfe341d82a66e0f0c507ebb8d"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "b91af6471d62929182857784840bb0836a2fe706",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a5272a5b08890e4bcd7f3927fc8f21ba8995d03/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a5272a5b08890e4bcd7f3927fc8f21ba8995d03/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=5a5272a5b08890e4bcd7f3927fc8f21ba8995d03",
        "patch": "@@ -256,12 +256,6 @@ static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, SOCK\n     return len == 0 ? IntrRecvError::OK : IntrRecvError::Timeout;\n }\n \n-struct ProxyCredentials\n-{\n-    std::string username;\n-    std::string password;\n-};\n-\n std::string Socks5ErrorString(int err)\n {\n     switch(err) {\n@@ -278,7 +272,7 @@ std::string Socks5ErrorString(int err)\n }\n \n /** Connect using SOCKS5 (as described in RFC1928) */\n-static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket)\n+bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket)\n {\n     IntrRecvError recvr;\n     LogPrint(BCLog::NET, \"SOCKS5 connecting %s\\n\", strDest);"
      },
      {
        "sha": "c953b9c17db0b8e770e2d35a8a5bc1cb1ab2cae5",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a5272a5b08890e4bcd7f3927fc8f21ba8995d03/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a5272a5b08890e4bcd7f3927fc8f21ba8995d03/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=5a5272a5b08890e4bcd7f3927fc8f21ba8995d03",
        "patch": "@@ -37,6 +37,12 @@ class proxyType\n     bool randomize_credentials;\n };\n \n+struct ProxyCredentials\n+{\n+    std::string username;\n+    std::string password;\n+};\n+\n enum Network ParseNetwork(std::string net);\n std::string GetNetworkName(enum Network net);\n void SplitHostPort(std::string in, int &portOut, std::string &hostOut);\n@@ -45,6 +51,8 @@ bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);\n bool SetNameProxy(const proxyType &addrProxy);\n bool HaveNameProxy();\n+bool GetNameProxy(proxyType &nameProxyOut);\n+bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket);\n bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\n bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup);\n bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup);\n@@ -53,6 +61,7 @@ CService LookupNumeric(const char *pszName, int portDefault = 0);\n bool LookupSubNet(const char *pszName, CSubNet& subnet);\n bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed = 0);\n bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed = 0);\n+bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocket, int nTimeout);\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);\n bool CreateSocket(const CService &addrConnect, SOCKET& hSocketRet);"
      }
    ]
  },
  {
    "sha": "ae14fda91588c7f3b92a08afd328c984e03c3c48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTE0ZmRhOTE1ODhjN2YzYjkyYTA4YWZkMzI4Yzk4NGUwM2MzYzQ4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-04-26T20:54:13Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-04-26T23:53:27Z"
      },
      "message": "net: refactor the outgoing connection process\n\nThis is the next step towards asynchronous connections.\n\nThe current code confuses connection steps and tends to obfuscate what's going\non. Here, I've tried to create individual stages. The logic has all moved into\na single function for now:\n\n- Global checks: Should any connection be attempted?\n- Input checks: is there something valid to connect to?\n- Resolving: If the address string may be valid, attempt to resolve it (if\n    allowed by the user's dns settings and proxy config)\n- Proxy config\n- Socket creation\n- Connect to the destination\n- If proxied, attempt the remote connection\n- Create the node with the resulting connection\n\nWith this done, resolves and connections can trigger callbacks so that a\nconnection attempt requires no return value. At that point, they can be made\nasynchronous via libevent.",
      "tree": {
        "sha": "793bed6158e5d6877357cff844ced40390882fbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/793bed6158e5d6877357cff844ced40390882fbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae14fda91588c7f3b92a08afd328c984e03c3c48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae14fda91588c7f3b92a08afd328c984e03c3c48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae14fda91588c7f3b92a08afd328c984e03c3c48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae14fda91588c7f3b92a08afd328c984e03c3c48/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a5272a5b08890e4bcd7f3927fc8f21ba8995d03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a5272a5b08890e4bcd7f3927fc8f21ba8995d03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a5272a5b08890e4bcd7f3927fc8f21ba8995d03"
      }
    ],
    "stats": {
      "total": 170,
      "additions": 115,
      "deletions": 55
    },
    "files": [
      {
        "sha": "365439d24fb06756b6dc97341e527f7e855867f3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 115,
        "deletions": 52,
        "changes": 167,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae14fda91588c7f3b92a08afd328c984e03c3c48/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae14fda91588c7f3b92a08afd328c984e03c3c48/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ae14fda91588c7f3b92a08afd328c984e03c3c48",
        "patch": "@@ -370,65 +370,131 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         pszDest ? pszDest : addrConnect.ToString(),\n         pszDest ? 0.0 : (double)(GetAdjustedTime() - addrConnect.nTime)/3600.0);\n \n-    // Connect\n-    CAddress addrDest = addrConnect;\n-    SOCKET hSocket;\n-    bool proxyConnectionFailed = false;\n-    if (pszDest ? ConnectSocketByName(addrDest, hSocket, pszDest, Params().GetDefaultPort(), nConnectTimeout, &proxyConnectionFailed) :\n-                  ConnectSocket(addrDest, hSocket, nConnectTimeout, &proxyConnectionFailed))\n-    {\n-        if (!IsSelectableSocket(hSocket)) {\n-            LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n-            CloseSocket(hSocket);\n+    std::string strDest;\n+    int port = Params().GetDefaultPort();\n+    CAddress addrDest;\n+\n+    // Check input.\n+    // If pszDest is set:\n+    // - It must contain parseable host, and optionally a port.\n+    // - If no port is supplied, the default is used.\n+    // Otherwise, addrDest must be valid.\n+    if (pszDest) {\n+        SplitHostPort(std::string(pszDest), port, strDest);\n+        if (strDest.empty()) {\n+            return false;\n+        }\n+    } else {\n+        addrDest = addrConnect;\n+        if (!addrDest.IsValid()) {\n             return false;\n         }\n+    }\n \n-        if (pszDest && addrDest.IsValid()) {\n-            // It is possible that we already have a connection to the IP/port pszDest resolved to.\n-            // In that case, drop the connection that was just created, and return the existing CNode instead.\n-            // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n-            // name catch this early.\n-            LOCK(cs_vNodes);\n-            CNode* pnode = FindNode((CService)addrDest);\n-            if (pnode)\n-            {\n-                pnode->MaybeSetAddrName(std::string(pszDest));\n-                CloseSocket(hSocket);\n-                LogPrintf(\"Failed to open new connection, already connected\\n\");\n-                return false;\n+    if (!strDest.empty()) {\n+        // Resolve strDest, if set. Only actually perform a dns lookup if they're enabled\n+        // by the current settings. Note that if strDest is already an ip address, this will\n+        // succeed regardless of the lookup setting.\n+        std::vector<CService> addrResolved;\n+        if (Lookup(strDest.c_str(), addrResolved, port, fNameLookup && !HaveNameProxy(), 256)) {\n+            if (addrResolved.size() > 0) {\n+                addrDest = CAddress(addrResolved[GetRand(addrResolved.size())], NODE_NONE);\n             }\n         }\n+    }\n \n-        addrman.Attempt(addrDest, fCountFailure);\n+    if (!strDest.empty() && addrDest.IsValid()) {\n+        // It is possible that we already have a connection to the IP/port pszDest resolved to.\n+        // In that case, drop the connection that was just created, and return the existing CNode instead.\n+        // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n+        // name catch this early.\n+        LOCK(cs_vNodes);\n+        CNode* pnode = FindNode((CService)addrDest);\n+        if (pnode)\n+        {\n+            pnode->MaybeSetAddrName(std::string(pszDest));\n+            LogPrintf(\"Failed to open new connection, already connected\\n\");\n+            return false;\n+        }\n+    }\n \n-        // Add node\n-        NodeId id = GetNewNodeId();\n-        uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n-        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrDest, CalculateKeyedNetGroup(addrDest), nonce, pszDest ? pszDest : \"\", false);\n-        pnode->nServicesExpected = ServiceFlags(addrDest.nServices & nRelevantServices);\n-        pnode->AddRef();\n+    // Configure proxy, if any. At this point, addrDest is resolved and valid unless we're connecting through\n+    // a proxy which will be handling the resolve.\n+    proxyType proxy;\n+    if (addrDest.IsValid()) {\n+        GetProxy(addrDest.GetNetwork(), proxy);\n+    } else if (!GetNameProxy(proxy)) {\n+        return false;\n+    }\n \n-        if (grantOutbound)\n-            grantOutbound->MoveTo(pnode->grantOutbound);\n-        if (fOneShot)\n-            pnode->fOneShot = true;\n-        if (fFeeler)\n-            pnode->fFeeler = true;\n-        if (fAddnode)\n-            pnode->fAddnode = true;\n+    // Create socket\n+    SOCKET hSocket = INVALID_SOCKET;\n+    if (proxy.IsValid()) {\n+        if (!CreateSocket(proxy.proxy, hSocket)) {\n+            return false;\n+        }\n+    } else {\n+        if (!CreateSocket(addrDest, hSocket)) {\n+            return false;\n+        }\n+    }\n+    if (!IsSelectableSocket(hSocket)) {\n+        LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n+        CloseSocket(hSocket);\n+        return false;\n+    }\n \n-        GetNodeSignals().InitializeNode(pnode, *this);\n-        {\n-            LOCK(cs_vNodes);\n-            vNodes.push_back(pnode);\n+    // Connect\n+    bool connected = false;\n+    if (proxy.IsValid()) {\n+        if (!ConnectSocketDirectly(proxy.proxy, hSocket, nConnectTimeout)) {\n+            // This does not count as an addrman attempt, since the address was never actually tried.\n+            return false;\n         }\n-        return true;\n-    } else if (!proxyConnectionFailed) {\n-        // If connecting to the node failed, and failure is not caused by a problem connecting to\n-        // the proxy, mark this as an attempt.\n-        addrman.Attempt(addrDest, fCountFailure);\n+        ProxyCredentials random_auth;\n+        const ProxyCredentials* proxy_auth = nullptr;\n+        if (proxy.randomize_credentials) {\n+            static std::atomic_int counter;\n+            random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n+            proxy_auth = &random_auth;\n+        }\n+        if (addrDest.IsValid()) {\n+            strDest = addrDest.ToStringIP();\n+            port = addrDest.GetPort();\n+        }\n+        connected = Socks5(strDest, (unsigned short)port, proxy_auth, hSocket);\n+    } else {\n+        connected = ConnectSocketDirectly(addrDest, hSocket, nConnectTimeout);\n     }\n-    return false;\n+\n+    addrman.Attempt(addrDest, fCountFailure);\n+\n+    if (!connected) {\n+        return false;\n+    }\n+\n+    // Add node\n+    NodeId id = GetNewNodeId();\n+    uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrDest, CalculateKeyedNetGroup(addrDest), nonce, pszDest ? pszDest : \"\", false);\n+    pnode->nServicesExpected = ServiceFlags(addrDest.nServices & nRelevantServices);\n+    pnode->AddRef();\n+\n+    if (grantOutbound)\n+        grantOutbound->MoveTo(pnode->grantOutbound);\n+    if (fOneShot)\n+        pnode->fOneShot = true;\n+    if (fFeeler)\n+        pnode->fFeeler = true;\n+    if (fAddnode)\n+        pnode->fAddnode = true;\n+\n+    GetNodeSignals().InitializeNode(pnode, *this);\n+    {\n+        LOCK(cs_vNodes);\n+        vNodes.push_back(pnode);\n+    }\n+    return true;\n }\n \n void CConnman::DumpBanlist()\n@@ -1919,11 +1985,8 @@ void CConnman::ThreadOpenAddedConnections()\n                     // the addednodeinfo state might change.\n                     break;\n                 }\n-                // If strAddedNode is an IP/port, decode it immediately, so\n-                // OpenNetworkConnection can detect existing connections to that IP/port.\n                 tried = true;\n-                CService service(LookupNumeric(info.strAddedNode.c_str(), Params().GetDefaultPort()));\n-                OpenNetworkConnection(CAddress(service, NODE_NONE), false, &grant, info.strAddedNode.c_str(), false, false, true);\n+                OpenNetworkConnection(CAddress(), false, &grant, info.strAddedNode.c_str(), false, false, true);\n                 if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n                     return;\n             }"
      },
      {
        "sha": "763adf2c58f0a63203561cba9fa23c1a20d41043",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae14fda91588c7f3b92a08afd328c984e03c3c48/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae14fda91588c7f3b92a08afd328c984e03c3c48/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=ae14fda91588c7f3b92a08afd328c984e03c3c48",
        "patch": "@@ -445,9 +445,6 @@ bool CreateSocket(const CService &addrConnect, SOCKET& hSocketRet)\n \n bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocket, int nTimeout)\n {\n-    if (!CreateSocket(addrConnect, hSocket))\n-        return false;\n-\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n     if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {"
      }
    ]
  },
  {
    "sha": "235dc01fc0458abd4490d0602adc8c42fe81e8ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzVkYzAxZmMwNDU4YWJkNDQ5MGQwNjAyYWRjOGM0MmZlODFlOGZm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-04-26T20:54:45Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-04-26T23:56:46Z"
      },
      "message": "net: remove now-unused functions",
      "tree": {
        "sha": "f0f43199f94a6ec5b3ec0b2da7fdd22613582f67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0f43199f94a6ec5b3ec0b2da7fdd22613582f67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/235dc01fc0458abd4490d0602adc8c42fe81e8ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/235dc01fc0458abd4490d0602adc8c42fe81e8ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/235dc01fc0458abd4490d0602adc8c42fe81e8ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/235dc01fc0458abd4490d0602adc8c42fe81e8ff/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae14fda91588c7f3b92a08afd328c984e03c3c48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae14fda91588c7f3b92a08afd328c984e03c3c48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae14fda91588c7f3b92a08afd328c984e03c3c48"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 0,
      "deletions": 67
    },
    "files": [
      {
        "sha": "e85814445e08803ff5659cf842b430d38f33832a",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 65,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235dc01fc0458abd4490d0602adc8c42fe81e8ff/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235dc01fc0458abd4490d0602adc8c42fe81e8ff/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=235dc01fc0458abd4490d0602adc8c42fe81e8ff",
        "patch": "@@ -555,71 +555,6 @@ bool IsProxy(const CNetAddr &addr) {\n     return false;\n }\n \n-static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n-{\n-    SOCKET hSocket = INVALID_SOCKET;\n-    // first connect to proxy server\n-    if (!ConnectSocketDirectly(proxy.proxy, hSocket, nTimeout)) {\n-        if (outProxyConnectionFailed)\n-            *outProxyConnectionFailed = true;\n-        return false;\n-    }\n-    // do socks negotiation\n-    if (proxy.randomize_credentials) {\n-        ProxyCredentials random_auth;\n-        static std::atomic_int counter;\n-        random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n-        if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket))\n-            return false;\n-    } else {\n-        if (!Socks5(strDest, (unsigned short)port, 0, hSocket))\n-            return false;\n-    }\n-\n-    hSocketRet = hSocket;\n-    return true;\n-}\n-\n-bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n-{\n-    proxyType proxy;\n-    if (outProxyConnectionFailed)\n-        *outProxyConnectionFailed = false;\n-\n-    if (GetProxy(addrDest.GetNetwork(), proxy))\n-        return ConnectThroughProxy(proxy, addrDest.ToStringIP(), addrDest.GetPort(), hSocketRet, nTimeout, outProxyConnectionFailed);\n-    else // no proxy needed (none set for target network)\n-        return ConnectSocketDirectly(addrDest, hSocketRet, nTimeout);\n-}\n-\n-bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed)\n-{\n-    std::string strDest;\n-    int port = portDefault;\n-\n-    if (outProxyConnectionFailed)\n-        *outProxyConnectionFailed = false;\n-\n-    SplitHostPort(std::string(pszDest), port, strDest);\n-\n-    proxyType proxy;\n-    GetNameProxy(proxy);\n-\n-    std::vector<CService> addrResolved;\n-    if (Lookup(strDest.c_str(), addrResolved, port, fNameLookup && !HaveNameProxy(), 256)) {\n-        if (addrResolved.size() > 0) {\n-            addr = addrResolved[GetRand(addrResolved.size())];\n-            return ConnectSocket(addr, hSocketRet, nTimeout);\n-        }\n-    }\n-\n-    addr = CService();\n-\n-    if (!HaveNameProxy())\n-        return false;\n-    return ConnectThroughProxy(proxy, strDest, port, hSocketRet, nTimeout, outProxyConnectionFailed);\n-}\n-\n bool LookupSubNet(const char* pszName, CSubNet& ret)\n {\n     std::string strSubnet(pszName);"
      },
      {
        "sha": "6551fb1169d473e421eaab5ac6215377e5875503",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235dc01fc0458abd4490d0602adc8c42fe81e8ff/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235dc01fc0458abd4490d0602adc8c42fe81e8ff/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=235dc01fc0458abd4490d0602adc8c42fe81e8ff",
        "patch": "@@ -59,8 +59,6 @@ bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLoo\n bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n CService LookupNumeric(const char *pszName, int portDefault = 0);\n bool LookupSubNet(const char *pszName, CSubNet& subnet);\n-bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed = 0);\n-bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed = 0);\n bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocket, int nTimeout);\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);"
      }
    ]
  },
  {
    "sha": "34133bd6659ed02002faad757da38562df0730ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDEzM2JkNjY1OWVkMDIwMDJmYWFkNzU3ZGEzODU2MmRmMDczMGFl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-05-02T21:30:35Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-05-02T21:31:30Z"
      },
      "message": "net: Add a quick RAII socket closer",
      "tree": {
        "sha": "e15767882b381ef7bf590ab9aefe955c1ac290ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e15767882b381ef7bf590ab9aefe955c1ac290ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34133bd6659ed02002faad757da38562df0730ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34133bd6659ed02002faad757da38562df0730ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34133bd6659ed02002faad757da38562df0730ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34133bd6659ed02002faad757da38562df0730ae/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "235dc01fc0458abd4490d0602adc8c42fe81e8ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/235dc01fc0458abd4490d0602adc8c42fe81e8ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/235dc01fc0458abd4490d0602adc8c42fe81e8ff"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 28,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fd758cd526b9b28c235ebb1742fc5b130f525294",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34133bd6659ed02002faad757da38562df0730ae/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34133bd6659ed02002faad757da38562df0730ae/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=34133bd6659ed02002faad757da38562df0730ae",
        "patch": "@@ -427,8 +427,9 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return false;\n     }\n \n-    // Create socket\n+    // Create socket and make sure that it is closed in the event of an error\n     SOCKET hSocket = INVALID_SOCKET;\n+    CSocketCloser sockCloser(hSocket);\n     if (proxy.IsValid()) {\n         if (!CreateSocket(proxy.proxy, hSocket)) {\n             return false;\n@@ -440,7 +441,6 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n     if (!IsSelectableSocket(hSocket)) {\n         LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n-        CloseSocket(hSocket);\n         return false;\n     }\n \n@@ -473,6 +473,9 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return false;\n     }\n \n+    // Connection successful. Don't close the socket.\n+    sockCloser.release();\n+\n     // Add node\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();"
      },
      {
        "sha": "fddab400796fee4d8a633cc5c2afa8de224740dd",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34133bd6659ed02002faad757da38562df0730ae/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34133bd6659ed02002faad757da38562df0730ae/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=34133bd6659ed02002faad757da38562df0730ae",
        "patch": "@@ -672,3 +672,15 @@ void InterruptSocks5(bool interrupt)\n {\n     interruptSocks5Recv = interrupt;\n }\n+\n+void CSocketCloser::release()\n+{\n+    enabled = false;\n+}\n+\n+CSocketCloser::~CSocketCloser()\n+{\n+    if (enabled) {\n+        CloseSocket(hSocket);\n+    }\n+}"
      },
      {
        "sha": "543dc9cb441d004c934070e2df924a4e637dc722",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34133bd6659ed02002faad757da38562df0730ae/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34133bd6659ed02002faad757da38562df0730ae/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=34133bd6659ed02002faad757da38562df0730ae",
        "patch": "@@ -25,6 +25,17 @@ static const int DEFAULT_CONNECT_TIMEOUT = 5000;\n //! -dns default\n static const int DEFAULT_NAME_LOOKUP = true;\n \n+class CSocketCloser\n+{\n+public:\n+    CSocketCloser(SOCKET& hSocketIn) : hSocket(hSocketIn){}\n+    ~CSocketCloser();\n+    void release();\n+private:\n+    SOCKET& hSocket;\n+    bool enabled = true;\n+};\n+\n class proxyType\n {\n public:"
      }
    ]
  },
  {
    "sha": "1d94e2ebe470cb8842223520a0c57513ca77e940",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDk0ZTJlYmU0NzBjYjg4NDIyMjM1MjBhMGM1NzUxM2NhNzdlOTQw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-05-03T00:10:27Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-05-03T00:10:34Z"
      },
      "message": "squashme: review fixups\n\n- Only check IsLocal if pszDest is unset\n- Fix function name string in CreateSocket",
      "tree": {
        "sha": "1c13da530859df47dd98d8d5955a4b2757cd28c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c13da530859df47dd98d8d5955a4b2757cd28c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d94e2ebe470cb8842223520a0c57513ca77e940",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d94e2ebe470cb8842223520a0c57513ca77e940",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d94e2ebe470cb8842223520a0c57513ca77e940",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d94e2ebe470cb8842223520a0c57513ca77e940/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34133bd6659ed02002faad757da38562df0730ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34133bd6659ed02002faad757da38562df0730ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34133bd6659ed02002faad757da38562df0730ae"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 2,
      "deletions": 6
    },
    "files": [
      {
        "sha": "dfd38576d5318579e06412afbb989584d989f376",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d94e2ebe470cb8842223520a0c57513ca77e940/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d94e2ebe470cb8842223520a0c57513ca77e940/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1d94e2ebe470cb8842223520a0c57513ca77e940",
        "patch": "@@ -353,12 +353,8 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (!fNetworkActive) {\n         return false;\n     }\n-    if (IsLocal(addrConnect)) {\n-        return false;\n-    }\n-\n     if (!pszDest) {\n-        if (FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n+        if (IsLocal(addrConnect) || FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n             FindNode(addrConnect.ToStringIPPort()))\n             return false;\n     } else if (FindNode(std::string(pszDest))) {"
      },
      {
        "sha": "7ca879608a95ecaff451903a20cf4dfddbbfafd1",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d94e2ebe470cb8842223520a0c57513ca77e940/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d94e2ebe470cb8842223520a0c57513ca77e940/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=1d94e2ebe470cb8842223520a0c57513ca77e940",
        "patch": "@@ -437,7 +437,7 @@ bool CreateSocket(const CService &addrConnect, SOCKET& hSocketRet)\n \n     // Set to non-blocking\n     if (!SetSocketNonBlocking(hSocket, true))\n-        return error(\"ConnectSocketDirectly: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n+        return error(\"%s: Setting socket to non-blocking failed, error %s\\n\", __func__, NetworkErrorString(WSAGetLastError()));\n \n     hSocketRet = hSocket;\n     return true;"
      }
    ]
  }
]