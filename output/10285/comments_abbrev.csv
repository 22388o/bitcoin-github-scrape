gmaxwell,2017-04-27T00:31:10Z,Vague Concept ACK.,https://github.com/bitcoin/bitcoin/pull/10285#issuecomment-297578336,297578336,
laanwj,2017-05-02T12:32:03Z,"utACK, going to test this",https://github.com/bitcoin/bitcoin/pull/10285#issuecomment-298621881,298621881,
theuni,2017-05-18T01:30:12Z,"Closing this for now. I'm working on getting this fully refactored with libevent instead.\n\nBreaking this out and serializing the logic was very helpful as an intermediary step, but I now agree that it doesn't make much sense to review/merge those changes alone.",https://github.com/bitcoin/bitcoin/pull/10285#issuecomment-302275523,302275523,
TheBlueMatt,2017-05-02T14:36:07Z,Shouldnt this only be if !pszDest?,https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114333281,114333281,src/net.cpp
TheBlueMatt,2017-05-02T18:17:28Z,"nit: Move this into the previous block, and maybe move the addrDest.IsValid() check into it as well. Then you can always require addrDest.IsValid() for non-named addresses as well, which seems reasonable.",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114387767,114387767,src/net.cpp
TheBlueMatt,2017-05-02T18:28:10Z,"Generally the point here is to have top-level ifs like if (strDest.empty()) and then put the logic inside of that, instead of repeated ifs for similar branches which are just confusing.",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114390273,114390273,src/net.cpp
TheBlueMatt,2017-05-02T19:15:54Z,nit: needs a string change here for \_\_func__.,https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114401222,114401222,src/netbase.cpp
TheBlueMatt,2017-05-02T19:25:03Z,"Not strictly your fault, but I think you're exposing a bug in Socks5 here - Socks5 fails to CloseSocket() prior to returning false in one place (Proxy username or password too long), so I think it'd be better to just CloseSocket here instead of further down to make it harder to miss such things.",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114403174,114403174,src/net.cpp
TheBlueMatt,2017-05-02T19:49:33Z,"Oh, also think we need a CloseSocket here.",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114408458,114408458,src/netbase.cpp
TheBlueMatt,2017-05-02T19:50:06Z,"Need a CloseSocket here (but, really, lets just move all the CloseSockets up to OpenNetworkConnection post-CreateSocket instead of them being sprinkled all over everywhere?).",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114408569,114408569,src/netbase.cpp
theuni,2017-05-02T20:02:40Z,"I avoided coalescing on purpose. The current code does a bunch of steps at once, depending on what the input is. That's what I'm trying to undo here.\n\nThe previous block handles resolving, and will be moved out to a new function as a next step. By keeping the connection flow separated like this, it's trivial to factor out that way.",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114411229,114411229,src/net.cpp
theuni,2017-05-02T20:05:34Z,"yes, thanks. Will fix.",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114411793,114411793,src/net.cpp
theuni,2017-05-02T20:06:44Z,Agreed.,https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114412081,114412081,src/net.cpp
theuni,2017-05-02T20:08:38Z,"Will fix __func__.\n\nSetSocketNonBlocking should take care of closing the socket, but an explicit one here wouldn't hurt either.\n\nCloseSocket is really annoying. I'll RAII it directly after this PR.",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114412487,114412487,src/netbase.cpp
theuni,2017-05-02T20:10:12Z,Ugh. I'll see how much work it would be to RAII it as part of this pull.,https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114412799,114412799,src/netbase.cpp
TheBlueMatt,2017-05-02T20:13:39Z,"Ahh, OK, didnt realize that the next step would be to pull it out.",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114413522,114413522,src/net.cpp
TheBlueMatt,2017-05-02T20:13:58Z,"Good, CloseSocket were half the issues here :(",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114413576,114413576,src/netbase.cpp
laanwj,2017-05-03T12:45:45Z,+1 for the SocketCloser,https://github.com/bitcoin/bitcoin/pull/10285#discussion_r114534232,114534232,src/net.cpp
TheBlueMatt,2017-05-05T19:29:12Z,It seems strange to create the CSocketCloser and then give it a reference to the socket - why not just have the CSocketCloser hold the SOCKET variable (publicly) and then set it to INVALID_SOCKET upon close/release (and return it from release) to make it feel more like a unique_ptr?,https://github.com/bitcoin/bitcoin/pull/10285#discussion_r115071588,115071588,src/net.cpp
ryanofsky,2017-05-10T21:23:47Z,"In commit ""net: pass a reference into ConnectNode and copy it there"" (82451074c2bb13dc35b41f1051ff6282ee0d3a6c)\n\nCorresponding change to net.h is missing so this commit doesn't compile.",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r115856249,115856249,src/net.cpp
ryanofsky,2017-05-10T21:33:06Z,Note: Fixed in 1d94e2ebe470cb8842223520a0c57513ca77e940.,https://github.com/bitcoin/bitcoin/pull/10285#discussion_r115858254,115858254,src/net.cpp
ryanofsky,2017-05-10T21:41:58Z,Isn't seems strange for `SetSocketNonBlocking` to try to destroy the socket if it doesn't succeed. Maybe consider removing `CloseSocket` calls from `SetSocketNonBlocking` after adding the RAII here.,https://github.com/bitcoin/bitcoin/pull/10285#discussion_r115859939,115859939,src/netbase.cpp
ryanofsky,2017-05-10T21:43:28Z,Note: fixed in 34133bd6659ed02002faad757da38562df0730ae.,https://github.com/bitcoin/bitcoin/pull/10285#discussion_r115860223,115860223,src/netbase.cpp
ryanofsky,2017-05-10T21:49:36Z,"In commit ""net: split socket creation out of connection""\n\nThis commit drops `static`, but the function isn't exposed publicly in a header until the next commit.\n\n",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r115861480,115861480,src/netbase.cpp
ryanofsky,2017-05-10T22:34:38Z,"> It seems strange to create the CSocketCloser and then give it a reference to the socket\n\nIt is strange, just like CloseSocket taking a reference is strange. But I'd think as long as one of these is taking a reference, the other probably should as well for consistency.\n\n",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r115868857,115868857,src/net.cpp
ryanofsky,2017-05-10T22:46:03Z,"> By keeping the connection flow separated like this, it's trivial to factor out that way.\n\nProbably there is something going over my head, but I don't understand the reasoning.\n\nCurrently this does:\n\n```\nif (condition) {\n  // bunch of code\n} else {\n  // other code\n}\nif (equivalent condition) {\n  // code that you want to factor out\n}\nif (equivalent condition) {\n  //",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r115870542,115870542,src/net.cpp
theuni,2017-05-10T23:51:47Z,"I gave it a reference because several calls further down the chain set the value to -1. For example, if ConnectSocketDirectly() fails. If storing a value, CSocketCloser would attempt to close it again at destruction if we weren't careful about resetting it, which would defeat the point of using RAII.\n\nThe alternative would be to audit for CloseSocket()s (or make a full-blown RAII CSocket with ",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r115878962,115878962,src/net.cpp
theuni,2017-05-11T04:53:20Z,"While it may make sense to lump a few actions together if they meet the same conditions now because a connection is just one long synchronous operation, my intention is to clarify which conditions really need to be met at which stage, so that we can break that operation up into smaller asynchronous ones.\n\nSome of these tests (like whether or not we resolved successfully) will just move in an o",https://github.com/bitcoin/bitcoin/pull/10285#discussion_r115904892,115904892,src/net.cpp
