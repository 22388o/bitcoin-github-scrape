theuni,2015-01-16T04:44:57Z,"I'm not a fan of adding more try/catch to consensus code, but that's (mostly) a matter of personal taste. Any reason for not simply returning a (differently named) ConsensusException object? Also, as another matter of personal preference, reusing the name CheckTransaction() makes it hard to read/grep. I suppose if we started using the Consensus namespace as a convention I wouldn't mind that though",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-70207822,70207822,
jtimon,2015-01-16T10:55:46Z,"@Diapolo 1) Will fix the #ifndef 2) Good catch on `#include ""primitives/block.h"" // for MAX_BLOCK_SIZE` maybe we can completely remove that include from a couple of places.\n3) Agree on MoneyRange but I didn't wanted to change functionality in this PR. Maybe it's not a big deal, let's see what others say about it. There's other potential optimizations there (for example, if every individual tx.vou",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-70238036,70238036,
Diapolo,2015-01-16T11:08:15Z,"@jtimon IMHO it makes absolutely sense to create an additional commit, which picks up my suggestion and perhaps also your optimisation ideas. It makes things easy to review if the last commit would be that.\n\nAbout my suggestion for the input strings, I just meant changing them to `const std::string&`, if possible. I did not think about making other changes :).\n\nThanks for also picking up the o",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-70239306,70239306,
jtimon,2015-01-16T12:48:23Z,"Since it is still very new, I took the liberty of directly editing the commits instead of adding new ones to later rebase and squash.\nChanges done:\n1) The exception is changed for a Consensus::Result object that is returned as suggested by @theuni  \n2) The function attribute is removed as I thought @Diapolo was suggesting...\n3) Not only the inputs to the constructor are ""constified"" as suggest",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-70249138,70249138,
jtimon,2015-01-16T12:51:27Z,"Also, I replaced a couple of `#include ""primitives/block.h"" // for MAX_BLOCK_SIZE` for `#include ""consensus/consensus.h"" // for MAX_BLOCK_SIZE` instead of just adding `#include ""consensus/consensus.h""`\n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-70249390,70249390,
theuni,2015-01-16T22:53:38Z,"Hmm, looking at this again.. What's the reason for not dropping state.Abort() (it makes no sense for a state object to be aborting the node anyway imo), creating something like ""abortNodeBadState(CValidationState& state, std::string reason)"" to take its place, and moving CValidationState into consensus.o ? That way we could share much more code with the current implementation.\n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-70335927,70335927,
theuni,2015-01-16T23:53:01Z,"I was curious to see what it'd look like, so I tried out the above suggested change in one big nasty commit: https://github.com/theuni/bitcoin/commit/fd19dd4b92e27d2e967daf47c36147eaed3d1e22\n\nIt seems quite advantageous to have CValidationState in consensus.o.\n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-70341630,70341630,
jtimon,2015-01-17T11:20:23Z,Yesterday I realized that the result object should be more generic to be used by other consensus functions. Also it would be useful for some policy methods.\nI concluded that the simplest thing would be to mimic CValidationState::DoS() header: \nhttps://github.com/jtimon/bitcoin/commit/9e67b59d52834fb7b52ad9e3b428117c35d28822 and https://github.com/jtimon/bitcoin/commit/e92e852413c4c8418edd8722307,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-70363377,70363377,
jtimon,2015-01-17T13:37:06Z,Rebased with CValidationState in consensus/validation.h.\nI chose not to put it in consensus/consensus.h because:\n\n1) Not everything that needs consensus.h needs validation.h (like merkleblock.cpp bitcoin-tx.cpp for now)\n2) Not everything that needs validation.h needs consensus.h (like probably policy.o)\n\nFeel free to bikeshed the file names.\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-70367200,70367200,
theuni,2015-01-19T21:03:09Z,"Mm, this is now hard to review because it's such a moving target. I was ready to ACK the changes after another quick review based on your comment above, but lots of other things have been touched since then. Could you try to keep this to a somewhat narrow scope for the sake of review?\n\nAlso, since a fresh review is needed, please go ahead and rebase to remove the squashme's.\n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-70560149,70560149,
jtimon,2015-01-20T00:08:30Z,"Rebased on top of #5681, added some ""SQUASHME"" notes since some small commits like those flagged with  ""MOVEONLY"", are only useful for the initial review (for example I separated theuni@fd19dd4 into https://github.com/jtimon/bitcoin/commit/72e5068ebe1aad33f05a02f7eabe65abb098dff0 and https://github.com/jtimon/bitcoin/commit/8a6590ccb3f51978333d50878af3d79005ca4dfb).\nI am very sorry for having scr",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-70583170,70583170,
theuni,2015-01-20T01:06:43Z,Ok. Concept ACK here. I'll re-review and verify the MOVEONLY's after #5681.\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-70588246,70588246,
jtimon,2015-01-26T12:34:03Z,"Rebased, now it is dependent on #5696 instead of #5681.\n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-71454161,71454161,
jtimon,2015-02-03T20:59:52Z,Needed rebase\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-72733511,72733511,
jtimon,2015-02-15T21:04:14Z,Rebased on top of rebased #5696\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-74436889,74436889,
jtimon,2015-02-21T21:48:42Z,Rebased on top of the modified #5696 \n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-75394778,75394778,
jtimon,2015-03-11T13:29:36Z,Needed rebase\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-78262434,78262434,
jtimon,2015-03-13T11:51:06Z,"Rebased to make travis happy, like in #5696 \n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-78936233,78936233,
jtimon,2015-03-13T12:41:27Z,Rebased without @laanwj 's fix after #5883 has been merged\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-78954041,78954041,
jtimon,2015-03-17T10:59:42Z,"Once again, rebased on top of a modified #5696.\n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-82275766,82275766,
jtimon,2015-03-26T11:59:05Z,Needed rebase\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-86483928,86483928,
jtimon,2015-03-28T12:57:04Z,I left the MOVEONLY commit moving Consensus::CheckTx() for later to move more functions at once.\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-87224816,87224816,
jtimon,2015-04-01T13:08:54Z,Reducing the scope of the PR again. It doesn't move any policy global or constant anymore.\nIt doesn't refactor main::CheckTransaction() either.\nSo what remains is basically creating the consensus/consensus.h file with the consensus constants and preparing CValidationState for consensus movements.\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-88473780,88473780,
jtimon,2015-04-19T22:44:08Z,"Needed rebase.\nAlso I reduced the scope of the PR once again. The moveonly commit can wait for more things to be moved at the same time, but the AbortNode() vs state.Abort() is making me work more with rebases. That's why I included the decoupling commit in #5970 \n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-94320886,94320886,
jtimon,2015-04-20T19:10:28Z,"Needed rebase. Also I thought more about it and it's good to separate the class from main as soon as possible not only for consensus encapsulation but also for policy encapsulation (maybe wallet too? ), and include organization. So I put the moveonly commit back in.\nI left the commit moving the consensus constants out instead, which is included in another mergeable PR (#5595) anyway.\n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-94544113,94544113,
theuni,2015-04-23T20:49:38Z,"ACK. I think this is merge-ready. My only nit would be validation.h -> validationstate.h, but not a big deal either way.\n\nI'd like to see the DoS functionality moved out, but that can be discussed after this goes in.\n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-95714905,95714905,
jtimon,2015-04-23T21:37:11Z,"I could rename it but I would prefer not to do so to avoid rebasing some branches based on this if it's not a big deal.\nI agree the class can be simplified, even to the point of leaving it at the rejection reason, but yeah, we can discuss that later.\n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-95726839,95726839,
sipa,2015-04-24T10:08:02Z,"ACK, needs rebase though.\n\nLonger term (but not for this PR), handling of system errors (the ERROR) state should be handled completely separately from CValidationState (yes, my fault that I introduced it there). There are several functions that only use a CValidationState to pass on possible system failure (and not actually failed validation).\n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-95881005,95881005,
jtimon,2015-04-25T10:00:08Z,rebased\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-96170566,96170566,
jtimon,2015-04-26T13:21:29Z,Needed rebase\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-96377583,96377583,
jonasschnelli,2015-05-09T17:38:04Z,ACK.\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-100521924,100521924,
theuni,2015-05-09T19:03:44Z,"reACK. Untested after rebase, but still looks sane.\n",https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-100530400,100530400,
jtimon,2015-05-15T14:06:02Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-102408510,102408510,
jtimon,2015-05-19T21:30:18Z,Ping @laanwj it would be cleaner to merge this before #6051\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-103671732,103671732,
laanwj,2015-05-21T10:35:35Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-104220910,104220910,
theuni,2015-05-22T00:39:40Z,ut ACK\n,https://github.com/bitcoin/bitcoin/pull/5669#issuecomment-104460173,104460173,
Diapolo,2015-01-16T07:31:52Z,"Just a question, `MoneyRange()` does `return (nValue >= 0 && nValue <= MAX_MONEY)`, why not reuse `MoneyRange()` also for the check before accumulating the amounts and just give another error message? This would de-duplicate the above code.\n",https://github.com/bitcoin/bitcoin/pull/5669#discussion_r23066315,23066315,src/consensus/consensus.cpp
Diapolo,2015-01-16T07:32:46Z,"This has to be `BITCOIN_CONSENSUS_CONSENSUS_H`, because you are in the directory consensus.\n",https://github.com/bitcoin/bitcoin/pull/5669#discussion_r23066337,23066337,src/consensus/consensus.h
Diapolo,2015-01-16T07:33:28Z,Perhaps some of the input strings can be constified?\n,https://github.com/bitcoin/bitcoin/pull/5669#discussion_r23066359,23066359,src/consensus/consensus.h
Diapolo,2015-01-16T07:35:51Z,If MAX_BLOCK_SIZE really should go into consensus.h then you need to remove this comment (and perhaps we have that also in other places).\n,https://github.com/bitcoin/bitcoin/pull/5669#discussion_r23066434,23066434,src/merkleblock.cpp
