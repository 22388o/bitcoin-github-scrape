DrahtBot,2021-03-02 10:11:42,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21500 by S3RK\n* #20096 by achow101\n\nIf you consider this pull request important, please also help to review the confli",https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-788791440,788791440,
S3RK,2021-03-09 07:55:22,Started reviewing this,https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-793505411,793505411,
S3RK,2021-04-21 07:04:42,"reACK ec22064. Just rebased on top of latest master\n\nMy [comment above](https://github.com/bitcoin/bitcoin/pull/21329#pullrequestreview-614021474) is still relevant though.",https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-823829443,823829443,
achow101,2021-04-21 16:31:45,"> With that said, I don't like the direction in which `DescriptorImpl::ToStringHelper` and `DescriptorScriptPubKeyMan::TopUp` is going. The code becomes more and more complicated and there are untapped opportunities for simplification.\n\nWhat direction do you think it should be going in?",https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-824197588,824197588,
S3RK,2021-04-22 07:30:02,"> What direction do you think it should be going in?\n\nThanks for asking. I think we need to try to simplify the code for readability and comprehension. Some rough ideas:\n\n1) for `ToStringHelper` we can a) avoid multiple flags controlling the control flow b) shift non-general code to child classes (addr, raw, multisig). \n\nTo be more specific for this PR: I think it's better to have `ToN",https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-824610596,824610596,
achow101,2021-04-22 19:26:21,"> To be more specific for this PR: I think it's better to have `ToNormalizedString` reimplement some logic and not call `ToStringHelper` at all. Both functions would be easier to reason about. We also don't need to support normalized private descriptors case, no code actually uses this.\n\nI kind of disagree. All of the `To*String` functions do roughly the same thing. The construction of all of ",https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-825124865,825124865,
S3RK,2021-04-26 07:00:03,utACK e668b9e. Thanks for incorporating my suggestions. ,https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-826562621,826562621,
fjahr,2021-06-27 22:48:22,"tACK e6cf0ed92de31a5ac35a271b0da8f0a8364d1175\n\nReviewed code, light manual testing with restarts to ensure persistence works (could have been covered by a test case as well).\n\nnit: in d87b544b834077f102724415e0fada6ee8b2def2 there is a typo in commit description: ""hardenex""",https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-869234463,869234463,
achow101,2021-06-29 17:51:58,I will implement the suggestions if I have to retouch.,https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-870796836,870796836,
S3RK,2021-06-30 07:23:54,"reACK e6cf0ed\n\nChanges from last review: 1) `PubkeyProvider::GetPubKey` became const 2) necessary changes for taproot descriptors\n\nHappy to reACK again if you want to incorporate jonatack's readability suggestions",https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-871161449,871161449,
fanquake,2021-06-30 08:15:04,@meshcollider ,https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-871193416,871193416,
meshcollider,2021-06-30 21:59:45,"Nits can be left for follow-up if needed, lets just get this in",https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-871754641,871754641,
DrahtBot,2021-06-30 22:12:44,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-871761012,871761012,
achow101,2021-06-30 22:31:22,"This was merged, but github isn't detecting it.",https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-871769093,871769093,
jonatack,2021-06-30 22:34:40,"There have been several of these, I think this is the third one in as many days.",https://github.com/bitcoin/bitcoin/pull/21329#issuecomment-871770444,871770444,
sipa,2021-03-02 03:03:06,"Passing a copy of the entire cache seems overkill here, and especially without std::move's you're going to be making copies in every step in the call graph.\n\nThe language purist version would be `std::optional<std::reference_wrapper<const DescriptorCache>>` to achieve something like an optional reference to a const cache. But just `const DescriptorCache*` works just as well...",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r585212906,585212906,src/script/descriptor.cpp
sipa,2021-03-02 03:06:07,"Argh, I meant to click comment, not approve...",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r585213867,585213867,src/script/descriptor.cpp
achow101,2021-03-02 18:06:11,Done,https://github.com/bitcoin/bitcoin/pull/21329#discussion_r585792052,585792052,src/script/descriptor.cpp
S3RK,2021-03-10 08:58:48,"nit: I think it would be nice to simply this function by extracting the code for splitting KeyPath. We can introduce a member function like:\n```cpp\nstd::pair<KeyPath, KeyPath> KeyPath::split_unhardened() const;\n```\nor \n```cpp\nKeyPath KeyPath::split_unhardened();\n```",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r591236020,591236020,src/script/descriptor.cpp
S3RK,2021-03-11 07:55:57,Why not pass it as const reference? It can help to remove some of the checks and we can always relax the requirements and make it optional later if needed.,https://github.com/bitcoin/bitcoin/pull/21329#discussion_r592135979,592135979,src/script/descriptor.h
S3RK,2021-03-14 16:57:08,I can't see how this ever evaluates to `true` since we exit early if the cache exists.,https://github.com/bitcoin/bitcoin/pull/21329#discussion_r593929906,593929906,src/wallet/scriptpubkeyman.cpp
S3RK,2021-03-14 17:20:07,Why do we need a temp cache? ,https://github.com/bitcoin/bitcoin/pull/21329#discussion_r593933030,593933030,src/wallet/scriptpubkeyman.cpp
achow101,2021-03-14 18:07:33,Not every caller of this will necessarily have a cache to pass.,https://github.com/bitcoin/bitcoin/pull/21329#discussion_r593938969,593938969,src/script/descriptor.h
achow101,2021-03-14 18:10:47,"I don't follow.\n\nThis is checking to see if elements in the temp cache are in the stored cache;",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r593939354,593939354,src/wallet/scriptpubkeyman.cpp
achow101,2021-03-14 18:12:13,"To avoid modifying the wallet state if something goes wrong during expansion. It is possible that the cache could be modified, but something else causes expansion to fail.",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r593939497,593939497,src/wallet/scriptpubkeyman.cpp
achow101,2021-03-14 18:14:27,I don't think that's really necessary since we only do the split in this one spot.,https://github.com/bitcoin/bitcoin/pull/21329#discussion_r593939739,593939739,src/script/descriptor.cpp
S3RK,2021-03-15 07:27:56,"But the stored cache is always empty, no? I'm looking at the line 2303",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r594100575,594100575,src/wallet/scriptpubkeyman.cpp
S3RK,2021-03-15 07:42:30,"Ok. I don't have strong feelings about it, but right now the only caller besides the unit tests is `DescriptorScriptPubKeyMan`. Though I can imagine other possibilities in the future I'd still go with more restrictive signature as it's easier to relax the requirements rather than the other way around. ",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r594107561,594107561,src/script/descriptor.h
achow101,2021-03-15 15:40:13,"Ah, I see. There shouldn't be anything in the stored cache, however I am doing this as a belt-and-suspenders check.",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r594448119,594448119,src/wallet/scriptpubkeyman.cpp
S3RK,2021-03-17 08:42:23,"If this is a new wallet, at what time do we set the `WALLET_FLAG_LAST_HARDENED_XPUB_CACHED` flag?",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r595812931,595812931,src/wallet/scriptpubkeyman.cpp
S3RK,2021-03-18 08:07:28,I don't understand the real life scenario. From what I see `Expand` fails if we can't get a pub key. For example we tried to derive hardened derivation from the cache or the cache itself was inconsistent. This seems to indicate some logic error in the code itself or a corrupted state. Is my understanding correct or do I miss something?,https://github.com/bitcoin/bitcoin/pull/21329#discussion_r596629909,596629909,src/wallet/scriptpubkeyman.cpp
S3RK,2021-03-18 08:25:25,"Feel free to leave it as it. But just to clarify my point. It's not about code deduplication, it's about readability and comprehension. There are 3 loops dedicated to splitting derivation path and I think they distract from the main purpose of this function.",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r596640549,596640549,src/script/descriptor.cpp
S3RK,2021-03-18 08:40:21,"I find it confusing when we check same conditions multiple times in different places because it's not clear what is the responsibility/assumptions of each class/function. It also makes it harder to modify the code. `DescriptorScriptPubKeyMan` and `CWallet` are strongly coupled anyway.\n\nMaybe we can just remove the check on the top of the function? Even in the worst case nothing will go wrong 1",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r596650372,596650372,src/wallet/scriptpubkeyman.cpp
achow101,2021-03-18 17:12:35,"`LoadWallet`, which is called as part of wallet creation, will always call `CWallet::UpgradeDescriptorCache`. Since a newly created wallet is never encrypted at that stage, and has no `ScriptPubKeyMan`s, `UpgradeDescriptorCache` will just set the flag.",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r597081685,597081685,src/wallet/scriptpubkeyman.cpp
achow101,2021-03-18 17:16:38,"This is largely just code duplicated from TopUp. The intention was to refactor them to avoid the duplication, but I never got around to doing that.\n\nThe check at the top of the function is important to avoid unnecessary extra computation which slows down wallet loading and unlocking.",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r597084769,597084769,src/wallet/scriptpubkeyman.cpp
achow101,2021-03-18 17:24:03,"Consider `multi(2,xpub.../0/*,xpub.../0h/*)`. The first xpub is entirely unhardened derivation. So we will have entries added to the cache when it is expanded. When `ExpandHelper` moves onto the second xpub, it finds it is entirely hardened derivation. If the keys are unavailable (e.g. they're encrypted), expand now fails here. However the cache now has entries for the first xpub but no entries fo",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r597090580,597090580,src/wallet/scriptpubkeyman.cpp
jonatack,2021-06-24 15:06:11,"0cc90f1e3dbccd5940b05b633260fdcd8dac5581 essentially reverts 09e25071f40 IIUC. Perhaps re-add `const` to the four `GetPubKey()` member functions in the commit and mention in the commit message that it reverts 09e25071f40\n\n```diff\n-    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* wr",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r658034162,658034162,src/script/descriptor.cpp
jonatack,2021-06-24 16:25:36,"Apart from this, ACK up to 8fac319f6d180fa5c597ea08beb7827331e7d9ec so far (the first three commits).",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r658103313,658103313,src/script/descriptor.cpp
achow101,2021-06-24 17:47:48,I've made this commit into a pure revert with an extra comment saying why.,https://github.com/bitcoin/bitcoin/pull/21329#discussion_r658159649,658159649,src/script/descriptor.cpp
jonatack,2021-06-26 12:56:01,"d87b544b consider naming `s/lh_xprv/last_hardened_xprv/` as ""lh"" is a common abbreviation for left-hand and `last_hardened_extkey` is a localvar too",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r659164948,659164948,src/script/descriptor.cpp
jonatack,2021-06-26 13:07:11,"d87b544b could make this easier to quickly understand\n```suggestion\n        if (GetCachedLastHardenedExtPubKey(/* key_exp_pos */ lh_xpub_pair.first, xpub)) {\n```",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r659165999,659165999,src/script/descriptor.cpp
jonatack,2021-06-26 13:10:54,"d87b544b It would be nice to make the code easier to quickly understand (using a struct instead of pairs would make the code more self-documenting but is outside the scope here)\n```diff\n-        CacheLastHardenedExtPubKey(lh_xpub_pair.first, lh_xpub_pair.second);\n-        diff.CacheLastHardenedExtPubKey(lh_xpub_pair.first, lh_xpub_pair.second);\n+        CacheLastHardenedExtPubKey(\n+     ",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r659166424,659166424,src/script/descriptor.cpp
jonatack,2021-06-26 13:27:50,"432ba9e this naming isn't very readable; `s/LH/LASTHARDENED/` would be nice and per developer-notes.md, ""constant names are all uppercase, and use `_` to separate words""\n```suggestion\nconst std::string WALLET_DESCRIPTOR_LAST_HARDENED_CACHE{""walletdescriptorlhcache""};\n```\n",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r659168013,659168013,src/wallet/walletdb.cpp
jonatack,2021-06-26 13:33:06,d87b544 it would be nice to hoist these `31` values to a well-named constant,https://github.com/bitcoin/bitcoin/pull/21329#discussion_r659168559,659168559,src/script/descriptor.cpp
jonatack,2021-06-26 13:38:21,"432ba9e readability suggestion\n```diff\n-    for (const auto& lh_xpub_pair : cache.GetCachedLastHardenedExtPubKeys()) {\n-        if (!WriteDescriptorLastHardenedCache(lh_xpub_pair.second, desc_id, lh_xpub_pair.first)) {\n+    for (const auto& last_hardened_xpub_pair : cache.GetCachedLastHardenedExtPubKeys()) {\n+        if (!WriteDescriptorLastHardenedCache(/* xpub */ last_hardened_xpub_pai",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r659169067,659169067,src/wallet/walletdb.cpp
jonatack,2021-06-26 14:31:04,"74fede3 It seems like `IsLocked()` is already checked by the callers `CWallet::UpgradeDescriptorCache` and `CWallet::Unlock` IIUC, but belt-and-suspenders, I suppose.",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r659174750,659174750,src/wallet/scriptpubkeyman.cpp
jonatack,2021-06-26 14:57:43,"3280704 naming style, suggest `last_hardened_xprv`, as this looks like ""left-hand xprv""",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r659177495,659177495,src/script/descriptor.cpp
jonatack,2021-06-26 14:59:06,"3280704\n```suggestion\n            // Cache miss, or no cache, or need privkey\n```",https://github.com/bitcoin/bitcoin/pull/21329#discussion_r659177602,659177602,src/script/descriptor.cpp
