[
  {
    "sha": "976b53b085d681645fd3a008fe382de85647e29f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzZiNTNiMDg1ZDY4MTY0NWZkM2EwMDhmZTM4MmRlODU2NDdlMjlm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:38:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:15Z"
      },
      "message": "Revert \"Cache parent xpub inside of BIP32PubkeyProvider\"\n\nThis reverts commit 09e25071f40c564af08a1386c39c4f2d8eb484b6.\n\nThe changes made in this commit have turned out to be unnecessary and\nconfusing, so it is being reverted.",
      "tree": {
        "sha": "5871d4fd45135aa0511b6e9479925e1728f558c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5871d4fd45135aa0511b6e9479925e1728f558c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/976b53b085d681645fd3a008fe382de85647e29f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/976b53b085d681645fd3a008fe382de85647e29f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/976b53b085d681645fd3a008fe382de85647e29f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/976b53b085d681645fd3a008fe382de85647e29f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2f5c38333fd2ec03fd1299a1bce507b25753f45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2f5c38333fd2ec03fd1299a1bce507b25753f45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2f5c38333fd2ec03fd1299a1bce507b25753f45"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 4,
      "deletions": 15
    },
    "files": [
      {
        "sha": "94a758a66d2b86014e77adf7d7eedcc83abb4432",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 15,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/976b53b085d681645fd3a008fe382de85647e29f/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/976b53b085d681645fd3a008fe382de85647e29f/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=976b53b085d681645fd3a008fe382de85647e29f",
        "patch": "@@ -166,7 +166,7 @@ struct PubkeyProvider\n      *  write_cache is the cache to write keys to (if not nullptr)\n      *  Caches are not exclusive but this is not tested. Currently we use them exclusively\n      */\n-    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) = 0;\n+    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const = 0;\n \n     /** Whether this represent multiple public keys at different positions. */\n     virtual bool IsRange() const = 0;\n@@ -199,7 +199,7 @@ class OriginPubkeyProvider final : public PubkeyProvider\n \n public:\n     OriginPubkeyProvider(uint32_t exp_index, KeyOriginInfo info, std::unique_ptr<PubkeyProvider> provider) : PubkeyProvider(exp_index), m_origin(std::move(info)), m_provider(std::move(provider)) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n         if (!m_provider->GetPubKey(pos, arg, key, info, read_cache, write_cache)) return false;\n         std::copy(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint), info.fingerprint);\n@@ -245,7 +245,7 @@ class ConstPubkeyProvider final : public PubkeyProvider\n \n public:\n     ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey, bool xonly) : PubkeyProvider(exp_index), m_pubkey(pubkey), m_xonly(xonly) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n         key = m_pubkey;\n         info.path.clear();\n@@ -288,9 +288,6 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     CExtPubKey m_root_extkey;\n     KeyPath m_path;\n     DeriveType m_derive;\n-    // Cache of the parent of the final derived pubkeys.\n-    // Primarily useful for situations when no read_cache is provided\n-    CExtPubKey m_cached_xpub;\n \n     bool GetExtKey(const SigningProvider& arg, CExtKey& ret) const\n     {\n@@ -327,7 +324,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     BIP32PubkeyProvider(uint32_t exp_index, const CExtPubKey& extkey, KeyPath path, DeriveType derive) : PubkeyProvider(exp_index), m_root_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}\n     bool IsRange() const override { return m_derive != DeriveType::NO; }\n     size_t GetSize() const override { return 33; }\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key_out, KeyOriginInfo& final_info_out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key_out, KeyOriginInfo& final_info_out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n         // Info of parent of the to be derived pubkey\n         KeyOriginInfo parent_info;\n@@ -352,9 +349,6 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n                 final_extkey = parent_extkey;\n                 if (m_derive == DeriveType::UNHARDENED) der = parent_extkey.Derive(final_extkey, pos);\n             }\n-        } else if (m_cached_xpub.pubkey.IsValid() && m_derive != DeriveType::HARDENED) {\n-            parent_extkey = final_extkey = m_cached_xpub;\n-            if (m_derive == DeriveType::UNHARDENED) der = parent_extkey.Derive(final_extkey, pos);\n         } else if (IsHardened()) {\n             CExtKey xprv;\n             if (!GetDerivedExtKey(arg, xprv)) return false;\n@@ -376,11 +370,6 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         final_info_out = final_info_out_tmp;\n         key_out = final_extkey.pubkey;\n \n-        // We rely on the consumer to check that m_derive isn't HARDENED as above\n-        // But we can't have already cached something in case we read something from the cache\n-        // and parent_extkey isn't actually the parent.\n-        if (!m_cached_xpub.pubkey.IsValid()) m_cached_xpub = parent_extkey;\n-\n         if (write_cache) {\n             // Only cache parent if there is any unhardened derivation\n             if (m_derive != DeriveType::HARDENED) {"
      }
    ]
  },
  {
    "sha": "0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjRjOGVmNzVjZDAzYzhmMGE4Y2ZhZGI0N2UwZmJjYWJlM2M1ZTU5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-22T17:12:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:22Z"
      },
      "message": "Refactor Cache merging and writing\n\nInstead of having a large blob of cache merging code in TopUp, refactor\nthis into DescriptorCache so that it can merge and provide a diff\n(another DescriptorCache containing just the items that were added).\nThen TopUp can just write everything that was in the diff.",
      "tree": {
        "sha": "05930f77c279302b337aee421e1bc2bb4fb6ba44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05930f77c279302b337aee421e1bc2bb4fb6ba44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "976b53b085d681645fd3a008fe382de85647e29f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/976b53b085d681645fd3a008fe382de85647e29f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/976b53b085d681645fd3a008fe382de85647e29f"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 39,
      "deletions": 19
    },
    "files": [
      {
        "sha": "9727a7a26fcdad69d49fc9052e792974d3c6a878",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
        "patch": "@@ -1418,6 +1418,36 @@ bool DescriptorCache::GetCachedDerivedExtPubKey(uint32_t key_exp_pos, uint32_t d\n     return true;\n }\n \n+DescriptorCache DescriptorCache::MergeAndDiff(const DescriptorCache& other)\n+{\n+    DescriptorCache diff;\n+    for (const auto& parent_xpub_pair : other.GetCachedParentExtPubKeys()) {\n+        CExtPubKey xpub;\n+        if (GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+            if (xpub != parent_xpub_pair.second) {\n+                throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+            }\n+            continue;\n+        }\n+        CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        diff.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+    }\n+    for (const auto& derived_xpub_map_pair : other.GetCachedDerivedExtPubKeys()) {\n+        for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+            CExtPubKey xpub;\n+            if (GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                if (xpub != derived_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                }\n+                continue;\n+            }\n+            CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            diff.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+        }\n+    }\n+    return diff;\n+}\n+\n const ExtPubKeyMap DescriptorCache::GetCachedParentExtPubKeys() const\n {\n     return m_parent_xpubs;"
      },
      {
        "sha": "7e422332a0ffb5c9450a396cf0fb17c286eb1f7d",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
        "patch": "@@ -55,6 +55,11 @@ class DescriptorCache {\n     const ExtPubKeyMap GetCachedParentExtPubKeys() const;\n     /** Retrieve all cached derived xpubs */\n     const std::unordered_map<uint32_t, ExtPubKeyMap> GetCachedDerivedExtPubKeys() const;\n+\n+    /** Combine another DescriptorCache into this one.\n+     * Returns a cache containing the items from the other cache unknown to current cache\n+     */\n+    DescriptorCache MergeAndDiff(const DescriptorCache& other);\n };\n \n /** \\brief Interface for parsed descriptor objects."
      },
      {
        "sha": "63add229177f3ccfa3fd3cfdb626b75259722be5",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 19,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
        "patch": "@@ -1805,33 +1805,18 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n             }\n             m_map_pubkeys[pubkey] = i;\n         }\n-        // Write the cache\n-        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n-            CExtPubKey xpub;\n-            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n-                if (xpub != parent_xpub_pair.second) {\n-                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n-                }\n-                continue;\n-            }\n+        // Merge and write the cache\n+        DescriptorCache new_items = m_wallet_descriptor.cache.MergeAndDiff(temp_cache);\n+        for (const auto& parent_xpub_pair : new_items.GetCachedParentExtPubKeys()) {\n             if (!batch.WriteDescriptorParentCache(parent_xpub_pair.second, id, parent_xpub_pair.first)) {\n                 throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n             }\n-            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n         }\n-        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+        for (const auto& derived_xpub_map_pair : new_items.GetCachedDerivedExtPubKeys()) {\n             for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n-                CExtPubKey xpub;\n-                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n-                    if (xpub != derived_xpub_pair.second) {\n-                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n-                    }\n-                    continue;\n-                }\n                 if (!batch.WriteDescriptorDerivedCache(derived_xpub_pair.second, id, derived_xpub_map_pair.first, derived_xpub_pair.first)) {\n                     throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n                 }\n-                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n             }\n         }\n         m_max_cached_index++;"
      }
    ]
  },
  {
    "sha": "cacc3910989c4f3d7afa530dbab042461426abce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWNjMzkxMDk4OWM0ZjNkN2FmYTUzMGRiYWIwNDI0NjE0MjZhYmNl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-22T17:24:02Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:22Z"
      },
      "message": "Move DescriptorCache writing to WalletBatch\n\nInstead of adhoc writing of the items in DescriptorCache, move it all\ninto WalletBatch.",
      "tree": {
        "sha": "8e08000af456482dbe18abf3df5f5fd4cb25db03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e08000af456482dbe18abf3df5f5fd4cb25db03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cacc3910989c4f3d7afa530dbab042461426abce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cacc3910989c4f3d7afa530dbab042461426abce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cacc3910989c4f3d7afa530dbab042461426abce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cacc3910989c4f3d7afa530dbab042461426abce/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 20,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ec38265216e8ec77fee8e95f0111176e8985c1a1",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cacc3910989c4f3d7afa530dbab042461426abce/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cacc3910989c4f3d7afa530dbab042461426abce/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=cacc3910989c4f3d7afa530dbab042461426abce",
        "patch": "@@ -1807,17 +1807,8 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n         }\n         // Merge and write the cache\n         DescriptorCache new_items = m_wallet_descriptor.cache.MergeAndDiff(temp_cache);\n-        for (const auto& parent_xpub_pair : new_items.GetCachedParentExtPubKeys()) {\n-            if (!batch.WriteDescriptorParentCache(parent_xpub_pair.second, id, parent_xpub_pair.first)) {\n-                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n-            }\n-        }\n-        for (const auto& derived_xpub_map_pair : new_items.GetCachedDerivedExtPubKeys()) {\n-            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n-                if (!batch.WriteDescriptorDerivedCache(derived_xpub_pair.second, id, derived_xpub_map_pair.first, derived_xpub_pair.first)) {\n-                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n-                }\n-            }\n+        if (!batch.WriteDescriptorCacheItems(id, new_items)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing cache items failed\");\n         }\n         m_max_cached_index++;\n     }"
      },
      {
        "sha": "294fa3b8ee38f2a97c052b0b1bdb6f1895f68042",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cacc3910989c4f3d7afa530dbab042461426abce/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cacc3910989c4f3d7afa530dbab042461426abce/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=cacc3910989c4f3d7afa530dbab042461426abce",
        "patch": "@@ -248,6 +248,23 @@ bool WalletBatch::WriteDescriptorParentCache(const CExtPubKey& xpub, const uint2\n     return WriteIC(std::make_pair(std::make_pair(DBKeys::WALLETDESCRIPTORCACHE, desc_id), key_exp_index), ser_xpub);\n }\n \n+bool WalletBatch::WriteDescriptorCacheItems(const uint256& desc_id, const DescriptorCache& cache)\n+{\n+    for (const auto& parent_xpub_pair : cache.GetCachedParentExtPubKeys()) {\n+        if (!WriteDescriptorParentCache(parent_xpub_pair.second, desc_id, parent_xpub_pair.first)) {\n+            return false;\n+        }\n+    }\n+    for (const auto& derived_xpub_map_pair : cache.GetCachedDerivedExtPubKeys()) {\n+        for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+            if (!WriteDescriptorDerivedCache(derived_xpub_pair.second, desc_id, derived_xpub_map_pair.first, derived_xpub_pair.first)) {\n+                return false;\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};"
      },
      {
        "sha": "b11d750a3a5d0fceb0eb894a60554f64588213f1",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cacc3910989c4f3d7afa530dbab042461426abce/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cacc3910989c4f3d7afa530dbab042461426abce/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=cacc3910989c4f3d7afa530dbab042461426abce",
        "patch": "@@ -246,6 +246,7 @@ class WalletBatch\n     bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n     bool WriteDescriptorDerivedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index);\n     bool WriteDescriptorParentCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n+    bool WriteDescriptorCacheItems(const uint256& desc_id, const DescriptorCache& cache);\n \n     /// Write destination data key,value tuple to database\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);"
      }
    ]
  },
  {
    "sha": "d87b544b834077f102724415e0fada6ee8b2def2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODdiNTQ0YjgzNDA3N2YxMDI3MjQ0MTVlMGZhZGE2ZWU4YjJkZWYy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-01T21:18:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:22Z"
      },
      "message": "descriptors: Cache last hardened xpub\n\nCache the last hardenex xpub in the DescriptorCache",
      "tree": {
        "sha": "d477a3f60f8bdc5e326235896fa9a0b12e3c0e6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d477a3f60f8bdc5e326235896fa9a0b12e3c0e6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d87b544b834077f102724415e0fada6ee8b2def2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d87b544b834077f102724415e0fada6ee8b2def2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d87b544b834077f102724415e0fada6ee8b2def2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d87b544b834077f102724415e0fada6ee8b2def2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cacc3910989c4f3d7afa530dbab042461426abce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cacc3910989c4f3d7afa530dbab042461426abce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cacc3910989c4f3d7afa530dbab042461426abce"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 61,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6f8af2c32b9b1c23c90e2f0ceb54083a7e713379",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 3,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87b544b834077f102724415e0fada6ee8b2def2/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87b544b834077f102724415e0fada6ee8b2def2/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=d87b544b834077f102724415e0fada6ee8b2def2",
        "patch": "@@ -302,11 +302,14 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n \n     // Derives the last xprv\n-    bool GetDerivedExtKey(const SigningProvider& arg, CExtKey& xprv) const\n+    bool GetDerivedExtKey(const SigningProvider& arg, CExtKey& xprv, CExtKey& last_hardened) const\n     {\n         if (!GetExtKey(arg, xprv)) return false;\n         for (auto entry : m_path) {\n             xprv.Derive(xprv, entry);\n+            if (entry >> 31) {\n+                last_hardened = xprv;\n+            }\n         }\n         return true;\n     }\n@@ -340,6 +343,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         // Derive keys or fetch them from cache\n         CExtPubKey final_extkey = m_root_extkey;\n         CExtPubKey parent_extkey = m_root_extkey;\n+        CExtPubKey last_hardened_extkey;\n         bool der = true;\n         if (read_cache) {\n             if (!read_cache->GetCachedDerivedExtPubKey(m_expr_index, pos, final_extkey)) {\n@@ -351,11 +355,15 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n             }\n         } else if (IsHardened()) {\n             CExtKey xprv;\n-            if (!GetDerivedExtKey(arg, xprv)) return false;\n+            CExtKey lh_xprv;\n+            if (!GetDerivedExtKey(arg, xprv, lh_xprv)) return false;\n             parent_extkey = xprv.Neuter();\n             if (m_derive == DeriveType::UNHARDENED) der = xprv.Derive(xprv, pos);\n             if (m_derive == DeriveType::HARDENED) der = xprv.Derive(xprv, pos | 0x80000000UL);\n             final_extkey = xprv.Neuter();\n+            if (lh_xprv.key.IsValid()) {\n+                last_hardened_extkey = lh_xprv.Neuter();\n+            }\n         } else {\n             for (auto entry : m_path) {\n                 der = parent_extkey.Derive(parent_extkey, entry);\n@@ -374,6 +382,10 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n             // Only cache parent if there is any unhardened derivation\n             if (m_derive != DeriveType::HARDENED) {\n                 write_cache->CacheParentExtPubKey(m_expr_index, parent_extkey);\n+                // Cache last hardened xpub if we have it\n+                if (last_hardened_extkey.pubkey.IsValid()) {\n+                    write_cache->CacheLastHardenedExtPubKey(m_expr_index, last_hardened_extkey);\n+                }\n             } else if (final_info_out.path.size() > 0) {\n                 write_cache->CacheDerivedExtPubKey(m_expr_index, pos, final_extkey);\n             }\n@@ -454,7 +466,8 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const override\n     {\n         CExtKey extkey;\n-        if (!GetDerivedExtKey(arg, extkey)) return false;\n+        CExtKey dummy;\n+        if (!GetDerivedExtKey(arg, extkey, dummy)) return false;\n         if (m_derive == DeriveType::UNHARDENED) extkey.Derive(extkey, pos);\n         if (m_derive == DeriveType::HARDENED) extkey.Derive(extkey, pos | 0x80000000UL);\n         key = extkey.key;\n@@ -1400,6 +1413,11 @@ void DescriptorCache::CacheDerivedExtPubKey(uint32_t key_exp_pos, uint32_t der_i\n     xpubs[der_index] = xpub;\n }\n \n+void DescriptorCache::CacheLastHardenedExtPubKey(uint32_t key_exp_pos, const CExtPubKey& xpub)\n+{\n+    m_last_hardened_xpubs[key_exp_pos] = xpub;\n+}\n+\n bool DescriptorCache::GetCachedParentExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const\n {\n     const auto& it = m_parent_xpubs.find(key_exp_pos);\n@@ -1418,6 +1436,14 @@ bool DescriptorCache::GetCachedDerivedExtPubKey(uint32_t key_exp_pos, uint32_t d\n     return true;\n }\n \n+bool DescriptorCache::GetCachedLastHardenedExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const\n+{\n+    const auto& it = m_last_hardened_xpubs.find(key_exp_pos);\n+    if (it == m_last_hardened_xpubs.end()) return false;\n+    xpub = it->second;\n+    return true;\n+}\n+\n DescriptorCache DescriptorCache::MergeAndDiff(const DescriptorCache& other)\n {\n     DescriptorCache diff;\n@@ -1445,6 +1471,17 @@ DescriptorCache DescriptorCache::MergeAndDiff(const DescriptorCache& other)\n             diff.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n         }\n     }\n+    for (const auto& lh_xpub_pair : other.GetCachedLastHardenedExtPubKeys()) {\n+        CExtPubKey xpub;\n+        if (GetCachedLastHardenedExtPubKey(lh_xpub_pair.first, xpub)) {\n+            if (xpub != lh_xpub_pair.second) {\n+                throw std::runtime_error(std::string(__func__) + \": New cached last hardened xpub does not match already cached last hardened xpub\");\n+            }\n+            continue;\n+        }\n+        CacheLastHardenedExtPubKey(lh_xpub_pair.first, lh_xpub_pair.second);\n+        diff.CacheLastHardenedExtPubKey(lh_xpub_pair.first, lh_xpub_pair.second);\n+    }\n     return diff;\n }\n \n@@ -1457,3 +1494,8 @@ const std::unordered_map<uint32_t, ExtPubKeyMap> DescriptorCache::GetCachedDeriv\n {\n     return m_derived_xpubs;\n }\n+\n+const ExtPubKeyMap DescriptorCache::GetCachedLastHardenedExtPubKeys() const\n+{\n+    return m_last_hardened_xpubs;\n+}"
      },
      {
        "sha": "9ec2a766b181dd685f3ba353812cae7d3c95a2e6",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87b544b834077f102724415e0fada6ee8b2def2/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87b544b834077f102724415e0fada6ee8b2def2/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=d87b544b834077f102724415e0fada6ee8b2def2",
        "patch": "@@ -22,6 +22,8 @@ class DescriptorCache {\n     std::unordered_map<uint32_t, ExtPubKeyMap> m_derived_xpubs;\n     /** Map key expression index -> parent xpub */\n     ExtPubKeyMap m_parent_xpubs;\n+    /** Map key expression index -> last hardened xpub */\n+    ExtPubKeyMap m_last_hardened_xpubs;\n \n public:\n     /** Cache a parent xpub\n@@ -50,11 +52,25 @@ class DescriptorCache {\n      * @param[in] xpub The CExtPubKey to get from cache\n      */\n     bool GetCachedDerivedExtPubKey(uint32_t key_exp_pos, uint32_t der_index, CExtPubKey& xpub) const;\n+    /** Cache a last hardened xpub\n+     *\n+     * @param[in] key_exp_pos Position of the key expression within the descriptor\n+     * @param[in] xpub The CExtPubKey to cache\n+     */\n+    void CacheLastHardenedExtPubKey(uint32_t key_exp_pos, const CExtPubKey& xpub);\n+    /** Retrieve a cached last hardened xpub\n+     *\n+     * @param[in] key_exp_pos Position of the key expression within the descriptor\n+     * @param[in] xpub The CExtPubKey to get from cache\n+     */\n+    bool GetCachedLastHardenedExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const;\n \n     /** Retrieve all cached parent xpubs */\n     const ExtPubKeyMap GetCachedParentExtPubKeys() const;\n     /** Retrieve all cached derived xpubs */\n     const std::unordered_map<uint32_t, ExtPubKeyMap> GetCachedDerivedExtPubKeys() const;\n+    /** Retrieve all cached last hardened xpubs */\n+    const ExtPubKeyMap GetCachedLastHardenedExtPubKeys() const;\n \n     /** Combine another DescriptorCache into this one.\n      * Returns a cache containing the items from the other cache unknown to current cache"
      }
    ]
  },
  {
    "sha": "432ba9e5434da90d2cf680f23e8c7b7164c9f945",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzJiYTllNTQzNGRhOTBkMmNmNjgwZjIzZThjN2I3MTY0YzlmOTQ1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-01T21:25:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:22Z"
      },
      "message": "wallet: Store last hardened xpub cache",
      "tree": {
        "sha": "73a7b428fb1f2852f29dff898c3267c1abe98947",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73a7b428fb1f2852f29dff898c3267c1abe98947"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/432ba9e5434da90d2cf680f23e8c7b7164c9f945",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/432ba9e5434da90d2cf680f23e8c7b7164c9f945",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/432ba9e5434da90d2cf680f23e8c7b7164c9f945",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/432ba9e5434da90d2cf680f23e8c7b7164c9f945/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d87b544b834077f102724415e0fada6ee8b2def2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d87b544b834077f102724415e0fada6ee8b2def2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d87b544b834077f102724415e0fada6ee8b2def2"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "72b987d327840eac4e08f5f9b5641c9f53d5a253",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/432ba9e5434da90d2cf680f23e8c7b7164c9f945/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/432ba9e5434da90d2cf680f23e8c7b7164c9f945/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=432ba9e5434da90d2cf680f23e8c7b7164c9f945",
        "patch": "@@ -52,6 +52,7 @@ const std::string TX{\"tx\"};\n const std::string VERSION{\"version\"};\n const std::string WALLETDESCRIPTOR{\"walletdescriptor\"};\n const std::string WALLETDESCRIPTORCACHE{\"walletdescriptorcache\"};\n+const std::string WALLETDESCRIPTORLHCACHE{\"walletdescriptorlhcache\"};\n const std::string WALLETDESCRIPTORCKEY{\"walletdescriptorckey\"};\n const std::string WALLETDESCRIPTORKEY{\"walletdescriptorkey\"};\n const std::string WATCHMETA{\"watchmeta\"};\n@@ -248,6 +249,13 @@ bool WalletBatch::WriteDescriptorParentCache(const CExtPubKey& xpub, const uint2\n     return WriteIC(std::make_pair(std::make_pair(DBKeys::WALLETDESCRIPTORCACHE, desc_id), key_exp_index), ser_xpub);\n }\n \n+bool WalletBatch::WriteDescriptorLastHardenedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index)\n+{\n+    std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+    xpub.Encode(ser_xpub.data());\n+    return WriteIC(std::make_pair(std::make_pair(DBKeys::WALLETDESCRIPTORLHCACHE, desc_id), key_exp_index), ser_xpub);\n+}\n+\n bool WalletBatch::WriteDescriptorCacheItems(const uint256& desc_id, const DescriptorCache& cache)\n {\n     for (const auto& parent_xpub_pair : cache.GetCachedParentExtPubKeys()) {\n@@ -262,6 +270,11 @@ bool WalletBatch::WriteDescriptorCacheItems(const uint256& desc_id, const Descri\n             }\n         }\n     }\n+    for (const auto& lh_xpub_pair : cache.GetCachedLastHardenedExtPubKeys()) {\n+        if (!WriteDescriptorLastHardenedCache(lh_xpub_pair.second, desc_id, lh_xpub_pair.first)) {\n+            return false;\n+        }\n+    }\n     return true;\n }\n \n@@ -619,6 +632,17 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             } else {\n                 wss.m_descriptor_caches[desc_id].CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n             }\n+        } else if (strType == DBKeys::WALLETDESCRIPTORLHCACHE) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            ssKey >> desc_id;\n+            ssKey >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            ssValue >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            wss.m_descriptor_caches[desc_id].CacheLastHardenedExtPubKey(key_exp_index, xpub);\n         } else if (strType == DBKeys::WALLETDESCRIPTORKEY) {\n             uint256 desc_id;\n             CPubKey pubkey;"
      },
      {
        "sha": "e7c6b61891d3ff4accf55230be7e4137a1ecdeab",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/432ba9e5434da90d2cf680f23e8c7b7164c9f945/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/432ba9e5434da90d2cf680f23e8c7b7164c9f945/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=432ba9e5434da90d2cf680f23e8c7b7164c9f945",
        "patch": "@@ -246,6 +246,7 @@ class WalletBatch\n     bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n     bool WriteDescriptorDerivedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index);\n     bool WriteDescriptorParentCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n+    bool WriteDescriptorLastHardenedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n     bool WriteDescriptorCacheItems(const uint256& desc_id, const DescriptorCache& cache);\n \n     /// Write destination data key,value tuple to database"
      }
    ]
  },
  {
    "sha": "74fede3b8ba69e2cc82c617cdf406ab79df58825",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGZlZGUzYjhiYTY5ZTJjYzgyYzYxN2NkZjQwNmFiNzlkZjU4ODI1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-01T22:03:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:22Z"
      },
      "message": "wallet: Upgrade existing descriptor caches\n\nAdd functions to upgrade existing descriptor caches to support the use\nof last hardened xpub caching.",
      "tree": {
        "sha": "8d5e969d58e535cab4c7cbb7099f39dedf8154df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d5e969d58e535cab4c7cbb7099f39dedf8154df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74fede3b8ba69e2cc82c617cdf406ab79df58825",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74fede3b8ba69e2cc82c617cdf406ab79df58825",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74fede3b8ba69e2cc82c617cdf406ab79df58825",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74fede3b8ba69e2cc82c617cdf406ab79df58825/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "432ba9e5434da90d2cf680f23e8c7b7164c9f945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/432ba9e5434da90d2cf680f23e8c7b7164c9f945",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/432ba9e5434da90d2cf680f23e8c7b7164c9f945"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 62,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4d29facc49b6c190e148b67866a0eb4293e93309",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "patch": "@@ -2278,3 +2278,32 @@ bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, bool priv)\n \n     return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out, priv);\n }\n+\n+void DescriptorScriptPubKeyMan::UpgradeDescriptorCache()\n+{\n+    LOCK(cs_desc_man);\n+    if (m_storage.IsLocked() || m_storage.IsWalletFlagSet(WALLET_FLAG_LAST_HARDENED_XPUB_CACHED)) {\n+        return;\n+    }\n+\n+    // Skip if we have the last hardened xpub cache\n+    if (m_wallet_descriptor.cache.GetCachedLastHardenedExtPubKeys().size() > 0) {\n+        return;\n+    }\n+\n+    // Expand the descriptor\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+    FlatSigningProvider out_keys;\n+    std::vector<CScript> scripts_temp;\n+    DescriptorCache temp_cache;\n+    if (!m_wallet_descriptor.descriptor->Expand(0, provider, scripts_temp, out_keys, &temp_cache)){\n+        throw std::runtime_error(\"Unable to expand descriptor\");\n+    }\n+\n+    // Cache the last hardened xpubs\n+    DescriptorCache diff = m_wallet_descriptor.cache.MergeAndDiff(temp_cache);\n+    if (!WalletBatch(m_storage.GetDatabase()).WriteDescriptorCacheItems(GetID(), diff)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing cache items failed\");\n+    }\n+}"
      },
      {
        "sha": "c491fd58aa32175b11ac6a90db4bb55944971d59",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "patch": "@@ -631,6 +631,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     const std::vector<CScript> GetScriptPubKeys() const;\n \n     bool GetDescriptorString(std::string& out, bool priv) const;\n+\n+    void UpgradeDescriptorCache();\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "ab071a732998145fd23f3e2e3df8ba0bd4ccba1e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "patch": "@@ -374,6 +374,19 @@ void CWallet::UpgradeKeyMetadata()\n     SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n }\n \n+void CWallet::UpgradeDescriptorCache()\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) || IsLocked() || IsWalletFlagSet(WALLET_FLAG_LAST_HARDENED_XPUB_CACHED)) {\n+        return;\n+    }\n+\n+    for (ScriptPubKeyMan* spkm : GetAllScriptPubKeyMans()) {\n+        DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        desc_spkm->UpgradeDescriptorCache();\n+    }\n+    SetWalletFlag(WALLET_FLAG_LAST_HARDENED_XPUB_CACHED);\n+}\n+\n bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)\n {\n     CCrypter crypter;\n@@ -390,6 +403,8 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_key\n             if (Unlock(_vMasterKey, accept_no_keys)) {\n                 // Now that we've unlocked, upgrade the key metadata\n                 UpgradeKeyMetadata();\n+                // Now that we've unlocked, upgrade the descriptor cache\n+                UpgradeDescriptorCache();\n                 return true;\n             }\n         }"
      },
      {
        "sha": "7d639bf0b0c4a7ec47c212da10f29b102a6f7bfe",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "patch": "@@ -117,6 +117,7 @@ static constexpr uint64_t KNOWN_WALLET_FLAGS =\n         WALLET_FLAG_AVOID_REUSE\n     |   WALLET_FLAG_BLANK_WALLET\n     |   WALLET_FLAG_KEY_ORIGIN_METADATA\n+    |   WALLET_FLAG_LAST_HARDENED_XPUB_CACHED\n     |   WALLET_FLAG_DISABLE_PRIVATE_KEYS\n     |   WALLET_FLAG_DESCRIPTORS\n     |   WALLET_FLAG_EXTERNAL_SIGNER;\n@@ -128,6 +129,7 @@ static const std::map<std::string,WalletFlags> WALLET_FLAG_MAP{\n     {\"avoid_reuse\", WALLET_FLAG_AVOID_REUSE},\n     {\"blank\", WALLET_FLAG_BLANK_WALLET},\n     {\"key_origin_metadata\", WALLET_FLAG_KEY_ORIGIN_METADATA},\n+    {\"last_hardened_xpub_cached\", WALLET_FLAG_LAST_HARDENED_XPUB_CACHED},\n     {\"disable_private_keys\", WALLET_FLAG_DISABLE_PRIVATE_KEYS},\n     {\"descriptor_wallet\", WALLET_FLAG_DESCRIPTORS},\n     {\"external_signer\", WALLET_FLAG_EXTERNAL_SIGNER}\n@@ -476,6 +478,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n     void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n+    //! Upgrade DescriptorCaches\n+    void UpgradeDescriptorCache() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; return true; }\n \n     //! Adds a destination data tuple to the store, without saving it to disk"
      },
      {
        "sha": "748cabe290f8b3b13aabf96e78db8b5051cc457a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "patch": "@@ -884,6 +884,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         result = DBErrors::CORRUPT;\n     }\n \n+    // Upgrade all of the descriptor caches to cache the last hardened xpub\n+    // This operation is not atomic, but if it fails, only new entries are added so it is backwards compatible\n+    try {\n+        pwallet->UpgradeDescriptorCache();\n+    } catch (...) {\n+        result = DBErrors::CORRUPT;\n+    }\n+\n     // Set the inactive chain\n     if (wss.m_hd_chains.size() > 0) {\n         LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();"
      },
      {
        "sha": "c75e1759bc4280c17912d79cabfde350918f3d98",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "patch": "@@ -43,6 +43,9 @@ enum WalletFlags : uint64_t {\n     // Indicates that the metadata has already been upgraded to contain key origins\n     WALLET_FLAG_KEY_ORIGIN_METADATA = (1ULL << 1),\n \n+    // Indicates that the descriptor cache has been upgraded to cache last hardened xpubs\n+    WALLET_FLAG_LAST_HARDENED_XPUB_CACHED = (1ULL << 2),\n+\n     // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n     WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n "
      }
    ]
  },
  {
    "sha": "75530c93a83f3e94bcb78b6aa463c5570c1e737e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTUzMGM5M2E4M2YzZTk0YmNiNzhiNmFhNDYzYzU1NzBjMWU3Mzdl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-22T18:40:23Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:22Z"
      },
      "message": "Remove priv option for ToNormalizedString",
      "tree": {
        "sha": "302ca6852f02536c966dffd622fde17466b755d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/302ca6852f02536c966dffd622fde17466b755d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75530c93a83f3e94bcb78b6aa463c5570c1e737e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75530c93a83f3e94bcb78b6aa463c5570c1e737e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75530c93a83f3e94bcb78b6aa463c5570c1e737e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75530c93a83f3e94bcb78b6aa463c5570c1e737e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74fede3b8ba69e2cc82c617cdf406ab79df58825"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 17,
      "deletions": 24
    },
    "files": [
      {
        "sha": "bd22c467768f3eec5666c1e7214a3d4d393f06c4",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -181,7 +181,7 @@ struct PubkeyProvider\n     virtual bool ToPrivateString(const SigningProvider& arg, std::string& out) const = 0;\n \n     /** Get the descriptor string form with the xpub at the last hardened derivation */\n-    virtual bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const = 0;\n+    virtual bool ToNormalizedString(const SigningProvider& arg, std::string& out) const = 0;\n \n     /** Derive a private key, if private data is available in arg. */\n     virtual bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const = 0;\n@@ -216,10 +216,10 @@ class OriginPubkeyProvider final : public PubkeyProvider\n         ret = \"[\" + OriginString() + \"]\" + std::move(sub);\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, bool priv) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret) const override\n     {\n         std::string sub;\n-        if (!m_provider->ToNormalizedString(arg, sub, priv)) return false;\n+        if (!m_provider->ToNormalizedString(arg, sub)) return false;\n         // If m_provider is a BIP32PubkeyProvider, we may get a string formatted like a OriginPubkeyProvider\n         // In that case, we need to strip out the leading square bracket and fingerprint from the substring,\n         // and append that to our own origin string.\n@@ -263,9 +263,8 @@ class ConstPubkeyProvider final : public PubkeyProvider\n         ret = EncodeSecret(key);\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, bool priv) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret) const override\n     {\n-        if (priv) return ToPrivateString(arg, ret);\n         ret = ToString();\n         return true;\n     }\n@@ -413,11 +412,10 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out) const override\n     {\n         // For hardened derivation type, just return the typical string, nothing to normalize\n         if (m_derive == DeriveType::HARDENED) {\n-            if (priv) return ToPrivateString(arg, out);\n             out = ToString();\n             return true;\n         }\n@@ -430,7 +428,6 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         // Either no derivation or all unhardened derivation\n         if (i == -1) {\n-            if (priv) return ToPrivateString(arg, out);\n             out = ToString();\n             return true;\n         }\n@@ -456,7 +453,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         // Build the string\n         std::string origin_str = HexStr(origin.fingerprint) + FormatHDKeypath(origin.path);\n-        out = \"[\" + origin_str + \"]\" + (priv ? EncodeExtKey(xprv) : EncodeExtPubKey(xprv.Neuter())) + FormatHDKeypath(end_path);\n+        out = \"[\" + origin_str + \"]\" + EncodeExtPubKey(xprv.Neuter()) + FormatHDKeypath(end_path);\n         if (IsRange()) {\n             out += \"/*\";\n             assert(m_derive == DeriveType::UNHARDENED);\n@@ -550,7 +547,7 @@ class DescriptorImpl : public Descriptor\n             if (pos++) ret += \",\";\n             std::string tmp;\n             if (normalized) {\n-                if (!pubkey->ToNormalizedString(*arg, tmp, priv)) return false;\n+                if (!pubkey->ToNormalizedString(*arg, tmp)) return false;\n             } else if (priv) {\n                 if (!pubkey->ToPrivateString(*arg, tmp)) return false;\n             } else {\n@@ -579,9 +576,9 @@ class DescriptorImpl : public Descriptor\n         return ret;\n     }\n \n-    bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const override final\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out) const override final\n     {\n-        bool ret = ToStringHelper(&arg, out, priv, true);\n+        bool ret = ToStringHelper(&arg, out, false, true);\n         out = AddChecksum(out);\n         return ret;\n     }"
      },
      {
        "sha": "8379905660fb6a5165edc64055aa778dbad3e361",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -115,7 +115,7 @@ struct Descriptor {\n     virtual bool ToPrivateString(const SigningProvider& provider, std::string& out) const = 0;\n \n     /** Convert the descriptor to a normalized string. Normalized descriptors have the xpub at the last hardened step. This fails if the provided provider does not have the private keys to derive that xpub. */\n-    virtual bool ToNormalizedString(const SigningProvider& provider, std::string& out, bool priv) const = 0;\n+    virtual bool ToNormalizedString(const SigningProvider& provider, std::string& out) const = 0;\n \n     /** Expand a descriptor at a specified position.\n      *"
      },
      {
        "sha": "8553f80a1700d38254c11fd3424cb736ce2d7467",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -124,14 +124,10 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n \n     // Check that private can produce the normalized descriptors\n     std::string norm1;\n-    BOOST_CHECK(parse_priv->ToNormalizedString(keys_priv, norm1, false));\n+    BOOST_CHECK(parse_priv->ToNormalizedString(keys_priv, norm1));\n     BOOST_CHECK(EqualDescriptor(norm1, norm_pub));\n-    BOOST_CHECK(parse_pub->ToNormalizedString(keys_priv, norm1, false));\n+    BOOST_CHECK(parse_pub->ToNormalizedString(keys_priv, norm1));\n     BOOST_CHECK(EqualDescriptor(norm1, norm_pub));\n-    BOOST_CHECK(parse_priv->ToNormalizedString(keys_priv, norm1, true));\n-    BOOST_CHECK(EqualDescriptor(norm1, norm_prv));\n-    BOOST_CHECK(parse_pub->ToNormalizedString(keys_priv, norm1, true));\n-    BOOST_CHECK(EqualDescriptor(norm1, norm_prv));\n \n     // Check whether IsRange on both returns the expected result\n     BOOST_CHECK_EQUAL(parse_pub->IsRange(), (flags & RANGE) != 0);"
      },
      {
        "sha": "c1e8b14b41df9e2b2dd5e0ea05ff1f0668469de4",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -1802,7 +1802,7 @@ RPCHelpMan listdescriptors()\n         LOCK(desc_spk_man->cs_desc_man);\n         const auto& wallet_descriptor = desc_spk_man->GetWalletDescriptor();\n         std::string descriptor;\n-        if (!desc_spk_man->GetDescriptorString(descriptor, false)) {\n+        if (!desc_spk_man->GetDescriptorString(descriptor)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Can't get normalized descriptor string.\");\n         }\n         spk.pushKV(\"desc\", descriptor);"
      },
      {
        "sha": "f1d51174158c052f552e05fb2c02ac1fb16072c7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -3872,7 +3872,7 @@ RPCHelpMan getaddressinfo()\n     DescriptorScriptPubKeyMan* desc_spk_man = dynamic_cast<DescriptorScriptPubKeyMan*>(pwallet->GetScriptPubKeyMan(scriptPubKey));\n     if (desc_spk_man) {\n         std::string desc_str;\n-        if (desc_spk_man->GetDescriptorString(desc_str, false)) {\n+        if (desc_spk_man->GetDescriptorString(desc_str)) {\n             ret.pushKV(\"parent_desc\", desc_str);\n         }\n     }"
      },
      {
        "sha": "c0c752cad600d8825952c3b389cee2624fc42a29",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -2266,7 +2266,7 @@ const std::vector<CScript> DescriptorScriptPubKeyMan::GetScriptPubKeys() const\n     return script_pub_keys;\n }\n \n-bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, bool priv) const\n+bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out) const\n {\n     LOCK(cs_desc_man);\n     if (m_storage.IsLocked()) {\n@@ -2276,7 +2276,7 @@ bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, bool priv)\n     FlatSigningProvider provider;\n     provider.keys = GetKeys();\n \n-    return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out, priv);\n+    return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out);\n }\n \n void DescriptorScriptPubKeyMan::UpgradeDescriptorCache()"
      },
      {
        "sha": "3b78d92dff187046cb7b51617d5ff4bd388afdef",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -630,7 +630,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     const WalletDescriptor GetWalletDescriptor() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n     const std::vector<CScript> GetScriptPubKeys() const;\n \n-    bool GetDescriptorString(std::string& out, bool priv) const;\n+    bool GetDescriptorString(std::string& out) const;\n \n     void UpgradeDescriptorCache();\n };"
      }
    ]
  },
  {
    "sha": "7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTI2ZmYxMGMyZjJlMTM5ZmJjNjNlMmYzN2ZiMzNlYTRlZmFlMDg4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-22T19:03:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T18:08:30Z"
      },
      "message": "Change DescriptorImpl::ToStringHelper to use an enum\n\nInstead of having multiple, possibly conflicting, bools controlling the\nflow of ToStringHelper, use an enum.",
      "tree": {
        "sha": "625200944508bf85e71d34780d1b40983a58e74a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/625200944508bf85e71d34780d1b40983a58e74a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75530c93a83f3e94bcb78b6aa463c5570c1e737e"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 26,
      "deletions": 15
    },
    "files": [
      {
        "sha": "31fdafa88f8a893d36953941dbdfea32f61e9de9",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 15,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
        "patch": "@@ -507,6 +507,13 @@ class DescriptorImpl : public Descriptor\n     DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::unique_ptr<DescriptorImpl> script, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args(Vector(std::move(script))) {}\n     DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::vector<std::unique_ptr<DescriptorImpl>> scripts, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args(std::move(scripts)) {}\n \n+    enum class StringType\n+    {\n+        PUBLIC,\n+        PRIVATE,\n+        NORMALIZED,\n+    };\n+\n     bool IsSolvable() const override\n     {\n         for (const auto& arg : m_subdescriptor_args) {\n@@ -526,37 +533,41 @@ class DescriptorImpl : public Descriptor\n         return false;\n     }\n \n-    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, bool priv, bool normalized) const\n+    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type) const\n     {\n         size_t pos = 0;\n         for (const auto& scriptarg : m_subdescriptor_args) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n-            if (!scriptarg->ToStringHelper(arg, tmp, priv, normalized)) return false;\n+            if (!scriptarg->ToStringHelper(arg, tmp, type)) return false;\n             ret += std::move(tmp);\n         }\n         return true;\n     }\n \n-    bool ToStringHelper(const SigningProvider* arg, std::string& out, bool priv, bool normalized) const\n+    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type) const\n     {\n         std::string extra = ToStringExtra();\n         size_t pos = extra.size() > 0 ? 1 : 0;\n         std::string ret = m_name + \"(\" + extra;\n         for (const auto& pubkey : m_pubkey_args) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n-            if (normalized) {\n-                if (!pubkey->ToNormalizedString(*arg, tmp)) return false;\n-            } else if (priv) {\n-                if (!pubkey->ToPrivateString(*arg, tmp)) return false;\n-            } else {\n-                tmp = pubkey->ToString();\n+            switch (type) {\n+                case StringType::NORMALIZED:\n+                    if (!pubkey->ToNormalizedString(*arg, tmp)) return false;\n+                    break;\n+                case StringType::PRIVATE:\n+                    if (!pubkey->ToPrivateString(*arg, tmp)) return false;\n+                    break;\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n             }\n             ret += std::move(tmp);\n         }\n         std::string subscript;\n-        if (!ToStringSubScriptHelper(arg, subscript, priv, normalized)) return false;\n+        if (!ToStringSubScriptHelper(arg, subscript, type)) return false;\n         if (pos && subscript.size()) ret += ',';\n         out = std::move(ret) + std::move(subscript) + \")\";\n         return true;\n@@ -565,20 +576,20 @@ class DescriptorImpl : public Descriptor\n     std::string ToString() const final\n     {\n         std::string ret;\n-        ToStringHelper(nullptr, ret, false, false);\n+        ToStringHelper(nullptr, ret, StringType::PUBLIC);\n         return AddChecksum(ret);\n     }\n \n     bool ToPrivateString(const SigningProvider& arg, std::string& out) const final\n     {\n-        bool ret = ToStringHelper(&arg, out, true, false);\n+        bool ret = ToStringHelper(&arg, out, StringType::PRIVATE);\n         out = AddChecksum(out);\n         return ret;\n     }\n \n     bool ToNormalizedString(const SigningProvider& arg, std::string& out) const override final\n     {\n-        bool ret = ToStringHelper(&arg, out, false, true);\n+        bool ret = ToStringHelper(&arg, out, StringType::NORMALIZED);\n         out = AddChecksum(out);\n         return ret;\n     }\n@@ -832,7 +843,7 @@ class TRDescriptor final : public DescriptorImpl\n         out.tr_spenddata[output].Merge(builder.GetSpendData());\n         return Vector(GetScriptForDestination(output));\n     }\n-    bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, bool priv, bool normalized) const override\n+    bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type) const override\n     {\n         if (m_depths.empty()) return true;\n         std::vector<bool> path;\n@@ -843,7 +854,7 @@ class TRDescriptor final : public DescriptorImpl\n                 path.push_back(false);\n             }\n             std::string tmp;\n-            if (!m_subdescriptor_args[pos]->ToStringHelper(arg, tmp, priv, normalized)) return false;\n+            if (!m_subdescriptor_args[pos]->ToStringHelper(arg, tmp, type)) return false;\n             ret += std::move(tmp);\n             while (!path.empty() && path.back()) {\n                 if (path.size() > 1) ret += '}';"
      }
    ]
  },
  {
    "sha": "3280704886b60644d103a5eb310691c003a39328",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjgwNzA0ODg2YjYwNjQ0ZDEwM2E1ZWIzMTA2OTFjMDAzYTM5MzI4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-01T19:48:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T18:08:45Z"
      },
      "message": "Pass in DescriptorCache to ToNormalizedString\n\nUse the descriptor xpub cache in ToNormalizedString so that the wallet\ndoes not need to be unlocked in order to get the normalized descriptor.",
      "tree": {
        "sha": "66a03f5b71657f1823842c9d9404b4780289e0a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66a03f5b71657f1823842c9d9404b4780289e0a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3280704886b60644d103a5eb310691c003a39328",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3280704886b60644d103a5eb310691c003a39328",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3280704886b60644d103a5eb310691c003a39328",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3280704886b60644d103a5eb310691c003a39328/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 36,
      "deletions": 26
    },
    "files": [
      {
        "sha": "682b55742a52ea132361a89905fbbe82b37c80f0",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 24,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3280704886b60644d103a5eb310691c003a39328/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3280704886b60644d103a5eb310691c003a39328/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=3280704886b60644d103a5eb310691c003a39328",
        "patch": "@@ -181,7 +181,7 @@ struct PubkeyProvider\n     virtual bool ToPrivateString(const SigningProvider& arg, std::string& out) const = 0;\n \n     /** Get the descriptor string form with the xpub at the last hardened derivation */\n-    virtual bool ToNormalizedString(const SigningProvider& arg, std::string& out) const = 0;\n+    virtual bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const = 0;\n \n     /** Derive a private key, if private data is available in arg. */\n     virtual bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const = 0;\n@@ -216,10 +216,10 @@ class OriginPubkeyProvider final : public PubkeyProvider\n         ret = \"[\" + OriginString() + \"]\" + std::move(sub);\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& ret) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, const DescriptorCache* cache) const override\n     {\n         std::string sub;\n-        if (!m_provider->ToNormalizedString(arg, sub)) return false;\n+        if (!m_provider->ToNormalizedString(arg, sub, cache)) return false;\n         // If m_provider is a BIP32PubkeyProvider, we may get a string formatted like a OriginPubkeyProvider\n         // In that case, we need to strip out the leading square bracket and fingerprint from the substring,\n         // and append that to our own origin string.\n@@ -263,7 +263,7 @@ class ConstPubkeyProvider final : public PubkeyProvider\n         ret = EncodeSecret(key);\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& ret) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, const DescriptorCache* cache) const override\n     {\n         ret = ToString();\n         return true;\n@@ -412,7 +412,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& out) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache) const override\n     {\n         // For hardened derivation type, just return the typical string, nothing to normalize\n         if (m_derive == DeriveType::HARDENED) {\n@@ -431,29 +431,39 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n             out = ToString();\n             return true;\n         }\n-        // Derive the xpub at the last hardened step\n-        CExtKey xprv;\n-        if (!GetExtKey(arg, xprv)) return false;\n+        // Get the path to the last hardened stup\n         KeyOriginInfo origin;\n         int k = 0;\n         for (; k <= i; ++k) {\n-            // Derive\n-            xprv.Derive(xprv, m_path.at(k));\n             // Add to the path\n             origin.path.push_back(m_path.at(k));\n-            // First derivation element, get the fingerprint for origin\n-            if (k == 0) {\n-                std::copy(xprv.vchFingerprint, xprv.vchFingerprint + 4, origin.fingerprint);\n-            }\n         }\n         // Build the remaining path\n         KeyPath end_path;\n         for (; k < (int)m_path.size(); ++k) {\n             end_path.push_back(m_path.at(k));\n         }\n+        // Get the fingerprint\n+        CKeyID id = m_root_extkey.pubkey.GetID();\n+        std::copy(id.begin(), id.begin() + 4, origin.fingerprint);\n+\n+        CExtPubKey xpub;\n+        CExtKey lh_xprv;\n+        // If we have the cache, just get the parent xpub\n+        if (cache != nullptr) {\n+            cache->GetCachedLastHardenedExtPubKey(m_expr_index, xpub);\n+        }\n+        if (!xpub.pubkey.IsValid()) {\n+            // Cache miss, or nor cache, or need privkey\n+            CExtKey xprv;\n+            if (!GetDerivedExtKey(arg, xprv, lh_xprv)) return false;\n+            xpub = lh_xprv.Neuter();\n+        }\n+        assert(xpub.pubkey.IsValid());\n+\n         // Build the string\n         std::string origin_str = HexStr(origin.fingerprint) + FormatHDKeypath(origin.path);\n-        out = \"[\" + origin_str + \"]\" + EncodeExtPubKey(xprv.Neuter()) + FormatHDKeypath(end_path);\n+        out = \"[\" + origin_str + \"]\" + EncodeExtPubKey(xpub) + FormatHDKeypath(end_path);\n         if (IsRange()) {\n             out += \"/*\";\n             assert(m_derive == DeriveType::UNHARDENED);\n@@ -533,19 +543,19 @@ class DescriptorImpl : public Descriptor\n         return false;\n     }\n \n-    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type) const\n+    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type, const DescriptorCache* cache = nullptr) const\n     {\n         size_t pos = 0;\n         for (const auto& scriptarg : m_subdescriptor_args) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n-            if (!scriptarg->ToStringHelper(arg, tmp, type)) return false;\n+            if (!scriptarg->ToStringHelper(arg, tmp, type, cache)) return false;\n             ret += std::move(tmp);\n         }\n         return true;\n     }\n \n-    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type) const\n+    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type, const DescriptorCache* cache = nullptr) const\n     {\n         std::string extra = ToStringExtra();\n         size_t pos = extra.size() > 0 ? 1 : 0;\n@@ -555,7 +565,7 @@ class DescriptorImpl : public Descriptor\n             std::string tmp;\n             switch (type) {\n                 case StringType::NORMALIZED:\n-                    if (!pubkey->ToNormalizedString(*arg, tmp)) return false;\n+                    if (!pubkey->ToNormalizedString(*arg, tmp, cache)) return false;\n                     break;\n                 case StringType::PRIVATE:\n                     if (!pubkey->ToPrivateString(*arg, tmp)) return false;\n@@ -567,7 +577,7 @@ class DescriptorImpl : public Descriptor\n             ret += std::move(tmp);\n         }\n         std::string subscript;\n-        if (!ToStringSubScriptHelper(arg, subscript, type)) return false;\n+        if (!ToStringSubScriptHelper(arg, subscript, type, cache)) return false;\n         if (pos && subscript.size()) ret += ',';\n         out = std::move(ret) + std::move(subscript) + \")\";\n         return true;\n@@ -587,9 +597,9 @@ class DescriptorImpl : public Descriptor\n         return ret;\n     }\n \n-    bool ToNormalizedString(const SigningProvider& arg, std::string& out) const override final\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache) const override final\n     {\n-        bool ret = ToStringHelper(&arg, out, StringType::NORMALIZED);\n+        bool ret = ToStringHelper(&arg, out, StringType::NORMALIZED, cache);\n         out = AddChecksum(out);\n         return ret;\n     }\n@@ -843,7 +853,7 @@ class TRDescriptor final : public DescriptorImpl\n         out.tr_spenddata[output].Merge(builder.GetSpendData());\n         return Vector(GetScriptForDestination(output));\n     }\n-    bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type) const override\n+    bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type, const DescriptorCache* cache = nullptr) const override\n     {\n         if (m_depths.empty()) return true;\n         std::vector<bool> path;\n@@ -854,7 +864,7 @@ class TRDescriptor final : public DescriptorImpl\n                 path.push_back(false);\n             }\n             std::string tmp;\n-            if (!m_subdescriptor_args[pos]->ToStringHelper(arg, tmp, type)) return false;\n+            if (!m_subdescriptor_args[pos]->ToStringHelper(arg, tmp, type, cache)) return false;\n             ret += std::move(tmp);\n             while (!path.empty() && path.back()) {\n                 if (path.size() > 1) ret += '}';"
      },
      {
        "sha": "ecd7c4eea5f10efd9eac0bdc035ebbf2ab3df822",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3280704886b60644d103a5eb310691c003a39328/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3280704886b60644d103a5eb310691c003a39328/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=3280704886b60644d103a5eb310691c003a39328",
        "patch": "@@ -115,7 +115,7 @@ struct Descriptor {\n     virtual bool ToPrivateString(const SigningProvider& provider, std::string& out) const = 0;\n \n     /** Convert the descriptor to a normalized string. Normalized descriptors have the xpub at the last hardened step. This fails if the provided provider does not have the private keys to derive that xpub. */\n-    virtual bool ToNormalizedString(const SigningProvider& provider, std::string& out) const = 0;\n+    virtual bool ToNormalizedString(const SigningProvider& provider, std::string& out, const DescriptorCache* cache = nullptr) const = 0;\n \n     /** Expand a descriptor at a specified position.\n      *"
      },
      {
        "sha": "ddb6b050714f3cc231895ffe4b8a98f583803c86",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3280704886b60644d103a5eb310691c003a39328/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3280704886b60644d103a5eb310691c003a39328/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=3280704886b60644d103a5eb310691c003a39328",
        "patch": "@@ -2276,7 +2276,7 @@ bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out) const\n     FlatSigningProvider provider;\n     provider.keys = GetKeys();\n \n-    return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out);\n+    return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out, &m_wallet_descriptor.cache);\n }\n \n void DescriptorScriptPubKeyMan::UpgradeDescriptorCache()"
      }
    ]
  },
  {
    "sha": "e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmNmMGVkOTJkZTMxYTVhYzM1YTI3MWIwZGE4ZjBhODM2NGQxMTc1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-01T22:37:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T18:08:46Z"
      },
      "message": "wallet, rpc: listdescriptors does not need unlocked\n\nWith the last hardened xpub cache, we don't neeed to have the wallet be\nunlocked for listdescriptors.",
      "tree": {
        "sha": "c963f0e090f205620a481ce94b9bfabd632aedd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c963f0e090f205620a481ce94b9bfabd632aedd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3280704886b60644d103a5eb310691c003a39328",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3280704886b60644d103a5eb310691c003a39328",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3280704886b60644d103a5eb310691c003a39328"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ead9e4cefb0357f4811d8cc29c307dd79a78cd31",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
        "patch": "@@ -1787,8 +1787,6 @@ RPCHelpMan listdescriptors()\n         throw JSONRPCError(RPC_WALLET_ERROR, \"listdescriptors is not available for non-descriptor wallets\");\n     }\n \n-    EnsureWalletIsUnlocked(*wallet);\n-\n     LOCK(wallet->cs_wallet);\n \n     UniValue descriptors(UniValue::VARR);"
      },
      {
        "sha": "2a3880f2d1035f9a22e1e52d9962acdf8625d4da",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
        "patch": "@@ -2269,9 +2269,6 @@ const std::vector<CScript> DescriptorScriptPubKeyMan::GetScriptPubKeys() const\n bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out) const\n {\n     LOCK(cs_desc_man);\n-    if (m_storage.IsLocked()) {\n-        return false;\n-    }\n \n     FlatSigningProvider provider;\n     provider.keys = GetKeys();"
      },
      {
        "sha": "bf53c998551e4a08719a6eed41d23d74270b4908",
        "filename": "test/functional/wallet_listdescriptors.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/test/functional/wallet_listdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/test/functional/wallet_listdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listdescriptors.py?ref=e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
        "patch": "@@ -72,6 +72,10 @@ def run_test(self):\n         }\n         assert_equal(expected, wallet.listdescriptors())\n \n+        self.log.info(\"Test listdescriptors with encrypted wallet\")\n+        wallet.encryptwallet(\"pass\")\n+        assert_equal(expected, wallet.listdescriptors())\n+\n         self.log.info('Test non-active non-range combo descriptor')\n         node.createwallet(wallet_name='w4', blank=True, descriptors=True)\n         wallet = node.get_wallet_rpc('w4')"
      }
    ]
  }
]