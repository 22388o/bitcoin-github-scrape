[
  {
    "sha": "bad68e9a5052fb98ab469c7e74a748791d4591d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWQ2OGU5YTUwNTJmYjk4YWI0NjljN2U3NGE3NDg3OTFkNDU5MWQw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-12T17:29:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-02T18:09:12Z"
      },
      "message": "Clarify validationinterface notification ordering",
      "tree": {
        "sha": "35831b4e5510e5f93b7ebb2305b42183571b64fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35831b4e5510e5f93b7ebb2305b42183571b64fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bad68e9a5052fb98ab469c7e74a748791d4591d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bad68e9a5052fb98ab469c7e74a748791d4591d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bad68e9a5052fb98ab469c7e74a748791d4591d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bad68e9a5052fb98ab469c7e74a748791d4591d0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef006d92845a78db0928607c6c11d30962f55f85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef006d92845a78db0928607c6c11d30962f55f85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef006d92845a78db0928607c6c11d30962f55f85"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 24,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b628a71e66f37b4f298471bb300f630b74c94bae",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bad68e9a5052fb98ab469c7e74a748791d4591d0/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bad68e9a5052fb98ab469c7e74a748791d4591d0/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=bad68e9a5052fb98ab469c7e74a748791d4591d0",
        "patch": "@@ -61,7 +61,14 @@ class CValidationInterface {\n      */\n     ~CValidationInterface() = default;\n     /**\n-     * Notifies listeners of updated block chain tip\n+     * Notifies listeners of updated block chain tip.\n+     *\n+     * Is called after a series of BlockConnected/BlockDisconnected events once\n+     * the chain has made forward progress and is now at the best-known-tip.\n+     *\n+     * If a block is found to be invalid, this event may trigger without\n+     * forward-progress, only to trigger again soon thereafter.\n+     * (TODO: remove this edge case)\n      *\n      * Called on a background thread.\n      */\n@@ -80,6 +87,13 @@ class CValidationInterface {\n      * replacement. This does not include any transactions which are included\n      * in BlockConnectedDisconnected either in block->vtx or in txnConflicted.\n      *\n+     * reason == REORG is not ordered with BlockConnected/BlockDisconnected!\n+     *\n+     * Note that in some rare cases (eg mempool limiting) a\n+     * TransactionRemovedFromMempool event may fire with no corresponding\n+     * TransactionAddedToMempool event for the same transaction.\n+     * (TODO: remove this edge case)\n+     *\n      * Called on a background thread.\n      */\n     virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx) {}\n@@ -93,6 +107,12 @@ class CValidationInterface {\n     /**\n      * Notifies listeners of a block being disconnected\n      *\n+     * The ordering of BlockDisconnected and TransactionRemovedFromMempool\n+     * (for transactions removed due to memory constraints or lock time/\n+     * coinbase maturity changes during the disconnection/reorg) is undefined,\n+     * and the TransactionRemovedFromMempool callbacks may occur *both* before\n+     * and after BlockDisconnected/BlockConnected calls!\n+     *\n      * Called on a background thread.\n      */\n     virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n@@ -108,7 +128,9 @@ class CValidationInterface {\n      * an unclean shutdown.\n      *\n      * Provides a locator describing the best chain, which is likely useful for\n-     * storing current state on disk in client DBs.\n+     * storing current state on disk in client DBs. Will only ever contain\n+     * blocks which were present at startup or already had the corresponding\n+     * BlockConnected/UpdatedBlockTip callbacks complete.\n      *\n      * Called on a background thread.\n      */"
      }
    ]
  },
  {
    "sha": "ae5e07196cd2693fbac601b68038cabc072eceac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTVlMDcxOTZjZDI2OTNmYmFjNjAxYjY4MDM4Y2FiYzA3MmVjZWFj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T20:27:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-02T18:09:12Z"
      },
      "message": "Add a parallel validation interface for mempool events.\n\nBecause many listeners (eg wallet) will want both types of events\nto be well-ordered, they are parallel and connected on the backend.\nHowever, they are exposed separately to clients to separate the\nlogic (and because, hopefully, eventually, they can be exposed to\nexternal clients of Bitcoin Core via libconsensus or similar).",
      "tree": {
        "sha": "5d7fff0da671a2b7d9515eb34f88643d2fc5cb33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d7fff0da671a2b7d9515eb34f88643d2fc5cb33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae5e07196cd2693fbac601b68038cabc072eceac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae5e07196cd2693fbac601b68038cabc072eceac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae5e07196cd2693fbac601b68038cabc072eceac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae5e07196cd2693fbac601b68038cabc072eceac/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bad68e9a5052fb98ab469c7e74a748791d4591d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bad68e9a5052fb98ab469c7e74a748791d4591d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bad68e9a5052fb98ab469c7e74a748791d4591d0"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 78,
      "deletions": 29
    },
    "files": [
      {
        "sha": "8964f5f28277bc6c5b27a4ce2cc4a843158cb62e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae5e07196cd2693fbac601b68038cabc072eceac/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae5e07196cd2693fbac601b68038cabc072eceac/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ae5e07196cd2693fbac601b68038cabc072eceac",
        "patch": "@@ -272,6 +272,7 @@ void Shutdown()\n #if ENABLE_ZMQ\n     if (pzmqNotificationInterface) {\n         UnregisterValidationInterface(pzmqNotificationInterface);\n+        UnregisterMempoolInterface(pzmqNotificationInterface);\n         delete pzmqNotificationInterface;\n         pzmqNotificationInterface = nullptr;\n     }\n@@ -284,7 +285,7 @@ void Shutdown()\n         LogPrintf(\"%s: Unable to remove pidfile: %s\\n\", __func__, e.what());\n     }\n #endif\n-    UnregisterAllValidationInterfaces();\n+    UnregisterAllValidationAndMempoolInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     GetMainSignals().UnregisterWithMempoolSignals(mempool);\n     g_wallet_init_interface.Close();\n@@ -1398,6 +1399,7 @@ bool AppInitMain()\n \n     if (pzmqNotificationInterface) {\n         RegisterValidationInterface(pzmqNotificationInterface);\n+        RegisterMempoolInterface(pzmqNotificationInterface);\n     }\n #endif\n     uint64_t nMaxOutboundLimit = 0; //unlimited unless -maxuploadtarget is set"
      },
      {
        "sha": "87640aa786c33a93c4e978deeddad2a0258aa78c",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae5e07196cd2693fbac601b68038cabc072eceac/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae5e07196cd2693fbac601b68038cabc072eceac/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=ae5e07196cd2693fbac601b68038cabc072eceac",
        "patch": "@@ -76,31 +76,37 @@ CMainSignals& GetMainSignals()\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n     g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n-    g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n     g_signals.m_internals->ChainStateFlushed.connect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n     g_signals.m_internals->Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.m_internals->BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.m_internals->NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n+void RegisterMempoolInterface(MempoolInterface* listener) {\n+    g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&MempoolInterface::TransactionAddedToMempool, listener, _1));\n+    g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&MempoolInterface::TransactionRemovedFromMempool, listener, _1));\n+}\n+\n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.m_internals->Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.m_internals->Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.m_internals->ChainStateFlushed.disconnect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n-    g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n     g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n-    g_signals.m_internals->TransactionRemovedFromMempool.disconnect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n     g_signals.m_internals->UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n-void UnregisterAllValidationInterfaces() {\n+void UnregisterMempoolInterface(MempoolInterface* listener) {\n+    g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&MempoolInterface::TransactionAddedToMempool, listener, _1));\n+    g_signals.m_internals->TransactionRemovedFromMempool.disconnect(boost::bind(&MempoolInterface::TransactionRemovedFromMempool, listener, _1));\n+}\n+\n+void UnregisterAllValidationAndMempoolInterfaces() {\n     if (!g_signals.m_internals) {\n         return;\n     }"
      },
      {
        "sha": "0d22a508295a35cf25a0d7f39bb9902b5a89fd6f",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 59,
        "deletions": 21,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae5e07196cd2693fbac601b68038cabc072eceac/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae5e07196cd2693fbac601b68038cabc072eceac/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=ae5e07196cd2693fbac601b68038cabc072eceac",
        "patch": "@@ -23,15 +23,20 @@ class uint256;\n class CScheduler;\n class CTxMemPool;\n enum class MemPoolRemovalReason;\n+class MempoolInterface;\n \n // These functions dispatch to one or all registered wallets\n \n-/** Register a wallet to receive updates from core */\n+/** Register a wallet to receive updates from validation */\n void RegisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister a wallet from core */\n+/** Unregister a wallet from validation */\n void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister all wallets from core */\n-void UnregisterAllValidationInterfaces();\n+/** Register a listener to receive updates from mempool */\n+void RegisterMempoolInterface(MempoolInterface* listener);\n+/** Unregister a listener from mempool */\n+void UnregisterMempoolInterface(MempoolInterface* listener);\n+/** Unregister all listeners from core and mempool */\n+void UnregisterAllValidationAndMempoolInterfaces();\n /**\n  * Pushes a function to callback onto the notification queue, guaranteeing any\n  * callbacks generated prior to now are finished when the function is called.\n@@ -53,26 +58,24 @@ void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n  */\n void SyncWithValidationInterfaceQueue();\n \n-class CValidationInterface {\n+/**\n+ * An interface to get callbacks about transactions entering and leaving\n+ * mempool.\n+ *\n+ * Any class which extends both MempoolInterface and CValidationInterface will\n+ * see all callbacks across both well-ordered (see individual callback text for\n+ * details on the order guarantees).\n+ *\n+ * Callbacks called on a background thread have a separate order from those\n+ * called on the thread generating the callbacks.\n+ */\n+class MempoolInterface {\n protected:\n     /**\n      * Protected destructor so that instances can only be deleted by derived classes.\n      * If that restriction is no longer desired, this should be made public and virtual.\n      */\n-    ~CValidationInterface() = default;\n-    /**\n-     * Notifies listeners of updated block chain tip.\n-     *\n-     * Is called after a series of BlockConnected/BlockDisconnected events once\n-     * the chain has made forward progress and is now at the best-known-tip.\n-     *\n-     * If a block is found to be invalid, this event may trigger without\n-     * forward-progress, only to trigger again soon thereafter.\n-     * (TODO: remove this edge case)\n-     *\n-     * Called on a background thread.\n-     */\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n+    ~MempoolInterface() = default;\n     /**\n      * Notifies listeners of a transaction having been added to mempool.\n      *\n@@ -97,6 +100,40 @@ class CValidationInterface {\n      * Called on a background thread.\n      */\n     virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx) {}\n+    friend void ::RegisterMempoolInterface(MempoolInterface*);\n+    friend void ::UnregisterMempoolInterface(MempoolInterface*);\n+};\n+\n+/**\n+ * An interface to get callbacks about block connection/disconnection.\n+ *\n+ * Any class which extends both MempoolInterface and CValidationInterface will\n+ * see all callbacks across both well-ordered (see individual callback text for\n+ * details on the order guarantees).\n+ *\n+ * Callbacks called on a background thread have a separate order from those\n+ * called on the thread generating the callbacks.\n+ */\n+class CValidationInterface {\n+protected:\n+    /**\n+     * Protected destructor so that instances can only be deleted by derived classes.\n+     * If that restriction is no longer desired, this should be made public and virtual.\n+     */\n+    ~CValidationInterface() = default;\n+    /**\n+     * Notifies listeners of updated block chain tip\n+     *\n+     * Is called after a series of BlockConnected/BlockDisconnected events once\n+     * the chain has made forward progress and is now at the best-known-tip.\n+     *\n+     * If a block is found to be invalid, this event may trigger without\n+     * forward-progress, only to trigger again soon thereafter.\n+     * (TODO: remove this edge case) *\n+     *\n+     * Called on a background thread.\n+     */\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n@@ -156,7 +193,6 @@ class CValidationInterface {\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterAllValidationInterfaces();\n };\n \n struct MainSignalsInstance;\n@@ -166,7 +202,9 @@ class CMainSignals {\n \n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterAllValidationInterfaces();\n+    friend void ::RegisterMempoolInterface(MempoolInterface*);\n+    friend void ::UnregisterMempoolInterface(MempoolInterface*);\n+    friend void ::UnregisterAllValidationAndMempoolInterfaces();\n     friend void ::CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n \n     void MempoolEntryRemoved(CTransactionRef tx, MemPoolRemovalReason reason);"
      },
      {
        "sha": "73bdb8032984bb1915f9b608ad285b46cf9b239a",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae5e07196cd2693fbac601b68038cabc072eceac/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae5e07196cd2693fbac601b68038cabc072eceac/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=ae5e07196cd2693fbac601b68038cabc072eceac",
        "patch": "@@ -13,11 +13,13 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     bool fFirstRun;\n     m_wallet.LoadWallet(fFirstRun);\n     RegisterValidationInterface(&m_wallet);\n+    RegisterMempoolInterface(&m_wallet);\n \n     RegisterWalletRPCCommands(tableRPC);\n }\n \n WalletTestingSetup::~WalletTestingSetup()\n {\n     UnregisterValidationInterface(&m_wallet);\n+    UnregisterMempoolInterface(&m_wallet);\n }"
      },
      {
        "sha": "63c9c1c9901eea38eb1264035b60cd448dcb43b2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae5e07196cd2693fbac601b68038cabc072eceac/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae5e07196cd2693fbac601b68038cabc072eceac/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ae5e07196cd2693fbac601b68038cabc072eceac",
        "patch": "@@ -4143,6 +4143,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n \n     walletInstance->m_last_block_processed = chainActive.Tip();\n     RegisterValidationInterface(walletInstance);\n+    RegisterMempoolInterface(walletInstance);\n \n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n     {"
      },
      {
        "sha": "994973c75efb69d105bdc04847737a1624c8aac9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae5e07196cd2693fbac601b68038cabc072eceac/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae5e07196cd2693fbac601b68038cabc072eceac/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ae5e07196cd2693fbac601b68038cabc072eceac",
        "patch": "@@ -651,7 +651,7 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet final : public CCryptoKeyStore, public CValidationInterface\n+class CWallet final : public CCryptoKeyStore, public CValidationInterface, public MempoolInterface\n {\n private:\n     static std::atomic<bool> fFlushScheduled;"
      },
      {
        "sha": "7970655d443a7f49ef9e6f3c36fb4934ed6caa89",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae5e07196cd2693fbac601b68038cabc072eceac/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae5e07196cd2693fbac601b68038cabc072eceac/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=ae5e07196cd2693fbac601b68038cabc072eceac",
        "patch": "@@ -13,7 +13,7 @@\n class CBlockIndex;\n class CZMQAbstractNotifier;\n \n-class CZMQNotificationInterface final : public CValidationInterface\n+class CZMQNotificationInterface final : public CValidationInterface, public MempoolInterface\n {\n public:\n     virtual ~CZMQNotificationInterface();"
      }
    ]
  },
  {
    "sha": "07095f3b45e39f25044be49d585c24b6754fcb79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzA5NWYzYjQ1ZTM5ZjI1MDQ0YmU0OWQ1ODVjMjRiNjc1NGZjYjc5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-12T22:52:59Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-02T18:09:12Z"
      },
      "message": "Pass MemPoolRemovalReason out through TransactionRemovedFromMempool",
      "tree": {
        "sha": "3238fe3eff1b5919b99cd5168294fdb0b7301e60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3238fe3eff1b5919b99cd5168294fdb0b7301e60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07095f3b45e39f25044be49d585c24b6754fcb79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07095f3b45e39f25044be49d585c24b6754fcb79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07095f3b45e39f25044be49d585c24b6754fcb79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07095f3b45e39f25044be49d585c24b6754fcb79/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae5e07196cd2693fbac601b68038cabc072eceac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae5e07196cd2693fbac601b68038cabc072eceac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae5e07196cd2693fbac601b68038cabc072eceac"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "b8d3de0a81203508764208f076f7627b92317be8",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07095f3b45e39f25044be49d585c24b6754fcb79/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07095f3b45e39f25044be49d585c24b6754fcb79/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=07095f3b45e39f25044be49d585c24b6754fcb79",
        "patch": "@@ -24,7 +24,7 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n+    boost::signals2::signal<void (const CTransactionRef &, MemPoolRemovalReason)> TransactionRemovedFromMempool;\n     boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n     boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n@@ -87,7 +87,7 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n \n void RegisterMempoolInterface(MempoolInterface* listener) {\n     g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&MempoolInterface::TransactionAddedToMempool, listener, _1));\n-    g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&MempoolInterface::TransactionRemovedFromMempool, listener, _1));\n+    g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&MempoolInterface::TransactionRemovedFromMempool, listener, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n@@ -103,7 +103,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n \n void UnregisterMempoolInterface(MempoolInterface* listener) {\n     g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&MempoolInterface::TransactionAddedToMempool, listener, _1));\n-    g_signals.m_internals->TransactionRemovedFromMempool.disconnect(boost::bind(&MempoolInterface::TransactionRemovedFromMempool, listener, _1));\n+    g_signals.m_internals->TransactionRemovedFromMempool.disconnect(boost::bind(&MempoolInterface::TransactionRemovedFromMempool, listener, _1, _2));\n }\n \n void UnregisterAllValidationAndMempoolInterfaces() {\n@@ -138,8 +138,8 @@ void SyncWithValidationInterfaceQueue() {\n \n void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n+        m_internals->m_schedulerClient.AddToProcessQueue([ptx, reason, this] {\n+            m_internals->TransactionRemovedFromMempool(ptx, reason);\n         });\n     }\n }"
      },
      {
        "sha": "75ae30351f95541f34fa32e1130211dad95b3b03",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07095f3b45e39f25044be49d585c24b6754fcb79/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07095f3b45e39f25044be49d585c24b6754fcb79/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=07095f3b45e39f25044be49d585c24b6754fcb79",
        "patch": "@@ -99,7 +99,7 @@ class MempoolInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx) {}\n+    virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolRemovalReason reason) {}\n     friend void ::RegisterMempoolInterface(MempoolInterface*);\n     friend void ::UnregisterMempoolInterface(MempoolInterface*);\n };"
      },
      {
        "sha": "10645eb9b56749bc728cfd247968d5e169764986",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07095f3b45e39f25044be49d585c24b6754fcb79/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07095f3b45e39f25044be49d585c24b6754fcb79/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=07095f3b45e39f25044be49d585c24b6754fcb79",
        "patch": "@@ -1238,7 +1238,7 @@ void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n     }\n }\n \n-void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n+void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolRemovalReason reason) {\n     LOCK(cs_wallet);\n     auto it = mapWallet.find(ptx->GetHash());\n     if (it != mapWallet.end()) {\n@@ -1258,11 +1258,11 @@ void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const\n \n     for (const CTransactionRef& ptx : vtxConflicted) {\n         SyncTransaction(ptx);\n-        TransactionRemovedFromMempool(ptx);\n+        TransactionRemovedFromMempool(ptx, MemPoolRemovalReason::CONFLICT);\n     }\n     for (size_t i = 0; i < pblock->vtx.size(); i++) {\n         SyncTransaction(pblock->vtx[i], pindex, i);\n-        TransactionRemovedFromMempool(pblock->vtx[i]);\n+        TransactionRemovedFromMempool(pblock->vtx[i], MemPoolRemovalReason::BLOCK);\n     }\n \n     m_last_block_processed = pindex;"
      },
      {
        "sha": "8dd2dc7dbe74d5b8d4fe9b5ead9084939441e2f4",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07095f3b45e39f25044be49d585c24b6754fcb79/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07095f3b45e39f25044be49d585c24b6754fcb79/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=07095f3b45e39f25044be49d585c24b6754fcb79",
        "patch": "@@ -915,7 +915,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface, publi\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n-    void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n+    void TransactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolRemovalReason reason) override;\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!"
      }
    ]
  },
  {
    "sha": "ec0f81f6be7814138c7b35279db20ad253ce7b5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzBmODFmNmJlNzgxNDEzOGM3YjM1Mjc5ZGIyMGFkMjUzY2U3YjVj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-13T17:38:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-02T18:09:12Z"
      },
      "message": "Split removeRecursive into calculate/remove steps",
      "tree": {
        "sha": "71386dd28912315eda521c110d54c6ea3f2d6bd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71386dd28912315eda521c110d54c6ea3f2d6bd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec0f81f6be7814138c7b35279db20ad253ce7b5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec0f81f6be7814138c7b35279db20ad253ce7b5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec0f81f6be7814138c7b35279db20ad253ce7b5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec0f81f6be7814138c7b35279db20ad253ce7b5c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07095f3b45e39f25044be49d585c24b6754fcb79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07095f3b45e39f25044be49d585c24b6754fcb79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07095f3b45e39f25044be49d585c24b6754fcb79"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 31,
      "deletions": 27
    },
    "files": [
      {
        "sha": "f6b5c54d9a8c9ac8fbd99e23c49ca12a62dae0a2",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 27,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec0f81f6be7814138c7b35279db20ad253ce7b5c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec0f81f6be7814138c7b35279db20ad253ce7b5c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ec0f81f6be7814138c7b35279db20ad253ce7b5c",
        "patch": "@@ -470,36 +470,38 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants\n     }\n }\n \n-void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)\n+void CTxMemPool::calculateRemoveRecursive(const CTransaction &origTx, setEntries &setAllRemoves)\n {\n-    // Remove transaction from memory pool\n-    {\n-        LOCK(cs);\n-        setEntries txToRemove;\n-        txiter origit = mapTx.find(origTx.GetHash());\n-        if (origit != mapTx.end()) {\n-            txToRemove.insert(origit);\n-        } else {\n-            // When recursively removing but origTx isn't in the mempool\n-            // be sure to remove any children that are in the pool. This can\n-            // happen during chain re-orgs if origTx isn't re-accepted into\n-            // the mempool for any reason.\n-            for (unsigned int i = 0; i < origTx.vout.size(); i++) {\n-                auto it = mapNextTx.find(COutPoint(origTx.GetHash(), i));\n-                if (it == mapNextTx.end())\n-                    continue;\n-                txiter nextit = mapTx.find(it->second->GetHash());\n-                assert(nextit != mapTx.end());\n-                txToRemove.insert(nextit);\n-            }\n-        }\n-        setEntries setAllRemoves;\n-        for (txiter it : txToRemove) {\n-            CalculateDescendants(it, setAllRemoves);\n+    AssertLockHeld(cs);\n+    setEntries txToRemove;\n+    txiter origit = mapTx.find(origTx.GetHash());\n+    if (origit != mapTx.end()) {\n+        txToRemove.insert(origit);\n+    } else {\n+        // When recursively removing but origTx isn't in the mempool\n+        // be sure to remove any children that are in the pool. This can\n+        // happen during chain re-orgs if origTx isn't re-accepted into\n+        // the mempool for any reason.\n+        for (unsigned int i = 0; i < origTx.vout.size(); i++) {\n+            auto it = mapNextTx.find(COutPoint(origTx.GetHash(), i));\n+            if (it == mapNextTx.end())\n+                continue;\n+            txiter nextit = mapTx.find(it->second->GetHash());\n+            assert(nextit != mapTx.end());\n+            txToRemove.insert(nextit);\n         }\n-\n-        RemoveStaged(setAllRemoves, false, reason);\n     }\n+    for (txiter it : txToRemove) {\n+        CalculateDescendants(it, setAllRemoves);\n+    }\n+}\n+\n+void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason) {\n+    // Remove transaction from memory pool\n+    LOCK(cs);\n+    setEntries setAllRemoves;\n+    calculateRemoveRecursive(origTx, setAllRemoves);\n+    RemoveStaged(setAllRemoves, false, reason);\n }\n \n void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)"
      },
      {
        "sha": "56c434d8947da073b49005e61b6cfa73bdab2dbd",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec0f81f6be7814138c7b35279db20ad253ce7b5c/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec0f81f6be7814138c7b35279db20ad253ce7b5c/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ec0f81f6be7814138c7b35279db20ad253ce7b5c",
        "patch": "@@ -514,6 +514,8 @@ class CTxMemPool\n \n     std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const;\n \n+    void calculateRemoveRecursive(const CTransaction &tx, setEntries &stage);\n+\n public:\n     indirectmap<COutPoint, const CTransaction*> mapNextTx;\n     std::map<uint256, CAmount> mapDeltas;"
      }
    ]
  },
  {
    "sha": "1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWE1NmQxNGFlZGUyZDU4ZGMyN2E2ZTM1NzhkNDBiYjNlODFkMmM0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-13T17:41:12Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-02T18:09:12Z"
      },
      "message": "Track the set of transactions removed/conflicted in removeForBlock",
      "tree": {
        "sha": "671dd160bc298fb8ca4b80ca4eb6ac97ec23e049",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/671dd160bc298fb8ca4b80ca4eb6ac97ec23e049"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec0f81f6be7814138c7b35279db20ad253ce7b5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec0f81f6be7814138c7b35279db20ad253ce7b5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec0f81f6be7814138c7b35279db20ad253ce7b5c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "eca1f094f3f9b626401d24332bb7d6da3b0f882c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4",
        "patch": "@@ -541,7 +541,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     RemoveStaged(setAllRemoves, false, MemPoolRemovalReason::REORG);\n }\n \n-void CTxMemPool::removeConflicts(const CTransaction &tx)\n+void CTxMemPool::removeConflicts(const CTransaction &tx, std::vector<CTransactionRef> &txn_removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n     LOCK(cs);\n@@ -552,7 +552,12 @@ void CTxMemPool::removeConflicts(const CTransaction &tx)\n             if (txConflict != tx)\n             {\n                 ClearPrioritisation(txConflict.GetHash());\n-                removeRecursive(txConflict, MemPoolRemovalReason::CONFLICT);\n+                setEntries set_removes;\n+                calculateRemoveRecursive(txConflict, set_removes);\n+                for (const txiter& it : set_removes) {\n+                    txn_removed.push_back(it->GetSharedTx());\n+                }\n+                RemoveStaged(set_removes, false, MemPoolRemovalReason::CONFLICT);\n             }\n         }\n     }\n@@ -575,15 +580,18 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n     }\n     // Before the txs in the new block have been removed from the mempool, update policy estimates\n     if (minerPolicyEstimator) {minerPolicyEstimator->processBlock(nBlockHeight, entries);}\n+    std::vector<CTransactionRef> txn_conflicts, txn_removed_in_block;\n+    txn_removed_in_block.reserve(vtx.size());\n     for (const auto& tx : vtx)\n     {\n         txiter it = mapTx.find(tx->GetHash());\n         if (it != mapTx.end()) {\n             setEntries stage;\n             stage.insert(it);\n             RemoveStaged(stage, true, MemPoolRemovalReason::BLOCK);\n+            txn_removed_in_block.push_back(tx); // Use the block's copy as witness may be different\n         }\n-        removeConflicts(*tx);\n+        removeConflicts(*tx, txn_conflicts);\n         ClearPrioritisation(tx->GetHash());\n     }\n     lastRollingFeeUpdate = GetTime();"
      },
      {
        "sha": "d13210b81b36a193fedfb761b092eaaab284b5b3",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4",
        "patch": "@@ -515,6 +515,7 @@ class CTxMemPool\n     std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const;\n \n     void calculateRemoveRecursive(const CTransaction &tx, setEntries &stage);\n+    void removeConflicts(const CTransaction &tx, std::vector<CTransactionRef> &txn_removed);\n \n public:\n     indirectmap<COutPoint, const CTransaction*> mapNextTx;\n@@ -545,7 +546,6 @@ class CTxMemPool\n \n     void removeRecursive(const CTransaction &tx, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n-    void removeConflicts(const CTransaction &tx);\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight);\n \n     void clear();"
      }
    ]
  },
  {
    "sha": "9550c830d77c2770a19924562e2110b1a305d88e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTUwYzgzMGQ3N2MyNzcwYTE5OTI0NTYyZTIxMTBiMWEzMDVkODhl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-13T18:23:15Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-02T18:12:09Z"
      },
      "message": "BlockConnected(vtxConflicted) -> New MempoolInterface callback\n\nThis removes the whole ConnectTrace object, which may make it\nslightly harder to remove the unbounded-memory-during-reorg bug\nby throwing blocks out of memory and re-loading them from disk\nlater. Comments are added to validationinterface to note where\nthis should likely happen instead of ConnectTrace.",
      "tree": {
        "sha": "deab71b4a992a6a5157db8ce12eaeda037d765ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/deab71b4a992a6a5157db8ce12eaeda037d765ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9550c830d77c2770a19924562e2110b1a305d88e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9550c830d77c2770a19924562e2110b1a305d88e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9550c830d77c2770a19924562e2110b1a305d88e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9550c830d77c2770a19924562e2110b1a305d88e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 71,
      "deletions": 109
    },
    "files": [
      {
        "sha": "ce1aa2894d2d87bd286d50b6e2ad447839fb558b",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -154,8 +154,7 @@ bool TxIndex::WriteBestBlock(const CBlockIndex* block_index)\n     return true;\n }\n \n-void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n-                    const std::vector<CTransactionRef>& txn_conflicted)\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex)\n {\n     if (!m_synced) {\n         return;"
      },
      {
        "sha": "3c21ed3e6c22d872e20989e5d00bad1181cd1e24",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -52,9 +52,7 @@ class TxIndex final : public CValidationInterface\n     bool WriteBestBlock(const CBlockIndex* block_index);\n \n protected:\n-    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n-                        const std::vector<CTransactionRef>& txn_conflicted) override;\n-\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex) override;\n     void ChainStateFlushed(const CBlockLocator& locator) override;\n \n public:"
      },
      {
        "sha": "2e901fdf786e0d7999639141fcb816030af715d6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -826,7 +826,7 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &schedu\n  * Evict orphan txn pool entries (EraseOrphanTx) based on a newly connected\n  * block. Also save the time of the last tip update.\n  */\n-void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex) {\n     LOCK(g_cs_orphans);\n \n     std::vector<uint256> vOrphanErase;"
      },
      {
        "sha": "32b42aba6865c80021bd4a05630148829f26b04f",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -45,7 +45,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     /**\n      * Overridden from CValidationInterface.\n      */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n     /**\n      * Overridden from CValidationInterface.\n      */"
      },
      {
        "sha": "b204bd3c033113a347ba7dc462da41622242ebd8",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -12,7 +12,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(policyestimator_tests, BasicTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(policyestimator_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n {"
      },
      {
        "sha": "fb7eee1b01e2bf2b0999c42a194113b56e50efe3",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -9,6 +9,7 @@\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <validation.h>\n+#include <validationinterface.h>\n #include <policy/policy.h>\n #include <policy/fees.h>\n #include <reverse_iterator.h>\n@@ -594,6 +595,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n         removeConflicts(*tx, txn_conflicts);\n         ClearPrioritisation(tx->GetHash());\n     }\n+    GetMainSignals().MempoolUpdatedForBlockConnect(std::move(txn_removed_in_block), std::move(txn_conflicts));\n     lastRollingFeeUpdate = GetTime();\n     blockSinceLastRollingFeeBump = true;\n }"
      },
      {
        "sha": "a79ff12214514a79d42d76e676d3aa829faee0f6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 83,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -88,8 +88,6 @@ enum DisconnectResult\n     DISCONNECT_FAILED   // Something else went wrong.\n };\n \n-class ConnectTrace;\n-\n /**\n  * CChainState stores and provides an API to update our local knowledge of the\n  * current best chain and header tree.\n@@ -184,8 +182,8 @@ class CChainState {\n     void UnloadBlockIndex();\n \n private:\n-    bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace);\n-    bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool);\n+    bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound);\n+    bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, DisconnectedBlockTransactions &disconnectpool);\n \n     CBlockIndex* AddToBlockIndex(const CBlockHeader& block);\n     /** Create a new block index entry for a given block hash */\n@@ -2310,78 +2308,11 @@ static int64_t nTimeFlush = 0;\n static int64_t nTimeChainState = 0;\n static int64_t nTimePostConnect = 0;\n \n-struct PerBlockConnectTrace {\n-    CBlockIndex* pindex = nullptr;\n-    std::shared_ptr<const CBlock> pblock;\n-    std::shared_ptr<std::vector<CTransactionRef>> conflictedTxs;\n-    PerBlockConnectTrace() : conflictedTxs(std::make_shared<std::vector<CTransactionRef>>()) {}\n-};\n-/**\n- * Used to track blocks whose transactions were applied to the UTXO state as a\n- * part of a single ActivateBestChainStep call.\n- *\n- * This class also tracks transactions that are removed from the mempool as\n- * conflicts (per block) and can be used to pass all those transactions\n- * through SyncTransaction.\n- *\n- * This class assumes (and asserts) that the conflicted transactions for a given\n- * block are added via mempool callbacks prior to the BlockConnected() associated\n- * with those transactions. If any transactions are marked conflicted, it is\n- * assumed that an associated block will always be added.\n- *\n- * This class is single-use, once you call GetBlocksConnected() you have to throw\n- * it away and make a new one.\n- */\n-class ConnectTrace {\n-private:\n-    std::vector<PerBlockConnectTrace> blocksConnected;\n-    CTxMemPool &pool;\n-\n-public:\n-    explicit ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {\n-        pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n-    }\n-\n-    ~ConnectTrace() {\n-        pool.NotifyEntryRemoved.disconnect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n-    }\n-\n-    void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {\n-        assert(!blocksConnected.back().pindex);\n-        assert(pindex);\n-        assert(pblock);\n-        blocksConnected.back().pindex = pindex;\n-        blocksConnected.back().pblock = std::move(pblock);\n-        blocksConnected.emplace_back();\n-    }\n-\n-    std::vector<PerBlockConnectTrace>& GetBlocksConnected() {\n-        // We always keep one extra block at the end of our list because\n-        // blocks are added after all the conflicted transactions have\n-        // been filled in. Thus, the last entry should always be an empty\n-        // one waiting for the transactions from the next block. We pop\n-        // the last entry here to make sure the list we return is sane.\n-        assert(!blocksConnected.back().pindex);\n-        assert(blocksConnected.back().conflictedTxs->empty());\n-        blocksConnected.pop_back();\n-        return blocksConnected;\n-    }\n-\n-    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {\n-        assert(!blocksConnected.back().pindex);\n-        if (reason == MemPoolRemovalReason::CONFLICT) {\n-            blocksConnected.back().conflictedTxs->emplace_back(std::move(txRemoved));\n-        }\n-    }\n-};\n-\n /**\n  * Connect a new block to chainActive. pblock is either nullptr or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n- *\n- * The block is added to connectTrace if connection succeeds.\n  */\n-bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, DisconnectedBlockTransactions &disconnectpool)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2421,7 +2352,7 @@ bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainp\n         return false;\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime5 - nTime4) * MILLI, nTimeChainState * MICRO, nTimeChainState * MILLI / nBlocksTotal);\n-    // Remove conflicting transactions from the mempool.;\n+    // Remove conflicting transactions from the mempool. This will generate MempoolUpdatedForBlockConnect callbacks.\n     mempool.removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n     disconnectpool.removeForBlock(blockConnecting.vtx);\n     // Update chainActive & related variables.\n@@ -2432,7 +2363,7 @@ bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainp\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);\n     LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime1) * MILLI, nTimeTotal * MICRO, nTimeTotal * MILLI / nBlocksTotal);\n \n-    connectTrace.BlockConnected(pindexNew, std::move(pthisBlock));\n+    GetMainSignals().BlockConnected(std::move(pthisBlock), pindexNew);\n     return true;\n }\n \n@@ -2510,7 +2441,7 @@ void CChainState::PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either nullptr or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n+bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2548,7 +2479,7 @@ bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainPar\n \n         // Connect new blocks.\n         for (CBlockIndex *pindexConnect : reverse_iterate(vpindexToConnect)) {\n-            if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : std::shared_ptr<const CBlock>(), connectTrace, disconnectpool)) {\n+            if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : std::shared_ptr<const CBlock>(), disconnectpool)) {\n                 if (state.IsInvalid()) {\n                     // The block violates a consensus rule.\n                     if (!state.CorruptionPossible())\n@@ -2645,7 +2576,6 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n-            ConnectTrace connectTrace(mempool); // Destructed before cs_main is unlocked\n \n             CBlockIndex *pindexOldTip = chainActive.Tip();\n             if (pindexMostWork == nullptr) {\n@@ -2658,7 +2588,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n \n             bool fInvalidFound = false;\n             std::shared_ptr<const CBlock> nullBlockPtr;\n-            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace))\n+            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound))\n                 return false;\n \n             if (fInvalidFound) {\n@@ -2669,11 +2599,6 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n             pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n \n-            for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n-                assert(trace.pblock && trace.pindex);\n-                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, trace.conflictedTxs);\n-            }\n-\n             // Notify external listeners about the new tip.\n             // Enqueue while holding cs_main to ensure that UpdatedBlockTip is called in the order in which blocks are connected\n             GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);"
      },
      {
        "sha": "9cebdde0e7b7452539a4ae362d5f5281397cadba",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 6,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -22,7 +22,8 @@\n struct MainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::vector<CTransactionRef> &, const std::vector<CTransactionRef> &)> MempoolUpdatedForBlockConnect;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n     boost::signals2::signal<void (const CTransactionRef &, MemPoolRemovalReason)> TransactionRemovedFromMempool;\n     boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n@@ -76,7 +77,7 @@ CMainSignals& GetMainSignals()\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2));\n     g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n     g_signals.m_internals->ChainStateFlushed.connect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n     g_signals.m_internals->Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -88,14 +89,15 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n void RegisterMempoolInterface(MempoolInterface* listener) {\n     g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&MempoolInterface::TransactionAddedToMempool, listener, _1));\n     g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&MempoolInterface::TransactionRemovedFromMempool, listener, _1, _2));\n+    g_signals.m_internals->MempoolUpdatedForBlockConnect.connect(boost::bind(&MempoolInterface::MempoolUpdatedForBlockConnect, listener, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.m_internals->Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.m_internals->Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.m_internals->ChainStateFlushed.disconnect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n-    g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2));\n     g_signals.m_internals->BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n     g_signals.m_internals->UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n@@ -104,6 +106,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n void UnregisterMempoolInterface(MempoolInterface* listener) {\n     g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&MempoolInterface::TransactionAddedToMempool, listener, _1));\n     g_signals.m_internals->TransactionRemovedFromMempool.disconnect(boost::bind(&MempoolInterface::TransactionRemovedFromMempool, listener, _1, _2));\n+    g_signals.m_internals->MempoolUpdatedForBlockConnect.disconnect(boost::bind(&MempoolInterface::MempoolUpdatedForBlockConnect, listener, _1, _2));\n }\n \n void UnregisterAllValidationAndMempoolInterfaces() {\n@@ -118,6 +121,7 @@ void UnregisterAllValidationAndMempoolInterfaces() {\n     g_signals.m_internals->BlockConnected.disconnect_all_slots();\n     g_signals.m_internals->BlockDisconnected.disconnect_all_slots();\n     g_signals.m_internals->TransactionRemovedFromMempool.disconnect_all_slots();\n+    g_signals.m_internals->MempoolUpdatedForBlockConnect.disconnect_all_slots();\n     g_signals.m_internals->UpdatedBlockTip.disconnect_all_slots();\n     g_signals.m_internals->NewPoWValidBlock.disconnect_all_slots();\n }\n@@ -144,6 +148,14 @@ void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason\n     }\n }\n \n+void CMainSignals::MempoolUpdatedForBlockConnect(std::vector<CTransactionRef>&& tx_removed_in_block, std::vector<CTransactionRef>&& tx_removed_conflicted) {\n+    auto tx_removed_in_block_ptr = std::make_shared<std::vector<CTransactionRef>>(std::move(tx_removed_in_block));\n+    auto tx_removed_conflicted_ptr = std::make_shared<std::vector<CTransactionRef>>(std::move(tx_removed_conflicted));\n+    m_internals->m_schedulerClient.AddToProcessQueue([tx_removed_in_block_ptr, tx_removed_conflicted_ptr, this] {\n+        m_internals->MempoolUpdatedForBlockConnect(*tx_removed_in_block_ptr, *tx_removed_conflicted_ptr);\n+    });\n+}\n+\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n@@ -160,13 +172,21 @@ void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n     });\n }\n \n-void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n-        m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n+void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex) {\n+    //TODO: To fix unbounded memory usage during reorg we really need to only\n+    // have a limited set of blocks in memory, be willing to throw them away\n+    // here, and read them back off disk when we find time to call the signal\n+    // here.\n+    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, this] {\n+        m_internals->BlockConnected(pblock, pindex);\n     });\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n+    //TODO: To fix unbounded memory usage during reorg we really need to only\n+    // have a limited set of blocks in memory, be willing to throw them away\n+    // here, and read them back off disk when we find time to call the signal\n+    // here.\n     m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n         m_internals->BlockDisconnected(pblock);\n     });"
      },
      {
        "sha": "fa9a8ecbc2657f21b5c25f51762e0674c3d1f5bb",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -100,6 +100,19 @@ class MempoolInterface {\n      * Called on a background thread.\n      */\n     virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolRemovalReason reason) {}\n+    /**\n+     * Notifies listeners of mempool being updated for a block connection.\n+     *\n+     * Entries in tx_removed_in_block represent transactions which were in the\n+     * block and thus removed from the mempool. The tx_removed_in_block txn are\n+     * as they appear in the block, and may have different witnesses from the\n+     * version which was previously in the mempool.\n+     *\n+     * This callback fires prior to BlockConnected in CValidationInterface.\n+     *\n+     * Called on a background thread.\n+     */\n+    virtual void MempoolUpdatedForBlockConnect(const std::vector<CTransactionRef>& tx_removed_in_block, const std::vector<CTransactionRef>& tx_removed_conflicted) {}\n     friend void ::RegisterMempoolInterface(MempoolInterface*);\n     friend void ::UnregisterMempoolInterface(MempoolInterface*);\n };\n@@ -136,11 +149,10 @@ class CValidationInterface {\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     /**\n      * Notifies listeners of a block being connected.\n-     * Provides a vector of transactions evicted from the mempool as a result.\n      *\n      * Called on a background thread.\n      */\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex) {}\n     /**\n      * Notifies listeners of a block being disconnected\n      *\n@@ -226,7 +238,8 @@ class CMainSignals {\n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n-    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n+    void MempoolUpdatedForBlockConnect(std::vector<CTransactionRef>&& tx_removed_in_block, std::vector<CTransactionRef>&& tx_removed_conflicted);\n+    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n     void ChainStateFlushed(const CBlockLocator &);\n     void Inventory(const uint256 &);"
      },
      {
        "sha": "29b2525be7cdc73ffb8089a69f58190db3557e95",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -1246,7 +1246,16 @@ void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolR\n     }\n }\n \n-void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+void CWallet::MempoolUpdatedForBlockConnect(const std::vector<CTransactionRef>& tx_removed_in_block, const std::vector<CTransactionRef>& tx_removed_conflicted) {\n+    LOCK2(cs_main, cs_wallet);\n+    for (const CTransactionRef& ptx : tx_removed_conflicted) {\n+        SyncTransaction(ptx);\n+        TransactionRemovedFromMempool(ptx, MemPoolRemovalReason::CONFLICT);\n+    }\n+    // We can ignore tx_removed_in_block, we'll get it in BlockConnected\n+}\n+\n+void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex) {\n     LOCK2(cs_main, cs_wallet);\n     // TODO: Temporarily ensure that mempool removals are notified before\n     // connected transactions.  This shouldn't matter, but the abandoned\n@@ -1255,11 +1264,6 @@ void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const\n     // notification of a connected conflict might cause an outside process\n     // to abandon a transaction and then have it inadvertently cleared by\n     // the notification that the conflicted transaction was evicted.\n-\n-    for (const CTransactionRef& ptx : vtxConflicted) {\n-        SyncTransaction(ptx);\n-        TransactionRemovedFromMempool(ptx, MemPoolRemovalReason::CONFLICT);\n-    }\n     for (size_t i = 0; i < pblock->vtx.size(); i++) {\n         SyncTransaction(pblock->vtx[i], pindex, i);\n         TransactionRemovedFromMempool(pblock->vtx[i], MemPoolRemovalReason::BLOCK);"
      },
      {
        "sha": "a58c106f5b9adb491e52899b8cc560a1c5fbd95e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -910,7 +910,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface, publi\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void MempoolUpdatedForBlockConnect(const std::vector<CTransactionRef>& tx_removed_in_block, const std::vector<CTransactionRef>& tx_removed_conflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);"
      },
      {
        "sha": "71dcef798d39724d9927fac7798c82260bac7e0e",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -165,7 +165,7 @@ void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef&\n     }\n }\n \n-void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted)\n+void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {\n         // Do a normal notify for each transaction added in the block"
      },
      {
        "sha": "f52ea4a8e52974dd6e4fa6e051fade021da95eed",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9550c830d77c2770a19924562e2110b1a305d88e/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9550c830d77c2770a19924562e2110b1a305d88e/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=9550c830d77c2770a19924562e2110b1a305d88e",
        "patch": "@@ -26,7 +26,7 @@ class CZMQNotificationInterface final : public CValidationInterface, public Memp\n \n     // CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n "
      }
    ]
  },
  {
    "sha": "4da034275353dc483f35a286b025ecfa7482e124",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGEwMzQyNzUzNTNkYzQ4M2YzNWEyODZiMDI1ZWNmYTc0ODJlMTI0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-04-05T17:23:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-02T18:14:59Z"
      },
      "message": "Remove boost::signals from txmempool, call GetMainSignals() directly",
      "tree": {
        "sha": "0aecd43b4a48bff214e3a8f2b4bd10a130868ad1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0aecd43b4a48bff214e3a8f2b4bd10a130868ad1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4da034275353dc483f35a286b025ecfa7482e124",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4da034275353dc483f35a286b025ecfa7482e124",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4da034275353dc483f35a286b025ecfa7482e124",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4da034275353dc483f35a286b025ecfa7482e124/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9550c830d77c2770a19924562e2110b1a305d88e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9550c830d77c2770a19924562e2110b1a305d88e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9550c830d77c2770a19924562e2110b1a305d88e"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 9,
      "deletions": 29
    },
    "files": [
      {
        "sha": "42853e3d26247a8272d1c649fbb84e9fcb649e09",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4da034275353dc483f35a286b025ecfa7482e124/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4da034275353dc483f35a286b025ecfa7482e124/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4da034275353dc483f35a286b025ecfa7482e124",
        "patch": "@@ -287,7 +287,6 @@ void Shutdown()\n #endif\n     UnregisterAllValidationAndMempoolInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n-    GetMainSignals().UnregisterWithMempoolSignals(mempool);\n     g_wallet_init_interface.Close();\n     globalVerifyHandle.reset();\n     ECC_Stop();\n@@ -1270,7 +1269,6 @@ bool AppInitMain()\n     threadGroup.create_thread(boost::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n-    GetMainSignals().RegisterWithMempoolSignals(mempool);\n \n     /* Register RPC commands regardless of -server setting so they will be\n      * available in the GUI RPC console even if external calls are disabled."
      },
      {
        "sha": "b84f85f024b88770c36b3d622b74dd80452e3ef2",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4da034275353dc483f35a286b025ecfa7482e124/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4da034275353dc483f35a286b025ecfa7482e124/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4da034275353dc483f35a286b025ecfa7482e124",
        "patch": "@@ -360,7 +360,6 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n \n bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n {\n-    NotifyEntryAdded(entry.GetSharedTx());\n     // Add to memory pool without checking anything.\n     // Used by AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n@@ -419,7 +418,10 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n \n void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n {\n-    NotifyEntryRemoved(it->GetSharedTx(), reason);\n+    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n+        // BLOCK and CONFLICT callbacks are generated in removeForBlock\n+        GetMainSignals().MempoolEntryRemoved(it->GetSharedTx(), reason);\n+    }\n     const uint256 hash = it->GetTx().GetHash();\n     for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);"
      },
      {
        "sha": "c7866714d0473345f4862a8c6fead1216a119cba",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4da034275353dc483f35a286b025ecfa7482e124/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4da034275353dc483f35a286b025ecfa7482e124/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4da034275353dc483f35a286b025ecfa7482e124",
        "patch": "@@ -25,7 +25,6 @@\n #include <boost/multi_index/hashed_index.hpp>\n #include <boost/multi_index/ordered_index.hpp>\n #include <boost/multi_index/sequenced_index.hpp>\n-#include <boost/signals2/signal.hpp>\n \n class CBlockIndex;\n \n@@ -648,9 +647,6 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n-    boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;\n-    boost::signals2::signal<void (CTransactionRef, MemPoolRemovalReason)> NotifyEntryRemoved;\n-\n private:\n     /** UpdateForDescendants is used by UpdateTransactionsFromBlock to update\n      *  the descendants for a single transaction that has been added to the"
      },
      {
        "sha": "c6dd52eac3e4f9952b150a6deed6a4aae29d64ab",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4da034275353dc483f35a286b025ecfa7482e124/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4da034275353dc483f35a286b025ecfa7482e124/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=4da034275353dc483f35a286b025ecfa7482e124",
        "patch": "@@ -62,14 +62,6 @@ size_t CMainSignals::CallbacksPending() {\n     return m_internals->m_schedulerClient.CallbacksPending();\n }\n \n-void CMainSignals::RegisterWithMempoolSignals(CTxMemPool& pool) {\n-    pool.NotifyEntryRemoved.connect(boost::bind(&CMainSignals::MempoolEntryRemoved, this, _1, _2));\n-}\n-\n-void CMainSignals::UnregisterWithMempoolSignals(CTxMemPool& pool) {\n-    pool.NotifyEntryRemoved.disconnect(boost::bind(&CMainSignals::MempoolEntryRemoved, this, _1, _2));\n-}\n-\n CMainSignals& GetMainSignals()\n {\n     return g_signals;\n@@ -141,11 +133,9 @@ void SyncWithValidationInterfaceQueue() {\n }\n \n void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, reason, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx, reason);\n-        });\n-    }\n+    m_internals->m_schedulerClient.AddToProcessQueue([ptx, reason, this] {\n+        m_internals->TransactionRemovedFromMempool(ptx, reason);\n+    });\n }\n \n void CMainSignals::MempoolUpdatedForBlockConnect(std::vector<CTransactionRef>&& tx_removed_in_block, std::vector<CTransactionRef>&& tx_removed_conflicted) {"
      },
      {
        "sha": "79a2bdf31bb73586f28bdfb65e87c67ea897c74e",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4da034275353dc483f35a286b025ecfa7482e124/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4da034275353dc483f35a286b025ecfa7482e124/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=4da034275353dc483f35a286b025ecfa7482e124",
        "patch": "@@ -88,7 +88,7 @@ class MempoolInterface {\n      * This only fires for transactions which leave mempool because of expiry,\n      * size limiting, reorg (changes in lock times/coinbase maturity), or\n      * replacement. This does not include any transactions which are included\n-     * in BlockConnectedDisconnected either in block->vtx or in txnConflicted.\n+     * in MempoolUpdatedForBlockConnect.\n      *\n      * reason == REORG is not ordered with BlockConnected/BlockDisconnected!\n      *\n@@ -219,8 +219,6 @@ class CMainSignals {\n     friend void ::UnregisterAllValidationAndMempoolInterfaces();\n     friend void ::CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n \n-    void MempoolEntryRemoved(CTransactionRef tx, MemPoolRemovalReason reason);\n-\n public:\n     /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n     void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n@@ -231,14 +229,10 @@ class CMainSignals {\n \n     size_t CallbacksPending();\n \n-    /** Register with mempool to call TransactionRemovedFromMempool callbacks */\n-    void RegisterWithMempoolSignals(CTxMemPool& pool);\n-    /** Unregister with mempool */\n-    void UnregisterWithMempoolSignals(CTxMemPool& pool);\n-\n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n     void MempoolUpdatedForBlockConnect(std::vector<CTransactionRef>&& tx_removed_in_block, std::vector<CTransactionRef>&& tx_removed_conflicted);\n+    void MempoolEntryRemoved(CTransactionRef tx, MemPoolRemovalReason reason);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n     void ChainStateFlushed(const CBlockLocator &);"
      }
    ]
  },
  {
    "sha": "15205068e62e89a7c762730f2198b5c05566166b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTIwNTA2OGU2MmU4OWE3Yzc2MjczMGYyMTk4YjVjMDU1NjYxNjZi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-04-13T18:56:12Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-02T18:14:59Z"
      },
      "message": "Remove useless scope in AcceptToMemoryPoolWorker",
      "tree": {
        "sha": "838a8544d0ae1aa5223bda23d50763309ce0789f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/838a8544d0ae1aa5223bda23d50763309ce0789f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15205068e62e89a7c762730f2198b5c05566166b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15205068e62e89a7c762730f2198b5c05566166b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15205068e62e89a7c762730f2198b5c05566166b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15205068e62e89a7c762730f2198b5c05566166b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4da034275353dc483f35a286b025ecfa7482e124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4da034275353dc483f35a286b025ecfa7482e124",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4da034275353dc483f35a286b025ecfa7482e124"
      }
    ],
    "stats": {
      "total": 592,
      "additions": 295,
      "deletions": 297
    },
    "files": [
      {
        "sha": "2ccac193f516859c2f8dfcd7683167688173773c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 295,
        "deletions": 297,
        "changes": 592,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15205068e62e89a7c762730f2198b5c05566166b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15205068e62e89a7c762730f2198b5c05566166b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=15205068e62e89a7c762730f2198b5c05566166b",
        "patch": "@@ -634,349 +634,347 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         }\n     }\n \n-    {\n-        CCoinsView dummy;\n-        CCoinsViewCache view(&dummy);\n+    CCoinsView dummy;\n+    CCoinsViewCache view(&dummy);\n \n-        LockPoints lp;\n-        CCoinsViewMemPool viewMemPool(pcoinsTip.get(), pool);\n-        view.SetBackend(viewMemPool);\n+    LockPoints lp;\n+    CCoinsViewMemPool viewMemPool(pcoinsTip.get(), pool);\n+    view.SetBackend(viewMemPool);\n \n-        // do all inputs exist?\n-        for (const CTxIn txin : tx.vin) {\n-            if (!pcoinsTip->HaveCoinInCache(txin.prevout)) {\n-                coins_to_uncache.push_back(txin.prevout);\n-            }\n-            if (!view.HaveCoin(txin.prevout)) {\n-                // Are inputs missing because we already have the tx?\n-                for (size_t out = 0; out < tx.vout.size(); out++) {\n-                    // Optimistically just do efficient check of cache for outputs\n-                    if (pcoinsTip->HaveCoinInCache(COutPoint(hash, out))) {\n-                        return state.Invalid(false, REJECT_DUPLICATE, \"txn-already-known\");\n-                    }\n-                }\n-                // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet\n-                if (pfMissingInputs) {\n-                    *pfMissingInputs = true;\n+    // do all inputs exist?\n+    for (const CTxIn txin : tx.vin) {\n+        if (!pcoinsTip->HaveCoinInCache(txin.prevout)) {\n+            coins_to_uncache.push_back(txin.prevout);\n+        }\n+        if (!view.HaveCoin(txin.prevout)) {\n+            // Are inputs missing because we already have the tx?\n+            for (size_t out = 0; out < tx.vout.size(); out++) {\n+                // Optimistically just do efficient check of cache for outputs\n+                if (pcoinsTip->HaveCoinInCache(COutPoint(hash, out))) {\n+                    return state.Invalid(false, REJECT_DUPLICATE, \"txn-already-known\");\n                 }\n-                return false; // fMissingInputs and !state.IsInvalid() is used to detect this condition, don't set state.Invalid()\n             }\n+            // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet\n+            if (pfMissingInputs) {\n+                *pfMissingInputs = true;\n+            }\n+            return false; // fMissingInputs and !state.IsInvalid() is used to detect this condition, don't set state.Invalid()\n         }\n+    }\n \n-        // Bring the best block into scope\n-        view.GetBestBlock();\n+    // Bring the best block into scope\n+    view.GetBestBlock();\n \n-        // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n-        view.SetBackend(dummy);\n+    // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n+    view.SetBackend(dummy);\n \n-        // Only accept BIP68 sequence locked transactions that can be mined in the next\n-        // block; we don't want our mempool filled up with transactions that can't\n-        // be mined yet.\n-        // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n-        // CoinsViewCache instead of create its own\n-        if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n+    // Only accept BIP68 sequence locked transactions that can be mined in the next\n+    // block; we don't want our mempool filled up with transactions that can't\n+    // be mined yet.\n+    // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n+    // CoinsViewCache instead of create its own\n+    if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n \n-        CAmount nFees = 0;\n-        if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nFees)) {\n-            return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n-        }\n+    CAmount nFees = 0;\n+    if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nFees)) {\n+        return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n+    }\n \n-        // Check for non-standard pay-to-script-hash in inputs\n-        if (fRequireStandard && !AreInputsStandard(tx, view))\n-            return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n+    // Check for non-standard pay-to-script-hash in inputs\n+    if (fRequireStandard && !AreInputsStandard(tx, view))\n+        return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n-        // Check for non-standard witness in P2WSH\n-        if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view))\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\", true);\n+    // Check for non-standard witness in P2WSH\n+    if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view))\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\", true);\n \n-        int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n+    int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n-        // nModifiedFees includes any fee deltas from PrioritiseTransaction\n-        CAmount nModifiedFees = nFees;\n-        pool.ApplyDelta(hash, nModifiedFees);\n+    // nModifiedFees includes any fee deltas from PrioritiseTransaction\n+    CAmount nModifiedFees = nFees;\n+    pool.ApplyDelta(hash, nModifiedFees);\n \n-        // Keep track of transactions that spend a coinbase, which we re-scan\n-        // during reorgs to ensure COINBASE_MATURITY is still met.\n-        bool fSpendsCoinbase = false;\n-        for (const CTxIn &txin : tx.vin) {\n-            const Coin &coin = view.AccessCoin(txin.prevout);\n-            if (coin.IsCoinBase()) {\n-                fSpendsCoinbase = true;\n-                break;\n-            }\n+    // Keep track of transactions that spend a coinbase, which we re-scan\n+    // during reorgs to ensure COINBASE_MATURITY is still met.\n+    bool fSpendsCoinbase = false;\n+    for (const CTxIn &txin : tx.vin) {\n+        const Coin &coin = view.AccessCoin(txin.prevout);\n+        if (coin.IsCoinBase()) {\n+            fSpendsCoinbase = true;\n+            break;\n         }\n+    }\n \n-        CTxMemPoolEntry entry(ptx, nFees, nAcceptTime, chainActive.Height(),\n-                              fSpendsCoinbase, nSigOpsCost, lp);\n-        unsigned int nSize = entry.GetTxSize();\n-\n-        // Check that the transaction doesn't have an excessive number of\n-        // sigops, making it impossible to mine. Since the coinbase transaction\n-        // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n-        // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n-        // merely non-standard transaction.\n-        if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n-                strprintf(\"%d\", nSigOpsCost));\n-\n-        CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n-        if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nModifiedFees, mempoolRejectFee));\n-        }\n+    CTxMemPoolEntry entry(ptx, nFees, nAcceptTime, chainActive.Height(),\n+                          fSpendsCoinbase, nSigOpsCost, lp);\n+    unsigned int nSize = entry.GetTxSize();\n \n-        // No transactions are allowed below minRelayTxFee except from disconnected blocks\n-        if (!bypass_limits && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"min relay fee not met\", false, strprintf(\"%d < %d\", nModifiedFees, ::minRelayTxFee.GetFee(nSize)));\n-        }\n+    // Check that the transaction doesn't have an excessive number of\n+    // sigops, making it impossible to mine. Since the coinbase transaction\n+    // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n+    // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n+    // merely non-standard transaction.\n+    if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n+            strprintf(\"%d\", nSigOpsCost));\n \n-        if (nAbsurdFee && nFees > nAbsurdFee)\n-            return state.Invalid(false,\n-                REJECT_HIGHFEE, \"absurdly-high-fee\",\n-                strprintf(\"%d > %d\", nFees, nAbsurdFee));\n-\n-        // Calculate in-mempool ancestors, up to a limit.\n-        CTxMemPool::setEntries setAncestors;\n-        size_t nLimitAncestors = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        size_t nLimitAncestorSize = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n-        size_t nLimitDescendants = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n-        std::string errString;\n-        if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", false, errString);\n-        }\n+    CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n+    if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n+        return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nModifiedFees, mempoolRejectFee));\n+    }\n \n-        // A transaction that spends outputs that would be replaced by it is invalid. Now\n-        // that we have the set of all ancestors we can detect this\n-        // pathological case by making sure setConflicts and setAncestors don't\n-        // intersect.\n-        for (CTxMemPool::txiter ancestorIt : setAncestors)\n-        {\n-            const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n-            if (setConflicts.count(hashAncestor))\n-            {\n-                return state.DoS(10, false,\n-                                 REJECT_INVALID, \"bad-txns-spends-conflicting-tx\", false,\n-                                 strprintf(\"%s spends conflicting transaction %s\",\n-                                           hash.ToString(),\n-                                           hashAncestor.ToString()));\n-            }\n-        }\n+    // No transactions are allowed below minRelayTxFee except from disconnected blocks\n+    if (!bypass_limits && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n+        return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"min relay fee not met\", false, strprintf(\"%d < %d\", nModifiedFees, ::minRelayTxFee.GetFee(nSize)));\n+    }\n \n-        // Check if it's economically rational to mine this transaction rather\n-        // than the ones it replaces.\n-        CAmount nConflictingFees = 0;\n-        size_t nConflictingSize = 0;\n-        uint64_t nConflictingCount = 0;\n-        CTxMemPool::setEntries allConflicting;\n-\n-        // If we don't hold the lock allConflicting might be incomplete; the\n-        // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n-        // mempool consistency for us.\n-        const bool fReplacementTransaction = setConflicts.size();\n-        if (fReplacementTransaction)\n-        {\n-            CFeeRate newFeeRate(nModifiedFees, nSize);\n-            std::set<uint256> setConflictsParents;\n-            const int maxDescendantsToVisit = 100;\n-            CTxMemPool::setEntries setIterConflicting;\n-            for (const uint256 &hashConflicting : setConflicts)\n-            {\n-                CTxMemPool::txiter mi = pool.mapTx.find(hashConflicting);\n-                if (mi == pool.mapTx.end())\n-                    continue;\n+    if (nAbsurdFee && nFees > nAbsurdFee)\n+        return state.Invalid(false,\n+            REJECT_HIGHFEE, \"absurdly-high-fee\",\n+            strprintf(\"%d > %d\", nFees, nAbsurdFee));\n \n-                // Save these to avoid repeated lookups\n-                setIterConflicting.insert(mi);\n+    // Calculate in-mempool ancestors, up to a limit.\n+    CTxMemPool::setEntries setAncestors;\n+    size_t nLimitAncestors = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+    size_t nLimitAncestorSize = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n+    size_t nLimitDescendants = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+    size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n+    std::string errString;\n+    if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", false, errString);\n+    }\n \n-                // Don't allow the replacement to reduce the feerate of the\n-                // mempool.\n-                //\n-                // We usually don't want to accept replacements with lower\n-                // feerates than what they replaced as that would lower the\n-                // feerate of the next block. Requiring that the feerate always\n-                // be increased is also an easy-to-reason about way to prevent\n-                // DoS attacks via replacements.\n-                //\n-                // The mining code doesn't (currently) take children into\n-                // account (CPFP) so we only consider the feerates of\n-                // transactions being directly replaced, not their indirect\n-                // descendants. While that does mean high feerate children are\n-                // ignored when deciding whether or not to replace, we do\n-                // require the replacement to pay more overall fees too,\n-                // mitigating most cases.\n-                CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n-                if (newFeeRate <= oldFeeRate)\n-                {\n-                    return state.DoS(0, false,\n-                            REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n-                            strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n-                                  hash.ToString(),\n-                                  newFeeRate.ToString(),\n-                                  oldFeeRate.ToString()));\n-                }\n+    // A transaction that spends outputs that would be replaced by it is invalid. Now\n+    // that we have the set of all ancestors we can detect this\n+    // pathological case by making sure setConflicts and setAncestors don't\n+    // intersect.\n+    for (CTxMemPool::txiter ancestorIt : setAncestors)\n+    {\n+        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n+        if (setConflicts.count(hashAncestor))\n+        {\n+            return state.DoS(10, false,\n+                             REJECT_INVALID, \"bad-txns-spends-conflicting-tx\", false,\n+                             strprintf(\"%s spends conflicting transaction %s\",\n+                                       hash.ToString(),\n+                                       hashAncestor.ToString()));\n+        }\n+    }\n \n-                for (const CTxIn &txin : mi->GetTx().vin)\n-                {\n-                    setConflictsParents.insert(txin.prevout.hash);\n-                }\n+    // Check if it's economically rational to mine this transaction rather\n+    // than the ones it replaces.\n+    CAmount nConflictingFees = 0;\n+    size_t nConflictingSize = 0;\n+    uint64_t nConflictingCount = 0;\n+    CTxMemPool::setEntries allConflicting;\n \n-                nConflictingCount += mi->GetCountWithDescendants();\n-            }\n-            // This potentially overestimates the number of actual descendants\n-            // but we just want to be conservative to avoid doing too much\n-            // work.\n-            if (nConflictingCount <= maxDescendantsToVisit) {\n-                // If not too many to replace, then calculate the set of\n-                // transactions that would have to be evicted\n-                for (CTxMemPool::txiter it : setIterConflicting) {\n-                    pool.CalculateDescendants(it, allConflicting);\n-                }\n-                for (CTxMemPool::txiter it : allConflicting) {\n-                    nConflictingFees += it->GetModifiedFee();\n-                    nConflictingSize += it->GetTxSize();\n-                }\n-            } else {\n+    // If we don't hold the lock allConflicting might be incomplete; the\n+    // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n+    // mempool consistency for us.\n+    const bool fReplacementTransaction = setConflicts.size();\n+    if (fReplacementTransaction)\n+    {\n+        CFeeRate newFeeRate(nModifiedFees, nSize);\n+        std::set<uint256> setConflictsParents;\n+        const int maxDescendantsToVisit = 100;\n+        CTxMemPool::setEntries setIterConflicting;\n+        for (const uint256 &hashConflicting : setConflicts)\n+        {\n+            CTxMemPool::txiter mi = pool.mapTx.find(hashConflicting);\n+            if (mi == pool.mapTx.end())\n+                continue;\n+\n+            // Save these to avoid repeated lookups\n+            setIterConflicting.insert(mi);\n+\n+            // Don't allow the replacement to reduce the feerate of the\n+            // mempool.\n+            //\n+            // We usually don't want to accept replacements with lower\n+            // feerates than what they replaced as that would lower the\n+            // feerate of the next block. Requiring that the feerate always\n+            // be increased is also an easy-to-reason about way to prevent\n+            // DoS attacks via replacements.\n+            //\n+            // The mining code doesn't (currently) take children into\n+            // account (CPFP) so we only consider the feerates of\n+            // transactions being directly replaced, not their indirect\n+            // descendants. While that does mean high feerate children are\n+            // ignored when deciding whether or not to replace, we do\n+            // require the replacement to pay more overall fees too,\n+            // mitigating most cases.\n+            CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n+            if (newFeeRate <= oldFeeRate)\n+            {\n                 return state.DoS(0, false,\n-                        REJECT_NONSTANDARD, \"too many potential replacements\", false,\n-                        strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                            hash.ToString(),\n-                            nConflictingCount,\n-                            maxDescendantsToVisit));\n+                        REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                        strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n+                              hash.ToString(),\n+                              newFeeRate.ToString(),\n+                              oldFeeRate.ToString()));\n             }\n \n-            for (unsigned int j = 0; j < tx.vin.size(); j++)\n+            for (const CTxIn &txin : mi->GetTx().vin)\n             {\n-                // We don't want to accept replacements that require low\n-                // feerate junk to be mined first. Ideally we'd keep track of\n-                // the ancestor feerates and make the decision based on that,\n-                // but for now requiring all new inputs to be confirmed works.\n-                if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n-                {\n-                    // Rather than check the UTXO set - potentially expensive -\n-                    // it's cheaper to just check if the new input refers to a\n-                    // tx that's in the mempool.\n-                    if (pool.mapTx.find(tx.vin[j].prevout.hash) != pool.mapTx.end())\n-                        return state.DoS(0, false,\n-                                         REJECT_NONSTANDARD, \"replacement-adds-unconfirmed\", false,\n-                                         strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n-                                                  hash.ToString(), j));\n-                }\n+                setConflictsParents.insert(txin.prevout.hash);\n             }\n \n-            // The replacement must pay greater fees than the transactions it\n-            // replaces - if we did the bandwidth used by those conflicting\n-            // transactions would not be paid for.\n-            if (nModifiedFees < nConflictingFees)\n-            {\n-                return state.DoS(0, false,\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n-                                 strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n-                                          hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));\n+            nConflictingCount += mi->GetCountWithDescendants();\n+        }\n+        // This potentially overestimates the number of actual descendants\n+        // but we just want to be conservative to avoid doing too much\n+        // work.\n+        if (nConflictingCount <= maxDescendantsToVisit) {\n+            // If not too many to replace, then calculate the set of\n+            // transactions that would have to be evicted\n+            for (CTxMemPool::txiter it : setIterConflicting) {\n+                pool.CalculateDescendants(it, allConflicting);\n+            }\n+            for (CTxMemPool::txiter it : allConflicting) {\n+                nConflictingFees += it->GetModifiedFee();\n+                nConflictingSize += it->GetTxSize();\n             }\n+        } else {\n+            return state.DoS(0, false,\n+                    REJECT_NONSTANDARD, \"too many potential replacements\", false,\n+                    strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                        hash.ToString(),\n+                        nConflictingCount,\n+                        maxDescendantsToVisit));\n+        }\n \n-            // Finally in addition to paying more fees than the conflicts the\n-            // new transaction must pay for its own bandwidth.\n-            CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n-            if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n+        for (unsigned int j = 0; j < tx.vin.size(); j++)\n+        {\n+            // We don't want to accept replacements that require low\n+            // feerate junk to be mined first. Ideally we'd keep track of\n+            // the ancestor feerates and make the decision based on that,\n+            // but for now requiring all new inputs to be confirmed works.\n+            if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n             {\n-                return state.DoS(0, false,\n-                        REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n-                        strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n-                              hash.ToString(),\n-                              FormatMoney(nDeltaFees),\n-                              FormatMoney(::incrementalRelayFee.GetFee(nSize))));\n+                // Rather than check the UTXO set - potentially expensive -\n+                // it's cheaper to just check if the new input refers to a\n+                // tx that's in the mempool.\n+                if (pool.mapTx.find(tx.vin[j].prevout.hash) != pool.mapTx.end())\n+                    return state.DoS(0, false,\n+                                     REJECT_NONSTANDARD, \"replacement-adds-unconfirmed\", false,\n+                                     strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n+                                              hash.ToString(), j));\n             }\n         }\n \n-        unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n-        if (!chainparams.RequireStandard()) {\n-            scriptVerifyFlags = gArgs.GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n+        // The replacement must pay greater fees than the transactions it\n+        // replaces - if we did the bandwidth used by those conflicting\n+        // transactions would not be paid for.\n+        if (nModifiedFees < nConflictingFees)\n+        {\n+            return state.DoS(0, false,\n+                             REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                             strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n+                                      hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));\n         }\n \n-        // Check against previous transactions\n-        // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        PrecomputedTransactionData txdata(tx);\n-        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, false, txdata)) {\n-            // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n-            // need to turn both off, and compare against just turning off CLEANSTACK\n-            // to see if the failure is specifically due to witness validation.\n-            CValidationState stateDummy; // Want reported failures to be from first CheckInputs\n-            if (!tx.HasWitness() && CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, false, txdata) &&\n-                !CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, false, txdata)) {\n-                // Only the witness is missing, so the transaction itself may be fine.\n-                state.SetCorruptionPossible();\n-            }\n-            return false; // state filled in by CheckInputs\n+        // Finally in addition to paying more fees than the conflicts the\n+        // new transaction must pay for its own bandwidth.\n+        CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n+        if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n+        {\n+            return state.DoS(0, false,\n+                    REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                    strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n+                          hash.ToString(),\n+                          FormatMoney(nDeltaFees),\n+                          FormatMoney(::incrementalRelayFee.GetFee(nSize))));\n         }\n+    }\n \n-        // Check again against the current block tip's script verification\n-        // flags to cache our script execution flags. This is, of course,\n-        // useless if the next block has different script flags from the\n-        // previous one, but because the cache tracks script flags for us it\n-        // will auto-invalidate and we'll just have a few blocks of extra\n-        // misses on soft-fork activation.\n-        //\n-        // This is also useful in case of bugs in the standard flags that cause\n-        // transactions to pass as valid when they're actually invalid. For\n-        // instance the STRICTENC flag was incorrectly allowing certain\n-        // CHECKSIG NOT scripts to pass, even though they were invalid.\n-        //\n-        // There is a similar check in CreateNewBlock() to prevent creating\n-        // invalid blocks (using TestBlockValidity), however allowing such\n-        // transactions into the mempool can be exploited as a DoS attack.\n-        unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(chainActive.Tip(), Params().GetConsensus());\n-        if (!CheckInputsFromMempoolAndCache(tx, state, view, pool, currentBlockScriptVerifyFlags, true, txdata)) {\n-            // If we're using promiscuousmempoolflags, we may hit this normally\n-            // Check if current block has some flags that scriptVerifyFlags\n-            // does not before printing an ominous warning\n-            if (!(~scriptVerifyFlags & currentBlockScriptVerifyFlags)) {\n-                return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against latest-block but not STANDARD flags %s, %s\",\n+    unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n+    if (!chainparams.RequireStandard()) {\n+        scriptVerifyFlags = gArgs.GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n+    }\n+\n+    // Check against previous transactions\n+    // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n+    PrecomputedTransactionData txdata(tx);\n+    if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, false, txdata)) {\n+        // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n+        // need to turn both off, and compare against just turning off CLEANSTACK\n+        // to see if the failure is specifically due to witness validation.\n+        CValidationState stateDummy; // Want reported failures to be from first CheckInputs\n+        if (!tx.HasWitness() && CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, false, txdata) &&\n+            !CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, false, txdata)) {\n+            // Only the witness is missing, so the transaction itself may be fine.\n+            state.SetCorruptionPossible();\n+        }\n+        return false; // state filled in by CheckInputs\n+    }\n+\n+    // Check again against the current block tip's script verification\n+    // flags to cache our script execution flags. This is, of course,\n+    // useless if the next block has different script flags from the\n+    // previous one, but because the cache tracks script flags for us it\n+    // will auto-invalidate and we'll just have a few blocks of extra\n+    // misses on soft-fork activation.\n+    //\n+    // This is also useful in case of bugs in the standard flags that cause\n+    // transactions to pass as valid when they're actually invalid. For\n+    // instance the STRICTENC flag was incorrectly allowing certain\n+    // CHECKSIG NOT scripts to pass, even though they were invalid.\n+    //\n+    // There is a similar check in CreateNewBlock() to prevent creating\n+    // invalid blocks (using TestBlockValidity), however allowing such\n+    // transactions into the mempool can be exploited as a DoS attack.\n+    unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(chainActive.Tip(), Params().GetConsensus());\n+    if (!CheckInputsFromMempoolAndCache(tx, state, view, pool, currentBlockScriptVerifyFlags, true, txdata)) {\n+        // If we're using promiscuousmempoolflags, we may hit this normally\n+        // Check if current block has some flags that scriptVerifyFlags\n+        // does not before printing an ominous warning\n+        if (!(~scriptVerifyFlags & currentBlockScriptVerifyFlags)) {\n+            return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against latest-block but not STANDARD flags %s, %s\",\n+                __func__, hash.ToString(), FormatStateMessage(state));\n+        } else {\n+            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true, false, txdata)) {\n+                return error(\"%s: ConnectInputs failed against MANDATORY but not STANDARD flags due to promiscuous mempool %s, %s\",\n                     __func__, hash.ToString(), FormatStateMessage(state));\n             } else {\n-                if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true, false, txdata)) {\n-                    return error(\"%s: ConnectInputs failed against MANDATORY but not STANDARD flags due to promiscuous mempool %s, %s\",\n-                        __func__, hash.ToString(), FormatStateMessage(state));\n-                } else {\n-                    LogPrintf(\"Warning: -promiscuousmempool flags set to not include currently enforced soft forks, this may break mining or otherwise cause instability!\\n\");\n-                }\n+                LogPrintf(\"Warning: -promiscuousmempool flags set to not include currently enforced soft forks, this may break mining or otherwise cause instability!\\n\");\n             }\n         }\n+    }\n \n-        if (test_accept) {\n-            // Tx was accepted, but not added\n-            return true;\n-        }\n+    if (test_accept) {\n+        // Tx was accepted, but not added\n+        return true;\n+    }\n \n-        // Remove conflicting transactions from the mempool\n-        for (const CTxMemPool::txiter it : allConflicting)\n-        {\n-            LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n-                    it->GetTx().GetHash().ToString(),\n-                    hash.ToString(),\n-                    FormatMoney(nModifiedFees - nConflictingFees),\n-                    (int)nSize - (int)nConflictingSize);\n-            if (plTxnReplaced)\n-                plTxnReplaced->push_back(it->GetSharedTx());\n-        }\n-        pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n-\n-        // This transaction should only count for fee estimation if:\n-        // - it isn't a BIP 125 replacement transaction (may not be widely supported)\n-        // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n-        // - the node is not behind\n-        // - the transaction is not dependent on any other transactions in the mempool\n-        bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n-\n-        // Store transaction in memory\n-        pool.addUnchecked(hash, entry, setAncestors, validForFeeEstimation);\n-\n-        // trim mempool and check if tx was trimmed\n-        if (!bypass_limits) {\n-            LimitMempoolSize(pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n-            if (!pool.exists(hash))\n-                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n-        }\n+    // Remove conflicting transactions from the mempool\n+    for (const CTxMemPool::txiter it : allConflicting)\n+    {\n+        LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n+                it->GetTx().GetHash().ToString(),\n+                hash.ToString(),\n+                FormatMoney(nModifiedFees - nConflictingFees),\n+                (int)nSize - (int)nConflictingSize);\n+        if (plTxnReplaced)\n+            plTxnReplaced->push_back(it->GetSharedTx());\n+    }\n+    pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n+\n+    // This transaction should only count for fee estimation if:\n+    // - it isn't a BIP 125 replacement transaction (may not be widely supported)\n+    // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n+    // - the node is not behind\n+    // - the transaction is not dependent on any other transactions in the mempool\n+    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n+\n+    // Store transaction in memory\n+    pool.addUnchecked(hash, entry, setAncestors, validForFeeEstimation);\n+\n+    // trim mempool and check if tx was trimmed\n+    if (!bypass_limits) {\n+        LimitMempoolSize(pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+        if (!pool.exists(hash))\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n     }\n \n     GetMainSignals().TransactionAddedToMempool(ptx);"
      }
    ]
  },
  {
    "sha": "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2I5MGRmNzVjNGQzN2MyNjFjOGVjZmVkNTM5MGJlYzI0YTQ0YjZi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-04-05T17:28:40Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-02T18:14:59Z"
      },
      "message": "Add txn_replaced to Added callback, remove lReplaced ATMP arg",
      "tree": {
        "sha": "c44991265515b53330bf9b340c41f5ad5e729d86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c44991265515b53330bf9b340c41f5ad5e729d86"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b90df75c4d37c261c8ecfed5390bec24a44b6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53b90df75c4d37c261c8ecfed5390bec24a44b6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b90df75c4d37c261c8ecfed5390bec24a44b6b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15205068e62e89a7c762730f2198b5c05566166b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15205068e62e89a7c762730f2198b5c05566166b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15205068e62e89a7c762730f2198b5c05566166b"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 66,
      "deletions": 48
    },
    "files": [
      {
        "sha": "92f87239d64dfa48562dc18591615d64f15bc894",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -212,6 +212,7 @@ void Shutdown()\n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n     if (peerLogic) UnregisterValidationInterface(peerLogic.get());\n+    if (peerLogic) UnregisterMempoolInterface(peerLogic.get());\n     if (g_connman) g_connman->Stop();\n     peerLogic.reset();\n     g_connman.reset();\n@@ -1305,6 +1306,7 @@ bool AppInitMain()\n \n     peerLogic.reset(new PeerLogicValidation(&connman, scheduler));\n     RegisterValidationInterface(peerLogic.get());\n+    RegisterMempoolInterface(peerLogic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;"
      },
      {
        "sha": "0d35e54d29e29b4e9c10f37bf3b28ffb99edfce3",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -983,6 +983,15 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n         mapBlockSource.erase(it);\n }\n \n+\n+void PeerLogicValidation::TransactionAddedToMempool(const CTransactionRef& ptx, const std::vector<CTransactionRef>& txn_replaced) {\n+    LOCK(g_cs_orphans);\n+\n+    for (const CTransactionRef& tx : txn_replaced) {\n+        AddToCompactExtraTransactions(tx);\n+    }\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Messages\n@@ -2177,10 +2186,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->setAskFor.erase(inv.hash);\n         mapAlreadyAskedFor.erase(inv.hash);\n \n-        std::list<CTransactionRef> lRemovedTxn;\n-\n         if (!AlreadyHave(inv) &&\n-            AcceptToMemoryPool(mempool, state, ptx, &fMissingInputs, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+            AcceptToMemoryPool(mempool, state, ptx, &fMissingInputs, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             mempool.check(pcoinsTip.get());\n             RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n@@ -2218,7 +2225,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n-                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, &fMissingInputs2, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, &fMissingInputs2, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n                         LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx, connman);\n                         for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n@@ -2318,9 +2325,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n         }\n \n-        for (const CTransactionRef& removedTx : lRemovedTxn)\n-            AddToCompactExtraTransactions(removedTx);\n-\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))\n         {"
      },
      {
        "sha": "04e8fcda2ed75535c95ac2275adc7715f921ae33",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -35,7 +35,7 @@ static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;\n /** Minimum time an outbound-peer-eviction candidate must be connected for, in order to evict, in seconds */\n static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n \n-class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n+class PeerLogicValidation final : public CValidationInterface, public MempoolInterface, public NetEventsInterface {\n private:\n     CConnman* const connman;\n \n@@ -58,6 +58,10 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n      * Overridden from CValidationInterface.\n      */\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n+    /**\n+     * Overridden from MempoolInterface.\n+     */\n+    void TransactionAddedToMempool(const CTransactionRef& ptx, const std::vector<CTransactionRef>& txn_replaced) override;\n \n     /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n     void InitializeNode(CNode* pnode) override;"
      },
      {
        "sha": "3438019a08a78ca9eac43eb2b0433a2247f58cb3",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -1136,7 +1136,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         CValidationState state;\n         bool fMissingInputs;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n+                                false /* bypass_limits */, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, FormatStateMessage(state));\n             } else {\n@@ -1241,7 +1241,7 @@ UniValue testmempoolaccept(const JSONRPCRequest& request)\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx), &missing_inputs,\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n     }\n     result_0.pushKV(\"allowed\", test_accept_res);\n     if (!test_accept_res) {"
      },
      {
        "sha": "69c4976deb51a303287416f7b15d3d2a4b97868b",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -42,7 +42,6 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n             false,\n             AcceptToMemoryPool(mempool, state, MakeTransactionRef(coinbaseTx),\n                 nullptr /* pfMissingInputs */,\n-                nullptr /* plTxnReplaced */,\n                 true /* bypass_limits */,\n                 0 /* nAbsurdFee */));\n "
      },
      {
        "sha": "e5a8e7f5f9e4f96b904e10f88a332bc4bd194ecd",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -30,7 +30,7 @@ ToMemPool(CMutableTransaction& tx)\n \n     CValidationState state;\n     return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), nullptr /* pfMissingInputs */,\n-                              nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */);\n+                              true /* bypass_limits */, 0 /* nAbsurdFee */);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "4cceb0e86ed69beffb70d14f561b808335dc1994",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -418,8 +418,10 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n \n void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        // BLOCK and CONFLICT callbacks are generated in removeForBlock\n+    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT &&\n+        reason != MemPoolRemovalReason::REPLACED) {\n+        // BLOCK and CONFLICT callbacks are generated in removeForBlock; REPLACED\n+        // txn are included in TransactionAddedToMempool from AcceptToMemoryPool\n         GetMainSignals().MempoolEntryRemoved(it->GetSharedTx(), reason);\n     }\n     const uint256 hash = it->GetTx().GetHash();"
      },
      {
        "sha": "cd29fbbfc03406f23b8be5aff3f2e3a468a1a6ad",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -491,7 +491,7 @@ void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool f\n         CValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n             !AcceptToMemoryPool(mempool, stateDummy, *it, nullptr /* pfMissingInputs */,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+                                true /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n@@ -551,8 +551,8 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n }\n \n static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n-                              bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept)\n+                              bool* pfMissingInputs, int64_t nAcceptTime, bool bypass_limits,\n+                              const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -948,15 +948,16 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     }\n \n     // Remove conflicting transactions from the mempool\n+    auto txn_replaced = std::make_shared<std::vector<CTransactionRef>>();\n+    txn_replaced->reserve(allConflicting.size());\n     for (const CTxMemPool::txiter it : allConflicting)\n     {\n         LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n                 it->GetTx().GetHash().ToString(),\n                 hash.ToString(),\n                 FormatMoney(nModifiedFees - nConflictingFees),\n                 (int)nSize - (int)nConflictingSize);\n-        if (plTxnReplaced)\n-            plTxnReplaced->push_back(it->GetSharedTx());\n+        txn_replaced->push_back(it->GetSharedTx());\n     }\n     pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n \n@@ -977,18 +978,17 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n     }\n \n-    GetMainSignals().TransactionAddedToMempool(ptx);\n+    GetMainSignals().TransactionAddedToMempool(ptx, txn_replaced);\n \n     return true;\n }\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n-                        bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool* pfMissingInputs, int64_t nAcceptTime, bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept);\n+    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept);\n     if (!res) {\n         for (const COutPoint& hashTx : coins_to_uncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -1000,11 +1000,10 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n }\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n-                        bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool* pfMissingInputs, bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), bypass_limits, nAbsurdFee, test_accept);\n }\n \n /**\n@@ -4587,8 +4586,7 @@ bool LoadMempool(void)\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n                 AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, nullptr /* pfMissingInputs */, nTime,\n-                                           nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */,\n-                                           false /* test_accept */);\n+                                           false /* bypass_limits */, 0 /* nAbsurdFee */, false /* test_accept */);\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "5b0e10cfae5a21e75b4bd56d5f9060d9f91365d9",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -308,8 +308,7 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n /** (try to) add transaction to memory pool\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n-                        bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false);\n+                        bool* pfMissingInputs, bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);"
      },
      {
        "sha": "f29771f006659601dc9244c060f298ead5dd3b90",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -21,7 +21,7 @@\n \n struct MainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const CTransactionRef &, const std::vector<CTransactionRef> &)> TransactionAddedToMempool;\n     boost::signals2::signal<void (const std::vector<CTransactionRef> &, const std::vector<CTransactionRef> &)> MempoolUpdatedForBlockConnect;\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n@@ -79,7 +79,7 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n }\n \n void RegisterMempoolInterface(MempoolInterface* listener) {\n-    g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&MempoolInterface::TransactionAddedToMempool, listener, _1));\n+    g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&MempoolInterface::TransactionAddedToMempool, listener, _1, _2));\n     g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&MempoolInterface::TransactionRemovedFromMempool, listener, _1, _2));\n     g_signals.m_internals->MempoolUpdatedForBlockConnect.connect(boost::bind(&MempoolInterface::MempoolUpdatedForBlockConnect, listener, _1, _2));\n }\n@@ -96,7 +96,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n }\n \n void UnregisterMempoolInterface(MempoolInterface* listener) {\n-    g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&MempoolInterface::TransactionAddedToMempool, listener, _1));\n+    g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&MempoolInterface::TransactionAddedToMempool, listener, _1, _2));\n     g_signals.m_internals->TransactionRemovedFromMempool.disconnect(boost::bind(&MempoolInterface::TransactionRemovedFromMempool, listener, _1, _2));\n     g_signals.m_internals->MempoolUpdatedForBlockConnect.disconnect(boost::bind(&MempoolInterface::MempoolUpdatedForBlockConnect, listener, _1, _2));\n }\n@@ -156,9 +156,9 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     });\n }\n \n-void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-        m_internals->TransactionAddedToMempool(ptx);\n+void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx, const std::shared_ptr<std::vector<CTransactionRef>>& txn_replaced) {\n+    m_internals->m_schedulerClient.AddToProcessQueue([ptx, txn_replaced, this] {\n+        m_internals->TransactionAddedToMempool(ptx, *txn_replaced);\n     });\n }\n "
      },
      {
        "sha": "6f0ee05a1878ba3f04c14cd3116472ab4baa6d4f",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -81,14 +81,14 @@ class MempoolInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn, const std::vector<CTransactionRef>& txn_replaced) {}\n     /**\n      * Notifies listeners of a transaction leaving mempool.\n      *\n      * This only fires for transactions which leave mempool because of expiry,\n-     * size limiting, reorg (changes in lock times/coinbase maturity), or\n-     * replacement. This does not include any transactions which are included\n-     * in MempoolUpdatedForBlockConnect.\n+     * size limiting, or reorg (changes in lock times/coinbase maturity). This\n+     * does not include any transactions which are included in\n+     * MempoolUpdatedForBlockConnect or TransactionAddedToMempool(txn_replaced)\n      *\n      * reason == REORG is not ordered with BlockConnected/BlockDisconnected!\n      *\n@@ -230,7 +230,7 @@ class CMainSignals {\n     size_t CallbacksPending();\n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n-    void TransactionAddedToMempool(const CTransactionRef &);\n+    void TransactionAddedToMempool(const CTransactionRef &, const std::shared_ptr<std::vector<CTransactionRef>>& txn_replaced);\n     void MempoolUpdatedForBlockConnect(std::vector<CTransactionRef>&& tx_removed_in_block, std::vector<CTransactionRef>&& tx_removed_conflicted);\n     void MempoolEntryRemoved(CTransactionRef tx, MemPoolRemovalReason reason);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex);"
      },
      {
        "sha": "0b10479763eb087f35b6ccf822aa7c0ced117fda",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -1228,8 +1228,11 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n     }\n }\n \n-void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n+void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx, const std::vector<CTransactionRef>& txn_replaced) {\n     LOCK2(cs_main, cs_wallet);\n+\n+    for (const CTransactionRef& txit : txn_replaced) TransactionRemovedFromMempool(txit, MemPoolRemovalReason::REPLACED);\n+\n     SyncTransaction(ptx);\n \n     auto it = mapWallet.find(ptx->GetHash());\n@@ -4304,7 +4307,7 @@ bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n     // because we think that this newly generated transaction's change is\n     // unavailable as we're not yet aware that it is in the mempool.\n     bool ret = ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n+                                false /* bypass_limits */, nAbsurdFee);\n     fInMempool |= ret;\n     return ret;\n }"
      },
      {
        "sha": "3712f03ee5166076a654932b6d015484602e0128",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -909,7 +909,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface, publi\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n-    void TransactionAddedToMempool(const CTransactionRef& tx) override;\n+    void TransactionAddedToMempool(const CTransactionRef& tx, const std::vector<CTransactionRef>& txn_replaced) override;\n     void MempoolUpdatedForBlockConnect(const std::vector<CTransactionRef>& tx_removed_in_block, const std::vector<CTransactionRef>& tx_removed_conflicted) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;"
      },
      {
        "sha": "ba901a2b21c2c07193fd24992a7db60b361dc8c1",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -144,7 +144,7 @@ void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, co\n     }\n }\n \n-void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef& ptx)\n+void CZMQNotificationInterface::NotifyTransaction(const CTransactionRef& ptx)\n {\n     // Used by BlockConnected and BlockDisconnected as well, because they're\n     // all the same external callback.\n@@ -165,18 +165,22 @@ void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef&\n     }\n }\n \n+void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef& ptx, const std::vector<CTransactionRef>& txn_replaced) {\n+    NotifyTransaction(ptx);\n+}\n+\n void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {\n         // Do a normal notify for each transaction added in the block\n-        TransactionAddedToMempool(ptx);\n+        NotifyTransaction(ptx);\n     }\n }\n \n void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {\n         // Do a normal notify for each transaction removed in block disconnection\n-        TransactionAddedToMempool(ptx);\n+        NotifyTransaction(ptx);\n     }\n }"
      },
      {
        "sha": "c4be3e1e63742a2907a4869ef8c13492efa6d1b1",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b90df75c4d37c261c8ecfed5390bec24a44b6b/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=53b90df75c4d37c261c8ecfed5390bec24a44b6b",
        "patch": "@@ -25,14 +25,17 @@ class CZMQNotificationInterface final : public CValidationInterface, public Memp\n     void Shutdown();\n \n     // CValidationInterface\n-    void TransactionAddedToMempool(const CTransactionRef& tx) override;\n+    void TransactionAddedToMempool(const CTransactionRef& tx, const std::vector<CTransactionRef>& txn_replaced) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n \n private:\n     CZMQNotificationInterface();\n \n+    // Does the actual sending of the tx through the ZMQ interface\n+    void NotifyTransaction(const CTransactionRef& tx);\n+\n     void *pcontext;\n     std::list<CZMQAbstractNotifier*> notifiers;\n };"
      }
    ]
  }
]