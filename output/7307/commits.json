[
  {
    "sha": "dd2dc400eed7c4e8521d1264d652ee32070d2c47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDJkYzQwMGVlZDdjNGU4NTIxZDEyNjRkNjUyZWUzMjA3MGQyYzQ3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-01-07T07:33:49Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-01-20T14:03:25Z"
      },
      "message": "[RPC, Wallet] Move RPC dispatch table registration to wallet/ code\n\nAllow extending the rpc dispatch table by appending commands when server is not running.",
      "tree": {
        "sha": "89f56a6a0f1b6b38054a25bdff3678f3ccdc0fc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89f56a6a0f1b6b38054a25bdff3678f3ccdc0fc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd2dc400eed7c4e8521d1264d652ee32070d2c47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWn5OvAAoJECnUvLZBb1PspvsQALbMTQ27wCl3Liuip9tuyUzU\nMiix1LUuWRlwBSiZuywlmzG3RzQk3Spk82ve2BUDbiQuK2H/gV9KpsZ7cGRgAYkm\nsd3qw34NRwI8KiD4nwaLIVfWfomhgERMof1j3wo81DBOS4ttaZhXWhTBqksW95nd\n67xlTu1OTr2Oh+3JVkPuSbS4dxaISd5Ivkljvy9YMXgup0skgsIwg1K+jaZCGqYJ\nk2r7p6Gl6FzryASVVTFPZy6fYQOYEpZXXSncBKIoPmTlOWzpbj4vCSn1qPlM3NkN\nhcwC0pLeTpcPAGWpWOoKZ8jo9Fj+AbqJsjsi8eNJHOV9Hs94oTOUI4RgxdXibX2V\n+KtRgRe5VbyMAAZIsfpDdsKAqjTOeoNApGbTQcN19KqIs9CV/wT3/oa+cFPkHk8l\nK8IzM65NDtNKpT8lbSm9zu8IMC0GPOZtZJwLU9xKonH1lGzc/4tU1NHwDnmXXTZG\nM7gfK7H+e49NGev54S6hdIrjxw1cYq7UBp+C+LvHtatcyLC4cu2Khe5SpMTaRpKN\naaccCVirhTqfmo9jpdrsI6hLEDR1zDlLLWLoWg6OVIx6mHBMquMaP8Nnae6Jo2xu\nXhNC8d4VlyTutP+wFBsmzaMo7qR5ha3hE2Qi7/+WwWYzkySGopcIpFr+m31pVkFt\ncCSZakNZjfh1aVy1wS6O\n=lvsS\n-----END PGP SIGNATURE-----",
        "payload": "tree 89f56a6a0f1b6b38054a25bdff3678f3ccdc0fc1\nparent e1060c56cca7eeab8e217eb7b416c16487fd175e\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1452152029 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1453298605 +0100\n\n[RPC, Wallet] Move RPC dispatch table registration to wallet/ code\n\nAllow extending the rpc dispatch table by appending commands when server is not running.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd2dc400eed7c4e8521d1264d652ee32070d2c47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd2dc400eed7c4e8521d1264d652ee32070d2c47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd2dc400eed7c4e8521d1264d652ee32070d2c47/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1060c56cca7eeab8e217eb7b416c16487fd175e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1060c56cca7eeab8e217eb7b416c16487fd175e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1060c56cca7eeab8e217eb7b416c16487fd175e"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 106,
      "deletions": 93
    },
    "files": [
      {
        "sha": "74ffc7e2c0c6fccd7563d3aa58e1a0f85803ca2d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=dd2dc400eed7c4e8521d1264d652ee32070d2c47",
        "patch": "@@ -164,6 +164,7 @@ BITCOIN_CORE_H = \\\n   version.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n+  wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/wallet_ismine.h \\\n   wallet/walletdb.h \\"
      },
      {
        "sha": "1314afb7c3deb7ee2845fd33b80350438569f91b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dd2dc400eed7c4e8521d1264d652ee32070d2c47",
        "patch": "@@ -926,6 +926,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n #ifdef ENABLE_WALLET\n     bool fDisableWallet = GetBoolArg(\"-disablewallet\", false);\n+    if (!fDisableWallet)\n+        walletRegisterRPCCommands();\n #endif\n \n     nConnectTimeout = GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);"
      },
      {
        "sha": "b638598f7694db7e8c0847be68e2a67e8b579acf",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 52,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=dd2dc400eed7c4e8521d1264d652ee32070d2c47",
        "patch": "@@ -309,9 +309,6 @@ static const CRPCCommand vRPCCommands[] =\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true  },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n-#ifdef ENABLE_WALLET\n-    { \"rawtransactions\",    \"fundrawtransaction\",     &fundrawtransaction,     false },\n-#endif\n \n     /* Utility functions */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n@@ -326,54 +323,6 @@ static const CRPCCommand vRPCCommands[] =\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },\n     { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true  },\n     { \"hidden\",             \"setmocktime\",            &setmocktime,            true  },\n-#ifdef ENABLE_WALLET\n-    { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, true},\n-#endif\n-\n-#ifdef ENABLE_WALLET\n-    /* Wallet */\n-    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true  },\n-    { \"wallet\",             \"backupwallet\",           &backupwallet,           true  },\n-    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true  },\n-    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true  },\n-    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true  },\n-    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true  },\n-    { \"wallet\",             \"getaccount\",             &getaccount,             true  },\n-    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true  },\n-    { \"wallet\",             \"getbalance\",             &getbalance,             false },\n-    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true  },\n-    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true  },\n-    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false },\n-    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false },\n-    { \"wallet\",             \"gettransaction\",         &gettransaction,         false },\n-    { \"wallet\",             \"abandontransaction\",     &abandontransaction,     false },\n-    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false },\n-    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false },\n-    { \"wallet\",             \"importprivkey\",          &importprivkey,          true  },\n-    { \"wallet\",             \"importwallet\",           &importwallet,           true  },\n-    { \"wallet\",             \"importaddress\",          &importaddress,          true  },\n-    { \"wallet\",             \"importpubkey\",           &importpubkey,           true  },\n-    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true  },\n-    { \"wallet\",             \"listaccounts\",           &listaccounts,           false },\n-    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false },\n-    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false },\n-    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false },\n-    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false },\n-    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false },\n-    { \"wallet\",             \"listtransactions\",       &listtransactions,       false },\n-    { \"wallet\",             \"listunspent\",            &listunspent,            false },\n-    { \"wallet\",             \"lockunspent\",            &lockunspent,            true  },\n-    { \"wallet\",             \"move\",                   &movecmd,                false },\n-    { \"wallet\",             \"sendfrom\",               &sendfrom,               false },\n-    { \"wallet\",             \"sendmany\",               &sendmany,               false },\n-    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false },\n-    { \"wallet\",             \"setaccount\",             &setaccount,             true  },\n-    { \"wallet\",             \"settxfee\",               &settxfee,               true  },\n-    { \"wallet\",             \"signmessage\",            &signmessage,            true  },\n-    { \"wallet\",             \"walletlock\",             &walletlock,             true  },\n-    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true  },\n-    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true  },\n-#endif // ENABLE_WALLET\n };\n \n CRPCTable::CRPCTable()\n@@ -396,6 +345,20 @@ const CRPCCommand *CRPCTable::operator[](const std::string &name) const\n     return (*it).second;\n }\n \n+bool CRPCTable::appendCommand(const std::string& name, const CRPCCommand* pcmd)\n+{\n+    if (IsRPCRunning())\n+        return false;\n+\n+    // don't allow overwriting for now\n+    map<string, const CRPCCommand*>::const_iterator it = mapCommands.find(name);\n+    if (it != mapCommands.end())\n+        return false;\n+\n+    mapCommands[name] = pcmd;\n+    return true;\n+}\n+\n bool StartRPC()\n {\n     LogPrint(\"rpc\", \"Starting RPC\\n\");\n@@ -573,4 +536,4 @@ void RPCRunLater(const std::string& name, boost::function<void(void)> func, int6\n     deadlineTimers.insert(std::make_pair(name, boost::shared_ptr<RPCTimerBase>(timerInterface->NewTimer(func, nSeconds*1000))));\n }\n \n-const CRPCTable tableRPC;\n+CRPCTable tableRPC;"
      },
      {
        "sha": "219d0422dc33bad74fb02ed2d333a6c2f8907868",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 9,
        "deletions": 41,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=dd2dc400eed7c4e8521d1264d652ee32070d2c47",
        "patch": "@@ -144,9 +144,17 @@ class CRPCTable\n      * @throws an exception (UniValue) when an error happens.\n      */\n     UniValue execute(const std::string &method, const UniValue &params) const;\n+\n+\n+    /**\n+     * Appends a CRPCCommand to the dispatch table.\n+     * Returns false if RPC server is already running (dump concurrency protection).\n+     * Commands cannot be overwritten (returns false).\n+     */\n+    bool appendCommand(const std::string& name, const CRPCCommand* pcmd);\n };\n \n-extern const CRPCTable tableRPC;\n+extern CRPCTable tableRPC;\n \n /**\n  * Utilities: convert hex-encoded Values\n@@ -178,13 +186,6 @@ extern UniValue setban(const UniValue& params, bool fHelp);\n extern UniValue listbanned(const UniValue& params, bool fHelp);\n extern UniValue clearbanned(const UniValue& params, bool fHelp);\n \n-extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n-extern UniValue importprivkey(const UniValue& params, bool fHelp);\n-extern UniValue importaddress(const UniValue& params, bool fHelp);\n-extern UniValue importpubkey(const UniValue& params, bool fHelp);\n-extern UniValue dumpwallet(const UniValue& params, bool fHelp);\n-extern UniValue importwallet(const UniValue& params, bool fHelp);\n-\n extern UniValue getgenerate(const UniValue& params, bool fHelp); // in rpcmining.cpp\n extern UniValue setgenerate(const UniValue& params, bool fHelp);\n extern UniValue generate(const UniValue& params, bool fHelp);\n@@ -198,45 +199,13 @@ extern UniValue estimatepriority(const UniValue& params, bool fHelp);\n extern UniValue estimatesmartfee(const UniValue& params, bool fHelp);\n extern UniValue estimatesmartpriority(const UniValue& params, bool fHelp);\n \n-extern UniValue getnewaddress(const UniValue& params, bool fHelp); // in rpcwallet.cpp\n-extern UniValue getaccountaddress(const UniValue& params, bool fHelp);\n-extern UniValue getrawchangeaddress(const UniValue& params, bool fHelp);\n-extern UniValue setaccount(const UniValue& params, bool fHelp);\n-extern UniValue getaccount(const UniValue& params, bool fHelp);\n-extern UniValue getaddressesbyaccount(const UniValue& params, bool fHelp);\n-extern UniValue sendtoaddress(const UniValue& params, bool fHelp);\n-extern UniValue signmessage(const UniValue& params, bool fHelp);\n extern UniValue verifymessage(const UniValue& params, bool fHelp);\n-extern UniValue getreceivedbyaddress(const UniValue& params, bool fHelp);\n-extern UniValue getreceivedbyaccount(const UniValue& params, bool fHelp);\n-extern UniValue getbalance(const UniValue& params, bool fHelp);\n-extern UniValue getunconfirmedbalance(const UniValue& params, bool fHelp);\n-extern UniValue movecmd(const UniValue& params, bool fHelp);\n-extern UniValue sendfrom(const UniValue& params, bool fHelp);\n-extern UniValue sendmany(const UniValue& params, bool fHelp);\n-extern UniValue addmultisigaddress(const UniValue& params, bool fHelp);\n extern UniValue createmultisig(const UniValue& params, bool fHelp);\n-extern UniValue listreceivedbyaddress(const UniValue& params, bool fHelp);\n-extern UniValue listreceivedbyaccount(const UniValue& params, bool fHelp);\n-extern UniValue listtransactions(const UniValue& params, bool fHelp);\n-extern UniValue listaddressgroupings(const UniValue& params, bool fHelp);\n-extern UniValue listaccounts(const UniValue& params, bool fHelp);\n-extern UniValue listsinceblock(const UniValue& params, bool fHelp);\n-extern UniValue gettransaction(const UniValue& params, bool fHelp);\n-extern UniValue abandontransaction(const UniValue& params, bool fHelp);\n-extern UniValue backupwallet(const UniValue& params, bool fHelp);\n-extern UniValue keypoolrefill(const UniValue& params, bool fHelp);\n-extern UniValue walletpassphrase(const UniValue& params, bool fHelp);\n-extern UniValue walletpassphrasechange(const UniValue& params, bool fHelp);\n-extern UniValue walletlock(const UniValue& params, bool fHelp);\n-extern UniValue encryptwallet(const UniValue& params, bool fHelp);\n extern UniValue validateaddress(const UniValue& params, bool fHelp);\n extern UniValue getinfo(const UniValue& params, bool fHelp);\n-extern UniValue getwalletinfo(const UniValue& params, bool fHelp);\n extern UniValue getblockchaininfo(const UniValue& params, bool fHelp);\n extern UniValue getnetworkinfo(const UniValue& params, bool fHelp);\n extern UniValue setmocktime(const UniValue& params, bool fHelp);\n-extern UniValue resendwallettransactions(const UniValue& params, bool fHelp);\n \n extern UniValue getrawtransaction(const UniValue& params, bool fHelp); // in rcprawtransaction.cpp\n extern UniValue listunspent(const UniValue& params, bool fHelp);\n@@ -245,7 +214,6 @@ extern UniValue listlockunspent(const UniValue& params, bool fHelp);\n extern UniValue createrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue decoderawtransaction(const UniValue& params, bool fHelp);\n extern UniValue decodescript(const UniValue& params, bool fHelp);\n-extern UniValue fundrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue signrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue sendrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue gettxoutproof(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "0416d0c9260e702b45e186a72d2db179eaa30edc",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=dd2dc400eed7c4e8521d1264d652ee32070d2c47",
        "patch": "@@ -54,6 +54,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     const CChainParams& chainparams = Params();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n+        walletRegisterRPCCommands();\n #endif\n         ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));"
      },
      {
        "sha": "7509afdb951451b62347789712f8b9bf9f9b4f1a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=dd2dc400eed7c4e8521d1264d652ee32070d2c47",
        "patch": "@@ -2475,3 +2475,70 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n     return result;\n }\n+\n+extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n+extern UniValue importprivkey(const UniValue& params, bool fHelp);\n+extern UniValue importaddress(const UniValue& params, bool fHelp);\n+extern UniValue importpubkey(const UniValue& params, bool fHelp);\n+extern UniValue dumpwallet(const UniValue& params, bool fHelp);\n+extern UniValue importwallet(const UniValue& params, bool fHelp);\n+\n+const CRPCCommand vWalletRPCCommands[] =\n+{ //  category              name                        actor (function)           okSafeMode\n+    //  --------------------- ------------------------    -----------------------    ----------\n+    { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       false },\n+    { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, true  },\n+    { \"wallet\",             \"abandontransaction\",       &abandontransaction,       false },\n+    { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       true  },\n+    { \"wallet\",             \"backupwallet\",             &backupwallet,             true  },\n+    { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true  },\n+    { \"wallet\",             \"dumpwallet\",               &dumpwallet,               true  },\n+    { \"wallet\",             \"encryptwallet\",            &encryptwallet,            true  },\n+    { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        true  },\n+    { \"wallet\",             \"getaccount\",               &getaccount,               true  },\n+    { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    true  },\n+    { \"wallet\",             \"getbalance\",               &getbalance,               false },\n+    { \"wallet\",             \"getnewaddress\",            &getnewaddress,            true  },\n+    { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      true  },\n+    { \"wallet\",             \"getreceivedbyaccount\",     &getreceivedbyaccount,     false },\n+    { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     false },\n+    { \"wallet\",             \"gettransaction\",           &gettransaction,           false },\n+    { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    false },\n+    { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            false },\n+    { \"wallet\",             \"importprivkey\",            &importprivkey,            true  },\n+    { \"wallet\",             \"importwallet\",             &importwallet,             true  },\n+    { \"wallet\",             \"importaddress\",            &importaddress,            true  },\n+    { \"wallet\",             \"importpubkey\",             &importpubkey,             true  },\n+    { \"wallet\",             \"keypoolrefill\",            &keypoolrefill,            true  },\n+    { \"wallet\",             \"listaccounts\",             &listaccounts,             false },\n+    { \"wallet\",             \"listaddressgroupings\",     &listaddressgroupings,     false },\n+    { \"wallet\",             \"listlockunspent\",          &listlockunspent,          false },\n+    { \"wallet\",             \"listreceivedbyaccount\",    &listreceivedbyaccount,    false },\n+    { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    false },\n+    { \"wallet\",             \"listsinceblock\",           &listsinceblock,           false },\n+    { \"wallet\",             \"listtransactions\",         &listtransactions,         false },\n+    { \"wallet\",             \"listunspent\",              &listunspent,              false },\n+    { \"wallet\",             \"lockunspent\",              &lockunspent,              true  },\n+    { \"wallet\",             \"move\",                     &movecmd,                  false },\n+    { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false },\n+    { \"wallet\",             \"sendmany\",                 &sendmany,                 false },\n+    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false },\n+    { \"wallet\",             \"setaccount\",               &setaccount,               true  },\n+    { \"wallet\",             \"settxfee\",                 &settxfee,                 true  },\n+    { \"wallet\",             \"signmessage\",              &signmessage,              true  },\n+    { \"wallet\",             \"walletlock\",               &walletlock,               true  },\n+    { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   true  },\n+    { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         true  },\n+};\n+\n+void walletRegisterRPCCommands()\n+{\n+    unsigned int vcidx;\n+    for (vcidx = 0; vcidx < ARRAYLEN(vWalletRPCCommands); vcidx++)\n+    {\n+        const CRPCCommand *pcmd;\n+\n+        pcmd = &vWalletRPCCommands[vcidx];\n+        tableRPC.appendCommand(pcmd->name, pcmd);\n+    }\n+}"
      },
      {
        "sha": "42e8021afa7f469ddbd37bf159af50c38600c600",
        "filename": "src/wallet/rpcwallet.h",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=dd2dc400eed7c4e8521d1264d652ee32070d2c47",
        "patch": "@@ -0,0 +1,10 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_RPCWALLET_H\n+#define BITCOIN_WALLET_RPCWALLET_H\n+\n+void walletRegisterRPCCommands();\n+\n+#endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "ffc7dcbd2c9c75b1d9dad03e64ca65eb937f6183",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd2dc400eed7c4e8521d1264d652ee32070d2c47/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=dd2dc400eed7c4e8521d1264d652ee32070d2c47",
        "patch": "@@ -15,6 +15,7 @@\n #include \"wallet/crypter.h\"\n #include \"wallet/wallet_ismine.h\"\n #include \"wallet/walletdb.h\"\n+#include \"wallet/rpcwallet.h\"\n \n #include <algorithm>\n #include <map>"
      }
    ]
  }
]