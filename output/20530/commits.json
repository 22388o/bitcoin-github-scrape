[
  {
    "sha": "c502a6dbfb854ca827a5a3925394f9e09d29b898",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTAyYTZkYmZiODU0Y2E4MjdhNWEzOTI1Mzk0ZjllMDlkMjliODk4",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-11-29T13:38:18Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-01T17:32:26Z"
      },
      "message": "lint: Use c++17 std in cppcheck linter",
      "tree": {
        "sha": "158864b8a0cb54fcd9eedc065408da2209061beb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/158864b8a0cb54fcd9eedc065408da2209061beb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c502a6dbfb854ca827a5a3925394f9e09d29b898",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/GfioVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNaHwP/1iCgidLUcUQyEnDp8+ylHt2SDEz\n8ZmekMq0TT2zrOeKkGmjogoURLZ7u3IUXX5gji4xoDIV2eBDZSRpHkGJ82JPfBBi\nSYDN2ErYZlMS5tpI0Ov0jAoXn2RHt3PBuy1TqxoPBlpmIubDUx1SjWDyxqLmbhti\nCN5c41i0p3NXY6u4Me2jFJ3R50s8SAoWpYXkBSHk0qal6CS7IZ8xVbWOLBTeEVk6\nkMCYF6GibwZ9Wpmqxwzv/dIkbV1mzh+VMnHWjUXElp0ZAZ5qcRuFpJMIY8JLnL7S\nIQ6yrqGDq7a+WfxU0BU0SwtNhorHH2v2ZGKw54GelTxgwVUbSFhzY5hvnle/pmQD\n9I1BgXyN3dSwguIHlFf/M81t1O/Rfrx5j4pthKvY/K5CCYwIotj8tLTVF8pfBpMK\np2z6rDMNljcVUtlVSu+FQoIHd3gt0X6dXktRYUIp8V42LjU+WQxMbpqBg+wvUpyS\nRVbK/OyMl/AXQP8HdDazqn2EG4hlcsw88Sl4mkxAESOdCZOXgJrlz0JQsvqnN/kH\nrWpKuj18hEuVilLNz8AdfeIxSFKyR90UlB2pgGEPPOf7qu19ZbXIOjzzp++JHZ9+\nSZqWuiThopAGXb/iPL9g9MPMOy09IcsTew+DLapHasQfoPMPIjLNKVbqjbiQ534I\n4DFCjtCEbmJUzyJs\n=6O+q\n-----END PGP SIGNATURE-----",
        "payload": "tree 158864b8a0cb54fcd9eedc065408da2209061beb\nparent f17e8ba3a17b6516a1b1fb7f45d506a339e99f90\nauthor Fabian Jahr <fjahr@protonmail.com> 1606657098 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1606843946 +0100\n\nlint: Use c++17 std in cppcheck linter\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c502a6dbfb854ca827a5a3925394f9e09d29b898",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c502a6dbfb854ca827a5a3925394f9e09d29b898",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c502a6dbfb854ca827a5a3925394f9e09d29b898/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f17e8ba3a17b6516a1b1fb7f45d506a339e99f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f17e8ba3a17b6516a1b1fb7f45d506a339e99f90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f17e8ba3a17b6516a1b1fb7f45d506a339e99f90"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b2c54b9f6dd3904749e2d0fec3aea2288aab6f99",
        "filename": "test/lint/extended-lint-cppcheck.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c502a6dbfb854ca827a5a3925394f9e09d29b898/test/lint/extended-lint-cppcheck.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c502a6dbfb854ca827a5a3925394f9e09d29b898/test/lint/extended-lint-cppcheck.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/extended-lint-cppcheck.sh?ref=c502a6dbfb854ca827a5a3925394f9e09d29b898",
        "patch": "@@ -66,7 +66,7 @@ function join_array {\n ENABLED_CHECKS_REGEXP=$(join_array \"|\" \"${ENABLED_CHECKS[@]}\")\n IGNORED_WARNINGS_REGEXP=$(join_array \"|\" \"${IGNORED_WARNINGS[@]}\")\n WARNINGS=$(git ls-files -- \"*.cpp\" \"*.h\" \":(exclude)src/leveldb/\" \":(exclude)src/crc32c/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" | \\\n-    xargs cppcheck --enable=all -j \"$(getconf _NPROCESSORS_ONLN)\" --language=c++ --std=c++11 --template=gcc -D__cplusplus -DCLIENT_VERSION_BUILD -DCLIENT_VERSION_IS_RELEASE -DCLIENT_VERSION_MAJOR -DCLIENT_VERSION_MINOR -DCOPYRIGHT_YEAR -DDEBUG -I src/ -q 2>&1 | sort -u | \\\n+    xargs cppcheck --enable=all -j \"$(getconf _NPROCESSORS_ONLN)\" --language=c++ --std=c++17 --template=gcc -D__cplusplus -DCLIENT_VERSION_BUILD -DCLIENT_VERSION_IS_RELEASE -DCLIENT_VERSION_MAJOR -DCLIENT_VERSION_MINOR -DCOPYRIGHT_YEAR -DDEBUG -I src/ -q 2>&1 | sort -u | \\\n     grep -E \"${ENABLED_CHECKS_REGEXP}\" | \\\n     grep -vE \"${IGNORED_WARNINGS_REGEXP}\")\n if [[ ${WARNINGS} != \"\" ]]; then"
      }
    ]
  },
  {
    "sha": "1e62350ca20898189904a88dfef9ea11ddcd8626",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTYyMzUwY2EyMDg5ODE4OTkwNGE4OGRmZWY5ZWExMWRkY2Q4NjI2",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-11-29T18:33:22Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-01T17:36:39Z"
      },
      "message": "refactor: Improve use of explicit keyword",
      "tree": {
        "sha": "4c59267f85c5691faa84656cb0cecb0d386a247e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c59267f85c5691faa84656cb0cecb0d386a247e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e62350ca20898189904a88dfef9ea11ddcd8626",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/GfysVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNZUgQAKdrSxmwQ1/PB0vTAU6nYUhHYHwL\n8naxWNiHNvaJBITElOuxSCCJXccqHZujOD22RR2zO/jmrbZlKZcOaBlIm/Ia6JZ/\nh7X3V1Sjn2q4QuPbJ9sQYYK2nwUlekZ3q5bPljOXrSAbGF6boVArF2sgZFlsCrjT\nlX+VlUgXiUSeVE6KW1HDho24pD0Wv+fUaDpg6BDMXa6sn59lTsWOMuyZKgIA5u9t\nt+YRFyjCj1mVx/ooNWpRUAR9Bi2J0yLmnVsKIJfGMVlbpkkWM/x3cl9o0NEgNd7Q\n8WKqcVEfMC7KGoVytWNGlCILin/txp/SfpmdoPk7h+iyrcUJYxfH1gNjKVr2S5XC\n5P23Z9oirfRrcj9qt2rARR1GKVC4eUa8QI0NoSYRjGKSaguyRUbWb4oiGl7Jb07Q\nPr/lO/IWzjBhTdObBUVuuGu4/7+K/RlPaDlVZQ23KyRlN1Cf9AR5ue9nlwxF9w5P\nhGAIv/BxmbreklU2JRaPMO7nhqL7ioQvctwetRrPxPysUpohU3yujr/6siEmhXJF\ndotvehoe8goOqkE94y3KL0D3rrI50Sem1lnXI9npbNTvYp0DyRhEFJ4NVzg+MSzw\nmY8156Ye2xNgt8qogoiryrmqgf+2meGg8q/YDk1BI1OaEN7GC+Rrmz1vlvfj9/0m\nlv/5JWkEk0zAyTdL\n=ZoF1\n-----END PGP SIGNATURE-----",
        "payload": "tree 4c59267f85c5691faa84656cb0cecb0d386a247e\nparent c502a6dbfb854ca827a5a3925394f9e09d29b898\nauthor Fabian Jahr <fjahr@protonmail.com> 1606674802 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1606844199 +0100\n\nrefactor: Improve use of explicit keyword\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e62350ca20898189904a88dfef9ea11ddcd8626",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e62350ca20898189904a88dfef9ea11ddcd8626",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e62350ca20898189904a88dfef9ea11ddcd8626/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c502a6dbfb854ca827a5a3925394f9e09d29b898",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c502a6dbfb854ca827a5a3925394f9e09d29b898",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c502a6dbfb854ca827a5a3925394f9e09d29b898"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 31,
      "deletions": 22
    },
    "files": [
      {
        "sha": "ec5400c3d8ec792e87879f67f0a205a79b18ea20",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -451,7 +451,7 @@ struct Peer {\n     /** Work queue of items requested by this peer **/\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n-    Peer(NodeId id) : m_id(id) {}\n+    explicit Peer(NodeId id) : m_id(id) {}\n };\n \n using PeerRef = std::shared_ptr<Peer>;"
      },
      {
        "sha": "a8c8be05fb0a603cf07c931665547a11b1f8f114",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -64,7 +64,7 @@ namespace {\n class NodeImpl : public Node\n {\n public:\n-    NodeImpl(NodeContext* context) { setContext(context); }\n+    explicit NodeImpl(NodeContext* context) { setContext(context); }\n     void initLogging() override { InitLogging(*Assert(m_context->args)); }\n     void initParameterInteraction() override { InitParameterInteraction(*Assert(m_context->args)); }\n     bilingual_str getWarnings() override { return GetWarnings(true); }"
      },
      {
        "sha": "d60520ac44d40560891ed1f1381a9e3b290b24dc",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -223,7 +223,7 @@ class XOnlyPubKey\n \n public:\n     /** Construct an x-only pubkey from exactly 32 bytes. */\n-    XOnlyPubKey(Span<const unsigned char> bytes);\n+    explicit XOnlyPubKey(Span<const unsigned char> bytes);\n \n     /** Verify a Schnorr signature against this public key.\n      *"
      },
      {
        "sha": "e6d24f202fdf03a8f2899760e5af04498699fc83",
        "filename": "src/qt/test/addressbooktests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/qt/test/addressbooktests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/qt/test/addressbooktests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.h?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -15,7 +15,7 @@ class Node;\n class AddressBookTests : public QObject\n {\n public:\n-    AddressBookTests(interfaces::Node& node) : m_node(node) {}\n+    explicit AddressBookTests(interfaces::Node& node) : m_node(node) {}\n     interfaces::Node& m_node;\n \n     Q_OBJECT"
      },
      {
        "sha": "320275129d6a22780507c24f708a4dcbd091df2e",
        "filename": "src/qt/test/rpcnestedtests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/qt/test/rpcnestedtests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/qt/test/rpcnestedtests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.h?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -15,7 +15,7 @@ class Node;\n class RPCNestedTests : public QObject\n {\n public:\n-    RPCNestedTests(interfaces::Node& node) : m_node(node) {}\n+    explicit RPCNestedTests(interfaces::Node& node) : m_node(node) {}\n     interfaces::Node& m_node;\n \n     Q_OBJECT"
      },
      {
        "sha": "dfca3370f7a2fe25bcf4ec8574bd218bd84d94a1",
        "filename": "src/qt/test/wallettests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/qt/test/wallettests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/qt/test/wallettests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.h?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -15,7 +15,7 @@ class Node;\n class WalletTests : public QObject\n {\n  public:\n-    WalletTests(interfaces::Node& node) : m_node(node) {}\n+    explicit WalletTests(interfaces::Node& node) : m_node(node) {}\n     interfaces::Node& m_node;\n \n     Q_OBJECT"
      },
      {
        "sha": "1241d999a8221a701d9db0d086094447a6f59651",
        "filename": "src/rpc/request.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/rpc/request.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/rpc/request.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.h?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -40,7 +40,7 @@ class JSONRPCRequest\n     std::string peerAddr;\n     const util::Ref& context;\n \n-    JSONRPCRequest(const util::Ref& context) : id(NullUniValue), params(NullUniValue), fHelp(false), context(context) {}\n+    explicit JSONRPCRequest(const util::Ref& context) : id(NullUniValue), params(NullUniValue), fHelp(false), context(context) {}\n \n     //! Initializes request information from another request object and the\n     //! given context. The implementation should be updated if any members are"
      },
      {
        "sha": "e5ba9ba6d24fdeac859d65eab5227c748e532971",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -156,7 +156,7 @@ struct PubkeyProvider\n     uint32_t m_expr_index;\n \n public:\n-    PubkeyProvider(uint32_t exp_index) : m_expr_index(exp_index) {}\n+    explicit PubkeyProvider(uint32_t exp_index) : m_expr_index(exp_index) {}\n \n     virtual ~PubkeyProvider() = default;\n "
      },
      {
        "sha": "4d1ef61964cc2f55b970aeb46cc020e14c0116fd",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -28,7 +28,7 @@ class BaseHash\n \n public:\n     BaseHash() : m_hash() {}\n-    BaseHash(const HashType& in) : m_hash(in) {}\n+    explicit BaseHash(const HashType& in) : m_hash(in) {}\n \n     unsigned char* begin()\n     {"
      },
      {
        "sha": "970452dbcc8d15d4bf2b1cfb493179235c40fb24",
        "filename": "src/test/fuzz/signature_checker.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/test/fuzz/signature_checker.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/test/fuzz/signature_checker.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/signature_checker.cpp?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -24,7 +24,7 @@ class FuzzedSignatureChecker : public BaseSignatureChecker\n     FuzzedDataProvider& m_fuzzed_data_provider;\n \n public:\n-    FuzzedSignatureChecker(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider(fuzzed_data_provider)\n+    explicit FuzzedSignatureChecker(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider(fuzzed_data_provider)\n     {\n     }\n "
      },
      {
        "sha": "a49f9a7292f7e2f74a9bbc8956f9c6db9d3fc7c7",
        "filename": "src/test/util/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/test/util/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/test/util/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/logging.h?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -32,7 +32,7 @@ class DebugLogHelper\n     void check_found();\n \n public:\n-    DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n+    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n     ~DebugLogHelper() { check_found(); }\n };\n "
      },
      {
        "sha": "131508f5f8a99a885378724ac9d43620e984693e",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -231,7 +231,7 @@ class CheckValueTest : public TestChain100Setup\n         Optional<std::vector<std::string>> list_value;\n         const char* error = nullptr;\n \n-        Expect(util::SettingsValue s) : setting(std::move(s)) {}\n+        explicit Expect(util::SettingsValue s) : setting(std::move(s)) {}\n         Expect& DefaultString() { default_string = true; return *this; }\n         Expect& DefaultInt() { default_int = true; return *this; }\n         Expect& DefaultBool() { default_bool = true; return *this; }"
      },
      {
        "sha": "bc893ccda54afebe74f2cc058065f71056dce7b1",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -514,7 +514,7 @@ class FormatArg\n         { }\n \n         template<typename T>\n-        FormatArg(const T& value)\n+        explicit FormatArg(const T& value)\n             : m_value(static_cast<const void*>(&value)),\n             m_formatImpl(&formatImpl<T>),\n             m_toIntImpl(&toIntImpl<T>)\n@@ -970,7 +970,7 @@ class FormatListN : public FormatList\n     public:\n #ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n         template<typename... Args>\n-        FormatListN(const Args&... args)\n+        explicit FormatListN(const Args&... args)\n             : FormatList(&m_formatterStore[0], N),\n             m_formatterStore { FormatArg(args)... }\n         { static_assert(sizeof...(args) == N, \"Number of args must be N\"); }"
      },
      {
        "sha": "15797cbc00e7d71e39cb17ddf3fec9a901da30e4",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -855,7 +855,7 @@ class CTxMemPool\n     class EpochGuard {\n         const CTxMemPool& pool;\n         public:\n-        EpochGuard(const CTxMemPool& in);\n+        explicit EpochGuard(const CTxMemPool& in);\n         ~EpochGuard();\n     };\n     // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction"
      },
      {
        "sha": "e54c073328d3af6dd4899a6dc3228a7172dc8c64",
        "filename": "src/txrequest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/txrequest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/txrequest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrequest.cpp?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -170,7 +170,7 @@ using ByTxHashView = std::tuple<const uint256&, State, Priority>;\n class ByTxHashViewExtractor {\n     const PriorityComputer& m_computer;\n public:\n-    ByTxHashViewExtractor(const PriorityComputer& computer) : m_computer(computer) {}\n+    explicit ByTxHashViewExtractor(const PriorityComputer& computer) : m_computer(computer) {}\n     using result_type = ByTxHashView;\n     result_type operator()(const Announcement& ann) const\n     {\n@@ -522,7 +522,7 @@ class TxRequestTracker::Impl {\n     }\n \n public:\n-    Impl(bool deterministic) :\n+    explicit Impl(bool deterministic) :\n         m_computer(deterministic),\n         // Explicitly initialize m_index as we need to pass a reference to m_computer to ByTxHashViewExtractor.\n         m_index(boost::make_tuple("
      },
      {
        "sha": "a774e76fa93ef45f095e15a9f2a30c2b69dd9c34",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -449,7 +449,7 @@ namespace {\n class MemPoolAccept\n {\n public:\n-    MemPoolAccept(CTxMemPool& mempool) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&::ChainstateActive().CoinsTip(), m_pool),\n+    explicit MemPoolAccept(CTxMemPool& mempool) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&::ChainstateActive().CoinsTip(), m_pool),\n         m_limit_ancestors(gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n         m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n         m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n@@ -482,7 +482,7 @@ class MemPoolAccept\n     // All the intermediate state that gets passed between the various levels\n     // of checking a given transaction.\n     struct Workspace {\n-        Workspace(const CTransactionRef& ptx) : m_ptx(ptx), m_hash(ptx->GetHash()) {}\n+        explicit Workspace(const CTransactionRef& ptx) : m_ptx(ptx), m_hash(ptx->GetHash()) {}\n         std::set<uint256> m_conflicts;\n         CTxMemPool::setEntries m_all_conflicting;\n         CTxMemPool::setEntries m_ancestors;"
      },
      {
        "sha": "4f97665f0861136d18f4416a686306a8cd80de6d",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -56,7 +56,7 @@ class BerkeleyEnvironment\n     std::unordered_map<std::string, WalletDatabaseFileId> m_fileids;\n     std::condition_variable_any m_db_in_use;\n \n-    BerkeleyEnvironment(const fs::path& env_directory);\n+    explicit BerkeleyEnvironment(const fs::path& env_directory);\n     BerkeleyEnvironment();\n     ~BerkeleyEnvironment();\n     void Reset();"
      },
      {
        "sha": "cec46a0fbb6a08d7ba5eb2d86478778154279747",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -172,7 +172,7 @@ class ScriptPubKeyMan\n     WalletStorage& m_storage;\n \n public:\n-    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage) {}\n+    explicit ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage) {}\n     virtual ~ScriptPubKeyMan() {};\n     virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n     virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n@@ -504,7 +504,7 @@ class LegacySigningProvider : public SigningProvider\n private:\n     const LegacyScriptPubKeyMan& m_spk_man;\n public:\n-    LegacySigningProvider(const LegacyScriptPubKeyMan& spk_man) : m_spk_man(spk_man) {}\n+    explicit LegacySigningProvider(const LegacyScriptPubKeyMan& spk_man) : m_spk_man(spk_man) {}\n \n     bool GetCScript(const CScriptID &scriptid, CScript& script) const override { return m_spk_man.GetCScript(scriptid, script); }\n     bool HaveCScript(const CScriptID &scriptid) const override { return m_spk_man.HaveCScript(scriptid); }"
      },
      {
        "sha": "b2ed811cdabac73d2781d43f68c07ea23d112bb3",
        "filename": "test/lint/extended-lint-cppcheck.sh",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62350ca20898189904a88dfef9ea11ddcd8626/test/lint/extended-lint-cppcheck.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62350ca20898189904a88dfef9ea11ddcd8626/test/lint/extended-lint-cppcheck.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/extended-lint-cppcheck.sh?ref=1e62350ca20898189904a88dfef9ea11ddcd8626",
        "patch": "@@ -30,6 +30,7 @@ IGNORED_WARNINGS=(\n     \"src/protocol.h:.* Class 'CMessageHeader' has a constructor with 1 argument that is not explicit.\"\n     \"src/qt/guiutil.h:.* Class 'ItemDelegate' has a constructor with 1 argument that is not explicit.\"\n     \"src/rpc/util.h:.* Struct 'RPCResults' has a constructor with 1 argument that is not explicit.\"\n+    \"src/rpc/util.h:.* Struct 'UniValueType' has a constructor with 1 argument that is not explicit.\"\n     \"src/rpc/util.h:.* style: Struct 'UniValueType' has a constructor with 1 argument that is not explicit.\"\n     \"src/script/descriptor.cpp:.* Class 'AddressDescriptor' has a constructor with 1 argument that is not explicit.\"\n     \"src/script/descriptor.cpp:.* Class 'ComboDescriptor' has a constructor with 1 argument that is not explicit.\"\n@@ -42,13 +43,21 @@ IGNORED_WARNINGS=(\n     \"src/script/descriptor.cpp:.* Class 'WSHDescriptor' has a constructor with 1 argument that is not explicit.\"\n     \"src/script/script.h:.* Class 'CScript' has a constructor with 1 argument that is not explicit.\"\n     \"src/script/standard.h:.* Class 'CScriptID' has a constructor with 1 argument that is not explicit.\"\n+    \"src/span.h:.* Class 'Span < const CRPCCommand >' has a constructor with 1 argument that is not explicit.\"\n+    \"src/span.h:.* Class 'Span < const char >' has a constructor with 1 argument that is not explicit.\"\n+    \"src/span.h:.* Class 'Span < const std :: vector <unsigned char > >' has a constructor with 1 argument that is not explicit.\"\n+    \"src/span.h:.* Class 'Span < const uint8_t >' has a constructor with 1 argument that is not explicit.\"\n+    \"src/span.h:.* Class 'Span' has a constructor with 1 argument that is not explicit.\"\n     \"src/support/allocators/secure.h:.* Struct 'secure_allocator < char >' has a constructor with 1 argument that is not explicit.\"\n     \"src/support/allocators/secure.h:.* Struct 'secure_allocator < RNGState >' has a constructor with 1 argument that is not explicit.\"\n     \"src/support/allocators/secure.h:.* Struct 'secure_allocator < unsigned char >' has a constructor with 1 argument that is not explicit.\"\n     \"src/support/allocators/zeroafterfree.h:.* Struct 'zero_after_free_allocator < char >' has a constructor with 1 argument that is not explicit.\"\n     \"src/test/checkqueue_tests.cpp:.* Struct 'FailingCheck' has a constructor with 1 argument that is not explicit.\"\n     \"src/test/checkqueue_tests.cpp:.* Struct 'MemoryCheck' has a constructor with 1 argument that is not explicit.\"\n     \"src/test/checkqueue_tests.cpp:.* Struct 'UniqueCheck' has a constructor with 1 argument that is not explicit.\"\n+    \"src/test/fuzz/util.h:.* Class 'FuzzedFileProvider' has a constructor with 1 argument that is not explicit.\"\n+    \"src/test/fuzz/util.h:.* Class 'FuzzedAutoFileProvider' has a constructor with 1 argument that is not explicit.\"\n+    \"src/util/ref.h:.* Class 'Ref' has a constructor with 1 argument that is not explicit.\"\n     \"src/wallet/db.h:.* Class 'BerkeleyEnvironment' has a constructor with 1 argument that is not explicit.\"\n )\n "
      }
    ]
  }
]