DrahtBot,2020-07-10 02:21:16,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19872 (Avoid locking CTxMemPool::cs recursively in some cases by hebasto)\n* #18191 (Change UpdateForDescendants to use E",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-656443703,656443703,
laanwj,2020-07-15 12:24:22,"This is cool! How much memory would be saved by this change on average, do you think?",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-658736321,658736321,
JeremyRubin,2020-07-15 19:03:00,"std::sets are awful for memory. I think you can get like a max of 220k txns in the mempool... let's assume that average is 50k? I don't know if that's a good assumption though. the overhead for a map entry is very high. I would guess that it's somewhere around 64 bytes per entry? Can double check, but based on:\n```\n struct stl_tree_node\n {\n private:\n     int color;\n     void* parent;\",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-658946971,658946971,
JeremyRubin,2020-07-15 20:35:40,"```c++\n  template <size_t s1, size_t s2> struct static_check {\n       static_check() {\n       static_assert(s1 == s2);\n       }\n   };\n       auto s = static_check<48, sizeof(setEntries)>();\n       auto s2 = static_check<48*2, sizeof(TxLinks)>();\n       auto s3 = static_check<136, sizeof(memusage::stl_tree_node<std::pair<const txiter, TxLinks>>)>();\n       auto s4 = static_check<1",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-658995547,658995547,
jonatack,2020-07-20 07:01:34,"nit: maybe a less violent PR title :axe: :slightly_smiling_face: :+1: (joking, but s/kill/remove/ works) and add the component prefix",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-660843578,660843578,
sipa,2020-07-20 07:06:11,@jonatack You must have hated https://github.com/bitcoin/bitcoin/pull/9260.,https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-660845507,660845507,
jonatack,2020-07-20 07:14:49,Not bad :) The description even required translation. https://github.com/bitcoin/bitcoin/pull/9260#issuecomment-267325376,https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-660848975,660848975,
jonatack,2020-07-20 08:18:25,"One run each of all benchmarks (though I suspect there is a fair amount of variation between runs).\n\n<details><summary>all benchmarks, master vs this branch rebased on master</summary><p>\n\ncurrent master\n```\n(master)$ ./src/bench/bench_bitcoin\n# Benchmark, evals, iterations, total, min, max, median\nAddrManAdd, 5, 5, 1.72099, 0.063045, 0.0772824, 0.0669075\nAddrManGetAddr, 5, 500, ",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-660878330,660878330,
JeremyRubin,2020-07-20 18:11:39,"@jonatack thanks for the review! Cool to see it making an even bigger impact on other people's systems -- can you share your hardware specs? Mine were run on AMD Ryzen 7 1800X Eight-Core, 3.6ghz, 32 gb ram 2133 MT/s. It generally makes sense that if you're on lesser hardware (more total time on your benches) there may be some other factors contributing to a bigger speedup.\n\nW.r.t. boost featur",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-661250398,661250398,
jonatack,2020-07-21 08:15:56,"Intel i7-6500U 4 core @ 2.5GHz, 32 gb RAM DDR4 2666, SSD nvme Samsung 960 Pro 1T, running Debian bullseye/sid with Coreboot (I need to upgrade to a faster CPU but it's not likely to happen soon).\n\nCode review re-ACK 2a47af4 per `git diff dc0d3fb 2a47af4`",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-661708383,661708383,
JeremyRubin,2020-07-22 17:55:54,"Ok I've gone ahead and squashed all the nits and intermittent commits so that bisecting should work cleanly.\n\nI think the resultant history is tad harder to review than with the two parts, as there was a bigger delineation from the architectural refactoring, the callsite changes, and just style changes to touched code, but it is what it is.\n\n@jonatack you'll notice some formatting changes ",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-662598197,662598197,
JeremyRubin,2020-07-22 20:15:20,rebased.,https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-662673213,662673213,
JeremyRubin,2020-07-23 15:54:37,To be honest most of the style changes on early prs in this series don't\nreally matter that much as all that code is going to be nuked by follow up\nwork anyways.\n,https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-663087006,663087006,
jonatack,2020-07-24 08:00:44,"> ran a node at [794e803](https://github.com/bitcoin/bitcoin/commit/794e803a1539516908a432c3482e6e6c5f1fe422) for an hour\n\nRan the node overnight. As Space-X would say, node operation appears to be nominal.",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-663397741,663397741,
promag,2020-08-02 18:42:52,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-667710044,667710044,
ariard,2020-08-04 13:10:44,"@JeremyRubin Sure documentation improvements can happen in follow-ups, comments are just a way to track suggestions. I was mostly pointing places where switching names confused a bit further IMO but we can overhaul the whole documentation latter. Will review new ownership model soon.",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-668586871,668586871,
laanwj,2020-09-03 10:58:10,"I get the following error while building (on top of master), I think it must be a silent merge conflict with another recent change:\n```\n/â€¦/bitcoin/src/net_processing.cpp:1778:69: error: no member named 'GetMemPoolParents' in 'CTxMemPool'\n                    const CTxMemPool::setEntries& parents = mempool.GetMemPoolParents(*txiter);\n                                                          ",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-686412037,686412037,
JeremyRubin,2020-09-03 16:49:22,"ugh will fix; this should become txiter->GetMemPoolParentsConst();\n\nhopefully the only place...",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-686619664,686619664,
JeremyRubin,2020-09-03 20:38:11,"Fixed merge issue!\n\nTest failure is unrelated (one failing build on an unrelated wallet test). Leaving the failed test up to permit others to inspect, may be related to #19853 according to @achow101.",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-686752644,686752644,
jonatack,2020-09-03 21:58:24,"The `wallet_basic.py --descriptors` Travis test failure is unrelated. The test passes for me locally on this branch and I've seen the same failure, in one Travis job only, in other PRs reviewed today.",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-686785079,686785079,
JeremyRubin,2020-09-04 16:51:05,"Since #19854 is merged, this conflicts and has been rebased. Apologies to @jonatack and @hebasto, but mind re-slapping an ACK on this when tests pass? diff is just adding AssertLockHeld(cs) to UpdateChild/UpdateParent, which would not cleanly merge with #19854.",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-687265590,687265590,
jonatack,2020-09-04 19:38:08,"re-ACK 296be8f per `git range-diff ab338a19 3ba1665 296be8f`, sanity check gcc 10.2 debug build is clean. \n",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-687343083,687343083,
JeremyRubin,2020-09-07 01:17:24,"@MarcoFalke do you have a preference for how some of these are handled? I think because it's all non-functional style related or documentary concerns it would be OK to do post-merge as there's a lot of other pending work that will touch/redo these areas eventually in any case.\n\nas to why it is 2 commits and not one, it used to be more commits, and then I slimmed it down. It previously made mor",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-687962919,687962919,
MarcoFalke,2020-09-07 06:22:28,"No preference on how those are handled, but re-ACKing some doc fixups should cost as much (or as little) review effort as creating a new commit/pull and getting that reviewed, no?\n",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-688064471,688064471,
JeremyRubin,2020-09-07 09:59:57,"No because there's already outstanding work (I have like something in the range of 40-70 other commits staged since last year for the mempool project) that is going to touch these areas and cause me to have to rewrite some of the documentation anyways before they are PR ready. I'm not making a separate docs only fixup.\n\nSo for the most part the style changes and docs changes are already going ",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-688216105,688216105,
MarcoFalke,2020-09-07 10:11:55,"I wouldn't call that bikeshedding. Referring to `CTxMemPoolEntry::m_children` with `CTxMemPool::m_children` is objectively wrong and someone will create pull requests to fix it. But if the documentation/code goes away later then it might not be worth it to spend much time on it. Though, for reference it would be nice if you could link to pull requests that rework/remove the docs.",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-688223166,688223166,
JeremyRubin,2020-09-07 16:14:38,"Thanks for the merge -- if someone wants to clean up the docs that's fine.\n\nYes, the docs were objectively wrong, I probably fucked up the autocomplete when changing it, and if someone wants to fix it before I get around to it that's dandy. Just noting that the prior name -- setMemPoolChildren -- was wrong (no such member existed) for like 5 years and no one fixed it (and even more wrong -- th",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-688417629,688417629,
MarcoFalke,2020-09-07 16:25:59,"For my own reference, the broken docs are\n\n```sh\ngit grep --extended-regexp '(setMemPool|mapLinks|CTxMemPool::(Parents|m_children))'",https://github.com/bitcoin/bitcoin/pull/19478#issuecomment-688422770,688422770,
jonatack,2020-07-20 05:57:54,"da53f15e\n```suggestion\n        const CTxMemPoolEntry::Children& setChildren = cit.GetMemPoolChildrenConst();\n```",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r457078253,457078253,src/txmempool.cpp
jonatack,2020-07-20 05:58:28,"da53f15e\n```suggestion\n        const CTxMemPoolEntry::Parents& setMemPoolParents = stageit->GetMemPoolParentsConst();\n```",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r457078529,457078529,src/txmempool.cpp
jonatack,2020-07-20 05:59:59,da53f15e be sure phash and hash are used in the right places here,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r457079277,457079277,src/txmempool.cpp
jonatack,2020-07-20 06:00:23,"da53f15e\n```suggestion\n    const CTxMemPoolEntry::Children& setMemPoolChildren = it->GetMemPoolChildrenConst();\n```",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r457079482,457079482,src/txmempool.cpp
jonatack,2020-07-20 06:00:59,"da53f15e\n```suggestion\n        const CTxMemPoolEntry::Children& setChildren = it->GetMemPoolChildrenConst();\n```",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r457079774,457079774,src/txmempool.cpp
JeremyRubin,2020-07-20 16:59:14,"Yep! CTxMemPool::Parents stores reference_wrappers (hash) whereas phash is a txiter as stored in setAncestors. \n\nIn some places we may eventually want to replace things like setAncestors with set<reference_wrappers> to get rid of the casting, but that's a more invasive change with less clear benefits so it is not done for now.",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r457558263,457558263,src/txmempool.cpp
JeremyRubin,2020-07-20 17:40:47,"When we say ""we require"" in this comment, previously we had an assertion that this was true, this patch removes this assertion. This should be safe to do, as it would have previously resulted in crashes. But if we want the assertion checked, we should add back a lookup to mapTX.",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r457581996,457581996,src/txmempool.cpp
JeremyRubin,2020-07-20 17:59:10,"This is because previously we had to consistency check constantly to make sure we weren't looking at a dead mempool entry https://github.com/bitcoin/bitcoin/pull/19478/files#diff-ca74c4b28865382863b8fe7633a85cd6L987\n\nMaybe one way to get around this would be to make CTxMemPoolEntry contain bool ""dead"" if the entry has been evicted but a valid reference is dangling somewhere? This is unconditio",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r457592605,457592605,src/txmempool.cpp
hebasto,2020-07-22 05:30:01,"c977ecc917ecf40c554173a52700973ea7d42f07\nI'd remove this comment as needless and confusing.\nWhich type from `std::reference_wrapper<T>&` and `T&` is a pointer to `T`?",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r458543318,458543318,src/txmempool.h
hebasto,2020-07-22 05:31:18,"c977ecc917ecf40c554173a52700973ea7d42f07\nThis typedef is not used, and should be dropped.",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r458543707,458543707,src/txmempool.h
hebasto,2020-07-22 06:02:50,"c977ecc917ecf40c554173a52700973ea7d42f07\nSince `add` has `bool` type, could be\n```suggestion\n    } else if (entry->GetMemPoolChildren().erase(child)) {\n```",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r458553828,458553828,src/txmempool.cpp
hebasto,2020-07-22 06:03:23,"c977ecc917ecf40c554173a52700973ea7d42f07\nSince `add` has `bool` type, could be\n```suggestion\n    } else if (entry->GetMemPoolParents().erase(parent)) {\n```",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r458554036,458554036,src/txmempool.cpp
JeremyRubin,2020-07-22 16:54:29,"T is either a reference wrapper (which I believe a normal reference can convert to) or a txiter, which is a pointer to a mempool entry (e.g., you have to use a-> to access members). Maybe more accurate for comment to be about T than a.",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r458941027,458941027,src/txmempool.h
JeremyRubin,2020-07-22 17:02:20,"I prefer to not make changes like this unless there's a motivating reason. The mapLinks refactor is about removing mapLinks, code style changes should be proposed separately.\n\nIn particular, your recommended change introduces a bug, which is another reason to avoid changes like this.\n\nIf the preceding if fails, it is either because add was not set OR because the item was already in the Chi",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r458945885,458945885,src/txmempool.cpp
JeremyRubin,2020-07-22 17:03:05,see https://github.com/bitcoin/bitcoin/pull/19478#discussion_r458945885 for an explanation of the bug the proposed change would introduce.,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r458946281,458946281,src/txmempool.cpp
hebasto,2020-07-22 17:04:51,"My bad ((\nSorry for noise.",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r458947322,458947322,src/txmempool.cpp
JeremyRubin,2020-07-22 17:24:47,ah sorry it exists in #18191 which is how it made it over here as this work was supposed to follow that work. I can drop it.,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r458959324,458959324,src/txmempool.h
JeremyRubin,2020-07-22 17:45:00,comment improved.,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r458971646,458971646,src/txmempool.h
hebasto,2020-07-23 05:40:35,"Mis-rebased?\n\n```suggestion\n    // Estimate the overhead of mapTx to be 15 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 15 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r459224426,459224426,src/txmempool.cpp
JeremyRubin,2020-07-23 10:24:01,Absolutely right; I'll tell ya I spent like 5 minutes trying to spot the difference on that conflict and couldn't see it :p ,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r459352637,459352637,src/txmempool.cpp
jonatack,2020-07-23 13:50:12,"nit: if you have to retouch again, can update `childEntry` to current naming style `child` or `child_entry` in this range-for block, since the lines are being touched anyway",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r459463611,459463611,src/txmempool.cpp
ariard,2020-08-03 13:16:00,You have a dangling comment reference to `setMemPoolChildren` in `CTxMemPool` class comment.,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r464405732,464405732,src/txmempool.cpp
ariard,2020-08-04 00:03:31,"I think what is meaned by ""data"" is a bit confusing here. It can  be either a _pair_ of iterator/sets in `mapLinks` or the _sets_ in themselves or even _statistics_ of each set element ? Of course, what we care is integrity of links to keep our traversal consistent until we're done updating. But referring now to Parents/Children doesn't make it clearer.\n\nAs a better suggestion, comment may exp",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r464724044,464724044,src/txmempool.cpp
ariard,2020-08-04 00:50:30,"I'm not sure if it makes sense to refer to `GetMemPoolChildren`. Again I understand this comment it's saying that during a reorg `mapTx` entries won't have their parent set correctly setup until `UpdateTransactionsFromBlock` thus relying on `mapLinks` to fetch the correct parent set, as this one is setup at `addUnchecked`.\n\n",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r464736809,464736809,src/txmempool.cpp
JeremyRubin,2020-08-04 01:08:34,Maybe we can clean up the documentation later? I agree this is confusing but it's not made worse by changing it here.,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r464741264,464741264,src/txmempool.cpp
JeremyRubin,2020-08-04 01:10:04,I'm not really sure what you're suggesting but I think the documentation can be cleaned up in the future. ,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r464741670,464741670,src/txmempool.cpp
JeremyRubin,2020-08-04 01:16:05,"yeah in general the mempool documentation is not consistent with the current variable names for things (e.g. setMemPoolChildren is referred to in many places as belonging to a entry but no such member exists).\n\nMaking the documentation consistent can happen as follow up work (there are other changes in the pipe that will make more substantive changes requiring documentation updates).",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r464743278,464743278,src/txmempool.cpp
Empact,2020-09-02 17:07:10,"nit: By YAGNI, I would weigh against preemptive definitions",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r482228109,482228109,src/txmempool.h
Empact,2020-09-02 17:09:07,"nit: It seems redundant to offer two definitions for these getters - constness can be enforced by the target variable, no?",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r482230193,482230193,src/txmempool.h
Empact,2020-09-02 17:10:18,nit: Could just call this `CompareIteratorByHash` given there's no alternative definition.,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r482231420,482231420,src/txmempool.h
JeremyRubin,2020-09-02 18:44:10,"nope it can't really -- e.g., if I change the type of the local binding it will automatically pick the correct const/non const version, but I want to call enforcing that it can't be used non-const.\n\nsee begin/cbegin https://en.cppreference.com/w/cpp/container/vector/begin which exists for the same purpose.",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r482296779,482296779,src/txmempool.h
JeremyRubin,2020-09-02 18:52:21,"I was doing some experiments where they diverge :)\n\nParents are fundamentally fixed by the TX (e.g., named by TXID) so there are some opportunities for eliminating the std::set based on that, whereas children kind of have to remain a std::set, but can potentially be turned into a pointer into MapNextTx.",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r482304449,482304449,src/txmempool.h
JeremyRubin,2020-09-02 18:55:55,"Fair -- I think when i originally wrote the generic class, I didn't delete the prior class definition, but realized I could with the SFINAE at some point. \n\nIf I have to make other changes, can adjust the name.",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r482307797,482307797,src/txmempool.h
Empact,2020-09-02 23:37:07,"Ok I took a crack at making an example of this but found it conflicted with the `indexed_transaction_set` constraints, which force const on the stored value. So this is fine by me.",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r482600616,482600616,src/txmempool.h
JeremyRubin,2020-09-03 18:48:21,adjusted.,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r483186087,483186087,src/txmempool.h
JeremyRubin,2020-09-03 19:07:18,skipped touching this for aforementioned reasons (other work will shortly overwrite this),https://github.com/bitcoin/bitcoin/pull/19478#discussion_r483196054,483196054,src/txmempool.cpp
MarcoFalke,2020-09-06 09:14:27,"nit in commit 46d955d196043cc297834baeebce31ff778dff80: For the ""mutating"" getters, I'd prefer to suffix them with `Mut` (or similar) and remove the suffix from the ""const"" getters. The mutating ones are only called twice, whereas the read-only getters are called more often, so this would reduce verbosity. Also, safe languages (like rust) treat the default const and otherwise require mutable to be",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484044618,484044618,src/txmempool.h
MarcoFalke,2020-09-06 09:24:24,style-nit: Any reason to add an alias that is only used once?,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484045624,484045624,src/txmempool.cpp
MarcoFalke,2020-09-06 09:27:05,"nit: in this case the diff would be smaller if an alias was used.\n```suggestion\n        txiter cit = mapTx.iterator_to(descendant);\n        if (!setExclude.count(cit->GetTx().GetHash())) {\n```",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484045929,484045929,src/txmempool.cpp
MarcoFalke,2020-09-06 09:29:05,"nit: Should be able to decay by itself?\n\n```suggestion\n        const CTxMemPoolEntry& stage = *staged_ancestors.begin();\n```",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484046106,484046106,src/txmempool.cpp
MarcoFalke,2020-09-06 09:30:54,"```suggestion\n// Assumes that CTxMemPoolEntry::m_children is correct for the given tx and all\n```",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484046304,484046304,src/txmempool.cpp
MarcoFalke,2020-09-06 09:32:00,same,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484046407,484046407,src/txmempool.cpp
MarcoFalke,2020-09-06 09:32:10,same,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484046427,484046427,src/txmempool.cpp
MarcoFalke,2020-09-06 09:32:34,same,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484046462,484046462,src/txmempool.cpp
MarcoFalke,2020-09-06 10:18:26,"nit: Can use C++11 :sweat_smile: \n\n```suggestion\n    using Children = std::set<CTxMemPoolEntryRef, CompareIteratorByHash>;\n```",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484050973,484050973,src/txmempool.h
jonatack,2020-09-06 10:47:05,"Good review comments above. I'll point out, though, that ""typedef"" seems much better for git grepping the codebase than ""using"" (yields more useful results).",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484053691,484053691,src/txmempool.h
MarcoFalke,2020-09-06 10:55:17,"`git grep` can also do regex, so a `git grep typedef` would be `git grep --extended-regexp  'using \w+ ='`, and we are already using `using` quite extensively ;)",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484054457,484054457,src/txmempool.h
JeremyRubin,2020-09-06 15:46:09,"It's C++ convention that the const one has a const-y name (e.g., begin -> cbegin). I opted to suffix with const rather than CGet... because we use the hungarian notation everywhere so it would look like a class.\n\nFuture work can also get rid of the mutating getters use entirely by moving UpdateChild into the CTXMemPoolEntry itself. This isn't done here as it is a bigger refactor (requires chan",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484085089,484085089,src/txmempool.h
JeremyRubin,2020-09-06 15:52:54,I believe I consistently use this style as I find it is more readable to not use the result of a function call on the right hand side of a range.,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484085751,484085751,src/txmempool.cpp
JeremyRubin,2020-09-06 16:00:31,"this code is imminently going to be rewritten, so it doesn't matter that much. I'm not sure if optimizing for small diff matters that much as the name ""cit"" kinda sucks anyways.",https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484086520,484086520,src/txmempool.cpp
JeremyRubin,2020-09-06 17:51:37,Ah good catch on the m_children.,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484097047,484097047,src/txmempool.cpp
JeremyRubin,2020-09-06 17:52:10,i don't have any preference.,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484097108,484097108,src/txmempool.h
MarcoFalke,2020-09-07 08:54:45,Makes sense. Closing discussion,https://github.com/bitcoin/bitcoin/pull/19478#discussion_r484289433,484289433,src/txmempool.h
