[
  {
    "sha": "a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWYzZDNkYjVjMGM4ZDE2OTc5OThlZDliM2UxOTJkZGJmOWEzMWY0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-26T21:05:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-26T22:44:57Z"
      },
      "message": "Fix and improve relay from whitelisted peers\n\nThis makes sure that retransmits by a whitelisted peer also actually\nresult in a retransmit.\n\nFurther, this changes the logic to never relay in case we would assign\na DoS score, as we expect to get DoS banned ourselves as a result.",
      "tree": {
        "sha": "fcc6bce4bc12ff2ed22428f1599e85073f39876b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcc6bce4bc12ff2ed22428f1599e85073f39876b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8a8e27a6a1901152822d59622f9aeb25a78a78d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8a8e27a6a1901152822d59622f9aeb25a78a78d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8a8e27a6a1901152822d59622f9aeb25a78a78d"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 14,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6cb9f43c0e3862c1152a4468ead77dd91d6a460c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4",
        "patch": "@@ -4421,11 +4421,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         mapAlreadyAskedFor.erase(inv);\n \n-        // Check for recently rejected (and do other quick existence checks)\n-        if (AlreadyHave(inv))\n-            return true;\n-\n-        if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n+        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n         {\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx);\n@@ -4505,13 +4501,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n             if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n-                // if they were rejected from the mempool, allowing the node to\n-                // function as a gateway for nodes hidden behind it.\n+                // if they were already in the mempool or rejected from it due\n+                // to policy, allowing the node to function as a gateway for\n+                // nodes hidden behind it.\n                 //\n-                // FIXME: This includes invalid transactions, which means a\n-                // whitelisted peer could get us banned! We may want to change\n-                // that.\n-                RelayTransaction(tx);\n+                // Never relay transactions that we would assign a non-zero DoS\n+                // score for, as we expect peers to do the same with us in that\n+                // case.\n+                int nDoS = 0;\n+                if (!state.IsInvalid(nDoS) || nDoS == 0) {\n+                    LogPrintf(\"Force relaying tx %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom->id);\n+                    RelayTransaction(tx);\n+                } else {\n+                    LogPrintf(\"Not relaying invalid transaction %s from whitelisted peer=%d (%s)\\n\", tx.GetHash().ToString(), pfrom->id, FormatStateMessage(state));\n+                }\n             }\n         }\n         int nDoS = 0;"
      }
    ]
  }
]