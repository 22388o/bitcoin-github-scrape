[
  {
    "sha": "d58bcdc4b569a667b6974c3547b7ff6f665afce9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNThiY2RjNGI1NjlhNjY3YjY5NzRjMzU0N2I3ZmY2ZjY2NWFmY2U5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-29T21:55:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-31T22:51:37Z"
      },
      "message": "Avoid asmap copies in initialization",
      "tree": {
        "sha": "3ddcf6f9514819e53de8d197d4af798b55c7085c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ddcf6f9514819e53de8d197d4af798b55c7085c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d58bcdc4b569a667b6974c3547b7ff6f665afce9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58bcdc4b569a667b6974c3547b7ff6f665afce9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d58bcdc4b569a667b6974c3547b7ff6f665afce9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58bcdc4b569a667b6974c3547b7ff6f665afce9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fcaa8291c6e155e6f5fba42e2ee8ec0bee046a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fcaa8291c6e155e6f5fba42e2ee8ec0bee046a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fcaa8291c6e155e6f5fba42e2ee8ec0bee046a3"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8720133b854615e6cedbd134ceba7764e02a554a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58bcdc4b569a667b6974c3547b7ff6f665afce9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58bcdc4b569a667b6974c3547b7ff6f665afce9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d58bcdc4b569a667b6974c3547b7ff6f665afce9",
        "patch": "@@ -1832,8 +1832,8 @@ bool AppInitMain(NodeContext& node)\n             InitError(strprintf(_(\"Could not find or parse specified asmap: '%s'\").translated, asmap_path));\n             return false;\n         }\n-        node.connman->SetAsmap(asmap);\n         const uint256 asmap_version = SerializeHash(asmap);\n+        node.connman->SetAsmap(std::move(asmap));\n         LogPrintf(\"Using asmap version %s for IP bucketing.\\n\", asmap_version.ToString());\n     } else {\n         LogPrintf(\"Using /16 prefix for IP bucketing.\\n\");"
      },
      {
        "sha": "92f7799e9777fe7246972debce4bd5e728eedcd7",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58bcdc4b569a667b6974c3547b7ff6f665afce9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58bcdc4b569a667b6974c3547b7ff6f665afce9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d58bcdc4b569a667b6974c3547b7ff6f665afce9",
        "patch": "@@ -331,7 +331,7 @@ class CConnman\n     */\n     int64_t PoissonNextSendInbound(int64_t now, int average_interval_seconds);\n \n-    void SetAsmap(std::vector<bool> asmap) { addrman.m_asmap = asmap; }\n+    void SetAsmap(std::vector<bool> asmap) { addrman.m_asmap = std::move(asmap); }\n \n private:\n     struct ListenSocket {"
      }
    ]
  },
  {
    "sha": "6f8c93731203c111f86c39eaf2102f9a825d1706",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjhjOTM3MzEyMDNjMTExZjg2YzM5ZWFmMjEwMmY5YTgyNWQxNzA2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-29T21:57:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-31T22:51:37Z"
      },
      "message": "Mark asmap const in statistics code",
      "tree": {
        "sha": "b38ea9134449d20414f492871a88eb8d2729d2a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b38ea9134449d20414f492871a88eb8d2729d2a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f8c93731203c111f86c39eaf2102f9a825d1706",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f8c93731203c111f86c39eaf2102f9a825d1706",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f8c93731203c111f86c39eaf2102f9a825d1706",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f8c93731203c111f86c39eaf2102f9a825d1706/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d58bcdc4b569a667b6974c3547b7ff6f665afce9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58bcdc4b569a667b6974c3547b7ff6f665afce9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d58bcdc4b569a667b6974c3547b7ff6f665afce9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "18fe95e67553157f807b8c64fcbde8f413b03c3c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f8c93731203c111f86c39eaf2102f9a825d1706/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f8c93731203c111f86c39eaf2102f9a825d1706/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6f8c93731203c111f86c39eaf2102f9a825d1706",
        "patch": "@@ -498,7 +498,7 @@ void CNode::SetAddrLocal(const CService& addrLocalIn) {\n \n #undef X\n #define X(name) stats.name = name\n-void CNode::copyStats(CNodeStats &stats, std::vector<bool> &m_asmap)\n+void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n {\n     stats.nodeid = this->GetId();\n     X(nServices);"
      },
      {
        "sha": "819947658a6bcb958fa24fe6df0ff2db3157c8d5",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f8c93731203c111f86c39eaf2102f9a825d1706/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f8c93731203c111f86c39eaf2102f9a825d1706/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6f8c93731203c111f86c39eaf2102f9a825d1706",
        "patch": "@@ -983,7 +983,7 @@ class CNode\n \n     void CloseSocketDisconnect();\n \n-    void copyStats(CNodeStats &stats, std::vector<bool> &m_asmap);\n+    void copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap);\n \n     ServiceFlags GetLocalServices() const\n     {"
      }
    ]
  },
  {
    "sha": "38c2395d7a905c87dc4630031849fd8e403e61bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGMyMzk1ZDdhOTA1Yzg3ZGM0NjMwMDMxODQ5ZmQ4ZTQwM2U2MWJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-29T23:02:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-31T22:51:37Z"
      },
      "message": "Use ASNs for mapped IPv4 addresses correctly",
      "tree": {
        "sha": "f180aea5ac3ce5a4bdf6722a0e5e94878de5f84d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f180aea5ac3ce5a4bdf6722a0e5e94878de5f84d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38c2395d7a905c87dc4630031849fd8e403e61bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c2395d7a905c87dc4630031849fd8e403e61bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38c2395d7a905c87dc4630031849fd8e403e61bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c2395d7a905c87dc4630031849fd8e403e61bf/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f8c93731203c111f86c39eaf2102f9a825d1706",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f8c93731203c111f86c39eaf2102f9a825d1706",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f8c93731203c111f86c39eaf2102f9a825d1706"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 61,
      "deletions": 41
    },
    "files": [
      {
        "sha": "1cac57a81766b3f4a5a3fed4e658abee6452e80e",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 41,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38c2395d7a905c87dc4630031849fd8e403e61bf/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38c2395d7a905c87dc4630031849fd8e403e61bf/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=38c2395d7a905c87dc4630031849fd8e403e61bf",
        "patch": "@@ -401,6 +401,26 @@ bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const\n     return true;\n }\n \n+bool CNetAddr::HasLinkedIPv4() const\n+{\n+    return IsRoutable() && (IsIPv4() || IsRFC6145() || IsRFC6052() || IsRFC3964() || IsRFC4380());\n+}\n+\n+uint32_t CNetAddr::GetLinkedIPv4() const\n+{\n+    if (IsIPv4() || IsRFC6145() || IsRFC6052()) {\n+        // IPv4, mapped IPv4, SIIT translated IPv4: the IPv4 address is the last 4 bytes of the address\n+        return ReadBE32(ip + 12);\n+    } else if (IsRFC3964()) {\n+        // 6to4 tunneled IPv4: the IPv4 address is in bytes 2-6\n+        return ReadBE32(ip + 2);\n+    } else if (IsRFC4380()) {\n+        // Teredo tunneled IPv4: the IPv4 address is in the last 4 bytes of the address, but bitflipped\n+        return ~ReadBE32(ip + 12);\n+    }\n+    assert(false);\n+}\n+\n uint32_t CNetAddr::GetNetClass() const {\n     uint32_t net_class = NET_IPV6;\n     if (IsLocal()) {\n@@ -410,7 +430,7 @@ uint32_t CNetAddr::GetNetClass() const {\n         net_class = NET_INTERNAL;\n     } else if (!IsRoutable()) {\n         net_class = NET_UNROUTABLE;\n-    } else if (IsIPv4() || IsRFC6145() || IsRFC6052() || IsRFC3964() || IsRFC4380()) {\n+    } else if (HasLinkedIPv4()) {\n         net_class = NET_IPV4;\n     } else if (IsTor()) {\n         net_class = NET_ONION;\n@@ -424,10 +444,24 @@ uint32_t CNetAddr::GetMappedAS(const std::vector<bool> &asmap) const {\n         return 0; // Indicates not found, safe because AS0 is reserved per RFC7607.\n     }\n     std::vector<bool> ip_bits(128);\n-    for (int8_t byte_i = 0; byte_i < 16; ++byte_i) {\n-        uint8_t cur_byte = GetByte(15 - byte_i);\n-        for (uint8_t bit_i = 0; bit_i < 8; ++bit_i) {\n-            ip_bits[byte_i * 8 + bit_i] = (cur_byte >> (7 - bit_i)) & 1;\n+    if (HasLinkedIPv4()) {\n+        // For lookup, treat as if it was just an IPv4 address (pchIPv4 prefix + IPv4 bits)\n+        for (int8_t byte_i = 0; byte_i < 12; ++byte_i) {\n+            for (uint8_t bit_i = 0; bit_i < 8; ++bit_i) {\n+                ip_bits[byte_i * 8 + bit_i] = (pchIPv4[byte_i] >> (7 - bit_i)) & 1;\n+            }\n+        }\n+        uint32_t ipv4 = GetLinkedIPv4();\n+        for (int i = 0; i < 32; ++i) {\n+            ip_bits[96 + i] = (ipv4 >> (31 - i)) & 1;\n+        }\n+    } else {\n+        // Use all 128 bits of the IPv6 address otherwise\n+        for (int8_t byte_i = 0; byte_i < 16; ++byte_i) {\n+            uint8_t cur_byte = GetByte(15 - byte_i);\n+            for (uint8_t bit_i = 0; bit_i < 8; ++bit_i) {\n+                ip_bits[byte_i * 8 + bit_i] = (cur_byte >> (7 - bit_i)) & 1;\n+            }\n         }\n     }\n     uint32_t mapped_as = Interpret(asmap, ip_bits);\n@@ -463,51 +497,32 @@ std::vector<unsigned char> CNetAddr::GetGroup(const std::vector<bool> &asmap) co\n     int nStartByte = 0;\n     int nBits = 16;\n \n-    // all local addresses belong to the same group\n-    if (IsLocal())\n-    {\n+    if (IsLocal()) {\n+        // all local addresses belong to the same group\n         nBits = 0;\n-    }\n-    // all internal-usage addresses get their own group\n-    if (IsInternal())\n-    {\n+    } else if (IsInternal()) {\n+        // all internal-usage addresses get their own group\n         nStartByte = sizeof(g_internal_prefix);\n         nBits = (sizeof(ip) - sizeof(g_internal_prefix)) * 8;\n-    }\n-    // all other unroutable addresses belong to the same group\n-    else if (!IsRoutable())\n-    {\n+    } else if (!IsRoutable()) {\n+        // all other unroutable addresses belong to the same group\n         nBits = 0;\n-    }\n-    // for IPv4 addresses, '1' + the 16 higher-order bits of the IP\n-    // includes mapped IPv4, SIIT translated IPv4, and the well-known prefix\n-    else if (IsIPv4() || IsRFC6145() || IsRFC6052())\n-    {\n-        nStartByte = 12;\n-    }\n-    // for 6to4 tunnelled addresses, use the encapsulated IPv4 address\n-    else if (IsRFC3964())\n-    {\n-        nStartByte = 2;\n-    }\n-    // for Teredo-tunnelled IPv6 addresses, use the encapsulated IPv4 address\n-    else if (IsRFC4380())\n-    {\n-        vchRet.push_back(GetByte(3) ^ 0xFF);\n-        vchRet.push_back(GetByte(2) ^ 0xFF);\n+    } else if (HasLinkedIPv4()) {\n+        // IPv4 addresses (and mapped IPv4 addresses) use /16 groups\n+        uint32_t ipv4 = GetLinkedIPv4();\n+        vchRet.push_back((ipv4 >> 24) & 0xFF);\n+        vchRet.push_back((ipv4 >> 16) & 0xFF);\n         return vchRet;\n-    }\n-    else if (IsTor())\n-    {\n+    } else if (IsTor()) {\n         nStartByte = 6;\n         nBits = 4;\n-    }\n-    // for he.net, use /36 groups\n-    else if (GetByte(15) == 0x20 && GetByte(14) == 0x01 && GetByte(13) == 0x04 && GetByte(12) == 0x70)\n+    } else if (GetByte(15) == 0x20 && GetByte(14) == 0x01 && GetByte(13) == 0x04 && GetByte(12) == 0x70) {\n+        // for he.net, use /36 groups\n         nBits = 36;\n-    // for the rest of the IPv6 network, use /32 groups\n-    else\n+    } else {\n+        // for the rest of the IPv6 network, use /32 groups\n         nBits = 32;\n+    }\n \n     // push our ip onto vchRet byte by byte...\n     while (nBits >= 8)"
      },
      {
        "sha": "1270e716061375bef8e2a92bd42e3db4300f4121",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38c2395d7a905c87dc4630031849fd8e403e61bf/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38c2395d7a905c87dc4630031849fd8e403e61bf/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=38c2395d7a905c87dc4630031849fd8e403e61bf",
        "patch": "@@ -80,6 +80,11 @@ class CNetAddr\n         bool GetInAddr(struct in_addr* pipv4Addr) const;\n         uint32_t GetNetClass() const;\n \n+        //! For IPv4, mapped IPv4, SIIT translated IPv4, Teredo, 6to4 tunneled addresses, return the relevant IPv4 address as a uint32.\n+        uint32_t GetLinkedIPv4() const;\n+        //! Whether this address has a linked IPv4 address (see GetLinkedIPv4()).\n+        bool HasLinkedIPv4() const;\n+\n         // The AS on the BGP path to the node we use to diversify\n         // peers in AddrMan bucketing based on the AS infrastructure.\n         // The ip->AS mapping depends on how asmap is constructed."
      }
    ]
  },
  {
    "sha": "c86bc144081f960347232546f7d22deb65d27deb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODZiYzE0NDA4MWY5NjAzNDcyMzI1NDZmN2QyMmRlYjY1ZDI3ZGVi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-31T00:46:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-31T22:51:37Z"
      },
      "message": "Make asmap Interpret tolerant of malicious map data",
      "tree": {
        "sha": "cab22a1c6604adb9473ee19da0f5a1524e286b2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cab22a1c6604adb9473ee19da0f5a1524e286b2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c86bc144081f960347232546f7d22deb65d27deb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c86bc144081f960347232546f7d22deb65d27deb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c86bc144081f960347232546f7d22deb65d27deb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c86bc144081f960347232546f7d22deb65d27deb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38c2395d7a905c87dc4630031849fd8e403e61bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c2395d7a905c87dc4630031849fd8e403e61bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38c2395d7a905c87dc4630031849fd8e403e61bf"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 24,
      "deletions": 18
    },
    "files": [
      {
        "sha": "60bd27bf909e3f8dc6151d49bcf2ab37156615f6",
        "filename": "src/util/asmap.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 18,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c86bc144081f960347232546f7d22deb65d27deb/src/util/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c86bc144081f960347232546f7d22deb65d27deb/src/util/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/asmap.cpp?ref=c86bc144081f960347232546f7d22deb65d27deb",
        "patch": "@@ -8,13 +8,14 @@\n \n namespace {\n \n-uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, const std::vector<bool>::const_iterator& endpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n {\n     uint32_t val = minval;\n     bool bit;\n     for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n         bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n         if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            if (bitpos == endpos) break;\n             bit = *bitpos;\n             bitpos++;\n         } else {\n@@ -24,6 +25,7 @@ uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, c\n             val += (1 << *bit_sizes_it);\n         } else {\n             for (int b = 0; b < *bit_sizes_it; b++) {\n+                if (bitpos == endpos) break;\n                 bit = *bitpos;\n                 bitpos++;\n                 val += bit << (*bit_sizes_it - 1 - b);\n@@ -35,63 +37,67 @@ uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, c\n }\n \n const std::vector<uint8_t> TYPE_BIT_SIZES{0, 0, 1};\n-uint32_t DecodeType(std::vector<bool>::const_iterator& bitpos)\n+uint32_t DecodeType(std::vector<bool>::const_iterator& bitpos, const std::vector<bool>::const_iterator& endpos)\n {\n-    return DecodeBits(bitpos, 0, TYPE_BIT_SIZES);\n+    return DecodeBits(bitpos, endpos, 0, TYPE_BIT_SIZES);\n }\n \n const std::vector<uint8_t> ASN_BIT_SIZES{15, 16, 17, 18, 19, 20, 21, 22, 23, 24};\n-uint32_t DecodeASN(std::vector<bool>::const_iterator& bitpos)\n+uint32_t DecodeASN(std::vector<bool>::const_iterator& bitpos, const std::vector<bool>::const_iterator& endpos)\n {\n-    return DecodeBits(bitpos, 1, ASN_BIT_SIZES);\n+    return DecodeBits(bitpos, endpos, 1, ASN_BIT_SIZES);\n }\n \n \n const std::vector<uint8_t> MATCH_BIT_SIZES{1, 2, 3, 4, 5, 6, 7, 8};\n-uint32_t DecodeMatch(std::vector<bool>::const_iterator& bitpos)\n+uint32_t DecodeMatch(std::vector<bool>::const_iterator& bitpos, const std::vector<bool>::const_iterator& endpos)\n {\n-    return DecodeBits(bitpos, 2, MATCH_BIT_SIZES);\n+    return DecodeBits(bitpos, endpos, 2, MATCH_BIT_SIZES);\n }\n \n \n const std::vector<uint8_t> JUMP_BIT_SIZES{5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};\n-uint32_t DecodeJump(std::vector<bool>::const_iterator& bitpos)\n+uint32_t DecodeJump(std::vector<bool>::const_iterator& bitpos, const std::vector<bool>::const_iterator& endpos)\n {\n-    return DecodeBits(bitpos, 17, JUMP_BIT_SIZES);\n+    return DecodeBits(bitpos, endpos, 17, JUMP_BIT_SIZES);\n }\n \n }\n \n uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n {\n     std::vector<bool>::const_iterator pos = asmap.begin();\n+    const std::vector<bool>::const_iterator endpos = asmap.end();\n     uint8_t bits = ip.size();\n-    uint8_t default_asn = 0;\n+    uint32_t default_asn = 0;\n     uint32_t opcode, jump, match, matchlen;\n-    while (1) {\n-        assert(pos != asmap.end());\n-        opcode = DecodeType(pos);\n+    while (pos != endpos) {\n+        opcode = DecodeType(pos, endpos);\n         if (opcode == 0) {\n-            return DecodeASN(pos);\n+            return DecodeASN(pos, endpos);\n         } else if (opcode == 1) {\n-            jump = DecodeJump(pos);\n+            jump = DecodeJump(pos, endpos);\n+            if (bits == 0) break;\n             if (ip[ip.size() - bits]) {\n+                if (jump >= endpos - pos) break;\n                 pos += jump;\n             }\n             bits--;\n         } else if (opcode == 2) {\n-            match = DecodeMatch(pos);\n+            match = DecodeMatch(pos, endpos);\n             matchlen = CountBits(match) - 1;\n             for (uint32_t bit = 0; bit < matchlen; bit++) {\n+                if (bits == 0) break;\n                 if ((ip[ip.size() - bits]) != ((match >> (matchlen - 1 - bit)) & 1)) {\n                     return default_asn;\n                 }\n                 bits--;\n             }\n         } else if (opcode == 3) {\n-            default_asn = DecodeASN(pos);\n+            default_asn = DecodeASN(pos, endpos);\n         } else {\n-            assert(0);\n+            break;\n         }\n     }\n+    return 0; // 0 is not a valid ASN\n }"
      }
    ]
  }
]