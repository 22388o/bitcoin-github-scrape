[
  {
    "sha": "5e447ad9b71a2b40431acc0f99967ba14b014cb5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTQ0N2FkOWI3MWEyYjQwNDMxYWNjMGY5OTk2N2JhMTRiMDE0Y2I1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-01-12T22:57:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-01-12T23:43:20Z"
      },
      "message": "Add 'hdderive' RPC, a generic BIP32 calculator",
      "tree": {
        "sha": "b5f0f54b1ee181e60286ddcc6574898e01154caa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5f0f54b1ee181e60286ddcc6574898e01154caa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e447ad9b71a2b40431acc0f99967ba14b014cb5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e447ad9b71a2b40431acc0f99967ba14b014cb5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e447ad9b71a2b40431acc0f99967ba14b014cb5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e447ad9b71a2b40431acc0f99967ba14b014cb5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be2fb2d603476d7490279cf6db034adf1dee6dd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be2fb2d603476d7490279cf6db034adf1dee6dd3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be2fb2d603476d7490279cf6db034adf1dee6dd3"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 146,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1aedcd0975298dccc7b11d773445cfd684e28b05",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e447ad9b71a2b40431acc0f99967ba14b014cb5/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e447ad9b71a2b40431acc0f99967ba14b014cb5/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=5e447ad9b71a2b40431acc0f99967ba14b014cb5",
        "patch": "@@ -403,16 +403,32 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n         SetData(Params().Base58Prefix(Type), vch, vch+Size);\n     }\n \n+    void SetString(const std::string &str) {\n+        CBase58Data::SetString(str.c_str(), 4);\n+    }\n+\n+    bool IsValid() const {\n+        if (vchVersion != Params().Base58Prefix(Type))\n+            return false;\n+        if (vchData.size() != Size)\n+            return false;\n+        return true;\n+    }\n+\n     K GetKey() {\n         K ret;\n-        ret.Decode(&vchData[0], &vchData[Size]);\n+        ret.Decode(&vchData[0]);\n         return ret;\n     }\n \n     CBitcoinExtKeyBase(const K &key) {\n         SetKey(key);\n     }\n \n+    CBitcoinExtKeyBase(const std::string &str) {\n+        SetString(str);\n+    }\n+\n     CBitcoinExtKeyBase() {}\n };\n "
      },
      {
        "sha": "5aa85cb94d59ee87b4bfe420df6b9d4d9f5038e3",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e447ad9b71a2b40431acc0f99967ba14b014cb5/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e447ad9b71a2b40431acc0f99967ba14b014cb5/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=5e447ad9b71a2b40431acc0f99967ba14b014cb5",
        "patch": "@@ -295,6 +295,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"lockunspent\",            &lockunspent,            false,     false,      true },\n     { \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n     { \"settxfee\",               &settxfee,               false,     false,      true },\n+    { \"hdderive\",               &hdderive,               true,      true,       false },\n \n     /* Wallet-enabled mining */\n     { \"getgenerate\",            &getgenerate,            true,      false,      false },"
      },
      {
        "sha": "b595464649c0fed40fc12e2fb91fb6691c3722b2",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e447ad9b71a2b40431acc0f99967ba14b014cb5/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e447ad9b71a2b40431acc0f99967ba14b014cb5/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=5e447ad9b71a2b40431acc0f99967ba14b014cb5",
        "patch": "@@ -156,6 +156,7 @@ extern json_spirit::Value walletlock(const json_spirit::Array& params, bool fHel\n extern json_spirit::Value encryptwallet(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value validateaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value hdderive(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "a06812ffdaf7e8340b5c8c50e03b6a31b16281fb",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 126,
        "deletions": 0,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e447ad9b71a2b40431acc0f99967ba14b014cb5/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e447ad9b71a2b40431acc0f99967ba14b014cb5/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=5e447ad9b71a2b40431acc0f99967ba14b014cb5",
        "patch": "@@ -1869,4 +1869,130 @@ Value settxfee(const Array& params, bool fHelp)\n     return true;\n }\n \n+bool ParseExtPubKey(const string &str, CExtPubKey &key) {\n+    CBitcoinExtPubKey skey;\n+    skey.SetString(str);\n+    if (skey.IsValid()) {\n+        key = skey.GetKey();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool ParseExtKey(const string &str, CExtKey &key) {\n+    CBitcoinExtKey skey;\n+    skey.SetString(str);\n+    if (skey.IsValid()) {\n+        key = skey.GetKey();\n+        return true;\n+    }\n+    if (IsHex(str)) {\n+        std::vector<unsigned char> seed = ParseHex(str);\n+        if (seed.size() >= 16) {\n+            key.SetMaster(&seed[0], seed.size());\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+Object ExtPubKeyToJSON(const CExtPubKey &key) {\n+    Object o;\n+    o.push_back(Pair(\"depth\", (int)key.nDepth));\n+    if (key.nDepth > 0) {\n+        o.push_back(Pair(\"index\", (int64_t)(key.nChild & 0x7FFFFFFFUL)));\n+        o.push_back(Pair(\"isprime\", !!(key.nChild & 0x80000000UL)));\n+        o.push_back(Pair(\"parentfpr\", HexStr(&key.vchFingerprint[0], &key.vchFingerprint[4])));\n+    }\n+    CKeyID keyid = key.pubkey.GetID();\n+    uint32_t fpr = keyid.GetLow64() & 0xFFFFFFFFUL;\n+    unsigned char cfpr[4]; cfpr[0] = fpr & 0xFF; cfpr[1] = (fpr >> 8) & 0xFF; cfpr[2] = (fpr >> 16) & 0xFF; cfpr[3] = (fpr >> 24);\n+    o.push_back(Pair(\"fpr\", HexStr(&cfpr[0], &cfpr[4])));\n+    o.push_back(Pair(\"address\", CBitcoinAddress(keyid).ToString()));\n+    o.push_back(Pair(\"chaincode\", HexStr(&key.vchChainCode[0], &key.vchChainCode[32])));\n+    o.push_back(Pair(\"pubkey\", HexStr(key.pubkey.begin(), key.pubkey.end())));\n+    o.push_back(Pair(\"extpubkey\", CBitcoinExtPubKey(key).ToString()));\n+    return o;\n+}\n \n+Object ExtKeyToJSON(const CExtKey &key) {\n+    Object o = ExtPubKeyToJSON(key.Neuter());\n+    o.push_back(Pair(\"privkey\", CBitcoinSecret(key.key).ToString()));\n+    o.push_back(Pair(\"extprivkey\", CBitcoinExtKey(key).ToString()));\n+    return o;\n+}\n+\n+Value hdderive(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"hdderive path\\n\"\n+            \"\\nDerive a HD wallet extended key.\\n\"\n+            \"1. path           (string, required) A HD wallet path specification\\n\"\n+            \"   Of the form: extpriv[/derivations], extpub[/derivations], seed[/derivations]\\n\"\n+            \"   Extpriv and extpub are base58-encoded extended public or private keys.\\n\"\n+            \"   A seed is a hexadecimal string representing at least 16 bytes of data.\\n\"\n+            \"   Derivations are decimal integers, optionally suffixed with a ' character,\\n\"\n+            \"   separated by slashes.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"depth\\\" : n,            (numeric) The derivation depth (0 means master)\\n\"\n+            \"  \\\"index\\\" : n,            (numeric) The derivation index, without the high bit\\n\"\n+            \"  \\\"isprime\\\" : true|false, (bool) Whether private derivation was used\\n\"\n+            \"  \\\"parentfpr\\\" : \\\"hex\\\",    (string) The fingerprint of the parent key\\n\"\n+            \"                          (index, isprime and parentfpr are only present for depth>0)\\n\"\n+            \"  \\\"fpr\\\" : \\\"hex\\\",          (string) The fingerprint of this key\\n\"\n+            \"  \\\"address\\\" : \\\"addr\\\",     (string) The address for pay-to-pubkeyhash to this key\\n\"\n+            \"  \\\"chaincode\\\" : \\\"hex\\\",    (string) The chaincode for this key\\n\"\n+            \"  \\\"pubkey\\\" : \\\"hex\\\",       (string) The public key for this entry\\n\"\n+            \"  \\\"extpubkey\\\" : \\\"b58\\\",    (string) The extended public key for this entry\\n\"\n+            \"  \\\"privkey\\\" : \\\"b58\\\",      (string) The private key for this entry\\n\"\n+            \"  \\\"extprivkey\\\" : \\\"b58\\\"    (string) The extended private key for this entry\\n\"\n+            \"                          (privkey and extprivkey are only present when starting from\\n\"\n+            \"                          a seed or an extended private key)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"hdderive\", \"\\\"000102030405060708090a0b0c0d0e0f/1'/0/3\\\"\")\n+            + HelpExampleRpc(\"hdderive\", \"\\\"xpub6ASuArnXKPbfEwhqN6e3mwBcDTgzisQN1wXN9BJcM47sSikHjJf3UFHKkNAWbWMiGj7Wf5uMash7SyYq527Hqck2AxYysAA7xmALppuCkwQ/2\\\"\")\n+        );\n+\n+    string path = params[0].get_str();\n+    string root = path;\n+    std::vector<uint32_t> derives;\n+    size_t pos = path.find('/');\n+    if (pos != string::npos) {\n+        root = path.substr(0, pos);\n+        do {\n+            if (path[pos] != '/')\n+                JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected derivations of the form \\\"/[num]\\\" or \\\"/[num]'\\\"\");\n+            pos++;\n+            size_t pos2 = path.find_first_not_of(\"0123456789\", pos);\n+            uint32_t num = strtoul(path.substr(pos, pos2 == string::npos ? pos2 : pos2 - pos).c_str(), NULL, 0);\n+            if (pos2 != string::npos && path[pos2] == '\\'') {\n+                pos2++;\n+                num |= 0x80000000UL;\n+            }\n+            pos = pos2;\n+            derives.push_back(num);\n+        } while(pos != string::npos && pos != path.size());\n+    }\n+\n+    CExtPubKey pubkey;\n+    CExtKey key;\n+\n+    if (ParseExtPubKey(root, pubkey)) {\n+        BOOST_FOREACH(uint32_t derive, derives) {\n+            if (derive & 0x80000000UL)\n+                JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, prime derivation is not possible from public key\");\n+            pubkey.Derive(pubkey, derive);\n+        }\n+        return ExtPubKeyToJSON(pubkey);\n+    } else if (ParseExtKey(root, key)) {\n+        BOOST_FOREACH(uint32_t derive, derives)\n+            key.Derive(key, derive);\n+        return ExtKeyToJSON(key);\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected extended public or private key, or hex seed\");\n+    }\n+    return Value::null;\n+}"
      },
      {
        "sha": "992fc5adffbb98a5c9384c6a7fc3565a158d2756",
        "filename": "src/test/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e447ad9b71a2b40431acc0f99967ba14b014cb5/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e447ad9b71a2b40431acc0f99967ba14b014cb5/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=5e447ad9b71a2b40431acc0f99967ba14b014cb5",
        "patch": "@@ -65,6 +65,7 @@ test_bitcoin_SOURCES = \\\n if ENABLE_WALLET\n test_bitcoin_SOURCES += \\\n    accounting_tests.cpp \\\n+   bip32_tests.cpp \\\n    wallet_tests.cpp \\\n    rpc_wallet_tests.cpp\n endif"
      }
    ]
  }
]