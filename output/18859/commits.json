[
  {
    "sha": "b56607a89ba112083f2b0a7b64ab18d66b26e2be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTY2MDdhODliYTExMjA4M2YyYjBhN2I2NGFiMThkNjZiMjZlMmJl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-03T18:41:01Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-03T18:42:14Z"
      },
      "message": "Remove CCoinsViewCache::GetValueIn(...)",
      "tree": {
        "sha": "2577d5df49e49317522c15c0907976b46e917651",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2577d5df49e49317522c15c0907976b46e917651"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b56607a89ba112083f2b0a7b64ab18d66b26e2be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b56607a89ba112083f2b0a7b64ab18d66b26e2be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b56607a89ba112083f2b0a7b64ab18d66b26e2be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b56607a89ba112083f2b0a7b64ab18d66b26e2be/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "844d2070a2c0106bb7a54be5cad7d4da4d9cd55e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 0,
      "deletions": 27
    },
    "files": [
      {
        "sha": "86f9a0bf67393d2a362114d057bea2d400ab8131",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b56607a89ba112083f2b0a7b64ab18d66b26e2be/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b56607a89ba112083f2b0a7b64ab18d66b26e2be/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=b56607a89ba112083f2b0a7b64ab18d66b26e2be",
        "patch": "@@ -47,8 +47,6 @@ static void CCoinsCaching(benchmark::State& state)\n     while (state.KeepRunning()) {\n         bool success = AreInputsStandard(tx_1, coins);\n         assert(success);\n-        CAmount value = coins.GetValueIn(tx_1);\n-        assert(value == (50 + 21 + 22) * COIN);\n     }\n     ECC_Stop();\n }"
      },
      {
        "sha": "7b76c13f98ca1f33904d3e2c5ef243f4914be94a",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b56607a89ba112083f2b0a7b64ab18d66b26e2be/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b56607a89ba112083f2b0a7b64ab18d66b26e2be/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=b56607a89ba112083f2b0a7b64ab18d66b26e2be",
        "patch": "@@ -233,18 +233,6 @@ unsigned int CCoinsViewCache::GetCacheSize() const {\n     return cacheCoins.size();\n }\n \n-CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n-{\n-    if (tx.IsCoinBase())\n-        return 0;\n-\n-    CAmount nResult = 0;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        nResult += AccessCoin(tx.vin[i].prevout).out.nValue;\n-\n-    return nResult;\n-}\n-\n bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n {\n     if (!tx.IsCoinBase()) {"
      },
      {
        "sha": "dcec741998ed935c1fe71af1c4cb12db375456a4",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b56607a89ba112083f2b0a7b64ab18d66b26e2be/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b56607a89ba112083f2b0a7b64ab18d66b26e2be/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=b56607a89ba112083f2b0a7b64ab18d66b26e2be",
        "patch": "@@ -315,16 +315,6 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Calculate the size of the cache (in bytes)\n     size_t DynamicMemoryUsage() const;\n \n-    /**\n-     * Amount of bitcoins coming in to a transaction\n-     * Note that lightweight clients may not know anything besides the hash of previous transactions,\n-     * so may not be able to calculate this.\n-     *\n-     * @param[in] tx    transaction for which we are checking input total\n-     * @return  Sum of value of all inputs (scriptSigs)\n-     */\n-    CAmount GetValueIn(const CTransaction& tx) const;\n-\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n "
      },
      {
        "sha": "58b3e8aedca4e28f3c4754a519f98831a8ade704",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b56607a89ba112083f2b0a7b64ab18d66b26e2be/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b56607a89ba112083f2b0a7b64ab18d66b26e2be/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=b56607a89ba112083f2b0a7b64ab18d66b26e2be",
        "patch": "@@ -324,8 +324,6 @@ class CTransaction\n \n     // Return sum of txouts.\n     CAmount GetValueOut() const;\n-    // GetValueIn() is a method on CCoinsViewCache, because\n-    // inputs must be known to compute value in.\n \n     /**\n      * Get the total transaction size in bytes, including witness data."
      },
      {
        "sha": "ddbc68f8e2b5cd18625ca58a8db55a0905531cba",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b56607a89ba112083f2b0a7b64ab18d66b26e2be/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b56607a89ba112083f2b0a7b64ab18d66b26e2be/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=b56607a89ba112083f2b0a7b64ab18d66b26e2be",
        "patch": "@@ -305,7 +305,6 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].scriptPubKey << OP_1;\n \n     BOOST_CHECK(AreInputsStandard(CTransaction(t1), coins));\n-    BOOST_CHECK_EQUAL(coins.GetValueIn(CTransaction(t1)), (50+21+22)*CENT);\n }\n \n static void CreateCreditAndSpend(const FillableSigningProvider& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)"
      }
    ]
  }
]