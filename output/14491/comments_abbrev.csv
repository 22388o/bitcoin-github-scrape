meshcollider,2018-10-16T23:48:54Z,"After discussion with sipa, closing for now, will come back to this after #14454 is merged",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-430440099,430440099,
achow101,2018-11-01T19:13:13Z,"Since #14454 has been merged, this can be reopened?",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-435153258,435153258,
sipa,2018-11-01T19:20:27Z,I believe a simpler approach is possible on top of #14565.,https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-435155301,435155301,
meshcollider,2018-11-01T19:24:36Z,Yep I'll reopen this when rebased on 14565,https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-435156556,435156556,
meshcollider,2018-11-03T00:23:09Z,"Rebased on https://github.com/bitcoin/bitcoin/pull/14565\n\nStill planning on adding more tests + release notes, please don't nitpick the lack of tests yet",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-435544886,435544886,
meshcollider,2018-11-05T23:33:34Z,"@Sjors thanks for the feedback :) \n\n> If I use watchonly: true, then getaddressinfo doesn't show a descriptor and it says solvable: false, which seems wrong (the latter also happens without cherry-pick).\n\nIt should only watch for the scriptPubKey and import no other information, watch-only is a different requirement than being solvable without private keys.\n\n>  the origin info in the d",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-436075791,436075791,
sipa,2018-11-05T23:39:47Z,"@MeshCollider @Sjors I was imagining that ""watchonly"" would be implicit when using descriptors (`addr()` and `raw()` would be watchonly; anything else would result in a solvable result).\n\nThe reason for ""watchonly"" is so that users need to be explicit about the fact they _don't_ want solvability (generally, you should always want solvability, but if you can't, you can tell importmulti that it'",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-436077191,436077191,
Sjors,2018-11-06T08:56:52Z,"@sipa I like your suggestion. In that case we should disallow usage of the `watchonly` param when combined with a descriptor.\n\nRegarding getting origin information from the descriptors, @achow101  just rebased #14021 on top of this PR. It's a non trivial change. Perhaps for this PR it's best to not store origin information. Just make sure that if you do `walletcreatefundedpsbt` with bip32 flag",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-436177401,436177401,
meshcollider,2018-11-06T10:02:11Z,I don't see the problem if you want to add a ranged descriptor as watch only to import all the scriptPubKeys but not retain any more info than that?,https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-436197110,436197110,
Sjors,2018-11-06T10:15:48Z,IIUC you would indicate that in the descriptor by wrapping the result in `addr(...)`. Mandating that removes ambiguity from how a descriptor ends up in a wallet.,https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-436201303,436201303,
meshcollider,2018-11-06T11:19:28Z,"@Sjors It was my understanding that `addr(...)` cannot contain another type of descriptor or key (e.g. a ranged BIP32 key), only the base58/bech32 encoded address formats. If I'm wrong then I'm happy to change this PR, @sipa could weigh in here",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-436218992,436218992,
instagibbs,2018-11-07T18:15:40Z,xpub byte prefix mismatch results in very generic error; would be nice to give something more meaningful ,https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-436723660,436723660,
DrahtBot,2018-11-08T21:28:17Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15032](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15032.html) (Nit fixes for PR 14565 by MeshCollider)\n* ",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-437162334,437162334,
instagibbs,2018-11-09T17:06:00Z,"~~Can you rebase this on most recent #14565 ? It has a few logic fixes.~~ discussing what I think are bugs\n\nIn addition, you can not ignore the `watch_only` field for descriptor import. `watch_only` needs to be set to true if the descriptor deals with public keys only: https://github.com/bitcoin/bitcoin/pull/14565/files#diff-522490d83dce5375d423b23886e4125eR1019 (this code is from the refreshe",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-437426180,437426180,
Sjors,2018-12-12T09:34:03Z,"Now might be a good to time to rebase it, because testing this might reveal anything we've missed in the overhaul PR #14565.",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-446522157,446522157,
meshcollider,2018-12-13T01:03:21Z,"I've rebased this but haven't tested, it was a bit of a messy rebase and still a couple of things to address such as adding the warnings to the descriptor import function, plus more tests. I'll hopefully finish those things off in the next couple of days too.",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-446803700,446803700,
Sjors,2018-12-13T09:24:05Z,"By ""haven't tested"" you mean ""haven't compiled"" right? :-)\n\nIt looks like a tricky rebase. E.g. your code is referring to `import_data.pubkeys` and `import_data.privkeys`, the latter has been renamed to `import_data.used_keys`, but the former doesn't exist anymore.\n\nThe `ProcessImport` function is now duplicated.",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-446898912,446898912,
meshcollider,2018-12-14T07:32:37Z,"I've now finished rebasing, lightly tested, added some warnings, and added a couple more tests. \n\nThere is one thing that still needs addressing, which is that a descriptor which provides a private key should import that private key. Currently it only Expands() the descriptor and imports the public keys. The implementation of that is likely going to require some discussion so I will open a fut",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-447240211,447240211,
jnewbery,2018-12-20T20:19:22Z,"Concept ACK. I've had a quick skim of the code. A couple of high-level questions:\n\n- have you considered implementing this as a separate `importdescriptor` RPC method? There are enough modal arguments (eg redeemscript/witnessscript/pubkeys/watchonly(?) should only be used when importing addresses/scripts, range should only be used when importing descriptors) that it seems like this makes sense",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-449123454,449123454,
instagibbs,2018-12-20T20:22:02Z,@jnewbery IIRC a unique RPC would likely be reserved for when wallet actually has descriptor records and can have a clean API break.,https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-449124103,449124103,
Sjors,2018-12-21T13:24:24Z,+1 for including private keys directly in the descriptor rather than a separate keys argument,https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-449387508,449387508,
meshcollider,2018-12-21T21:16:23Z,"@jnewbery @Sjors as mentioned above\n\n>There is one thing that still needs addressing, which is that a descriptor which provides a private key should import that private key. Currently it only Expands() the descriptor and imports the public keys. The implementation of that is likely going to require some discussion so I will open a future PR for that, and leave it as a TODO for now.\n\nSo rig",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-449500333,449500333,
meshcollider,2018-12-24T11:21:34Z,Rebased,https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-449721608,449721608,
jnewbery,2019-01-09T22:25:56Z,"@MeshCollider - I know you're travelling so no rush on an answer to this, but do you have thoughts about my questions in IRC:\n\n```\n15:40 < jnewbery> meshcollider: what's the eventual plan for private keys in importmulti with descriptors? After #15024, there are two ways of importing the privkeys: either in the descriptor itself or with the keys argument. Would it be better to only allow impo",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-452892414,452892414,
promag,2019-01-09T22:32:41Z,"> Would it be better to only allow importing privkeys from the descriptor itself?\n\n@jnewbery you mean deprecate `keys` in `importmulti` or error if `keys` and `desc` are used? ",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-452894386,452894386,
jnewbery,2019-01-09T22:54:24Z,"> you mean deprecate keys in importmulti or error if keys and desc are used?\n\nWe can't deprecate `keys` in `importmulti`. That field is still required if importing a script not using a descriptor. My suggestion would be to error if `desc` and `keys` are provided in the same import object (in the same way that this PR errors if both `desc` and `scriptPubKey` are provided).\n\nBut perhaps I do",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-452900217,452900217,
sipa,2019-01-09T23:32:17Z,"@jnewbery I think it's reasonable to have a shared fully-public descriptor that all participants know, and each has their own private key stored separately. It may be inconvenient to first need a utility to combine the public descriptor with private keys before importing.",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-452909497,452909497,
meshcollider,2019-01-10T10:41:43Z,"Agree with sipa, I don't see a reason for limiting one way or the other just for the sake of limitation, this flexibility seems potentially useful unless there's a case against it",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-453050808,453050808,
jnewbery,2019-01-11T22:10:04Z,"I've had a go at rearranging the commits for this PR in a branch here: https://github.com/jnewbery/bitcoin/tree/pr14491.rearrange. It splits up the code move and new functionality, so with `-w` and `--color-moved=zebra` for the move commits, it should be a lot easier to review (review hints are in the commit log). I've also made a very minor change that undoes the reversion here: https://github.co",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-453673095,453673095,
Sjors,2019-01-15T12:39:31Z,"@jnewbery thanks, that is indeed way more readable. For those looking on Github, you can use `?w=1`. So that just leaves my request for more tests.\n\nI'm quite happy with how short the meat of this change in https://github.com/bitcoin/bitcoin/commit/e7c45d7eb425fbe8c7b9f92d21d10c99145d3771 is.",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-454378499,454378499,
meshcollider,2019-01-16T09:56:58Z,"@jnewbery Thanks! I've grabbed your branch, and I'll address the few other comments shortly",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-454719824,454719824,
jnewbery,2019-01-16T15:29:26Z,"`wallet_importmulti.py` fails when rebased on master due to test refactor.\n\nI've rebased my branch on master and fixed the test here: https://github.com/jnewbery/bitcoin/commit/087ba0734ee24438b2f495367c71fb257bb5b760",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-454820724,454820724,
sipa,2019-01-25T01:17:48Z,"I think you've now changed it to never importing public keys.\n\nIf I import ""pkh(036f1aef8329e88a8e7dca56a4e8f908697555478b26709f7513eba54db4acea21)"", and subsequently call `getaddressinfo 1H2JaLY37d3PeqGgMV6yDStzHqenoRcCYF`, it says ""solvable: False"". All information for solvability is available, however.\n",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-457420341,457420341,
Sjors,2019-01-25T11:23:19Z,"The following tests reproduces what @sipa found:\n\n```python\n        # Test importing of a P2PKH address via descriptor\n        key = get_key(self.nodes[0])\n        self.log.info(""Should import a p2pkh address from descriptor"")\n        self.test_importmulti({""desc"": ""pkh("" + key.pubkey + "")"",\n                               ""timestamp"": ""now"",\n                               ""label"": ",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-457542647,457542647,
ryanofsky,2019-01-25T14:38:31Z,"More IRC discussion: http://www.erisian.com.au/bitcoin-core-dev/log-2019-01-24.html#l-742\n\nBeyond the immediate bug that's been found, I'm confused about the pubkey issues being discussed:\nhttps://github.com/bitcoin/bitcoin/pull/14491#discussion_r247192015, https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225408327. Just at a really high level it's not clear to me if there is:\n\n",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-457592612,457592612,
sipa,2019-01-25T17:58:30Z,"@ryanofsky I suspect this is subjective, but this is my view:\n\n* Due to the inherent quirks in the current IsMine logic, we can't guarantee that *just* the exact scriptPubKey implied by the provided descriptor will match. If that was possible, it would be the obvious solution - but it's a choice we make by implementing this as a layer on top of the existing IsMine logic.\n* A strong requireme",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-457661534,457661534,
sipa,2019-01-25T18:38:38Z,"@MeshCollider See #15263, that should make it easier.",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-457676056,457676056,
jonasschnelli,2019-01-29T21:03:27Z,"Tested a bit and works as expected (limited tests).\nA nitpick would be why the range is a JSON object rather then an array with two items.",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-458705799,458705799,
meshcollider,2019-01-29T23:57:26Z,"@jonasschnelli I had the array initially, but the RPCHelpMan doesn't support that kind of help output so I just changed it",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-458755954,458755954,
Sjors,2019-02-02T20:51:52Z,"I took a stab at rebasing this, but it was absolute hell :-) Maybe @achow101 has more luck...",https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-459998190,459998190,
achow101,2019-02-03T03:53:02Z,https://github.com/achow101/bitcoin/tree/rebase-14491 is a rebase of this which handles the merge conflicts caused by #15235. It does not account for #15263 (even though that is in it's history).,https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-460020798,460020798,
meshcollider,2019-02-05T06:44:37Z,I've rebased and squashed as well as added some more tests for descriptor imports and fixed the public key issue now #15263 has gone in,https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-460530914,460530914,
achow101,2019-02-05T15:25:33Z,utACK b985e9c850ea682eced7021faf6c7c835066c61b,https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-460679053,460679053,
sipa,2018-10-16T06:11:05Z,"For the same reason as pointed out in the other PR, you can't do this; you're going to mark payments to individual multisig pubkeys as incoming payments.\n\nYou'll need a way to restrict this to P2PK, P2WPKH, and P2SH/P2WSH wrapped versions of those.\n\nEDIT: I realize that when it's about private keys, the same effect applies too, and there it can't be avoided. Perhaps this stuff is just to s",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225408327,225408327,src/wallet/rpcdump.cpp
promag,2018-10-16T10:32:07Z,"```cpp\nif (data.exists(""scriptPubKey"") && data.exists(""descriptor"")) {\n    // throw error because these should be exclusive?\n}\n```\nand add test.",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225484727,225484727,src/wallet/rpcdump.cpp
promag,2018-10-16T10:41:39Z,Missing test.,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225487379,225487379,src/wallet/rpcdump.cpp
promag,2018-10-16T10:41:50Z,Missing test.,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225487418,225487418,src/wallet/rpcdump.cpp
promag,2018-10-16T10:42:14Z,nit `++i`.,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225487555,225487555,src/wallet/rpcdump.cpp
promag,2018-10-16T10:42:48Z,nit `++i`;,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225487698,225487698,src/wallet/rpcdump.cpp
promag,2018-10-16T10:43:16Z,Missing test.,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225487854,225487854,src/wallet/rpcdump.cpp
promag,2018-10-16T10:43:40Z,"nit, `ProcessImportDescriptor`.",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225487947,225487947,src/wallet/rpcdump.cpp
promag,2018-10-16T11:10:21Z,"nit, extra `-` :sweat_smile:",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225495251,225495251,doc/release-notes-14454.md
promag,2018-10-16T11:51:14Z,nit space after `if`.,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225505588,225505588,src/wallet/rpcdump.cpp
instagibbs,2018-10-16T13:10:52Z,"Restricting it from multisig(to avoid being tricked as you mention) would make this even more confusing to a user. \n\nUnfortunate. ",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225531603,225531603,src/wallet/rpcdump.cpp
meshcollider,2018-10-16T18:21:27Z,"Mentioned on IRC, but what if we just never import public keys at all, and only either A) add the scriptPubKey as watch only or B) import the private key. If we have the private key then IMO it's less scary, because it's still ""ours"" and we can access the funds",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225654495,225654495,src/wallet/rpcdump.cpp
sipa,2018-10-16T18:40:24Z,You're right; the same concern doesn't exist for private keys as you're obviously able to spend those coins anyway.,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225662278,225662278,src/wallet/rpcdump.cpp
instagibbs,2018-10-16T18:50:50Z,Would not importing the pubkeys affect the wallet's ability to construct PSBT inputs?,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225665843,225665843,src/wallet/rpcdump.cpp
sipa,2018-10-16T18:54:12Z,"Only for things that have PKH/WPKH construction in them (GetPubKey is needed for those, which finds a pubkey based on pubkeyhash).\n\n@MeshCollider To be clear, we do have to import the pubkey for those; otherwise the result is not solvable.",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225666972,225666972,src/wallet/rpcdump.cpp
meshcollider,2018-10-16T23:08:21Z,I said more tests were coming 😅,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r225736677,225736677,src/wallet/rpcdump.cpp
achow101,2018-12-16T19:35:03Z,This variable is unused in this function,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r241992959,241992959,src/wallet/rpcdump.cpp
instagibbs,2018-12-27T17:29:09Z,s/specify the watchonly flag/specify the watchonly flag to suppress this warning/,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r244194544,244194544,src/wallet/rpcdump.cpp
instagibbs,2018-12-27T17:29:28Z,s/do not specify the watchonly flag/do not specify the watchonly flag to suppress this warning/,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r244194592,244194592,src/wallet/rpcdump.cpp
instagibbs,2018-12-27T17:34:55Z,This error message is misleading: An `end` range suffices.,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r244195403,244195403,test/functional/wallet_importmulti.py
instagibbs,2018-12-27T17:45:18Z,Try to import an invalid descriptor as well as one without a range.,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r244196991,244196991,test/functional/wallet_importmulti.py
meshcollider,2019-01-03T11:24:48Z,"@instagibbs I'd argue that specifying an `end` counts as specifying the range, considering the helptext for the rpc",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r244971795,244971795,test/functional/wallet_importmulti.py
Sjors,2019-01-07T14:50:31Z,This could use a test.,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r245677784,245677784,src/wallet/rpcdump.cpp
Sjors,2019-01-07T14:50:59Z,"Also, this and the related warning could use a test.",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r245677951,245677951,src/wallet/rpcdump.cpp
Sjors,2019-01-07T14:52:57Z,Still coming?,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r245678614,245678614,src/wallet/rpcdump.cpp
jnewbery,2019-01-11T16:53:08Z,misindentation. I think the changes to the `warnings` and `result` handling here are an unintentional reversion of the changes from #14565: https://github.com/bitcoin/bitcoin/pull/14565/files#diff-522490d83dce5375d423b23886e4125eR1122.,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r247184235,247184235,src/wallet/rpcdump.cpp
jnewbery,2019-01-11T16:54:43Z,Descriptors will still be a relatively new concept for most users. Is it possible to link to the documentation here: https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md?,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r247184778,247184778,doc/release-notes-14491.md
sipa,2019-01-11T17:17:47Z,"I don't think this is correct, as it will cause import of all involved public keys as watch-only (even for example the public keys that are part of a multisig).",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r247192015,247192015,src/wallet/rpcdump.cpp
jnewbery,2019-01-18T19:46:34Z,I could imagine this being an annoying failure mode if you try to import a ranged descriptor where the range is over something you've already imported. The error message doesn't give any indication of which script_pub_key caused the import to fail.,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r249164864,249164864,src/wallet/rpcdump.cpp
ryanofsky,2019-01-23T21:56:47Z,"In commit ""[wallet] Refactor ProcessImport()"" (34a7ce3d5cf3651e117502ab742087e966cd6ef2)\n\nIt's confusing that these `script` and `dest` variables still declared here at a top level, when their actual usages after this error-checking block are now gone. Would suggest dropping `script` variable and calling `script_pub_keys.emplace(GetScriptForDestination(...))` directly, and just declaring `dest",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r250388156,250388156,src/wallet/rpcdump.cpp
ryanofsky,2019-01-23T22:12:24Z,"In commit ""[wallet] Allow descriptor imports with importmulti"" (a0e341061463a25917d9faf4099219e71f982564)\n\nCould also trigger an error if a range is specified for a non-descriptor import.",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r250393053,250393053,src/wallet/rpcdump.cpp
ryanofsky,2019-01-23T22:15:36Z,"In commit ""[wallet] Allow descriptor imports with importmulti"" (a0e341061463a25917d9faf4099219e71f982564)\n\nCould error check for `0 <= start <= end`",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r250393989,250393989,src/wallet/rpcdump.cpp
ryanofsky,2019-01-23T22:26:37Z,"In commit ""[wallet] Allow descriptor imports with importmulti"" (a0e341061463a25917d9faf4099219e71f982564)\n\nIt seems like all these warnings should be errors. I think the only reason for having warnings and supporting these nonsensical rpc calls was to provide backwards compatibility, which shouldn't be a concern here.",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r250397357,250397357,src/wallet/rpcdump.cpp
ryanofsky,2019-01-23T22:31:46Z,"re: https://github.com/bitcoin/bitcoin/pull/14491#discussion_r247192015\n\nIn commit ""[wallet] Allow descriptor imports with importmulti"" (a0e341061463a25917d9faf4099219e71f982564)\n\n> I don't think this is correct, as it will cause import of all involved public keys as watch-only (even for example the public keys that are part of a multisig).\n\nIs this issue still unresolved? In earlier d",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r250398876,250398876,src/wallet/rpcdump.cpp
ryanofsky,2019-01-23T22:35:06Z,"In commit ""[wallet] Allow descriptor imports with importmulti"" (a0e341061463a25917d9faf4099219e71f982564)\n\n> // This does not take into account threshold multisigs which could be spendable without all keys\n\nWhat does this mean? Is this something that needs to be documented for the user? Something that needs to be fixed later? Comment should be made more clear.\n",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r250399809,250399809,src/wallet/rpcdump.cpp
meshcollider,2019-01-24T23:44:46Z,"@ryanofsky `script` is used below, in the `RecurseImportData` call. I have reduced the scope of `dest` though.",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r250820734,250820734,src/wallet/rpcdump.cpp
meshcollider,2019-01-24T23:44:56Z,Fixed,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r250820770,250820770,src/wallet/rpcdump.cpp
meshcollider,2019-01-24T23:49:08Z,Done,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r250821601,250821601,src/wallet/rpcdump.cpp
meshcollider,2019-01-24T23:49:14Z,Done,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r250821619,250821619,src/wallet/rpcdump.cpp
meshcollider,2019-01-24T23:53:27Z,Fixed,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r250822431,250822431,src/wallet/rpcdump.cpp
kallewoof,2019-01-30T07:11:14Z,Nit: `const auto` for consistency,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r252137642,252137642,src/wallet/rpcdump.cpp
kallewoof,2019-01-30T07:15:03Z,"I think this line deserves to be 3 lines\n```C++\nbool spendable = std::all_of(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), [&](const std::pair<CKeyID, CPubKey>& used_key) {\n   return privkey_map.count(used_key.first) > 0;\n});\n```\nI would even argue it could do with 4\n```C++\nbool spendable = std::all_of(out_keys.pubkeys.begin(), out_keys.pubkeys.end(),\n   [&](const std::pair<C",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r252138433,252138433,src/wallet/rpcdump.cpp
kallewoof,2019-01-30T07:17:30Z,"Could just do\n```C++\n= data.exists(""internal"") && data[""internal""].get_bool()\n```",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r252138889,252138889,src/wallet/rpcdump.cpp
kallewoof,2019-01-30T07:19:15Z,"This sentence looks weird. `""Descriptors and scriptPubKeys cannot be used at the same time.""` maybe?",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r252139232,252139232,src/wallet/rpcdump.cpp
Sjors,2019-02-05T09:50:35Z,Nit: add (TODO to add) `expandRange` method to Descriptor instance,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r253794196,253794196,src/wallet/rpcdump.cpp
meshcollider,2019-02-05T10:20:40Z,@Sjors this TODO is addressed in #15024 :),https://github.com/bitcoin/bitcoin/pull/14491#discussion_r253804289,253804289,src/wallet/rpcdump.cpp
ryanofsky,2019-02-05T17:54:53Z,"re: https://github.com/bitcoin/bitcoin/pull/14491#discussion_r245677784\n\nThese comments don't appear to be resolved, but I think that's ok.",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r253976779,253976779,src/wallet/rpcdump.cpp
ryanofsky,2019-02-05T18:17:05Z,"In commit ""[wallet] Allow descriptor imports with importmulti"" (9f48053d8f9a1feacc96d7e2a00c8a3a67576948)\n\nIt would be really nice to move this duplicated watchonly checking code out of `ProcessLegacy` and `ProcessImportDescriptor` either up into `ProcessImport` or down to into a common helper function. The watchonly checks are weird enough to deal with once, much less twice in two functions w",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r253985234,253985234,src/wallet/rpcdump.cpp
instagibbs,2019-02-05T19:17:08Z,looks like it came: https://github.com/bitcoin/bitcoin/pull/14491/commits/fbb5e935eaf17d603ec62e1a704a174235540b71#diff-3dfbfa462305488434b8d8da81f99de7R613,https://github.com/bitcoin/bitcoin/pull/14491#discussion_r254008101,254008101,src/wallet/rpcdump.cpp
ryanofsky,2019-02-05T19:47:06Z,"re: https://github.com/bitcoin/bitcoin/pull/14491#discussion_r244194544\n\n> s/specify the watchonly flag/specify the watchonly flag to suppress this warning/\n\nNote: implementing this suggestion would make the warning text vary between `ProcessImportLegacy` and `ProcessImportDescriptor`.",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r254019674,254019674,src/wallet/rpcdump.cpp
ryanofsky,2019-02-05T20:12:26Z,"In commit ""[wallet] Allow descriptor imports with importmulti"" (9f48053d8f9a1feacc96d7e2a00c8a3a67576948)\n\nNote: Changes here more are directly related to previous commit ""[wallet] Refactor ProcessImport()"" (a1b25e12a5f57048a4639964d57c0b46eb84cd4e) than this one.",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r254028414,254028414,src/wallet/rpcdump.cpp
ryanofsky,2019-02-05T21:57:26Z,"re: https://github.com/bitcoin/bitcoin/pull/14491#discussion_r247192015\n\nFor future reference, this was fixed by removing `out.pubkeys.emplace` in #15263.\n\nI think it would be helpful to have a comment here noting that this imports the public keys which occur inside P2PKH and P2WPKH descriptors, but not those inside multisig descriptors. It would also be great to include or link to sipa's ",https://github.com/bitcoin/bitcoin/pull/14491#discussion_r254063220,254063220,src/wallet/rpcdump.cpp
