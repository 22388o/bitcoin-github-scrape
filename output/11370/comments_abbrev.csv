esotericnonsense,2017-09-20T15:33:16Z,"Noted for #11367, can update to include relevant checks (or vice versa, whichever goes in first I guess)",https://github.com/bitcoin/bitcoin/pull/11370#issuecomment-330890182,330890182,
promag,2017-09-20T15:59:24Z,I guess this could go in first since #11367 is a new feature. But if #11367 goes first then I'm happy to update this.,https://github.com/bitcoin/bitcoin/pull/11370#issuecomment-330898662,330898662,
jnewbery,2017-09-20T19:44:24Z,Tested ACK f6ffb143679aa7e89ad3c3342ceba5e5aaf71a0e,https://github.com/bitcoin/bitcoin/pull/11370#issuecomment-330959867,330959867,
jnewbery,2017-09-22T20:22:11Z,@promag @esotericnonsense - I think it's a good idea if you decide between yourselves which should go in first and then rebase the other on top of it (otherwise there's a risk they both get merged independently and no tests are added for #11367),https://github.com/bitcoin/bitcoin/pull/11370#issuecomment-331551305,331551305,
esotericnonsense,2017-09-22T21:46:51Z,"I'll rebase on top, given that there seem to be a few niggles with #11367 this one can go in first.",https://github.com/bitcoin/bitcoin/pull/11370#issuecomment-331568245,331568245,
promag,2017-09-19T23:51:41Z,Should assert values or types of each field?,https://github.com/bitcoin/bitcoin/pull/11370#discussion_r139846128,139846128,test/functional/blockchain.py
jnewbery,2017-09-20T13:32:26Z,"suggestion: perhaps add `self.log.info(""test getblockchaininfo"")",https://github.com/bitcoin/bitcoin/pull/11370#discussion_r139969524,139969524,test/functional/blockchain.py
jnewbery,2017-09-20T13:35:10Z,"value: only if you're testing a meaningful value\ntype: I don't think we do this for other RPC methods, so I wouldn't bother\n\nThinking about this some more, perhaps we can add some utility method `check_rpc_return_object(dict)` which tests the presence and type of each field in the return object? Obviously not for this PR.",https://github.com/bitcoin/bitcoin/pull/11370#discussion_r139970264,139970264,test/functional/blockchain.py
jnewbery,2017-09-20T13:37:41Z,"You can speed this test up by starting with pruning the first time, and then restart without pruning (saves one stop-start which is a slow operation). Do that by setting `self.extra_args = [['-stopatheight=207', '-prune=1']]` in `set_test_params()` and then setting `self.extra_args = [['-stopatheight=207']]` before restarting.",https://github.com/bitcoin/bitcoin/pull/11370#discussion_r139970939,139970939,test/functional/blockchain.py
jnewbery,2017-09-20T13:39:41Z,I think you can just use `self.start_node(0)`. The default will use `self.extra_args[0]` for its args.,https://github.com/bitcoin/bitcoin/pull/11370#discussion_r139971543,139971543,test/functional/blockchain.py
promag,2017-09-20T14:02:28Z,Done.,https://github.com/bitcoin/bitcoin/pull/11370#discussion_r139978101,139978101,test/functional/blockchain.py
promag,2017-09-20T14:03:31Z,Convenient method to stop and start a node with the same arguments as before. If this gets ACK's I can push a commit to use where appropriate or submit this in a separate PR. ,https://github.com/bitcoin/bitcoin/pull/11370#discussion_r139978378,139978378,test/functional/test_framework/test_framework.py
jnewbery,2017-09-20T14:26:30Z,"Sorry, I misled you here. You should use `self.nodes[0].extra_args = ...`. The `self.extra_args` class variable is only used when instantiating the TestNode. That's important for `restart_node()`",https://github.com/bitcoin/bitcoin/pull/11370#discussion_r139985124,139985124,test/functional/blockchain.py
jnewbery,2017-09-20T14:28:28Z,"Great! Ideally the stop and start methods in `TestFramework` would be methods on the `TestNode` class, and so would this, but we can clean that up later.\n\nYou can change this to:\n\n```python\ndef restart_node(self, i):\n    """"""Stop and start a test node""""""\n    self.stop_node(i)\n    self.start_node(i)\n```\n\nAs long as you also take my change to blockchain.py above.",https://github.com/bitcoin/bitcoin/pull/11370#discussion_r139985723,139985723,test/functional/test_framework/test_framework.py
promag,2017-09-20T14:39:54Z,@jnewbery added the option to override `node.extra_args`. I wonder if that this new `extra_arg` should be saved in `node`.,https://github.com/bitcoin/bitcoin/pull/11370#discussion_r139989354,139989354,test/functional/test_framework/test_framework.py
jnewbery,2017-09-20T15:40:35Z,Looks good. I don't think you need to update `node.extra_args`,https://github.com/bitcoin/bitcoin/pull/11370#discussion_r140008732,140008732,test/functional/test_framework/test_framework.py
