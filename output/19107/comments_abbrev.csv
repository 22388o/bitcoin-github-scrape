DrahtBot,2020-05-29 16:29:56,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19998 (Net: Add CNode::ConnectedViaTor() by hebasto)\n* #19988 (Overhaul transaction request logic by sipa)\n* #19911 (ne",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-636066164,636066164,
jnewbery,2020-05-29 22:56:36,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-636227452,636227452,
MarcoFalke,2020-06-01 10:28:51,"```\nRun p2p_transport_deserializer with args ['/home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/p2p_transport_deserializer', '-runs=1', '/home/travis/build/bitcoin/bitcoin/ci/scratch/qa-assets/fuzz_seed_corpus/p2p_transport_deserializer']INFO: Seed: 2855084377\n\nINFO: Loaded 1 modules   (412040 inline 8-bit counters): 412040 [0x560bb09480d8, 0x560b",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-636769885,636769885,
troygiorshev,2020-06-09 15:45:08,"Rebased, fixed failing fuzz tests.  Removed some of the unneeded test changes, they're now in #19177. Overall the commits are cleaned up.  They are all atomic now, with full commit messages.  I've also implemented many of the suggestions, thanks again to everyone for the review so far!",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-641390889,641390889,
troygiorshev,2020-06-16 02:47:29,"Rebased and made suggested changes.  When making the new log messages, I picked the ""wrong"" message size.  I chose the size including the header whereas I should have chosen the payload size to stay consistent with other logging.  That's now fixed.  (Search for `(%s, %u bytes)`)\n\nAdditionally I've found a solution to the logging issue.  Given that V1TransportDeserializer is always a member of ",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-644498437,644498437,
troygiorshev,2020-06-16 13:15:16,Ran through clang-format,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-644756699,644756699,
jonatack,2020-06-16 13:21:39,"@troygiorshev reviewing, will have a few more suggestions if you want to wait before retouching. Also, avoid rebasing to master if you don't need to.",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-644760725,644760725,
troygiorshev,2020-06-17 17:12:43,"I realized I had left this in a terribly broken state.  Fixed now, just with clang-format (done correctly this time).  Compare between f070a97fe5abc40f93f98e241dd81c5bb43f7de5 and 3a9d277fc0cb9247ec14350d43ecc9f7825aadd2.\n\n@jonatack I think you were reviewing on f070a97fe5abc40f93f98e241dd81c5bb43f7de5, feel free to continue there and I'll integrate your suggestions.",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-645504819,645504819,
troygiorshev,2020-06-19 14:59:42,Rebased.  Changes coming soon.,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-646683964,646683964,
troygiorshev,2020-06-22 13:27:38,Made suggested changes.  (Note Optional justification [here](https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442433717)).  Sorry for the mess with the rebasing.  Everything is nice and ready for review,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-647518988,647518988,
troygiorshev,2020-06-22 16:46:17,"GetMessage now move constructs the optional.\n\nI've also finally figured out why I keep inadvertently rebasing.  Sorry everyone, wont happen again üòÖ",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-647640816,647640816,
troygiorshev,2020-06-24 14:36:49,Made suggested changes and two renames.  Should be easy to to re-review with `git range-diff master ca824dd 20f4da6`,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-648860671,648860671,
troygiorshev,2020-06-24 21:30:35,Trivial rebase `git range-diff master 20f4da6 2ac16b1`,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-649083403,649083403,
jnewbery,2020-06-25 19:07:26,Code review ACK 2ac16b110b,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-649764112,649764112,
MarcoFalke,2020-06-26 15:27:37,"As always, feel free to ignore the part of my feedback that is of stylistic nature only",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-650241142,650241142,
troygiorshev,2020-06-29 19:56:38,"6b33f25ff9 is a new commit, then the rest should be ok to re-review with `git range-diff master 2ac16b1 da5bb91`\n\n[This](https://github.com/bitcoin/bitcoin/pull/19107#discussion_r446220814) (remove unneeded parameter to V1TransportDeserializer constructor in one commit) is dealt with, and the line cleaned up.\n\n> I see in the last commit you add `const NodeId m_node_id; // Only for logging`",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-651326775,651326775,
troygiorshev,2020-06-29 20:11:09,`git range-diff master b77c159 bc89f1f` ran clang-format only.,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-651333986,651333986,
jnewbery,2020-06-30 20:43:48,Code review ACK bc89f1f40c465aff82db5a8c6f0753a21222968d,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-652032662,652032662,
troygiorshev,2020-07-01 13:42:14,"`git range-diff master bc89f1f 1e5a43d` removed the commit that added a pchMessageStart getter, as per this [comment](https://github.com/bitcoin/bitcoin/pull/19107#discussion_r446234628).",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-652426015,652426015,
jnewbery,2020-07-01 19:02:27,Code review ACK 1e5a43d371981f0d5ece98cfba0ecab32c795a4e. Only change is removing the unnecessary `CMessageHeader::GetMessageStart()` function.,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-652593637,652593637,
MarcoFalke,2020-07-01 23:14:48,"ACK 1e5a43d371 üèí\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 1e5a43d371 üèí\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYEACgkQzit1aX5p\npUiKXAwAwBlQRnJH+82cTJNWxA553dzV7MBYXID/rH6dSlPsC0MM517e90mdcmxa\nNS5rGqn5GWHPsYtACTouR0b/1lqKEQayH1pNbMmSRmVx4nh3p75",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-652690361,652690361,
MarcoFalke,2020-07-01 23:15:13,cc @dongcarl You might be interested in this,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-652690486,652690486,
dongcarl,2020-07-08 21:30:39,"@troygiorshev please feel free to correct me if I misunderstand anything. :relaxed: \n\n-----\n\nThis PR moves 4 separate header verification pieces into the `net` layer, the verifications are namely:\n\n1. Header checksum (`m_valid_checksum`) -> Message ignored\n2. Header command (`m_valid_header`-ish) -> Message ignored\n3. Header network magic (`m_valid_netmagic`) -> Disconnect from ori",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-655768389,655768389,
troygiorshev,2020-07-14 16:27:55,"@dongcarl Thank you for the review!\n\n> (First Part)\n\nYup you've got it, here it is more verbosely:\n\n### Disconnect/Ignore Behaviour, in order of when acted upon\n\n#### Before\n\n```\nUnable to Deserialize Header....................-> Disconnect from originating peer\nPayload Declared > MAX_SIZE.....................-> Disconnect from originating peer\nPayload Declared > MAX_PROT",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-658280010,658280010,
troygiorshev,2020-07-17 13:27:49,"`git range-diff master 1e5a43d 13ef377`\n\nFixed `mapRecvBytesPerMsgCmd` problem as discussed above.  This was done by giving GetMessage an out parameter, set when message deserialization fails.  ",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-660107045,660107045,
troygiorshev,2020-07-17 13:57:48,`git range-diff master 13ef377 6a0f059` rebase,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-660121614,660121614,
troygiorshev,2020-07-21 13:43:33,close-open to restart travis,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-661869776,661869776,
troygiorshev,2020-08-07 13:08:05,@jonatack @dongcarl @MarcoFalke you've all been interested in this in the past.  I gave this another look over and I think it's ready for review.,https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-670507430,670507430,
troygiorshev,2020-08-10 13:34:04,"`git range-diff master 6a0f059 9377c0c`\n\n* Rebased, including new span-taking `HexStr`",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-671357151,671357151,
jnewbery,2020-08-13 13:07:57,"Code review ACK 9377c0c4586a7ea70f6174626f463902e92ed76a\n\n@jonatack @dongcarl @MarcoFalke this looks ready to me. Do you mind rereviewing?",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-673467712,673467712,
dongcarl,2020-08-13 17:45:48,"Looking at this again, w/re the 2nd item I mentioned last time:\n\nIt seems like `nReceiveFloodSize` is configured by the `-maxreceivebuffer`, which has the description of:\n> Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)\n\nThe way that I would interpret this description as a user is that this places a limit on how many bytes we receive from a peer with zero considera",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-673616514,673616514,
jnewbery,2020-08-14 11:13:36,"> whether we think users care more about controlling the ""Maximum per-connection receive buffer"" or the ""Maximum per-connection process buffer"". \n\nThe `nReceiveFloodSize` limit is a memory exhaustion protection. I expect that [almost] no-one is setting it manually, except perhaps those with very low memory hardware. In all cases, it's better to shed invalid messages as early as possible and as",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-674024128,674024128,
troygiorshev,2020-08-14 19:43:13,"> ... places a limit on how many bytes we receive from a peer with zero consideration for any validity checks.\n\nHow many bytes we receive *before what occurs*?  Before we process them, or something else?\n\nDid some archaeology on `nReceiveFloodSize`.  It was added in 2011 in #369 as `ReceiveBufferSize()`, brought to its current usage in #973 and, from what I found, I have to disagree with y",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-674243013,674243013,
troygiorshev,2020-08-24 15:50:42,"`git range-diff master 9377c0c e72c5b2`\n\nRebased",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-679209971,679209971,
dongcarl,2020-08-25 18:18:40,"ACK e72c5b2\n\n-----\n\nAfter reading @jnewbery and @troygiorshev's responses and thinking a bit more, I think I see how it is most likely safe to not count `net`-invalid messages against `nReceiveFloodSize`. Perhaps in the future some naming can be tidied up so that the intention is clearer, but that should in no way stop this PR from getting merged.",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-680191615,680191615,
troygiorshev,2020-09-16 13:19:29,"`git range-diff master e72c5b2 367bb95`\n\nRebased",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-693399853,693399853,
troygiorshev,2020-09-16 16:50:56,"`git range-diff master 367bb95 ead6393`\n\n* s/out_err/out_err_raw_size/ in all spots except for the single prototype in TransportDeserializer",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-693531233,693531233,
troygiorshev,2020-09-16 17:05:24,"Thanks for the review @jonatack and @ryanofsky!\n\nI'm going to leave the suggestions for a follow-up PR.  As it stands, this PR has three ACKs from people experienced in this part of the codebase.  I'd like to reduce the diff that they have to go through.\n\n* @jnewbery on 9377c0c.  The following range-diffs may be useful\n	* Rebase: `git range-diff master 9377c0c e72c5b2`\n	* Rebase: `git ",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-693538902,693538902,
troygiorshev,2020-09-23 02:06:49,"`git range-diff master ead6393 deb5271`\n\nTrivial rebase",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-697078263,697078263,
jnewbery,2020-09-23 09:49:11,"Code review ACK deb52711a17236d0fca302701b5af585341ab42a.\n\nShould be ready for merge with a reACK from @dongcarl and @ryanofsky ",https://github.com/bitcoin/bitcoin/pull/19107#issuecomment-697257964,697257964,
jonasschnelli,2020-05-29 17:39:09,use `nullopt`?,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r432638537,432638537,src/net.cpp
troygiorshev,2020-05-29 18:37:10,"thanks, fixed",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r432667393,432667393,src/net.cpp
rajarshimaitra,2020-06-01 09:23:38,"It seems `ReceiveMsgBytes` returns two `bool`, (the function return and `bool& complete`), and both of them will have the same value at any execution (if I am not reading wrong). Is there any specific reason to make a function return the same boolean value twice?",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433130593,433130593,src/net.cpp
rajarshimaitra,2020-06-01 09:45:39,"As it is a network magic error, the error code can be a little verbose for better understanding, something like this? Especially the command and size seems redundant.\n```suggestion\n        LogPrint(BCLog::NET, ""HEADER ERROR - NETMAGIC : (%s, %u bytes), expected %s got %s\n"", hdr.GetCommand(), hdr.nMessageSize + CMessageHeader::HEADER_SIZE chain_params.MessageStart(), hdr.GetMessageStart());\n",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433139799,433139799,src/net.cpp
rajarshimaitra,2020-06-01 09:51:52,"Should it be called `HEADER ERROR` given the error is due to the bigger message size? I think the error code can also be improved a little here specifying the message size is bigger the max permissible size. \nSomething like \n```suggestion\n        LogPrint(BCLog::NET, ""HEADER ERROR - MESSAGESIZE (%s, %u bytes), size %u bigger than max message size\n"", hdr.GetCommand(), hdr.nMessageSize + CMes",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433142401,433142401,src/net.cpp
rajarshimaitra,2020-06-01 09:58:13,A comment here specifying `GetMessage` can fail due to invalid header might help here. ,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433145200,433145200,src/net.cpp
rajarshimaitra,2020-06-01 10:02:32,Seems like an error message here might be appropriate similar to the checksum check? ,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433146912,433146912,src/net.cpp
rajarshimaitra,2020-06-01 10:03:56,Why remove this comment block? ,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433147490,433147490,src/net_processing.cpp
rajarshimaitra,2020-06-01 10:07:20,A little more info in error message might help? ,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433148918,433148918,src/protocol.cpp
rajarshimaitra,2020-06-01 10:07:41,Same comment for a little more info in the error message.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433149066,433149066,src/protocol.cpp
rajarshimaitra,2020-06-01 10:30:48,"This seems like a very interesting observation, especially for new reviewers. Is it possible to combine the explanation with the question below and elucidate it more clearly? It took me some time to figure out what these statements were referring to.  ",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433158495,433158495,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-01 14:29:41,"There are a few cases where ReceiveMsgBytes will return true and complete will stay false.  The most common is when Read finishes reading all of the bytes out of the buffer (so nBytes == 0), but we haven't reached the end of a single message.  (Remember the socket buffer is max 64KiB but a bitcoin message can be up to 4MB).  In that case complete will still be false, but the method will return tru",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433268161,433268161,src/net.cpp
troygiorshev,2020-06-01 14:37:01,"The command and size outputs are being kept to stay consistent with other error messages.  Both the codebase and documentation aren't consistent between the terms ""Message Start String"" and ""Network Magic"", I'm preferring ""Message Start String"" here as I think it's the older one, and neither are sufficiently descriptive out of context anyways.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433272598,433272598,src/net.cpp
troygiorshev,2020-06-01 14:40:25,"I don't think it's necessary to print out the expected MessageStart in the debug message.  The MessageStart is set when bitcoind starts up and doesn't change after that.  No one should be confused as to what the expected value is.  Additionally I don't print out the message's MessageStart here, because I can't find a situation where it would be relevant.  I'm open to changing my stance on that if ",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433274677,433274677,src/net.cpp
troygiorshev,2020-06-01 14:43:36,"The error is that the header is stating the message is larger than the maximum size.  That's orthogonal to whether the message is actually larger than the maximum size.  (a priori we have no way of determining that).  The error is in the construction of the header, and the error is brought up when checking the header.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433276511,433276511,src/net.cpp
troygiorshev,2020-06-01 14:45:49,"I don't think it's necessary to print out the current size, as it's already being done in the brackets.  (That said, the error logs I've found aren't consistent between printing the ""message size"" and the ""raw message size"" (including the header).  I've chosen the conservative approach and not changed that, though in this case I think you're right, it really _should_ be the ""message"" or ""payload"" ",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433277795,433277795,src/net.cpp
troygiorshev,2020-06-01 14:52:35,"The logging is done in IsValid and in ReadHeader.  I agree, I'd love to have it in GetMessage instead, just like the checksum check, but that would require IsValid to pass the information about why it failed up to GetMessage.  Ideally all of the logging would be in ReceiveMsgBytes (and indeed I had a version of this PR where that was the case) but seeing the complexity that added to Read, ReadHead",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433281963,433281963,src/net.cpp
troygiorshev,2020-06-01 14:53:57,"Net Processing is no longer aware of the format of the header.  That's all dealt with in net, so that net processing can just process the payload.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433282795,433282795,src/net_processing.cpp
troygiorshev,2020-06-01 14:54:47,I don't see any more that we could add here.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433283280,433283280,src/protocol.cpp
troygiorshev,2020-06-01 14:54:56,Same as above,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433283381,433283381,src/protocol.cpp
jnewbery,2020-06-01 17:07:37,"This change to the `CMessageHeader` ctor should be pulled out into its own commit, with the commit message explaining why it's ok to initialize a `CMessageHeader` without the start bytes.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433368764,433368764,src/protocol.h
jnewbery,2020-06-01 17:25:22,"These new logs don't include the peer id, which makes them a lot less useful than the existing logs. Are you able to pass the failure reason up to `CNode::ReceiveMsgBytes()` so the peer id can be logged?",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433378139,433378139,src/net.cpp
jnewbery,2020-06-01 17:31:15,No need for `hdr()` in the initializer list. It'll use the default construction anyway if you leave it out.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433381287,433381287,src/net.h
jnewbery,2020-06-01 17:33:10,"in commit _Give V1TransportDeserializer a ref to CChainParams member, and use it in GetMessage_, you should switch out the calls to the global `Params` for the local `chain_params`",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433382373,433382373,src/net.cpp
jnewbery,2020-06-01 17:34:49,Member variables in new code should be named `m_name`. See https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c for our style guide.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433383226,433383226,src/net.h
jnewbery,2020-06-01 17:36:40,"What's the reason for storing a reference to the chain params, rather than the message start bytes themselves, which is all we actually need?",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433384203,433384203,src/net.h
jnewbery,2020-06-01 17:41:45,"I don't think commit _Create getter CMessageHeader::GetMessageStart_ will build. You're changing the `IsValid()` signature in this commit, but don't change the callers until a later commit.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433386910,433386910,src/protocol.h
jnewbery,2020-06-01 17:53:37,"Since the only check in `IsValid()` is that the command name in the header is a valid ascii string, and the only place it's called is from here, perhaps that function should be moved to net.cpp and its name updated to `IsCommandNameValid()` or similar.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433393364,433393364,src/net.cpp
jnewbery,2020-06-01 18:08:05,Did you mean to commit all of this? It seems unfinished.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433401068,433401068,test/functional/p2p_invalid_messages.py
jnewbery,2020-06-01 18:10:16,This commit should be squashed with the code changes.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433402173,433402173,src/test/fuzz/deserialize.cpp
rajarshimaitra,2020-06-02 09:04:50,Ya that makes sense. Thanks for clarifying. ,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r433729072,433729072,src/net.cpp
troygiorshev,2020-06-04 15:24:56,"Good point.  This PR is getting a little crowded, I'm going to move the test changes to a new one and I'll clear things up there.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r435345077,435345077,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-05 13:36:08,Test changes moved to a separate PR,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r435925244,435925244,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-08 21:47:59,"I don't have a great justification for this.  The chain_params is a singleton object and it somehow *feels* better to have a reference to a singleton object than a reference to a member of it.  Maybe one day V1TransportDeserializer will need another parameter, if even only for a test.  If anyone can propose even a weak reason why this is a bad idea than I'm happy to change it.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r437020284,437020284,src/net.h
troygiorshev,2020-06-09 13:54:42,Done,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r437440270,437440270,src/protocol.h
troygiorshev,2020-06-09 13:54:52,Done,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r437440470,437440470,src/net.h
troygiorshev,2020-06-09 13:55:11,"Missed this one, good eye.  Done",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r437440737,437440737,src/net.cpp
troygiorshev,2020-06-09 13:55:23,Done,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r437440902,437440902,src/net.h
troygiorshev,2020-06-09 13:55:44,Fixed,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r437441175,437441175,src/protocol.h
troygiorshev,2020-06-09 13:57:12,Chose `IsCommandValid()` as not to confuse the reader with the command name check done in ReceiveMsgBytes,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r437442639,437442639,src/net.cpp
troygiorshev,2020-06-09 13:57:20,Done,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r437442755,437442755,src/test/fuzz/deserialize.cpp
troygiorshev,2020-06-09 14:00:13,"I've added a second LogPrint to ReceiveMsgBytes that will always print after an initial error.  I think this is a better solution than having Read and Getmessage pass out a string.  If we really want them on the same line, I could remove the trailing newline from the initial errors.  (But that feels fragile)",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r437445346,437445346,src/net.cpp
rajarshimaitra,2020-06-11 15:09:03,"I understand you are trying to repeat the errors here after the initial error from the actual function call, but can this make the errors clumsy? Especially when errors will occur from multiple peers simultaneously. It's expected that an entire error will be in a single line for any context, instead here the error with peer id is printing on a new line. ",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r438856814,438856814,src/net.cpp
rajarshimaitra,2020-06-11 15:17:43,Indication of checksum check already happening inside `GetMessage()` in this comment might be helpful?  ,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r438862855,438862855,src/net.cpp
rajarshimaitra,2020-06-11 15:42:18,"Nit: Mentioning it ""optionally"" decomposes the message might make the comment complete. Feel free to ignore.  ",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r438884028,438884028,src/net.h
rajarshimaitra,2020-06-11 15:58:45,"Referring back to the review club discussion. Previously we were dropping connections here because of any header error. Going by the logic of not dropping the connection due to wrong checksum (naughty firewall) cant those same things happen in other parts of the header too?\nOrthogonal to this PR, but curious about the rationale here.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r438897822,438897822,src/net.cpp
rajarshimaitra,2020-06-11 17:03:17,"Nit: Keeping in the spirit of the original comment here, maybe add a comment saying returning staring string?   ",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r438936859,438936859,src/protocol.cpp
jnewbery,2020-06-12 15:25:16,"no need for this use-once local variable. Combine the lines:\n\n```suggestion\n    if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n        // Invalid checksum. Log and exit\n        ...\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r439486796,439486796,src/net.cpp
jnewbery,2020-06-12 15:30:10,"It's a slight smell that you're calling `Reset()` for both exit branches here. I think this would be safer if this branch just set `msg` to be a nullopt and an else branch set it to be the `Optional<CNetMessage>`.\n\nI'd also prefer to avoid the implicit conversion from `CNetMessage` to `Optional<CNetMessage>` in the `return` statement below.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r439489550,439489550,src/net.cpp
jnewbery,2020-06-12 15:33:15,"This seems good enough. I think ideally Read and Getmessages would pass out an enum indicating deserialization failure reason, and ReceiveMsgBytes would know how to log based on the enum.\n\nDefinitely don't remove the newline from the initial errors! bitcoind is multithreaded, so another thread could log between the two messages.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r439491172,439491172,src/net.cpp
jnewbery,2020-06-12 15:34:24,"I think a comment here to say ""Message deserialization failed. Drop the message and log the failure, but don't disconnect the peer"" would be useful",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r439491742,439491742,src/net.cpp
jnewbery,2020-06-12 15:44:16,You can remove this include from net.cpp now that it's included in the header file.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r439497173,439497173,src/net.h
jnewbery,2020-06-12 15:50:08,"nit: space between `)` and `{` please.\n\nSince you're touching this line, can you also give the surrounding for loop braces to comply with current code style guide?",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r439500348,439500348,src/protocol.cpp
jnewbery,2020-06-12 15:50:35,nit: space between `)` and `{` please.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r439500590,439500590,src/protocol.cpp
jnewbery,2020-06-12 15:53:54,Is it possible to move this logging up into `V1TransportDeserializer::GetMessage()` so you don't need to duplicate it?,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r439502372,439502372,src/protocol.cpp
troygiorshev,2020-06-16 00:38:18,"The diff algorithm is confused, there wasn't ever a comment here.  This check is now in ReadHeader, where I've preserved the comment.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440521258,440521258,src/protocol.cpp
troygiorshev,2020-06-16 02:41:26,I've found a way to consolidate these logs,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440553543,440553543,src/net.cpp
troygiorshev,2020-06-16 02:42:16,"I agree.  I've found a way to consolidate these logs, let me know what you think",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440553766,440553766,src/net.cpp
troygiorshev,2020-06-16 02:42:47,Done,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440553898,440553898,src/net.cpp
troygiorshev,2020-06-16 02:43:55,Consolidated all of the checks to the bottom,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440554184,440554184,src/net.cpp
troygiorshev,2020-06-16 02:44:04,Done,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440554223,440554223,src/net.cpp
troygiorshev,2020-06-16 02:44:14,"Good catch, done",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440554259,440554259,src/net.h
troygiorshev,2020-06-16 02:44:26,Gladly!  done,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440554314,440554314,src/protocol.cpp
troygiorshev,2020-06-16 02:45:09,"I agree, done.  Logging is now exclusively in GetMessage and ReadHeader",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440554509,440554509,src/protocol.cpp
jonatack,2020-06-16 08:27:17,"```suggestion\n            if (result) {\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440675944,440675944,src/test/fuzz/p2p_transport_deserializer.cpp
jonatack,2020-06-16 08:28:39,"```suggestion\n            if (!result) {\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440676804,440676804,src/net.cpp
jonatack,2020-06-16 08:29:12,"```suggestion\n        if (handled < 0) {\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440677187,440677187,src/net.cpp
fanquake,2020-06-16 13:16:43,I think something has gone wrong here,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440840706,440840706,src/net.h
troygiorshev,2020-06-16 13:30:14,"oof, thanks",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440850363,440850363,src/net.h
troygiorshev,2020-06-16 13:36:52,"@jonatack the correct fix here is below but I'll hold off on touching anything until you're ready.\n\n```suggestion\n    V1TransportDeserializer(const CChainParams& chain_params_in, const NodeId node_id_in, int nTypeIn, int nVersionIn) : m_chain_params(chain_params_in), node_id(node_id_in), hdrbuf(nTypeIn, nVersionIn), vRecv(nTypeIn, nVersionIn)\n    {\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r440855270,440855270,src/net.h
jonatack,2020-06-16 17:52:39,thanks @troygiorshev,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r441035615,441035615,src/net.h
jnewbery,2020-06-17 17:33:54,"This PR doesn't change behaviour at all, so I think questions about whether or not to drop connections for different errors is off-topic and should be saved for PRs that change behaviour!",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r441713142,441713142,src/net.cpp
jonatack,2020-06-18 07:32:13,"e0d316d nit: s/Set True/True|Set to true/\n\nCould squash this commit into one of the others.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442024516,442024516,src/net.cpp
jonatack,2020-06-18 08:29:14,"1596652 style nit, feel free to ignore\n```suggestion\n            Optional<CNetMessage> result{m_deserializer->GetMessage(nTimeMicros)};\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442057387,442057387,src/net.cpp
jonatack,2020-06-18 08:51:45,3a9d277f All this reformatting of the section seems ok but I'm not sure if it's a good idea to change the formatting of critical code that's not being directly changed.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442071499,442071499,src/protocol.cpp
jonatack,2020-06-18 09:15:46,"3a9d277\n```suggestion\n        with self.nodes[0].assert_debug_log(['HEADER ERROR - SIZE (badmsg, 4000001 bytes)']):\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442086586,442086586,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 09:19:06,3a9d277 Is there somewhere suitable this documentation can be moved to rather than be tossed out?,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442088523,442088523,src/net_processing.cpp
jonatack,2020-06-18 09:46:19,"3a9d277\n```suggestion\n        with self.nodes[0].assert_debug_log(['HEADER ERROR - MESSAGESTART (badmsg, 2 bytes), got ffffffff']):\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442104342,442104342,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 09:49:16,"3a9d277\n```suggestion\n        with self.nodes[0].assert_debug_log(['HEADER ERROR - COMMAND (bad, 2 bytes)']):\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442106004,442106004,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 09:54:46,"style nit, feel free to ignore\n```suggestion\n            CNetMessage msg{*result};\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442109185,442109185,src/net.cpp
jonatack,2020-06-18 10:02:44,"5ad7ce1 and 3a9d277 I agree with @jnewbery here about the multiple Resets. Maybe something like this would be cleaner (tested example):\n```diff\n-    // Check checksum\n-    // Always reset the network deserializer (prepare for the next message)\n+    Optional<CNetMessage> result{};\n     if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n         LogPrint(BCL",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442113739,442113739,src/net.cpp
jonatack,2020-06-18 10:21:30,"```suggestion\n        LogPrint(BCLog::NET, ""HEADER ERROR - MESSAGESTART (%s, %u bytes), received %s, peer=%d\n"", hdr.GetCommand(), hdr.nMessageSize, HexStr(hdr.GetMessageStart()), node_id);\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442124225,442124225,src/net.cpp
troygiorshev,2020-06-18 17:52:26,This is done in response to https://github.com/bitcoin/bitcoin/pull/19107#discussion_r439500348,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442402026,442402026,src/protocol.cpp
troygiorshev,2020-06-18 18:29:52,"Thanks for the tested example!  I'm looking deeper into how Optional is implemented.  It looks like we don't have move semantics until before Boost 1.56.0.  I'm worried about the performance hit if we're copying a CNetMessage every time.\n\nIf I don't find anything important there, then I'll use this suggestion for sure.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442422435,442422435,src/net.cpp
MarcoFalke,2020-06-18 18:51:05,IIRC `return result;` should always move if it is possible. All recent OS as well as the binaries on the website come with a version of boost greater than 1.56. I think we don't care about reduced performance when someone compiles on a historic OS.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442433717,442433717,src/net.cpp
MarcoFalke,2020-06-18 18:52:15,See also commit ff9c671b11d40e5d0623eff3dd12e48cbaafb34e,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442434314,442434314,src/net.cpp
troygiorshev,2020-06-18 20:37:42,Sounds good to me!,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442488620,442488620,src/net.cpp
troygiorshev,2020-06-19 01:52:16,"I'm going to leave this one.  The reason the command is wrong is not because it's an unrecognized command, it's because it isn't validly constructed.  It ends up being `bad\x00sg\x00\x00\x00\x00\x00\x00` which doesn't pass the ""once you have a `\x00` all remaining chars must be `\x00`"" test.  One day it might be nice to change all of these tests so that they send recognized commands, and then chec",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442589490,442589490,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-19 13:48:59,"in commit 5ad7ce11027536fb6e48098db9659744514a7fc2:\n\nWhy is this copy and alias of the message needed?\n\n* `msg.` occurs only twice, so I think simply replacing `msg.` with `msg->` should be preferable to copying the whole message (or even adding a convenience alias (reference) to it).",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442851451,442851451,src/net.cpp
MarcoFalke,2020-06-19 13:51:05,"in commit 5ad7ce1:\n\nI still see `Reset` in both exit branches. Has this been addressed?",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r442852609,442852609,src/net.cpp
troygiorshev,2020-06-22 13:10:04,"In my mind this was the safe way to use an optional (immediately check the optional and resolve it to a real object).  In this case though I've checked and what you've suggested both works and looks clear, so I'll go with it.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r443545943,443545943,src/net.cpp
jnewbery,2020-06-22 14:54:55,"Since `msg` is not an rvalue, I think this will always do a copy assignment. Have you tried:\n\n`result = std::move(msg)`\n\n?",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r443620026,443620026,src/net.cpp
troygiorshev,2020-06-22 16:42:29,"Tested and I can confirm that you're right on both accounts.  Additionally, since `std::is_move_constructible<CNetMessage>::value == true` we can be reasonably sure that the Optional is being move constructed (from [this boost doc](https://www.boost.org/doc/libs/1_65_1/libs/optional/doc/html/boost_optional/tutorial/type_requirements.html))",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r443691442,443691442,src/net.cpp
jnewbery,2020-06-22 19:08:47,nit: name `m_node_id` to comply with [style guidelines](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c),https://github.com/bitcoin/bitcoin/pull/19107#discussion_r443768676,443768676,src/net.h
jnewbery,2020-06-22 19:26:11,"Alternatively, rather than having both a `CNetMessage` and `Optional<CNetMessage>`:\n\n```diff\ndiff --git a/src/net.cpp b/src/net.cpp\nindex c23cf54c75..7cc5068a75 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -726,14 +726,13 @@ const uint256& V1TransportDeserializer::GetMessageHash() const\n Optional<CNetMessage> V1TransportDeserializer::GetMessage(int64_t time)\n {\n     // decompo",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r443777031,443777031,src/net.cpp
troygiorshev,2020-06-22 19:35:42,"Furthermore, by checking msg.m_recv.data() and result->m_recv.data() before the assignment, after the assignment, and after the method return, we can be absolutely sure that it's move constructing.\n\n(and indeed I have, and indeed it is!)",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r443781545,443781545,src/net.cpp
troygiorshev,2020-06-22 19:48:06,"I'm happy with this pattern if everyone else is (@jonatack).  It's the ""reverse"" of before.  Now we're assuming success and have to set failure.  I think this is clearer.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r443787288,443787288,src/net.cpp
jonatack,2020-06-24 04:22:07,LGTM,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r444636252,444636252,src/net.cpp
MarcoFalke,2020-06-24 10:57:13,LGTM,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r444812167,444812167,src/net.cpp
troygiorshev,2020-06-24 14:09:30,"One day I'll remember, thanks!",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r444921525,444921525,src/net.h
MarcoFalke,2020-06-26 14:00:27,"in commit  cecb5e329a26455f44dde39a4ffac82c4869ce2a\n\nIt appears that the peer id is no longer logged for invalid checksums. Doesn't this make it harder to debug checksum issues because it is now impossible to determine the peer id?\n\nPrevious log:\n\n```\n[net] CHECKSUM ERROR (msg_type, baz bytes), expected foo was bar\n[msghand] ProcessMessages(msg_type, baz bytes): CHECKSUM ERROR peer",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r446202431,446202431,src/net_processing.cpp
MarcoFalke,2020-06-26 14:12:38,"nit in commit cecb5e329a26455f44dde39a4ffac82c4869ce2a\n\n```suggestion\n                const CNetMessage& msg = *result;\n```\n\ncan be a reference to a avoid the copy",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r446209407,446209407,src/test/fuzz/p2p_transport_deserializer.cpp
MarcoFalke,2020-06-26 14:22:45,"in commit 9d5ba871fcba17038236a660e231022d11b769bc:\n\nI don't think this method cares where the data is from. It can be any pointer that points to initialized data.\n\n```suggestion\n * @param[in]   pch         A pointer to the raw data\n```\n\nSide note: (in the future) this could probably be changed to a Span, so that the pointer and size are passed in the same argument for clarity",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r446215071,446215071,src/net.cpp
MarcoFalke,2020-06-26 14:26:14,"in commit 9d5ba87:\n\n```suggestion\n * @param[out]  complete    Set True if at least one message has been deserialized and is\n```\n\nCould make this a bit more verbose for clarity?",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r446217169,446217169,src/net.cpp
MarcoFalke,2020-06-26 14:32:07,"in commit 8a492c8aef\n\nThis is unused, no?\n\n```suggestion\n    V1TransportDeserializer(int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), vRecv(nTypeIn, nVersionIn)\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r446220814,446220814,src/net.h
MarcoFalke,2020-06-26 14:37:40,"nit In commit ef99b3bfbca87ef727c34f9ffedf50139a223086\n\nWhy is this removed? I think every file needs to include everything it uses. Otherwise, removing it from the header file might break compilation in the cpp file.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r446224020,446224020,src/net.cpp
MarcoFalke,2020-06-26 14:55:17,"in commit 3f5a7306e941bd9bcd50afeb0e0a9fce46f22fd1\n\nIt seems confusing to make the magic bytes variable length. Unlike the message type they are not padded with zeros. See also https://btcinformation.org/en/developer-reference#message-headers\n\nWhat do you think about returning a span (or a raw byte vector if there are concerns about life-time)?",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r446234628,446234628,src/protocol.cpp
MarcoFalke,2020-06-26 15:09:40,"in commit 2ac16b110b\n\nAdding logging is great, but I don't think this counts as a refactor. Also, the tests seem to require some changes, so maybe change the ""without changing behavior"" to something like ""add logging"" in the pull request title?",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r446242955,446242955,src/net.cpp
MarcoFalke,2020-06-26 15:13:52,"I see in the last commit you add `+    const NodeId m_node_id; // Only for logging`\n\nMaybe this addition could be moved to the first commit? It will be slightly painful due to the conflicts that will need to be solved, but I think it will be worth it",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r446245457,446245457,src/net_processing.cpp
MarcoFalke,2020-06-26 15:26:52,"Also, if you decide to change this, maybe this very long line could be split up into two (or more) lines:\n\nE.g.\n\n```diff\ndiff --git a/src/net.h b/src/net.h\nindex b461470f1f..ba2d2fad27 100644\n--- a/src/net.h\n+++ b/src/net.h\n@@ -674,8 +674,11 @@ private:\n     }\n \n public:\n-\n-    V1TransportDeserializer(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nType",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r446252776,446252776,src/net.h
troygiorshev,2020-06-29 19:27:32,Moving it to the beginning was well worth it.  The peer id is now present in all of this logging (and everything is just a little cleaner).,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r447201761,447201761,src/net_processing.cpp
troygiorshev,2020-06-29 19:28:17,+1 to one day making this a span,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r447202126,447202126,src/net.cpp
troygiorshev,2020-06-29 19:28:34,"I've changed this so that it uses list initialization instead and then reaches inside the optional.  Now it's consistent with the ""real"" code in net.cpp.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r447202293,447202293,src/test/fuzz/p2p_transport_deserializer.cpp
troygiorshev,2020-06-29 19:28:51,Good eye.  Fixed and cleaned.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r447202463,447202463,src/net.h
MarcoFalke,2020-06-29 23:55:09,"test-nit in commit 2616399cca2e9c1a4c03605241c7964d53b360bf\n\nCould extend the test?\n\n```diff\ndiff --git a/test/functional/p2p_invalid_messages.py b/test/functional/p2p_invalid_messages.py\nindex d9a9ae5188..04d86d3bc5 100755\n--- a/test/functional/p2p_invalid_messages.py\n+++ b/test/functional/p2p_invalid_messages.py\n@@ -93,7 +93,9 @@ class InvalidMessagesTest(BitcoinTestFramework):",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r447324770,447324770,src/net.cpp
troygiorshev,2020-07-01 13:40:59,"Thanks for bringing this up, I agree.  I've removed this commit and changed the logging to use `HexStr(hdr.pchMessageStart, hdr.pchMessageStart + CMessageHeader::MESSAGE_START_SIZE)`, like how the checksum is logged later in the file.\n\nI think a span would be a great idea, and a future PR should continue the work that #19373 started.  (Maybe once someone converts HexStr to use span, as suggest",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r448371000,448371000,src/protocol.cpp
troygiorshev,2020-07-01 13:44:06,"I agree, this has grown and there is enough context in the PR description.  Changed.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r448372950,448372950,src/net.cpp
troygiorshev,2020-07-01 13:52:57,"This could be done for all of the tests, and can mostly be done separate from the changes in this PR.  I'll do this in another PR.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r448378720,448378720,src/net.cpp
troygiorshev,2020-07-01 15:33:50,Additionally I'm not sure that we have consensus that `assert_debug_log` is really a good thing.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r448447344,448447344,src/net.cpp
jnewbery,2020-07-21 16:10:07,No need to use the public getter `GetId()` since this is a member function of `CNode`. You can just use `id` directly.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r458217690,458217690,src/net.cpp
jnewbery,2020-07-21 16:13:05,I suggest you use a new category NET_MESSAGE_COMMAND_CORRUPT here rather than overloading _OTHER.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r458219755,458219755,src/net.cpp
troygiorshev,2020-07-22 00:32:02,"I agree this is better, but I'll leave it for now.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r458465252,458465252,src/net.cpp
troygiorshev,2020-07-22 00:34:50,"I'm worried about how adding a new category will affect people who have scripts that parse `getpeerinfo`.  They will either:\n\n1. Crash (bad)\n2. Ignore it (also bad, loses the ""sum of messages in bytesrecv_per_msg"" == ""bytesrecv"" invariant)\n3. Treat it like ""_OTHER"" (same as what we have here)\n\nAs it is right now in the PR, the bytes received for corrupt messages have been moved from th",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r458465966,458465966,src/net.cpp
jnewbery,2020-07-22 07:42:52,"We _do_ occasionally add new message types (most recently in #18876), so a client should tolerate unrecognized message types (crashing/requiring a software update for the client every time we introduce a new message type would be bad).\n\nI agree that this isn't a critical issue and could be changed in a follow-up if necessary. For now, _OTHER seems fine.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r458597788,458597788,src/net.cpp
ryanofsky,2020-08-27 21:47:53,"In commit ""Move checksum check from net_processing to net"" (5cecad30d9ce37ba500eb1e06743d213bb911379)\n\nMinor:\n\n```c++\nmapRecvBytesPerMsgCmd.at(NET_MESSAGE_COMMAND_OTHER) += out_err;\n```\n\nWould be shorter and avoid undefined behavior if there's no COMMAND_OTHER entry.\n",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r478714497,478714497,src/net.cpp
ryanofsky,2020-08-27 21:56:55,"In commit ""Move checksum check from net_processing to net"" (5cecad30d9ce37ba500eb1e06743d213bb911379)\n\njonatack commented on the `out_err` name and I agree it's not descriptive, and I think additionally it's awkward that caller can't just refer to one variable for the raw message size, but has use look at different variables (`out_err` or `result->m_raw_message_size`) depending on whether the ",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r478718436,478718436,src/net.cpp
ryanofsky,2020-08-27 22:00:41,"In commit ""Give V1TransportDeserializer an m_node_id member"" (90fc3ffa82e398a6c95dbaf5374b6a478f17ae88)\n\nIt would be helpful for this commit message to say ""This commit doesn't change behavior except for logging"". It's harder to know if commit is doing the right thing if commit message doesn't say what intended behavior change is.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r478719971,478719971,src/net.cpp
ryanofsky,2020-08-28 11:45:45,"In commit ""Move checksum check from net_processing to net"" (5cecad30d9ce37ba500eb1e06743d213bb911379)\n\nI think commit message here should say to what extent new behavior is equivalent to old behavior, because just looking at the current message, it's not clear what behavior changes are intended, and how `fPauseRecv` and  `mapRecvBytesPerMsgCmd` and `nReceiveFloodSize` are involved. This inform",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r479182604,479182604,src/net_processing.cpp
jonatack,2020-08-30 13:43:56,"```suggestion\n    m_deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params(), id, SER_NETWORK, INIT_PROTO_VERSION));\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r479771749,479771749,src/net.cpp
jonatack,2020-08-30 15:04:30,"IIUC, `out_err` isn't an error number like its name suggests, but rather the size in bytes of the message. Perhaps its naming could be clearer. ",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r479780787,479780787,src/net.h
jonatack,2020-08-30 15:07:44,This is one of several places where the `out_err` naming seems odd to me; `out_err` suggests an error number more than the message size in bytes.,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r479781183,479781183,src/net.cpp
jonatack,2020-08-30 15:26:13,"Rather than just ""size"", the logged error message could state that the message is too large and state what is expected, like for the checksum error logging \n```diff\n     // reject messages larger than MAX_SIZE or MAX_PROTOCOL_MESSAGE_LENGTH\n-    if (hdr.nMessageSize > MAX_SIZE || hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n-        LogPrint(BCLog::NET, ""HEADER ERROR - SIZE (%s, %u by",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r479783031,479783031,src/net.cpp
jonatack,2020-08-30 15:30:18,"```suggestion\n        LogPrint(BCLog::NET, ""HEADER ERROR - INVALID COMMAND (%s, %u bytes), peer=%d\n"",\n```",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r479783412,479783412,src/net.cpp
ryanofsky,2020-09-01 11:21:32,"In commit ""Change CMessageHeader Constructor"" (878d829b5bff9db5140c9547400ec024a08c0105)\n\nI guess this is the change explained by ""This messagestart should always be replaced when deserializing an actual message header so that we can run checks on it."" in the commit message. \n\nWould suggest making that a little more explicit like ""This messagestart is overwritten by data from incoming mess",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r481064111,481064111,src/protocol.cpp
ryanofsky,2020-09-01 11:45:47,"In commit ""Remove header checks out of net_processing"" (e72c5b2e27b6ac3a1303b133f551bf2afcff1c0d)\n\nAgain commit message should say what intended behavior change is because it's hard to verify this is doing the right thing without know what it's supposed to do. It seems like dropping `fDisconnect = true` would no longer cause disconnects but I see from https://github.com/bitcoin/bitcoin/pull/19",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r481076370,481076370,src/net_processing.cpp
troygiorshev,2020-09-16 13:24:12,"I named it this way because TransportDeserializer is such a general interface.  It's possible that some other implementation of it will use `out_err` as some sort of magic number.\n\nRight now it is only set when the method fails.  If we're going to go down the route of renaming this to something like `msg_size`, then I would prefer to always set it.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r489433608,489433608,src/net.h
troygiorshev,2020-09-16 16:51:45,fixed,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r489582680,489582680,src/net.h
troygiorshev,2020-09-16 16:51:51,fixed,https://github.com/bitcoin/bitcoin/pull/19107#discussion_r489582753,489582753,src/net.cpp
troygiorshev,2020-09-16 16:58:40,"I like this, I'll leave it for a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r489586764,489586764,src/net.cpp
troygiorshev,2020-09-16 16:59:13,"I'll do a run through and decide between ""ERROR - X"" and ""ERROR - INVALID X"" (and make consistent) in a follow-up PR",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r489587122,489587122,src/net.cpp
troygiorshev,2020-09-16 17:05:16,"Yup, I prefer this too.  I don't think it's unclear enough to merit review effort changing it now though, I'll incorporate it into a follow-up.",https://github.com/bitcoin/bitcoin/pull/19107#discussion_r489590684,489590684,src/net.cpp
