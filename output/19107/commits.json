[
  {
    "sha": "2716647ebf60cea05fc9edce6a18dcce4e7727ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzE2NjQ3ZWJmNjBjZWEwNWZjOWVkY2U2YTE4ZGNjZTRlNzcyN2Fk",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-29T18:09:42Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-09-23T02:01:14Z"
      },
      "message": "Give V1TransportDeserializer an m_node_id member\n\nThis is intended to only be used for logging.\n\nThis will allow log messages in the following commits to keep recording\nthe peer's ID, even when logging is moved into V1TransportDeserializer.",
      "tree": {
        "sha": "95aeccb07b675773b935be187721b21d62219639",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95aeccb07b675773b935be187721b21d62219639"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2716647ebf60cea05fc9edce6a18dcce4e7727ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2716647ebf60cea05fc9edce6a18dcce4e7727ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2716647ebf60cea05fc9edce6a18dcce4e7727ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2716647ebf60cea05fc9edce6a18dcce4e7727ad/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1291b2e8fc39b366765d905200f022823e3d50b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1291b2e8fc39b366765d905200f022823e3d50b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1291b2e8fc39b366765d905200f022823e3d50b"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 13,
      "deletions": 6
    },
    "files": [
      {
        "sha": "73029655ce591e89aa9cf71f03f9542d69306e70",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2716647ebf60cea05fc9edce6a18dcce4e7727ad/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2716647ebf60cea05fc9edce6a18dcce4e7727ad/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2716647ebf60cea05fc9edce6a18dcce4e7727ad",
        "patch": "@@ -699,10 +699,11 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n \n     msg.m_valid_checksum = (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) == 0);\n     if (!msg.m_valid_checksum) {\n-        LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s\\n\",\n+        LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s, peer=%d\\n\",\n                  SanitizeString(msg.m_command), msg.m_message_size,\n                  HexStr(Span<uint8_t>(hash.begin(), hash.begin() + CMessageHeader::CHECKSUM_SIZE)),\n-                 HexStr(hdr.pchChecksum));\n+                 HexStr(hdr.pchChecksum),\n+                 m_node_id);\n     }\n \n     // store receive time\n@@ -2828,7 +2829,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n         LogPrint(BCLog::NET, \"Added connection peer=%d\\n\", id);\n     }\n \n-    m_deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    m_deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), GetId(), SER_NETWORK, INIT_PROTO_VERSION));\n     m_serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n }\n "
      },
      {
        "sha": "bda6007e7337f6a1fe36df721bdd9fbf84cd08f3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2716647ebf60cea05fc9edce6a18dcce4e7727ad/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2716647ebf60cea05fc9edce6a18dcce4e7727ad/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2716647ebf60cea05fc9edce6a18dcce4e7727ad",
        "patch": "@@ -739,6 +739,7 @@ class TransportDeserializer {\n class V1TransportDeserializer final : public TransportDeserializer\n {\n private:\n+    const NodeId m_node_id; // Only for logging\n     mutable CHash256 hasher;\n     mutable uint256 data_hash;\n     bool in_data;                   // parsing header (false) or data (true)\n@@ -764,8 +765,12 @@ class V1TransportDeserializer final : public TransportDeserializer\n     }\n \n public:\n-\n-    V1TransportDeserializer(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {\n+    V1TransportDeserializer(const CMessageHeader::MessageStartChars& pchMessageStartIn, const NodeId node_id, int nTypeIn, int nVersionIn)\n+        : m_node_id(node_id),\n+          hdrbuf(nTypeIn, nVersionIn),\n+          hdr(pchMessageStartIn),\n+          vRecv(nTypeIn, nVersionIn)\n+    {\n         Reset();\n     }\n "
      },
      {
        "sha": "732136330b5d5e85d94305f3333f0d53adeb3904",
        "filename": "src/test/fuzz/p2p_transport_deserializer.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2716647ebf60cea05fc9edce6a18dcce4e7727ad/src/test/fuzz/p2p_transport_deserializer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2716647ebf60cea05fc9edce6a18dcce4e7727ad/src/test/fuzz/p2p_transport_deserializer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_deserializer.cpp?ref=2716647ebf60cea05fc9edce6a18dcce4e7727ad",
        "patch": "@@ -19,7 +19,8 @@ void initialize()\n \n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n-    V1TransportDeserializer deserializer{Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION};\n+    // Construct deserializer, with a dummy NodeId\n+    V1TransportDeserializer deserializer{Params().MessageStart(), (NodeId)0, SER_NETWORK, INIT_PROTO_VERSION};\n     const char* pch = (const char*)buffer.data();\n     size_t n_bytes = buffer.size();\n     while (n_bytes > 0) {"
      }
    ]
  },
  {
    "sha": "890b1d7c2b8312d41d048d2db124586c5dbc8a49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTBiMWQ3YzJiODMxMmQ0MWQwNDhkMmRiMTI0NTg2YzVkYmM4YTQ5",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-29T18:15:06Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-09-23T02:01:14Z"
      },
      "message": "Move checksum check from net_processing to net\n\nThis removes the m_valid_checksum member from CNetMessage.  Instead,\nGetMessage() returns an Optional.\n\nAdditionally, GetMessage() has been given an out parameter to be used to\nhold error information.  For now it is specifically a uint32_t used to\nhold the raw size of the corrupt message.\n\nThe checksum check is now done in GetMessage.",
      "tree": {
        "sha": "8ef643a06cbda557a380e7fa261af30c47bcac35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ef643a06cbda557a380e7fa261af30c47bcac35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/890b1d7c2b8312d41d048d2db124586c5dbc8a49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/890b1d7c2b8312d41d048d2db124586c5dbc8a49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/890b1d7c2b8312d41d048d2db124586c5dbc8a49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/890b1d7c2b8312d41d048d2db124586c5dbc8a49/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2716647ebf60cea05fc9edce6a18dcce4e7727ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2716647ebf60cea05fc9edce6a18dcce4e7727ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2716647ebf60cea05fc9edce6a18dcce4e7727ad"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 45,
      "deletions": 44
    },
    "files": [
      {
        "sha": "3e015a681082ed7d80d71941af4569c62adf5e8e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 20,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/890b1d7c2b8312d41d048d2db124586c5dbc8a49/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/890b1d7c2b8312d41d048d2db124586c5dbc8a49/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=890b1d7c2b8312d41d048d2db124586c5dbc8a49",
        "patch": "@@ -595,25 +595,33 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     while (nBytes > 0) {\n         // absorb network data\n         int handled = m_deserializer->Read(pch, nBytes);\n-        if (handled < 0) return false;\n+        if (handled < 0) {\n+            return false;\n+        }\n \n         pch += handled;\n         nBytes -= handled;\n \n         if (m_deserializer->Complete()) {\n             // decompose a transport agnostic CNetMessage from the deserializer\n-            CNetMessage msg = m_deserializer->GetMessage(Params().MessageStart(), time);\n+            uint32_t out_err_raw_size{0};\n+            Optional<CNetMessage> result{m_deserializer->GetMessage(Params().MessageStart(), time, out_err_raw_size)};\n+            if (!result) {\n+                // store the size of the corrupt message\n+                mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER)->second += out_err_raw_size;\n+                continue;\n+            }\n \n             //store received bytes per message command\n             //to prevent a memory DOS, only allow valid commands\n-            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg.m_command);\n+            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(result->m_command);\n             if (i == mapRecvBytesPerMsgCmd.end())\n                 i = mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n             assert(i != mapRecvBytesPerMsgCmd.end());\n-            i->second += msg.m_raw_message_size;\n+            i->second += result->m_raw_message_size;\n \n             // push the message to the process queue,\n-            vRecvMsg.push_back(std::move(msg));\n+            vRecvMsg.push_back(std::move(*result));\n \n             complete = true;\n         }\n@@ -679,37 +687,36 @@ const uint256& V1TransportDeserializer::GetMessageHash() const\n     return data_hash;\n }\n \n-CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, const std::chrono::microseconds time)\n+Optional<CNetMessage> V1TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, const std::chrono::microseconds time, uint32_t& out_err_raw_size)\n {\n     // decompose a single CNetMessage from the TransportDeserializer\n-    CNetMessage msg(std::move(vRecv));\n+    Optional<CNetMessage> msg(std::move(vRecv));\n \n     // store state about valid header, netmagic and checksum\n-    msg.m_valid_header = hdr.IsValid(message_start);\n-    msg.m_valid_netmagic = (memcmp(hdr.pchMessageStart, message_start, CMessageHeader::MESSAGE_START_SIZE) == 0);\n+    msg->m_valid_header = hdr.IsValid(message_start);\n+    msg->m_valid_netmagic = (memcmp(hdr.pchMessageStart, message_start, CMessageHeader::MESSAGE_START_SIZE) == 0);\n     uint256 hash = GetMessageHash();\n \n-    // store command string, payload size\n-    msg.m_command = hdr.GetCommand();\n-    msg.m_message_size = hdr.nMessageSize;\n-    msg.m_raw_message_size = hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n+    // store command string, time, and sizes\n+    msg->m_command = hdr.GetCommand();\n+    msg->m_time = time;\n+    msg->m_message_size = hdr.nMessageSize;\n+    msg->m_raw_message_size = hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n \n     // We just received a message off the wire, harvest entropy from the time (and the message checksum)\n     RandAddEvent(ReadLE32(hash.begin()));\n \n-    msg.m_valid_checksum = (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) == 0);\n-    if (!msg.m_valid_checksum) {\n+    if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n         LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s, peer=%d\\n\",\n-                 SanitizeString(msg.m_command), msg.m_message_size,\n+                 SanitizeString(msg->m_command), msg->m_message_size,\n                  HexStr(Span<uint8_t>(hash.begin(), hash.begin() + CMessageHeader::CHECKSUM_SIZE)),\n                  HexStr(hdr.pchChecksum),\n                  m_node_id);\n+        out_err_raw_size = msg->m_raw_message_size;\n+        msg = nullopt;\n     }\n \n-    // store receive time\n-    msg.m_time = time;\n-\n-    // reset the network deserializer (prepare for the next message)\n+    // Always reset the network deserializer (prepare for the next message)\n     Reset();\n     return msg;\n }"
      },
      {
        "sha": "f581ce8ff960130f40c3e7f9599127b98bc63689",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/890b1d7c2b8312d41d048d2db124586c5dbc8a49/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/890b1d7c2b8312d41d048d2db124586c5dbc8a49/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=890b1d7c2b8312d41d048d2db124586c5dbc8a49",
        "patch": "@@ -14,8 +14,9 @@\n #include <crypto/siphash.h>\n #include <hash.h>\n #include <limitedmap.h>\n-#include <netaddress.h>\n #include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n #include <policy/feerate.h>\n #include <protocol.h>\n #include <random.h>\n@@ -706,7 +707,6 @@ class CNetMessage {\n     std::chrono::microseconds m_time{0}; //!< time of message receipt\n     bool m_valid_netmagic = false;\n     bool m_valid_header = false;\n-    bool m_valid_checksum = false;\n     uint32_t m_message_size{0};     //!< size of the payload\n     uint32_t m_raw_message_size{0}; //!< used wire size of the message (including header/checksum)\n     std::string m_command;\n@@ -732,7 +732,7 @@ class TransportDeserializer {\n     // read and deserialize data\n     virtual int Read(const char *data, unsigned int bytes) = 0;\n     // decomposes a message from the context\n-    virtual CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time) = 0;\n+    virtual Optional<CNetMessage> GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time, uint32_t& out_err) = 0;\n     virtual ~TransportDeserializer() {}\n };\n \n@@ -790,7 +790,7 @@ class V1TransportDeserializer final : public TransportDeserializer\n         if (ret < 0) Reset();\n         return ret;\n     }\n-    CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time) override;\n+    Optional<CNetMessage> GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time, uint32_t& out_err_raw_size) override;\n };\n \n /** The TransportSerializer prepares messages for the network transport"
      },
      {
        "sha": "d9d32cded661e5367f9fdcbf9f29b4ddd03d8e65",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/890b1d7c2b8312d41d048d2db124586c5dbc8a49/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/890b1d7c2b8312d41d048d2db124586c5dbc8a49/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=890b1d7c2b8312d41d048d2db124586c5dbc8a49",
        "patch": "@@ -3886,17 +3886,8 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n     // Message size\n     unsigned int nMessageSize = msg.m_message_size;\n \n-    // Checksum\n-    CDataStream& vRecv = msg.m_recv;\n-    if (!msg.m_valid_checksum)\n-    {\n-        LogPrint(BCLog::NET, \"%s(%s, %u bytes): CHECKSUM ERROR peer=%d\\n\", __func__,\n-           SanitizeString(msg_type), nMessageSize, pfrom->GetId());\n-        return fMoreWork;\n-    }\n-\n     try {\n-        ProcessMessage(*pfrom, msg_type, vRecv, msg.m_time, interruptMsgProc);\n+        ProcessMessage(*pfrom, msg_type, msg.m_recv, msg.m_time, interruptMsgProc);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())"
      },
      {
        "sha": "3e9cd3af38a5314867ac548b4e31ffffce8c9841",
        "filename": "src/test/fuzz/p2p_transport_deserializer.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/890b1d7c2b8312d41d048d2db124586c5dbc8a49/src/test/fuzz/p2p_transport_deserializer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/890b1d7c2b8312d41d048d2db124586c5dbc8a49/src/test/fuzz/p2p_transport_deserializer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_deserializer.cpp?ref=890b1d7c2b8312d41d048d2db124586c5dbc8a49",
        "patch": "@@ -32,16 +32,19 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         n_bytes -= handled;\n         if (deserializer.Complete()) {\n             const std::chrono::microseconds m_time{std::numeric_limits<int64_t>::max()};\n-            const CNetMessage msg = deserializer.GetMessage(Params().MessageStart(), m_time);\n-            assert(msg.m_command.size() <= CMessageHeader::COMMAND_SIZE);\n-            assert(msg.m_raw_message_size <= buffer.size());\n-            assert(msg.m_raw_message_size == CMessageHeader::HEADER_SIZE + msg.m_message_size);\n-            assert(msg.m_time == m_time);\n-            if (msg.m_valid_header) {\n-                assert(msg.m_valid_netmagic);\n-            }\n-            if (!msg.m_valid_netmagic) {\n-                assert(!msg.m_valid_header);\n+            uint32_t out_err_raw_size{0};\n+            Optional<CNetMessage> result{deserializer.GetMessage(Params().MessageStart(), m_time, out_err_raw_size)};\n+            if (result) {\n+                assert(result->m_command.size() <= CMessageHeader::COMMAND_SIZE);\n+                assert(result->m_raw_message_size <= buffer.size());\n+                assert(result->m_raw_message_size == CMessageHeader::HEADER_SIZE + result->m_message_size);\n+                assert(result->m_time == m_time);\n+                if (result->m_valid_header) {\n+                    assert(result->m_valid_netmagic);\n+                }\n+                if (!result->m_valid_netmagic) {\n+                    assert(!result->m_valid_header);\n+                }\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "1ca20c1af8f08f07c407c3183c37b467ddf0f413",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2EyMGMxYWY4ZjA4ZjA3YzQwN2MzMTgzYzM3YjQ2N2RkZjBmNDEz",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-05-26T20:01:03Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-09-23T02:01:14Z"
      },
      "message": "Add doxygen comment for ReceiveMsgBytes",
      "tree": {
        "sha": "770e717fe9e13eddbcf7579413717ab964db3206",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/770e717fe9e13eddbcf7579413717ab964db3206"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ca20c1af8f08f07c407c3183c37b467ddf0f413",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ca20c1af8f08f07c407c3183c37b467ddf0f413",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ca20c1af8f08f07c407c3183c37b467ddf0f413",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ca20c1af8f08f07c407c3183c37b467ddf0f413/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "890b1d7c2b8312d41d048d2db124586c5dbc8a49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/890b1d7c2b8312d41d048d2db124586c5dbc8a49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/890b1d7c2b8312d41d048d2db124586c5dbc8a49"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fdb76d3b83d3bc8064f7485836b861bf67f8f506",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ca20c1af8f08f07c407c3183c37b467ddf0f413/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ca20c1af8f08f07c407c3183c37b467ddf0f413/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1ca20c1af8f08f07c407c3183c37b467ddf0f413",
        "patch": "@@ -585,6 +585,16 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n }\n #undef X\n \n+/**\n+ * Receive bytes from the buffer and deserialize them into messages.\n+ *\n+ * @param[in]   pch         A pointer to the raw data\n+ * @param[in]   nBytes      Size of the data\n+ * @param[out]  complete    Set True if at least one message has been\n+ *                          deserialized and is ready to be processed\n+ * @return  True if the peer should stay connected,\n+ *          False if the peer should be disconnected from.\n+ */\n bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)\n {\n     complete = false;"
      }
    ]
  },
  {
    "sha": "5bceef6b12fa16d20287693be377dace3dfec3e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmNlZWY2YjEyZmExNmQyMDI4NzY5M2JlMzc3ZGFjZTNkZmVjM2U1",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-09T02:37:55Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-09-23T02:01:14Z"
      },
      "message": "Change CMessageHeader Constructor\n\nThis commit removes the single-parameter contructor of CMessageHeader\nand replaces it with a default constructor.\n\nThe single parameter contructor isn't used anywhere except for tests.\nThere is no reason to initialize a CMessageHeader with a particular\nmessagestart.  This messagestart should always be replaced when\ndeserializing an actual message header so that we can run checks on it.\n\nThe default constructor initializes it to zero, just like the command\nand checksum.\n\nThis also removes a parameter of a V1TransportDeserializer constructor,\nas it was only used for this purpose.",
      "tree": {
        "sha": "0a6fee9b1bdea143702adc97cc01a3a4a2a7928a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a6fee9b1bdea143702adc97cc01a3a4a2a7928a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bceef6b12fa16d20287693be377dace3dfec3e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bceef6b12fa16d20287693be377dace3dfec3e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bceef6b12fa16d20287693be377dace3dfec3e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bceef6b12fa16d20287693be377dace3dfec3e5/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ca20c1af8f08f07c407c3183c37b467ddf0f413",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ca20c1af8f08f07c407c3183c37b467ddf0f413",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ca20c1af8f08f07c407c3183c37b467ddf0f413"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "1ae4b8fe085c788d62359a4ee6f431ce18127b6d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bceef6b12fa16d20287693be377dace3dfec3e5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bceef6b12fa16d20287693be377dace3dfec3e5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5bceef6b12fa16d20287693be377dace3dfec3e5",
        "patch": "@@ -2846,7 +2846,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n         LogPrint(BCLog::NET, \"Added connection peer=%d\\n\", id);\n     }\n \n-    m_deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), GetId(), SER_NETWORK, INIT_PROTO_VERSION));\n+    m_deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(GetId(), SER_NETWORK, INIT_PROTO_VERSION));\n     m_serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n }\n "
      },
      {
        "sha": "cec201c5d24b0d913b39b24d186b90097630b7a8",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bceef6b12fa16d20287693be377dace3dfec3e5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bceef6b12fa16d20287693be377dace3dfec3e5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5bceef6b12fa16d20287693be377dace3dfec3e5",
        "patch": "@@ -765,10 +765,9 @@ class V1TransportDeserializer final : public TransportDeserializer\n     }\n \n public:\n-    V1TransportDeserializer(const CMessageHeader::MessageStartChars& pchMessageStartIn, const NodeId node_id, int nTypeIn, int nVersionIn)\n+    V1TransportDeserializer(const NodeId node_id, int nTypeIn, int nVersionIn)\n         : m_node_id(node_id),\n           hdrbuf(nTypeIn, nVersionIn),\n-          hdr(pchMessageStartIn),\n           vRecv(nTypeIn, nVersionIn)\n     {\n         Reset();"
      },
      {
        "sha": "6b4de68ce98670441fbe3fa04d7d1b5fbf2c1c68",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bceef6b12fa16d20287693be377dace3dfec3e5/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bceef6b12fa16d20287693be377dace3dfec3e5/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=5bceef6b12fa16d20287693be377dace3dfec3e5",
        "patch": "@@ -84,9 +84,9 @@ const static std::string allNetMessageTypes[] = {\n };\n const static std::vector<std::string> allNetMessageTypesVec(allNetMessageTypes, allNetMessageTypes+ARRAYLEN(allNetMessageTypes));\n \n-CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)\n+CMessageHeader::CMessageHeader()\n {\n-    memcpy(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE);\n+    memset(pchMessageStart, 0, MESSAGE_START_SIZE);\n     memset(pchCommand, 0, sizeof(pchCommand));\n     nMessageSize = -1;\n     memset(pchChecksum, 0, CHECKSUM_SIZE);"
      },
      {
        "sha": "3bf0797ca40168c9638244c44f35ccc58f641622",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bceef6b12fa16d20287693be377dace3dfec3e5/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bceef6b12fa16d20287693be377dace3dfec3e5/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=5bceef6b12fa16d20287693be377dace3dfec3e5",
        "patch": "@@ -37,7 +37,7 @@ class CMessageHeader\n     static constexpr size_t HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE;\n     typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n \n-    explicit CMessageHeader(const MessageStartChars& pchMessageStartIn);\n+    explicit CMessageHeader();\n \n     /** Construct a P2P message header from message-start characters, a command and the size of the message.\n      * @note Passing in a `pszCommand` longer than COMMAND_SIZE will result in a run-time assertion error."
      },
      {
        "sha": "f87b7576a42f86dc9e62a24550d7bc1af78c834e",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bceef6b12fa16d20287693be377dace3dfec3e5/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bceef6b12fa16d20287693be377dace3dfec3e5/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=5bceef6b12fa16d20287693be377dace3dfec3e5",
        "patch": "@@ -190,7 +190,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         AssertEqualAfterSerializeDeserialize(s);\n #elif MESSAGEHEADER_DESERIALIZE\n         const CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n-        CMessageHeader mh(pchMessageStart);\n+        CMessageHeader mh;\n         DeserializeFromFuzzingInput(buffer, mh);\n         (void)mh.IsValid(pchMessageStart);\n #elif ADDRESS_DESERIALIZE"
      },
      {
        "sha": "5349fd3f688826497a3b1c889c06873ba532602c",
        "filename": "src/test/fuzz/p2p_transport_deserializer.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bceef6b12fa16d20287693be377dace3dfec3e5/src/test/fuzz/p2p_transport_deserializer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bceef6b12fa16d20287693be377dace3dfec3e5/src/test/fuzz/p2p_transport_deserializer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_deserializer.cpp?ref=5bceef6b12fa16d20287693be377dace3dfec3e5",
        "patch": "@@ -20,7 +20,7 @@ void initialize()\n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     // Construct deserializer, with a dummy NodeId\n-    V1TransportDeserializer deserializer{Params().MessageStart(), (NodeId)0, SER_NETWORK, INIT_PROTO_VERSION};\n+    V1TransportDeserializer deserializer{(NodeId)0, SER_NETWORK, INIT_PROTO_VERSION};\n     const char* pch = (const char*)buffer.data();\n     size_t n_bytes = buffer.size();\n     while (n_bytes > 0) {"
      }
    ]
  },
  {
    "sha": "52d4ae46ab822d0f54e246a6f2364415cda149bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmQ0YWU0NmFiODIyZDBmNTRlMjQ2YTZmMjM2NDQxNWNkYTE0OWJk",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-09T02:26:22Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-09-23T02:01:14Z"
      },
      "message": "Give V1TransportDeserializer CChainParams& member\n\nThis adds a CChainParams& member to V1TransportDeserializer member, and\nuse it in place of many Params() calls.  In addition to reducing the\nnumber of calls to a global, this removes a parameter from GetMessage\n(and will later allow us to remove one from CMessageHeader::IsValid())",
      "tree": {
        "sha": "b2e35f9a1dfca12580318933057243856d0eca31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2e35f9a1dfca12580318933057243856d0eca31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52d4ae46ab822d0f54e246a6f2364415cda149bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52d4ae46ab822d0f54e246a6f2364415cda149bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52d4ae46ab822d0f54e246a6f2364415cda149bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52d4ae46ab822d0f54e246a6f2364415cda149bd/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bceef6b12fa16d20287693be377dace3dfec3e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bceef6b12fa16d20287693be377dace3dfec3e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bceef6b12fa16d20287693be377dace3dfec3e5"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 16,
      "deletions": 13
    },
    "files": [
      {
        "sha": "941ea3c4acc6dea6795e7aed055f3b9c5b877ef0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52d4ae46ab822d0f54e246a6f2364415cda149bd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52d4ae46ab822d0f54e246a6f2364415cda149bd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=52d4ae46ab822d0f54e246a6f2364415cda149bd",
        "patch": "@@ -10,7 +10,6 @@\n #include <net.h>\n \n #include <banman.h>\n-#include <chainparams.h>\n #include <clientversion.h>\n #include <consensus/consensus.h>\n #include <crypto/sha256.h>\n@@ -615,7 +614,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n         if (m_deserializer->Complete()) {\n             // decompose a transport agnostic CNetMessage from the deserializer\n             uint32_t out_err_raw_size{0};\n-            Optional<CNetMessage> result{m_deserializer->GetMessage(Params().MessageStart(), time, out_err_raw_size)};\n+            Optional<CNetMessage> result{m_deserializer->GetMessage(time, out_err_raw_size)};\n             if (!result) {\n                 // store the size of the corrupt message\n                 mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER)->second += out_err_raw_size;\n@@ -697,22 +696,23 @@ const uint256& V1TransportDeserializer::GetMessageHash() const\n     return data_hash;\n }\n \n-Optional<CNetMessage> V1TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, const std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+Optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::microseconds time, uint32_t& out_err_raw_size)\n {\n     // decompose a single CNetMessage from the TransportDeserializer\n     Optional<CNetMessage> msg(std::move(vRecv));\n \n     // store state about valid header, netmagic and checksum\n-    msg->m_valid_header = hdr.IsValid(message_start);\n-    msg->m_valid_netmagic = (memcmp(hdr.pchMessageStart, message_start, CMessageHeader::MESSAGE_START_SIZE) == 0);\n-    uint256 hash = GetMessageHash();\n+    msg->m_valid_header = hdr.IsValid(m_chain_params.MessageStart());\n+    msg->m_valid_netmagic = (memcmp(hdr.pchMessageStart, m_chain_params.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) == 0);\n \n     // store command string, time, and sizes\n     msg->m_command = hdr.GetCommand();\n     msg->m_time = time;\n     msg->m_message_size = hdr.nMessageSize;\n     msg->m_raw_message_size = hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n \n+    uint256 hash = GetMessageHash();\n+\n     // We just received a message off the wire, harvest entropy from the time (and the message checksum)\n     RandAddEvent(ReadLE32(hash.begin()));\n \n@@ -2846,7 +2846,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n         LogPrint(BCLog::NET, \"Added connection peer=%d\\n\", id);\n     }\n \n-    m_deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(GetId(), SER_NETWORK, INIT_PROTO_VERSION));\n+    m_deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params(), GetId(), SER_NETWORK, INIT_PROTO_VERSION));\n     m_serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n }\n "
      },
      {
        "sha": "29941b9622bf50fb72571bbaf8394e13826cba50",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52d4ae46ab822d0f54e246a6f2364415cda149bd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52d4ae46ab822d0f54e246a6f2364415cda149bd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=52d4ae46ab822d0f54e246a6f2364415cda149bd",
        "patch": "@@ -10,6 +10,7 @@\n #include <addrman.h>\n #include <amount.h>\n #include <bloom.h>\n+#include <chainparams.h>\n #include <compat.h>\n #include <crypto/siphash.h>\n #include <hash.h>\n@@ -732,13 +733,14 @@ class TransportDeserializer {\n     // read and deserialize data\n     virtual int Read(const char *data, unsigned int bytes) = 0;\n     // decomposes a message from the context\n-    virtual Optional<CNetMessage> GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time, uint32_t& out_err) = 0;\n+    virtual Optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err) = 0;\n     virtual ~TransportDeserializer() {}\n };\n \n class V1TransportDeserializer final : public TransportDeserializer\n {\n private:\n+    const CChainParams& m_chain_params;\n     const NodeId m_node_id; // Only for logging\n     mutable CHash256 hasher;\n     mutable uint256 data_hash;\n@@ -765,8 +767,9 @@ class V1TransportDeserializer final : public TransportDeserializer\n     }\n \n public:\n-    V1TransportDeserializer(const NodeId node_id, int nTypeIn, int nVersionIn)\n-        : m_node_id(node_id),\n+    V1TransportDeserializer(const CChainParams& chain_params, const NodeId node_id, int nTypeIn, int nVersionIn)\n+        : m_chain_params(chain_params),\n+          m_node_id(node_id),\n           hdrbuf(nTypeIn, nVersionIn),\n           vRecv(nTypeIn, nVersionIn)\n     {\n@@ -789,7 +792,7 @@ class V1TransportDeserializer final : public TransportDeserializer\n         if (ret < 0) Reset();\n         return ret;\n     }\n-    Optional<CNetMessage> GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time, uint32_t& out_err_raw_size) override;\n+    Optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size) override;\n };\n \n /** The TransportSerializer prepares messages for the network transport"
      },
      {
        "sha": "6252b8e91ba2c93daa25f8530f431ad67bf0e946",
        "filename": "src/test/fuzz/p2p_transport_deserializer.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52d4ae46ab822d0f54e246a6f2364415cda149bd/src/test/fuzz/p2p_transport_deserializer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52d4ae46ab822d0f54e246a6f2364415cda149bd/src/test/fuzz/p2p_transport_deserializer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_deserializer.cpp?ref=52d4ae46ab822d0f54e246a6f2364415cda149bd",
        "patch": "@@ -20,7 +20,7 @@ void initialize()\n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     // Construct deserializer, with a dummy NodeId\n-    V1TransportDeserializer deserializer{(NodeId)0, SER_NETWORK, INIT_PROTO_VERSION};\n+    V1TransportDeserializer deserializer{Params(), (NodeId)0, SER_NETWORK, INIT_PROTO_VERSION};\n     const char* pch = (const char*)buffer.data();\n     size_t n_bytes = buffer.size();\n     while (n_bytes > 0) {\n@@ -33,7 +33,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         if (deserializer.Complete()) {\n             const std::chrono::microseconds m_time{std::numeric_limits<int64_t>::max()};\n             uint32_t out_err_raw_size{0};\n-            Optional<CNetMessage> result{deserializer.GetMessage(Params().MessageStart(), m_time, out_err_raw_size)};\n+            Optional<CNetMessage> result{deserializer.GetMessage(m_time, out_err_raw_size)};\n             if (result) {\n                 assert(result->m_command.size() <= CMessageHeader::COMMAND_SIZE);\n                 assert(result->m_raw_message_size <= buffer.size());"
      }
    ]
  },
  {
    "sha": "deb52711a17236d0fca302701b5af585341ab42a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWI1MjcxMWExNzIzNmQwZmNhMzAyNzAxYjVhZjU4NTM0MWFiNDJh",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-05-26T21:01:57Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-09-23T02:05:18Z"
      },
      "message": "Remove header checks out of net_processing\n\nThis moves header size and netmagic checking out of net_processing and\ninto net.  This check now runs in ReadHeader, so that net can exit early\nout of receiving bytes from the peer.  IsValid is now slimmed down, so\nit no longer needs a MessageStartChars& parameter.\n\nAdditionally this removes the rest of the m_valid_* members from\nCNetMessage.",
      "tree": {
        "sha": "992c541c6fa43979adcf0436a01064ce497c1a84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/992c541c6fa43979adcf0436a01064ce497c1a84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/deb52711a17236d0fca302701b5af585341ab42a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deb52711a17236d0fca302701b5af585341ab42a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/deb52711a17236d0fca302701b5af585341ab42a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deb52711a17236d0fca302701b5af585341ab42a/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52d4ae46ab822d0f54e246a6f2364415cda149bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52d4ae46ab822d0f54e246a6f2364415cda149bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52d4ae46ab822d0f54e246a6f2364415cda149bd"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 32,
      "deletions": 62
    },
    "files": [
      {
        "sha": "633f9a2f7f102801992b9b3a69bd9bfa5b97f0a5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deb52711a17236d0fca302701b5af585341ab42a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deb52711a17236d0fca302701b5af585341ab42a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=deb52711a17236d0fca302701b5af585341ab42a",
        "patch": "@@ -605,6 +605,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n         // absorb network data\n         int handled = m_deserializer->Read(pch, nBytes);\n         if (handled < 0) {\n+            // Serious header problem, disconnect from the peer.\n             return false;\n         }\n \n@@ -616,6 +617,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n             uint32_t out_err_raw_size{0};\n             Optional<CNetMessage> result{m_deserializer->GetMessage(time, out_err_raw_size)};\n             if (!result) {\n+                // Message deserialization failed.  Drop the message but don't disconnect the peer.\n                 // store the size of the corrupt message\n                 mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER)->second += out_err_raw_size;\n                 continue;\n@@ -657,11 +659,19 @@ int V1TransportDeserializer::readHeader(const char *pch, unsigned int nBytes)\n         hdrbuf >> hdr;\n     }\n     catch (const std::exception&) {\n+        LogPrint(BCLog::NET, \"HEADER ERROR - UNABLE TO DESERIALIZE, peer=%d\\n\", m_node_id);\n+        return -1;\n+    }\n+\n+    // Check start string, network magic\n+    if (memcmp(hdr.pchMessageStart, m_chain_params.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n+        LogPrint(BCLog::NET, \"HEADER ERROR - MESSAGESTART (%s, %u bytes), received %s, peer=%d\\n\", hdr.GetCommand(), hdr.nMessageSize, HexStr(hdr.pchMessageStart), m_node_id);\n         return -1;\n     }\n \n     // reject messages larger than MAX_SIZE or MAX_PROTOCOL_MESSAGE_LENGTH\n     if (hdr.nMessageSize > MAX_SIZE || hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n+        LogPrint(BCLog::NET, \"HEADER ERROR - SIZE (%s, %u bytes), peer=%d\\n\", hdr.GetCommand(), hdr.nMessageSize, m_node_id);\n         return -1;\n     }\n \n@@ -701,10 +711,6 @@ Optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::mic\n     // decompose a single CNetMessage from the TransportDeserializer\n     Optional<CNetMessage> msg(std::move(vRecv));\n \n-    // store state about valid header, netmagic and checksum\n-    msg->m_valid_header = hdr.IsValid(m_chain_params.MessageStart());\n-    msg->m_valid_netmagic = (memcmp(hdr.pchMessageStart, m_chain_params.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) == 0);\n-\n     // store command string, time, and sizes\n     msg->m_command = hdr.GetCommand();\n     msg->m_time = time;\n@@ -716,6 +722,7 @@ Optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::mic\n     // We just received a message off the wire, harvest entropy from the time (and the message checksum)\n     RandAddEvent(ReadLE32(hash.begin()));\n \n+    // Check checksum and header command string\n     if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n         LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s, peer=%d\\n\",\n                  SanitizeString(msg->m_command), msg->m_message_size,\n@@ -724,6 +731,11 @@ Optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::mic\n                  m_node_id);\n         out_err_raw_size = msg->m_raw_message_size;\n         msg = nullopt;\n+    } else if (!hdr.IsCommandValid()) {\n+        LogPrint(BCLog::NET, \"HEADER ERROR - COMMAND (%s, %u bytes), peer=%d\\n\",\n+                 hdr.GetCommand(), msg->m_message_size, m_node_id);\n+        out_err_raw_size = msg->m_raw_message_size;\n+        msg = nullopt;\n     }\n \n     // Always reset the network deserializer (prepare for the next message)"
      },
      {
        "sha": "9a92f8051190cd8eb65c9bcb152f13573912358e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deb52711a17236d0fca302701b5af585341ab42a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deb52711a17236d0fca302701b5af585341ab42a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=deb52711a17236d0fca302701b5af585341ab42a",
        "patch": "@@ -706,10 +706,8 @@ class CNetMessage {\n public:\n     CDataStream m_recv;                  //!< received message data\n     std::chrono::microseconds m_time{0}; //!< time of message receipt\n-    bool m_valid_netmagic = false;\n-    bool m_valid_header = false;\n-    uint32_t m_message_size{0};     //!< size of the payload\n-    uint32_t m_raw_message_size{0}; //!< used wire size of the message (including header/checksum)\n+    uint32_t m_message_size{0};          //!< size of the payload\n+    uint32_t m_raw_message_size{0};      //!< used wire size of the message (including header/checksum)\n     std::string m_command;\n \n     CNetMessage(CDataStream&& recv_in) : m_recv(std::move(recv_in)) {}"
      },
      {
        "sha": "920e7a1abf3c35ac0bed8e848c69cf7827d506ab",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deb52711a17236d0fca302701b5af585341ab42a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deb52711a17236d0fca302701b5af585341ab42a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=deb52711a17236d0fca302701b5af585341ab42a",
        "patch": "@@ -3820,14 +3820,6 @@ bool PeerManager::MaybeDiscourageAndDisconnect(CNode& pnode)\n \n bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n {\n-    //\n-    // Message format\n-    //  (4) message start\n-    //  (12) command\n-    //  (4) size\n-    //  (4) checksum\n-    //  (x) data\n-    //\n     bool fMoreWork = false;\n \n     if (!pfrom->vRecvGetData.empty())\n@@ -3868,19 +3860,6 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n     CNetMessage& msg(msgs.front());\n \n     msg.SetVersion(pfrom->GetCommonVersion());\n-    // Check network magic\n-    if (!msg.m_valid_netmagic) {\n-        LogPrint(BCLog::NET, \"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.m_command), pfrom->GetId());\n-        pfrom->fDisconnect = true;\n-        return false;\n-    }\n-\n-    // Check header\n-    if (!msg.m_valid_header)\n-    {\n-        LogPrint(BCLog::NET, \"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(msg.m_command), pfrom->GetId());\n-        return fMoreWork;\n-    }\n     const std::string& msg_type = msg.m_command;\n \n     // Message size"
      },
      {
        "sha": "84b6e96aee90b4be1d58ee920c2b149602afd0e5",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 20,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deb52711a17236d0fca302701b5af585341ab42a/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deb52711a17236d0fca302701b5af585341ab42a/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=deb52711a17236d0fca302701b5af585341ab42a",
        "patch": "@@ -111,31 +111,20 @@ std::string CMessageHeader::GetCommand() const\n     return std::string(pchCommand, pchCommand + strnlen(pchCommand, COMMAND_SIZE));\n }\n \n-bool CMessageHeader::IsValid(const MessageStartChars& pchMessageStartIn) const\n+bool CMessageHeader::IsCommandValid() const\n {\n-    // Check start string\n-    if (memcmp(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE) != 0)\n-        return false;\n-\n     // Check the command string for errors\n-    for (const char* p1 = pchCommand; p1 < pchCommand + COMMAND_SIZE; p1++)\n-    {\n-        if (*p1 == 0)\n-        {\n+    for (const char* p1 = pchCommand; p1 < pchCommand + COMMAND_SIZE; ++p1) {\n+        if (*p1 == 0) {\n             // Must be all zeros after the first zero\n-            for (; p1 < pchCommand + COMMAND_SIZE; p1++)\n-                if (*p1 != 0)\n+            for (; p1 < pchCommand + COMMAND_SIZE; ++p1) {\n+                if (*p1 != 0) {\n                     return false;\n-        }\n-        else if (*p1 < ' ' || *p1 > 0x7E)\n+                }\n+            }\n+        } else if (*p1 < ' ' || *p1 > 0x7E) {\n             return false;\n-    }\n-\n-    // Message size\n-    if (nMessageSize > MAX_SIZE)\n-    {\n-        LogPrintf(\"CMessageHeader::IsValid(): (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand(), nMessageSize);\n-        return false;\n+        }\n     }\n \n     return true;"
      },
      {
        "sha": "9a44a1626c58ff07d36b11019612a8e3dbfdf26d",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deb52711a17236d0fca302701b5af585341ab42a/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deb52711a17236d0fca302701b5af585341ab42a/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=deb52711a17236d0fca302701b5af585341ab42a",
        "patch": "@@ -45,7 +45,7 @@ class CMessageHeader\n     CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn);\n \n     std::string GetCommand() const;\n-    bool IsValid(const MessageStartChars& messageStart) const;\n+    bool IsCommandValid() const;\n \n     SERIALIZE_METHODS(CMessageHeader, obj) { READWRITE(obj.pchMessageStart, obj.pchCommand, obj.nMessageSize, obj.pchChecksum); }\n "
      },
      {
        "sha": "b799d3b43b866d4d0781eb00240d89ecfb34b7e3",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deb52711a17236d0fca302701b5af585341ab42a/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deb52711a17236d0fca302701b5af585341ab42a/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=deb52711a17236d0fca302701b5af585341ab42a",
        "patch": "@@ -189,10 +189,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         DeserializeFromFuzzingInput(buffer, s);\n         AssertEqualAfterSerializeDeserialize(s);\n #elif MESSAGEHEADER_DESERIALIZE\n-        const CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n         CMessageHeader mh;\n         DeserializeFromFuzzingInput(buffer, mh);\n-        (void)mh.IsValid(pchMessageStart);\n+        (void)mh.IsCommandValid();\n #elif ADDRESS_DESERIALIZE\n         CAddress a;\n         DeserializeFromFuzzingInput(buffer, a);"
      },
      {
        "sha": "7e216e16feb4e9fff02a34033dd21fb268c186e2",
        "filename": "src/test/fuzz/p2p_transport_deserializer.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deb52711a17236d0fca302701b5af585341ab42a/src/test/fuzz/p2p_transport_deserializer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deb52711a17236d0fca302701b5af585341ab42a/src/test/fuzz/p2p_transport_deserializer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_deserializer.cpp?ref=deb52711a17236d0fca302701b5af585341ab42a",
        "patch": "@@ -39,12 +39,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                 assert(result->m_raw_message_size <= buffer.size());\n                 assert(result->m_raw_message_size == CMessageHeader::HEADER_SIZE + result->m_message_size);\n                 assert(result->m_time == m_time);\n-                if (result->m_valid_header) {\n-                    assert(result->m_valid_netmagic);\n-                }\n-                if (!result->m_valid_netmagic) {\n-                    assert(!result->m_valid_header);\n-                }\n             }\n         }\n     }"
      },
      {
        "sha": "78a9d2e8523b9133216edc3ae839b4e242855e69",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deb52711a17236d0fca302701b5af585341ab42a/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deb52711a17236d0fca302701b5af585341ab42a/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=deb52711a17236d0fca302701b5af585341ab42a",
        "patch": "@@ -81,7 +81,7 @@ def test_buffer(self):\n     def test_magic_bytes(self):\n         self.log.info(\"Test message with invalid magic bytes disconnects peer\")\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n-        with self.nodes[0].assert_debug_log(['PROCESSMESSAGE: INVALID MESSAGESTART badmsg']):\n+        with self.nodes[0].assert_debug_log(['HEADER ERROR - MESSAGESTART (badmsg, 2 bytes), received ffffffff']):\n             msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n             # modify magic bytes\n             msg = b'\\xff' * 4 + msg[4:]\n@@ -105,7 +105,7 @@ def test_checksum(self):\n     def test_size(self):\n         self.log.info(\"Test message with oversized payload disconnects peer\")\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n-        with self.nodes[0].assert_debug_log(['']):\n+        with self.nodes[0].assert_debug_log(['HEADER ERROR - SIZE (badmsg, 4000001 bytes)']):\n             msg = msg_unrecognized(str_data=\"d\" * (VALID_DATA_LIMIT + 1))\n             msg = conn.build_message(msg)\n             conn.send_raw_message(msg)\n@@ -115,9 +115,8 @@ def test_size(self):\n     def test_msgtype(self):\n         self.log.info(\"Test message with invalid message type logs an error\")\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n-        with self.nodes[0].assert_debug_log(['PROCESSMESSAGE: ERRORS IN HEADER']):\n+        with self.nodes[0].assert_debug_log(['HEADER ERROR - COMMAND']):\n             msg = msg_unrecognized(str_data=\"d\")\n-            msg.msgtype = b'\\xff' * 12\n             msg = conn.build_message(msg)\n             # Modify msgtype\n             msg = msg[:7] + b'\\x00' + msg[7 + 1:]"
      }
    ]
  }
]