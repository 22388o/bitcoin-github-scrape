meshcollider,2018-11-03T02:37:11Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14646#issuecomment-435554106,435554106,
sipa,2018-11-03T09:35:27Z,"@Sjors My idea is that the wallet will contain a number of records, each of which has a descriptor, a bool to indicate whether it's for change or not, a birthday, perhaps information about what HW device to prompt for, a gap limit, ...; those are all static configuration that generally doesn't change unless you import something. In addition there will be a wallet entry per expanded element of a re",https://github.com/bitcoin/bitcoin/pull/14646#issuecomment-435574146,435574146,
DrahtBot,2018-11-03T15:12:38Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14826](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14826.html) (Avoid expanding descriptor scriptPubKeys by",https://github.com/bitcoin/bitcoin/pull/14646#issuecomment-435595274,435595274,
jonasschnelli,2018-11-07T02:13:47Z,Nice. Concept ACK.,https://github.com/bitcoin/bitcoin/pull/14646#issuecomment-436479167,436479167,
sipa,2018-11-28T23:26:47Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/14646#issuecomment-442645467,442645467,
meshcollider,2018-12-12T03:31:33Z,"Because this is obviously intended to be followed-up by more work, I think we can leave the last couple nits to be addressed later",https://github.com/bitcoin/bitcoin/pull/14646#issuecomment-446449477,446449477,
Sjors,2018-11-03T08:39:04Z,Add a test for this?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230548862,230548862,src/script/descriptor.cpp
Sjors,2018-11-03T08:39:51Z,n00b C++ question: what happens if `cache_read` is too short?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230548877,230548877,src/script/descriptor.cpp
Sjors,2018-11-03T08:51:35Z,"Can you add comments (to the existing code) what these two loops are about? E.g.\n```\n// Is ranged descriptor, expand up to 3 results\nsize_t max ...\nfor (size_t i = 0; i < max; ++i)\n...\n// ???\nfor (int t = 0; t < 2; ++t) \n```",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230549061,230549061,src/test/descriptor_tests.cpp
Sjors,2018-11-03T08:56:44Z,"Since `ExpandHelper` doesn't care, should `ExpandFromCache` explicitly check that it wasn't unintentionally called with `cache=nullptr`? Or should `ExpandFromCache` be agnostic to whether or not there's actually a (useful) cache?",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230549171,230549171,src/script/descriptor.cpp
sipa,2018-11-03T09:30:12Z,That would be undefined behavior.\n\nThankfully the line above checks that this isn't the case :),https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230549882,230549882,src/script/descriptor.cpp
sipa,2018-11-03T09:30:56Z,"The argument is a reference, not a pointer. Dereferencing a nullptr is UB.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230549894,230549894,src/script/descriptor.cpp
Sjors,2018-11-03T10:54:37Z,"Ah yes, `cache` is a pointer for `Expand` and a reference for `ExpandFromCache`. ",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230551654,230551654,src/script/descriptor.cpp
sipa,2018-11-03T23:52:32Z,Done.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230571330,230571330,src/script/descriptor.cpp
sipa,2018-11-03T23:52:55Z,Added some comments to the test.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230571333,230571333,src/test/descriptor_tests.cpp
practicalswift,2018-11-04T21:25:03Z,Redundant trailing `;` :-),https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230605976,230605976,src/script/descriptor.cpp
practicalswift,2018-11-04T21:25:13Z,Same here :-),https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230605984,230605984,src/script/descriptor.cpp
practicalswift,2018-11-04T21:27:55Z,Nit: Better doing it explicitly using ternary operator?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606091,230606091,src/script/descriptor.cpp
practicalswift,2018-11-04T21:32:16Z,This move is redundant?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606233,230606233,src/script/descriptor.cpp
practicalswift,2018-11-04T21:32:50Z,Same here? The result is passed as a const reference argument and the move is hence a noop?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606259,230606259,src/script/descriptor.cpp
practicalswift,2018-11-04T21:33:39Z,Override redundant here?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606297,230606297,src/script/descriptor.cpp
practicalswift,2018-11-04T21:33:53Z,Same here?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606304,230606304,src/script/descriptor.cpp
practicalswift,2018-11-04T21:34:06Z,Same here?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606313,230606313,src/script/descriptor.cpp
practicalswift,2018-11-04T21:34:18Z,And here?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606321,230606321,src/script/descriptor.cpp
practicalswift,2018-11-04T21:35:00Z,Should be explicit?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606339,230606339,src/script/descriptor.cpp
practicalswift,2018-11-04T21:35:31Z,Explicit?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606357,230606357,src/script/descriptor.cpp
practicalswift,2018-11-04T21:35:38Z,Explicit?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606363,230606363,src/script/descriptor.cpp
practicalswift,2018-11-04T21:35:47Z,Explicit?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606368,230606368,src/script/descriptor.cpp
practicalswift,2018-11-04T21:35:54Z,Explicit?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606373,230606373,src/script/descriptor.cpp
practicalswift,2018-11-04T21:37:13Z,`pos++` is a dead store?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230606426,230606426,src/script/descriptor.cpp
sipa,2018-11-05T02:21:37Z,I don't know what you mean.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230620443,230620443,src/script/descriptor.cpp
sipa,2018-11-05T02:22:32Z,How so?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230620525,230620525,src/script/descriptor.cpp
sipa,2018-11-05T02:22:51Z,"I don't understand.\n\nEDIT: Ah, I see; there is no `operator+=` for `std::string` that takes advantage of the rvalue, so this indeed has no function. That's strange, as it seems that there is an `operator+` that does.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230620549,230620549,src/script/descriptor.cpp
sipa,2018-11-05T02:26:33Z,"`override` is always redundant. Its function is making sure the code does what is intended, by preventing an accidental rename/change of the base class's definition from unintentionally changing the override into a new non-virtual method.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230620860,230620860,src/script/descriptor.cpp
sipa,2018-11-05T02:43:13Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230622438,230622438,src/script/descriptor.cpp
sipa,2018-11-05T02:43:22Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230622452,230622452,src/script/descriptor.cpp
sipa,2018-11-05T02:43:33Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230622467,230622467,src/script/descriptor.cpp
sipa,2018-11-05T02:43:39Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230622478,230622478,src/script/descriptor.cpp
sipa,2018-11-05T02:43:52Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230622500,230622500,src/script/descriptor.cpp
sipa,2018-11-05T02:43:58Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230622508,230622508,src/script/descriptor.cpp
sipa,2018-11-05T02:44:05Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230622520,230622520,src/script/descriptor.cpp
sipa,2018-11-05T02:44:12Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230622538,230622538,src/script/descriptor.cpp
sipa,2018-11-05T02:44:19Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230622550,230622550,src/script/descriptor.cpp
sipa,2018-11-05T02:44:25Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230622557,230622557,src/script/descriptor.cpp
practicalswift,2018-11-05T08:10:21Z,"I mean:\n\n```\nsize_t pos = extra.size() > 0 ? 1 : 0;\n```",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230659536,230659536,src/script/descriptor.cpp
practicalswift,2018-11-05T08:27:12Z,"Yes, obviously :-)  But I was thinking ""redundancy"" in the sense that the function also was declared as `final`. \n\nRationale: [Virtual functions should specify exactly one of virtual, override, or final](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c128-virtual-functions-should-specify-exactly-one-of-virtual-override-or-final)",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230663283,230663283,src/script/descriptor.cpp
Sjors,2018-11-05T08:36:39Z,Currently if `extra.size()` is 0 `pos` is `0` because `0 > 0` is `false` and `false` is `0`? I also like dumbing it down a bit with the ternary operator :-),https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230665444,230665444,src/script/descriptor.cpp
Sjors,2018-11-05T08:57:07Z,"It's already used by the test `BOOST_CHECK(spks == spks_cached)`, but probably deserves its own test.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230670527,230670527,src/script/sign.h
Sjors,2018-11-05T09:23:52Z,"Fun fact: this is only place in the entire codebase where a function is declared `final` (search `\).* final[$\ ]`). I like the suggestion in this guideline, though no strong opinion.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230678480,230678480,src/script/descriptor.cpp
Sjors,2018-11-05T09:28:36Z,One comment is probably enough for something that can be changed with find & replace :-),https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230680064,230680064,src/script/descriptor.cpp
ryanofsky,2018-11-05T17:48:25Z,Can you add description of this method: Return string containing initial arguments to descriptor function (prior to any key or script arguments)?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230847308,230847308,src/script/descriptor.cpp
ryanofsky,2018-11-05T18:02:47Z,"Can you add a description of this member: List of descriptor public key arguments. Length > 1 for multisig descriptors, 1 for key or key hash descriptors, 0 for raw or address descriptors?",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230852092,230852092,src/script/descriptor.cpp
ryanofsky,2018-11-05T18:06:22Z,"Can you add a description of this member: Single descriptor script argument. Set for sh/wsh descriptors, unset for other types of descriptors?",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230853173,230853173,src/script/descriptor.cpp
ryanofsky,2018-11-05T18:07:11Z,Can you add a description of this member: name of descriptor function?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230853421,230853421,src/script/descriptor.cpp
ryanofsky,2018-11-05T18:11:24Z,"I would maybe call these members `m_pubkey_args` and `m_script_arg` to give names more meaning. This would also avoid `RawDescriptor::m_script` shadowing `DescriptorImpl::m_script`, which is kind of confusing.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230854836,230854836,src/script/descriptor.cpp
ryanofsky,2018-11-05T18:23:08Z,Can you add a more complete description of this method: Expand descriptor into corresponding scriptPubKey(s) using keys indicated by `m_pubkey` arguments?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230858743,230858743,src/script/descriptor.cpp
ryanofsky,2018-11-05T18:38:39Z,"Maybe call this method Expand. It seem inconsistent to talk about ""expanding descriptors"" externally and ""making scripts"" internally when they seem refer to same thing.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230863886,230863886,src/script/descriptor.cpp
ryanofsky,2018-11-05T18:50:34Z,"Having these two overloaded methods and deciding to call one or other other at runtime, then asserting the right one is called and overloaded seems awkward. I think it'd be better to replace both of these with a single pure virtual method:\n\n```c++\nvirtual void ExpandImpl(\n    const std::vector<CPubKey>& pubkeys,\n    const CScript* script,\n    std::vector<CScript>& output_scripts,\n   ",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230867992,230867992,src/script/descriptor.cpp
sipa,2018-11-05T19:29:18Z,"@practicalswift Oh, good point - I never realized that `override` would be redundant with `final`. Fixing.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230881249,230881249,src/script/descriptor.cpp
sipa,2018-11-05T19:30:14Z,I think this function is too trivial. It's just a dumb datastructure and a comparison operator. What would the test do? Replicate the implementation and verify it does the same? Such tests are not useful.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230881563,230881563,src/script/sign.h
sipa,2018-11-05T19:56:51Z,Done.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230890669,230890669,src/script/descriptor.cpp
sipa,2018-11-05T19:57:03Z,Done.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230890746,230890746,src/script/descriptor.cpp
sipa,2018-11-05T19:57:10Z,Done.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230890794,230890794,src/script/descriptor.cpp
sipa,2018-11-05T19:57:19Z,Done.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230890839,230890839,src/script/descriptor.cpp
sipa,2018-11-05T19:57:48Z,"Good point, I didn't even realize it was shadowing.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230890957,230890957,src/script/descriptor.cpp
sipa,2018-11-05T19:58:34Z,"Rewritten (see next suggestion) and added more comments.\n\nI don't think it should be called `Expand`, as it's only one piece of the expansion process.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230891213,230891213,src/script/descriptor.cpp
sipa,2018-11-05T19:59:44Z,"That's much better indeed, as it allows static checking that all implementations provide it.\n\nI don't think Expand is a good name.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r230891580,230891580,src/script/descriptor.cpp
Sjors,2018-11-06T09:06:05Z,nit: `output_script` -> `output_scripts` (was already wrong in the original),https://github.com/bitcoin/bitcoin/pull/14646#discussion_r231043088,231043088,src/script/descriptor.h
Sjors,2018-11-06T09:07:52Z,I think the comments were lost in a recent refactor :-(,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r231043596,231043596,src/test/descriptor_tests.cpp
sipa,2018-11-07T19:02:45Z,I added a new commit with more comments.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r231636363,231636363,src/test/descriptor_tests.cpp
meshcollider,2018-11-09T08:07:05Z,nit: `poisition` -> `position`,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r232168071,232168071,src/test/descriptor_tests.cpp
practicalswift,2018-11-09T08:08:15Z,Still missing `explicit`? :-),https://github.com/bitcoin/bitcoin/pull/14646#discussion_r232168283,232168283,src/script/descriptor.cpp
meshcollider,2018-11-09T08:22:08Z,Why `>=` instead of just equality? In what case would it be longer?,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r232171125,232171125,src/script/descriptor.cpp
sipa,2018-11-16T16:11:06Z,"There can be multiple public keys in one descriptor, and the cache contains all of them concatenated.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r234260295,234260295,src/script/descriptor.cpp
Empact,2018-11-22T16:51:52Z,"Doesn't seem like there is a case where both `cache_read` and `cache_write` should be supplied, right? If you make that explicit / an error condition we can rely on it elsewhere.",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r235785867,235785867,src/script/descriptor.cpp
Empact,2018-11-22T16:57:03Z,How about instead extracting `GetPubKeyInfo` and changing up the caller in `ExpandHelper` to only request the desired information? This looks doable if `cache_read` and `cache_write` are mutually exclusive.,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r235786983,235786983,src/script/descriptor.cpp
ryanofsky,2018-11-27T20:31:14Z,"re: https://github.com/bitcoin/bitcoin/pull/14646#discussion_r235786983\n\n> How about instead extracting GetPubKeyInfo and changing up the caller in ExpandHelper to only request the desired information? This looks doable if cache_read and cache_write are mutually exclusive.\n\nIt does seem like it would be a minor simplification to have separate methods for retrieving CPubKey and KeyOriginInf",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r236834645,236834645,src/script/descriptor.cpp
meshcollider,2018-12-10T04:30:30Z,nit: `of` -> `for` ,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r240082037,240082037,src/script/descriptor.cpp
meshcollider,2018-12-10T12:25:04Z,nit: remove `-`,https://github.com/bitcoin/bitcoin/pull/14646#discussion_r240190425,240190425,src/script/descriptor.h
Sjors,2018-12-11T15:39:47Z,"Nit: explain that if we already have a cache, we don't want `GetPubKey` to return public keys, since we're getting them from the cache ourselves. This is counter intuitive given the name of the function, but the point is to only make `GetPubKey` do work if our cache is empty.\n\nAlternatively, maybe the stuff below under `if (cache_read)` belongs in `GetPubKey`?\n\nMaybe add an assert to `GetP",https://github.com/bitcoin/bitcoin/pull/14646#discussion_r240662924,240662924,src/script/descriptor.cpp
Sjors,2018-12-11T16:10:48Z,Can we rename this to `m_sub_descriptor_arg`? (I found that a replace-all reduced my headache),https://github.com/bitcoin/bitcoin/pull/14646#discussion_r240677238,240677238,src/script/descriptor.cpp
