[
  {
    "sha": "8623e251b651bf9f1f36be25d20ae6032bff7554",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjIzZTI1MWI2NTFiZjlmMWYzNmJlMjVkMjBhZTYwMzJiZmY3NTU0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-09T14:09:01Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-06T20:16:27Z"
      },
      "message": "Util: Create ArgsManager class",
      "tree": {
        "sha": "53982a20caf55450a6b0fa2a084562cdf61d9a79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53982a20caf55450a6b0fa2a084562cdf61d9a79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8623e251b651bf9f1f36be25d20ae6032bff7554",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY5qIdAAoJEIhmwY6hyUSiEa8P/jWmyRXkie1mYy7RvGIpifAw\nDUbKinU8oY4UziCrVibXemMUPqqdbfAf/1bwCP6VOnuhA9ZrAntVdYp/1JU/LlFI\n6MUyviZEwul7obFCO6WXtvU9haMuM1Gf+UiTeAM86c9HJLP1lJt/o82JpYv/Ca8Y\nkv9Q+6FN5b4cSzYAlOwnCzyoEO9I6HwWiYZrIEdUKunsnTl9NU32/kha+9wIgCDX\nE0zY7BJDeIa0LZuxEAQFg0bsEQbBtoORUGFBTmwUz826monykfTeyoIr191Imeth\nh0kf6RBPVeYotYCXMCkfJQGCosMWnKeiLnQkW3wCIVFbXn2BNOhFF/n4JWnFE8MZ\noup0n1SNLPeLsJWY9K/Xs+K92oMpMKNejt8+PA+83c9V8U4f1n1Nr33ibez1ofb4\nHEnJnmyctAwgV+u/yUYwi/hBHnLOWZMKK/+RMDxJ6x1ixQZOrcWsapOvOh6cESxH\n4j74ySrthDrLZJd+r3XpzD/Mmn3lZbsG3KJJb9D3XEtGbaLMH3QtQB6HwYfP1k4/\nbhq7T6xYp948AsCuN5pgHuR62UCk56fJWk+id5Wkx9qaMfYMk6x+LEoHPsO+16OZ\nZpuhrCcNxbE1MyVftrAXD20YtB8lfU8D/MjNTYqdWf1VY/PE60blHRbOXEwR/8xl\nRgr1n/DG7yBw5rsZAypC\n=rIJl\n-----END PGP SIGNATURE-----",
        "payload": "tree 53982a20caf55450a6b0fa2a084562cdf61d9a79\nparent 8c28670e92b6422eb7576f074446238f9f221999\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1483970941 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491509787 +0200\n\nUtil: Create ArgsManager class\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8623e251b651bf9f1f36be25d20ae6032bff7554",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8623e251b651bf9f1f36be25d20ae6032bff7554",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8623e251b651bf9f1f36be25d20ae6032bff7554/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c28670e92b6422eb7576f074446238f9f221999",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c28670e92b6422eb7576f074446238f9f221999",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c28670e92b6422eb7576f074446238f9f221999"
      }
    ],
    "stats": {
      "total": 156,
      "additions": 114,
      "deletions": 42
    },
    "files": [
      {
        "sha": "4395a6f4f5df43d7a5b7f2882e5597a2123e41a9",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 28,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8623e251b651bf9f1f36be25d20ae6032bff7554/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8623e251b651bf9f1f36be25d20ae6032bff7554/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=8623e251b651bf9f1f36be25d20ae6032bff7554",
        "patch": "@@ -17,8 +17,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-extern std::map<std::string, std::string> mapArgs;\n-\n BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n@@ -100,52 +98,63 @@ BOOST_AUTO_TEST_CASE(util_DateTimeStrFormat)\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%a, %d %b %Y %H:%M:%S +0000\", 1317425777), \"Fri, 30 Sep 2011 23:36:17 +0000\");\n }\n \n+class TestArgsManager : public ArgsManager\n+{\n+public:\n+    std::map<std::string, std::string>& GetMapArgs()\n+    {\n+        return mapArgs;\n+    };\n+};\n+\n BOOST_AUTO_TEST_CASE(util_ParseParameters)\n {\n+    TestArgsManager testArgs;\n     const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n \n-    ParseParameters(0, (char**)argv_test);\n-    BOOST_CHECK(mapArgs.empty() && mapMultiArgs.empty());\n+    testArgs.ParseParameters(0, (char**)argv_test);\n+    BOOST_CHECK(testArgs.GetMapArgs().empty() && mapMultiArgs.empty());\n \n-    ParseParameters(1, (char**)argv_test);\n-    BOOST_CHECK(mapArgs.empty() && mapMultiArgs.empty());\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    BOOST_CHECK(testArgs.GetMapArgs().empty() && mapMultiArgs.empty());\n \n-    ParseParameters(5, (char**)argv_test);\n+    testArgs.ParseParameters(5, (char**)argv_test);\n     // expectation: -ignored is ignored (program name argument),\n     // -a, -b and -ccc end up in map, -d ignored because it is after\n     // a non-option argument (non-GNU option parsing)\n-    BOOST_CHECK(mapArgs.size() == 3 && mapMultiArgs.size() == 3);\n-    BOOST_CHECK(IsArgSet(\"-a\") && IsArgSet(\"-b\") && IsArgSet(\"-ccc\")\n-                && !IsArgSet(\"f\") && !IsArgSet(\"-d\"));\n+    BOOST_CHECK(testArgs.GetMapArgs().size() == 3 && mapMultiArgs.size() == 3);\n+    BOOST_CHECK(testArgs.IsArgSet(\"-a\") && testArgs.IsArgSet(\"-b\") && testArgs.IsArgSet(\"-ccc\")\n+                && !testArgs.IsArgSet(\"f\") && !testArgs.IsArgSet(\"-d\"));\n     BOOST_CHECK(mapMultiArgs.count(\"-a\") && mapMultiArgs.count(\"-b\") && mapMultiArgs.count(\"-ccc\")\n                 && !mapMultiArgs.count(\"f\") && !mapMultiArgs.count(\"-d\"));\n \n-    BOOST_CHECK(mapArgs[\"-a\"] == \"\" && mapArgs[\"-ccc\"] == \"multiple\");\n+    BOOST_CHECK(testArgs.GetMapArgs()[\"-a\"] == \"\" && testArgs.GetMapArgs()[\"-ccc\"] == \"multiple\");\n     BOOST_CHECK(mapMultiArgs.at(\"-ccc\").size() == 2);\n }\n \n BOOST_AUTO_TEST_CASE(util_GetArg)\n {\n-    mapArgs.clear();\n-    mapArgs[\"strtest1\"] = \"string...\";\n+    TestArgsManager testArgs;\n+    testArgs.GetMapArgs().clear();\n+    testArgs.GetMapArgs()[\"strtest1\"] = \"string...\";\n     // strtest2 undefined on purpose\n-    mapArgs[\"inttest1\"] = \"12345\";\n-    mapArgs[\"inttest2\"] = \"81985529216486895\";\n+    testArgs.GetMapArgs()[\"inttest1\"] = \"12345\";\n+    testArgs.GetMapArgs()[\"inttest2\"] = \"81985529216486895\";\n     // inttest3 undefined on purpose\n-    mapArgs[\"booltest1\"] = \"\";\n+    testArgs.GetMapArgs()[\"booltest1\"] = \"\";\n     // booltest2 undefined on purpose\n-    mapArgs[\"booltest3\"] = \"0\";\n-    mapArgs[\"booltest4\"] = \"1\";\n-\n-    BOOST_CHECK_EQUAL(GetArg(\"strtest1\", \"default\"), \"string...\");\n-    BOOST_CHECK_EQUAL(GetArg(\"strtest2\", \"default\"), \"default\");\n-    BOOST_CHECK_EQUAL(GetArg(\"inttest1\", -1), 12345);\n-    BOOST_CHECK_EQUAL(GetArg(\"inttest2\", -1), 81985529216486895LL);\n-    BOOST_CHECK_EQUAL(GetArg(\"inttest3\", -1), -1);\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest1\", false), true);\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest2\", false), false);\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest3\", false), false);\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest4\", false), true);\n+    testArgs.GetMapArgs()[\"booltest3\"] = \"0\";\n+    testArgs.GetMapArgs()[\"booltest4\"] = \"1\";\n+\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest1\", \"default\"), \"string...\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest2\", \"default\"), \"default\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest1\", -1), 12345);\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest2\", -1), 81985529216486895LL);\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest3\", -1), -1);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest1\", false), true);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest2\", false), false);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest3\", false), false);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest4\", false), true);\n }\n \n BOOST_AUTO_TEST_CASE(util_FormatMoney)"
      },
      {
        "sha": "267ab4534651f78625a079395afc2e7b8709648c",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 12,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8623e251b651bf9f1f36be25d20ae6032bff7554/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8623e251b651bf9f1f36be25d20ae6032bff7554/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=8623e251b651bf9f1f36be25d20ae6032bff7554",
        "patch": "@@ -13,7 +13,6 @@\n #include \"fs.h\"\n #include \"random.h\"\n #include \"serialize.h\"\n-#include \"sync.h\"\n #include \"utilstrencodings.h\"\n #include \"utiltime.h\"\n \n@@ -105,8 +104,7 @@ namespace boost {\n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n-CCriticalSection cs_args;\n-std::map<std::string, std::string> mapArgs;\n+ArgsManager argsGlobal;\n static std::map<std::string, std::vector<std::string> > _mapMultiArgs;\n const std::map<std::string, std::vector<std::string> >& mapMultiArgs = _mapMultiArgs;\n bool fPrintToConsole = false;\n@@ -382,7 +380,7 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n-void ParseParameters(int argc, const char* const argv[])\n+void ArgsManager::ParseParameters(int argc, const char* const argv[])\n {\n     LOCK(cs_args);\n     mapArgs.clear();\n@@ -418,37 +416,37 @@ void ParseParameters(int argc, const char* const argv[])\n     }\n }\n \n-bool IsArgSet(const std::string& strArg)\n+bool ArgsManager::IsArgSet(const std::string& strArg)\n {\n     LOCK(cs_args);\n     return mapArgs.count(strArg);\n }\n \n-std::string GetArg(const std::string& strArg, const std::string& strDefault)\n+std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault)\n {\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return mapArgs[strArg];\n     return strDefault;\n }\n \n-int64_t GetArg(const std::string& strArg, int64_t nDefault)\n+int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault)\n {\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return atoi64(mapArgs[strArg]);\n     return nDefault;\n }\n \n-bool GetBoolArg(const std::string& strArg, bool fDefault)\n+bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault)\n {\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return InterpretBool(mapArgs[strArg]);\n     return fDefault;\n }\n \n-bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n+bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n@@ -457,20 +455,64 @@ bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n     return true;\n }\n \n-bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n+bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n     if (fValue)\n         return SoftSetArg(strArg, std::string(\"1\"));\n     else\n         return SoftSetArg(strArg, std::string(\"0\"));\n }\n \n-void ForceSetArg(const std::string& strArg, const std::string& strValue)\n+void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n     mapArgs[strArg] = strValue;\n }\n \n+void ParseParameters(int argc, const char* const argv[])\n+{\n+    argsGlobal.ParseParameters(argc, argv);\n+}\n+\n+void ReadConfigFile(const std::string& confPath)\n+{\n+    argsGlobal.ReadConfigFile(confPath);\n+}\n+\n+bool IsArgSet(const std::string& strArg)\n+{\n+    return argsGlobal.IsArgSet(strArg);\n+}\n+\n+std::string GetArg(const std::string& strArg, const std::string& strDefault)\n+{\n+    return argsGlobal.GetArg(strArg, strDefault);\n+}\n+\n+int64_t GetArg(const std::string& strArg, int64_t nDefault)\n+{\n+    return argsGlobal.GetArg(strArg, nDefault);\n+}\n+\n+bool GetBoolArg(const std::string& strArg, bool fDefault)\n+{\n+    return argsGlobal.GetBoolArg(strArg, fDefault);\n+}\n+\n+bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n+{\n+    return argsGlobal.SoftSetArg(strArg, strValue);\n+}\n+\n+bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n+{\n+    return argsGlobal.SoftSetBoolArg(strArg, fValue);\n+}\n+\n+void ForceSetArg(const std::string& strArg, const std::string& strValue)\n+{\n+    return argsGlobal.ForceSetArg(strArg, strValue);\n+}\n \n \n static const int screenWidth = 79;\n@@ -587,7 +629,7 @@ fs::path GetConfigFile(const std::string& confPath)\n     return pathConfigFile;\n }\n \n-void ReadConfigFile(const std::string& confPath)\n+void ArgsManager::ReadConfigFile(const std::string& confPath)\n {\n     fs::ifstream streamConfig(GetConfigFile(confPath));\n     if (!streamConfig.good())"
      },
      {
        "sha": "8a1697090c89f11ac06251ef5da711e288c2289b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8623e251b651bf9f1f36be25d20ae6032bff7554/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8623e251b651bf9f1f36be25d20ae6032bff7554/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=8623e251b651bf9f1f36be25d20ae6032bff7554",
        "patch": "@@ -16,6 +16,7 @@\n \n #include \"compat.h\"\n #include \"fs.h\"\n+#include \"sync.h\"\n #include \"tinyformat.h\"\n #include \"utiltime.h\"\n \n@@ -139,7 +140,6 @@ bool error(const char* fmt, const Args&... args)\n }\n \n void PrintExceptionContinue(const std::exception *pex, const char* pszThread);\n-void ParseParameters(int argc, const char*const argv[]);\n void FileCommit(FILE *file);\n bool TruncateFile(FILE *file, unsigned int length);\n int RaiseFileDescriptorLimit(int nMinFD);\n@@ -154,7 +154,6 @@ fs::path GetConfigFile(const std::string& confPath);\n fs::path GetPidFile();\n void CreatePidFile(const fs::path &path, pid_t pid);\n #endif\n-void ReadConfigFile(const std::string& confPath);\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n@@ -171,6 +170,14 @@ inline bool IsSwitchChar(char c)\n #endif\n }\n \n+class ArgsManager\n+{\n+protected:\n+    CCriticalSection cs_args;\n+    std::map<std::string, std::string> mapArgs;\n+public:\n+    void ParseParameters(int argc, const char*const argv[]);\n+    void ReadConfigFile(const std::string& confPath);\n /**\n  * Return true if the given argument has been manually set\n  *\n@@ -226,6 +233,20 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n // Forces a arg setting, used only in testing\n void ForceSetArg(const std::string& strArg, const std::string& strValue);\n+};\n+\n+extern ArgsManager argsGlobal;\n+\n+// wrappers using the global ArgsManager:\n+void ParseParameters(int argc, const char*const argv[]);\n+void ReadConfigFile(const std::string& confPath);\n+bool IsArgSet(const std::string& strArg);\n+std::string GetArg(const std::string& strArg, const std::string& strDefault);\n+int64_t GetArg(const std::string& strArg, int64_t nDefault);\n+bool GetBoolArg(const std::string& strArg, bool fDefault);\n+bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n+bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n+void ForceSetArg(const std::string& strArg, const std::string& strValue);\n \n /**\n  * Format a string to be used as group of options in help messages"
      }
    ]
  },
  {
    "sha": "b9e117b1fa3db4d29dec165cccad37fe9e17a2c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWUxMTdiMWZhM2RiNGQyOWRlYzE2NWNjY2FkMzdmZTllMTdhMmMy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-03-29T14:14:58Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-06T20:16:30Z"
      },
      "message": "Util: Set _mapMultiArgs in ArgsManager::SoftSetArg, ForceSetArg, SoftSetBoolArg",
      "tree": {
        "sha": "d3e4939676926698d224d0f2a05f7b571f251888",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3e4939676926698d224d0f2a05f7b571f251888"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9e117b1fa3db4d29dec165cccad37fe9e17a2c2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY5qIeAAoJEIhmwY6hyUSiXt8QAJz6Bp2/v1yTzqQSMwAhi4eS\nOOZYWixRCqZY5AEOt6mxpGMOhSoyuMdyTD8tTKdwkQxxz3x5egBXAH8fb1LdqBLl\nas//owagjomKxA06+dAD8zhh8EN6th4TqbRrnoDyHw6Xa32uKX2EILxZixlL7qSz\nN49bOiyovnx/398IB7hq5Yz18zmBfn4DPohl08pRBh8EUgiBUgSlc4hSjGDjVKFW\nruyikphFQNcv+osbfe0wkrmbgr96pwnW+QBBGXtws30FnGtbOVq6hpEHXXLRBE+s\nHwctt9/9SzlswQUSHtdphWOpDtXUm2KdNq2+waYIzapgTLWaFBefGk5pzZXETMy1\noQqNl6PUYuDa/sM6sRCjap5GHqBA1NnyljnAErBO8GN96juFpXaMB4TLkWPxY4DP\nXpQokt7Lp0RITO4nzTgbh+/9yzbELCSyiMijStCgdPd+IDwH7EDzX0Mvn7MJ09dE\nk1aNHN44ruPlHUQQXfviYMs4rRf3p6hjGzoI5oLA3MI40UDA2pAGXPo1kP6K9EA+\n4hEt1j7bDAS3agLPOHVOScg6IQs85Jv8+BfsCVhvpaxk0+zChtl4E/7Y7zdk1g79\nKr5Thjk7WVK3SAA/RpF+LZn8CtHJg6ubaT4F78aP72jjg+k7Ltsu1uzRJ6VgNghB\nlD8Z6+lrBvAdDcRvYoEX\n=9m+r\n-----END PGP SIGNATURE-----",
        "payload": "tree d3e4939676926698d224d0f2a05f7b571f251888\nparent 8623e251b651bf9f1f36be25d20ae6032bff7554\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1490796898 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491509790 +0200\n\nUtil: Set _mapMultiArgs in ArgsManager::SoftSetArg, ForceSetArg, SoftSetBoolArg\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9e117b1fa3db4d29dec165cccad37fe9e17a2c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9e117b1fa3db4d29dec165cccad37fe9e17a2c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9e117b1fa3db4d29dec165cccad37fe9e17a2c2/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8623e251b651bf9f1f36be25d20ae6032bff7554",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8623e251b651bf9f1f36be25d20ae6032bff7554",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8623e251b651bf9f1f36be25d20ae6032bff7554"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1dd73e1048f0d15c9b469e8beed6aa087b3cf26a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9e117b1fa3db4d29dec165cccad37fe9e17a2c2/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9e117b1fa3db4d29dec165cccad37fe9e17a2c2/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=b9e117b1fa3db4d29dec165cccad37fe9e17a2c2",
        "patch": "@@ -451,7 +451,7 @@ bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strVa\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return false;\n-    mapArgs[strArg] = strValue;\n+    this->ForceSetArg(strArg, strValue);\n     return true;\n }\n \n@@ -467,6 +467,7 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n {\n     LOCK(cs_args);\n     mapArgs[strArg] = strValue;\n+    _mapMultiArgs[strArg].push_back(strValue);\n }\n \n void ParseParameters(int argc, const char* const argv[])"
      }
    ]
  },
  {
    "sha": "2aa8d32585c5cbc7de67ad78db608060066be39a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWE4ZDMyNTg1YzVjYmM3ZGU2N2FkNzhkYjYwODA2MDA2NmJlMzlh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-09T15:14:06Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-06T20:21:41Z"
      },
      "message": "Util: s/mapMultiArgs.count(/argsGlobal.IsArgSet(/",
      "tree": {
        "sha": "0dc216153db45f865706ad7fa449d429d0b53a9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0dc216153db45f865706ad7fa449d429d0b53a9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2aa8d32585c5cbc7de67ad78db608060066be39a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY5qNYAAoJEIhmwY6hyUSiY2YQALjwPBc5e3CiR2Y1D5FP+AHS\nWtHOlaUi83ZUgqDKkzyiUIkS5LRHWD2U0xqUEKKSWdITFAoLgBidm2yf2hMV8pGY\n0T1qs0Hs/C25B35gdinK8LcK7qZXkmfbeY9O3a71lnGVdAv7Lwqm6iOGXCCgsNRf\nfL+wg+HRrrEQrKm+rk08yiVuG6JSeOPusJnI/yyaiS7gJvP35/K1vp0qYXV2IfHt\n/ZRmkuHTprY3QYhoL4iEcR5YX5DGkuSRTME5yNYjQFoxM8azpCZABC3z6G+/D5dB\nmdp6dtvDYncF21ttZ4JFPALKFZ71lBxcnwrXzO/A3B7U6PRcpwdvtiTJMN8Vq2QF\n9m+eil9Wp1P/5UPZUwR55aNbd/jRgmoTreH4BXuz0dZ0Se7DBIVtxC0yDgCNv+Vj\nU0IRePAu4i2szX6ZJddNr6lf/sa51f+WhABSFhvl3SgxkIZZk2XeUHOzDvhGT3gn\ni2HdALjKdnkYdozwRsLrlxQv1VKufkM4VAGg8MLIKm64Ma/YKIGlf+sXGkQh7/rQ\nxvglacvEw7ai2FU0n4j6ozy9uhO0vVhLr68OsFP8++PM7eQ55wwhLPX8B7SajkSs\nHnUAx+aHmMBl304RESz5134+dUmljr+lNI+2y3E4RbayQ8/n38SY7PjHdv2XwUNO\nCjCl+N1eWyiPTY+aAS4P\n=ptrJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 0dc216153db45f865706ad7fa449d429d0b53a9d\nparent b9e117b1fa3db4d29dec165cccad37fe9e17a2c2\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1483974846 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491510101 +0200\n\nUtil: s/mapMultiArgs.count(/argsGlobal.IsArgSet(/\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa8d32585c5cbc7de67ad78db608060066be39a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa8d32585c5cbc7de67ad78db608060066be39a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa8d32585c5cbc7de67ad78db608060066be39a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9e117b1fa3db4d29dec165cccad37fe9e17a2c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9e117b1fa3db4d29dec165cccad37fe9e17a2c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9e117b1fa3db4d29dec165cccad37fe9e17a2c2"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "e588c28626805c4b47a49b6cd0832f3f8b2ccfa7",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aa8d32585c5cbc7de67ad78db608060066be39a/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aa8d32585c5cbc7de67ad78db608060066be39a/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=2aa8d32585c5cbc7de67ad78db608060066be39a",
        "patch": "@@ -93,7 +93,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n     std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n     std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n \n-    if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n+    if (argsGlobal.IsArgSet(\"-rpcauth\")) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n         BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs.at(\"-rpcauth\"))\n         {"
      },
      {
        "sha": "6013fb20f168a23592d75db6aca37985f69f5286",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aa8d32585c5cbc7de67ad78db608060066be39a/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aa8d32585c5cbc7de67ad78db608060066be39a/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=2aa8d32585c5cbc7de67ad78db608060066be39a",
        "patch": "@@ -196,7 +196,7 @@ static bool InitHTTPAllowList()\n     LookupHost(\"::1\", localv6, false);\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n-    if (mapMultiArgs.count(\"-rpcallowip\")) {\n+    if (argsGlobal.IsArgSet(\"-rpcallowip\")) {\n         const std::vector<std::string>& vAllow = mapMultiArgs.at(\"-rpcallowip\");\n         for (std::string strAllow : vAllow) {\n             CSubNet subnet;\n@@ -321,7 +321,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n         if (IsArgSet(\"-rpcbind\")) {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n-    } else if (mapMultiArgs.count(\"-rpcbind\")) { // Specific bind address\n+    } else if (argsGlobal.IsArgSet(\"-rpcbind\")) { // Specific bind address\n         const std::vector<std::string>& vbind = mapMultiArgs.at(\"-rpcbind\");\n         for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n             int port = defaultPort;"
      },
      {
        "sha": "4823289d30e9a31df5ef6f8d4f8485cc74d5f674",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aa8d32585c5cbc7de67ad78db608060066be39a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aa8d32585c5cbc7de67ad78db608060066be39a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2aa8d32585c5cbc7de67ad78db608060066be39a",
        "patch": "@@ -734,7 +734,7 @@ void InitParameterInteraction()\n             LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n     }\n \n-    if (mapMultiArgs.count(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0) {\n+    if (argsGlobal.IsArgSet(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0) {\n         // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n         if (SoftSetBoolArg(\"-dnsseed\", false))\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n@@ -888,8 +888,8 @@ bool AppInitParameterInteraction()\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max(\n-                (mapMultiArgs.count(\"-bind\") ? mapMultiArgs.at(\"-bind\").size() : 0) +\n-                (mapMultiArgs.count(\"-whitebind\") ? mapMultiArgs.at(\"-whitebind\").size() : 0), size_t(1));\n+                (argsGlobal.IsArgSet(\"-bind\") ? mapMultiArgs.at(\"-bind\").size() : 0) +\n+                (argsGlobal.IsArgSet(\"-whitebind\") ? mapMultiArgs.at(\"-whitebind\").size() : 0), size_t(1));\n     nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n@@ -904,7 +904,7 @@ bool AppInitParameterInteraction()\n         InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n-    if (mapMultiArgs.count(\"-debug\") > 0) {\n+    if (argsGlobal.IsArgSet(\"-debug\")) {\n         // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n         const std::vector<std::string>& categories = mapMultiArgs.at(\"-debug\");\n \n@@ -921,7 +921,7 @@ bool AppInitParameterInteraction()\n     }\n \n     // Now remove the logging categories which were explicitly excluded\n-    if (mapMultiArgs.count(\"-debugexclude\") > 0) {\n+    if (argsGlobal.IsArgSet(\"-debugexclude\")) {\n         const std::vector<std::string>& excludedCategories = mapMultiArgs.at(\"-debugexclude\");\n         for (const auto& cat : excludedCategories) {\n             uint32_t flag = 0;\n@@ -1093,7 +1093,7 @@ bool AppInitParameterInteraction()\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n     }\n \n-    if (mapMultiArgs.count(\"-bip9params\")) {\n+    if (argsGlobal.IsArgSet(\"-bip9params\")) {\n         // Allow overriding BIP9 parameters for testing\n         if (!chainparams.MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n@@ -1247,7 +1247,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n-    if (mapMultiArgs.count(\"-uacomment\")) {\n+    if (argsGlobal.IsArgSet(\"-uacomment\")) {\n         BOOST_FOREACH(std::string cmt, mapMultiArgs.at(\"-uacomment\"))\n         {\n             if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n@@ -1261,7 +1261,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n     }\n \n-    if (mapMultiArgs.count(\"-onlynet\")) {\n+    if (argsGlobal.IsArgSet(\"-onlynet\")) {\n         std::set<enum Network> nets;\n         BOOST_FOREACH(const std::string& snet, mapMultiArgs.at(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n@@ -1276,7 +1276,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (mapMultiArgs.count(\"-whitelist\")) {\n+    if (argsGlobal.IsArgSet(\"-whitelist\")) {\n         BOOST_FOREACH(const std::string& net, mapMultiArgs.at(\"-whitelist\")) {\n             CSubNet subnet;\n             LookupSubNet(net.c_str(), subnet);\n@@ -1338,15 +1338,15 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (fListen) {\n         bool fBound = false;\n-        if (mapMultiArgs.count(\"-bind\")) {\n+        if (argsGlobal.IsArgSet(\"-bind\")) {\n             BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-bind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(ResolveErrMsg(\"bind\", strBind));\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n         }\n-        if (mapMultiArgs.count(\"-whitebind\")) {\n+        if (argsGlobal.IsArgSet(\"-whitebind\")) {\n             BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-whitebind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, 0, false))\n@@ -1356,7 +1356,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n             }\n         }\n-        if (!mapMultiArgs.count(\"-bind\") && !mapMultiArgs.count(\"-whitebind\")) {\n+        if (!argsGlobal.IsArgSet(\"-bind\") && !argsGlobal.IsArgSet(\"-whitebind\")) {\n             struct in_addr inaddr_any;\n             inaddr_any.s_addr = INADDR_ANY;\n             fBound |= Bind(connman, CService(in6addr_any, GetListenPort()), BF_NONE);\n@@ -1366,7 +1366,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n             return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));\n     }\n \n-    if (mapMultiArgs.count(\"-externalip\")) {\n+    if (argsGlobal.IsArgSet(\"-externalip\")) {\n         BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-externalip\")) {\n             CService addrLocal;\n             if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n@@ -1376,7 +1376,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (mapMultiArgs.count(\"-seednode\")) {\n+    if (argsGlobal.IsArgSet(\"-seednode\")) {\n         BOOST_FOREACH(const std::string& strDest, mapMultiArgs.at(\"-seednode\"))\n             connman.AddOneShot(strDest);\n     }\n@@ -1603,7 +1603,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n     std::vector<fs::path> vImportFiles;\n-    if (mapMultiArgs.count(\"-loadblock\"))\n+    if (argsGlobal.IsArgSet(\"-loadblock\"))\n     {\n         BOOST_FOREACH(const std::string& strFile, mapMultiArgs.at(\"-loadblock\"))\n             vImportFiles.push_back(strFile);"
      },
      {
        "sha": "52e62c11e8c6519c1c1c1f83bab0f016bf8834aa",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aa8d32585c5cbc7de67ad78db608060066be39a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aa8d32585c5cbc7de67ad78db608060066be39a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2aa8d32585c5cbc7de67ad78db608060066be39a",
        "patch": "@@ -1666,7 +1666,7 @@ void CConnman::ProcessOneShot()\n void CConnman::ThreadOpenConnections()\n {\n     // Connect to specific addresses\n-    if (mapMultiArgs.count(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0)\n+    if (argsGlobal.IsArgSet(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0)\n     {\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n@@ -1873,7 +1873,7 @@ void CConnman::ThreadOpenAddedConnections()\n {\n     {\n         LOCK(cs_vAddedNodes);\n-        if (mapMultiArgs.count(\"-addnode\"))\n+        if (argsGlobal.IsArgSet(\"-addnode\"))\n             vAddedNodes = mapMultiArgs.at(\"-addnode\");\n     }\n \n@@ -2285,7 +2285,7 @@ bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options c\n     threadOpenAddedConnections = std::thread(&TraceThread<std::function<void()> >, \"addcon\", std::function<void()>(std::bind(&CConnman::ThreadOpenAddedConnections, this)));\n \n     // Initiate outbound connections unless connect=0\n-    if (!mapMultiArgs.count(\"-connect\") || mapMultiArgs.at(\"-connect\").size() != 1 || mapMultiArgs.at(\"-connect\")[0] != \"0\")\n+    if (!argsGlobal.IsArgSet(\"-connect\") || mapMultiArgs.at(\"-connect\").size() != 1 || mapMultiArgs.at(\"-connect\")[0] != \"0\")\n         threadOpenConnections = std::thread(&TraceThread<std::function<void()> >, \"opencon\", std::function<void()>(std::bind(&CConnman::ThreadOpenConnections, this)));\n \n     // Process messages"
      }
    ]
  },
  {
    "sha": "ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZThhNWQ2ZjFhODVkZjJlMWI2Y2Y2ZmVkOGM2MDFkZWE5YTQzMDMy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-09T15:30:22Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-06T20:21:45Z"
      },
      "message": "Util: Introduce ArgsManager::ArgsAt()",
      "tree": {
        "sha": "7df9fb640599cdfddab61b59d2e2dd52f02576fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7df9fb640599cdfddab61b59d2e2dd52f02576fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY5qNZAAoJEIhmwY6hyUSi7ekQAO73p55LSfl4iHWDTSBftDKa\n+cP3yksP8UCZiuaK/imbndC3RdFyoiPKbWzmLoqFJCjVnec9XiIfTvukExVod37o\nQLsHuwesQRPSY0z6oA9vk+9nicDHOkvzB+qXAhEY93wlLHrehZhr0TNMbpkswqiL\n+X7ytxv1r2bpuD+2CppS5YIThXQrbxjSKO8d+a+rK6wQD9iaV9jxRdKavceG0OMo\nBwZCpKeVMBaJ6mNgaPpsJ1zTp5yujJK2NqXIdaFr8QPG4+p2ABfFzQw5rHQRzRJN\naTAaXK8fWlJ3rYjxP3zxrMVtbk7eZtuLDhI/QwqU8qN54OS7TXL2+XpWTPADjneK\nuh27A5WUdGIngNvHBA+s3sigVZ79JpOxyxB3mdrtleqI3qeXOsHz4FjUWvWvqMyb\nzDRToDlC+dWRCMKGuwtwuVcObj9zEi1OVuSB7pfYhurXP8G6MaSMmS4tVBcRSEAY\ntGNI9UsdCG1TOua6/6SJIGcUWB/K3SZJjDLkLWD+ZlLy6xRLDAE4gB0EJxjyPTmK\nAVUs4HISlxhKQrT2tin8sqGAecKBxBx0CV16lruqhO9Q0V48IRfsWyFVEHQsIXj2\n5aOaxjFWS6+Xb/8Y2mp5bzVmATVKRDcFzT9sGnaUyA8O8z3XGfC+467wzGluqI6V\ns3/uVMAYaoW7wSP3SLgK\n=CoNf\n-----END PGP SIGNATURE-----",
        "payload": "tree 7df9fb640599cdfddab61b59d2e2dd52f02576fb\nparent 2aa8d32585c5cbc7de67ad78db608060066be39a\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1483975822 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491510105 +0200\n\nUtil: Introduce ArgsManager::ArgsAt()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2aa8d32585c5cbc7de67ad78db608060066be39a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa8d32585c5cbc7de67ad78db608060066be39a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa8d32585c5cbc7de67ad78db608060066be39a"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 31,
      "deletions": 28
    },
    "files": [
      {
        "sha": "e2433fea352fa7c3a98a7812c155559e2c9d645f",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
        "patch": "@@ -95,7 +95,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n \n     if (argsGlobal.IsArgSet(\"-rpcauth\")) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs.at(\"-rpcauth\"))\n+        for (const std::string& strRPCAuth : argsGlobal.ArgsAt(\"-rpcauth\"))\n         {\n             std::vector<std::string> vFields;\n             boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));"
      },
      {
        "sha": "d5cb4f5c18c62b205698d5385a90c8bafb2bb156",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
        "patch": "@@ -197,8 +197,7 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n     if (argsGlobal.IsArgSet(\"-rpcallowip\")) {\n-        const std::vector<std::string>& vAllow = mapMultiArgs.at(\"-rpcallowip\");\n-        for (std::string strAllow : vAllow) {\n+        for (const std::string& strAllow : argsGlobal.ArgsAt(\"-rpcallowip\")) {\n             CSubNet subnet;\n             LookupSubNet(strAllow.c_str(), subnet);\n             if (!subnet.IsValid()) {\n@@ -322,11 +321,10 @@ static bool HTTPBindAddresses(struct evhttp* http)\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n     } else if (argsGlobal.IsArgSet(\"-rpcbind\")) { // Specific bind address\n-        const std::vector<std::string>& vbind = mapMultiArgs.at(\"-rpcbind\");\n-        for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n+        for (const std::string& strRPCBind : argsGlobal.ArgsAt(\"-rpcbind\")) {\n             int port = defaultPort;\n             std::string host;\n-            SplitHostPort(*i, port, host);\n+            SplitHostPort(strRPCBind, port, host);\n             endpoints.push_back(std::make_pair(host, port));\n         }\n     } else { // No specific bind address specified, bind to any"
      },
      {
        "sha": "31158fa435d1d08ce1fe03f9ba8110a09f7d989d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 17,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
        "patch": "@@ -734,7 +734,7 @@ void InitParameterInteraction()\n             LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n     }\n \n-    if (argsGlobal.IsArgSet(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0) {\n+    if (argsGlobal.IsArgSet(\"-connect\") && argsGlobal.ArgsAt(\"-connect\").size() > 0) {\n         // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n         if (SoftSetBoolArg(\"-dnsseed\", false))\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n@@ -888,8 +888,8 @@ bool AppInitParameterInteraction()\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max(\n-                (argsGlobal.IsArgSet(\"-bind\") ? mapMultiArgs.at(\"-bind\").size() : 0) +\n-                (argsGlobal.IsArgSet(\"-whitebind\") ? mapMultiArgs.at(\"-whitebind\").size() : 0), size_t(1));\n+                (argsGlobal.IsArgSet(\"-bind\") ? argsGlobal.ArgsAt(\"-bind\").size() : 0) +\n+                (argsGlobal.IsArgSet(\"-whitebind\") ? argsGlobal.ArgsAt(\"-whitebind\").size() : 0), size_t(1));\n     nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n@@ -906,7 +906,7 @@ bool AppInitParameterInteraction()\n     // ********************************************************* Step 3: parameter-to-internal-flags\n     if (argsGlobal.IsArgSet(\"-debug\")) {\n         // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string>& categories = mapMultiArgs.at(\"-debug\");\n+        const std::vector<std::string>& categories = argsGlobal.ArgsAt(\"-debug\");\n \n         if (find(categories.begin(), categories.end(), std::string(\"0\")) == categories.end()) {\n             for (const auto& cat : categories) {\n@@ -922,8 +922,7 @@ bool AppInitParameterInteraction()\n \n     // Now remove the logging categories which were explicitly excluded\n     if (argsGlobal.IsArgSet(\"-debugexclude\")) {\n-        const std::vector<std::string>& excludedCategories = mapMultiArgs.at(\"-debugexclude\");\n-        for (const auto& cat : excludedCategories) {\n+        for (const std::string& cat : argsGlobal.ArgsAt(\"-debugexclude\")) {\n             uint32_t flag = 0;\n             if (!GetLogCategory(&flag, &cat)) {\n                 InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n@@ -1098,10 +1097,9 @@ bool AppInitParameterInteraction()\n         if (!chainparams.MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n         }\n-        const std::vector<std::string>& deployments = mapMultiArgs.at(\"-bip9params\");\n-        for (auto i : deployments) {\n+        for (const std::string& strDeployment : argsGlobal.ArgsAt(\"-bip9params\")) {\n             std::vector<std::string> vDeploymentParams;\n-            boost::split(vDeploymentParams, i, boost::is_any_of(\":\"));\n+            boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n             if (vDeploymentParams.size() != 3) {\n                 return InitError(\"BIP9 parameters malformed, expecting deployment:start:end\");\n             }\n@@ -1248,7 +1246,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n     if (argsGlobal.IsArgSet(\"-uacomment\")) {\n-        BOOST_FOREACH(std::string cmt, mapMultiArgs.at(\"-uacomment\"))\n+        for (const std::string& cmt : argsGlobal.ArgsAt(\"-uacomment\"))\n         {\n             if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n                 return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n@@ -1263,7 +1261,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (argsGlobal.IsArgSet(\"-onlynet\")) {\n         std::set<enum Network> nets;\n-        BOOST_FOREACH(const std::string& snet, mapMultiArgs.at(\"-onlynet\")) {\n+        for (const std::string& snet : argsGlobal.ArgsAt(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n                 return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n@@ -1277,7 +1275,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (argsGlobal.IsArgSet(\"-whitelist\")) {\n-        BOOST_FOREACH(const std::string& net, mapMultiArgs.at(\"-whitelist\")) {\n+        for (const std::string& net : argsGlobal.ArgsAt(\"-whitelist\")) {\n             CSubNet subnet;\n             LookupSubNet(net.c_str(), subnet);\n             if (!subnet.IsValid())\n@@ -1339,15 +1337,15 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (fListen) {\n         bool fBound = false;\n         if (argsGlobal.IsArgSet(\"-bind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-bind\")) {\n+            for (const std::string& strBind : argsGlobal.ArgsAt(\"-bind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(ResolveErrMsg(\"bind\", strBind));\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n         }\n         if (argsGlobal.IsArgSet(\"-whitebind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-whitebind\")) {\n+            for (const std::string& strBind : argsGlobal.ArgsAt(\"-whitebind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, 0, false))\n                     return InitError(ResolveErrMsg(\"whitebind\", strBind));\n@@ -1367,7 +1365,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (argsGlobal.IsArgSet(\"-externalip\")) {\n-        BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-externalip\")) {\n+        for (const std::string& strAddr : argsGlobal.ArgsAt(\"-externalip\")) {\n             CService addrLocal;\n             if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n                 AddLocal(addrLocal, LOCAL_MANUAL);\n@@ -1377,7 +1375,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (argsGlobal.IsArgSet(\"-seednode\")) {\n-        BOOST_FOREACH(const std::string& strDest, mapMultiArgs.at(\"-seednode\"))\n+        for (const std::string& strDest : argsGlobal.ArgsAt(\"-seednode\"))\n             connman.AddOneShot(strDest);\n     }\n \n@@ -1605,7 +1603,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     std::vector<fs::path> vImportFiles;\n     if (argsGlobal.IsArgSet(\"-loadblock\"))\n     {\n-        BOOST_FOREACH(const std::string& strFile, mapMultiArgs.at(\"-loadblock\"))\n+        for (const std::string& strFile : argsGlobal.ArgsAt(\"-loadblock\"))\n             vImportFiles.push_back(strFile);\n     }\n "
      },
      {
        "sha": "9be5c107deb7e54720abc8d75d75b1268827a1b7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
        "patch": "@@ -1666,12 +1666,12 @@ void CConnman::ProcessOneShot()\n void CConnman::ThreadOpenConnections()\n {\n     // Connect to specific addresses\n-    if (argsGlobal.IsArgSet(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0)\n+    if (argsGlobal.IsArgSet(\"-connect\") && argsGlobal.ArgsAt(\"-connect\").size() > 0)\n     {\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n             ProcessOneShot();\n-            BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-connect\"))\n+            for (const std::string& strAddr : argsGlobal.ArgsAt(\"-connect\"))\n             {\n                 CAddress addr(CService(), NODE_NONE);\n                 OpenNetworkConnection(addr, false, NULL, strAddr.c_str());\n@@ -1874,7 +1874,7 @@ void CConnman::ThreadOpenAddedConnections()\n     {\n         LOCK(cs_vAddedNodes);\n         if (argsGlobal.IsArgSet(\"-addnode\"))\n-            vAddedNodes = mapMultiArgs.at(\"-addnode\");\n+            vAddedNodes = argsGlobal.ArgsAt(\"-addnode\");\n     }\n \n     while (true)\n@@ -2285,7 +2285,7 @@ bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options c\n     threadOpenAddedConnections = std::thread(&TraceThread<std::function<void()> >, \"addcon\", std::function<void()>(std::bind(&CConnman::ThreadOpenAddedConnections, this)));\n \n     // Initiate outbound connections unless connect=0\n-    if (!argsGlobal.IsArgSet(\"-connect\") || mapMultiArgs.at(\"-connect\").size() != 1 || mapMultiArgs.at(\"-connect\")[0] != \"0\")\n+    if (!argsGlobal.IsArgSet(\"-connect\") || argsGlobal.ArgsAt(\"-connect\").size() != 1 || argsGlobal.ArgsAt(\"-connect\")[0] != \"0\")\n         threadOpenConnections = std::thread(&TraceThread<std::function<void()> >, \"opencon\", std::function<void()>(std::bind(&CConnman::ThreadOpenConnections, this)));\n \n     // Process messages"
      },
      {
        "sha": "ec5d821d252d1418c1d87974beef126fdf7b1d5b",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
        "patch": "@@ -129,7 +129,7 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n                 && !mapMultiArgs.count(\"f\") && !mapMultiArgs.count(\"-d\"));\n \n     BOOST_CHECK(testArgs.GetMapArgs()[\"-a\"] == \"\" && testArgs.GetMapArgs()[\"-ccc\"] == \"multiple\");\n-    BOOST_CHECK(mapMultiArgs.at(\"-ccc\").size() == 2);\n+    BOOST_CHECK(testArgs.ArgsAt(\"-ccc\").size() == 2);\n }\n \n BOOST_AUTO_TEST_CASE(util_GetArg)"
      },
      {
        "sha": "0120b08e866d36976d236d5730c64963aeb49e74",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
        "patch": "@@ -416,6 +416,12 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n     }\n }\n \n+std::vector<std::string> ArgsManager::ArgsAt(const std::string& strArg)\n+{\n+    LOCK(cs_args);\n+    return mapMultiArgs.at(strArg);\n+}\n+\n bool ArgsManager::IsArgSet(const std::string& strArg)\n {\n     LOCK(cs_args);"
      },
      {
        "sha": "13eeae4ac6c8a273bcf4e1f6fc30500b49d38226",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
        "patch": "@@ -178,6 +178,7 @@ class ArgsManager\n public:\n     void ParseParameters(int argc, const char*const argv[]);\n     void ReadConfigFile(const std::string& confPath);\n+    std::vector<std::string> ArgsAt(const std::string& strArg);\n /**\n  * Return true if the given argument has been manually set\n  *"
      }
    ]
  },
  {
    "sha": "996d2ae6ac0736c129bc2dbdd85963ad48e92f83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTZkMmFlNmFjMDczNmMxMjliYzJkYmRkODU5NjNhZDQ4ZTkyZjgz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-09T15:44:28Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-06T20:25:14Z"
      },
      "message": "Util: Put mapMultiArgs inside ArgsManager",
      "tree": {
        "sha": "23dbf8acf3b7ab88d642c496ae4d585be9833d5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23dbf8acf3b7ab88d642c496ae4d585be9833d5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/996d2ae6ac0736c129bc2dbdd85963ad48e92f83",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY5qQqAAoJEIhmwY6hyUSiiVUP/3VutUigZChbJFbA5JkRboCS\nPeDzD3bqzvxkCMbgzzoh8ha+/m4j8a3Jfd+JytNosWvLCQvfEnW0K6N3u90jJE39\nfsu1Oy9bbP4dfja2FBzXLc6gjIQv8kwZLJ643oIuL7usVRjpSMht9Vrm2CXE84/i\nnrQvHpxwze24jN2eZn5tQmd7Nf2pECGL7Wi+/YYvdBwveNdyaI5jdwde75N+ea/w\ncdd3MXrjuEnTzm3MZJ7gFAM+iWjxAnfzXIXbnxF3it1tCtFx3viyMiIJ364NvALL\ntc+N4gvUg4R7JC+4yOg5V2difca+GWvDb5nB2eErXIuCNEj4ezLPdCucFAe4qxad\n8IKzRtBnqLzr0V1zWQG9KmRZeEsKKW8jBwHG+mEfKQ3812yWqu/CgfwPV/VkIzF0\n4SypvLA6IcjB2Nle4vXdQJvHJgOq974uLJ5QK2hD508YmOKKyA40BZjRtaZSq2Ac\n3N/GeMNSUgXfwtCJeLgAaiJUv2aujBmQ4CCq426cw7UC4CLdUrCSDZu+lfSJSX7O\nlIwyqgBzp2/r87GuBSvYTpdhuexlaQH8u00zSLPVh8Y7ub8eXHA1PBTmKWfbs9/R\nm+UFD2VMdyEiu9sqTXvJ9xWj8OeCg1dXWGNDollp4UwV1xhti+X+nH993sEdaXNb\n9j2Ygfr+73RQgL1l6jwT\n=R3Yn\n-----END PGP SIGNATURE-----",
        "payload": "tree 23dbf8acf3b7ab88d642c496ae4d585be9833d5d\nparent ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1483976668 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491510314 +0200\n\nUtil: Put mapMultiArgs inside ArgsManager\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/996d2ae6ac0736c129bc2dbdd85963ad48e92f83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/996d2ae6ac0736c129bc2dbdd85963ad48e92f83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/996d2ae6ac0736c129bc2dbdd85963ad48e92f83/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce8a5d6f1a85df2e1b6cf6fed8c601dea9a43032"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "865b3c3ed5de496863e975138d114ecec630c56d",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/996d2ae6ac0736c129bc2dbdd85963ad48e92f83/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/996d2ae6ac0736c129bc2dbdd85963ad48e92f83/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=996d2ae6ac0736c129bc2dbdd85963ad48e92f83",
        "patch": "@@ -105,6 +105,10 @@ class TestArgsManager : public ArgsManager\n     {\n         return mapArgs;\n     };\n+    std::map<std::string, std::vector<std::string> >& GetMapMultiArgs()\n+    {\n+        return mapMultiArgs;\n+    };\n };\n \n BOOST_AUTO_TEST_CASE(util_ParseParameters)\n@@ -113,20 +117,20 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n \n     testArgs.ParseParameters(0, (char**)argv_test);\n-    BOOST_CHECK(testArgs.GetMapArgs().empty() && mapMultiArgs.empty());\n+    BOOST_CHECK(testArgs.GetMapArgs().empty() && testArgs.GetMapMultiArgs().empty());\n \n     testArgs.ParseParameters(1, (char**)argv_test);\n-    BOOST_CHECK(testArgs.GetMapArgs().empty() && mapMultiArgs.empty());\n+    BOOST_CHECK(testArgs.GetMapArgs().empty() && testArgs.GetMapMultiArgs().empty());\n \n     testArgs.ParseParameters(5, (char**)argv_test);\n     // expectation: -ignored is ignored (program name argument),\n     // -a, -b and -ccc end up in map, -d ignored because it is after\n     // a non-option argument (non-GNU option parsing)\n-    BOOST_CHECK(testArgs.GetMapArgs().size() == 3 && mapMultiArgs.size() == 3);\n+    BOOST_CHECK(testArgs.GetMapArgs().size() == 3 && testArgs.GetMapMultiArgs().size() == 3);\n     BOOST_CHECK(testArgs.IsArgSet(\"-a\") && testArgs.IsArgSet(\"-b\") && testArgs.IsArgSet(\"-ccc\")\n                 && !testArgs.IsArgSet(\"f\") && !testArgs.IsArgSet(\"-d\"));\n-    BOOST_CHECK(mapMultiArgs.count(\"-a\") && mapMultiArgs.count(\"-b\") && mapMultiArgs.count(\"-ccc\")\n-                && !mapMultiArgs.count(\"f\") && !mapMultiArgs.count(\"-d\"));\n+    BOOST_CHECK(testArgs.GetMapMultiArgs().count(\"-a\") && testArgs.GetMapMultiArgs().count(\"-b\") && testArgs.GetMapMultiArgs().count(\"-ccc\")\n+                && !testArgs.GetMapMultiArgs().count(\"f\") && !testArgs.GetMapMultiArgs().count(\"-d\"));\n \n     BOOST_CHECK(testArgs.GetMapArgs()[\"-a\"] == \"\" && testArgs.GetMapArgs()[\"-ccc\"] == \"multiple\");\n     BOOST_CHECK(testArgs.ArgsAt(\"-ccc\").size() == 2);"
      },
      {
        "sha": "b94ecba86da0a718b6649279db4f70ddfeeb204c",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/996d2ae6ac0736c129bc2dbdd85963ad48e92f83/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/996d2ae6ac0736c129bc2dbdd85963ad48e92f83/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=996d2ae6ac0736c129bc2dbdd85963ad48e92f83",
        "patch": "@@ -105,8 +105,6 @@ const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager argsGlobal;\n-static std::map<std::string, std::vector<std::string> > _mapMultiArgs;\n-const std::map<std::string, std::vector<std::string> >& mapMultiArgs = _mapMultiArgs;\n bool fPrintToConsole = false;\n bool fPrintToDebugLog = true;\n \n@@ -384,7 +382,7 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n {\n     LOCK(cs_args);\n     mapArgs.clear();\n-    _mapMultiArgs.clear();\n+    mapMultiArgs.clear();\n \n     for (int i = 1; i < argc; i++)\n     {\n@@ -412,7 +410,7 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n         InterpretNegativeSetting(str, strValue);\n \n         mapArgs[str] = strValue;\n-        _mapMultiArgs[str].push_back(strValue);\n+        mapMultiArgs[str].push_back(strValue);\n     }\n }\n \n@@ -473,7 +471,7 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n {\n     LOCK(cs_args);\n     mapArgs[strArg] = strValue;\n-    _mapMultiArgs[strArg].push_back(strValue);\n+    mapMultiArgs[strArg].push_back(strValue);\n }\n \n void ParseParameters(int argc, const char* const argv[])\n@@ -655,7 +653,7 @@ void ArgsManager::ReadConfigFile(const std::string& confPath)\n             InterpretNegativeSetting(strKey, strValue);\n             if (mapArgs.count(strKey) == 0)\n                 mapArgs[strKey] = strValue;\n-            _mapMultiArgs[strKey].push_back(strValue);\n+            mapMultiArgs[strKey].push_back(strValue);\n         }\n     }\n     // If datadir is changed in .conf file:"
      },
      {
        "sha": "db00700ef1c11d14ef3a3ec6f97f27bc9005150d",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/996d2ae6ac0736c129bc2dbdd85963ad48e92f83/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/996d2ae6ac0736c129bc2dbdd85963ad48e92f83/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=996d2ae6ac0736c129bc2dbdd85963ad48e92f83",
        "patch": "@@ -42,7 +42,6 @@ class CTranslationInterface\n     boost::signals2::signal<std::string (const char* psz)> Translate;\n };\n \n-extern const std::map<std::string, std::vector<std::string> >& mapMultiArgs;\n extern bool fPrintToConsole;\n extern bool fPrintToDebugLog;\n \n@@ -175,6 +174,7 @@ class ArgsManager\n protected:\n     CCriticalSection cs_args;\n     std::map<std::string, std::string> mapArgs;\n+    std::map<std::string, std::vector<std::string> > mapMultiArgs;\n public:\n     void ParseParameters(int argc, const char*const argv[]);\n     void ReadConfigFile(const std::string& confPath);"
      }
    ]
  },
  {
    "sha": "9d6c531320771e6b6ffc48ad6119afd944520f9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDZjNTMxMzIwNzcxZTZiNmZmYzQ4YWQ2MTE5YWZkOTQ0NTIwZjlk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-03-29T16:04:25Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-06T20:46:53Z"
      },
      "message": "Util: Remove ArgsManager wrappers:\n\n- ParseParameters\n- ReadConfigFile\n- ForceSetArg\n- SoftSetArg",
      "tree": {
        "sha": "a7619114ef6d0624c785af4b474ab4e25f7e145f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7619114ef6d0624c785af4b474ab4e25f7e145f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d6c531320771e6b6ffc48ad6119afd944520f9d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY5qk/AAoJEIhmwY6hyUSiUUUP/0vS3oMUlV4yBqx0QGpR3CTV\nAuIeuhV0OqDfBZHfiM6k5jLmczyQeRFEwQ+wBqXr55Vs/9jLGpCLV/21mxOLDp6n\niTiIHOZQ1GjbfV+Ql9c+K1yNLOlWChdAlmbNgKBSuSgya5vi8ggqZ1oGYxbfED03\nS08T6Px5Mk3z/J1E0QulmqSN1eXweCJ6YOBf6ogc0SDMm8kK67m+YR00h85lH7i3\ntz4ZkFcARTFho50Xu44mHChVrD4HKYdWy4ub01i+oYkdAdHxl0nVmuyDgD+F0/Fm\ngF7Auq8Cf31a5HoBfWziLv5ohzDqP0JiNXKxE55pML2s1wxK8ytHZGRZ1TRpuh3G\nMZL9P7KQVS3P+TSsLFdN6UlnIpIJO3NYpN3V7aM4aquJTKSLy6ux33VoavJZlhdm\nwnJL4cQmtttCx0en88L2+PRGjqmyTTqrU3AT22qoAqcb1sQUC3sPoHvEksvLBYj+\nZy00SOf+NjdTJIS9YYAA2o+ZOllCbwgmIgXw+XK/+NFfglsEwt3YJlu32kqC1s/g\nJ4VskqPYIDNNA/Rp6r1O6UxIBOinWZPtGevn0ckXTk7Hkpz0kZCYYtJgYybz0Tnt\nVTWCT1lG4YbI1Q4jfSVkiCgp3xWuzAJwArPncL+80odvkPFtwSw5rCq6S8Tw3a5c\nemftCjI1+ruaxK28GMR6\n=cvRW\n-----END PGP SIGNATURE-----",
        "payload": "tree a7619114ef6d0624c785af4b474ab4e25f7e145f\nparent 996d2ae6ac0736c129bc2dbdd85963ad48e92f83\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1490803465 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491511613 +0200\n\nUtil: Remove ArgsManager wrappers:\n\n- ParseParameters\n- ReadConfigFile\n- ForceSetArg\n- SoftSetArg\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d6c531320771e6b6ffc48ad6119afd944520f9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d6c531320771e6b6ffc48ad6119afd944520f9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d6c531320771e6b6ffc48ad6119afd944520f9d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "996d2ae6ac0736c129bc2dbdd85963ad48e92f83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/996d2ae6ac0736c129bc2dbdd85963ad48e92f83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/996d2ae6ac0736c129bc2dbdd85963ad48e92f83"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 18,
      "deletions": 42
    },
    "files": [
      {
        "sha": "7d8d64dce19e7153234a04e16eada7d1fbda7c41",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=9d6c531320771e6b6ffc48ad6119afd944520f9d",
        "patch": "@@ -76,7 +76,7 @@ static int AppInitRPC(int argc, char* argv[])\n     //\n     // Parameters\n     //\n-    ParseParameters(argc, argv);\n+    argsGlobal.ParseParameters(argc, argv);\n     if (argc<2 || IsArgSet(\"-?\") || IsArgSet(\"-h\") || IsArgSet(\"-help\") || IsArgSet(\"-version\")) {\n         std::string strUsage = strprintf(_(\"%s RPC client version\"), _(PACKAGE_NAME)) + \" \" + FormatFullVersion() + \"\\n\";\n         if (!IsArgSet(\"-version\")) {\n@@ -101,7 +101,7 @@ static int AppInitRPC(int argc, char* argv[])\n         return EXIT_FAILURE;\n     }\n     try {\n-        ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+        argsGlobal.ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     } catch (const std::exception& e) {\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n         return EXIT_FAILURE;"
      },
      {
        "sha": "dfa52aa74a690086d2f4c9946731cb23c098fc52",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=9d6c531320771e6b6ffc48ad6119afd944520f9d",
        "patch": "@@ -39,7 +39,7 @@ static int AppInitRawTx(int argc, char* argv[])\n     //\n     // Parameters\n     //\n-    ParseParameters(argc, argv);\n+    argsGlobal.ParseParameters(argc, argv);\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {"
      },
      {
        "sha": "73fa56cbc01abd12c6ab8956e9b15bf21e6b8f97",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=9d6c531320771e6b6ffc48ad6119afd944520f9d",
        "patch": "@@ -72,7 +72,7 @@ bool AppInit(int argc, char* argv[])\n     // Parameters\n     //\n     // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n-    ParseParameters(argc, argv);\n+    argsGlobal.ParseParameters(argc, argv);\n \n     // Process help and version before taking care about datadir\n     if (IsArgSet(\"-?\") || IsArgSet(\"-h\") ||  IsArgSet(\"-help\") || IsArgSet(\"-version\"))\n@@ -104,7 +104,7 @@ bool AppInit(int argc, char* argv[])\n         }\n         try\n         {\n-            ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+            argsGlobal.ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n         } catch (const std::exception& e) {\n             fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n             return false;"
      },
      {
        "sha": "6c6bc56fbfcfe31ccf430986263659e5707de5c1",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=9d6c531320771e6b6ffc48ad6119afd944520f9d",
        "patch": "@@ -539,7 +539,7 @@ int main(int argc, char *argv[])\n \n     /// 1. Parse command-line options. These take precedence over anything else.\n     // Command-line options take precedence:\n-    ParseParameters(argc, argv);\n+    argsGlobal.ParseParameters(argc, argv);\n \n     // Do not refer to data directory yet, this can be overridden by Intro::pickDataDirectory\n \n@@ -615,7 +615,7 @@ int main(int argc, char *argv[])\n         return EXIT_FAILURE;\n     }\n     try {\n-        ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+        argsGlobal.ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     } catch (const std::exception& e) {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));"
      },
      {
        "sha": "dafcbf7be7c5167b69c8cd40a8569b57362be0ed",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=9d6c531320771e6b6ffc48ad6119afd944520f9d",
        "patch": "@@ -231,7 +231,7 @@ bool Intro::pickDataDirectory()\n      * (to be consistent with bitcoind behavior)\n      */\n     if(dataDir != getDefaultDataDirectory())\n-        SoftSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).string()); // use OS locale for path setting\n+        argsGlobal.SoftSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).string()); // use OS locale for path setting\n     return true;\n }\n "
      },
      {
        "sha": "fbc41d52f8f563d4040848fc173509a8a578e125",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=9d6c531320771e6b6ffc48ad6119afd944520f9d",
        "patch": "@@ -92,12 +92,12 @@ void OptionsModel::Init(bool resetSettings)\n     // Main\n     if (!settings.contains(\"nDatabaseCache\"))\n         settings.setValue(\"nDatabaseCache\", (qint64)nDefaultDbCache);\n-    if (!SoftSetArg(\"-dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString()))\n+    if (!argsGlobal.SoftSetArg(\"-dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString()))\n         addOverriddenOption(\"-dbcache\");\n \n     if (!settings.contains(\"nThreadsScriptVerif\"))\n         settings.setValue(\"nThreadsScriptVerif\", DEFAULT_SCRIPTCHECK_THREADS);\n-    if (!SoftSetArg(\"-par\", settings.value(\"nThreadsScriptVerif\").toString().toStdString()))\n+    if (!argsGlobal.SoftSetArg(\"-par\", settings.value(\"nThreadsScriptVerif\").toString().toStdString()))\n         addOverriddenOption(\"-par\");\n \n     if (!settings.contains(\"strDataDir\"))\n@@ -127,7 +127,7 @@ void OptionsModel::Init(bool resetSettings)\n     if (!settings.contains(\"addrProxy\"))\n         settings.setValue(\"addrProxy\", \"127.0.0.1:9050\");\n     // Only try to set -proxy, if user has enabled fUseProxy\n-    if (settings.value(\"fUseProxy\").toBool() && !SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n+    if (settings.value(\"fUseProxy\").toBool() && !argsGlobal.SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n         addOverriddenOption(\"-proxy\");\n     else if(!settings.value(\"fUseProxy\").toBool() && !GetArg(\"-proxy\", \"\").empty())\n         addOverriddenOption(\"-proxy\");\n@@ -137,15 +137,15 @@ void OptionsModel::Init(bool resetSettings)\n     if (!settings.contains(\"addrSeparateProxyTor\"))\n         settings.setValue(\"addrSeparateProxyTor\", \"127.0.0.1:9050\");\n     // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n-    if (settings.value(\"fUseSeparateProxyTor\").toBool() && !SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n+    if (settings.value(\"fUseSeparateProxyTor\").toBool() && !argsGlobal.SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n         addOverriddenOption(\"-onion\");\n     else if(!settings.value(\"fUseSeparateProxyTor\").toBool() && !GetArg(\"-onion\", \"\").empty())\n         addOverriddenOption(\"-onion\");\n \n     // Display\n     if (!settings.contains(\"language\"))\n         settings.setValue(\"language\", \"\");\n-    if (!SoftSetArg(\"-lang\", settings.value(\"language\").toString().toStdString()))\n+    if (!argsGlobal.SoftSetArg(\"-lang\", settings.value(\"language\").toString().toStdString()))\n         addOverriddenOption(\"-lang\");\n \n     language = settings.value(\"language\").toString();"
      },
      {
        "sha": "824b6c55c3524f2efde742e974015496569c29bf",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=9d6c531320771e6b6ffc48ad6119afd944520f9d",
        "patch": "@@ -44,7 +44,7 @@ void RPCNestedTests::rpcNestedTests()\n     std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_qt_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n     QDir dir(QString::fromStdString(path));\n     dir.mkpath(\".\");\n-    ForceSetArg(\"-datadir\", path);\n+    argsGlobal.ForceSetArg(\"-datadir\", path);\n     //mempool.setSanityCheck(1.0);\n     pblocktree = new CBlockTreeDB(1 << 20, true);\n     pcoinsdbview = new CCoinsViewDB(1 << 23, true);"
      },
      {
        "sha": "6b3f1d3b956874634c2471d306fc0f9bf479f1c9",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=9d6c531320771e6b6ffc48ad6119afd944520f9d",
        "patch": "@@ -81,7 +81,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     std::atomic<bool> interruptDummy(false);\n \n     connman->ClearBanned();\n-    ForceSetArg(\"-banscore\", \"111\"); // because 11 is my favorite number\n+    argsGlobal.ForceSetArg(\"-banscore\", \"111\"); // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n@@ -97,7 +97,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     Misbehaving(dummyNode1.GetId(), 1);\n     SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n-    ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n+    argsGlobal.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)"
      },
      {
        "sha": "f8b6a1cfe110d16e39773883c74c80b654cba6d4",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=9d6c531320771e6b6ffc48ad6119afd944520f9d",
        "patch": "@@ -28,7 +28,7 @@ static void ResetArgs(const std::string& strArg)\n     BOOST_FOREACH(std::string& s, vecArg)\n         vecChar.push_back(s.c_str());\n \n-    ParseParameters(vecChar.size(), &vecChar[0]);\n+    argsGlobal.ParseParameters(vecChar.size(), &vecChar[0]);\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)"
      },
      {
        "sha": "3b3171127cb6a09686b7c0f9795731a744f19f39",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=9d6c531320771e6b6ffc48ad6119afd944520f9d",
        "patch": "@@ -60,7 +60,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n         fs::create_directories(pathTemp);\n-        ForceSetArg(\"-datadir\", pathTemp.string());\n+        argsGlobal.ForceSetArg(\"-datadir\", pathTemp.string());\n         mempool.setSanityCheck(1.0);\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);"
      },
      {
        "sha": "e33770917b88963e5cfbca71bebbfdc50a612a02",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=9d6c531320771e6b6ffc48ad6119afd944520f9d",
        "patch": "@@ -474,16 +474,6 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n     mapMultiArgs[strArg].push_back(strValue);\n }\n \n-void ParseParameters(int argc, const char* const argv[])\n-{\n-    argsGlobal.ParseParameters(argc, argv);\n-}\n-\n-void ReadConfigFile(const std::string& confPath)\n-{\n-    argsGlobal.ReadConfigFile(confPath);\n-}\n-\n bool IsArgSet(const std::string& strArg)\n {\n     return argsGlobal.IsArgSet(strArg);\n@@ -504,21 +494,11 @@ bool GetBoolArg(const std::string& strArg, bool fDefault)\n     return argsGlobal.GetBoolArg(strArg, fDefault);\n }\n \n-bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n-{\n-    return argsGlobal.SoftSetArg(strArg, strValue);\n-}\n-\n bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n     return argsGlobal.SoftSetBoolArg(strArg, fValue);\n }\n \n-void ForceSetArg(const std::string& strArg, const std::string& strValue)\n-{\n-    return argsGlobal.ForceSetArg(strArg, strValue);\n-}\n-\n \n static const int screenWidth = 79;\n static const int optIndent = 2;"
      },
      {
        "sha": "b7fc3ac0a9ef0651e7c5225a70e93a39e3c23b1a",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6c531320771e6b6ffc48ad6119afd944520f9d/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=9d6c531320771e6b6ffc48ad6119afd944520f9d",
        "patch": "@@ -239,15 +239,11 @@ void ForceSetArg(const std::string& strArg, const std::string& strValue);\n extern ArgsManager argsGlobal;\n \n // wrappers using the global ArgsManager:\n-void ParseParameters(int argc, const char*const argv[]);\n-void ReadConfigFile(const std::string& confPath);\n bool IsArgSet(const std::string& strArg);\n std::string GetArg(const std::string& strArg, const std::string& strDefault);\n int64_t GetArg(const std::string& strArg, int64_t nDefault);\n bool GetBoolArg(const std::string& strArg, bool fDefault);\n-bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n-void ForceSetArg(const std::string& strArg, const std::string& strValue);\n \n /**\n  * Format a string to be used as group of options in help messages"
      }
    ]
  }
]