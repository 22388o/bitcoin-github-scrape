[
  {
    "sha": "169f3e8637b5a40b82a06f4b951e7896d70fe220",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjlmM2U4NjM3YjVhNDBiODJhMDZmNGI5NTFlNzg5NmQ3MGZlMjIw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-29T15:47:06Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-29T15:47:12Z"
      },
      "message": "Remove assigned but never used local variables",
      "tree": {
        "sha": "67263ad98e2339d2c41c48d11d1ecd0c9772abb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67263ad98e2339d2c41c48d11d1ecd0c9772abb8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/169f3e8637b5a40b82a06f4b951e7896d70fe220",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169f3e8637b5a40b82a06f4b951e7896d70fe220",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/169f3e8637b5a40b82a06f4b951e7896d70fe220",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169f3e8637b5a40b82a06f4b951e7896d70fe220/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0f9732d05d79a0c0a69cd0e5b1a074acad40265",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0f9732d05d79a0c0a69cd0e5b1a074acad40265",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0f9732d05d79a0c0a69cd0e5b1a074acad40265"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "9c666673cf25e7d43ba6fa8ace0276c9f7546612",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169f3e8637b5a40b82a06f4b951e7896d70fe220/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169f3e8637b5a40b82a06f4b951e7896d70fe220/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=169f3e8637b5a40b82a06f4b951e7896d70fe220",
        "patch": "@@ -46,7 +46,7 @@ def git_config_get(option, default=None):\n     '''\n     try:\n         return subprocess.check_output([GIT,'config','--get',option]).rstrip().decode('utf-8')\n-    except subprocess.CalledProcessError as e:\n+    except subprocess.CalledProcessError:\n         return default\n \n def retrieve_pr_info(repo,pull):\n@@ -193,23 +193,23 @@ def main():\n     devnull = open(os.devnull,'w')\n     try:\n         subprocess.check_call([GIT,'checkout','-q',branch])\n-    except subprocess.CalledProcessError as e:\n+    except subprocess.CalledProcessError:\n         print(\"ERROR: Cannot check out branch %s.\" % (branch), file=stderr)\n         sys.exit(3)\n     try:\n         subprocess.check_call([GIT,'fetch','-q',host_repo,'+refs/pull/'+pull+'/*:refs/heads/pull/'+pull+'/*',\n                                                           '+refs/heads/'+branch+':refs/heads/'+base_branch])\n-    except subprocess.CalledProcessError as e:\n+    except subprocess.CalledProcessError:\n         print(\"ERROR: Cannot find pull request #%s or branch %s on %s.\" % (pull,branch,host_repo), file=stderr)\n         sys.exit(3)\n     try:\n         subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+head_branch], stdout=devnull, stderr=stdout)\n-    except subprocess.CalledProcessError as e:\n+    except subprocess.CalledProcessError:\n         print(\"ERROR: Cannot find head of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n         sys.exit(3)\n     try:\n         subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+merge_branch], stdout=devnull, stderr=stdout)\n-    except subprocess.CalledProcessError as e:\n+    except subprocess.CalledProcessError:\n         print(\"ERROR: Cannot find merge of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n         sys.exit(3)\n     subprocess.check_call([GIT,'checkout','-q',base_branch])\n@@ -230,7 +230,7 @@ def main():\n         message += '\\n\\nPull request description:\\n\\n  ' + body.replace('\\n', '\\n  ') + '\\n'\n         try:\n             subprocess.check_call([GIT,'merge','-q','--commit','--no-edit','--no-ff','-m',message.encode('utf-8'),head_branch])\n-        except subprocess.CalledProcessError as e:\n+        except subprocess.CalledProcessError:\n             print(\"ERROR: Cannot be merged cleanly.\",file=stderr)\n             subprocess.check_call([GIT,'merge','--abort'])\n             sys.exit(4)\n@@ -249,12 +249,12 @@ def main():\n         try:\n             first_sha512 = tree_sha512sum()\n             message += '\\n\\nTree-SHA512: ' + first_sha512\n-        except subprocess.CalledProcessError as e:\n+        except subprocess.CalledProcessError:\n             print(\"ERROR: Unable to compute tree hash\")\n             sys.exit(4)\n         try:\n             subprocess.check_call([GIT,'commit','--amend','-m',message.encode('utf-8')])\n-        except subprocess.CalledProcessError as e:\n+        except subprocess.CalledProcessError:\n             print(\"ERROR: Cannot update message.\", file=stderr)\n             sys.exit(4)\n \n@@ -299,7 +299,7 @@ def main():\n                 try:\n                     subprocess.check_call([GIT,'commit','-q','--gpg-sign','--amend','--no-edit'])\n                     break\n-                except subprocess.CalledProcessError as e:\n+                except subprocess.CalledProcessError:\n                     print(\"Error while signing, asking again.\",file=stderr)\n             elif reply == 'x':\n                 print(\"Not signing off on merge, exiting.\",file=stderr)"
      },
      {
        "sha": "5546bf6b2921a8144489d43f26312d3a364568a2",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169f3e8637b5a40b82a06f4b951e7896d70fe220/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169f3e8637b5a40b82a06f4b951e7896d70fe220/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=169f3e8637b5a40b82a06f4b951e7896d70fe220",
        "patch": "@@ -833,7 +833,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n             self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2)\n             self.log.error(\"Error: duplicate tx getdata!\")\n             assert(False)\n-        except AssertionError as e:\n+        except AssertionError:\n             pass\n \n         # Delivering this transaction with witness should fail (no matter who"
      },
      {
        "sha": "900090bb668d0a416b3c5fa89d256add239f6098",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169f3e8637b5a40b82a06f4b951e7896d70fe220/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169f3e8637b5a40b82a06f4b951e7896d70fe220/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=169f3e8637b5a40b82a06f4b951e7896d70fe220",
        "patch": "@@ -151,7 +151,7 @@ def _get_response(self):\n         req_start_time = time.time()\n         try:\n             http_response = self.__conn.getresponse()\n-        except socket.timeout as e:\n+        except socket.timeout:\n             raise JSONRPCException({\n                 'code': -344,\n                 'message': '%r RPC took longer than %f seconds. Consider '"
      },
      {
        "sha": "6073285a6cfa514e900e4e13f24ae17683c9969b",
        "filename": "test/functional/test_framework/blockstore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169f3e8637b5a40b82a06f4b951e7896d70fe220/test/functional/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169f3e8637b5a40b82a06f4b951e7896d70fe220/test/functional/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blockstore.py?ref=169f3e8637b5a40b82a06f4b951e7896d70fe220",
        "patch": "@@ -87,7 +87,7 @@ def add_block(self, block):\n         block.calc_sha256()\n         try:\n             self.blockDB[repr(block.sha256)] = bytes(block.serialize())\n-        except TypeError as e:\n+        except TypeError:\n             logger.exception(\"Unexpected error\")\n         self.currentBlock = block.sha256\n         self.headers_map[block.sha256] = CBlockHeader(block)\n@@ -147,7 +147,7 @@ def add_transaction(self, tx):\n         tx.calc_sha256()\n         try:\n             self.txDB[repr(tx.sha256)] = bytes(tx.serialize())\n-        except TypeError as e:\n+        except TypeError:\n             logger.exception(\"Unexpected error\")\n \n     def get_transactions(self, inv):"
      },
      {
        "sha": "91acdb01d06424edaa36dc8d300a6efd96d2ebed",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169f3e8637b5a40b82a06f4b951e7896d70fe220/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169f3e8637b5a40b82a06f4b951e7896d70fe220/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=169f3e8637b5a40b82a06f4b951e7896d70fe220",
        "patch": "@@ -230,7 +230,7 @@ def run_test (self):\n         sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n-        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n@@ -257,7 +257,7 @@ def run_test (self):\n         sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n-        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n@@ -284,7 +284,7 @@ def run_test (self):\n         sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n-        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n@@ -311,7 +311,7 @@ def run_test (self):\n         sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n-        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n "
      }
    ]
  },
  {
    "sha": "ea04bf786263eb0c933648bce43627c0de4d84ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTA0YmY3ODYyNjNlYjBjOTMzNjQ4YmNlNDM2MjdjMGRlNGQ4NGVm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-01-29T14:48:35Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-29T16:21:03Z"
      },
      "message": "Enable flake8 warning F841 (\"local variable 'foo' is assigned to but never used\")",
      "tree": {
        "sha": "fdecdb8fb9bb2c8fc4a2ddd7762d32f835ea14f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdecdb8fb9bb2c8fc4a2ddd7762d32f835ea14f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea04bf786263eb0c933648bce43627c0de4d84ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea04bf786263eb0c933648bce43627c0de4d84ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea04bf786263eb0c933648bce43627c0de4d84ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea04bf786263eb0c933648bce43627c0de4d84ef/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "169f3e8637b5a40b82a06f4b951e7896d70fe220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169f3e8637b5a40b82a06f4b951e7896d70fe220",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/169f3e8637b5a40b82a06f4b951e7896d70fe220"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1469ce1640487434af75d2e7d0ed3de6a9cb23a3",
        "filename": "contrib/devtools/lint-python.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea04bf786263eb0c933648bce43627c0de4d84ef/contrib/devtools/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea04bf786263eb0c933648bce43627c0de4d84ef/contrib/devtools/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-python.sh?ref=ea04bf786263eb0c933648bce43627c0de4d84ef",
        "patch": "@@ -52,6 +52,7 @@\n # F822 undefined name name in __all__\n # F823 local variable name \u2026 referenced before assignment\n # F831 duplicate argument name in function definition\n+# F841 local variable 'foo' is assigned to but never used\n # W292 no newline at end of file\n # W504 line break after binary operator\n # W601 .has_key() is deprecated, use \"in\"\n@@ -60,4 +61,4 @@\n # W604 backticks are deprecated, use \"repr()\"\n # W605 invalid escape sequence \"x\"\n \n-flake8 --ignore=B,C,E,F,I,N,W --select=E112,E113,E115,E116,E125,E131,E133,E223,E224,E271,E272,E273,E274,E275,E304,E306,E502,E702,E703,E714,E721,E741,E742,E743,F401,F402,F404,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F822,F823,F831,W292,W504,W601,W602,W603,W604,W605 .\n+flake8 --ignore=B,C,E,F,I,N,W --select=E112,E113,E115,E116,E125,E131,E133,E223,E224,E271,E272,E273,E274,E275,E304,E306,E502,E702,E703,E714,E721,E741,E742,E743,F401,F402,F404,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F822,F823,F831,F841,W292,W504,W601,W602,W603,W604,W605 ."
      }
    ]
  }
]