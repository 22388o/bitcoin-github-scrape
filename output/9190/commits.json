[
  {
    "sha": "47db07537746940ee7dd0739a8c73e328837813f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2RiMDc1Mzc3NDY5NDBlZTdkZDA3MzlhOGM3M2UzMjg4Mzc4MTNm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-18T14:47:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-23T11:33:35Z"
      },
      "message": "qt: Plug many memory leaks\n\nNone of these are very serious, and are leaks in objects that are\ncreated at most one time.\n\nIn most cases this means properly using the QObject parent hierarchy,\nexcept for BanTablePriv/PeerTablePriv which are not QObject,\nso use a std::unique_ptr instead.",
      "tree": {
        "sha": "41078e611f150defe1fd793b1709d0019271e69b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41078e611f150defe1fd793b1709d0019271e69b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47db07537746940ee7dd0739a8c73e328837813f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47db07537746940ee7dd0739a8c73e328837813f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47db07537746940ee7dd0739a8c73e328837813f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47db07537746940ee7dd0739a8c73e328837813f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9346f8429957e356d21c665bab59fe45bcf1f74e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9346f8429957e356d21c665bab59fe45bcf1f74e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9346f8429957e356d21c665bab59fe45bcf1f74e"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 40,
      "deletions": 26
    },
    "files": [
      {
        "sha": "6076837fde8437809ac0588c789d57f8c0a18bfd",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -83,7 +83,7 @@ AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode _mode,\n     deleteAction = new QAction(ui->deleteAddress->text(), this);\n \n     // Build context menu\n-    contextMenu = new QMenu();\n+    contextMenu = new QMenu(this);\n     contextMenu->addAction(copyAddressAction);\n     contextMenu->addAction(copyLabelAction);\n     contextMenu->addAction(editAction);"
      },
      {
        "sha": "fe53d89ba93436126843ca0de801f7e56d5c1e50",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -87,14 +87,19 @@ BanTableModel::BanTableModel(ClientModel *parent) :\n     clientModel(parent)\n {\n     columns << tr(\"IP/Netmask\") << tr(\"Banned Until\");\n-    priv = new BanTablePriv();\n+    priv.reset(new BanTablePriv());\n     // default to unsorted\n     priv->sortColumn = -1;\n \n     // load initial data\n     refresh();\n }\n \n+BanTableModel::~BanTableModel()\n+{\n+    // Intentionally left empty\n+}\n+\n int BanTableModel::rowCount(const QModelIndex &parent) const\n {\n     Q_UNUSED(parent);"
      },
      {
        "sha": "3c03d05c05177ecedb333d4437224ae0bbad6209",
        "filename": "src/qt/bantablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/bantablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/bantablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.h?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -40,6 +40,7 @@ class BanTableModel : public QAbstractTableModel\n \n public:\n     explicit BanTableModel(ClientModel *parent = 0);\n+    ~BanTableModel();\n     void startAutoRefresh();\n     void stopAutoRefresh();\n \n@@ -66,7 +67,7 @@ public Q_SLOTS:\n private:\n     ClientModel *clientModel;\n     QStringList columns;\n-    BanTablePriv *priv;\n+    std::unique_ptr<BanTablePriv> priv;\n };\n \n #endif // BITCOIN_QT_BANTABLEMODEL_H"
      },
      {
        "sha": "4d78fd13c0fa12682fb193505aa98421a56083cc",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -1185,7 +1185,7 @@ void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n /** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */\n void UnitDisplayStatusBarControl::createContextMenu()\n {\n-    menu = new QMenu();\n+    menu = new QMenu(this);\n     Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n         QAction *menuAction = new QAction(QString(BitcoinUnits::name(u)), this);"
      },
      {
        "sha": "20c8fc845b43192f00acf413460bcd972adaa99d",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -52,7 +52,7 @@ CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidge\n              unlockAction = new QAction(tr(\"Unlock unspent\"), this);                    // we need to enable/disable this\n \n     // context menu\n-    contextMenu = new QMenu();\n+    contextMenu = new QMenu(this);\n     contextMenu->addAction(copyAddressAction);\n     contextMenu->addAction(copyLabelAction);\n     contextMenu->addAction(copyAmountAction);"
      },
      {
        "sha": "130cfc6e7d9a9729110ca204731c920bfaee3d2d",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -585,7 +585,8 @@ void TableViewLastColumnResizingFixer::on_geometriesChanged()\n  * Initializes all internal variables and prepares the\n  * the resize modes of the last 2 columns of the table and\n  */\n-TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth) :\n+TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth, QObject *parent) :\n+    QObject(parent),\n     tableView(table),\n     lastColumnMinimumWidth(lastColMinimumWidth),\n     allColumnsMinimumWidth(allColsMinimumWidth)"
      },
      {
        "sha": "8f1f3fbb2c47e9e00b491557c07953c249beb448",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -149,7 +149,7 @@ namespace GUIUtil\n         Q_OBJECT\n \n         public:\n-            TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth);\n+            TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth, QObject *parent);\n             void stretchColumnWidth(int column);\n \n         private:"
      },
      {
        "sha": "ea1bb2fc94b4aa5bf1de362d487481b4222b3efb",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -25,8 +25,8 @@ class TxViewDelegate : public QAbstractItemDelegate\n {\n     Q_OBJECT\n public:\n-    TxViewDelegate(const PlatformStyle *_platformStyle):\n-        QAbstractItemDelegate(), unit(BitcoinUnits::BTC),\n+    TxViewDelegate(const PlatformStyle *_platformStyle, QObject *parent=nullptr):\n+        QAbstractItemDelegate(parent), unit(BitcoinUnits::BTC),\n         platformStyle(_platformStyle)\n     {\n \n@@ -119,8 +119,7 @@ OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent)\n     currentWatchOnlyBalance(-1),\n     currentWatchUnconfBalance(-1),\n     currentWatchImmatureBalance(-1),\n-    txdelegate(new TxViewDelegate(platformStyle)),\n-    filter(0)\n+    txdelegate(new TxViewDelegate(platformStyle, this))\n {\n     ui->setupUi(this);\n \n@@ -220,15 +219,15 @@ void OverviewPage::setWalletModel(WalletModel *model)\n     if(model && model->getOptionsModel())\n     {\n         // Set up transaction list\n-        filter = new TransactionFilterProxy();\n+        filter.reset(new TransactionFilterProxy());\n         filter->setSourceModel(model->getTransactionTableModel());\n         filter->setLimit(NUM_ITEMS);\n         filter->setDynamicSortFilter(true);\n         filter->setSortRole(Qt::EditRole);\n         filter->setShowInactive(false);\n         filter->sort(TransactionTableModel::Date, Qt::DescendingOrder);\n \n-        ui->listTransactions->setModel(filter);\n+        ui->listTransactions->setModel(filter.get());\n         ui->listTransactions->setModelColumn(TransactionTableModel::ToAddress);\n \n         // Keep up to date with wallet"
      },
      {
        "sha": "ffe0de328c603dd5faab7a23a394121aa9b00438",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -8,6 +8,7 @@\n #include \"amount.h\"\n \n #include <QWidget>\n+#include <memory>\n \n class ClientModel;\n class TransactionFilterProxy;\n@@ -56,7 +57,7 @@ public Q_SLOTS:\n     CAmount currentWatchImmatureBalance;\n \n     TxViewDelegate *txdelegate;\n-    TransactionFilterProxy *filter;\n+    std::unique_ptr<TransactionFilterProxy> filter;\n \n private Q_SLOTS:\n     void updateDisplayUnit();"
      },
      {
        "sha": "c0b4900285427fd0f4ee9f944b861554b5c47f14",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -114,19 +114,24 @@ PeerTableModel::PeerTableModel(ClientModel *parent) :\n     timer(0)\n {\n     columns << tr(\"NodeId\") << tr(\"Node/Service\") << tr(\"User Agent\") << tr(\"Ping\");\n-    priv = new PeerTablePriv();\n+    priv.reset(new PeerTablePriv());\n     // default to unsorted\n     priv->sortColumn = -1;\n \n     // set up timer for auto refresh\n-    timer = new QTimer();\n+    timer = new QTimer(this);\n     connect(timer, SIGNAL(timeout()), SLOT(refresh()));\n     timer->setInterval(MODEL_UPDATE_DELAY);\n \n     // load initial data\n     refresh();\n }\n \n+PeerTableModel::~PeerTableModel()\n+{\n+    // Intentionally left empty\n+}\n+\n void PeerTableModel::startAutoRefresh()\n {\n     timer->start();"
      },
      {
        "sha": "af34b147b1eb83e02184f0c1693b17902d3edfbd",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -46,6 +46,7 @@ class PeerTableModel : public QAbstractTableModel\n \n public:\n     explicit PeerTableModel(ClientModel *parent = 0);\n+    ~PeerTableModel();\n     const CNodeCombinedStats *getNodeStats(int idx);\n     int getRowByNodeId(NodeId nodeid);\n     void startAutoRefresh();\n@@ -75,7 +76,7 @@ public Q_SLOTS:\n private:\n     ClientModel *clientModel;\n     QStringList columns;\n-    PeerTablePriv *priv;\n+    std::unique_ptr<PeerTablePriv> priv;\n     QTimer *timer;\n };\n "
      },
      {
        "sha": "dd83547a9173145c6f767e7a5443633cc9a03d13",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -25,6 +25,7 @@\n ReceiveCoinsDialog::ReceiveCoinsDialog(const PlatformStyle *_platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::ReceiveCoinsDialog),\n+    columnResizingFixer(0),\n     model(0),\n     platformStyle(_platformStyle)\n {\n@@ -49,7 +50,7 @@ ReceiveCoinsDialog::ReceiveCoinsDialog(const PlatformStyle *_platformStyle, QWid\n     QAction *copyAmountAction = new QAction(tr(\"Copy amount\"), this);\n \n     // context menu\n-    contextMenu = new QMenu();\n+    contextMenu = new QMenu(this);\n     contextMenu->addAction(copyURIAction);\n     contextMenu->addAction(copyLabelAction);\n     contextMenu->addAction(copyMessageAction);\n@@ -91,7 +92,7 @@ void ReceiveCoinsDialog::setModel(WalletModel *_model)\n             SIGNAL(selectionChanged(QItemSelection, QItemSelection)), this,\n             SLOT(recentRequestsView_selectionChanged(QItemSelection, QItemSelection)));\n         // Last 2 columns are set by the columnResizingFixer, when the table geometry is ready.\n-        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(tableView, AMOUNT_MINIMUM_COLUMN_WIDTH, DATE_COLUMN_WIDTH);\n+        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(tableView, AMOUNT_MINIMUM_COLUMN_WIDTH, DATE_COLUMN_WIDTH, this);\n     }\n }\n "
      },
      {
        "sha": "f896461735ce5e521a5c9017467be2306aed1169",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -32,7 +32,7 @@\n QRImageWidget::QRImageWidget(QWidget *parent):\n     QLabel(parent), contextMenu(0)\n {\n-    contextMenu = new QMenu();\n+    contextMenu = new QMenu(this);\n     QAction *saveImageAction = new QAction(tr(\"&Save Image...\"), this);\n     connect(saveImageAction, SIGNAL(triggered()), this, SLOT(saveImage()));\n     contextMenu->addAction(saveImageAction);"
      },
      {
        "sha": "35d37bb22bb0869530cb1eaae8be635a905f2599",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -14,7 +14,7 @@\n #include <boost/foreach.hpp>\n \n RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel *parent) :\n-    walletModel(parent)\n+    QAbstractTableModel(parent), walletModel(parent)\n {\n     Q_UNUSED(wallet);\n     nReceiveRequestsMaxId = 0;"
      },
      {
        "sha": "7f5bb29f160b8c4322f6e7bfa8b24597ed74bc62",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -486,7 +486,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n         QAction* banAction365d    = new QAction(tr(\"Ban for\") + \" \" + tr(\"1 &year\"), this);\n \n         // create peer table context menu\n-        peersTableContextMenu = new QMenu();\n+        peersTableContextMenu = new QMenu(this);\n         peersTableContextMenu->addAction(disconnectAction);\n         peersTableContextMenu->addAction(banAction1h);\n         peersTableContextMenu->addAction(banAction24h);\n@@ -534,7 +534,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n         QAction* unbanAction = new QAction(tr(\"&Unban\"), this);\n \n         // create ban table context menu\n-        banTableContextMenu = new QMenu();\n+        banTableContextMenu = new QMenu(this);\n         banTableContextMenu->addAction(unbanAction);\n \n         // ban table context menu signals"
      },
      {
        "sha": "f5cbde6238d7f7c8171d4317afc222803cfa1f2d",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47db07537746940ee7dd0739a8c73e328837813f/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47db07537746940ee7dd0739a8c73e328837813f/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=47db07537746940ee7dd0739a8c73e328837813f",
        "patch": "@@ -37,7 +37,7 @@\n \n TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent), model(0), transactionProxyModel(0),\n-    transactionView(0), abandonAction(0)\n+    transactionView(0), abandonAction(0), columnResizingFixer(0)\n {\n     // Build filter row\n     setContentsMargins(0,0,0,0);\n@@ -147,7 +147,7 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     QAction *editLabelAction = new QAction(tr(\"Edit label\"), this);\n     QAction *showDetailsAction = new QAction(tr(\"Show transaction details\"), this);\n \n-    contextMenu = new QMenu();\n+    contextMenu = new QMenu(this);\n     contextMenu->addAction(copyAddressAction);\n     contextMenu->addAction(copyLabelAction);\n     contextMenu->addAction(copyAmountAction);\n@@ -212,7 +212,7 @@ void TransactionView::setModel(WalletModel *_model)\n         transactionView->setColumnWidth(TransactionTableModel::Type, TYPE_COLUMN_WIDTH);\n         transactionView->setColumnWidth(TransactionTableModel::Amount, AMOUNT_MINIMUM_COLUMN_WIDTH);\n \n-        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(transactionView, AMOUNT_MINIMUM_COLUMN_WIDTH, MINIMUM_COLUMN_WIDTH);\n+        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(transactionView, AMOUNT_MINIMUM_COLUMN_WIDTH, MINIMUM_COLUMN_WIDTH, this);\n \n         if (_model->getOptionsModel())\n         {"
      }
    ]
  },
  {
    "sha": "693384eedb1ac7f449e226edd53e2cb52a86e279",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTMzODRlZWRiMWFjN2Y0NDllMjI2ZWRkNTNlMmNiNTJhODZlMjc5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-18T15:35:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-23T11:33:36Z"
      },
      "message": "qt: Prevent thread/memory leak on exiting RPCConsole\n\nMake ownership of the QThread object clear, so that the RPCConsole\ncan wait for the executor thread to quit before shutdown is called. This\nincreases overall thread safety, and prevents some objects from leaking\non exit.",
      "tree": {
        "sha": "898d2bc8d3667c56bdd32c656b03f478e305d99f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/898d2bc8d3667c56bdd32c656b03f478e305d99f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/693384eedb1ac7f449e226edd53e2cb52a86e279",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/693384eedb1ac7f449e226edd53e2cb52a86e279",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/693384eedb1ac7f449e226edd53e2cb52a86e279",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/693384eedb1ac7f449e226edd53e2cb52a86e279/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47db07537746940ee7dd0739a8c73e328837813f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47db07537746940ee7dd0739a8c73e328837813f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47db07537746940ee7dd0739a8c73e328837813f"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 29,
      "deletions": 16
    },
    "files": [
      {
        "sha": "1434c45dd4f11373d1b28923f6cc275a925109d5",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/693384eedb1ac7f449e226edd53e2cb52a86e279/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/693384eedb1ac7f449e226edd53e2cb52a86e279/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=693384eedb1ac7f449e226edd53e2cb52a86e279",
        "patch": "@@ -409,6 +409,11 @@ void BitcoinApplication::requestInitialize()\n \n void BitcoinApplication::requestShutdown()\n {\n+    // Show a simple window indicating shutdown status\n+    // Do this first as some of the steps may take some time below,\n+    // for example the RPC console may still be executing a command.\n+    ShutdownWindow::showShutdownWindow(window);\n+\n     qDebug() << __func__ << \": Requesting shutdown\";\n     startThread();\n     window->hide();\n@@ -423,9 +428,6 @@ void BitcoinApplication::requestShutdown()\n     delete clientModel;\n     clientModel = 0;\n \n-    // Show a simple window indicating shutdown status\n-    ShutdownWindow::showShutdownWindow(window);\n-\n     // Request shutdown from core thread\n     Q_EMIT requestedShutdown();\n }"
      },
      {
        "sha": "788fc9af31726e529d15ddee176a83a90e796b57",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/693384eedb1ac7f449e226edd53e2cb52a86e279/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/693384eedb1ac7f449e226edd53e2cb52a86e279/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=693384eedb1ac7f449e226edd53e2cb52a86e279",
        "patch": "@@ -511,6 +511,13 @@ void BitcoinGUI::setClientModel(ClientModel *_clientModel)\n             // Disable context menu on tray icon\n             trayIconMenu->clear();\n         }\n+        // Propagate cleared model to child objects\n+        rpcConsole->setClientModel(nullptr);\n+#ifdef ENABLE_WALLET\n+        walletFrame->setClientModel(nullptr);\n+#endif // ENABLE_WALLET\n+        unitDisplayControl->setOptionsModel(nullptr);\n+        connectionsControl->setClientModel(nullptr);\n     }\n }\n \n@@ -1242,7 +1249,5 @@ void NetworkToggleStatusBarControl::mousePressEvent(QMouseEvent *event)\n /** Lets the control know about the Client Model */\n void NetworkToggleStatusBarControl::setClientModel(ClientModel *_clientModel)\n {\n-    if (_clientModel) {\n-        this->clientModel = _clientModel;\n-    }\n+    this->clientModel = _clientModel;\n }"
      },
      {
        "sha": "520d22990189f524e2414caae1dbd3fe89f3a722",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/693384eedb1ac7f449e226edd53e2cb52a86e279/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/693384eedb1ac7f449e226edd53e2cb52a86e279/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=693384eedb1ac7f449e226edd53e2cb52a86e279",
        "patch": "@@ -382,7 +382,6 @@ RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :\n     // based timer interface\n     RPCSetTimerInterfaceIfUnset(rpcTimerInterface);\n \n-    startExecutor();\n     setTrafficGraphRange(INITIAL_TRAFFIC_GRAPH_MINS);\n \n     ui->detailWidget->hide();\n@@ -396,7 +395,6 @@ RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :\n RPCConsole::~RPCConsole()\n {\n     GUIUtil::saveWindowGeometry(\"nRPCConsoleWindow\", this);\n-    Q_EMIT stopExecutor();\n     RPCUnsetTimerInterface(rpcTimerInterface);\n     delete rpcTimerInterface;\n     delete ui;\n@@ -565,6 +563,14 @@ void RPCConsole::setClientModel(ClientModel *model)\n         autoCompleter = new QCompleter(wordList, this);\n         ui->lineEdit->setCompleter(autoCompleter);\n         autoCompleter->popup()->installEventFilter(this);\n+        // Start thread to execute RPC commands.\n+        startExecutor();\n+    }\n+    if (!model) {\n+        // Client model is being set to 0, this means shutdown() is about to be called.\n+        // Make sure we clean up the executor thread\n+        Q_EMIT stopExecutor();\n+        thread.wait();\n     }\n }\n \n@@ -759,26 +765,24 @@ void RPCConsole::browseHistory(int offset)\n \n void RPCConsole::startExecutor()\n {\n-    QThread *thread = new QThread;\n     RPCExecutor *executor = new RPCExecutor();\n-    executor->moveToThread(thread);\n+    executor->moveToThread(&thread);\n \n     // Replies from executor object must go to this object\n     connect(executor, SIGNAL(reply(int,QString)), this, SLOT(message(int,QString)));\n     // Requests from this object must go to executor\n     connect(this, SIGNAL(cmdRequest(QString)), executor, SLOT(request(QString)));\n \n     // On stopExecutor signal\n-    // - queue executor for deletion (in execution thread)\n     // - quit the Qt event loop in the execution thread\n-    connect(this, SIGNAL(stopExecutor()), executor, SLOT(deleteLater()));\n-    connect(this, SIGNAL(stopExecutor()), thread, SLOT(quit()));\n-    // Queue the thread for deletion (in this thread) when it is finished\n-    connect(thread, SIGNAL(finished()), thread, SLOT(deleteLater()));\n+    connect(this, SIGNAL(stopExecutor()), &thread, SLOT(quit()));\n+    // - queue executor for deletion (in execution thread)\n+    connect(&thread, SIGNAL(finished()), executor, SLOT(deleteLater()), Qt::DirectConnection);\n+    connect(&thread, SIGNAL(finished()), this, SLOT(test()), Qt::DirectConnection);\n \n     // Default implementation of QThread::run() simply spins up an event loop in the thread,\n     // which is what we want.\n-    thread->start();\n+    thread.start();\n }\n \n void RPCConsole::on_tabWidget_currentChanged(int index)"
      },
      {
        "sha": "344d5ecb98d1513720b9f658cf0905dc12c0b836",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/693384eedb1ac7f449e226edd53e2cb52a86e279/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/693384eedb1ac7f449e226edd53e2cb52a86e279/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=693384eedb1ac7f449e226edd53e2cb52a86e279",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <QWidget>\n #include <QCompleter>\n+#include <QThread>\n \n class ClientModel;\n class PlatformStyle;\n@@ -148,6 +149,7 @@ public Q_SLOTS:\n     QMenu *banTableContextMenu;\n     int consoleFontSize;\n     QCompleter *autoCompleter;\n+    QThread thread;\n \n     /** Update UI with latest network info from model. */\n     void updateNetworkState();"
      }
    ]
  },
  {
    "sha": "e4f126a7ba66e7317718c30276dff6db92dc1986",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGYxMjZhN2JhNjZlNzMxNzcxOGMzMDI3NmRmZjZkYjkyZGMxOTg2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-19T10:08:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-23T11:33:36Z"
      },
      "message": "qt: Avoid splash-screen related memory leak\n\nMake splash screen queue its own deletion when it receives the finished\ncommand, instead of relying on WA_DeleteOnClose which doesn't work under\nthese circumstances.",
      "tree": {
        "sha": "81e2facf4c1188fed8690f71d3cceb85473b5f3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81e2facf4c1188fed8690f71d3cceb85473b5f3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4f126a7ba66e7317718c30276dff6db92dc1986",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4f126a7ba66e7317718c30276dff6db92dc1986",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4f126a7ba66e7317718c30276dff6db92dc1986",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4f126a7ba66e7317718c30276dff6db92dc1986/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "693384eedb1ac7f449e226edd53e2cb52a86e279",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/693384eedb1ac7f449e226edd53e2cb52a86e279",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/693384eedb1ac7f449e226edd53e2cb52a86e279"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d63964805d5bf0197f2829f8285ac28a562550c4",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f126a7ba66e7317718c30276dff6db92dc1986/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f126a7ba66e7317718c30276dff6db92dc1986/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e4f126a7ba66e7317718c30276dff6db92dc1986",
        "patch": "@@ -365,9 +365,8 @@ void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n {\n     SplashScreen *splash = new SplashScreen(0, networkStyle);\n-    // We don't hold a direct pointer to the splash screen after creation, so use\n-    // Qt::WA_DeleteOnClose to make sure that the window will be deleted eventually.\n-    splash->setAttribute(Qt::WA_DeleteOnClose);\n+    // We don't hold a direct pointer to the splash screen after creation, but the splash\n+    // screen will take care of deleting itself when slotFinish happens.\n     splash->show();\n     connect(this, SIGNAL(splashFinished(QWidget*)), splash, SLOT(slotFinish(QWidget*)));\n     connect(this, SIGNAL(requestedShutdown()), splash, SLOT(close()));"
      },
      {
        "sha": "1b6e28e93e67a9d472b9987bb52b7fecea1cac50",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f126a7ba66e7317718c30276dff6db92dc1986/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f126a7ba66e7317718c30276dff6db92dc1986/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=e4f126a7ba66e7317718c30276dff6db92dc1986",
        "patch": "@@ -147,6 +147,7 @@ void SplashScreen::slotFinish(QWidget *mainWin)\n     if (isMinimized())\n         showNormal();\n     hide();\n+    deleteLater(); // No more need for this\n }\n \n static void InitMessage(SplashScreen *splash, const std::string &message)"
      }
    ]
  },
  {
    "sha": "5204598f8d07d7432d91e9b8781806d2f3d16415",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjA0NTk4ZjhkMDdkNzQzMmQ5MWU5Yjg3ODE4MDZkMmYzZDE2NDE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-19T13:28:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-23T11:33:36Z"
      },
      "message": "qt: Avoid shutdownwindow-related memory leak\n\nStore a reference to the shutdown window on BitcoinApplication,\nso that it will be deleted when exiting the main loop.",
      "tree": {
        "sha": "6c346f17f8311f5902a1b1318d37628d597dea1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c346f17f8311f5902a1b1318d37628d597dea1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5204598f8d07d7432d91e9b8781806d2f3d16415",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5204598f8d07d7432d91e9b8781806d2f3d16415",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5204598f8d07d7432d91e9b8781806d2f3d16415",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5204598f8d07d7432d91e9b8781806d2f3d16415/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4f126a7ba66e7317718c30276dff6db92dc1986",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4f126a7ba66e7317718c30276dff6db92dc1986",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4f126a7ba66e7317718c30276dff6db92dc1986"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d7452f308e50ed36562cbb63d8adb4000aa0739b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5204598f8d07d7432d91e9b8781806d2f3d16415/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5204598f8d07d7432d91e9b8781806d2f3d16415/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=5204598f8d07d7432d91e9b8781806d2f3d16415",
        "patch": "@@ -245,6 +245,7 @@ public Q_SLOTS:\n #endif\n     int returnValue;\n     const PlatformStyle *platformStyle;\n+    std::unique_ptr<QWidget> shutdownWindow;\n \n     void startThread();\n };\n@@ -411,7 +412,7 @@ void BitcoinApplication::requestShutdown()\n     // Show a simple window indicating shutdown status\n     // Do this first as some of the steps may take some time below,\n     // for example the RPC console may still be executing a command.\n-    ShutdownWindow::showShutdownWindow(window);\n+    shutdownWindow.reset(ShutdownWindow::showShutdownWindow(window));\n \n     qDebug() << __func__ << \": Requesting shutdown\";\n     startThread();"
      },
      {
        "sha": "4ec022881c1a7b84ee8573e15993db94b794587a",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5204598f8d07d7432d91e9b8781806d2f3d16415/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5204598f8d07d7432d91e9b8781806d2f3d16415/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=5204598f8d07d7432d91e9b8781806d2f3d16415",
        "patch": "@@ -171,22 +171,20 @@ ShutdownWindow::ShutdownWindow(QWidget *parent, Qt::WindowFlags f):\n     setLayout(layout);\n }\n \n-void ShutdownWindow::showShutdownWindow(BitcoinGUI *window)\n+QWidget *ShutdownWindow::showShutdownWindow(BitcoinGUI *window)\n {\n     if (!window)\n-        return;\n+        return nullptr;\n \n     // Show a simple window indicating shutdown status\n     QWidget *shutdownWindow = new ShutdownWindow();\n-    // We don't hold a direct pointer to the shutdown window after creation, so use\n-    // Qt::WA_DeleteOnClose to make sure that the window will be deleted eventually.\n-    shutdownWindow->setAttribute(Qt::WA_DeleteOnClose);\n     shutdownWindow->setWindowTitle(window->windowTitle());\n \n     // Center shutdown window at where main window was\n     const QPoint global = window->mapToGlobal(window->rect().center());\n     shutdownWindow->move(global.x() - shutdownWindow->width() / 2, global.y() - shutdownWindow->height() / 2);\n     shutdownWindow->show();\n+    return shutdownWindow;\n }\n \n void ShutdownWindow::closeEvent(QCloseEvent *event)"
      },
      {
        "sha": "b930429578c43960422d2047e76aab6d3c215113",
        "filename": "src/qt/utilitydialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5204598f8d07d7432d91e9b8781806d2f3d16415/src/qt/utilitydialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5204598f8d07d7432d91e9b8781806d2f3d16415/src/qt/utilitydialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.h?ref=5204598f8d07d7432d91e9b8781806d2f3d16415",
        "patch": "@@ -43,7 +43,7 @@ class ShutdownWindow : public QWidget\n \n public:\n     ShutdownWindow(QWidget *parent=0, Qt::WindowFlags f=0);\n-    static void showShutdownWindow(BitcoinGUI *window);\n+    static QWidget *showShutdownWindow(BitcoinGUI *window);\n \n protected:\n     void closeEvent(QCloseEvent *event);"
      }
    ]
  },
  {
    "sha": "ed998ea7a0ecf294211b06e9ef82f1548a621a1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDk5OGVhN2EwZWNmMjk0MjExYjA2ZTllZjgyZjE1NDhhNjIxYTFk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-19T15:12:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-23T11:33:37Z"
      },
      "message": "qt: Avoid OpenSSL certstore-related memory leak\n\n- Correctly manage the X509 and X509_STORE objects lifetime.",
      "tree": {
        "sha": "47cb133af314959d5f96bb45b735ff10815c1adb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47cb133af314959d5f96bb45b735ff10815c1adb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed998ea7a0ecf294211b06e9ef82f1548a621a1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed998ea7a0ecf294211b06e9ef82f1548a621a1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed998ea7a0ecf294211b06e9ef82f1548a621a1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed998ea7a0ecf294211b06e9ef82f1548a621a1d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5204598f8d07d7432d91e9b8781806d2f3d16415",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5204598f8d07d7432d91e9b8781806d2f3d16415",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5204598f8d07d7432d91e9b8781806d2f3d16415"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 25,
      "deletions": 23
    },
    "files": [
      {
        "sha": "229752cad2206460c96cd8bb03094ee95787d676",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 19,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed998ea7a0ecf294211b06e9ef82f1548a621a1d/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed998ea7a0ecf294211b06e9ef82f1548a621a1d/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=ed998ea7a0ecf294211b06e9ef82f1548a621a1d",
        "patch": "@@ -58,14 +58,19 @@ const char* BIP71_MIMETYPE_PAYMENTREQUEST = \"application/bitcoin-paymentrequest\"\n // BIP70 max payment request size in bytes (DoS protection)\n const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;\n \n-X509_STORE* PaymentServer::certStore = NULL;\n-void PaymentServer::freeCertStore()\n+struct X509StoreDeleter {\n+      void operator()(X509_STORE* b) {\n+          X509_STORE_free(b);\n+      }\n+};\n+\n+struct X509Deleter {\n+      void operator()(X509* b) { X509_free(b); }\n+};\n+\n+namespace // Anon namespace\n {\n-    if (PaymentServer::certStore != NULL)\n-    {\n-        X509_STORE_free(PaymentServer::certStore);\n-        PaymentServer::certStore = NULL;\n-    }\n+    std::unique_ptr<X509_STORE, X509StoreDeleter> certStore;\n }\n \n //\n@@ -107,20 +112,15 @@ static void ReportInvalidCertificate(const QSslCertificate& cert)\n //\n void PaymentServer::LoadRootCAs(X509_STORE* _store)\n {\n-    if (PaymentServer::certStore == NULL)\n-        atexit(PaymentServer::freeCertStore);\n-    else\n-        freeCertStore();\n-\n     // Unit tests mostly use this, to pass in fake root CAs:\n     if (_store)\n     {\n-        PaymentServer::certStore = _store;\n+        certStore.reset(_store);\n         return;\n     }\n \n     // Normal execution, use either -rootcertificates or system certs:\n-    PaymentServer::certStore = X509_STORE_new();\n+    certStore.reset(X509_STORE_new());\n \n     // Note: use \"-system-\" default here so that users can pass -rootcertificates=\"\"\n     // and get 'I don't like X.509 certificates, don't trust anybody' behavior:\n@@ -167,11 +167,11 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n         QByteArray certData = cert.toDer();\n         const unsigned char *data = (const unsigned char *)certData.data();\n \n-        X509* x509 = d2i_X509(0, &data, certData.size());\n-        if (x509 && X509_STORE_add_cert(PaymentServer::certStore, x509))\n+        std::unique_ptr<X509, X509Deleter> x509(d2i_X509(0, &data, certData.size()));\n+        if (x509 && X509_STORE_add_cert(certStore.get(), x509.get()))\n         {\n-            // Note: X509_STORE_free will free the X509* objects when\n-            // the PaymentServer is destroyed\n+            // Note: X509_STORE increases the reference count to the X509 object,\n+            // we still have to release our reference to it.\n             ++nRootCerts;\n         }\n         else\n@@ -550,7 +550,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     recipient.paymentRequest = request;\n     recipient.message = GUIUtil::HtmlEscape(request.getDetails().memo());\n \n-    request.getMerchant(PaymentServer::certStore, recipient.authenticatedMerchant);\n+    request.getMerchant(certStore.get(), recipient.authenticatedMerchant);\n \n     QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n     QStringList addresses;\n@@ -807,3 +807,8 @@ bool PaymentServer::verifyAmount(const CAmount& requestAmount)\n     }\n     return fVerified;\n }\n+\n+X509_STORE* PaymentServer::getCertStore()\n+{\n+    return certStore.get();\n+}"
      },
      {
        "sha": "7202e7dada7b9aa36b16a50e9cd4c3013ea2cbd5",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed998ea7a0ecf294211b06e9ef82f1548a621a1d/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed998ea7a0ecf294211b06e9ef82f1548a621a1d/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=ed998ea7a0ecf294211b06e9ef82f1548a621a1d",
        "patch": "@@ -83,7 +83,7 @@ class PaymentServer : public QObject\n     static void LoadRootCAs(X509_STORE* store = NULL);\n \n     // Return certificate store\n-    static X509_STORE* getCertStore() { return certStore; }\n+    static X509_STORE* getCertStore();\n \n     // OptionsModel is used for getting proxy settings and display unit\n     void setOptionsModel(OptionsModel *optionsModel);\n@@ -140,9 +140,6 @@ private Q_SLOTS:\n     bool saveURIs;                      // true during startup\n     QLocalServer* uriServer;\n \n-    static X509_STORE* certStore;       // Trusted root certificates\n-    static void freeCertStore();\n-\n     QNetworkAccessManager* netManager;  // Used to fetch payment requests\n \n     OptionsModel *optionsModel;"
      }
    ]
  }
]