[
  {
    "sha": "fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJiYTBlNmNjMDhhZjJiNmZmNjUxYzVmMTZiNTVmZmJlZTljNDVi",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-11-15T11:24:34Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-11-15T11:24:34Z"
      },
      "message": "orphan spaces cleanup ;-)",
      "tree": {
        "sha": "3a3e28d39da41d9a4336dda61dc0ebf287eb3e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a3e28d39da41d9a4336dda61dc0ebf287eb3e74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "4fc241235c41fbf7f2592dfee11db5b7b71c17ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fc241235c41fbf7f2592dfee11db5b7b71c17ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fc241235c41fbf7f2592dfee11db5b7b71c17ad"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "59982b40662eafba69aed1a0ea258764d67d46c0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b",
        "patch": "@@ -626,7 +626,7 @@ void CNode::copyStats(CNodeStats &stats)\n     X(nSendBytes);\n     X(nRecvBytes);\n     stats.fSyncNode = (this == pnodeSync);\n-    \n+\n     // It is common for nodes with good ping times to suddenly become lagged,\n     // due to a new block arriving or other large transfer.\n     // Merely reporting pingtime might fool the caller into thinking the node was still responsive,\n@@ -637,11 +637,11 @@ void CNode::copyStats(CNodeStats &stats)\n     if ((0 != nPingNonceSent) && (0 != nPingUsecStart)) {\n         nPingUsecWait = GetTimeMicros() - nPingUsecStart;\n     }\n-    \n+\n     // Raw ping time is in microseconds, but show it to user as whole seconds (Bitcoin users should be well used to small numbers with many decimal places by now :)\n     stats.dPingTime = (((double)nPingUsecTime) / 1e6);\n     stats.dPingWait = (((double)nPingUsecWait) / 1e6);\n-    \n+\n     // Leave string empty if addrLocal invalid (not filled in yet)\n     stats.addrLocal = addrLocal.IsValid() ? addrLocal.ToString() : \"\";\n }\n@@ -1542,9 +1542,9 @@ void ThreadMessageHandler()\n         CNode* pnodeTrickle = NULL;\n         if (!vNodesCopy.empty())\n             pnodeTrickle = vNodesCopy[GetRand(vNodesCopy.size())];\n-        \n+\n         bool fSleep = true;\n-        \n+\n         BOOST_FOREACH(CNode* pnode, vNodesCopy)\n         {\n             if (pnode->fDisconnect)\n@@ -1557,7 +1557,7 @@ void ThreadMessageHandler()\n                 {\n                     if (!g_signals.ProcessMessages(pnode))\n                         pnode->CloseSocketDisconnect();\n-                    \n+\n                     if (pnode->nSendSize < SendBufferSize())\n                     {\n                         if (!pnode->vRecvGetData.empty() || (!pnode->vRecvMsg.empty() && pnode->vRecvMsg[0].complete()))\n@@ -1583,7 +1583,7 @@ void ThreadMessageHandler()\n             BOOST_FOREACH(CNode* pnode, vNodesCopy)\n                 pnode->Release();\n         }\n-        \n+\n         if (fSleep)\n             MilliSleep(100);\n     }"
      },
      {
        "sha": "228d432ee3a1c6e36ca5013ea45bdfb149928a45",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b",
        "patch": "@@ -1907,7 +1907,7 @@ void CScript::SetMultisig(int nRequired, const std::vector<CPubKey>& keys)\n \n bool CScriptCompressor::IsToKeyID(CKeyID &hash) const\n {\n-    if (script.size() == 25 && script[0] == OP_DUP && script[1] == OP_HASH160 \n+    if (script.size() == 25 && script[0] == OP_DUP && script[1] == OP_HASH160\n                             && script[2] == 20 && script[23] == OP_EQUALVERIFY\n                             && script[24] == OP_CHECKSIG) {\n         memcpy(&hash, &script[3], 20);"
      },
      {
        "sha": "6b3628b184dc71d19206bbf75ecba07a342251b0",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b",
        "patch": "@@ -82,8 +82,8 @@ bool CWalletDB::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, c\n     return Write(std::make_pair(std::string(\"key\"), vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey.begin(), vchKey.end())), false);\n }\n \n-bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey, \n-                                const std::vector<unsigned char>& vchCryptedSecret, \n+bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey,\n+                                const std::vector<unsigned char>& vchCryptedSecret,\n                                 const CKeyMetadata &keyMeta)\n {\n     const bool fEraseUnencryptedKey = true;\n@@ -429,7 +429,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CKey key;\n             CPrivKey pkey;\n             uint256 hash = 0;\n-            \n+\n             if (strType == \"key\")\n             {\n                 wss.nKeys++;\n@@ -439,7 +439,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 ssValue >> wkey;\n                 pkey = wkey.vchPrivKey;\n             }\n-            \n+\n             // Old wallets store keys as \"key\" [pubkey] => [privkey]\n             // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n             // using EC operations as a checksum.\n@@ -450,26 +450,26 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 ssValue >> hash;\n             }\n             catch(...){}\n-            \n+\n             bool fSkipCheck = false;\n-            \n+\n             if (hash != 0)\n             {\n                 // hash pubkey/privkey to accelerate wallet load\n                 std::vector<unsigned char> vchKey;\n                 vchKey.reserve(vchPubKey.size() + pkey.size());\n                 vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n                 vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n-                \n+\n                 if (Hash(vchKey.begin(), vchKey.end()) != hash)\n                 {\n                     strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                     return false;\n                 }\n-                \n+\n                 fSkipCheck = true;\n             }\n-            \n+\n             if (!key.Load(pkey, vchPubKey, fSkipCheck))\n             {\n                 strErr = \"Error reading wallet database: CPrivKey corrupt\";"
      }
    ]
  }
]