[
  {
    "sha": "8e06e2f48ce284775e8620cd39378c6e43bcf156",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTA2ZTJmNDhjZTI4NDc3NWU4NjIwY2QzOTM3OGM2ZTQzYmNmMTU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-18T15:55:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-27T15:02:45Z"
      },
      "message": "wallet: add interface for storing generic data on destinations\n\nAdd \"destdata\" record type to wallet, as well as accessor functions\non CWallet and CWalletDB. This can be used by the UI to store\narbitrary data tuples to be associated with a\ntx destination in the wallet.\n\nA destdata tuple in the wallet is of the form (address, key, value)\nwhere the key acts to distinguish different types of generic data.\n\nThe purpose of this is to give the GUI a way to store:\n\n- When an address table record was created (for #3207)\n- The invoice Payment URI associated with a receiving address (for #3207)\n- Outgoing payment requests (as soon as the GUI for this is ready), so\n  that they can be associated with transactions when paid (transaction\n  details could show this information...)\n\nAnd possibly other data later.",
      "tree": {
        "sha": "8faba6e995c846fb6167646b25d166cb90543352",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8faba6e995c846fb6167646b25d166cb90543352"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e06e2f48ce284775e8620cd39378c6e43bcf156",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e06e2f48ce284775e8620cd39378c6e43bcf156",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e06e2f48ce284775e8620cd39378c6e43bcf156",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e06e2f48ce284775e8620cd39378c6e43bcf156/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f083afde18aac9ae0daeef4f04e33fa530f2126",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f083afde18aac9ae0daeef4f04e33fa530f2126",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f083afde18aac9ae0daeef4f04e33fa530f2126"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 90,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1d023b7022c578365fefc69782d2fdaa5af9d2db",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e06e2f48ce284775e8620cd39378c6e43bcf156/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e06e2f48ce284775e8620cd39378c6e43bcf156/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=8e06e2f48ce284775e8620cd39378c6e43bcf156",
        "patch": "@@ -1525,6 +1525,16 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const string& strNam\n \n bool CWallet::DelAddressBook(const CTxDestination& address)\n {\n+    if(fFileBacked)\n+    {\n+        // Delete destdata tuples associated with address\n+        std::string strAddress = CBitcoinAddress(address).ToString();\n+        BOOST_FOREACH(const PAIRTYPE(string, string) &item, mapAddressBook[address].destdata)\n+        {\n+            CWalletDB(strWalletFile).EraseDestData(strAddress, item.first);\n+        }\n+    }\n+\n     mapAddressBook.erase(address);\n     NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, address), \"\", CT_DELETED);\n     if (!fFileBacked)\n@@ -1990,3 +2000,42 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n     for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n         mapKeyBirth[it->first] = it->second->nTime - 7200; // block times can be 2h off\n }\n+\n+bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n+{\n+    mapAddressBook[dest].destdata.insert(std::make_pair(key, value));\n+    if (!fFileBacked)\n+        return true;\n+    return CWalletDB(strWalletFile).WriteDestData(CBitcoinAddress(dest).ToString(), key, value);\n+}\n+\n+bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)\n+{\n+    if (!mapAddressBook[dest].destdata.erase(key))\n+        return false;\n+    if (!fFileBacked)\n+        return true;\n+    return CWalletDB(strWalletFile).EraseDestData(CBitcoinAddress(dest).ToString(), key);\n+}\n+\n+bool CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n+{\n+    mapAddressBook[dest].destdata.insert(std::make_pair(key, value));\n+    return true;\n+}\n+\n+bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const\n+{\n+    std::map<CTxDestination, CAddressBookData>::const_iterator i = mapAddressBook.find(dest);\n+    if(i != mapAddressBook.end())\n+    {\n+        CAddressBookData::StringMap::const_iterator j = i->second.destdata.find(key);\n+        if(j != i->second.destdata.end())\n+        {\n+            if(value)\n+                *value = j->second;\n+            return true;\n+        }\n+    }\n+    return false;\n+}"
      },
      {
        "sha": "b08f7568ec0b0350faede0eab95ffed091d2157d",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e06e2f48ce284775e8620cd39378c6e43bcf156/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e06e2f48ce284775e8620cd39378c6e43bcf156/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=8e06e2f48ce284775e8620cd39378c6e43bcf156",
        "patch": "@@ -80,6 +80,9 @@ class CAddressBookData\n     {\n         purpose = \"unknown\";\n     }\n+\n+    typedef std::map<std::string, std::string> StringMap;\n+    StringMap destdata;\n };\n \n /** A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n@@ -180,6 +183,15 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     bool AddCScript(const CScript& redeemScript);\n     bool LoadCScript(const CScript& redeemScript) { return CCryptoKeyStore::AddCScript(redeemScript); }\n \n+    /// Adds a destination data tuple to the store, and saves it to disk\n+    bool AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n+    /// Erases a destination data tuple in the store and on disk\n+    bool EraseDestData(const CTxDestination &dest, const std::string &key);\n+    /// Adds a destination data tuple to the store, without saving it to disk\n+    bool LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n+    /// Look up a destination data tuple in the store, return true if found false otherwise\n+    bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n+\n     bool Unlock(const SecureString& strWalletPassphrase);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);"
      },
      {
        "sha": "be5531d8284ea84a842347c6df8e4d06d58898c0",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e06e2f48ce284775e8620cd39378c6e43bcf156/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e06e2f48ce284775e8620cd39378c6e43bcf156/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=8e06e2f48ce284775e8620cd39378c6e43bcf156",
        "patch": "@@ -566,6 +566,18 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         {\n             ssValue >> pwallet->nOrderPosNext;\n         }\n+        else if (strType == \"destdata\")\n+        {\n+            std::string strAddress, strKey, strValue;\n+            ssKey >> strAddress;\n+            ssKey >> strKey;\n+            ssValue >> strValue;\n+            if (!pwallet->LoadDestData(CBitcoinAddress(strAddress).Get(), strKey, strValue))\n+            {\n+                strErr = \"Error reading wallet database: LoadDestData failed\";\n+                return false;\n+            }\n+        }\n     } catch (...)\n     {\n         return false;\n@@ -867,3 +879,15 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename)\n {\n     return CWalletDB::Recover(dbenv, filename, false);\n }\n+\n+bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n+{\n+    nWalletDBUpdated++;\n+    return Write(boost::make_tuple(std::string(\"destdata\"), address, key), value);\n+}\n+\n+bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)\n+{\n+    nWalletDBUpdated++;\n+    return Erase(boost::make_tuple(string(\"destdata\"), address, key));\n+}"
      },
      {
        "sha": "15af28724569c78d982dd3c5f7ec20a4bf225701",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e06e2f48ce284775e8620cd39378c6e43bcf156/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e06e2f48ce284775e8620cd39378c6e43bcf156/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=8e06e2f48ce284775e8620cd39378c6e43bcf156",
        "patch": "@@ -124,6 +124,11 @@ class CWalletDB : public CDB\n \n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n+\n+    /// Write destination data key,value tuple to database\n+    bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n+    /// Erase destination data tuple from wallet database\n+    bool EraseDestData(const std::string &address, const std::string &key);\n private:\n     bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n public:"
      }
    ]
  }
]