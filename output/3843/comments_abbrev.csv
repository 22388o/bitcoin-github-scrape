petertodd,2014-03-11T06:40:28Z,"Interesting, bitcoinj is producing CHECKMULTISIG transactions that violate this rule. Fixed by @schildbach in https://github.com/schildbach/bitcoinj/commit/e3d97759d5692791821e8f1ee71856a9e8231dd7 (pull-req, not yet merged)\n\n bitcoinjs-lib does get it right however, which covers almost all real-world use of CHECKMULTISIG right now. (e.g. bitgo and bitrated) EDIT: litbitcoin gets it right too, wh",https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-37267319,37267319,
sipa,2014-03-11T15:32:05Z,"ACK.\n\nI started working on some similar extra flags to implement my proposed version3 transaction/blocks, but didn't get to extend the unit tests as you did, so preferring this code goes in first.\n\nThis pull-request does contain a bunch of only moderately-related commits though, so perhaps others prefer seeing it split up. I'm personally fine with all.\n\nI'm not sure a separation into standar",https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-37309153,37309153,
sipa,2014-03-11T15:47:29Z,"Verifying some math:\n\nI think you can only fit a n-of-14 checkmultisig in a 510-byte redeem script IMHO. It requires an OP_(nRequired) + nKeys*(push of 33 bytes) + OP_(nKeys) + OP_CHECKMULTISIG. For nKeys=15, this requires 513 bytes.\n\nSo nKeys is at most 14, and the maximum standard redeemscript is 479 bytes.\n\nThe size limit on scriptSig can be made a bit more strict as well.\n\nSince the ev",https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-37311070,37311070,
sipa,2014-03-11T15:49:24Z,"Ugh. The limit is 520 bytes, not 510.\n\nThis means nKeys can indeed be 15, and the maximum redeemscript is 513 bytes.\n\nThe maximum scriptSig then becomes 15*(72+1) + 513+1 = 1609.\n",https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-37311291,37311291,
gmaxwell,2014-03-11T17:08:21Z,@petertodd was that reindex with checkpoints=0 ?   I'd also suggest adding to your testplan a quick test of the test by turning on the rule like a blockchain rule and making sure it rejects the chain.\n,https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-37321543,37321543,
petertodd,2014-03-12T20:24:21Z,"@gmaxwell Good point; checkpoints=0 does pass. I also did a testnet reindex with the test forced on, and as expected it fails at height 180683 due to tx 013b1d2d37f77ec0b6861b396d594ace1d6bbff97d1cc64e401c396e89ba0462.\n\n@sipa I lowered the limit to a rounded off 1650 bytes and updated the comment to be clear it wasn't the absolute lower-limit. I agree re: nVersion=3, and actually was going to su",https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-37459677,37459677,
petertodd,2014-03-18T22:08:53Z,"I've been running a node for about a week now with this patch applied. No issues seen, and on top of that other than some of my own test transactions I haven't seen any CHECKMULTISIG usage that would be blocked by this patch; looks like all the implementations actually out there getting used are compliant.\n",https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-37995139,37995139,
CodeShark,2014-03-31T03:11:48Z,"Looks good. Haven't throughly tested it, but I am running a node and it seems to work fine.\n\nThis is a much desired fix.\n",https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-39050771,39050771,
CodeShark,2014-05-04T06:07:09Z,I've been running this patch for several weeks now and haven't run into any issues - any chance of this getting merged soon?\n,https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-42125189,42125189,
petertodd,2014-05-05T05:05:44Z,Lemme know if this needs a rebase; pull-reqs #3860 and #3861 depend on it as well.\n,https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-42159413,42159413,
laanwj,2014-05-05T07:25:24Z,"Looks good to me, ACK apart from above minor nits\n",https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-42164361,42164361,
petertodd,2014-05-05T10:07:17Z,@laanwj Fixed all minor nits.\n,https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-42174231,42174231,
laanwj,2014-05-05T10:09:14Z,@gavinandresen can you have a final look at this before merging?\n,https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-42174342,42174342,
gavinandresen,2014-05-05T12:58:59Z,"Code-reviewed, but untested, ACK.\n",https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-42184669,42184669,
petertodd,2014-05-08T05:12:53Z,@sipa Fixed that comment and added a test for stack size prior to stacktop().\n,https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-42513949,42513949,
BitcoinPullTester,2014-05-08T05:37:05Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/787ee0c91394b0ae16ca2500dbacf9349e65b6bc for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/3843#issuecomment-42514922,42514922,
laanwj,2014-05-05T07:04:05Z,"Maybe define a constant `STANDARD_NOT_MANDATORY_VERIFY_FLAGS` that's `(STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS)` instead of doing the bit twiddling here inline, twice.\n",https://github.com/bitcoin/bitcoin/pull/3843#discussion_r12268918,12268918,src/main.cpp
laanwj,2014-05-05T07:07:23Z,I'd make this parsing a bit more strict: fail if the word is not in mapFlagNames instead of treating it as 0. This avoids tests testing something else than you think due to a typo.\n,https://github.com/bitcoin/bitcoin/pull/3843#discussion_r12268960,12268960,src/test/transaction_tests.cpp
laanwj,2014-05-05T07:09:52Z,"Maybe\n\n```\nreturn error(""CBasicKeyStore::AddCScript() : redeemScripts > %i bytes are invalid"", MAX_SCRIPT_ELEMENT_SIZE);\n```\n",https://github.com/bitcoin/bitcoin/pull/3843#discussion_r12268992,12268992,src/keystore.cpp
petertodd,2014-05-05T10:02:32Z,"Oh! I didn't realize C++ modified a map if you used [] on a unknown key, weird.\n",https://github.com/bitcoin/bitcoin/pull/3843#discussion_r12273140,12273140,src/test/transaction_tests.cpp
laanwj,2014-05-05T10:05:39Z,"It's really a pitfall. To paraphrase the horse_unix twitter account: ""the definition of operator[] is extremely simple: m[k] is equivalent to (*((m.insert(value_type(k, data_type()))).first)).second.""\n\nI wouldn't be surprised if Bitcoin Core itself also had a minor bug or two due to strangeness with [. In general using the explicit .find() results in more clear (though also more verbose...) code",https://github.com/bitcoin/bitcoin/pull/3843#discussion_r12273195,12273195,src/test/transaction_tests.cpp
