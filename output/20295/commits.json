[
  {
    "sha": "4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
    "node_id": "C_kwDOABII59oAKDRiYTY3Y2UxN2ZhYjgwZWE2ZDEzMGQ4ZTJjNDEwMDFkNjEwN2NmZTA",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-04-21T14:39:40Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-10-07T08:43:40Z"
      },
      "message": "rpc: move Ensure* helpers to server_util.h",
      "tree": {
        "sha": "f0a45f084f99eb5694f58d757ea9ed77a394cbcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0a45f084f99eb5694f58d757ea9ed77a394cbcc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmFeszwACgkQV/+b28ww\nEAmN/Q//dLobCyUByd4uwjfFuMABez7KDalDbwuIdBuHw9V01ZWesZkKY8h6b/p8\nHxelNTVCaCowfc3sv0IX9dBPAfMo1CBmYt0lHgO3jvHXBw62BIlT7Iu9wEtKb86r\nS3B80GRDxD2YIgCaeBPJbCFoRHOQpBgkaRru6AuJNmhSiQje6i09O4vd35kf1xa4\nN85XGfVFglalFOFMPaLaaURtWRvcsRP1Wiui/FH15nQbUjVJxJ/cZfqcmrc0Ewsi\nqEN+iasdAgvWjQo/yTuUx4d1jvfceEQKAYTKN8n4TrVpEXvA6qq3Z3wa61XhtiIA\nCIKjziUhnHZnUB4TLuTSfy9P2kB96f2XkIaNzrmU5OvOjqfFhubugzve6nG035A9\nc//6mmOLW/UQ4GxnyPntg5hD8FnrWgjgUf1yRcOWvNZ0ZLnh3NQou0fDGMHCCtum\niPIPZUbAfuduYKXSh4VZSuG+L2nQlQLbvCllOym1Y2BPw/uBxu37gbcEzGBUFnXk\nnQueYVuoXiA40bxUmkTLD3WiineTq6MEFTJzxYGJnQ6lEZfPO0nEdPx0V9mwdPqY\nlwU5vffOgAcLWiAuGQVYZsKoYM9JR69A34eny2J2WHyqtjkQ8cWIaKgXePtMNC3C\njR7uQIvlkDqIFVNnCmN32ei8fAqDT6ToAQLvAbrh1zc/0xeoluE=\n=t118\n-----END PGP SIGNATURE-----",
        "payload": "tree f0a45f084f99eb5694f58d757ea9ed77a394cbcc\nparent c0b6c96eee7c9e24b78935516225259e61cdabf7\nauthor Sjors Provoost <sjors@sprovoost.nl> 1619015980 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1633596220 +0200\n\nrpc: move Ensure* helpers to server_util.h\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0b6c96eee7c9e24b78935516225259e61cdabf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0b6c96eee7c9e24b78935516225259e61cdabf7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0b6c96eee7c9e24b78935516225259e61cdabf7"
      }
    ],
    "stats": {
      "total": 208,
      "additions": 115,
      "deletions": 93
    },
    "files": [
      {
        "sha": "10407036e9f3373f05de6ee44fee2857f2df8a0a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
        "patch": "@@ -209,12 +209,12 @@ BITCOIN_CORE_H = \\\n   rpc/blockchain.h \\\n   rpc/client.h \\\n   rpc/mining.h \\\n-  rpc/net.h \\\n   rpc/protocol.h \\\n   rpc/rawtransaction_util.h \\\n   rpc/register.h \\\n   rpc/request.h \\\n   rpc/server.h \\\n+  rpc/server_util.h \\\n   rpc/util.h \\\n   scheduler.h \\\n   script/descriptor.h \\\n@@ -367,6 +367,7 @@ libbitcoin_server_a_SOURCES = \\\n   rpc/net.cpp \\\n   rpc/rawtransaction.cpp \\\n   rpc/server.cpp \\\n+  rpc/server_util.cpp \\\n   script/sigcache.cpp \\\n   shutdown.cpp \\\n   signet.cpp \\"
      },
      {
        "sha": "a79d7782d49e6667f9a1b1ee34d2895e49873dd9",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
        "patch": "@@ -15,6 +15,7 @@\n #include <rpc/blockchain.h>\n #include <rpc/protocol.h>\n #include <rpc/server.h>\n+#include <rpc/server_util.h>\n #include <streams.h>\n #include <sync.h>\n #include <txmempool.h>"
      },
      {
        "sha": "19791b498afa037b139fca62279906bf3c7880b0",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 49,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
        "patch": "@@ -28,6 +28,7 @@\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n #include <rpc/server.h>\n+#include <rpc/server_util.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <streams.h>\n@@ -37,7 +38,6 @@\n #include <undo.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n-#include <util/system.h>\n #include <util/translation.h>\n #include <validation.h>\n #include <validationinterface.h>\n@@ -62,54 +62,6 @@ static Mutex cs_blockchange;\n static std::condition_variable cond_blockchange;\n static CUpdatedBlock latestblock GUARDED_BY(cs_blockchange);\n \n-NodeContext& EnsureAnyNodeContext(const std::any& context)\n-{\n-    auto node_context = util::AnyPtr<NodeContext>(context);\n-    if (!node_context) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node context not found\");\n-    }\n-    return *node_context;\n-}\n-\n-CTxMemPool& EnsureMemPool(const NodeContext& node)\n-{\n-    if (!node.mempool) {\n-        throw JSONRPCError(RPC_CLIENT_MEMPOOL_DISABLED, \"Mempool disabled or instance not found\");\n-    }\n-    return *node.mempool;\n-}\n-\n-CTxMemPool& EnsureAnyMemPool(const std::any& context)\n-{\n-    return EnsureMemPool(EnsureAnyNodeContext(context));\n-}\n-\n-ChainstateManager& EnsureChainman(const NodeContext& node)\n-{\n-    if (!node.chainman) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node chainman not found\");\n-    }\n-    return *node.chainman;\n-}\n-\n-ChainstateManager& EnsureAnyChainman(const std::any& context)\n-{\n-    return EnsureChainman(EnsureAnyNodeContext(context));\n-}\n-\n-CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node)\n-{\n-    if (!node.fee_estimator) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Fee estimation disabled\");\n-    }\n-    return *node.fee_estimator;\n-}\n-\n-CBlockPolicyEstimator& EnsureAnyFeeEstimator(const std::any& context)\n-{\n-    return EnsureFeeEstimator(EnsureAnyNodeContext(context));\n-}\n-\n /* Calculate the difficulty for a given block index.\n  */\n double GetDifficulty(const CBlockIndex* blockindex)"
      },
      {
        "sha": "7fad3933c0fe06bd4dcad119de1f7af332e71476",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
        "patch": "@@ -17,7 +17,6 @@ extern RecursiveMutex cs_main;\n \n class CBlock;\n class CBlockIndex;\n-class CBlockPolicyEstimator;\n class CChainState;\n class CTxMemPool;\n class ChainstateManager;\n@@ -52,14 +51,6 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n /** Used by getblockstats to get feerates at different percentiles by weight  */\n void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight);\n \n-NodeContext& EnsureAnyNodeContext(const std::any& context);\n-CTxMemPool& EnsureMemPool(const NodeContext& node);\n-CTxMemPool& EnsureAnyMemPool(const std::any& context);\n-ChainstateManager& EnsureChainman(const NodeContext& node);\n-ChainstateManager& EnsureAnyChainman(const std::any& context);\n-CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node);\n-CBlockPolicyEstimator& EnsureAnyFeeEstimator(const std::any& context);\n-\n /**\n  * Helper to create UTXO snapshots given a chainstate and a file handle.\n  * @return a UniValue map containing metadata about the snapshot."
      },
      {
        "sha": "8dbf06a10ab801e52cf6f74a64da26c7996fd5fc",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
        "patch": "@@ -20,8 +20,8 @@\n #include <pow.h>\n #include <rpc/blockchain.h>\n #include <rpc/mining.h>\n-#include <rpc/net.h>\n #include <rpc/server.h>\n+#include <rpc/server_util.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <script/script.h>"
      },
      {
        "sha": "00d0dff724a4523a0f9f18e9119e08b7f76609ce",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
        "patch": "@@ -16,6 +16,7 @@\n #include <outputtype.h>\n #include <rpc/blockchain.h>\n #include <rpc/server.h>\n+#include <rpc/server_util.h>\n #include <rpc/util.h>\n #include <scheduler.h>\n #include <script/descriptor.h>"
      },
      {
        "sha": "46804af6c4ab166ae3fec9933cfc425862ac3486",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 18,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
        "patch": "@@ -8,7 +8,6 @@\n #include <chainparams.h>\n #include <clientversion.h>\n #include <core_io.h>\n-#include <net.h>\n #include <net_permissions.h>\n #include <net_processing.h>\n #include <net_types.h> // For banmap_t\n@@ -17,12 +16,12 @@\n #include <policy/settings.h>\n #include <rpc/blockchain.h>\n #include <rpc/protocol.h>\n+#include <rpc/server_util.h>\n #include <rpc/util.h>\n #include <sync.h>\n #include <timedata.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n-#include <util/system.h>\n #include <util/translation.h>\n #include <validation.h>\n #include <version.h>\n@@ -41,22 +40,6 @@ const std::vector<std::string> CONNECTION_TYPE_DOC{\n         \"feeler (short-lived automatic connection for testing addresses)\"\n };\n \n-CConnman& EnsureConnman(const NodeContext& node)\n-{\n-    if (!node.connman) {\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n-    }\n-    return *node.connman;\n-}\n-\n-PeerManager& EnsurePeerman(const NodeContext& node)\n-{\n-    if (!node.peerman) {\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n-    }\n-    return *node.peerman;\n-}\n-\n static RPCHelpMan getconnectioncount()\n {\n     return RPCHelpMan{\"getconnectioncount\","
      },
      {
        "sha": "7a4d8440ba45b95cbdbd027171bc8f8121e4566a",
        "filename": "src/rpc/net.h",
        "status": "removed",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0b6c96eee7c9e24b78935516225259e61cdabf7/src/rpc/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0b6c96eee7c9e24b78935516225259e61cdabf7/src/rpc/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.h?ref=c0b6c96eee7c9e24b78935516225259e61cdabf7",
        "patch": "@@ -1,15 +0,0 @@\n-// Copyright (c) 2021 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_RPC_NET_H\n-#define BITCOIN_RPC_NET_H\n-\n-class CConnman;\n-class PeerManager;\n-struct NodeContext;\n-\n-CConnman& EnsureConnman(const NodeContext& node);\n-PeerManager& EnsurePeerman(const NodeContext& node);\n-\n-#endif // BITCOIN_RPC_NET_H"
      },
      {
        "sha": "b984d0f2e9aeb951d2760127f36f13359d6f1967",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
        "patch": "@@ -25,6 +25,7 @@\n #include <rpc/blockchain.h>\n #include <rpc/rawtransaction_util.h>\n #include <rpc/server.h>\n+#include <rpc/server_util.h>\n #include <rpc/util.h>\n #include <script/script.h>\n #include <script/sign.h>"
      },
      {
        "sha": "3fc35222e1f4e9b0df0c175154ed2782ba98f32c",
        "filename": "src/rpc/server_util.cpp",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/server_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/server_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server_util.cpp?ref=4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
        "patch": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <rpc/server_util.h>\n+\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <policy/fees.h>\n+#include <rpc/protocol.h>\n+#include <rpc/request.h>\n+#include <txmempool.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+#include <any>\n+\n+NodeContext& EnsureAnyNodeContext(const std::any& context)\n+{\n+    auto node_context = util::AnyPtr<NodeContext>(context);\n+    if (!node_context) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node context not found\");\n+    }\n+    return *node_context;\n+}\n+\n+CTxMemPool& EnsureMemPool(const NodeContext& node)\n+{\n+    if (!node.mempool) {\n+        throw JSONRPCError(RPC_CLIENT_MEMPOOL_DISABLED, \"Mempool disabled or instance not found\");\n+    }\n+    return *node.mempool;\n+}\n+\n+CTxMemPool& EnsureAnyMemPool(const std::any& context)\n+{\n+    return EnsureMemPool(EnsureAnyNodeContext(context));\n+}\n+\n+ChainstateManager& EnsureChainman(const NodeContext& node)\n+{\n+    if (!node.chainman) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node chainman not found\");\n+    }\n+    return *node.chainman;\n+}\n+\n+ChainstateManager& EnsureAnyChainman(const std::any& context)\n+{\n+    return EnsureChainman(EnsureAnyNodeContext(context));\n+}\n+\n+CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node)\n+{\n+    if (!node.fee_estimator) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Fee estimation disabled\");\n+    }\n+    return *node.fee_estimator;\n+}\n+\n+CBlockPolicyEstimator& EnsureAnyFeeEstimator(const std::any& context)\n+{\n+    return EnsureFeeEstimator(EnsureAnyNodeContext(context));\n+}\n+\n+CConnman& EnsureConnman(const NodeContext& node)\n+{\n+    if (!node.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+    return *node.connman;\n+}\n+\n+PeerManager& EnsurePeerman(const NodeContext& node)\n+{\n+    if (!node.peerman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+    return *node.peerman;\n+}"
      },
      {
        "sha": "dd8e8a60424193cca10df6ff232ac138960c857a",
        "filename": "src/rpc/server_util.h",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/server_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0/src/rpc/server_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server_util.h?ref=4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
        "patch": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_SERVER_UTIL_H\n+#define BITCOIN_RPC_SERVER_UTIL_H\n+\n+#include <any>\n+\n+class CBlockPolicyEstimator;\n+class CConnman;\n+class ChainstateManager;\n+class CTxMemPool;\n+struct NodeContext;\n+class PeerManager;\n+\n+NodeContext& EnsureAnyNodeContext(const std::any& context);\n+CTxMemPool& EnsureMemPool(const NodeContext& node);\n+CTxMemPool& EnsureAnyMemPool(const std::any& context);\n+ChainstateManager& EnsureChainman(const NodeContext& node);\n+ChainstateManager& EnsureAnyChainman(const std::any& context);\n+CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node);\n+CBlockPolicyEstimator& EnsureAnyFeeEstimator(const std::any& context);\n+CConnman& EnsureConnman(const NodeContext& node);\n+PeerManager& EnsurePeerman(const NodeContext& node);\n+\n+#endif // BITCOIN_SERVER_UTIL_H"
      }
    ]
  },
  {
    "sha": "434dbbce705ba4c4743d2a6760893bfe077cab5e",
    "node_id": "C_kwDOABII59oAKDQzNGRiYmNlNzA1YmE0YzQ3NDNkMmE2NzYwODkzYmZlMDc3Y2FiNWU",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-05-13T16:51:47Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-12-01T14:34:59Z"
      },
      "message": "rpc: getblockfrompeer\n\nCo-authored-by: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "33429f73c58f6f604eb076075847eb4551b267a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33429f73c58f6f604eb076075847eb4551b267a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/434dbbce705ba4c4743d2a6760893bfe077cab5e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmGniEEACgkQV/+b28ww\nEAl8uQ/+LKdr7p/gPVvSF4sD87L06/J6Lxg7I1F+MWI6hHHSSbw3OfPuqaa/0cBv\ncTQ3SjUKm5N4TjfTBXwOJcnSHXoPTQzANCWNdzX81dOdzIvBlGOKPCVH9uQdTm5e\nVPbI9axrWKTG+seKnWfc0WjLhjHjcrK6G4/XY3UtRxVvr5UlFhG4HPc26a0tUlL0\n0g4TnKgtUqsb9+WRJnFTOt3DHx9TZZSAyHDsFs98tlm5uVg9o8uFs8954UguHv5c\nr1eVIcOQhLGhLZ5HWTXVYLJI/XhwuR9qyndZZhd80GUw+HU5iprcg0fE+E10Qhac\n9yJB0W4OeYiwViClAsD6YDOWV0sHeFyPAoxDLuMjaXyVAlqm3OwyNY8P2uxjHrIH\nbkb8s434GKyDfXwmnS5ZUZj9pqEF2ADp+mtDDrclHppDueIuiRDZ/CReIt/19+Bv\nvYiu9AXUoUzfsz/sUzEagH2ERYZ5zQHI4qmKLW18Zy+xA6oPKHrwZKz2ibUEKcpQ\nRXPC+xCXnUtuopVKhpc73jTdRJLULCa/GfLS18tbvljQZW+tpnDdMda68lLr6xQ2\nWZOyXMPsVvZIWg5482Vuw/2Cf0GEPUA/2H1+xQRX7BEP71JEQu1TKW3c+sIekN6L\n6tbw9rscAFKNEWRJwbXH9xZRxZRhmoQ6xXmyhs0fMvEgAFluwqs=\n=ta40\n-----END PGP SIGNATURE-----",
        "payload": "tree 33429f73c58f6f604eb076075847eb4551b267a2\nparent 4ba67ce17fab80ea6d130d8e2c41001d6107cfe0\nauthor Sjors Provoost <sjors@sprovoost.nl> 1620924707 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1638369299 +0700\n\nrpc: getblockfrompeer\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434dbbce705ba4c4743d2a6760893bfe077cab5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/434dbbce705ba4c4743d2a6760893bfe077cab5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434dbbce705ba4c4743d2a6760893bfe077cab5e/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ba67ce17fab80ea6d130d8e2c41001d6107cfe0"
      }
    ],
    "stats": {
      "total": 181,
      "additions": 181,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c996b9609e48f56b4867dc878bcd2c6841fbb4b6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434dbbce705ba4c4743d2a6760893bfe077cab5e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434dbbce705ba4c4743d2a6760893bfe077cab5e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=434dbbce705ba4c4743d2a6760893bfe077cab5e",
        "patch": "@@ -312,6 +312,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Implement PeerManager */\n     void StartScheduledTasks(CScheduler& scheduler) override;\n     void CheckForStaleTipAndEvictPeers() override;\n+    bool FetchBlock(NodeId id, const uint256& hash, const CBlockIndex& index) override;\n     bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) const override;\n     bool IgnoresIncomingTxs() override { return m_ignore_incoming_txs; }\n     void SendPings() override;\n@@ -1426,6 +1427,41 @@ bool PeerManagerImpl::BlockRequestAllowed(const CBlockIndex* pindex)\n            (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, m_chainparams.GetConsensus()) < STALE_RELAY_AGE_LIMIT);\n }\n \n+bool PeerManagerImpl::FetchBlock(NodeId id, const uint256& hash, const CBlockIndex& index)\n+{\n+    if (fImporting || fReindex) return false;\n+\n+    LOCK(cs_main);\n+    // Ensure this peer exists and hasn't been disconnected\n+    CNodeState* state = State(id);\n+    if (state == nullptr) return false;\n+    // Ignore pre-segwit peers\n+    if (!state->fHaveWitness) return false;\n+\n+    // Mark block as in-flight unless it already is\n+    if (!BlockRequested(id, index)) return false;\n+\n+    // Construct message to request the block\n+    std::vector<CInv> invs{CInv(MSG_BLOCK | MSG_WITNESS_FLAG, hash)};\n+\n+    // Send block request message to the peer\n+    bool success = m_connman.ForNode(id, [this, &invs](CNode* node) {\n+        const CNetMsgMaker msgMaker(node->GetCommonVersion());\n+        this->m_connman.PushMessage(node, msgMaker.Make(NetMsgType::GETDATA, invs));\n+        return true;\n+    });\n+\n+    if (success) {\n+        LogPrint(BCLog::NET, \"Requesting block %s from peer=%d\\n\",\n+                 hash.ToString(), id);\n+    } else {\n+        RemoveBlockRequest(hash);\n+        LogPrint(BCLog::NET, \"Failed to request block %s from peer=%d\\n\",\n+                 hash.ToString(), id);\n+    }\n+    return success;\n+}\n+\n std::unique_ptr<PeerManager> PeerManager::make(const CChainParams& chainparams, CConnman& connman, AddrMan& addrman,\n                                                BanMan* banman, ChainstateManager& chainman,\n                                                CTxMemPool& pool, bool ignore_incoming_txs)"
      },
      {
        "sha": "6c18e8ddfa2687ec4ef9d009bb856b7b9a6e9521",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434dbbce705ba4c4743d2a6760893bfe077cab5e/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434dbbce705ba4c4743d2a6760893bfe077cab5e/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=434dbbce705ba4c4743d2a6760893bfe077cab5e",
        "patch": "@@ -42,6 +42,16 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n                                              CTxMemPool& pool, bool ignore_incoming_txs);\n     virtual ~PeerManager() { }\n \n+    /**\n+     * Attempt to manually fetch block from a given peer. We must already have the header.\n+     *\n+     * @param[in]  id       The peer id\n+     * @param[in]  hash     The block hash\n+     * @param[in]  pindex   The blockindex\n+     * @returns             Whether a request was successfully made\n+     */\n+    virtual bool FetchBlock(NodeId id, const uint256& hash, const CBlockIndex& pindex) = 0;\n+\n     /** Begin running background tasks, should only be called once */\n     virtual void StartScheduledTasks(CScheduler& scheduler) = 0;\n "
      },
      {
        "sha": "0b073a6fa72a849dd52a86df887a05e056d166c6",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434dbbce705ba4c4743d2a6760893bfe077cab5e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434dbbce705ba4c4743d2a6760893bfe077cab5e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=434dbbce705ba4c4743d2a6760893bfe077cab5e",
        "patch": "@@ -18,6 +18,8 @@\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <index/coinstatsindex.h>\n+#include <net.h>\n+#include <net_processing.h>\n #include <node/blockstorage.h>\n #include <node/coinstats.h>\n #include <node/context.h>\n@@ -748,6 +750,58 @@ static RPCHelpMan getmempoolentry()\n     };\n }\n \n+static RPCHelpMan getblockfrompeer()\n+{\n+    return RPCHelpMan{\"getblockfrompeer\",\n+                \"\\nAttempt to fetch block from a given peer.\\n\"\n+                \"\\nWe must have the header for this block, e.g. using submitheader.\\n\"\n+                \"\\nReturns {} if a block-request was successfully scheduled\\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n+                    {\"nodeid\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The node ID (see getpeerinfo for node IDs)\"},\n+                },\n+                RPCResult{RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::STR, \"warnings\", \"any warnings\"}\n+                }},\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockfrompeer\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\" 0\")\n+                + HelpExampleRpc(\"getblockfrompeer\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\" 0\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    PeerManager& peerman = EnsurePeerman(node);\n+    CConnman& connman = EnsureConnman(node);\n+\n+    uint256 hash(ParseHashV(request.params[0], \"hash\"));\n+\n+    const NodeId nodeid = static_cast<NodeId>(request.params[1].get_int64());\n+\n+    // Check that the peer with nodeid exists\n+    if (!connman.ForNode(nodeid, [](CNode* node) {return true;})) {\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"Peer nodeid %d does not exist\", nodeid));\n+    }\n+\n+    const CBlockIndex* const index = WITH_LOCK(cs_main, return chainman.m_blockman.LookupBlockIndex(hash););\n+\n+    if (!index) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Block header missing\");\n+    }\n+\n+    UniValue result = UniValue::VOBJ;\n+\n+    if (index->nStatus & BLOCK_HAVE_DATA) {\n+        result.pushKV(\"warnings\", \"Block already downloaded\");\n+    } else if (!peerman.FetchBlock(nodeid, hash, *index)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Failed to fetch block from peer\");\n+    }\n+    return result;\n+},\n+    };\n+}\n+\n static RPCHelpMan getblockhash()\n {\n     return RPCHelpMan{\"getblockhash\",\n@@ -2586,6 +2640,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         &getbestblockhash,                   },\n     { \"blockchain\",         &getblockcount,                      },\n     { \"blockchain\",         &getblock,                           },\n+    { \"blockchain\",         &getblockfrompeer,                   },\n     { \"blockchain\",         &getblockhash,                       },\n     { \"blockchain\",         &getblockheader,                     },\n     { \"blockchain\",         &getchaintips,                       },"
      },
      {
        "sha": "0eb0de8b1ba888175dd742faef7c30a64a92651c",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434dbbce705ba4c4743d2a6760893bfe077cab5e/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434dbbce705ba4c4743d2a6760893bfe077cab5e/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=434dbbce705ba4c4743d2a6760893bfe077cab5e",
        "patch": "@@ -56,6 +56,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getbalance\", 1, \"minconf\" },\n     { \"getbalance\", 2, \"include_watchonly\" },\n     { \"getbalance\", 3, \"avoid_reuse\" },\n+    { \"getblockfrompeer\", 1, \"nodeid\" },\n     { \"getblockhash\", 0, \"height\" },\n     { \"waitforblockheight\", 0, \"height\" },\n     { \"waitforblockheight\", 1, \"timeout\" },"
      },
      {
        "sha": "60b28911f2ad97558836dca3c5678b3a28589405",
        "filename": "src/test/fuzz/rpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434dbbce705ba4c4743d2a6760893bfe077cab5e/src/test/fuzz/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434dbbce705ba4c4743d2a6760893bfe077cab5e/src/test/fuzz/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rpc.cpp?ref=434dbbce705ba4c4743d2a6760893bfe077cab5e",
        "patch": "@@ -110,6 +110,7 @@ const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n     \"getblockfilter\",\n     \"getblockhash\",\n     \"getblockheader\",\n+    \"getblockfrompeer\", // when no peers are connected, no p2p message is sent\n     \"getblockstats\",\n     \"getblocktemplate\",\n     \"getchaintips\","
      },
      {
        "sha": "77b4dbfa5b9ddea3211404508d2044f9ea57513b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434dbbce705ba4c4743d2a6760893bfe077cab5e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434dbbce705ba4c4743d2a6760893bfe077cab5e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=434dbbce705ba4c4743d2a6760893bfe077cab5e",
        "patch": "@@ -3344,6 +3344,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     // This requires some new chain data structure to efficiently look up if a\n     // block is in a chain leading to a candidate for best tip, despite not\n     // being such a candidate itself.\n+    // Note that this would break the getblockfrompeer RPC\n \n     // TODO: deal better with return value and error conditions for duplicate\n     // and unrequested blocks."
      },
      {
        "sha": "a5d02cbbf2aa48050da10c5d597fdd53483cf49c",
        "filename": "test/functional/rpc_getblockfrompeer.py",
        "status": "added",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434dbbce705ba4c4743d2a6760893bfe077cab5e/test/functional/rpc_getblockfrompeer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434dbbce705ba4c4743d2a6760893bfe077cab5e/test/functional/rpc_getblockfrompeer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockfrompeer.py?ref=434dbbce705ba4c4743d2a6760893bfe077cab5e",
        "patch": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the getblockfrompeer RPC.\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+class GetBlockFromPeerTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def check_for_block(self, hash):\n+        try:\n+            self.nodes[0].getblock(hash)\n+            return True\n+        except JSONRPCException:\n+            return False\n+\n+    def run_test(self):\n+        self.log.info(\"Mine 4 blocks on Node 0\")\n+        self.nodes[0].generate(4)\n+        assert_equal(self.nodes[0].getblockcount(), 204)\n+\n+        self.log.info(\"Mine competing 3 blocks on Node 1\")\n+        self.nodes[1].generate(3)\n+        assert_equal(self.nodes[1].getblockcount(), 203)\n+        short_tip = self.nodes[1].getbestblockhash()\n+\n+        self.log.info(\"Connect nodes to sync headers\")\n+        self.connect_nodes(0, 1)\n+        self.sync_blocks()\n+\n+        self.log.info(\"Node 0 should only have the header for node 1's block 3\")\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == short_tip:\n+                assert_equal(x['status'], \"headers-only\")\n+                break\n+        else:\n+            raise AssertionError(\"short tip not synced\")\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, short_tip)\n+\n+        self.log.info(\"Fetch block from node 1\")\n+        peers = self.nodes[0].getpeerinfo()\n+        assert_equal(len(peers), 1)\n+        peer_0_peer_1_id = peers[0][\"id\"]\n+\n+        self.log.info(\"Arguments must be sensible\")\n+        assert_raises_rpc_error(-8, \"hash must be of length 64 (not 4, for '1234')\", self.nodes[0].getblockfrompeer, \"1234\", 0)\n+\n+        self.log.info(\"We must already have the header\")\n+        assert_raises_rpc_error(-1, \"Block header missing\", self.nodes[0].getblockfrompeer, \"00\" * 32, 0)\n+\n+        self.log.info(\"Non-existent peer generates error\")\n+        assert_raises_rpc_error(-1, f\"Peer nodeid {peer_0_peer_1_id + 1} does not exist\", self.nodes[0].getblockfrompeer, short_tip, peer_0_peer_1_id + 1)\n+\n+        self.log.info(\"Successful fetch\")\n+        result = self.nodes[0].getblockfrompeer(short_tip, peer_0_peer_1_id)\n+        self.wait_until(lambda: self.check_for_block(short_tip), timeout=1)\n+        assert(not \"warnings\" in result)\n+\n+        self.log.info(\"Don't fetch blocks we already have\")\n+        result = self.nodes[0].getblockfrompeer(short_tip, peer_0_peer_1_id)\n+        assert(\"warnings\" in result)\n+        assert_equal(result[\"warnings\"], \"Block already downloaded\")\n+\n+if __name__ == '__main__':\n+    GetBlockFromPeerTest().main()"
      },
      {
        "sha": "87f5586dcb92bf82cf0e13491097c110f516e363",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434dbbce705ba4c4743d2a6760893bfe077cab5e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434dbbce705ba4c4743d2a6760893bfe077cab5e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=434dbbce705ba4c4743d2a6760893bfe077cab5e",
        "patch": "@@ -213,6 +213,7 @@\n     'wallet_txn_clone.py --mineblock',\n     'feature_notifications.py',\n     'rpc_getblockfilter.py',\n+    'rpc_getblockfrompeer.py',\n     'rpc_invalidateblock.py',\n     'feature_utxo_set_hash.py',\n     'feature_rbf.py',"
      }
    ]
  }
]