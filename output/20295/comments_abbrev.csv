DrahtBot,2020-11-03 17:47:09,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23599](https://github.com/bitcoin/bitcoin/pull/23599) (Tidy up RPCTxSerializationFlags by MarcoFalke)\n* [#23497](https:",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-721281373,721281373,
Fi3,2020-11-06 18:20:08,"@Sjors Please note that I'm very new to C++ and I'm here only to learn.\n\nConcept AKN, IMO can also be useful if the user need info about a pruned block.\n\nNot sure if `getblockfrompeer` should persist the block, maybe just print it. For consistency the interface of `getblock` (verbosity 0, 1, 2) could be reused.\nMaybe `getblockfrompeer` could just be a flag of `getblock`.\n\nAlso, IMO `",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-723228594,723228594,
Sjors,2020-11-11 11:06:48,"@Fi3 being able to (temporarily) retrieve pruned blocks is useful too indeed.\n\nIt can be difficult to find nodes that still have a stale block, so I'd rather hold on to it. That also allows inspection using the regular methods, `getblock`, `getchaintips` and `getrawtransaction` (e.g. to learn about a specific doublespend). Pruned nodes will toss it automatically after a while (IIUC).\n\nI al",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-725359736,725359736,
BitMEXResearch,2020-11-11 13:59:42,"Concept ACK\n\nThis would be useful for https://forkmonitor.info/ to assess the validity of shorter chains\n\n",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-725438758,725438758,
benthecarman,2020-11-12 00:30:20,"Concept ACK\n\nThis would be very useful for testing",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-725742916,725742916,
Fi3,2020-11-13 12:37:46,"@Sjors \n\n> It can be difficult to find nodes that still have a stale block, so I'd rather hold on to it. \n\nI agree, didn't consider it.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-726741734,726741734,
luke-jr,2020-11-13 18:09:54,"Concept -1\n\nI think it would be better to just do the right thing if you `getblock` a block you don't have... Don't make users figure out which peer has it...?",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-726929962,726929962,
Sjors,2020-11-14 12:31:18,"@luke-jr my thinking was to expand it later, to try all peers: `getblockfrompeer HASH *`. Overloading `getblock` in a way that could make it unresponsive would seem controversial. Adding a `fetch_from_peer` argument to `getblock` could make sense as an alternative.\n\nIn practice none of the existing peers might have it, so you'll have to:\n* manually connect to new peers and retry; or\n* add ",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-727200935,727200935,
Sjors,2020-12-09 16:15:12,"I moved `FetchBlock` to the PeerManager while rebasing on #19910. Not sure if that's the right home for it, cc @jnewbery.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-741878271,741878271,
prusnak,2021-03-26 19:25:01,"Does this work with the pruned node too? If yes, then this implements option 2) of https://github.com/bitcoin/bitcoin/issues/19312\n",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-808460439,808460439,
Sjors,2021-03-29 09:16:04,"It does, however I'm not sure how quickly the node re-prunes it.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-809216580,809216580,
Sjors,2021-04-01 09:36:52,Rebased. No longer needs to haul the mempool around.,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-811786284,811786284,
Sjors,2021-04-21 07:59:18,Rebased after #21719,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-823861952,823861952,
Sjors,2021-04-21 08:09:37,"Linter:\n> A new circular dependency in the form of ""rpc/blockchain -> rpc/net -> rpc/blockchain"" appears to have been introduced.\n\n@MarcoFalke any thoughts on how to avoid that? I could move this new RPC method to `rpc/net`, or maybe the `EnsurePeerman` and `EnsureConnman` helpers should be in their own file?",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-823869122,823869122,
MarcoFalke,2021-04-21 09:14:08,I guess by moving the `Ensure*` helpers to `rpc/util` (or a new module)?,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-823910779,823910779,
jnewbery,2021-04-21 10:54:58,"> I moved FetchBlock to the PeerManager while rebasing on #19910. Not sure if that's the right home for it, cc @jnewbery.\n\nIt's exactly the right place for it. `PeerManager` is the node's interface to net_processing.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-823970129,823970129,
Sjors,2021-04-21 15:18:32,Thanks for the feedback! I moved the Ensure* helpers to `util.h` and addressed the above comments.,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-824145867,824145867,
Sjors,2021-04-21 19:38:00,I added `server_util.cpp`. This seems to make the linker happy.,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-824307731,824307731,
Sjors,2021-04-22 07:14:01,Comments addressed.,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-824600917,824600917,
jnewbery,2021-04-22 08:04:55,"The includes could be improved to include what's needed and not include what's not needed:\n\n```diff\ndiff --git a/src/rpc/server_util.cpp b/src/rpc/server_util.cpp\nindex dfe07f5c3d..046a630b51 100644\n--- a/src/rpc/server_util.cpp\n+++ b/src/rpc/server_util.cpp\n@@ -2,12 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opens",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-824632537,824632537,
Sjors,2021-04-22 08:23:24,Also done.,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-824644479,824644479,
prayank23,2021-05-13 01:41:02,"> I think it would be better to just do the right thing if you `getblock` a block you don't have... Don't make users figure out which peer has it...?\n\nI agree with @luke-jr \n\nOr this RPC can make sense if all peers would reject such request by _default_ but if someone is okay with it, can save something like `allowgetblockfrompeer=1` in bitcoin.conf",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-840223499,840223499,
Sjors,2021-05-13 11:02:15,"It's not that simple. Do we fetch the block from all peers at once? That's a huge bandwidth waste if you have 100 connection. Do we ask them one by one in sequence? What's the timeout? Do we do in parallel? Hence my suggestion to leave that to a followup.\n\n> `allowgetblockfrompeer=1`\n\nPeers will have no idea someone used this RPC call so that's not a concern. Nodes request blocks from each",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-840484248,840484248,
Sjors,2021-05-13 13:56:32,"Rebased, dropped requirement for local node to have the header, dropped redundant `GetPeerRef`, dropped requirement for other node to be at the right height.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-840578711,840578711,
sipa,2021-05-13 16:53:15,"Is it really necessary to make this specify which peer? It doesn't sound too hard to make the existing block fetching logic support extra requested blocks, I think.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-840691118,840691118,
Sjors,2021-05-13 17:00:10,"@sipa the current block fetching logic is buried deep inside net_processing. A `MSG_BLOCK` is generated when processing received headers:\n\nhttps://github.com/bitcoin/bitcoin/blob/4741aec1dd28829f45abcc529cddaa0ff04d07a0/src/net_processing.cpp#L2011-L2021\n\nOr when receiving a block:\nhttps://github.com/bitcoin/bitcoin/blob/4741aec1dd28829f45abcc529cddaa0ff04d07a0/src/net_processing.cpp#L17",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-840695083,840695083,
sipa,2021-05-13 17:01:29,"@Sjors Sure, but that doesn't sound too hard to add. And doing it that way sounds a lot more useful.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-840695885,840695885,
Sjors,2021-05-13 17:13:14,"In practice I'm already able to use this PR to fetch stale blocks by simply looping over my peers and ""spamming"" them all. I then disconnect if the block doesn't show up, connect to random new peers and then try again. But those are behaviors we probably shouldn't implement here.\n\nSo although the current incarnation is not ideal, it's already useful. A revamp of `ProcessHeadersMessage` with a ",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-840702994,840702994,
sipa,2021-05-13 17:30:06,"Yes, I imagine it'd use the ""background' fetching logic in SendMessages, not the direct fetch in response to an announcement one.\n\nWhy would it need different timeout, or why would most blocks not have it? We know which peers are pruned.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-840712874,840712874,
Sjors,2021-05-13 18:13:46,"@sipa we don't fetch a block if we already have (a valid) one for that height. So if you're trying retrieve the losing block from a race, most likely your peers also saw it later and didn't fetch it.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-840738472,840738472,
sipa,2021-05-13 18:45:43,"Oh, I see. I missed that fetching non-main-chain blocks was a goal here.\n\nWhy would you want that?",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-840756999,840756999,
Sjors,2021-05-13 18:48:30,"That's indeed the main reason I wrote this, though I can see how it's useful for redownloading pruned blocks too.\n\nI'm using this for ForkMonitor to fetch stale blocks and compare the transactions, to see if there was a double-spend: https://forkmonitor.info/stale/btc/679823 (we haven't found a proper one in the past few months)",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-840759391,840759391,
MarcoFalke,2021-06-03 07:11:51,"Error: RPC command ""getblockfrompeer"" not found in RPC_COMMANDS_SAFE_FOR_FUZZING or RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update test/fuzz/rpc.cpp.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-853632954,853632954,
Sjors,2021-06-03 17:02:51,Rebased and marked safe for fuzzing (but I haven't tried that).,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-854032885,854032885,
jnewbery,2021-06-04 12:35:12,ACK 1df0fd9aceaeaf8b45cb0474ce44135418c7d5b7,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-854675957,854675957,
Sjors,2021-06-10 15:40:39,"Rebased due to silent merge conflict with #22141, which I randomly caught while looking at IRC notifications :-) But it's a welcome simplification.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-858730120,858730120,
Sjors,2021-06-13 16:32:55,"Rebased after some `Ensure*` methods were renamed in #21391.\n\nIn addition since #22221, `BlockRequested` no longer takes a pointer. Which means we can't call it for blocks for which we don't have a header. Paging @MarcoFalke to check if that was indeed the intention.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-860238151,860238151,
MarcoFalke,2021-07-29 08:04:32,See also #10794 ,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-888895395,888895395,
Sjors,2021-07-29 15:31:15,"@MarcoFalke specifically its `requestblock` RPC? There's been too much refactoring to simply cherry-pick it, but it could contain inspiration for improvement.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-889244846,889244846,
MarcoFalke,2021-07-29 16:21:54,"Yes, just left the comment to remind myself that this has been worked on in the past already. No need to change anything here, but if someone wants to read some related threads, it might be helpful.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-889285858,889285858,
mzumsande,2021-08-11 22:27:02,"> What do you think about restricting this RPC to where the node already has the header, by returning in `getblockfrompeer()` if `LookupBlockIndex()` fails?\n\nI agree that this would make sense. My understanding is that if we'd request a block for which we don't  have the header and which has less work than our tip, then `getblockfrompeer` would currently signal success, we might also get the b",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-897202731,897202731,
Sjors,2021-08-12 12:56:43,"Yesterdays PR Review Club covered this PR, thanks everyone! https://bitcoincore.reviews/20295\n\nRebased and addressed feedback.\n\n@jnewbery in the use case I have in mind the node already has the header. We could always add a `getheaderfrompeer` RPC method if anyone needs it, though that seems a bit tedious to use. Alternative we can later expand `getblockfrompeer` to be smart about fetching",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-897616547,897616547,
Sjors,2021-08-16 13:51:39,"I reverted back to returning an empty object as per the [developer notes](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#rpc-interface-guidelines) ""Try to make the RPC response a JSON object"".\n\nAlso made `FetchBlock` take `CBlockIndex` as a reference rather than a pointer, since it's now mandatory.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-899528289,899528289,
jnewbery,2021-08-16 13:55:40,reACK 29263ae14a81d4cc55de61f51db981edf54399d0,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-899531341,899531341,
laanwj,2021-08-16 14:01:26,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-899535444,899535444,
Sjors,2021-09-16 10:14:38,"Thanks for the thorough testing @0xB10C.\n\nRegarding (3) and (6): if a peer doesn't give us the block, there's nothing we can do. Since the call is not asynchronous, we can't give the user much useful feedback either. Changing p2p behavior for peers to give us a block before it's evaluated, or one it considers invalid, is beyond the scope of this PR.\n\n> Requesting an unavailable block from ",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-920772012,920772012,
Sjors,2021-09-29 08:22:10,Rebased after #22650 (trivial conflict with first commit).,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-929951709,929951709,
jnewbery,2021-09-30 08:54:56,reACK 4096e6fb013aa3fbe3463d24b70310ad8517da5f,https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-931074173,931074173,
Sjors,2021-10-07 08:54:20,"Rebased once more (dd8f7f250095e58bbf4cd4effb481b52143bd1ed touched `PeerManager::make` directly under the new `FetchBlock`, though I'm disappointed Git couldn't figure that out).",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-937590001,937590001,
jnewbery,2021-10-07 09:34:21,"trivial reACK 9181e2e217\n\nConfirmed with `git rangediff` that the only conflict was for touching lines.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-937621235,937621235,
prusnak,2021-10-19 14:42:39,"I'd love to see this merged in. 👍 \n",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-946796031,946796031,
jamesob,2021-11-17 20:26:07,"Concept ACK, will review in the next few days.",https://github.com/bitcoin/bitcoin/pull/20295#issuecomment-971961777,971961777,
jnewbery,2021-04-21 10:24:40,"No need to make the pass-by-value `NodeId nodeid` const.\n\nStyle guide is to use snake_case and not hungarian notation for parameter names:\n\n```suggestion\n    bool FetchBlock(const NodeId id, const CBlockIndex* index) override;\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617408180,617408180,src/net_processing.cpp
jnewbery,2021-04-21 10:27:29,"I don't think this `EXCLUSIVE_LOCKS_REQUIRED(cs_main)` is doing anything. This function is being called without `cs_main` (by `getblockfrompeer()`).\n\nI think it's better to remove this annotation and lock `cs_main` within this function.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617411027,617411027,src/net_processing.cpp
jnewbery,2021-04-21 10:29:27,"Move this down to where it's first used, and make const:\n\n```suggestion\n    const uint32_t nFetchFlags = state->fHaveWitness ? MSG_WITNESS_FLAG : 0;\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617412992,617412992,src/net_processing.cpp
jnewbery,2021-04-21 10:42:56,"Use initializer list ctor:\n\n```suggestion\n    std::vector<CInv> vInv{CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash())};\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617422387,617422387,src/net_processing.cpp
jnewbery,2021-04-21 10:43:22,Perhaps return false if we're importing or reindexing (since the received `block` message will be ignored),https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617422621,617422621,src/net_processing.cpp
jnewbery,2021-04-21 10:45:21,Perhaps just return false if the peer doesn't have `MSG_WITNESS_FLAG`. It's 2021. Receiving a block without witnesses isn't going to be useful.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617423719,617423719,src/net_processing.cpp
jnewbery,2021-04-21 10:47:36,"Perhaps move this above the `ForNode()` call and don't send the `getdata` if it returns false, since that indicates that the block is already in flight. We don't want a faulty RPC client causing us to spam a peer with multiple requests for the same block.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617425121,617425121,src/net_processing.cpp
jnewbery,2021-04-21 10:48:11,Maybe add a log if the message is sent.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617425468,617425468,src/net_processing.cpp
jnewbery,2021-04-21 10:48:46,"style guide:\n\n```suggestion\n    std::vector<CInv> invs(1);\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617425832,617425832,src/net_processing.cpp
jnewbery,2021-04-21 10:49:20,Don't use the global chainman - use `EnsureChainman()`,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617426187,617426187,src/rpc/blockchain.cpp
jnewbery,2021-04-21 10:50:05,Move these to the top of the function - if these assumptions fail we should throw immediately instead of taking cs_main and looking up the block.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617426660,617426660,src/rpc/blockchain.cpp
jnewbery,2021-04-21 10:51:38,"```suggestion\n    const CBlockIndex* const pblockindex = WITH_LOCK(cs_main, return g_chainman.m_blockman.LookupBlockIndex(hash););\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617427542,617427542,src/rpc/blockchain.cpp
jnewbery,2021-04-21 10:52:17,Return an empty object in case we want to extend the API in the future.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617427934,617427934,src/rpc/blockchain.cpp
jnewbery,2021-04-21 10:52:34,"Imperative mood:\n\n```suggestion\n                ""\nAttempt to fetch block from a given peer.\n"",\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617428096,617428096,src/rpc/blockchain.cpp
Sjors,2021-04-21 14:49:56,"I followed your suggestion below to just ignore pre-segwit nodes, so no need to have `nFetchFlags` around...",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617620994,617620994,src/net_processing.cpp
Sjors,2021-04-21 15:19:02,Not sure if I got this right now...,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617647027,617647027,src/net_processing.cpp
jnewbery,2021-04-21 15:52:52,"Prefer a named cast to c-style casts (https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es49-if-you-must-use-a-cast-use-a-named-cast)\n\n```suggestion\n    const NodeId nodeid = static_cast<NodeId>(id_arg.get_int64());\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617676009,617676009,src/rpc/blockchain.cpp
jnewbery,2021-04-21 15:54:36,"This ordering seems weird to me (read param 1, then state assumptions, then read param 0). I'd suggest:\n\n```suggestion\n    const NodeContext& node = EnsureAnyNodeContext(request.context);\n    ChainstateManager& chainman = EnsureChainman(node);\n    PeerManager& peerman = EnsurePeerman(node);\n\n    uint256 hash(ParseHashV(request.params[0], ""hash""));\n\n    const UniValue &id_arg = re",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617677445,617677445,src/rpc/blockchain.cpp
jnewbery,2021-04-21 16:03:31,"Perhaps join these two lines. No point in having a `id_arg` var that just gets used once and thrown away:\n\n```suggestion\n    const NodeId nodeid = static_cast<NodeId>(request.params[1].get_int64());\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617684847,617684847,src/rpc/blockchain.cpp
jnewbery,2021-04-21 19:10:36,"This causes a link failure for libbitcoin_common.\n\nPerhaps move these `Ensure*` functions to a new `src/rpc/server_util.cpp` which is part of libbitcoin_server. `src/rpc/util` is for utility functions that are shared between server and client.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617809637,617809637,src/rpc/util.cpp
Sjors,2021-04-21 19:16:03,"I see. For some reason macOS is totally happy with it, but on Linux I can see it blow up.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617812676,617812676,src/rpc/util.cpp
prusnak,2021-04-21 20:02:50,"use spaces, not tab",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617840061,617840061,src/Makefile.am
prusnak,2021-04-21 20:02:57,"use spaces, not tab",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617840149,617840149,src/Makefile.am
prusnak,2021-04-21 20:03:09,"use spaces, not tab",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r617840256,617840256,src/Makefile.am
MarcoFalke,2021-04-22 06:18:33,Can remove this comment? The code is already self-documenting and one can see that all helpers in this section start with `Ensure`.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618109487,618109487,src/rpc/server_util.h
jnewbery,2021-04-22 10:35:23,"If you're taking a pointer, you should check that it's non-null before dereferencing it. Even better, pass by reference to communicate that this *must* be called with a valid `CBlockIndex`:\n\n<details>\n<summary>Diff</summary>\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex a822960dc2..f552aa36b5 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processi",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618283846,618283846,src/net_processing.cpp
jnewbery,2021-04-22 10:36:57,Consider adding some line breaks to this function to split up the units of logic. It's a bit of a wall of text right now.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618284866,618284866,src/net_processing.cpp
Sjors,2021-04-22 12:42:12,I added some line breaks and prose.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618364702,618364702,src/net_processing.cpp
jnewbery,2021-04-22 14:17:16,`peer` isn't used. You can remove it.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618443929,618443929,src/net_processing.cpp
jnewbery,2021-04-22 14:18:33,"Why not match the logic in `ProcessMessage()` when receiving a block:\n\n```suggestion\n    if (fImporting || fReindex) return false;\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618445093,618445093,src/net_processing.cpp
jnewbery,2021-04-22 14:26:16,"Remove `const` from the pass-by-value argument:\n\n```suggestion\n    virtual bool FetchBlock(NodeId nodeid, const CBlockIndex& pindex) = 0;\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618452192,618452192,src/net_processing.h
jnewbery,2021-04-22 14:39:42,"Prefer to capture `invs` by reference than making a copy:\n\n```suggestion\n    bool success = m_connman.ForNode(id, [this, &invs](CNode* pnode) {\n```\n\nAlso maybe rename pnode to node if you're touching this part again.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618464212,618464212,src/net_processing.cpp
jnewbery,2021-04-22 14:40:26,"Import standard library modules first, then local modules.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618464833,618464833,test/functional/rpc_getblockfrompeer.py
jnewbery,2021-04-22 14:41:40,"```suggestion\n        self.nodes[0].generate(4)\n```\n\nSame below.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618465902,618465902,test/functional/rpc_getblockfrompeer.py
jnewbery,2021-04-22 14:44:21,"```suggestion\n        self.sync_blocks()\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618468253,618468253,test/functional/rpc_getblockfrompeer.py
jnewbery,2021-04-22 14:46:07,Perhaps poll with `wait_until` rather than a sleep (sleep will take needlessly long on a fast system and may time out on a slow system).,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618469828,618469828,test/functional/rpc_getblockfrompeer.py
jnewbery,2021-04-22 14:47:07,"```suggestion\n                 index.GetBlockHash().ToString(), id);\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618470758,618470758,src/net_processing.cpp
jnewbery,2021-04-22 14:47:14,"```suggestion\n                 index.GetBlockHash().ToString(), id);\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618470858,618470858,src/net_processing.cpp
Sjors,2021-04-22 18:37:53,I think I copied this one from another method. But fewer negations make sense.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618649847,618649847,src/net_processing.cpp
Sjors,2021-04-22 18:42:39,This is the only place where we check that this peer actually exists (i.e. wasn't disconnected). I'll add a comment.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618652918,618652918,src/net_processing.cpp
Sjors,2021-04-22 19:09:31,"Done, though it's rather involved afaik there's no one-liner to say ""True if x doesn't throw""",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r618670004,618670004,test/functional/rpc_getblockfrompeer.py
jnewbery,2021-05-13 12:54:44,sort,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r631787712,631787712,test/functional/rpc_getblockfrompeer.py
jnewbery,2021-05-13 13:09:11,Perhaps document that this node must already have the block header in order to fetch the block (or relax that requirement?),https://github.com/bitcoin/bitcoin/pull/20295#discussion_r631796608,631796608,src/rpc/blockchain.cpp
jnewbery,2021-05-13 13:10:47,Change looks good. Thanks!,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r631797759,631797759,test/functional/rpc_getblockfrompeer.py
jnewbery,2021-05-13 13:14:02,"Actually, you check below that a `CNodeState` exists, which can only happen if the peer isn't disconnected, which makes this check redundant.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r631799792,631799792,src/net_processing.cpp
Sjors,2021-05-13 13:39:57,"By ""this node"" you mean the node itself? What happens when you fetch a block that you don't have the header for?",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r631817337,631817337,src/rpc/blockchain.cpp
Sjors,2021-05-13 13:44:58,"I see `MarkBlockAsInFlight` can handle a `nullprtr` index. It might indeed be simpler to drop this requirement, as well as the `index.nHeight > node_sync_height` check.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r631820873,631820873,src/rpc/blockchain.cpp
Sjors,2021-05-13 13:52:33,"Ok, I'll remove it then.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r631826325,631826325,src/net_processing.cpp
jnewbery,2021-05-13 14:19:07,"Sorry, yes I meant ""we"" as ""this node"" (the node that you're running this command on)",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r631845232,631845232,src/rpc/blockchain.cpp
jnewbery,2021-05-13 14:26:31,"Consider passing `uint256` by const reference (to avoid unnecessary copying, generally only basic types should be passed by value).",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r631850675,631850675,src/net_processing.cpp
jnewbery,2021-05-13 14:28:35,Maybe document that `index` may be null here?,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r631852281,631852281,src/net_processing.cpp
Sjors,2021-05-13 16:52:40,Added function documentation.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r631955833,631955833,src/net_processing.cpp
jnewbery,2021-08-11 15:25:28,"```suggestion\n    const CBlockIndex* const index = WITH_LOCK(cs_main, return chainman.m_blockman.LookupBlockIndex(hash););\n```\n\n(we no longer use hungarian notation to show what type the variable is)",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r686938856,686938856,src/rpc/blockchain.cpp
LarryRuane,2021-08-11 16:04:35,"Why do we not return `NullUniValue` here? Returning `UniValue::VOBJ` causes `bitcoin-cli` to print empty JSON object; returning `NullUniValue` would print nothing (as many other RPCs do). Is it to make this more backward-compatible if we later make it return something, like the block?",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r686972430,686972430,src/rpc/blockchain.cpp
LarryRuane,2021-08-11 16:30:48,"```suggestion\n        for x in self.nodes[0].getchaintips():\n            if x['hash'] == short_tip:\n                assert_equal(x['status'], ""headers-only"")\n                break\n        else:\n            raise AssertionError(""short tip not synced"")\n```",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r686993091,686993091,test/functional/rpc_getblockfrompeer.py
LarryRuane,2021-08-11 16:53:02,"Suggestions for additional tests:\n```\n        self.log.info(""No error if block is not found in the index"")\n        assert_equal(self.nodes[0].getblockfrompeer(""12"" * 32, peer_0_peer_1_id), None)\n        self.log.info(""Non-existent peer generates error"")\n        assert_raises_rpc_error(-1, ""Failed to fetch block from peer"", self.nodes[0].getblockfrompeer, short_tip, peer_0_peer_1_id + 1)",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r687009270,687009270,test/functional/rpc_getblockfrompeer.py
jnewbery,2021-08-12 09:35:54,Much more pythonic :+1: ,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r687551109,687551109,test/functional/rpc_getblockfrompeer.py
Sjors,2021-08-12 12:55:17,"The first version of this PR included a `success` boolean, but that didn't make sense because we don't know if we actually get the block. So I guess I made the response an empty VOBJ. I'll switch to Null.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r687684521,687684521,src/rpc/blockchain.cpp
Sjors,2021-08-12 14:14:42,"Tastes the same to me, but changed...",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r687754011,687754011,test/functional/rpc_getblockfrompeer.py
Sjors,2021-08-12 14:16:57,"Thanks, added the second one.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r687756311,687756311,test/functional/rpc_getblockfrompeer.py
0xB10C,2021-09-15 19:55:53,nit: not sure if there is need for a `// For NodeId` comment here. I think comments like these tend to be overlooked when adding something else that needs `net.h` and thus out-dating the comment.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r709528521,709528521,src/rpc/blockchain.cpp
0xB10C,2021-09-15 19:59:28,As a user I'd expect some documentation that the RPC call returns `{}` once the block-request has been successfully scheduled and that I have to manually check if my node now has the block.  ,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r709530801,709530801,src/rpc/blockchain.cpp
0xB10C,2021-09-15 20:03:47,optional but maybe worthwile: could check if the block is already available and return true if it is. Could reduce bandwidth usage in cases where users spam/iterate their all their peers with a `getblockfrompeer`.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r709533364,709533364,src/rpc/blockchain.cpp
fanquake,2021-09-16 01:30:46,"Yea, please don't add comments like these.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r709685368,709685368,src/rpc/blockchain.cpp
Sjors,2021-09-16 09:37:06,I added a sentence to the RPC doc.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r709953863,709953863,src/rpc/blockchain.cpp
Sjors,2021-09-16 10:02:27,"The result now includes a warning if we already had the block. This seems better than throwing an error, since an RPC client might attempt fetching for multiple peers in parallel.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r709972875,709972875,src/rpc/blockchain.cpp
LarryRuane,2021-11-03 04:15:22,"nit, if you have a chance to retouch, could this be moved down to just before it's first used by the `m_connman.ForNode()` call below?",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r741610324,741610324,src/net_processing.cpp
luke-jr,2021-11-22 02:05:03,"Is it intentional that this succeeds even with an invalid nodeid?\n\nPerhaps the tests should check for the expected behaviour.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r753897686,753897686,src/rpc/blockchain.cpp
Sjors,2021-11-22 11:57:56,"It's probably a good sanity check to add. I could call `GetNodeStateStats` on the peer as a way to find out if it's valid, though that's not strictly what that PeerMan function is for. @jnewbery?",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r754202663,754202663,src/rpc/blockchain.cpp
fjahr,2021-11-27 20:19:31,"I think it would be good to add more information for pruned node users of how long the block will be around. If my understanding is correct, something like this: `Note: On a pruned node this block will be pruned again when the pruneheight surpasses the blockheight at the time of fetching the block.`",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r757816731,757816731,src/rpc/blockchain.cpp
luke-jr,2021-11-27 22:18:28,"Even that is not guaranteed at the moment (albeit very likely to hold in practice).\n\nCombined with #19463, the caller could set a prune lock to ensure it doesn't get re-pruned before the caller is done with it.",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r757818887,757818887,src/rpc/blockchain.cpp
jnewbery,2021-12-01 13:49:43,"You could use `CConnman::ForNode()` to determine whether the peer with that nodeid exists. Here's the diff (with the required changes to make the tests run on master):\n\n```diff\ndiff --git a/src/rpc/blockchain.cpp b/src/rpc/blockchain.cpp\nindex 9fc586c122..fdbfe55aaf 100644\n--- a/src/rpc/blockchain.cpp\n+++ b/src/rpc/blockchain.cpp\n@@ -780,11 +780,17 @@ static RPCHelpMan getblockfrompe",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r760200854,760200854,src/rpc/blockchain.cpp
Sjors,2021-12-01 14:29:03,I moved it down a bit.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r760236497,760236497,src/net_processing.cpp
Sjors,2021-12-01 14:29:22,"Done. I left out the `sync_fun=self.no_op` bit, as it results in: `AttributeError: 'GetBlockFromPeerTest' object has no attribute 'no_op'`",https://github.com/bitcoin/bitcoin/pull/20295#discussion_r760236809,760236809,src/rpc/blockchain.cpp
jnewbery,2021-12-01 14:42:19,This branch currently has a silent merge conflict with master. You'll need to rebase and take the `sync_fun=self.no_op` bit before merge.,https://github.com/bitcoin/bitcoin/pull/20295#discussion_r760249680,760249680,src/rpc/blockchain.cpp
