[
  {
    "sha": "fa27a459bb86cbda93ff49c9cb01c884b8003ae4",
    "node_id": "C_kwDOABII59oAKGZhMjdhNDU5YmI4NmNiZGE5M2ZmNDljOWNiMDFjODg0YjgwMDNhZTQ",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-23T11:19:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-23T11:42:38Z"
      },
      "message": "Move ~BlockManager impl to cpp file\n\nThis avoids compile errors in future commits.",
      "tree": {
        "sha": "a0364342d39dc947b519f10b77bb5b5f6338a174",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0364342d39dc947b519f10b77bb5b5f6338a174"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa27a459bb86cbda93ff49c9cb01c884b8003ae4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgJVwwAwcON0gGEH7DHUiJFXCPmmV0KFfHqJb5pGqrbWKl2r4WtPAeMeycpAElz\ng0vODQ/jpN7Xj44tenttoKCdB/xOQ+Zg20cAlxQRqOpuevTmGFv9+xwJm7vFjiaL\nChmtGgLNlQJsFKC6lveoNg5LgWchvgQGNUQRtbH0ruB4M1KUdK5xmcclSpVwNzPM\nFlpea7sQ2vesa9hON9KYErqrJRiDS8EGWWqCXbdXExzSwntte/7uLaENX/Lws3Md\nWFw7aD2ZnxfSW1/fFEAM/g+6xwcOJj2iKu8hs81uAMcWt/XM50NkQfUWbQiC0Qae\nepL/ypqEP6YUiS5BrUSk3pyUqQ2PZK+VoGZ3w98dqdT/Z/QX1Z1BCe3SafD84eYk\nDH2QIpEvhQtOSdDmGJSgJHO6mcLdIFrR5NTykkjdQYg4QS/EZMHaskdcyiblqWxO\nCrd1IyuHdBImFNmtkYptapzczujRvP1sPcWtyjNy1NBcTIAC4kyUzI1HLrRzlcL4\nXJCTkM4I\n=MGvI\n-----END PGP SIGNATURE-----",
        "payload": "tree a0364342d39dc947b519f10b77bb5b5f6338a174\nparent ee7e06156357c333caef381b6acb3109d0187666\nauthor MarcoFalke <falke.marco@gmail.com> 1637666388 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1637667758 +0100\n\nMove ~BlockManager impl to cpp file\n\nThis avoids compile errors in future commits.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27a459bb86cbda93ff49c9cb01c884b8003ae4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa27a459bb86cbda93ff49c9cb01c884b8003ae4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27a459bb86cbda93ff49c9cb01c884b8003ae4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee7e06156357c333caef381b6acb3109d0187666",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee7e06156357c333caef381b6acb3109d0187666",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee7e06156357c333caef381b6acb3109d0187666"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b2ae532453154526fa2c21df82e46b7aabdffeec",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa27a459bb86cbda93ff49c9cb01c884b8003ae4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa27a459bb86cbda93ff49c9cb01c884b8003ae4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa27a459bb86cbda93ff49c9cb01c884b8003ae4",
        "patch": "@@ -3738,7 +3738,12 @@ bool BlockManager::LoadBlockIndex(\n     return true;\n }\n \n-void BlockManager::Unload() {\n+BlockManager::~BlockManager()\n+{\n+    Unload();\n+}\n+void BlockManager::Unload()\n+{\n     m_failed_blocks.clear();\n     m_blocks_unlinked.clear();\n "
      },
      {
        "sha": "3d8425a3cfe7e9e54bcbf68256b1087957cd7d3a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa27a459bb86cbda93ff49c9cb01c884b8003ae4/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa27a459bb86cbda93ff49c9cb01c884b8003ae4/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa27a459bb86cbda93ff49c9cb01c884b8003ae4",
        "patch": "@@ -486,9 +486,7 @@ class BlockManager\n      */\n     int GetSpendHeight(const CCoinsViewCache& inputs) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-    ~BlockManager() {\n-        Unload();\n-    }\n+    ~BlockManager();\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "fad86b74b56ca9edcd650d55768cd20219a34c58",
    "node_id": "C_kwDOABII59oAKGZhZDg2Yjc0YjU2Y2E5ZWRjZDY1MGQ1NTc2OGNkMjAyMTlhMzRjNTg",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-13T10:31:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-23T11:42:50Z"
      },
      "message": "move-only: Move CBlockTreeDB to node/blockstorage\n\nCan be reviewed with --color-moved=dimmed-zebra",
      "tree": {
        "sha": "d13e4e7b2db6ea7c7bc854e298aba6dee718f97d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d13e4e7b2db6ea7c7bc854e298aba6dee718f97d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad86b74b56ca9edcd650d55768cd20219a34c58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhjsgv/VwwxlfAVu+KsJQhKcr2wI3Vg5sequRwjR5LpEv3885vzd5B48C7Ip+/8\nvc0ZKZ6dRGqnW2aJ31rJL3paJEUgtx1TslCAKDXNSV441FYZvCRhAWlb/pBeythj\nz53ALndIyEVjSXVOtFOm4cq2ToXNl2jN7SlVQtkCNLOMqnkMgjL+rteh7/RQSStp\nJf0tpgPjdEuehlWGZWFi150ALOBpr70XMCIen6qcmYYXG1kPYGykXD4pXw3IT+XI\nivJdooYPeO2ryhGNGa8/Noy5IkSjgIOTBUVNNPmnGI5VHHyTSwmZ5oMK987s1AfA\nxmm+KX3DJhCKP0gbvebtSTt1mG6OaKyl83iyrNGIaTFia9SggHEmoqMhg4WEKxzC\nqIg/xflxGdkuZl7O5b8zCPdjMpl82XsBBZaWqy4WBxMRSZwU8MA1hUWtPZ2d+coZ\n5U4jAyFRQh/3sTMLR3jHnmjNnCM+KKuVTPseeDsqTm7N+abrp3ZkuGWMxZFsgNHo\nLT3AjiGV\n=1N95\n-----END PGP SIGNATURE-----",
        "payload": "tree d13e4e7b2db6ea7c7bc854e298aba6dee718f97d\nparent fa27a459bb86cbda93ff49c9cb01c884b8003ae4\nauthor MarcoFalke <falke.marco@gmail.com> 1623580319 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1637667770 +0100\n\nmove-only: Move CBlockTreeDB to node/blockstorage\n\nCan be reviewed with --color-moved=dimmed-zebra\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad86b74b56ca9edcd650d55768cd20219a34c58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad86b74b56ca9edcd650d55768cd20219a34c58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad86b74b56ca9edcd650d55768cd20219a34c58/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa27a459bb86cbda93ff49c9cb01c884b8003ae4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27a459bb86cbda93ff49c9cb01c884b8003ae4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa27a459bb86cbda93ff49c9cb01c884b8003ae4"
      }
    ],
    "stats": {
      "total": 238,
      "additions": 121,
      "deletions": 117
    },
    "files": [
      {
        "sha": "60c97b3e2a3828046cdae3c626a919a0234f0f29",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad86b74b56ca9edcd650d55768cd20219a34c58/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad86b74b56ca9edcd650d55768cd20219a34c58/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=fad86b74b56ca9edcd650d55768cd20219a34c58",
        "patch": "@@ -52,6 +52,102 @@ bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+static constexpr uint8_t DB_BLOCK_FILES{'f'};\n+static constexpr uint8_t DB_BLOCK_INDEX{'b'};\n+\n+static constexpr uint8_t DB_FLAG{'F'};\n+static constexpr uint8_t DB_REINDEX_FLAG{'R'};\n+static constexpr uint8_t DB_LAST_BLOCK{'l'};\n+\n+CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(gArgs.GetDataDirNet() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n+}\n+\n+bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n+    return Read(std::make_pair(DB_BLOCK_FILES, nFile), info);\n+}\n+\n+bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n+    if (fReindexing)\n+        return Write(DB_REINDEX_FLAG, uint8_t{'1'});\n+    else\n+        return Erase(DB_REINDEX_FLAG);\n+}\n+\n+void CBlockTreeDB::ReadReindexing(bool &fReindexing) {\n+    fReindexing = Exists(DB_REINDEX_FLAG);\n+}\n+\n+bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n+    return Read(DB_LAST_BLOCK, nFile);\n+}\n+\n+bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n+    CDBBatch batch(*this);\n+    for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n+        batch.Write(std::make_pair(DB_BLOCK_FILES, it->first), *it->second);\n+    }\n+    batch.Write(DB_LAST_BLOCK, nLastFile);\n+    for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n+        batch.Write(std::make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n+    }\n+    return WriteBatch(batch, true);\n+}\n+\n+bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n+    return Write(std::make_pair(DB_FLAG, name), fValue ? uint8_t{'1'} : uint8_t{'0'});\n+}\n+\n+bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n+    uint8_t ch;\n+    if (!Read(std::make_pair(DB_FLAG, name), ch))\n+        return false;\n+    fValue = ch == uint8_t{'1'};\n+    return true;\n+}\n+\n+bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n+{\n+    std::unique_ptr<CDBIterator> pcursor(NewIterator());\n+\n+    pcursor->Seek(std::make_pair(DB_BLOCK_INDEX, uint256()));\n+\n+    // Load m_block_index\n+    while (pcursor->Valid()) {\n+        if (ShutdownRequested()) return false;\n+        std::pair<uint8_t, uint256> key;\n+        if (pcursor->GetKey(key) && key.first == DB_BLOCK_INDEX) {\n+            CDiskBlockIndex diskindex;\n+            if (pcursor->GetValue(diskindex)) {\n+                // Construct block index object\n+                CBlockIndex* pindexNew = insertBlockIndex(diskindex.GetBlockHash());\n+                pindexNew->pprev          = insertBlockIndex(diskindex.hashPrev);\n+                pindexNew->nHeight        = diskindex.nHeight;\n+                pindexNew->nFile          = diskindex.nFile;\n+                pindexNew->nDataPos       = diskindex.nDataPos;\n+                pindexNew->nUndoPos       = diskindex.nUndoPos;\n+                pindexNew->nVersion       = diskindex.nVersion;\n+                pindexNew->hashMerkleRoot = diskindex.hashMerkleRoot;\n+                pindexNew->nTime          = diskindex.nTime;\n+                pindexNew->nBits          = diskindex.nBits;\n+                pindexNew->nNonce         = diskindex.nNonce;\n+                pindexNew->nStatus        = diskindex.nStatus;\n+                pindexNew->nTx            = diskindex.nTx;\n+\n+                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, consensusParams))\n+                    return error(\"%s: CheckProofOfWork failed: %s\", __func__, pindexNew->ToString());\n+\n+                pcursor->Next();\n+            } else {\n+                return error(\"%s: failed to read value\", __func__);\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n // If we're using -prune with -reindex, then delete block files that will be ignored by the\n // reindex.  Since reindexing works by starting at block file 0 and looping until a blockfile\n // is missing, do the same here to delete any later block files after a gap.  Also delete all"
      },
      {
        "sha": "3c390ebd40293bf260abcb57f1ba10688a2518e4",
        "filename": "src/node/blockstorage.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad86b74b56ca9edcd650d55768cd20219a34c58/src/node/blockstorage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad86b74b56ca9edcd650d55768cd20219a34c58/src/node/blockstorage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.h?ref=fad86b74b56ca9edcd650d55768cd20219a34c58",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_NODE_BLOCKSTORAGE_H\n #define BITCOIN_NODE_BLOCKSTORAGE_H\n \n+#include <dbwrapper.h>\n #include <fs.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n \n@@ -45,6 +46,22 @@ extern bool fPruneMode;\n /** Number of MiB of block files that we're trying to stay below. */\n extern uint64_t nPruneTarget;\n \n+/** Access to the block database (blocks/index/) */\n+class CBlockTreeDB : public CDBWrapper\n+{\n+public:\n+    explicit CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+\n+    bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);\n+    bool ReadBlockFileInfo(int nFile, CBlockFileInfo &info);\n+    bool ReadLastBlockFile(int &nFile);\n+    bool WriteReindexing(bool fReindexing);\n+    void ReadReindexing(bool &fReindexing);\n+    bool WriteFlag(const std::string &name, bool fValue);\n+    bool ReadFlag(const std::string &name, bool &fValue);\n+    bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n+};\n+\n //! Check whether the block associated with this index entry is pruned or not.\n bool IsBlockPruned(const CBlockIndex* pblockindex);\n "
      },
      {
        "sha": "d7a22bf4b6341bfc58f284ad7318573299573e36",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad86b74b56ca9edcd650d55768cd20219a34c58/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad86b74b56ca9edcd650d55768cd20219a34c58/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fad86b74b56ca9edcd650d55768cd20219a34c58",
        "patch": "@@ -16,6 +16,7 @@\n #include <miner.h>\n #include <net.h>\n #include <net_processing.h>\n+#include <node/blockstorage.h>\n #include <noui.h>\n #include <policy/fees.h>\n #include <pow.h>\n@@ -25,7 +26,6 @@\n #include <scheduler.h>\n #include <script/sigcache.h>\n #include <streams.h>\n-#include <txdb.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n #include <util/thread.h>"
      },
      {
        "sha": "d750358b5fa67e4860d7f2c2bb0029e2d50d162b",
        "filename": "src/test/validation_chainstate_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad86b74b56ca9edcd650d55768cd20219a34c58/src/test/validation_chainstate_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad86b74b56ca9edcd650d55768cd20219a34c58/src/test/validation_chainstate_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstate_tests.cpp?ref=fad86b74b56ca9edcd650d55768cd20219a34c58",
        "patch": "@@ -3,13 +3,14 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n #include <chainparams.h>\n-#include <random.h>\n-#include <uint256.h>\n #include <consensus/validation.h>\n-#include <sync.h>\n+#include <node/blockstorage.h>\n+#include <random.h>\n #include <rpc/blockchain.h>\n+#include <sync.h>\n #include <test/util/chainstate.h>\n #include <test/util/setup_common.h>\n+#include <uint256.h>\n #include <validation.h>\n \n #include <vector>"
      },
      {
        "sha": "0ed2db772f655736569024cae80a03720d5d5987",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad86b74b56ca9edcd650d55768cd20219a34c58/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad86b74b56ca9edcd650d55768cd20219a34c58/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=fad86b74b56ca9edcd650d55768cd20219a34c58",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n+#include <node/blockstorage.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n #include <txmempool.h>"
      },
      {
        "sha": "a1a641516dde2a82a8323368d1f304e253ee3b61",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 94,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad86b74b56ca9edcd650d55768cd20219a34c58/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad86b74b56ca9edcd650d55768cd20219a34c58/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=fad86b74b56ca9edcd650d55768cd20219a34c58",
        "patch": "@@ -6,6 +6,7 @@\n #include <txdb.h>\n \n #include <chain.h>\n+#include <node/blockstorage.h>\n #include <node/ui_interface.h>\n #include <pow.h>\n #include <random.h>\n@@ -19,14 +20,9 @@\n \n static constexpr uint8_t DB_COIN{'C'};\n static constexpr uint8_t DB_COINS{'c'};\n-static constexpr uint8_t DB_BLOCK_FILES{'f'};\n-static constexpr uint8_t DB_BLOCK_INDEX{'b'};\n \n static constexpr uint8_t DB_BEST_BLOCK{'B'};\n static constexpr uint8_t DB_HEAD_BLOCKS{'H'};\n-static constexpr uint8_t DB_FLAG{'F'};\n-static constexpr uint8_t DB_REINDEX_FLAG{'R'};\n-static constexpr uint8_t DB_LAST_BLOCK{'l'};\n \n // Keys used in previous version that might still be found in the DB:\n static constexpr uint8_t DB_TXINDEX_BLOCK{'T'};\n@@ -169,28 +165,6 @@ size_t CCoinsViewDB::EstimateSize() const\n     return m_db->EstimateSize(DB_COIN, uint8_t(DB_COIN + 1));\n }\n \n-CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(gArgs.GetDataDirNet() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n-}\n-\n-bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n-    return Read(std::make_pair(DB_BLOCK_FILES, nFile), info);\n-}\n-\n-bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n-    if (fReindexing)\n-        return Write(DB_REINDEX_FLAG, uint8_t{'1'});\n-    else\n-        return Erase(DB_REINDEX_FLAG);\n-}\n-\n-void CBlockTreeDB::ReadReindexing(bool &fReindexing) {\n-    fReindexing = Exists(DB_REINDEX_FLAG);\n-}\n-\n-bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n-    return Read(DB_LAST_BLOCK, nFile);\n-}\n-\n /** Specialization of CCoinsViewCursor to iterate over a CCoinsViewDB */\n class CCoinsViewDBCursor: public CCoinsViewCursor\n {\n@@ -270,73 +244,6 @@ void CCoinsViewDBCursor::Next()\n     }\n }\n \n-bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n-    CDBBatch batch(*this);\n-    for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n-        batch.Write(std::make_pair(DB_BLOCK_FILES, it->first), *it->second);\n-    }\n-    batch.Write(DB_LAST_BLOCK, nLastFile);\n-    for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n-        batch.Write(std::make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n-    }\n-    return WriteBatch(batch, true);\n-}\n-\n-bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n-    return Write(std::make_pair(DB_FLAG, name), fValue ? uint8_t{'1'} : uint8_t{'0'});\n-}\n-\n-bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n-    uint8_t ch;\n-    if (!Read(std::make_pair(DB_FLAG, name), ch))\n-        return false;\n-    fValue = ch == uint8_t{'1'};\n-    return true;\n-}\n-\n-bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n-{\n-    std::unique_ptr<CDBIterator> pcursor(NewIterator());\n-\n-    pcursor->Seek(std::make_pair(DB_BLOCK_INDEX, uint256()));\n-\n-    // Load m_block_index\n-    while (pcursor->Valid()) {\n-        if (ShutdownRequested()) return false;\n-        std::pair<uint8_t, uint256> key;\n-        if (pcursor->GetKey(key) && key.first == DB_BLOCK_INDEX) {\n-            CDiskBlockIndex diskindex;\n-            if (pcursor->GetValue(diskindex)) {\n-                // Construct block index object\n-                CBlockIndex* pindexNew = insertBlockIndex(diskindex.GetBlockHash());\n-                pindexNew->pprev          = insertBlockIndex(diskindex.hashPrev);\n-                pindexNew->nHeight        = diskindex.nHeight;\n-                pindexNew->nFile          = diskindex.nFile;\n-                pindexNew->nDataPos       = diskindex.nDataPos;\n-                pindexNew->nUndoPos       = diskindex.nUndoPos;\n-                pindexNew->nVersion       = diskindex.nVersion;\n-                pindexNew->hashMerkleRoot = diskindex.hashMerkleRoot;\n-                pindexNew->nTime          = diskindex.nTime;\n-                pindexNew->nBits          = diskindex.nBits;\n-                pindexNew->nNonce         = diskindex.nNonce;\n-                pindexNew->nStatus        = diskindex.nStatus;\n-                pindexNew->nTx            = diskindex.nTx;\n-\n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, consensusParams))\n-                    return error(\"%s: CheckProofOfWork failed: %s\", __func__, pindexNew->ToString());\n-\n-                pcursor->Next();\n-            } else {\n-                return error(\"%s: failed to read value\", __func__);\n-            }\n-        } else {\n-            break;\n-        }\n-    }\n-\n-    return true;\n-}\n-\n namespace {\n \n //! Legacy class to deserialize pre-pertxout database entries without reindex."
      },
      {
        "sha": "53ab9629b11be4fca136fd9a2a75a4a546edcebf",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 19,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad86b74b56ca9edcd650d55768cd20219a34c58/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad86b74b56ca9edcd650d55768cd20219a34c58/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=fad86b74b56ca9edcd650d55768cd20219a34c58",
        "patch": "@@ -15,9 +15,7 @@\n #include <utility>\n #include <vector>\n \n-class CBlockFileInfo;\n-class CBlockIndex;\n-class uint256;\n+class CBlockTreeDB;\n namespace Consensus {\n struct Params;\n };\n@@ -73,22 +71,6 @@ class CCoinsViewDB final : public CCoinsView\n     void ResizeCache(size_t new_cache_size) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n };\n \n-/** Access to the block database (blocks/index/) */\n-class CBlockTreeDB : public CDBWrapper\n-{\n-public:\n-    explicit CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n-\n-    bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);\n-    bool ReadBlockFileInfo(int nFile, CBlockFileInfo &info);\n-    bool ReadLastBlockFile(int &nFile);\n-    bool WriteReindexing(bool fReindexing);\n-    void ReadReindexing(bool &fReindexing);\n-    bool WriteFlag(const std::string &name, bool fValue);\n-    bool ReadFlag(const std::string &name, bool &fValue);\n-    bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n-};\n-\n std::optional<bilingual_str> CheckLegacyTxindex(CBlockTreeDB& block_tree_db);\n \n #endif // BITCOIN_TXDB_H"
      }
    ]
  },
  {
    "sha": "faea2f78d872b4b0ae609aa3c9dcb5584c054360",
    "node_id": "C_kwDOABII59oAKGZhZWEyZjc4ZDg3MmI0YjBhZTYwOWFhM2M5ZGNiNTU4NGMwNTQzNjA",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-13T11:04:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-23T11:42:52Z"
      },
      "message": "fixup style of moved code\n\nCan be reviewed with --ignore-all-space  --word-diff-regex=.",
      "tree": {
        "sha": "78f035c4d61a0bb9265280546174decf0aa76ad0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78f035c4d61a0bb9265280546174decf0aa76ad0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faea2f78d872b4b0ae609aa3c9dcb5584c054360",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhhrwwAqKoEEp5IAXV/m1IYBYp1jtVw3LEanqCr0WRqh98gAAF/Qz24jI4L88Yo\nL/bpjt7RO2WIcvqviZ4jtPem0MHiW8nmDGN4DjcC1rlmK6tAHosz+zpt3IJ7WRcH\njhTgmyzQbLpmZOoSroB7RDVtxERoWlWi8gNlYa4NxdSYgMlvujrIn0TMfsG9zMal\nkqroucwDRIlBXT/IgWUUHDdFKHc6p+b4696q3oBetdAWZtlIr5Sw/r8ESOQ7Irgt\n2VfH+pPFV9Cn4HXvKgK1ASG/Jx4aU9DyqR1OYK6ihnEafw/nso6gaMIbgXlvG9LE\n0Ug8nZmjpxHIZdEZBG0YNqniqBitcjgN9v4uXVB9uQuzfau1co+a1Ds+wUlKmcww\nf08ry2FOuvPSu9IizY/vN8Eyf9wOowm2RQWbdhRRd19jbsvOXKBkPM6jfLAdxEwD\nf6+nnUqVUnlfTqP2DFTmnHOJumj4pQE1Ll24tSuoeISXfKQMDwFY1exlYPwXEtvK\nzH50JB2A\n=FGjA\n-----END PGP SIGNATURE-----",
        "payload": "tree 78f035c4d61a0bb9265280546174decf0aa76ad0\nparent fad86b74b56ca9edcd650d55768cd20219a34c58\nauthor MarcoFalke <falke.marco@gmail.com> 1623582253 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1637667772 +0100\n\nfixup style of moved code\n\nCan be reviewed with --ignore-all-space  --word-diff-regex=.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faea2f78d872b4b0ae609aa3c9dcb5584c054360",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faea2f78d872b4b0ae609aa3c9dcb5584c054360",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faea2f78d872b4b0ae609aa3c9dcb5584c054360/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad86b74b56ca9edcd650d55768cd20219a34c58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad86b74b56ca9edcd650d55768cd20219a34c58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad86b74b56ca9edcd650d55768cd20219a34c58"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 32,
      "deletions": 20
    },
    "files": [
      {
        "sha": "7a7ed83c39494ac7323bbf33b1df4dcab14b58cc",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 14,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faea2f78d872b4b0ae609aa3c9dcb5584c054360/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faea2f78d872b4b0ae609aa3c9dcb5584c054360/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=faea2f78d872b4b0ae609aa3c9dcb5584c054360",
        "patch": "@@ -59,48 +59,59 @@ static constexpr uint8_t DB_FLAG{'F'};\n static constexpr uint8_t DB_REINDEX_FLAG{'R'};\n static constexpr uint8_t DB_LAST_BLOCK{'l'};\n \n-CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(gArgs.GetDataDirNet() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n+CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe)\n+    : CDBWrapper(gArgs.GetDataDirNet() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe)\n+{\n }\n \n-bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n+bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo& info)\n+{\n     return Read(std::make_pair(DB_BLOCK_FILES, nFile), info);\n }\n \n-bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n-    if (fReindexing)\n+bool CBlockTreeDB::WriteReindexing(bool fReindexing)\n+{\n+    if (fReindexing) {\n         return Write(DB_REINDEX_FLAG, uint8_t{'1'});\n-    else\n+    } else {\n         return Erase(DB_REINDEX_FLAG);\n+    }\n }\n \n-void CBlockTreeDB::ReadReindexing(bool &fReindexing) {\n+void CBlockTreeDB::ReadReindexing(bool& fReindexing)\n+{\n     fReindexing = Exists(DB_REINDEX_FLAG);\n }\n \n-bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n+bool CBlockTreeDB::ReadLastBlockFile(int& nFile)\n+{\n     return Read(DB_LAST_BLOCK, nFile);\n }\n \n-bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n+bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*>>& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo)\n+{\n     CDBBatch batch(*this);\n-    for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n+    for (std::vector<std::pair<int, const CBlockFileInfo*>>::const_iterator it = fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(std::make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n     batch.Write(DB_LAST_BLOCK, nLastFile);\n-    for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n+    for (std::vector<const CBlockIndex*>::const_iterator it = blockinfo.begin(); it != blockinfo.end(); it++) {\n         batch.Write(std::make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n     return WriteBatch(batch, true);\n }\n \n-bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n+bool CBlockTreeDB::WriteFlag(const std::string& name, bool fValue)\n+{\n     return Write(std::make_pair(DB_FLAG, name), fValue ? uint8_t{'1'} : uint8_t{'0'});\n }\n \n-bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n+bool CBlockTreeDB::ReadFlag(const std::string& name, bool& fValue)\n+{\n     uint8_t ch;\n-    if (!Read(std::make_pair(DB_FLAG, name), ch))\n+    if (!Read(std::make_pair(DB_FLAG, name), ch)) {\n         return false;\n+    }\n     fValue = ch == uint8_t{'1'};\n     return true;\n }\n@@ -133,8 +144,9 @@ bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams,\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, consensusParams))\n+                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, consensusParams)) {\n                     return error(\"%s: CheckProofOfWork failed: %s\", __func__, pindexNew->ToString());\n+                }\n \n                 pcursor->Next();\n             } else {"
      },
      {
        "sha": "874ffc4493b58517c4908e7add484fb6e8146391",
        "filename": "src/node/blockstorage.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faea2f78d872b4b0ae609aa3c9dcb5584c054360/src/node/blockstorage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faea2f78d872b4b0ae609aa3c9dcb5584c054360/src/node/blockstorage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.h?ref=faea2f78d872b4b0ae609aa3c9dcb5584c054360",
        "patch": "@@ -52,13 +52,13 @@ class CBlockTreeDB : public CDBWrapper\n public:\n     explicit CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n-    bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);\n-    bool ReadBlockFileInfo(int nFile, CBlockFileInfo &info);\n-    bool ReadLastBlockFile(int &nFile);\n+    bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*>>& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);\n+    bool ReadBlockFileInfo(int nFile, CBlockFileInfo& info);\n+    bool ReadLastBlockFile(int& nFile);\n     bool WriteReindexing(bool fReindexing);\n-    void ReadReindexing(bool &fReindexing);\n-    bool WriteFlag(const std::string &name, bool fValue);\n-    bool ReadFlag(const std::string &name, bool &fValue);\n+    void ReadReindexing(bool& fReindexing);\n+    bool WriteFlag(const std::string& name, bool fValue);\n+    bool ReadFlag(const std::string& name, bool& fValue);\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n "
      }
    ]
  },
  {
    "sha": "fad4d81625040e8215e7106ab35cf21780739160",
    "node_id": "C_kwDOABII59oAKGZhZDRkODE2MjUwNDBlODIxNWU3MTA2YWIzNWNmMjE3ODA3MzkxNjA",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-13T11:43:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-23T11:43:06Z"
      },
      "message": "refactor: Remove dbwrapper header from blockstorage header\n\nThere is no need to expose the internals in the header when\nonly the blockstorage implementation (and txindex for\nhistorical reasons) care about them.",
      "tree": {
        "sha": "2af14a84c0d4659a93f59f071e407c85c38c59ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2af14a84c0d4659a93f59f071e407c85c38c59ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad4d81625040e8215e7106ab35cf21780739160",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjFDAv+IQ2r3Rv+Hafqeia8v2cVuCbsgsAKJIgGETFGWdXWJaxM/w2SV409sujQ\n1ged1JzHAZX5ocGPb7aJ7xbhIwR5py+/coBPjKzXAi8o1yizgKMf6w0vIZfRBwsz\nhoBUImDaebpzXqEaYOJE14gsfGBj3OB3U8zB63XS3qzd7s3CL9k7mXiPAdyyOfWh\n1BlBW/Qa4NnyiZd9iyOGOGtvSyUEk9lsjpLthtkeI/o4p0+dfKQc1WapBzrcZV5k\nziXRDyI8QJUTTtlY1JjJvvsu/YFIPveb7sKiyDN6yq+981LOIOCLvmjZ39xV67uj\nfjNu3Gt8Pm+Ci9P9sdlgHQvKviSc/anV3rn6eq7PC4xOYWpli4qt15acetTJxjyO\nEjeO13OpYZOi/G2Ubrwt5wTbBfhKq9L0fB56vNrunQTL+ShnRnCHI5vkltElvgbg\nsCJElZG1jQ7hdcmNevm1+kCGVttX7oGd3LfgeWK9MN3p0cP7vu10U+VQnmv4oOfY\nOpWxhw50\n=Sypc\n-----END PGP SIGNATURE-----",
        "payload": "tree 2af14a84c0d4659a93f59f071e407c85c38c59ee\nparent faea2f78d872b4b0ae609aa3c9dcb5584c054360\nauthor MarcoFalke <falke.marco@gmail.com> 1623584588 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1637667786 +0100\n\nrefactor: Remove dbwrapper header from blockstorage header\n\nThere is no need to expose the internals in the header when\nonly the blockstorage implementation (and txindex for\nhistorical reasons) care about them.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad4d81625040e8215e7106ab35cf21780739160",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad4d81625040e8215e7106ab35cf21780739160",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad4d81625040e8215e7106ab35cf21780739160/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faea2f78d872b4b0ae609aa3c9dcb5584c054360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faea2f78d872b4b0ae609aa3c9dcb5584c054360",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faea2f78d872b4b0ae609aa3c9dcb5584c054360"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 20,
      "deletions": 14
    },
    "files": [
      {
        "sha": "3e873c210d117b9729aa6a23f58ae56cef97d04b",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4d81625040e8215e7106ab35cf21780739160/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4d81625040e8215e7106ab35cf21780739160/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=fad4d81625040e8215e7106ab35cf21780739160",
        "patch": "@@ -8,6 +8,7 @@\n #include <chainparams.h>\n #include <clientversion.h>\n #include <consensus/validation.h>\n+#include <dbwrapper.h>\n #include <flatfile.h>\n #include <fs.h>\n #include <hash.h>\n@@ -60,56 +61,56 @@ static constexpr uint8_t DB_REINDEX_FLAG{'R'};\n static constexpr uint8_t DB_LAST_BLOCK{'l'};\n \n CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe)\n-    : CDBWrapper(gArgs.GetDataDirNet() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe)\n+    : m_db{std::make_unique<CDBWrapper>(gArgs.GetDataDirNet() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe)}\n {\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo& info)\n {\n-    return Read(std::make_pair(DB_BLOCK_FILES, nFile), info);\n+    return Db().Read(std::make_pair(DB_BLOCK_FILES, nFile), info);\n }\n \n bool CBlockTreeDB::WriteReindexing(bool fReindexing)\n {\n     if (fReindexing) {\n-        return Write(DB_REINDEX_FLAG, uint8_t{'1'});\n+        return Db().Write(DB_REINDEX_FLAG, uint8_t{'1'});\n     } else {\n-        return Erase(DB_REINDEX_FLAG);\n+        return Db().Erase(DB_REINDEX_FLAG);\n     }\n }\n \n void CBlockTreeDB::ReadReindexing(bool& fReindexing)\n {\n-    fReindexing = Exists(DB_REINDEX_FLAG);\n+    fReindexing = Db().Exists(DB_REINDEX_FLAG);\n }\n \n bool CBlockTreeDB::ReadLastBlockFile(int& nFile)\n {\n-    return Read(DB_LAST_BLOCK, nFile);\n+    return Db().Read(DB_LAST_BLOCK, nFile);\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*>>& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo)\n {\n-    CDBBatch batch(*this);\n+    CDBBatch batch(Db());\n     for (std::vector<std::pair<int, const CBlockFileInfo*>>::const_iterator it = fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(std::make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n     batch.Write(DB_LAST_BLOCK, nLastFile);\n     for (std::vector<const CBlockIndex*>::const_iterator it = blockinfo.begin(); it != blockinfo.end(); it++) {\n         batch.Write(std::make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n-    return WriteBatch(batch, true);\n+    return Db().WriteBatch(batch, true);\n }\n \n bool CBlockTreeDB::WriteFlag(const std::string& name, bool fValue)\n {\n-    return Write(std::make_pair(DB_FLAG, name), fValue ? uint8_t{'1'} : uint8_t{'0'});\n+    return Db().Write(std::make_pair(DB_FLAG, name), fValue ? uint8_t{'1'} : uint8_t{'0'});\n }\n \n bool CBlockTreeDB::ReadFlag(const std::string& name, bool& fValue)\n {\n     uint8_t ch;\n-    if (!Read(std::make_pair(DB_FLAG, name), ch)) {\n+    if (!Db().Read(std::make_pair(DB_FLAG, name), ch)) {\n         return false;\n     }\n     fValue = ch == uint8_t{'1'};\n@@ -118,7 +119,7 @@ bool CBlockTreeDB::ReadFlag(const std::string& name, bool& fValue)\n \n bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n {\n-    std::unique_ptr<CDBIterator> pcursor(NewIterator());\n+    std::unique_ptr<CDBIterator> pcursor(Db().NewIterator());\n \n     pcursor->Seek(std::make_pair(DB_BLOCK_INDEX, uint256()));\n "
      },
      {
        "sha": "30c0cc63537af34f88c0d6eb536c925087a06a84",
        "filename": "src/node/blockstorage.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4d81625040e8215e7106ab35cf21780739160/src/node/blockstorage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4d81625040e8215e7106ab35cf21780739160/src/node/blockstorage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.h?ref=fad4d81625040e8215e7106ab35cf21780739160",
        "patch": "@@ -5,9 +5,9 @@\n #ifndef BITCOIN_NODE_BLOCKSTORAGE_H\n #define BITCOIN_NODE_BLOCKSTORAGE_H\n \n-#include <dbwrapper.h>\n #include <fs.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n+#include <util/check.h>\n \n #include <atomic>\n #include <cstdint>\n@@ -21,6 +21,7 @@ class CBlockIndex;\n class CBlockUndo;\n class CChain;\n class CChainParams;\n+class CDBWrapper;\n class ChainstateManager;\n struct FlatFilePos;\n namespace Consensus {\n@@ -47,9 +48,13 @@ extern bool fPruneMode;\n extern uint64_t nPruneTarget;\n \n /** Access to the block database (blocks/index/) */\n-class CBlockTreeDB : public CDBWrapper\n+class CBlockTreeDB\n {\n+private:\n+    std::unique_ptr<CDBWrapper> m_db;\n+\n public:\n+    CDBWrapper& Db() { return *Assert(m_db); }\n     explicit CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n     bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*>>& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);"
      },
      {
        "sha": "582bec631a08f5b89f341e4b842c0bab2b511068",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4d81625040e8215e7106ab35cf21780739160/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4d81625040e8215e7106ab35cf21780739160/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=fad4d81625040e8215e7106ab35cf21780739160",
        "patch": "@@ -31,7 +31,7 @@ static constexpr uint8_t DB_TXINDEX_BLOCK{'T'};\n std::optional<bilingual_str> CheckLegacyTxindex(CBlockTreeDB& block_tree_db)\n {\n     CBlockLocator ignored{};\n-    if (block_tree_db.Read(DB_TXINDEX_BLOCK, ignored)) {\n+    if (block_tree_db.Db().Read(DB_TXINDEX_BLOCK, ignored)) {\n         return _(\"The -txindex upgrade started by a previous version can not be completed. Restart with the previous version or run a full -reindex.\");\n     }\n     bool txindex_legacy_flag{false};"
      }
    ]
  }
]