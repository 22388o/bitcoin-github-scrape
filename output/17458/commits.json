[
  {
    "sha": "7d07e864b8846be186648814a5aaf34269f914a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDA3ZTg2NGI4ODQ2YmUxODY2NDg4MTRhNWFhZjM0MjY5ZjkxNGEz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-07T22:19:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-30T16:51:32Z"
      },
      "message": "Use real value when calculating OutputGroup value\n\nOutputGroup::m_value is the true value, not the effective value,\nso use the true values of the outputs, not their effective values.",
      "tree": {
        "sha": "a846fb3b5eaac31327cc0ddb11d00065cbee9aed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a846fb3b5eaac31327cc0ddb11d00065cbee9aed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d07e864b8846be186648814a5aaf34269f914a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d07e864b8846be186648814a5aaf34269f914a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d07e864b8846be186648814a5aaf34269f914a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d07e864b8846be186648814a5aaf34269f914a3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edec7f7c254294cd5c46ae5cf304353d458bb852",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edec7f7c254294cd5c46ae5cf304353d458bb852",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edec7f7c254294cd5c46ae5cf304353d458bb852"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "45b1add0a75a9e429bdf4ef89518a704793123f1",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d07e864b8846be186648814a5aaf34269f914a3/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d07e864b8846be186648814a5aaf34269f914a3/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=7d07e864b8846be186648814a5aaf34269f914a3",
        "patch": "@@ -302,7 +302,7 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n     m_outputs.push_back(output);\n     m_from_me &= from_me;\n-    m_value += output.effective_value;\n+    m_value += output.txout.nValue;\n     m_depth = std::min(m_depth, depth);\n     // ancestors here express the number of ancestors the new coin will end up having, which is\n     // the sum, rather than the max; this will overestimate in the cases where multiple inputs\n@@ -318,7 +318,7 @@ std::vector<CInputCoin>::iterator OutputGroup::Discard(const CInputCoin& output)\n     auto it = m_outputs.begin();\n     while (it != m_outputs.end() && it->outpoint != output.outpoint) ++it;\n     if (it == m_outputs.end()) return it;\n-    m_value -= output.effective_value;\n+    m_value -= output.txout.nValue;\n     effective_value -= output.effective_value;\n     return m_outputs.erase(it);\n }"
      }
    ]
  },
  {
    "sha": "9adc2f80fc14f11ee2b1f989ee7be71b58481e6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWRjMmY4MGZjMTRmMTFlZTJiMWY5ODllZTdiZTcxYjU4NDgxZTZm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-12T20:06:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-11T18:25:02Z"
      },
      "message": "Refactor OutputGroups to handle effective values, fees, and filtering\n\nInstead of having callers set the fees, effective values, and filtering\nof outputs, do these within OutputGroups themselves as member functions.\n\nm_fee and m_long_term_fee is added to OutputGroup to track the fees of\nthe OutputGroup.",
      "tree": {
        "sha": "5f9c39aae8ae839dd288ec604d6f72bded05561b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f9c39aae8ae839dd288ec604d6f72bded05561b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9adc2f80fc14f11ee2b1f989ee7be71b58481e6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9adc2f80fc14f11ee2b1f989ee7be71b58481e6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9adc2f80fc14f11ee2b1f989ee7be71b58481e6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9adc2f80fc14f11ee2b1f989ee7be71b58481e6f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d07e864b8846be186648814a5aaf34269f914a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d07e864b8846be186648814a5aaf34269f914a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d07e864b8846be186648814a5aaf34269f914a3"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 54,
      "deletions": 21
    },
    "files": [
      {
        "sha": "1a45a2b313f442aaddda897dd6451f567ae4c0e4",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 1,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9adc2f80fc14f11ee2b1f989ee7be71b58481e6f/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9adc2f80fc14f11ee2b1f989ee7be71b58481e6f/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=9adc2f80fc14f11ee2b1f989ee7be71b58481e6f",
        "patch": "@@ -5,6 +5,7 @@\n #include <wallet/coinselection.h>\n \n #include <optional.h>\n+#include <policy/feerate.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n \n@@ -311,7 +312,9 @@ void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size\n     // descendants is the count as seen from the top ancestor, not the descendants as seen from the\n     // coin itself; thus, this value is counted as the max, not the sum\n     m_descendants = std::max(m_descendants, descendants);\n-    effective_value = m_value;\n+    effective_value += output.effective_value;\n+    fee += output.m_fee;\n+    long_term_fee += output.m_long_term_fee;\n }\n \n std::vector<CInputCoin>::iterator OutputGroup::Discard(const CInputCoin& output) {\n@@ -320,6 +323,8 @@ std::vector<CInputCoin>::iterator OutputGroup::Discard(const CInputCoin& output)\n     if (it == m_outputs.end()) return it;\n     m_value -= output.txout.nValue;\n     effective_value -= output.effective_value;\n+    fee -= output.m_fee;\n+    long_term_fee -= output.m_long_term_fee;\n     return m_outputs.erase(it);\n }\n \n@@ -329,3 +334,35 @@ bool OutputGroup::EligibleForSpending(const CoinEligibilityFilter& eligibility_f\n         && m_ancestors <= eligibility_filter.max_ancestors\n         && m_descendants <= eligibility_filter.max_descendants;\n }\n+\n+void OutputGroup::SetFees(const CFeeRate effective_feerate, const CFeeRate long_term_feerate)\n+{\n+    fee = 0;\n+    long_term_fee = 0;\n+    effective_value = 0;\n+    for (CInputCoin& coin : m_outputs) {\n+        coin.m_fee = coin.m_input_bytes < 0 ? 0 : effective_feerate.GetFee(coin.m_input_bytes);\n+        fee += coin.m_fee;\n+\n+        coin.m_long_term_fee = coin.m_input_bytes < 0 ? 0 : long_term_feerate.GetFee(coin.m_input_bytes);\n+        long_term_fee += coin.m_long_term_fee;\n+\n+        coin.effective_value = coin.txout.nValue - coin.m_fee;\n+        effective_value += coin.effective_value;\n+    }\n+}\n+\n+OutputGroup OutputGroup::GetPositiveOnlyGroup()\n+{\n+    OutputGroup group(*this);\n+    for (auto it = group.m_outputs.begin(); it != group.m_outputs.end(); ) {\n+        const CInputCoin& coin = *it;\n+        // Only include outputs that are positive effective value (i.e. not dust)\n+        if (coin.effective_value <= 0) {\n+            it = group.Discard(coin);\n+        } else {\n+            ++it;\n+        }\n+    }\n+    return group;\n+}"
      },
      {
        "sha": "49c1134ec625543de77af7e1798528c134ff2801",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9adc2f80fc14f11ee2b1f989ee7be71b58481e6f/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9adc2f80fc14f11ee2b1f989ee7be71b58481e6f/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=9adc2f80fc14f11ee2b1f989ee7be71b58481e6f",
        "patch": "@@ -9,6 +9,8 @@\n #include <primitives/transaction.h>\n #include <random.h>\n \n+class CFeeRate;\n+\n //! target minimum change amount\n static constexpr CAmount MIN_CHANGE{COIN / 100};\n //! final minimum change amount after paying for fees\n@@ -36,6 +38,8 @@ class CInputCoin {\n     COutPoint outpoint;\n     CTxOut txout;\n     CAmount effective_value;\n+    CAmount m_fee{0};\n+    CAmount m_long_term_fee{0};\n \n     /** Pre-computed estimated size of this output as a fully-signed input in a transaction. Can be -1 if it could not be calculated */\n     int m_input_bytes{-1};\n@@ -91,6 +95,10 @@ struct OutputGroup\n     void Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants);\n     std::vector<CInputCoin>::iterator Discard(const CInputCoin& output);\n     bool EligibleForSpending(const CoinEligibilityFilter& eligibility_filter) const;\n+\n+    //! Update the OutputGroup's fee, long_term_fee, and effective_value based on the given feerates\n+    void SetFees(const CFeeRate effective_feerate, const CFeeRate long_term_feerate);\n+    OutputGroup GetPositiveOnlyGroup();\n };\n \n bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);"
      },
      {
        "sha": "6d5282a8c5536e3e3ac169f9b19870969b65be9d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 20,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9adc2f80fc14f11ee2b1f989ee7be71b58481e6f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9adc2f80fc14f11ee2b1f989ee7be71b58481e6f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9adc2f80fc14f11ee2b1f989ee7be71b58481e6f",
        "patch": "@@ -2320,27 +2320,15 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         for (OutputGroup& group : groups) {\n             if (!group.EligibleForSpending(eligibility_filter)) continue;\n \n-            group.fee = 0;\n-            group.long_term_fee = 0;\n-            group.effective_value = 0;\n-            for (auto it = group.m_outputs.begin(); it != group.m_outputs.end(); ) {\n-                const CInputCoin& coin = *it;\n-                CAmount effective_value = coin.txout.nValue - (coin.m_input_bytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(coin.m_input_bytes));\n-                // Only include outputs that are positive effective value (i.e. not dust)\n-                if (effective_value > 0) {\n-                    group.fee += coin.m_input_bytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n-                    group.long_term_fee += coin.m_input_bytes < 0 ? 0 : long_term_feerate.GetFee(coin.m_input_bytes);\n-                    if (coin_selection_params.m_subtract_fee_outputs) {\n-                        group.effective_value += coin.txout.nValue;\n-                    } else {\n-                        group.effective_value += effective_value;\n-                    }\n-                    ++it;\n-                } else {\n-                    it = group.Discard(coin);\n-                }\n+            if (coin_selection_params.m_subtract_fee_outputs) {\n+                // Set the effective feerate to 0 as we don't want to use the effective value since the fees will be deducted from the output\n+                group.SetFees(CFeeRate(0) /* effective_feerate */, long_term_feerate);\n+            } else {\n+                group.SetFees(coin_selection_params.effective_fee, long_term_feerate);\n             }\n-            if (group.effective_value > 0) utxo_pool.push_back(group);\n+\n+            OutputGroup pos_group = group.GetPositiveOnlyGroup();\n+            if (pos_group.effective_value > 0) utxo_pool.push_back(pos_group);\n         }\n         // Calculate the fees for things that aren't inputs\n         CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);"
      }
    ]
  }
]