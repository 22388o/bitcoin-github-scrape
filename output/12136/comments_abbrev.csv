jonasschnelli,2018-01-10T07:51:19Z,"Great work!\nGeneral concept ack, though the PR is large and maybe there is a way to make smaller steps towards BIP174 (reduce of risks).",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-356525975,356525975,
achow101,2018-01-10T21:27:28Z,I'm not sure what's causing the travis failure.,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-356742198,356742198,
gmaxwell,2018-01-11T20:37:42Z,Concept ACK!,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-357053808,357053808,
dcousens,2018-01-16T22:27:06Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-358128846,358128846,
laanwj,2018-02-14T13:53:29Z,Neat! Concept ACK.,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-365613381,365613381,
achow101,2018-02-20T23:08:21Z,Rebased and squashed fixup commits.,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-367153220,367153220,
instagibbs,2018-03-06T14:13:38Z,"light tACK\n\nI have rebased the externalhd branch onto this PR, with minor modifications, for ledger support, combined with @achow101 's HWI repo for signing. https://github.com/instagibbs/bitcoin/tree/external_psbt",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-370793854,370793854,
instagibbs,2018-04-05T17:05:17Z,needs rebase,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-379006898,379006898,
achow101,2018-04-05T20:38:00Z,Rebased,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-379068975,379068975,
achow101,2018-04-26T23:16:39Z,Rebased,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-384817087,384817087,
achow101,2018-04-28T04:32:05Z,Addressed all of @sipa's comments.,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-385139552,385139552,
sipa,2018-04-30T23:18:56Z,@achow101 Here's a commit with a few suggested improvements to the serialization code: https://github.com/sipa/bitcoin/commit/8733102e713b1ef8e96f6fca80e77a5d8c47fc0b,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-385556901,385556901,
achow101,2018-05-01T15:41:07Z,I've included @sipa's serialization improvements.,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-385703183,385703183,
instagibbs,2018-05-14T16:55:18Z,needs rebase,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-388887658,388887658,
achow101,2018-05-17T22:48:10Z,Rebased,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-390037468,390037468,
achow101,2018-05-26T04:42:34Z,"Rebased this and did some reorganization.\n\nI squashed down a lot of the commits so that the changes to different parts aren't scattered around in different commits.\n\nI also de-duplicated the signing code by using a PSBT specific SIgningProvider and SignatureCreator. The SigningProvider handles providing pubkeys and scripts from the PSBT itself along with the wallet and the SignatureCreator",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-392236221,392236221,
dcousens,2018-05-29T23:58:17Z,"@achow101 have you thought about making this a 3rd party library for integration into other software,  and then integration here?",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-392986579,392986579,
achow101,2018-05-30T21:02:15Z,"@dcousens I have, but I'm not sure what the third party library would really be.",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-393318266,393318266,
kallewoof,2018-05-31T06:26:08Z,"Sorry, some comments are duplicate (I thought I lost my review and re-did).",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-393420639,393420639,
achow101,2018-05-31T19:12:28Z,"Also rebased to (hopefully) fix the travis error\n\n~~edit: I have no idea why travis is failing. Builds without error for me..~~\nedit2: I didn't rebase far enough",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-393645080,393645080,
achow101,2018-06-05T04:59:31Z,"> Have you thought of splitting it?\n\nSplitting into what components? All of it kind of goes together.",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-394582055,394582055,
achow101,2018-06-05T23:14:50Z,Rebased to fix a silent merge conflict.,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-394889918,394889918,
tokutech,2018-06-07T03:44:54Z,"Hello,\n\nWhy not using JSON(like protocolbuffer) instead this BIP format? Its more simpler.",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-395283391,395283391,
achow101,2018-06-07T09:14:26Z,"@tokutech Because stuff like JSON or protobufs are more cumbersome to use. For JSON, the size of  the objects  are much larger. They are also in a form that is human readable and human readability doesn't matter for this.  Furthermore, in order for devices to use something that is JSON formatted, it needs to have a JSON parser, which is not necessarily something that exists on such devices. While ",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-395351254,395351254,
MarcoFalke,2018-06-07T19:25:46Z,"From travis:\n```\nThe locale dependent function isdigit(...) appears to be used:\nsrc/wallet/rpcwallet.cpp:            if (!std::isdigit(c)) {\nUnnecessary locale dependence can cause bugs that are very\ntricky to isolate and fix. Please avoid using locale dependent\nfunctions if possible.\nAdvice not applicable in this specific case? Add an exception\nby updating the ignore list in test/",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-395536652,395536652,
achow101,2018-06-07T19:46:51Z,I think I fixed the linter error.,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-395542481,395542481,
achow101,2018-06-09T00:22:53Z,Apparently I lost some changes in a rebase or something. They should be back.,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-395924864,395924864,
achow101,2018-06-10T00:18:15Z,Rebased on top of #13425 which simplifies the signer logic.,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-396008565,396008565,
achow101,2018-06-12T19:03:29Z,Updated the title to indicate that this is primarily serializations and RPCs.,https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-396699040,396699040,
luke-jr,2018-06-16T22:58:38Z,"If the only reason not to use protobufs is ""another dependency"", that's a bad reason to avoid it. Dependencies are better than reinventing the same thing... no reason to avoid them. (not to mention that protobuf is *already* a dependency)",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-397843421,397843421,
sipa,2018-06-16T23:22:22Z,"@luke-jr They also have a non-unique encoding, and are too complicated for what we need. Protobuf is also not a dependency already of all (or even most) software (including hardware devices) we expect to implement this, while all of those already need to implement Bitcoin P2P-like serialization, which this extends.\n\nThe discussion for that probably belongs on the ML.",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-397844255,397844255,
luke-jr,2018-06-17T01:35:42Z,"@sipa My goal was not to argue for a change in BIP 174, only to get a better explanation/rationale for why protobufs aren't used. :)",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-397848654,397848654,
achow101,2018-06-24T17:36:00Z,"Since BIP 174 is changing soon, I'm closing this for now.",https://github.com/bitcoin/bitcoin/pull/12136#issuecomment-399773447,399773447,
jonasschnelli,2018-01-10T07:47:17Z,`SignPartialTransaction` sounds after we have partial transactions. Suggest `SignPartialSignedTransaction`.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r160607899,160607899,src/script/sign.cpp
instagibbs,2018-02-14T19:29:47Z,"this may segfault when there is no corresponding `partial_sig`, I believe this is the cause of your test failure.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r168284628,168284628,src/script/sign.cpp
achow101,2018-02-15T03:11:06Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r168372462,168372462,src/script/sign.cpp
instagibbs,2018-02-20T16:49:46Z,"should be:\n\n`if (type == TX_PUBKEYHASH || type == TX_WITNESS_V0_KEYHASH) {`",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r169384651,169384651,src/wallet/rpcwallet.cpp
instagibbs,2018-02-20T16:56:54Z,"this isn't mentioned in the spec anywhere, but passing along the the change output's pubkey(s)/hdpath(s)/redeemscript allows hww to understand change outputs.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r169386999,169386999,src/wallet/rpcwallet.cpp
achow101,2018-02-20T23:08:12Z,Done.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r169490318,169490318,src/wallet/rpcwallet.cpp
achow101,2018-02-20T23:49:08Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r169497726,169497726,src/wallet/rpcwallet.cpp
achow101,2018-02-21T00:07:48Z,I decided to make this an option instead of the default. I'll add tests for it later.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r169500813,169500813,src/wallet/rpcwallet.cpp
instagibbs,2018-02-21T16:15:40Z,"you need to edit number of allowed args, and include the optional one in parens above.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r169691012,169691012,src/wallet/rpcwallet.cpp
instagibbs,2018-02-21T16:18:33Z,you also need to add it to the list of arguments that will be parsed as json rather than strings in `rpc/client.cpp`,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r169692049,169692049,src/wallet/rpcwallet.cpp
instagibbs,2018-02-21T16:25:29Z,"What we really care about is that we have the hdkeypath, not particularly that the key is present or not. I don't think these `HaveKey` checks are necessary since `add_keypath_to_map` will deal with that case specifically.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r169694684,169694684,src/wallet/rpcwallet.cpp
achow101,2018-02-22T05:47:27Z,"Right, fixed.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r169860061,169860061,src/wallet/rpcwallet.cpp
achow101,2018-02-22T05:47:35Z,"Dang, I knew I forgot something. Fixed.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r169860070,169860070,src/wallet/rpcwallet.cpp
instagibbs,2018-02-22T15:13:48Z,should be `1`,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r169988690,169988690,src/rpc/client.cpp
achow101,2018-02-22T15:58:29Z,fixed,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r170004555,170004555,src/rpc/client.cpp
achow101,2018-04-05T20:37:55Z,Changed to `SignPartiallySignedTransaction`,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r179593431,179593431,src/script/sign.cpp
sipa,2018-04-26T23:25:07Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nThis constructor can take const reference arguments.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184557822,184557822,src/script/sign.cpp
sipa,2018-04-26T23:25:30Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nNit: method naming convention",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184557916,184557916,src/script/sign.cpp
sipa,2018-04-26T23:26:27Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nNit: `else` on the same line as `}` (and elsewhere).",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184558052,184558052,src/script/sign.cpp
sipa,2018-04-26T23:28:53Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nYou can avoid making a copy here (use a const reference instead).",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184558399,184558399,src/script/sign.cpp
sipa,2018-04-26T23:30:15Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nThese can be marked `constexpr` instead.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184558613,184558613,src/script/sign.h
sipa,2018-04-26T23:34:59Z,Using `std::move(key)` and `std::move(val_bytes)` here and below will avoid copies.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184559298,184559298,src/script/sign.h
sipa,2018-04-27T19:16:10Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nI don't think any of these constructor initializers are necessary (the default constructor will do the same).",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184782824,184782824,src/script/sign.h
sipa,2018-04-27T19:16:21Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nSpecify an initializer for index?",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184782858,184782858,src/script/sign.h
sipa,2018-04-27T19:17:47Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nThese initializers are not necessary (they just invoke the default constructor).",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184783148,184783148,src/script/sign.cpp
sipa,2018-04-27T19:19:44Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nYou can use `non_witness_utxo.reset();` here.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184783552,184783552,src/script/sign.cpp
sipa,2018-04-27T19:22:00Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nYou can replace this line + the next with `s << entry.second` (the default serializer for `CScript` uses length prefixing).",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184784166,184784166,src/script/sign.h
sipa,2018-04-27T19:22:32Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nLikewise, replace this line and the next with `s << entry.second`.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184784273,184784273,src/script/sign.h
sipa,2018-04-27T19:25:33Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nReplace this line and the line below with `s << keypath_pair.second;`.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184784933,184784933,src/script/sign.h
sipa,2018-04-27T19:32:51Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nThis record does not follow the keylen-key-valuelen-value format, and thus wouldn't be parseable by software that doesn't know about it.\n\nAlso, BIP174 question - why is this record necessary? It should be implied by `tx.vin.size()`.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184786509,184786509,src/script/sign.h
sipa,2018-04-27T19:45:13Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nThis line and the next write the index as a 4-byte uint32, not a compact size as described by BIP174.\n\nThe correct way to follow the BIP would be to first write the size of the compactsize-encoded input index in compactsize encoding, and then the compactsize encoding of the input. This is a lot easier if you'd ",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184789102,184789102,src/script/sign.h
sipa,2018-04-27T19:46:38Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nNit: `{` on the same line as `switch`.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184789407,184789407,src/script/sign.h
sipa,2018-04-27T19:50:39Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nOverall comment on the serialization code: you could simplify things a lot by also having a single-argument `SerializeToVector` (which takes an object but no header byte).\n\nAll instances of `WriteCompactSize(s, ::GetSerializeSize(foo)); s << foo;` could then turn into `s << SerializeToVector(foo);`. There are d",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184790215,184790215,src/script/sign.h
sipa,2018-04-27T20:21:37Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nYou can use `CTransactionRef prev_tx; s >> prev_tx;` instead here (and `input.non_witness_utxo = std::move(prev_tx);` below).",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184797335,184797335,src/script/sign.h
sipa,2018-04-27T20:33:55Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nGeneral comment on deserialization code: check that keys and values (where relevant) have the expected length. Things like `uint160(key.begin() + 1, key.end())` will assertion fail if the length is wrong.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184800129,184800129,src/script/sign.h
achow101,2018-04-28T03:59:11Z,"It specifies the number of inputs that have input data in the PSBT, not the number of inputs in the transaction in general.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184838871,184838871,src/script/sign.h
achow101,2018-04-28T04:13:57Z,"> This is a lot easier if you'd have a single-argument SerializeToVector first (see above).\n\nAbove where?\n\nI'm not necessarily sure that that will always work due to the different data types.\n\n> Perhaps it's generally better to use the separator approach instead?\n\nI think it generally is better to use the separator approach. By default, this code does not use input indexes unless a",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184839187,184839187,src/script/sign.h
achow101,2018-04-28T05:35:44Z,"This does not work because it will be prefixed with the number of items in the keypath, not with the total size in bytes that that will be. Each item in the keypath is a uint32_t, not an unsigned char.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184841051,184841051,src/script/sign.h
sipa,2018-04-29T00:48:50Z,"Ah yes, indeed.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r184868701,184868701,src/script/sign.h
sipa,2018-04-30T22:35:58Z,"@achow101 Ok, makes sense.\n\nBut you're still writing PSB_NUM_IN_VIN without a keylength prefix here.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r185129763,185129763,src/script/sign.h
sipa,2018-04-30T22:40:28Z,"This and the line below can be written as `s << sig_pair.second`, I think - it's just an unsigned char vector.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r185130522,185130522,src/script/sign.h
sipa,2018-04-30T22:46:39Z,"> Above where?\n\nhttps://github.com/bitcoin/bitcoin/pull/12136/commits/e25f290841de2c446a237ad3942a0c2c0427ee62#r184790215\n\n> I'm not necessarily sure that that will always work due to the different data types.\n\nIt should. Char vectors are always serialized as compactsize-in-bytes + data-bytes. SerializeToVector first serializes to a vector, and then you serialize that. I can create a s",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r185131652,185131652,src/script/sign.h
laanwj,2018-05-29T19:13:55Z,"why *8? that doesn't look in line with 32 bit values (also the `uint64_t` below should probably be `uint32_t`).\n\nAlso, please add `LE` to make clear that this is always little-endian.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191541037,191541037,src/uint256.h
laanwj,2018-05-29T19:14:51Z,Single quote like the others?,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191541303,191541303,test/functional/test_runner.py
achow101,2018-05-29T20:23:19Z,"Whoops. That's a bad copy-paste from the GetUint64 function above this one.\n\nFixed.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191561472,191561472,src/uint256.h
achow101,2018-05-29T20:23:24Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191561504,191561504,test/functional/test_runner.py
jeffrade,2018-05-30T02:08:12Z,"```\nrpc_psbt.py                           | ✓ Passed  | 4 s\n.\n.\n.\nrpc_users.py                          | ✓ Passed  | 3 s\n```\n\nSince `rpc_psbt.py` ran locally for me in 4 seconds and to avoid possible merge conflict, `'rpc_psbt.py'` can be inserted before `'rpc_users.py'` in this list.\n\n",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191624853,191624853,test/functional/test_runner.py
kallewoof,2018-05-30T07:52:50Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nShould this be in `serialize.h`?\n\n(btw, the commit message has a typo (`serliazation`))",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191672334,191672334,src/script/sign.h
kallewoof,2018-05-30T07:59:40Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nNit: space between `for` and `(`, here and on line 236.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191674098,191674098,src/script/sign.h
kallewoof,2018-05-30T08:08:43Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nDoesn't really make a huge difference, but I think `if (hash160 != rs_hash160)` is a tiny bit more readable.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191676655,191676655,src/script/sign.h
kallewoof,2018-05-30T08:09:56Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nSame here about `(hash != ws_sha256)`.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191676954,191676954,src/script/sign.h
kallewoof,2018-05-30T08:13:43Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nWhy the `{}` here and in `case PSBT_NUM_IN_VIN:` below? No vars are declared.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191678066,191678066,src/script/sign.h
kallewoof,2018-05-30T08:16:20Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nMight be good to check validity of the pubkey. E.g.\n```C++\nif (!pubkey.IsValid()) {\n  throw std::ios_base::failure(""Invalid pubkey"");\n}\n```\n",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191678786,191678786,src/script/sign.h
kallewoof,2018-05-30T08:19:27Z,"Maybe I am seeing outdated code, but it still says `* 8` here and `uint64_t` below.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191679623,191679623,src/uint256.h
kallewoof,2018-05-30T08:22:32Z,"In commit ""Implement a signer that takes an unserialized PSBT and signs it"":\n\nCheck result of `provider.GetPubKey()` and react if `false`?",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191680502,191680502,src/script/sign.cpp
kallewoof,2018-05-30T08:24:00Z,Nit/style: `{` on same line as `if`,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191680953,191680953,src/script/sign.cpp
kallewoof,2018-05-30T08:30:00Z,"In commit ""Implement a signer that takes an unserialized PSBT and signs it"":\n\nMaybe add a comment about this function, in particular saying that it returns true if it was complete, and if `finalize` was set, and `false` does not necessarily mean failure to partially sign.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191682770,191682770,src/script/sign.h
kallewoof,2018-05-30T08:30:54Z,"In commit ""Implement a signer that takes an unserialized PSBT and signs it"":\n\nWas this meant to go into the previous commit?",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191683025,191683025,src/uint256.h
pedrobranco,2018-05-30T12:55:18Z,Unnecessary else.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191755201,191755201,src/core_write.cpp
pedrobranco,2018-05-30T13:30:50Z,"The RPC's convention is confusing. WDYT of renaming all RPC from: \n- `walletcreatepsbt` to `createpartiallysignedtransaction`\n- `walletupdatepsbt` to `updatepartiallysignedtransaction`\n- `combinepsbt` to `combinepartiallysignedtransactions`\n- `decodepsbt` to `decodepartiallysignedtransaction`",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191767639,191767639,src/rpc/client.cpp
pedrobranco,2018-05-30T13:36:46Z,Unnecessary else.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191769857,191769857,src/wallet/rpcwallet.cpp
pedrobranco,2018-05-30T13:38:33Z,Keep the `if` blocks consistent (with or without `{`).,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191770517,191770517,src/wallet/rpcwallet.cpp
instagibbs,2018-05-30T15:07:22Z,Might want `IsFullyValid()`,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191805951,191805951,src/script/sign.h
instagibbs,2018-05-30T15:39:52Z,I think the `wallet` prefixes are helpful,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191818138,191818138,src/rpc/client.cpp
achow101,2018-05-30T15:51:31Z,"Not sure, it's kind of specific to PSBT.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191823071,191823071,src/script/sign.h
achow101,2018-05-30T16:02:55Z,I prefer the `wallet` prefixes and expanding out `psbt` to `partiallysignedtransaction` just makes the RPC names too long IMO.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191827125,191827125,src/rpc/client.cpp
pedrobranco,2018-05-30T16:27:15Z,"> I think the wallet prefixes are helpful\n\n>I prefer the wallet prefixes and expanding out psbt to partiallysignedtransaction just makes the RPC names too long IMO.\n\nWe now have several wallet RPC methods that are not prefixed with `wallet`, so IMO is an unnecessary prefix. \n\nAlso AFAIK, by the spec `PSBT` is a transaction format, so the transaction itself is a `partially signed transa",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191834984,191834984,src/rpc/client.cpp
sipa,2018-05-30T16:39:39Z,"I think it's the other way around. Historically no RPCs had a wallet prefix, which led to a lot of confusion (e.g. gettransaction vs getrawtransaction).\n\nI'm in favor of having wallet in the name of RPCs that require a wallet to interact with.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191838970,191838970,src/rpc/client.cpp
dcousens,2018-05-30T20:29:25Z,"`bip174-create`\n`bip174-update`\n`bip174-combine`\n`bip174-decode`\n\nUnambiguous, easily searched and semantics known to adhere to the BIP",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191912119,191912119,src/rpc/client.cpp
achow101,2018-05-30T20:56:40Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191920238,191920238,src/script/sign.h
achow101,2018-05-30T20:56:44Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191920263,191920263,src/script/sign.h
achow101,2018-05-30T20:56:48Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191920287,191920287,src/script/sign.h
achow101,2018-05-30T20:56:53Z,Removed,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191920307,191920307,src/script/sign.h
achow101,2018-05-30T20:57:00Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191920347,191920347,src/script/sign.h
achow101,2018-05-30T20:57:25Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191920486,191920486,src/script/sign.cpp
achow101,2018-05-30T20:57:31Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191920516,191920516,src/script/sign.cpp
achow101,2018-05-30T20:57:35Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191920546,191920546,src/script/sign.h
achow101,2018-05-30T20:59:46Z,"Oops, yes. Fixed",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191921147,191921147,src/uint256.h
achow101,2018-05-30T20:59:53Z,Removed,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191921189,191921189,src/core_write.cpp
achow101,2018-05-30T21:01:23Z,"I agree with @sipa and prefer to have the wallet prefix, especially because there will probably be a non-wallet version of those RPCs at some point in the future.\n\nI don't think psbt is really that ambiguous..",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191921586,191921586,src/rpc/client.cpp
achow101,2018-05-30T21:01:29Z,Removed,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191921609,191921609,src/wallet/rpcwallet.cpp
achow101,2018-05-30T21:01:33Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191921628,191921628,src/wallet/rpcwallet.cpp
achow101,2018-05-30T21:01:41Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191921665,191921665,test/functional/test_runner.py
kallewoof,2018-05-31T04:49:05Z,"In ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nTypo: `A_n_ structure`",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191988609,191988609,src/script/sign.h
kallewoof,2018-05-31T05:40:32Z,"In ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nNit: mis-aligned indentation. (remove 1 space I think?)",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191993851,191993851,src/script/sign.h
kallewoof,2018-05-31T05:48:31Z,"In ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nI think this (and other places where `Span` is used) would look less confusing if you did `s >> MakeSpan(val_bytes)`, since you are not using `value`, and it looks like the data is written to some unrelated thing (i.e. not `val_bytes`, but `value`). Not sure if that is possible though (it should be, if it isn't, but that'",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191994777,191994777,src/script/sign.h
kallewoof,2018-05-31T05:50:44Z,"Looks very generic, but I have no strong feelings about it (commit still has typo btw).",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191995031,191995031,src/script/sign.h
kallewoof,2018-05-31T05:51:37Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nTypo: ""A_n_ structure""",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191995129,191995129,src/script/sign.h
kallewoof,2018-05-31T05:53:03Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nNit: Mis-aligned indentation (delete 1 space?).",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191995286,191995286,src/script/sign.h
kallewoof,2018-05-31T05:54:31Z,"In commit ""Implement PSBT structures and un/serliazation methods per BIP 174"":\n\nThis is a little confusing because `value` is not actually used, even though it is streamed to. Can this simply be\n```C++\ns >> MakeSpan(val_bytes);\n```\n?\n\n(Several other places where this is done as well, IIRC.)",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191995420,191995420,src/script/sign.h
kallewoof,2018-05-31T06:00:30Z,"In commit ""Create RPCs for PSBT"":\n\nIndentation.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191996074,191996074,src/rpc/rawtransaction.cpp
kallewoof,2018-05-31T06:15:46Z,"In commit ""Create RPCs for PSBT"":\n\nTypo: an -> can",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191997916,191997916,src/wallet/rpcwallet.cpp
kallewoof,2018-05-31T06:17:27Z,"In commit ""Create RPCs for PSBT"":\n\nTypo: `wllets`",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191998160,191998160,src/wallet/rpcwallet.cpp
kallewoof,2018-05-31T06:22:29Z,"In commit ""Create RPCs for PSBT"":\n\nAdd space before `)`. Also some inconsistency (other methods do `(x y)` while this does `( x y)`.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r191998830,191998830,src/wallet/rpcwallet.cpp
laanwj,2018-05-31T13:50:31Z,"Should that be mentioned in the spec, then?",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192105577,192105577,src/wallet/rpcwallet.cpp
laanwj,2018-05-31T13:56:55Z,"Nit: avoid double lookup\n```c++\nauto it = mapSigHashTypes.find(sighash_type);\nif (it != mapSigHashTypes.end()) {\n    return it->second;\n}\n```",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192107741,192107741,src/core_write.cpp
laanwj,2018-05-31T13:57:57Z,+1 for wallet prefix. No naming opinions otherwise.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192108063,192108063,src/rpc/client.cpp
laanwj,2018-05-31T13:59:42Z,"- Any reason to not simply return the string here? It's always cleared, anyhow. ""Write"" implies append to me otherwise.\n- Function name is in snakecase, `WriteHDKeypath` would be more akin to the rest of our style.\n- Could  it be static?",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192108675,192108675,src/rpc/rawtransaction.cpp
laanwj,2018-05-31T14:03:30Z,"This wording is a bit confusing to me.\nMaybe ""The decoded network-serialized transaction. The layout is the same as the output of decoderawtransaction.""?\nAlso you forgot a `\n`",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192109932,192109932,src/rpc/rawtransaction.cpp
laanwj,2018-05-31T14:04:50Z,"Help message capitalization inconsistent for this, and ""address"" below.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192110391,192110391,src/rpc/rawtransaction.cpp
laanwj,2018-05-31T14:34:21Z,"would make sense to factor this out, to a function that converts a uint32_t to a LE vector of uint8_t.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192120693,192120693,src/rpc/rawtransaction.cpp
laanwj,2018-05-31T14:41:39Z,`}` on same line as `catch`,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192123288,192123288,src/rpc/rawtransaction.cpp
laanwj,2018-05-31T14:44:06Z,Do you really intend to update the `psbtx` in place here?,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192124131,192124131,src/rpc/rawtransaction.cpp
achow101,2018-05-31T18:48:41Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200553,192200553,src/script/sign.h
achow101,2018-05-31T18:48:45Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200572,192200572,src/script/sign.h
achow101,2018-05-31T18:49:03Z,Done here and everywhere else this happens.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200655,192200655,src/script/sign.h
achow101,2018-05-31T18:49:11Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200696,192200696,src/rpc/rawtransaction.cpp
achow101,2018-05-31T18:49:15Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200715,192200715,src/wallet/rpcwallet.cpp
achow101,2018-05-31T18:49:19Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200735,192200735,src/wallet/rpcwallet.cpp
achow101,2018-05-31T18:49:24Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200760,192200760,src/wallet/rpcwallet.cpp
achow101,2018-05-31T18:49:36Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200817,192200817,src/core_write.cpp
achow101,2018-05-31T18:49:41Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200843,192200843,src/rpc/rawtransaction.cpp
achow101,2018-05-31T18:49:46Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200869,192200869,src/rpc/rawtransaction.cpp
achow101,2018-05-31T18:49:50Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200892,192200892,src/rpc/rawtransaction.cpp
achow101,2018-05-31T18:49:55Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200912,192200912,src/rpc/rawtransaction.cpp
achow101,2018-05-31T18:49:59Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192200925,192200925,src/rpc/rawtransaction.cpp
achow101,2018-05-31T18:50:15Z,"Since entry is not a reference or a pointer, `psbtx` isn't actually modified.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192201005,192201005,src/rpc/rawtransaction.cpp
pedrobranco,2018-06-04T09:17:32Z,"> I think it's the other way around. Historically no RPCs had a wallet prefix, which led to a lot of confusion (e.g. gettransaction vs getrawtransaction).\n\nAgree on that. If all methods will be prefixed LGTM.\n\n",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192675166,192675166,src/rpc/client.cpp
promag,2018-06-04T22:48:34Z,"nit,\n```cpp\nconst auto& it = ",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192902270,192902270,src/core_write.cpp
promag,2018-06-04T22:49:39Z,"nit\n```cpp\nif (it == mapSigHashTypes.end()) return """";\nreturn it->second;",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192902439,192902439,src/core_write.cpp
promag,2018-06-04T22:56:06Z,s/psbt/PSBT?,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192903536,192903536,src/wallet/rpcwallet.cpp
promag,2018-06-04T22:58:45Z,"nit\n```cpp\n} catch (...) {",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192903999,192903999,src/wallet/rpcwallet.cpp
promag,2018-06-04T23:00:37Z,"I believe this can be removed, `get_str()` below will validate it.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192904312,192904312,src/rpc/rawtransaction.cpp
promag,2018-06-04T23:04:50Z,Use `ParseHexV` instead of `IsHex` + `ParseHex`?,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192904970,192904970,src/rpc/rawtransaction.cpp
promag,2018-06-05T00:06:28Z,"First check?\n```cpp\nif (a.tx.vin.size() != b.tx.vin.size() || a.tx.vout.size() != b.tx.vout.size()) return false;\n```\nOtherwise this allows `b` to have more in/outputs and if `b` has fewer then it oob.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192914383,192914383,src/script/sign.h
achow101,2018-06-05T04:58:37Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192945767,192945767,src/core_write.cpp
achow101,2018-06-05T04:58:42Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192945785,192945785,src/core_write.cpp
achow101,2018-06-05T04:58:46Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192945792,192945792,src/wallet/rpcwallet.cpp
achow101,2018-06-05T04:58:50Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192945795,192945795,src/wallet/rpcwallet.cpp
achow101,2018-06-05T04:59:00Z,I don't see the harm in leaving it.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192945810,192945810,src/rpc/rawtransaction.cpp
achow101,2018-06-05T04:59:04Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192945816,192945816,src/rpc/rawtransaction.cpp
achow101,2018-06-05T04:59:08Z,Done,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r192945823,192945823,src/script/sign.h
pedrobranco,2018-06-05T09:57:18Z,"Keep the code format consistent (other places without new lines before `return`). \n\nIMHO we should have some set of rules for code formatting (maybe a linter would be nice).",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r193014272,193014272,src/script/sign.cpp
achow101,2018-06-05T23:15:02Z,IMO this doesn't matter,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r193250135,193250135,src/script/sign.cpp
promag,2018-06-07T00:03:59Z,Missing change here and above.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r193594571,193594571,src/core_write.cpp
promag,2018-06-07T00:18:58Z,"Alternative\n```cpp\nreturn { uint8_t(in), uint8_t(in >> 8), uint8_t(in >> 16), uint8_t(in >> 24) };\n```",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r193596555,193596555,src/core_write.cpp
achow101,2018-06-07T18:24:35Z,"Whoops, should be fixed now.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r193845471,193845471,src/core_write.cpp
achow101,2018-06-07T18:25:15Z,I think it is more readable as it is now so I will leave it as is.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r193845671,193845671,src/core_write.cpp
sipa,2018-06-10T01:06:41Z,Why is this needed? Signing a TX_PUBKEY should always result in a full signature.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r194242552,194242552,src/script/sign.cpp
sipa,2018-06-10T01:06:54Z,Same here.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r194242556,194242556,src/script/sign.cpp
achow101,2018-06-10T01:19:58Z,A PSBT does not have to create the final scriptSig even when a complete set of signatures is available. The user has the option to not finalize the scriptSigs even when they can be.,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r194242720,194242720,src/script/sign.cpp
sipa,2018-06-10T01:34:57Z,"In that case you should also be able to deal with unfinalized signatures already present, and turn them into scriptSigs. In other words, you need to test whether sigdata.signatures contains a matching signature and reuse it. If that's the case, we're probably better off reintroducing SignatureDataSignatureCreator and SignatureDataSigningProvider, so these keys/script/signatures are automatically a",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r194242923,194242923,src/script/sign.cpp
araspitzu,2018-06-11T11:03:38Z,small typo: Make sure that we are using input indexes or this is the first input,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r194366112,194366112,src/script/sign.h
achow101,2018-06-11T19:08:37Z,"We should discuss this on the mailing list as it requires changing the BIP.\n\nFor now, I have added a helper function for createSig which fetches and places signatures to and from the SignatureData.",https://github.com/bitcoin/bitcoin/pull/12136#discussion_r194514771,194514771,src/script/sign.cpp
achow101,2018-06-11T19:17:08Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12136#discussion_r194516966,194516966,src/script/sign.h
