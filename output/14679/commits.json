[
  {
    "sha": "7afddfa8cefd01249ad59cf2370e7cec90b34f6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWZkZGZhOGNlZmQwMTI0OWFkNTljZjIzNzBlN2NlYzkwYjM0ZjZm",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-11-07T16:24:34Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-11-07T19:43:14Z"
      },
      "message": "importmulti: Don't add internal addresses to address book",
      "tree": {
        "sha": "7dc268f99b4205fe41c3fe684f8459bdf3e6c33c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dc268f99b4205fe41c3fe684f8459bdf3e6c33c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7afddfa8cefd01249ad59cf2370e7cec90b34f6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7afddfa8cefd01249ad59cf2370e7cec90b34f6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7afddfa8cefd01249ad59cf2370e7cec90b34f6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7afddfa8cefd01249ad59cf2370e7cec90b34f6f/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b8d0a2164b30eab76e7bccb1ffb056a10fba406",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8d0a2164b30eab76e7bccb1ffb056a10fba406",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b8d0a2164b30eab76e7bccb1ffb056a10fba406"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a3bb27323028505efc5593fdc366f76c279a675d",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7afddfa8cefd01249ad59cf2370e7cec90b34f6f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7afddfa8cefd01249ad59cf2370e7cec90b34f6f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7afddfa8cefd01249ad59cf2370e7cec90b34f6f",
        "patch": "@@ -994,8 +994,9 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding scriptPubKey script to wallet\");\n         }\n \n-        // add to address book or update label\n-        if (IsValidDestination(scriptpubkey_dest)) {\n+        // if not internal add to address book or update label\n+        if (!internal) {\n+            assert(IsValidDestination(scriptpubkey_dest));\n             pwallet->SetAddressBook(scriptpubkey_dest, label, \"receive\");\n         }\n \n@@ -1087,7 +1088,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"      \\\"witnessscript\\\": \\\"<script>\\\"                           , (string, optional) Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n-            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments\\n\"\n+            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments aka change\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address, only allowed with internal=false\\n\"\n             \"    }\\n\""
      },
      {
        "sha": "f2855b6e899c0183c044505c3022651c08e7777f",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7afddfa8cefd01249ad59cf2370e7cec90b34f6f/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7afddfa8cefd01249ad59cf2370e7cec90b34f6f/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=7afddfa8cefd01249ad59cf2370e7cec90b34f6f",
        "patch": "@@ -54,7 +54,7 @@ def run_test (self):\n \n         # RPC importmulti -----------------------------------------------\n \n-        # Bitcoin Address\n+        # Bitcoin Address (implicit non-internal)\n         self.log.info(\"Should import an address\")\n         address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n@@ -68,6 +68,7 @@ def run_test (self):\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n+        assert_equal(address_assert['ischange'], False)\n         watchonly_address = address['address']\n         watchonly_timestamp = timestamp\n \n@@ -95,6 +96,7 @@ def run_test (self):\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n+        assert_equal(address_assert['ischange'], True)\n \n         # ScriptPubKey + internal + label\n         self.log.info(\"Should not allow a label to be specified when internal is true\")\n@@ -126,15 +128,16 @@ def run_test (self):\n         assert_equal('timestamp' in address_assert, False)\n \n \n-        # Address + Public key + !Internal\n+        # Address + Public key + !Internal(explicit)\n         self.log.info(\"Should import an address with public key\")\n         address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n             \"timestamp\": \"now\",\n-            \"pubkeys\": [ address['pubkey'] ]\n+            \"pubkeys\": [ address['pubkey'] ],\n+            \"internal\": False\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(address['address'])"
      }
    ]
  }
]