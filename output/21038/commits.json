[
  {
    "sha": "6f6d7a54270e3cf1d31aa1fe51184799101a7806",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjZkN2E1NDI3MGUzY2YxZDMxYWExZmU1MTE4NDc5OTEwMWE3ODA2",
    "commit": {
      "author": {
        "name": "Founder Nur1Labs",
        "email": "FndNur1Labs@users.noreply.github.com",
        "date": "2021-01-30T14:13:25Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-01-30T14:13:25Z"
      },
      "message": "Merge pull request #1 from bitcoin/master\n\nFixed my personal desktop wallet",
      "tree": {
        "sha": "e4db3caebe2358d2791af8c2f7c65791900600c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4db3caebe2358d2791af8c2f7c65791900600c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f6d7a54270e3cf1d31aa1fe51184799101a7806",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFWmFCRBK7hj4Ov3rIwAAdHIIAJyjSelapYdYt6xE97gWVgZ5\n8A4EpehtLLpLo8e4pWtcT/IdKCC4/t99Wb6Hfgex0hDDa12JxLb+MMfMaErpJ+OI\n0oUOoE+Y/6qQbWkowTmLJNxfDu34X7P0lRvvkP/Caw5jIyBOLR8jwlTBlxrr7HuB\nffSpogDLnXcdR3MSnuApd9AN2rORx31M+QVoloqHabdF5OQpmn923/vsu0ANax4b\nwNcYLK2R+fE3zwCBQNd0eiVQFdq0dz2hHKuzqkmJFlDswq0h08NX5dnbKP/Kg9WC\nsv5MqwBWTuFtEHfVU4Pl6VsZEtzTwy0j7LmRrpxaZ4lc5cDQMtVkv91Hjaelhis=\n=SCuq\n-----END PGP SIGNATURE-----\n",
        "payload": "tree e4db3caebe2358d2791af8c2f7c65791900600c2\nparent ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4\nparent 16b784d953365bb2d7ae65acd2b20a79ef8ba7b6\nauthor Founder Nur1Labs <FndNur1Labs@users.noreply.github.com> 1612016005 +0700\ncommitter GitHub <noreply@github.com> 1612016005 +0700\n\nMerge pull request #1 from bitcoin/master\n\nFixed my personal desktop wallet"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f6d7a54270e3cf1d31aa1fe51184799101a7806",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f6d7a54270e3cf1d31aa1fe51184799101a7806",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f6d7a54270e3cf1d31aa1fe51184799101a7806/comments",
    "author": {
      "login": "FndNur1Labs",
      "id": 11433397,
      "node_id": "MDQ6VXNlcjExNDMzMzk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/11433397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FndNur1Labs",
      "html_url": "https://github.com/FndNur1Labs",
      "followers_url": "https://api.github.com/users/FndNur1Labs/followers",
      "following_url": "https://api.github.com/users/FndNur1Labs/following{/other_user}",
      "gists_url": "https://api.github.com/users/FndNur1Labs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FndNur1Labs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FndNur1Labs/subscriptions",
      "organizations_url": "https://api.github.com/users/FndNur1Labs/orgs",
      "repos_url": "https://api.github.com/users/FndNur1Labs/repos",
      "events_url": "https://api.github.com/users/FndNur1Labs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FndNur1Labs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4"
      },
      {
        "sha": "16b784d953365bb2d7ae65acd2b20a79ef8ba7b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16b784d953365bb2d7ae65acd2b20a79ef8ba7b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16b784d953365bb2d7ae65acd2b20a79ef8ba7b6"
      }
    ],
    "stats": {
      "total": 140438,
      "additions": 99708,
      "deletions": 40730
    },
    "files": [
      {
        "sha": "7250d4ad94955bdd77b52be7490e122173ea91f6",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 22,
        "deletions": 47,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -5,68 +5,43 @@ configuration: Release\n platform: x64\n clone_depth: 5\n environment:\n-  APPVEYOR_SAVE_CACHE_ON_ERROR: true\n-  CLCACHE_SERVER: 1\n   PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n   PYTHONUTF8: 1\n-  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.6/Qt5.9.8_x64_static_vs2019.zip'\n-  QT_DOWNLOAD_HASH: '9a8c6eb20967873785057fdcd329a657c7f922b0af08c5fde105cc597dd37e21'\n+  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/qt598x64_vs2019_v1681/qt598_x64_vs2019_1681.zip'\n+  QT_DOWNLOAD_HASH: '00cf7327818c07d74e0b1a4464ffe987c2728b00d49d4bf333065892af0515c3'\n   QT_LOCAL_PATH: 'C:\\Qt5.9.8_x64_static_vs2019'\n-  VCPKG_INSTALL_PATH: 'C:\\tools\\vcpkg\\installed'\n-  VCPKG_COMMIT_ID: 'ed0df8ecc4ed7e755ea03e18aaf285fd9b4b4a74'\n-cache:\n-- C:\\tools\\vcpkg\\installed -> build_msvc\\vcpkg-packages.txt\n-- C:\\Qt5.9.8_x64_static_vs2019\n+  VCPKG_TAG: '2020.11-1'\n install:\n # Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n # - cmd: pip install zmq\n-# Powershell block below is to install the c++ dependencies via vcpkg. The pseudo code is:\n-# 1. Check whether the vcpkg install directory exists (note that updating the vcpkg-packages.txt file\n-#    will cause the appveyor cache rules to invalidate the directory)\n-# 2. If the directory is missing:\n+# The powershell block below is to set up vcpkg to install the c++ dependencies. The pseudo code is:\n #    a. Checkout the vcpkg source (including port files) for the specific checkout and build the vcpkg binary,\n-#    b. Install the missing packages.\n+#    b. Append a setting to the vcpkg cmake config file to only do release builds of dependencies (skipping deubg builds saves ~5 mins).\n+# Note originally this block also installed the dependencies using 'vcpkg install'. Dependencies are now installed\n+# as part of the msbuild command using vcpkg mainfests.\n - ps: |\n-      $env:PACKAGES = Get-Content -Path build_msvc\\vcpkg-packages.txt\n-      Write-Host \"vcpkg list: $env:PACKAGES\"\n-      if(!(Test-Path -Path ($env:VCPKG_INSTALL_PATH))) {\n-          cd c:\\tools\\vcpkg\n-          $env:GIT_REDIRECT_STDERR = '2>&1' # git is writing non-errors to STDERR when doing git pull. Send to STDOUT instead.\n-          git pull origin master\n-          git checkout $env:VCPKG_COMMIT_ID\n-          .\\bootstrap-vcpkg.bat\n-          Add-Content \"C:\\tools\\vcpkg\\triplets\\$env:PLATFORM-windows-static.cmake\" \"set(VCPKG_BUILD_TYPE release)\"\n-          .\\vcpkg install --triplet $env:PLATFORM-windows-static $env:PACKAGES.split() > $null\n-          cd \"$env:APPVEYOR_BUILD_FOLDER\"\n-      }\n-      else {\n-        Write-Host \"required vcpkg packages already installed.\"\n-      }\n-      c:\\tools\\vcpkg\\vcpkg integrate install\n+      cd c:\\tools\\vcpkg\n+      $env:GIT_REDIRECT_STDERR = '2>&1' # git is writing non-errors to STDERR when doing git pull. Send to STDOUT instead.\n+      git -c advice.detachedHead=false checkout $env:VCPKG_TAG\n+      .\\bootstrap-vcpkg.bat > $null\n+      Add-Content \"C:\\tools\\vcpkg\\triplets\\$env:PLATFORM-windows-static.cmake\" \"set(VCPKG_BUILD_TYPE release)\"\n+      cd \"$env:APPVEYOR_BUILD_FOLDER\"\n before_build:\n # Powershell block below is to download and extract the Qt static libraries. The pseudo code is:\n-# 1. If the Qt destination directory exists assume it is correct and do nothing. To\n-#    force a fresh install of the packages delete the job's appveyor cache.\n-# 2. Otherwise:\n #    a. Download the zip file with the prebuilt Qt static libraries.\n #    b. Check that the downloaded file matches the expected hash.\n #    c. Extract the zip file to the specific destination path expected by the msbuild projects.\n - ps: |\n-      if(!(Test-Path -Path ($env:QT_LOCAL_PATH))) {\n-        Write-Host \"Downloading Qt binaries.\";\n-        Invoke-WebRequest -Uri $env:QT_DOWNLOAD_URL -Out qtdownload.zip;\n-        Write-Host \"Qt binaries successfully downloaded, checking hash against $env:QT_DOWNLOAD_HASH...\";\n-        if((Get-FileHash qtdownload.zip).Hash -eq $env:QT_DOWNLOAD_HASH) {\n-          Expand-Archive qtdownload.zip -DestinationPath $env:QT_LOCAL_PATH;\n-          Write-Host \"Qt binary download matched the expected hash.\";\n-        }\n-        else {\n-          Write-Host \"ERROR: Qt binary download did not match the expected hash.\";\n-          Exit-AppveyorBuild;\n-        }\n+      Write-Host \"Downloading Qt binaries.\";\n+      Invoke-WebRequest -Uri $env:QT_DOWNLOAD_URL -Out qtdownload.zip;\n+      Write-Host \"Qt binaries successfully downloaded, checking hash against $env:QT_DOWNLOAD_HASH...\";\n+      if((Get-FileHash qtdownload.zip).Hash -eq $env:QT_DOWNLOAD_HASH) {\n+        Expand-Archive qtdownload.zip -DestinationPath $env:QT_LOCAL_PATH;\n+        Write-Host \"Qt binary download matched the expected hash.\";\n       }\n       else {\n-         Write-Host \"Qt binaries already present.\";\n+        Write-Host \"ERROR: Qt binary download did not match the expected hash.\";\n+        Exit-AppveyorBuild;\n       }\n - cmd: python build_msvc\\msvc-autogen.py\n build_script:\n@@ -75,7 +50,7 @@ after_build:\n #- 7z a bitcoin-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\\build_msvc\\%platform%\\%configuration%\\*.exe\n test_script:\n - cmd: src\\test_bitcoin.exe -l test_suite\n-- cmd: src\\bench_bitcoin.exe -evals=1 -scaling=0 > NUL\n+- cmd: src\\bench_bitcoin.exe > NUL\n - ps:  python test\\util\\bitcoin-util-test.py\n - cmd: python test\\util\\rpcauth-test.py\n # Fee estimation test failing on appveyor with: WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted."
      },
      {
        "sha": "801164c368213dd6c096a89cba31aa7382693917",
        "filename": ".cirrus.yml",
        "status": "modified",
        "additions": 162,
        "deletions": 48,
        "changes": 210,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.cirrus.yml?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,33 +1,50 @@\n-task:\n-  name: \"FreeBsd 12.1 amd64  [GOAL: install]  [no depends, only system libs]\"\n-  freebsd_instance:\n-    image_family: freebsd-12-1  # https://cirrus-ci.org/guide/FreeBSD/\n-    cpu: 8\n-    memory: 8G\n-  timeout_in: 60m\n-  env:\n-    MAKEJOBS: \"-j9\"\n-    CONFIGURE_OPTS: \"--disable-dependency-tracking\"\n-    GOAL: \"install\"\n-    TEST_RUNNER_PORT_MIN: \"14000\"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache\n-    CCACHE_SIZE: \"200M\"\n-    CCACHE_COMPRESS: 1\n-    CCACHE_DIR: \"/tmp/ccache_dir\"\n+### Global defaults\n+\n+env:\n+  PACKAGE_MANAGER_INSTALL: \"apt-get update && apt-get install -y\"\n+  MAKEJOBS: \"-j4\"\n+  DANGER_RUN_CI_ON_HOST: \"1\"  # Containers will be discarded after the run, so there is no risk that the ci scripts modify the system\n+  TEST_RUNNER_PORT_MIN: \"14000\"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache\n+  CCACHE_SIZE: \"200M\"\n+  CCACHE_DIR: \"/tmp/ccache_dir\"\n+\n+# https://cirrus-ci.org/guide/tips-and-tricks/#sharing-configuration-between-tasks\n+base_template: &BASE_TEMPLATE\n+  skip: $CIRRUS_REPO_FULL_NAME == \"bitcoin-core/gui\" && $CIRRUS_PR == \"\"  # No need to run on the read-only mirror, unless it is a PR. https://cirrus-ci.org/guide/writing-tasks/#conditional-task-execution\n+  merge_base_script:\n+    - if [ \"$CIRRUS_PR\" = \"\" ]; then exit 0; fi\n+    - bash -c \"$PACKAGE_MANAGER_INSTALL git\"\n+    - git fetch $CIRRUS_REPO_CLONE_URL $CIRRUS_BASE_BRANCH\n+    - git config --global user.email \"ci@ci.ci\"\n+    - git config --global user.name \"ci\"\n+    - git merge FETCH_HEAD  # Merge base to detect silent merge conflicts\n+  stateful: false  # https://cirrus-ci.org/guide/writing-tasks/#stateful-tasks\n+\n+global_task_template: &GLOBAL_TASK_TEMPLATE\n+  << : *BASE_TEMPLATE\n+  timeout_in: 120m  # https://cirrus-ci.org/faq/#instance-timed-out\n+  container:\n+    # https://cirrus-ci.org/faq/#are-there-any-limits\n+    # Each project has 16 CPU in total, assign 2 to each container, so that 8 tasks run in parallel\n+    cpu: 2\n+    memory: 8G  # Set to 8GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-containers\n+    kvm: true  # Use kvm to avoid spurious CI failures in the default virtualization cluster, see https://github.com/bitcoin/bitcoin/issues/20093\n   ccache_cache:\n     folder: \"/tmp/ccache_dir\"\n-  install_script:\n-    - pkg install -y autoconf automake boost-libs git gmake libevent libtool pkgconf python3 ccache\n-    - ./contrib/install_db4.sh $(pwd)\n-    - ccache --max-size=${CCACHE_SIZE}\n-  configure_script:\n-    - ./autogen.sh\n-    - ./configure ${CONFIGURE_OPTS} BDB_LIBS=\"-L$(pwd)/db4/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I$(pwd)/db4/include\" || ( cat config.log && false)\n-  make_script:\n-    - gmake ${MAKEJOBS} ${GOAL} || ( echo \"Build failure. Verbose build follows.\" && gmake ${GOAL} V=1 ; false )\n-  check_script:\n-    - gmake check ${MAKEJOBS} VERBOSE=1\n-  functional_test_script:\n-    - ./test/functional/test_runner.py --jobs 9 --ci --extended --exclude feature_dbcrash --combinedlogslen=1000 --quiet --failfast\n+  depends_built_cache:\n+    folder: \"/tmp/cirrus-ci-build/depends/built\"\n+  depends_sdk_cache:\n+    folder: \"/tmp/cirrus-ci-build/depends/sdk-sources\"\n+  depends_releases_cache:\n+    folder: \"/tmp/cirrus-ci-build/releases\"\n+  ci_script:\n+    - ./ci/test_run_all.sh\n+\n+compute_credits_template: &CREDITS_TEMPLATE\n+  # https://cirrus-ci.org/pricing/#compute-credits\n+  # Only use credits for pull requests to the main repo\n+  use_compute_credits: $CIRRUS_REPO_FULL_NAME == 'bitcoin/bitcoin' && $CIRRUS_PR != \"\"\n+\n #task:\n #  name: \"Windows\"\n #  windows_container:\n@@ -43,26 +60,123 @@ task:\n #    VCPKG_COMMIT_ID: 'ed0df8ecc4ed7e755ea03e18aaf285fd9b4b4a74'\n #  install_script:\n #    - choco install python --version=3.7.7 -y\n+\n+task:\n+  name: 'lint [bionic]'\n+  << : *BASE_TEMPLATE\n+  container:\n+    image: ubuntu:bionic  # For python 3.6, oldest supported version according to doc/dependencies.md\n+    cpu: 1\n+    memory: 1G\n+  # For faster CI feedback, immediately schedule the linters\n+  << : *CREDITS_TEMPLATE\n+  lint_script:\n+    - ./ci/lint_run_all.sh\n+\n task:\n-  name: \"x86_64 Linux  [GOAL: install]  [bionic]  [Using ./ci/ system]\"\n+  name: 'ARM [unit tests, no functional tests] [buster]'\n+  << : *GLOBAL_TASK_TEMPLATE\n   container:\n-    image: ubuntu:18.04\n-    cpu: 8\n-    memory: 8G\n-  timeout_in: 60m\n+    image: debian:buster\n   env:\n-    MAKEJOBS: \"-j9\"\n-    DANGER_RUN_CI_ON_HOST: \"1\"\n-    TEST_RUNNER_PORT_MIN: \"14000\"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache\n-    CCACHE_SIZE: \"200M\"\n-    CCACHE_DIR: \"/tmp/ccache_dir\"\n-  ccache_cache:\n-    folder: \"/tmp/ccache_dir\"\n-  depends_built_cache:\n-    folder: \"/tmp/cirrus-ci-build/depends/built\"\n-  install_script:\n-    - apt-get update\n-    - apt-get -y install git bash ccache\n-    - ccache --max-size=${CCACHE_SIZE}\n-  ci_script:\n-    - ./ci/test_run_all.sh\n+    FILE_ENV: \"./ci/test/00_setup_env_arm.sh\"\n+\n+task:\n+  name: 'Win64 [unit tests, no gui tests, no boost::process, no functional tests] [bionic]'\n+  << : *GLOBAL_TASK_TEMPLATE\n+  container:\n+    image: ubuntu:bionic\n+  env:\n+    FILE_ENV: \"./ci/test/00_setup_env_win64.sh\"\n+\n+task:\n+  name: '32-bit + dash [gui] [CentOS 8]'\n+  << : *GLOBAL_TASK_TEMPLATE\n+  container:\n+    image: centos:8\n+  env:\n+    PACKAGE_MANAGER_INSTALL: \"yum install -y\"\n+    FILE_ENV: \"./ci/test/00_setup_env_i686_centos.sh\"\n+\n+task:\n+  name: '[previous releases, uses qt5 dev package and some depends packages] [unsigned char] [bionic]'\n+  # For faster CI feedback, immediately schedule a task that compiles most modules\n+  << : *CREDITS_TEMPLATE\n+  << : *GLOBAL_TASK_TEMPLATE\n+  container:\n+    image: ubuntu:bionic\n+  env:\n+    FILE_ENV: \"./ci/test/00_setup_env_native_qt5.sh\"\n+\n+task:\n+  name: '[depends, sanitizers: thread (TSan), no gui] [focal]'\n+  << : *GLOBAL_TASK_TEMPLATE\n+  container:\n+    image: ubuntu:focal\n+    cpu: 4  # Double CPU and increase Memory to avoid timeout\n+    memory: 24G\n+  env:\n+    MAKEJOBS: \"-j8\"\n+    FILE_ENV: \"./ci/test/00_setup_env_native_tsan.sh\"\n+\n+task:\n+  name: '[depends, sanitizers: memory (MSan)] [focal]'\n+  << : *GLOBAL_TASK_TEMPLATE\n+  container:\n+    image: ubuntu:focal\n+  env:\n+    FILE_ENV: \"./ci/test/00_setup_env_native_msan.sh\"\n+\n+task:\n+  name: '[no depends, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer] [focal]'\n+  << : *GLOBAL_TASK_TEMPLATE\n+  container:\n+    image: ubuntu:focal\n+  env:\n+    FILE_ENV: \"./ci/test/00_setup_env_native_asan.sh\"\n+\n+task:\n+  name: '[no depends, sanitizers: fuzzer,address,undefined,integer] [focal]'\n+  << : *GLOBAL_TASK_TEMPLATE\n+  container:\n+    image: ubuntu:focal\n+  env:\n+    FILE_ENV: \"./ci/test/00_setup_env_native_fuzz.sh\"\n+\n+task:\n+  name: '[multiprocess] [focal]'\n+  << : *GLOBAL_TASK_TEMPLATE\n+  container:\n+    image: ubuntu:focal\n+  env:\n+    FILE_ENV: \"./ci/test/00_setup_env_native_multiprocess.sh\"\n+\n+task:\n+  name: '[no wallet] [bionic]'\n+  << : *GLOBAL_TASK_TEMPLATE\n+  container:\n+    image: ubuntu:bionic\n+  env:\n+    FILE_ENV: \"./ci/test/00_setup_env_native_nowallet.sh\"\n+\n+task:\n+  name: 'macOS 10.14 [gui, no tests] [bionic]'\n+  << : *GLOBAL_TASK_TEMPLATE\n+  container:\n+    image: ubuntu:bionic\n+  env:\n+    FILE_ENV: \"./ci/test/00_setup_env_mac.sh\"\n+\n+task:\n+  name: 'macOS 10.15 native [gui] [no depends]'\n+  macos_brew_addon_script:\n+    - brew install boost libevent berkeley-db4 qt miniupnpc libnatpmp ccache zeromq qrencode sqlite libtool automake pkg-config gnu-getopt\n+  << : *GLOBAL_TASK_TEMPLATE\n+  osx_instance:\n+    # Use latest image, but hardcode version to avoid silent upgrades (and breaks)\n+    image: catalina-xcode-12.1  # https://cirrus-ci.org/guide/macOS\n+  env:\n+    DANGER_RUN_CI_ON_HOST: \"true\"\n+    CI_USE_APT_INSTALL: \"no\"\n+    PACKAGE_MANAGER_INSTALL: \"echo\"  # Nothing to do\n+    FILE_ENV: \"./ci/test/00_setup_env_mac_host.sh\""
      },
      {
        "sha": "be9a1cd4e12e893e36c491ce060b688bbb182b72",
        "filename": ".fuzzbuzz.yml",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.fuzzbuzz.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.fuzzbuzz.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.fuzzbuzz.yml?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,16 @@\n+base: ubuntu:16.04\n+language: c++\n+engine: libFuzzer\n+environment:\n+  - CXXFLAGS=-fcoverage-mapping -fno-omit-frame-pointer -fprofile-instr-generate -gline-tables-only -O1\n+setup:\n+  - sudo apt-get update\n+  - sudo apt-get install -y autoconf bsdmainutils clang git libboost-all-dev libc++1 libc++abi1 libc++abi-dev libc++-dev libclang1 libclang-dev libdb5.3++ libevent-dev libllvm-ocaml-dev libomp5 libomp-dev libqt5core5a libqt5dbus5 libqt5gui5 libtool llvm llvm-dev llvm-runtime pkg-config qttools5-dev qttools5-dev-tools software-properties-common\n+  - ./autogen.sh\n+  - CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined --enable-danger-fuzz-link-all\n+  - make\n+  - git clone https://github.com/bitcoin-core/qa-assets\n+auto_targets:\n+  find_targets_command: find src/test/fuzz/ -executable -type f ! -name \"*.cpp\" ! -name \"*.h\"\n+  base_corpus_dir: qa-assets/fuzz_seed_corpus/\n+  memory_limit: none"
      },
      {
        "sha": "eedeeb4e54c58c80ca730dfcefe2c1f5da05c9e6",
        "filename": ".github/ISSUE_TEMPLATE.md",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.github/ISSUE_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.github/ISSUE_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -4,7 +4,11 @@ General bitcoin questions and/or support requests are best directed to the Bitco\n \n For reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\n \n-If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\n+If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue!\n+\n+Any report, issue or feature request related to the GUI should be reported at\n+https://github.com/bitcoin-core/gui/issues/\n+-->\n \n <!-- Describe the issue -->\n <!--- What behavior did you expect? -->"
      },
      {
        "sha": "d32e22d36079ab27228ab036aafe006d26b9c4ce",
        "filename": ".github/ISSUE_TEMPLATE/good_first_issue.md",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.github/ISSUE_TEMPLATE/good_first_issue.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.github/ISSUE_TEMPLATE/good_first_issue.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE/good_first_issue.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -2,20 +2,21 @@\n name: Good first issue\n about: '(Regular devs only): Suggest a new good first issue'\n title: ''\n-labels: good first issue\n+labels: ''\n assignees: ''\n \n ---\n \n+<!-- Needs the label \"good first issue\" assigned manually before or after opening -->\n+\n+<!-- A good first issue is an uncontroversial issue, that has a relatively unique and obvious solution -->\n+\n+<!-- Motivate the issue and explain the solution briefly -->\n \n #### Useful skills:\n \n <!-- (For example, \u201cC++11 std::thread\u201d, \u201cQt5 GUI and async GUI design\u201d or \u201cbasic understanding of Bitcoin mining and the Bitcoin Core RPC interface\u201d.) -->\n \n #### Want to work on this issue?\n \n-The purpose of the `good first issue` label is to highlight which issues are suitable for a new contributor without a deep understanding of the codebase.\n-\n-You do not need to request permission to start working on this. You are encouraged to comment on the issue if you are planning to work on it. This will help other contributors monitor which issues are actively being addressed and is also an effective way to request assistance if and when you need it.\n-\n For guidance on contributing, please read [CONTRIBUTING.md](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md) before opening your pull request."
      },
      {
        "sha": "37acc81e21e6c9e49a89623e016bb6df7002cba6",
        "filename": ".github/ISSUE_TEMPLATE/gui_issue.md",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.github/ISSUE_TEMPLATE/gui_issue.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.github/ISSUE_TEMPLATE/gui_issue.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE/gui_issue.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,11 @@\n+---\n+name: An issue or feature request related to the GUI\n+about: Any report, issue or feature request related to the GUI should be reported at https://github.com/bitcoin-core/gui/issues/\n+title: Any report, issue or feature request related to the GUI should be reported at https://github.com/bitcoin-core/gui/issues/\n+labels: GUI\n+assignees: ''\n+\n+---\n+\n+Any report, issue or feature request related to the GUI should be reported at\n+https://github.com/bitcoin-core/gui/issues/"
      },
      {
        "sha": "ae92fc78f2d1cf342d4eb9439d9a0ff91d9092b4",
        "filename": ".github/PULL_REQUEST_TEMPLATE.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.github/PULL_REQUEST_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.github/PULL_REQUEST_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/PULL_REQUEST_TEMPLATE.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -3,6 +3,10 @@\n \n Pull requests without a rationale and clear improvement may be closed\n immediately.\n+\n+GUI-related pull requests should be opened against\n+https://github.com/bitcoin-core/gui\n+first. See CONTRIBUTING.md\n -->\n \n <!--"
      },
      {
        "sha": "010586ee5a29358413adbfeb7e44a4713beda0b2",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -5,9 +5,12 @@\n src/bitcoin\n src/bitcoind\n src/bitcoin-cli\n+src/bitcoin-gui\n+src/bitcoin-node\n src/bitcoin-tx\n+src/bitcoin-util\n src/bitcoin-wallet\n-src/test/fuzz\n+src/test/fuzz/*\n !src/test/fuzz/*.*\n src/test/test_bitcoin\n src/qt/test/test_bitcoin-qt\n@@ -74,6 +77,7 @@ src/qt/bitcoin-qt.includes\n *.log\n *.trs\n *.dmg\n+*.iso\n \n *.json.h\n *.raw.h\n@@ -117,14 +121,18 @@ releases\n /*.info\n test_bitcoin.coverage/\n total.coverage/\n+fuzz.coverage/\n coverage_percent.txt\n+/cov_tool_wrapper.sh\n+qa-assets/\n \n #build tests\n linux-coverage-build\n linux-build\n win32-build\n test/config.ini\n test/cache/*\n+test/.mypy_cache/\n \n !src/leveldb*/Makefile\n "
      },
      {
        "sha": "8b7b0b52e55c33b0447d3fd1c564c8b7b4a42ed5",
        "filename": ".python-version",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.python-version",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.python-version",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.python-version?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1 +1 @@\n-3.5.6\n+3.6.12"
      },
      {
        "sha": "63e502cc3e43612da6b9e2e0bf9020f0cc0c5fcb",
        "filename": ".travis.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 199,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,199 +0,0 @@\n-# The test build matrix (stage: test) is constructed to test a wide range of\n-# configurations, rather than a single pass/fail. This helps to catch build\n-# failures and logic errors that present on platforms other than the ones the\n-# author has tested.\n-#\n-# Some builders use the dependency-generator in `./depends`, rather than using\n-# apt-get to install build dependencies. This guarantees that the tester is\n-# using the same versions as Gitian, so the build results are nearly identical\n-# to what would be found in a final release.\n-#\n-# In order to avoid rebuilding all dependencies for each build, the binaries\n-# are cached and re-used when possible. Changes in the dependency-generator\n-# will trigger cache-invalidation and rebuilds as necessary.\n-#\n-# These caches can be manually removed if necessary. This is one of the very\n-# few manual operations that is possible with Travis, and it can be done by a\n-# Bitcoin Core GitHub member via the Travis web interface [0].\n-#\n-# Travis CI uploads the cache after the script phase of the build [1].\n-# However, the build is terminated without saving the cache if it takes over\n-# 50 minutes [2]. Thus, if we spent too much time in early build stages, fail\n-# with an error and save the cache.\n-#\n-# [0] https://travis-ci.org/bitcoin/bitcoin/caches\n-# [1] https://docs.travis-ci.com/user/caching/#build-phases\n-# [2] https://docs.travis-ci.com/user/customizing-the-build#build-timeouts\n-\n-version: ~> 1.0\n-\n-dist: xenial\n-os: linux\n-language: minimal\n-arch: amd64\n-cache:\n-  ccache: true\n-  directories:\n-    - $TRAVIS_BUILD_DIR/depends/built\n-    - $TRAVIS_BUILD_DIR/depends/sdk-sources\n-    - $TRAVIS_BUILD_DIR/ci/scratch/.ccache\n-    - $TRAVIS_BUILD_DIR/releases/$HOST\n-before_cache:\n-  - if [ \"${TRAVIS_OS_NAME}\" = \"osx\" ]; then brew cleanup; fi\n-stages:\n-  - lint\n-  - test\n-env:\n-  global:\n-    - CI_RETRY_EXE=\"travis_retry\"\n-    - CI_WAIT=\"while sleep 500; do echo .; done\"\n-    - CACHE_ERR_MSG=\"Error! Initial build successful, but not enough time remains to run later build stages and tests. See https://docs.travis-ci.com/user/customizing-the-build#build-timeouts . Please manually re-run this job by using the travis restart button. The next run should not time out because the build cache has been saved.\"\n-before_install:\n-  - set -o errexit; source ./ci/test/00_setup_env.sh\n-  - set -o errexit; source ./ci/test/03_before_install.sh\n-install:\n-  - set -o errexit; source ./ci/test/04_install.sh\n-before_script:\n-  - set -o errexit; source ./ci/test/05_before_script.sh\n-script:\n-  - export CONTINUE=1\n-  - if [ $SECONDS -gt 1200 ]; then export CONTINUE=0; fi  # Likely the depends build took very long\n-  - if [ $TRAVIS_REPO_SLUG = \"bitcoin/bitcoin\" ]; then export CONTINUE=1; fi  # Whitelisted repo (90 minutes build time)\n-  - if [ $CONTINUE = \"1\" ]; then set -o errexit; source ./ci/test/06_script_a.sh; else set +o errexit; echo \"$CACHE_ERR_MSG\"; false; fi\n-  - if [ $SECONDS -gt 2000 ]; then export CONTINUE=0; fi  # Likely the build took very long; The tests take about 1000s, so we should abort if we have less than 50*60-1000=2000s left\n-  - if [ $TRAVIS_REPO_SLUG = \"bitcoin/bitcoin\" ]; then export CONTINUE=1; fi  # Whitelisted repo (90 minutes build time)\n-  - if [ $CONTINUE = \"1\" ]; then set -o errexit; source ./ci/test/06_script_b.sh; else set +o errexit; echo \"$CACHE_ERR_MSG\"; false; fi\n-after_script:\n-  - echo $TRAVIS_COMMIT_RANGE\n-jobs:\n-  include:\n-\n-    - stage: lint\n-      name: 'lint'\n-      env:\n-      cache: pip\n-      language: python\n-      python: '3.5' # Oldest supported version according to doc/dependencies.md\n-      install:\n-        - set -o errexit; source ./ci/lint/04_install.sh\n-      before_script:\n-        - set -o errexit; source ./ci/lint/05_before_script.sh\n-      script:\n-        - set -o errexit; source ./ci/lint/06_script.sh\n-\n-    - stage: test\n-      name: 'ARM  [GOAL: install]  [buster]  [unit tests, functional tests]'\n-      arch: arm64  # Can disable QEMU_USER_CMD and run the tests natively without qemu\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_arm.sh\"\n-        QEMU_USER_CMD=\"\"\n-\n-    - stage: test\n-      name: 's390x native BE [GOAL: install] [bionic] [no depends, no GUI]'\n-      arch: s390x\n-      dist: bionic\n-      addons:\n-        apt:\n-          packages:\n-            - bsdmainutils\n-            - libboost-filesystem-dev\n-            - libboost-system-dev\n-            - libboost-test-dev\n-            - libboost-thread-dev\n-            - libdb++-dev\n-            - libdb-dev\n-            - libevent-dev\n-      env: >-\n-        DANGER_RUN_CI_ON_HOST=true\n-        CI_USE_APT_INSTALL=no\n-        FILE_ENV=\"./ci/test/00_setup_env_s390x_host.sh\"\n-\n-# s390 build was disabled temporarily because of disk space issues on the Travis VM\n-#\n-#    - stage: test\n-#      name: 'S390x  [GOAL: install]  [buster]  [unit tests, functional tests]'\n-#      arch: s390x  # Can disable QEMU_USER_CMD and run the tests natively without qemu\n-#      env: >-\n-#        FILE_ENV=\"./ci/test/00_setup_env_s390x.sh\"\n-#        QEMU_USER_CMD=\"\"\n-\n-    - stage: test\n-      name: 'Win64  [GOAL: deploy]  [unit tests, no gui, no functional tests]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_win64.sh\"\n-\n-    - stage: test\n-      name: '32-bit + dash  [GOAL: install]  [CentOS 7]  [gui]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_i686_centos.sh\"\n-\n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [C++17, previous releases, uses qt5 dev package and some depends packages] [unsigned char]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_qt5.sh\"\n-\n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_tsan.sh\"\n-        TEST_RUNNER_EXTRA=\"--exclude feature_block\"  # Not enough memory on travis machines\n-\n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_asan.sh\"\n-\n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, valgrind]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_valgrind.sh\"\n-\n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [focal]  [no depends, only system libs, sanitizers: fuzzer,address,undefined]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_fuzz.sh\"\n-\n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [focal]  [no depends, only system libs, fuzzers under valgrind]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_fuzz_with_valgrind.sh\"\n-\n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_nowallet.sh\"\n-\n-    - stage: test\n-      name: 'macOS 10.12  [GOAL: deploy] [no functional tests]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_mac.sh\"\n-\n-    - stage: test\n-      name: 'macOS 10.14 native [GOAL: install] [GUI] [no depends]'\n-      os: osx\n-      # Use the most recent version:\n-      # Xcode 11.3.1, macOS 10.14, SDK 10.15\n-      # https://docs.travis-ci.com/user/reference/osx/#macos-version\n-      osx_image: xcode11.3\n-      cache:\n-        directories:\n-          - $TRAVIS_BUILD_DIR/ci/scratch/.ccache\n-          - $TRAVIS_BUILD_DIR/releases/$HOST\n-          - $HOME/Library/Caches/Homebrew\n-          - /usr/local/Homebrew\n-      addons:\n-        homebrew:\n-          packages:\n-          - libtool\n-          - berkeley-db4\n-          - boost\n-          - miniupnpc\n-          - qt\n-          - qrencode\n-          - python3\n-          - ccache\n-          - zeromq\n-      env: >-\n-        DANGER_RUN_CI_ON_HOST=true\n-        CI_USE_APT_INSTALL=no\n-        FILE_ENV=\"./ci/test/00_setup_env_mac_host.sh\""
      },
      {
        "sha": "86b517a6120ccf7036aef3e1bea936612cc5b3b0",
        "filename": ".tx/config",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.tx/config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/.tx/config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.tx/config?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,7 +1,7 @@\n [main]\n host = https://www.transifex.com\n \n-[bitcoin.qt-translation-020x]\n+[bitcoin.qt-translation-021x]\n file_filter = src/qt/locale/bitcoin_<lang>.ts\n source_file = src/qt/locale/bitcoin_en.ts\n source_lang = en"
      },
      {
        "sha": "2e114743822562f45432d1f9f634eec70e49022a",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 125,
        "deletions": 51,
        "changes": 176,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -6,42 +6,77 @@ welcome to contribute towards development in the form of peer review, testing\n and patches. This document explains the practical process and guidelines for\n contributing.\n \n-Firstly in terms of structure, there is no particular concept of \"Core\n+First, in terms of structure, there is no particular concept of \"Bitcoin Core\n developers\" in the sense of privileged people. Open source often naturally\n-revolves around meritocracy where longer term contributors gain more trust from\n-the developer community. However, some hierarchy is necessary for practical\n-purposes. As such there are repository \"maintainers\" who are responsible for\n-merging pull requests as well as a \"lead maintainer\" who is responsible for the\n-release cycle, overall merging, moderation and appointment of maintainers.\n+revolves around a meritocracy where contributors earn trust from the developer\n+community over time. Nevertheless, some hierarchy is necessary for practical\n+purposes. As such, there are repository \"maintainers\" who are responsible for\n+merging pull requests, as well as a \"lead maintainer\" who is responsible for the\n+release cycle as well as overall merging, moderation and appointment of\n+maintainers.\n \n+Getting Started\n+---------------\n+\n+New contributors are very welcome and needed.\n+\n+Reviewing and testing is highly valued and the most effective way you can contribute\n+as a new contributor. It also will teach you much more about the code and\n+process than opening pull requests. Please refer to the [peer review](#peer-review)\n+section below.\n+\n+Before you start contributing, familiarize yourself with the Bitcoin Core build\n+system and tests. Refer to the documentation in the repository on how to build\n+Bitcoin Core and how to run the unit tests, functional tests, and fuzz tests.\n+\n+There are many open issues of varying difficulty waiting to be fixed.\n If you're looking for somewhere to start contributing, check out the\n [good first issue](https://github.com/bitcoin/bitcoin/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22)\n-list or participate in a weekly [Bitcoin Core PR Review Club](https://bitcoincore.reviews/) meeting.\n+list or changes that are\n+[up for grabs](https://github.com/bitcoin/bitcoin/issues?utf8=%E2%9C%93&q=label%3A%22Up+for+grabs%22).\n+Some of them might no longer be applicable. So if you are interested, but\n+unsure, you might want to leave a comment on the issue first.\n+\n+You may also participate in the weekly\n+[Bitcoin Core PR Review Club](https://bitcoincore.reviews/) meeting.\n+\n+### Good First Issue Label\n+\n+The purpose of the `good first issue` label is to highlight which issues are\n+suitable for a new contributor without a deep understanding of the codebase.\n+\n+However, good first issues can be solved by anyone. If they remain unsolved\n+for a longer time, a frequent contributor might address them.\n+\n+You do not need to request permission to start working on an issue. However,\n+you are encouraged to leave a comment if you are planning to work on it. This\n+will help other contributors monitor which issues are actively being addressed\n+and is also an effective way to request assistance if and when you need it.\n \n Communication Channels\n ----------------------\n \n Most communication about Bitcoin Core development happens on IRC, in the\n-#bitcoin-core-dev channel on Freenode. The easiest way to participate on IRC is\n+`#bitcoin-core-dev` channel on Freenode. The easiest way to participate on IRC is\n with the web client, [webchat.freenode.net](https://webchat.freenode.net/). Chat\n history logs can be found\n on [http://www.erisian.com.au/bitcoin-core-dev/](http://www.erisian.com.au/bitcoin-core-dev/)\n and [http://gnusha.org/bitcoin-core-dev/](http://gnusha.org/bitcoin-core-dev/).\n \n-Discussion about code base improvements happens in GitHub issues and on pull\n+Discussion about codebase improvements happens in GitHub issues and pull\n requests.\n \n The developer\n [mailing list](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev)\n-should be used to discuss complicated or controversial changes before working on\n+should be used to discuss complicated or controversial consensus or P2P protocol changes before working on\n a patch set.\n \n \n Contributor Workflow\n --------------------\n \n The codebase is maintained using the \"contributor workflow\" where everyone\n-without exception contributes patch proposals using \"pull requests\". This\n+without exception contributes patch proposals using \"pull requests\" (PRs). This\n facilitates social contribution, easy testing and peer review.\n \n To contribute a patch, the workflow is as follows:\n@@ -50,13 +85,38 @@ To contribute a patch, the workflow is as follows:\n   1. Create topic branch\n   1. Commit patches\n \n+For GUI-related issues or pull requests, the https://github.com/bitcoin-core/gui repository should be used.\n+For all other issues and pull requests, the https://github.com/bitcoin/bitcoin node repository should be used.\n+\n+The master branch for all monotree repositories is identical.\n+\n+As a rule of thumb, everything that only modifies `src/qt` is a GUI-only pull\n+request. However:\n+\n+* For global refactoring or other transversal changes the node repository\n+  should be used.\n+* For GUI-related build system changes, the node repository should be used\n+  because the change needs review by the build systems reviewers.\n+* Changes in `src/interfaces` need to go to the node repository because they\n+  might affect other components like the wallet.\n+\n+For large GUI changes that include build system and interface changes, it is\n+recommended to first open a pull request against the GUI repository. When there\n+is agreement to proceed with the changes, a pull request with the build system\n+and interfaces changes can be submitted to the node repository.\n+\n The project coding conventions in the [developer notes](doc/developer-notes.md)\n must be followed.\n \n+### Committing Patches\n+\n In general, [commits should be atomic](https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention)\n and diffs should be easy to read. For this reason, do not mix any formatting\n fixes or code moves with actual code changes.\n \n+Make sure each individual commit is hygienic: that it builds successfully on its\n+own without warnings, errors, regressions, or test failures.\n+\n Commit messages should be verbose by default consisting of a short subject line\n (50 chars max), a blank line and detailed explanatory text as separate\n paragraph(s), unless the title alone is self-explanatory (like \"Corrected typo\n@@ -68,14 +128,16 @@ If a particular commit references another issue, please add the reference. For\n example: `refs #1234` or `fixes #4321`. Using the `fixes` or `closes` keywords\n will cause the corresponding issue to be closed when the pull request is merged.\n \n-Commit messages should never contain any `@` mentions.\n+Commit messages should never contain any `@` mentions (usernames prefixed with \"@\").\n \n Please refer to the [Git manual](https://git-scm.com/doc) for more information\n about Git.\n \n   - Push changes to your fork\n   - Create pull request\n \n+### Creating the Pull Request\n+\n The title of the pull request should be prefixed by the component or area that\n the pull request affects. Valid areas as:\n \n@@ -96,22 +158,34 @@ the pull request affects. Valid areas as:\n Examples:\n \n     consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n-    net: Automatically create hidden service, listen on Tor\n+    net: Automatically create onion service, listen on Tor\n     qt: Add feed bump button\n     log: Fix typo in log message\n \n+The body of the pull request should contain sufficient description of *what* the\n+patch does, and even more importantly, *why*, with justification and reasoning.\n+You should include references to any discussions (for example, other issues or\n+mailing list discussions).\n+\n+The description for a new pull request should not contain any `@` mentions. The\n+PR description will be included in the commit message when the PR is merged and\n+any users mentioned in the description will be annoyingly notified each time a\n+fork of Bitcoin Core copies the merge. Instead, make any username mentions in a\n+subsequent comment to the PR.\n+\n+### Translation changes\n+\n Note that translations should not be submitted as pull requests. Please see\n [Translation Process](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md)\n for more information on helping with translations.\n \n+### Work in Progress Changes and Requests for Comments\n+\n If a pull request is not to be considered for merging (yet), please\n prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists)\n in the body of the pull request to indicate tasks are pending.\n \n-The body of the pull request should contain enough description about what the\n-patch does together with any justification/reasoning. You should include\n-references to any discussions (for example other tickets or mailing list\n-discussions).\n+### Address Feedback\n \n At this stage, one should expect comments and review from other contributors. You\n can add more commits to your pull request by committing them locally and pushing\n@@ -133,13 +207,13 @@ before it will be merged. The basic squashing workflow is shown below.\n     # Save and quit.\n     git push -f # (force push to GitHub)\n \n-Please update the resulting commit message if needed. It should read as a\n-coherent message. In most cases, this means that you should not just list the\n-interim commits.\n+Please update the resulting commit message, if needed. It should read as a\n+coherent message. In most cases, this means not just listing the interim\n+commits.\n \n-If you have problems with squashing (or other workflows with `git`), you can\n-alternatively enable \"Allow edits from maintainers\" in the right GitHub\n-sidebar and ask for help in the pull request.\n+If you have problems with squashing or other git workflows, you can enable\n+\"Allow edits from maintainers\" in the right-hand sidebar of the GitHub web\n+interface and ask for help in the pull request.\n \n Please refrain from creating several pull requests for the same change.\n Use the pull request that is already open (or was created earlier) to amend\n@@ -223,8 +297,8 @@ In general, all pull requests must:\n \n   - Have a clear use case, fix a demonstrable bug or serve the greater good of\n     the project (for example refactoring for modularisation);\n-  - Be well peer reviewed;\n-  - Have unit tests and functional tests where appropriate;\n+  - Be well peer-reviewed;\n+  - Have unit tests, functional tests, and fuzz tests, where appropriate;\n   - Follow code style guidelines ([C++](doc/developer-notes.md), [functional tests](test/functional/README.md));\n   - Not break the existing test suite;\n   - Where bugs are fixed, where possible, there should be unit tests\n@@ -251,7 +325,7 @@ spread out over GitHub, mailing list and IRC discussions).\n #### Conceptual Review\n \n A review can be a conceptual review, where the reviewer leaves a comment\n- * `Concept (N)ACK`, meaning \"I do (not) agree in the general goal of this pull\n+ * `Concept (N)ACK`, meaning \"I do (not) agree with the general goal of this pull\n    request\",\n  * `Approach (N)ACK`, meaning `Concept ACK`, but \"I do (not) agree with the\n    approach of this change\".\n@@ -261,30 +335,28 @@ NACKs without accompanying reasoning may be disregarded.\n \n #### Code Review\n \n-After conceptual agreement on the change, code review can be provided. It is\n-starting with `ACK BRANCH_COMMIT`, where `BRANCH_COMMIT` is the top of the\n-topic branch. The review is followed by a description of how the reviewer did\n-the review. The following\n-language is used within pull-request comments:\n+After conceptual agreement on the change, code review can be provided. A review\n+begins with `ACK BRANCH_COMMIT`, where `BRANCH_COMMIT` is the top of the PR\n+branch, followed by a description of how the reviewer did the review. The\n+following language is used within pull request comments:\n \n-  - \"I have tested the code\", involving\n-    change-specific manual testing in addition to running the unit and functional\n-    tests, and in case it is not obvious how the manual testing was done, it should\n-    be described;\n+  - \"I have tested the code\", involving change-specific manual testing in\n+    addition to running the unit, functional, or fuzz tests, and in case it is\n+    not obvious how the manual testing was done, it should be described;\n   - \"I have not tested the code, but I have reviewed it and it looks\n     OK, I agree it can be merged\";\n-  - Nit refers to trivial, often non-blocking issues.\n+  - A \"nit\" refers to a trivial, often non-blocking issue.\n \n Project maintainers reserve the right to weigh the opinions of peer reviewers\n-using common sense judgement and also may weight based on meritocracy: Those\n-that have demonstrated a deeper commitment and understanding towards the project\n-(over time) or have clear domain expertise may naturally have more weight, as\n-one would expect in all walks of life.\n+using common sense judgement and may also weigh based on merit. Reviewers that\n+have demonstrated a deeper commitment and understanding of the project over time\n+or who have clear domain expertise may naturally have more weight, as one would\n+expect in all walks of life.\n \n-Where a patch set affects consensus critical code, the bar will be set much\n+Where a patch set affects consensus-critical code, the bar will be much\n higher in terms of discussion and peer review requirements, keeping in mind that\n mistakes could be very costly to the wider community. This includes refactoring\n-of consensus critical code.\n+of consensus-critical code.\n \n Where a patch set proposes to change the Bitcoin consensus, it must have been\n discussed extensively on the mailing list and IRC, be accompanied by a widely\n@@ -301,7 +373,7 @@ about:\n \n   - It may be because of a feature freeze due to an upcoming release. During this time,\n     only bug fixes are taken into consideration. If your pull request is a new feature,\n-    it will not be prioritized until the release is over. Wait for release.\n+    it will not be prioritized until after the release. Wait for the release.\n   - It may be because the changes you are suggesting do not appeal to people. Rather than\n     nits and critique, which require effort and means they care enough to spend time on your\n     contribution, thundering silence is a good sign of widespread (mild) dislike of a given change\n@@ -311,16 +383,18 @@ about:\n     [developer notes](doc/developer-notes.md), is dangerous or insecure, is messily written, etc.\n     Identify and address any of the issues you find. Then ask e.g. on IRC if someone could give\n     their opinion on the concept itself.\n-  - It may be because your code is too complex for all but a few people. And those people\n+  - It may be because your code is too complex for all but a few people, and those people\n     may not have realized your pull request even exists. A great way to find people who\n     are qualified and care about the code you are touching is the\n     [Git Blame feature](https://help.github.com/articles/tracing-changes-in-a-file/). Simply\n-    find the person touching the code you are touching before you and see if you can find\n-    them and give them a nudge. Don't be incessant about the nudging though.\n+    look up who last modified the code you are changing and see if you can find\n+    them and give them a nudge. Don't be incessant about the nudging, though.\n   - Finally, if all else fails, ask on IRC or elsewhere for someone to give your pull request\n-    a look. If you think you've been waiting an unreasonably long amount of time (month+) for\n-    no particular reason (few lines changed, etc), this is totally fine. Try to return the favor\n-    when someone else is asking for feedback on their code, and universe balances out.\n+    a look. If you think you've been waiting for an unreasonably long time (say,\n+    more than a month) for no particular reason (a few lines changed, etc.),\n+    this is totally fine. Try to return the favor when someone else is asking\n+    for feedback on their code, and the universe balances out.\n+  - Remember that the best thing you can do while waiting is give review to others!\n \n \n Backporting\n@@ -329,11 +403,11 @@ Backporting\n Security and bug fixes can be backported from `master` to release\n branches.\n If the backport is non-trivial, it may be appropriate to open an\n-additional PR, to backport the change, only after the original PR\n+additional PR to backport the change, but only after the original PR\n has been merged.\n Otherwise, backports will be done in batches and\n the maintainers will use the proper `Needs backport (...)` labels\n-when needed (the original author does not need to worry).\n+when needed (the original author does not need to worry about it).\n \n A backport should contain the following metadata in the commit body:\n "
      },
      {
        "sha": "c34f575b8c6c65530feec8cf82d9c503929950e9",
        "filename": "COPYING",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,7 +1,7 @@\n The MIT License (MIT)\n \n-Copyright (c) 2009-2020 The Bitcoin Core developers\n-Copyright (c) 2009-2020 Bitcoin Developers\n+Copyright (c) 2009-2021 The Bitcoin Core developers\n+Copyright (c) 2009-2021 Bitcoin Developers\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "sha": "f6b824faaa607a045a4477d836dd601ce7ff8e01",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 54,
        "deletions": 20,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -12,6 +12,7 @@ if ENABLE_MAN\n SUBDIRS += doc/man\n endif\n .PHONY: deploy FORCE\n+.INTERMEDIATE: $(OSX_TEMP_ISO) $(COVERAGE_INFO)\n \n export PYTHONPATH\n \n@@ -24,7 +25,10 @@ BITCOIND_BIN=$(top_builddir)/src/$(BITCOIN_DAEMON_NAME)$(EXEEXT)\n BITCOIN_QT_BIN=$(top_builddir)/src/qt/$(BITCOIN_GUI_NAME)$(EXEEXT)\n BITCOIN_CLI_BIN=$(top_builddir)/src/$(BITCOIN_CLI_NAME)$(EXEEXT)\n BITCOIN_TX_BIN=$(top_builddir)/src/$(BITCOIN_TX_NAME)$(EXEEXT)\n+BITCOIN_UTIL_BIN=$(top_builddir)/src/$(BITCOIN_UTIL_NAME)$(EXEEXT)\n BITCOIN_WALLET_BIN=$(top_builddir)/src/$(BITCOIN_WALLET_TOOL_NAME)$(EXEEXT)\n+BITCOIN_NODE_BIN=$(top_builddir)/src/$(BITCOIN_MP_NODE_NAME)$(EXEEXT)\n+BITCOIN_GUI_BIN=$(top_builddir)/src/$(BITCOIN_MP_GUI_NAME)$(EXEEXT)\n BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win64-setup$(EXEEXT)\n \n empty :=\n@@ -33,17 +37,18 @@ space := $(empty) $(empty)\n OSX_APP=Bitcoin-Qt.app\n OSX_VOLNAME = $(subst $(space),-,$(PACKAGE_NAME))\n OSX_DMG = $(OSX_VOLNAME).dmg\n+OSX_TEMP_ISO = $(OSX_DMG:.dmg=).temp.iso\n OSX_BACKGROUND_SVG=background.svg\n OSX_BACKGROUND_IMAGE=background.tiff\n OSX_BACKGROUND_IMAGE_DPIS=36 72\n-OSX_DSSTORE_GEN=$(top_srcdir)/contrib/macdeploy/custom_dsstore.py\n OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n-OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n OSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\n-OSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n \n DIST_CONTRIB = \\\n+\t       $(top_srcdir)/test/sanitizer_suppressions/lsan \\\n+\t       $(top_srcdir)/test/sanitizer_suppressions/tsan \\\n+\t       $(top_srcdir)/test/sanitizer_suppressions/ubsan \\\n \t       $(top_srcdir)/contrib/linearize/linearize-data.py \\\n \t       $(top_srcdir)/contrib/linearize/linearize-hashes.py\n \n@@ -52,23 +57,23 @@ DIST_SHARE = \\\n   $(top_srcdir)/share/rpcauth\n \n BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n-           $(top_srcdir)/contrib/devtools/security-check.py\n+           $(top_srcdir)/contrib/devtools/security-check.py \\\n+           $(top_srcdir)/contrib/devtools/pixie.py\n \n WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n   $(top_srcdir)/share/pixmaps/nsis-header.bmp \\\n   $(top_srcdir)/share/pixmaps/nsis-wizard.bmp \\\n   $(top_srcdir)/doc/README_windows.txt\n \n-OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n+OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_INSTALLER_ICONS) \\\n   $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_SVG) \\\n-  $(OSX_DSSTORE_GEN) \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n \n-COVERAGE_INFO = baseline.info \\\n+COVERAGE_INFO = $(COV_TOOL_WRAPPER) baseline.info \\\n   test_bitcoin_filtered.info total_coverage.info \\\n   baseline_filtered.info functional_test.info functional_test_filtered.info \\\n-  test_bitcoin_coverage.info test_bitcoin.info fuzz.info fuzz_coverage.info\n+  test_bitcoin_coverage.info test_bitcoin.info fuzz.info fuzz_filtered.info fuzz_coverage.info\n \n dist-hook:\n \t-$(GIT) archive --format=tar HEAD -- src/clientversion.cpp | $(AMTAR) -C $(top_distdir) -xf -\n@@ -80,7 +85,8 @@ $(BITCOIN_WIN_INSTALLER): all-recursive\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_TX_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_WALLET_BIN) $(top_builddir)/release\n-\t@test -f $(MAKENSIS) && $(MAKENSIS) -V2 $(top_builddir)/share/setup.nsi || \\\n+\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_UTIL_BIN) $(top_builddir)/release\n+\t@test -f $(MAKENSIS) && echo 'OutFile \"$@\"' | cat $(top_builddir)/share/setup.nsi - | $(MAKENSIS) -V2 - || \\\n \t  echo error: could not build $@\n \t@echo built $@\n \n@@ -117,7 +123,7 @@ osx_volname:\n \n if BUILD_DARWIN\n $(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING) $(OSX_BACKGROUND_IMAGE)\n-\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -add-qt-tr $(OSX_QT_TRANSLATIONS) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2 -volname $(OSX_VOLNAME)\n+\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) $(OSX_VOLNAME) -translations-dir=$(QT_TRANSLATION_DIR) -dmg\n \n $(OSX_BACKGROUND_IMAGE).png: contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n \tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d 36 -p 36 -o $@\n@@ -137,8 +143,11 @@ $(APP_DIST_DIR)/Applications:\n \n $(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n \n-$(OSX_DMG): $(APP_DIST_EXTRAS)\n-\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"$(OSX_VOLNAME)\" -no-pad -r -dir-mode 0755 -apple -o $@ dist\n+$(OSX_TEMP_ISO): $(APP_DIST_EXTRAS)\n+\t$(XORRISOFS) -D -l -V \"$(OSX_VOLNAME)\" -no-pad -r -dir-mode 0755 -o $@ dist -- $(if $(SOURCE_DATE_EPOCH),-volume_date all_file_dates =$(SOURCE_DATE_EPOCH))\n+\n+$(OSX_DMG): $(OSX_TEMP_ISO)\n+\t$(DMG) dmg \"$<\" \"$@\"\n \n dpi%.$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n \tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d $* -p $* | $(IMAGEMAGICK_CONVERT) - $@\n@@ -147,11 +156,8 @@ $(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): $(OSX_BACKGROUND_IMAGE_DPIF\n \t$(MKDIR_P) $(@D)\n \t$(TIFFCP) -c none $(OSX_BACKGROUND_IMAGE_DPIFILES) $@\n \n-$(APP_DIST_DIR)/.DS_Store: $(OSX_DSSTORE_GEN)\n-\t$(PYTHON) $< \"$@\" \"$(OSX_VOLNAME)\"\n-\n $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n-\tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2\n+\tINSTALLNAMETOOL=$(INSTALLNAMETOOL) OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) $(OSX_VOLNAME) -translations-dir=$(QT_TRANSLATION_DIR)\n \n deploydir: $(APP_DIST_EXTRAS)\n endif\n@@ -176,11 +182,21 @@ $(BITCOIN_CLI_BIN): FORCE\n $(BITCOIN_TX_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n+$(BITCOIN_UTIL_BIN): FORCE\n+\t$(MAKE) -C src $(@F)\n+\n $(BITCOIN_WALLET_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n+$(BITCOIN_NODE_BIN): FORCE\n+\t$(MAKE) -C src $(@F)\n+\n+$(BITCOIN_GUI_BIN): FORCE\n+\t$(MAKE) -C src $(@F)\n+\n if USE_LCOV\n LCOV_FILTER_PATTERN = \\\n+\t-p \"/usr/local/\" \\\n \t-p \"/usr/include/\" \\\n \t-p \"/usr/lib/\" \\\n \t-p \"/usr/lib64/\" \\\n@@ -192,15 +208,21 @@ LCOV_FILTER_PATTERN = \\\n \t-p \"src/secp256k1\" \\\n \t-p \"depends\"\n \n-baseline.info:\n+DIR_FUZZ_SEED_CORPUS ?= qa-assets/fuzz_seed_corpus\n+\n+$(COV_TOOL_WRAPPER):\n+\t@echo 'exec $(COV_TOOL) \"$$@\"' > $(COV_TOOL_WRAPPER)\n+\t@chmod +x $(COV_TOOL_WRAPPER)\n+\n+baseline.info: $(COV_TOOL_WRAPPER)\n \t$(LCOV) -c -i -d $(abs_builddir)/src -o $@\n \n baseline_filtered.info: baseline.info\n \t$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@\n \t$(LCOV) -a $@ $(LCOV_OPTS) -o $@\n \n fuzz.info: baseline_filtered.info\n-\t@TIMEOUT=15 test/fuzz/test_runner.py qa-assets/fuzz_seed_corpus -l DEBUG\n+\t@TIMEOUT=15 test/fuzz/test_runner.py $(DIR_FUZZ_SEED_CORPUS) -l DEBUG\n \t$(LCOV) -c $(LCOV_OPTS) -d $(abs_builddir)/src --t fuzz-tests -o $@\n \t$(LCOV) -z $(LCOV_OPTS) -d $(abs_builddir)/src\n \n@@ -319,8 +341,6 @@ EXTRA_DIST += \\\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n-.INTERMEDIATE: $(COVERAGE_INFO)\n-\n DISTCHECK_CONFIGURE_FLAGS = --enable-man\n \n doc/doxygen/.stamp: doc/Doxyfile FORCE\n@@ -342,3 +362,17 @@ clean-local: clean-docs\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ fuzz.coverage/ test/tmp/ cache/ $(OSX_APP)\n \trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache share/rpcauth/__pycache__\n \trm -rf osx_volname dist/ dpi36.background.tiff dpi72.background.tiff\n+\n+test-security-check:\n+if TARGET_DARWIN\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO\n+endif\n+if TARGET_WINDOWS\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_PE\n+endif\n+if TARGET_LINUX\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF\n+endif"
      },
      {
        "sha": "c73e25c429c5b2ee5a12431ce09b19b2bc9e7f85",
        "filename": "README.md",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -25,9 +25,14 @@ information or see https://opensource.org/licenses/MIT.\n Development Process\n -------------------\n \n-The `master` branch is regularly built (see doc/build-*.md for instructions) and tested, but is not guaranteed to be\n+The `master` branch is regularly built (see `doc/build-*.md` for instructions) and tested, but it is not guaranteed to be\n completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\n-regularly to indicate new official, stable release versions of Bitcoin Core.\n+regularly from release branches to indicate new official, stable release versions of Bitcoin Core.\n+\n+The https://github.com/bitcoin-core/gui repository is used exclusively for the\n+development of the GUI. Its master branch is identical in all monotree\n+repositories. Release branches and tags do not exist, so please do not fork\n+that repository unless it is for development reasons.\n \n The contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md)\n and useful hints for developers can be found in [doc/developer-notes.md](doc/developer-notes.md).\n@@ -51,7 +56,8 @@ There are also [regression and integration tests](/test), written\n in Python, that are run automatically on the build server.\n These tests can be run (if the [test dependencies](/test) are installed) with: `test/functional/test_runner.py`\n \n-The Travis CI system makes sure that every pull request is built for Windows, Linux, and macOS, and that unit/sanity tests are run automatically.\n+The CI (Continuous Integration) systems make sure that every pull request is built for Windows, Linux, and macOS,\n+and that unit/sanity tests are run automatically.\n \n ### Manual Quality Assurance (QA) Testing\n "
      },
      {
        "sha": "fa9a8f525f69729e75d7313e0dc3d7a75b6daa73",
        "filename": "REVIEWERS",
        "status": "added",
        "additions": 131,
        "deletions": 0,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/REVIEWERS",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/REVIEWERS",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/REVIEWERS?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,131 @@\n+# ==============================================================================\n+#                          Bitcoin Core REVIEWERS\n+# ==============================================================================\n+\n+# Configuration of automated review requests for the bitcoin/bitcoin repo\n+# via DrahtBot.\n+\n+# Order is not important; if a modified file or directory matches a fnmatch,\n+# the reviewer will be mentioned in a PR comment requesting a review.\n+\n+# Regular contributors are free to add their names to specific directories or\n+# files provided that they are willing to provide a review.\n+\n+# Absence from this list should not be interpreted as a discouragement to\n+# review a pull request. Peer review is always welcome and is a critical\n+# component of the progress of the codebase. Information on peer review\n+# guidelines can be found in the CONTRIBUTING.md doc.\n+\n+\n+# Maintainers\n+#   @fanquake\n+#   @jonasschnelli\n+#   @laanwj\n+#   @marcofalke\n+#   @meshcollider\n+#   @sipa\n+\n+# Docs\n+/doc/*[a-zA-Z-].md                          @harding\n+/doc/Doxyfile.in                            @fanquake\n+/doc/REST-interface.md                      @jonasschnelli\n+/doc/benchmarking.md                        @ariard\n+/doc/bitcoin-conf.md                        @hebasto\n+/doc/build-freebsd.md                       @fanquake\n+/doc/build-netbsd.md                        @fanquake\n+/doc/build-openbsd.md                       @laanwj\n+/doc/build-osx.md                           @fanquake\n+/doc/build-unix.md                          @laanwj\n+/doc/build-windows.md                       @sipsorcery\n+/doc/dependencies.md                        @fanquake\n+/doc/developer-notes.md                     @laanwj\n+/doc/files.md                               @hebasto\n+/doc/gitian-building.md                     @laanwj\n+/doc/reduce-memory.md                       @fanquake\n+/doc/reduce-traffic.md                      @jonasschnelli\n+/doc/release-process.md                     @laanwj\n+/doc/translation_strings_policy.md          @laanwj\n+\n+# Build aux\n+/build-aux/m4/bitcoin_qt.m4                 @hebasto\n+\n+# MSVC build system\n+/build_msvc/                                @sipsorcery\n+\n+# Settings\n+/src/util/settings.*                        @ryanofsky\n+\n+# Fuzzing\n+/src/test/fuzz/                             @practicalswift\n+/doc/fuzzing.md                             @practicalswift\n+\n+# Test framework\n+/test/functional/mempool_updatefromblock.py @hebasto\n+/test/functional/feature_asmap.py           @jonatack\n+/test/functional/interface_bitcoin_cli.py   @jonatack\n+/test/functional/tool_wallet.py             @jonatack\n+\n+# Translations\n+/src/util/translation.h                     @hebasto\n+\n+# Dev Tools\n+/contrib/devtools/security-check.py         @fanquake\n+/contrib/devtools/test-security-check.py    @fanquake\n+/contrib/devtools/symbol-check.py           @fanquake\n+\n+# Gitian/Guix\n+/contrib/gitian-build.py                    @hebasto\n+/contrib/guix/                              @dongcarl\n+\n+# Compatibility\n+/src/compat/glibc_*                         @fanquake\n+\n+# GUI\n+/src/qt/forms/                              @hebasto\n+\n+# Wallet\n+/src/wallet/                                @achow101\n+\n+# CLI\n+/src/bitcoin-cli.cpp                        @jonatack\n+\n+# Coinstats\n+/src/node/coinstats.*                       @fjahr\n+\n+# Index\n+/src/index/                                 @fjahr\n+\n+# Descriptors\n+*descriptor*                                @achow101 @sipa\n+\n+# Interfaces\n+/src/interfaces/                            @ryanofsky\n+\n+# DB\n+/src/txdb.*                                 @jamesob\n+/src/dbwrapper.*                            @jamesob\n+\n+# Scripts/Linter\n+*.sh                                        @practicalswift\n+/test/lint/                                 @practicalswift\n+/test/lint/lint-shell.sh                    @hebasto\n+\n+# Bech32\n+/src/bech32.*                               @sipa\n+/src/bench/bech32.*                         @sipa\n+\n+# PSBT\n+/src/psbt*                                  @achow101\n+/src/node/psbt*                             @achow101\n+/doc/psbt.md                                @achow101\n+\n+# P2P\n+/src/net_processing.*                       @sipa\n+/src/protocol.*                             @sipa\n+\n+# Consensus\n+/src/coins.*                                @sipa @jamesob\n+/src/script/script.*                        @sipa\n+/src/script/interpreter.*                   @sipa\n+/src/validation.*                           @sipa\n+/src/consensus/                             @sipa"
      },
      {
        "sha": "5d20e67464fcde6ee00f2582607e59f0759115b8",
        "filename": "build-aux/m4/ax_boost_process.m4",
        "status": "added",
        "additions": 121,
        "deletions": 0,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build-aux/m4/ax_boost_process.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build-aux/m4/ax_boost_process.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_process.m4?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,121 @@\n+# ===========================================================================\n+#     https://www.gnu.org/software/autoconf-archive/ax_boost_process.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_BOOST_PROCESS\n+#\n+# DESCRIPTION\n+#\n+#   Test for Process library from the Boost C++ libraries. The macro\n+#   requires a preceding call to AX_BOOST_BASE. Further documentation is\n+#   available at <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_PROCESS_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_PROCESS\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Thomas Porschberg <thomas@randspringer.de>\n+#   Copyright (c) 2008 Michael Tindal\n+#   Copyright (c) 2008 Daniel Casimiro <dan.casimiro@gmail.com>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 2\n+\n+AC_DEFUN([AX_BOOST_PROCESS],\n+[\n+\tAC_ARG_WITH([boost-process],\n+\tAS_HELP_STRING([--with-boost-process@<:@=special-lib@:>@],\n+                   [use the Process library from boost - it is possible to specify a certain library for the linker\n+                        e.g. --with-boost-process=boost_process-gcc-mt ]),\n+        [\n+        if test \"$withval\" = \"no\"; then\n+\t\t\twant_boost_process=\"no\"\n+        elif test \"$withval\" = \"yes\"; then\n+            want_boost_process=\"yes\"\n+            ax_boost_user_process_lib=\"\"\n+        else\n+\t\t    want_boost_process=\"yes\"\n+\t\tax_boost_user_process_lib=\"$withval\"\n+\t\tfi\n+        ],\n+        [want_boost_process=\"yes\"]\n+\t)\n+\n+\tif test \"x$want_boost_process\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+        AC_REQUIRE([AC_CANONICAL_BUILD])\n+\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n+\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+\t\texport CPPFLAGS\n+\n+\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n+\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+\t\texport LDFLAGS\n+\n+        AC_CACHE_CHECK(whether the Boost::Process library is available,\n+\t\t\t\t\t   ax_cv_boost_process,\n+        [AC_LANG_PUSH([C++])\n+\t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n+\t\t\t CXXFLAGS=\n+\n+             AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/process.hpp>]],\n+                [[boost::process::child* child = new boost::process::child; delete child;]])],\n+                ax_cv_boost_process=yes, ax_cv_boost_process=no)\n+\t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n+             AC_LANG_POP([C++])\n+\t\t])\n+\t\tif test \"x$ax_cv_boost_process\" = \"xyes\"; then\n+\t\t\tAC_SUBST(BOOST_CPPFLAGS)\n+\n+\t\t\tAC_DEFINE(HAVE_BOOST_PROCESS,,[define if the Boost::Process library is available])\n+            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+\n+\t\t\tLDFLAGS_SAVE=$LDFLAGS\n+            if test \"x$ax_boost_user_process_lib\" = \"x\"; then\n+                for libextension in `ls -r $BOOSTLIBDIR/libboost_process* 2>/dev/null | sed 's,.*/lib,,' | sed 's,\\..*,,'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n+                                 [link_process=\"no\"])\n+\t\t\t\tdone\n+                if test \"x$link_process\" != \"xyes\"; then\n+                for libextension in `ls -r $BOOSTLIBDIR/boost_process* 2>/dev/null | sed 's,.*/,,' | sed -e 's,\\..*,,'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n+                                 [link_process=\"no\"])\n+\t\t\t\tdone\n+                fi\n+\n+            else\n+               for ax_lib in $ax_boost_user_process_lib boost_process-$ax_boost_user_process_lib; do\n+\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n+                                   [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n+                                   [link_process=\"no\"])\n+                  done\n+\n+            fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the Boost::Process library!)\n+            fi\n+\t\t\tif test \"x$link_process\" = \"xno\"; then\n+\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n+\t\t\tfi\n+\t\tfi\n+\n+\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n+\tLDFLAGS=\"$LDFLAGS_SAVED\"\n+\tfi\n+])"
      },
      {
        "sha": "75e80e6e75aa9f6c22387d0dabce11e5fce9526b",
        "filename": "build-aux/m4/ax_boost_thread.m4",
        "status": "modified",
        "additions": 39,
        "deletions": 15,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build-aux/m4/ax_boost_thread.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build-aux/m4/ax_boost_thread.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_thread.m4?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -30,7 +30,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 32\n+#serial 33\n \n AC_DEFUN([AX_BOOST_THREAD],\n [\n@@ -67,13 +67,24 @@ AC_DEFUN([AX_BOOST_THREAD],\n         [AC_LANG_PUSH([C++])\n              CXXFLAGS_SAVE=$CXXFLAGS\n \n-             if test \"x$host_os\" = \"xsolaris\" ; then\n-                 CXXFLAGS=\"-pthreads $CXXFLAGS\"\n-             elif test \"x$host_os\" = \"xmingw32\" ; then\n-                 CXXFLAGS=\"-mthreads $CXXFLAGS\"\n-             else\n-                CXXFLAGS=\"-pthread $CXXFLAGS\"\n-             fi\n+             case \"x$host_os\" in\n+                 xsolaris )\n+                     CXXFLAGS=\"-pthreads $CXXFLAGS\"\n+                     break;\n+                     ;;\n+                 xmingw32 )\n+                     CXXFLAGS=\"-mthreads $CXXFLAGS\"\n+                     break;\n+                     ;;\n+                 *android* )\n+                     break;\n+                     ;;\n+                 * )\n+                     CXXFLAGS=\"-pthread $CXXFLAGS\"\n+                     break;\n+                     ;;\n+             esac\n+\n              AC_COMPILE_IFELSE([\n                  AC_LANG_PROGRAM(\n                      [[@%:@include <boost/thread/thread.hpp>]],\n@@ -84,13 +95,23 @@ AC_DEFUN([AX_BOOST_THREAD],\n              AC_LANG_POP([C++])\n         ])\n         if test \"x$ax_cv_boost_thread\" = \"xyes\"; then\n-           if test \"x$host_os\" = \"xsolaris\" ; then\n-              BOOST_CPPFLAGS=\"-pthreads $BOOST_CPPFLAGS\"\n-           elif test \"x$host_os\" = \"xmingw32\" ; then\n-              BOOST_CPPFLAGS=\"-mthreads $BOOST_CPPFLAGS\"\n-           else\n-              BOOST_CPPFLAGS=\"-pthread $BOOST_CPPFLAGS\"\n-           fi\n+            case \"x$host_os\" in\n+                xsolaris )\n+                    BOOST_CPPFLAGS=\"-pthreads $BOOST_CPPFLAGS\"\n+                    break;\n+                    ;;\n+                xmingw32 )\n+                    BOOST_CPPFLAGS=\"-mthreads $BOOST_CPPFLAGS\"\n+                    break;\n+                    ;;\n+                *android* )\n+                    break;\n+                    ;;\n+                * )\n+                    BOOST_CPPFLAGS=\"-pthread $BOOST_CPPFLAGS\"\n+                    break;\n+                    ;;\n+            esac\n \n             AC_SUBST(BOOST_CPPFLAGS)\n \n@@ -148,6 +169,9 @@ AC_DEFUN([AX_BOOST_THREAD],\n                     xmingw32 )\n                         break;\n                         ;;\n+                    *android* )\n+                        break;\n+                        ;;\n                     * )\n                         BOOST_THREAD_LIB=\"$BOOST_THREAD_LIB -lpthread\"\n                         break;"
      },
      {
        "sha": "1598d077ff020f1f0be8388fded01c871c946354",
        "filename": "build-aux/m4/ax_pthread.m4",
        "status": "modified",
        "additions": 125,
        "deletions": 103,
        "changes": 228,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build-aux/m4/ax_pthread.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build-aux/m4/ax_pthread.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_pthread.m4?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,5 +1,5 @@\n # ===========================================================================\n-#        http://www.gnu.org/software/autoconf-archive/ax_pthread.html\n+#        https://www.gnu.org/software/autoconf-archive/ax_pthread.html\n # ===========================================================================\n #\n # SYNOPSIS\n@@ -55,6 +55,7 @@\n #\n #   Copyright (c) 2008 Steven G. Johnson <stevenj@alum.mit.edu>\n #   Copyright (c) 2011 Daniel Richard G. <skunk@iSKUNK.ORG>\n+#   Copyright (c) 2019 Marc Stevens <marc.stevens@cwi.nl>\n #\n #   This program is free software: you can redistribute it and/or modify it\n #   under the terms of the GNU General Public License as published by the\n@@ -67,7 +68,7 @@\n #   Public License for more details.\n #\n #   You should have received a copy of the GNU General Public License along\n-#   with this program. If not, see <http://www.gnu.org/licenses/>.\n+#   with this program. If not, see <https://www.gnu.org/licenses/>.\n #\n #   As a special exception, the respective Autoconf Macro's copyright owner\n #   gives unlimited permission to copy, distribute and modify the configure\n@@ -82,7 +83,7 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 23\n+#serial 27\n \n AU_ALIAS([ACX_PTHREAD], [AX_PTHREAD])\n AC_DEFUN([AX_PTHREAD], [\n@@ -123,10 +124,12 @@ fi\n # (e.g. DEC) have both -lpthread and -lpthreads, where one of the\n # libraries is broken (non-POSIX).\n \n-# Create a list of thread flags to try.  Items starting with a \"-\" are\n-# C compiler flags, and other items are library names, except for \"none\"\n-# which indicates that we try without any flags at all, and \"pthread-config\"\n-# which is a program returning the flags for the Pth emulation library.\n+# Create a list of thread flags to try. Items with a \",\" contain both\n+# C compiler flags (before \",\") and linker flags (after \",\"). Other items\n+# starting with a \"-\" are C compiler flags, and remaining items are\n+# library names, except for \"none\" which indicates that we try without\n+# any flags at all, and \"pthread-config\" which is a program returning\n+# the flags for the Pth emulation library.\n \n ax_pthread_flags=\"pthreads none -Kthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config\"\n \n@@ -194,14 +197,47 @@ case $host_os in\n         # that too in a future libc.)  So we'll check first for the\n         # standard Solaris way of linking pthreads (-mt -lpthread).\n \n-        ax_pthread_flags=\"-mt,pthread pthread $ax_pthread_flags\"\n+        ax_pthread_flags=\"-mt,-lpthread pthread $ax_pthread_flags\"\n         ;;\n esac\n \n+# Are we compiling with Clang?\n+\n+AC_CACHE_CHECK([whether $CC is Clang],\n+    [ax_cv_PTHREAD_CLANG],\n+    [ax_cv_PTHREAD_CLANG=no\n+     # Note that Autoconf sets GCC=yes for Clang as well as GCC\n+     if test \"x$GCC\" = \"xyes\"; then\n+        AC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],\n+            [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */\n+#            if defined(__clang__) && defined(__llvm__)\n+             AX_PTHREAD_CC_IS_CLANG\n+#            endif\n+            ],\n+            [ax_cv_PTHREAD_CLANG=yes])\n+     fi\n+    ])\n+ax_pthread_clang=\"$ax_cv_PTHREAD_CLANG\"\n+\n+\n # GCC generally uses -pthread, or -pthreads on some platforms (e.g. SPARC)\n \n+# Note that for GCC and Clang -pthread generally implies -lpthread,\n+# except when -nostdlib is passed.\n+# This is problematic using libtool to build C++ shared libraries with pthread:\n+# [1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=25460\n+# [2] https://bugzilla.redhat.com/show_bug.cgi?id=661333\n+# [3] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=468555\n+# To solve this, first try -pthread together with -lpthread for GCC\n+\n AS_IF([test \"x$GCC\" = \"xyes\"],\n-      [ax_pthread_flags=\"-pthread -pthreads $ax_pthread_flags\"])\n+      [ax_pthread_flags=\"-pthread,-lpthread -pthread -pthreads $ax_pthread_flags\"])\n+\n+# Clang takes -pthread (never supported any other flag), but we'll try with -lpthread first\n+\n+AS_IF([test \"x$ax_pthread_clang\" = \"xyes\"],\n+      [ax_pthread_flags=\"-pthread,-lpthread -pthread\"])\n+\n \n # The presence of a feature test macro requesting re-entrant function\n # definitions is, on some systems, a strong hint that pthreads support is\n@@ -224,25 +260,86 @@ AS_IF([test \"x$ax_pthread_check_macro\" = \"x--\"],\n       [ax_pthread_check_cond=0],\n       [ax_pthread_check_cond=\"!defined($ax_pthread_check_macro)\"])\n \n-# Are we compiling with Clang?\n \n-AC_CACHE_CHECK([whether $CC is Clang],\n-    [ax_cv_PTHREAD_CLANG],\n-    [ax_cv_PTHREAD_CLANG=no\n-     # Note that Autoconf sets GCC=yes for Clang as well as GCC\n-     if test \"x$GCC\" = \"xyes\"; then\n-        AC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],\n-            [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */\n-#            if defined(__clang__) && defined(__llvm__)\n-             AX_PTHREAD_CC_IS_CLANG\n-#            endif\n-            ],\n-            [ax_cv_PTHREAD_CLANG=yes])\n-     fi\n-    ])\n-ax_pthread_clang=\"$ax_cv_PTHREAD_CLANG\"\n+if test \"x$ax_pthread_ok\" = \"xno\"; then\n+for ax_pthread_try_flag in $ax_pthread_flags; do\n+\n+        case $ax_pthread_try_flag in\n+                none)\n+                AC_MSG_CHECKING([whether pthreads work without any flags])\n+                ;;\n+\n+                *,*)\n+                PTHREAD_CFLAGS=`echo $ax_pthread_try_flag | sed \"s/^\\(.*\\),\\(.*\\)$/\\1/\"`\n+                PTHREAD_LIBS=`echo $ax_pthread_try_flag | sed \"s/^\\(.*\\),\\(.*\\)$/\\2/\"`\n+                AC_MSG_CHECKING([whether pthreads work with \"$PTHREAD_CFLAGS\" and \"$PTHREAD_LIBS\"])\n+                ;;\n+\n+                -*)\n+                AC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])\n+                PTHREAD_CFLAGS=\"$ax_pthread_try_flag\"\n+                ;;\n+\n+                pthread-config)\n+                AC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n+                AS_IF([test \"x$ax_pthread_config\" = \"xno\"], [continue])\n+                PTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n+                PTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n+                ;;\n+\n+                *)\n+                AC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])\n+                PTHREAD_LIBS=\"-l$ax_pthread_try_flag\"\n+                ;;\n+        esac\n+\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+\n+        # Check for various functions.  We must include pthread.h,\n+        # since some functions may be macros.  (On the Sequent, we\n+        # need a special flag -Kthread to make this header compile.)\n+        # We check for pthread_join because it is in -lpthread on IRIX\n+        # while pthread_create is in libc.  We check for pthread_attr_init\n+        # due to DEC craziness with -lpthreads.  We check for\n+        # pthread_cleanup_push because it is one of the few pthread\n+        # functions on Solaris that doesn't have a non-functional libc stub.\n+        # We try pthread_create on general principles.\n+\n+        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n+#                       if $ax_pthread_check_cond\n+#                        error \"$ax_pthread_check_macro must be defined\"\n+#                       endif\n+                        static void *some_global = NULL;\n+                        static void routine(void *a)\n+                          {\n+                             /* To avoid any unused-parameter or\n+                                unused-but-set-parameter warning.  */\n+                             some_global = a;\n+                          }\n+                        static void *start_routine(void *a) { return a; }],\n+                       [pthread_t th; pthread_attr_t attr;\n+                        pthread_create(&th, 0, start_routine, 0);\n+                        pthread_join(th, 0);\n+                        pthread_attr_init(&attr);\n+                        pthread_cleanup_push(routine, 0);\n+                        pthread_cleanup_pop(0) /* ; */])],\n+            [ax_pthread_ok=yes],\n+            [])\n+\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n+\n+        AC_MSG_RESULT([$ax_pthread_ok])\n+        AS_IF([test \"x$ax_pthread_ok\" = \"xyes\"], [break])\n+\n+        PTHREAD_LIBS=\"\"\n+        PTHREAD_CFLAGS=\"\"\n+done\n+fi\n \n-ax_pthread_clang_warning=no\n \n # Clang needs special handling, because older versions handle the -pthread\n # option in a rather... idiosyncratic way\n@@ -261,11 +358,6 @@ if test \"x$ax_pthread_clang\" = \"xyes\"; then\n         # -pthread does define _REENTRANT, and while the Darwin headers\n         # ignore this macro, third-party headers might not.)\n \n-        PTHREAD_CFLAGS=\"-pthread\"\n-        PTHREAD_LIBS=\n-\n-        ax_pthread_ok=yes\n-\n         # However, older versions of Clang make a point of warning the user\n         # that, in an invocation where only linking and no compilation is\n         # taking place, the -pthread option has no effect (\"argument unused\n@@ -320,78 +412,7 @@ if test \"x$ax_pthread_clang\" = \"xyes\"; then\n \n fi # $ax_pthread_clang = yes\n \n-if test \"x$ax_pthread_ok\" = \"xno\"; then\n-for ax_pthread_try_flag in $ax_pthread_flags; do\n-\n-        case $ax_pthread_try_flag in\n-                none)\n-                AC_MSG_CHECKING([whether pthreads work without any flags])\n-                ;;\n-\n-                -mt,pthread)\n-                AC_MSG_CHECKING([whether pthreads work with -mt -lpthread])\n-                PTHREAD_CFLAGS=\"-mt\"\n-                PTHREAD_LIBS=\"-lpthread\"\n-                ;;\n-\n-                -*)\n-                AC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])\n-                PTHREAD_CFLAGS=\"$ax_pthread_try_flag\"\n-                ;;\n-\n-                pthread-config)\n-                AC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n-                AS_IF([test \"x$ax_pthread_config\" = \"xno\"], [continue])\n-                PTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n-                PTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n-                ;;\n \n-                *)\n-                AC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])\n-                PTHREAD_LIBS=\"-l$ax_pthread_try_flag\"\n-                ;;\n-        esac\n-\n-        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n-        ax_pthread_save_LIBS=\"$LIBS\"\n-        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n-        LIBS=\"$PTHREAD_LIBS $LIBS\"\n-\n-        # Check for various functions.  We must include pthread.h,\n-        # since some functions may be macros.  (On the Sequent, we\n-        # need a special flag -Kthread to make this header compile.)\n-        # We check for pthread_join because it is in -lpthread on IRIX\n-        # while pthread_create is in libc.  We check for pthread_attr_init\n-        # due to DEC craziness with -lpthreads.  We check for\n-        # pthread_cleanup_push because it is one of the few pthread\n-        # functions on Solaris that doesn't have a non-functional libc stub.\n-        # We try pthread_create on general principles.\n-\n-        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n-#                       if $ax_pthread_check_cond\n-#                        error \"$ax_pthread_check_macro must be defined\"\n-#                       endif\n-                        static void routine(void *a) { a = 0; }\n-                        static void *start_routine(void *a) { return a; }],\n-                       [pthread_t th; pthread_attr_t attr;\n-                        pthread_create(&th, 0, start_routine, 0);\n-                        pthread_join(th, 0);\n-                        pthread_attr_init(&attr);\n-                        pthread_cleanup_push(routine, 0);\n-                        pthread_cleanup_pop(0) /* ; */])],\n-            [ax_pthread_ok=yes],\n-            [])\n-\n-        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n-        LIBS=\"$ax_pthread_save_LIBS\"\n-\n-        AC_MSG_RESULT([$ax_pthread_ok])\n-        AS_IF([test \"x$ax_pthread_ok\" = \"xyes\"], [break])\n-\n-        PTHREAD_LIBS=\"\"\n-        PTHREAD_CFLAGS=\"\"\n-done\n-fi\n \n # Various other checks:\n if test \"x$ax_pthread_ok\" = \"xyes\"; then\n@@ -438,7 +459,8 @@ if test \"x$ax_pthread_ok\" = \"xyes\"; then\n         AC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],\n             [ax_cv_PTHREAD_PRIO_INHERIT],\n             [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n-                                             [[int i = PTHREAD_PRIO_INHERIT;]])],\n+                                             [[int i = PTHREAD_PRIO_INHERIT;\n+                                               return i;]])],\n                             [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n                             [ax_cv_PTHREAD_PRIO_INHERIT=no])\n             ])"
      },
      {
        "sha": "5fc5b493d36a0d74a2dcfab0bdc2fe2d157f698b",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -6,7 +6,9 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n   AC_ARG_VAR(BDB_CFLAGS, [C compiler flags for BerkeleyDB, bypasses autodetection])\n   AC_ARG_VAR(BDB_LIBS, [Linker flags for BerkeleyDB, bypasses autodetection])\n \n-  if test \"x$BDB_CFLAGS\" = \"x\"; then\n+  if test \"x$use_bdb\" = \"xno\"; then\n+    use_bdb=no\n+  elif test \"x$BDB_CFLAGS\" = \"x\"; then\n     AC_MSG_CHECKING([for Berkeley DB C++ headers])\n     BDB_CPPFLAGS=\n     bdbpath=X\n@@ -44,25 +46,30 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n       ],[])\n     done\n     if test \"x$bdbpath\" = \"xX\"; then\n+      use_bdb=no\n       AC_MSG_RESULT([no])\n-      AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+      AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for BDB wallet support (--without-bdb to disable BDB wallet support)])\n     elif test \"x$bdb48path\" = \"xX\"; then\n       BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n       AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n-        AC_MSG_WARN([Found Berkeley DB other than 4.8; wallets opened by this build will not be portable!])\n+        AC_MSG_WARN([Found Berkeley DB other than 4.8; BDB wallets opened by this build will not be portable!])\n       ],[\n-        AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable wallets (--with-incompatible-bdb to ignore or --disable-wallet to disable wallet functionality)])\n+        AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable BDB wallets (--with-incompatible-bdb to ignore or --without-bdb to disable BDB wallet support)])\n       ])\n+      use_bdb=yes\n     else\n       BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdb48path}],db_cxx)\n       bdbpath=\"${bdb48path}\"\n+      use_bdb=yes\n     fi\n   else\n     BDB_CPPFLAGS=${BDB_CFLAGS}\n   fi\n   AC_SUBST(BDB_CPPFLAGS)\n \n-  if test \"x$BDB_LIBS\" = \"x\"; then\n+  if test \"x$use_bdb\" = \"xno\"; then\n+    use_bdb=no\n+  elif test \"x$BDB_LIBS\" = \"x\"; then\n     # TODO: Ideally this could find the library version and make sure it matches the headers being used\n     for searchlib in db_cxx-4.8 db_cxx db4_cxx; do\n       AC_CHECK_LIB([$searchlib],[main],[\n@@ -71,8 +78,12 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n       ])\n     done\n     if test \"x$BDB_LIBS\" = \"x\"; then\n-        AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+        AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for BDB wallet support (--without-bdb to disable BDB wallet support)])\n     fi\n   fi\n-  AC_SUBST(BDB_LIBS)\n+  if test \"x$use_bdb\" != \"xno\"; then\n+    AC_SUBST(BDB_LIBS)\n+    AC_DEFINE([USE_BDB], [1], [Define if BDB support should be compiled in])\n+    use_bdb=yes\n+  fi\n ])"
      },
      {
        "sha": "658dfc54763cf89d1300998ea5a632f6f55c0923",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 53,
        "deletions": 216,
        "changes": 269,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -72,32 +72,33 @@ AC_DEFUN([BITCOIN_QT_INIT],[\n \n   AC_ARG_WITH([qtdbus],\n     [AS_HELP_STRING([--with-qtdbus],\n-    [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+    [enable DBus support (default is yes if qt is enabled and QtDBus is found, except on Android)])],\n     [use_dbus=$withval],\n     [use_dbus=auto])\n \n+  dnl Android doesn't support D-Bus and certainly doesn't use it for notifications\n+  case $host in\n+    *android*)\n+      if test \"x$use_dbus\" != xyes; then\n+        use_dbus=no\n+      fi\n+    ;;\n+  esac\n+\n   AC_SUBST(QT_TRANSLATION_DIR,$qt_translation_path)\n ])\n \n-dnl Find the appropriate version of Qt libraries and includes.\n-dnl Inputs: $1: Whether or not pkg-config should be used. yes|no. Default: yes.\n-dnl Inputs: $2: If $1 is \"yes\" and --with-gui=auto, which qt version should be\n-dnl         tried first.\n-dnl Outputs: See _BITCOIN_QT_FIND_LIBS_*\n+dnl Find Qt libraries and includes.\n+dnl\n+dnl   BITCOIN_QT_CONFIGURE([MINIMUM-VERSION])\n+dnl\n+dnl Outputs: See _BITCOIN_QT_FIND_LIBS\n dnl Outputs: Sets variables for all qt-related tools.\n dnl Outputs: bitcoin_enable_qt, bitcoin_enable_qt_dbus, bitcoin_enable_qt_test\n AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n-  use_pkgconfig=$1\n-\n-  if test \"x$use_pkgconfig\" = x; then\n-    use_pkgconfig=yes\n-  fi\n-\n-  if test \"x$use_pkgconfig\" = xyes; then\n-    BITCOIN_QT_CHECK([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG])\n-  else\n-    BITCOIN_QT_CHECK([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG])\n-  fi\n+  qt_version=\">= $1\"\n+  qt_lib_prefix=\"Qt5\"\n+  BITCOIN_QT_CHECK([_BITCOIN_QT_FIND_LIBS])\n \n   dnl This is ugly and complicated. Yuck. Works as follows:\n   dnl For Qt5, we can check a header to find out whether Qt is build\n@@ -117,8 +118,8 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     _BITCOIN_QT_FIND_STATIC_PLUGINS\n     AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n     if test \"x$TARGET_OS\" != xandroid; then\n-       _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin)],[-lqminimal])\n-       AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin)],[-lqminimal])\n+      AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n     fi\n     if test \"x$TARGET_OS\" = xwindows; then\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n@@ -127,7 +128,6 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n       AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n     elif test \"x$TARGET_OS\" = xdarwin; then\n-      AX_CHECK_LINK_FLAG([[-framework IOKit]],[QT_LIBS=\"$QT_LIBS -framework IOKit\"],[AC_MSG_ERROR(could not iokit framework)])\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin)],[-lqcocoa])\n       AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n     elif test \"x$TARGET_OS\" = xandroid; then\n@@ -139,7 +139,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   CXXFLAGS=$TEMP_CXXFLAGS\n   ])\n \n-  if test \"x$use_pkgconfig$qt_bin_path\" = xyes; then\n+  if test \"x$qt_bin_path\" = x; then\n     qt_bin_path=\"`$PKG_CONFIG --variable=host_bins Qt5Core 2>/dev/null`\"\n   fi\n \n@@ -201,7 +201,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     *darwin*)\n      BITCOIN_QT_CHECK([\n        MOC_DEFS=\"${MOC_DEFS} -DQ_OS_MAC\"\n-       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       base_frameworks=\"-framework Foundation -framework AppKit\"\n        AX_CHECK_LINK_FLAG([[$base_frameworks]],[QT_LIBS=\"$QT_LIBS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n      ])\n     ;;\n@@ -213,7 +213,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n \n \n   dnl enable qt support\n-  AC_MSG_CHECKING(whether to build ]AC_PACKAGE_NAME[ GUI)\n+  AC_MSG_CHECKING([whether to build ]AC_PACKAGE_NAME[ GUI])\n   BITCOIN_QT_CHECK([\n     bitcoin_enable_qt=yes\n     bitcoin_enable_qt_test=yes\n@@ -234,7 +234,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     bitcoin_enable_qt=no\n   ])\n   if test x$bitcoin_enable_qt = xyes; then\n-    AC_MSG_RESULT([$bitcoin_enable_qt ($QT_LIB_PREFIX)])\n+    AC_MSG_RESULT([$bitcoin_enable_qt ($qt_lib_prefix)])\n   else\n     AC_MSG_RESULT([$bitcoin_enable_qt])\n   fi\n@@ -255,57 +255,15 @@ dnl All macros below are internal and should _not_ be used from the main\n dnl configure.ac.\n dnl ----\n \n-dnl Internal. Check included version of Qt against minimum specified in doc/dependencies.md\n-dnl Requires: INCLUDES must be populated as necessary.\n-dnl Output: bitcoin_cv_qt5=yes|no\n-AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n-  AC_CACHE_CHECK(for Qt 5, bitcoin_cv_qt5,[\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-      #include <QtCore/qconfig.h>\n-      #ifndef QT_VERSION\n-      #  include <QtCore/qglobal.h>\n-      #endif\n-    ]],\n-    [[\n-      #if QT_VERSION < 0x050501\n-      choke\n-      #endif\n-    ]])],\n-    [bitcoin_cv_qt5=yes],\n-    [bitcoin_cv_qt5=no])\n-])])\n-\n-dnl Internal. Check if the included version of Qt is greater than Qt58.\n-dnl Requires: INCLUDES must be populated as necessary.\n-dnl Output: bitcoin_cv_qt58=yes|no\n-AC_DEFUN([_BITCOIN_QT_CHECK_QT58],[\n-  AC_CACHE_CHECK(for > Qt 5.7, bitcoin_cv_qt58,[\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-      #include <QtCore/qconfig.h>\n-      #ifndef QT_VERSION\n-      #  include <QtCore/qglobal.h>\n-      #endif\n-    ]],\n-    [[\n-      #if QT_VERSION_MINOR < 8\n-      choke\n-      #endif\n-    ]])],\n-    [bitcoin_cv_qt58=yes],\n-    [bitcoin_cv_qt58=no])\n-])])\n-\n-\n dnl Internal. Check if the linked version of Qt was built as static libs.\n dnl Requires: Qt5.\n dnl Requires: INCLUDES and LIBS must be populated as necessary.\n dnl Output: bitcoin_cv_static_qt=yes|no\n-dnl Output: Defines QT_STATICPLUGIN if plugins are static.\n AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n   AC_CACHE_CHECK(for static Qt, bitcoin_cv_static_qt,[\n     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n         #include <QtCore/qconfig.h>\n-        #ifndef QT_VERSION OR QT_VERSION_STR\n+        #ifndef QT_VERSION\n         #  include <QtCore/qglobal.h>\n         #endif\n       ]],\n@@ -317,9 +275,6 @@ AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n       [bitcoin_cv_static_qt=yes],\n       [bitcoin_cv_static_qt=no])\n     ])\n-  if test \"x$bitcoin_cv_static_qt\" = xyes; then\n-    AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol for static Qt plugins])\n-  fi\n ])\n \n dnl Internal. Check if the link-requirements for static plugins are met.\n@@ -353,167 +308,49 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n       if test -d \"$qt_plugin_path/platforms/android\"; then\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms/android -lqtfreetype -lEGL\"\n       fi\n-     if test \"x$use_pkgconfig\" = xyes; then\n-     : dnl\n-     m4_ifdef([PKG_CHECK_MODULES],[\n-       if test x$bitcoin_cv_qt58 = xno; then\n-         PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n-       else\n-         PKG_CHECK_MODULES([QTFONTDATABASE], [Qt5FontDatabaseSupport], [QT_LIBS=\"-lQt5FontDatabaseSupport $QT_LIBS\"])\n-         PKG_CHECK_MODULES([QTEVENTDISPATCHER], [Qt5EventDispatcherSupport], [QT_LIBS=\"-lQt5EventDispatcherSupport $QT_LIBS\"])\n-         PKG_CHECK_MODULES([QTTHEME], [Qt5ThemeSupport], [QT_LIBS=\"-lQt5ThemeSupport $QT_LIBS\"])\n-         PKG_CHECK_MODULES([QTDEVICEDISCOVERY], [Qt5DeviceDiscoverySupport], [QT_LIBS=\"-lQt5DeviceDiscoverySupport $QT_LIBS\"])\n-         PKG_CHECK_MODULES([QTACCESSIBILITY], [Qt5AccessibilitySupport], [QT_LIBS=\"-lQt5AccessibilitySupport $QT_LIBS\"])\n-         PKG_CHECK_MODULES([QTFB], [Qt5FbSupport], [QT_LIBS=\"-lQt5FbSupport $QT_LIBS\"])\n-                fi\n-       if test \"x$TARGET_OS\" = xlinux; then\n-         PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n-       elif test \"x$TARGET_OS\" = xdarwin; then\n-         PKG_CHECK_MODULES([QTCLIPBOARD], [Qt5ClipboardSupport], [QT_LIBS=\"-lQt5ClipboardSupport $QT_LIBS\"])\n-         PKG_CHECK_MODULES([QTGRAPHICS], [Qt5GraphicsSupport], [QT_LIBS=\"-lQt5GraphicsSupport $QT_LIBS\"])\n-         PKG_CHECK_MODULES([QTCGL], [Qt5CglSupport], [QT_LIBS=\"-lQt5CglSupport $QT_LIBS\"])\n-       fi\n-     ])\n-     else\n-       if test \"x$TARGET_OS\" = xwindows; then\n-         AC_CACHE_CHECK(for Qt >= 5.6, bitcoin_cv_need_platformsupport,[\n-           AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-               #include <QtCore/qconfig.h>\n-               #ifndef QT_VERSION\n-               #  include <QtCore/qglobal.h>\n-               #endif\n-             ]],\n-             [[\n-               #if QT_VERSION < 0x050600 || QT_VERSION_MINOR < 6\n-               choke\n-               #endif\n-             ]])],\n-           [bitcoin_cv_need_platformsupport=yes],\n-           [bitcoin_cv_need_platformsupport=no])\n-         ])\n-         if test \"x$bitcoin_cv_need_platformsupport\" = xyes; then\n-           if test x$bitcoin_cv_qt58 = xno; then\n-             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}PlatformSupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXPlatformSupport not found)))\n-           else\n-             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}FontDatabaseSupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXFontDatabaseSupport not found)))\n-             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}EventDispatcherSupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXEventDispatcherSupport not found)))\n-             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}ThemeSupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXThemeSupport not found)))\n-             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}FbSupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXFbSupport not found)))\n-             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}DeviceDiscoverySupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXDeviceDiscoverySupport not found)))\n-             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}AccessibilitySupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXAccessibilitySupport not found)))\n-             QT_LIBS=\"$QT_LIBS -lversion -ldwmapi -luxtheme\"\n-           fi\n-         fi\n-       fi\n-     fi\n-   fi\n+      PKG_CHECK_MODULES([QTFONTDATABASE], [Qt5FontDatabaseSupport], [QT_LIBS=\"-lQt5FontDatabaseSupport $QT_LIBS\"])\n+      PKG_CHECK_MODULES([QTEVENTDISPATCHER], [Qt5EventDispatcherSupport], [QT_LIBS=\"-lQt5EventDispatcherSupport $QT_LIBS\"])\n+      PKG_CHECK_MODULES([QTTHEME], [Qt5ThemeSupport], [QT_LIBS=\"-lQt5ThemeSupport $QT_LIBS\"])\n+      PKG_CHECK_MODULES([QTDEVICEDISCOVERY], [Qt5DeviceDiscoverySupport], [QT_LIBS=\"-lQt5DeviceDiscoverySupport $QT_LIBS\"])\n+      PKG_CHECK_MODULES([QTACCESSIBILITY], [Qt5AccessibilitySupport], [QT_LIBS=\"-lQt5AccessibilitySupport $QT_LIBS\"])\n+      PKG_CHECK_MODULES([QTFB], [Qt5FbSupport], [QT_LIBS=\"-lQt5FbSupport $QT_LIBS\"])\n+      if test \"x$TARGET_OS\" = xlinux; then\n+        PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n+      elif test \"x$TARGET_OS\" = xdarwin; then\n+        PKG_CHECK_MODULES([QTCLIPBOARD], [Qt5ClipboardSupport], [QT_LIBS=\"-lQt5ClipboardSupport $QT_LIBS\"])\n+        PKG_CHECK_MODULES([QTGRAPHICS], [Qt5GraphicsSupport], [QT_LIBS=\"-lQt5GraphicsSupport $QT_LIBS\"])\n+        PKG_CHECK_MODULES([QTCGL], [Qt5CglSupport], [QT_LIBS=\"-lQt5CglSupport $QT_LIBS\"])\n+      fi\n+    fi\n ])\n \n dnl Internal. Find Qt libraries using pkg-config.\n-dnl Inputs: bitcoin_qt_want_version (from --with-gui=). The version to check\n-dnl         first.\n-dnl Inputs: $1: If bitcoin_qt_want_version is \"auto\", check for this version\n-dnl         first.\n dnl Outputs: All necessary QT_* variables are set.\n dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n-AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n-  m4_ifdef([PKG_CHECK_MODULES],[\n-    QT_LIB_PREFIX=Qt5\n-    qt5_modules=\"Qt5Core Qt5Gui Qt5Network Qt5Widgets\"\n-    BITCOIN_QT_CHECK([\n-      PKG_CHECK_MODULES([QT5], [$qt5_modules], [QT_INCLUDES=\"$QT5_CFLAGS\"; QT_LIBS=\"$QT5_LIBS\" have_qt=yes],[have_qt=no])\n-\n-      if test \"x$have_qt\" != xyes; then\n-        have_qt=no\n-        BITCOIN_QT_FAIL([Qt dependencies not found])\n-      fi\n-    ])\n-    BITCOIN_QT_CHECK([\n-      PKG_CHECK_MODULES([QT_TEST], [${QT_LIB_PREFIX}Test], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n-      if test \"x$use_dbus\" != xno; then\n-        PKG_CHECK_MODULES([QT_DBUS], [${QT_LIB_PREFIX}DBus], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n-      fi\n-    ])\n+AC_DEFUN([_BITCOIN_QT_FIND_LIBS],[\n+  BITCOIN_QT_CHECK([\n+    PKG_CHECK_MODULES([QT_CORE], [${qt_lib_prefix}Core $qt_version], [],\n+                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Core $qt_version not found])])\n   ])\n-  true; dnl\n-])\n-\n-dnl Internal. Find Qt libraries without using pkg-config. Version is deduced\n-dnl from the discovered headers.\n-dnl Inputs: bitcoin_qt_want_version (from --with-gui=). The version to use.\n-dnl         If \"auto\", the version will be discovered by _BITCOIN_QT_CHECK_QT5.\n-dnl Outputs: All necessary QT_* variables are set.\n-dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n-AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n-  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-  TEMP_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n-  TEMP_LIBS=\"$LIBS\"\n   BITCOIN_QT_CHECK([\n-    if test \"x$qt_include_path\" != x; then\n-      QT_INCLUDES=\"-I$qt_include_path -I$qt_include_path/QtCore -I$qt_include_path/QtGui -I$qt_include_path/QtWidgets -I$qt_include_path/QtNetwork -I$qt_include_path/QtTest -I$qt_include_path/QtDBus\"\n-      CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n-    fi\n+    PKG_CHECK_MODULES([QT_GUI], [${qt_lib_prefix}Gui $qt_version], [],\n+                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Gui $qt_version not found])])\n   ])\n-\n-  BITCOIN_QT_CHECK([AC_CHECK_HEADER([QtPlugin],,BITCOIN_QT_FAIL(QtCore headers missing))])\n-  BITCOIN_QT_CHECK([AC_CHECK_HEADER([QApplication],, BITCOIN_QT_FAIL(QtGui headers missing))])\n-  BITCOIN_QT_CHECK([AC_CHECK_HEADER([QLocalSocket],, BITCOIN_QT_FAIL(QtNetwork headers missing))])\n-\n   BITCOIN_QT_CHECK([\n-    if test \"x$bitcoin_qt_want_version\" = xauto; then\n-      _BITCOIN_QT_CHECK_QT5\n-      _BITCOIN_QT_CHECK_QT58\n-    fi\n-    QT_LIB_PREFIX=Qt5\n+    PKG_CHECK_MODULES([QT_WIDGETS], [${qt_lib_prefix}Widgets $qt_version], [],\n+                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Widgets $qt_version not found])])\n   ])\n-\n   BITCOIN_QT_CHECK([\n-    LIBS=\n-    if test \"x$qt_lib_path\" != x; then\n-      LIBS=\"$LIBS -L$qt_lib_path\"\n-    fi\n-\n-    if test \"x$TARGET_OS\" = xwindows; then\n-      AC_CHECK_LIB([imm32],      [main],, BITCOIN_QT_FAIL(libimm32 not found))\n-    fi\n+    PKG_CHECK_MODULES([QT_NETWORK], [${qt_lib_prefix}Network $qt_version], [],\n+                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Network $qt_version not found])])\n   ])\n-\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n-  if test x$bitcoin_cv_qt58 = xno; then\n-    BITCOIN_QT_CHECK(AC_SEARCH_LIBS([png_error] ,[qtpng png],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n-    BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n-  else\n-    BITCOIN_QT_CHECK(AC_SEARCH_LIBS([png_error] ,[qtlibpng png],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n-    BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre2_match_16], [qtpcre2 libqtpcre2],,AC_MSG_WARN([libqtpcre2 not found. Assuming qt has it built-in])))\n-  fi\n-  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng qtharfbuzz harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Core not found)))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Gui not found)))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Network not found)))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Widgets],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Widgets not found)))\n-  QT_LIBS=\"$LIBS\"\n-  LIBS=\"$TEMP_LIBS\"\n+  QT_INCLUDES=\"$QT_CORE_CFLAGS $QT_GUI_CFLAGS $QT_WIDGETS_CFLAGS $QT_NETWORK_CFLAGS\"\n+  QT_LIBS=\"$QT_CORE_LIBS $QT_GUI_LIBS $QT_WIDGETS_LIBS $QT_NETWORK_LIBS\"\n \n   BITCOIN_QT_CHECK([\n-    LIBS=\n-    if test \"x$qt_lib_path\" != x; then\n-      LIBS=\"-L$qt_lib_path\"\n-    fi\n-    AC_CHECK_LIB([${QT_LIB_PREFIX}Test],      [main],, have_qt_test=no)\n-    AC_CHECK_HEADER([QTest],, have_qt_test=no)\n-    QT_TEST_LIBS=\"$LIBS\"\n+    PKG_CHECK_MODULES([QT_TEST], [${qt_lib_prefix}Test $qt_version], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n     if test \"x$use_dbus\" != xno; then\n-      LIBS=\n-      if test \"x$qt_lib_path\" != x; then\n-        LIBS=\"-L$qt_lib_path\"\n-      fi\n-      AC_CHECK_LIB([${QT_LIB_PREFIX}DBus],      [main],, have_qt_dbus=no)\n-      AC_CHECK_HEADER([QtDBus],, have_qt_dbus=no)\n-      QT_DBUS_LIBS=\"$LIBS\"\n+      PKG_CHECK_MODULES([QT_DBUS], [${qt_lib_prefix}DBus $qt_version], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n     fi\n   ])\n-  CPPFLAGS=\"$TEMP_CPPFLAGS\"\n-  CXXFLAGS=\"$TEMP_CXXFLAGS\"\n-  LIBS=\"$TEMP_LIBS\"\n ])"
      },
      {
        "sha": "5201a8cc7cb7fe1faa162857de431a801dcc89d5",
        "filename": "build-aux/m4/l_atomic.m4",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build-aux/m4/l_atomic.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build-aux/m4/l_atomic.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/l_atomic.m4?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -14,6 +14,9 @@ m4_define([_CHECK_ATOMIC_testbody], [[\n   #include <cstdint>\n \n   int main() {\n+    std::atomic<bool> lock{true};\n+    std::atomic_exchange(&lock, false);\n+\n     std::atomic<int64_t> a{};\n \n     int64_t v = 5;"
      },
      {
        "sha": "ae8120fdf3a44ab47700fe40a3a3cd93f3cb8d96",
        "filename": "build_msvc/.gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/.gitignore?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -24,3 +24,4 @@ libtest_util/libtest_util.vcxproj\n */Win32\n libbitcoin_qt/QtGeneratedFiles/*\n test_bitcoin-qt/QtGeneratedFiles/*\n+vcpkg_installed\n\\ No newline at end of file"
      },
      {
        "sha": "87ea556a23b31897ac72907ebb5f9ee9516b7a1b",
        "filename": "build_msvc/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 21,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -3,7 +3,7 @@ Building Bitcoin Core with Visual Studio\n \n Introduction\n ---------------------\n-Solution and project files to build the Bitcoin Core applications `msbuild` or Visual Studio can be found in the build_msvc directory. The build has been tested with Visual Studio 2017 and 2019.\n+Solution and project files to build the Bitcoin Core applications `msbuild` or Visual Studio can be found in the `build_msvc` directory. The build has been tested with Visual Studio 2017 and 2019.\n \n Building with Visual Studio is an alternative to the Linux based [cross-compiler build](https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md).\n \n@@ -12,10 +12,9 @@ Quick Start\n The minimal steps required to build Bitcoin Core with the msbuild toolchain are below. More detailed instructions are contained in the following sections.\n \n ```\n-vcpkg install --triplet x64-windows-static berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] zeromq double-conversion\n-vcpkg integrate install\n-py -3 build_msvc\\msvc-autogen.py\n-msbuild /m build_msvc\\bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n+cd build_msvc\n+py -3 msvc-autogen.py\n+msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n ```\n \n Dependencies\n@@ -28,14 +27,7 @@ Options for installing the dependencies in a Visual Studio compatible manner are\n - Download the source code, build each dependency, add the required include paths, link libraries and binary tools to the Visual Studio project files.\n - Use [nuget](https://www.nuget.org/) packages with the understanding that any binary files have been compiled by an untrusted third party.\n \n-The [external dependencies](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) required for building are:\n-\n-- Berkeley DB\n-- Boost\n-- DoubleConversion\n-- libevent\n-- Qt5\n-- ZeroMQ\n+The [external dependencies](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) required for building are listed in the `build_msvc/vcpkg.json` file. The `msbuild` project files are configured to automatically install the `vcpkg` dependencies.\n \n Qt\n ---------------------\n@@ -52,20 +44,14 @@ Building\n The instructions below use `vcpkg` to install the dependencies.\n \n - Install [`vcpkg`](https://github.com/Microsoft/vcpkg).\n-- Install the required packages (replace x64 with x86 as required). The list of required packages can be found in the `build_msvc\\vcpkg-packages.txt` file. The PowerShell command below will work if run from the repository root directory and `vcpkg` is in the path. Alternatively the contents of the packages text file can be pasted in place of the `Get-Content` cmdlet.\n-\n-```\n-PS >.\\vcpkg install --triplet x64-windows-static $(Get-Content -Path build_msvc\\vcpkg-packages.txt).split()\n-PS >.\\vcpkg integrate install\n-```\n \n - Use Python to generate `*.vcxproj` from Makefile\n \n ```\n PS >py -3 msvc-autogen.py\n ```\n \n-- An optional step is to adjust the settings in the build_msvc directory and the common.init.vcxproj file. This project file contains settings that are common to all projects such as the runtime library version and target Windows SDK version. The Qt directories can also be set.\n+- An optional step is to adjust the settings in the `build_msvc` directory and the `common.init.vcxproj` file. This project file contains settings that are common to all projects such as the runtime library version and target Windows SDK version. The Qt directories can also be set.\n \n - To build from the command line with the Visual Studio 2017 toolchain use:\n \n@@ -79,7 +65,7 @@ msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /p:PlatformTools\n msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n ```\n \n-- Alternatively open the `build_msvc\\bitcoin.sln` file in Visual Studio.\n+- Alternatively open the `build_msvc/bitcoin.sln` file in Visual Studio.\n \n AppVeyor\n ---------------------"
      },
      {
        "sha": "65ce1ee9da0468c859f0ed5b48ec129135560401",
        "filename": "build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -56,7 +56,7 @@\n     </ClCompile>\n     <Link>\n       <AdditionalDependencies>$(QtReleaseLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n-      <AdditionalOptions>/ignore:4206</AdditionalOptions>\n+      <AdditionalOptions>/ignore:4206 /LTCG:OFF</AdditionalOptions>\n     </Link>\n     <ResourceCompile>\n       <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>"
      },
      {
        "sha": "53aead38b586e89f2d3ef92e5164f45f6e988a3e",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 13,
        "deletions": 22,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -15,13 +15,10 @@\n #define CLIENT_VERSION_IS_RELEASE false\n \n /* Major version */\n-#define CLIENT_VERSION_MAJOR 0\n+#define CLIENT_VERSION_MAJOR 21\n \n /* Minor version */\n-#define CLIENT_VERSION_MINOR 20\n-\n-/* Build revision */\n-#define CLIENT_VERSION_REVISION 99\n+#define CLIENT_VERSION_MINOR 99\n \n /* Copyright holder(s) before %s replacement */\n #define COPYRIGHT_HOLDERS \"The %s developers\"\n@@ -38,18 +35,24 @@\n /* Define to 1 to enable wallet functions */\n #define ENABLE_WALLET 1\n \n+/* Define to 1 to enable BDB wallet */\n+#define USE_BDB 1\n+\n+/* Define to 1 to enable SQLite wallet */\n+#define USE_SQLITE 1\n+\n /* Define to 1 to enable ZMQ functions */\n #define ENABLE_ZMQ 1\n \n-/* parameter and return value type for __fdelt_chk */\n-/* #undef FDELT_TYPE */\n-\n /* define if the Boost library is available */\n #define HAVE_BOOST /**/\n \n /* define if the Boost::Filesystem library is available */\n #define HAVE_BOOST_FILESYSTEM /**/\n \n+/* define if the Boost::Process library is available */\n+#define HAVE_BOOST_PROCESS /**/\n+\n /* define if the Boost::System library is available */\n #define HAVE_BOOST_SYSTEM /**/\n \n@@ -140,18 +143,6 @@\n    don't. */\n #define HAVE_DECL_STRNLEN 1\n \n-/* Define to 1 if you have the declaration of `__builtin_clz', and to 0 if you\n-   don't. */\n-//#define HAVE_DECL___BUILTIN_CLZ 1\n-\n-/* Define to 1 if you have the declaration of `__builtin_clzl', and to 0 if\n-   you don't. */\n-//#define HAVE_DECL___BUILTIN_CLZL 1\n-\n-/* Define to 1 if you have the declaration of `__builtin_clzll', and to 0 if\n-   you don't. */\n-//#define HAVE_DECL___BUILTIN_CLZLL 1\n-\n /* Define to 1 if you have the <dlfcn.h> header file. */\n /* #undef HAVE_DLFCN_H */\n \n@@ -265,7 +256,7 @@\n #define PACKAGE_NAME \"Bitcoin Core\"\n \n /* Define to the full name and version of this package. */\n-#define PACKAGE_STRING \"Bitcoin Core 0.19.99\"\n+#define PACKAGE_STRING \"Bitcoin Core 21.99.0\"\n \n /* Define to the one symbol short name of this package. */\n #define PACKAGE_TARNAME \"bitcoin\"\n@@ -274,7 +265,7 @@\n #define PACKAGE_URL \"https://bitcoincore.org/\"\n \n /* Define to the version of this package. */\n-#define PACKAGE_VERSION \"0.19.99\"\n+#define PACKAGE_VERSION \"21.99.0\"\n \n /* Define to necessary symbol if this constant uses a non-standard name on\n    your system. */"
      },
      {
        "sha": "48dfafaee0c8fee2dfae9d9cc44206d972a22b10",
        "filename": "build_msvc/bitcoind/bitcoind.vcxproj",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/bitcoind/bitcoind.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/bitcoind/bitcoind.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoind/bitcoind.vcxproj?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -62,6 +62,10 @@\n                    Replace=\"@EXEEXT@\" By=\".exe\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                   Replace=\"@ENABLE_WALLET_TRUE@\" By=\"\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                  Replace=\"@USE_BDB_TRUE@\" By=\"\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                  Replace=\"@USE_SQLITE_TRUE@\" By=\"\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                   Replace=\"@BUILD_BITCOIN_CLI_TRUE@\" By=\"\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\""
      },
      {
        "sha": "9c589bccbc4754271e51eecf5eca28ec568836c4",
        "filename": "build_msvc/common.init.vcxproj",
        "status": "modified",
        "additions": 29,
        "deletions": 41,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/common.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/common.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.init.vcxproj?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -4,11 +4,20 @@\n \n   <PropertyGroup Label=\"Globals\">\n     <VCProjectVersion>16.0</VCProjectVersion>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n     <UseNativeEnvironment>true</UseNativeEnvironment>\n    </PropertyGroup>\n \n+   <PropertyGroup Label=\"Vcpkg\">\n+    <VcpkgEnabled>true</VcpkgEnabled>\n+    <VcpkgEnableManifest>true</VcpkgEnableManifest>\n+    <VcpkgManifestInstall>true</VcpkgManifestInstall>\n+    <VcpkgUseStatic>true</VcpkgUseStatic>\n+    <VcpkgAutoLink>true</VcpkgAutoLink>\n+    <VcpkgConfiguration>$(Configuration)</VcpkgConfiguration>\n+    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n+    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n+  </PropertyGroup>\n+\n   <PropertyGroup Condition=\"'$(WindowsTargetPlatformVersion)'=='' and !Exists('$(WindowsSdkDir)\\DesignTime\\CommonConfiguration\\Neutral\\Windows.props')\">\n      <WindowsTargetPlatformVersion_10 Condition=\"'$(WindowsTargetPlatformVersion_10)' == ''\">$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v10.0@ProductVersion)</WindowsTargetPlatformVersion_10>\n      <WindowsTargetPlatformVersion_10 Condition=\"'$(WindowsTargetPlatformVersion_10)' == ''\">$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SDKs\\Windows\\v10.0@ProductVersion)</WindowsTargetPlatformVersion_10>\n@@ -36,66 +45,46 @@\n     </ProjectConfiguration>\n   </ItemGroup>\n \n-  <PropertyGroup Condition=\"'$(Configuration)'=='Debug'\" Label=\"Configuration\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <WholeProgramOptimization>false</WholeProgramOptimization>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n+  <PropertyGroup Condition=\"'$(Configuration)'=='Release'\" Label=\"Configuration\">\n+    <LinkIncremental>false</LinkIncremental>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n     <PlatformToolset>v142</PlatformToolset>\n     <CharacterSet>Unicode</CharacterSet>\n+    <GenerateManifest>No</GenerateManifest>\n     <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\$(ProjectName)\\</OutDir>\n     <IntDir>$(Platform)\\$(Configuration)\\$(ProjectName)\\</IntDir>\n   </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)'=='Release'\" Label=\"Configuration\">\n-    <LinkIncremental>false</LinkIncremental>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n+\n+  <PropertyGroup Condition=\"'$(Configuration)'=='Debug'\" Label=\"Configuration\">\n+    <LinkIncremental>true</LinkIncremental>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n     <PlatformToolset>v142</PlatformToolset>\n     <CharacterSet>Unicode</CharacterSet>\n     <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\$(ProjectName)\\</OutDir>\n     <IntDir>$(Platform)\\$(Configuration)\\$(ProjectName)\\</IntDir>\n   </PropertyGroup>\n \n-<ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <SDLCheck>true</SDLCheck>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-    </Link>\n-  </ItemDefinitionGroup>\n-\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+<ItemDefinitionGroup Condition=\"'$(Configuration)'=='Release'\">\n     <ClCompile>\n       <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-      <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n-    </ClCompile>\n-  </ItemDefinitionGroup>\n-\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <Optimization>MaxSpeed</Optimization>\n+      <WholeProgramOptimization>false</WholeProgramOptimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <SDLCheck>true</SDLCheck>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+      <DebugInformationFormat>None</DebugInformationFormat>\n     </ClCompile>\n     <Link>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n+      <EnableCOMDATFolding>false</EnableCOMDATFolding>\n+      <OptimizeReferences>false</OptimizeReferences>\n+      <AdditionalOptions>/LTCG:OFF</AdditionalOptions>\n     </Link>\n   </ItemDefinitionGroup>\n \n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)'=='Debug'\">\n     <ClCompile>\n       <Optimization>Disabled</Optimization>\n+      <WholeProgramOptimization>false</WholeProgramOptimization>\n       <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n@@ -107,15 +96,14 @@\n     <ClCompile>\n       <WarningLevel>Level3</WarningLevel>\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <AdditionalOptions>/utf-8 %(AdditionalOptions)</AdditionalOptions>\n+      <AdditionalOptions>/utf-8 /std:c++17 %(AdditionalOptions)</AdditionalOptions>\n       <DisableSpecificWarnings>4018;4221;4244;4267;4334;4715;4805;4834</DisableSpecificWarnings>\n       <TreatWarningAsError>true</TreatWarningAsError>\n-      <PreprocessorDefinitions>ZMQ_STATIC;NOMINMAX;WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;_WIN32_WINNT=0x0601;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING;_SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING;ZMQ_STATIC;NOMINMAX;WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;_WIN32_WINNT=0x0601;_WIN32_IE=0x0501;WIN32_LEAN_AND_MEAN;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n     <Link>\n       <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n       <AdditionalDependencies>Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n     </Link>\n     <Lib>"
      },
      {
        "sha": "270c75e8a7b1fdc870b4d7925e69a7c26b9fedc5",
        "filename": "build_msvc/common.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/common.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/common.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.vcxproj?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -4,7 +4,7 @@\n   <Target Name=\"CopyBuildArtifacts\" Condition=\"'$(ConfigurationType)' != 'StaticLibrary'\">\n     <ItemGroup>\n       <BuildArtifacts Include=\"$(OutDir)$(TargetName)$(TargetExt)\"></BuildArtifacts>\n-      <BuildArtifacts Include=\"$(OutDir)$(TargetName).pdb\"></BuildArtifacts>\n+      <BuildArtifacts Include=\"$(OutDir)$(TargetName).pdb\" Condition=\"Exists('$(OutDir)$(TargetName).pdb')\"></BuildArtifacts>\n     </ItemGroup>\n     <Copy SourceFiles=\"@(BuildArtifacts)\" SkipUnchangedFiles=\"true\" DestinationFolder=\"..\\..\\src\\\" Condition=\"'$(OutDir)' != ''\"></Copy>\n   </Target>"
      },
      {
        "sha": "490ce8b1ced9fd64addcc8ec9e42ba959633e6d3",
        "filename": "build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -35,6 +35,7 @@\n     <ClCompile Include=\"..\\..\\src\\qt\\paymentserver.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\peertablemodel.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\platformstyle.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\psbtoperationsdialog.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\qrimagewidget.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\qvalidatedlineedit.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\qvaluecombobox.cpp\" />\n@@ -87,6 +88,7 @@\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_paymentserver.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_peertablemodel.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_platformstyle.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_psbtoperationsdialog.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_qrimagewidget.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_qvalidatedlineedit.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_qvaluecombobox.cpp\" />\n@@ -102,6 +104,7 @@\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiondesc.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiondescdialog.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionfilterproxy.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionoverviewwidget.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionrecord.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiontablemodel.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionview.cpp\" />"
      },
      {
        "sha": "613d5c71991597b58ef6b44d490d9ddd61d8bd47",
        "filename": "build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -8,6 +8,9 @@\n     <ConfigurationType>StaticLibrary</ConfigurationType>\n   </PropertyGroup>\n   <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\wallet\\bdb.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\wallet\\salvage.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\wallet\\sqlite.cpp\" />\n @SOURCE_FILES@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />"
      },
      {
        "sha": "c42918d6e17737ad8a473a5d597e4c162108e42f",
        "filename": "build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libsecp256k1/libsecp256k1.vcxproj?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -12,7 +12,7 @@\n   </ItemGroup>\n     <ItemDefinitionGroup>\n     <ClCompile>\n-      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;ENABLE_MODULE_EXTRAKEYS;ENABLE_MODULE_SCHNORRSIG;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n        <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n      </ClCompile>\n   </ItemDefinitionGroup>"
      },
      {
        "sha": "5978b9a0d96f0c107da6c2beae79dae4c7536749",
        "filename": "build_msvc/libsecp256k1_config.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/libsecp256k1_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/libsecp256k1_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libsecp256k1_config.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -26,4 +26,7 @@\n #define USE_FIELD_10X26 1\n #define USE_SCALAR_8X32 1\n \n+#define ECMULT_GEN_PREC_BITS 4\n+#define ECMULT_WINDOW_SIZE 15\n+\n #endif /* BITCOIN_LIBSECP256K1_CONFIG_H */"
      },
      {
        "sha": "1ddd62edf2505a58ae1ddb67de0344b92e8b025b",
        "filename": "build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -73,7 +73,7 @@\n     </ClCompile>\n     <Link>\n       <AdditionalDependencies>$(QtLibraryDir)\\Qt5Test.lib;$(QtReleaseLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n-\t  <AdditionalOptions>/ignore:4206</AdditionalOptions>\n+      <AdditionalOptions>/ignore:4206 /LTCG:OFF</AdditionalOptions>\n     </Link>\n   </ItemDefinitionGroup>\n \n@@ -83,7 +83,7 @@\n     </ClCompile>\n     <Link>\n       <AdditionalDependencies>$(QtDebugLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n-\t  <AdditionalOptions>/ignore:4206</AdditionalOptions>\n+      <AdditionalOptions>/ignore:4206</AdditionalOptions>\n     </Link>\n   </ItemDefinitionGroup>\n   <ItemGroup>"
      },
      {
        "sha": "115c92792d4a2bea407f904250901e4d694f281f",
        "filename": "build_msvc/testconsensus/testconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/testconsensus/testconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/testconsensus/testconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/testconsensus/testconsensus.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Copyright (c) 2018-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "307f295f089cd225a70cc2c98ae60c0b4ce1de2f",
        "filename": "build_msvc/vcpkg-packages.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/build_msvc/vcpkg-packages.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/build_msvc/vcpkg-packages.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/vcpkg-packages.txt?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1 +0,0 @@\n-berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] zeromq double-conversion\n\\ No newline at end of file"
      },
      {
        "sha": "dfd3929c4410b92364a6f314295ddbaab7912bf7",
        "filename": "build_msvc/vcpkg.json",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/vcpkg.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/build_msvc/vcpkg.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/vcpkg.json?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,20 @@\n+{\n+  \"name\": \"bitcoin-core\",\n+  \"version-string\": \"1\",\n+  \"dependencies\": [\n+    \"berkeleydb\",\n+    \"boost-filesystem\",\n+    \"boost-multi-index\",\n+    \"boost-process\",\n+    \"boost-signals2\",\n+    \"boost-test\",\n+    \"boost-thread\",\n+    \"sqlite3\",\n+    \"double-conversion\",\n+    {\n+      \"name\": \"libevent\",\n+      \"features\": [\"thread\"]\n+    },\n+    \"zeromq\"\n+  ]\n+}"
      },
      {
        "sha": "3c5f04c39e348d407718c7fce8cd4c69ab6cf0db",
        "filename": "ci/README.md",
        "status": "modified",
        "additions": 33,
        "deletions": 6,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/README.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,12 +1,8 @@\n-## ci scripts\n+## CI Scripts\n \n This directory contains scripts for each build step in each build stage.\n \n-Currently three stages `lint`, `extended_lint` and `test` are defined. Each stage has its own lifecycle, similar to the\n-[Travis CI lifecycle](https://docs.travis-ci.com/user/job-lifecycle#the-job-lifecycle). Every script in here is named\n-and numbered according to which stage and lifecycle step it belongs to.\n-\n-### Running a stage locally\n+### Running a Stage Locally\n \n Be aware that the tests will be built and run in-place, so please run at your own risk.\n If the repository is not a fresh git clone, you might have to clean files from previous builds or test runs first.\n@@ -36,3 +32,34 @@ To run the test stage with a specific configuration,\n ```\n FILE_ENV=\"./ci/test/00_setup_env_arm.sh\" ./ci/test_run_all.sh\n ```\n+\n+### Configurations\n+\n+The test files (`FILE_ENV`) are constructed to test a wide range of\n+configurations, rather than a single pass/fail. This helps to catch build\n+failures and logic errors that present on platforms other than the ones the\n+author has tested.\n+\n+Some builders use the dependency-generator in `./depends`, rather than using\n+the system package manager to install build dependencies. This guarantees that\n+the tester is using the same versions as the release builds, which also use\n+`./depends`.\n+\n+If no `FILE_ENV` has been specified or values are left out, `00_setup_env.sh`\n+is used as the default configuration with fallback values.\n+\n+It is also possible to force a specific configuration without modifying the\n+file. For example,\n+\n+```\n+MAKEJOBS=\"-j1\" FILE_ENV=\"./ci/test/00_setup_env_arm.sh\" ./ci/test_run_all.sh\n+```\n+\n+The files starting with `0n` (`n` greater than 0) are the scripts that are run\n+in order.\n+\n+### Cache\n+\n+In order to avoid rebuilding all dependencies for each build, the binaries are\n+cached and re-used when possible. Changes in the dependency-generator will\n+trigger cache-invalidation and rebuilds as necessary."
      },
      {
        "sha": "a0b579de1e04fca140ee902a231a7f1b8e69f9f7",
        "filename": "ci/lint/04_install.sh",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/lint/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/lint/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/04_install.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,15 +1,21 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C\n \n-travis_retry pip3 install codespell==1.15.0\n-travis_retry pip3 install flake8==3.7.8\n-travis_retry pip3 install yq\n+${CI_RETRY_EXE} apt-get update\n+${CI_RETRY_EXE} apt-get install -y clang-format-9 python3-pip curl git gawk jq\n+update-alternatives --install /usr/bin/clang-format      clang-format      $(which clang-format-9     ) 100\n+update-alternatives --install /usr/bin/clang-format-diff clang-format-diff $(which clang-format-diff-9) 100\n \n-SHELLCHECK_VERSION=v0.6.0\n-curl -s \"https://storage.googleapis.com/shellcheck/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz\" | tar --xz -xf - --directory /tmp/\n+${CI_RETRY_EXE} pip3 install codespell==2.0.0\n+${CI_RETRY_EXE} pip3 install flake8==3.8.3\n+${CI_RETRY_EXE} pip3 install yq\n+${CI_RETRY_EXE} pip3 install mypy==0.781\n+\n+SHELLCHECK_VERSION=v0.7.1\n+curl -sL \"https://github.com/koalaman/shellcheck/releases/download/${SHELLCHECK_VERSION}/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz\" | tar --xz -xf - --directory /tmp/\n export PATH=\"/tmp/shellcheck-${SHELLCHECK_VERSION}:${PATH}\""
      },
      {
        "sha": "2987812c8e64bab1648a3dc04492b1d338cdf047",
        "filename": "ci/lint/05_before_script.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/ci/lint/05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/ci/lint/05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/05_before_script.sh?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,9 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C\n-\n-git fetch --unshallow"
      },
      {
        "sha": "e38cfe8eefd21e8426368d30c1da6de1c67f4840",
        "filename": "ci/lint/06_script.sh",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/lint/06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/lint/06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/06_script.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,26 +1,33 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C\n \n-if [ \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then\n-  test/lint/commit-script-check.sh $TRAVIS_COMMIT_RANGE\n+GIT_HEAD=$(git rev-parse HEAD)\n+if [ -n \"$CIRRUS_PR\" ]; then\n+  COMMIT_RANGE=\"$CIRRUS_BASE_SHA..$GIT_HEAD\"\n+  test/lint/commit-script-check.sh $COMMIT_RANGE\n fi\n+export COMMIT_RANGE\n \n+# This only checks that the trees are pure subtrees, it is not doing a full\n+# check with -r to not have to fetch all the remotes.\n test/lint/git-subtree-check.sh src/crypto/ctaes\n test/lint/git-subtree-check.sh src/secp256k1\n test/lint/git-subtree-check.sh src/univalue\n test/lint/git-subtree-check.sh src/leveldb\n test/lint/git-subtree-check.sh src/crc32c\n test/lint/check-doc.py\n-test/lint/check-rpc-mappings.py .\n test/lint/lint-all.sh\n \n-if [ \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" ] && [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then\n+if [ \"$CIRRUS_REPO_FULL_NAME\" = \"bitcoin/bitcoin\" ] && [ -n \"$CIRRUS_CRON\" ]; then\n     git log --merges --before=\"2 days ago\" -1 --format='%H' > ./contrib/verify-commits/trusted-sha512-root-commit\n-    travis_retry gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $(<contrib/verify-commits/trusted-keys) &&\n+    ${CI_RETRY_EXE}  gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $(<contrib/verify-commits/trusted-keys) &&\n     ./contrib/verify-commits/verify-commits.py --clean-merge=2;\n fi\n+\n+echo\n+git log --no-merges --oneline $COMMIT_RANGE"
      },
      {
        "sha": "7adfe71674149d0215c08beabb45ba0bbc9cf1fc",
        "filename": "ci/lint_run_all.sh",
        "status": "renamed",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/lint_run_all.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/lint_run_all.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint_run_all.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -6,9 +6,6 @@\n \n export LC_ALL=C.UTF-8\n \n-export HOST=s390x-linux-gnu\n-export NO_DEPENDS=1\n-export BITCOIN_CONFIG=\"--with-incompatible-bdb --enable-reduce-exports\"\n-export RUN_UNIT_TESTS=true\n-export RUN_FUNCTIONAL_TESTS=true\n-export GOAL=\"install\"\n+set -o errexit; source ./ci/test/00_setup_env.sh\n+set -o errexit; source ./ci/lint/04_install.sh\n+set -o errexit; source ./ci/lint/06_script.sh",
        "previous_filename": "ci/test/00_setup_env_s390x_host.sh"
      },
      {
        "sha": "72e29141a6643032e65ee75aa39cd8d81bf7dcc2",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -31,15 +31,25 @@ export BASE_SCRATCH_DIR=${BASE_SCRATCH_DIR:-$BASE_ROOT_DIR/ci/scratch}\n export HOST=${HOST:-$(\"$BASE_ROOT_DIR/depends/config.guess\")}\n # Whether to prefer BusyBox over GNU utilities\n export USE_BUSY_BOX=${USE_BUSY_BOX:-false}\n+\n export RUN_UNIT_TESTS=${RUN_UNIT_TESTS:-true}\n export RUN_FUNCTIONAL_TESTS=${RUN_FUNCTIONAL_TESTS:-true}\n-export TEST_PREVIOUS_RELEASES=${TEST_PREVIOUS_RELEASES:-false}\n+export RUN_SECURITY_TESTS=${RUN_SECURITY_TESTS:-false}\n+# By how much to scale the test_runner timeouts (option --timeout-factor).\n+# This is needed because some ci machines have slow CPU or disk, so sanitizers\n+# might be slow or a reindex might be waiting on disk IO.\n+export TEST_RUNNER_TIMEOUT_FACTOR=${TEST_RUNNER_TIMEOUT_FACTOR:-40}\n+export TEST_RUNNER_ENV=${TEST_RUNNER_ENV:-}\n export RUN_FUZZ_TESTS=${RUN_FUZZ_TESTS:-false}\n+export EXPECTED_TESTS_DURATION_IN_SECONDS=${EXPECTED_TESTS_DURATION_IN_SECONDS:-1000}\n+\n export CONTAINER_NAME=${CONTAINER_NAME:-ci_unnamed}\n export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:18.04}\n # Randomize test order.\n # See https://www.boost.org/doc/libs/1_71_0/libs/test/doc/html/boost_test/utf_reference/rt_param_reference/random.html\n export BOOST_TEST_RANDOM=${BOOST_TEST_RANDOM:-1}\n+# See man 7 debconf\n+export DEBIAN_FRONTEND=noninteractive\n export CCACHE_SIZE=${CCACHE_SIZE:-100M}\n export CCACHE_TEMPDIR=${CCACHE_TEMPDIR:-/tmp/.ccache-temp}\n export CCACHE_COMPRESS=${CCACHE_COMPRESS:-1}"
      },
      {
        "sha": "42783197a974a16970603fccbbabe3c0045033f6",
        "filename": "ci/test/00_setup_env_arm.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_arm.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_arm.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_arm.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -21,8 +21,8 @@ export CONTAINER_NAME=ci_arm_linux\n export DOCKER_NAME_TAG=\"debian:buster\"\n export USE_BUSY_BOX=true\n export RUN_UNIT_TESTS=true\n-export RUN_FUNCTIONAL_TESTS=true\n+export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"install\"\n # -Wno-psabi is to disable ABI warnings: \"note: parameter passing for argument of type ... changed in GCC 7.1\"\n # This could be removed once the ABI change warning does not show up by default\n-export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi --enable-werror\"\n+export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi --with-boost-process\""
      },
      {
        "sha": "1ec44a7a1a88733fb39c976e1ca19e75d3ac192a",
        "filename": "ci/test/00_setup_env_i686_centos.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_i686_centos.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_i686_centos.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_i686_centos.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -7,9 +7,10 @@\n export LC_ALL=C.UTF-8\n \n export HOST=i686-pc-linux-gnu\n-export CONTAINER_NAME=ci_i686_centos_7\n-export DOCKER_NAME_TAG=centos:7\n-export DOCKER_PACKAGES=\"gcc-c++ glibc-devel.x86_64 libstdc++-devel.x86_64 glibc-devel.i686 libstdc++-devel.i686 ccache libtool make git python3 python36-zmq which patch lbzip2 dash\"\n+export CONTAINER_NAME=ci_i686_centos_8\n+export DOCKER_NAME_TAG=centos:8\n+export DOCKER_PACKAGES=\"gcc-c++ glibc-devel.x86_64 libstdc++-devel.x86_64 glibc-devel.i686 libstdc++-devel.i686 ccache libtool make git python3 python3-zmq which patch lbzip2 dash rsync coreutils\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-reduce-exports\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-reduce-exports --with-boost-process\"\n export CONFIG_SHELL=\"/bin/dash\"\n+export TEST_RUNNER_ENV=\"LC_ALL=en_US.UTF-8\""
      },
      {
        "sha": "b0de2ec0bbedd5d9b57d43b3a3874b90804c84c1",
        "filename": "ci/test/00_setup_env_mac.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_mac.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_mac.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -7,10 +7,12 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_macos_cross\n-export HOST=x86_64-apple-darwin16\n-export PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools\"\n-export OSX_SDK=10.14\n+export DOCKER_NAME_TAG=ubuntu:18.04  # Check that bionic can cross-compile to macos (bionic is used in the gitian build as well)\n+export HOST=x86_64-apple-darwin18\n+export PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools xorriso\"\n+export XCODE_VERSION=11.3.1\n+export XCODE_BUILD_ID=11C505\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"deploy\"\n-export BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\"\n+export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports --with-boost-process\""
      },
      {
        "sha": "274a0d1b7c6fc78ae771cbdda70ae1663a3d329d",
        "filename": "ci/test/00_setup_env_mac_host.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_mac_host.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_mac_host.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac_host.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -6,11 +6,13 @@\n \n export LC_ALL=C.UTF-8\n \n-export HOST=x86_64-apple-darwin16\n+export HOST=x86_64-apple-darwin18\n export PIP_PACKAGES=\"zmq\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\"\n-export TEST_RUNNER_EXTRA=\"wallet_disable\"  # Only run wallet_disable as a smoke test, see https://github.com/bitcoin/bitcoin/pull/17240#issuecomment-546022121 why the other tests are disabled\n-# Run without depends\n+export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports --with-boost-process\"\n+export CI_OS_NAME=\"macos\"\n export NO_DEPENDS=1\n export OSX_SDK=\"\"\n+export CCACHE_SIZE=300M\n+\n+export RUN_SECURITY_TESTS=\"true\""
      },
      {
        "sha": "f682486088fffc38dd44a94f20072d95b9e0bb10",
        "filename": "ci/test/00_setup_env_native_asan.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_asan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_asan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_asan.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -7,8 +7,8 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_asan\n-export PACKAGES=\"clang-8 llvm-8 python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n-# Use clang-8 instead of default clang (which is clang-6 on Bionic) to avoid spurious segfaults when running on ppc64le\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libqrencode-dev libsqlite3-dev\"\n+export DOCKER_NAME_TAG=ubuntu:20.04\n export NO_DEPENDS=1\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=address,integer,undefined CC=clang-8 CXX=clang++-8\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=address,integer,undefined CC=clang CXX=clang++ --with-boost-process\""
      },
      {
        "sha": "b7157c608d9a5af4c321a6eb0df319e3f626cf29",
        "filename": "ci/test/00_setup_env_native_fuzz.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_fuzz.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_fuzz.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -14,4 +14,5 @@ export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export RUN_FUZZ_TESTS=true\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=clang CXX=clang++\"\n+export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address,undefined,integer CC=clang CXX=clang++ --with-boost-process\"\n+export CCACHE_SIZE=200M"
      },
      {
        "sha": "e06a40eb23b20f97859363b29f5a20b7cc30594a",
        "filename": "ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz_with_valgrind.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -16,3 +16,4 @@ export RUN_FUZZ_TESTS=true\n export FUZZ_TESTS_CONFIG=\"--valgrind\"\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer CC=clang CXX=clang++\"\n+export CCACHE_SIZE=200M"
      },
      {
        "sha": "3ce50f816f1261d8fd69fcea24fc46e4a5c9df88",
        "filename": "ci/test/00_setup_env_native_msan.sh",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_msan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_msan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_msan.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,23 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n+LIBCXX_DIR=\"${BASE_ROOT_DIR}/ci/scratch/msan/build/\"\n+export MSAN_FLAGS=\"-fsanitize=memory -fsanitize-memory-track-origins=2 -fno-omit-frame-pointer -g -O1 -fno-optimize-sibling-calls\"\n+LIBCXX_FLAGS=\"-nostdinc++ -stdlib=libc++ -L${LIBCXX_DIR}lib -lc++abi -I${LIBCXX_DIR}include -I${LIBCXX_DIR}include/c++/v1 -lpthread -Wl,-rpath,${LIBCXX_DIR}lib -Wno-unused-command-line-argument\"\n+export MSAN_AND_LIBCXX_FLAGS=\"${MSAN_FLAGS} ${LIBCXX_FLAGS}\"\n+export BDB_PREFIX=\"${BASE_ROOT_DIR}/db4\"\n+\n+export CONTAINER_NAME=\"ci_native_msan\"\n+export PACKAGES=\"clang-9 llvm-9 cmake\"\n+export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++17 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++17 ${MSAN_AND_LIBCXX_FLAGS}'\"\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-wallet --with-sanitizers=memory --with-asm=no --prefix=${BASE_ROOT_DIR}/depends/x86_64-pc-linux-gnu/ CC=clang CXX=clang++ CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' BDB_LIBS='-L${BDB_PREFIX}/lib -ldb_cxx-4.8' BDB_CFLAGS='-I${BDB_PREFIX}/include'\"\n+export USE_MEMORY_SANITIZER=\"true\"\n+export RUN_FUNCTIONAL_TESTS=\"false\"\n+export CCACHE_SIZE=250M"
      },
      {
        "sha": "522a5d9fc28e6f9e0c38f4b8209d06cf668ab776",
        "filename": "ci/test/00_setup_env_native_multiprocess.sh",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_multiprocess.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_multiprocess.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_multiprocess.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,15 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export CONTAINER_NAME=ci_native_multiprocess\n+export DOCKER_NAME_TAG=ubuntu:20.04\n+export PACKAGES=\"cmake python3\"\n+export DEP_OPTS=\"MULTIPROCESS=1\"\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--with-boost-process\"\n+export TEST_RUNNER_ENV=\"BITCOIND=bitcoin-node\""
      },
      {
        "sha": "7ff044c020c980943fde7378b3ef5d4c5a3d4a35",
        "filename": "ci/test/00_setup_env_native_nowallet.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_nowallet.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_nowallet.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_nowallet.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -7,7 +7,8 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_nowallet\n-export PACKAGES=\"python3-zmq\"\n+export DOCKER_NAME_TAG=ubuntu:18.04  # Use bionic to have one config run the tests in python3.6, see doc/dependencies.md\n+export PACKAGES=\"python3-zmq clang-5.0 llvm-5.0\"  # Use clang-5 to test C++17 compatibility, see doc/dependencies.md\n export DEP_OPTS=\"NO_WALLET=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CC=clang-5.0 CXX=clang++-5.0 --with-boost-process\""
      },
      {
        "sha": "567145fe47325c461968aba947a839f25bf646cf",
        "filename": "ci/test/00_setup_env_native_qt5.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_qt5.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_qt5.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_qt5.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -7,11 +7,13 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_qt5\n+export DOCKER_NAME_TAG=ubuntu:18.04  # Check that bionic gcc-7 can compile our c++17 and run our functional tests in python3, see doc/dependencies.md\n export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libdbus-1-dev libharfbuzz-dev\"\n-export DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n-export TEST_RUNNER_EXTRA=\"--coverage --extended --exclude feature_dbcrash\"  # Run extended tests so that coverage does not fail, but exclude the very slow dbcrash\n+export DEP_OPTS=\"NO_QT=1 NO_UPNP=1 NO_NATPMP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n+export TEST_RUNNER_EXTRA=\"--previous-releases --coverage --extended --exclude feature_dbcrash\"  # Run extended tests so that coverage does not fail, but exclude the very slow dbcrash\n+export RUN_SECURITY_TESTS=\"true\"\n export RUN_UNIT_TESTS_SEQUENTIAL=\"true\"\n export RUN_UNIT_TESTS=\"false\"\n export GOAL=\"install\"\n-export TEST_PREVIOUS_RELEASES=true\n-export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-c++17 --enable-debug CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\"\"\n+export PREVIOUS_RELEASES_TO_DOWNLOAD=\"v0.15.2 v0.16.3 v0.17.2 v0.18.1 v0.19.1\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-libs=no --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\" --with-boost-process\""
      },
      {
        "sha": "182e42ee7da71cdf58dca3e8c50013cbe4aae500",
        "filename": "ci/test/00_setup_env_native_tsan.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_tsan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_tsan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_tsan.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -7,8 +7,8 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_tsan\n-export DOCKER_NAME_TAG=ubuntu:16.04\n-export PACKAGES=\"clang-8 llvm-8 python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n-export NO_DEPENDS=1\n+export DOCKER_NAME_TAG=ubuntu:20.04\n+export PACKAGES=\"clang llvm libc++abi-dev libc++-dev python3-zmq\"\n+export DEP_OPTS=\"CC=clang CXX='clang++ -stdlib=libc++'\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=thread --disable-hardening --disable-asm CC=clang-8 CXX=clang++-8\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=no CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' CXXFLAGS='-g' --with-sanitizers=thread CC=clang CXX='clang++ -stdlib=libc++' --with-boost-process\""
      },
      {
        "sha": "f0c153158b237011ae2e799fc7406b08990a7253",
        "filename": "ci/test/00_setup_env_native_valgrind.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_native_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_valgrind.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -7,13 +7,9 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_valgrind\n-export PACKAGES=\"valgrind clang llvm python3-zmq libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev\"\n+export PACKAGES=\"valgrind clang llvm python3-zmq libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libsqlite3-dev\"\n export USE_VALGRIND=1\n export NO_DEPENDS=1\n-if [[ \"${TRAVIS}\" == \"true\" && \"${TRAVIS_REPO_SLUG}\" != \"bitcoin/bitcoin\" ]]; then\n-  export TEST_RUNNER_EXTRA=\"wallet_disable\"  # Only run wallet_disable as a smoke test to not hit the 50 min travis time limit\n-else\n-  export TEST_RUNNER_EXTRA=\"--exclude rpc_bind --factor=2\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547\n-fi\n+export TEST_RUNNER_EXTRA=\"--exclude rpc_bind\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=no CC=clang CXX=clang++\"  # TODO enable GUI"
      },
      {
        "sha": "accbd07e22b9c25b6480627be17ed6fb17b90d58",
        "filename": "ci/test/00_setup_env_s390x.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_s390x.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_s390x.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_s390x.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -20,6 +20,7 @@ fi\n export CONTAINER_NAME=ci_s390x\n export DOCKER_NAME_TAG=\"debian:buster\"\n export RUN_UNIT_TESTS=true\n+export TEST_RUNNER_ENV=\"LC_ALL=C\"\n export RUN_FUNCTIONAL_TESTS=true\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-reduce-exports --with-incompatible-bdb\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports --with-incompatible-bdb --with-boost-process\""
      },
      {
        "sha": "affaaaa1aa2935f9e02b24c2e253fe2b17a24dee",
        "filename": "ci/test/00_setup_env_win64.sh",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_win64.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/00_setup_env_win64.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_win64.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -7,8 +7,14 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_win64\n+export DOCKER_NAME_TAG=ubuntu:18.04  # Check that bionic can cross-compile to win64 (bionic is used in the gitian build as well)\n export HOST=x86_64-w64-mingw32\n-export PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64\"\n+export PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64 file\"\n export RUN_FUNCTIONAL_TESTS=false\n+export RUN_SECURITY_TESTS=\"true\"\n export GOAL=\"deploy\"\n-export BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests --without-boost-process\"\n+\n+# Compiler for MinGW-w64 causes false -Wreturn-type warning.\n+# See https://sourceforge.net/p/mingw-w64/bugs/306/\n+export NO_WERROR=1"
      },
      {
        "sha": "e939b9eeeb2963f65223a4a47a1663c0d47b41fe",
        "filename": "ci/test/03_before_install.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/ci/test/03_before_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/ci/test/03_before_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/03_before_install.sh?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,26 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-# Add llvm-symbolizer directory to PATH. Needed to get symbolized stack traces from the sanitizers.\n-PATH=$PATH:/usr/lib/llvm-6.0/bin/\n-export PATH\n-\n-BEGIN_FOLD () {\n-  echo \"\"\n-  CURRENT_FOLD_NAME=$1\n-  echo \"travis_fold:start:${CURRENT_FOLD_NAME}\"\n-}\n-\n-END_FOLD () {\n-  RET=$?\n-  echo \"travis_fold:end:${CURRENT_FOLD_NAME}\"\n-  if [ $RET != 0 ]; then\n-    echo \"${CURRENT_FOLD_NAME} failed with status code ${RET}\"\n-  fi\n-}\n-"
      },
      {
        "sha": "f0ed314d197948f0d3afb5c2736c3bfddd04aa9a",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -6,16 +6,12 @@\n \n export LC_ALL=C.UTF-8\n \n-if [[ $DOCKER_NAME_TAG == centos* ]]; then\n-  export LC_ALL=en_US.utf8\n-fi\n if [[ $QEMU_USER_CMD == qemu-s390* ]]; then\n   export LC_ALL=C\n fi\n \n-if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n-  export PATH=\"/usr/local/opt/ccache/libexec:$PATH\"\n-  ${CI_RETRY_EXE} pip3 install $PIP_PACKAGES\n+if [ \"$CI_OS_NAME\" == \"macos\" ]; then\n+  IN_GETOPT_BIN=\"/usr/local/opt/gnu-getopt/bin/getopt\" ${CI_RETRY_EXE} pip3 install --user $PIP_PACKAGES\n fi\n \n # Create folders that are mounted into the docker\n@@ -24,12 +20,10 @@ mkdir -p \"${PREVIOUS_RELEASES_DIR}\"\n \n export ASAN_OPTIONS=\"detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1\"\n export LSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/lsan\"\n-export TSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/tsan:log_path=${BASE_SCRATCH_DIR}/sanitizer-output/tsan\"\n+export TSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/tsan:halt_on_error=1:log_path=${BASE_SCRATCH_DIR}/sanitizer-output/tsan\"\n export UBSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\"\n-env | grep -E '^(BITCOIN_CONFIG|BASE_|QEMU_|CCACHE_|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS|TEST_PREVIOUS_RELEASES|PREVIOUS_RELEASES_DIR)' | tee /tmp/env\n-if [[ $HOST = *-mingw32 ]]; then\n-  DOCKER_ADMIN=\"--cap-add SYS_ADMIN\"\n-elif [[ $BITCOIN_CONFIG = *--with-sanitizers=*address* ]]; then # If ran with (ASan + LSan), Docker needs access to ptrace (https://github.com/google/sanitizers/issues/764)\n+env | grep -E '^(BITCOIN_CONFIG|BASE_|QEMU_|CCACHE_|LC_ALL|BOOST_TEST_RANDOM|DEBIAN_FRONTEND|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS|PREVIOUS_RELEASES_DIR)' | tee /tmp/env\n+if [[ $BITCOIN_CONFIG = *--with-sanitizers=*address* ]]; then # If ran with (ASan + LSan), Docker needs access to ptrace (https://github.com/google/sanitizers/issues/764)\n   DOCKER_ADMIN=\"--cap-add SYS_PTRACE\"\n fi\n \n@@ -48,50 +42,56 @@ if [ -z \"$DANGER_RUN_CI_ON_HOST\" ]; then\n                   --env-file /tmp/env \\\n                   --name $CONTAINER_NAME \\\n                   $DOCKER_NAME_TAG)\n-\n-  DOCKER_EXEC () {\n-    docker exec $DOCKER_ID bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $P_CI_DIR && $*\"\n-  }\n+  export DOCKER_CI_CMD_PREFIX=\"docker exec $DOCKER_ID\"\n else\n   echo \"Running on host system without docker wrapper\"\n-  DOCKER_EXEC () {\n-    bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $P_CI_DIR && $*\"\n-  }\n fi\n+\n+DOCKER_EXEC () {\n+  $DOCKER_CI_CMD_PREFIX bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $P_CI_DIR && $*\"\n+}\n export -f DOCKER_EXEC\n \n if [ -n \"$DPKG_ADD_ARCH\" ]; then\n   DOCKER_EXEC dpkg --add-architecture \"$DPKG_ADD_ARCH\"\n fi\n \n if [[ $DOCKER_NAME_TAG == centos* ]]; then\n-  ${CI_RETRY_EXE} DOCKER_EXEC yum -y install epel-release\n-  ${CI_RETRY_EXE} DOCKER_EXEC yum -y install $DOCKER_PACKAGES $PACKAGES\n+  ${CI_RETRY_EXE} DOCKER_EXEC dnf -y install epel-release\n+  ${CI_RETRY_EXE} DOCKER_EXEC dnf -y --allowerasing install $DOCKER_PACKAGES $PACKAGES\n elif [ \"$CI_USE_APT_INSTALL\" != \"no\" ]; then\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get update\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -y $PACKAGES $DOCKER_PACKAGES\n fi\n \n-if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n+if [ \"$CI_OS_NAME\" == \"macos\" ]; then\n   top -l 1 -s 0 | awk ' /PhysMem/ {print}'\n   echo \"Number of CPUs: $(sysctl -n hw.logicalcpu)\"\n else\n   DOCKER_EXEC free -m -h\n   DOCKER_EXEC echo \"Number of CPUs \\(nproc\\):\" \\$\\(nproc\\)\n   DOCKER_EXEC echo $(lscpu | grep Endian)\n-  DOCKER_EXEC echo \"Free disk space:\"\n-  DOCKER_EXEC df -h\n fi\n+DOCKER_EXEC echo \"Free disk space:\"\n+DOCKER_EXEC df -h\n \n if [ ! -d ${DIR_QA_ASSETS} ]; then\n- if [ \"$RUN_FUZZ_TESTS\" = \"true\" ]; then\n-  DOCKER_EXEC git clone https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n- fi\n+  DOCKER_EXEC git clone --depth=1 https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n fi\n export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n+export DIR_UNIT_TEST_DATA=${DIR_QA_ASSETS}/unit_test_data/\n \n DOCKER_EXEC mkdir -p \"${BASE_SCRATCH_DIR}/sanitizer-output/\"\n \n+if [[ ${USE_MEMORY_SANITIZER} == \"true\" ]]; then\n+  DOCKER_EXEC \"update-alternatives --install /usr/bin/clang++ clang++ \\$(which clang++-9) 100\"\n+  DOCKER_EXEC \"update-alternatives --install /usr/bin/clang clang \\$(which clang-9) 100\"\n+  DOCKER_EXEC \"mkdir -p ${BASE_SCRATCH_DIR}/msan/build/\"\n+  DOCKER_EXEC \"git clone --depth=1 https://github.com/llvm/llvm-project -b llvmorg-10.0.0 ${BASE_SCRATCH_DIR}/msan/llvm-project\"\n+  DOCKER_EXEC \"cd ${BASE_SCRATCH_DIR}/msan/build/ && cmake -DLLVM_ENABLE_PROJECTS='libcxx;libcxxabi' -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_TARGETS_TO_BUILD=X86 ../llvm-project/llvm/\"\n+  DOCKER_EXEC \"cd ${BASE_SCRATCH_DIR}/msan/build/ && make $MAKEJOBS cxx\"\n+fi\n+\n if [ -z \"$DANGER_RUN_CI_ON_HOST\" ]; then\n   echo \"Create $BASE_ROOT_DIR\"\n   DOCKER_EXEC rsync -a /ro_base/ $BASE_ROOT_DIR"
      },
      {
        "sha": "4644f28a4ebf59a030810487c1e9bc035ac1f092",
        "filename": "ci/test/05_before_script.sh",
        "status": "modified",
        "additions": 19,
        "deletions": 10,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/05_before_script.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -7,19 +7,30 @@\n export LC_ALL=C.UTF-8\n \n # Make sure default datadir does not exist and is never read by creating a dummy file\n-if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n+if [ \"$CI_OS_NAME\" == \"macos\" ]; then\n   echo > $HOME/Library/Application\\ Support/Bitcoin\n else\n   DOCKER_EXEC echo \\> \\$HOME/.bitcoin\n fi\n \n DOCKER_EXEC mkdir -p ${DEPENDS_DIR}/SDKs ${DEPENDS_DIR}/sdk-sources\n \n-if [ -n \"$OSX_SDK\" ] && [ ! -f ${DEPENDS_DIR}/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n-  curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o ${DEPENDS_DIR}/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz\n+OSX_SDK_BASENAME=\"Xcode-${XCODE_VERSION}-${XCODE_BUILD_ID}-extracted-SDK-with-libcxx-headers.tar.gz\"\n+OSX_SDK_PATH=\"${DEPENDS_DIR}/sdk-sources/${OSX_SDK_BASENAME}\"\n+\n+if [ -n \"$XCODE_VERSION\" ] && [ ! -f \"$OSX_SDK_PATH\" ]; then\n+  curl --location --fail \"${SDK_URL}/${OSX_SDK_BASENAME}\" -o \"$OSX_SDK_PATH\"\n+fi\n+\n+if [[ ${USE_MEMORY_SANITIZER} == \"true\" ]]; then\n+  # Use BDB compiled using install_db4.sh script to work around linking issue when using BDB\n+  # from depends. See https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433189350 for\n+  # details.\n+  DOCKER_EXEC \"contrib/install_db4.sh \\$(pwd) --enable-umrw CC=clang CXX=clang++ CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}'\"\n fi\n-if [ -n \"$OSX_SDK\" ] && [ -f ${DEPENDS_DIR}/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n-  DOCKER_EXEC tar -C ${DEPENDS_DIR}/SDKs -xf ${DEPENDS_DIR}/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz\n+\n+if [ -n \"$XCODE_VERSION\" ] && [ -f \"$OSX_SDK_PATH\" ]; then\n+  DOCKER_EXEC tar -C \"${DEPENDS_DIR}/SDKs\" -xf \"$OSX_SDK_PATH\"\n fi\n if [[ $HOST = *-mingw32 ]]; then\n   DOCKER_EXEC update-alternatives --set $HOST-g++ \\$\\(which $HOST-g++-posix\\)\n@@ -29,14 +40,12 @@ if [ -z \"$NO_DEPENDS\" ]; then\n     # CentOS has problems building the depends if the config shell is not explicitly set\n     # (i.e. for libevent a Makefile with an empty SHELL variable is generated, leading to\n     #  an error as the first command is executed)\n-    SHELL_OPTS=\"CONFIG_SHELL=/bin/bash\"\n+    SHELL_OPTS=\"LC_ALL=en_US.UTF-8 CONFIG_SHELL=/bin/bash\"\n   else\n     SHELL_OPTS=\"CONFIG_SHELL=\"\n   fi\n   DOCKER_EXEC $SHELL_OPTS make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n fi\n-if [ \"$TEST_PREVIOUS_RELEASES\" = \"true\" ]; then\n-  BEGIN_FOLD previous-versions\n-  DOCKER_EXEC contrib/devtools/previous_release.sh -b -t \"$PREVIOUS_RELEASES_DIR\" v0.15.2 v0.16.3 v0.17.1 v0.18.1 v0.19.0.1\n-  END_FOLD\n+if [ -n \"$PREVIOUS_RELEASES_TO_DOWNLOAD\" ]; then\n+  DOCKER_EXEC test/get_previous_releases.py -b -t \"$PREVIOUS_RELEASES_DIR\" \"${PREVIOUS_RELEASES_TO_DOWNLOAD}\"\n fi"
      },
      {
        "sha": "7986f7665a455d9d23d29ba14dfad95b2f8493c6",
        "filename": "ci/test/06_script_a.sh",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/06_script_a.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/06_script_a.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_a.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -6,43 +6,42 @@\n \n export LC_ALL=C.UTF-8\n \n-BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$DEPENDS_DIR/$HOST --bindir=$BASE_OUTDIR/bin --libdir=$BASE_OUTDIR/lib\"\n+BITCOIN_CONFIG_ALL=\"--enable-suppress-external-warnings --disable-dependency-tracking --prefix=$DEPENDS_DIR/$HOST --bindir=$BASE_OUTDIR/bin --libdir=$BASE_OUTDIR/lib\"\n+if [ -z \"$NO_WERROR\" ]; then\n+  BITCOIN_CONFIG_ALL=\"${BITCOIN_CONFIG_ALL} --enable-werror\"\n+fi\n DOCKER_EXEC \"ccache --zero-stats --max-size=$CCACHE_SIZE\"\n \n-BEGIN_FOLD autogen\n if [ -n \"$CONFIG_SHELL\" ]; then\n   DOCKER_EXEC \"$CONFIG_SHELL\" -c \"./autogen.sh\"\n else\n   DOCKER_EXEC ./autogen.sh\n fi\n-END_FOLD\n \n DOCKER_EXEC mkdir -p \"${BASE_BUILD_DIR}\"\n export P_CI_DIR=\"${BASE_BUILD_DIR}\"\n \n-BEGIN_FOLD configure\n DOCKER_EXEC \"${BASE_ROOT_DIR}/configure\" --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n-END_FOLD\n \n-BEGIN_FOLD distdir\n DOCKER_EXEC make distdir VERSION=$HOST\n-END_FOLD\n \n export P_CI_DIR=\"${BASE_BUILD_DIR}/bitcoin-$HOST\"\n \n-BEGIN_FOLD configure\n DOCKER_EXEC ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n-END_FOLD\n \n set -o errtrace\n trap 'DOCKER_EXEC \"cat ${BASE_SCRATCH_DIR}/sanitizer-output/* 2> /dev/null\"' ERR\n \n-BEGIN_FOLD build\n+if [[ ${USE_MEMORY_SANITIZER} == \"true\" ]]; then\n+  # MemorySanitizer (MSAN) does not support tracking memory initialization done by\n+  # using the Linux getrandom syscall. Avoid using getrandom by undefining\n+  # HAVE_SYS_GETRANDOM. See https://github.com/google/sanitizers/issues/852 for\n+  # details.\n+  DOCKER_EXEC 'grep -v HAVE_SYS_GETRANDOM src/config/bitcoin-config.h > src/config/bitcoin-config.h.tmp && mv src/config/bitcoin-config.h.tmp src/config/bitcoin-config.h'\n+fi\n+\n DOCKER_EXEC make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && DOCKER_EXEC make $GOAL V=1 ; false )\n-END_FOLD\n \n-BEGIN_FOLD cache_stats\n DOCKER_EXEC \"ccache --version | head -n 1 && ccache --show-stats\"\n DOCKER_EXEC du -sh \"${DEPENDS_DIR}\"/*/\n DOCKER_EXEC du -sh \"${PREVIOUS_RELEASES_DIR}\"\n-END_FOLD"
      },
      {
        "sha": "194b14beabac0aadc1d80dab9ea59349392c514c",
        "filename": "ci/test/06_script_b.sh",
        "status": "modified",
        "additions": 15,
        "deletions": 18,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_b.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -6,43 +6,40 @@\n \n export LC_ALL=C.UTF-8\n \n+if [[ $HOST = *-mingw32 ]]; then\n+  # Generate all binaries, so that they can be wrapped\n+  DOCKER_EXEC make $MAKEJOBS -C src/secp256k1 VERBOSE=1\n+  DOCKER_EXEC make $MAKEJOBS -C src/univalue VERBOSE=1\n+  DOCKER_EXEC \"${BASE_ROOT_DIR}/ci/test/wrap-wine.sh\"\n+fi\n+\n if [ -n \"$QEMU_USER_CMD\" ]; then\n-  BEGIN_FOLD wrap-qemu\n   # Generate all binaries, so that they can be wrapped\n   DOCKER_EXEC make $MAKEJOBS -C src/secp256k1 VERBOSE=1\n   DOCKER_EXEC make $MAKEJOBS -C src/univalue VERBOSE=1\n   DOCKER_EXEC \"${BASE_ROOT_DIR}/ci/test/wrap-qemu.sh\"\n-  END_FOLD\n fi\n \n if [ -n \"$USE_VALGRIND\" ]; then\n-  BEGIN_FOLD wrap-valgrind\n   DOCKER_EXEC \"${BASE_ROOT_DIR}/ci/test/wrap-valgrind.sh\"\n-  END_FOLD\n fi\n \n-bash -c \"${CI_WAIT}\" &  # Print dots in case the tests take a long time to run\n-\n if [ \"$RUN_UNIT_TESTS\" = \"true\" ]; then\n-  BEGIN_FOLD unit-tests\n-  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib make $MAKEJOBS check VERBOSE=1\n-  END_FOLD\n+  DOCKER_EXEC ${TEST_RUNNER_ENV} DIR_UNIT_TEST_DATA=${DIR_UNIT_TEST_DATA} LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib make $MAKEJOBS check VERBOSE=1\n fi\n \n if [ \"$RUN_UNIT_TESTS_SEQUENTIAL\" = \"true\" ]; then\n-  BEGIN_FOLD unit-tests-seq\n-  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib \"${BASE_BUILD_DIR}/bitcoin-*/src/test/test_bitcoin*\" --catch_system_errors=no -l test_suite\n-  END_FOLD\n+  DOCKER_EXEC ${TEST_RUNNER_ENV} DIR_UNIT_TEST_DATA=${DIR_UNIT_TEST_DATA} LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib \"${BASE_BUILD_DIR}/bitcoin-*/src/test/test_bitcoin*\" --catch_system_errors=no -l test_suite\n fi\n \n if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n-  BEGIN_FOLD functional-tests\n-  DOCKER_EXEC test/functional/test_runner.py --ci $MAKEJOBS --tmpdirprefix \"${BASE_SCRATCH_DIR}/test_runner/\" --ansi --combinedlogslen=4000 ${TEST_RUNNER_EXTRA} --quiet --failfast\n-  END_FOLD\n+  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib ${TEST_RUNNER_ENV} test/functional/test_runner.py --ci $MAKEJOBS --tmpdirprefix \"${BASE_SCRATCH_DIR}/test_runner/\" --ansi --combinedlogslen=4000 --timeout-factor=${TEST_RUNNER_TIMEOUT_FACTOR} ${TEST_RUNNER_EXTRA} --quiet --failfast\n+fi\n+\n+if [ \"$RUN_SECURITY_TESTS\" = \"true\" ]; then\n+  DOCKER_EXEC make test-security-check\n fi\n \n if [ \"$RUN_FUZZ_TESTS\" = \"true\" ]; then\n-  BEGIN_FOLD fuzz-tests\n-  DOCKER_EXEC test/fuzz/test_runner.py ${FUZZ_TESTS_CONFIG} -l DEBUG ${DIR_FUZZ_IN}\n-  END_FOLD\n+  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib test/fuzz/test_runner.py ${FUZZ_TESTS_CONFIG} $MAKEJOBS -l DEBUG ${DIR_FUZZ_IN}\n fi"
      },
      {
        "sha": "2cd7c8cec290eaf22768d3b9c565df64ac873982",
        "filename": "ci/test/wrap-qemu.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/wrap-qemu.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/wrap-qemu.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/wrap-qemu.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "58a8983e6ec6c5bb58e314e66e78331666a036dd",
        "filename": "ci/test/wrap-wine.sh",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/wrap-wine.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test/wrap-wine.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/wrap-wine.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,20 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+for b_name in {\"${BASE_OUTDIR}/bin\"/*,src/secp256k1/*tests,src/univalue/{no_nul,test_json,unitester,object}}.exe; do\n+    # shellcheck disable=SC2044\n+    for b in $(find \"${BASE_ROOT_DIR}\" -executable -type f -name \"$(basename $b_name)\"); do\n+      if (file \"$b\" | grep \"Windows\"); then\n+        echo \"Wrap $b ...\"\n+        mv \"$b\" \"${b}_orig\"\n+        echo '#!/usr/bin/env bash' > \"$b\"\n+        echo \"wine64 \\\"${b}_orig\\\" \\\"\\$@\\\"\" >> \"$b\"\n+        chmod +x \"$b\"\n+      fi\n+    done\n+done"
      },
      {
        "sha": "93b07aab1ec48ff89151f914f5481feb7b8f0784",
        "filename": "ci/test_run_all.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test_run_all.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/ci/test_run_all.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test_run_all.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,13 +1,12 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n set -o errexit; source ./ci/test/00_setup_env.sh\n-set -o errexit; source ./ci/test/03_before_install.sh\n set -o errexit; source ./ci/test/04_install.sh\n set -o errexit; source ./ci/test/05_before_script.sh\n set -o errexit; source ./ci/test/06_script_a.sh"
      },
      {
        "sha": "23a33b8c4f6c802c6d08ffbd4ede0b4fd121961c",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 478,
        "deletions": 297,
        "changes": 775,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,24 +1,33 @@\n AC_PREREQ([2.69])\n-define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 20)\n-define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_MAJOR, 21)\n+define(_CLIENT_VERSION_MINOR, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_RC, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)\n-define(_COPYRIGHT_YEAR, 2020)\n+define(_COPYRIGHT_YEAR, 2021)\n define(_COPYRIGHT_HOLDERS,[The %s developers])\n define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])\n-AC_INIT([Bitcoin Core],m4_join([.], _CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MINOR, _CLIENT_VERSION_REVISION, m4_if(_CLIENT_VERSION_BUILD, [0], [], _CLIENT_VERSION_BUILD))m4_if(_CLIENT_VERSION_RC, [0], [], [rc]_CLIENT_VERSION_RC),[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])\n+AC_INIT([Bitcoin Core],m4_join([.], _CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MINOR, _CLIENT_VERSION_BUILD)m4_if(_CLIENT_VERSION_RC, [0], [], [rc]_CLIENT_VERSION_RC),[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])\n AC_CONFIG_SRCDIR([src/validation.cpp])\n AC_CONFIG_HEADERS([src/config/bitcoin-config.h])\n AC_CONFIG_AUX_DIR([build-aux])\n AC_CONFIG_MACRO_DIR([build-aux/m4])\n \n+m4_ifndef([PKG_PROG_PKG_CONFIG], [AC_MSG_ERROR([PKG_PROG_PKG_CONFIG macro not found. Please install pkg-config and re-run autogen.sh])])\n+PKG_PROG_PKG_CONFIG\n+if test \"x$PKG_CONFIG\" = x; then\n+  AC_MSG_ERROR([pkg-config not found])\n+fi\n+\n BITCOIN_DAEMON_NAME=bitcoind\n BITCOIN_GUI_NAME=bitcoin-qt\n BITCOIN_CLI_NAME=bitcoin-cli\n BITCOIN_TX_NAME=bitcoin-tx\n+BITCOIN_UTIL_NAME=bitcoin-util\n BITCOIN_WALLET_TOOL_NAME=bitcoin-wallet\n+dnl Multi Process\n+BITCOIN_MP_NODE_NAME=bitcoin-node\n+BITCOIN_MP_GUI_NAME=bitcoin-gui\n \n dnl Unless the user specified ARFLAGS, force it to be cr\n AC_ARG_VAR(ARFLAGS, [Flags for the archiver, defaults to <cr> if not set])\n@@ -62,18 +71,8 @@ case $host in\n   ;;\n esac\n \n-AC_ARG_ENABLE([c++17],\n-  [AS_HELP_STRING([--enable-c++17],\n-  [enable compilation in c++17 mode (disabled by default)])],\n-  [use_cxx17=$enableval],\n-  [use_cxx17=no])\n-\n-dnl Require C++11 or C++17 compiler (no GNU extensions)\n-if test \"x$use_cxx17\" = xyes; then\n-  AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory])\n-else\n-  AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory])\n-fi\n+dnl Require C++17 compiler (no GNU extensions)\n+AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory])\n \n dnl Check if -latomic is required for <std::atomic>\n CHECK_ATOMIC\n@@ -99,21 +98,18 @@ AC_PATH_TOOL(AR, ar)\n AC_PATH_TOOL(RANLIB, ranlib)\n AC_PATH_TOOL(STRIP, strip)\n AC_PATH_TOOL(GCOV, gcov)\n+AC_PATH_TOOL(LLVM_COV, llvm-cov)\n AC_PATH_PROG(LCOV, lcov)\n-dnl Python 3.5 is specified in .python-version and should be used if available, see doc/dependencies.md\n-AC_PATH_PROGS([PYTHON], [python3.5 python3.6 python3.7 python3.8 python3 python])\n+dnl Python 3.6 is specified in .python-version and should be used if available, see doc/dependencies.md\n+AC_PATH_PROGS([PYTHON], [python3.6 python3.7 python3.8 python3.9 python3 python])\n AC_PATH_PROG(GENHTML, genhtml)\n AC_PATH_PROG([GIT], [git])\n AC_PATH_PROG(CCACHE,ccache)\n AC_PATH_PROG(XGETTEXT,xgettext)\n AC_PATH_PROG(HEXDUMP,hexdump)\n-AC_PATH_TOOL(READELF, readelf)\n AC_PATH_TOOL(CPPFILT, c++filt)\n AC_PATH_TOOL(OBJCOPY, objcopy)\n AC_PATH_PROG(DOXYGEN, doxygen)\n-if test -z \"$DOXYGEN\"; then\n-   AC_MSG_WARN([Doxygen not found])\n-fi\n AM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n \n AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n@@ -122,7 +118,25 @@ AC_ARG_ENABLE([wallet],\n   [AS_HELP_STRING([--disable-wallet],\n   [disable wallet (enabled by default)])],\n   [enable_wallet=$enableval],\n-  [enable_wallet=yes])\n+  [enable_wallet=auto])\n+\n+AC_ARG_WITH([sqlite],\n+  [AS_HELP_STRING([--with-sqlite=yes|no|auto],\n+  [enable sqlite wallet support (default: auto, i.e., enabled if wallet is enabled and sqlite is found)])],\n+  [use_sqlite=$withval],\n+  [use_sqlite=auto])\n+\n+AC_ARG_WITH([bdb],\n+  [AS_HELP_STRING([--without-bdb],\n+  [disable bdb wallet support (default is enabled if wallet is enabled)])],\n+  [use_bdb=$withval],\n+  [use_bdb=auto])\n+\n+AC_ARG_ENABLE([ebpf],\n+  [AS_HELP_STRING([--enable-ebpf],\n+  [enable eBPF tracing (default is yes if sys/sdt.h is found)])],\n+  [use_ebpf=$enableval],\n+  [use_ebpf=yes])\n \n AC_ARG_WITH([miniupnpc],\n   [AS_HELP_STRING([--with-miniupnpc],\n@@ -136,6 +150,18 @@ AC_ARG_ENABLE([upnp-default],\n   [use_upnp_default=$enableval],\n   [use_upnp_default=no])\n \n+AC_ARG_WITH([natpmp],\n+            [AS_HELP_STRING([--with-natpmp],\n+                            [enable NAT-PMP (default is yes if libnatpmp is found)])],\n+            [use_natpmp=$withval],\n+            [use_natpmp=auto])\n+\n+AC_ARG_ENABLE([natpmp-default],\n+              [AS_HELP_STRING([--enable-natpmp-default],\n+                              [if NAT-PMP is enabled, turn it on at startup (default is no)])],\n+              [use_natpmp_default=$enableval],\n+              [use_natpmp_default=no])\n+\n AC_ARG_ENABLE(tests,\n     AS_HELP_STRING([--disable-tests],[do not compile tests (default is to compile)]),\n     [use_tests=$enableval],\n@@ -162,6 +188,12 @@ AC_ARG_ENABLE([fuzz],\n     [enable_fuzz=$enableval],\n     [enable_fuzz=no])\n \n+AC_ARG_ENABLE([danger_fuzz_link_all],\n+    AS_HELP_STRING([--enable-danger-fuzz-link-all],\n+    [Danger! Modifies source code. Needs git and gnu sed installed. Link each fuzz target (default no).]),\n+    [enable_danger_fuzz_link_all=$enableval],\n+    [enable_danger_fuzz_link_all=no])\n+\n AC_ARG_WITH([qrencode],\n   [AS_HELP_STRING([--with-qrencode],\n   [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n@@ -186,6 +218,16 @@ AC_ARG_ENABLE([ccache],\n   [use_ccache=$enableval],\n   [use_ccache=auto])\n \n+dnl Suppress warnings from external headers (e.g. Boost, Qt).\n+dnl May be useful if warnings from external headers clutter the build output\n+dnl too much, so that it becomes difficult to spot Bitcoin Core warnings\n+dnl or if they cause a build failure with --enable-werror.\n+AC_ARG_ENABLE([suppress-external-warnings],\n+  [AS_HELP_STRING([--enable-suppress-external-warnings],\n+                  [Suppress warnings from external headers (default is no)])],\n+  [suppress_external_warnings=$enableval],\n+  [suppress_external_warnings=no])\n+\n AC_ARG_ENABLE([lcov],\n   [AS_HELP_STRING([--enable-lcov],\n   [enable lcov testing (default is no)])],\n@@ -232,15 +274,23 @@ AC_ARG_ENABLE([zmq],\n   [use_zmq=$enableval],\n   [use_zmq=yes])\n \n-AC_ARG_ENABLE([bip70],\n-  [AS_HELP_STRING([--enable-bip70],\n-  [BIP70 (payment protocol) support in the GUI (no longer supported)])],\n-  [enable_bip70=$enableval],\n-  [enable_bip70=no])\n+AC_ARG_WITH([libmultiprocess],\n+  [AS_HELP_STRING([--with-libmultiprocess=yes|no|auto],\n+  [Build with libmultiprocess library. (default: auto, i.e. detect with pkg-config)])],\n+  [with_libmultiprocess=$withval],\n+  [with_libmultiprocess=auto])\n \n-if test x$enable_bip70 != xno; then\n-  AC_MSG_ERROR([BIP70 is no longer supported!])\n-fi\n+AC_ARG_WITH([mpgen],\n+  [AS_HELP_STRING([--with-mpgen=yes|no|auto|PREFIX],\n+  [Build with libmultiprocess codegen tool. Useful to specify different libmultiprocess host system library and build system codegen tool prefixes when cross-compiling (default is host system libmultiprocess prefix)])],\n+  [with_mpgen=$withval],\n+  [with_mpgen=auto])\n+\n+AC_ARG_ENABLE([multiprocess],\n+  [AS_HELP_STRING([--enable-multiprocess],\n+  [build multiprocess bitcoin-node, bitcoin-wallet, and bitcoin-gui executables in addition to monolithic bitcoind and bitcoin-qt executables. Requires libmultiprocess library. Experimental (default is no)])],\n+  [enable_multiprocess=$enableval],\n+  [enable_multiprocess=no])\n \n AC_ARG_ENABLE(man,\n     [AS_HELP_STRING([--disable-man],\n@@ -283,8 +333,30 @@ AC_ARG_ENABLE([werror],\n     [enable_werror=no])\n \n AC_LANG_PUSH([C++])\n+\n+dnl Check for a flag to turn compiler warnings into errors. This is helpful for checks which may\n+dnl appear to succeed because by default they merely emit warnings when they fail.\n+dnl\n+dnl Note that this is not necessarily a check to see if -Werror is supported, but rather to see if\n+dnl a compile with -Werror can succeed. This is important because the compiler may already be\n+dnl warning about something unrelated, for example about some path issue. If that is the case,\n+dnl -Werror cannot be used because all of those warnings would be turned into errors.\n AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n \n+dnl Check for a flag to turn linker warnings into errors. When flags are passed to linkers via the\n+dnl compiler driver using a -Wl,-foo flag, linker warnings may be swallowed rather than bubbling up.\n+dnl See note above, the same applies here as well.\n+dnl\n+dnl LDFLAG_WERROR Should only be used when testing -Wl,*\n+case $host in\n+ *darwin*)\n+    AX_CHECK_LINK_FLAG([-Wl,-fatal_warnings],[LDFLAG_WERROR=\"-Wl,-fatal_warnings\"],[LDFLAG_WERROR=\"\"])\n+    ;;\n+  *)\n+    AX_CHECK_LINK_FLAG([-Wl,--fatal-warnings],[LDFLAG_WERROR=\"-Wl,--fatal-warnings\"],[LDFLAG_WERROR=\"\"])\n+    ;;\n+esac\n+\n if test \"x$enable_debug\" = xyes; then\n   dnl Clear default -g -O2 flags\n   if test \"x$CXXFLAGS_overridden\" = xno; then\n@@ -303,6 +375,7 @@ if test \"x$enable_debug\" = xyes; then\n \n   AX_CHECK_PREPROC_FLAG([-DDEBUG],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG\"]],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_PREPROC_FLAG([-DDEBUG_LOCKORDER],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG_LOCKORDER\"]],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_PREPROC_FLAG([-DABORT_ON_FAILED_ASSUME],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DABORT_ON_FAILED_ASSUME\"]],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-ftrapv],[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -ftrapv\"],,[[$CXXFLAG_WERROR]])\n fi\n \n@@ -338,27 +411,48 @@ if test \"x$enable_werror\" = \"xyes\"; then\n   if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n     AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n   fi\n+  AX_CHECK_COMPILE_FLAG([-Werror=gnu],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=gnu\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=shadow-field],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=shadow-field\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=switch],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=switch\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=thread-safety-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=thread-safety],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=range-loop-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=range-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=unused-variable],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unused-variable\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=date-time],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=date-time\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=return-type],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=return-type\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=conditional-uninitialized],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=conditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=sign-compare],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=sign-compare\"],,[[$CXXFLAG_WERROR]])\n+  dnl -Wsuggest-override is broken with GCC before 9.2\n+  dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78010\n+  AX_CHECK_COMPILE_FLAG([-Werror=suggest-override],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=suggest-override\"],,[[$CXXFLAG_WERROR]],\n+                        [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n+  AX_CHECK_COMPILE_FLAG([-Werror=unreachable-code-loop-increment],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wall],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wextra],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wgnu],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wgnu\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wformat],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n+  dnl some compilers will ignore -Wformat-security without -Wformat, so just combine the two here.\n+  AX_CHECK_COMPILE_FLAG([-Wformat -Wformat-security],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wvla],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wshadow-field],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wshadow-field\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wswitch],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wswitch\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wformat-security],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wthread-safety-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wthread-safety],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wrange-loop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wrange-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-variable],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-variable\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wunused-member-function],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-member-function\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wdate-time],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdate-time\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wconditional-uninitialized],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wconditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wsign-compare],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsign-compare\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wduplicated-branches],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wduplicated-branches\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wduplicated-cond],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wduplicated-cond\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wlogical-op],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wlogical-op\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Woverloaded-virtual],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Woverloaded-virtual\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wsuggest-override],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"],,[[$CXXFLAG_WERROR]],\n+                        [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n+  AX_CHECK_COMPILE_FLAG([-Wunreachable-code-loop-increment],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n \n   dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   dnl unknown options if any other warning is produced. Test the -Wfoo case, and\n@@ -368,8 +462,12 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n fi\n \n+dnl Don't allow extended (non-ASCII) symbols in identifiers. This is easier for code review.\n+AX_CHECK_COMPILE_FLAG([-fno-extended-identifiers],[[CXXFLAGS=\"$CXXFLAGS -fno-extended-identifiers\"]],,[[$CXXFLAG_WERROR]])\n+\n enable_sse42=no\n enable_sse41=no\n enable_avx2=no\n@@ -480,7 +578,7 @@ CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n   [AS_HELP_STRING([--with-utils],\n-  [build bitcoin-cli bitcoin-tx bitcoin-wallet (default=yes)])],\n+  [build bitcoin-cli bitcoin-tx bitcoin-util bitcoin-wallet (default=yes)])],\n   [build_bitcoin_utils=$withval],\n   [build_bitcoin_utils=yes])\n \n@@ -502,6 +600,12 @@ AC_ARG_ENABLE([util-wallet],\n   [build_bitcoin_wallet=$enableval],\n   [build_bitcoin_wallet=$build_bitcoin_utils])\n \n+AC_ARG_ENABLE([util-util],\n+  [AS_HELP_STRING([--enable-util-util],\n+  [build bitcoin-util])],\n+  [build_bitcoin_util=$enableval],\n+  [build_bitcoin_util=$build_bitcoin_utils])\n+\n AC_ARG_WITH([libs],\n   [AS_HELP_STRING([--with-libs],\n   [build libraries (default=yes)])],\n@@ -514,13 +618,8 @@ AC_ARG_WITH([daemon],\n   [build_bitcoind=$withval],\n   [build_bitcoind=yes])\n \n-use_pkgconfig=yes\n case $host in\n   *mingw*)\n-\n-     dnl pkgconfig does more harm than good with MinGW\n-     use_pkgconfig=no\n-\n      TARGET_OS=windows\n      AC_CHECK_LIB([kernel32], [GetModuleFileNameA],, AC_MSG_ERROR(libkernel32 missing))\n      AC_CHECK_LIB([user32],   [main],, AC_MSG_ERROR(libuser32 missing))\n@@ -551,10 +650,7 @@ case $host in\n        AC_MSG_ERROR(\"windres not found\")\n      fi\n \n-     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -D_WIN32_WINNT=0x0601\"\n-     if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n-       CXXFLAGS=\"$CXXFLAGS -w\"\n-     fi\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN\"\n \n      dnl libtool insists upon adding -nostdlib and a list of objects/libs to link against.\n      dnl That breaks our ability to build dll's with static libgcc/libstdc++/libssp. Override\n@@ -564,6 +660,8 @@ case $host in\n      archive_cmds_CXX=\"\\$CC -shared \\$libobjs \\$deplibs \\$compiler_flags -static -o \\$output_objdir/\\$soname \\${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker \\$lib\"\n      postdeps_CXX=\n \n+     dnl We require Windows 7 (NT 6.1) or later\n+     AX_CHECK_LINK_FLAG([[-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1]],[LDFLAGS=\"$LDFLAGS -Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1\"],,[[$LDFLAG_WERROR]])\n      ;;\n   *darwin*)\n      TARGET_OS=darwin\n@@ -578,15 +676,19 @@ case $host in\n          dnl It's safe to add these paths even if the functionality is disabled by\n          dnl the user (--without-wallet or --without-gui for example).\n \n-         bdb_prefix=$($BREW --prefix berkeley-db4 2>/dev/null)\n-         qt5_prefix=$($BREW --prefix qt5 2>/dev/null)\n-         if test x$bdb_prefix != x; then\n-           CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n-           LIBS=\"$LIBS -L$bdb_prefix/lib\"\n+         if test \"x$use_bdb\" != xno && $BREW list --versions berkeley-db4 >/dev/null && test \"x$BDB_CFLAGS\" = \"x\" && test \"x$BDB_LIBS\" = \"x\"; then\n+           bdb_prefix=$($BREW --prefix berkeley-db4 2>/dev/null)\n+           dnl This must precede the call to BITCOIN_FIND_BDB48 below.\n+           BDB_CFLAGS=\"-I$bdb_prefix/include\"\n+           BDB_LIBS=\"-L$bdb_prefix/lib -ldb_cxx-4.8\"\n          fi\n-         if test x$qt5_prefix != x; then\n-           PKG_CONFIG_PATH=\"$qt5_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n-           export PKG_CONFIG_PATH\n+\n+         if test \"x$use_sqlite\" != xno && $BREW list --versions sqlite3 >/dev/null; then\n+           export PKG_CONFIG_PATH=\"$($BREW --prefix sqlite3 2>/dev/null)/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+         fi\n+\n+         if $BREW list --versions qt5 >/dev/null; then\n+           export PKG_CONFIG_PATH=\"$($BREW --prefix qt5 2>/dev/null)/lib/pkgconfig:$PKG_CONFIG_PATH\"\n          fi\n        fi\n      else\n@@ -595,9 +697,11 @@ case $host in\n            BUILD_OS=darwin\n            ;;\n          *)\n+           AC_PATH_TOOL([DSYMUTIL], [dsymutil], dsymutil)\n            AC_PATH_TOOL([INSTALLNAMETOOL], [install_name_tool], install_name_tool)\n            AC_PATH_TOOL([OTOOL], [otool], otool)\n-           AC_PATH_PROGS([GENISOIMAGE], [genisoimage mkisofs],genisoimage)\n+           AC_PATH_PROGS([XORRISOFS], [xorrisofs], xorrisofs)\n+           AC_PATH_PROGS([DMG], [dmg], dmg)\n            AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)\n            AC_PATH_PROGS([IMAGEMAGICK_CONVERT], [convert],convert)\n            AC_PATH_PROGS([TIFFCP], [tiffcp],tiffcp)\n@@ -611,7 +715,7 @@ case $host in\n        esac\n      fi\n \n-     AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"])\n+     AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"],, [[$LDFLAG_WERROR]])\n      CPPFLAGS=\"$CPPFLAGS -DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0\"\n      OBJCXXFLAGS=\"$CXXFLAGS\"\n      ;;\n@@ -624,16 +728,6 @@ case $host in\n      ;;\n esac\n \n-if test x$use_pkgconfig = xyes; then\n-  m4_ifndef([PKG_PROG_PKG_CONFIG], [AC_MSG_ERROR(PKG_PROG_PKG_CONFIG macro not found. Please install pkg-config and re-run autogen.sh.)])\n-  m4_ifdef([PKG_PROG_PKG_CONFIG], [\n-  PKG_PROG_PKG_CONFIG\n-  if test x\"$PKG_CONFIG\" = \"x\"; then\n-    AC_MSG_ERROR(pkg-config not found.)\n-  fi\n-  ])\n-fi\n-\n if test x$use_extended_functional_tests != xno; then\n   AC_SUBST(EXTENDED_FUNCTIONAL_TESTS, --extended)\n fi\n@@ -642,16 +736,37 @@ if test x$use_lcov = xyes; then\n   if test x$LCOV = x; then\n     AC_MSG_ERROR(\"lcov testing requested but lcov not found\")\n   fi\n-  if test x$GCOV = x; then\n-    AC_MSG_ERROR(\"lcov testing requested but gcov not found\")\n-  fi\n   if test x$PYTHON = x; then\n     AC_MSG_ERROR(\"lcov testing requested but python not found\")\n   fi\n   if test x$GENHTML = x; then\n     AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")\n   fi\n-  LCOV=\"$LCOV --gcov-tool=$GCOV\"\n+\n+  AC_MSG_CHECKING([whether compiler is Clang])\n+  AC_PREPROC_IFELSE([AC_LANG_SOURCE([[\n+      #if defined(__clang__) && defined(__llvm__)\n+      // Compiler is Clang\n+      #else\n+      #  error Compiler is not Clang\n+      #endif\n+    ]])],[\n+      AC_MSG_RESULT([yes])\n+      if test x$LLVM_COV = x; then\n+        AC_MSG_ERROR([lcov testing requested but llvm-cov not found])\n+      fi\n+      COV_TOOL=\"$LLVM_COV gcov\"\n+    ],[\n+      AC_MSG_RESULT([no])\n+      if test x$GCOV = x; then\n+        AC_MSG_ERROR([lcov testing requested but gcov not found])\n+      fi\n+      COV_TOOL=\"$GCOV\"\n+  ])\n+  AC_SUBST(COV_TOOL)\n+  AC_SUBST(COV_TOOL_WRAPPER, \"cov_tool_wrapper.sh\")\n+  LCOV=\"$LCOV --gcov-tool $(pwd)/$COV_TOOL_WRAPPER\"\n+\n   AX_CHECK_LINK_FLAG([[--coverage]], [LDFLAGS=\"$LDFLAGS --coverage\"],\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage linker flag does not work\")])\n   AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],\n@@ -663,6 +778,9 @@ if test x$use_lcov_branch != xno; then\n   AC_SUBST(LCOV_OPTS, \"$LCOV_OPTS --rc lcov_branch_coverage=1\")\n fi\n \n+dnl Check for __int128\n+AC_CHECK_TYPES([__int128])\n+\n dnl Check for endianness\n AC_C_BIGENDIAN\n \n@@ -693,22 +811,13 @@ AX_GCC_FUNC_ATTRIBUTE([dllexport])\n AX_GCC_FUNC_ATTRIBUTE([dllimport])\n \n if test x$use_glibc_compat != xno; then\n-\n-  dnl __fdelt_chk's params and return type have changed from long unsigned int to long int.\n-  dnl See which one is present here.\n-  AC_MSG_CHECKING(__fdelt_chk type)\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n-                    #undef _FORTIFY_SOURCE\n-                  #endif\n-                  #define _FORTIFY_SOURCE 2\n-                  #include <sys/select.h>\n-     extern \"C\" long unsigned int __fdelt_warn(long unsigned int);]],[[]])],\n-    [ fdelt_type=\"long unsigned int\"],\n-    [ fdelt_type=\"long int\"])\n-  AC_MSG_RESULT($fdelt_type)\n-  AC_DEFINE_UNQUOTED(FDELT_TYPE, $fdelt_type,[parameter and return value type for __fdelt_chk])\n   AX_CHECK_LINK_FLAG([[-Wl,--wrap=__divmoddi4]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=__divmoddi4\"])\n   AX_CHECK_LINK_FLAG([[-Wl,--wrap=log2f]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=log2f\"])\n+  case $host in\n+    powerpc64* | ppc64*)\n+      AX_CHECK_LINK_FLAG([[-Wl,--no-tls-get-addr-optimize]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--no-tls-get-addr-optimize\"])\n+    ;;\n+  esac\n else\n   AC_SEARCH_LIBS([clock_gettime],[rt])\n fi\n@@ -744,6 +853,14 @@ if test x$use_hardening != xno; then\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n   AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n \n+  AX_CHECK_COMPILE_FLAG([-fcf-protection=full],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fcf-protection=full\"])\n+\n+  dnl stack-clash-protection does not work properly when building for Windows.\n+  dnl We use the test case from https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90458\n+  dnl to determine if it can be enabled.\n+  AX_CHECK_COMPILE_FLAG([-fstack-clash-protection],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-clash-protection\"],[],[\"-O0\"],\n+    [AC_LANG_SOURCE([[class D {public: unsigned char buf[32768];}; int main() {D d; return 0;}]])])\n+\n   dnl When enable_debug is yes, all optimizations are disabled.\n   dnl However, FORTIFY_SOURCE requires that there is some level of optimization, otherwise it does nothing and just creates a compiler warning.\n   dnl Since FORTIFY_SOURCE is a no-op without optimizations, do not enable it when enable_debug is yes.\n@@ -756,11 +873,12 @@ if test x$use_hardening != xno; then\n     ])\n   fi\n \n-  AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,-z,separate-code]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,separate-code\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-fPIE -pie]], [PIE_FLAGS=\"-fPIE\"; HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"],, [[$CXXFLAG_WERROR]])\n \n   case $host in\n@@ -771,55 +889,22 @@ if test x$use_hardening != xno; then\n fi\n \n dnl These flags are specific to ld64, and may cause issues with other linkers.\n-dnl For example: GNU ld will intepret -dead_strip as -de and then try and use\n+dnl For example: GNU ld will interpret -dead_strip as -de and then try and use\n dnl \"ad_strip\" as the symbol for the entry point.\n if test x$TARGET_OS = xdarwin; then\n-  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip_dylibs]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip_dylibs\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,-bind_at_load]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip_dylibs]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip_dylibs\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,-bind_at_load]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"],, [[$LDFLAG_WERROR]])\n fi\n \n if test x$enable_determinism = xyes; then\n   if test x$TARGET_OS = xwindows; then\n-    AX_CHECK_LINK_FLAG([[-Wl,--no-insert-timestamp]], [LDFLAGS=\"$LDFLAGS -Wl,--no-insert-timestamp\"])\n+    AX_CHECK_LINK_FLAG([[-Wl,--no-insert-timestamp]], [LDFLAGS=\"$LDFLAGS -Wl,--no-insert-timestamp\"],, [[$LDFLAG_WERROR]])\n   fi\n fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n-dnl FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n-dnl check that it fails to build without memcpy, then that it builds with\n-AC_MSG_CHECKING(FD_ZERO memcpy dependence)\n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-    #include <cstddef>\n-    #if HAVE_SYS_SELECT_H\n-    #include <sys/select.h>\n-    #endif\n-  ]],[[\n-    #if HAVE_SYS_SELECT_H\n-    fd_set fds;\n-    FD_ZERO(&fds);\n-    #endif\n-  ]])],\n-  [ AC_MSG_RESULT(no) ],\n-  [\n-      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-          #include <cstring>\n-          #if HAVE_SYS_SELECT_H\n-          #include <sys/select.h>\n-          #endif\n-        ]], [[\n-          #if HAVE_SYS_SELECT_H\n-          fd_set fds;\n-          FD_ZERO(&fds);\n-          #endif\n-        ]])],\n-        [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_CSTRING_DEPENDENT_FD_ZERO, 1, [Define this symbol if FD_ZERO is dependent of a memcpy declaration being available]) ],\n-        [ AC_MSG_ERROR(failed with cstring include) ]\n-      )\n-  ]\n-)\n-\n AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n     [#include <sys/types.h>\n     #include <ifaddrs.h>]\n@@ -841,7 +926,21 @@ AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n                  #include <byteswap.h>\n                  #endif])\n \n-AC_CHECK_DECLS([__builtin_clz, __builtin_clzl, __builtin_clzll])\n+AC_MSG_CHECKING(for __builtin_clzl)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n+ (void) __builtin_clzl(0);\n+  ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_BUILTIN_CLZL, 1, [Define this symbol if you have __builtin_clzl])],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n+AC_MSG_CHECKING(for __builtin_clzll)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n+  (void) __builtin_clzll(0);\n+  ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_BUILTIN_CLZLL, 1, [Define this symbol if you have __builtin_clzll])],\n+ [ AC_MSG_RESULT(no)]\n+)\n \n dnl Check for malloc_info (for memory statistics information in getmemoryinfo)\n AC_MSG_CHECKING(for getmemoryinfo)\n@@ -1006,13 +1105,13 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdint.h>\n  [ AC_MSG_RESULT(no)]\n )\n \n-dnl LevelDB platform checks\n AC_MSG_CHECKING(for fdatasync)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]],\n  [[ fdatasync(0); ]])],\n  [ AC_MSG_RESULT(yes); HAVE_FDATASYNC=1 ],\n  [ AC_MSG_RESULT(no); HAVE_FDATASYNC=0 ]\n )\n+AC_DEFINE_UNQUOTED([HAVE_FDATASYNC], [$HAVE_FDATASYNC], [Define to 1 if fdatasync is available.])\n \n AC_MSG_CHECKING(for F_FULLFSYNC)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <fcntl.h>]],\n@@ -1057,18 +1156,20 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n   ]], [[\n     getauxval(AT_HWCAP);\n   ]])],\n- [ AC_MSG_RESULT(yes); HAVE_STRONG_GETAUXVAL=1 ],\n+ [ AC_MSG_RESULT(yes); HAVE_STRONG_GETAUXVAL=1; AC_DEFINE(HAVE_STRONG_GETAUXVAL, 1, [Define this symbol to build code that uses getauxval)]) ],\n  [ AC_MSG_RESULT(no); HAVE_STRONG_GETAUXVAL=0 ]\n )\n \n AC_MSG_CHECKING(for weak getauxval support in the compiler)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    #ifdef __linux__\n     unsigned long getauxval(unsigned long type) __attribute__((weak));\n     #define AT_HWCAP 16\n+    #endif\n   ]], [[\n     getauxval(AT_HWCAP);\n   ]])],\n- [ AC_MSG_RESULT(yes); HAVE_WEAK_GETAUXVAL=1 ],\n+ [ AC_MSG_RESULT(yes); HAVE_WEAK_GETAUXVAL=1; AC_DEFINE(HAVE_WEAK_GETAUXVAL, 1, [Define this symbol to build code that uses getauxval (weak linking)]) ],\n  [ AC_MSG_RESULT(no); HAVE_WEAK_GETAUXVAL=0 ]\n )\n \n@@ -1108,12 +1209,25 @@ AC_SUBST(LEVELDB_CPPFLAGS)\n AC_SUBST(LIBLEVELDB)\n AC_SUBST(LIBMEMENV)\n \n+dnl SUPPRESSED_CPPFLAGS=SUPPRESS_WARNINGS([$SOME_CPPFLAGS])\n+dnl Replace -I with -isystem in $SOME_CPPFLAGS to suppress warnings from\n+dnl headers from its include directories and return the result.\n+dnl See -isystem documentation:\n+dnl https://gcc.gnu.org/onlinedocs/gcc/Directory-Options.html\n+dnl https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-isystem-directory\n+dnl Do not change \"-I/usr/include\" to \"-isystem /usr/include\" because that\n+dnl is not necessary (/usr/include is already a system directory) and because\n+dnl it would break GCC's #include_next.\n+AC_DEFUN([SUPPRESS_WARNINGS],\n+         [$(echo $1 |${SED} -E -e 's/(^| )-I/\\1-isystem /g' -e 's;-isystem /usr/include([/ ]|$);-I/usr/include\\1;g')])\n+\n dnl enable-fuzz should disable all other targets\n if test \"x$enable_fuzz\" = \"xyes\"; then\n   AC_MSG_WARN(enable-fuzz will disable all other targets)\n   build_bitcoin_utils=no\n   build_bitcoin_cli=no\n   build_bitcoin_tx=no\n+  build_bitcoin_util=no\n   build_bitcoin_wallet=no\n   build_bitcoind=no\n   build_bitcoin_libs=no\n@@ -1123,17 +1237,83 @@ if test \"x$enable_fuzz\" = \"xyes\"; then\n   enable_wallet=no\n   use_bench=no\n   use_upnp=no\n+  use_natpmp=no\n   use_zmq=no\n+\n+  AX_CHECK_PREPROC_FLAG([-DABORT_ON_FAILED_ASSUME],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DABORT_ON_FAILED_ASSUME\"]],,[[$CXXFLAG_WERROR]])\n+\n+  AC_MSG_CHECKING([whether main function is needed])\n+  AX_CHECK_LINK_FLAG(\n+    [[-fsanitize=$use_sanitizers]],\n+    [AC_MSG_RESULT([no])],\n+    [AC_MSG_RESULT([yes])\n+     CPPFLAGS=\"$CPPFLAGS -DPROVIDE_MAIN_FUNCTION\"],\n+    [],\n+    [AC_LANG_PROGRAM([[\n+      #include <cstdint>\n+      #include <cstddef>\n+      extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) { return 0; }\n+      /* unterminated comment to remove the main function ...\n+    ]],[[]])])\n else\n   BITCOIN_QT_INIT\n \n   dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n-  BITCOIN_QT_CONFIGURE([$use_pkgconfig])\n+  BITCOIN_QT_CONFIGURE([5.5.1])\n+\n+  dnl Keep a copy of the original $QT_INCLUDES and use it when invoking qt's moc\n+  QT_INCLUDES_UNSUPPRESSED=$QT_INCLUDES\n+  if test x$suppress_external_warnings != xno ; then\n+    QT_INCLUDES=SUPPRESS_WARNINGS($QT_INCLUDES)\n+    QT_DBUS_INCLUDES=SUPPRESS_WARNINGS($QT_DBUS_INCLUDES)\n+    QT_TEST_INCLUDES=SUPPRESS_WARNINGS($QT_TEST_INCLUDES)\n+  fi\n fi\n \n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n+    if test x$suppress_external_warnings != xno ; then\n+        BDB_CPPFLAGS=SUPPRESS_WARNINGS($BDB_CPPFLAGS)\n+    fi\n+\n+    dnl Check for sqlite3\n+    if test \"x$use_sqlite\" != \"xno\"; then\n+      PKG_CHECK_MODULES([SQLITE], [sqlite3 >= 3.7.17], [have_sqlite=yes], [have_sqlite=no])\n+    fi\n+    AC_MSG_CHECKING([whether to build wallet with support for sqlite])\n+    if test \"x$use_sqlite\" = \"xno\"; then\n+      use_sqlite=no\n+    elif test \"x$have_sqlite\" = \"xno\"; then\n+      if test \"x$use_sqlite\" = \"xyes\"; then\n+        AC_MSG_ERROR([sqlite support requested but cannot be built. Use --without-sqlite])\n+      fi\n+      use_sqlite=no\n+    else\n+      if test x$use_sqlite != xno; then\n+        AC_DEFINE([USE_SQLITE],[1],[Define if sqlite support should be compiled in])\n+        use_sqlite=yes\n+      fi\n+    fi\n+    AC_MSG_RESULT([$use_sqlite])\n+\n+    dnl Disable wallet if both --without-bdb and --without-sqlite\n+    if test \"x$use_bdb$use_sqlite\" = \"xnono\"; then\n+        if test \"x$enable_wallet\" = \"xyes\"; then\n+            AC_MSG_ERROR([wallet functionality requested but no BDB or SQLite support available.])\n+        fi\n+        enable_wallet=no\n+    fi\n+fi\n+\n+if test x$use_ebpf != xno; then\n+  AC_CHECK_HEADER([sys/sdt.h], [have_sdt=yes], [have_sdt=no])\n+else\n+  have_sdt=no\n+fi\n+\n+if test x$have_sdt = xyes; then\n+  AC_DEFINE([ENABLE_TRACING], [1], [Define to 1 to enable eBPF user static defined tracepoints])\n fi\n \n dnl Check for libminiupnpc (optional)\n@@ -1165,6 +1345,13 @@ if test x$have_miniupnpc != xno; then\n fi\n fi\n \n+dnl Check for libnatpmp (optional).\n+if test \"x$use_natpmp\" != xno; then\n+  AC_CHECK_HEADERS([natpmp.h],\n+                   [AC_CHECK_LIB([natpmp], [initnatpmp], [NATPMP_LIBS=-lnatpmp], [have_natpmp=no])],\n+                   [have_natpmp=no])\n+fi\n+\n if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononononono; then\n     use_boost=no\n else\n@@ -1174,9 +1361,9 @@ fi\n if test x$use_boost = xyes; then\n \n dnl Minimum required Boost version\n-define(MINIMUM_REQUIRED_BOOST, 1.47.0)\n+define(MINIMUM_REQUIRED_BOOST, 1.58.0)\n \n-dnl Check for boost libs\n+dnl Check for Boost libs\n AX_BOOST_BASE([MINIMUM_REQUIRED_BOOST])\n if test x$want_boost = xno; then\n     AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\n@@ -1185,35 +1372,24 @@ AX_BOOST_SYSTEM\n AX_BOOST_FILESYSTEM\n AX_BOOST_THREAD\n \n+dnl Opt-in to boost-process\n+AS_IF([ test x$with_boost_process != x ], [ AX_BOOST_PROCESS ], [ ax_cv_boost_process=no ] )\n+\n+if test x$suppress_external_warnings != xno; then\n+    BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n+fi\n+\n dnl Boost 1.56 through 1.62 allow using std::atomic instead of its own atomic\n dnl counter implementations. In 1.63 and later the std::atomic approach is default.\n m4_pattern_allow(DBOOST_AC_USE_STD_ATOMIC) dnl otherwise it's treated like a macro\n BOOST_CPPFLAGS=\"-DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC $BOOST_CPPFLAGS\"\n \n-if test x$use_reduce_exports = xyes; then\n-  AC_MSG_CHECKING([for working boost reduced exports])\n-  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-  CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"\n-  AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n-      @%:@include <boost/version.hpp>\n-    ]], [[\n-      #if BOOST_VERSION >= 104900\n-      // Everything is okay\n-      #else\n-      #  error Boost version is too old\n-      #endif\n-    ]])],[\n-      AC_MSG_RESULT(yes)\n-    ],[\n-    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])\n-  ])\n-  CPPFLAGS=\"$TEMP_CPPFLAGS\"\n-fi\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_THREAD_LIB\"\n fi\n \n if test x$use_reduce_exports = xyes; then\n     CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n-    AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])\n+    AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"],, [[$LDFLAG_WERROR]])\n fi\n \n if test x$use_tests = xyes; then\n@@ -1222,7 +1398,6 @@ if test x$use_tests = xyes; then\n     AC_MSG_ERROR(hexdump is required for tests)\n   fi\n \n-\n   if test x$use_boost = xyes; then\n \n   AX_BOOST_UNIT_TEST_FRAMEWORK\n@@ -1248,160 +1423,111 @@ if test x$use_tests = xyes; then\n   fi\n fi\n \n-if test x$use_boost = xyes; then\n-\n-BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_THREAD_LIB\"\n+dnl libevent check\n \n+if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench != xnonononono; then\n+  PKG_CHECK_MODULES([EVENT], [libevent >= 2.0.21], [use_libevent=yes], [AC_MSG_ERROR([libevent version 2.0.21 or greater not found.])])\n+  if test x$TARGET_OS != xwindows; then\n+    PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads >= 2.0.21],, [AC_MSG_ERROR([libevent_pthreads version 2.0.21 or greater not found.])])\n+  fi\n+fi\n \n-dnl If boost (prior to 1.57) was built without c++11, it emulated scoped enums\n-dnl using c++98 constructs. Unfortunately, this implementation detail leaked into\n-dnl the abi. This was fixed in 1.57.\n-\n-dnl When building against that installed version using c++11, the headers pick up\n-dnl on the native c++11 scoped enum support and enable it, however it will fail to\n-dnl link. This can be worked around by disabling c++11 scoped enums if linking will\n-dnl fail.\n-dnl BOOST_NO_SCOPED_ENUMS was changed to BOOST_NO_CXX11_SCOPED_ENUMS in 1.51.\n-\n-TEMP_LIBS=\"$LIBS\"\n-LIBS=\"$BOOST_LIBS $LIBS\"\n-TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-AC_MSG_CHECKING([for mismatched boost c++11 scoped enums])\n-AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-  #include <boost/config.hpp>\n-  #include <boost/version.hpp>\n-  #if !defined(BOOST_NO_SCOPED_ENUMS) && !defined(BOOST_NO_CXX11_SCOPED_ENUMS) && BOOST_VERSION < 105700\n-  #define BOOST_NO_SCOPED_ENUMS\n-  #define BOOST_NO_CXX11_SCOPED_ENUMS\n-  #define CHECK\n-  #endif\n-  #include <boost/filesystem.hpp>\n-  ]],[[\n-  #if defined(CHECK)\n-    boost::filesystem::copy_file(\"foo\", \"bar\");\n-  #else\n-    choke;\n-  #endif\n-  ]])],\n-  [AC_MSG_RESULT(mismatched); BOOST_CPPFLAGS=\"$BOOST_CPPFLAGS -DBOOST_NO_SCOPED_ENUMS -DBOOST_NO_CXX11_SCOPED_ENUMS\"], [AC_MSG_RESULT(ok)])\n-LIBS=\"$TEMP_LIBS\"\n-CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+dnl QR Code encoding library check\n \n+if test \"x$use_qr\" != xno; then\n+  BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n fi\n \n-if test x$use_pkgconfig = xyes; then\n-  : dnl\n-  m4_ifdef(\n-    [PKG_CHECK_MODULES],\n-    [\n-      if test x$use_qr != xno; then\n-        BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n-      fi\n-      if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench != xnonononono; then\n-        PKG_CHECK_MODULES([EVENT], [libevent >= 2.0.21], [use_libevent=yes], [AC_MSG_ERROR(libevent version 2.0.21 or greater not found.)])\n-        if test x$TARGET_OS != xwindows; then\n-          PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads >= 2.0.21],, [AC_MSG_ERROR(libevent_pthreads version 2.0.21 or greater not found.)])\n-        fi\n-      fi\n+dnl ZMQ check\n \n-      if test \"x$use_zmq\" = \"xyes\"; then\n-        PKG_CHECK_MODULES([ZMQ],[libzmq >= 4],\n-          [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n-          [AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n-           AC_MSG_WARN([libzmq version 4.x or greater not found, disabling])\n-           use_zmq=no])\n-      else\n-          AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n-      fi\n-    ]\n-  )\n+if test \"x$use_zmq\" = xyes; then\n+  PKG_CHECK_MODULES([ZMQ], [libzmq >= 4],\n+    AC_DEFINE([ENABLE_ZMQ], [1], [Define to 1 to enable ZMQ functions]),\n+    [AC_DEFINE([ENABLE_ZMQ], [0], [Define to 1 to enable ZMQ functions])\n+    AC_MSG_WARN([libzmq version 4.x or greater not found, disabling])\n+    use_zmq=no])\n else\n+  AC_DEFINE_UNQUOTED([ENABLE_ZMQ], [0], [Define to 1 to enable ZMQ functions])\n+fi\n \n-  if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench != xnonononono; then\n-    AC_CHECK_HEADER([event2/event.h], [use_libevent=yes], AC_MSG_ERROR(libevent headers missing),)\n-    AC_CHECK_LIB([event],[main],EVENT_LIBS=-levent,AC_MSG_ERROR(libevent missing))\n-    if test x$TARGET_OS != xwindows; then\n-      AC_CHECK_LIB([event_pthreads],[main],EVENT_PTHREADS_LIBS=-levent_pthreads,AC_MSG_ERROR(libevent_pthreads missing))\n-    fi\n-  fi\n-\n-  if test \"x$use_zmq\" = \"xyes\"; then\n-     AC_CHECK_HEADER([zmq.h],\n-       [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n-       [AC_MSG_WARN([zmq.h not found, disabling zmq support])\n-        use_zmq=no\n-        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])\n-     AC_CHECK_LIB([zmq],[zmq_ctx_shutdown],ZMQ_LIBS=-lzmq,\n-       [AC_MSG_WARN([libzmq >= 4.0 not found, disabling zmq support])\n-        use_zmq=no\n-        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])\n-  else\n-    AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n-  fi\n-\n-  if test \"x$use_zmq\" = \"xyes\"; then\n-    dnl Assume libzmq was built for static linking\n-    case $host in\n-      *mingw*)\n-        ZMQ_CFLAGS=\"$ZMQ_CFLAGS -DZMQ_STATIC\"\n-      ;;\n-    esac\n-  fi\n-\n-  if test x$use_qr != xno; then\n-    BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n-    BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)])\n-  fi\n+if test \"x$use_zmq\" = xyes; then\n+  dnl Assume libzmq was built for static linking\n+  case $host in\n+    *mingw*)\n+      ZMQ_CFLAGS=\"$ZMQ_CFLAGS -DZMQ_STATIC\"\n+    ;;\n+  esac\n fi\n \n dnl univalue check\n \n need_bundled_univalue=yes\n-\n-if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononononono; then\n+if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoin_util$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnononononononono; then\n   need_bundled_univalue=no\n else\n-\n-if test x$system_univalue != xno ; then\n-  found_univalue=no\n-  if test x$use_pkgconfig = xyes; then\n-    : #NOP\n-    m4_ifdef(\n-      [PKG_CHECK_MODULES],\n-      [\n-        PKG_CHECK_MODULES([UNIVALUE],[libunivalue >= 1.0.4],[found_univalue=yes],[true])\n-      ]\n-    )\n-  else\n-    AC_CHECK_HEADER([univalue.h],[\n-      AC_CHECK_LIB([univalue],  [main],[\n-        UNIVALUE_LIBS=-lunivalue\n-        found_univalue=yes\n-      ],[true])\n-    ],[true])\n+  if test x$system_univalue != xno; then\n+    PKG_CHECK_MODULES([UNIVALUE], [libunivalue >= 1.0.4], [found_univalue=yes], [found_univalue=no])\n+    if test x$found_univalue = xyes; then\n+      system_univalue=yes\n+      need_bundled_univalue=no\n+    elif test x$system_univalue = xyes; then\n+      AC_MSG_ERROR([univalue not found])\n+    else\n+      system_univalue=no\n+    fi\n   fi\n \n-  if test x$found_univalue = xyes ; then\n-    system_univalue=yes\n-    need_bundled_univalue=no\n-  elif test x$system_univalue = xyes ; then\n-    AC_MSG_ERROR([univalue not found])\n-  else\n-    system_univalue=no\n+  if test x$need_bundled_univalue = xyes; then\n+    UNIVALUE_CFLAGS='-I$(srcdir)/univalue/include'\n+    UNIVALUE_LIBS='univalue/libunivalue.la'\n   fi\n fi\n \n-if test x$need_bundled_univalue = xyes ; then\n-  UNIVALUE_CFLAGS='-I$(srcdir)/univalue/include'\n-  UNIVALUE_LIBS='univalue/libunivalue.la'\n+AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\n+AC_SUBST(UNIVALUE_CFLAGS)\n+AC_SUBST(UNIVALUE_LIBS)\n+\n+dnl libmultiprocess library check\n+\n+libmultiprocess_found=no\n+if test \"x$with_libmultiprocess\" = xyes || test \"x$with_libmultiprocess\" = xauto; then\n+  m4_ifdef([PKG_CHECK_MODULES], [PKG_CHECK_MODULES([LIBMULTIPROCESS], [libmultiprocess], [\n+     libmultiprocess_found=yes;\n+     libmultiprocess_prefix=`$PKG_CONFIG --variable=prefix libmultiprocess`;\n+  ], [true])])\n+elif test \"x$with_libmultiprocess\" != xno; then\n+  AC_MSG_ERROR([--with-libmultiprocess=$with_libmultiprocess value is not yes, auto, or no])\n fi\n+AC_SUBST(LIBMULTIPROCESS_CFLAGS)\n+AC_SUBST(LIBMULTIPROCESS_LIBS)\n+\n+dnl Enable multiprocess check\n \n+if test \"x$enable_multiprocess\" = xyes; then\n+  if test \"x$libmultiprocess_found\" != xyes; then\n+    AC_MSG_ERROR([--enable-multiprocess=yes option specified but libmultiprocess library was not found. May need to install libmultiprocess library, or specify install path with PKG_CONFIG_PATH environment variable. Running 'pkg-config --debug libmultiprocess' may be helpful for debugging.])\n+  fi\n+  build_multiprocess=yes\n+elif test \"x$enable_multiprocess\" = xauto; then\n+  build_multiprocess=$libmultiprocess_found\n+else\n+  build_multiprocess=no\n fi\n \n-AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\n-AC_SUBST(UNIVALUE_CFLAGS)\n-AC_SUBST(UNIVALUE_LIBS)\n+AM_CONDITIONAL([BUILD_MULTIPROCESS],[test \"x$build_multiprocess\" = xyes])\n+AM_CONDITIONAL([BUILD_BITCOIN_NODE], [test \"x$build_multiprocess\" = xyes])\n+AM_CONDITIONAL([BUILD_BITCOIN_GUI], [test \"x$build_multiprocess\" = xyes])\n+\n+dnl codegen tools check\n+\n+if test x$build_multiprocess != xno; then\n+  if test \"x$with_mpgen\" = xyes || test \"x$with_mpgen\" = xauto; then\n+    MPGEN_PREFIX=\"$libmultiprocess_prefix\"\n+  elif test \"x$with_mpgen\" != xno; then\n+    MPGEN_PREFIX=\"$with_mpgen\";\n+  fi\n+  AC_SUBST(MPGEN_PREFIX)\n+fi\n \n AC_MSG_CHECKING([whether to build bitcoind])\n AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n@@ -1419,6 +1545,10 @@ AC_MSG_CHECKING([whether to build bitcoin-wallet])\n AM_CONDITIONAL([BUILD_BITCOIN_WALLET], [test x$build_bitcoin_wallet = xyes])\n AC_MSG_RESULT($build_bitcoin_wallet)\n \n+AC_MSG_CHECKING([whether to build bitcoin-util])\n+AM_CONDITIONAL([BUILD_BITCOIN_UTIL], [test x$build_bitcoin_util = xyes])\n+AC_MSG_RESULT($build_bitcoin_util)\n+\n AC_MSG_CHECKING([whether to build libraries])\n AM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])\n if test x$build_bitcoin_libs = xyes; then\n@@ -1444,15 +1574,13 @@ if test \"x$use_ccache\" != \"xno\"; then\n   fi\n   AC_MSG_RESULT($use_ccache)\n fi\n-if test \"x$use_ccache\" = \"xyes\"; then\n-    AX_CHECK_PREPROC_FLAG([-Qunused-arguments],[CPPFLAGS=\"-Qunused-arguments $CPPFLAGS\"])\n-fi\n \n dnl enable wallet\n AC_MSG_CHECKING([if wallet should be enabled])\n if test x$enable_wallet != xno; then\n   AC_MSG_RESULT(yes)\n   AC_DEFINE_UNQUOTED([ENABLE_WALLET],[1],[Define to 1 to enable wallet functions])\n+  enable_wallet=yes\n \n else\n   AC_MSG_RESULT(no)\n@@ -1486,6 +1614,31 @@ else\n   fi\n fi\n \n+dnl Enable NAT-PMP support.\n+AC_MSG_CHECKING([whether to build with support for NAT-PMP])\n+if test \"x$have_natpmp\" = xno; then\n+  if test \"x$use_natpmp\" = xyes; then\n+     AC_MSG_ERROR([NAT-PMP requested but cannot be built. Use --without-natpmp])\n+  fi\n+  AC_MSG_RESULT([no])\n+  use_natpmp=no\n+else\n+  if test \"x$use_natpmp\" != xno; then\n+    AC_MSG_RESULT([yes])\n+    AC_MSG_CHECKING([whether to build with NAT-PMP enabled by default])\n+    use_natpmp=yes\n+    natpmp_setting=0\n+    if test \"x$use_natpmp_default\" != xno; then\n+      use_natpmp_default=yes\n+      natpmp_setting=1\n+    fi\n+    AC_MSG_RESULT($use_natpmp_default)\n+    AC_DEFINE_UNQUOTED([USE_NATPMP], [$natpmp_setting], [NAT-PMP support not compiled if undefined, otherwise value (0 or 1) determines default state])\n+  else\n+    AC_MSG_RESULT([no])\n+  fi\n+fi\n+\n dnl these are only used when qt is enabled\n BUILD_TEST_QT=\"\"\n if test x$bitcoin_enable_qt != xno; then\n@@ -1528,7 +1681,11 @@ AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n \n AC_MSG_CHECKING([whether to build test_bitcoin])\n if test x$use_tests = xyes; then\n-  AC_MSG_RESULT([yes])\n+  if test \"x$enable_fuzz\" = \"xyes\"; then\n+    AC_MSG_RESULT([no, because fuzzing is enabled])\n+  else\n+    AC_MSG_RESULT([yes])\n+  fi\n   BUILD_TEST=\"yes\"\n else\n   AC_MSG_RESULT([no])\n@@ -1548,10 +1705,15 @@ fi\n \n AM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\n AM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\n+AM_CONDITIONAL([TARGET_LINUX], [test x$TARGET_OS = xlinux])\n AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n+AM_CONDITIONAL([USE_SQLITE], [test \"x$use_sqlite\" = \"xyes\"])\n+AM_CONDITIONAL([USE_BDB], [test \"x$use_bdb\" = \"xyes\"])\n+AM_CONDITIONAL([ENABLE_TRACING],[test x$have_sdt = xyes])\n AM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\n AM_CONDITIONAL([ENABLE_FUZZ],[test x$enable_fuzz = xyes])\n+AM_CONDITIONAL([ENABLE_FUZZ_LINK_ALL],[test x$enable_danger_fuzz_link_all = xyes])\n AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\n AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n@@ -1570,7 +1732,6 @@ AM_CONDITIONAL([WORDS_BIGENDIAN],[test x$ac_cv_c_bigendian = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])\n-AC_DEFINE(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION, [Build revision])\n AC_DEFINE(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD, [Version Build])\n AC_DEFINE(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE, [Version is release])\n AC_DEFINE(COPYRIGHT_YEAR, _COPYRIGHT_YEAR, [Copyright year])\n@@ -1580,7 +1741,6 @@ define(_COPYRIGHT_HOLDERS_FINAL, [patsubst(_COPYRIGHT_HOLDERS, [%s], [_COPYRIGHT\n AC_DEFINE(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\", [Copyright holder(s)])\n AC_SUBST(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR)\n AC_SUBST(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR)\n-AC_SUBST(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION)\n AC_SUBST(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD)\n AC_SUBST(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE)\n AC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)\n@@ -1591,7 +1751,10 @@ AC_SUBST(BITCOIN_DAEMON_NAME)\n AC_SUBST(BITCOIN_GUI_NAME)\n AC_SUBST(BITCOIN_CLI_NAME)\n AC_SUBST(BITCOIN_TX_NAME)\n+AC_SUBST(BITCOIN_UTIL_NAME)\n AC_SUBST(BITCOIN_WALLET_TOOL_NAME)\n+AC_SUBST(BITCOIN_MP_NODE_NAME)\n+AC_SUBST(BITCOIN_MP_GUI_NAME)\n \n AC_SUBST(RELDFLAGS)\n AC_SUBST(DEBUG_CPPFLAGS)\n@@ -1615,12 +1778,16 @@ AC_SUBST(AVX2_CXXFLAGS)\n AC_SUBST(SHANI_CXXFLAGS)\n AC_SUBST(ARM_CRC_CXXFLAGS)\n AC_SUBST(LIBTOOL_APP_LDFLAGS)\n+AC_SUBST(USE_SQLITE)\n+AC_SUBST(USE_BDB)\n AC_SUBST(USE_UPNP)\n AC_SUBST(USE_QRCODE)\n AC_SUBST(BOOST_LIBS)\n+AC_SUBST(SQLITE_LIBS)\n AC_SUBST(TESTDEFS)\n AC_SUBST(MINIUPNPC_CPPFLAGS)\n AC_SUBST(MINIUPNPC_LIBS)\n+AC_SUBST(NATPMP_LIBS)\n AC_SUBST(EVENT_LIBS)\n AC_SUBST(EVENT_PTHREADS_LIBS)\n AC_SUBST(ZMQ_LIBS)\n@@ -1636,6 +1803,10 @@ AC_SUBST(HAVE_WEAK_GETAUXVAL)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])\n+AC_CONFIG_LINKS([contrib/devtools/security-check.py:contrib/devtools/security-check.py])\n+AC_CONFIG_LINKS([contrib/devtools/symbol-check.py:contrib/devtools/symbol-check.py])\n+AC_CONFIG_LINKS([contrib/devtools/test-security-check.py:contrib/devtools/test-security-check.py])\n+AC_CONFIG_LINKS([contrib/devtools/test-symbol-check.py:contrib/devtools/test-symbol-check.py])\n AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/fuzz/test_runner.py:test/fuzz/test_runner.py])\n@@ -1669,7 +1840,7 @@ if test x$need_bundled_univalue = xyes; then\n   AC_CONFIG_SUBDIRS([src/univalue])\n fi\n \n-ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --with-bignum=no --enable-module-recovery --disable-jni\"\n+ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --with-bignum=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental\"\n AC_CONFIG_SUBDIRS([src/secp256k1])\n \n AC_OUTPUT\n@@ -1684,32 +1855,42 @@ esac\n \n echo\n echo \"Options used to compile and link:\"\n+echo \"  boost process = $ax_cv_boost_process\"\n+echo \"  multiprocess  = $build_multiprocess\"\n echo \"  with wallet   = $enable_wallet\"\n+if test \"x$enable_wallet\" != \"xno\"; then\n+    echo \"    with sqlite = $use_sqlite\"\n+    echo \"    with bdb    = $use_bdb\"\n+fi\n echo \"  with gui / qt = $bitcoin_enable_qt\"\n if test x$bitcoin_enable_qt != xno; then\n     echo \"    with qr     = $use_qr\"\n fi\n echo \"  with zmq      = $use_zmq\"\n-echo \"  with test     = $use_tests\"\n-if test x$use_tests != xno; then\n+if test x$enable_fuzz == xno; then\n+    echo \"  with test     = $use_tests\"\n+else\n+    echo \"  with test     = not building test_bitcoin because fuzzing is enabled\"\n     echo \"    with fuzz   = $enable_fuzz\"\n fi\n echo \"  with bench    = $use_bench\"\n echo \"  with upnp     = $use_upnp\"\n+echo \"  with natpmp   = $use_natpmp\"\n echo \"  use asm       = $use_asm\"\n+echo \"  ebpf tracing  = $have_sdt\"\n echo \"  sanitizers    = $use_sanitizers\"\n echo \"  debug enabled = $enable_debug\"\n echo \"  gprof enabled = $enable_gprof\"\n echo \"  werror        = $enable_werror\"\n echo\n echo \"  target os     = $TARGET_OS\"\n-echo \"  build os      = $BUILD_OS\"\n+echo \"  build os      = $build_os\"\n echo\n echo \"  CC            = $CC\"\n-echo \"  CFLAGS        = $CFLAGS\"\n+echo \"  CFLAGS        = $PTHREAD_CFLAGS $CFLAGS\"\n echo \"  CPPFLAGS      = $DEBUG_CPPFLAGS $HARDENED_CPPFLAGS $CPPFLAGS\"\n echo \"  CXX           = $CXX\"\n echo \"  CXXFLAGS      = $DEBUG_CXXFLAGS $HARDENED_CXXFLAGS $WARN_CXXFLAGS $NOWARN_CXXFLAGS $ERROR_CXXFLAGS $GPROF_CXXFLAGS $CXXFLAGS\"\n-echo \"  LDFLAGS       = $PTHREAD_CFLAGS $HARDENED_LDFLAGS $GPROF_LDFLAGS $LDFLAGS\"\n+echo \"  LDFLAGS       = $PTHREAD_LIBS $HARDENED_LDFLAGS $GPROF_LDFLAGS $LDFLAGS\"\n echo \"  ARFLAGS       = $ARFLAGS\"\n echo"
      },
      {
        "sha": "a18c5bccc57eaddcd30075ff41b26a157ae9c5b3",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -5,7 +5,7 @@ Upstream-Contact: Satoshi Nakamoto <satoshin@gmx.com>\n Source: https://github.com/bitcoin/bitcoin\n \n Files: *\n-Copyright: 2009-2020, Bitcoin Core Developers\n+Copyright: 2009-2021, Bitcoin Core Developers\n License: Expat\n Comment: The Bitcoin Core Developers encompasses the current developers listed on bitcoin.org,\n          as well as the numerous contributors to the project."
      },
      {
        "sha": "bdff7a84b098bd430d9e3b3ec8c58106da7bb680",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -89,12 +89,6 @@ example:\n BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n ```\n \n-optimize-pngs.py\n-================\n-\n-A script to optimize png files in the bitcoin\n-repository (requires pngcrush).\n-\n security-check.py and test-security-check.py\n ============================================\n "
      },
      {
        "sha": "b1d9f2b7db23b06928d5afd3af3b7b3115822fe0",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,10 +1,11 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n import sys\n import re\n+from typing import Dict, List, Set\n \n MAPPING = {\n     'core_read.cpp': 'core_io.cpp',\n@@ -32,7 +33,7 @@ def module_name(path):\n     return None\n \n files = dict()\n-deps = dict()\n+deps: Dict[str, Set[str]] = dict()\n \n RE = re.compile(\"^#include <(.*)>\")\n \n@@ -59,12 +60,12 @@ def module_name(path):\n                     deps[module].add(included_module)\n \n # Loop to find the shortest (remaining) circular dependency\n-have_cycle = False\n+have_cycle: bool = False\n while True:\n     shortest_cycle = None\n     for module in sorted(deps.keys()):\n         # Build the transitive closure of dependencies of module\n-        closure = dict()\n+        closure: Dict[str, List[str]] = dict()\n         for dep in deps[module]:\n             closure[dep] = []\n         while True:"
      },
      {
        "sha": "9a555c70bb490add4f055da0f58e9100a396584f",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -22,6 +22,7 @@\n     'src/reverse_iterator.h',\n     'src/test/fuzz/FuzzedDataProvider.h',\n     'src/tinyformat.h',\n+    'src/bench/nanobench.h',\n     'test/functional/test_framework/bignum.py',\n     # python init:\n     '*__init__.py',"
      },
      {
        "sha": "b7bf76ce77e01c4ccf38965ad9d91f62d2e7bae1",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env bash\n-# Copyright (c) 2016-2019 The Bitcoin Core developers\n+# Copyright (c) 2016-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,10 +14,27 @@ BITCOIND=${BITCOIND:-$BINDIR/bitcoind}\n BITCOINCLI=${BITCOINCLI:-$BINDIR/bitcoin-cli}\n BITCOINTX=${BITCOINTX:-$BINDIR/bitcoin-tx}\n WALLET_TOOL=${WALLET_TOOL:-$BINDIR/bitcoin-wallet}\n+BITCOINUTIL=${BITCOINQT:-$BINDIR/bitcoin-util}\n BITCOINQT=${BITCOINQT:-$BINDIR/qt/bitcoin-qt}\n \n [ ! -x $BITCOIND ] && echo \"$BITCOIND not found or not executable.\" && exit 1\n \n+# Don't allow man pages to be generated for binaries built from a dirty tree\n+DIRTY=\"\"\n+for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $WALLET_TOOL $BITCOINUTIL $BITCOINQT; do\n+  VERSION_OUTPUT=$($cmd --version)\n+  if [[ $VERSION_OUTPUT == *\"dirty\"* ]]; then\n+    DIRTY=\"${DIRTY}${cmd}\\n\"\n+  fi\n+done\n+if [ -n \"$DIRTY\" ]\n+then\n+  echo -e \"WARNING: the following binaries were built from a dirty tree:\\n\"\n+  echo -e $DIRTY\n+  echo \"man pages generated from dirty binaries should NOT be committed.\"\n+  echo \"To properly generate man pages, please commit your changes to the above binaries, rebuild them, then run this script again.\"\n+fi\n+\n # The autodetected version git tag can screw up manpage output a little bit\n read -r -a BTCVER <<< \"$($BITCOINCLI --version | head -n1 | awk -F'[ -]' '{ print $6, $7 }')\"\n \n@@ -27,7 +44,7 @@ read -r -a BTCVER <<< \"$($BITCOINCLI --version | head -n1 | awk -F'[ -]' '{ prin\n echo \"[COPYRIGHT]\" > footer.h2m\n $BITCOIND --version | sed -n '1!p' >> footer.h2m\n \n-for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $WALLET_TOOL $BITCOINQT; do\n+for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $WALLET_TOOL $BITCOINUTIL $BITCOINQT; do\n   cmdname=\"${cmd##*/}\"\n   help2man -N --version-string=${BTCVER[0]} --include=footer.h2m -o ${MANDIR}/${cmdname}.1 ${cmd}\n   sed -i \"s/\\\\\\-${BTCVER[1]}//g\" ${MANDIR}/${cmdname}.1"
      },
      {
        "sha": "e9481dbbcf54159b08f8a27daf4905826b03804e",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "removed",
        "additions": 0,
        "deletions": 76,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,76 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-Run this script every time you change one of the png files. Using pngcrush, it will optimize the png files, remove various color profiles, remove ancillary chunks (alla) and text chunks (text).\n-#pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n-'''\n-import os\n-import sys\n-import subprocess\n-import hashlib\n-from PIL import Image  # pip3 install Pillow\n-\n-def file_hash(filename):\n-    '''Return hash of raw file contents'''\n-    with open(filename, 'rb') as f:\n-        return hashlib.sha256(f.read()).hexdigest()\n-\n-def content_hash(filename):\n-    '''Return hash of RGBA contents of image'''\n-    i = Image.open(filename)\n-    i = i.convert('RGBA')\n-    data = i.tobytes()\n-    return hashlib.sha256(data).hexdigest()\n-\n-pngcrush = 'pngcrush'\n-git = 'git'\n-folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"share/pixmaps\"]\n-basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel'], universal_newlines=True, encoding='utf8').rstrip('\\n')\n-totalSaveBytes = 0\n-noHashChange = True\n-\n-outputArray = []\n-for folder in folders:\n-    absFolder=os.path.join(basePath, folder)\n-    for file in os.listdir(absFolder):\n-        extension = os.path.splitext(file)[1]\n-        if extension.lower() == '.png':\n-            print(\"optimizing {}...\".format(file), end =' ')\n-            file_path = os.path.join(absFolder, file)\n-            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)}\n-            fileMetaMap['contentHashPre'] = content_hash(file_path)\n-\n-            try:\n-                subprocess.call([pngcrush, \"-brute\", \"-ow\", \"-rem\", \"gAMA\", \"-rem\", \"cHRM\", \"-rem\", \"iCCP\", \"-rem\", \"sRGB\", \"-rem\", \"alla\", \"-rem\", \"text\", file_path],\n-                                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n-            except:\n-                print(\"pngcrush is not installed, aborting...\")\n-                sys.exit(0)\n-\n-            #verify\n-            if \"Not a PNG file\" in subprocess.check_output([pngcrush, \"-n\", \"-v\", file_path], stderr=subprocess.STDOUT, universal_newlines=True, encoding='utf8'):\n-                print(\"PNG file \"+file+\" is corrupted after crushing, check out pngcursh version\")\n-                sys.exit(1)\n-\n-            fileMetaMap['sha256New'] = file_hash(file_path)\n-            fileMetaMap['contentHashPost'] = content_hash(file_path)\n-\n-            if fileMetaMap['contentHashPre'] != fileMetaMap['contentHashPost']:\n-                print(\"Image contents of PNG file {} before and after crushing don't match\".format(file))\n-                sys.exit(1)\n-\n-            fileMetaMap['psize'] = os.path.getsize(file_path)\n-            outputArray.append(fileMetaMap)\n-            print(\"done\")\n-\n-print(\"summary:\\n+++++++++++++++++\")\n-for fileDict in outputArray:\n-    oldHash = fileDict['sha256Old']\n-    newHash = fileDict['sha256New']\n-    totalSaveBytes += fileDict['osize'] - fileDict['psize']\n-    noHashChange = noHashChange and (oldHash == newHash)\n-    print(fileDict['file']+\"\\n  size diff from: \"+str(fileDict['osize'])+\" to: \"+str(fileDict['psize'])+\"\\n  old sha256: \"+oldHash+\"\\n  new sha256: \"+newHash+\"\\n\")\n-\n-print(\"completed. Checksum stable: \"+str(noHashChange)+\". Total reduction: \"+str(totalSaveBytes)+\" bytes\")"
      },
      {
        "sha": "8cf06a799a7e6b1277b7cd79e64830efee971429",
        "filename": "contrib/devtools/pixie.py",
        "status": "added",
        "additions": 323,
        "deletions": 0,
        "changes": 323,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/pixie.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/pixie.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/pixie.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,323 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 Wladimir J. van der Laan\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Compact, self-contained ELF implementation for bitcoin-core security checks.\n+'''\n+import struct\n+import types\n+from typing import Dict, List, Optional, Union, Tuple\n+\n+# you can find all these values in elf.h\n+EI_NIDENT = 16\n+\n+# Byte indices in e_ident\n+EI_CLASS = 4 # ELFCLASSxx\n+EI_DATA = 5  # ELFDATAxxxx\n+\n+ELFCLASS32 = 1 # 32-bit\n+ELFCLASS64 = 2 # 64-bit\n+\n+ELFDATA2LSB = 1 # little endian\n+ELFDATA2MSB = 2 # big endian\n+\n+# relevant values for e_machine\n+EM_386 = 3\n+EM_PPC64 = 21\n+EM_ARM = 40\n+EM_AARCH64 = 183\n+EM_X86_64 = 62\n+EM_RISCV = 243\n+\n+# relevant values for e_type\n+ET_DYN = 3\n+\n+# relevant values for sh_type\n+SHT_PROGBITS = 1\n+SHT_STRTAB = 3\n+SHT_DYNAMIC = 6\n+SHT_DYNSYM = 11\n+SHT_GNU_verneed = 0x6ffffffe\n+SHT_GNU_versym = 0x6fffffff\n+\n+# relevant values for p_type\n+PT_LOAD = 1\n+PT_GNU_STACK = 0x6474e551\n+PT_GNU_RELRO = 0x6474e552\n+\n+# relevant values for p_flags\n+PF_X = (1 << 0)\n+PF_W = (1 << 1)\n+PF_R = (1 << 2)\n+\n+# relevant values for d_tag\n+DT_NEEDED = 1\n+DT_FLAGS = 30\n+\n+# relevant values of `d_un.d_val' in the DT_FLAGS entry\n+DF_BIND_NOW = 0x00000008\n+\n+# relevant d_tags with string payload\n+STRING_TAGS = {DT_NEEDED}\n+\n+# rrlevant values for ST_BIND subfield of st_info (symbol binding)\n+STB_LOCAL = 0\n+\n+class ELFRecord(types.SimpleNamespace):\n+    '''Unified parsing for ELF records.'''\n+    def __init__(self, data: bytes, offset: int, eh: 'ELFHeader', total_size: Optional[int]) -> None:\n+        hdr_struct = self.STRUCT[eh.ei_class][0][eh.ei_data]\n+        if total_size is not None and hdr_struct.size > total_size:\n+            raise ValueError(f'{self.__class__.__name__} header size too small ({total_size} < {hdr_struct.size})')\n+        for field, value in zip(self.STRUCT[eh.ei_class][1], hdr_struct.unpack(data[offset:offset + hdr_struct.size])):\n+            setattr(self, field, value)\n+\n+def BiStruct(chars: str) -> Dict[int, struct.Struct]:\n+    '''Compile a struct parser for both endians.'''\n+    return {\n+        ELFDATA2LSB: struct.Struct('<' + chars),\n+        ELFDATA2MSB: struct.Struct('>' + chars),\n+    }\n+\n+class ELFHeader(ELFRecord):\n+    FIELDS = ['e_type', 'e_machine', 'e_version', 'e_entry', 'e_phoff', 'e_shoff', 'e_flags', 'e_ehsize', 'e_phentsize', 'e_phnum', 'e_shentsize', 'e_shnum', 'e_shstrndx']\n+    STRUCT = {\n+        ELFCLASS32: (BiStruct('HHIIIIIHHHHHH'), FIELDS),\n+        ELFCLASS64: (BiStruct('HHIQQQIHHHHHH'), FIELDS),\n+    }\n+\n+    def __init__(self, data: bytes, offset: int) -> None:\n+        self.e_ident = data[offset:offset + EI_NIDENT]\n+        if self.e_ident[0:4] != b'\\x7fELF':\n+            raise ValueError('invalid ELF magic')\n+        self.ei_class = self.e_ident[EI_CLASS]\n+        self.ei_data = self.e_ident[EI_DATA]\n+\n+        super().__init__(data, offset + EI_NIDENT, self, None)\n+\n+    def __repr__(self) -> str:\n+        return f'Header(e_ident={self.e_ident!r}, e_type={self.e_type}, e_machine={self.e_machine}, e_version={self.e_version}, e_entry={self.e_entry}, e_phoff={self.e_phoff}, e_shoff={self.e_shoff}, e_flags={self.e_flags}, e_ehsize={self.e_ehsize}, e_phentsize={self.e_phentsize}, e_phnum={self.e_phnum}, e_shentsize={self.e_shentsize}, e_shnum={self.e_shnum}, e_shstrndx={self.e_shstrndx})'\n+\n+class Section(ELFRecord):\n+    name: Optional[bytes] = None\n+    FIELDS = ['sh_name', 'sh_type', 'sh_flags', 'sh_addr', 'sh_offset', 'sh_size', 'sh_link', 'sh_info', 'sh_addralign', 'sh_entsize']\n+    STRUCT = {\n+        ELFCLASS32: (BiStruct('IIIIIIIIII'), FIELDS),\n+        ELFCLASS64: (BiStruct('IIQQQQIIQQ'), FIELDS),\n+    }\n+\n+    def __init__(self, data: bytes, offset: int, eh: ELFHeader) -> None:\n+        super().__init__(data, offset, eh, eh.e_shentsize)\n+        self._data = data\n+\n+    def __repr__(self) -> str:\n+        return f'Section(sh_name={self.sh_name}({self.name!r}), sh_type=0x{self.sh_type:x}, sh_flags={self.sh_flags}, sh_addr=0x{self.sh_addr:x}, sh_offset=0x{self.sh_offset:x}, sh_size={self.sh_size}, sh_link={self.sh_link}, sh_info={self.sh_info}, sh_addralign={self.sh_addralign}, sh_entsize={self.sh_entsize})'\n+\n+    def contents(self) -> bytes:\n+        '''Return section contents.'''\n+        return self._data[self.sh_offset:self.sh_offset + self.sh_size]\n+\n+class ProgramHeader(ELFRecord):\n+    STRUCT = {\n+        # different ELF classes have the same fields, but in a different order to optimize space versus alignment\n+        ELFCLASS32: (BiStruct('IIIIIIII'), ['p_type', 'p_offset', 'p_vaddr', 'p_paddr', 'p_filesz', 'p_memsz', 'p_flags', 'p_align']),\n+        ELFCLASS64: (BiStruct('IIQQQQQQ'), ['p_type', 'p_flags', 'p_offset', 'p_vaddr', 'p_paddr', 'p_filesz', 'p_memsz', 'p_align']),\n+    }\n+\n+    def __init__(self, data: bytes, offset: int, eh: ELFHeader) -> None:\n+        super().__init__(data, offset, eh, eh.e_phentsize)\n+\n+    def __repr__(self) -> str:\n+        return f'ProgramHeader(p_type={self.p_type}, p_offset={self.p_offset}, p_vaddr={self.p_vaddr}, p_paddr={self.p_paddr}, p_filesz={self.p_filesz}, p_memsz={self.p_memsz}, p_flags={self.p_flags}, p_align={self.p_align})'\n+\n+class Symbol(ELFRecord):\n+    STRUCT = {\n+        # different ELF classes have the same fields, but in a different order to optimize space versus alignment\n+        ELFCLASS32: (BiStruct('IIIBBH'), ['st_name', 'st_value', 'st_size', 'st_info', 'st_other', 'st_shndx']),\n+        ELFCLASS64: (BiStruct('IBBHQQ'), ['st_name', 'st_info', 'st_other', 'st_shndx', 'st_value', 'st_size']),\n+    }\n+\n+    def __init__(self, data: bytes, offset: int, eh: ELFHeader, symtab: Section, strings: bytes, version: Optional[bytes]) -> None:\n+        super().__init__(data, offset, eh, symtab.sh_entsize)\n+        self.name = _lookup_string(strings, self.st_name)\n+        self.version = version\n+\n+    def __repr__(self) -> str:\n+        return f'Symbol(st_name={self.st_name}({self.name!r}), st_value={self.st_value}, st_size={self.st_size}, st_info={self.st_info}, st_other={self.st_other}, st_shndx={self.st_shndx}, version={self.version!r})'\n+\n+    @property\n+    def is_import(self) -> bool:\n+        '''Returns whether the symbol is an imported symbol.'''\n+        return self.st_bind != STB_LOCAL and self.st_shndx == 0\n+\n+    @property\n+    def is_export(self) -> bool:\n+        '''Returns whether the symbol is an exported symbol.'''\n+        return self.st_bind != STB_LOCAL and self.st_shndx != 0\n+\n+    @property\n+    def st_bind(self) -> int:\n+        '''Returns STB_*.'''\n+        return self.st_info >> 4\n+\n+class Verneed(ELFRecord):\n+    DEF = (BiStruct('HHIII'), ['vn_version', 'vn_cnt', 'vn_file', 'vn_aux', 'vn_next'])\n+    STRUCT = { ELFCLASS32: DEF, ELFCLASS64: DEF }\n+\n+    def __init__(self, data: bytes, offset: int, eh: ELFHeader) -> None:\n+        super().__init__(data, offset, eh, None)\n+\n+    def __repr__(self) -> str:\n+        return f'Verneed(vn_version={self.vn_version}, vn_cnt={self.vn_cnt}, vn_file={self.vn_file}, vn_aux={self.vn_aux}, vn_next={self.vn_next})'\n+\n+class Vernaux(ELFRecord):\n+    DEF = (BiStruct('IHHII'), ['vna_hash', 'vna_flags', 'vna_other', 'vna_name', 'vna_next'])\n+    STRUCT = { ELFCLASS32: DEF, ELFCLASS64: DEF }\n+\n+    def __init__(self, data: bytes, offset: int, eh: ELFHeader, strings: bytes) -> None:\n+        super().__init__(data, offset, eh, None)\n+        self.name = _lookup_string(strings, self.vna_name)\n+\n+    def __repr__(self) -> str:\n+        return f'Veraux(vna_hash={self.vna_hash}, vna_flags={self.vna_flags}, vna_other={self.vna_other}, vna_name={self.vna_name}({self.name!r}), vna_next={self.vna_next})'\n+\n+class DynTag(ELFRecord):\n+    STRUCT = {\n+        ELFCLASS32: (BiStruct('II'), ['d_tag', 'd_val']),\n+        ELFCLASS64: (BiStruct('QQ'), ['d_tag', 'd_val']),\n+    }\n+\n+    def __init__(self, data: bytes, offset: int, eh: ELFHeader, section: Section) -> None:\n+        super().__init__(data, offset, eh, section.sh_entsize)\n+\n+    def __repr__(self) -> str:\n+        return f'DynTag(d_tag={self.d_tag}, d_val={self.d_val})'\n+\n+def _lookup_string(data: bytes, index: int) -> bytes:\n+    '''Look up string by offset in ELF string table.'''\n+    endx = data.find(b'\\x00', index)\n+    assert endx != -1\n+    return data[index:endx]\n+\n+VERSYM_S = BiStruct('H') # .gnu_version section has a single 16-bit integer per symbol in the linked section\n+def _parse_symbol_table(section: Section, strings: bytes, eh: ELFHeader, versym: bytes, verneed: Dict[int, bytes]) -> List[Symbol]:\n+    '''Parse symbol table, return a list of symbols.'''\n+    data = section.contents()\n+    symbols = []\n+    versym_iter = (verneed.get(v[0]) for v in VERSYM_S[eh.ei_data].iter_unpack(versym))\n+    for ofs, version in zip(range(0, len(data), section.sh_entsize), versym_iter):\n+        symbols.append(Symbol(data, ofs, eh, section, strings, version))\n+    return symbols\n+\n+def _parse_verneed(section: Section, strings: bytes, eh: ELFHeader) -> Dict[int, bytes]:\n+    '''Parse .gnu.version_r section, return a dictionary of {versym: 'GLIBC_...'}.'''\n+    data = section.contents()\n+    ofs = 0\n+    result = {}\n+    while True:\n+        verneed = Verneed(data, ofs, eh)\n+        aofs = verneed.vn_aux\n+        while True:\n+            vernaux = Vernaux(data, aofs, eh, strings)\n+            result[vernaux.vna_other] = vernaux.name\n+            if not vernaux.vna_next:\n+                break\n+            aofs += vernaux.vna_next\n+\n+        if not verneed.vn_next:\n+            break\n+        ofs += verneed.vn_next\n+\n+    return result\n+\n+def _parse_dyn_tags(section: Section, strings: bytes, eh: ELFHeader) -> List[Tuple[int, Union[bytes, int]]]:\n+    '''Parse dynamic tags. Return array of tuples.'''\n+    data = section.contents()\n+    ofs = 0\n+    result = []\n+    for ofs in range(0, len(data), section.sh_entsize):\n+        tag = DynTag(data, ofs, eh, section)\n+        val = _lookup_string(strings, tag.d_val) if tag.d_tag in STRING_TAGS else tag.d_val\n+        result.append((tag.d_tag, val))\n+\n+    return result\n+\n+class ELFFile:\n+    sections: List[Section]\n+    program_headers: List[ProgramHeader]\n+    dyn_symbols: List[Symbol]\n+    dyn_tags: List[Tuple[int, Union[bytes, int]]]\n+\n+    def __init__(self, data: bytes) -> None:\n+        self.data = data\n+        self.hdr = ELFHeader(self.data, 0)\n+        self._load_sections()\n+        self._load_program_headers()\n+        self._load_dyn_symbols()\n+        self._load_dyn_tags()\n+        self._section_to_segment_mapping()\n+\n+    def _load_sections(self) -> None:\n+        self.sections = []\n+        for idx in range(self.hdr.e_shnum):\n+            offset = self.hdr.e_shoff + idx * self.hdr.e_shentsize\n+            self.sections.append(Section(self.data, offset, self.hdr))\n+\n+        shstr = self.sections[self.hdr.e_shstrndx].contents()\n+        for section in self.sections:\n+            section.name = _lookup_string(shstr, section.sh_name)\n+\n+    def _load_program_headers(self) -> None:\n+        self.program_headers = []\n+        for idx in range(self.hdr.e_phnum):\n+            offset = self.hdr.e_phoff + idx * self.hdr.e_phentsize\n+            self.program_headers.append(ProgramHeader(self.data, offset, self.hdr))\n+\n+    def _load_dyn_symbols(self) -> None:\n+        # first, load 'verneed' section\n+        verneed = None\n+        for section in self.sections:\n+            if section.sh_type == SHT_GNU_verneed:\n+                strtab = self.sections[section.sh_link].contents() # associated string table\n+                assert verneed is None # only one section of this kind please\n+                verneed = _parse_verneed(section, strtab, self.hdr)\n+        assert verneed is not None\n+\n+        # then, correlate GNU versym sections with dynamic symbol sections\n+        versym = {}\n+        for section in self.sections:\n+            if section.sh_type == SHT_GNU_versym:\n+                versym[section.sh_link] = section\n+\n+        # finally, load dynsym sections\n+        self.dyn_symbols = []\n+        for idx, section in enumerate(self.sections):\n+            if section.sh_type == SHT_DYNSYM: # find dynamic symbol tables\n+                strtab_data = self.sections[section.sh_link].contents() # associated string table\n+                versym_data = versym[idx].contents() # associated symbol version table\n+                self.dyn_symbols += _parse_symbol_table(section, strtab_data, self.hdr, versym_data, verneed)\n+\n+    def _load_dyn_tags(self) -> None:\n+        self.dyn_tags = []\n+        for idx, section in enumerate(self.sections):\n+            if section.sh_type == SHT_DYNAMIC: # find dynamic tag tables\n+                strtab = self.sections[section.sh_link].contents() # associated string table\n+                self.dyn_tags += _parse_dyn_tags(section, strtab, self.hdr)\n+\n+    def _section_to_segment_mapping(self) -> None:\n+        for ph in self.program_headers:\n+            ph.sections = []\n+            for section in self.sections:\n+                if ph.p_vaddr <= section.sh_addr < (ph.p_vaddr + ph.p_memsz):\n+                    ph.sections.append(section)\n+\n+    def query_dyn_tags(self, tag_in: int) -> List[Union[int, bytes]]:\n+        '''Return the values of all dyn tags with the specified tag.'''\n+        return [val for (tag, val) in self.dyn_tags if tag == tag_in]\n+\n+\n+def load(filename: str) -> ELFFile:\n+    with open(filename, 'rb') as f:\n+        data = f.read()\n+    return ELFFile(data)"
      },
      {
        "sha": "b2ecc274fbb7b32cec528f5e00c14d174578e6cc",
        "filename": "contrib/devtools/previous_release.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 152,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/devtools/previous_release.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/devtools/previous_release.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/previous_release.sh?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,152 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n-# Build previous releases.\n-\n-export LC_ALL=C\n-\n-CONFIG_FLAGS=\"\"\n-FUNCTIONAL_TESTS=0\n-DELETE_EXISTING=0\n-USE_DEPENDS=0\n-DOWNLOAD_BINARY=0\n-CONFIG_FLAGS=\"\"\n-TARGET=\"releases\"\n-\n-while getopts \":hfrdbt:\" opt; do\n-  case $opt in\n-    h)\n-      echo \"Usage: .previous_release.sh [options] tag1 tag2\"\n-      echo \"  options:\"\n-      echo \"  -h   Print this message\"\n-      echo \"  -f   Configure for functional tests\"\n-      echo \"  -r   Remove existing directory\"\n-      echo \"  -d   Use depends\"\n-      echo \"  -b   Download release binary\"\n-      echo \"  -t   Target directory (default: releases)\"\n-      exit 0\n-      ;;\n-    f)\n-      FUNCTIONAL_TESTS=1\n-      CONFIG_FLAGS=\"$CONFIG_FLAGS --without-gui --disable-tests --disable-bench\"\n-      ;;\n-    r)\n-      DELETE_EXISTING=1\n-      ;;\n-    d)\n-      USE_DEPENDS=1\n-      ;;\n-    b)\n-      DOWNLOAD_BINARY=1\n-      ;;\n-    t)\n-      TARGET=$OPTARG\n-      ;;\n-    \\?)\n-      echo \"Invalid option: -$OPTARG\" >&2\n-      exit 1\n-      ;;\n-  esac\n-done\n-\n-shift $((OPTIND-1))\n-\n-if [ -z \"$1\" ]; then\n-  echo \"Specify release tag(s), e.g.: .previous_release v0.15.1\"\n-  exit 1\n-fi\n-\n-if [ ! -d \"$TARGET\" ]; then\n-  mkdir -p $TARGET\n-fi\n-\n-if [ \"$DOWNLOAD_BINARY\" -eq \"1\" ]; then\n-  HOST=\"${HOST:-$(./depends/config.guess)}\"\n-  case \"$HOST\" in\n-    x86_64-*-linux*)\n-      PLATFORM=x86_64-linux-gnu\n-      ;;\n-    x86_64-apple-darwin*)\n-      PLATFORM=osx64\n-      ;;\n-    *)\n-      echo \"Not sure which binary to download for $HOST.\"\n-      exit 1\n-      ;;\n-  esac\n-fi\n-\n-echo \"Releases directory: $TARGET\"\n-pushd \"$TARGET\" || exit 1\n-{\n-  for tag in \"$@\"\n-  do\n-    if [ \"$DELETE_EXISTING\" -eq \"1\" ]; then\n-      if [ -d \"$tag\" ]; then\n-        rm -r \"$tag\"\n-      fi\n-    fi\n-\n-    if [ \"$DOWNLOAD_BINARY\" -eq \"0\" ]; then\n-\n-      if [ ! -d \"$tag\" ]; then\n-        if [ -z $(git tag -l \"$tag\") ]; then\n-          echo \"Tag $tag not found\"\n-          exit 1\n-        fi\n-\n-        git clone https://github.com/bitcoin/bitcoin \"$tag\"\n-        pushd \"$tag\" || exit 1\n-        {\n-          git checkout \"$tag\"\n-          if [ \"$USE_DEPENDS\" -eq \"1\" ]; then\n-            pushd depends || exit 1\n-            {\n-              if [ \"$FUNCTIONAL_TESTS\" -eq \"1\" ]; then\n-                make NO_QT=1\n-              else\n-                make\n-              fi\n-              HOST=\"${HOST:-$(./config.guess)}\"\n-            }\n-            popd || exit 1\n-            CONFIG_FLAGS=\"--prefix=$PWD/depends/$HOST $CONFIG_FLAGS\"\n-          fi\n-          ./autogen.sh\n-          ./configure $CONFIG_FLAGS\n-          make\n-          # Move binaries, so they're in the same place as in the release download:\n-          mkdir bin\n-          mv src/bitcoind src/bitcoin-cli src/bitcoin-tx bin\n-          if [ \"$FUNCTIONAL_TESTS\" -eq \"0\" ]; then\n-            mv src/qt/bitcoin-qt bin\n-          fi\n-        }\n-        popd || exit 1\n-      fi\n-    else\n-      if [ -d \"$tag\" ]; then\n-        echo \"Using cached $tag\"\n-      else\n-        mkdir \"$tag\"\n-        if [[ \"$tag\" =~ v(.*)(rc[0-9]+)$ ]]; then\n-            BIN_PATH=\"bin/bitcoin-core-${BASH_REMATCH[1]}/test.${BASH_REMATCH[2]}\"\n-        else\n-            BIN_PATH=\"bin/bitcoin-core-${tag:1}\"\n-        fi\n-        URL=\"https://bitcoin.org/$BIN_PATH/bitcoin-${tag:1}-$PLATFORM.tar.gz\"\n-        echo \"Fetching: $URL\"\n-        if ! curl -O -f $URL; then\n-            echo \"Download failed.\"\n-            exit 1\n-        fi\n-        tar -zxf \"bitcoin-${tag:1}-$PLATFORM.tar.gz\" -C \"$tag\" --strip-components=1 \"bitcoin-${tag:1}\"\n-        rm \"bitcoin-${tag:1}-$PLATFORM.tar.gz\"\n-      fi\n-    fi\n-  done\n-}\n-popd || exit 1"
      },
      {
        "sha": "7b09c42fdec23b533605390941535ee8b0db4124",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 119,
        "deletions": 122,
        "changes": 241,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -6,181 +6,188 @@\n Perform basic security checks on a series of executables.\n Exit status will be 0 if successful, and the program will be silent.\n Otherwise the exit status will be 1 and it will log which executables failed which checks.\n-Needs `readelf` (for ELF), `objdump` (for PE) and `otool` (for MACHO).\n+Needs `objdump` (for PE) and `otool` (for MACHO).\n '''\n import subprocess\n import sys\n import os\n+from typing import List, Optional\n+\n+import pixie\n \n-READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n-NONFATAL = {} # checks which are non-fatal for now but only generate a warning\n \n-def check_ELF_PIE(executable):\n+def run_command(command) -> str:\n+    p = subprocess.run(command, stdout=subprocess.PIPE, check=True, universal_newlines=True)\n+    return p.stdout\n+\n+def check_ELF_PIE(executable) -> bool:\n     '''\n     Check for position independent executable (PIE), allowing for address space randomization.\n     '''\n-    p = subprocess.Popen([READELF_CMD, '-h', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    elf = pixie.load(executable)\n+    return elf.hdr.e_type == pixie.ET_DYN\n \n-    ok = False\n-    for line in stdout.splitlines():\n-        line = line.split()\n-        if len(line)>=2 and line[0] == 'Type:' and line[1] == 'DYN':\n-            ok = True\n-    return ok\n-\n-def get_ELF_program_headers(executable):\n-    '''Return type and flags for ELF program headers'''\n-    p = subprocess.Popen([READELF_CMD, '-l', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n-    in_headers = False\n-    count = 0\n-    headers = []\n-    for line in stdout.splitlines():\n-        if line.startswith('Program Headers:'):\n-            in_headers = True\n-        if line == '':\n-            in_headers = False\n-        if in_headers:\n-            if count == 1: # header line\n-                ofs_typ = line.find('Type')\n-                ofs_offset = line.find('Offset')\n-                ofs_flags = line.find('Flg')\n-                ofs_align = line.find('Align')\n-                if ofs_typ == -1 or ofs_offset == -1 or ofs_flags == -1 or ofs_align  == -1:\n-                    raise ValueError('Cannot parse elfread -lW output')\n-            elif count > 1:\n-                typ = line[ofs_typ:ofs_offset].rstrip()\n-                flags = line[ofs_flags:ofs_align].rstrip()\n-                headers.append((typ, flags))\n-            count += 1\n-    return headers\n-\n-def check_ELF_NX(executable):\n+def check_ELF_NX(executable) -> bool:\n     '''\n     Check that no sections are writable and executable (including the stack)\n     '''\n+    elf = pixie.load(executable)\n     have_wx = False\n     have_gnu_stack = False\n-    for (typ, flags) in get_ELF_program_headers(executable):\n-        if typ == 'GNU_STACK':\n+    for ph in elf.program_headers:\n+        if ph.p_type == pixie.PT_GNU_STACK:\n             have_gnu_stack = True\n-        if 'W' in flags and 'E' in flags: # section is both writable and executable\n+        if (ph.p_flags & pixie.PF_W) != 0 and (ph.p_flags & pixie.PF_X) != 0: # section is both writable and executable\n             have_wx = True\n     return have_gnu_stack and not have_wx\n \n-def check_ELF_RELRO(executable):\n+def check_ELF_RELRO(executable) -> bool:\n     '''\n     Check for read-only relocations.\n     GNU_RELRO program header must exist\n     Dynamic section must have BIND_NOW flag\n     '''\n+    elf = pixie.load(executable)\n     have_gnu_relro = False\n-    for (typ, flags) in get_ELF_program_headers(executable):\n-        # Note: not checking flags == 'R': here as linkers set the permission differently\n-        # This does not affect security: the permission flags of the GNU_RELRO program header are ignored, the PT_LOAD header determines the effective permissions.\n+    for ph in elf.program_headers:\n+        # Note: not checking p_flags == PF_R: here as linkers set the permission differently\n+        # This does not affect security: the permission flags of the GNU_RELRO program\n+        # header are ignored, the PT_LOAD header determines the effective permissions.\n         # However, the dynamic linker need to write to this area so these are RW.\n         # Glibc itself takes care of mprotecting this area R after relocations are finished.\n         # See also https://marc.info/?l=binutils&m=1498883354122353\n-        if typ == 'GNU_RELRO':\n+        if ph.p_type == pixie.PT_GNU_RELRO:\n             have_gnu_relro = True\n \n     have_bindnow = False\n-    p = subprocess.Popen([READELF_CMD, '-d', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n-    for line in stdout.splitlines():\n-        tokens = line.split()\n-        if len(tokens)>1 and tokens[1] == '(BIND_NOW)' or (len(tokens)>2 and tokens[1] == '(FLAGS)' and 'BIND_NOW' in tokens[2:]):\n+    for flags in elf.query_dyn_tags(pixie.DT_FLAGS):\n+        assert isinstance(flags, int)\n+        if flags & pixie.DF_BIND_NOW:\n             have_bindnow = True\n+\n     return have_gnu_relro and have_bindnow\n \n-def check_ELF_Canary(executable):\n+def check_ELF_Canary(executable) -> bool:\n     '''\n     Check for use of stack canary\n     '''\n-    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    elf = pixie.load(executable)\n     ok = False\n-    for line in stdout.splitlines():\n-        if '__stack_chk_fail' in line:\n+    for symbol in elf.dyn_symbols:\n+        if symbol.name == b'__stack_chk_fail':\n             ok = True\n     return ok\n \n-def get_PE_dll_characteristics(executable):\n+def check_ELF_separate_code(executable):\n     '''\n-    Get PE DllCharacteristics bits.\n-    Returns a tuple (arch,bits) where arch is 'i386:x86-64' or 'i386'\n-    and bits is the DllCharacteristics value.\n+    Check that sections are appropriately separated in virtual memory,\n+    based on their permissions. This checks for missing -Wl,-z,separate-code\n+    and potentially other problems.\n     '''\n-    p = subprocess.Popen([OBJDUMP_CMD, '-x',  executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n-    arch = ''\n+    elf = pixie.load(executable)\n+    R = pixie.PF_R\n+    W = pixie.PF_W\n+    E = pixie.PF_X\n+    EXPECTED_FLAGS = {\n+        # Read + execute\n+        b'.init': R | E,\n+        b'.plt': R | E,\n+        b'.plt.got': R | E,\n+        b'.plt.sec': R | E,\n+        b'.text': R | E,\n+        b'.fini': R | E,\n+        # Read-only data\n+        b'.interp': R,\n+        b'.note.gnu.property': R,\n+        b'.note.gnu.build-id': R,\n+        b'.note.ABI-tag': R,\n+        b'.gnu.hash': R,\n+        b'.dynsym': R,\n+        b'.dynstr': R,\n+        b'.gnu.version': R,\n+        b'.gnu.version_r': R,\n+        b'.rela.dyn': R,\n+        b'.rela.plt': R,\n+        b'.rodata': R,\n+        b'.eh_frame_hdr': R,\n+        b'.eh_frame': R,\n+        b'.qtmetadata': R,\n+        b'.gcc_except_table': R,\n+        b'.stapsdt.base': R,\n+        # Writable data\n+        b'.init_array': R | W,\n+        b'.fini_array': R | W,\n+        b'.dynamic': R | W,\n+        b'.got': R | W,\n+        b'.data': R | W,\n+        b'.bss': R | W,\n+    }\n+    if elf.hdr.e_machine == pixie.EM_PPC64:\n+        # .plt is RW on ppc64 even with separate-code\n+        EXPECTED_FLAGS[b'.plt'] = R | W\n+    # For all LOAD program headers get mapping to the list of sections,\n+    # and for each section, remember the flags of the associated program header.\n+    flags_per_section = {}\n+    for ph in elf.program_headers:\n+        if ph.p_type == pixie.PT_LOAD:\n+            for section in ph.sections:\n+                assert(section.name not in flags_per_section)\n+                flags_per_section[section.name] = ph.p_flags\n+    # Spot-check ELF LOAD program header flags per section\n+    # If these sections exist, check them against the expected R/W/E flags\n+    for (section, flags) in flags_per_section.items():\n+        if section in EXPECTED_FLAGS:\n+            if EXPECTED_FLAGS[section] != flags:\n+                return False\n+    return True\n+\n+def get_PE_dll_characteristics(executable) -> int:\n+    '''Get PE DllCharacteristics bits'''\n+    stdout = run_command([OBJDUMP_CMD, '-x',  executable])\n+\n     bits = 0\n     for line in stdout.splitlines():\n         tokens = line.split()\n-        if len(tokens)>=2 and tokens[0] == 'architecture:':\n-            arch = tokens[1].rstrip(',')\n         if len(tokens)>=2 and tokens[0] == 'DllCharacteristics':\n             bits = int(tokens[1],16)\n-    return (arch,bits)\n+    return bits\n \n IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA = 0x0020\n IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE    = 0x0040\n IMAGE_DLL_CHARACTERISTICS_NX_COMPAT       = 0x0100\n \n-def check_PE_DYNAMIC_BASE(executable):\n+def check_PE_DYNAMIC_BASE(executable) -> bool:\n     '''PIE: DllCharacteristics bit 0x40 signifies dynamicbase (ASLR)'''\n-    (arch,bits) = get_PE_dll_characteristics(executable)\n-    reqbits = IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE\n-    return (bits & reqbits) == reqbits\n+    bits = get_PE_dll_characteristics(executable)\n+    return (bits & IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE) == IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE\n \n-# On 64 bit, must support high-entropy 64-bit address space layout randomization in addition to DYNAMIC_BASE\n-# to have secure ASLR.\n-def check_PE_HIGH_ENTROPY_VA(executable):\n+# Must support high-entropy 64-bit address space layout randomization\n+# in addition to DYNAMIC_BASE to have secure ASLR.\n+def check_PE_HIGH_ENTROPY_VA(executable) -> bool:\n     '''PIE: DllCharacteristics bit 0x20 signifies high-entropy ASLR'''\n-    (arch,bits) = get_PE_dll_characteristics(executable)\n-    if arch == 'i386:x86-64':\n-        reqbits = IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA\n-    else: # Unnecessary on 32-bit\n-        assert(arch == 'i386')\n-        reqbits = 0\n-    return (bits & reqbits) == reqbits\n+    bits = get_PE_dll_characteristics(executable)\n+    return (bits & IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA) == IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA\n \n def check_PE_RELOC_SECTION(executable) -> bool:\n     '''Check for a reloc section. This is required for functional ASLR.'''\n-    p = subprocess.Popen([OBJDUMP_CMD, '-h',  executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([OBJDUMP_CMD, '-h',  executable])\n+\n     for line in stdout.splitlines():\n         if '.reloc' in line:\n             return True\n     return False\n \n-def check_PE_NX(executable):\n+def check_PE_NX(executable) -> bool:\n     '''NX: DllCharacteristics bit 0x100 signifies nxcompat (DEP)'''\n-    (arch,bits) = get_PE_dll_characteristics(executable)\n+    bits = get_PE_dll_characteristics(executable)\n     return (bits & IMAGE_DLL_CHARACTERISTICS_NX_COMPAT) == IMAGE_DLL_CHARACTERISTICS_NX_COMPAT\n \n-def get_MACHO_executable_flags(executable):\n-    p = subprocess.Popen([OTOOL_CMD, '-vh', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+def get_MACHO_executable_flags(executable) -> List[str]:\n+    stdout = run_command([OTOOL_CMD, '-vh', executable])\n \n-    flags = []\n+    flags: List[str] = []\n     for line in stdout.splitlines():\n         tokens = line.split()\n         # filter first two header lines\n@@ -222,10 +229,7 @@ def check_MACHO_LAZY_BINDINGS(executable) -> bool:\n     Check for no lazy bindings.\n     We don't use or check for MH_BINDATLOAD. See #18295.\n     '''\n-    p = subprocess.Popen([OTOOL_CMD, '-l', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([OTOOL_CMD, '-l', executable])\n \n     for line in stdout.splitlines():\n         tokens = line.split()\n@@ -238,10 +242,8 @@ def check_MACHO_Canary(executable) -> bool:\n     '''\n     Check for use of stack canary\n     '''\n-    p = subprocess.Popen([OTOOL_CMD, '-Iv', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([OTOOL_CMD, '-Iv', executable])\n+\n     ok = False\n     for line in stdout.splitlines():\n         if '___stack_chk_fail' in line:\n@@ -253,7 +255,8 @@ def check_MACHO_Canary(executable) -> bool:\n     ('PIE', check_ELF_PIE),\n     ('NX', check_ELF_NX),\n     ('RELRO', check_ELF_RELRO),\n-    ('Canary', check_ELF_Canary)\n+    ('Canary', check_ELF_Canary),\n+    ('separate_code', check_ELF_separate_code),\n ],\n 'PE': [\n     ('DYNAMIC_BASE', check_PE_DYNAMIC_BASE),\n@@ -270,7 +273,7 @@ def check_MACHO_Canary(executable) -> bool:\n ]\n }\n \n-def identify_executable(executable):\n+def identify_executable(executable) -> Optional[str]:\n     with open(filename, 'rb') as f:\n         magic = f.read(4)\n     if magic.startswith(b'MZ'):\n@@ -292,18 +295,12 @@ def identify_executable(executable):\n                 continue\n \n             failed = []\n-            warning = []\n             for (name, func) in CHECKS[etype]:\n                 if not func(filename):\n-                    if name in NONFATAL:\n-                        warning.append(name)\n-                    else:\n-                        failed.append(name)\n+                    failed.append(name)\n             if failed:\n                 print('%s: failed %s' % (filename, ' '.join(failed)))\n                 retval = 1\n-            if warning:\n-                print('%s: warning %s' % (filename, ' '.join(warning)))\n         except IOError:\n             print('%s: cannot open' % filename)\n             retval = 1"
      },
      {
        "sha": "b30ed625215ffac89661b97e01a5cd91cf216076",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 37,
        "deletions": 61,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -11,10 +11,11 @@\n     find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n '''\n import subprocess\n-import re\n import sys\n import os\n-from typing import List, Optional, Tuple\n+from typing import List, Optional\n+\n+import pixie\n \n # Debian 8 (Jessie) EOL: 2020. https://wiki.debian.org/DebianReleases#Production_Releases\n #\n@@ -50,7 +51,6 @@\n '_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr',\n 'environ', '_environ', '__environ',\n }\n-READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n@@ -68,6 +68,8 @@\n 'ld-linux.so.2', # 32-bit dynamic linker\n 'ld-linux-aarch64.so.1', # 64-bit ARM dynamic linker\n 'ld-linux-armhf.so.3', # 32-bit ARM dynamic linker\n+'ld64.so.1', # POWER64 ABIv1 dynamic linker\n+'ld64.so.2', # POWER64 ABIv2 dynamic linker\n 'ld-linux-riscv64-lp64d.so.1', # 64-bit RISC-V dynamic linker\n # bitcoin-qt only\n 'libxcb.so.1', # part of X11\n@@ -76,11 +78,12 @@\n 'libdl.so.2' # programming interface to dynamic linker\n }\n ARCH_MIN_GLIBC_VER = {\n-'80386':  (2,1),\n-'X86-64': (2,2,5),\n-'ARM':    (2,4),\n-'AArch64':(2,17),\n-'RISC-V': (2,27)\n+pixie.EM_386:    (2,1),\n+pixie.EM_X86_64: (2,2,5),\n+pixie.EM_ARM:    (2,4),\n+pixie.EM_AARCH64:(2,17),\n+pixie.EM_PPC64:  (2,17),\n+pixie.EM_RISCV:  (2,27)\n }\n \n MACHO_ALLOWED_LIBRARIES = {\n@@ -140,29 +143,6 @@ def close(self):\n         self.proc.stdout.close()\n         self.proc.wait()\n \n-def read_symbols(executable, imports=True) -> List[Tuple[str, str, str]]:\n-    '''\n-    Parse an ELF executable and return a list of (symbol,version, arch) tuples\n-    for dynamic, imported symbols.\n-    '''\n-    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', '-h', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Could not read symbols for {}: {}'.format(executable, stderr.strip()))\n-    syms = []\n-    for line in stdout.splitlines():\n-        line = line.split()\n-        if 'Machine:' in line:\n-            arch = line[-1]\n-        if len(line)>7 and re.match('[0-9]+:$', line[0]):\n-            (sym, _, version) = line[7].partition('@')\n-            is_import = line[6] == 'UND'\n-            if version.startswith('@'):\n-                version = version[1:]\n-            if is_import == imports:\n-                syms.append((sym, version, arch))\n-    return syms\n-\n def check_version(max_versions, version, arch) -> bool:\n     if '_' in version:\n         (lib, _, ver) = version.rpartition('_')\n@@ -174,46 +154,42 @@ def check_version(max_versions, version, arch) -> bool:\n         return False\n     return ver <= max_versions[lib] or lib == 'GLIBC' and ver <= ARCH_MIN_GLIBC_VER[arch]\n \n-def elf_read_libraries(filename) -> List[str]:\n-    p = subprocess.Popen([READELF_CMD, '-d', '-W', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n-    libraries = []\n-    for line in stdout.splitlines():\n-        tokens = line.split()\n-        if len(tokens)>2 and tokens[1] == '(NEEDED)':\n-            match = re.match(r'^Shared library: \\[(.*)\\]$', ' '.join(tokens[2:]))\n-            if match:\n-                libraries.append(match.group(1))\n-            else:\n-                raise ValueError('Unparseable (NEEDED) specification')\n-    return libraries\n-\n def check_imported_symbols(filename) -> bool:\n+    elf = pixie.load(filename)\n     cppfilt = CPPFilt()\n-    ok = True\n-    for sym, version, arch in read_symbols(filename, True):\n-        if version and not check_version(MAX_VERSIONS, version, arch):\n+    ok: bool = True\n+\n+    for symbol in elf.dyn_symbols:\n+        if not symbol.is_import:\n+            continue\n+        sym = symbol.name.decode()\n+        version = symbol.version.decode() if symbol.version is not None else None\n+        if version and not check_version(MAX_VERSIONS, version, elf.hdr.e_machine):\n             print('{}: symbol {} from unsupported version {}'.format(filename, cppfilt(sym), version))\n             ok = False\n     return ok\n \n def check_exported_symbols(filename) -> bool:\n+    elf = pixie.load(filename)\n     cppfilt = CPPFilt()\n-    ok = True\n-    for sym,version,arch in read_symbols(filename, False):\n-        if arch == 'RISC-V' or sym in IGNORE_EXPORTS:\n+    ok: bool = True\n+    for symbol in elf.dyn_symbols:\n+        if not symbol.is_export:\n+            continue\n+        sym = symbol.name.decode()\n+        if elf.hdr.e_machine == pixie.EM_RISCV or sym in IGNORE_EXPORTS:\n             continue\n         print('{}: export of symbol {} not allowed'.format(filename, cppfilt(sym)))\n         ok = False\n     return ok\n \n def check_ELF_libraries(filename) -> bool:\n-    ok = True\n-    for library_name in elf_read_libraries(filename):\n-        if library_name not in ELF_ALLOWED_LIBRARIES:\n-            print('{}: NEEDED library {} is not allowed'.format(filename, library_name))\n+    ok: bool = True\n+    elf = pixie.load(filename)\n+    for library_name in elf.query_dyn_tags(pixie.DT_NEEDED):\n+        assert(isinstance(library_name, bytes))\n+        if library_name.decode() not in ELF_ALLOWED_LIBRARIES:\n+            print('{}: NEEDED library {} is not allowed'.format(filename, library_name.decode()))\n             ok = False\n     return ok\n \n@@ -231,7 +207,7 @@ def macho_read_libraries(filename) -> List[str]:\n     return libraries\n \n def check_MACHO_libraries(filename) -> bool:\n-    ok = True\n+    ok: bool = True\n     for dylib in macho_read_libraries(filename):\n         if dylib not in MACHO_ALLOWED_LIBRARIES:\n             print('{} is not in ALLOWED_LIBRARIES!'.format(dylib))\n@@ -251,7 +227,7 @@ def pe_read_libraries(filename) -> List[str]:\n     return libraries\n \n def check_PE_libraries(filename) -> bool:\n-    ok = True\n+    ok: bool = True\n     for dylib in pe_read_libraries(filename):\n         if dylib not in PE_ALLOWED_LIBRARIES:\n             print('{} is not in ALLOWED_LIBRARIES!'.format(dylib))\n@@ -284,7 +260,7 @@ def identify_executable(executable) -> Optional[str]:\n     return None\n \n if __name__ == '__main__':\n-    retval = 0\n+    retval: int = 0\n     for filename in sys.argv[1:]:\n         try:\n             etype = identify_executable(filename)\n@@ -293,7 +269,7 @@ def identify_executable(executable) -> Optional[str]:\n                 retval = 1\n                 continue\n \n-            failed = []\n+            failed: List[str] = []\n             for (name, func) in CHECKS[etype]:\n                 if not func(filename):\n                     failed.append(name)"
      },
      {
        "sha": "ec2d8866534214c86ebbf112232984ea55e85b0b",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -20,10 +20,9 @@ def write_testcode(filename):\n     ''')\n \n def call_security_check(cc, source, executable, options):\n-    subprocess.check_call([cc,source,'-o',executable] + options)\n-    p = subprocess.Popen(['./security-check.py',executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    return (p.returncode, stdout.rstrip())\n+    subprocess.run([cc,source,'-o',executable] + options, check=True)\n+    p = subprocess.run(['./contrib/devtools/security-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n+    return (p.returncode, p.stdout.rstrip())\n \n class TestSecurityChecks(unittest.TestCase):\n     def test_ELF(self):\n@@ -32,15 +31,17 @@ def test_ELF(self):\n         cc = 'gcc'\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n                 (1, executable+': failed PIE NX RELRO Canary'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n                 (1, executable+': failed PIE RELRO Canary'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-no-pie','-fno-PIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n                 (1, executable+': failed PIE RELRO'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-pie','-fPIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-pie','-fPIE', '-Wl,-z,separate-code']),\n                 (1, executable+': failed RELRO'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,noseparate-code']),\n+                (1, executable+': failed separate_code'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,separate-code']),\n                 (0, ''))\n \n     def test_PE(self):"
      },
      {
        "sha": "18ed7d61e066d39c5a683ff0aa7abebf5b50b086",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "added",
        "additions": 162,
        "deletions": 0,
        "changes": 162,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,162 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Test script for symbol-check.py\n+'''\n+import subprocess\n+import unittest\n+\n+def call_symbol_check(cc, source, executable, options):\n+    subprocess.run([cc,source,'-o',executable] + options, check=True)\n+    p = subprocess.run(['./contrib/devtools/symbol-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n+    return (p.returncode, p.stdout.rstrip())\n+\n+def get_machine(cc):\n+    p = subprocess.run([cc,'-dumpmachine'], stdout=subprocess.PIPE, universal_newlines=True)\n+    return p.stdout.rstrip()\n+\n+class TestSymbolChecks(unittest.TestCase):\n+    def test_ELF(self):\n+        source = 'test1.c'\n+        executable = 'test1'\n+        cc = 'gcc'\n+\n+        # there's no way to do this test for RISC-V at the moment; bionic's libc is 2.27\n+        # and we allow all symbols from 2.27.\n+        if 'riscv' in get_machine(cc):\n+            self.skipTest(\"test not available for RISC-V\")\n+\n+        # memfd_create was introduced in GLIBC 2.27, so is newer than the upper limit of\n+        # all but RISC-V but still available on bionic\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #define _GNU_SOURCE\n+                #include <sys/mman.h>\n+\n+                int memfd_create(const char *name, unsigned int flags);\n+\n+                int main()\n+                {\n+                    memfd_create(\"test\", 0);\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, []),\n+                (1, executable + ': symbol memfd_create from unsupported version GLIBC_2.27\\n' +\n+                    executable + ': failed IMPORTED_SYMBOLS'))\n+\n+        # -lutil is part of the libc6 package so a safe bet that it's installed\n+        # it's also out of context enough that it's unlikely to ever become a real dependency\n+        source = 'test2.c'\n+        executable = 'test2'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <utmp.h>\n+\n+                int main()\n+                {\n+                    login(0);\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lutil']),\n+                (1, executable + ': NEEDED library libutil.so.1 is not allowed\\n' +\n+                    executable + ': failed LIBRARY_DEPENDENCIES'))\n+\n+        # finally, check a conforming file that simply uses a math function\n+        source = 'test3.c'\n+        executable = 'test3'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <math.h>\n+\n+                int main()\n+                {\n+                    return (int)pow(2.0, 4.0);\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lm']),\n+                (0, ''))\n+\n+    def test_MACHO(self):\n+        source = 'test1.c'\n+        executable = 'test1'\n+        cc = 'clang'\n+\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <expat.h>\n+\n+                int main()\n+                {\n+                    XML_ExpatVersion();\n+                    return 0;\n+                }\n+\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lexpat']),\n+            (1, 'libexpat.1.dylib is not in ALLOWED_LIBRARIES!\\n' +\n+                executable + ': failed DYNAMIC_LIBRARIES'))\n+\n+        source = 'test2.c'\n+        executable = 'test2'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <CoreGraphics/CoreGraphics.h>\n+\n+                int main()\n+                {\n+                    CGMainDisplayID();\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-framework', 'CoreGraphics']),\n+                (0, ''))\n+\n+    def test_PE(self):\n+        source = 'test1.c'\n+        executable = 'test1.exe'\n+        cc = 'x86_64-w64-mingw32-gcc'\n+\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <pdh.h>\n+\n+                int main()\n+                {\n+                    PdhConnectMachineA(NULL);\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lpdh']),\n+            (1, 'pdh.dll is not in ALLOWED_LIBRARIES!\\n' +\n+                 executable + ': failed DYNAMIC_LIBRARIES'))\n+\n+        source = 'test2.c'\n+        executable = 'test2.exe'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <windows.h>\n+\n+                int main()\n+                {\n+                    CoFreeUnusedLibrariesEx(0,0);\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lole32']),\n+                (0, ''))\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n+"
      },
      {
        "sha": "8501c72f04a552bf7cb699890e92c874be43de05",
        "filename": "contrib/devtools/test_deterministic_coverage.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/test_deterministic_coverage.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/devtools/test_deterministic_coverage.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test_deterministic_coverage.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -16,7 +16,6 @@ GCOV_EXECUTABLE=\"gcov\"\n NON_DETERMINISTIC_TESTS=(\n     \"blockfilter_index_tests/blockfilter_index_initial_sync\"  # src/checkqueue.h: In CCheckQueue::Loop(): while (queue.empty()) { ... }\n     \"coinselector_tests/knapsack_solver_test\"                 # coinselector_tests.cpp: if (equal_sets(setCoinsRet, setCoinsRet2))\n-    \"denialofservice_tests/DoS_mapOrphans\"                    # denialofservice_tests.cpp: it = mapOrphanTransactions.lower_bound(InsecureRand256());\n     \"fs_tests/fsbridge_fstream\"                               # deterministic test failure?\n     \"miner_tests/CreateNewBlock_validity\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n     \"scheduler_tests/manythreads\"                             # scheduler.cpp: CScheduler::serviceQueue()"
      },
      {
        "sha": "db780ad53bd39d894a7851974846016a4e61bca4",
        "filename": "contrib/filter-lcov.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/filter-lcov.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/filter-lcov.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/filter-lcov.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "06b15574a77ca52283bc1213921b247baed70a9b",
        "filename": "contrib/gitian-build.py",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-build.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-build.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -13,15 +13,16 @@ def setup():\n     programs = ['ruby', 'git', 'make', 'wget', 'curl']\n     if args.kvm:\n         programs += ['apt-cacher-ng', 'python-vm-builder', 'qemu-kvm', 'qemu-utils']\n-    elif args.docker and not os.path.isfile('/lib/systemd/system/docker.service'):\n-        dockers = ['docker.io', 'docker-ce']\n-        for i in dockers:\n-            return_code = subprocess.call(['sudo', 'apt-get', 'install', '-qq', i])\n-            if return_code == 0:\n-                break\n-        if return_code != 0:\n-            print('Cannot find any way to install Docker.', file=sys.stderr)\n-            sys.exit(1)\n+    elif args.docker:\n+        if not os.path.isfile('/lib/systemd/system/docker.service'):\n+            dockers = ['docker.io', 'docker-ce']\n+            for i in dockers:\n+                return_code = subprocess.call(['sudo', 'apt-get', 'install', '-qq', i])\n+                if return_code == 0:\n+                    break\n+            if return_code != 0:\n+                print('Cannot find any way to install Docker.', file=sys.stderr)\n+                sys.exit(1)\n     else:\n         programs += ['apt-cacher-ng', 'lxc', 'debootstrap']\n     subprocess.check_call(['sudo', 'apt-get', 'install', '-qq'] + programs)\n@@ -209,7 +210,7 @@ def main():\n     args.macos = 'm' in args.os\n \n     # Disable for MacOS if no SDK found\n-    if args.macos and not os.path.isfile('gitian-builder/inputs/MacOSX10.14.sdk.tar.gz'):\n+    if args.macos and not os.path.isfile('gitian-builder/inputs/Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz'):\n         print('Cannot build for MacOS, SDK does not exist. Will build for other OSes')\n         args.macos = False\n "
      },
      {
        "sha": "a2ca768aaa70b285d1e7b8654c1094533e6c1190",
        "filename": "contrib/gitian-descriptors/assign_DISTNAME",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-descriptors/assign_DISTNAME",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-descriptors/assign_DISTNAME",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/assign_DISTNAME?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,12 @@\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# A helper script to be sourced into the gitian descriptors\n+\n+if RECENT_TAG=\"$(git describe --exact-match HEAD)\"; then\n+    VERSION=\"${RECENT_TAG#v}\"\n+else\n+    VERSION=\"$(git rev-parse --short=12 HEAD)\"\n+fi\n+DISTNAME=\"bitcoin-${VERSION}\""
      },
      {
        "sha": "a0ff87b531f02f10b3398701be0d201eb14794d0",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 45,
        "deletions": 63,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,37 +1,41 @@\n ---\n-name: \"bitcoin-core-linux-0.21\"\n+name: \"bitcoin-core-linux-22\"\n enable_cache: true\n distro: \"ubuntu\"\n suites:\n - \"bionic\"\n architectures:\n - \"amd64\"\n packages:\n-- \"curl\"\n-- \"g++-aarch64-linux-gnu\"\n-- \"g++-8-aarch64-linux-gnu\"\n-- \"gcc-8-aarch64-linux-gnu\"\n-- \"binutils-aarch64-linux-gnu\"\n-- \"g++-arm-linux-gnueabihf\"\n-- \"g++-8-arm-linux-gnueabihf\"\n-- \"gcc-8-arm-linux-gnueabihf\"\n-- \"binutils-arm-linux-gnueabihf\"\n-- \"g++-riscv64-linux-gnu\"\n-- \"g++-8-riscv64-linux-gnu\"\n-- \"gcc-8-riscv64-linux-gnu\"\n-- \"binutils-riscv64-linux-gnu\"\n-- \"g++-8-multilib\"\n-- \"gcc-8-multilib\"\n-- \"binutils-gold\"\n-- \"git\"\n-- \"pkg-config\"\n+# Common dependencies.\n - \"autoconf\"\n-- \"libtool\"\n - \"automake\"\n-- \"faketime\"\n+- \"binutils\"\n - \"bsdmainutils\"\n - \"ca-certificates\"\n+- \"curl\"\n+- \"faketime\"\n+- \"git\"\n+- \"libtool\"\n+- \"patch\"\n+- \"pkg-config\"\n - \"python3\"\n+# Cross compilation HOSTS:\n+#  - arm-linux-gnueabihf\n+- \"binutils-arm-linux-gnueabihf\"\n+- \"g++-8-arm-linux-gnueabihf\"\n+#  - aarch64-linux-gnu\n+- \"binutils-aarch64-linux-gnu\"\n+- \"g++-8-aarch64-linux-gnu\"\n+#  - powerpc64-linux-gnu\n+- \"binutils-powerpc64-linux-gnu\"\n+- \"g++-8-powerpc64-linux-gnu\"\n+#  - powerpc64le-linux-gnu\n+- \"binutils-powerpc64le-linux-gnu\"\n+- \"g++-8-powerpc64le-linux-gnu\"\n+#  - riscv64-linux-gnu\n+- \"binutils-riscv64-linux-gnu\"\n+- \"g++-8-riscv64-linux-gnu\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n@@ -40,7 +44,7 @@ script: |\n   set -e -o pipefail\n \n   WRAP_DIR=$HOME/wrapped\n-  HOSTS=\"x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu\"\n+  HOSTS=\"x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu riscv64-linux-gnu\"\n   CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests\"\n   FAKETIME_HOST_PROGS=\"gcc g++\"\n   FAKETIME_PROGS=\"date ar ranlib nm\"\n@@ -66,7 +70,7 @@ script: |\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n-    echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n+    echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n   }\n@@ -80,7 +84,13 @@ script: |\n             echo \"REAL=\\`which -a ${i}-${prog}-8 | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n             echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n             echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-            echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+            if [ \"${i:0:11}\" = \"powerpc64le\" ]; then\n+                echo \"exec \\\"\\$REAL\\\" -mcpu=power8 -mtune=power9 \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n+            elif [ \"${i:0:9}\" = \"powerpc64\" ]; then\n+                echo \"exec \\\"\\$REAL\\\" -mcpu=970 -mtune=power9 \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n+            else\n+                echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n+            fi\n             chmod +x ${WRAP_DIR}/${i}-${prog}\n         fi\n     done\n@@ -93,45 +103,11 @@ script: |\n   create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n-  EXTRA_INCLUDES_BASE=$WRAP_DIR/extra_includes\n-  mkdir -p $EXTRA_INCLUDES_BASE\n-\n-  # x86 needs /usr/include/i386-linux-gnu/asm pointed to /usr/include/x86_64-linux-gnu/asm,\n-  # but we can't write there. Instead, create a link here and force it to be included in the\n-  # search paths by wrapping gcc/g++.\n-\n-  mkdir -p $EXTRA_INCLUDES_BASE/i686-pc-linux-gnu\n-  rm -f $WRAP_DIR/extra_includes/i686-pc-linux-gnu/asm\n-  ln -s /usr/include/x86_64-linux-gnu/asm $EXTRA_INCLUDES_BASE/i686-pc-linux-gnu/asm\n-\n-  for prog in gcc g++; do\n-  rm -f ${WRAP_DIR}/${prog}\n-  cat << EOF > ${WRAP_DIR}/${prog}\n-  #!/usr/bin/env bash\n-  REAL=\"$(which -a ${prog}-8 | grep -v ${WRAP_DIR}/${prog} | head -1)\"\n-  for var in \"\\$@\"\n-  do\n-    if [ \"\\$var\" = \"-m32\" ]; then\n-      export C_INCLUDE_PATH=\"$EXTRA_INCLUDES_BASE/i686-pc-linux-gnu\"\n-      export CPLUS_INCLUDE_PATH=\"$EXTRA_INCLUDES_BASE/i686-pc-linux-gnu\"\n-      break\n-    fi\n-  done\n-  \\$REAL \\$@\n-  EOF\n-  chmod +x ${WRAP_DIR}/${prog}\n-  done\n-\n   cd bitcoin\n   BASEPREFIX=\"${PWD}/depends\"\n   # Build dependencies for each host\n   for i in $HOSTS; do\n-    EXTRA_INCLUDES=\"$EXTRA_INCLUDES_BASE/$i\"\n-    if [ -d \"$EXTRA_INCLUDES\" ]; then\n-      export HOST_ID_SALT=\"$EXTRA_INCLUDES\"\n-    fi\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n-    unset HOST_ID_SALT\n   done\n \n   # Faketime for binaries\n@@ -140,15 +116,21 @@ script: |\n   create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n-  # Create the git archive, and define DISTNAME and GIT_ARCHIVE variables.\n-  # shellcheck source=contrib/gitian-descriptors/make_git_archive\n-  source contrib/gitian-descriptors/make_git_archive\n+  # Define DISTNAME variable.\n+  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n+  source contrib/gitian-descriptors/assign_DISTNAME\n+\n+  GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n+\n+  # Create the source tarball\n+  mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n+  git archive --prefix=\"${DISTNAME}/\" --output=\"$GIT_ARCHIVE\" HEAD\n \n   ORIGPATH=\"$PATH\"\n   # Extract the git archive into a dir for each host and build\n   for i in ${HOSTS}; do\n     export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n-    if [ \"${i}\" = \"riscv64-linux-gnu\" ]; then\n+    if [ \"${i}\" = \"riscv64-linux-gnu\" ] || [ \"${i}\" = \"powerpc64-linux-gnu\" ] || [ \"${i}\" = \"powerpc64le-linux-gnu\" ]; then\n       # Workaround for https://bugs.launchpad.net/ubuntu/+source/gcc-8-cross-ports/+bug/1853740\n       # TODO: remove this when no longer needed\n       HOST_LDFLAGS=\"${HOST_LDFLAGS_BASE} -Wl,-z,noexecstack\"\n@@ -159,7 +141,7 @@ script: |\n     cd distsrc-${i}\n     INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p ${INSTALLPATH}\n-    tar -xf $GIT_ARCHIVE\n+    tar --strip-components=1 -xf \"${GIT_ARCHIVE}\"\n \n     ./autogen.sh\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\" LDFLAGS=\"${HOST_LDFLAGS}\""
      },
      {
        "sha": "6fcb21f7299cb97044e3cc8d8186191cd5840745",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 19,
        "deletions": 6,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -7,9 +7,14 @@ architectures:\n - \"amd64\"\n packages:\n - \"faketime\"\n+- \"xorriso\"\n+- \"python3-pip\"\n remotes:\n - \"url\": \"https://github.com/bitcoin-core/bitcoin-detached-sigs.git\"\n   \"dir\": \"signature\"\n+- \"url\": \"https://github.com/achow101/signapple.git\"\n+  \"dir\": \"signapple\"\n+  \"commit\": \"c7e73aa27a7615ac9506559173f787e2906b25eb\"\n files:\n - \"bitcoin-osx-unsigned.tar.gz\"\n script: |\n@@ -18,23 +23,31 @@ script: |\n   WRAP_DIR=$HOME/wrapped\n   mkdir -p ${WRAP_DIR}\n   export PATH=\"$PWD\":$PATH\n-  FAKETIME_PROGS=\"dmg genisoimage\"\n+  FAKETIME_PROGS=\"dmg xorrisofs\"\n \n   # Create global faketime wrappers\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n-    echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n+    echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n \n-  UNSIGNED=bitcoin-osx-unsigned.tar.gz\n+  # Install signapple\n+  cd signapple\n+  python3 -m pip install -U pip setuptools\n+  python3 -m pip install .\n+  export PATH=\"$HOME/.local/bin\":$PATH\n+  cd ..\n+\n+  UNSIGNED_TARBALL=bitcoin-osx-unsigned.tar.gz\n+  UNSIGNED_APP=dist/Bitcoin-Qt.app\n   SIGNED=bitcoin-osx-signed.dmg\n \n-  tar -xf ${UNSIGNED}\n+  tar -xf ${UNSIGNED_TARBALL}\n   OSX_VOLNAME=\"$(cat osx_volname)\"\n-  ./detached-sig-apply.sh ${UNSIGNED} signature/osx\n-  ${WRAP_DIR}/genisoimage -no-cache-inodes -D -l -probe -V \"${OSX_VOLNAME}\" -no-pad -r -dir-mode 0755 -apple -o uncompressed.dmg signed-app\n+  ./detached-sig-apply.sh ${UNSIGNED_APP} signature/osx/dist\n+  ${WRAP_DIR}/xorrisofs -D -l -V \"${OSX_VOLNAME}\" -no-pad -r -dir-mode 0755 -o uncompressed.dmg signed-app\n   ${WRAP_DIR}/dmg dmg uncompressed.dmg ${OUTDIR}/${SIGNED}"
      },
      {
        "sha": "2a47e90e6e6387ccefd4b6822adfed748ef4c5dc",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 21,
        "deletions": 18,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-core-osx-0.21\"\n+name: \"bitcoin-core-osx-22\"\n enable_cache: true\n distro: \"ubuntu\"\n suites:\n@@ -28,19 +28,20 @@ packages:\n - \"python3-dev\"\n - \"python3-setuptools\"\n - \"fonts-tuffy\"\n+- \"xorriso\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n-- \"MacOSX10.14.sdk.tar.gz\"\n+- \"Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz\"\n script: |\n   set -e -o pipefail\n \n   WRAP_DIR=$HOME/wrapped\n-  HOSTS=\"x86_64-apple-darwin16\"\n-  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests GENISOIMAGE=$WRAP_DIR/genisoimage\"\n+  HOSTS=\"x86_64-apple-darwin18\"\n+  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests XORRISOFS=${WRAP_DIR}/xorrisofs DMG=${WRAP_DIR}/dmg\"\n   FAKETIME_HOST_PROGS=\"\"\n-  FAKETIME_PROGS=\"ar ranlib date dmg genisoimage\"\n+  FAKETIME_PROGS=\"ar ranlib date dmg xorrisofs\"\n \n   export QT_RCC_TEST=1\n   export QT_RCC_SOURCE_DATE_OVERRIDE=1\n@@ -62,7 +63,7 @@ script: |\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n-    echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n+    echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n   }\n@@ -74,7 +75,7 @@ script: |\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+        echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n@@ -90,7 +91,7 @@ script: |\n   BASEPREFIX=\"${PWD}/depends\"\n \n   mkdir -p ${BASEPREFIX}/SDKs\n-  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.14.sdk.tar.gz\n+  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz\n \n   # Build dependencies for each host\n   for i in $HOSTS; do\n@@ -103,9 +104,15 @@ script: |\n   create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n-  # Create the git archive, and define DISTNAME and GIT_ARCHIVE variables.\n-  # shellcheck source=contrib/gitian-descriptors/make_git_archive\n-  source contrib/gitian-descriptors/make_git_archive\n+  # Define DISTNAME variable.\n+  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n+  source contrib/gitian-descriptors/assign_DISTNAME\n+\n+  GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n+\n+  # Create the source tarball\n+  mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n+  git archive --prefix=\"${DISTNAME}/\" --output=\"$GIT_ARCHIVE\" HEAD\n \n   ORIGPATH=\"$PATH\"\n   # Extract the git archive into a dir for each host and build\n@@ -115,7 +122,7 @@ script: |\n     cd distsrc-${i}\n     INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p ${INSTALLPATH}\n-    tar -xf $GIT_ARCHIVE\n+    tar --strip-components=1 -xf \"${GIT_ARCHIVE}\"\n \n     ./autogen.sh\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n@@ -126,21 +133,17 @@ script: |\n \n     make osx_volname\n     make deploydir\n-    OSX_VOLNAME=\"$(cat osx_volname)\"\n     mkdir -p unsigned-app-${i}\n     cp osx_volname unsigned-app-${i}/\n     cp contrib/macdeploy/detached-sig-apply.sh unsigned-app-${i}\n     cp contrib/macdeploy/detached-sig-create.sh unsigned-app-${i}\n-    cp ${BASEPREFIX}/${i}/native/bin/dmg ${BASEPREFIX}/${i}/native/bin/genisoimage unsigned-app-${i}\n-    cp ${BASEPREFIX}/${i}/native/bin/${i}-codesign_allocate unsigned-app-${i}/codesign_allocate\n-    cp ${BASEPREFIX}/${i}/native/bin/${i}-pagestuff unsigned-app-${i}/pagestuff\n+    cp ${BASEPREFIX}/${i}/native/bin/dmg unsigned-app-${i}\n     mv dist unsigned-app-${i}\n     pushd unsigned-app-${i}\n     find . | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-osx-unsigned.tar.gz\n     popd\n \n-    make deploy\n-    ${WRAP_DIR}/dmg dmg \"${OSX_VOLNAME}.dmg\" ${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\n+    make deploy OSX_DMG=\"${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\"\n \n     cd installed\n     find . -name \"lib*.la\" -delete"
      },
      {
        "sha": "1edd8b2e818bde3a8b10d4ca787fc41208523253",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 15,
        "deletions": 10,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-core-win-0.21\"\n+name: \"bitcoin-core-win-22\"\n enable_cache: true\n distro: \"ubuntu\"\n suites:\n@@ -55,7 +55,7 @@ script: |\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n-    echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n+    echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n   }\n@@ -67,7 +67,7 @@ script: |\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+        echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n@@ -81,7 +81,7 @@ script: |\n         echo \"REAL=\\`which -a ${i}-${prog}-posix | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+        echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n@@ -108,9 +108,15 @@ script: |\n   create_per-host_compiler_wrapper \"${REFERENCE_DATETIME}\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n-  # Create the git archive, and define DISTNAME and GIT_ARCHIVE variables.\n-  # shellcheck source=contrib/gitian-descriptors/make_git_archive\n-  source contrib/gitian-descriptors/make_git_archive\n+  # Define DISTNAME variable.\n+  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n+  source contrib/gitian-descriptors/assign_DISTNAME\n+\n+  GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n+\n+  # Create the source tarball\n+  mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n+  git archive --prefix=\"${DISTNAME}/\" --output=\"$GIT_ARCHIVE\" HEAD\n \n   ORIGPATH=\"$PATH\"\n   # Extract the git archive into a dir for each host and build\n@@ -120,16 +126,15 @@ script: |\n     cd distsrc-${i}\n     INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p ${INSTALLPATH}\n-    tar -xf $GIT_ARCHIVE\n+    tar --strip-components=1 -xf \"${GIT_ARCHIVE}\"\n \n     ./autogen.sh\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\"\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security\n     make ${MAKEOPTS} -C src check-symbols\n-    make deploy\n+    make deploy BITCOIN_WIN_INSTALLER=\"${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe\"\n     make install DESTDIR=${INSTALLPATH}\n-    cp -f ./bitcoin-*-win64-setup-unsigned.exe ${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe\n     cd installed\n     mv ${DISTNAME}/bin/*.dll ${DISTNAME}/lib/\n     find . -name \"lib*.la\" -delete"
      },
      {
        "sha": "d922c94c60bf24efe5ffb72e1020cbb688e8a3eb",
        "filename": "contrib/gitian-descriptors/make_git_archive",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/gitian-descriptors/make_git_archive",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/gitian-descriptors/make_git_archive",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/make_git_archive?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,20 +0,0 @@\n-# Copyright (c) 2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n-# A helper script to be sourced into the gitian descriptors\n-\n-mkdir -p ${OUTDIR}/src\n-RECENT_TAG=$(git describe --abbrev=0 HEAD)\n-if [ $RECENT_TAG = $(git describe HEAD) ]; then\n-  if [[ $RECENT_TAG == v* ]]; then\n-    VERSION=${RECENT_TAG:1}\n-  else\n-    VERSION=$RECENT_TAG\n-  fi\n-else\n-  VERSION=$(git rev-parse --short HEAD)\n-fi\n-DISTNAME=bitcoin-${VERSION}\n-GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n-git archive --output=$GIT_ARCHIVE HEAD"
      },
      {
        "sha": "db28cd07a0b02828a0caa2a6041563631caa02e0",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "modified",
        "additions": 43,
        "deletions": 28,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,36 +1,51 @@\n 9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C Aaron Clauson (sipsorcery)\n-617C90010B3BD370B0AC7D424BB42E31C79111B8 Akira Takizawa\n-E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach\n-152812300785C96444D3334D17565732E08E5E41 Andrew Chow\n-912FD3228387123DC97E0E57D5566241A0295FA9 BtcDrak\n+617C90010B3BD370B0AC7D424BB42E31C79111B8 Akira Takizawa (akx20000)\n+E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach (aschildbach)\n+152812300785C96444D3334D17565732E08E5E41 Andrew Chow (achow101)\n+590B7292695AFFA5B672CBB2E13FC145CD3F4304 Antoine Poinsot (darosior)\n+0AD83877C1F0CD1EE9BD660AD7CC770B81FD22A8 Ben Carman (benthecarman)\n+912FD3228387123DC97E0E57D5566241A0295FA9 BtcDrak (btcdrak)\n C519EBCF3B926298946783EFF6430754120EC2F4 Christian Decker (cdecker)\n-F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur\n-C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields\n-BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random\n-6D3170C1DC2C6FD0AEEBCA6743811D1A26623924 Douglas Roark\n+18AE2F798E0D239755DA4FD24B79F986CBDF8736 Chun Kuan Le (ken2812221)\n+101598DC823C1B5F9A6624ABA5E0907A0380E6C3 CoinForensics (CoinForensics)\n+F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur (centaur)\n+C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields (cfields)\n+BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random (devrandom)\n+6D3170C1DC2C6FD0AEEBCA6743811D1A26623924 Douglas Roark (droark)\n+1C6621605EC50319C463D56C7F81D87985D61612 Emanuele Cisbani (cisba)\n 9A1689B60D1B3CCE9262307A2F40A9BF167FBA47 Erik Mossberg (erkmos)\n-D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece\n-01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen\n+D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece (fivepiece)\n+6F993B250557E7B016ADE5713BDCDA2D87A881D9 Fuzzbawls (Fuzzbawls)\n+01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen (gavinandresen)\n D1DBF2C4B96F2DEBF4C16654410108112E7EA81F Hennadii Stepanov (hebasto)\n-D3CC177286005BB8FF673294C5242A1AB3936517 jl2012\n-82921A4B88FD454B7EB8CE3C796C4109063D4EAF Jon Atack\n-32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli\n-4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon\n+A2FD494D0021AA9B4FA58F759102B7AE654A4A5A Ilyas Ridhuan (IlyasRidhuan)\n+D3F22A3A4C366C2DCB66D3722DA9C5A7FA81EA35 Jarol Rodriguez (jarolrod)\n+7480909378D544EA6B6DCEB7535B12980BB8A4D3 Jeffri H Frontz (jhfrontz)\n+D3CC177286005BB8FF673294C5242A1AB3936517 jl2012 (jl2012)\n+82921A4B88FD454B7EB8CE3C796C4109063D4EAF Jon Atack (jonatack)\n+32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli (jonasschnelli)\n+4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon (jtimon)\n C42AFF7C61B3E44A1454CD3557AF762DB3353322 Karl-Johan Alm (kallewoof)\n-E463A93F5F3117EEDE6C7316BD02942421F4889F Luke Dashjr\n-B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B Marco Falke\n+30DE693AE0DE9E37B3E7EB6BBFF0F67810C1EED1 Lisa Neigut (niftynei)\n+E463A93F5F3117EEDE6C7316BD02942421F4889F Luke Dashjr (luke-jr)\n+B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B Marco Falke (marco)\n 07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)\n-CA03882CB1FC067B5D3ACFE4D300116E1C875A3D MeshCollider\n-E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford\n-9692B91BBF0E8D34DFD33B1882C5C009628ECF0C Michagogo\n-77E72E69DA7EE0A148C06B21B34821D4944DE5F7 Nils Schneider\n-D62A803E27E7F43486035ADBBCD04D8E9CCCAC2A Paul Rabahy\n-37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04 Peter Todd\n-D762373D24904A3E42F33B08B9A408E71DAAC974 Pieter Wuille (Location: Leuven, Belgium)\n-133EAC179436F14A5CF1B794860FEB804E669320 Pieter Wuille\n+CA03882CB1FC067B5D3ACFE4D300116E1C875A3D MeshCollider (meshcollider)\n+E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford (fanquake)\n+AD5764F4ADCE1B99BDFD179E12335A271D4D62EC Michael Tidwell (miketwenty1)\n+9692B91BBF0E8D34DFD33B1882C5C009628ECF0C Michagogo (michagogo)\n+C57E4B42223FDE851D4F69DD28DF2724F241D8EE midnightmagic (midnightmagic)\n+F4FC70F07310028424EFC20A8E4256593F177720 Oliver Gugger (guggero, Oliver Gugger)\n+D62A803E27E7F43486035ADBBCD04D8E9CCCAC2A Paul Rabahy (prab)\n+37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04 Peter Todd (petertodd)\n+D762373D24904A3E42F33B08B9A408E71DAAC974 Pieter Wuille [Location: Leuven, Belgium] (sipa)\n+133EAC179436F14A5CF1B794860FEB804E669320 Pieter Wuille (sipa)\n+6A8F9C266528E25AEB1D7731C2371D91CB716EA7 Sebastian Falbesoner (theStack)\n A8FC55F3B04BA3146F3492E79303B33A305224CB Sebastian Kung (TheCharlatan)\n-ED9BDF7AD6A55E232E84524257FF9BDBCC301009 Sjors Provoost\n+ED9BDF7AD6A55E232E84524257FF9BDBCC301009 Sjors Provoost (sjors)\n+867345026B6763E8B07EE73AB6737117397F5C4F Stephan Oeste (Emzy)\n 9EDAFF80E080659604F4A76B2EBB056FD847F8A7 Stephan Oeste (Emzy)\n-AEC1884398647C47413C1C3FB1179EB7347DC10D Warren Togami\n-79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko\n-71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan\n+6DEEF79B050C4072509B743F8C275BC595448867 Tomas Kanocz (KanoczTomas)\n+AEC1884398647C47413C1C3FB1179EB7347DC10D Warren Togami (wtogami)\n+79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko (willyko)\n+71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan (laanwj)"
      },
      {
        "sha": "5870deee393d3cb717949592c282ea377cb6c64a",
        "filename": "contrib/guix/README.md",
        "status": "modified",
        "additions": 47,
        "deletions": 36,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/guix/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/guix/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/README.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -13,7 +13,6 @@ We achieve bootstrappability by using Guix as a functional package manager.\n \n Conservatively, a x86_64 machine with:\n \n-- 2 or more logical cores\n - 4GB of free disk space on the partition that /gnu/store will reside in\n - 24GB of free disk space on the partition that the Bitcoin Core git repository\n   resides in\n@@ -41,25 +40,27 @@ Otherwise, follow the [Guix installation guide][guix/bin-install].\n \n Guix allows us to achieve better binary security by using our CPU time to build\n everything from scratch. However, it doesn't sacrifice user choice in pursuit of\n-this: users can decide whether or not to bootstrap and to use substitutes.\n+this: users can decide whether or not to bootstrap and to use substitutes\n+(pre-built packages).\n \n After installation, you may want to consider [adding substitute\n-servers](#speeding-up-builds-with-substitute-servers) to speed up your build if\n-that fits your security model (say, if you're just testing that this works).\n-This is skippable if you're using the [Dockerfile][fanquake/guix-docker].\n+servers](#speeding-up-builds-with-substitute-servers) from which to download\n+pre-built packages to speed up your build if that fits your security model (say,\n+if you're just testing that this works). Substitute servers are set up by\n+default if you're using the [Dockerfile][fanquake/guix-docker].\n \n-If you prefer not to use any substitutes, make sure to set\n-`ADDITIONAL_GUIX_ENVIRONMENT_FLAGS` like the following snippet. The first build\n-will take a while, but the resulting packages will be cached for future builds.\n+If you prefer not to use any substitutes, make sure to supply `--no-substitutes`\n+like in the following snippet. The first build will take a while, but the\n+resulting packages will be cached for future builds.\n \n ```sh\n-export ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--no-substitutes'\n+export ADDITIONAL_GUIX_COMMON_FLAGS='--no-substitutes'\n ```\n \n Likewise, to perform a bootstrapped build (takes even longer):\n \n ```sh\n-export ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--bootstrap --no-substitutes'\n+export ADDITIONAL_GUIX_COMMON_FLAGS='--no-substitutes' ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--bootstrap'\n ```\n \n ### Using a version of Guix with `guix time-machine` capabilities\n@@ -83,17 +84,6 @@ export PATH=\"${HOME}/.config/guix/current/bin${PATH:+:}$PATH\"\n \n ## Usage\n \n-### As a Development Environment\n-\n-For a Bitcoin Core depends development environment, simply invoke\n-\n-```sh\n-guix environment --manifest=contrib/guix/manifest.scm\n-```\n-\n-And you'll land back in your shell with all the build dependencies required for\n-a `depends` build injected into your environment.\n-\n ### As a Tool for Deterministic Builds\n \n From the top of a clean Bitcoin Core repository:\n@@ -114,10 +104,9 @@ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n * _**HOSTS**_\n \n   Override the space-separated list of platform triples for which to perform a\n-  bootstrappable build. _(defaults to \"x86\\_64-linux-gnu\n-  arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu\")_\n-\n-  > Windows and OS X platform triplet support are WIP.\n+  bootstrappable build. _(defaults to \"x86\\_64-linux-gnu arm-linux-gnueabihf\n+  aarch64-linux-gnu riscv64-linux-gnu x86_64-w64-mingw32\n+  x86_64-apple-darwin18\")_\n \n * _**SOURCES_PATH**_\n \n@@ -143,28 +132,50 @@ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n   If non-empty, will pass `V=1` to all `make` invocations, making `make` output\n   verbose.\n \n-* _**ADDITIONAL_GUIX_ENVIRONMENT_FLAGS**_\n+  Note that any given value is ignored. The variable is only checked for\n+  emptiness. More concretely, this means that `V=` (setting `V` to the empty\n+  string) is interpreted the same way as not setting `V` at all, and that `V=0`\n+  has the same effect as `V=1`.\n \n-  Additional flags to be passed to `guix environment`. For a fully-bootstrapped\n+* _**SUBSTITUTE_URLS**_\n+\n+  A whitespace-delimited list of URLs from which to download pre-built packages.\n+  A URL is only used if its signing key is authorized (refer to the [substitute\n+  servers section](#speeding-up-builds-with-substitute-servers) for more\n+  details).\n+\n+* _**ADDITIONAL_GUIX_COMMON_FLAGS**_\n+\n+  Additional flags to be passed to all `guix` commands. For a fully-bootstrapped\n   build, set this to `--bootstrap --no-substitutes` (refer to the [security\n   model section](#choosing-your-security-model) for more details). Note that a\n   fully-bootstrapped build will take quite a long time on the first run.\n \n+* _**ADDITIONAL_GUIX_TIMEMACHINE_FLAGS**_\n+\n+  Additional flags to be passed to `guix time-machine`.\n+\n+* _**ADDITIONAL_GUIX_ENVIRONMENT_FLAGS**_\n+\n+  Additional flags to be passed to the invocation of `guix environment` inside\n+  `guix time-machine`.\n+\n ## Tips and Tricks\n \n ### Speeding up builds with substitute servers\n \n _This whole section is automatically done in the convenience\n [Dockerfiles][fanquake/guix-docker]_\n \n-For those who are used to life in the fast _(and trustful)_ lane, you can use\n-[substitute servers][guix/substitutes] to enable binary downloads of packages.\n+For those who are used to life in the fast _(and trustful)_ lane, you can\n+specify [substitute servers][guix/substitutes] from which to download pre-built\n+packages.\n \n > For those who only want to use substitutes from the official Guix build farm\n > and have authorized the build farm's signing key during Guix's installation,\n > you don't need to do anything.\n \n-#### Authorize the signing keys\n+#### Step 1: Authorize the signing keys\n \n For the official Guix build farm at https://ci.guix.gnu.org, run as root:\n \n@@ -178,7 +189,7 @@ For dongcarl's substitute server at https://guix.carldong.io, run as root:\n wget -qO- 'https://guix.carldong.io/signing-key.pub' | guix archive --authorize\n ```\n \n-#### Use the substitute servers\n+#### Step 2: Specify the substitute servers\n \n The official Guix build farm at https://ci.guix.gnu.org is automatically used\n unless the `--no-substitutes` flag is supplied.\n@@ -192,7 +203,7 @@ To use dongcarl's substitute server for Bitcoin Core builds after having\n [authorized his signing key](#authorize-the-signing-keys):\n \n ```\n-export ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--substitute-urls=\"https://guix.carldong.io https://ci.guix.gnu.org\"'\n+export SUBSTITUTE_URLS='https://guix.carldong.io https://ci.guix.gnu.org'\n ```\n \n ## FAQ\n@@ -208,9 +219,9 @@ As mentioned at the bottom of [this manual page][guix/bin-install]:\n \n ### When will Guix be packaged in debian?\n \n-Vagrant Cascadian has been making good progress on this\n-[here][debian/guix-package]. We have all the pieces needed to put up an APT\n-repository and will likely put one up soon.\n+Thanks to Vagrant Cascadian's diligent work, Guix is now [in debian\n+experimental][debian/guix-experimental]! Hopefully it will make its way into a\n+release soon.\n \n [b17e]: http://bootstrappable.org/\n [r12e/source-date-epoch]: https://reproducible-builds.org/docs/source-date-epoch/\n@@ -222,5 +233,5 @@ repository and will likely put one up soon.\n [guix/substitute-server-auth]: https://www.gnu.org/software/guix/manual/en/html_node/Substitute-Server-Authorization.html\n [guix/time-machine]: https://guix.gnu.org/manual/en/html_node/Invoking-guix-time_002dmachine.html\n \n-[debian/guix-package]: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=850644\n+[debian/guix-experimental]: https://packages.debian.org/experimental/guix\n [fanquake/guix-docker]: https://github.com/fanquake/core-review/tree/master/guix"
      },
      {
        "sha": "da6bd13f6aa75d5530106f1620dd642d9eab25e8",
        "filename": "contrib/guix/guix-build.sh",
        "status": "modified",
        "additions": 176,
        "deletions": 4,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/guix/guix-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/guix/guix-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-build.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -2,6 +2,136 @@\n export LC_ALL=C\n set -e -o pipefail\n \n+###################\n+## Sanity Checks ##\n+###################\n+\n+################\n+# Check 1: Make sure that we can invoke required tools\n+################\n+for cmd in git make guix cat mkdir; do\n+    if ! command -v \"$cmd\" > /dev/null 2>&1; then\n+        echo \"ERR: This script requires that '$cmd' is installed and available in your \\$PATH\"\n+        exit 1\n+    fi\n+done\n+\n+################\n+# Check 2: Make sure GUIX_BUILD_OPTIONS is empty\n+################\n+#\n+# GUIX_BUILD_OPTIONS is an environment variable recognized by guix commands that\n+# can perform builds. This seems like what we want instead of\n+# ADDITIONAL_GUIX_COMMON_FLAGS, but the value of GUIX_BUILD_OPTIONS is actually\n+# _appended_ to normal command-line options. Meaning that they will take\n+# precedence over the command-specific ADDITIONAL_GUIX_<CMD>_FLAGS.\n+#\n+# This seems like a poor user experience. Thus we check for GUIX_BUILD_OPTIONS's\n+# existence here and direct users of this script to use our (more flexible)\n+# custom environment variables.\n+if [ -n \"$GUIX_BUILD_OPTIONS\" ]; then\n+cat << EOF\n+Error: Environment variable GUIX_BUILD_OPTIONS is not empty:\n+  '$GUIX_BUILD_OPTIONS'\n+\n+Unfortunately this script is incompatible with GUIX_BUILD_OPTIONS, please unset\n+GUIX_BUILD_OPTIONS and use ADDITIONAL_GUIX_COMMON_FLAGS to set build options\n+across guix commands or ADDITIONAL_GUIX_<CMD>_FLAGS to set build options for a\n+specific guix command.\n+\n+See contrib/guix/README.md for more details.\n+EOF\n+exit 1\n+fi\n+\n+################\n+# Check 3: Make sure that we're not in a dirty worktree\n+################\n+if ! git diff-index --quiet HEAD -- && [ -z \"$FORCE_DIRTY_WORKTREE\" ]; then\n+cat << EOF\n+ERR: The current git worktree is dirty, which may lead to broken builds.\n+\n+     Aborting...\n+\n+Hint: To make your git worktree clean, You may want to:\n+      1. Commit your changes,\n+      2. Stash your changes, or\n+      3. Set the 'FORCE_DIRTY_WORKTREE' environment variable if you insist on\n+         using a dirty worktree\n+EOF\n+exit 1\n+else\n+    GIT_COMMIT=$(git rev-parse --short=12 HEAD)\n+fi\n+\n+################\n+# Check 4: Make sure that build directories do not exist\n+################\n+\n+# Default to building for all supported HOSTs (overridable by environment)\n+export HOSTS=\"${HOSTS:-x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu\n+                       x86_64-w64-mingw32\n+                       x86_64-apple-darwin18}\"\n+\n+DISTSRC_BASE=\"${DISTSRC_BASE:-${PWD}}\"\n+\n+# Usage: distsrc_for_host HOST\n+#\n+#   HOST: The current platform triple we're building for\n+#\n+distsrc_for_host() {\n+    echo \"${DISTSRC_BASE}/distsrc-${GIT_COMMIT}-${1}\"\n+}\n+\n+# Accumulate a list of build directories that already exist...\n+hosts_distsrc_exists=\"\"\n+for host in $HOSTS; do\n+    if [ -e \"$(distsrc_for_host \"$host\")\" ]; then\n+        hosts_distsrc_exists+=\" ${host}\"\n+    fi\n+done\n+\n+if [ -n \"$hosts_distsrc_exists\" ]; then\n+# ...so that we can print them out nicely in an error message\n+cat << EOF\n+ERR: Build directories for this commit already exist for the following platform\n+     triples you're attempting to build, probably because of previous builds.\n+     Please remove, or otherwise deal with them prior to starting another build.\n+\n+     Aborting...\n+\n+EOF\n+for host in $hosts_distsrc_exists; do\n+    echo \"     ${host} '$(distsrc_for_host \"$host\")'\"\n+done\n+exit 1\n+else\n+\n+    mkdir -p \"$DISTSRC_BASE\"\n+fi\n+\n+################\n+# Check 5: When building for darwin, make sure that the macOS SDK exists\n+################\n+\n+for host in $HOSTS; do\n+    case \"$host\" in\n+        *darwin*)\n+            OSX_SDK=\"$(make -C \"${PWD}/depends\" --no-print-directory HOST=\"$host\" print-OSX_SDK | sed 's@^[^=]\\+=[[:space:]]\\+@@g')\"\n+            if [ -e \"$OSX_SDK\" ]; then\n+                echo \"Found macOS SDK at '${OSX_SDK}', using...\"\n+            else\n+                echo \"macOS SDK does not exist at '${OSX_SDK}', please place the extracted, untarred SDK there to perform darwin builds, exiting...\"\n+                exit 1\n+            fi\n+            ;;\n+    esac\n+done\n+\n+#########\n+# Setup #\n+#########\n+\n # Determine the maximum number of jobs to run simultaneously (overridable by\n # environment)\n MAX_JOBS=\"${MAX_JOBS:-$(nproc)}\"\n@@ -16,11 +146,23 @@ SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:-$(git log --format=%at -1)}\"\n # Execute \"$@\" in a pinned, possibly older version of Guix, for reproducibility\n # across time.\n time-machine() {\n+    # shellcheck disable=SC2086\n     guix time-machine --url=https://github.com/dongcarl/guix.git \\\n                       --commit=b066c25026f21fb57677aa34692a5034338e7ee3 \\\n+                      --max-jobs=\"$MAX_JOBS\" \\\n+                      ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"} \\\n+                      ${ADDITIONAL_GUIX_COMMON_FLAGS} ${ADDITIONAL_GUIX_TIMEMACHINE_FLAGS} \\\n                       -- \"$@\"\n }\n \n+# Make sure an output directory exists for our builds\n+OUTDIR=\"${OUTDIR:-${PWD}/output}\"\n+[ -e \"$OUTDIR\" ] || mkdir -p \"$OUTDIR\"\n+\n+#########\n+# Build #\n+#########\n+\n # Function to be called when building for host ${1} and the user interrupts the\n # build\n int_trap() {\n@@ -38,9 +180,9 @@ and untracked files and directories will be wiped, allowing you to start anew.\n EOF\n }\n \n-# Deterministically build Bitcoin Core for HOSTs (overridable by environment)\n+# Deterministically build Bitcoin Core\n # shellcheck disable=SC2153\n-for host in ${HOSTS=x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu x86_64-w64-mingw32}; do\n+for host in $HOSTS; do\n \n     # Display proper warning when the user interrupts the build\n     trap 'int_trap ${host}' INT\n@@ -50,6 +192,19 @@ for host in ${HOSTS=x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv\n         # for the particular $HOST we're building for\n         export HOST=\"$host\"\n \n+        # shellcheck disable=SC2030\n+cat << EOF\n+INFO: Building commit ${GIT_COMMIT:?not set} for platform triple ${HOST:?not set}:\n+      ...using reference timestamp: ${SOURCE_DATE_EPOCH:?not set}\n+      ...running at most ${MAX_JOBS:?not set} jobs\n+      ...from worktree directory: '${PWD}'\n+          ...bind-mounted in container to: '/bitcoin'\n+      ...in build directory: '$(distsrc_for_host \"$HOST\")'\n+          ...bind-mounted in container to: '$(DISTSRC_BASE=/distsrc-base && distsrc_for_host \"$HOST\")'\n+      ...outputting in: '${OUTDIR:?not set}'\n+          ...bind-mounted in container to: '/outdir'\n+EOF\n+\n         # Run the build script 'contrib/guix/libexec/build.sh' in the build\n         # container specified by 'contrib/guix/manifest.scm'.\n         #\n@@ -99,19 +254,36 @@ for host in ${HOSTS=x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv\n         #     make the downloaded depends sources available to it. The sources\n         #     should have been downloaded prior to this invocation.\n         #\n-        # shellcheck disable=SC2086\n+        #  ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"}\n+        #\n+        #                     fetch substitute from SUBSTITUTE_URLS if they are\n+        #                     authorized\n+        #\n+        #    Depending on the user's security model, it may be desirable to use\n+        #    substitutes (pre-built packages) from servers that the user trusts.\n+        #    Please read the README.md in the same directory as this file for\n+        #    more information.\n+        #\n+        # shellcheck disable=SC2086,SC2031\n         time-machine environment --manifest=\"${PWD}/contrib/guix/manifest.scm\" \\\n                                  --container \\\n                                  --pure \\\n                                  --no-cwd \\\n                                  --share=\"$PWD\"=/bitcoin \\\n+                                 --share=\"$DISTSRC_BASE\"=/distsrc-base \\\n+                                 --share=\"$OUTDIR\"=/outdir \\\n+                                 --expose=\"$(git rev-parse --git-common-dir)\" \\\n                                  ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"} \\\n-                                 ${ADDITIONAL_GUIX_ENVIRONMENT_FLAGS} \\\n+                                 --max-jobs=\"$MAX_JOBS\" \\\n+                                 ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"} \\\n+                                 ${ADDITIONAL_GUIX_COMMON_FLAGS} ${ADDITIONAL_GUIX_ENVIRONMENT_FLAGS} \\\n                                  -- env HOST=\"$host\" \\\n                                         MAX_JOBS=\"$MAX_JOBS\" \\\n                                         SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:?unable to determine value}\" \\\n                                         ${V:+V=1} \\\n                                         ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n+                                        DISTSRC=\"$(DISTSRC_BASE=/distsrc-base && distsrc_for_host \"$HOST\")\" \\\n+                                        OUTDIR=/outdir \\\n                                       bash -c \"cd /bitcoin && bash contrib/guix/libexec/build.sh\"\n     )\n "
      },
      {
        "sha": "39d3cb9b50ba615c0f86ae23ed7f83258fb713e5",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 143,
        "deletions": 62,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -3,9 +3,23 @@ export LC_ALL=C\n set -e -o pipefail\n export TZ=UTC\n \n-# Check that environment variables assumed to be set by the environment are set\n-echo \"Building for platform triple ${HOST:?not set} with reference timestamp ${SOURCE_DATE_EPOCH:?not set}...\"\n-echo \"At most ${MAX_JOBS:?not set} jobs will run at once...\"\n+if [ -n \"$V\" ]; then\n+    # Print both unexpanded (-v) and expanded (-x) forms of commands as they are\n+    # read from this file.\n+    set -vx\n+    # Set VERBOSE for CMake-based builds\n+    export VERBOSE=\"$V\"\n+fi\n+\n+# Check that required environment variables are set\n+cat << EOF\n+Required environment variables as seen inside the container:\n+    HOST: ${HOST:?not set}\n+    SOURCE_DATE_EPOCH: ${SOURCE_DATE_EPOCH:?not set}\n+    MAX_JOBS: ${MAX_JOBS:?not set}\n+    DISTSRC: ${DISTSRC:?not set}\n+    OUTDIR: ${OUTDIR:?not set}\n+EOF\n \n #####################\n # Environment Setup #\n@@ -15,19 +29,6 @@ echo \"At most ${MAX_JOBS:?not set} jobs will run at once...\"\n # $HOSTs after successfully building.\n BASEPREFIX=\"${PWD}/depends\"\n \n-# Setup an output directory for our build\n-OUTDIR=\"${OUTDIR:-${PWD}/output}\"\n-[ -e \"$OUTDIR\" ] || mkdir -p \"$OUTDIR\"\n-\n-# Setup the directory where our Bitcoin Core build for HOST will occur\n-DISTSRC=\"${DISTSRC:-${PWD}/distsrc-${HOST}}\"\n-if [ -e \"$DISTSRC\" ]; then\n-    echo \"DISTSRC directory '${DISTSRC}' exists, probably because of previous builds... Aborting...\"\n-    exit 1\n-else\n-    mkdir -p \"$DISTSRC\"\n-fi\n-\n # Given a package name and an output name, return the path of that output in our\n # current guix environment\n store_path() {\n@@ -37,7 +38,28 @@ store_path() {\n               --expression='s|\"[[:space:]]*$||'\n }\n \n-# Set environment variables to point Guix's cross-toolchain to the right\n+\n+# Set environment variables to point the NATIVE toolchain to the right\n+# includes/libs\n+NATIVE_GCC=\"$(store_path gcc-toolchain)\"\n+export LIBRARY_PATH=\"${NATIVE_GCC}/lib:${NATIVE_GCC}/lib64\"\n+export CPATH=\"${NATIVE_GCC}/include\"\n+case \"$HOST\" in\n+    *darwin*)\n+        # When targeting darwin, some native tools built by depends require\n+        # native packages not incorporated in depends\n+        #\n+        # libcap       required by native_cdrkit/wodim\n+        # zlib, bzip2  required by native_cdrkit/genisoimage\n+        for native_pkg in libcap zlib bzip2; do\n+            native_pkg_store_path=$(store_path \"$native_pkg\")\n+            export LIBRARY_PATH=\"${native_pkg_store_path}/lib:${LIBRARY_PATH}\"\n+            export CPATH=\"${native_pkg_store_path}/include:${CPATH}\"\n+        done\n+        ;;\n+esac\n+\n+# Set environment variables to point the CROSS toolchain to the right\n # includes/libs for $HOST\n case \"$HOST\" in\n     *mingw*)\n@@ -47,14 +69,18 @@ case \"$HOST\" in\n         CROSS_GCC_LIBS=( \"${CROSS_GCC}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n         CROSS_GCC_LIB=\"${CROSS_GCC_LIBS[0]}\" # ...we just want the first one (there should only be one)\n \n-        NATIVE_GCC=\"$(store_path gcc-glibc-2.27-toolchain)\"\n-        export LIBRARY_PATH=\"${NATIVE_GCC}/lib:${NATIVE_GCC}/lib64\"\n-        export CPATH=\"${NATIVE_GCC}/include\"\n-\n+        # The search path ordering is generally:\n+        #    1. gcc-related search paths\n+        #    2. libc-related search paths\n+        #    2. kernel-header-related search paths (not applicable to mingw-w64 hosts)\n         export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GCC_LIB}/include-fixed:${CROSS_GLIBC}/include\"\n         export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GCC}/include/c++/${HOST}:${CROSS_GCC}/include/c++/backward:${CROSS_C_INCLUDE_PATH}\"\n         export CROSS_LIBRARY_PATH=\"${CROSS_GCC}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib\"\n         ;;\n+    *darwin*)\n+        # The CROSS toolchain for darwin uses the SDK and ignores environment variables.\n+        # See depends/hosts/darwin.mk for more details.\n+        ;;\n     *linux*)\n         CROSS_GLIBC=\"$(store_path \"glibc-cross-${HOST}\")\"\n         CROSS_GLIBC_STATIC=\"$(store_path \"glibc-cross-${HOST}\" static)\"\n@@ -63,9 +89,7 @@ case \"$HOST\" in\n         CROSS_GCC_LIBS=( \"${CROSS_GCC}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n         CROSS_GCC_LIB=\"${CROSS_GCC_LIBS[0]}\" # ...we just want the first one (there should only be one)\n \n-        # NOTE: CROSS_C_INCLUDE_PATH is missing ${CROSS_GCC_LIB}/include-fixed, because\n-        # the limits.h in it is missing a '#include_next <limits.h>'\n-        export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n+        export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GCC_LIB}/include-fixed:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n         export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GCC}/include/c++/${HOST}:${CROSS_GCC}/include/c++/backward:${CROSS_C_INCLUDE_PATH}\"\n         export CROSS_LIBRARY_PATH=\"${CROSS_GCC}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib:${CROSS_GLIBC_STATIC}/lib\"\n         ;;\n@@ -76,14 +100,25 @@ esac\n # Sanity check CROSS_*_PATH directories\n IFS=':' read -ra PATHS <<< \"${CROSS_C_INCLUDE_PATH}:${CROSS_CPLUS_INCLUDE_PATH}:${CROSS_LIBRARY_PATH}\"\n for p in \"${PATHS[@]}\"; do\n-    if [ ! -d \"$p\" ]; then\n+    if [ -n \"$p\" ] && [ ! -d \"$p\" ]; then\n         echo \"'$p' doesn't exist or isn't a directory... Aborting...\"\n         exit 1\n     fi\n done\n \n # Disable Guix ld auto-rpath behavior\n-export GUIX_LD_WRAPPER_DISABLE_RPATH=yes\n+case \"$HOST\" in\n+    *darwin*)\n+        # The auto-rpath behavior is necessary for darwin builds as some native\n+        # tools built by depends refer to and depend on Guix-built native\n+        # libraries\n+        #\n+        # After the native packages in depends are built, the ld wrapper should\n+        # no longer affect our build, as clang would instead reach for\n+        # x86_64-apple-darwin18-ld from cctools\n+        ;;\n+    *) export GUIX_LD_WRAPPER_DISABLE_RPATH=yes ;;\n+esac\n \n # Make /usr/bin if it doesn't exist\n [ -e /usr/bin ] || mkdir -p /usr/bin\n@@ -113,6 +148,16 @@ export QT_RCC_TEST=1\n export QT_RCC_SOURCE_DATE_OVERRIDE=1\n export TAR_OPTIONS=\"--owner=0 --group=0 --numeric-owner --mtime='@${SOURCE_DATE_EPOCH}' --sort=name\"\n export TZ=\"UTC\"\n+case \"$HOST\" in\n+    *darwin*)\n+        # cctools AR, unlike GNU binutils AR, does not have a deterministic mode\n+        # or a configure flag to enable determinism by default, it only\n+        # understands if this env-var is set or not. See:\n+        #\n+        # https://github.com/tpoechtrager/cctools-port/blob/55562e4073dea0fbfd0b20e0bf69ffe6390c7f97/cctools/ar/archive.c#L334\n+        export ZERO_AR_DATE=yes\n+        ;;\n+esac\n \n ####################\n # Depends Building #\n@@ -134,26 +179,25 @@ make -C depends --jobs=\"$MAX_JOBS\" HOST=\"$HOST\" \\\n                                    x86_64_linux_RANLIB=x86_64-linux-gnu-ranlib \\\n                                    x86_64_linux_NM=x86_64-linux-gnu-nm \\\n                                    x86_64_linux_STRIP=x86_64-linux-gnu-strip \\\n-                                   qt_config_opts_i686_linux='-platform linux-g++ -xplatform bitcoin-linux-g++'\n+                                   qt_config_opts_i686_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n+                                   FORCE_USE_SYSTEM_CLANG=1\n \n \n ###########################\n # Source Tarball Building #\n ###########################\n \n-# Create the source tarball and move it to \"${OUTDIR}/src\" if not already there\n-if [ -z \"$(find \"${OUTDIR}/src\" -name 'bitcoin-*.tar.gz')\" ]; then\n-    ./autogen.sh\n-    env CONFIG_SITE=\"${BASEPREFIX}/${HOST}/share/config.site\" ./configure --prefix=/\n-    make dist GZIP_ENV='-9n' ${V:+V=1}\n-    mkdir -p \"${OUTDIR}/src\"\n-    mv \"$(find \"${PWD}\" -name 'bitcoin-*.tar.gz')\" \"${OUTDIR}/src/\"\n-fi\n+# Define DISTNAME variable.\n+# shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n+source contrib/gitian-descriptors/assign_DISTNAME\n+\n+GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n \n-# Determine the full path to our source tarball\n-SOURCEDIST=\"$(find \"${OUTDIR}/src\" -name 'bitcoin-*.tar.gz')\"\n-# Determine our distribution name (e.g. bitcoin-0.18.0)\n-DISTNAME=\"$(basename \"$SOURCEDIST\" '.tar.gz')\"\n+# Create the source tarball if not already there\n+if [ ! -e \"$GIT_ARCHIVE\" ]; then\n+    mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n+    git archive --prefix=\"${DISTNAME}/\" --output=\"$GIT_ARCHIVE\" HEAD\n+fi\n \n ###########################\n # Binary Tarball Building #\n@@ -170,6 +214,7 @@ HOST_CFLAGS=\"-O2 -g\"\n case \"$HOST\" in\n     *linux*)  HOST_CFLAGS+=\" -ffile-prefix-map=${PWD}=.\" ;;\n     *mingw*)  HOST_CFLAGS+=\" -fno-ident\" ;;\n+    *darwin*) unset HOST_CFLAGS ;;\n esac\n \n # CXXFLAGS\n@@ -183,11 +228,14 @@ esac\n \n # Make $HOST-specific native binaries from depends available in $PATH\n export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n+mkdir -p \"$DISTSRC\"\n (\n     cd \"$DISTSRC\"\n \n     # Extract the source tarball\n-    tar --strip-components=1 -xf \"${SOURCEDIST}\"\n+    tar --strip-components=1 -xf \"${GIT_ARCHIVE}\"\n+\n+    ./autogen.sh\n \n     # Configure this DISTSRC for $HOST\n     # shellcheck disable=SC2086\n@@ -197,8 +245,8 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n                     --disable-maintainer-mode \\\n                     --disable-dependency-tracking \\\n                     ${CONFIGFLAGS} \\\n-                    CFLAGS=\"${HOST_CFLAGS}\" \\\n-                    CXXFLAGS=\"${HOST_CXXFLAGS}\" \\\n+                    ${HOST_CFLAGS:+CFLAGS=\"${HOST_CFLAGS}\"} \\\n+                    ${HOST_CXXFLAGS:+CXXFLAGS=\"${HOST_CXXFLAGS}\"} \\\n                     ${HOST_LDFLAGS:+LDFLAGS=\"${HOST_LDFLAGS}\"}\n \n     sed -i.old 's/-lstdc++ //g' config.status libtool src/univalue/config.status src/univalue/libtool\n@@ -208,19 +256,14 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n \n     # Perform basic ELF security checks on a series of executables.\n     make -C src --jobs=1 check-security ${V:+V=1}\n-\n-    case \"$HOST\" in\n-        *linux*|*mingw*)\n-            # Check that executables only contain allowed gcc, glibc and libstdc++\n-            # version symbols for Linux distro back-compatibility.\n-            make -C src --jobs=1 check-symbols  ${V:+V=1}\n-            ;;\n-    esac\n+    # Check that executables only contain allowed gcc, glibc and libstdc++\n+    # version symbols for Linux distro back-compatibility.\n+    make -C src --jobs=1 check-symbols  ${V:+V=1}\n \n     # Make the os-specific installers\n     case \"$HOST\" in\n         *mingw*)\n-            make deploy ${V:+V=1}\n+            make deploy ${V:+V=1} BITCOIN_WIN_INSTALLER=\"${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe\"\n             ;;\n     esac\n \n@@ -230,11 +273,37 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n     INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p \"${INSTALLPATH}\"\n     # Install built Bitcoin Core to $INSTALLPATH\n-    make install DESTDIR=\"${INSTALLPATH}\" ${V:+V=1}\n+    case \"$HOST\" in\n+        *darwin*)\n+            make install-strip DESTDIR=\"${INSTALLPATH}\" ${V:+V=1}\n+            ;;\n+        *)\n+            make install DESTDIR=\"${INSTALLPATH}\" ${V:+V=1}\n+            ;;\n+    esac\n \n     case \"$HOST\" in\n-        *mingw*)\n-            cp -f --target-directory=\"$OUTDIR\" ./*-setup-unsigned.exe\n+        *darwin*)\n+            make osx_volname ${V:+V=1}\n+            make deploydir ${V:+V=1}\n+            mkdir -p \"unsigned-app-${HOST}\"\n+            cp  --target-directory=\"unsigned-app-${HOST}\" \\\n+                osx_volname \\\n+                contrib/macdeploy/detached-sig-{apply,create}.sh \\\n+                \"${BASEPREFIX}/${HOST}\"/native/bin/dmg\n+            for util in codesign_allocate pagestuff; do\n+                cp --no-target-directory {\"${BASEPREFIX}/${HOST}/native/bin/${HOST}-\",\"unsigned-app-${HOST}/\"}\"$util\"\n+            done\n+            mv --target-directory=\"unsigned-app-${HOST}\" dist\n+            (\n+                cd \"unsigned-app-${HOST}\"\n+                find . -print0 \\\n+                    | sort --zero-terminated \\\n+                    | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n+                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-osx-unsigned.tar.gz\" \\\n+                    || ( rm -f \"${OUTDIR}/${DISTNAME}-osx-unsigned.tar.gz\" && exit 1 )\n+            )\n+            make deploy ${V:+V=1} OSX_DMG=\"${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\"\n             ;;\n     esac\n     (\n@@ -251,20 +320,25 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n         find . -name \"lib*.a\" -delete\n \n         # Prune pkg-config files\n-        rm -r \"${DISTNAME}/lib/pkgconfig\"\n+        rm -rf \"${DISTNAME}/lib/pkgconfig\"\n \n-        # Split binaries and libraries from their debug symbols\n-        {\n-            find \"${DISTNAME}/bin\" -type f -executable -print0\n-            find \"${DISTNAME}/lib\" -type f -print0\n-        } | xargs -0 -n1 -P\"$MAX_JOBS\" -I{} \"${DISTSRC}/contrib/devtools/split-debug.sh\" {} {} {}.dbg\n+        case \"$HOST\" in\n+            *darwin*) ;;\n+            *)\n+                # Split binaries and libraries from their debug symbols\n+                {\n+                    find \"${DISTNAME}/bin\" -type f -executable -print0\n+                    find \"${DISTNAME}/lib\" -type f -print0\n+                } | xargs -0 -n1 -P\"$MAX_JOBS\" -I{} \"${DISTSRC}/contrib/devtools/split-debug.sh\" {} {} {}.dbg\n+                ;;\n+        esac\n \n         case \"$HOST\" in\n             *mingw*)\n                 cp \"${DISTSRC}/doc/README_windows.txt\" \"${DISTNAME}/readme.txt\"\n                 ;;\n             *linux*)\n-                cp \"${DISTSRC}/doc/README.md\" \"${DISTNAME}/\"\n+                cp \"${DISTSRC}/README.md\" \"${DISTNAME}/\"\n                 ;;\n         esac\n \n@@ -297,6 +371,13 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n                     | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" \\\n                     || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" && exit 1 )\n                 ;;\n+            *darwin*)\n+                find \"${DISTNAME}\" -print0 \\\n+                    | sort --zero-terminated \\\n+                    | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n+                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-apple-darwin18/osx64}.tar.gz\" \\\n+                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-apple-darwin18/osx64}.tar.gz\" && exit 1 )\n+                ;;\n         esac\n     )\n )\n@@ -307,7 +388,7 @@ case \"$HOST\" in\n         (\n             cd ./windeploy\n             mkdir unsigned\n-            cp --target-directory=unsigned/ \"$OUTDIR\"/bitcoin-*-setup-unsigned.exe\n+            cp --target-directory=unsigned/ \"${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe\"\n             find . -print0 \\\n                 | sort --zero-terminated \\\n                 | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\"
      },
      {
        "sha": "3b8965926369bdce467293f10e70fecd98f7edec",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 49,
        "deletions": 4,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -3,27 +3,44 @@\n              (gnu packages autotools)\n              (gnu packages base)\n              (gnu packages bash)\n+             (gnu packages cdrom)\n              (gnu packages check)\n+             (gnu packages cmake)\n              (gnu packages commencement)\n              (gnu packages compression)\n              (gnu packages cross-base)\n              (gnu packages file)\n              (gnu packages gawk)\n              (gnu packages gcc)\n+             (gnu packages gnome)\n+             (gnu packages image)\n+             (gnu packages imagemagick)\n              (gnu packages installers)\n              (gnu packages linux)\n+             (gnu packages llvm)\n              (gnu packages mingw)\n              (gnu packages perl)\n              (gnu packages pkg-config)\n              (gnu packages python)\n              (gnu packages shells)\n+             (gnu packages version-control)\n+             (guix build-system font)\n              (guix build-system gnu)\n              (guix build-system trivial)\n+             (guix download)\n              (guix gexp)\n+             ((guix licenses) #:prefix license:)\n              (guix packages)\n              (guix profiles)\n              (guix utils))\n \n+(define-syntax-rule (search-our-patches file-name ...)\n+  \"Return the list of absolute file names corresponding to each\n+FILE-NAME found in ./patches relative to the current file.\"\n+  (parameterize\n+      ((%patch-path (list (string-append (dirname (current-filename)) \"/patches\"))))\n+    (list (search-patch file-name) ...)))\n+\n (define (make-ssp-fixed-gcc xgcc)\n   \"Given a XGCC package, return a modified package that uses the SSP function\n from glibc instead of from libssp.so. Our `symbol-check' script will complain if\n@@ -149,11 +166,33 @@ chain for \" target \" development.\"))\n       (home-page (package-home-page pthreads-xgcc))\n       (license (package-license pthreads-xgcc)))))\n \n+(define (make-nsis-with-sde-support base-nsis)\n+  (package-with-extra-patches base-nsis\n+    (search-our-patches \"nsis-SConstruct-sde-support.patch\")))\n+\n+(define-public font-tuffy\n+  (package\n+   (name \"font-tuffy\")\n+   (version \"20120614\")\n+   (source\n+    (origin\n+     (method url-fetch)\n+     (uri (string-append \"http://tulrich.com/fonts/tuffy-\" version \".tar.gz\"))\n+     (file-name (string-append name \"-\" version \".tar.gz\"))\n+     (sha256\n+      (base32\n+       \"02vf72bgrp30vrbfhxjw82s115z27dwfgnmmzfb0n9wfhxxfpyf6\"))))\n+   (build-system font-build-system)\n+   (home-page \"http://tulrich.com/fonts/\")\n+   (synopsis \"The Tuffy Truetype Font Family\")\n+   (description\n+    \"Thatcher Ulrich's first outline font design. He started with the goal of producing a neutral, readable sans-serif text font. There are lots of \\\"expressive\\\" fonts out there, but he wanted to start with something very plain and clean, something he might want to actually use. \")\n+   (license license:public-domain)))\n \n (packages->manifest\n  (append\n   (list ;; The Basics\n-        bash-minimal\n+        bash\n         which\n         coreutils\n         util-linux\n@@ -181,15 +220,21 @@ chain for \" target \" development.\"))\n         ;; Scripting\n         perl\n         python-3.7\n-        ;; Native gcc 9 toolchain targeting glibc 2.27\n-        (make-gcc-toolchain gcc-9 glibc-2.27))\n+        ;; Git\n+        git\n+        ;; Native gcc 7 toolchain\n+        gcc-toolchain-7)\n   (let ((target (getenv \"HOST\")))\n     (cond ((string-suffix? \"-mingw32\" target)\n            ;; Windows\n-           (list zip (make-mingw-pthreads-cross-toolchain \"x86_64-w64-mingw32\") nsis-x86_64))\n+           (list zip\n+                 (make-mingw-pthreads-cross-toolchain \"x86_64-w64-mingw32\")\n+                 (make-nsis-with-sde-support nsis-x86_64)))\n           ((string-contains target \"riscv64-linux-\")\n            (list (make-bitcoin-cross-toolchain \"riscv64-linux-gnu\"\n                                                #:base-gcc-for-libc gcc-7)))\n           ((string-contains target \"-linux-\")\n            (list (make-bitcoin-cross-toolchain target)))\n+          ((string-contains target \"darwin\")\n+           (list clang-8 libcap binutils imagemagick libtiff librsvg font-tuffy cmake-3.15.5 xorriso))\n           (else '())))))"
      },
      {
        "sha": "5edf1b7c8e373ffd61ce1eb2556728c37a277d86",
        "filename": "contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/nsis-SConstruct-sde-support.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,15 @@\n+diff --git a/SConstruct b/SConstruct\n+index e8252c9..41786f2 100755\n+--- a/SConstruct\n++++ b/SConstruct\n+@@ -95,8 +95,8 @@ default_doctype = 'html'\n+ if defenv.WhereIs('hhc', os.environ['PATH']):\n+ \tdefault_doctype = 'chm'\n+ \n+-from time import strftime, gmtime\n+-cvs_version = strftime('%d-%b-%Y.cvs', gmtime())\n++import time\n++cvs_version = time.strftime('%d-%b-%Y.cvs', time.gmtime(int(os.environ.get('SOURCE_DATE_EPOCH', time.time()))))\n+ \n+ opts = Variables()\n+ "
      },
      {
        "sha": "affc7c2e7506382b4b60a243bd0711abcb7f5884",
        "filename": "contrib/init/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/init/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/init/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/README.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,6 +1,6 @@\n Sample configuration files for:\n ```\n-SystemD: bitcoind.service\n+systemd: bitcoind.service\n Upstart: bitcoind.conf\n OpenRC:  bitcoind.openrc\n          bitcoind.openrcconf\n@@ -9,4 +9,4 @@ macOS:   org.bitcoin.bitcoind.plist\n ```\n have been made available to assist packagers in creating node packages here.\n \n-See doc/init.md for more information.\n+See [doc/init.md](../../doc/init.md) for more information."
      },
      {
        "sha": "5999928aa4fb13e25f51413180036322ce2110e2",
        "filename": "contrib/init/bitcoind.service",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/init/bitcoind.service",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/init/bitcoind.service",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.service?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -11,7 +11,11 @@\n \n [Unit]\n Description=Bitcoin daemon\n-After=network.target\n+Documentation=https://github.com/bitcoin/bitcoin/blob/master/doc/init.md\n+\n+# https://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/\n+After=network-online.target\n+Wants=network-online.target\n \n [Service]\n ExecStart=/usr/bin/bitcoind -daemon \\"
      },
      {
        "sha": "4037936404baeda2dcbb5e950c1b435f0cca8c53",
        "filename": "contrib/install_db4.sh",
        "status": "modified",
        "additions": 149,
        "deletions": 4,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/install_db4.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/install_db4.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/install_db4.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -68,10 +68,155 @@ tar -xzvf ${BDB_VERSION}.tar.gz -C \"$BDB_PREFIX\"\n cd \"${BDB_PREFIX}/${BDB_VERSION}/\"\n \n # Apply a patch necessary when building with clang and c++11 (see https://community.oracle.com/thread/3952592)\n-CLANG_CXX11_PATCH_URL='https://gist.githubusercontent.com/LnL7/5153b251fd525fe15de69b67e63a6075/raw/7778e9364679093a32dec2908656738e16b6bdcb/clang.patch'\n-CLANG_CXX11_PATCH_HASH='7a9a47b03fd5fb93a16ef42235fa9512db9b0829cfc3bdf90edd3ec1f44d637c'\n-http_get \"${CLANG_CXX11_PATCH_URL}\" clang.patch \"${CLANG_CXX11_PATCH_HASH}\"\n-patch -p2 < clang.patch\n+patch --ignore-whitespace -p1 << 'EOF'\n+commit 3311d68f11d1697565401eee6efc85c34f022ea7\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Mon Aug 17 20:03:56 2020 +0800\n+\n+    Fix C++11 compatibility\n+\n+diff --git a/dbinc/atomic.h b/dbinc/atomic.h\n+index 0034dcc..7c11d4a 100644\n+--- a/dbinc/atomic.h\n++++ b/dbinc/atomic.h\n+@@ -70,7 +70,7 @@ typedef struct {\n+  * These have no memory barriers; the caller must include them when necessary.\n+  */\n+ #define\tatomic_read(p)\t\t((p)->value)\n+-#define\tatomic_init(p, val)\t((p)->value = (val))\n++#define\tatomic_init_db(p, val)\t((p)->value = (val))\n+\n+ #ifdef HAVE_ATOMIC_SUPPORT\n+\n+@@ -144,7 +144,7 @@ typedef LONG volatile *interlocked_val;\n+ #define\tatomic_inc(env, p)\t__atomic_inc(p)\n+ #define\tatomic_dec(env, p)\t__atomic_dec(p)\n+ #define\tatomic_compare_exchange(env, p, o, n)\t\\\n+-\t__atomic_compare_exchange((p), (o), (n))\n++\t__atomic_compare_exchange_db((p), (o), (n))\n+ static inline int __atomic_inc(db_atomic_t *p)\n+ {\n+ \tint\ttemp;\n+@@ -176,7 +176,7 @@ static inline int __atomic_dec(db_atomic_t *p)\n+  * http://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Atomic-Builtins.html\n+  * which configure could be changed to use.\n+  */\n+-static inline int __atomic_compare_exchange(\n++static inline int __atomic_compare_exchange_db(\n+ \tdb_atomic_t *p, atomic_value_t oldval, atomic_value_t newval)\n+ {\n+ \tatomic_value_t was;\n+@@ -206,7 +206,7 @@ static inline int __atomic_compare_exchange(\n+ #define\tatomic_dec(env, p)\t(--(p)->value)\n+ #define\tatomic_compare_exchange(env, p, oldval, newval)\t\t\\\n+ \t(DB_ASSERT(env, atomic_read(p) == (oldval)),\t\t\\\n+-\tatomic_init(p, (newval)), 1)\n++\tatomic_init_db(p, (newval)), 1)\n+ #else\n+ #define atomic_inc(env, p)\t__atomic_inc(env, p)\n+ #define atomic_dec(env, p)\t__atomic_dec(env, p)\n+diff --git a/mp/mp_fget.c b/mp/mp_fget.c\n+index 5fdee5a..0b75f57 100644\n+--- a/mp/mp_fget.c\n++++ b/mp/mp_fget.c\n+@@ -617,7 +617,7 @@ alloc:\t\t/* Allocate a new buffer header and data space. */\n+\n+ \t\t/* Initialize enough so we can call __memp_bhfree. */\n+ \t\talloc_bhp->flags = 0;\n+-\t\tatomic_init(&alloc_bhp->ref, 1);\n++\t\tatomic_init_db(&alloc_bhp->ref, 1);\n+ #ifdef DIAGNOSTIC\n+ \t\tif ((uintptr_t)alloc_bhp->buf & (sizeof(size_t) - 1)) {\n+ \t\t\t__db_errx(env,\n+@@ -911,7 +911,7 @@ alloc:\t\t/* Allocate a new buffer header and data space. */\n+ \t\t\tMVCC_MPROTECT(bhp->buf, mfp->stat.st_pagesize,\n+ \t\t\t    PROT_READ);\n+\n+-\t\tatomic_init(&alloc_bhp->ref, 1);\n++\t\tatomic_init_db(&alloc_bhp->ref, 1);\n+ \t\tMUTEX_LOCK(env, alloc_bhp->mtx_buf);\n+ \t\talloc_bhp->priority = bhp->priority;\n+ \t\talloc_bhp->pgno = bhp->pgno;\n+diff --git a/mp/mp_mvcc.c b/mp/mp_mvcc.c\n+index 34467d2..f05aa0c 100644\n+--- a/mp/mp_mvcc.c\n++++ b/mp/mp_mvcc.c\n+@@ -276,7 +276,7 @@ __memp_bh_freeze(dbmp, infop, hp, bhp, need_frozenp)\n+ #else\n+ \tmemcpy(frozen_bhp, bhp, SSZA(BH, buf));\n+ #endif\n+-\tatomic_init(&frozen_bhp->ref, 0);\n++\tatomic_init_db(&frozen_bhp->ref, 0);\n+ \tif (mutex != MUTEX_INVALID)\n+ \t\tfrozen_bhp->mtx_buf = mutex;\n+ \telse if ((ret = __mutex_alloc(env, MTX_MPOOL_BH,\n+@@ -428,7 +428,7 @@ __memp_bh_thaw(dbmp, infop, hp, frozen_bhp, alloc_bhp)\n+ #endif\n+ \t\talloc_bhp->mtx_buf = mutex;\n+ \t\tMUTEX_LOCK(env, alloc_bhp->mtx_buf);\n+-\t\tatomic_init(&alloc_bhp->ref, 1);\n++\t\tatomic_init_db(&alloc_bhp->ref, 1);\n+ \t\tF_CLR(alloc_bhp, BH_FROZEN);\n+ \t}\n+\n+diff --git a/mp/mp_region.c b/mp/mp_region.c\n+index e6cece9..ddbe906 100644\n+--- a/mp/mp_region.c\n++++ b/mp/mp_region.c\n+@@ -224,7 +224,7 @@ __memp_init(env, dbmp, reginfo_off, htab_buckets, max_nreg)\n+ \t\t\t     MTX_MPOOL_FILE_BUCKET, 0, &htab[i].mtx_hash)) != 0)\n+ \t\t\t\treturn (ret);\n+ \t\t\tSH_TAILQ_INIT(&htab[i].hash_bucket);\n+-\t\t\tatomic_init(&htab[i].hash_page_dirty, 0);\n++\t\t\tatomic_init_db(&htab[i].hash_page_dirty, 0);\n+ \t\t}\n+\n+ \t\t/*\n+@@ -269,7 +269,7 @@ __memp_init(env, dbmp, reginfo_off, htab_buckets, max_nreg)\n+ \t\thp->mtx_hash = (mtx_base == MUTEX_INVALID) ? MUTEX_INVALID :\n+ \t\t    mtx_base + i;\n+ \t\tSH_TAILQ_INIT(&hp->hash_bucket);\n+-\t\tatomic_init(&hp->hash_page_dirty, 0);\n++\t\tatomic_init_db(&hp->hash_page_dirty, 0);\n+ #ifdef HAVE_STATISTICS\n+ \t\thp->hash_io_wait = 0;\n+ \t\thp->hash_frozen = hp->hash_thawed = hp->hash_frozen_freed = 0;\n+diff --git a/mutex/mut_method.c b/mutex/mut_method.c\n+index 2588763..5c6d516 100644\n+--- a/mutex/mut_method.c\n++++ b/mutex/mut_method.c\n+@@ -426,7 +426,7 @@ atomic_compare_exchange(env, v, oldval, newval)\n+ \tMUTEX_LOCK(env, mtx);\n+ \tret = atomic_read(v) == oldval;\n+ \tif (ret)\n+-\t\tatomic_init(v, newval);\n++\t\tatomic_init_db(v, newval);\n+ \tMUTEX_UNLOCK(env, mtx);\n+\n+ \treturn (ret);\n+diff --git a/mutex/mut_tas.c b/mutex/mut_tas.c\n+index f3922e0..e40fcdf 100644\n+--- a/mutex/mut_tas.c\n++++ b/mutex/mut_tas.c\n+@@ -46,7 +46,7 @@ __db_tas_mutex_init(env, mutex, flags)\n+\n+ #ifdef HAVE_SHARED_LATCHES\n+ \tif (F_ISSET(mutexp, DB_MUTEX_SHARED))\n+-\t\tatomic_init(&mutexp->sharecount, 0);\n++\t\tatomic_init_db(&mutexp->sharecount, 0);\n+ \telse\n+ #endif\n+ \tif (MUTEX_INIT(&mutexp->tas)) {\n+@@ -486,7 +486,7 @@ __db_tas_mutex_unlock(env, mutex)\n+ \t\t\tF_CLR(mutexp, DB_MUTEX_LOCKED);\n+ \t\t\t/* Flush flag update before zeroing count */\n+ \t\t\tMEMBAR_EXIT();\n+-\t\t\tatomic_init(&mutexp->sharecount, 0);\n++\t\t\tatomic_init_db(&mutexp->sharecount, 0);\n+ \t\t} else {\n+ \t\t\tDB_ASSERT(env, sharecount > 0);\n+ \t\t\tMEMBAR_EXIT();\n+EOF\n \n # The packaged config.guess and config.sub are ancient (2009) and can cause build issues.\n # Replace them with modern versions."
      },
      {
        "sha": "5f566261ca6746f15edcf2cf41fb7c46525fa79e",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -13,6 +13,9 @@ port=8332\n #regtest default\n #port=18443\n \n+#signet default\n+#port=38332\n+\n # bootstrap.dat hashlist settings (linearize-hashes)\n max_height=313000\n \n@@ -33,6 +36,11 @@ input=/home/example/.bitcoin/blocks\n #genesis=0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\n #input=/home/example/.bitcoin/regtest/blocks\n \n+# signet\n+#netmagic=0a03cf40\n+#genesis=00000008819873e925422c1ff0f99f7cc9bbb232af63a077a480a3633bee1ef6\n+#input=/home/example/.bitcoin/signet/blocks\n+\n # \"output\" option causes blockchain files to be written to the given location,\n # with \"output_file\" ignored. If not used, \"output_file\" is used instead.\n # output=/home/example/blockchain_directory"
      },
      {
        "sha": "2d9a4a2153b567baa94c09c1e3a007625ceb889e",
        "filename": "contrib/macdeploy/README.md",
        "status": "modified",
        "additions": 34,
        "deletions": 53,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/macdeploy/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/macdeploy/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/README.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -6,63 +6,48 @@ The `macdeployqtplus` script should not be run manually. Instead, after building\n make deploy\n ```\n \n-During the deployment process, the disk image window will pop up briefly\n-when the fancy settings are applied. This is normal, please do not interfere,\n-the process will unmount the DMG and cleanup before finishing.\n-\n-When complete, it will have produced `Bitcoin-Qt.dmg`.\n+When complete, it will have produced `Bitcoin-Core.dmg`.\n \n ## SDK Extraction\n \n-Our current macOS SDK (`macOSX10.14.sdk`) can be extracted from\n-[Xcode_10.2.1.xip](https://download.developer.apple.com/Developer_Tools/Xcode_10.2.1/Xcode_10.2.1.xip).\n+### Step 1: Obtaining `Xcode.app`\n+\n+Our current macOS SDK\n+(`Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz`) can be\n+extracted from\n+[Xcode_11.3.1.xip](https://download.developer.apple.com/Developer_Tools/Xcode_11.3.1/Xcode_11.3.1.xip).\n An Apple ID is needed to download this.\n \n-`Xcode.app` is packaged in a `.xip` archive.\n-This makes the SDK less-trivial to extract on non-macOS machines.\n-One approach (tested on Debian Buster) is outlined below:\n+After Xcode version 7.x, Apple started shipping the `Xcode.app` in a `.xip`\n+archive. This makes the SDK less-trivial to extract on non-macOS machines. One\n+approach (tested on Debian Buster) is outlined below:\n \n ```bash\n+# Install/clone tools needed for extracting Xcode.app\n+apt install cpio\n+git clone https://github.com/bitcoin-core/apple-sdk-tools.git\n \n-apt install clang cpio git liblzma-dev libxml2-dev libssl-dev make\n-\n-git clone https://github.com/tpoechtrager/xar\n-pushd xar/xar\n-./configure\n-make\n-make install\n-popd\n-\n-git clone https://github.com/NiklasRosenstein/pbzx\n-pushd pbzx\n-clang -llzma -lxar pbzx.c -o pbzx -Wl,-rpath=/usr/local/lib\n-popd\n-\n-xar -xf Xcode_10.2.1.xip -C .\n-\n-./pbzx/pbzx -n Content | cpio -i\n-\n-find Xcode.app -type d -name MacOSX.sdk -exec sh -c 'tar --transform=\"s/MacOSX.sdk/MacOSX10.14.sdk/\" -c -C$(dirname {}) MacOSX.sdk/ | gzip -9n > MacOSX10.14.sdk.tar.gz' \\;\n+# Unpack Xcode_11.3.1.xip and place the resulting Xcode.app in your current\n+# working directory\n+python3 apple-sdk-tools/extract_xcode.py -f Xcode_11.3.1.xip | cpio -d -i\n ```\n \n-on macOS the process is more straightforward:\n+On macOS the process is more straightforward:\n \n ```bash\n-xip -x Xcode_10.2.1.xip\n-tar -s \"/MacOSX.sdk/MacOSX10.14.sdk/\" -C Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.14.sdk.tar.gz MacOSX.sdk\n+xip -x Xcode_11.3.1.xip\n ```\n \n-Our previously used macOS SDK (`MacOSX10.11.sdk`) can be extracted from\n-[Xcode 7.3.1 dmg](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg).\n-The script [`extract-osx-sdk.sh`](./extract-osx-sdk.sh) automates this. First\n-ensure the DMG file is in the current directory, and then run the script. You\n-may wish to delete the `intermediate 5.hfs` file and `MacOSX10.11.sdk` (the\n-directory) when you've confirmed the extraction succeeded.\n+### Step 2: Generating `Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz` from `Xcode.app`\n+\n+To generate `Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz`, run\n+the script [`gen-sdk`](./gen-sdk) with the path to `Xcode.app` (extracted in the\n+previous stage) as the first argument.\n \n ```bash\n-apt-get install p7zip-full sleuthkit\n-contrib/macdeploy/extract-osx-sdk.sh\n-rm -rf 5.hfs MacOSX10.11.sdk\n+# Generate a Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz from\n+# the supplied Xcode.app\n+./contrib/macdeploy/gen-sdk '/path/to/Xcode.app'\n ```\n \n ## Deterministic macOS DMG Notes\n@@ -91,13 +76,13 @@ and its `libLTO.so` rather than those from `llvmgcc`, as it was originally done\n \n To complicate things further, all builds must target an Apple SDK. These SDKs are free to\n download, but not redistributable. To obtain it, register for an Apple Developer Account,\n-then download [Xcode 10.2.1](https://download.developer.apple.com/Developer_Tools/Xcode_10.2.1/Xcode_10.2.1.xip).\n+then download [Xcode_11.3.1](https://download.developer.apple.com/Developer_Tools/Xcode_11.3.1/Xcode_11.3.1.xip).\n \n This file is many gigabytes in size, but most (but not all) of what we need is\n contained only in a single directory:\n \n ```bash\n-Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk\n+Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk\n ```\n \n See the SDK Extraction notes above for how to obtain it.\n@@ -107,22 +92,18 @@ created using these tools. The build process has been designed to avoid includin\n SDK's files in Gitian's outputs. All interim tarballs are fully deterministic and may be freely\n redistributed.\n \n-`genisoimage` is used to create the initial DMG. It is not deterministic as-is, so it has been\n-patched. A system `genisoimage` will work fine, but it will not be deterministic because\n-the file-order will change between invocations. The patch can be seen here: [cdrkit-deterministic.patch](https://github.com/bitcoin/bitcoin/blob/master/depends/patches/native_cdrkit/cdrkit-deterministic.patch).\n-No effort was made to fix this cleanly, so it likely leaks memory badly, however it's only used for\n-a single invocation, so that's no real concern.\n+[`xorrisofs`](https://www.gnu.org/software/xorriso/) is used to create the DMG.\n \n-`genisoimage` cannot compress DMGs, so afterwards, the DMG tool from the\n-`libdmg-hfsplus` project is used to compress it. There are several bugs in this tool and its\n-maintainer has seemingly abandoned the project.\n+`xorrisofs` cannot compress DMGs, so afterwards, the DMG tool from the\n+`libdmg-hfsplus` project is used to compress it. There are several bugs in this\n+tool and its maintainer has seemingly abandoned the project.\n \n The DMG tool has the ability to create DMGs from scratch as well, but this functionality is\n broken. Only the compression feature is currently used. Ideally, the creation could be fixed\n-and `genisoimage` would no longer be necessary.\n+and `xorrisofs` would no longer be necessary.\n \n Background images and other features can be added to DMG files by inserting a\n-`.DS_Store` before creation. This is generated by the script `contrib/macdeploy/custom_dsstore.py`.\n+`.DS_Store` during creation.\n \n As of OS X 10.9 Mavericks, using an Apple-blessed key to sign binaries is a requirement in\n order to satisfy the new Gatekeeper requirements. Because this private key cannot be"
      },
      {
        "sha": "dc1c1882dd5a21a5358c6f3a65e7c70e22e295a1",
        "filename": "contrib/macdeploy/custom_dsstore.py",
        "status": "removed",
        "additions": 0,
        "deletions": 59,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/macdeploy/custom_dsstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/macdeploy/custom_dsstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/custom_dsstore.py?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,59 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2013-2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-import biplist\n-from ds_store import DSStore\n-from mac_alias import Alias\n-import sys\n-\n-output_file = sys.argv[1]\n-package_name_ns = sys.argv[2]\n-\n-ds = DSStore.open(output_file, 'w+')\n-ds['.']['bwsp'] = {\n-    'ShowStatusBar': False,\n-    'WindowBounds': '{{300, 280}, {500, 343}}',\n-    'ContainerShowSidebar': False,\n-    'SidebarWidth': 0,\n-    'ShowTabView': False,\n-    'PreviewPaneVisibility': False,\n-    'ShowToolbar': False,\n-    'ShowSidebar': False,\n-    'ShowPathbar': True\n-}\n-\n-icvp = {\n-    'gridOffsetX': 0.0,\n-    'textSize': 12.0,\n-    'viewOptionsVersion': 1,\n-    'backgroundImageAlias': b'\\x00\\x00\\x00\\x00\\x02\\x1e\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd1\\x94\\\\\\xb0H+\\x00\\x05\\x00\\x00\\x00\\x98\\x0fbackground.tiff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\r\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b.background\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x98\\x00\\x0e\\x00 \\x00\\x0f\\x00b\\x00a\\x00c\\x00k\\x00g\\x00r\\x00o\\x00u\\x00n\\x00d\\x00.\\x00t\\x00i\\x00f\\x00f\\x00\\x0f\\x00\\x02\\x00\\x00\\x00\\x12\\x00\\x1c/.background/background.tiff\\x00\\x14\\x01\\x06\\x00\\x00\\x00\\x00\\x01\\x06\\x00\\x02\\x00\\x00\\x0cMacintosh HD\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xce\\x97\\xab\\xc3H+\\x00\\x00\\x01\\x88[\\x88\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02u\\xab\\x8d\\xd1\\x94\\\\\\xb0devrddsk\\xff\\xff\\xff\\xff\\x00\\x00\\t \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07bitcoin\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xce\\x97\\xab\\xc3\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x01\\x00\\x14\\x01\\x88[\\x88\\x00\\x16\\xa9\\t\\x00\\x08\\xfaR\\x00\\x08\\xfaQ\\x00\\x02d\\x8e\\x00\\x0e\\x00\\x02\\x00\\x00\\x00\\x0f\\x00\\x1a\\x00\\x0c\\x00M\\x00a\\x00c\\x00i\\x00n\\x00t\\x00o\\x00s\\x00h\\x00 \\x00H\\x00D\\x00\\x13\\x00\\x01/\\x00\\x00\\x15\\x00\\x02\\x00\\x14\\xff\\xff\\x00\\x00\\xff\\xff\\x00\\x00',\n-    'backgroundColorBlue': 1.0,\n-    'iconSize': 96.0,\n-    'backgroundColorGreen': 1.0,\n-    'arrangeBy': 'none',\n-    'showIconPreview': True,\n-    'gridSpacing': 100.0,\n-    'gridOffsetY': 0.0,\n-    'showItemInfo': False,\n-    'labelOnBottom': True,\n-    'backgroundType': 2,\n-    'backgroundColorRed': 1.0\n-}\n-alias = Alias.from_bytes(icvp['backgroundImageAlias'])\n-alias.volume.name = package_name_ns\n-alias.volume.posix_path = '/Volumes/' + package_name_ns\n-alias.volume.disk_image_alias.target.filename = package_name_ns + '.temp.dmg'\n-alias.volume.disk_image_alias.target.carbon_path = 'Macintosh HD:Users:\\x00bitcoinuser:\\x00Documents:\\x00bitcoin:\\x00bitcoin:\\x00' + package_name_ns + '.temp.dmg'\n-alias.volume.disk_image_alias.target.posix_path = 'Users/bitcoinuser/Documents/bitcoin/bitcoin/' + package_name_ns + '.temp.dmg'\n-alias.target.carbon_path = package_name_ns + ':.background:\\x00background.tiff'\n-icvp['backgroundImageAlias'] = biplist.Data(alias.to_bytes())\n-ds['.']['icvp'] = icvp\n-\n-ds['.']['vSrn'] = ('long', 1)\n-\n-ds['Applications']['Iloc'] = (370, 156)\n-ds['Bitcoin-Qt.app']['Iloc'] = (128, 156)\n-\n-ds.flush()\n-ds.close()"
      },
      {
        "sha": "d481413cc382abb07b351867f2a767c5d005e58e",
        "filename": "contrib/macdeploy/detached-sig-apply.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 33,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/macdeploy/detached-sig-apply.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/macdeploy/detached-sig-apply.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-apply.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -8,10 +8,9 @@ set -e\n \n UNSIGNED=\"$1\"\n SIGNATURE=\"$2\"\n-ARCH=x86_64\n ROOTDIR=dist\n-TEMPDIR=signed.temp\n OUTDIR=signed-app\n+SIGNAPPLE=signapple\n \n if [ -z \"$UNSIGNED\" ]; then\n   echo \"usage: $0 <unsigned app> <signature>\"\n@@ -23,35 +22,6 @@ if [ -z \"$SIGNATURE\" ]; then\n   exit 1\n fi\n \n-rm -rf ${TEMPDIR} && mkdir -p ${TEMPDIR}\n-tar -C ${TEMPDIR} -xf ${UNSIGNED}\n-cp -rf \"${SIGNATURE}\"/* ${TEMPDIR}\n-\n-if [ -z \"${PAGESTUFF}\" ]; then\n-  PAGESTUFF=${TEMPDIR}/pagestuff\n-fi\n-\n-if [ -z \"${CODESIGN_ALLOCATE}\" ]; then\n-  CODESIGN_ALLOCATE=${TEMPDIR}/codesign_allocate\n-fi\n-\n-find ${TEMPDIR} -name \"*.sign\" | while read i; do\n-  SIZE=$(stat -c %s \"${i}\")\n-  TARGET_FILE=\"$(echo \"${i}\" | sed 's/\\.sign$//')\"\n-\n-  echo \"Allocating space for the signature of size ${SIZE} in ${TARGET_FILE}\"\n-  ${CODESIGN_ALLOCATE} -i \"${TARGET_FILE}\" -a ${ARCH} ${SIZE} -o \"${i}.tmp\"\n-\n-  OFFSET=$(${PAGESTUFF} \"${i}.tmp\" -p | tail -2 | grep offset | sed 's/[^0-9]*//g')\n-  if [ -z ${QUIET} ]; then\n-    echo \"Attaching signature at offset ${OFFSET}\"\n-  fi\n-\n-  dd if=\"$i\" of=\"${i}.tmp\" bs=1 seek=${OFFSET} count=${SIZE} 2>/dev/null\n-  mv \"${i}.tmp\" \"${TARGET_FILE}\"\n-  rm \"${i}\"\n-  echo \"Success.\"\n-done\n-mv ${TEMPDIR}/${ROOTDIR} ${OUTDIR}\n-rm -rf ${TEMPDIR}\n+${SIGNAPPLE} apply ${UNSIGNED} ${SIGNATURE}\n+mv ${ROOTDIR} ${OUTDIR}\n echo \"Signed: ${OUTDIR}\""
      },
      {
        "sha": "4f246cbb3fe4a8045dbc39bc6683101afc190423",
        "filename": "contrib/macdeploy/detached-sig-create.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 29,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/macdeploy/detached-sig-create.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/macdeploy/detached-sig-create.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-create.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -8,44 +8,21 @@ set -e\n \n ROOTDIR=dist\n BUNDLE=\"${ROOTDIR}/Bitcoin-Qt.app\"\n-CODESIGN=codesign\n+SIGNAPPLE=signapple\n TEMPDIR=sign.temp\n-TEMPLIST=${TEMPDIR}/signatures.txt\n OUT=signature-osx.tar.gz\n-OUTROOT=osx\n+OUTROOT=osx/dist\n \n if [ -z \"$1\" ]; then\n-  echo \"usage: $0 <codesign args>\"\n-  echo \"example: $0 -s MyIdentity\"\n+  echo \"usage: $0 <signapple args>\"\n+  echo \"example: $0 <path to key>\"\n   exit 1\n fi\n \n-rm -rf ${TEMPDIR} ${TEMPLIST}\n+rm -rf ${TEMPDIR}\n mkdir -p ${TEMPDIR}\n \n-${CODESIGN} -f --file-list ${TEMPLIST} \"$@\" \"${BUNDLE}\"\n-\n-grep -v CodeResources < \"${TEMPLIST}\" | while read i; do\n-  TARGETFILE=\"${BUNDLE}/$(echo \"${i}\" | sed \"s|.*${BUNDLE}/||\")\"\n-  SIZE=$(pagestuff \"$i\" -p | tail -2 | grep size | sed 's/[^0-9]*//g')\n-  OFFSET=$(pagestuff \"$i\" -p | tail -2 | grep offset | sed 's/[^0-9]*//g')\n-  SIGNFILE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}.sign\"\n-  DIRNAME=\"$(dirname \"${SIGNFILE}\")\"\n-  mkdir -p \"${DIRNAME}\"\n-  echo \"Adding detached signature for: ${TARGETFILE}. Size: ${SIZE}. Offset: ${OFFSET}\"\n-  dd if=\"$i\" of=\"${SIGNFILE}\" bs=1 skip=${OFFSET} count=${SIZE} 2>/dev/null\n-done\n-\n-grep CodeResources < \"${TEMPLIST}\" | while read i; do\n-  TARGETFILE=\"${BUNDLE}/$(echo \"${i}\" | sed \"s|.*${BUNDLE}/||\")\"\n-  RESOURCE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}\"\n-  DIRNAME=\"$(dirname \"${RESOURCE}\")\"\n-  mkdir -p \"${DIRNAME}\"\n-  echo \"Adding resource for: \\\"${TARGETFILE}\\\"\"\n-  cp \"${i}\" \"${RESOURCE}\"\n-done\n-\n-rm ${TEMPLIST}\n+${SIGNAPPLE} sign -f --detach \"${TEMPDIR}/${OUTROOT}\"  \"$@\" \"${BUNDLE}\"\n \n tar -C \"${TEMPDIR}\" -czf \"${OUT}\" .\n rm -rf \"${TEMPDIR}\""
      },
      {
        "sha": "3c7bdf4217c5c9ae13aa9dd3cff55cdb9f0e4577",
        "filename": "contrib/macdeploy/extract-osx-sdk.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/macdeploy/extract-osx-sdk.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/macdeploy/extract-osx-sdk.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/extract-osx-sdk.sh?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,34 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C\n-set -e\n-\n-INPUTFILE=\"Xcode_7.3.1.dmg\"\n-HFSFILENAME=\"5.hfs\"\n-SDKDIR=\"Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\"\n-\n-7z x \"${INPUTFILE}\" \"${HFSFILENAME}\"\n-SDKNAME=\"$(basename \"${SDKDIR}\")\"\n-SDKDIRINODE=$(ifind -n \"${SDKDIR}\" \"${HFSFILENAME}\")\n-fls \"${HFSFILENAME}\" -rpF ${SDKDIRINODE} |\n- while read type inode filename; do\n-\tinode=\"${inode::-1}\"\n-\tif [ \"${filename:0:14}\" = \"usr/share/man/\" ]; then\n-\t\tcontinue\n-\tfi\n-\tfilename=\"${SDKNAME}/$filename\"\n-\techo \"Extracting $filename ...\"\n-\tmkdir -p \"$(dirname \"$filename\")\"\n-\tif [ \"$type\" = \"l/l\" ]; then\n-\t\tln -s \"$(icat \"${HFSFILENAME}\" $inode)\" \"$filename\"\n-\telse\n-\t\ticat \"${HFSFILENAME}\" $inode >\"$filename\"\n-\tfi\n-done\n-echo \"Building ${SDKNAME}.tar.gz ...\"\n-MTIME=\"$(istat \"${HFSFILENAME}\" \"${SDKDIRINODE}\" | perl -nle 'm/Content Modified:\\s+(.*?)\\s\\(/ && print $1')\"\n-find \"${SDKNAME}\" | sort | tar --no-recursion --mtime=\"${MTIME}\" --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > \"${SDKNAME}.tar.gz\"\n-echo 'All done!'"
      },
      {
        "sha": "ef277a7f14ad66ecdb8597a865a54b9506fd0ff9",
        "filename": "contrib/macdeploy/fancy.plist",
        "status": "removed",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/macdeploy/fancy.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/macdeploy/fancy.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/fancy.plist?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,32 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n-<plist version=\"1.0\">\n-<dict>\n-\t<key>window_bounds</key>\n-\t<array>\n-\t\t<integer>300</integer>\n-\t\t<integer>300</integer>\n-\t\t<integer>800</integer>\n-\t\t<integer>620</integer>\n-\t</array>\n-\t<key>background_picture</key>\n-\t<string>background.tiff</string>\n-\t<key>icon_size</key>\n-\t<integer>96</integer>\n-\t<key>applications_symlink</key>\n-\t<true/>\n-\t<key>items_position</key>\n-\t<dict>\n-\t\t<key>Applications</key>\n-\t\t<array>\n-\t\t\t<integer>370</integer>\n-\t\t\t<integer>156</integer>\n-\t\t</array>\n-\t\t<key>Bitcoin-Qt.app</key>\n-\t\t<array>\n-\t\t\t<integer>128</integer>\n-\t\t\t<integer>156</integer>\n-\t\t</array>\n-\t</dict>\n-</dict>\n-</plist>"
      },
      {
        "sha": "457d8f5e645c8e9a6f1a55edf410599db065feed",
        "filename": "contrib/macdeploy/gen-sdk",
        "status": "added",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/macdeploy/gen-sdk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/macdeploy/gen-sdk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/gen-sdk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+import argparse\n+import plistlib\n+import pathlib\n+import sys\n+import tarfile\n+import gzip\n+import os\n+import contextlib\n+\n+@contextlib.contextmanager\n+def cd(path):\n+    \"\"\"Context manager that restores PWD even if an exception was raised.\"\"\"\n+    old_pwd = os.getcwd()\n+    os.chdir(str(path))\n+    try:\n+        yield\n+    finally:\n+        os.chdir(old_pwd)\n+\n+def run():\n+    parser = argparse.ArgumentParser(\n+        description=__doc__, formatter_class=argparse.RawTextHelpFormatter)\n+\n+    parser.add_argument('xcode_app', metavar='XCODEAPP', nargs=1)\n+    parser.add_argument(\"-o\", metavar='OUTSDKTGZ', nargs=1, dest='out_sdktgz', required=False)\n+\n+    args = parser.parse_args()\n+\n+    xcode_app = pathlib.Path(args.xcode_app[0]).resolve()\n+    assert xcode_app.is_dir(), \"The supplied Xcode.app path '{}' either does not exist or is not a directory\".format(xcode_app)\n+\n+    xcode_app_plist = xcode_app.joinpath(\"Contents/version.plist\")\n+    with xcode_app_plist.open('rb') as fp:\n+        pl = plistlib.load(fp)\n+        xcode_version = pl['CFBundleShortVersionString']\n+        xcode_build_id = pl['ProductBuildVersion']\n+    print(\"Found Xcode (version: {xcode_version}, build id: {xcode_build_id})\".format(xcode_version=xcode_version, xcode_build_id=xcode_build_id))\n+\n+    sdk_dir = xcode_app.joinpath(\"Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk\")\n+    sdk_plist = sdk_dir.joinpath(\"System/Library/CoreServices/SystemVersion.plist\")\n+    with sdk_plist.open('rb') as fp:\n+        pl = plistlib.load(fp)\n+        sdk_version = pl['ProductVersion']\n+        sdk_build_id = pl['ProductBuildVersion']\n+    print(\"Found MacOSX SDK (version: {sdk_version}, build id: {sdk_build_id})\".format(sdk_version=sdk_version, sdk_build_id=sdk_build_id))\n+\n+    out_name = \"Xcode-{xcode_version}-{xcode_build_id}-extracted-SDK-with-libcxx-headers\".format(xcode_version=xcode_version, xcode_build_id=xcode_build_id)\n+\n+    xcode_libcxx_dir = xcode_app.joinpath(\"Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1\")\n+    assert xcode_libcxx_dir.is_dir()\n+\n+    if args.out_sdktgz:\n+        out_sdktgz_path = pathlib.Path(args.out_sdktgz_path)\n+    else:\n+        # Construct our own out_sdktgz if not specified on the command line\n+        out_sdktgz_path = pathlib.Path(\"./{}.tar.gz\".format(out_name))\n+\n+    def tarfp_add_with_base_change(tarfp, dir_to_add, alt_base_dir):\n+        \"\"\"Add all files in dir_to_add to tarfp, but prepent MEMBERPREFIX to the files'\n+        names\n+\n+        e.g. if the only file under /root/bazdir is /root/bazdir/qux, invoking:\n+\n+            tarfp_add_with_base_change(tarfp, \"foo/bar\", \"/root/bazdir\")\n+\n+        would result in the following members being added to tarfp:\n+\n+            foo/bar/             -> corresponding to /root/bazdir\n+            foo/bar/qux          -> corresponding to /root/bazdir/qux\n+\n+        \"\"\"\n+        def change_tarinfo_base(tarinfo):\n+            if tarinfo.name and tarinfo.name.startswith(\"./\"):\n+                tarinfo.name = str(pathlib.Path(alt_base_dir, tarinfo.name))\n+            if tarinfo.linkname and tarinfo.linkname.startswith(\"./\"):\n+                tarinfo.linkname = str(pathlib.Path(alt_base_dir, tarinfo.linkname))\n+            return tarinfo\n+        with cd(dir_to_add):\n+            tarfp.add(\".\", recursive=True, filter=change_tarinfo_base)\n+\n+    print(\"Creating output .tar.gz file...\")\n+    with out_sdktgz_path.open(\"wb\") as fp:\n+        with gzip.GzipFile(fileobj=fp, compresslevel=9, mtime=0) as gzf:\n+            with tarfile.open(mode=\"w\", fileobj=gzf) as tarfp:\n+                print(\"Adding MacOSX SDK {} files...\".format(sdk_version))\n+                tarfp_add_with_base_change(tarfp, sdk_dir, out_name)\n+                print(\"Adding libc++ headers...\")\n+                tarfp_add_with_base_change(tarfp, xcode_libcxx_dir, \"{}/usr/include/c++/v1\".format(out_name))\n+    print(\"Done! Find the resulting gzipped tarball at:\")\n+    print(out_sdktgz_path.resolve())\n+\n+if __name__ == '__main__':\n+    run()"
      },
      {
        "sha": "9bf33052885654c06889a21431062d543b28e4fa",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 174,
        "deletions": 387,
        "changes": 561,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -16,9 +16,13 @@\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n #\n \n-import subprocess, sys, re, os, shutil, stat, os.path, time\n-from string import Template\n+import plistlib\n+import sys, re, os, shutil, stat, os.path\n from argparse import ArgumentParser\n+from ds_store import DSStore\n+from mac_alias import Alias\n+from pathlib import Path\n+from subprocess import PIPE, run\n from typing import List, Optional\n \n # This is ported from the original macdeployqt with modifications\n@@ -49,28 +53,18 @@ class FrameworkInfo(object):\n             return False\n     \n     def __str__(self):\n-        return \"\"\" Framework name: {}\n- Framework directory: {}\n- Framework path: {}\n- Binary name: {}\n- Binary directory: {}\n- Binary path: {}\n- Version: {}\n- Install name: {}\n- Deployed install name: {}\n- Source file Path: {}\n- Deployed Directory (relative to bundle): {}\n-\"\"\".format(self.frameworkName,\n-       self.frameworkDirectory,\n-       self.frameworkPath,\n-       self.binaryName,\n-       self.binaryDirectory,\n-       self.binaryPath,\n-       self.version,\n-       self.installName,\n-       self.deployedInstallName,\n-       self.sourceFilePath,\n-       self.destinationDirectory)\n+        return f\"\"\" Framework name: {frameworkName}\n+ Framework directory: {self.frameworkDirectory}\n+ Framework path: {self.frameworkPath}\n+ Binary name: {self.binaryName}\n+ Binary directory: {self.binaryDirectory}\n+ Binary path: {self.binaryPath}\n+ Version: {self.version}\n+ Install name: {self.installName}\n+ Deployed install name: {self.deployedInstallName}\n+ Source file Path: {self.sourceFilePath}\n+ Deployed Directory (relative to bundle): {self.destinationDirectory}\n+\"\"\"\n     \n     def isDylib(self):\n         return self.frameworkName.endswith(\".dylib\")\n@@ -97,7 +91,7 @@ class FrameworkInfo(object):\n         \n         m = cls.reOLine.match(line)\n         if m is None:\n-            raise RuntimeError(\"otool line could not be parsed: \" + line)\n+            raise RuntimeError(f\"otool line could not be parsed: {line}\")\n         \n         path = m.group(1)\n         \n@@ -117,7 +111,7 @@ class FrameworkInfo(object):\n             info.version = \"-\"\n             \n             info.installName = path\n-            info.deployedInstallName = \"@executable_path/../Frameworks/\" + info.binaryName\n+            info.deployedInstallName = f\"@executable_path/../Frameworks/{info.binaryName}\"\n             info.sourceFilePath = path\n             info.destinationDirectory = cls.bundleFrameworkDirectory\n         else:\n@@ -129,7 +123,7 @@ class FrameworkInfo(object):\n                     break\n                 i += 1\n             if i == len(parts):\n-                raise RuntimeError(\"Could not find .framework or .dylib in otool line: \" + line)\n+                raise RuntimeError(f\"Could not find .framework or .dylib in otool line: {line}\")\n             \n             info.frameworkName = parts[i]\n             info.frameworkDirectory = \"/\".join(parts[:i])\n@@ -140,7 +134,7 @@ class FrameworkInfo(object):\n             info.binaryPath = os.path.join(info.binaryDirectory, info.binaryName)\n             info.version = parts[i+2]\n             \n-            info.deployedInstallName = \"@executable_path/../Frameworks/\" + os.path.join(info.frameworkName, info.binaryPath)\n+            info.deployedInstallName = f\"@executable_path/../Frameworks/{os.path.join(info.frameworkName, info.binaryPath)}\"\n             info.destinationDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, info.binaryDirectory)\n             \n             info.sourceResourcesDirectory = os.path.join(info.frameworkPath, \"Resources\")\n@@ -154,10 +148,10 @@ class FrameworkInfo(object):\n class ApplicationBundleInfo(object):\n     def __init__(self, path: str):\n         self.path = path\n-        appName = \"Bitcoin-Qt\"\n-        self.binaryPath = os.path.join(path, \"Contents\", \"MacOS\", appName)\n+        # for backwards compatibility reasons, this must remain as Bitcoin-Qt\n+        self.binaryPath = os.path.join(path, \"Contents\", \"MacOS\", \"Bitcoin-Qt\")\n         if not os.path.exists(self.binaryPath):\n-            raise RuntimeError(\"Could not find bundle binary for \" + path)\n+            raise RuntimeError(f\"Could not find bundle binary for {path}\")\n         self.resourcesPath = os.path.join(path, \"Contents\", \"Resources\")\n         self.pluginPath = os.path.join(path, \"Contents\", \"PlugIns\")\n \n@@ -181,30 +175,26 @@ class DeploymentInfo(object):\n                 self.pluginPath = pluginPath\n     \n     def usesFramework(self, name: str) -> bool:\n-        nameDot = \"{}.\".format(name)\n-        libNameDot = \"lib{}.\".format(name)\n         for framework in self.deployedFrameworks:\n             if framework.endswith(\".framework\"):\n-                if framework.startswith(nameDot):\n+                if framework.startswith(f\"{name}.\"):\n                     return True\n             elif framework.endswith(\".dylib\"):\n-                if framework.startswith(libNameDot):\n+                if framework.startswith(f\"lib{name}.\"):\n                     return True\n         return False\n \n def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n-    if verbose >= 3:\n-        print(\"Inspecting with otool: \" + binaryPath)\n+    if verbose:\n+        print(f\"Inspecting with otool: {binaryPath}\")\n     otoolbin=os.getenv(\"OTOOL\", \"otool\")\n-    otool = subprocess.Popen([otoolbin, \"-L\", binaryPath], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n-    o_stdout, o_stderr = otool.communicate()\n+    otool = run([otoolbin, \"-L\", binaryPath], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n     if otool.returncode != 0:\n-        if verbose >= 1:\n-            sys.stderr.write(o_stderr)\n-            sys.stderr.flush()\n-            raise RuntimeError(\"otool failed with return code {}\".format(otool.returncode))\n+        sys.stderr.write(otool.stderr)\n+        sys.stderr.flush()\n+        raise RuntimeError(f\"otool failed with return code {otool.returncode}\")\n \n-    otoolLines = o_stdout.split(\"\\n\")\n+    otoolLines = otool.stdout.split(\"\\n\")\n     otoolLines.pop(0) # First line is the inspected binary\n     if \".framework\" in binaryPath or binaryPath.endswith(\".dylib\"):\n         otoolLines.pop(0) # Frameworks and dylibs list themselves as a dependency.\n@@ -214,7 +204,7 @@ def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n         line = line.replace(\"@loader_path\", os.path.dirname(binaryPath))\n         info = FrameworkInfo.fromOtoolLibraryLine(line.strip())\n         if info is not None:\n-            if verbose >= 3:\n+            if verbose:\n                 print(\"Found framework:\")\n                 print(info)\n             libraries.append(info)\n@@ -223,41 +213,41 @@ def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n \n def runInstallNameTool(action: str, *args):\n     installnametoolbin=os.getenv(\"INSTALLNAMETOOL\", \"install_name_tool\")\n-    subprocess.check_call([installnametoolbin, \"-\"+action] + list(args))\n+    run([installnametoolbin, \"-\"+action] + list(args), check=True)\n \n def changeInstallName(oldName: str, newName: str, binaryPath: str, verbose: int):\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Using install_name_tool:\")\n         print(\" in\", binaryPath)\n         print(\" change reference\", oldName)\n         print(\" to\", newName)\n     runInstallNameTool(\"change\", oldName, newName, binaryPath)\n \n def changeIdentification(id: str, binaryPath: str, verbose: int):\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Using install_name_tool:\")\n         print(\" change identification in\", binaryPath)\n         print(\" to\", id)\n     runInstallNameTool(\"id\", id, binaryPath)\n \n def runStrip(binaryPath: str, verbose: int):\n     stripbin=os.getenv(\"STRIP\", \"strip\")\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Using strip:\")\n         print(\" stripped\", binaryPath)\n-    subprocess.check_call([stripbin, \"-x\", binaryPath])\n+    run([stripbin, \"-x\", binaryPath], check=True)\n \n def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional[str]:\n     if framework.sourceFilePath.startswith(\"Qt\"):\n         #standard place for Nokia Qt installer's frameworks\n-        fromPath = \"/Library/Frameworks/\" + framework.sourceFilePath\n+        fromPath = f\"/Library/Frameworks/{framework.sourceFilePath}\"\n     else:\n         fromPath = framework.sourceFilePath\n     toDir = os.path.join(path, framework.destinationDirectory)\n     toPath = os.path.join(toDir, framework.binaryName)\n     \n     if not os.path.exists(fromPath):\n-        raise RuntimeError(\"No file at \" + fromPath)\n+        raise RuntimeError(f\"No file at {fromPath}\")\n     \n     if os.path.exists(toPath):\n         return None # Already there\n@@ -266,7 +256,7 @@ def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional\n         os.makedirs(toDir)\n     \n     shutil.copy2(fromPath, toPath)\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Copied:\", fromPath)\n         print(\" to:\", toPath)\n \n@@ -280,13 +270,12 @@ def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional\n         linkto = framework.version\n         if not os.path.exists(linkfrom):\n             os.symlink(linkto, linkfrom)\n-            if verbose >= 2:\n-                print(\"Linked:\", linkfrom, \"->\", linkto)\n+            print(\"Linked:\", linkfrom, \"->\", linkto)\n         fromResourcesDir = framework.sourceResourcesDirectory\n         if os.path.exists(fromResourcesDir):\n             toResourcesDir = os.path.join(path, framework.destinationResourcesDirectory)\n             shutil.copytree(fromResourcesDir, toResourcesDir, symlinks=True)\n-            if verbose >= 3:\n+            if verbose:\n                 print(\"Copied resources:\", fromResourcesDir)\n                 print(\" to:\", toResourcesDir)\n         fromContentsDir = framework.sourceVersionContentsDirectory\n@@ -295,15 +284,15 @@ def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional\n         if os.path.exists(fromContentsDir):\n             toContentsDir = os.path.join(path, framework.destinationVersionContentsDirectory)\n             shutil.copytree(fromContentsDir, toContentsDir, symlinks=True)\n-            if verbose >= 3:\n+            if verbose:\n                 print(\"Copied Contents:\", fromContentsDir)\n                 print(\" to:\", toContentsDir)\n     elif framework.frameworkName.startswith(\"libQtGui\"): # Copy qt_menu.nib (applies to non-framework layout)\n         qtMenuNibSourcePath = os.path.join(framework.frameworkDirectory, \"Resources\", \"qt_menu.nib\")\n         qtMenuNibDestinationPath = os.path.join(path, \"Contents\", \"Resources\", \"qt_menu.nib\")\n         if os.path.exists(qtMenuNibSourcePath) and not os.path.exists(qtMenuNibDestinationPath):\n             shutil.copytree(qtMenuNibSourcePath, qtMenuNibDestinationPath, symlinks=True)\n-            if verbose >= 3:\n+            if verbose:\n                 print(\"Copied for libQtGui:\", qtMenuNibSourcePath)\n                 print(\" to:\", qtMenuNibDestinationPath)\n     \n@@ -317,16 +306,14 @@ def deployFrameworks(frameworks: List[FrameworkInfo], bundlePath: str, binaryPat\n         framework = frameworks.pop(0)\n         deploymentInfo.deployedFrameworks.append(framework.frameworkName)\n         \n-        if verbose >= 2:\n-            print(\"Processing\", framework.frameworkName, \"...\")\n+        print(\"Processing\", framework.frameworkName, \"...\")\n         \n         # Get the Qt path from one of the Qt frameworks\n         if deploymentInfo.qtPath is None and framework.isQtFramework():\n             deploymentInfo.detectQtPath(framework.frameworkDirectory)\n         \n         if framework.installName.startswith(\"@executable_path\") or framework.installName.startswith(bundlePath):\n-            if verbose >= 2:\n-                print(framework.frameworkName, \"already deployed, skipping.\")\n+            print(framework.frameworkName, \"already deployed, skipping.\")\n             continue\n         \n         # install_name_tool the new id into the binary\n@@ -357,8 +344,8 @@ def deployFrameworks(frameworks: List[FrameworkInfo], bundlePath: str, binaryPat\n \n def deployFrameworksForAppBundle(applicationBundle: ApplicationBundleInfo, strip: bool, verbose: int) -> DeploymentInfo:\n     frameworks = getFrameworks(applicationBundle.binaryPath, verbose)\n-    if len(frameworks) == 0 and verbose >= 1:\n-        print(\"Warning: Could not find any external frameworks to deploy in {}.\".format(applicationBundle.path))\n+    if len(frameworks) == 0:\n+        print(f\"Warning: Could not find any external frameworks to deploy in {applicationBundle.path}.\")\n         return DeploymentInfo()\n     else:\n         return deployFrameworks(frameworks, applicationBundle.path, applicationBundle.binaryPath, strip, verbose)\n@@ -477,8 +464,7 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n             plugins.append((pluginDirectory, pluginName))\n     \n     for pluginDirectory, pluginName in plugins:\n-        if verbose >= 2:\n-            print(\"Processing plugin\", os.path.join(pluginDirectory, pluginName), \"...\")\n+        print(\"Processing plugin\", os.path.join(pluginDirectory, pluginName), \"...\")\n         \n         sourcePath = os.path.join(deploymentInfo.pluginPath, pluginDirectory, pluginName)\n         destinationDirectory = os.path.join(appBundleInfo.pluginPath, pluginDirectory)\n@@ -487,7 +473,7 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n         \n         destinationPath = os.path.join(destinationDirectory, pluginName)\n         shutil.copy2(sourcePath, destinationPath)\n-        if verbose >= 3:\n+        if verbose:\n             print(\"Copied:\", sourcePath)\n             print(\" to:\", destinationPath)\n         \n@@ -503,146 +489,50 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n             if dependency.frameworkName not in deploymentInfo.deployedFrameworks:\n                 deployFrameworks([dependency], appBundleInfo.path, destinationPath, strip, verbose, deploymentInfo)\n \n-qt_conf=\"\"\"[Paths]\n-Translations=Resources\n-Plugins=PlugIns\n-\"\"\"\n-\n ap = ArgumentParser(description=\"\"\"Improved version of macdeployqt.\n \n Outputs a ready-to-deploy app in a folder \"dist\" and optionally wraps it in a .dmg file.\n Note, that the \"dist\" folder will be deleted before deploying on each run.\n \n-Optionally, Qt translation files (.qm) and additional resources can be added to the bundle.\n-\n-Also optionally signs the .app bundle; set the CODESIGNARGS environment variable to pass arguments\n-to the codesign tool.\n-E.g. CODESIGNARGS='--sign \"Developer ID Application: ...\" --keychain /encrypted/foo.keychain'\"\"\")\n+Optionally, Qt translation files (.qm) can be added to the bundle.\"\"\")\n \n ap.add_argument(\"app_bundle\", nargs=1, metavar=\"app-bundle\", help=\"application bundle to be deployed\")\n-ap.add_argument(\"-verbose\", type=int, nargs=1, default=[1], metavar=\"<0-3>\", help=\"0 = no output, 1 = error/warning (default), 2 = normal, 3 = debug\")\n+ap.add_argument(\"appname\", nargs=1, metavar=\"appname\", help=\"name of the app being deployed\")\n+ap.add_argument(\"-verbose\", nargs=\"?\", const=True, help=\"Output additional debugging information\")\n ap.add_argument(\"-no-plugins\", dest=\"plugins\", action=\"store_false\", default=True, help=\"skip plugin deployment\")\n ap.add_argument(\"-no-strip\", dest=\"strip\", action=\"store_false\", default=True, help=\"don't run 'strip' on the binaries\")\n-ap.add_argument(\"-sign\", dest=\"sign\", action=\"store_true\", default=False, help=\"sign .app bundle with codesign tool\")\n-ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image; if basename is not specified, a camel-cased version of the app name is used\")\n-ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fancy looking disk image using the given plist file with instructions; requires -dmg to work\")\n-ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's resources; the language list must be separated with commas, not with whitespace\")\n-ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translation files\")\n-ap.add_argument(\"-add-resources\", nargs=\"+\", metavar=\"path\", default=[], help=\"list of additional files or folders to be copied into the bundle's resources; must be the last argument\")\n-ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom volume name for dmg\")\n+ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image\")\n+ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translations. Base translations will automatically be added to the bundle's resources.\")\n \n config = ap.parse_args()\n \n-verbose = config.verbose[0]\n+verbose = config.verbose\n \n # ------------------------------------------------\n \n app_bundle = config.app_bundle[0]\n+appname = config.appname[0]\n \n if not os.path.exists(app_bundle):\n-    if verbose >= 1:\n-        sys.stderr.write(\"Error: Could not find app bundle \\\"{}\\\"\\n\".format(app_bundle))\n+    sys.stderr.write(f\"Error: Could not find app bundle \\\"{app_bundle}\\\"\\n\")\n     sys.exit(1)\n \n-app_bundle_name = os.path.splitext(os.path.basename(app_bundle))[0]\n-\n-# ------------------------------------------------\n-translations_dir = None\n-if config.translations_dir and config.translations_dir[0]:\n-    if os.path.exists(config.translations_dir[0]):\n-        translations_dir = config.translations_dir[0]\n-    else:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find translation dir \\\"{}\\\"\\n\".format(translations_dir))\n-        sys.exit(1)\n-# ------------------------------------------------\n-\n-for p in config.add_resources:\n-    if verbose >= 3:\n-        print(\"Checking for \\\"%s\\\"...\" % p)\n-    if not os.path.exists(p):\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find additional resource file \\\"{}\\\"\\n\".format(p))\n-        sys.exit(1)\n-\n-# ------------------------------------------------\n-\n-if len(config.fancy) == 1:\n-    if verbose >= 3:\n-        print(\"Fancy: Importing plistlib...\")\n-    try:\n-        import plistlib\n-    except ImportError:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not import plistlib which is required for fancy disk images.\\n\")\n-        sys.exit(1)\n-    \n-    p = config.fancy[0]\n-    if verbose >= 3:\n-        print(\"Fancy: Loading \\\"{}\\\"...\".format(p))\n-    if not os.path.exists(p):\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n-        sys.exit(1)\n-    \n-    try:\n-        fancy = plistlib.readPlist(p)\n-    except:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not parse fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n-        sys.exit(1)\n-    \n-    try:\n-        assert \"window_bounds\" not in fancy or (isinstance(fancy[\"window_bounds\"], list) and len(fancy[\"window_bounds\"]) == 4)\n-        assert \"background_picture\" not in fancy or isinstance(fancy[\"background_picture\"], str)\n-        assert \"icon_size\" not in fancy or isinstance(fancy[\"icon_size\"], int)\n-        assert \"applications_symlink\" not in fancy or isinstance(fancy[\"applications_symlink\"], bool)\n-        if \"items_position\" in fancy:\n-            assert isinstance(fancy[\"items_position\"], dict)\n-            for key, value in fancy[\"items_position\"].items():\n-                assert isinstance(value, list) and len(value) == 2 and isinstance(value[0], int) and isinstance(value[1], int)\n-    except:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Bad format of fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n-        sys.exit(1)\n-    \n-    if \"background_picture\" in fancy:\n-        bp = fancy[\"background_picture\"]\n-        if verbose >= 3:\n-            print(\"Fancy: Resolving background picture \\\"{}\\\"...\".format(bp))\n-        if not os.path.exists(bp):\n-            bp = os.path.join(os.path.dirname(p), bp)\n-            if not os.path.exists(bp):\n-                if verbose >= 1:\n-                    sys.stderr.write(\"Error: Could not find background picture at \\\"{}\\\" or \\\"{}\\\"\\n\".format(fancy[\"background_picture\"], bp))\n-                sys.exit(1)\n-            else:\n-                fancy[\"background_picture\"] = bp\n-else:\n-    fancy = None\n-\n # ------------------------------------------------\n \n if os.path.exists(\"dist\"):\n-    if verbose >= 2:\n-        print(\"+ Removing old dist folder +\")\n-    \n+    print(\"+ Removing existing dist folder +\")\n     shutil.rmtree(\"dist\")\n \n-# ------------------------------------------------\n-\n-if len(config.volname) == 1:\n-    volname = config.volname[0]\n-else:\n-    volname = app_bundle_name\n+if os.path.exists(appname + \".dmg\"):\n+    print(\"+ Removing existing DMG +\")\n+    os.unlink(appname + \".dmg\")\n \n # ------------------------------------------------\n \n target = os.path.join(\"dist\", \"Bitcoin-Qt.app\")\n \n-if verbose >= 2:\n-    print(\"+ Copying source bundle +\")\n-if verbose >= 3:\n+print(\"+ Copying source bundle +\")\n+if verbose:\n     print(app_bundle, \"->\", target)\n \n os.mkdir(\"dist\")\n@@ -652,257 +542,154 @@ applicationBundle = ApplicationBundleInfo(target)\n \n # ------------------------------------------------\n \n-if verbose >= 2:\n-    print(\"+ Deploying frameworks +\")\n+print(\"+ Deploying frameworks +\")\n \n try:\n     deploymentInfo = deployFrameworksForAppBundle(applicationBundle, config.strip, verbose)\n     if deploymentInfo.qtPath is None:\n         deploymentInfo.qtPath = os.getenv(\"QTDIR\", None)\n         if deploymentInfo.qtPath is None:\n-            if verbose >= 1:\n-                sys.stderr.write(\"Warning: Could not detect Qt's path, skipping plugin deployment!\\n\")\n+            sys.stderr.write(\"Warning: Could not detect Qt's path, skipping plugin deployment!\\n\")\n             config.plugins = False\n except RuntimeError as e:\n-    if verbose >= 1:\n-        sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n+    sys.stderr.write(f\"Error: {str(e)}\\n\")\n     sys.exit(1)\n \n # ------------------------------------------------\n \n if config.plugins:\n-    if verbose >= 2:\n-        print(\"+ Deploying plugins +\")\n+    print(\"+ Deploying plugins +\")\n     \n     try:\n         deployPlugins(applicationBundle, deploymentInfo, config.strip, verbose)\n     except RuntimeError as e:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n+        sys.stderr.write(f\"Error: {str(e)}\\n\")\n         sys.exit(1)\n \n # ------------------------------------------------\n \n-if len(config.add_qt_tr) == 0:\n-    add_qt_tr = []\n-else:\n-    if translations_dir is not None:\n-        qt_tr_dir = translations_dir\n-    else:\n-        if deploymentInfo.qtPath is not None:\n-            qt_tr_dir = os.path.join(deploymentInfo.qtPath, \"translations\")\n-        else:\n-            sys.stderr.write(\"Error: Could not find Qt translation path\\n\")\n-            sys.exit(1)\n-    add_qt_tr = [\"qt_{}.qm\".format(lng) for lng in config.add_qt_tr[0].split(\",\")]\n-    for lng_file in add_qt_tr:\n-        p = os.path.join(qt_tr_dir, lng_file)\n-        if verbose >= 3:\n-            print(\"Checking for \\\"{}\\\"...\".format(p))\n-        if not os.path.exists(p):\n-            if verbose >= 1:\n-                sys.stderr.write(\"Error: Could not find Qt translation file \\\"{}\\\"\\n\".format(lng_file))\n-                sys.exit(1)\n+if config.translations_dir:\n+    if not Path(config.translations_dir[0]).exists():\n+        sys.stderr.write(f\"Error: Could not find translation dir \\\"{config.translations_dir[0]}\\\"\\n\")\n+        sys.exit(1)\n+\n+print(\"+ Adding Qt translations +\")\n+\n+translations = Path(config.translations_dir[0])\n+\n+regex = re.compile('qt_[a-z]*(.qm|_[A-Z]*.qm)')\n+\n+lang_files = [x for x in translations.iterdir() if regex.match(x.name)]\n+\n+for file in lang_files:\n+    if verbose:\n+        print(file.as_posix(), \"->\", os.path.join(applicationBundle.resourcesPath, file.name))\n+    shutil.copy2(file.as_posix(), os.path.join(applicationBundle.resourcesPath, file.name))\n \n # ------------------------------------------------\n \n-if verbose >= 2:\n-    print(\"+ Installing qt.conf +\")\n+print(\"+ Installing qt.conf +\")\n+\n+qt_conf=\"\"\"[Paths]\n+Translations=Resources\n+Plugins=PlugIns\n+\"\"\"\n \n with open(os.path.join(applicationBundle.resourcesPath, \"qt.conf\"), \"wb\") as f:\n     f.write(qt_conf.encode())\n \n # ------------------------------------------------\n \n-if len(add_qt_tr) > 0 and verbose >= 2:\n-    print(\"+ Adding Qt translations +\")\n-\n-for lng_file in add_qt_tr:\n-    if verbose >= 3:\n-        print(os.path.join(qt_tr_dir, lng_file), \"->\", os.path.join(applicationBundle.resourcesPath, lng_file))\n-    shutil.copy2(os.path.join(qt_tr_dir, lng_file), os.path.join(applicationBundle.resourcesPath, lng_file))\n+print(\"+ Generating .DS_Store +\")\n+\n+output_file = os.path.join(\"dist\", \".DS_Store\")\n+\n+ds = DSStore.open(output_file, 'w+')\n+\n+ds['.']['bwsp'] = {\n+    'WindowBounds': '{{300, 280}, {500, 343}}',\n+    'PreviewPaneVisibility': False,\n+}\n+\n+icvp = {\n+    'gridOffsetX': 0.0,\n+    'textSize': 12.0,\n+    'viewOptionsVersion': 1,\n+    'backgroundImageAlias': b'\\x00\\x00\\x00\\x00\\x02\\x1e\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd1\\x94\\\\\\xb0H+\\x00\\x05\\x00\\x00\\x00\\x98\\x0fbackground.tiff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\r\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b.background\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x98\\x00\\x0e\\x00 \\x00\\x0f\\x00b\\x00a\\x00c\\x00k\\x00g\\x00r\\x00o\\x00u\\x00n\\x00d\\x00.\\x00t\\x00i\\x00f\\x00f\\x00\\x0f\\x00\\x02\\x00\\x00\\x00\\x12\\x00\\x1c/.background/background.tiff\\x00\\x14\\x01\\x06\\x00\\x00\\x00\\x00\\x01\\x06\\x00\\x02\\x00\\x00\\x0cMacintosh HD\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xce\\x97\\xab\\xc3H+\\x00\\x00\\x01\\x88[\\x88\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02u\\xab\\x8d\\xd1\\x94\\\\\\xb0devrddsk\\xff\\xff\\xff\\xff\\x00\\x00\\t \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07bitcoin\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xce\\x97\\xab\\xc3\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x01\\x00\\x14\\x01\\x88[\\x88\\x00\\x16\\xa9\\t\\x00\\x08\\xfaR\\x00\\x08\\xfaQ\\x00\\x02d\\x8e\\x00\\x0e\\x00\\x02\\x00\\x00\\x00\\x0f\\x00\\x1a\\x00\\x0c\\x00M\\x00a\\x00c\\x00i\\x00n\\x00t\\x00o\\x00s\\x00h\\x00 \\x00H\\x00D\\x00\\x13\\x00\\x01/\\x00\\x00\\x15\\x00\\x02\\x00\\x14\\xff\\xff\\x00\\x00\\xff\\xff\\x00\\x00',\n+    'backgroundColorBlue': 1.0,\n+    'iconSize': 96.0,\n+    'backgroundColorGreen': 1.0,\n+    'arrangeBy': 'none',\n+    'showIconPreview': True,\n+    'gridSpacing': 100.0,\n+    'gridOffsetY': 0.0,\n+    'showItemInfo': False,\n+    'labelOnBottom': True,\n+    'backgroundType': 2,\n+    'backgroundColorRed': 1.0\n+}\n+alias = Alias().from_bytes(icvp['backgroundImageAlias'])\n+alias.volume.name = appname\n+alias.volume.posix_path = '/Volumes/' + appname\n+icvp['backgroundImageAlias'] = alias.to_bytes()\n+ds['.']['icvp'] = icvp\n+\n+ds['.']['vSrn'] = ('long', 1)\n+\n+ds['Applications']['Iloc'] = (370, 156)\n+ds['Bitcoin-Qt.app']['Iloc'] = (128, 156)\n+\n+ds.flush()\n+ds.close()\n \n # ------------------------------------------------\n \n-if len(config.add_resources) > 0 and verbose >= 2:\n-    print(\"+ Adding additional resources +\")\n+if config.dmg is not None:\n \n-for p in config.add_resources:\n-    t = os.path.join(applicationBundle.resourcesPath, os.path.basename(p))\n-    if verbose >= 3:\n-        print(p, \"->\", t)\n-    if os.path.isdir(p):\n-        shutil.copytree(p, t, symlinks=True)\n-    else:\n-        shutil.copy2(p, t)\n+    print(\"+ Preparing .dmg disk image +\")\n \n-# ------------------------------------------------\n+    if verbose:\n+        print(\"Determining size of \\\"dist\\\"...\")\n+    size = 0\n+    for path, dirs, files in os.walk(\"dist\"):\n+        for file in files:\n+            size += os.path.getsize(os.path.join(path, file))\n+    size += int(size * 0.15)\n \n-if config.sign and 'CODESIGNARGS' not in os.environ:\n-    print(\"You must set the CODESIGNARGS environment variable. Skipping signing.\")\n-elif config.sign:\n-    if verbose >= 1:\n-        print(\"Code-signing app bundle {}\".format(target))\n-    subprocess.check_call(\"codesign --force {} {}\".format(os.environ['CODESIGNARGS'], target), shell=True)\n+    if verbose:\n+        print(\"Creating temp image for modification...\")\n \n-# ------------------------------------------------\n+    tempname: str = appname + \".temp.dmg\"\n \n-if config.dmg is not None:\n+    run([\"hdiutil\", \"create\", tempname, \"-srcfolder\", \"dist\", \"-format\", \"UDRW\", \"-size\", str(size), \"-volname\", appname], check=True, universal_newlines=True)\n \n-    def runHDIUtil(verb: str, image_basename: str, **kwargs) -> int:\n-        hdiutil_args = [\"hdiutil\", verb, image_basename + \".dmg\"]\n-        if \"capture_stdout\" in kwargs:\n-            del kwargs[\"capture_stdout\"]\n-            run = subprocess.check_output\n-        else:\n-            if verbose < 2:\n-                hdiutil_args.append(\"-quiet\")\n-            elif verbose >= 3:\n-                hdiutil_args.append(\"-verbose\")\n-            run = subprocess.check_call\n-        \n-        for key, value in kwargs.items():\n-            hdiutil_args.append(\"-\" + key)\n-            if value is not True:\n-                hdiutil_args.append(str(value))\n-        \n-        return run(hdiutil_args, universal_newlines=True)\n-    \n-    if verbose >= 2:\n-        if fancy is None:\n-            print(\"+ Creating .dmg disk image +\")\n-        else:\n-            print(\"+ Preparing .dmg disk image +\")\n-    \n-    if config.dmg != \"\":\n-        dmg_name = config.dmg\n-    else:\n-        spl = app_bundle_name.split(\" \")\n-        dmg_name = spl[0] + \"\".join(p.capitalize() for p in spl[1:])\n-    \n-    if fancy is None:\n-        try:\n-            runHDIUtil(\"create\", dmg_name, srcfolder=\"dist\", format=\"UDBZ\", volname=volname, ov=True)\n-        except subprocess.CalledProcessError as e:\n-            sys.exit(e.returncode)\n-    else:\n-        if verbose >= 3:\n-            print(\"Determining size of \\\"dist\\\"...\")\n-        size = 0\n-        for path, dirs, files in os.walk(\"dist\"):\n-            for file in files:\n-                size += os.path.getsize(os.path.join(path, file))\n-        size += int(size * 0.15)\n-        \n-        if verbose >= 3:\n-            print(\"Creating temp image for modification...\")\n-        try:\n-            runHDIUtil(\"create\", dmg_name + \".temp\", srcfolder=\"dist\", format=\"UDRW\", size=size, volname=volname, ov=True)\n-        except subprocess.CalledProcessError as e:\n-            sys.exit(e.returncode)\n-        \n-        if verbose >= 3:\n-            print(\"Attaching temp image...\")\n-        try:\n-            output = runHDIUtil(\"attach\", dmg_name + \".temp\", readwrite=True, noverify=True, noautoopen=True, capture_stdout=True)\n-        except subprocess.CalledProcessError as e:\n-            sys.exit(e.returncode)\n-\n-        m = re.search(r\"/Volumes/(.+$)\", output)\n-        disk_root = m.group(0)\n-        disk_name = m.group(1)\n-        \n-        if verbose >= 2:\n-            print(\"+ Applying fancy settings +\")\n-        \n-        if \"background_picture\" in fancy:\n-            bg_path = os.path.join(disk_root, \".background\", os.path.basename(fancy[\"background_picture\"]))\n-            os.mkdir(os.path.dirname(bg_path))\n-            if verbose >= 3:\n-                print(fancy[\"background_picture\"], \"->\", bg_path)\n-            shutil.copy2(fancy[\"background_picture\"], bg_path)\n-        else:\n-            bg_path = None\n-        \n-        if fancy.get(\"applications_symlink\", False):\n-            os.symlink(\"/Applications\", os.path.join(disk_root, \"Applications\"))\n-        \n-        # The Python appscript package broke with OSX 10.8 and isn't being fixed.\n-        # So we now build up an AppleScript string and use the osascript command\n-        # to make the .dmg file pretty:\n-        appscript = Template( \"\"\"\n-        on run argv\n-           tell application \"Finder\"\n-             tell disk \"$disk\"\n-                   open\n-                   set current view of container window to icon view\n-                   set toolbar visible of container window to false\n-                   set statusbar visible of container window to false\n-                   set the bounds of container window to {$window_bounds}\n-                   set theViewOptions to the icon view options of container window\n-                   set arrangement of theViewOptions to not arranged\n-                   set icon size of theViewOptions to $icon_size\n-                   $background_commands\n-                   $items_positions\n-                   close -- close/reopen works around a bug...\n-                   open\n-                   update without registering applications\n-                   delay 5\n-                   eject\n-             end tell\n-           end tell\n-        end run\n-        \"\"\")\n-\n-        itemscript = Template('set position of item \"${item}\" of container window to {${position}}')\n-        items_positions = []\n-        if \"items_position\" in fancy:\n-            for name, position in fancy[\"items_position\"].items():\n-                params = { \"item\" : name, \"position\" : \",\".join([str(p) for p in position]) }\n-                items_positions.append(itemscript.substitute(params))\n-\n-        params = {\n-            \"disk\" : volname,\n-            \"window_bounds\" : \"300,300,800,620\",\n-            \"icon_size\" : \"96\",\n-            \"background_commands\" : \"\",\n-            \"items_positions\" : \"\\n                   \".join(items_positions)\n-            }\n-        if \"window_bounds\" in fancy:\n-            params[\"window_bounds\"] = \",\".join([str(p) for p in fancy[\"window_bounds\"]])\n-        if \"icon_size\" in fancy:\n-            params[\"icon_size\"] = str(fancy[\"icon_size\"])\n-        if bg_path is not None:\n-            # Set background file, then call SetFile to make it invisible.\n-            # (note: making it invisible first makes set background picture fail)\n-            bgscript = Template(\"\"\"set background picture of theViewOptions to file \".background:$bgpic\"\n-                   do shell script \"SetFile -a V /Volumes/$disk/.background/$bgpic\" \"\"\")\n-            params[\"background_commands\"] = bgscript.substitute({\"bgpic\" : os.path.basename(bg_path), \"disk\" : params[\"disk\"]})\n-\n-        s = appscript.substitute(params)\n-        if verbose >= 2:\n-            print(\"Running AppleScript:\")\n-            print(s)\n-\n-        p = subprocess.Popen(['osascript', '-'], stdin=subprocess.PIPE)\n-        p.communicate(input=s.encode('utf-8'))\n-        if p.returncode:\n-            print(\"Error running osascript.\")\n-\n-        if verbose >= 2:\n-            print(\"+ Finalizing .dmg disk image +\")\n-            time.sleep(5)\n-        \n-        try:\n-            runHDIUtil(\"convert\", dmg_name + \".temp\", format=\"UDBZ\", o=dmg_name + \".dmg\", ov=True)\n-        except subprocess.CalledProcessError as e:\n-            sys.exit(e.returncode)\n-        \n-        os.unlink(dmg_name + \".temp.dmg\")\n+    if verbose:\n+        print(\"Attaching temp image...\")\n+    output = run([\"hdiutil\", \"attach\", tempname, \"-readwrite\"], check=True, universal_newlines=True, stdout=PIPE).stdout\n+\n+    m = re.search(r\"/Volumes/(.+$)\", output)\n+    disk_root = m.group(0)\n+\n+    print(\"+ Applying fancy settings +\")\n+\n+    bg_path = os.path.join(disk_root, \".background\", os.path.basename('background.tiff'))\n+    os.mkdir(os.path.dirname(bg_path))\n+    if verbose:\n+        print('background.tiff', \"->\", bg_path)\n+    shutil.copy2('background.tiff', bg_path)\n+\n+    os.symlink(\"/Applications\", os.path.join(disk_root, \"Applications\"))\n+\n+    print(\"+ Finalizing .dmg disk image +\")\n+\n+    run([\"hdiutil\", \"detach\", f\"/Volumes/{appname}\"], universal_newlines=True)\n+\n+    run([\"hdiutil\", \"convert\", tempname, \"-format\", \"UDZO\", \"-o\", appname, \"-imagekey\", \"zlib-level=9\"], check=True, universal_newlines=True)\n+\n+    os.unlink(tempname)\n \n # ------------------------------------------------\n \n-if verbose >= 2:\n-    print(\"+ Done +\")\n+print(\"+ Done +\")\n \n sys.exit(0)"
      },
      {
        "sha": "e4a39d609343699cc54dee0d85e105fbce7088a4",
        "filename": "contrib/seeds/.gitignore",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/seeds/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/seeds/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/.gitignore?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1 @@\n+seeds_main.txt"
      },
      {
        "sha": "3bca094d3b9d0b5dbbaa2589e21aa303b30f6807",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -16,6 +16,12 @@ The seeds compiled into the release are created from sipa's DNS seed data, like\n \n ## Dependencies\n \n-Ubuntu:\n+Ubuntu, Debian:\n \n     sudo apt-get install python3-dnspython\n+\n+and/or for other operating systems:\n+\n+    pip install dnspython\n+\n+See https://dnspython.readthedocs.io/en/latest/installation.html for more information."
      },
      {
        "sha": "9be6a690a63d07f5d5dd6d7e1fdefab5584b07c0",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -34,7 +34,8 @@\n     r\"0.17.(0|0.1|1|2|99)|\"\n     r\"0.18.(0|1|99)|\"\n     r\"0.19.(0|1|99)|\"\n-    r\"0.20.99\"\n+    r\"0.20.(0|1|99)|\"\n+    r\"0.21.99\"\n     r\")\")\n \n def parseline(line):\n@@ -135,7 +136,7 @@ def lookup_asn(net, ip):\n             ipaddr = res.rstrip('.')            # 2.0.0.1.4.8.6.0.b.0.0.2.0.0.2.3\n             prefix = '.origin6'\n \n-        asn = int([x.to_text() for x in dns.resolver.query('.'.join(\n+        asn = int([x.to_text() for x in dns.resolver.resolve('.'.join(\n                    reversed(ipaddr.split('.'))) + prefix + '.asn.cymru.com',\n                    'TXT').response.answer][0].split('\\\"')[1].split(' ')[0])\n         return asn"
      },
      {
        "sha": "7b97436013871abb6a41ab02f1916cbec4df54c7",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 976,
        "deletions": 559,
        "changes": 1535,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,747 +1,1164 @@\n 2.39.173.126:8333\n-2.57.38.133:8333\n-2.92.39.39:15426\n-2.230.146.163:8333\n-5.2.74.175:8333\n-5.8.18.29:8333\n-5.39.222.39:8333\n+3.14.168.201:48333\n+4.36.112.44:8333\n+5.8.18.31:8333\n+5.14.200.167:8333\n+5.56.20.2:8333\n+5.102.146.99:8333\n 5.103.137.146:9333\n 5.128.87.126:8333\n-5.149.250.76:8333\n-5.182.39.200:8333\n+5.133.65.82:8333\n 5.187.55.242:8333\n 5.188.62.24:8333\n 5.188.62.33:8333\n-5.188.187.130:8333\n-5.189.153.179:8333\n-5.198.20.227:8333\n 5.199.133.193:8333\n-5.254.82.130:8333\n-13.237.147.15:8333\n+8.38.89.152:8333\n+13.231.20.249:8333\n 18.27.79.17:8333\n 20.184.15.116:8433\n-23.17.160.159:8333\n+23.28.205.97:8333\n+23.106.252.230:8333\n+23.175.0.202:8333\n 23.175.0.212:8333\n+23.241.250.252:8333\n 23.245.24.154:8333\n-24.76.122.108:8333\n-24.96.73.156:8333\n-24.96.125.57:8333\n-24.155.196.27:8333\n-24.203.88.167:8333\n-24.233.245.188:8333\n-24.246.31.205:8333\n-31.6.98.94:8333\n-31.14.201.156:8333\n-31.25.241.224:8335\n-31.43.140.190:8333\n+24.86.184.66:8333\n+24.116.246.9:8333\n+24.141.34.166:8333\n+24.155.196.246:8333\n+24.157.130.222:8333\n+24.188.176.255:8333\n+24.237.70.53:8333\n+27.124.4.67:8333\n+31.17.70.80:8333\n+31.21.8.32:8333\n+31.45.118.10:8333\n+31.132.17.56:8333\n 31.134.121.223:8333\n-31.173.48.61:8333\n-34.203.169.172:8333\n-35.178.31.4:8333\n-35.185.172.62:8333\n-35.206.171.89:8333\n-35.208.87.203:8333\n-37.61.219.34:8333\n-37.143.210.19:8333\n-37.143.211.83:8333\n-37.235.128.11:8333\n-37.252.190.88:8333\n-38.102.134.85:8333\n-39.109.0.150:8333\n-42.200.72.205:8333\n-43.229.132.102:8333\n+32.214.183.114:8333\n+35.137.236.32:8333\n+35.185.145.105:8333\n+35.209.51.212:8333\n+35.245.175.76:8333\n+37.116.95.41:8333\n+37.143.9.107:8333\n+37.143.116.43:8333\n+37.191.244.149:8333\n+37.211.78.253:8333\n+37.221.209.222:24333\n+37.228.92.110:8333\n+43.225.62.107:8333\n+43.225.157.152:8333\n 45.36.184.6:8333\n-45.58.49.35:8333\n-45.76.18.47:8333\n-45.115.239.108:8333\n-46.23.87.218:8333\n+45.48.168.16:8333\n+45.85.85.8:8333\n+45.85.85.9:8333\n+45.129.180.214:8333\n+45.149.78.128:8333\n+45.151.125.218:8333\n+45.154.255.46:8333\n+45.155.157.239:8333\n 46.28.132.34:8333\n+46.28.204.21:8333\n 46.32.50.98:8333\n-46.36.97.10:8333\n-46.38.237.108:8333\n-46.39.129.82:8333\n-46.160.195.121:8333\n+46.59.13.35:8333\n+46.128.40.173:8333\n+46.128.140.193:8333\n+46.146.248.89:8333\n 46.166.162.45:20001\n-46.188.30.118:8333\n+46.188.15.6:8333\n+46.229.165.142:8333\n 46.229.238.187:8333\n+46.249.83.82:8333\n 46.254.217.169:8333\n-47.52.114.198:8885\n-47.88.84.126:8333\n-47.108.29.152:8333\n-47.108.30.165:8333\n+47.74.191.34:8333\n+47.115.53.163:8333\n+47.187.26.135:8333\n 47.222.103.234:8333\n-49.245.50.224:8333\n-50.53.250.162:8333\n-50.225.198.67:6000\n+47.253.5.99:8333\n+49.232.82.76:8333\n+49.247.215.43:8333\n+50.2.13.166:8333\n+50.34.39.72:8333\n+50.45.232.189:8333\n+50.68.104.92:8333\n+51.68.36.57:8333\n 51.154.60.34:8333\n-54.242.17.7:8333\n-58.146.222.198:8333\n+52.169.238.66:8333\n+54.197.30.223:8333\n+54.227.66.57:8333\n 58.158.0.86:8333\n-59.149.205.197:8333\n-60.251.129.61:8336\n-61.155.5.4:8333\n-62.45.4.139:8333\n-62.97.244.242:8333\n-62.109.18.23:8333\n-62.133.194.156:8333\n-62.138.0.217:8333\n+58.171.135.242:8333\n+58.229.208.158:8333\n+60.244.109.19:8333\n+62.38.75.208:8333\n+62.74.143.11:8333\n+62.80.227.49:8333\n 62.152.58.16:9421\n-63.143.34.98:8333\n-63.211.111.122:8333\n-63.224.249.240:8333\n-64.182.119.36:8333\n-64.229.105.111:8333\n-65.27.104.112:8333\n-65.183.76.73:8333\n-66.151.242.154:8335\n-66.206.13.70:8333\n+62.210.167.199:8333\n+62.234.188.160:8333\n+62.251.54.163:8333\n+63.227.116.162:8333\n+65.19.155.82:8333\n+65.95.49.102:8333\n+66.18.172.21:8333\n 66.240.237.155:8333\n-66.240.237.172:8333\n-67.205.140.145:8333\n 67.210.228.203:8333\n-67.221.193.55:8333\n-67.222.131.151:8333\n-68.110.90.111:8333\n-68.142.33.36:8333\n-68.199.157.183:8333\n-68.202.128.19:8333\n-68.206.21.144:8333\n 69.30.215.42:8333\n-69.55.234.74:8333\n-69.59.18.22:8333\n-69.145.122.160:8333\n-69.175.49.230:8333\n-70.64.48.41:8333\n-71.33.232.126:8333\n-71.73.18.32:8333\n-71.146.114.111:8333\n+69.59.18.206:8333\n+69.64.33.71:8333\n+69.119.193.9:8333\n+69.209.23.72:8333\n+70.123.125.237:8333\n+70.185.56.136:8333\n+71.38.90.235:8333\n+72.12.73.70:8333\n 72.53.134.182:8333\n-73.126.97.99:8333\n-74.83.126.150:8333\n-74.84.128.158:9333\n-74.98.242.97:8333\n+72.225.7.80:8333\n+72.234.182.39:8333\n+72.250.184.57:8333\n+73.83.103.79:8333\n 74.118.137.119:8333\n+74.133.100.74:8333\n+74.215.219.214:8333\n 74.220.255.190:8333\n-75.45.51.41:8333\n 75.158.39.231:8333\n-76.11.17.187:8333\n-76.84.79.211:8333\n-76.167.179.75:8333\n-77.53.158.137:8333\n-77.119.229.106:8333\n+77.53.53.196:8333\n+77.70.16.245:8333\n+77.105.87.97:8333\n+77.120.113.69:8433\n 77.120.122.22:8433\n-77.120.122.114:8433\n-77.163.136.136:8333\n-77.220.140.74:8333\n+77.166.83.167:8333\n 77.247.178.130:8333\n-78.128.62.52:8333\n-78.128.79.22:8333\n+78.27.139.13:8333\n+78.63.28.146:8333\n+78.83.103.4:8333\n 78.141.123.99:8333\n-78.143.214.223:8333\n-78.159.99.85:8333\n 79.77.33.131:8333\n-79.120.70.47:8333\n-79.142.129.218:8333\n-79.175.125.210:8333\n-80.47.156.43:8333\n+79.77.133.30:8333\n+79.101.1.25:8333\n+79.117.192.229:8333\n+79.133.228.55:8333\n+79.146.21.163:8333\n 80.89.203.172:8001\n 80.93.213.246:8333\n-80.111.142.213:8333\n-80.147.82.165:8333\n-80.211.191.11:8333\n-80.211.245.151:8333\n+80.192.98.110:8334\n 80.229.28.60:8333\n-80.229.168.1:8333\n+80.232.247.210:8333\n+80.242.39.76:8333\n 80.253.94.252:8333\n-81.4.102.69:8333\n+81.0.198.25:8333\n 81.7.13.84:8333\n-81.10.205.21:8333\n 81.117.225.245:8333\n-81.177.157.81:39993\n-81.235.185.150:8333\n+81.135.137.225:8333\n+81.171.22.143:8333\n+81.191.233.134:8333\n+81.232.78.75:8333\n+81.242.91.23:8333\n 82.29.58.109:8333\n-82.117.166.77:8333\n-82.118.20.37:8333\n-82.146.50.143:8333\n-82.146.153.130:8333\n+82.136.99.22:8333\n 82.149.97.25:17567\n-82.169.130.61:8333\n-82.181.179.230:8333\n-82.181.218.229:8333\n+82.165.19.48:8333\n 82.194.153.233:8333\n-82.195.237.253:8333\n-82.197.218.97:8333\n+82.197.215.125:8333\n 82.199.102.10:8333\n-82.199.102.133:8333\n-82.202.197.224:8333\n-82.217.245.7:8333\n-82.221.111.136:8333\n-83.89.27.50:8333\n-83.89.250.69:8333\n-83.167.27.4:8333\n-83.208.254.182:8333\n+82.200.205.30:8333\n+82.202.68.231:8333\n+82.221.128.31:8333\n+82.228.6.131:8333\n+83.85.139.94:8333\n+83.99.245.20:8333\n+83.137.41.10:8333\n+83.174.209.87:8333\n 83.217.8.31:44420\n-83.221.211.116:8335\n-83.243.59.41:8333\n-83.251.241.0:8333\n 84.38.3.249:8333\n-84.40.94.170:8333\n+84.38.185.122:8333\n+84.92.92.247:8333\n 84.192.16.234:8333\n-84.209.9.23:8333\n-84.234.96.115:8333\n-84.248.14.210:8333\n-85.119.83.25:8333\n-85.144.119.222:8333\n-85.145.238.93:8333\n+84.194.158.124:8333\n+84.212.145.24:8333\n+84.212.244.95:8333\n+84.216.51.36:8333\n+84.255.249.163:8333\n+85.25.255.147:8333\n+85.70.156.209:8333\n+85.145.142.46:8333\n+85.170.233.95:8333\n 85.184.138.108:8333\n 85.190.0.5:8333\n-85.202.11.119:8333\n-85.204.96.207:8333\n-85.208.69.13:8333\n-85.214.90.161:8333\n-85.240.233.220:8333\n+85.191.200.51:8333\n+85.192.191.6:18500\n+85.194.238.131:8333\n+85.195.54.110:8333\n+85.214.161.252:8333\n+85.214.185.51:8333\n 85.241.106.203:8333\n-86.15.38.61:8333\n-86.76.7.132:8333\n+85.246.168.252:8333\n+86.56.238.247:8333\n+87.61.90.230:8333\n 87.79.68.86:8333\n 87.79.94.221:8333\n-87.118.116.237:8333\n 87.120.8.5:20008\n-87.222.22.255:8333\n-87.233.181.146:8333\n 87.246.46.132:8333\n-87.249.207.89:8333\n-88.86.116.140:8333\n-88.86.116.142:8333\n-88.88.13.249:8333\n+87.247.111.222:8333\n+88.84.222.252:8333\n+88.86.243.241:8333\n+88.87.93.52:1691\n+88.119.197.200:8333\n+88.129.253.94:8333\n 88.147.244.250:8333\n-88.150.230.95:8333\n-88.202.202.221:8333\n 88.208.3.195:8333\n 88.212.44.33:8333\n-89.25.80.42:8333\n-89.28.117.31:8333\n+88.214.57.95:8333\n 89.106.199.38:8333\n-89.142.75.60:8333\n+89.108.126.228:8333\n+89.115.120.43:8333\n+89.133.68.65:8333\n 89.190.19.162:8333\n-89.212.9.96:8333\n-89.212.75.6:8333\n-89.248.250.12:8333\n-90.94.83.26:8333\n+89.248.172.10:8333\n+90.146.153.21:8333\n 90.182.165.18:8333\n-91.185.198.234:8333\n+91.106.188.229:8333\n 91.193.237.116:8333\n 91.204.99.178:8333\n 91.204.149.5:8333\n-91.210.24.30:8333\n-91.211.88.33:8333\n-91.216.149.28:8333\n-91.222.128.59:8333\n-92.18.180.225:8333\n-92.53.89.123:8333\n-92.240.69.195:8333\n+91.214.70.63:8333\n+91.228.152.236:8333\n+92.12.154.115:8333\n 92.249.143.44:8333\n-92.255.176.109:8333\n-93.57.81.162:8333\n-93.90.193.195:8330\n-93.90.207.46:8333\n-93.115.26.186:20004\n-93.115.240.26:8333\n+93.12.66.98:8333\n+93.46.54.4:8333\n+93.115.20.130:8333\n 93.123.180.164:8333\n-93.175.204.121:8333\n-93.180.178.213:8333\n+93.189.145.169:8333\n+93.241.228.102:8333\n 94.19.7.55:8333\n+94.19.128.204:8333\n 94.52.112.227:8333\n-94.53.2.181:8333\n-94.72.143.26:8333\n-94.103.120.173:8333\n-94.237.64.138:8333\n-94.237.80.207:8333\n-94.242.255.31:8333\n-95.24.48.84:15426\n-95.42.2.113:8333\n+94.154.96.130:8333\n+94.156.174.201:8333\n+94.158.246.183:8333\n+94.177.171.73:8333\n+94.199.178.233:8100\n+94.237.125.30:8333\n+94.247.134.77:8333\n+95.48.228.45:8333\n 95.69.249.63:8333\n-95.79.35.133:8333\n+95.82.146.70:8333\n+95.83.73.31:8333\n+95.84.164.43:8333\n 95.87.226.56:8333\n-95.90.3.210:8333\n 95.110.234.93:8333\n-95.156.252.34:8333\n-95.211.189.3:8333\n-95.217.9.207:8333\n-96.9.80.109:8333\n-96.245.218.247:8333\n-97.104.206.3:8333\n-98.29.195.204:8333\n-99.231.196.126:8333\n-101.100.174.24:8333\n+95.163.71.126:8333\n+95.164.65.194:8333\n+95.174.66.211:8333\n+95.211.174.137:8333\n+95.216.11.156:8433\n+96.47.114.108:8333\n+97.84.232.105:8333\n+97.99.205.241:8333\n+98.25.193.114:8333\n+99.115.25.13:8333\n+101.32.19.184:8333\n 101.100.174.240:8333\n+102.132.245.16:8333\n 103.14.244.190:8333\n-103.37.205.47:8333\n-103.60.109.184:20008\n+103.76.48.5:8333\n 103.84.84.250:8335\n-103.85.190.218:20000\n-103.99.168.100:8333\n-103.99.168.130:8333\n-103.214.146.86:8333\n+103.99.168.150:8333\n+103.109.101.216:8333\n+103.122.247.102:8333\n+103.129.13.45:8333\n+103.198.192.14:20008\n+103.224.119.99:8333\n+103.231.191.7:8333\n+103.235.230.196:8333\n 104.171.242.155:8333\n-104.199.184.15:8333\n-104.244.223.151:8333\n-105.29.76.194:8333\n-107.150.45.18:8333\n-107.180.77.21:8333\n-108.58.252.82:8333\n+104.238.220.199:8333\n+106.163.158.127:8333\n+107.150.41.179:8333\n+107.159.93.103:8333\n 108.183.77.12:8333\n-109.72.83.127:8333\n+109.9.175.65:8333\n 109.99.63.159:8333\n-109.109.36.19:8333\n 109.110.81.90:8333\n-109.173.112.224:8333\n-109.202.107.125:8333\n-109.205.109.56:8333\n-109.236.84.141:8333\n-109.238.81.82:8333\n+109.123.213.130:8333\n+109.134.232.81:8333\n+109.169.20.168:8333\n+109.199.241.148:8333\n+109.229.210.6:8333\n+109.236.105.40:8333\n 109.248.206.13:8333\n-111.40.4.103:8333\n-111.90.140.217:8333\n-111.90.158.212:8333\n-112.213.103.98:8333\n+111.42.74.65:8333\n+111.90.140.179:8333\n+112.215.205.236:8333\n 113.52.135.125:8333\n+114.23.246.137:8333\n 115.47.141.250:8885\n 115.70.110.4:8333\n-116.87.15.244:8333\n+116.34.189.55:8333\n+118.103.126.140:28333\n+118.189.187.219:8333\n+119.3.208.236:8333\n+119.8.47.225:8333\n 119.17.151.61:8333\n-119.171.134.87:8333\n-121.18.238.39:8333\n-121.78.223.186:8333\n-121.98.205.102:8333\n+120.25.24.30:8333\n+120.241.34.10:8333\n+121.98.205.100:8333\n 122.112.148.153:8339\n 122.116.42.140:8333\n-124.160.119.93:8333\n+124.217.235.180:8333\n 125.236.215.133:8333\n 129.13.189.212:8333\n-129.97.243.18:8333\n 130.185.77.105:8333\n-131.114.10.233:8333\n-131.188.40.34:8333\n-132.249.239.163:8333\n-134.19.186.195:8333\n-134.249.187.97:8333\n-136.144.215.219:8333\n+131.188.40.191:8333\n+131.193.220.15:8333\n+135.23.124.239:8333\n+136.33.185.32:8333\n+136.56.170.96:8333\n 137.226.34.46:8333\n+138.229.26.42:8333\n 139.9.249.234:8333\n 141.101.8.36:8333\n-143.89.121.207:8333\n 143.176.224.104:8333\n+144.2.69.224:8333\n 144.34.161.65:18333\n-147.253.70.208:8333\n-148.66.50.82:8335\n-153.92.127.216:8333\n-153.120.115.15:8333\n-154.52.98.2:8444\n-155.4.116.169:8333\n+144.91.116.44:8333\n+144.137.29.181:8333\n+148.66.50.50:8335\n+148.72.150.231:8333\n+148.170.212.44:8333\n+149.167.99.190:8333\n+154.92.16.191:8333\n+154.221.27.21:8333\n 156.19.19.90:8333\n-156.34.178.138:8333\n-157.13.61.66:8333\n-157.13.61.67:8333\n+156.241.5.190:8333\n+157.13.61.76:8333\n+157.13.61.80:8333\n+157.230.166.98:14391\n+158.75.203.2:8333\n+158.181.125.150:8333\n 158.181.226.33:8333\n 159.100.242.254:8333\n 159.100.248.234:8333\n-159.253.98.209:8333\n+159.138.87.18:8333\n 160.16.0.30:8333\n-160.20.145.62:8333\n+162.0.227.54:8333\n+162.0.227.56:8333\n 162.62.18.226:8333\n-162.62.26.218:8333\n-162.209.88.174:8333\n+162.209.1.233:8333\n+162.243.175.86:8333\n 162.244.80.208:8333\n+162.250.188.87:8333\n+162.250.189.53:8333\n 163.158.202.112:8333\n-163.172.181.191:8333\n-166.62.100.55:8333\n-167.114.35.12:8333\n-168.62.167.209:8200\n-168.235.74.110:8333\n-168.235.90.188:8333\n-170.249.37.243:8333\n-172.99.120.113:8333\n-173.21.218.95:8333\n-173.51.177.2:8333\n-173.95.72.234:8333\n+163.158.243.230:8333\n+165.73.62.31:8333\n+166.62.82.103:32771\n+166.70.94.106:8333\n+167.86.90.239:8333\n+169.44.34.203:8333\n+172.93.101.73:8333\n+172.105.7.47:8333\n+173.23.103.30:8000\n+173.53.79.6:8333\n+173.70.12.86:8333\n+173.89.28.137:8333\n+173.176.184.54:8333\n 173.208.128.10:8333\n-173.209.44.34:8333\n-173.231.57.194:8333\n+173.254.204.69:8333\n 173.255.204.124:8333\n-174.65.135.60:8333\n 174.94.155.224:8333\n-174.115.120.186:8333\n-176.53.160.170:8333\n-176.85.188.213:8333\n+174.114.102.41:8333\n+174.114.124.12:8333\n+176.10.227.59:8333\n+176.31.224.214:8333\n+176.74.136.237:8333\n 176.99.2.207:8333\n-176.121.14.157:8333\n-176.122.157.173:8333\n-176.126.85.34:8333\n-176.198.120.197:8334\n-178.61.141.198:8333\n-178.119.183.34:8333\n-178.234.29.184:8333\n+176.106.191.2:8333\n+176.160.228.9:8333\n+176.191.182.3:8333\n+176.212.185.153:8333\n+176.241.137.183:8333\n+177.38.215.73:8333\n+178.16.222.146:8333\n+178.132.2.246:8333\n+178.143.191.171:8333\n+178.148.172.209:8333\n+178.148.226.180:8333\n+178.150.96.46:8333\n+178.182.227.50:8333\n+178.236.137.63:8333\n 178.255.42.126:8333\n-179.48.251.41:8333\n-180.150.73.100:8333\n-181.47.220.242:8333\n-181.170.139.47:8333\n+180.150.52.37:8333\n+181.39.32.99:8333\n+181.48.77.26:8333\n+181.52.223.52:8333\n+181.238.51.152:8333\n+183.88.223.208:8333\n 183.110.220.210:30301\n-183.230.93.139:8333\n-184.95.58.164:8663\n+184.95.58.166:8336\n 184.164.147.82:41333\n-185.15.92.18:20993\n-185.25.60.199:8333\n-185.52.3.185:8333\n-185.61.138.4:8333\n+184.171.208.109:8333\n+185.25.48.39:8333\n+185.25.48.184:8333\n 185.64.116.15:8333\n-185.83.110.53:8333\n-185.83.214.123:8333\n+185.80.219.132:8333\n+185.85.3.140:8333\n 185.95.219.53:8333\n-185.96.94.24:8333\n-185.102.71.6:8333\n-185.138.35.183:8333\n-185.140.252.253:8333\n-185.143.145.113:8333\n+185.108.244.41:8333\n+185.134.233.121:8333\n+185.145.128.21:8333\n 185.148.3.227:8333\n-185.157.160.220:8333\n-185.163.44.44:8333\n-185.176.221.32:8333\n+185.153.196.240:8333\n+185.158.114.184:8333\n+185.165.168.196:8333\n+185.181.230.74:8333\n+185.185.26.141:8111\n 185.186.208.162:8333\n-185.198.58.47:8333\n-185.198.59.183:8333\n-185.215.224.22:8333\n-185.232.28.254:8333\n-185.239.236.116:8333\n+185.189.132.178:57780\n+185.211.59.50:8333\n+185.233.148.146:8333\n+185.238.129.113:8333\n+185.249.199.106:8333\n 185.251.161.54:8333\n+187.189.153.136:8333\n+188.37.24.190:8333\n 188.42.40.234:18333\n-188.65.212.138:8333\n-188.65.212.157:8333\n+188.61.46.36:8333\n 188.68.45.143:8333\n 188.127.229.105:8333\n-188.131.177.130:8333\n+188.134.6.84:8333\n 188.134.8.36:8333\n-188.134.88.5:8333\n-188.138.17.92:8333\n-188.150.157.11:8333\n-188.208.111.62:8333\n-188.231.177.149:8333\n-190.2.145.177:8333\n-190.104.249.44:8333\n+188.214.129.65:20012\n+188.230.168.114:8333\n+189.34.14.93:8333\n+189.207.46.32:8333\n+190.211.204.68:8333\n 191.209.21.188:8333\n 192.3.11.20:8333\n-192.3.11.24:8333\n-192.34.56.59:8333\n+192.3.185.210:8333\n 192.65.170.15:8333\n 192.65.170.50:8333\n 192.146.137.18:8333\n-192.166.47.32:8333\n-192.169.94.29:8333\n+192.157.202.178:8333\n 192.227.80.83:8333\n-192.254.65.126:8333\n 193.10.203.23:8334\n-193.29.57.4:8333\n+193.25.6.206:8333\n+193.42.110.30:8333\n 193.58.196.212:8333\n-193.59.41.11:8333\n-193.84.116.22:8333\n-193.108.131.43:8333\n-193.148.71.10:8333\n-193.169.244.190:8333\n+193.106.28.8:8333\n+193.189.190.123:8333\n 193.194.163.35:8333\n 193.194.163.53:8333\n-194.5.159.197:8333\n 194.14.246.205:8333\n-194.135.92.96:8333\n+194.36.91.253:8333\n+194.126.113.135:8333\n 194.135.135.69:8333\n-194.158.92.150:8333\n-194.187.251.163:31239\n+195.56.63.4:8333\n 195.56.63.5:8333\n-195.56.63.10:8333\n 195.67.139.54:8333\n-195.95.225.17:8333\n 195.135.194.8:8333\n-195.154.113.90:8333\n-195.206.20.114:8333\n+195.202.169.149:8333\n 195.206.105.42:8333\n 195.209.249.164:8333\n-195.224.116.20:8333\n 198.1.231.6:8333\n-198.251.83.19:8333\n-199.48.83.58:8333\n-199.96.50.211:8333\n-199.188.204.25:8333\n-199.192.20.201:8333\n-200.76.194.7:8333\n-200.87.116.213:8333\n-202.28.194.82:8333\n+198.200.43.215:8333\n+199.182.184.204:8333\n+199.247.7.208:8333\n+199.247.249.188:8333\n+200.7.252.118:8333\n+200.20.186.254:8333\n+200.83.166.136:8333\n 202.55.87.45:8333\n+202.79.167.65:8333\n+202.108.211.135:8333\n+202.169.102.73:8333\n 203.130.48.117:8885\n 203.132.95.10:8333\n-204.14.245.180:8333\n-204.152.203.98:8333\n-205.209.162.98:8333\n-206.221.178.149:8333\n+203.151.166.123:8333\n+204.93.113.108:8333\n+204.111.241.195:8333\n+206.124.149.66:8333\n+207.115.102.98:8333\n+207.229.46.150:8333\n+208.76.252.198:8333\n+208.100.13.56:8333\n+208.100.178.175:8333\n 208.110.99.105:8333\n+209.6.210.179:8333\n 209.133.220.74:8333\n-209.151.237.71:8333\n-211.149.170.31:8333\n-212.51.132.226:8333\n-212.241.70.213:8333\n-213.21.15.22:8333\n-213.136.83.8:8333\n-213.227.152.108:8333\n-213.254.23.116:8333\n-216.108.236.180:8333\n-216.194.165.98:8333\n+209.141.57.57:8333\n+211.27.147.67:8333\n+212.34.225.118:8333\n+212.89.173.216:8333\n+212.99.226.36:9020\n+212.237.96.98:8333\n+213.89.131.53:8333\n+216.38.129.164:8333\n+216.134.165.55:8333\n+216.146.251.8:8333\n+216.189.190.95:8333\n+216.226.128.189:8333\n 216.236.164.82:8333\n-217.16.185.165:8333\n-217.21.24.146:8333\n+217.19.216.210:8333\n 217.26.32.10:8333\n 217.64.47.138:8333\n 217.64.133.220:8333\n 217.92.55.246:8333\n-217.172.244.9:8333\n-218.75.140.45:8333\n-219.75.122.47:8333\n-220.233.138.130:8333\n-221.130.29.230:18421\n-222.122.49.40:8333\n-222.186.169.1:8333\n-222.222.43.29:8333\n+218.31.113.245:8333\n+218.255.242.114:8333\n+220.133.39.61:8333\n 223.16.30.175:8333\n+[2001:19f0:6001:306f:ec4:7aff:fe8f:66ec]:8333\n [2001:1bc0:cc::a001]:8333\n [2001:1c02:2f18:d00:b62e:99ff:fe49:d492]:8333\n-[2001:250:200:7:d6a9:fcf4:e78d:2d82]:8333\n-[2001:41c9:1:424::231]:8333\n-[2001:41d0:1004:19b4::]:8333\n-[2001:44b8:4195:1801:5c73:5d67:d2a6:9910]:8333\n-[2001:470:88ff:2e::1]:8333\n+[2001:4100:0:64::93]:8333\n+[2001:4100:0:64:dcaf:afff:fe00:6707]:8333\n [2001:470:a:c13::2]:8333\n-[2001:4800:7821:101:be76:4eff:fe04:9f50]:8333\n-[2001:4801:7819:74:b745:b9d5:ff10:aaec]:8333\n-[2001:48d0:1:2163:0:ff:febe:5a80]:8333\n+[2001:4801:7819:74:b745:b9d5:ff10:a61a]:8333\n [2001:4ba0:fffa:5d::93]:8333\n+[2001:610:1908:ff01:f816:3eff:fe33:2e32]:8333\n [2001:638:a000:4140::ffff:191]:8333\n+[2001:648:2800:131:4b1f:f6fc:20f7:f99f]:8333\n [2001:678:7dc:8::2]:8333\n-[2001:678:ec:1:250:56ff:fea7:47e9]:8333\n-[2001:67c:10ec:2a49:8000::1082]:8333\n+[2001:678:cc8::1:10:88]:20008\n+[2001:67c:1220:80c::93e5:dd2]:8333\n+[2001:67c:1220:80c:e5dc:ad0c:9289:c28f]:8333\n [2001:67c:16dc:1201:5054:ff:fe17:4dac]:8333\n-[2001:67c:21ec:1000::a]:8333\n+[2001:67c:2354:2::22]:8333\n [2001:67c:26b4:12:7ae3:b5ff:fe04:6f9c]:8333\n-[2001:67c:2db8:6::45]:8333\n-[2001:700:300:1513:29c7:2430:190e:ab59]:8333\n+[2001:67c:2f0::20:fa]:8333\n [2001:718:801:311:5054:ff:fe19:c483]:8333\n-[2001:818:e245:f800:4df:2bdf:ecf5:eb60]:8333\n+[2001:8d8:87c:7c00::99:3c1]:8333\n [2001:8f1:1404:3700:8e49:715a:2e09:b634]:9444\n-[2001:ba8:1f1:f069::2]:8333\n-[2001:bb8:4008:20:648c:5eff:fe74:ce4]:8333\n-[2001:da8:d800:821:a7d5:f5a7:530d:b71e]:8333\n+[2001:b07:5d29:99a5:194b:3874:d65e:a90d]:8333\n+[2001:ba8:1f1:f0fe::2]:8333\n+[2001:bc8:1200:0:dac4:97ff:fe2a:3554]:20008\n+[2001:da8:100d:22:10fa:d85f:10f2:21fd]:8333\n+[2001:da8:8001:7a39:f035:7d:b99f:eb79]:8333\n [2001:e42:103:100::30]:8333\n-[2001:e68:7400:2:6854:419e:221c:82f3]:8333\n-[2002:b610:1ca3::b610:1ca3]:8333\n-[2002:b6ff:3dca::b6ff:3dca]:28364\n-[2400:2651:42e0:3300:40b4:576d:d14c:65d4]:8333\n+[2400:2412:103:c900:825:8f20:eaff:65c2]:8333\n [2400:4052:e20:4f00:69fe:bb33:7b1c:a1ca]:8333\n-[2401:2500:203:184::15]:8333\n+[2401:1800:7800:105:be76:4eff:fe1c:b35]:8333\n [2401:3900:2:1::2]:8333\n-[2401:a400:3200:5600:14ee:f361:4bdc:1f7c]:8333\n+[2401:b140::44:150]:8333\n [2401:d002:4402:0:8f28:591a:6ea0:c683]:8333\n-[2402:cb40:1000:504::dead]:8333\n+[2403:6200:8821:3d68:195b:87e9:6819:d5c8]:8333\n+[2405:6580:2140:3a00:c28c:983:364b:5d70]:8333\n+[2405:9800:b911:a18a:58eb:cd3c:9d82:ea4a]:8333\n [2405:aa00:2::40]:8333\n [2409:10:ca20:1df0:224:e8ff:fe1f:60d9]:8333\n-[2409:8a15:4a1a:2830:7285:c2ff:fe70:60a4]:8333\n-[2409:8a1e:6938:d2c0:2e0:70ff:fe86:cb59]:8333\n-[2409:8a28:421:2580:2e0:70ff:fe8b:13e]:8333\n-[2409:8a28:421:2770:2e0:70ff:fe87:fecb]:8333\n+[2409:8a1e:a9af:3660:1c5a:5b6b:8a2d:9848]:8333\n+[2409:8a1e:a9af:3660:404:39ba:88f2:e8df]:8333\n+[240b:10:9141:400:49b4:3a2e:1e5:84c]:8333\n+[240d:1a:759:6000:a7b1:451a:8874:e1ac]:8333\n [240d:1a:759:6000:ddab:3141:4da0:8878]:8333\n-[2600:3c01::f03c:91ff:fecd:1b95]:8333\n-[2600:6c40:7980:27:20a:f7ff:fe69:f4d5]:8333\n-[2602:ffc5::ffc5:b844]:8333\n-[2604:2d80:c808:857b:8d6:9e1c:7131:4bea]:8333\n+[2600:8805:2400:14e:12dd:b1ff:fef2:3013]:8333\n+[2601:602:8d80:b63:dc3e:24ff:fe92:5eb]:8333\n+[2602:ffb6:4:2798:f816:3eff:fe2f:5441]:8333\n+[2602:ffb6:4:739e:f816:3eff:fe00:c2b3]:8333\n+[2602:ffb8::208:72:57:200]:8333\n+[2604:1380:4111:9300::1]:8333\n [2604:4300:a:2e:21b:21ff:fe11:392]:8333\n+[2604:4500::2e06]:8112\n+[2604:5500:706a:4000:fc79:b9bb:1d7:c325]:8333\n [2604:5500:c134:4000::3fc]:32797\n-[2604:5500:c2a3:7b00:cc6:373b:44a8:caa4]:8333\n-[2604:6000:6e85:4a01:a82d:f9ff:fef5:28b9]:8333\n-[2604:7780:303:80::80]:8333\n+[2604:6800:5e11:162:5c8f:d2ff:fe26:146f]:8333\n [2605:4d00::50]:8333\n-[2605:9880:0:777:225:90ff:fefc:8958]:8333\n+[2605:6400:20:13bf:df1d:181c:83bb:22e8]:8333\n [2605:ae00:203::203]:8333\n [2605:c000:2a0a:1::102]:8333\n-[2605:e000:1127:8fc:ec63:a191:32c2:633c]:8333\n-[2605:e200:d202:300:20c:29ff:fef1:85ec]:8333\n-[2605:f700:100:400::131:5b54]:8333\n-[2606:c680:0:b:3830:34ff:fe66:6663]:8333\n-[2607:4480:2:1:38:102:69:70]:8333\n-[2607:9280:b:73b:250:56ff:fe21:9c2f]:8333\n-[2607:f128:40:1703::2]:8333\n-[2607:f188:0:4:eef4:bbff:fecc:6668]:8333\n-[2607:f2c0:e1e2:11:1044:9b7a:b81e:1d74]:8333\n+[2607:f2c0:f00e:300::54]:8333\n+[2607:f2f8:ad40:bc1::1]:8333\n [2607:f470:8:1048:ae1f:6bff:fe70:7240]:8333\n+[2607:ff28:800f:97:225:90ff:fe75:1110]:8333\n [2620:11c:5001:1118:d267:e5ff:fee9:e673]:8333\n-[2620:6e:a000:1:42:42:42:42]:8333\n-[2804:14d:baa7:9674:21e:67ff:fea8:d799]:8333\n-[2804:14d:baa7:9674:3615:9eff:fe23:d610]:8333\n-[2804:39e8:ff85:a600:7285:c2ff:feae:9925]:8333\n-[2804:d41:aa01:1600:5a2d:3b27:3b83:2b45]:8333\n-[2a00:12d8:7001:1:46e7:6915:75be:92f9]:8333\n+[2620:6e:a000:2001::6]:8333\n+[2804:14d:4c93:9809:9769:da80:1832:3480]:8333\n+[2a00:1328:e101:c00::163]:8333\n [2a00:1398:4:2a03:215:5dff:fed6:1033]:8333\n+[2a00:13a0:3015:1:85:14:79:26]:8333\n [2a00:1630:14::101]:8333\n [2a00:1768:2001:27::ef6a]:8333\n [2a00:1828:a004:2::666]:8333\n-[2a00:1838:36:142::ec73]:8333\n+[2a00:1838:36:17::38cb]:8333\n [2a00:1838:36:7d::d3c6]:8333\n-[2a00:1f40:2::1126]:8333\n-[2a00:23a8:41d0:5800:20c:29ff:fe0d:6a75]:8333\n-[2a00:23c5:fd01:9f00:6317:7c02:788f:88ea]:8333\n-[2a00:6020:13c2:3800:be6a:a1c8:c9e7:65ec]:8333\n-[2a00:63c2:8:88::2]:8333\n-[2a00:7143:3::227]:8333\n-[2a00:7b80:452:2000::138]:8333\n+[2a00:1c10:2:709:58f7:e0ff:fe24:a0ba]:22220\n+[2a00:1c10:2:709::217]:22220\n+[2a00:1f40:5001:100::31]:8333\n+[2a00:6020:1395:1400:baf7:2d43:60b3:198b]:8333\n+[2a00:7c80:0:10b::3faf]:8333\n [2a00:8a60:e012:a00::21]:8333\n+[2a00:ab00:603:84::3]:8333\n+[2a00:bbe0:cc:0:62a4:4cff:fe23:7510]:8333\n [2a00:ca8:a1f:3025:f949:e442:c940:13e8]:8333\n-[2a00:d70:0:15:f816:3eff:fe73:d819]:8333\n-[2a00:d880:5:331::3978]:8333\n-[2a01:238:420f:9200:fa5a:1a4b:1e6a:fadf]:8333\n+[2a00:d2a0:a:3d00:1cdf:38bb:a7d6:c251]:8333\n+[2a00:d880:11::20e]:8333\n+[2a00:ec0:7207:9100:5f8f:25dd:2574:3982]:8333\n+[2a00:f820:433::36]:8333\n+[2a01:138:a017:b018::42]:8333\n [2a01:430:17:1::ffff:1153]:8333\n-[2a01:488:66:1000:53a9:1573:0:1]:8333\n-[2a01:4f8:120:80cc::2]:8433\n-[2a01:5f0:beef:5:0:3:0:1]:52101\n-[2a01:79c:cebc:a630:9dd8:ef55:8374:92a1]:8333\n-[2a01:7a0:2:137a::11]:8333\n+[2a01:490:16:301::2]:8333\n+[2a01:4b00:807c:1b00:cda1:c6a:2bad:2418]:8333\n+[2a01:4b00:80e7:5405::1]:8333\n+[2a01:4f8:192:4212::2]:8433\n [2a01:7a0:2:137c::3]:8333\n-[2a01:7c8:aab6:db:5054:ff:feca:cfc8]:8333\n-[2a01:8b81:6403:4700::1]:8333\n-[2a01:cb00:7cd:b000:fa1f:bd1:fe0:62a6]:8333\n-[2a01:cb00:d3d:7700:227:eff:fe28:c565]:8333\n+[2a01:7a7:2:1467:ec4:7aff:fee2:5690]:8333\n+[2a01:7c8:d002:10f:5054:ff:fe5c:dac7]:8333\n+[2a01:7c8:d002:318:5054:ff:febe:cbb1]:8333\n+[2a01:8740:1:ffc5::8c6a]:8333\n+[2a01:cb00:f98:ca00:5054:ff:fed4:763d]:8333\n+[2a01:cb14:cf6:bc00:21e5:f12e:32c8:145]:8333\n+[2a01:d0:0:1c::245]:8333\n [2a01:d0:bef2::12]:8333\n-[2a01:d0:f34f:1:1f67:e250:6aeb:b9c4]:8333\n-[2a01:e34:ee6b:2ab0:88c2:1c12:f4eb:c26c]:8333\n-[2a01:e35:2fba:2e90:1:0:b:1]:8333\n-[2a02:1205:505d:eb50:beae:c5ff:fe42:a973]:8333\n-[2a02:120b:2c3f:a90:10dd:31ff:fe42:5079]:8333\n-[2a02:130:300:1520:1::2]:8333\n-[2a02:13b8:4000:1000:216:e6ff:fe92:8619]:8333\n+[2a01:e35:2e40:6830:211:32ff:fea6:de3d]:8333\n+[2a02:1205:c6aa:60c0:70d8:aaee:a82d:993c]:8333\n+[2a02:169:502::614]:8333\n [2a02:180:1:1::5b8f:538c]:8333\n-[2a02:2168:8062:db00:96de:80ff:fea3:fd00]:8333\n-[2a02:2770:5:0:21a:4aff:fe44:8370]:8333\n-[2a02:2788:864:fb3:5b8a:c8f7:9fff:ae2d]:8333\n-[2a02:2f0d:607:bc00:5e9a:d8ff:fe57:8bc5]:8333\n-[2a02:348:9a:83b1::1]:8333\n+[2a02:348:62:5ef7::1]:8333\n [2a02:390:9000:0:218:7dff:fe10:be33]:8333\n-[2a02:4780:8:6:2:354e:1256:7a04]:8333\n-[2a02:578:4f07:24:76ad:cef7:93c1:b9b9]:8333\n-[2a02:6d40:30f6:e901:89b8:bb58:25a:6050]:8333\n-[2a02:750:7:c11:5054:ff:fe43:eb81]:8333\n [2a02:7aa0:1619::adc:8de0]:8333\n-[2a02:7b40:4f62:19ae::1]:8333\n-[2a02:8108:95bf:eae3:211:32ff:fe8e:b5b8]:8333\n-[2a02:e00:fff0:23f::1]:8333\n-[2a02:e00:fff0:23f::a]:8333\n-[2a03:1b20:1:f410:40::3e]:16463\n+[2a02:7b40:b0df:8925::1]:8333\n+[2a02:7b40:b905:37db::1]:8333\n+[2a02:810d:8cbf:f3a8:96c6:91ff:fe17:ae1d]:8333\n+[2a02:8389:1c0:9680:201:2eff:fe82:b3cc]:8333\n+[2a02:a454:a516:1:517:928:7e0d:957c]:8333\n+[2a02:af8:fab0:804:151:236:34:161]:8333\n+[2a02:af8:fab0:808:85:234:145:132]:8333\n+[2a02:e00:fff0:1e2::a]:8333\n+[2a03:2260:3006:d:d307:5d1d:32ca:1fe8]:8333\n [2a03:6000:870:0:46:23:87:218]:8333\n [2a03:9da0:f6:1::2]:8333\n+[2a03:c980:db:47::]:8333\n [2a03:e2c0:1ce::2]:8333\n-[2a04:2180:0:2::f2]:8333\n-[2a04:2180:1:c:f000::15]:8333\n-[2a04:52c0:101:97f::dcbe]:8333\n+[2a04:3544:1000:1510:706c:abff:fe6c:501c]:8333\n+[2a04:52c0:101:383::2a87]:8333\n+[2a04:52c0:101:3fb::4c27]:8333\n [2a04:ee41:83:50df:d908:f71d:2a86:b337]:8333\n-[2a05:1700::100]:8333\n-[2a05:fc87:4::2]:8333\n-[2a05:fc87:4::7]:8333\n-[2a07:5741:0:69d::1]:8333\n-[2a07:5741:0:7cd::1]:8333\n-[2a07:7200:ffff:c53f::e1:17]:8333\n+[2a05:6d40:b94e:d100:225:90ff:fe0d:cfc2]:8333\n+[2a05:e5c0:0:100:250:56ff:feb9:d6cb]:8333\n+[2a05:fc87:1:6::2]:8333\n+[2a05:fc87:4::8]:8333\n+[2a07:5741:0:115d::1]:8333\n+[2a07:a880:4601:1062:b4b4:bd2a:39d4:7acf]:51401\n+[2a07:abc4::1:946]:8333\n [2a07:b400:1:34c::2:1002]:8333\n+[2a0a:8c41::b4]:8333\n+[2a0a:c801:1:7::183]:8333\n [2a0b:ae40:3:4a0a::15]:8333\n-[2a0e:b780::55d1:f05b]:8333\n+[2a0f:df00:0:254::46]:8333\n+[2c0f:f598:5:1:1001::1]:8333\n [2c0f:fce8:0:400:b7c::1]:8333\n-2empatdfea6vwete.onion:8333\n-34aqcwnnuiqh234f.onion:8333\n-3gxqibajrtysyp5o.onion:8333\n-3sami4tg4yhctjyc.onion:8333\n-3w77hrilg6q64opl.onion:8333\n-46xh2sbjsjiyl4fu.onion:8333\n-4ee44qsamrjpywju.onion:8333\n-4haplrtkprjqhm2j.onion:8333\n-4u3y3zf2emynt6ui.onion:8333\n-57dytizbai7o4kq7.onion:8333\n-5guaeulc7xm4g2mm.onion:8334\n-5mtvd4dk62ccdk4v.onion:8333\n-5pmjz6mmikyabaw5.onion:8333\n-6eurcxoqsa4qpiqq.onion:8333\n-6ivvkeseojsmpby4.onion:8333\n-6tlha6njtcuwpfa3.onion:8333\n-6ymgbvnn6d5nfmv4.onion:8333\n-72y2n5rary4mywkz.onion:8333\n-7b75ub5dapphemit.onion:8333\n-7xaqpr7exrtlnjbb.onion:8333\n-a64haiqsl76l25gv.onion:8333\n-ab7ftdfw6qhdx3re.onion:8333\n-aiupgbtdqpmwfpuz.onion:8333\n-akeg56rzkg7rsyyg.onion:8333\n-akinbo7tlegsnsxn.onion:8333\n-anem5aq4cr2zl7tz.onion:8333\n-at3w5qisczgguije.onion:8333\n-auo4zjsp44vydv6c.onion:8333\n-bowg4prf63givea4.onion:8333\n-cjuek22p4vv4hzbu.onion:8333\n-cklaa2xdawrb75fg.onion:8333\n-coxiru76nnfw3vdj.onion:8333\n-cwq2fuc54mlp3ojc.onion:8333\n-dganr7dffsacayml.onion:8333\n-djbsspmvlc6ijiis.onion:8333\n-dmfwov5ycnpvulij.onion:8333\n-dp2ekfbxubpdfrt4.onion:8333\n-dw2ufbybrgtzssts.onion:4333\n-edkmfeaapvavhtku.onion:8333\n-ejdoey3uay3cz7bs.onion:8333\n-eladlvwflaahxomr.onion:8333\n-ffhx6ttq7ejbodua.onion:8333\n-hbnnzteon75un65y.onion:8333\n-hcyxhownxdv7yybw.onion:8333\n-hdfcxll2tqs2l4jc.onion:8333\n-hdld2bxyvzy45ds4.onion:8333\n-hlnnhn2xj2qffqjs.onion:8333\n-hnqwmqikfmnkpdja.onion:8333\n-hvmjovdasoin43wn.onion:8333\n-hwzcbnenp6dsp6ow.onion:8333\n-i5ellwzndjuke242.onion:8333\n-iapvpwzs4gpbl6fk.onion:8885\n-if7fsvgyqwowxkcn.onion:8333\n-ilukzjazxlxrbuwy.onion:8333\n-kswfyurnglm65u7b.onion:8333\n-ldu2hbiorkvdymja.onion:8333\n-lvvgedppmpigudhz.onion:8333\n-mk3bnep5ubou7i44.onion:8333\n-muhp42ytbwi6qf62.onion:8333\n-n5khsbd6whw7ooip.onion:8333\n-ndmbrjcvu2s6jcom.onion:8333\n-nf4iypnyjwfpcjm7.onion:8333\n-nkdw6ywzt3dqwxuf.onion:8333\n-o4sl5na6jeqgi3l6.onion:8333\n-opencubebqqx3buj.onion:8333\n-ovbkvgdllk3xxeah.onion:8333\n-pg2jeh62fkq3byps.onion:8333\n-pkcgxf23ws3lwqvq.onion:8333\n-qdtau72ifwauot6b.onion:8333\n-qidnrqy2ozz3nzqq.onion:8333\n-readybit5veyche6.onion:8333\n-s2epxac7ovy36ruj.onion:8333\n-satofxsc3xjadxsm.onion:8333\n-sv5oitfnsmfoc3wu.onion:8333\n-uftbw4zi5wlzcwho.onion:8333\n-uz3pvdhie3372vxw.onion:8333\n-v2x7gpj3shxfnl25.onion:8333\n-vov46htt6gyixdmb.onion:8333\n-wg3b3qxcwcrraq2o.onion:8333\n-wgeecjm4w4ko66f7.onion:8333\n-wmxc6ask4a5xyaxh.onion:8333\n-wqrafn4zal3bbbhr.onion:8333\n-xhi5x5qc44elydk4.onion:8333\n-xk6bjlmgvwojvozj.onion:8333\n-xmgr7fsmp7bgburk.onion:8333\n-xocvz3dzyu2kzu6f.onion:8333\n-xv7pt6etwxiygss6.onion:8444\n-yumx7asj7feoozic.onion:8333\n-zmaddsqelw2oywfb.onion:8444\n+226eupdnaouu4h2v.onion:8333\n+22h7b6f3caabqqsu.onion:8333\n+23wdfqkzttmenvki.onion:8333\n+23yi3frxymtwdgre.onion:8333\n+2ajon3moyf4i2hbb.onion:8333\n+2bfmlpk55hffpl6e.onion:8333\n+2ckmbf6sglwydeth.onion:8333\n+2hkusi5gcaautwqf.onion:8333\n+2ivhmlbxbgnkcykl.onion:8333\n+2mmxouhv6nebowkq.onion:8333\n+2qsnv6exnuuiar7z.onion:8333\n+2qudbhlnvqpli3sz.onion:8333\n+2ujxdfovfyjpmdto.onion:8333\n+2xdgeufrek3eumkw.onion:8333\n+2xdzsruhsej4tsiw.onion:8333\n+34ran2woq4easmss.onion:8333\n+36q7khhej2lxd3wf.onion:8333\n+373wjdspuo52utzq.onion:8333\n+376klet5xqbrg2jv.onion:8333\n+37kwd7fxop766l5k.onion:8333\n+3e5t7hq4alt5tovx.onion:8333\n+3gbxhebfhouuwgc3.onion:8333\n+3hgbjze2nbwyuewf.onion:8333\n+3iuuvrd2waha2cxo.onion:8333\n+3jtxujdaiwh6iltu.onion:8333\n+3l5eq2du7mvscj4a.onion:8333\n+3nofngnqlqeehn7o.onion:8333\n+3r44ddzjitznyahw.onion:8333\n+3vtbuwmton7vq5qz.onion:8333\n+46ohzttz4peki43g.onion:8333\n+47fl3ivl4v56jstr.onion:8333\n+47i6qrl2ijqcwlg6.onion:8333\n+47uupgzcnrwahoto.onion:8333\n+4c5cki37evofds6d.onion:8333\n+4eq36jrx7xuytfpc.onion:8333\n+4ewkdxvcg57adrni.onion:8333\n+4flvgibnm2nld3na.onion:8333\n+4iaontym47imawe4.onion:8333\n+4jxz37oou5ag763c.onion:8333\n+4mnkvj6ha73eqnbk.onion:8333\n+4nnuyxm5k5tlyjq3.onion:8333\n+4nz2yg4cnote3ej7.onion:8333\n+4pozwh6564ygzddk.onion:8333\n+4qgfb56rvpbmesx7.onion:8333\n+4rsax23taqzwmimj.onion:8333\n+4u5j5ay6rasowt4m.onion:8333\n+4vorvtoyegh4zbvr.onion:8333\n+52s4j5pldwlpzhtw.onion:8333\n+5abpiiqfvekoejro.onion:8333\n+5aydzxx6jyoz3nez.onion:8333\n+5cxzdsrtok5dgo4a.onion:8333\n+5eduikpudie3jyrf.onion:8333\n+5epeafkmya4fv5d5.onion:8333\n+5fyxlztic3t6notz.onion:8333\n+5hd6eyew5ybnq6gb.onion:8333\n+5jyfzhwksb6urrp2.onion:8333\n+5nooqgct567ig57v.onion:8333\n+5nsfm4nqqzzprjrp.onion:8333\n+5oqstxspzhlgjef6.onion:8333\n+5pzzmd4tfonrqzb2.onion:8333\n+5sckmx4yucbnp4io.onion:8333\n+5ue7worzbn6hon3e.onion:8333\n+5wxhx2tozpovf6z3.onion:8333\n+5xk3yun36e32e34i.onion:8333\n+5zght2g7vcsapi65.onion:8333\n+62dcdpvdolfzkdzl.onion:8333\n+63bko2mhixnn2b7d.onion:8333\n+67hjvfv6wictalm5.onion:8333\n+6g6ko4klkf5atldi.onion:8333\n+6k5zreexw4cadxi5.onion:8333\n+6kf5ayhlpenywgas.onion:8333\n+6maigxjvcet4pite.onion:8333\n+6ressv4dvplb5ihh.onion:8333\n+6rjex6gyuaui3c5e.onion:8333\n+6skgnf43pphdvjua.onion:8333\n+6stxaoduwisg5sqh.onion:8333\n+6xqy4ts6bo6u5dgm.onion:8333\n+7avnl3dqpgu23jva.onion:8333\n+7ff4wk266no23txn.onion:8333\n+7hipbuzfdcyzqkkg.onion:8333\n+7sjmlzrthjlpfydk.onion:8333\n+7tut3zt2akwrmw6x.onion:8333\n+7uhsjzj6nx3dfnxt.onion:8333\n+7wm4wso3wvatxnbt.onion:8333\n+7ykmzuybwd2ptzg4.onion:8333\n+a27bvhina4y23jxo.onion:8333\n+a53vtdm7uiet5vdl.onion:8333\n+a56572xjuofnt2dp.onion:8333\n+abp25knifdsnc2rv.onion:8333\n+aefx7ubzpal7clak.onion:8333\n+ai5r2diozoe7rrdz.onion:8333\n+aipupphit3enggpj.onion:8333\n+algpjjygd3gtnmpp.onion:8333\n+alihua7rhyc452hr.onion:8333\n+am3gyyfynxzwyxhx.onion:8333\n+ankozzfhl2r3uc6u.onion:8333\n+at3twjlbtc2lqnq5.onion:8333\n+avqobl72pmc64dyi.onion:8333\n+awmdz2fs3b5h5ut5.onion:8333\n+ayywpiy77butdjrj.onion:8333\n+b2i3pj7c24cvprs7.onion:8333\n+b4ilebyxcu6nttio.onion:8333\n+b4vvkbqipcmkwp4v.onion:8333\n+bddfqxps5ibd3ftw.onion:8333\n+be5bgcpo4ooux5qy.onion:8333\n+bgla4m6zetvtv7ls.onion:8333\n+bh32gzw3nyckzqut.onion:8333\n+bho4kodpehn7xr3x.onion:8333\n+bitcoin4rlfa4wqx.onion:8333\n+biw7s6jf6r2mf3cu.onion:8333\n+bk7yp6epnmcllq72.onion:8333\n+blcktrgve5vetjsk.onion:8333\n+blwbp7gfdffdsx4g.onion:8333\n+bnxn6qqc55gvn5op.onion:8333\n+bp7o22lvcjawelvv.onion:8333\n+bqqyqucgj4tchn64.onion:8333\n+bvdzmutcqf7gzzn5.onion:8333\n+c36zmegjkinftmtf.onion:8333\n+c4fn62gnltlgrptv.onion:8333\n+caael5yedviooqzk.onion:8333\n+caq54ablfbrnumdd.onion:8333\n+cernrmrk5zomzozn.onion:8333\n+chri6itgjaagof4t.onion:8333\n+cncwik3tnd2ejm5z.onion:8333\n+cuyjqoziemcmwaxl.onion:8333\n+cx7qa2gpqyp7pld5.onion:8333\n+czp7wgaus4gvio72.onion:8333\n+d2fn54rfyjdangi4.onion:8333\n+d2sk45u6ca64yeqh.onion:8333\n+d3aowmngvktsziae.onion:8333\n+d5iu4aiz3y2kgcgj.onion:8333\n+d6zbw2sxnxgj5sv3.onion:8333\n+db5rd5e46t7mgini.onion:8333\n+dci2gulorl44yj55.onion:8333\n+ddpth2mwt3rsvoog.onion:8333\n+dfrwza7fcecknnms.onion:8333\n+djwhjfj4rh3oz3yj.onion:8333\n+dkk5mmpe5jtjodk5.onion:8333\n+doj3zgmsbzurmqgp.onion:8333\n+dpce4f3rcqddzbx5.onion:8333\n+drwo3vnxch5ozfbo.onion:8333\n+duikkidxip3lyexn.onion:8333\n+duqdliptc22i6hf5.onion:8333\n+duyp4coh5d7nh3ud.onion:8333\n+duz5two3z7c55lxj.onion:8333\n+dvu6dlar6ezc6xen.onion:8333\n+dy6zqs46ycleayyp.onion:8333\n+dz2ydmj3yqrcm4r7.onion:8333\n+e2b2a5suvdawzxud.onion:8333\n+e33h57j2ewkkqsn5.onion:8333\n+e5kjiay7pzj5qpzv.onion:8333\n+e7iko42d2wzcmvy4.onion:8333\n+ea6boh4kotq56ws5.onion:8333\n+efdx6gc4s5ezyqeg.onion:8333\n+efrpuuic6ukeyqcs.onion:8333\n+egruc3bi3itru6gq.onion:8333\n+erc6tjs2ucyadl23.onion:8333\n+eue2n5sk5tktg5bv.onion:8333\n+ezkr7stq4w7ohjrt.onion:8333\n+f3nyyjba6kpxznhk.onion:8333\n+faq73vj4pcs73thu.onion:8333\n+fdvtlj3pscbxuh75.onion:8333\n+fgdpxov4nzxvhcpv.onion:8333\n+fisqq6vzk3m6t225.onion:8333\n+fkgp3qwegacrd2bj.onion:8333\n+fo3tdfwx27takqq5.onion:8333\n+fqkxtchwypispkpv.onion:8333\n+fqunuhlwvd7rq6d5.onion:8333\n+frwt5mscpyhiuwpe.onion:8333\n+fta4gfjiuv6f2le2.onion:8333\n+fuoy2ipuqrqwe5cf.onion:8333\n+fz6nsij6jiyuwlsc.onion:8333\n+g3vlnaaaog5sgui5.onion:8333\n+g44i6jwsutkwmspz.onion:8333\n+g55t65d5ckjixcnw.onion:8333\n+gajd6eyrl2qwkfmg.onion:8333\n+gblue3hr53p4grx7.onion:8333\n+gbpro5tzduiuff4v.onion:8333\n+gc4l3tql32qhfgmi.onion:8333\n+gcnlorvtpycuajc6.onion:8333\n+gdsib2nk2eeoidgc.onion:8333\n+ge5gm7c6w7yahpz7.onion:8333\n+gegcteeep4cwftl5.onion:8333\n+gfoyraudgv5qjdku.onion:8333\n+ggpbuypmxgi26lc6.onion:8333\n+ghqivye7cfckisnt.onion:8333\n+girakxomne5fby64.onion:8333\n+glz5gfk33tuug5ne.onion:8333\n+gplatxoyg5nxl5rj.onion:8333\n+gripl5xjwy2dcr6c.onion:8333\n+gthhzlmqci22nxru.onion:8333\n+gto2d64swosfmk6c.onion:8333\n+guaciney52mgcbp2.onion:8333\n+gwktgrmtwk6nv5sc.onion:8333\n+gwoxnokdcwc7hy4p.onion:8333\n+h333f4qnwe7mrymn.onion:8333\n+h6a32n4blbwwyn4d.onion:8333\n+hafwtrbooszoembm.onion:8333\n+hbwhgsb3eeinnr6t.onion:8333\n+hcv6foxh5mk7fhb5.onion:8333\n+hd6hktcl6wamzlzm.onion:8333\n+hda6msa4v4rt77gx.onion:8333\n+hdgnxkuqsd6wjwwx.onion:8333\n+hgh3azn3eesddvcg.onion:8333\n+hhyxu6bwkjefejoz.onion:8333\n+hizn6rmofsg3upmn.onion:8333\n+hjqxxsy2osemfvev.onion:8333\n+hkbp7mbgw6klls4s.onion:8333\n+hlojuwiwbkoj4kdz.onion:8333\n+hlzxsjr7ob3qzzqq.onion:8333\n+hniuzplezebyhv7a.onion:8333\n+hondewkj4s4rdcwf.onion:8333\n+hql5nv6vhceid3bn.onion:8333\n+hspjo7mqrre5gyxr.onion:8333\n+hu64s2mdr3x7yxka.onion:8333\n+hvwvq2swkqw3qvyo.onion:8333\n+hwo2biyndrrvpl6f.onion:8333\n+hzxj3dth3y2xt45o.onion:8333\n+i3ufxuw3t7cxfdpq.onion:8333\n+ia3n3q5u45gvpx7a.onion:8333\n+icfgs3fctckd4yeo.onion:8333\n+icpz6thqvdjcwlvb.onion:8333\n+if32zo5u4mhdunfd.onion:8333\n+ig4lguql6vxkbmmr.onion:8333\n+ihhcr7fhczqdac4y.onion:8333\n+ijm2tyxob7vkvazz.onion:8333\n+ip3puuqghumfz5ww.onion:8333\n+iq3ket72f3y2frpg.onion:8333\n+iqagt5co4dt7h6hf.onion:8333\n+iugw42ih6hprqr26.onion:8333\n+ivf774v4t7k63i6d.onion:8333\n+ivfacdf7cig2z2y2.onion:8333\n+ivsxdwku5og2zj4l.onion:8333\n+ixwgrhaklvu4g6o7.onion:8333\n+iz56moo6mkp3g7xo.onion:8333\n+j2cp5muw5j3lumcx.onion:8333\n+j2lrkrwugldwewws.onion:8333\n+j2qtmkd2dablssz4.onion:8333\n+j5e2yuan57v2h5el.onion:8333\n+j5jfrdthqt5g25xz.onion:8333\n+j5lk2uv2bspfqxfk.onion:8333\n+janvvzsmzcsj3fil.onion:8333\n+jenn2tmyl3xxarmq.onion:8333\n+jfoe5f2sczojfp32.onion:8333\n+jgcgi6k2pxooi5q3.onion:8333\n+jhana24s3dzkitzp.onion:8333\n+jitgulb24mvfqrdg.onion:8333\n+jjuvwbjfzljmn7t3.onion:8333\n+jlcfomgr5xfexaif.onion:8333\n+jlehs6ybb26qlnna.onion:8333\n+jljzz4tmbqrxq3q5.onion:8333\n+joc4oqceedkg77vf.onion:8333\n+jr5y6njubcbv6g37.onion:8333\n+jroaos6la4vieho4.onion:8333\n+jsmphgkay7iihbkr.onion:8333\n+jtksnokusbzms7wl.onion:8333\n+ju5duo3r6p6diznc.onion:8333\n+jw6zymxcnebahuuj.onion:8333\n+jxalvhf7w7wevqzw.onion:8333\n+jyzhe3ig44ickysb.onion:8333\n+jze6ukn4idrh44eo.onion:8333\n+k4glotlxnmttb6ct.onion:8333\n+k7uy3iwmvguzygd2.onion:8333\n+kl23ofag3ukb6hxl.onion:8333\n+kokt2qr6d4pmyb2d.onion:8333\n+kpalu3h5ydkoaivs.onion:8333\n+krdpbdvtqw5c5lee.onion:8333\n+kriw6kzjzarzgb3g.onion:8333\n+krp2thcmwrpsoue6.onion:8333\n+kvyvdwjwtae5mo77.onion:8333\n+kyrxri5rbr6ipurs.onion:8333\n+kz3oxg7745dxt62q.onion:8333\n+l3w5fcki2wbro2qb.onion:8333\n+l44bisuxhh7reb5q.onion:8333\n+l565g523emjebusj.onion:8333\n+l6w5kdeigwsgnf5t.onion:8333\n+l7a4emryfxkjgmmb.onion:8333\n+l7sloscjqqbifcsw.onion:8333\n+laafjqvtog7djfl2.onion:8333\n+lah676kxbgbgw3u2.onion:8333\n+lbq2a7pnpmviw2qo.onion:8333\n+lc4wnpql27vymi35.onion:8333\n+ldoffbfpk3j6c7y7.onion:8333\n+lehpmglkivobq2qo.onion:8333\n+lgewpjz7ie7daqqr.onion:8333\n+lgkvbvro67jomosw.onion:8333\n+liw5z4ngic6b7vnv.onion:8333\n+ljs7gwrmmza6q6ga.onion:8333\n+lmvax3e6awaxvhqi.onion:8333\n+lrz77dwf7yq4cgnt.onion:8333\n+lva54pnbq2nsmjyr.onion:8333\n+lxc2uphxyyxflhnf.onion:8333\n+lyjybdr4hmj3bqab.onion:8333\n+lz2zlnmyynwtgwf2.onion:8333\n+m6hcnpikimyh37yp.onion:8333\n+md635omjnrgheed3.onion:8333\n+mdb3oupwf4f2qyjb.onion:8333\n+me6d4esx7ohdnxne.onion:8333\n+mecfkik5ci47wckj.onion:8333\n+mfrvevn7w6rwsp4r.onion:8333\n+mimuutlew5srtduk.onion:8333\n+mnysk3izxvra3huv.onion:8333\n+mqu6gqtrhm6xzwwh.onion:8333\n+mwuc6vom4ngijtb3.onion:8333\n+mxdtrjhe2yfsx3pg.onion:8333\n+n4ibet4piscv22nj.onion:8333\n+n6d46vbzx43bevlb.onion:8333\n+n6t6kfgzlvozxhfm.onion:8333\n+n7rrochwerf2qxze.onion:8333\n+ncsdiqmnxhnnjbsz.onion:8333\n+nitxw3ilffngpumv.onion:8333\n+njlsvubildehluwr.onion:8333\n+njslfsivyyhixbsp.onion:8333\n+nkf5e6b7pl4jfd4a.onion:8333\n+nkppsb3t3ducje6m.onion:8333\n+nlfwyqksmeqe45zz.onion:8333\n+nlyjmpcmpaz5b4aa.onion:8333\n+nnmv7z65k65mcesr.onion:8333\n+nrrfwdmrm3imuebn.onion:8333\n+nrrmkgmulpgsbwlt.onion:8333\n+nw4h7leckut7eapv.onion:8333\n+nwky3wd3ihoidvb5.onion:8333\n+ny4kkemmmqv4lptm.onion:8333\n+o25wkcw7eorg2toi.onion:8333\n+o2gumvbkw6pm45cf.onion:8333\n+o4yjshdwlbshylqw.onion:8333\n+ofx4qgw6lppnvtgv.onion:8333\n+oketipl4gndqcaus.onion:8333\n+oq5q4qrqijr2kpun.onion:8333\n+oqw3mfoiobqcklxh.onion:8333\n+orsy2v63ecrmdj55.onion:8333\n+ot4tzmznyimmlszk.onion:8333\n+owk6c2jfthwkyahe.onion:8333\n+oy7ss3hm2okx4tun.onion:8333\n+p2pc6wbaepvdi6ce.onion:8333\n+p2x24gdhasmgcl5j.onion:8333\n+p6couujr2ndhllv3.onion:8333\n+pa7dw5bln5lqmu53.onion:8333\n+pasmchtoooj2kchd.onion:8333\n+pdapkkhk6pbcy2tj.onion:8333\n+peh5ajouuw6mw4sr.onion:8333\n+pkuuc5pwl5xygwhr.onion:8333\n+pq4wjl7vg7tsfycc.onion:8333\n+ptbwqhusps5qieql.onion:8333\n+ptwpbwyj5lnyew2f.onion:8333\n+pu7w3jfyrzp7sxsi.onion:8333\n+pwylbyvfuc62hhvx.onion:8333\n+q2fhnnyt5b2ayvce.onion:8333\n+q3i3apuionbazmfe.onion:8333\n+qd6fcpu3pvbf2y3x.onion:8333\n+qfewv3y7a3p4i3bd.onion:8333\n+qhytdttflhbc4rsh.onion:8333\n+qkn35rb3x2gxbwq4.onion:8333\n+qlvlexs7pwac2f4b.onion:8333\n+qogcqirtuta6rlxg.onion:8333\n+qrzqfxkhrmu5v5ro.onion:8333\n+qsyjasq46b2syiys.onion:8333\n+quu4b2zjbnr2ue4y.onion:8333\n+quycfj2wenz6bfyd.onion:8333\n+qvdy3cmocnlv5v7c.onion:8333\n+qvwhpqygan2xky5h.onion:8333\n+qyutwc26ullujafb.onion:8333\n+r45qg2d6iwfdhqwl.onion:8333\n+r4xudr6u4r5nyga4.onion:8333\n+r6apa5ssujxbwd34.onion:8333\n+r6z2gcsu37k3gaah.onion:8333\n+rbrjgfcca6v5b7yo.onion:8333\n+rcifxibawqt6rxzz.onion:8333\n+rdo3xctk3zkzjvln.onion:8333\n+rdvlepy6ghgpapzo.onion:8333\n+recs3a27chv2lg65.onion:8333\n+rfmbiy5vztvn6hyn.onion:8333\n+rli5lbje4k77inzw.onion:8333\n+roqwnmepcj453vfh.onion:8333\n+rpbnx54qniivrmh3.onion:8333\n+rsvvogqdlijp77hv.onion:8333\n+rwm5d4hg3hc77kdt.onion:8333\n+s3yelkvc5f5xeysw.onion:8333\n+s6rx52hitmpp4lge.onion:8333\n+sa6m3rvycipgemky.onion:8333\n+savebeesmkivmfbo.onion:8333\n+sbyjr5npk2mlmfw7.onion:8333\n+serwj42jme5xhhmw.onion:8333\n+sg4vmubv3djrzvuh.onion:8333\n+shsgksluz6jkgp6g.onion:8333\n+sjyzmwwu6diiit3r.onion:8333\n+sk3en3reudg3sdg5.onion:8333\n+skoifp4oj7l4osu5.onion:8333\n+sle2caplkln33e7y.onion:8333\n+smdd7q7gonajdmjq.onion:8333\n+spmhuxjb2cd7leun.onion:8333\n+srkgyv5edn2pa7il.onion:8333\n+sslnjjhnmwllysv4.onion:8333\n+su66ygras6rkdtnl.onion:8333\n+sundvmbjrtgdfahx.onion:8333\n+svd65k5jpal2p3lt.onion:8333\n+svua5hiqluw7o2sw.onion:8333\n+sxqjubmum4rmfgpu.onion:8333\n+t245vi742ti3tnka.onion:8333\n+t4fbovvgzpnimd2p.onion:8333\n+t4l4wv3erkhpde2p.onion:8333\n+t5qchwbr6u5v2agk.onion:8333\n+t7jlaj6ggyx7s5vy.onion:8333\n+ta6sjeqyb27f4n4a.onion:8333\n+tav7utpw4pfy7j6k.onion:8333\n+taxg5z2sxfm5c4d6.onion:8333\n+tekwvnbodbzrlufs.onion:8333\n+tg4uwrjmtr2jlbjy.onion:8333\n+th4cjvffjtw6vomu.onion:8333\n+th6fxymtwnfifqeu.onion:8333\n+thtchhl25u26nglq.onion:8333\n+tiiah7csuoklcvi6.onion:8333\n+tk63x5fk3337z3ud.onion:8333\n+tkgootat6cqn7vyy.onion:8333\n+tnj565wwqz5wpjvs.onion:8333\n+ts6qx37mmpu6nj5y.onion:8333\n+ttjisvxydgbtp56f.onion:8333\n+twn54v7ra2xjgd55.onion:8333\n+txem5meug24g2ezd.onion:8333\n+tyiunn36lmfcq5lr.onion:8333\n+tyv56xs6g6ndzqux.onion:8333\n+u47f3hxwq65sgs4o.onion:8333\n+u4r7fnholrdwwlni.onion:8333\n+u556ofb3myarafwn.onion:8333\n+u5q3gbz4qpz4wvlr.onion:8333\n+uakly3ydrevvpxwi.onion:8333\n+ug6hapi4qtekzc7v.onion:8333\n+ui553qotd6ron3rf.onion:8333\n+uir7f3wltoka6bbb.onion:8333\n+ukrjjhwodl44wmof.onion:8333\n+ul5gm2ixy7kqdfwg.onion:8333\n+undd7rsj4pen3wo4.onion:8333\n+uorwpzfehtykrg43.onion:8333\n+uovsp2yltnaojq6l.onion:8333\n+usazmdcs32ny24dy.onion:8333\n+usazs7glm7geyxkl.onion:8333\n+uss2kedg7qkwgdr5.onion:8333\n+utgyrvw75wv2nymi.onion:8333\n+uzwacms7kyzhehbl.onion:8333\n+v2kdcetvslmdfcwr.onion:8333\n+v5lhnzzv6nngfg5d.onion:8333\n+vc44gb4veppobrt3.onion:8333\n+vfwyhju43wxhzvux.onion:8333\n+vgujufk53lqyolio.onion:8333\n+vheejqq2v5dkb4xr.onion:8333\n+vj64edev4jnqfdsb.onion:8333\n+vmai5uigezr2khkj.onion:8333\n+vmuykd7sxbmi7w57.onion:8333\n+vomeacttinx3mpml.onion:8333\n+vpow2xofg3fwzsdq.onion:8333\n+vsawli4l5ifxdzaw.onion:8333\n+vunubqkfms7sifok.onion:8333\n+vuombnevwul4bqsb.onion:8333\n+vxcpvdng65aefz6t.onion:8333\n+vyxoizdzavp3obau.onion:8333\n+wbeon2ci7lfio6ay.onion:8333\n+wbwevew62mgsrrdz.onion:8333\n+wfaydlg6zyfzjcu5.onion:8333\n+wfz56s5lyn5dysez.onion:8333\n+wg3mq4ugyy2gx32b.onion:8333\n+whky54bctkf2n4p3.onion:8333\n+whmjanqoyzizzc4t.onion:8333\n+wlhou2wxgqyi3x3f.onion:8333\n+wlvkfrplfiioz22o.onion:8333\n+x3ngb3va7dovuenw.onion:8333\n+x57x62bmmnylvo7r.onion:8333\n+xgvm57mhgv564dka.onion:8333\n+xhs3glfwnwiumivn.onion:8333\n+xje5fwvyfdue2u6k.onion:8333\n+xlgubgyly2blvsg5.onion:8333\n+xnlu3tvakngy7tkp.onion:8333\n+xo5marilhuyo7but.onion:8333\n+xsaaxihdygnwxrix.onion:8333\n+xu5mlugdsmzfkvzh.onion:8333\n+xvrxqcptqvieedb2.onion:8333\n+xwzhrrygftq3q4w4.onion:8333\n+y4swmsaxdcos2bnu.onion:8333\n+y5tl4lqi365pplud.onion:8333\n+y5wzeqyaets5na6t.onion:8333\n+y73qk2mzkjkhoky7.onion:8333\n+y7oz3ydnvib4xhbb.onion:8333\n+yah7qgfqqrteoche.onion:8333\n+yba4brm555denlt7.onion:8333\n+ygeqkg4inplsace3.onion:8333\n+yjhnfu75lazbi34h.onion:8333\n+yjw7kqapxx5vggoj.onion:8333\n+ym7inmovbrna4gco.onion:8333\n+yq5cusnuokscy64z.onion:8333\n+yrcaioqrqrdwokqt.onion:8333\n+yrcr7pgjuazad254.onion:8333\n+yrksvon3tmvoohdv.onion:8333\n+ytpus4vx5w7j6wp2.onion:8333\n+ytqcigk2hhdl45ho.onion:8333\n+yxojl3xmjus3dik2.onion:8333\n+yzdqdsqx4fdung6w.onion:8333\n+z33nukt7ngik3cpe.onion:8333\n+z3ywbadw46ndnxgh.onion:8333\n+z6mbqq7llxlrn4kq.onion:8333\n+zb3lrcksn4rzhzje.onion:8333\n+ze7odp7pzarjplsr.onion:8333\n+zgbmhtbja4fy2373.onion:8333\n+zh7hvalcgvjpoaqm.onion:8333\n+ziztvxehmj5mehpg.onion:8333\n+zjii3yecdrmq73y3.onion:8333\n+zkrwmgjuvsza6ye2.onion:8333\n+zoz2aopwi3wfuqwg.onion:8333\n+ztdcfnh46773bivu.onion:8333\n+zuxhc6d3nwpgc4af.onion:8333\n+zuytrfevzjcpizli.onion:8333\n+zvq6dpt3i2ofdp3g.onion:8333\n+zwwm6ga7u2hqe2sd.onion:8333\n+zyqb4lenfspntj5m.onion:8333"
      },
      {
        "sha": "71dc2f96382e0038b1a0ff0a7cf5a9d460a858c1",
        "filename": "contrib/signet/README.md",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/signet/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/signet/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/README.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,80 @@\n+Contents\n+========\n+This directory contains tools related to Signet, both for running a Signet yourself and for using one.\n+\n+getcoins.py\n+===========\n+\n+A script to call a faucet to get Signet coins.\n+\n+Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<faucet URL>] [-a|--addr=<signet bech32 address>] [-p|--password=<faucet password>] [--] [<bitcoin-cli args>]`\n+\n+* `--cmd` lets you customize the bitcoin-cli path. By default it will look for it in the PATH\n+* `--faucet` lets you specify which faucet to use; the faucet is assumed to be compatible with https://github.com/kallewoof/bitcoin-faucet\n+* `--addr` lets you specify a Signet address; by default, the address must be a bech32 address. This and `--cmd` above complement each other (i.e. you do not need `bitcoin-cli` if you use `--addr`)\n+* `--password` lets you specify a faucet password; this is handy if you are in a classroom and set up your own faucet for your students; (above faucet does not limit by IP when password is enabled)\n+\n+If using the default network, invoking the script with no arguments should be sufficient under normal\n+circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n+accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+    cd src/\n+    CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+    MINER=\"..contrib/signet/miner\"\n+    GRIND=\"./bitcoin-util grind\"\n+    ADDR=$($CLI -signet getnewaddress)\n+    $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+    $MINER calibrate --grind-cmd=\"$GRIND\"\n+    nbits=1e00f403 for 25s average mining time\n+\n+It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n+\n+Using the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+    $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=1e00f403 --ongoing\n+\n+Other options\n+-------------\n+\n+The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n+\n+Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n+\n+Instead of using a single address, a ranged descriptor may be provided instead (via the --descriptor parameter), with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the mininmum signet difficulty will be targeted.\n+\n+By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.\n+\n+Using the --multiminer parameter allows mining to be distributed amongst multiple miners. For example, if you have 3 miners and want to share blocks between them, specify --multiminer=1/3 on one, --multiminer=2/3 on another, and --multiminer=3/3 on the last one. If you want one to do 10% of blocks and two others to do 45% each, --multiminer=1-10/100 on the first, and --multiminer=11-55 and --multiminer=56-100 on the others. Note that which miner mines which block is determined by the previous block hash, so occasional runs of one miner doing many blocks in a row is to be expected.\n+\n+When --multiminer is used, if a miner is down and does not mine a block within five minutes of when it is due, the other miners will automatically act as redundant backups ensuring the chain does not halt. The --backup-delay parameter can be used to change how long a given miner waits, allowing one to be the primary backup (after five minutes) and another to be the secondary backup (after six minutes, eg).\n+\n+The --standby-delay parameter can be used to make a backup miner that only mines if a block doesn't arrive on time. This can be combined with --multiminer if desired. Setting --standby-delay also prevents the first block from being mined immediately.\n+\n+Advanced usage\n+--------------\n+\n+The process generate follows internally is to get a block template, convert that into a PSBT, sign the PSBT, move the signature from the signed PSBT into the block template's coinbase, grind proof of work for the block, and then submit the block to the network.\n+\n+These steps can instead be done explicitly:\n+\n+    $CLI -signet getblocktemplate '{\"rules\": [\"signet\",\"segwit\"]}' |\n+      $MINER --cli=\"$CLI\" genpsbt --address=\"$ADDR\" |\n+      $CLI -signet -stdin walletprocesspsbt |\n+      jq -r .psbt |\n+      $MINER --cli=\"$CLI\" solvepsbt --grind-cmd=\"$GRIND\" |\n+      $CLI -signet -stdin submitblock\n+\n+This is intended to allow you to replace part of the pipeline for further experimentation, if desired.\n+"
      },
      {
        "sha": "691f0bb1b6015c0447b71278713c846d002d15c8",
        "filename": "contrib/signet/getcoins.py",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/signet/getcoins.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/signet/getcoins.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/getcoins.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,36 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import subprocess\n+import requests\n+import sys\n+\n+parser = argparse.ArgumentParser(description='Script to get coins from a faucet.', epilog='You may need to start with double-dash (--) when providing bitcoin-cli arguments.')\n+parser.add_argument('-c', '--cmd', dest='cmd', default='bitcoin-cli', help='bitcoin-cli command to use')\n+parser.add_argument('-f', '--faucet', dest='faucet', default='https://signetfaucet.com/claim', help='URL of the faucet')\n+parser.add_argument('-a', '--addr', dest='addr', default='', help='Bitcoin address to which the faucet should send')\n+parser.add_argument('-p', '--password', dest='password', default='', help='Faucet password, if any')\n+parser.add_argument('bitcoin_cli_args', nargs='*', help='Arguments to pass on to bitcoin-cli (default: -signet)')\n+\n+args = parser.parse_args()\n+\n+if args.addr == '':\n+    if args.bitcoin_cli_args == []:\n+        args.bitcoin_cli_args = ['-signet']\n+    # get address for receiving coins\n+    try:\n+        args.addr = subprocess.check_output([args.cmd] + args.bitcoin_cli_args + ['getnewaddress', 'faucet', 'bech32']).strip()\n+    except FileNotFoundError:\n+        print('The binary', args.cmd, 'could not be found.')\n+        exit()\n+\n+data = {'address': args.addr, 'password': args.password}\n+try:\n+    res = requests.post(args.faucet, data=data)\n+except:\n+    print('Unexpected error when contacting faucet:', sys.exc_info()[0])\n+    exit()\n+print(res.text)"
      },
      {
        "sha": "a3fba49d0e1ac7917460924a0b94d0bc24786367",
        "filename": "contrib/signet/miner",
        "status": "added",
        "additions": 639,
        "deletions": 0,
        "changes": 639,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/signet/miner",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/signet/miner",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/miner?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,639 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import math\n+import os.path\n+import re\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+PATH_BASE_CONTRIB_SIGNET = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))\n+PATH_BASE_TEST_FUNCTIONAL = os.path.abspath(os.path.join(PATH_BASE_CONTRIB_SIGNET, \"..\", \"..\", \"test\", \"functional\"))\n+sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)\n+\n+from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, ToHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, uint256_from_str # noqa: E402\n+from test_framework.script import CScriptOp # noqa: E402\n+\n+logging.basicConfig(\n+    format='%(asctime)s %(levelname)s %(message)s',\n+    level=logging.INFO,\n+    datefmt='%Y-%m-%d %H:%M:%S')\n+\n+SIGNET_HEADER = b\"\\xec\\xc7\\xda\\xa2\"\n+PSBT_SIGNET_BLOCK = b\"\\xfc\\x06signetb\"    # proprietary PSBT global field holding the block being signed\n+RE_MULTIMINER = re.compile(\"^(\\d+)(-(\\d+))?/(\\d+)$\")\n+\n+# #### some helpers that could go into test_framework\n+\n+# like FromHex, but without the hex part\n+def FromBinary(cls, stream):\n+    \"\"\"deserialize a binary stream (or bytes object) into an object\"\"\"\n+    # handle bytes object by turning it into a stream\n+    was_bytes = isinstance(stream, bytes)\n+    if was_bytes:\n+        stream = BytesIO(stream)\n+    obj = cls()\n+    obj.deserialize(stream)\n+    if was_bytes:\n+        assert len(stream.read()) == 0\n+    return obj\n+\n+class PSBTMap:\n+    \"\"\"Class for serializing and deserializing PSBT maps\"\"\"\n+\n+    def __init__(self, map=None):\n+        self.map = map if map is not None else {}\n+\n+    def deserialize(self, f):\n+        m = {}\n+        while True:\n+            k = deser_string(f)\n+            if len(k) == 0:\n+                break\n+            v = deser_string(f)\n+            if len(k) == 1:\n+                k = k[0]\n+            assert k not in m\n+            m[k] = v\n+        self.map = m\n+\n+    def serialize(self):\n+        m = b\"\"\n+        for k,v in self.map.items():\n+            if isinstance(k, int) and 0 <= k and k <= 255:\n+                k = bytes([k])\n+            m += ser_compact_size(len(k)) + k\n+            m += ser_compact_size(len(v)) + v\n+        m += b\"\\x00\"\n+        return m\n+\n+class PSBT:\n+    \"\"\"Class for serializing and deserializing PSBTs\"\"\"\n+\n+    def __init__(self):\n+        self.g = PSBTMap()\n+        self.i = []\n+        self.o = []\n+        self.tx = None\n+\n+    def deserialize(self, f):\n+        assert f.read(5) == b\"psbt\\xff\"\n+        self.g = FromBinary(PSBTMap, f)\n+        assert 0 in self.g.map\n+        self.tx = FromBinary(CTransaction, self.g.map[0])\n+        self.i = [FromBinary(PSBTMap, f) for _ in self.tx.vin]\n+        self.o = [FromBinary(PSBTMap, f) for _ in self.tx.vout]\n+        return self\n+\n+    def serialize(self):\n+        assert isinstance(self.g, PSBTMap)\n+        assert isinstance(self.i, list) and all(isinstance(x, PSBTMap) for x in self.i)\n+        assert isinstance(self.o, list) and all(isinstance(x, PSBTMap) for x in self.o)\n+        assert 0 in self.g.map\n+        tx = FromBinary(CTransaction, self.g.map[0])\n+        assert len(tx.vin) == len(self.i)\n+        assert len(tx.vout) == len(self.o)\n+\n+        psbt = [x.serialize() for x in [self.g] + self.i + self.o]\n+        return b\"psbt\\xff\" + b\"\".join(psbt)\n+\n+    def to_base64(self):\n+        return base64.b64encode(self.serialize()).decode(\"utf8\")\n+\n+    @classmethod\n+    def from_base64(cls, b64psbt):\n+        return FromBinary(cls, base64.b64decode(b64psbt))\n+\n+# #####\n+\n+def create_coinbase(height, value, spk):\n+    cb = CTransaction()\n+    cb.vin = [CTxIn(COutPoint(0, 0xffffffff), script_BIP34_coinbase_height(height), 0xffffffff)]\n+    cb.vout = [CTxOut(value, spk)]\n+    return cb\n+\n+def get_witness_script(witness_root, witness_nonce):\n+    commitment = uint256_from_str(hash256(ser_uint256(witness_root) + ser_uint256(witness_nonce)))\n+    return b\"\\x6a\" + CScriptOp.encode_op_pushdata(WITNESS_COMMITMENT_HEADER + ser_uint256(commitment))\n+\n+def signet_txs(block, challenge):\n+    # assumes signet solution has not been added yet so does not need\n+    # to be removed\n+\n+    txs = block.vtx[:]\n+    txs[0] = CTransaction(txs[0])\n+    txs[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER)\n+    hashes = []\n+    for tx in txs:\n+        tx.rehash()\n+        hashes.append(ser_uint256(tx.sha256))\n+    mroot = block.get_merkle_root(hashes)\n+\n+    sd = b\"\"\n+    sd += struct.pack(\"<i\", block.nVersion)\n+    sd += ser_uint256(block.hashPrevBlock)\n+    sd += ser_uint256(mroot)\n+    sd += struct.pack(\"<I\", block.nTime)\n+\n+    to_spend = CTransaction()\n+    to_spend.nVersion = 0\n+    to_spend.nLockTime = 0\n+    to_spend.vin = [CTxIn(COutPoint(0, 0xFFFFFFFF), b\"\\x00\" + CScriptOp.encode_op_pushdata(sd), 0)]\n+    to_spend.vout = [CTxOut(0, challenge)]\n+    to_spend.rehash()\n+\n+    spend = CTransaction()\n+    spend.nVersion = 0\n+    spend.nLockTime = 0\n+    spend.vin = [CTxIn(COutPoint(to_spend.sha256, 0), b\"\", 0)]\n+    spend.vout = [CTxOut(0, b\"\\x6a\")]\n+\n+    return spend, to_spend\n+\n+def do_createpsbt(block, signme, spendme):\n+    psbt = PSBT()\n+    psbt.g = PSBTMap( {0: signme.serialize(),\n+                       PSBT_SIGNET_BLOCK: block.serialize()\n+                     } )\n+    psbt.i = [ PSBTMap( {0: spendme.serialize(),\n+                         3: bytes([1,0,0,0])})\n+             ]\n+    psbt.o = [ PSBTMap() ]\n+    return psbt.to_base64()\n+\n+def do_decode_psbt(b64psbt):\n+    psbt = PSBT.from_base64(b64psbt)\n+\n+    assert len(psbt.tx.vin) == 1\n+    assert len(psbt.tx.vout) == 1\n+    assert PSBT_SIGNET_BLOCK in psbt.g.map\n+\n+    scriptSig = psbt.i[0].map.get(7, b\"\")\n+    scriptWitness = psbt.i[0].map.get(8, b\"\\x00\")\n+\n+    return FromBinary(CBlock, psbt.g.map[PSBT_SIGNET_BLOCK]), ser_string(scriptSig) + scriptWitness\n+\n+def finish_block(block, signet_solution, grind_cmd):\n+    block.vtx[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER + signet_solution)\n+    block.vtx[0].rehash()\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    if grind_cmd is None:\n+        block.solve()\n+    else:\n+        headhex = CBlockHeader.serialize(block).hex()\n+        cmd = grind_cmd.split(\" \") + [headhex]\n+        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n+        newhead = FromHex(CBlockHeader(), newheadhex.decode('utf8'))\n+        block.nNonce = newhead.nNonce\n+        block.rehash()\n+    return block\n+\n+def generate_psbt(tmpl, reward_spk, *, blocktime=None):\n+    signet_spk = tmpl[\"signet_challenge\"]\n+    signet_spk_bin = unhexlify(signet_spk)\n+\n+    cbtx = create_coinbase(height=tmpl[\"height\"], value=tmpl[\"coinbasevalue\"], spk=reward_spk)\n+    cbtx.vin[0].nSequence = 2**32-2\n+    cbtx.rehash()\n+\n+    block = CBlock()\n+    block.nVersion = tmpl[\"version\"]\n+    block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n+    block.nTime = tmpl[\"curtime\"] if blocktime is None else blocktime\n+    if block.nTime < tmpl[\"mintime\"]:\n+        block.nTime = tmpl[\"mintime\"]\n+    block.nBits = int(tmpl[\"bits\"], 16)\n+    block.nNonce = 0\n+    block.vtx = [cbtx] + [FromHex(CTransaction(), t[\"data\"]) for t in tmpl[\"transactions\"]]\n+\n+    witnonce = 0\n+    witroot = block.calc_witness_merkle_root()\n+    cbwit = CTxInWitness()\n+    cbwit.scriptWitness.stack = [ser_uint256(witnonce)]\n+    block.vtx[0].wit.vtxinwit = [cbwit]\n+    block.vtx[0].vout.append(CTxOut(0, get_witness_script(witroot, witnonce)))\n+\n+    signme, spendme = signet_txs(block, signet_spk_bin)\n+\n+    return do_createpsbt(block, signme, spendme)\n+\n+def get_reward_address(args, height):\n+    if args.address is not None:\n+        return args.address\n+\n+    if '*' not in args.descriptor:\n+        addr = json.loads(args.bcli(\"deriveaddresses\", args.descriptor))[0]\n+        args.address = addr\n+        return addr\n+\n+    remove = [k for k in args.derived_addresses.keys() if k+20 <= height]\n+    for k in remove:\n+        del args.derived_addresses[k]\n+\n+    addr = args.derived_addresses.get(height, None)\n+    if addr is None:\n+        addrs = json.loads(args.bcli(\"deriveaddresses\", args.descriptor, \"[%d,%d]\" % (height, height+20)))\n+        addr = addrs[0]\n+        for k, a in enumerate(addrs):\n+            args.derived_addresses[height+k] = a\n+\n+    return addr\n+\n+def get_reward_addr_spk(args, height):\n+    assert args.address is not None or args.descriptor is not None\n+\n+    if hasattr(args, \"reward_spk\"):\n+        return args.address, args.reward_spk\n+\n+    reward_addr = get_reward_address(args, height)\n+    reward_spk = unhexlify(json.loads(args.bcli(\"getaddressinfo\", reward_addr))[\"scriptPubKey\"])\n+    if args.address is not None:\n+        # will always be the same, so cache\n+        args.reward_spk = reward_spk\n+\n+    return reward_addr, reward_spk\n+\n+def do_genpsbt(args):\n+    tmpl = json.load(sys.stdin)\n+    _, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+    psbt = generate_psbt(tmpl, reward_spk)\n+    print(psbt)\n+\n+def do_solvepsbt(args):\n+    block, signet_solution = do_decode_psbt(sys.stdin.read())\n+    block = finish_block(block, signet_solution, args.grind_cmd)\n+    print(ToHex(block))\n+\n+def nbits_to_target(nbits):\n+    shift = (nbits >> 24) & 0xff\n+    return (nbits & 0x00ffffff) * 2**(8*(shift - 3))\n+\n+def target_to_nbits(target):\n+    tstr = \"{0:x}\".format(target)\n+    if len(tstr) < 6:\n+        tstr = (\"000000\"+tstr)[-6:]\n+    if len(tstr) % 2 != 0:\n+        tstr = \"0\" + tstr\n+    if int(tstr[0],16) >= 0x8:\n+        # avoid \"negative\"\n+        tstr = \"00\" + tstr\n+    fix = int(tstr[:6], 16)\n+    sz = len(tstr)//2\n+    if tstr[6:] != \"0\"*(sz*2-6):\n+        fix += 1\n+\n+    return int(\"%02x%06x\" % (sz,fix), 16)\n+\n+def seconds_to_hms(s):\n+    if s == 0:\n+        return \"0s\"\n+    neg = (s < 0)\n+    if neg:\n+        s = -s\n+    out = \"\"\n+    if s % 60 > 0:\n+        out = \"%ds\" % (s % 60)\n+    s //= 60\n+    if s % 60 > 0:\n+        out = \"%dm%s\" % (s % 60, out)\n+    s //= 60\n+    if s > 0:\n+        out = \"%dh%s\" % (s, out)\n+    if neg:\n+        out = \"-\" + out\n+    return out\n+\n+def next_block_delta(last_nbits, last_hash, ultimate_target, do_poisson):\n+    # strategy:\n+    #  1) work out how far off our desired target we are\n+    #  2) cap it to a factor of 4 since that's the best we can do in a single retarget period\n+    #  3) use that to work out the desired average interval in this retarget period\n+    #  4) if doing poisson, use the last hash to pick a uniformly random number in [0,1), and work out a random multiplier to vary the average by\n+    #  5) cap the resulting interval between 1 second and 1 hour to avoid extremes\n+\n+    INTERVAL = 600.0*2016/2015 # 10 minutes, adjusted for the off-by-one bug\n+\n+    current_target = nbits_to_target(last_nbits)\n+    retarget_factor = ultimate_target / current_target\n+    retarget_factor = max(0.25, min(retarget_factor, 4.0))\n+\n+    avg_interval = INTERVAL * retarget_factor\n+\n+    if do_poisson:\n+        det_rand = int(last_hash[-8:], 16) * 2**-32\n+        this_interval_variance = -math.log1p(-det_rand)\n+    else:\n+        this_interval_variance = 1\n+\n+    this_interval = avg_interval * this_interval_variance\n+    this_interval = max(1, min(this_interval, 3600))\n+\n+    return this_interval\n+\n+def next_block_is_mine(last_hash, my_blocks):\n+    det_rand = int(last_hash[-16:-8], 16)\n+    return my_blocks[0] <= (det_rand % my_blocks[2]) < my_blocks[1]\n+\n+def do_generate(args):\n+    if args.max_blocks is not None:\n+        if args.ongoing:\n+            logging.error(\"Cannot specify both --ongoing and --max-blocks\")\n+            return 1\n+        if args.max_blocks < 1:\n+            logging.error(\"N must be a positive integer\")\n+            return 1\n+        max_blocks = args.max_blocks\n+    elif args.ongoing:\n+        max_blocks = None\n+    else:\n+        max_blocks = 1\n+\n+    if args.set_block_time is not None and max_blocks != 1:\n+        logging.error(\"Cannot specify --ongoing or --max-blocks > 1 when using --set-block-time\")\n+        return 1\n+    if args.set_block_time is not None and args.set_block_time < 0:\n+        args.set_block_time = time.time()\n+        logging.info(\"Treating negative block time as current time (%d)\" % (args.set_block_time))\n+\n+    if args.min_nbits:\n+        if args.nbits is not None:\n+            logging.error(\"Cannot specify --nbits and --min-nbits\")\n+            return 1\n+        args.nbits = \"1e0377ae\"\n+        logging.info(\"Using nbits=%s\" % (args.nbits))\n+\n+    if args.set_block_time is None:\n+        if args.nbits is None or len(args.nbits) != 8:\n+            logging.error(\"Must specify --nbits (use calibrate command to determine value)\")\n+            return 1\n+\n+    if args.multiminer is None:\n+       my_blocks = (0,1,1)\n+    else:\n+        if not args.ongoing:\n+            logging.error(\"Cannot specify --multiminer without --ongoing\")\n+            return 1\n+        m = RE_MULTIMINER.match(args.multiminer)\n+        if m is None:\n+            logging.error(\"--multiminer argument must be k/m or j-k/m\")\n+            return 1\n+        start,_,stop,total = m.groups()\n+        if stop is None:\n+            stop = start\n+        start, stop, total = map(int, (start, stop, total))\n+        if stop < start or start <= 0 or total < stop or total == 0:\n+            logging.error(\"Inconsistent values for --multiminer\")\n+            return 1\n+        my_blocks = (start-1, stop, total)\n+\n+    ultimate_target = nbits_to_target(int(args.nbits,16))\n+\n+    mined_blocks = 0\n+    bestheader = {\"hash\": None}\n+    lastheader = None\n+    while max_blocks is None or mined_blocks < max_blocks:\n+\n+        # current status?\n+        bci = json.loads(args.bcli(\"getblockchaininfo\"))\n+\n+        if bestheader[\"hash\"] != bci[\"bestblockhash\"]:\n+            bestheader = json.loads(args.bcli(\"getblockheader\", bci[\"bestblockhash\"]))\n+\n+        if lastheader is None:\n+            lastheader = bestheader[\"hash\"]\n+        elif bestheader[\"hash\"] != lastheader:\n+            next_delta = next_block_delta(int(bestheader[\"bits\"], 16), bestheader[\"hash\"], ultimate_target, args.poisson)\n+            next_delta += bestheader[\"time\"] - time.time()\n+            next_is_mine = next_block_is_mine(bestheader[\"hash\"], my_blocks)\n+            logging.info(\"Received new block at height %d; next in %s (%s)\", bestheader[\"height\"], seconds_to_hms(next_delta), (\"mine\" if next_is_mine else \"backup\"))\n+            lastheader = bestheader[\"hash\"]\n+\n+        # when is the next block due to be mined?\n+        now = time.time()\n+        if args.set_block_time is not None:\n+            logging.debug(\"Setting start time to %d\", args.set_block_time)\n+            mine_time = args.set_block_time\n+            action_time = now\n+            is_mine = True\n+        elif bestheader[\"height\"] == 0:\n+            logging.error(\"When mining first block in a new signet, must specify --set-block-time\")\n+            return 1\n+        else:\n+\n+            time_delta = next_block_delta(int(bestheader[\"bits\"], 16), bci[\"bestblockhash\"], ultimate_target, args.poisson)\n+            mine_time = bestheader[\"time\"] + time_delta\n+\n+            is_mine = next_block_is_mine(bci[\"bestblockhash\"], my_blocks)\n+\n+            action_time = mine_time\n+            if not is_mine:\n+                action_time += args.backup_delay\n+\n+            if args.standby_delay > 0:\n+                action_time += args.standby_delay\n+            elif mined_blocks == 0:\n+                # for non-standby, always mine immediately on startup,\n+                # even if the next block shouldn't be ours\n+                action_time = now\n+\n+        # don't want fractional times so round down\n+        mine_time = int(mine_time)\n+        action_time = int(action_time)\n+\n+        # can't mine a block 2h in the future; 1h55m for some safety\n+        action_time = max(action_time, mine_time - 6900)\n+\n+        # ready to go? otherwise sleep and check for new block\n+        if now < action_time:\n+            sleep_for = min(action_time - now, 60)\n+            if mine_time < now:\n+                # someone else might have mined the block,\n+                # so check frequently, so we don't end up late\n+                # mining the next block if it's ours\n+                sleep_for = min(20, sleep_for)\n+            minestr = \"mine\" if is_mine else \"backup\"\n+            logging.debug(\"Sleeping for %s, next block due in %s (%s)\" % (seconds_to_hms(sleep_for), seconds_to_hms(mine_time - now), minestr))\n+            time.sleep(sleep_for)\n+            continue\n+\n+        # gbt\n+        tmpl = json.loads(args.bcli(\"getblocktemplate\", '{\"rules\":[\"signet\",\"segwit\"]}'))\n+        if tmpl[\"previousblockhash\"] != bci[\"bestblockhash\"]:\n+            logging.warning(\"GBT based off unexpected block (%s not %s), retrying\", tmpl[\"previousblockhash\"], bci[\"bestblockhash\"])\n+            time.sleep(1)\n+            continue\n+\n+        logging.debug(\"GBT template: %s\", tmpl)\n+\n+        if tmpl[\"mintime\"] > mine_time:\n+            logging.info(\"Updating block time from %d to %d\", mine_time, tmpl[\"mintime\"])\n+            mine_time = tmpl[\"mintime\"]\n+            if mine_time > now:\n+                logging.error(\"GBT mintime is in the future: %d is %d seconds later than %d\", mine_time, (mine_time-now), now)\n+                return 1\n+\n+        # address for reward\n+        reward_addr, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+\n+        # mine block\n+        logging.debug(\"Mining block delta=%s start=%s mine=%s\", seconds_to_hms(mine_time-bestheader[\"time\"]), mine_time, is_mine)\n+        mined_blocks += 1\n+        psbt = generate_psbt(tmpl, reward_spk, blocktime=mine_time)\n+        psbt_signed = json.loads(args.bcli(\"-stdin\", \"walletprocesspsbt\", input=psbt.encode('utf8')))\n+        if not psbt_signed.get(\"complete\",False):\n+            logging.debug(\"Generated PSBT: %s\" % (psbt,))\n+            sys.stderr.write(\"PSBT signing failed\")\n+            return 1\n+        block, signet_solution = do_decode_psbt(psbt_signed[\"psbt\"])\n+        block = finish_block(block, signet_solution, args.grind_cmd)\n+\n+        # submit block\n+        r = args.bcli(\"-stdin\", \"submitblock\", input=ToHex(block).encode('utf8'))\n+\n+        # report\n+        bstr = \"block\" if is_mine else \"backup block\"\n+\n+        next_delta = next_block_delta(block.nBits, block.hash, ultimate_target, args.poisson)\n+        next_delta += block.nTime - time.time()\n+        next_is_mine = next_block_is_mine(block.hash, my_blocks)\n+\n+        logging.debug(\"Block hash %s payout to %s\", block.hash, reward_addr)\n+        logging.info(\"Mined %s at height %d; next in %s (%s)\", bstr, tmpl[\"height\"], seconds_to_hms(next_delta), (\"mine\" if next_is_mine else \"backup\"))\n+        if r != \"\":\n+            logging.warning(\"submitblock returned %s for height %d hash %s\", r, tmpl[\"height\"], block.hash)\n+        lastheader = block.hash\n+\n+def do_calibrate(args):\n+    if args.nbits is not None and args.seconds is not None:\n+        sys.stderr.write(\"Can only specify one of --nbits or --seconds\\n\")\n+        return 1\n+    if args.nbits is not None and len(args.nbits) != 8:\n+        sys.stderr.write(\"Must specify 8 hex digits for --nbits\")\n+        return 1\n+\n+    TRIALS = 600 # gets variance down pretty low\n+    TRIAL_BITS = 0x1e3ea75f # takes about 5m to do 600 trials\n+    #TRIAL_BITS = 0x1e7ea75f # XXX\n+\n+    header = CBlockHeader()\n+    header.nBits = TRIAL_BITS\n+    targ = nbits_to_target(header.nBits)\n+\n+    start = time.time()\n+    count = 0\n+    #CHECKS=[]\n+    for i in range(TRIALS):\n+        header.nTime = i\n+        header.nNonce = 0\n+        headhex = header.serialize().hex()\n+        cmd = args.grind_cmd.split(\" \") + [headhex]\n+        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n+        #newhead = FromHex(CBlockHeader(), newheadhex.decode('utf8'))\n+        #count += newhead.nNonce\n+        #if (i+1) % 100 == 0:\n+        #   CHECKS.append((i+1, count, time.time()-start))\n+\n+    #print(\"checks =\", [c*1.0 / (b*targ*2**-256) for _,b,c in CHECKS])\n+\n+    avg = (time.time() - start) * 1.0 / TRIALS\n+    #exp_count = 2**256 / targ * TRIALS\n+    #print(\"avg =\", avg, \"count =\", count, \"exp_count =\", exp_count)\n+\n+    if args.nbits is not None:\n+        want_targ = nbits_to_target(int(args.nbits,16))\n+        want_time = avg*targ/want_targ\n+    else:\n+        want_time = args.seconds if args.seconds is not None else 25\n+        want_targ = int(targ*(avg/want_time))\n+\n+    print(\"nbits=%08x for %ds average mining time\" % (target_to_nbits(want_targ), want_time))\n+    return 0\n+\n+def bitcoin_cli(basecmd, args, **kwargs):\n+    cmd = basecmd + [\"-signet\"] + args\n+    logging.debug(\"Calling bitcoin-cli: %r\", cmd)\n+    out = subprocess.run(cmd, stdout=subprocess.PIPE, **kwargs, check=True).stdout\n+    if isinstance(out, bytes):\n+        out = out.decode('utf8')\n+    return out.strip()\n+\n+def main():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument(\"--cli\", default=\"bitcoin-cli\", type=str, help=\"bitcoin-cli command\")\n+    parser.add_argument(\"--debug\", action=\"store_true\", help=\"Print debugging info\")\n+    parser.add_argument(\"--quiet\", action=\"store_true\", help=\"Only print warnings/errors\")\n+\n+    cmds = parser.add_subparsers(help=\"sub-commands\")\n+    genpsbt = cmds.add_parser(\"genpsbt\", help=\"Generate a block PSBT for signing\")\n+    genpsbt.set_defaults(fn=do_genpsbt)\n+\n+    solvepsbt = cmds.add_parser(\"solvepsbt\", help=\"Solve a signed block PSBT\")\n+    solvepsbt.set_defaults(fn=do_solvepsbt)\n+\n+    generate = cmds.add_parser(\"generate\", help=\"Mine blocks\")\n+    generate.set_defaults(fn=do_generate)\n+    generate.add_argument(\"--ongoing\", action=\"store_true\", help=\"Keep mining blocks\")\n+    generate.add_argument(\"--max-blocks\", default=None, type=int, help=\"Max blocks to mine (default=1)\")\n+    generate.add_argument(\"--set-block-time\", default=None, type=int, help=\"Set block time (unix timestamp)\")\n+    generate.add_argument(\"--nbits\", default=None, type=str, help=\"Target nBits (specify difficulty)\")\n+    generate.add_argument(\"--min-nbits\", action=\"store_true\", help=\"Target minimum nBits (use min difficulty)\")\n+    generate.add_argument(\"--poisson\", action=\"store_true\", help=\"Simulate randomised block times\")\n+    #generate.add_argument(\"--signcmd\", default=None, type=str, help=\"Alternative signing command\")\n+    generate.add_argument(\"--multiminer\", default=None, type=str, help=\"Specify which set of blocks to mine (eg: 1-40/100 for the first 40%%, 2/3 for the second 3rd)\")\n+    generate.add_argument(\"--backup-delay\", default=300, type=int, help=\"Seconds to delay before mining blocks reserved for other miners (default=300)\")\n+    generate.add_argument(\"--standby-delay\", default=0, type=int, help=\"Seconds to delay before mining blocks (default=0)\")\n+\n+    calibrate = cmds.add_parser(\"calibrate\", help=\"Calibrate difficulty\")\n+    calibrate.set_defaults(fn=do_calibrate)\n+    calibrate.add_argument(\"--nbits\", type=str, default=None)\n+    calibrate.add_argument(\"--seconds\", type=int, default=None)\n+\n+    for sp in [genpsbt, generate]:\n+        sp.add_argument(\"--address\", default=None, type=str, help=\"Address for block reward payment\")\n+        sp.add_argument(\"--descriptor\", default=None, type=str, help=\"Descriptor for block reward payment\")\n+\n+    for sp in [solvepsbt, generate, calibrate]:\n+        sp.add_argument(\"--grind-cmd\", default=None, type=str, help=\"Command to grind a block header for proof-of-work\")\n+\n+    args = parser.parse_args(sys.argv[1:])\n+\n+    args.bcli = lambda *a, input=b\"\", **kwargs: bitcoin_cli(args.cli.split(\" \"), list(a), input=input, **kwargs)\n+\n+    if hasattr(args, \"address\") and hasattr(args, \"descriptor\"):\n+        if args.address is None and args.descriptor is None:\n+            sys.stderr.write(\"Must specify --address or --descriptor\\n\")\n+            return 1\n+        elif args.address is not None and args.descriptor is not None:\n+            sys.stderr.write(\"Only specify one of --address or --descriptor\\n\")\n+            return 1\n+        args.derived_addresses = {}\n+\n+    if args.debug:\n+        logging.getLogger().setLevel(logging.DEBUG)\n+    elif args.quiet:\n+        logging.getLogger().setLevel(logging.WARNING)\n+    else:\n+        logging.getLogger().setLevel(logging.INFO)\n+\n+    if hasattr(args, \"fn\"):\n+        return args.fn(args)\n+    else:\n+        logging.error(\"Must specify command\")\n+        return 1\n+\n+if __name__ == \"__main__\":\n+    main()\n+\n+"
      },
      {
        "sha": "eaca473b400f0e57066d7f13062dc247dab7f41b",
        "filename": "contrib/testgen/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/testgen/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/testgen/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/README.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -4,5 +4,5 @@ Utilities to generate test vectors for the data-driven Bitcoin tests.\n \n Usage:\n \n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 50 > ../../src/test/data/key_io_keys_valid.json\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 50 > ../../src/test/data/key_io_keys_invalid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 50 > ../../src/test/data/key_io_valid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 50 > ../../src/test/data/key_io_invalid.json"
      },
      {
        "sha": "87341ccf96dcdf64ee5b609ba8b743d0d4a06d60",
        "filename": "contrib/testgen/base58.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/testgen/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/testgen/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/base58.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,4 +1,4 @@\n-# Copyright (c) 2012-2018 The Bitcoin Core developers\n+# Copyright (c) 2012-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n@@ -107,7 +107,7 @@ def get_bcaddress_version(strAddress):\n \n if __name__ == '__main__':\n     # Test case (from http://gitorious.org/bitcoin/python-base58.git)\n-    assert get_bcaddress_version('15VjRaDX9zpbA8LVnbrCAFzrVzN7ixHNsC') is 0\n+    assert get_bcaddress_version('15VjRaDX9zpbA8LVnbrCAFzrVzN7ixHNsC') == 0\n     _ohai = 'o hai'.encode('ascii')\n     _tmp = b58encode(_ohai)\n     assert _tmp == 'DYB3oMS'"
      },
      {
        "sha": "8a3918da6b712534bddeb831c99c846cd1e86b49",
        "filename": "contrib/testgen/gen_key_io_test_vectors.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/testgen/gen_key_io_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/testgen/gen_key_io_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_key_io_test_vectors.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2012-2018 The Bitcoin Core developers\n+# Copyright (c) 2012-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n@@ -15,8 +15,7 @@\n from itertools import islice\n from base58 import b58encode_chk, b58decode_chk, b58chars\n import random\n-from binascii import b2a_hex\n-from segwit_addr import bech32_encode, decode, convertbits, CHARSET\n+from segwit_addr import bech32_encode, decode_segwit_address, convertbits, CHARSET\n \n # key types\n PUBKEY_ADDRESS = 0\n@@ -109,7 +108,7 @@ def is_valid(v):\n def is_valid_bech32(v):\n     '''Check vector v for bech32 validity'''\n     for hrp in ['bc', 'tb', 'bcrt']:\n-        if decode(hrp, v) != (None, None):\n+        if decode_segwit_address(hrp, v) != (None, None):\n             return True\n     return False\n \n@@ -141,9 +140,7 @@ def gen_valid_vectors():\n             rv, payload = valid_vector_generator(template)\n             assert is_valid(rv)\n             metadata = {x: y for x, y in zip(metadata_keys,template[3]) if y is not None}\n-            hexrepr = b2a_hex(payload)\n-            if isinstance(hexrepr, bytes):\n-                hexrepr = hexrepr.decode('utf8')\n+            hexrepr = payload.hex()\n             yield (rv, hexrepr, metadata)\n \n def gen_invalid_base58_vector(template):"
      },
      {
        "sha": "ece02dc24e8f93f248102c3dd810ed6394792414",
        "filename": "contrib/valgrind.supp",
        "status": "modified",
        "additions": 6,
        "deletions": 20,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/valgrind.supp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/valgrind.supp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/valgrind.supp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,7 +1,5 @@\n-# Valgrind suppressions file for Bitcoin.\n-#\n-# Includes known Valgrind warnings in our dependencies that cannot be fixed\n-# in-tree.\n+# This valgrind suppressions file includes known Valgrind warnings in our\n+# dependencies that cannot be fixed in-tree.\n #\n # Example use:\n # $ valgrind --suppressions=contrib/valgrind.supp src/test/test_bitcoin\n@@ -14,6 +12,9 @@\n #       --error-limit=no src/test/test_bitcoin\n #\n # Note that suppressions may depend on OS and/or library versions.\n+# Tested on:\n+# * aarch64 (Ubuntu 20.04 system libs, without gui)\n+# * x86_64  (Ubuntu 18.04 system libs, without gui)\n {\n    Suppress libstdc++ warning - https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65434\n    Memcheck:Leak\n@@ -47,8 +48,7 @@\n    Suppress libdb warning\n    Memcheck:Param\n    pwrite64(buf)\n-   fun:pwrite\n-   fun:__os_io\n+   ...\n    obj:*/libdb_cxx-*.so\n }\n {\n@@ -123,7 +123,6 @@\n    Memcheck:Cond\n    ...\n    fun:_ZN5boost10filesystem6detail11unique_pathERKNS0_4pathEPNS_6system10error_codeE\n-   fun:unique_path\n }\n {\n    Suppress boost warning\n@@ -184,16 +183,3 @@\n    ...\n    fun:_ZN5BCLog6Logger12StartLoggingEv\n }\n-{\n-   Suppress BCLog::Logger::StartLogging() still reachable memory warning\n-   Memcheck:Leak\n-   match-leak-kinds: reachable\n-   fun:malloc\n-   ...\n-   fun:_ZN5BCLog6Logger12StartLoggingEv\n-}\n-{\n-   Suppress rest_blockhash_by_height Conditional jump or move depends on uninitialised value(s)\n-   Memcheck:Cond\n-   fun:_ZL24rest_blockhash_by_heightP11HTTPRequestRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\n-}"
      },
      {
        "sha": "c50d4bef7151c4d3b0a56f57d8dc2418c1ee34ca",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -21,21 +21,21 @@ The script returns 0 if everything passes the checks. It returns 1 if either the\n \n \n ```sh\n-./verify.sh bitcoin-core-0.11.2\n-./verify.sh bitcoin-core-0.12.0\n-./verify.sh bitcoin-core-0.13.0-rc3\n+./verify.py bitcoin-core-0.11.2\n+./verify.py bitcoin-core-0.12.0\n+./verify.py bitcoin-core-0.13.0-rc3\n ```\n \n If you only want to download the binaries of certain platform, add the corresponding suffix, e.g.:\n \n ```sh\n-./verify.sh bitcoin-core-0.11.2-osx\n-./verify.sh 0.12.0-linux\n-./verify.sh bitcoin-core-0.13.0-rc3-win64\n+./verify.py bitcoin-core-0.11.2-osx\n+./verify.py 0.12.0-linux\n+./verify.py bitcoin-core-0.13.0-rc3-win64\n ```\n \n If you do not want to keep the downloaded binaries, specify anything as the second parameter.\n \n ```sh\n-./verify.sh bitcoin-core-0.13.0 delete\n+./verify.py bitcoin-core-0.13.0 delete\n ```"
      },
      {
        "sha": "b97ad11b8ec5e96bc8969e1fc332fc97397b2455",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "added",
        "additions": 183,
        "deletions": 0,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,183 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+from hashlib import sha256\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-O', local_file, remote_file]\n+    else:\n+        # use timestamping mechanism if local filename is not explicitely set\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def files_are_equal(filename1, filename2):\n+    with open(filename1, 'rb') as file1:\n+        contents1 = file1.read()\n+    with open(filename2, 'rb') as file2:\n+        contents2 = file2.read()\n+    return contents1 == contents2\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n+                             output_filename, signature_filename],\n+                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+def main(args):\n+    # sanity check\n+    if len(args) < 1:\n+        print(\"Error: need to specify a version on the command line\")\n+        return 3\n+\n+    # determine remote dir dependend on provided version string\n+    version_base, version_rc, os_filter = parse_version_string(args[0])\n+    remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n+    if version_rc:\n+        remote_dir += f\"test.{version_rc}/\"\n+    remote_sigfile = remote_dir + SIGNATUREFILENAME\n+\n+    # create working directory\n+    os.makedirs(WORKINGDIR, exist_ok=True)\n+    os.chdir(WORKINGDIR)\n+\n+    # fetch first signature file\n+    sigfile1 = SIGNATUREFILENAME\n+    success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n+    if not success:\n+        print(\"Error: couldn't fetch signature file. \"\n+              \"Have you specified the version number in the following format?\")\n+        print(f\"[{VERSIONPREFIX}]<version>[-rc[0-9]][-platform] \"\n+              f\"(example: {VERSIONPREFIX}0.21.0-rc3-osx)\")\n+        print(\"wget output:\")\n+        print(indent(output, '\\t'))\n+        return 4\n+\n+    # fetch second signature file\n+    sigfile2 = SIGNATUREFILENAME + \".2\"\n+    success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n+    if not success:\n+        print(\"bitcoin.org failed to provide signature file, \"\n+              \"but bitcoincore.org did?\")\n+        print(\"wget output:\")\n+        print(indent(output, '\\t'))\n+        remove_files([sigfile1])\n+        return 5\n+\n+    # ensure that both signature files are equal\n+    if not files_are_equal(sigfile1, sigfile2):\n+        print(\"bitcoin.org and bitcoincore.org signature files were not equal?\")\n+        print(f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n+        return 6\n+\n+    # check signature and extract data into file\n+    retval, output = verify_with_gpg(sigfile1, HASHFILE)\n+    if retval != 0:\n+        if retval == 1:\n+            print(\"Bad signature.\")\n+        elif retval == 2:\n+            print(\"gpg error. Do you have the Bitcoin Core binary release \"\n+                  \"signing key installed?\")\n+        print(\"gpg output:\")\n+        print(indent(output, '\\t'))\n+        remove_files([sigfile1, sigfile2, HASHFILE])\n+        return 1\n+\n+    # extract hashes/filenames of binaries to verify from hash file;\n+    # each line has the following format: \"<hash> <binary_filename>\"\n+    with open(HASHFILE, 'r', encoding='utf8') as hash_file:\n+        hashes_to_verify = [\n+            line.split()[:2] for line in hash_file if os_filter in line]\n+    remove_files([HASHFILE])\n+    if not hashes_to_verify:\n+        print(\"error: no files matched the platform specified\")\n+        return 7\n+\n+    # download binaries\n+    for _, binary_filename in hashes_to_verify:\n+        print(f\"Downloading {binary_filename}\")\n+        download_with_wget(HOST1 + remote_dir + binary_filename)\n+\n+    # verify hashes\n+    offending_files = []\n+    for hash_expected, binary_filename in hashes_to_verify:\n+        with open(binary_filename, 'rb') as binary_file:\n+            hash_calculated = sha256(binary_file.read()).hexdigest()\n+        if hash_calculated != hash_expected:\n+            offending_files.append(binary_filename)\n+    if offending_files:\n+        print(\"Hashes don't match.\")\n+        print(\"Offending files:\")\n+        print('\\n'.join(offending_files))\n+        return 1\n+    verified_binaries = [entry[1] for entry in hashes_to_verify]\n+\n+    # clean up files if desired\n+    if len(args) >= 2:\n+        print(\"Clean up the binaries\")\n+        remove_files([sigfile1, sigfile2] + verified_binaries)\n+    else:\n+        print(f\"Keep the binaries in {WORKINGDIR}\")\n+\n+    print(\"Verified hashes of\")\n+    print('\\n'.join(verified_binaries))\n+    return 0\n+\n+\n+if __name__ == '__main__':\n+    sys.exit(main(sys.argv[1:]))"
      },
      {
        "sha": "4296998631cff715d429c5b203c41b53f8e722e0",
        "filename": "contrib/verifybinaries/verify.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 177,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/verifybinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/contrib/verifybinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.sh?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,177 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2016-2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-###   This script attempts to download the signature file SHA256SUMS.asc from\n-###   bitcoincore.org and bitcoin.org and compares them.\n-###   It first checks if the signature passes, and then downloads the files specified in\n-###   the file, and checks if the hashes of these files match those that are specified\n-###   in the signature file.\n-###   The script returns 0 if everything passes the checks. It returns 1 if either the\n-###   signature check or the hash check doesn't pass. If an error occurs the return value is 2\n-\n-export LC_ALL=C\n-function clean_up {\n-   for file in \"$@\"\n-   do\n-      rm \"$file\" 2> /dev/null\n-   done\n-}\n-\n-WORKINGDIR=\"/tmp/bitcoin_verify_binaries\"\n-TMPFILE=\"hashes.tmp\"\n-\n-SIGNATUREFILENAME=\"SHA256SUMS.asc\"\n-RCSUBDIR=\"test\"\n-HOST1=\"https://bitcoincore.org\"\n-HOST2=\"https://bitcoin.org\"\n-BASEDIR=\"/bin/\"\n-VERSIONPREFIX=\"bitcoin-core-\"\n-RCVERSIONSTRING=\"rc\"\n-\n-if [ ! -d \"$WORKINGDIR\" ]; then\n-   mkdir \"$WORKINGDIR\"\n-fi\n-\n-cd \"$WORKINGDIR\" || exit 1\n-\n-#test if a version number has been passed as an argument\n-if [ -n \"$1\" ]; then\n-   #let's also check if the version number includes the prefix 'bitcoin-',\n-   #  and add this prefix if it doesn't\n-   if [[ $1 == \"$VERSIONPREFIX\"* ]]; then\n-      VERSION=\"$1\"\n-   else\n-      VERSION=\"$VERSIONPREFIX$1\"\n-   fi\n-\n-   STRIPPEDLAST=\"${VERSION%-*}\"\n-\n-   #now let's see if the version string contains \"rc\" or a platform name (e.g. \"osx\")\n-   if [[ \"$STRIPPEDLAST-\" == \"$VERSIONPREFIX\" ]]; then\n-      BASEDIR=\"$BASEDIR$VERSION/\"\n-   else\n-      # let's examine the last part to see if it's rc and/or platform name\n-      STRIPPEDNEXTTOLAST=\"${STRIPPEDLAST%-*}\"\n-      if [[ \"$STRIPPEDNEXTTOLAST-\" == \"$VERSIONPREFIX\" ]]; then\n-\n-         LASTSUFFIX=\"${VERSION##*-}\"\n-         VERSION=\"$STRIPPEDLAST\"\n-\n-         if [[ $LASTSUFFIX == *\"$RCVERSIONSTRING\"* ]]; then\n-            RCVERSION=\"$LASTSUFFIX\"\n-         else\n-            PLATFORM=\"$LASTSUFFIX\"\n-         fi\n-\n-      else\n-         RCVERSION=\"${STRIPPEDLAST##*-}\"\n-         PLATFORM=\"${VERSION##*-}\"\n-\n-         VERSION=\"$STRIPPEDNEXTTOLAST\"\n-      fi\n-\n-      BASEDIR=\"$BASEDIR$VERSION/\"\n-      if [[ $RCVERSION == *\"$RCVERSIONSTRING\"* ]]; then\n-         BASEDIR=\"$BASEDIR$RCSUBDIR.$RCVERSION/\"\n-      fi\n-   fi\n-else\n-   echo \"Error: need to specify a version on the command line\"\n-   exit 2\n-fi\n-\n-if ! WGETOUT=$(wget -N \"$HOST1$BASEDIR$SIGNATUREFILENAME\" 2>&1); then\n-   echo \"Error: couldn't fetch signature file. Have you specified the version number in the following format?\"\n-   # shellcheck disable=SC1087\n-   echo \"[$VERSIONPREFIX]<version>-[$RCVERSIONSTRING[0-9]] (example: ${VERSIONPREFIX}0.10.4-${RCVERSIONSTRING}1)\"\n-   echo \"wget output:\"\n-   # shellcheck disable=SC2001\n-   echo \"$WGETOUT\"|sed 's/^/\\t/g'\n-   exit 2\n-fi\n-\n-if ! WGETOUT=$(wget -N -O \"$SIGNATUREFILENAME.2\" \"$HOST2$BASEDIR$SIGNATUREFILENAME\" 2>&1); then\n-   echo \"bitcoin.org failed to provide signature file, but bitcoincore.org did?\"\n-   echo \"wget output:\"\n-   # shellcheck disable=SC2001\n-   echo \"$WGETOUT\"|sed 's/^/\\t/g'\n-   clean_up $SIGNATUREFILENAME\n-   exit 3\n-fi\n-\n-SIGFILEDIFFS=\"$(diff $SIGNATUREFILENAME $SIGNATUREFILENAME.2)\"\n-if [ \"$SIGFILEDIFFS\" != \"\" ]; then\n-   echo \"bitcoin.org and bitcoincore.org signature files were not equal?\"\n-   clean_up $SIGNATUREFILENAME $SIGNATUREFILENAME.2\n-   exit 4\n-fi\n-\n-#then we check it\n-GPGOUT=$(gpg --yes --decrypt --output \"$TMPFILE\" \"$SIGNATUREFILENAME\" 2>&1)\n-\n-#return value 0: good signature\n-#return value 1: bad signature\n-#return value 2: gpg error\n-\n-RET=\"$?\"\n-if [ $RET -ne 0 ]; then\n-   if [ $RET -eq 1 ]; then\n-      #and notify the user if it's bad\n-      echo \"Bad signature.\"\n-   elif [ $RET -eq 2 ]; then\n-      #or if a gpg error has occurred\n-      echo \"gpg error. Do you have the Bitcoin Core binary release signing key installed?\"\n-   fi\n-\n-   echo \"gpg output:\"\n-   # shellcheck disable=SC2001\n-   echo \"$GPGOUT\"|sed 's/^/\\t/g'\n-   clean_up $SIGNATUREFILENAME $SIGNATUREFILENAME.2 $TMPFILE\n-   exit \"$RET\"\n-fi\n-\n-if [ -n \"$PLATFORM\" ]; then\n-   grep $PLATFORM $TMPFILE > \"$TMPFILE-plat\"\n-   TMPFILESIZE=$(stat -c%s \"$TMPFILE-plat\")\n-   if [ $TMPFILESIZE -eq 0 ]; then\n-      echo \"error: no files matched the platform specified\" && exit 3\n-   fi\n-   mv \"$TMPFILE-plat\" $TMPFILE\n-fi\n-\n-#here we extract the filenames from the signature file\n-FILES=$(awk '{print $2}' \"$TMPFILE\")\n-\n-#and download these one by one\n-for file in $FILES\n-do\n-   echo \"Downloading $file\"\n-   wget --quiet -N \"$HOST1$BASEDIR$file\"\n-done\n-\n-#check hashes\n-DIFF=$(diff <(sha256sum $FILES) \"$TMPFILE\")\n-\n-if [ $? -eq 1 ]; then\n-   echo \"Hashes don't match.\"\n-   echo \"Offending files:\"\n-   echo \"$DIFF\"|grep \"^<\"|awk '{print \"\\t\"$3}'\n-   exit 1\n-elif [ $? -gt 1 ]; then\n-   echo \"Error executing 'diff'\"\n-   exit 2\n-fi\n-\n-if [ -n \"$2\" ]; then\n-   echo \"Clean up the binaries\"\n-   clean_up $FILES $SIGNATUREFILENAME $SIGNATUREFILENAME.2 $TMPFILE\n-else\n-   echo \"Keep the binaries in $WORKINGDIR\"\n-   clean_up $TMPFILE\n-fi\n-\n-echo -e \"Verified hashes of \\n$FILES\"\n-\n-exit 0"
      },
      {
        "sha": "9cb887e2dc74cb51103f45e2d5ca392fa81cf113",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,7 +11,8 @@\n                 -zmqpubrawtx=tcp://127.0.0.1:28332 \\\n                 -zmqpubrawblock=tcp://127.0.0.1:28332 \\\n                 -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n-                -zmqpubhashblock=tcp://127.0.0.1:28332\n+                -zmqpubhashblock=tcp://127.0.0.1:28332 \\\n+                -zmqpubsequence=tcp://127.0.0.1:28332\n \n     We use the asyncio library here.  `self.handle()` installs itself as a\n     future at the end of the function.  Since it never returns with the event\n@@ -47,16 +48,14 @@ def __init__(self):\n         self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n         self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")\n         self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawtx\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"sequence\")\n         self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n \n     async def handle(self) :\n-        msg = await self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        body = msg[1]\n+        topic, body, seq = await self.zmqSubSocket.recv_multipart()\n         sequence = \"Unknown\"\n-        if len(msg[-1]) == 4:\n-          msgSequence = struct.unpack('<I', msg[-1])[-1]\n-          sequence = str(msgSequence)\n+        if len(seq) == 4:\n+            sequence = str(struct.unpack('<I', seq)[-1])\n         if topic == b\"hashblock\":\n             print('- HASH BLOCK ('+sequence+') -')\n             print(binascii.hexlify(body))\n@@ -69,6 +68,12 @@ async def handle(self) :\n         elif topic == b\"rawtx\":\n             print('- RAW TX ('+sequence+') -')\n             print(binascii.hexlify(body))\n+        elif topic == b\"sequence\":\n+            hash = binascii.hexlify(body[:32])\n+            label = chr(body[32])\n+            mempool_sequence = None if len(body) != 32+1+8 else struct.unpack(\"<Q\", body[32+1:])[0]\n+            print('- SEQUENCE ('+sequence+') -')\n+            print(hash, label, mempool_sequence)\n         # schedule ourselves to receive the next message\n         asyncio.ensure_future(self.handle())\n "
      },
      {
        "sha": "596a46d4a242898e247cd77e744e7c9be63acda6",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 79,
        "deletions": 9,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -4,6 +4,30 @@\n print-%:\n \t@echo $* = $($*)\n \n+# When invoking a sub-make, keep only the command line variable definitions\n+# matching the pattern in the filter function.\n+#\n+# e.g. invoking:\n+#   $ make A=1 C=1 print-MAKEOVERRIDES print-MAKEFLAGS\n+#\n+# with the following in the Makefile:\n+#   MAKEOVERRIDES := $(filter A=% B=%,$(MAKEOVERRIDES))\n+#\n+# will print:\n+#   MAKEOVERRIDES = A=1\n+#   MAKEFLAGS = -- A=1\n+#\n+# this is because as the GNU make manual says:\n+#   The command line variable definitions really appear in the variable\n+#   MAKEOVERRIDES, and MAKEFLAGS contains a reference to this variable.\n+#\n+# and since the GNU make manual also says:\n+#   variables defined on the command line are passed to the sub-make through\n+#   MAKEFLAGS\n+#\n+# this means that sub-makes will be invoked as if:\n+#   $(MAKE) A=1 blah blah\n+MAKEOVERRIDES := $(filter V=%,$(MAKEOVERRIDES))\n SOURCES_PATH ?= $(BASEDIR)/sources\n WORK_PATH = $(BASEDIR)/work\n BASE_CACHE ?= $(BASEDIR)/built\n@@ -13,6 +37,8 @@ NO_QR ?=\n NO_WALLET ?=\n NO_ZMQ ?=\n NO_UPNP ?=\n+NO_NATPMP ?=\n+MULTIPROCESS ?=\n FALLBACK_DOWNLOAD_PATH ?= https://bitcoincore.org/depends-sources\n \n BUILD = $(shell ./config.guess)\n@@ -100,30 +126,48 @@ $(host_arch)_$(host_os)_id_string+=$(shell $(host_CXX) --version 2>/dev/null)\n $(host_arch)_$(host_os)_id_string+=$(shell $(host_RANLIB) --version 2>/dev/null)\n $(host_arch)_$(host_os)_id_string+=$(shell $(host_STRIP) --version 2>/dev/null)\n \n+ifneq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n+# Make sure that cache is invalidated when switching between system and\n+# depends-managed, pinned clang\n+build_id_string+=system_clang\n+$(host_arch)_$(host_os)_id_string+=system_clang\n+endif\n+\n qrencode_packages_$(NO_QR) = $(qrencode_packages)\n \n qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch)_$(host_os)_packages) $(qrencode_packages_)\n \n-wallet_packages_$(NO_WALLET) = $(wallet_packages)\n+bdb_packages_$(NO_BDB) = $(bdb_packages)\n+sqlite_packages_$(NO_SQLITE) = $(sqlite_packages)\n+wallet_packages_$(NO_WALLET) = $(bdb_packages_) $(sqlite_packages_)\n+\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n+natpmp_packages_$(NO_NATPMP) = $(natpmp_packages)\n+\n zmq_packages_$(NO_ZMQ) = $(zmq_packages)\n+multiprocess_packages_$(MULTIPROCESS) = $(multiprocess_packages)\n \n-packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_)\n+packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_) $(natpmp_packages_)\n native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages)\n \n ifneq ($(zmq_packages_),)\n packages += $(zmq_packages)\n endif\n \n+ifeq ($(multiprocess_packages_),)\n+packages += $(multiprocess_packages)\n+native_packages += $(multiprocess_native_packages)\n+endif\n+\n all_packages = $(packages) $(native_packages)\n \n meta_depends = Makefile funcs.mk builders/default.mk hosts/default.mk hosts/$(host_os).mk builders/$(build_os).mk\n \n+$(host_arch)_$(host_os)_native_binutils?=$($(host_os)_native_binutils)\n $(host_arch)_$(host_os)_native_toolchain?=$($(host_os)_native_toolchain)\n \n include funcs.mk\n \n-toolchain_path=$($($(host_arch)_$(host_os)_native_toolchain)_prefixbin)\n final_build_id_long+=$(shell $(build_SHA256SUM) config.site.in)\n final_build_id+=$(shell echo -n \"$(final_build_id_long)\" | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH))\n $(host_prefix)/.stamp_$(final_build_id): $(native_packages) $(packages)\n@@ -134,15 +178,39 @@ $(host_prefix)/.stamp_$(final_build_id): $(native_packages) $(packages)\n \t$(AT)cd $(@D); $(foreach package,$^, tar xf $($(package)_cached); )\n \t$(AT)touch $@\n \n+# $PATH is not preserved between ./configure and make by convention. Its\n+# modification and overriding at ./configure time is (as I understand it)\n+# supposed to be captured by the AC_{PROG_{,OBJ}CXX,PATH_{PROG,TOOL}} macros,\n+# which will expand the program names to their full absolute paths. The notable\n+# exception is command line overriding: ./configure CC=clang, which skips the\n+# program name expansion step, and works because the user implicitly indicates\n+# with CC=clang that clang will be available in $PATH at all times, and is most\n+# likely part of the user's system.\n+#\n+# Therefore, when we \"seed the autoconf cache\"/\"override well-known program\n+# vars\" by setting AR=<blah> in our config.site, either one of two things needs\n+# to be true for the build system to work correctly:\n+#\n+#   1. If we refer to the program by name (e.g. AR=riscv64-gnu-linux-ar), the\n+#      tool needs to be available in $PATH at all times.\n+#\n+#   2. If the tool is _**not**_ expected to be available in $PATH at all times\n+#      (such as is the case for our native_cctools binutils tools), it needs to\n+#      be referred to by its absolute path, such as would be output by the\n+#      AC_PATH_{PROG,TOOL} macros.\n+#\n+# Minor note: it is also okay to refer to tools by their absolute path even if\n+# we expect them to be available in $PATH at all times, more specificity does\n+# not hurt.\n $(host_prefix)/share/config.site : config.site.in $(host_prefix)/.stamp_$(final_build_id)\n \t$(AT)@mkdir -p $(@D)\n \t$(AT)sed -e 's|@HOST@|$(host)|' \\\n-            -e 's|@CC@|$(toolchain_path)$(host_CC)|' \\\n-            -e 's|@CXX@|$(toolchain_path)$(host_CXX)|' \\\n-            -e 's|@AR@|$(toolchain_path)$(host_AR)|' \\\n-            -e 's|@RANLIB@|$(toolchain_path)$(host_RANLIB)|' \\\n-            -e 's|@NM@|$(toolchain_path)$(host_NM)|' \\\n-            -e 's|@STRIP@|$(toolchain_path)$(host_STRIP)|' \\\n+            -e 's|@CC@|$(host_CC)|' \\\n+            -e 's|@CXX@|$(host_CXX)|' \\\n+            -e 's|@AR@|$(host_AR)|' \\\n+            -e 's|@RANLIB@|$(host_RANLIB)|' \\\n+            -e 's|@NM@|$(host_NM)|' \\\n+            -e 's|@STRIP@|$(host_STRIP)|' \\\n             -e 's|@build_os@|$(build_os)|' \\\n             -e 's|@host_os@|$(host_os)|' \\\n             -e 's|@CFLAGS@|$(strip $(host_CFLAGS) $(host_$(release_type)_CFLAGS))|' \\\n@@ -155,6 +223,8 @@ $(host_prefix)/share/config.site : config.site.in $(host_prefix)/.stamp_$(final_\n             -e 's|@no_zmq@|$(NO_ZMQ)|' \\\n             -e 's|@no_wallet@|$(NO_WALLET)|' \\\n             -e 's|@no_upnp@|$(NO_UPNP)|' \\\n+            -e 's|@no_natpmp@|$(NO_NATPMP)|' \\\n+            -e 's|@multiprocess@|$(MULTIPROCESS)|' \\\n             -e 's|@debug@|$(DEBUG)|' \\\n             $< > $@\n \t$(AT)touch $@"
      },
      {
        "sha": "9e9878c5957758522eca8d6c1685996082100392",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 27,
        "deletions": 16,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -25,7 +25,7 @@ Common `host-platform-triplets` for cross compilation are:\n - `i686-pc-linux-gnu` for Linux 32 bit\n - `x86_64-pc-linux-gnu` for x86 Linux\n - `x86_64-w64-mingw32` for Win64\n-- `x86_64-apple-darwin16` for macOS\n+- `x86_64-apple-darwin18` for macOS\n - `arm-linux-gnueabihf` for Linux ARM 32 bit\n - `aarch64-linux-gnu` for Linux ARM 64 bit\n - `powerpc64-linux-gnu` for Linux POWER 64-bit (big endian)\n@@ -44,7 +44,7 @@ The paths are automatically configured and no other options are needed unless ta\n \n #### For macOS cross compilation\n \n-    sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python3-setuptools\n+    sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python3-setuptools libtinfo5 xorriso\n \n #### For Win64 cross compilation\n \n@@ -80,20 +80,31 @@ For linux S390X cross compilation:\n     sudo apt-get install g++-s390x-linux-gnu binutils-s390x-linux-gnu\n \n ### Dependency Options\n-The following can be set when running make: make FOO=bar\n-\n-    SOURCES_PATH: downloaded sources will be placed here\n-    BASE_CACHE: built packages will be placed here\n-    SDK_PATH: Path where sdk's can be found (used by macOS)\n-    FALLBACK_DOWNLOAD_PATH: If a source file can't be fetched, try here before giving up\n-    NO_QT: Don't download/build/cache qt and its dependencies\n-    NO_QR: Don't download/build/cache packages needed for enabling qrencode\n-    NO_ZMQ: Don't download/build/cache packages needed for enabling zeromq\n-    NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n-    NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n-    DEBUG: disable some optimizations and enable more runtime checking\n-    HOST_ID_SALT: Optional salt to use when generating host package ids\n-    BUILD_ID_SALT: Optional salt to use when generating build package ids\n+\n+The following can be set when running make: `make FOO=bar`\n+\n+- `SOURCES_PATH`: Downloaded sources will be placed here\n+- `BASE_CACHE`: Built packages will be placed here\n+- `SDK_PATH`: Path where SDKs can be found (used by macOS)\n+- `FALLBACK_DOWNLOAD_PATH`: If a source file can't be fetched, try here before giving up\n+- `NO_QT`: Don't download/build/cache Qt and its dependencies\n+- `NO_QR`: Don't download/build/cache packages needed for enabling qrencode\n+- `NO_ZMQ`: Don't download/build/cache packages needed for enabling ZeroMQ\n+- `NO_WALLET`: Don't download/build/cache libs needed to enable the wallet\n+- `NO_BDB`: Don't download/build/cache BerkeleyDB\n+- `NO_SQLITE`: Don't download/build/cache SQLite\n+- `NO_UPNP`: Don't download/build/cache packages needed for enabling UPnP\n+- `NO_NATPMP`: Don't download/build/cache packages needed for enabling NAT-PMP</dd>\n+- `ALLOW_HOST_PACKAGES`: Packages that are missed in dependencies (due to `NO_*` option or\n+  build script logic) are searched for among the host system packages using\n+  `pkg-config`. It allows building with packages of other (newer) versions\n+- `MULTIPROCESS`: Build libmultiprocess (experimental, requires CMake)\n+- `DEBUG`: Disable some optimizations and enable more runtime checking\n+- `HOST_ID_SALT`: Optional salt to use when generating host package ids\n+- `BUILD_ID_SALT`: Optional salt to use when generating build package ids\n+- `FORCE_USE_SYSTEM_CLANG`: (EXPERTS ONLY) When cross-compiling for macOS, use Clang found in the\n+  system's `$PATH` rather than the default prebuilt release of Clang\n+  from llvm.org. Clang 8 or later is required.\n \n If some packages are not built, for example `make NO_WALLET=1`, the appropriate\n options will be passed to bitcoin's configure. In this case, `--disable-wallet`."
      },
      {
        "sha": "f4103fc1f27eebb9f85a913413d4ff755bab6ea9",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,5 +1,5 @@\n-build_darwin_CC:=$(shell xcrun -f clang)\n-build_darwin_CXX:=$(shell xcrun -f clang++)\n+build_darwin_CC:=$(shell xcrun -f clang) --sysroot $(shell xcrun --show-sdk-path)\n+build_darwin_CXX:=$(shell xcrun -f clang++) --sysroot $(shell xcrun --show-sdk-path)\n build_darwin_AR:=$(shell xcrun -f ar)\n build_darwin_RANLIB:=$(shell xcrun -f ranlib)\n build_darwin_STRIP:=$(shell xcrun -f strip)\n@@ -19,4 +19,5 @@ darwin_LIBTOOL:=$(shell xcrun -f libtool)\n darwin_OTOOL:=$(shell xcrun -f otool)\n darwin_NM:=$(shell xcrun -f nm)\n darwin_INSTALL_NAME_TOOL:=$(shell xcrun -f install_name_tool)\n+darwin_native_binutils=\n darwin_native_toolchain="
      },
      {
        "sha": "391767357a1a1338a351636ad865997eab318365",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 55,
        "deletions": 43,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,106 +1,118 @@\n-depends_prefix=\"`dirname ${ac_site_file}`/..\"\n+# shellcheck shell=sh disable=SC2034 # Many variables set will be used in\n+                                     # ./configure but shellcheck doesn't know\n+                                     # that, hence: disable=SC2034\n+\n+true  # Dummy command because shellcheck treats all directives before first\n+      # command as file-wide, and we only want to disable for one line.\n+      #\n+      # See: https://github.com/koalaman/shellcheck/wiki/Directive\n+\n+# shellcheck disable=SC2154\n+depends_prefix=\"$(cd \"$(dirname \"$ac_site_file\")/..\" && pwd)\"\n \n cross_compiling=maybe\n-host_alias=@HOST@\n-ac_tool_prefix=${host_alias}-\n+host_alias=\"@HOST@\"\n+ac_tool_prefix=\"${host_alias}-\"\n \n-if test -z $with_boost; then\n-  with_boost=$depends_prefix\n+if test -z \"$with_boost\"; then\n+  with_boost=\"$depends_prefix\"\n+fi\n+if test -z \"$with_qt_plugindir\"; then\n+  with_qt_plugindir=\"${depends_prefix}/plugins\"\n fi\n-if test -z $with_qt_plugindir; then\n-  with_qt_plugindir=$depends_prefix/plugins\n+if test -z \"$with_qt_translationdir\"; then\n+  with_qt_translationdir=\"${depends_prefix}/translations\"\n fi\n-if test -z $with_qt_translationdir; then\n-  with_qt_translationdir=$depends_prefix/translations\n+if test -z \"$with_qt_bindir\" && test -z \"@no_qt@\"; then\n+  with_qt_bindir=\"${depends_prefix}/native/bin\"\n fi\n-if test -z $with_qt_bindir && test -z \"@no_qt@\"; then\n-  with_qt_bindir=$depends_prefix/native/bin\n+if test -z \"$with_mpgen\" && test -n \"@multiprocess@\"; then\n+  with_mpgen=\"${depends_prefix}/native\"\n fi\n \n-if test -z $with_qrencode && test -n \"@no_qr@\"; then\n+if test -z \"$with_qrencode\" && test -n \"@no_qr@\"; then\n   with_qrencode=no\n fi\n \n-if test -z $enable_wallet && test -n \"@no_wallet@\"; then\n+if test -z \"$enable_wallet\" && test -n \"@no_wallet@\"; then\n   enable_wallet=no\n fi\n \n-if test -z $with_miniupnpc && test -n \"@no_upnp@\"; then\n+if test -z \"$enable_multiprocess\" && test -n \"@multiprocess@\"; then\n+  enable_multiprocess=yes\n+fi\n+\n+if test -z \"$with_miniupnpc\" && test -n \"@no_upnp@\"; then\n   with_miniupnpc=no\n fi\n \n-if test -z $with_gui && test -n \"@no_qt@\"; then\n+if test -z \"$with_natpmp\" && test -n \"@no_natpmp@\"; then\n+  with_natpmp=no\n+fi\n+\n+if test -z \"$with_gui\" && test -n \"@no_qt@\"; then\n   with_gui=no\n fi\n \n-if test -z $enable_zmq && test -n \"@no_zmq@\"; then\n+if test -z \"$enable_zmq\" && test -n \"@no_zmq@\"; then\n   enable_zmq=no\n fi\n \n-if test x@host_os@ = xdarwin; then\n+if test \"x@host_os@\" = xdarwin; then\n   BREW=no\n   PORT=no\n fi\n \n-if test x@host_os@ = xmingw32; then\n-  if test -z $with_qt_incdir; then\n-    with_qt_incdir=$depends_prefix/include\n-  fi\n-  if test -z $with_qt_libdir; then\n-    with_qt_libdir=$depends_prefix/lib\n-  fi\n-fi\n-\n-PATH=$depends_prefix/native/bin:$PATH\n-PKG_CONFIG=\"`which pkg-config` --static\"\n+PATH=\"${depends_prefix}/native/bin:${PATH}\"\n+PKG_CONFIG=\"$(which pkg-config) --static\"\n \n # These two need to remain exported because pkg-config does not see them\n # otherwise. That means they must be unexported at the end of configure.ac to\n # avoid ruining the cache. Sigh.\n-export PKG_CONFIG_PATH=$depends_prefix/share/pkgconfig:$depends_prefix/lib/pkgconfig\n+export PKG_CONFIG_PATH=\"${depends_prefix}/share/pkgconfig:${depends_prefix}/lib/pkgconfig\"\n if test -z \"@allow_host_packages@\"; then\n-  export PKG_CONFIG_LIBDIR=$depends_prefix/lib/pkgconfig\n+  export PKG_CONFIG_LIBDIR=\"${depends_prefix}/lib/pkgconfig\"\n fi\n \n-CPPFLAGS=\"-I$depends_prefix/include/ $CPPFLAGS\"\n-LDFLAGS=\"-L$depends_prefix/lib $LDFLAGS\"\n+CPPFLAGS=\"-I${depends_prefix}/include/ ${CPPFLAGS}\"\n+LDFLAGS=\"-L${depends_prefix}/lib ${LDFLAGS}\"\n \n if test -n \"@CC@\" -a -z \"${CC}\"; then\n   CC=\"@CC@\"\n fi\n if test -n \"@CXX@\" -a -z \"${CXX}\"; then\n   CXX=\"@CXX@\"\n fi\n-PYTHONPATH=$depends_prefix/native/lib/python3/dist-packages:$PYTHONPATH\n+PYTHONPATH=\"${depends_prefix}/native/lib/python3/dist-packages${PYTHONPATH:+${PATH_SEPARATOR}}${PYTHONPATH}\"\n \n if test -n \"@AR@\"; then\n-  AR=@AR@\n-  ac_cv_path_ac_pt_AR=${AR}\n+  AR=\"@AR@\"\n+  ac_cv_path_ac_pt_AR=\"${AR}\"\n fi\n \n if test -n \"@RANLIB@\"; then\n-  RANLIB=@RANLIB@\n-  ac_cv_path_ac_pt_RANLIB=${RANLIB}\n+  RANLIB=\"@RANLIB@\"\n+  ac_cv_path_ac_pt_RANLIB=\"${RANLIB}\"\n fi\n \n if test -n \"@NM@\"; then\n-  NM=@NM@\n-  ac_cv_path_ac_pt_NM=${NM}\n+  NM=\"@NM@\"\n+  ac_cv_path_ac_pt_NM=\"${NM}\"\n fi\n \n if test -n \"@debug@\"; then\n   enable_reduce_exports=no\n fi\n \n if test -n \"@CFLAGS@\"; then\n-  CFLAGS=\"@CFLAGS@ $CFLAGS\"\n+  CFLAGS=\"@CFLAGS@ ${CFLAGS}\"\n fi\n if test -n \"@CXXFLAGS@\"; then\n-  CXXFLAGS=\"@CXXFLAGS@ $CXXFLAGS\"\n+  CXXFLAGS=\"@CXXFLAGS@ ${CXXFLAGS}\"\n fi\n if test -n \"@CPPFLAGS@\"; then\n-  CPPFLAGS=\"@CPPFLAGS@ $CPPFLAGS\"\n+  CPPFLAGS=\"@CPPFLAGS@ ${CPPFLAGS}\"\n fi\n if test -n \"@LDFLAGS@\"; then\n-  LDFLAGS=\"@LDFLAGS@ $LDFLAGS\"\n+  LDFLAGS=\"@LDFLAGS@ ${LDFLAGS}\"\n fi"
      },
      {
        "sha": "c0159f0e3891d77358375ebfd1ea929ef70f4139",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 37,
        "deletions": 15,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,17 +1,23 @@\n define int_vars\n #Set defaults for vars which may be overridden per-package\n-$(1)_cc=$($($(1)_type)_CC)\n-$(1)_cxx=$($($(1)_type)_CXX)\n-$(1)_objc=$($($(1)_type)_OBJC)\n-$(1)_objcxx=$($($(1)_type)_OBJCXX)\n-$(1)_ar=$($($(1)_type)_AR)\n-$(1)_ranlib=$($($(1)_type)_RANLIB)\n-$(1)_libtool=$($($(1)_type)_LIBTOOL)\n-$(1)_nm=$($($(1)_type)_NM)\n-$(1)_cflags=$($($(1)_type)_CFLAGS) $($($(1)_type)_$(release_type)_CFLAGS)\n-$(1)_cxxflags=$($($(1)_type)_CXXFLAGS) $($($(1)_type)_$(release_type)_CXXFLAGS)\n-$(1)_ldflags=$($($(1)_type)_LDFLAGS) $($($(1)_type)_$(release_type)_LDFLAGS) -L$($($(1)_type)_prefix)/lib\n-$(1)_cppflags=$($($(1)_type)_CPPFLAGS) $($($(1)_type)_$(release_type)_CPPFLAGS) -I$($($(1)_type)_prefix)/include\n+$(1)_cc=$$($$($(1)_type)_CC)\n+$(1)_cxx=$$($$($(1)_type)_CXX)\n+$(1)_objc=$$($$($(1)_type)_OBJC)\n+$(1)_objcxx=$$($$($(1)_type)_OBJCXX)\n+$(1)_ar=$$($$($(1)_type)_AR)\n+$(1)_ranlib=$$($$($(1)_type)_RANLIB)\n+$(1)_libtool=$$($$($(1)_type)_LIBTOOL)\n+$(1)_nm=$$($$($(1)_type)_NM)\n+$(1)_cflags=$$($$($(1)_type)_CFLAGS) \\\n+            $$($$($(1)_type)_$$(release_type)_CFLAGS)\n+$(1)_cxxflags=$$($$($(1)_type)_CXXFLAGS) \\\n+              $$($$($(1)_type)_$$(release_type)_CXXFLAGS)\n+$(1)_ldflags=$$($$($(1)_type)_LDFLAGS) \\\n+             $$($$($(1)_type)_$$(release_type)_LDFLAGS) \\\n+             -L$$($($(1)_type)_prefix)/lib\n+$(1)_cppflags=$$($$($(1)_type)_CPPFLAGS) \\\n+              $$($$($(1)_type)_$$(release_type)_CPPFLAGS) \\\n+              -I$$($$($(1)_type)_prefix)/include\n $(1)_recipe_hash:=\n endef\n \n@@ -41,7 +47,7 @@ endef\n \n define int_get_build_id\n $(eval $(1)_dependencies += $($(1)_$(host_arch)_$(host_os)_dependencies) $($(1)_$(host_os)_dependencies))\n-$(eval $(1)_all_dependencies:=$(call int_get_all_dependencies,$(1),$($($(1)_type)_native_toolchain) $($(1)_dependencies)))\n+$(eval $(1)_all_dependencies:=$(call int_get_all_dependencies,$(1),$($($(1)_type)_native_toolchain) $($($(1)_type)_native_binutils) $($(1)_dependencies)))\n $(foreach dep,$($(1)_all_dependencies),$(eval $(1)_build_id_deps+=$(dep)-$($(dep)_version)-$($(dep)_recipe_hash)))\n $(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash)-$(release_type) $($(1)_build_id_deps) $($($(1)_type)_id_string))\n $(eval $(1)_build_id:=$(shell echo -n \"$($(1)_build_id_long)\" | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH)))\n@@ -130,11 +136,11 @@ $(1)_config_env+=$($(1)_config_env_$(host_arch)_$(host_os)) $($(1)_config_env_$(\n \n $(1)_config_env+=PKG_CONFIG_LIBDIR=$($($(1)_type)_prefix)/lib/pkgconfig\n $(1)_config_env+=PKG_CONFIG_PATH=$($($(1)_type)_prefix)/share/pkgconfig\n+$(1)_config_env+=CMAKE_MODULE_PATH=$($($(1)_type)_prefix)/lib/cmake\n $(1)_config_env+=PATH=$(build_prefix)/bin:$(PATH)\n $(1)_build_env+=PATH=$(build_prefix)/bin:$(PATH)\n $(1)_stage_env+=PATH=$(build_prefix)/bin:$(PATH)\n $(1)_autoconf=./configure --host=$($($(1)_type)_host) --prefix=$($($(1)_type)_prefix) $$($(1)_config_opts) CC=\"$$($(1)_cc)\" CXX=\"$$($(1)_cxx)\"\n-\n ifneq ($($(1)_nm),)\n $(1)_autoconf += NM=\"$$($(1)_nm)\"\n endif\n@@ -156,6 +162,22 @@ endif\n ifneq ($($(1)_ldflags),)\n $(1)_autoconf += LDFLAGS=\"$$($(1)_ldflags)\"\n endif\n+\n+$(1)_cmake=env CC=\"$$($(1)_cc)\" \\\n+               CFLAGS=\"$$($(1)_cppflags) $$($(1)_cflags)\" \\\n+               CXX=\"$$($(1)_cxx)\" \\\n+               CXXFLAGS=\"$$($(1)_cppflags) $$($(1)_cxxflags)\" \\\n+               LDFLAGS=\"$$($(1)_ldflags)\" \\\n+             cmake -DCMAKE_INSTALL_PREFIX:PATH=\"$$($($(1)_type)_prefix)\"\n+ifeq ($($(1)_type),build)\n+$(1)_cmake += -DCMAKE_INSTALL_RPATH:PATH=\"$$($($(1)_type)_prefix)/lib\"\n+else\n+ifneq ($(host),$(build))\n+$(1)_cmake += -DCMAKE_SYSTEM_NAME=$($(host_os)_cmake_system)\n+$(1)_cmake += -DCMAKE_C_COMPILER_TARGET=$(host)\n+$(1)_cmake += -DCMAKE_CXX_COMPILER_TARGET=$(host)\n+endif\n+endif\n endef\n \n define int_add_cmds\n@@ -251,4 +273,4 @@ $(foreach package,$(all_packages),$(eval $(call int_config_attach_build_config,$\n $(foreach package,$(all_packages),$(eval $(call int_add_cmds,$(package))))\n \n #special exception: if a toolchain package exists, all non-native packages depend on it\n-$(foreach package,$(packages),$(eval $($(package)_unpacked): |$($($(host_arch)_$(host_os)_native_toolchain)_cached) ))\n+$(foreach package,$(packages),$(eval $($(package)_extracted): |$($($(host_arch)_$(host_os)_native_toolchain)_cached) $($($(host_arch)_$(host_os)_native_binutils)_cached) ))"
      },
      {
        "sha": "eabd84bbbe1020a67273bb27de30209fbefd8b88",
        "filename": "depends/hosts/android.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/hosts/android.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/hosts/android.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/android.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -9,3 +9,4 @@ android_CXX=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)$(ANDROID_API_LEVEL)-clang++\n android_CC=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)$(ANDROID_API_LEVEL)-clang\n android_RANLIB=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)-ranlib\n endif\n+android_cmake_system=Android"
      },
      {
        "sha": "646e97837af374cb78111b3f1eb3044ca4e6b09f",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 117,
        "deletions": 6,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,8 +1,119 @@\n-OSX_MIN_VERSION=10.12\n-OSX_SDK_VERSION=10.14\n-OSX_SDK=$(SDK_PATH)/MacOSX$(OSX_SDK_VERSION).sdk\n-darwin_CC=clang -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK)\n-darwin_CXX=clang++ -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -stdlib=libc++\n+OSX_MIN_VERSION=10.14\n+OSX_SDK_VERSION=10.15.1\n+XCODE_VERSION=11.3.1\n+XCODE_BUILD_ID=11C505\n+LD64_VERSION=530\n+\n+OSX_SDK=$(SDK_PATH)/Xcode-$(XCODE_VERSION)-$(XCODE_BUILD_ID)-extracted-SDK-with-libcxx-headers\n+\n+darwin_native_binutils=native_cctools\n+\n+ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n+# FORCE_USE_SYSTEM_CLANG is empty, so we use our depends-managed, pinned clang\n+# from llvm.org\n+\n+# The native_cctools package is what provides clang when FORCE_USE_SYSTEM_CLANG\n+# is empty\n+darwin_native_toolchain=native_cctools\n+\n+clang_prog=$(build_prefix)/bin/clang\n+clangxx_prog=$(clang_prog)++\n+\n+clang_resource_dir=$(build_prefix)/lib/clang/$(native_cctools_clang_version)\n+else\n+# FORCE_USE_SYSTEM_CLANG is non-empty, so we use the clang from the user's\n+# system\n+\n+darwin_native_toolchain=\n+\n+# We can't just use $(shell command -v clang) because GNU Make handles builtins\n+# in a special way and doesn't know that `command` is a POSIX-standard builtin\n+# prior to 1af314465e5dfe3e8baa839a32a72e83c04f26ef, first released in v4.2.90.\n+# At the time of writing, GNU Make v4.2.1 is still being used in supported\n+# distro releases.\n+#\n+# Source: https://lists.gnu.org/archive/html/bug-make/2017-11/msg00017.html\n+clang_prog=$(shell $(SHELL) $(.SHELLFLAGS) \"command -v clang\")\n+clangxx_prog=$(shell $(SHELL) $(.SHELLFLAGS) \"command -v clang++\")\n+\n+clang_resource_dir=$(shell clang -print-resource-dir)\n+endif\n+\n+cctools_TOOLS=AR RANLIB STRIP NM LIBTOOL OTOOL INSTALL_NAME_TOOL\n+\n+# Make-only lowercase function\n+lc = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))\n+\n+# For well-known tools provided by cctools, make sure that their well-known\n+# variable is set to the full path of the tool, just like how AC_PATH_{TOO,PROG}\n+# would.\n+$(foreach TOOL,$(cctools_TOOLS),$(eval darwin_$(TOOL) = $$(build_prefix)/bin/$$(host)-$(call lc,$(TOOL))))\n+\n+# Flag explanations:\n+#\n+#     -mlinker-version\n+#\n+#         Ensures that modern linker features are enabled. See here for more\n+#         details: https://github.com/bitcoin/bitcoin/pull/19407.\n+#\n+#     -B$(build_prefix)/bin\n+#\n+#         Explicitly point to our binaries (e.g. cctools) so that they are\n+#         ensured to be found and preferred over other possibilities.\n+#\n+#     -stdlib=libc++ -nostdinc++ -Xclang -cxx-isystem$(OSX_SDK)/usr/include/c++/v1\n+#\n+#         Forces clang to use the libc++ headers from our SDK and completely\n+#         forget about the libc++ headers from the standard directories\n+#\n+#         TODO: Once we start requiring a clang version that has the\n+#         -stdlib++-isystem<directory> flag first introduced here:\n+#         https://reviews.llvm.org/D64089, we should use that instead. Read the\n+#         differential summary there for more details.\n+#\n+#     -Xclang -*system<path_a> \\\n+#     -Xclang -*system<path_b> \\\n+#     -Xclang -*system<path_c> ...\n+#\n+#         Adds path_a, path_b, and path_c to the bottom of clang's list of\n+#         include search paths. This is used to explicitly specify the list of\n+#         system include search paths and its ordering, rather than rely on\n+#         clang's autodetection routine. This routine has been shown to:\n+#             1. Fail to pickup libc++ headers in $SYSROOT/usr/include/c++/v1\n+#                when clang was built manually (see: https://github.com/bitcoin/bitcoin/pull/17919#issuecomment-656785034)\n+#             2. Fail to pickup C headers in $SYSROOT/usr/include when\n+#                C_INCLUDE_DIRS was specified at configure time (see: https://gist.github.com/dongcarl/5cdc6990b7599e8a5bf6d2a9c70e82f9)\n+#\n+#         Talking directly to cc1 with -Xclang here grants us access to specify\n+#         more granular categories for these system include search paths, and we\n+#         can use the correct categories that these search paths would have been\n+#         placed in if the autodetection routine had worked correctly. (see:\n+#         https://gist.github.com/dongcarl/5cdc6990b7599e8a5bf6d2a9c70e82f9#the-treatment)\n+#\n+#         Furthermore, it places these search paths after any \"non-Xclang\"\n+#         specified search paths. This prevents any additional clang options or\n+#         environment variables from coming after or in between these system\n+#         include search paths, as that would be wrong in general but would also\n+#         break #include_next's.\n+#\n+darwin_CC=env -u C_INCLUDE_PATH -u CPLUS_INCLUDE_PATH \\\n+              -u OBJC_INCLUDE_PATH -u OBJCPLUS_INCLUDE_PATH -u CPATH \\\n+              -u LIBRARY_PATH \\\n+            $(clang_prog) --target=$(host) -mmacosx-version-min=$(OSX_MIN_VERSION) \\\n+              -B$(build_prefix)/bin -mlinker-version=$(LD64_VERSION) \\\n+              --sysroot=$(OSX_SDK) \\\n+              -Xclang -internal-externc-isystem$(clang_resource_dir)/include \\\n+              -Xclang -internal-externc-isystem$(OSX_SDK)/usr/include\n+darwin_CXX=env -u C_INCLUDE_PATH -u CPLUS_INCLUDE_PATH \\\n+               -u OBJC_INCLUDE_PATH -u OBJCPLUS_INCLUDE_PATH -u CPATH \\\n+               -u LIBRARY_PATH \\\n+             $(clangxx_prog) --target=$(host) -mmacosx-version-min=$(OSX_MIN_VERSION) \\\n+               -B$(build_prefix)/bin -mlinker-version=$(LD64_VERSION) \\\n+               --sysroot=$(OSX_SDK) \\\n+               -stdlib=libc++ -nostdinc++ \\\n+               -Xclang -cxx-isystem$(OSX_SDK)/usr/include/c++/v1 \\\n+               -Xclang -internal-externc-isystem$(clang_resource_dir)/include \\\n+               -Xclang -internal-externc-isystem$(OSX_SDK)/usr/include\n \n darwin_CFLAGS=-pipe\n darwin_CXXFLAGS=$(darwin_CFLAGS)\n@@ -13,4 +124,4 @@ darwin_release_CXXFLAGS=$(darwin_release_CFLAGS)\n darwin_debug_CFLAGS=-O1\n darwin_debug_CXXFLAGS=$(darwin_debug_CFLAGS)\n \n-darwin_native_toolchain=native_cctools\n+darwin_cmake_system=Darwin"
      },
      {
        "sha": "258619a9d059086cb8fb25e4df37617088cc2e32",
        "filename": "depends/hosts/default.mk",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/hosts/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/hosts/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/default.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -13,9 +13,18 @@ default_host_OTOOL = $(host_toolchain)otool\n default_host_NM = $(host_toolchain)nm\n \n define add_host_tool_func\n+ifneq ($(filter $(origin $1),undefined default),)\n+# Do not consider the well-known var $1 if it is undefined or is taking a value\n+# that is predefined by \"make\" (e.g. the make variable \"CC\" has a predefined\n+# value of \"cc\")\n $(host_os)_$1?=$$(default_host_$1)\n $(host_arch)_$(host_os)_$1?=$$($(host_os)_$1)\n $(host_arch)_$(host_os)_$(release_type)_$1?=$$($(host_os)_$1)\n+else\n+$(host_os)_$1=$(or $($1),$($(host_os)_$1),$(default_host_$1))\n+$(host_arch)_$(host_os)_$1=$(or $($1),$($(host_arch)_$(host_os)_$1),$$($(host_os)_$1))\n+$(host_arch)_$(host_os)_$(release_type)_$1=$(or $($1),$($(host_arch)_$(host_os)_$(release_type)_$1),$$($(host_os)_$1))\n+endif\n host_$1=$$($(host_arch)_$(host_os)_$1)\n endef\n "
      },
      {
        "sha": "8ab448ce5fd458be142ece6ba7a001a76d8f9033",
        "filename": "depends/hosts/linux.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/hosts/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/hosts/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/linux.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -29,3 +29,4 @@ i686_linux_CXX=$(default_host_CXX) -m32\n x86_64_linux_CC=$(default_host_CC) -m64\n x86_64_linux_CXX=$(default_host_CXX) -m64\n endif\n+linux_cmake_system=Linux"
      },
      {
        "sha": "be5fec570c84cec02844d0faf63bb11b36e708c3",
        "filename": "depends/hosts/mingw32.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/hosts/mingw32.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/hosts/mingw32.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/mingw32.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -8,3 +8,5 @@ mingw32_debug_CFLAGS=-O1\n mingw32_debug_CXXFLAGS=$(mingw32_debug_CFLAGS)\n \n mingw32_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC\n+\n+mingw_cmake_system=Windows"
      },
      {
        "sha": "d45ac3d03f15522038d19f2010a9f97d8ed9d59c",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -4,18 +4,20 @@ $(package)_download_path=https://download.oracle.com/berkeley-db\n $(package)_file_name=db-$($(package)_version).NC.tar.gz\n $(package)_sha256_hash=12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef\n $(package)_build_subdir=build_unix\n+$(package)_patches=clang_cxx_11.patch\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-shared --enable-cxx --disable-replication --enable-option-checking\n $(package)_config_opts_mingw32=--enable-mingw\n $(package)_config_opts_linux=--with-pic\n-$(package)_cxxflags=-std=c++11\n+$(package)_config_opts_android=--with-pic\n+$(package)_cflags+=-Wno-error=implicit-function-declaration\n+$(package)_cxxflags=-std=c++17\n $(package)_cppflags_mingw32=-DUNICODE -D_UNICODE\n endef\n \n define $(package)_preprocess_cmds\n-  sed -i.old 's/__atomic_compare_exchange/__atomic_compare_exchange_db/' dbinc/atomic.h && \\\n-  sed -i.old 's/atomic_init/atomic_init_db/' dbinc/atomic.h mp/mp_region.c mp/mp_mvcc.c mp/mp_fget.c mutex/mut_method.c mutex/mut_tas.c && \\\n+  patch -p1 < $($(package)_patch_dir)/clang_cxx_11.patch && \\\n   cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub dist\n endef\n "
      },
      {
        "sha": "ff8a252db93645b05da26cb5d7728236ecee252d",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,45 +1,45 @@\n package=boost\n-$(package)_version=1_70_0\n-$(package)_download_path=https://dl.bintray.com/boostorg/release/1.70.0/source/\n-$(package)_file_name=$(package)_$($(package)_version).tar.bz2\n-$(package)_sha256_hash=430ae8354789de4fd19ee52f3b1f739e1fba576f0aded0897c3c2bc00fb38778\n+$(package)_version=1_71_0\n+$(package)_download_path=https://dl.bintray.com/boostorg/release/$(subst _,.,$($(package)_version))/source/\n+$(package)_file_name=boost_$($(package)_version).tar.bz2\n+$(package)_sha256_hash=d73a8da01e8bf8c7eda40b4c84915071a8c8a0df4a6734537ddde4a8580524ee\n+$(package)_dependencies=native_b2\n \n define $(package)_set_vars\n $(package)_config_opts_release=variant=release\n $(package)_config_opts_debug=variant=debug\n $(package)_config_opts=--layout=tagged --build-type=complete --user-config=user-config.jam\n-$(package)_config_opts+=threading=multi link=static -sNO_BZIP2=1 -sNO_ZLIB=1\n-$(package)_config_opts_linux=threadapi=pthread runtime-link=shared\n-$(package)_config_opts_darwin=--toolset=clang-darwin runtime-link=shared\n-$(package)_config_opts_mingw32=binary-format=pe target-os=windows threadapi=win32 runtime-link=static\n-$(package)_config_opts_x86_64_mingw32=address-model=64\n-$(package)_config_opts_i686_mingw32=address-model=32\n-$(package)_config_opts_i686_linux=address-model=32 architecture=x86\n-$(package)_config_opts_i686_android=address-model=32\n-$(package)_config_opts_aarch64_android=address-model=64\n-$(package)_config_opts_x86_64_android=address-model=64\n-$(package)_config_opts_armv7a_android=address-model=32\n+$(package)_config_opts+=threading=multi link=static -sNO_COMPRESSION=1\n+$(package)_config_opts_linux=target-os=linux threadapi=pthread runtime-link=shared\n+$(package)_config_opts_darwin=target-os=darwin runtime-link=shared\n+$(package)_config_opts_mingw32=target-os=windows binary-format=pe threadapi=win32 runtime-link=static\n+$(package)_config_opts_x86_64=architecture=x86 address-model=64\n+$(package)_config_opts_i686=architecture=x86 address-model=32\n+$(package)_config_opts_aarch64=address-model=64\n+$(package)_config_opts_armv7a=address-model=32\n+ifneq (,$(findstring clang,$($(package)_cxx)))\n+$(package)_toolset_$(host_os)=clang\n+else\n $(package)_toolset_$(host_os)=gcc\n-$(package)_archiver_$(host_os)=$($(package)_ar)\n-$(package)_toolset_darwin=clang-darwin\n+endif\n $(package)_config_libraries=filesystem,system,thread,test\n-$(package)_cxxflags=-std=c++11 -fvisibility=hidden\n+$(package)_cxxflags=-std=c++17 -fvisibility=hidden\n $(package)_cxxflags_linux=-fPIC\n $(package)_cxxflags_android=-fPIC\n endef\n \n define $(package)_preprocess_cmds\n-  echo \"using $($(package)_toolset_$(host_os)) : : $($(package)_cxx) : <cxxflags>\\\"$($(package)_cxxflags) $($(package)_cppflags)\\\" <linkflags>\\\"$($(package)_ldflags)\\\" <archiver>\\\"$($(package)_archiver_$(host_os))\\\" <striper>\\\"$(host_STRIP)\\\"  <ranlib>\\\"$(host_RANLIB)\\\" <rc>\\\"$(host_WINDRES)\\\" : ;\" > user-config.jam\n+  echo \"using $($(package)_toolset_$(host_os)) : : $($(package)_cxx) : <cflags>\\\"$($(package)_cflags)\\\" <cxxflags>\\\"$($(package)_cxxflags)\\\" <compileflags>\\\"$($(package)_cppflags)\\\" <linkflags>\\\"$($(package)_ldflags)\\\" <archiver>\\\"$($(package)_ar)\\\" <striper>\\\"$(host_STRIP)\\\"  <ranlib>\\\"$(host_RANLIB)\\\" <rc>\\\"$(host_WINDRES)\\\" : ;\" > user-config.jam\n endef\n \n define $(package)_config_cmds\n-  ./bootstrap.sh --without-icu --with-libraries=$($(package)_config_libraries)\n+  ./bootstrap.sh --without-icu --with-libraries=$($(package)_config_libraries) --with-toolset=$($(package)_toolset_$(host_os)) --with-bjam=b2\n endef\n \n define $(package)_build_cmds\n-  ./b2 -d2 -j2 -d1 --prefix=$($(package)_staging_prefix_dir) $($(package)_config_opts) stage\n+  b2 -d2 -j2 -d1 --prefix=$($(package)_staging_prefix_dir) $($(package)_config_opts) toolset=$($(package)_toolset_$(host_os)) stage\n endef\n \n define $(package)_stage_cmds\n-  ./b2 -d0 -j4 --prefix=$($(package)_staging_prefix_dir) $($(package)_config_opts) install\n+  b2 -d0 -j4 --prefix=$($(package)_staging_prefix_dir) $($(package)_config_opts) toolset=$($(package)_toolset_$(host_os)) install\n endef"
      },
      {
        "sha": "abeb26545f898e4dffdb18f1452d77197f37a35c",
        "filename": "depends/packages/capnp.mk",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/capnp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/capnp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/capnp.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,18 @@\n+package=capnp\n+$(package)_version=$(native_$(package)_version)\n+$(package)_download_path=$(native_$(package)_download_path)\n+$(package)_file_name=$(native_$(package)_file_name)\n+$(package)_sha256_hash=$(native_$(package)_sha256_hash)\n+$(package)_dependencies=native_$(package)\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf) --with-external-capnp\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef"
      },
      {
        "sha": "0d5f94f380c569cb7d09d3541c42467ad59a1fb1",
        "filename": "depends/packages/fontconfig.mk",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/fontconfig.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/fontconfig.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/fontconfig.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -4,23 +4,23 @@ $(package)_download_path=https://www.freedesktop.org/software/fontconfig/release\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=b449a3e10c47e1d1c7a6ec6e2016cca73d3bd68fbbd4f0ae5cc6b573f7d6c7f3\n $(package)_dependencies=freetype expat\n+$(package)_patches=remove_char_width_usage.patch gperf_header_regen.patch\n \n define $(package)_set_vars\n   $(package)_config_opts=--disable-docs --disable-static --disable-libxml2 --disable-iconv\n   $(package)_config_opts += --disable-dependency-tracking --enable-option-checking\n endef\n \n+define $(package)_preprocess_cmds\n+  patch -p1 < $($(package)_patch_dir)/remove_char_width_usage.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/gperf_header_regen.patch\n+endef\n+\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef\n \n-# 2.12.1 uses CHAR_WIDTH which is reserved and clashes with some glibc versions, but newer versions of fontconfig\n-# have broken makefiles which needlessly attempt to re-generate headers with gperf.\n-# Instead, change all uses of CHAR_WIDTH, and disable the rule that forces header re-generation.\n-# This can be removed once the upstream build is fixed.\n define $(package)_build_cmds\n-  sed -i 's/CHAR_WIDTH/CHARWIDTH/g' fontconfig/fontconfig.h src/fcobjshash.gperf src/fcobjs.h src/fcobjshash.h && \\\n-  sed -i 's/fcobjshash.h: fcobjshash.gperf/fcobjshash.h:/' src/Makefile && \\\n   $(MAKE)\n endef\n "
      },
      {
        "sha": "1cd5a1749ac88c79f8e667aeac40d23105772219",
        "filename": "depends/packages/libevent.mk",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/libevent.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/libevent.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libevent.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -3,17 +3,23 @@ $(package)_version=2.1.11-stable\n $(package)_download_path=https://github.com/libevent/libevent/archive/\n $(package)_file_name=release-$($(package)_version).tar.gz\n $(package)_sha256_hash=229393ab2bf0dc94694f21836846b424f3532585bac3468738b7bf752c03901e\n+$(package)_patches=0001-fix-windows-getaddrinfo.patch\n \n define $(package)_preprocess_cmds\n+   patch -p1 < $($(package)_patch_dir)/0001-fix-windows-getaddrinfo.patch && \\\n   ./autogen.sh\n endef\n \n+# When building for Windows, we set _WIN32_WINNT to target the same Windows\n+# version as we do in configure. Due to quirks in libevents build system, this\n+# is also required to enable support for ipv6. See #19375.\n define $(package)_set_vars\n   $(package)_config_opts=--disable-shared --disable-openssl --disable-libevent-regress --disable-samples\n   $(package)_config_opts += --disable-dependency-tracking --enable-option-checking\n   $(package)_config_opts_release=--disable-debug-mode\n   $(package)_config_opts_linux=--with-pic\n   $(package)_config_opts_android=--with-pic\n+  $(package)_cppflags_mingw32=-D_WIN32_WINNT=0x0601\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "3e5cf5f1603a66c0244667b909cbb0b9f6541376",
        "filename": "depends/packages/libmultiprocess.mk",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/libmultiprocess.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/libmultiprocess.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libmultiprocess.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,18 @@\n+package=libmultiprocess\n+$(package)_version=$(native_$(package)_version)\n+$(package)_download_path=$(native_$(package)_download_path)\n+$(package)_file_name=$(native_$(package)_file_name)\n+$(package)_sha256_hash=$(native_$(package)_sha256_hash)\n+$(package)_dependencies=native_$(package) boost capnp\n+\n+define $(package)_config_cmds\n+  $($(package)_cmake)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef"
      },
      {
        "sha": "a24f201859a03aefdbb41122f2927a0a27516e01",
        "filename": "depends/packages/libnatpmp.mk",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/libnatpmp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/libnatpmp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libnatpmp.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,19 @@\n+package=libnatpmp\n+$(package)_version=20150609\n+$(package)_download_path=https://miniupnp.tuxfamily.org/files/\n+$(package)_file_name=$(package)-$($(package)_version).tar.gz\n+$(package)_sha256_hash=e1aa9c4c4219bc06943d6b2130f664daee213fb262fcb94dd355815b8f4536b0\n+\n+define $(package)_set_vars\n+  $(package)_build_opts=CC=\"$($(package)_cc)\"\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) libnatpmp.a $($(package)_build_opts)\n+endef\n+\n+define $(package)_stage_cmds\n+  mkdir -p $($(package)_staging_prefix_dir)/include $($(package)_staging_prefix_dir)/lib &&\\\n+  install *.h $($(package)_staging_prefix_dir)/include &&\\\n+  install libnatpmp.a $($(package)_staging_prefix_dir)/lib\n+endef"
      },
      {
        "sha": "49a584e462b36b09c5b2bcde7b69b1256daf5a2b",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -3,6 +3,7 @@ $(package)_version=2.0.20180203\n $(package)_download_path=https://miniupnp.tuxfamily.org/files/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n $(package)_sha256_hash=90dda8c7563ca6cd4a83e23b3c66dbbea89603a1675bfdb852897c2c9cc220b7\n+$(package)_patches=dont_use_wingen.patch\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\"\n@@ -14,7 +15,7 @@ endef\n define $(package)_preprocess_cmds\n   mkdir dll && \\\n   sed -e 's|MINIUPNPC_VERSION_STRING \\\"version\\\"|MINIUPNPC_VERSION_STRING \\\"$($(package)_version)\\\"|' -e 's|OS/version|$(host)|' miniupnpcstrings.h.in > miniupnpcstrings.h && \\\n-  sed -i.old \"s|miniupnpcstrings.h: miniupnpcstrings.h.in wingenminiupnpcstrings|miniupnpcstrings.h: miniupnpcstrings.h.in|\" Makefile.mingw\n+  patch -p1 < $($(package)_patch_dir)/dont_use_wingen.patch\n endef\n \n define $(package)_build_cmds"
      },
      {
        "sha": "aaa37cdcfa7a71547d3fbc16795bb9b8acbd3d13",
        "filename": "depends/packages/native_b2.mk",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_b2.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_b2.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_b2.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,20 @@\n+package=native_b2\n+$(package)_version=$(boost_version)\n+$(package)_download_path=$(boost_download_path)\n+$(package)_file_name=$(boost_file_name)\n+$(package)_sha256_hash=$(boost_sha256_hash)\n+$(package)_build_subdir=tools/build/src/engine\n+ifneq (,$(findstring clang,$($(package)_cxx)))\n+$(package)_toolset_$(host_os)=clang\n+else\n+$(package)_toolset_$(host_os)=gcc\n+endif\n+\n+define $(package)_build_cmds\n+  CXX=\"$($(package)_cxx)\" CXXFLAGS=\"$($(package)_cxxflags)\" ./build.sh \"$($(package)_toolset_$(host_os))\"\n+endef\n+\n+define $(package)_stage_cmds\n+  mkdir -p \"$($(package)_staging_prefix_dir)\"/bin/ && \\\n+  cp b2 \"$($(package)_staging_prefix_dir)\"/bin/\n+endef"
      },
      {
        "sha": "c3054cbd1a16e66d8ff592b27bdc7fc7a12c0f2c",
        "filename": "depends/packages/native_biplist.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/depends/packages/native_biplist.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/depends/packages/native_biplist.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_biplist.mk?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,15 +0,0 @@\n-package=native_biplist\n-$(package)_version=1.0.3\n-$(package)_download_path=https://bitbucket.org/wooster/biplist/downloads\n-$(package)_file_name=biplist-$($(package)_version).tar.gz\n-$(package)_sha256_hash=4c0549764c5fe50b28042ec21aa2e14fe1a2224e239a1dae77d9e7f3932aa4c6\n-$(package)_install_libdir=$(build_prefix)/lib/python3/dist-packages\n-\n-define $(package)_build_cmds\n-    python3 setup.py build\n-endef\n-\n-define $(package)_stage_cmds\n-    mkdir -p $($(package)_install_libdir) && \\\n-    python3 setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n-endef"
      },
      {
        "sha": "ed5a6deee2fdbfbd658ddff8d5aa5c129860bf6f",
        "filename": "depends/packages/native_capnp.mk",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_capnp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_capnp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_capnp.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,18 @@\n+package=native_capnp\n+$(package)_version=0.7.0\n+$(package)_download_path=https://capnproto.org/\n+$(package)_download_file=capnproto-c++-$($(package)_version).tar.gz\n+$(package)_file_name=capnproto-cxx-$($(package)_version).tar.gz\n+$(package)_sha256_hash=c9a4c0bd88123064d483ab46ecee777f14d933359e23bff6fb4f4dbd28b4cd41\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef"
      },
      {
        "sha": "d56b636695508699d998191f8220e47fe01df6d1",
        "filename": "depends/packages/native_cctools.mk",
        "status": "modified",
        "additions": 49,
        "deletions": 11,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_cctools.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_cctools.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_cctools.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,30 +1,44 @@\n package=native_cctools\n-$(package)_version=3764b223c011574971ee3ae09ce968ba5dc2f00f\n+$(package)_version=55562e4073dea0fbfd0b20e0bf69ffe6390c7f97\n $(package)_download_path=https://github.com/tpoechtrager/cctools-port/archive\n $(package)_file_name=$($(package)_version).tar.gz\n-$(package)_sha256_hash=3e35907bf376269a844df08e03cbb43e345c88125374f2228e03724b5f9a2a04\n+$(package)_sha256_hash=e51995a843533a3dac155dd0c71362dd471597a2d23f13dff194c6285362f875\n $(package)_build_subdir=cctools\n-$(package)_clang_version=6.0.1\n+$(package)_patches=ld64_disable_threading.patch\n+\n+ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n+$(package)_clang_version=8.0.0\n $(package)_clang_download_path=https://releases.llvm.org/$($(package)_clang_version)\n $(package)_clang_download_file=clang+llvm-$($(package)_clang_version)-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n $(package)_clang_file_name=clang-llvm-$($(package)_clang_version)-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n-$(package)_clang_sha256_hash=fa5416553ca94a8c071a27134c094a5fb736fe1bd0ecc5ef2d9bc02754e1bef0\n+$(package)_clang_sha256_hash=9ef854b71949f825362a119bf2597f744836cb571131ae6b721cd102ffea8cd0\n+endif\n \n $(package)_libtapi_version=3efb201881e7a76a21e0554906cf306432539cef\n $(package)_libtapi_download_path=https://github.com/tpoechtrager/apple-libtapi/archive\n $(package)_libtapi_download_file=$($(package)_libtapi_version).tar.gz\n $(package)_libtapi_file_name=$($(package)_libtapi_version).tar.gz\n $(package)_libtapi_sha256_hash=380c1ca37cfa04a8699d0887a8d3ee1ad27f3d08baba78887c73b09485c0fbd3\n \n-$(package)_extra_sources=$($(package)_clang_file_name)\n-$(package)_extra_sources += $($(package)_libtapi_file_name)\n+$(package)_extra_sources=$($(package)_libtapi_file_name)\n+ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n+$(package)_extra_sources += $($(package)_clang_file_name)\n+endif\n \n+ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n define $(package)_fetch_cmds\n $(call fetch_file,$(package),$($(package)_download_path),$($(package)_download_file),$($(package)_file_name),$($(package)_sha256_hash)) && \\\n $(call fetch_file,$(package),$($(package)_clang_download_path),$($(package)_clang_download_file),$($(package)_clang_file_name),$($(package)_clang_sha256_hash)) && \\\n $(call fetch_file,$(package),$($(package)_libtapi_download_path),$($(package)_libtapi_download_file),$($(package)_libtapi_file_name),$($(package)_libtapi_sha256_hash))\n endef\n+else\n+define $(package)_fetch_cmds\n+$(call fetch_file,$(package),$($(package)_download_path),$($(package)_download_file),$($(package)_file_name),$($(package)_sha256_hash)) && \\\n+$(call fetch_file,$(package),$($(package)_libtapi_download_path),$($(package)_libtapi_download_file),$($(package)_libtapi_file_name),$($(package)_libtapi_sha256_hash))\n+endef\n+endif\n \n+ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n define $(package)_extract_cmds\n   mkdir -p $($(package)_extract_dir) && \\\n   echo \"$($(package)_sha256_hash)  $($(package)_source)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n@@ -38,18 +52,35 @@ define $(package)_extract_cmds\n   rm -f toolchain/lib/libc++abi.so* && \\\n   tar --no-same-owner --strip-components=1 -xf $($(package)_source)\n endef\n+else\n+define $(package)_extract_cmds\n+  mkdir -p $($(package)_extract_dir) && \\\n+  echo \"$($(package)_sha256_hash)  $($(package)_source)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_libtapi_sha256_hash)  $($(package)_source_dir)/$($(package)_libtapi_file_name)\" >> $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  mkdir -p libtapi && \\\n+  tar --no-same-owner --strip-components=1 -C libtapi -xf $($(package)_source_dir)/$($(package)_libtapi_file_name) && \\\n+  tar --no-same-owner --strip-components=1 -xf $($(package)_source)\n+endef\n+endif\n \n define $(package)_set_vars\n-  $(package)_config_opts=--target=$(host) --disable-lto-support --with-libtapi=$($(package)_extract_dir)\n+  $(package)_config_opts=--target=$(host) --with-libtapi=$($(package)_extract_dir)\n   $(package)_ldflags+=-Wl,-rpath=\\\\$$$$$$$$\\$$$$$$$$ORIGIN/../lib\n+  ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n+  $(package)_config_opts+=--enable-lto-support --with-llvm-config=$($(package)_extract_dir)/toolchain/bin/llvm-config\n   $(package)_cc=$($(package)_extract_dir)/toolchain/bin/clang\n   $(package)_cxx=$($(package)_extract_dir)/toolchain/bin/clang++\n+  else\n+  $(package)_cc=clang\n+  $(package)_cxx=clang++\n+  endif\n endef\n \n define $(package)_preprocess_cmds\n   CC=$($(package)_cc) CXX=$($(package)_cxx) INSTALLPREFIX=$($(package)_extract_dir) ./libtapi/build.sh && \\\n   CC=$($(package)_cc) CXX=$($(package)_cxx) INSTALLPREFIX=$($(package)_extract_dir) ./libtapi/install.sh && \\\n-  sed -i.old \"/define HAVE_PTHREADS/d\" $($(package)_build_subdir)/ld64/src/ld/InputFiles.h\n+  patch -p1 < $($(package)_patch_dir)/ld64_disable_threading.patch\n endef\n \n define $(package)_config_cmds\n@@ -60,6 +91,7 @@ define $(package)_build_cmds\n   $(MAKE)\n endef\n \n+ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install && \\\n   mkdir -p $($(package)_staging_prefix_dir)/lib/ && \\\n@@ -72,7 +104,13 @@ define $(package)_stage_cmds\n   cp -P bin/clang++ $($(package)_staging_prefix_dir)/bin/ &&\\\n   cp lib/libLTO.so $($(package)_staging_prefix_dir)/lib/ && \\\n   cp -rf lib/clang/$($(package)_clang_version)/include/* $($(package)_staging_prefix_dir)/lib/clang/$($(package)_clang_version)/include/ && \\\n-  cp bin/llvm-dsymutil $($(package)_staging_prefix_dir)/bin/$(host)-dsymutil && \\\n-  if `test -d include/c++/`; then cp -rf include/c++/ $($(package)_staging_prefix_dir)/include/; fi && \\\n-  if `test -d lib/c++/`; then cp -rf lib/c++/ $($(package)_staging_prefix_dir)/lib/; fi\n+  cp bin/dsymutil $($(package)_staging_prefix_dir)/bin/$(host)-dsymutil\n+endef\n+else\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install && \\\n+  mkdir -p $($(package)_staging_prefix_dir)/lib/ && \\\n+  cd $($(package)_extract_dir) && \\\n+  cp lib/libtapi.so.6 $($(package)_staging_prefix_dir)/lib/\n endef\n+endif"
      },
      {
        "sha": "8243458ec858ed045ff16219b36ff9f64512e099",
        "filename": "depends/packages/native_cdrkit.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/depends/packages/native_cdrkit.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/depends/packages/native_cdrkit.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_cdrkit.mk?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,26 +0,0 @@\n-package=native_cdrkit\n-$(package)_version=1.1.11\n-$(package)_download_path=https://distro.ibiblio.org/fatdog/source/600/c\n-$(package)_file_name=cdrkit-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=b50d64c214a65b1a79afe3a964c691931a4233e2ba605d793eb85d0ac3652564\n-$(package)_patches=cdrkit-deterministic.patch\n-\n-define $(package)_preprocess_cmds\n-  patch -p1 < $($(package)_patch_dir)/cdrkit-deterministic.patch\n-endef\n-\n-define $(package)_config_cmds\n-  cmake -DCMAKE_INSTALL_PREFIX=$(build_prefix)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE) genisoimage\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) -C genisoimage install\n-endef\n-\n-define $(package)_postprocess_cmds\n-  rm bin/isovfy bin/isoinfo bin/isodump bin/isodebug bin/devdump\n-endef"
      },
      {
        "sha": "44108925a4f3b5d8a65114c1ec53d9c802c8bc02",
        "filename": "depends/packages/native_ds_store.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_ds_store.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_ds_store.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ds_store.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,10 +1,9 @@\n package=native_ds_store\n-$(package)_version=1.1.2\n+$(package)_version=1.3.0\n $(package)_download_path=https://github.com/al45tair/ds_store/archive/\n $(package)_file_name=v$($(package)_version).tar.gz\n-$(package)_sha256_hash=3b3ecb7bf0a5157f5b6010bc3af7c141fb0ad3527084e63336220d22744bc20c\n+$(package)_sha256_hash=76b3280cd4e19e5179defa23fb594a9dd32643b0c80d774bd3108361d94fb46d\n $(package)_install_libdir=$(build_prefix)/lib/python3/dist-packages\n-$(package)_dependencies=native_biplist\n \n define $(package)_build_cmds\n     python3 setup.py build"
      },
      {
        "sha": "035b767188a6fc43f6a65c1ec6c1c7617879dd02",
        "filename": "depends/packages/native_libdmg-hfsplus.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_libdmg-hfsplus.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_libdmg-hfsplus.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libdmg-hfsplus.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -12,7 +12,7 @@ define $(package)_preprocess_cmds\n endef\n \n define $(package)_config_cmds\n-  cmake -DCMAKE_INSTALL_PREFIX:PATH=$(build_prefix) -DCMAKE_C_FLAGS=\"-Wl,--build-id=none\" ..\n+  $($(package)_cmake) -DCMAKE_C_FLAGS=\"$$($(1)_cflags) -Wl,--build-id=none\" ..\n endef\n \n define $(package)_build_cmds"
      },
      {
        "sha": "c50fdc3f6bae8e33cde4c361f28a4eacffd5e992",
        "filename": "depends/packages/native_libmultiprocess.mk",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_libmultiprocess.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_libmultiprocess.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libmultiprocess.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,18 @@\n+package=native_libmultiprocess\n+$(package)_version=5741d750a04e644a03336090d8979c6d033e32c0\n+$(package)_download_path=https://github.com/chaincodelabs/libmultiprocess/archive\n+$(package)_file_name=$($(package)_version).tar.gz\n+$(package)_sha256_hash=ac848db49a6ed53e423c62d54bd87f1f08cbb0326254a8667e10bbfe5bf032a4\n+$(package)_dependencies=native_capnp\n+\n+define $(package)_config_cmds\n+  $($(package)_cmake)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef"
      },
      {
        "sha": "5fe027fb8a51b894d0832d220407ebae11d89e20",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,8 +1,8 @@\n package=native_mac_alias\n-$(package)_version=2.0.7\n+$(package)_version=2.1.1\n $(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n $(package)_file_name=v$($(package)_version).tar.gz\n-$(package)_sha256_hash=6f606d3b6bccd2112aeabf1a063f5b5ece87005a5d7e97c8faca23b916e88838\n+$(package)_sha256_hash=c0ffceee14f7d04a6eb323fb7b8217dc3f373b346198d2ca42300a8362db7efa\n $(package)_install_libdir=$(build_prefix)/lib/python3/dist-packages\n \n define $(package)_build_cmds"
      },
      {
        "sha": "0f35ca0d2d53a606fb203992bfd925221e9a5439",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -10,14 +10,21 @@ qt_android_packages=qt\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-wallet_packages=bdb\n+bdb_packages=bdb\n+sqlite_packages=sqlite\n \n zmq_packages=zeromq\n \n upnp_packages=miniupnpc\n+natpmp_packages=libnatpmp\n \n-darwin_native_packages = native_biplist native_ds_store native_mac_alias\n+multiprocess_packages = libmultiprocess capnp\n+multiprocess_native_packages = native_libmultiprocess native_capnp\n+\n+darwin_native_packages = native_ds_store native_mac_alias\n+\n+$(host_arch)_$(host_os)_native_packages += native_b2\n \n ifneq ($(build_os),darwin)\n-darwin_native_packages += native_cctools native_cdrkit native_libdmg-hfsplus\n+darwin_native_packages += native_cctools native_libdmg-hfsplus\n endif"
      },
      {
        "sha": "7d122ea5f97255b27e0f2f5dc7d218a57372be36",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 64,
        "deletions": 37,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -6,9 +6,12 @@ $(package)_file_name=qtbase-$($(package)_suffix)\n $(package)_sha256_hash=9b9dec1f67df1f94bce2955c5604de992d529dde72050239154c56352da0907d\n $(package)_dependencies=zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb\n-$(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch no-xlib.patch fix_android_qmake_conf.patch fix_android_jni_static.patch\n+$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch\n+$(package)_patches+= fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch no-xlib.patch\n+$(package)_patches+= fix_android_qmake_conf.patch fix_android_jni_static.patch dont_hardcode_pwd.patch\n+$(package)_patches+= freetype_back_compat.patch drop_lrelease_dependency.patch fix_powerpc_libpng.patch\n+$(package)_patches+= fix_mingw_cross_compile.patch fix_qpainter_non_determinism.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=fb5a47799754af73d3bf501fe513342cfe2fc37f64e80df5533f6110e804220c\n@@ -21,9 +24,10 @@ $(package)_extra_sources += $($(package)_qttools_file_name)\n \n define $(package)_set_vars\n $(package)_config_opts_release = -release\n+$(package)_config_opts_release += -silent\n $(package)_config_opts_debug = -debug\n $(package)_config_opts += -bindir $(build_prefix)/bin\n-$(package)_config_opts += -c++std c++11\n+$(package)_config_opts += -c++std c++1z\n $(package)_config_opts += -confirm-license\n $(package)_config_opts += -hostprefix $(build_prefix)\n $(package)_config_opts += -no-compile-examples\n@@ -64,22 +68,19 @@ $(package)_config_opts += -nomake examples\n $(package)_config_opts += -nomake tests\n $(package)_config_opts += -opensource\n $(package)_config_opts += -optimized-tools\n-$(package)_config_opts += -pch\n $(package)_config_opts += -pkg-config\n $(package)_config_opts += -prefix $(host_prefix)\n $(package)_config_opts += -qt-libpng\n $(package)_config_opts += -qt-pcre\n $(package)_config_opts += -qt-harfbuzz\n $(package)_config_opts += -system-zlib\n $(package)_config_opts += -static\n-$(package)_config_opts += -silent\n $(package)_config_opts += -v\n $(package)_config_opts += -no-feature-bearermanagement\n $(package)_config_opts += -no-feature-colordialog\n $(package)_config_opts += -no-feature-commandlineparser\n $(package)_config_opts += -no-feature-concurrent\n $(package)_config_opts += -no-feature-dial\n-$(package)_config_opts += -no-feature-filesystemwatcher\n $(package)_config_opts += -no-feature-fontcombobox\n $(package)_config_opts += -no-feature-ftp\n $(package)_config_opts += -no-feature-http\n@@ -113,6 +114,7 @@ $(package)_config_opts += -no-feature-xml\n \n $(package)_config_opts_darwin = -no-dbus\n $(package)_config_opts_darwin += -no-opengl\n+$(package)_config_opts_darwin += -pch\n \n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin += -xplatform macx-clang-linux\n@@ -121,8 +123,12 @@ $(package)_config_opts_darwin += -device-option MAC_SDK_VERSION=$(OSX_SDK_VERSIO\n $(package)_config_opts_darwin += -device-option CROSS_COMPILE=\"$(host)-\"\n $(package)_config_opts_darwin += -device-option MAC_MIN_VERSION=$(OSX_MIN_VERSION)\n $(package)_config_opts_darwin += -device-option MAC_TARGET=$(host)\n+$(package)_config_opts_darwin += -device-option XCODE_VERSION=$(XCODE_VERSION)\n endif\n \n+# for macOS on Apple Silicon (ARM) see https://bugreports.qt.io/browse/QTBUG-85279\n+$(package)_config_opts_arm_darwin += -device-option QMAKE_APPLE_DEVICE_ARCHS=arm64\n+\n $(package)_config_opts_linux  = -qt-xkbcommon-x11\n $(package)_config_opts_linux += -qt-xcb\n $(package)_config_opts_linux += -no-xcb-xlib\n@@ -144,6 +150,7 @@ $(package)_config_opts_mingw32 = -no-opengl\n $(package)_config_opts_mingw32 += -no-dbus\n $(package)_config_opts_mingw32 += -xplatform win32-g++\n $(package)_config_opts_mingw32 += -device-option CROSS_COMPILE=\"$(host)-\"\n+$(package)_config_opts_mingw32 += -pch\n \n $(package)_config_opts_android = -xplatform android-clang\n $(package)_config_opts_android += -android-sdk $(ANDROID_SDK)\n@@ -159,6 +166,7 @@ $(package)_config_opts_android += -qt-freetype\n $(package)_config_opts_android += -no-fontconfig\n $(package)_config_opts_android += -L $(host_prefix)/lib\n $(package)_config_opts_android += -I $(host_prefix)/include\n+$(package)_config_opts_android += -pch\n \n $(package)_config_opts_aarch64_android += -android-arch arm64-v8a\n $(package)_config_opts_armv7a_android += -android-arch armeabi-v7a\n@@ -189,33 +197,53 @@ define $(package)_extract_cmds\n   tar --no-same-owner --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttools_file_name) -C qttools\n endef\n \n+# Preprocessing steps work as follows:\n+#\n+# 1. Apply our patches to the extracted source. See each patch for more info.\n+#\n+# 2. Point to lrelease in qttools/bin/lrelease; otherwise Qt will look for it in\n+# $(host)/native/bin/lrelease and not find it.\n+#\n+# 3. Create a macOS-Clang-Linux mkspec using our mac-qmake.conf.\n+#\n+# 4. After making a copy of the mkspec for the linux-arm-gnueabi host, named\n+# bitcoin-linux-g++, replace instances of linux-arm-gnueabi with $(host). This\n+# way we can generically support hosts like riscv64-linux-gnu, which Qt doesn't\n+# ship a mkspec for. See it's usage in config_opts_* above.\n+#\n+# 5. Put our C, CXX and LD FLAGS into gcc-base.conf. Only used for non-host builds.\n+#\n+# 6. Do similar for the win32-g++ mkspec.\n+#\n+# 7. In clang.conf, swap out clang & clang++, for our compiler + flags. See #17466.\n+#\n+# 8. Adjust a regex in toolchain.prf, to accommodate Guix's usage of\n+# CROSS_LIBRARY_PATH. See #15277.\n define $(package)_preprocess_cmds\n-  sed -i.old \"s|FT_Get_Font_Format|FT_Get_X11_Font_Format|\" qtbase/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp && \\\n+  patch -p1 -i $($(package)_patch_dir)/freetype_back_compat.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_powerpc_libpng.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/drop_lrelease_dependency.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/dont_hardcode_pwd.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_qt_pkgconfig.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_configure_mac.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_no_printer.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_rcc_determinism.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/xkb-default.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_android_qmake_conf.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_android_jni_static.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_riscv64_arch.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/no-xlib.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_mingw_cross_compile.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_qpainter_non_determinism.patch &&\\\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n-  sed -i.old \"/updateqm.depends =/d\" qttranslations/translations/translations.pro && \\\n-  sed -i.old \"s/src_plugins.depends = src_sql src_network/src_plugins.depends = src_network/\" qtbase/src/src.pro && \\\n-  sed -i.old -e 's/if \\[ \"$$$$XPLATFORM_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/if \\[ \"$$$$BUILD_ON_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/' -e 's|/bin/pwd|pwd|' qtbase/configure && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n-  cp -f qtbase/mkspecs/macx-clang/Info.plist.lib qtbase/mkspecs/macx-clang-linux/ &&\\\n-  cp -f qtbase/mkspecs/macx-clang/Info.plist.app qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/qplatformdefs.h qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n   cp -r qtbase/mkspecs/linux-arm-gnueabi-g++ qtbase/mkspecs/bitcoin-linux-g++ && \\\n   sed -i.old \"s/arm-linux-gnueabi-/$(host)-/g\" qtbase/mkspecs/bitcoin-linux-g++/qmake.conf && \\\n-  patch -p1 -i $($(package)_patch_dir)/fix_qt_pkgconfig.patch &&\\\n-  patch -p1 -i $($(package)_patch_dir)/fix_configure_mac.patch &&\\\n-  patch -p1 -i $($(package)_patch_dir)/fix_no_printer.patch &&\\\n-  patch -p1 -i $($(package)_patch_dir)/fix_rcc_determinism.patch &&\\\n-  patch -p1 -i $($(package)_patch_dir)/xkb-default.patch &&\\\n-  patch -p1 -i $($(package)_patch_dir)/fix_android_qmake_conf.patch &&\\\n-  patch -p1 -i $($(package)_patch_dir)/fix_android_jni_static.patch &&\\\n   echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  patch -p1 -i $($(package)_patch_dir)/fix_riscv64_arch.patch &&\\\n-  patch -p1 -i $($(package)_patch_dir)/no-xlib.patch &&\\\n-  echo \"QMAKE_LINK_OBJECT_MAX = 10\" >> qtbase/mkspecs/win32-g++/qmake.conf &&\\\n-  echo \"QMAKE_LINK_OBJECT_SCRIPT = object_script\" >> qtbase/mkspecs/win32-g++/qmake.conf &&\\\n   sed -i.old \"s|QMAKE_CFLAGS           += |!host_build: QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n   sed -i.old \"s|QMAKE_CXXFLAGS         += |!host_build: QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n   sed -i.old \"0,/^QMAKE_LFLAGS_/s|^QMAKE_LFLAGS_|!host_build: QMAKE_LFLAGS            = $($(package)_ldflags)\\n&|\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n@@ -228,31 +256,30 @@ define $(package)_config_cmds\n   export PKG_CONFIG_SYSROOT_DIR=/ && \\\n   export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n   export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n+  cd qtbase && \\\n   ./configure $($(package)_config_opts) && \\\n   echo \"host_build: QT_CONFIG ~= s/system-zlib/zlib\" >> mkspecs/qconfig.pri && \\\n   echo \"CONFIG += force_bootstrap\" >> mkspecs/qconfig.pri && \\\n-  $(MAKE) sub-src-clean && \\\n-  cd ../qttranslations && ../qtbase/bin/qmake qttranslations.pro -o Makefile && \\\n-  cd translations && ../../qtbase/bin/qmake translations.pro -o Makefile && cd ../.. && \\\n-  cd qttools/src/linguist/lrelease/ && ../../../../qtbase/bin/qmake lrelease.pro -o Makefile && \\\n-  cd ../lupdate/ && ../../../../qtbase/bin/qmake lupdate.pro -o Makefile && cd ../../../..\n+  cd .. && \\\n+  $(MAKE) -C qtbase sub-src-clean && \\\n+  qtbase/bin/qmake -o qttranslations/Makefile qttranslations/qttranslations.pro && \\\n+  qtbase/bin/qmake -o qttranslations/translations/Makefile qttranslations/translations/translations.pro && \\\n+  qtbase/bin/qmake -o qttools/src/linguist/lrelease/Makefile qttools/src/linguist/lrelease/lrelease.pro && \\\n+  qtbase/bin/qmake -o qttools/src/linguist/lupdate/Makefile qttools/src/linguist/lupdate/lupdate.pro\n endef\n \n define $(package)_build_cmds\n-  $(MAKE) -C src $(addprefix sub-,$($(package)_qt_libs)) && \\\n-  $(MAKE) -C ../qttools/src/linguist/lrelease && \\\n-  $(MAKE) -C ../qttools/src/linguist/lupdate && \\\n-  $(MAKE) -C ../qttranslations\n+  $(MAKE) -C qtbase/src $(addprefix sub-,$($(package)_qt_libs)) && \\\n+  $(MAKE) -C qttools/src/linguist/lrelease && \\\n+  $(MAKE) -C qttools/src/linguist/lupdate && \\\n+  $(MAKE) -C qttranslations\n endef\n \n define $(package)_stage_cmds\n-  $(MAKE) -C src INSTALL_ROOT=$($(package)_staging_dir) $(addsuffix -install_subtargets,$(addprefix sub-,$($(package)_qt_libs))) && cd .. && \\\n+  $(MAKE) -C qtbase/src INSTALL_ROOT=$($(package)_staging_dir) $(addsuffix -install_subtargets,$(addprefix sub-,$($(package)_qt_libs))) && \\\n   $(MAKE) -C qttools/src/linguist/lrelease INSTALL_ROOT=$($(package)_staging_dir) install_target && \\\n   $(MAKE) -C qttools/src/linguist/lupdate INSTALL_ROOT=$($(package)_staging_dir) install_target && \\\n-  $(MAKE) -C qttranslations INSTALL_ROOT=$($(package)_staging_dir) install_subtargets && \\\n-  if `test -f qtbase/src/plugins/platforms/xcb/xcb-static/libxcb-static.a`; then \\\n-    cp qtbase/src/plugins/platforms/xcb/xcb-static/libxcb-static.a $($(package)_staging_prefix_dir)/lib; \\\n-  fi\n+  $(MAKE) -C qttranslations INSTALL_ROOT=$($(package)_staging_dir) install_subtargets\n endef\n \n define $(package)_postprocess_cmds"
      },
      {
        "sha": "5b3a61b239c64b2cbf6c538d0548791c75915490",
        "filename": "depends/packages/sqlite.mk",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/sqlite.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/sqlite.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/sqlite.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,26 @@\n+package=sqlite\n+$(package)_version=3320100\n+$(package)_download_path=https://sqlite.org/2020/\n+$(package)_file_name=sqlite-autoconf-$($(package)_version).tar.gz\n+$(package)_sha256_hash=486748abfb16abd8af664e3a5f03b228e5f124682b0c942e157644bf6fff7d10\n+\n+define $(package)_set_vars\n+$(package)_config_opts=--disable-shared --disable-readline --disable-dynamic-extensions --enable-option-checking\n+$(package)_config_opts_linux=--with-pic\n+endef\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) libsqlite3.la\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install-libLTLIBRARIES install-includeHEADERS install-pkgconfigDATA\n+endef\n+\n+define $(package)_postprocess_cmds\n+  rm lib/*.la\n+endef"
      },
      {
        "sha": "3b7f3690a4ac3408d5912d122165563e89026ea0",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -3,7 +3,7 @@ $(package)_version=4.3.1\n $(package)_download_path=https://github.com/zeromq/libzmq/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n $(package)_sha256_hash=bcbabe1e2c7d0eec4ed612e10b94b112dd5f06fcefa994a0c79a45d835cd21eb\n-$(package)_patches=0001-fix-build-with-older-mingw64.patch 0002-disable-pthread_set_name_np.patch\n+$(package)_patches=remove_libstd_link.patch\n \n define $(package)_set_vars\n   $(package)_config_opts=--without-docs --disable-shared --disable-curve --disable-curve-keygen --disable-perf\n@@ -12,13 +12,12 @@ define $(package)_set_vars\n   $(package)_config_opts += --disable-Werror --disable-drafts --enable-option-checking\n   $(package)_config_opts_linux=--with-pic\n   $(package)_config_opts_android=--with-pic\n-  $(package)_cxxflags=-std=c++11\n+  $(package)_cxxflags=-std=c++17\n endef\n \n define $(package)_preprocess_cmds\n-   patch -p1 < $($(package)_patch_dir)/0001-fix-build-with-older-mingw64.patch && \\\n-   patch -p1 < $($(package)_patch_dir)/0002-disable-pthread_set_name_np.patch && \\\n-   cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub config\n+  patch -p1 < $($(package)_patch_dir)/remove_libstd_link.patch && \\\n+  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub config\n endef\n \n define $(package)_config_cmds\n@@ -34,6 +33,5 @@ define $(package)_stage_cmds\n endef\n \n define $(package)_postprocess_cmds\n-  sed -i.old \"s/ -lstdc++//\" lib/pkgconfig/libzmq.pc && \\\n   rm -rf bin share lib/*.la\n endef"
      },
      {
        "sha": "58f7ddc7d502cff2b6cad8a81df5e879e8a3360b",
        "filename": "depends/patches/bdb/clang_cxx_11.patch",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/bdb/clang_cxx_11.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/bdb/clang_cxx_11.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/bdb/clang_cxx_11.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,147 @@\n+commit 3311d68f11d1697565401eee6efc85c34f022ea7\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Mon Aug 17 20:03:56 2020 +0800\n+\n+    Fix C++11 compatibility\n+\n+diff --git a/dbinc/atomic.h b/dbinc/atomic.h\n+index 0034dcc..7c11d4a 100644\n+--- a/dbinc/atomic.h\n++++ b/dbinc/atomic.h\n+@@ -70,7 +70,7 @@ typedef struct {\n+  * These have no memory barriers; the caller must include them when necessary.\n+  */\n+ #define\tatomic_read(p)\t\t((p)->value)\n+-#define\tatomic_init(p, val)\t((p)->value = (val))\n++#define\tatomic_init_db(p, val)\t((p)->value = (val))\n+ \n+ #ifdef HAVE_ATOMIC_SUPPORT\n+ \n+@@ -144,7 +144,7 @@ typedef LONG volatile *interlocked_val;\n+ #define\tatomic_inc(env, p)\t__atomic_inc(p)\n+ #define\tatomic_dec(env, p)\t__atomic_dec(p)\n+ #define\tatomic_compare_exchange(env, p, o, n)\t\\\n+-\t__atomic_compare_exchange((p), (o), (n))\n++\t__atomic_compare_exchange_db((p), (o), (n))\n+ static inline int __atomic_inc(db_atomic_t *p)\n+ {\n+ \tint\ttemp;\n+@@ -176,7 +176,7 @@ static inline int __atomic_dec(db_atomic_t *p)\n+  * http://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Atomic-Builtins.html\n+  * which configure could be changed to use.\n+  */\n+-static inline int __atomic_compare_exchange(\n++static inline int __atomic_compare_exchange_db(\n+ \tdb_atomic_t *p, atomic_value_t oldval, atomic_value_t newval)\n+ {\n+ \tatomic_value_t was;\n+@@ -206,7 +206,7 @@ static inline int __atomic_compare_exchange(\n+ #define\tatomic_dec(env, p)\t(--(p)->value)\n+ #define\tatomic_compare_exchange(env, p, oldval, newval)\t\t\\\n+ \t(DB_ASSERT(env, atomic_read(p) == (oldval)),\t\t\\\n+-\tatomic_init(p, (newval)), 1)\n++\tatomic_init_db(p, (newval)), 1)\n+ #else\n+ #define atomic_inc(env, p)\t__atomic_inc(env, p)\n+ #define atomic_dec(env, p)\t__atomic_dec(env, p)\n+diff --git a/mp/mp_fget.c b/mp/mp_fget.c\n+index 5fdee5a..0b75f57 100644\n+--- a/mp/mp_fget.c\n++++ b/mp/mp_fget.c\n+@@ -617,7 +617,7 @@ alloc:\t\t/* Allocate a new buffer header and data space. */\n+ \n+ \t\t/* Initialize enough so we can call __memp_bhfree. */\n+ \t\talloc_bhp->flags = 0;\n+-\t\tatomic_init(&alloc_bhp->ref, 1);\n++\t\tatomic_init_db(&alloc_bhp->ref, 1);\n+ #ifdef DIAGNOSTIC\n+ \t\tif ((uintptr_t)alloc_bhp->buf & (sizeof(size_t) - 1)) {\n+ \t\t\t__db_errx(env,\n+@@ -911,7 +911,7 @@ alloc:\t\t/* Allocate a new buffer header and data space. */\n+ \t\t\tMVCC_MPROTECT(bhp->buf, mfp->stat.st_pagesize,\n+ \t\t\t    PROT_READ);\n+ \n+-\t\tatomic_init(&alloc_bhp->ref, 1);\n++\t\tatomic_init_db(&alloc_bhp->ref, 1);\n+ \t\tMUTEX_LOCK(env, alloc_bhp->mtx_buf);\n+ \t\talloc_bhp->priority = bhp->priority;\n+ \t\talloc_bhp->pgno = bhp->pgno;\n+diff --git a/mp/mp_mvcc.c b/mp/mp_mvcc.c\n+index 34467d2..f05aa0c 100644\n+--- a/mp/mp_mvcc.c\n++++ b/mp/mp_mvcc.c\n+@@ -276,7 +276,7 @@ __memp_bh_freeze(dbmp, infop, hp, bhp, need_frozenp)\n+ #else\n+ \tmemcpy(frozen_bhp, bhp, SSZA(BH, buf));\n+ #endif\n+-\tatomic_init(&frozen_bhp->ref, 0);\n++\tatomic_init_db(&frozen_bhp->ref, 0);\n+ \tif (mutex != MUTEX_INVALID)\n+ \t\tfrozen_bhp->mtx_buf = mutex;\n+ \telse if ((ret = __mutex_alloc(env, MTX_MPOOL_BH,\n+@@ -428,7 +428,7 @@ __memp_bh_thaw(dbmp, infop, hp, frozen_bhp, alloc_bhp)\n+ #endif\n+ \t\talloc_bhp->mtx_buf = mutex;\n+ \t\tMUTEX_LOCK(env, alloc_bhp->mtx_buf);\n+-\t\tatomic_init(&alloc_bhp->ref, 1);\n++\t\tatomic_init_db(&alloc_bhp->ref, 1);\n+ \t\tF_CLR(alloc_bhp, BH_FROZEN);\n+ \t}\n+ \n+diff --git a/mp/mp_region.c b/mp/mp_region.c\n+index e6cece9..ddbe906 100644\n+--- a/mp/mp_region.c\n++++ b/mp/mp_region.c\n+@@ -224,7 +224,7 @@ __memp_init(env, dbmp, reginfo_off, htab_buckets, max_nreg)\n+ \t\t\t     MTX_MPOOL_FILE_BUCKET, 0, &htab[i].mtx_hash)) != 0)\n+ \t\t\t\treturn (ret);\n+ \t\t\tSH_TAILQ_INIT(&htab[i].hash_bucket);\n+-\t\t\tatomic_init(&htab[i].hash_page_dirty, 0);\n++\t\t\tatomic_init_db(&htab[i].hash_page_dirty, 0);\n+ \t\t}\n+ \n+ \t\t/*\n+@@ -269,7 +269,7 @@ __memp_init(env, dbmp, reginfo_off, htab_buckets, max_nreg)\n+ \t\thp->mtx_hash = (mtx_base == MUTEX_INVALID) ? MUTEX_INVALID :\n+ \t\t    mtx_base + i;\n+ \t\tSH_TAILQ_INIT(&hp->hash_bucket);\n+-\t\tatomic_init(&hp->hash_page_dirty, 0);\n++\t\tatomic_init_db(&hp->hash_page_dirty, 0);\n+ #ifdef HAVE_STATISTICS\n+ \t\thp->hash_io_wait = 0;\n+ \t\thp->hash_frozen = hp->hash_thawed = hp->hash_frozen_freed = 0;\n+diff --git a/mutex/mut_method.c b/mutex/mut_method.c\n+index 2588763..5c6d516 100644\n+--- a/mutex/mut_method.c\n++++ b/mutex/mut_method.c\n+@@ -426,7 +426,7 @@ atomic_compare_exchange(env, v, oldval, newval)\n+ \tMUTEX_LOCK(env, mtx);\n+ \tret = atomic_read(v) == oldval;\n+ \tif (ret)\n+-\t\tatomic_init(v, newval);\n++\t\tatomic_init_db(v, newval);\n+ \tMUTEX_UNLOCK(env, mtx);\n+ \n+ \treturn (ret);\n+diff --git a/mutex/mut_tas.c b/mutex/mut_tas.c\n+index f3922e0..e40fcdf 100644\n+--- a/mutex/mut_tas.c\n++++ b/mutex/mut_tas.c\n+@@ -46,7 +46,7 @@ __db_tas_mutex_init(env, mutex, flags)\n+ \n+ #ifdef HAVE_SHARED_LATCHES\n+ \tif (F_ISSET(mutexp, DB_MUTEX_SHARED))\n+-\t\tatomic_init(&mutexp->sharecount, 0);\n++\t\tatomic_init_db(&mutexp->sharecount, 0);\n+ \telse\n+ #endif\n+ \tif (MUTEX_INIT(&mutexp->tas)) {\n+@@ -486,7 +486,7 @@ __db_tas_mutex_unlock(env, mutex)\n+ \t\t\tF_CLR(mutexp, DB_MUTEX_LOCKED);\n+ \t\t\t/* Flush flag update before zeroing count */\n+ \t\t\tMEMBAR_EXIT();\n+-\t\t\tatomic_init(&mutexp->sharecount, 0);\n++\t\t\tatomic_init_db(&mutexp->sharecount, 0);\n+ \t\t} else {\n+ \t\t\tDB_ASSERT(env, sharecount > 0);\n+ \t\t\tMEMBAR_EXIT();"
      },
      {
        "sha": "3ffd1674e03bcf0da2995aa465908679bc5840e1",
        "filename": "depends/patches/fontconfig/gperf_header_regen.patch",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/fontconfig/gperf_header_regen.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/fontconfig/gperf_header_regen.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/fontconfig/gperf_header_regen.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,24 @@\n+commit 7b6eb33ecd88768b28c67ce5d2d68a7eed5936b6\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Tue Aug 25 14:34:53 2020 +0800\n+\n+    Remove rule that causes inadvertent header regeneration\n+\n+    Otherwise the makefile will needlessly attempt to re-generate the\n+    headers with gperf. This can be dropped once the upstream build is fixed.\n+\n+    See #10851.\n+\n+diff --git a/src/Makefile.in b/src/Makefile.in\n+index f4626ad..4ae1b00 100644\n+--- a/src/Makefile.in\n++++ b/src/Makefile.in\n+@@ -903,7 +903,7 @@ fcobjshash.gperf: fcobjshash.gperf.h fcobjs.h\n+ \t' - > $@.tmp && \\\n+ \tmv -f $@.tmp $@ || ( $(RM) $@.tmp && false )\n+\n+-fcobjshash.h: fcobjshash.gperf\n++fcobjshash.h:\n+ \t$(AM_V_GEN) $(GPERF) -m 100 $< > $@.tmp && \\\n+ \tmv -f $@.tmp $@ || ( $(RM) $@.tmp && false )\n+"
      },
      {
        "sha": "9f69081890c33d7acd79ec569cc7122d84d316da",
        "filename": "depends/patches/fontconfig/remove_char_width_usage.patch",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/fontconfig/remove_char_width_usage.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/fontconfig/remove_char_width_usage.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/fontconfig/remove_char_width_usage.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,62 @@\n+commit 28165a9b078583dc8e9e5c344510e37582284cef\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Mon Aug 17 20:35:42 2020 +0800\n+\n+    Remove usage of CHAR_WIDTH\n+\n+    CHAR_WIDTH which is reserved and clashes with glibc 2.25+\n+\n+    See #10851.\n+\n+diff --git a/fontconfig/fontconfig.h b/fontconfig/fontconfig.h\n+index 5c72b22..843c532 100644\n+--- a/fontconfig/fontconfig.h\n++++ b/fontconfig/fontconfig.h\n+@@ -128,7 +128,7 @@ typedef int\t\tFcBool;\n+ #define FC_USER_CACHE_FILE\t    \".fonts.cache-\" FC_CACHE_VERSION\n+\n+ /* Adjust outline rasterizer */\n+-#define FC_CHAR_WIDTH\t    \"charwidth\"\t/* Int */\n++#define FC_CHARWIDTH\t    \"charwidth\"\t/* Int */\n+ #define FC_CHAR_HEIGHT\t    \"charheight\"/* Int */\n+ #define FC_MATRIX\t    \"matrix\"    /* FcMatrix */\n+\n+diff --git a/src/fcobjs.h b/src/fcobjs.h\n+index 1fc4f65..d27864b 100644\n+--- a/src/fcobjs.h\n++++ b/src/fcobjs.h\n+@@ -51,7 +51,7 @@ FC_OBJECT (DPI,\t\t\tFcTypeDouble,\tNULL)\n+ FC_OBJECT (RGBA,\t\tFcTypeInteger,\tNULL)\n+ FC_OBJECT (SCALE,\t\tFcTypeDouble,\tNULL)\n+ FC_OBJECT (MINSPACE,\t\tFcTypeBool,\tNULL)\n+-FC_OBJECT (CHAR_WIDTH,\t\tFcTypeInteger,\tNULL)\n++FC_OBJECT (CHARWIDTH,\t\tFcTypeInteger,\tNULL)\n+ FC_OBJECT (CHAR_HEIGHT,\t\tFcTypeInteger,\tNULL)\n+ FC_OBJECT (MATRIX,\t\tFcTypeMatrix,\tNULL)\n+ FC_OBJECT (CHARSET,\t\tFcTypeCharSet,\tFcCompareCharSet)\n+diff --git a/src/fcobjshash.gperf b/src/fcobjshash.gperf\n+index 80a0237..eb4ad84 100644\n+--- a/src/fcobjshash.gperf\n++++ b/src/fcobjshash.gperf\n+@@ -44,7 +44,7 @@ int id;\n+ \"rgba\",FC_RGBA_OBJECT\n+ \"scale\",FC_SCALE_OBJECT\n+ \"minspace\",FC_MINSPACE_OBJECT\n+-\"charwidth\",FC_CHAR_WIDTH_OBJECT\n++\"charwidth\",FC_CHARWIDTH_OBJECT\n+ \"charheight\",FC_CHAR_HEIGHT_OBJECT\n+ \"matrix\",FC_MATRIX_OBJECT\n+ \"charset\",FC_CHARSET_OBJECT\n+diff --git a/src/fcobjshash.h b/src/fcobjshash.h\n+index 5a4d1ea..4e66bb0 100644\n+--- a/src/fcobjshash.h\n++++ b/src/fcobjshash.h\n+@@ -284,7 +284,7 @@ FcObjectTypeLookup (register const char *str, register unsigned int len)\n+       {(int)(long)&((struct FcObjectTypeNamePool_t *)0)->FcObjectTypeNamePool_str43,FC_CHARSET_OBJECT},\n+       {-1},\n+ #line 47 \"fcobjshash.gperf\"\n+-      {(int)(long)&((struct FcObjectTypeNamePool_t *)0)->FcObjectTypeNamePool_str45,FC_CHAR_WIDTH_OBJECT},\n++      {(int)(long)&((struct FcObjectTypeNamePool_t *)0)->FcObjectTypeNamePool_str45,FC_CHARWIDTH_OBJECT},\n+ #line 48 \"fcobjshash.gperf\"\n+       {(int)(long)&((struct FcObjectTypeNamePool_t *)0)->FcObjectTypeNamePool_str46,FC_CHAR_HEIGHT_OBJECT},\n+ #line 55 \"fcobjshash.gperf\""
      },
      {
        "sha": "a98cd90bd58a20072443a11a9c412b447e8e98a1",
        "filename": "depends/patches/libevent/0001-fix-windows-getaddrinfo.patch",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/libevent/0001-fix-windows-getaddrinfo.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/libevent/0001-fix-windows-getaddrinfo.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/libevent/0001-fix-windows-getaddrinfo.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,15 @@\n+diff -ur libevent-2.1.8-stable.orig/configure.ac libevent-2.1.8-stable/configure.ac\n+--- libevent-2.1.8-stable.orig/configure.ac\t2017-01-29 17:51:00.000000000 +0000\n++++ libevent-2.1.8-stable/configure.ac\t2020-03-07 01:11:16.311335005 +0000\n+@@ -389,6 +389,10 @@\n+ \t\t#ifdef HAVE_NETDB_H\n+ \t\t#include <netdb.h>\n+ \t\t#endif\n++#ifdef _WIN32\n++#include <winsock2.h>\n++#include <ws2tcpip.h>\n++#endif\n+ \t    ]],\n+ \t    [[\n+ \t\tgetaddrinfo;\n+Only in libevent-2.1.8-stable: configure.ac~"
      },
      {
        "sha": "a1cc9b50d1509379b121ba3f228821cced0485f9",
        "filename": "depends/patches/miniupnpc/dont_use_wingen.patch",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/miniupnpc/dont_use_wingen.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/miniupnpc/dont_use_wingen.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/miniupnpc/dont_use_wingen.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,26 @@\n+commit e8077044df239bcf0d9e9980b0e1afb9f1f5c446\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Tue Aug 18 20:50:19 2020 +0800\n+\n+    Don't use wingenminiupnpcstrings when generating miniupnpcstrings.h\n+\n+    The wingenminiupnpcstrings tool is used on Windows to generate version\n+    information. This information is irrelevant for us, and trying to use\n+    wingenminiupnpcstrings would cause builds to fail, so just don't use it.\n+\n+    We should be able to drop this once we are using 2.1 or later. See\n+    upstream commit: 9663c55c61408fdcc39a82987d2243f816b22932.\n+\n+diff --git a/Makefile.mingw b/Makefile.mingw\n+index 574720e..fcc17bb 100644\n+--- a/Makefile.mingw\n++++ b/Makefile.mingw\n+@@ -74,7 +74,7 @@ wingenminiupnpcstrings:\twingenminiupnpcstrings.o\n+\n+ wingenminiupnpcstrings.o:\twingenminiupnpcstrings.c\n+\n+-miniupnpcstrings.h: miniupnpcstrings.h.in wingenminiupnpcstrings\n++miniupnpcstrings.h: miniupnpcstrings.h.in\n+ \twingenminiupnpcstrings $< $@\n+\n+ minixml.o:\tminixml.c minixml.h"
      },
      {
        "sha": "2de6874cd4eb84f279a19fb0e71b7ede034bfd3a",
        "filename": "depends/patches/native_cctools/ld64_disable_threading.patch",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/native_cctools/ld64_disable_threading.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/native_cctools/ld64_disable_threading.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_cctools/ld64_disable_threading.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,26 @@\n+commit 584668415039adeed073decee7e04de28248afd3\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Tue Aug 18 01:20:24 2020 +0000\n+\n+    Disable threading to fix non-determinism\n+\n+    A bug in the file parser can cause dependencies to be calculated\n+    differently based on which files have already been parsed. This is more\n+    likely to occur on systems with more CPUs.\n+\n+    Just disable threading for now. There is no noticeable slowdown.\n+\n+    See #9891.\n+\n+diff --git a/cctools/ld64/src/ld/InputFiles.h b/cctools/ld64/src/ld/InputFiles.h\n+index ef9c756..90a70b6 100644\n+--- a/cctools/ld64/src/ld/InputFiles.h\n++++ b/cctools/ld64/src/ld/InputFiles.h\n+@@ -25,7 +25,6 @@\n+ #ifndef __INPUT_FILES_H__\n+ #define __INPUT_FILES_H__\n+\n+-#define HAVE_PTHREADS 1\n+\n+ #include <stdlib.h>\n+ #include <sys/types.h>"
      },
      {
        "sha": "8ab0993dc4de142ab7766a500640be92540fe80f",
        "filename": "depends/patches/native_cdrkit/cdrkit-deterministic.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 86,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/depends/patches/native_cdrkit/cdrkit-deterministic.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/depends/patches/native_cdrkit/cdrkit-deterministic.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_cdrkit/cdrkit-deterministic.patch?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,86 +0,0 @@\n---- cdrkit-1.1.11.old/genisoimage/tree.c\t2008-10-21 19:57:47.000000000 -0400\n-+++ cdrkit-1.1.11/genisoimage/tree.c\t2013-12-06 00:23:18.489622668 -0500\n-@@ -1139,8 +1139,9 @@\n- scan_directory_tree(struct directory *this_dir, char *path, \n- \t\t\t\t\t\t  struct directory_entry *de)\n- {\n--\tDIR\t\t*current_dir;\n-+        int             current_file;\n- \tchar\t\twhole_path[PATH_MAX];\n-+        struct dirent  **d_list;\n- \tstruct dirent\t*d_entry;\n- \tstruct directory *parent;\n- \tint\t\tdflag;\n-@@ -1164,7 +1165,8 @@\n- \tthis_dir->dir_flags |= DIR_WAS_SCANNED;\n- \n- \terrno = 0;\t/* Paranoia */\n--\tcurrent_dir = opendir(path);\n-+\t//current_dir = opendir(path);\n-+        current_file = scandir(path, &d_list, NULL, alphasort);\n- \td_entry = NULL;\n- \n- \t/*\n-@@ -1173,12 +1175,12 @@\n- \t */\n- \told_path = path;\n- \n--\tif (current_dir) {\n-+\tif (current_file >= 0) {\n- \t\terrno = 0;\n--\t\td_entry = readdir(current_dir);\n-+\t\td_entry = d_list[0];\n- \t}\n- \n--\tif (!current_dir || !d_entry) {\n-+\tif (current_file < 0 || !d_entry) {\n- \t\tint\tret = 1;\n- \n- #ifdef\tUSE_LIBSCHILY\n-@@ -1191,8 +1193,8 @@\n- \t\t\tde->isorec.flags[0] &= ~ISO_DIRECTORY;\n- \t\t\tret = 0;\n- \t\t}\n--\t\tif (current_dir)\n--\t\t\tclosedir(current_dir);\n-+\t\tif(d_list)\n-+\t\t\tfree(d_list);\n- \t\treturn (ret);\n- \t}\n- #ifdef\tABORT_DEEP_ISO_ONLY\n-@@ -1208,7 +1210,7 @@\n- \t\t\terrmsgno(EX_BAD, \"use Rock Ridge extensions via -R or -r,\\n\");\n- \t\t\terrmsgno(EX_BAD, \"or allow deep ISO9660 directory nesting via -D.\\n\");\n- \t\t}\n--\t\tclosedir(current_dir);\n-+\t\tfree(d_list);\n- \t\treturn (1);\n- \t}\n- #endif\n-@@ -1250,13 +1252,13 @@\n- \t\t * The first time through, skip this, since we already asked\n- \t\t * for the first entry when we opened the directory.\n- \t\t */\n--\t\tif (dflag)\n--\t\t\td_entry = readdir(current_dir);\n-+\t\tif (dflag && current_file >= 0)\n-+\t\t\td_entry = d_list[current_file];\n- \t\tdflag++;\n- \n--\t\tif (!d_entry)\n-+\t\tif (current_file < 0)\n- \t\t\tbreak;\n--\n-+                current_file--;\n- \t\t/* OK, got a valid entry */\n- \n- \t\t/* If we do not want all files, then pitch the backups. */\n-@@ -1348,7 +1350,7 @@\n- \t\tinsert_file_entry(this_dir, whole_path, d_entry->d_name);\n- #endif\t/* APPLE_HYB */\n- \t}\n--\tclosedir(current_dir);\n-+\tfree(d_list);\n- \n- #ifdef APPLE_HYB\n- \t/*"
      },
      {
        "sha": "a74e9cb09872b9abc82542e67772208413f7284e",
        "filename": "depends/patches/qt/dont_hardcode_pwd.patch",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/dont_hardcode_pwd.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/dont_hardcode_pwd.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/dont_hardcode_pwd.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,27 @@\n+commit 0e953866fc4672486e29e1ba6d83b4207e7b2f0b\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Tue Aug 18 15:09:06 2020 +0800\n+\n+    Don't hardcode pwd path\n+\n+    Let a man use his builtins if he wants to! Also, removes the unnecessary\n+    assumption that pwd lives under /bin/pwd.\n+\n+    See #15581.\n+\n+diff --git a/qtbase/configure b/qtbase/configure\n+index 08b49a8d..faea5b55 100755\n+--- a/qtbase/configure\n++++ b/qtbase/configure\n+@@ -36,9 +36,9 @@\n+ relconf=`basename $0`\n+ # the directory of this script is the \"source tree\"\n+ relpath=`dirname $0`\n+-relpath=`(cd \"$relpath\"; /bin/pwd)`\n++relpath=`(cd \"$relpath\"; pwd)`\n+ # the current directory is the \"build tree\" or \"object tree\"\n+-outpath=`/bin/pwd`\n++outpath=`pwd`\n+\n+ WHICH=\"which\"\n+"
      },
      {
        "sha": "f6b2c9fc8015a0eef744bda87ede8e230aa6b3a8",
        "filename": "depends/patches/qt/drop_lrelease_dependency.patch",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/drop_lrelease_dependency.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/drop_lrelease_dependency.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/drop_lrelease_dependency.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,20 @@\n+commit 67b3ed7406e1d0762188dbad2c44a06824ba0778\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Tue Aug 18 15:24:01 2020 +0800\n+\n+    Drop dependency on lrelease\n+\n+    Qts buildsystem insists on using the installed lrelease, but gets\n+    confused about how to find it. Since we manually control the build\n+    order, just drop the dependency.\n+\n+    See #9469\n+\n+diff --git a/qttranslations/translations/translations.pro b/qttranslations/translations/translations.pro\n+index 694544c..eff339d 100644\n+--- a/qttranslations/translations/translations.pro\n++++ b/qttranslations/translations/translations.pro\n+@@ -109,3 +109,2 @@ updateqm.commands = $$LRELEASE ${QMAKE_FILE_IN} -qm ${QMAKE_FILE_OUT}\n+ silent:updateqm.commands = @echo lrelease ${QMAKE_FILE_IN} && $$updateqm.commands\n+-updateqm.depends = $$LRELEASE_EXE\n+ updateqm.name = LRELEASE ${QMAKE_FILE_IN}"
      },
      {
        "sha": "67f76f1d856ef9256fe31bd1db54f1c04f5eee63",
        "filename": "depends/patches/qt/fix_mingw_cross_compile.patch",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/fix_mingw_cross_compile.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/fix_mingw_cross_compile.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_mingw_cross_compile.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,25 @@\n+commit 5a992a549adfe5a587bbcd6cd2b2cee47d236e27\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Fri Sep 4 08:13:44 2020 +0800\n+\n+    Work around broken mingw cross-compilation\n+\n+    See upstream issues:\n+    https://bugreports.qt.io/browse/QTBUG-63637\n+    https://bugreports.qt.io/browse/QTBUG-63659\n+    https://codereview.qt-project.org/q/8bebded9\n+\n+    We should be able to drop this once we are building qt 5.10.1 or later.\n+\n+    Added in #12971.\n+\n+diff --git a/qtbase/mkspecs/win32-g++/qmake.conf b/qtbase/mkspecs/win32-g++/qmake.conf\n+index e071a0d1..ad229b10 100644\n+--- a/qtbase/mkspecs/win32-g++/qmake.conf\n++++ b/qtbase/mkspecs/win32-g++/qmake.conf\n+@@ -87,3 +87,5 @@ QMAKE_NM                = $${CROSS_COMPILE}nm -P\n+ include(../common/angle.conf)\n+\n+ load(qt_config)\n++QMAKE_LINK_OBJECT_MAX = 10\n++QMAKE_LINK_OBJECT_SCRIPT = object_script"
      },
      {
        "sha": "d37b6c777646c39bd09b4ee63e8c98047b49bab4",
        "filename": "depends/patches/qt/fix_powerpc_libpng.patch",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/fix_powerpc_libpng.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/fix_powerpc_libpng.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_powerpc_libpng.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,23 @@\n+commit 6f9feb773a43c5abfa3455da2e324180e789285b\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Tue Sep 15 21:44:31 2020 +0800\n+\n+    Fix PowerPC build of libpng\n+\n+    See https://bugreports.qt.io/browse/QTBUG-66388.\n+\n+    Can be dropped when we are building qt 5.12.0 or later.\n+\n+diff --git a/qtbase/src/3rdparty/libpng/libpng.pro b/qtbase/src/3rdparty/libpng/libpng.pro\n+index 577b61d8..a2f56669 100644\n+--- a/qtbase/src/3rdparty/libpng/libpng.pro\n++++ b/qtbase/src/3rdparty/libpng/libpng.pro\n+@@ -10,7 +10,7 @@ MODULE_INCLUDEPATH = $$PWD\n+ \n+ load(qt_helper_lib)\n+ \n+-DEFINES += PNG_ARM_NEON_OPT=0\n++DEFINES += PNG_ARM_NEON_OPT=0 PNG_POWERPC_VSX_OPT=0\n+ SOURCES += \\\n+     png.c \\\n+     pngerror.c \\"
      },
      {
        "sha": "3cfcc22f03a0030af501d01ce74bbb9d39eafe66",
        "filename": "depends/patches/qt/fix_qpainter_non_determinism.patch",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/fix_qpainter_non_determinism.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/fix_qpainter_non_determinism.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_qpainter_non_determinism.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,63 @@\n+commit 2a8f7dc6ddfc414a66491522501c1574a1343ee1\n+Author: Andrew Chow <achow101-github@achow101.com>\n+Date:   Sat Nov 21 01:11:04 2020 -0500\n+\n+    build: Fix determinism issue when building with Clang 8\n+\n+    When building Qt with LLVM/Clang 8 under -O3 (the default), we run into\n+    a determinism issue in `qt_interset_spans`. The issue has been fixed for\n+    LLVM/Clang 9, see\n+    https://github.com/llvm/llvm-project/commit/db101864bdc938deb1d63fe4f7da761bd38e5cae\n+    and https://reviews.llvm.org/D64601, however this fix was not backported\n+    to 8.x. Once LLVM/Clang 9 is used, this patch can be dropped.\n+\n+    The particular issue appears to be an optimization done by -O3 which\n+    adds a temporary variable for `spans->y` in `qt_intersect_spans`. When\n+    it does this, sometimes it chooses to use a 32-bit movs instruction\n+    (movswl), and other times it chooses a 64-bit movs instruction (movswq).\n+    By patching `qt_intersect_spans` to always make a temporary variable for\n+    `spans->y`, we are able to sidestep this problem.\n+\n+diff --git a/qtbase/src/gui/painting/qpaintengine_raster.cpp b/qtbase/src/gui/painting/qpaintengine_raster.cpp\n+index 92ab6e8375..f018009e0b 100644\n+--- a/qtbase/src/gui/painting/qpaintengine_raster.cpp\n++++ b/qtbase/src/gui/painting/qpaintengine_raster.cpp\n+@@ -3971,22 +3971,23 @@ static const QSpan *qt_intersect_spans(const QClipData *clip, int *currentClip,\n+     const QSpan *clipEnd = clip->m_spans + clip->count;\n+ \n+     while (available && spans < end ) {\n++        const short spans_y = spans->y;\n+         if (clipSpans >= clipEnd) {\n+             spans = end;\n+             break;\n+         }\n+-        if (clipSpans->y > spans->y) {\n++        if (clipSpans->y > spans_y) {\n+             ++spans;\n+             continue;\n+         }\n+-        if (spans->y != clipSpans->y) {\n+-            if (spans->y < clip->count && clip->m_clipLines[spans->y].spans)\n+-                clipSpans = clip->m_clipLines[spans->y].spans;\n++        if (spans_y != clipSpans->y) {\n++            if (spans_y < clip->count && clip->m_clipLines[spans_y].spans)\n++                clipSpans = clip->m_clipLines[spans_y].spans;\n+             else\n+                 ++clipSpans;\n+             continue;\n+         }\n+-        Q_ASSERT(spans->y == clipSpans->y);\n++        Q_ASSERT(spans_y == clipSpans->y);\n+ \n+         int sx1 = spans->x;\n+         int sx2 = sx1 + spans->len;\n+@@ -4005,7 +4006,7 @@ static const QSpan *qt_intersect_spans(const QClipData *clip, int *currentClip,\n+         if (len) {\n+             out->x = qMax(sx1, cx1);\n+             out->len = qMin(sx2, cx2) - out->x;\n+-            out->y = spans->y;\n++            out->y = spans_y;\n+             out->coverage = qt_div_255(spans->coverage * clipSpans->coverage);\n+             ++out;\n+             --available;\n+"
      },
      {
        "sha": "8c722ffb46cb1d55dfc6a341b2f6dac3abe0f7a5",
        "filename": "depends/patches/qt/fix_qt_pkgconfig.patch",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/fix_qt_pkgconfig.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/fix_qt_pkgconfig.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_qt_pkgconfig.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,11 +1,23 @@\n --- old/qtbase/mkspecs/features/qt_module.prf\n +++ new/qtbase/mkspecs/features/qt_module.prf\n-@@ -245,7 +245,7 @@\n+@@ -264,7 +264,7 @@\n  load(qt_targets)\n  \n  # this builds on top of qt_common\n -!internal_module:!lib_bundle:if(unix|mingw) {\n-+unix|mingw {\n++if(unix|mingw):!if(darwin:debug_and_release:CONFIG(debug, debug|release)) {\n      CONFIG += create_pc\n      QMAKE_PKGCONFIG_DESTDIR = pkgconfig\n      host_build: \\\n+@@ -274,9 +274,9 @@\n+     QMAKE_PKGCONFIG_INCDIR = $$[QT_INSTALL_HEADERS/raw]\n+     QMAKE_PKGCONFIG_CFLAGS = -I${includedir}/$$MODULE_INCNAME\n+     QMAKE_PKGCONFIG_NAME = $$replace(TARGET, ^Qt, \"Qt$$QT_MAJOR_VERSION \")\n+-    QMAKE_PKGCONFIG_FILE = $$replace(TARGET, ^Qt, Qt$$QT_MAJOR_VERSION)\n++    QMAKE_PKGCONFIG_FILE = $$replace(TARGET, ^Qt, Qt$$QT_MAJOR_VERSION)$$qtPlatformTargetSuffix()\n+     for(i, MODULE_DEPENDS): \\\n+-        QMAKE_PKGCONFIG_REQUIRES += $$replace(QT.$${i}.name, ^Qt, Qt$$section(QT.$${i}.VERSION, ., 0, 0))\n++        QMAKE_PKGCONFIG_REQUIRES += $$replace(QT.$${i}.name, ^Qt, Qt$$section(QT.$${i}.VERSION, ., 0, 0))$$qtPlatformTargetSuffix()\n+     isEmpty(QMAKE_PKGCONFIG_DESCRIPTION): \\\n+         QMAKE_PKGCONFIG_DESCRIPTION = $$replace(TARGET, ^Qt, \"Qt \") module\n+     pclib_replace.match = $$lib_replace.match"
      },
      {
        "sha": "1ca55f1ce32bd11f7dd4b737c8b792341b2ca7e0",
        "filename": "depends/patches/qt/freetype_back_compat.patch",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/freetype_back_compat.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/freetype_back_compat.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/freetype_back_compat.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,28 @@\n+commit 14bc77db61bf9d56f9b6c8b84aa02573605c19c6\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Tue Aug 18 15:15:08 2020 +0800\n+\n+    Fix backwards compatibility with older Freetype versions at runtime\n+\n+    A few years ago, libfreetype introduced FT_Get_Font_Format() as an alias\n+    for FT_Get_X11_Font_Format(), but FT_Get_X11_Font_Format() was kept for abi\n+    backwards-compatibility.\n+\n+    Qt 5.9 introduced a call to FT_Get_Font_Format(). Replace it with FT_Get_X11_Font_Format()\n+    in order to remain compatible with older freetype, which is still used by e.g. Ubuntu Trusty.\n+\n+    See #14348.\n+\n+diff --git a/qtbase/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp b/qtbase/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp\n+index 3f543755..8ecc1c8c 100644\n+--- a/qtbase/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp\n++++ b/qtbase/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp\n+@@ -898,7 +898,7 @@ bool QFontEngineFT::init(FaceId faceId, bool antialias, GlyphFormat format,\n+         }\n+     }\n+ #if defined(FT_FONT_FORMATS_H)\n+-    const char *fmt = FT_Get_Font_Format(face);\n++    const char *fmt = FT_Get_X11_Font_Format(face);\n+     if (fmt && qstrncmp(fmt, \"CFF\", 4) == 0) {\n+         FT_Bool no_stem_darkening = true;\n+         FT_Error err = FT_Property_Get(qt_getFreetype(), \"cff\", \"no-stem-darkening\", &no_stem_darkening);"
      },
      {
        "sha": "01426675476bc9cd074d4d43127f1e5bb7042751",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,12 +1,12 @@\n MAKEFILE_GENERATOR = UNIX\n-CONFIG += app_bundle incremental global_init_link_order lib_version_first plugin_no_soname absolute_library_soname\n+CONFIG += app_bundle incremental lib_version_first absolute_library_soname\n QMAKE_INCREMENTAL_STYLE = sublib\n include(../common/macx.conf)\n include(../common/gcc-base-mac.conf)\n include(../common/clang.conf)\n include(../common/clang-mac.conf)\n QMAKE_MAC_SDK_PATH=$${MAC_SDK_PATH}\n-QMAKE_XCODE_VERSION=4.3\n+QMAKE_XCODE_VERSION = $${XCODE_VERSION}\n QMAKE_XCODE_DEVELOPER_PATH=/Developer\n QMAKE_MACOSX_DEPLOYMENT_TARGET = $${MAC_MIN_VERSION}\n QMAKE_MAC_SDK=macosx"
      },
      {
        "sha": "b911ac56724b193f84d0cbdbf0bf0f8d92e0bab6",
        "filename": "depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 30,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,30 +0,0 @@\n-From f6866b0f166ad168618aae64c7fbee8775d3eb23 Mon Sep 17 00:00:00 2001\n-From: mruddy <6440430+mruddy@users.noreply.github.com>\n-Date: Sat, 30 Jun 2018 09:44:58 -0400\n-Subject: [PATCH] fix build with older mingw64\n-\n----\n- src/windows.hpp | 7 +++++++\n- 1 file changed, 7 insertions(+)\n-\n-diff --git a/src/windows.hpp b/src/windows.hpp\n-index 6c3839fd..2c32ec79 100644\n---- a/src/windows.hpp\n-+++ b/src/windows.hpp\n-@@ -58,6 +58,13 @@\n- #include <winsock2.h>\n- #include <windows.h>\n- #include <mswsock.h>\n-+\n-+#if defined __MINGW64_VERSION_MAJOR && __MINGW64_VERSION_MAJOR < 4\n-+// Workaround for mingw-w64 < v4.0 which did not include ws2ipdef.h in iphlpapi.h.\n-+// Fixed in mingw-w64 by 9bd8fe9148924840d315b4c915dd099955ea89d1.\n-+#include <ws2def.h>\n-+#include <ws2ipdef.h>\n-+#endif\n- #include <iphlpapi.h>\n- \n- #if !defined __MINGW32__\n--- \n-2.17.1\n-"
      },
      {
        "sha": "b1c6f78a7046dbcdf4be20d3cc43e5cb09bc7528",
        "filename": "depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "patch": "@@ -1,35 +0,0 @@\n-From c9bbdd6581d07acfe8971e4bcebe278a3676cf03 Mon Sep 17 00:00:00 2001\n-From: mruddy <6440430+mruddy@users.noreply.github.com>\n-Date: Sat, 30 Jun 2018 09:57:18 -0400\n-Subject: [PATCH] disable pthread_set_name_np\n-\n-pthread_set_name_np adds a Glibc requirement on >= 2.12.\n----\n- src/thread.cpp | 4 +++-\n- 1 file changed, 3 insertions(+), 1 deletion(-)\n-\n-diff --git a/src/thread.cpp b/src/thread.cpp\n-index a1086b0c..9943f354 100644\n---- a/src/thread.cpp\n-+++ b/src/thread.cpp\n-@@ -308,7 +308,7 @@ void zmq::thread_t::setThreadName (const char *name_)\n-  */\n-     if (!name_)\n-         return;\n--\n-+#if 0\n- #if defined(ZMQ_HAVE_PTHREAD_SETNAME_1)\n-     int rc = pthread_setname_np (name_);\n-     if (rc)\n-@@ -324,6 +324,8 @@ void zmq::thread_t::setThreadName (const char *name_)\n- #elif defined(ZMQ_HAVE_PTHREAD_SET_NAME)\n-     pthread_set_name_np (_descriptor, name_);\n- #endif\n-+#endif\n-+    return;\n- }\n- \n- #endif\n--- \n-2.17.1\n-"
      },
      {
        "sha": "ddf91e6abfaba15442df4812af77379e7349019c",
        "filename": "depends/patches/zeromq/remove_libstd_link.patch",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/zeromq/remove_libstd_link.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/depends/patches/zeromq/remove_libstd_link.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/remove_libstd_link.patch?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,25 @@\n+commit 47d4cd12a2c051815ddda78adebdb3923b260d8a\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Tue Aug 18 14:45:40 2020 +0800\n+\n+    Remove needless linking against libstdc++\n+\n+    This is broken for a number of reasons, including:\n+    - g++ understands \"static-libstdc++ -lstdc++\" to mean \"link against\n+      whatever libstdc++ exists, probably shared\", which in itself is buggy.\n+    - another stdlib (libc++ for example) may be in use\n+\n+    See #11981.\n+\n+diff --git a/src/libzmq.pc.in b/src/libzmq.pc.in\n+index 233bc3a..3c2bf0d 100644\n+--- a/src/libzmq.pc.in\n++++ b/src/libzmq.pc.in\n+@@ -7,6 +7,6 @@ Name: libzmq\n+ Description: 0MQ c++ library\n+ Version: @VERSION@\n+ Libs: -L${libdir} -lzmq\n+-Libs.private: -lstdc++ @pkg_config_libs_private@\n++Libs.private: @pkg_config_libs_private@\n+ Requires.private: @pkg_config_names_private@\n+ Cflags: -I${includedir} @pkg_config_defines@"
      },
      {
        "sha": "2f7916821256f93fbc0ac2837c3afeb21828d2e1",
        "filename": "doc/Doxyfile.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/Doxyfile.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/Doxyfile.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile.in?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -2073,7 +2073,7 @@ INCLUDE_FILE_PATTERNS  =\n # recursively expanded use the := operator instead of the = operator.\n # This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n \n-PREDEFINED             =\n+PREDEFINED             = HAVE_BOOST_PROCESS\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n # tag can be used to specify a list of macro names that should be expanded. The"
      },
      {
        "sha": "12807bfb8650e31a491044df9144b373e517c64b",
        "filename": "doc/JSON-RPC-interface.md",
        "status": "modified",
        "additions": 20,
        "deletions": 8,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/JSON-RPC-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/JSON-RPC-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/JSON-RPC-interface.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -60,7 +60,7 @@ RPC interface will be abused.\n   are sent as clear text that can be read by anyone on your network\n   path.  Additionally, the RPC interface has not been hardened to\n   withstand arbitrary Internet traffic, so changing the above settings\n-  to expose it to the Internet (even using something like a Tor hidden\n+  to expose it to the Internet (even using something like a Tor onion\n   service) could expose you to unconsidered vulnerabilities.  See\n   `bitcoind -help` for more information about these settings and other\n   settings described in this document.\n@@ -88,13 +88,14 @@ RPC interface will be abused.\n - **Secure string handling:** The RPC interface does not guarantee any\n   escaping of data beyond what's necessary to encode it as JSON,\n   although it does usually provide serialized data using a hex\n-  representation of the bytes.  If you use RPC data in your programs or\n-  provide its data to other programs, you must ensure any problem\n-  strings are properly escaped.  For example, multiple websites have\n-  been manipulated because they displayed decoded hex strings that\n-  included HTML `<script>` tags.  For this reason, and other\n-  non-security reasons, it is recommended to display all serialized data\n-  in hex form only.\n+  representation of the bytes. If you use RPC data in your programs or\n+  provide its data to other programs, you must ensure any problem strings\n+  are properly escaped. For example, the `createwallet` RPC accepts\n+  arguments such as `wallet_name` which is a string and could be used\n+  for a path traversal attack without application level checks. Multiple\n+  websites have been manipulated because they displayed decoded hex strings\n+  that included HTML `<script>` tags. For this reason, and others, it is\n+  recommended to display all serialized data in hex form only.\n \n ## RPC consistency guarantees\n \n@@ -127,3 +128,14 @@ However, the wallet may not be up-to-date with the current state of the mempool\n or the state of the mempool by an RPC that returned before this RPC. For\n example, a wallet transaction that was BIP-125-replaced in the mempool prior to\n this RPC may not yet be reflected as such in this RPC response.\n+\n+## Limitations\n+\n+There is a known issue in the JSON-RPC interface that can cause a node to crash if\n+too many http connections are being opened at the same time because the system runs\n+out of available file descriptors. To prevent this from happening you might\n+want to increase the number of maximum allowed file descriptors in your system\n+and try to prevent opening too many connections to your JSON-RPC interface at the\n+same time if this is under your control. It is hard to give general advice\n+since this depends on your system but if you make several hundred requests at\n+once you are definitely at risk of encountering this issue."
      },
      {
        "sha": "623773439054388a4d76cb5de83538ced0443a0c",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -4,14 +4,26 @@ Unauthenticated REST Interface\n The REST API can be enabled with the `-rest` option.\n \n The interface runs on the same port as the JSON-RPC interface, by default port 8332 for mainnet, port 18332 for testnet,\n-and port 18443 for regtest.\n+port 38332 for signet, and port 18443 for regtest.\n \n REST Interface consistency guarantees\n -------------------------------------\n \n The [same guarantees as for the RPC Interface](/doc/JSON-RPC-interface.md#rpc-consistency-guarantees)\n apply.\n \n+Limitations\n+-----------\n+\n+There is a known issue in the REST interface that can cause a node to crash if\n+too many http connections are being opened at the same time because the system runs\n+out of available file descriptors. To prevent this from happening you might\n+want to increase the number of maximum allowed file descriptors in your system\n+and try to prevent opening too many connections to your rest interface at the\n+same time if this is under your control. It is hard to give general advice\n+since this depends on your system but if you make several hundred requests at\n+once you are definitely at risk of encountering this issue.\n+\n Supported API\n -------------\n \n@@ -50,7 +62,7 @@ Given a height: returns hash of block in best-block-chain at height provided.\n \n Returns various state info regarding block chain processing.\n Only supports JSON as output format.\n-* chain : (string) current network name (main, test, regtest)\n+* chain : (string) current network name (main, test, signet, regtest)\n * blocks : (numeric) the current number of blocks processed in the server\n * headers : (numeric) the current number of headers we have validated\n * bestblockhash : (string) the hash of the currently best block\n@@ -61,7 +73,6 @@ Only supports JSON as output format.\n * pruned : (boolean) if the blocks are subject to pruning\n * pruneheight : (numeric) highest block available\n * softforks : (array) status of softforks in progress\n-* bip9_softforks : (object) status of BIP9 softforks in progress\n \n #### Query UTXO set\n `GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`\n@@ -79,7 +90,6 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n    \"bitmap\": \"1\",\n    \"utxos\" : [\n       {\n-         \"txvers\" : 1\n          \"height\" : 2147483647,\n          \"value\" : 8.8687,\n          \"scriptPubKey\" : {"
      },
      {
        "sha": "b6cd86eafe6e7df2f81da7e0835239a40c476a24",
        "filename": "doc/benchmarking.md",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/benchmarking.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/benchmarking.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/benchmarking.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -19,8 +19,10 @@ After compiling bitcoin-core, the benchmarks can be run with:\n \n The output will look similar to:\n ```\n-# Benchmark, evals, iterations, total, min, max, median\n-AssembleBlock, 5, 700, 1.79954, 0.000510913, 0.000517018, 0.000514497\n+|             ns/byte |              byte/s | error % | benchmark\n+|--------------------:|--------------------:|--------:|:----------------------------------------------\n+|               64.13 |       15,592,356.01 |    0.1% | `Base58CheckEncode`\n+|               24.56 |       40,722,672.68 |    0.2% | `Base58Decode`\n ...\n ```\n "
      },
      {
        "sha": "8c20533c9bbaea4bcc18f8610713016454267a78",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,4 +1,4 @@\n-BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.19.0**):\n+BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.21.0**):\n \n * [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575))\n * [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n@@ -37,8 +37,12 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.19.0**):\n * [`BIP 145`](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki): getblocktemplate updates for Segregated Witness as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n * [`BIP 147`](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki): NULLDUMMY softfork as of **v0.13.1** ([PR 8636](https://github.com/bitcoin/bitcoin/pull/8636) and [PR 8937](https://github.com/bitcoin/bitcoin/pull/8937)), *buried* since **v0.19.0** ([PR #16060](https://github.com/bitcoin/bitcoin/pull/16060)).\n * [`BIP 152`](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki): Compact block transfer and related optimizations are used as of **v0.13.0** ([PR 8068](https://github.com/bitcoin/bitcoin/pull/8068)).\n-- [`BIP 158`](https://github.com/bitcoin/bips/blob/master/bip-0158.mediawiki): Compact Block Filters for Light Clients can be indexed as of **v0.19.0** ([PR #14121](https://github.com/bitcoin/bitcoin/pull/14121)).\n+* [`BIP 155`](https://github.com/bitcoin/bips/blob/master/bip-0155.mediawiki): The 'addrv2' and 'sendaddrv2' messages which enable relay of Tor V3 addresses (and other networks) are supported as of **v0.21.0** ([PR 19954](https://github.com/bitcoin/bitcoin/pull/19954)).\n+* [`BIP 158`](https://github.com/bitcoin/bips/blob/master/bip-0158.mediawiki): Compact Block Filters for Light Clients can be indexed as of **v0.19.0** ([PR #14121](https://github.com/bitcoin/bitcoin/pull/14121)).\n * [`BIP 159`](https://github.com/bitcoin/bips/blob/master/bip-0159.mediawiki): The `NODE_NETWORK_LIMITED` service bit is signalled as of **v0.16.0** ([PR 11740](https://github.com/bitcoin/bitcoin/pull/11740)), and such nodes are connected to as of **v0.17.0** ([PR 10387](https://github.com/bitcoin/bitcoin/pull/10387)).\n * [`BIP 173`](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki): Bech32 addresses for native Segregated Witness outputs are supported as of **v0.16.0** ([PR 11167](https://github.com/bitcoin/bitcoin/pull/11167)). Bech32 addresses are generated by default as of **v0.20.0** ([PR 16884](https://github.com/bitcoin/bitcoin/pull/16884)).\n * [`BIP 174`](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki): RPCs to operate on Partially Signed Bitcoin Transactions (PSBT) are present as of **v0.17.0** ([PR 13557](https://github.com/bitcoin/bitcoin/pull/13557)).\n * [`BIP 176`](https://github.com/bitcoin/bips/blob/master/bip-0176.mediawiki): Bits Denomination [QT only] is supported as of **v0.16.0** ([PR 12035](https://github.com/bitcoin/bitcoin/pull/12035)).\n+* [`BIP 325`](https://github.com/bitcoin/bips/blob/master/bip-0325.mediawiki): Signet test network is supported as of **v0.21.0** ([PR 18267](https://github.com/bitcoin/bitcoin/pull/18267)).\n+* [`BIP 339`](https://github.com/bitcoin/bips/blob/master/bip-0339.mediawiki): Relay of transactions by wtxid is supported as of **v0.21.0** ([PR 18044](https://github.com/bitcoin/bitcoin/pull/18044)).\n+* [`BIP 340`](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki) [`341`](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki) [`342`](https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki): Validation rules for Taproot (including Schnorr signatures and Tapscript leaves) are implemented as of **v0.21.0** ([PR 19953](https://github.com/bitcoin/bitcoin/pull/19953)), without mainnet activation."
      },
      {
        "sha": "18ea84c579a3659d0cf3005a76545b7ff287a86d",
        "filename": "doc/build-freebsd.md",
        "status": "modified",
        "additions": 90,
        "deletions": 22,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/build-freebsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/build-freebsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-freebsd.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,59 +1,127 @@\n-FreeBSD build guide\n-======================\n-(updated for FreeBSD 12.0)\n+# FreeBSD Build Guide\n \n-This guide describes how to build bitcoind and command-line utilities on FreeBSD.\n+**Updated for FreeBSD [12.2](https://www.freebsd.org/releases/12.2R/announce.html)**\n \n-This guide does not contain instructions for building the GUI.\n+This guide describes how to build bitcoind, command-line utilities, and GUI on FreeBSD.\n+\n+## Dependencies\n+\n+The following dependencies are **required**:\n+\n+ Library                                                               | Purpose    | Description\n+ ----------------------------------------------------------------------|------------|----------------------\n+ [autoconf](https://svnweb.freebsd.org/ports/head/devel/autoconf/)     | Build      | Automatically configure software source code\n+ [automake](https://svnweb.freebsd.org/ports/head/devel/automake/)     | Build      | Generate makefile (requires autoconf)\n+ [libtool](https://svnweb.freebsd.org/ports/head/devel/libtool/)       | Build      | Shared library support\n+ [pkgconf](https://svnweb.freebsd.org/ports/head/devel/pkgconf/)       | Build      | Configure compiler and linker flags\n+ [git](https://svnweb.freebsd.org/ports/head/devel/git/)               | Clone      | Version control system\n+ [gmake](https://svnweb.freebsd.org/ports/head/devel/gmake/)           | Compile    | Generate executables\n+ [boost-libs](https://svnweb.freebsd.org/ports/head/devel/boost-libs/) | Utility    | Library for threading, data structures, etc\n+ [libevent](https://svnweb.freebsd.org/ports/head/devel/libevent/)     | Networking | OS independent asynchronous networking\n+\n+\n+The following dependencies are **optional**:\n+\n+  Library                                                                    | Purpose          | Description\n+  ---------------------------------------------------------------------------|------------------|----------------------\n+  [db5](https://svnweb.freebsd.org/ports/head/databases/db5/)                | Berkeley DB      | Wallet storage (only needed when wallet enabled)\n+  [qt5](https://svnweb.freebsd.org/ports/head/devel/qt5/)                    | GUI              | GUI toolkit (only needed when GUI enabled)\n+  [libqrencode](https://svnweb.freebsd.org/ports/head/graphics/libqrencode/) | QR codes in GUI  | Generating QR codes (only needed when GUI enabled)\n+  [libzmq4](https://svnweb.freebsd.org/ports/head/net/libzmq4/)              | ZMQ notification | Allows generating ZMQ notifications (requires ZMQ version >= 4.0.0)\n+  [sqlite3](https://svnweb.freebsd.org/ports/head/databases/sqlite3/)        | SQLite DB        | Wallet storage (only needed when wallet enabled)\n+  [python3](https://svnweb.freebsd.org/ports/head/lang/python3/)             | Testing          | Python Interpreter (only needed when running the test suite)\n+\n+  See [dependencies.md](dependencies.md) for a complete overview.\n \n ## Preparation\n \n-You will need the following dependencies, which can be installed as root via pkg:\n+### 1. Install Required Dependencies\n+Install the required dependencies the usual way you [install software on FreeBSD](https://www.freebsd.org/doc/en/books/handbook/ports.html) - either with `pkg` or via the Ports collection. The example commands below use `pkg` which is usually run as `root` or via `sudo`. If you want to use `sudo`, and you haven't set it up: [use this guide](http://www.freebsdwiki.net/index.php/Sudo%2C_configuring) to setup `sudo` access on FreeBSD.\n \n ```bash\n pkg install autoconf automake boost-libs git gmake libevent libtool pkgconf\n \n+```\n+\n+### 2. Clone Bitcoin Repo\n+Now that `git` and all the required dependencies are installed, let's clone the Bitcoin Core repository to a directory. All build scripts and commands will run from this directory.\n+``` bash\n git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n-In order to run the test suite (recommended), you will need to have Python 3 installed:\n+### 3. Install Optional Dependencies\n+\n+#### Wallet Dependencies\n+It is not necessary to build wallet functionality to run bitcoind or the GUI. To enable legacy wallets, you must install `db5`. To enable [descriptor wallets](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md), `sqlite3` is required. Skip `db5` if you intend to *exclusively* use descriptor wallets\n+\n+###### Legacy Wallet Support\n+`db5` is required to enable support for legacy wallets. Skip if you don't intend to use legacy wallets\n \n ```bash\n-pkg install python3\n+pkg install db5\n ```\n \n-See [dependencies.md](dependencies.md) for a complete overview.\n+###### Descriptor Wallet Support\n \n-### Building BerkeleyDB\n+`sqlite3` is required to enable support for descriptor wallets. Skip if you don't intend to use descriptor wallets.\n+``` bash\n+pkg install sqlite3\n+```\n+---\n \n-BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n-`--disable-wallet` to `./configure` and skip to the next section.\n+#### GUI Dependencies\n+###### Qt5\n \n+Bitcoin Core includes a GUI built with the cross-platform Qt Framework. To compile the GUI, we need to install `qt5`. Skip if you don't intend to use the GUI.\n ```bash\n-./contrib/install_db4.sh `pwd`\n-export BDB_PREFIX=\"$PWD/db4\"\n+pkg install qt5\n ```\n+###### libqrencode\n+\n+The GUI can encode addresses in a QR Code. To build in QR support for the GUI, install `libqrencode`. Skip if not using the GUI or don't want QR code functionality.\n+```bash\n+pkg install libqrencode\n+```\n+---\n+\n+#### Test Suite Dependencies\n+There is an included test suite that is useful for testing code changes when developing.\n+To run the test suite (recommended), you will need to have Python 3 installed:\n+\n+```bash\n+pkg install python3\n+```\n+---\n \n ## Building Bitcoin Core\n \n-**Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n+### 1. Configuration\n \n-With wallet:\n+There are many ways to configure Bitcoin Core, here are a few common examples:\n+##### Wallet (BDB + SQlite) Support, No GUI:\n+This explicitly enables legacy wallet support and disables the GUI. If `sqlite3` is installed, then descriptor wallet support will be built.\n ```bash\n ./autogen.sh\n-./configure --with-gui=no \\\n-    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n-    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" \\\n+./configure --with-gui=no --with-incompatible-bdb \\\n+    BDB_LIBS=\"-ldb_cxx-5\" \\\n+    BDB_CFLAGS=\"-I/usr/local/include/db5\" \\\n     MAKE=gmake\n ```\n \n-Without wallet:\n+##### Wallet (only SQlite) and GUI Support:\n+This explicitly enables the GUI and disables legacy wallet support. If `qt5` is not installed, this will throw an error. If `sqlite3` is installed then descriptor wallet functionality will be built. If `sqlite3` is not installed, then wallet functionality will be disabled.\n ```bash\n ./autogen.sh\n-./configure --with-gui=no --disable-wallet MAKE=gmake\n+./configure --without-bdb --with-gui=yes MAKE=gmake\n+```\n+##### No Wallet or GUI\n+``` bash\n+./autogen.sh\n+./configure --without-wallet --with-gui=no MAKE=gmake\n ```\n \n-followed by:\n+### 2. Compile\n+**Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n \n ```bash\n gmake # use -jX here for parallelism"
      },
      {
        "sha": "dccd7b13352747bc1c6938316388991ea2e273ed",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 18,
        "deletions": 10,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,10 +1,8 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 6.4)\n+(updated for OpenBSD 6.7)\n \n-This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n-\n-OpenBSD is most commonly used as a server OS, so this guide does not contain instructions for building the GUI.\n+This guide describes how to build bitcoind, bitcoin-qt, and command-line utilities on OpenBSD.\n \n Preparation\n -------------\n@@ -13,20 +11,22 @@ Run the following as root to install the base dependencies for building:\n \n ```bash\n pkg_add git gmake libevent libtool boost\n+pkg_add qt5 # (optional for enabling the GUI)\n pkg_add autoconf # (select highest version, e.g. 2.69)\n pkg_add automake # (select highest version, e.g. 1.16)\n-pkg_add python # (select highest version, e.g. 3.6)\n+pkg_add python # (select highest version, e.g. 3.8)\n+pkg_add bash\n \n git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n See [dependencies.md](dependencies.md) for a complete overview.\n \n **Important**: From OpenBSD 6.2 onwards a C++11-supporting clang compiler is\n-part of the base image, and while building it is necessary to make sure that this\n-compiler is used and not ancient g++ 4.2.1. This is done by appending\n-`CC=cc CXX=c++` to configuration commands. Mixing different compilers\n-within the same executable will result in linker errors.\n+part of the base image, and while building it is necessary to make sure that\n+this compiler is used and not ancient g++ 4.2.1. This is done by appending\n+`CC=cc CC_FOR_BUILD=cc CXX=c++` to configuration commands. Mixing different\n+compilers within the same executable will result in errors.\n \n ### Building BerkeleyDB\n \n@@ -77,7 +77,15 @@ To configure with wallet:\n \n To configure without wallet:\n ```bash\n-./configure --disable-wallet --with-gui=no CC=cc CXX=c++ MAKE=gmake\n+./configure --disable-wallet --with-gui=no CC=cc CC_FOR_BUILD=cc CXX=c++ MAKE=gmake\n+```\n+\n+To configure with GUI:\n+```bash\n+./configure --with-gui=yes CC=cc CXX=c++ \\\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n+    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" \\\n+    MAKE=gmake\n ```\n \n Build and run the tests:"
      },
      {
        "sha": "04ee43f81d713754a1a8ebf67f97534942875926",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 31,
        "deletions": 7,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -19,7 +19,7 @@ Then install [Homebrew](https://brew.sh).\n \n ## Dependencies\n ```shell\n-brew install automake berkeley-db4 libtool boost miniupnpc pkg-config python qt libevent qrencode\n+brew install automake libtool boost miniupnpc libnatpmp pkg-config python qt libevent qrencode\n ```\n \n If you run into issues, check [Homebrew's troubleshooting page](https://docs.brew.sh/Troubleshooting).\n@@ -30,7 +30,27 @@ If you want to build the disk image with `make deploy` (.dmg / optional), you ne\n brew install librsvg\n ```\n \n-## Berkeley DB\n+and [`macdeployqtplus`](../contrib/macdeploy/README.md) dependencies:\n+```shell\n+pip3 install ds_store mac_alias\n+```\n+\n+The wallet support requires one or both of the dependencies ([*SQLite*](#sqlite) and [*Berkeley DB*](#berkeley-db)) in the sections below.\n+To build Bitcoin Core without wallet, see [*Disable-wallet mode*](#disable-wallet-mode).\n+\n+#### SQLite\n+\n+Usually, macOS installation already has a suitable SQLite installation.\n+Also, the Homebrew package could be installed:\n+\n+```shell\n+brew install sqlite\n+```\n+\n+In that case the Homebrew package will prevail.\n+\n+#### Berkeley DB\n+\n It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n you can use [this](/contrib/install_db4.sh) script to install it\n like so:\n@@ -41,7 +61,11 @@ like so:\n \n from the root of the repository.\n \n-**Note**: You only need Berkeley DB if the wallet is enabled (see [*Disable-wallet mode*](/doc/build-osx.md#disable-wallet-mode)).\n+Also, the Homebrew package could be installed:\n+\n+```shell\n+brew install berkeley-db4\n+```\n \n ## Build Bitcoin Core\n \n@@ -72,14 +96,14 @@ from the root of the repository.\n     make deploy\n     ```\n \n-## `disable-wallet` mode\n+## Disable-wallet mode\n When the intention is to run only a P2P node without a wallet, Bitcoin Core may be\n-compiled in `disable-wallet` mode with:\n+compiled in disable-wallet mode with:\n ```shell\n ./configure --disable-wallet\n ```\n \n-In this case there is no dependency on Berkeley DB 4.8.\n+In this case there is no dependency on [*Berkeley DB*](#berkeley-db) and [*SQLite*](#sqlite).\n \n Mining is also possible in disable-wallet mode using the `getblocktemplate` RPC call.\n \n@@ -111,6 +135,6 @@ tail -f $HOME/Library/Application\\ Support/Bitcoin/debug.log\n ```\n \n ## Notes\n-* Tested on OS X 10.12 Sierra through macOS 10.15 Catalina on 64-bit Intel\n+* Tested on OS X 10.14 Mojave through macOS 11 Big Sur on 64-bit Intel\n processors only.\n * Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714)."
      },
      {
        "sha": "5c24886dbfdc34923dcbf09f2342080986630294",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 28,
        "deletions": 9,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -41,11 +41,13 @@ Optional dependencies:\n  Library     | Purpose          | Description\n  ------------|------------------|----------------------\n  miniupnpc   | UPnP Support     | Firewall-jumping support\n- libdb4.8    | Berkeley DB      | Wallet storage (only needed when wallet enabled)\n+ libnatpmp   | NAT-PMP Support  | Firewall-jumping support\n+ libdb4.8    | Berkeley DB      | Optional, wallet storage (only needed when wallet enabled)\n  qt          | GUI              | GUI toolkit (only needed when GUI enabled)\n  libqrencode | QR codes in GUI  | Optional for generating QR codes (only needed when GUI enabled)\n  univalue    | Utility          | JSON parsing and encoding (bundled version will be used unless --with-system-univalue passed to configure)\n  libzmq3     | ZMQ notification | Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.0.0)\n+ sqlite3     | SQLite DB        | Optional, wallet storage (only needed when wallet enabled)\n \n For the versions used, see [dependencies.md](dependencies.md)\n \n@@ -91,12 +93,16 @@ pass `--with-incompatible-bdb` to configure.\n \n Otherwise, you can build from self-compiled `depends` (see above).\n \n+SQLite is required for the wallet:\n+\n+    sudo apt install libsqlite3-dev\n+\n To build Bitcoin Core without wallet, see [*Disable-wallet mode*](/doc/build-unix.md#disable-wallet-mode)\n \n \n-Optional (see `--with-miniupnpc` and `--enable-upnp-default`):\n+Optional port mapping libraries (see: `--with-miniupnpc`, and `--enable-upnp-default`, `--with-natpmp`, `--enable-natpmp-default`):\n \n-    sudo apt-get install libminiupnpc-dev\n+    sudo apt install libminiupnpc-dev libnatpmp-dev\n \n ZMQ dependencies (provides ZMQ API):\n \n@@ -128,9 +134,9 @@ Build requirements:\n \n     sudo dnf install gcc-c++ libtool make autoconf automake libevent-devel boost-devel libdb4-devel libdb4-cxx-devel python3\n \n-Optional (see `--with-miniupnpc` and `--enable-upnp-default`):\n+Optional port mapping libraries (see: `--with-miniupnpc`, and `--enable-upnp-default`, `--with-natpmp`, `--enable-natpmp-default`):\n \n-    sudo dnf install miniupnpc-devel\n+    sudo dnf install miniupnpc-devel libnatpmp-devel\n \n ZMQ dependencies (provides ZMQ API):\n \n@@ -144,23 +150,36 @@ libqrencode (optional) can be installed with:\n \n     sudo dnf install qrencode-devel\n \n+SQLite can be installed with:\n+\n+    sudo dnf install sqlite-devel\n+\n Notes\n -----\n The release is built with GCC and then \"strip bitcoind\" to strip the debug\n symbols, which reduces the executable size by about 90%.\n \n-\n miniupnpc\n ---------\n \n [miniupnpc](https://miniupnp.tuxfamily.org) may be used for UPnP port mapping.  It can be downloaded from [here](\n https://miniupnp.tuxfamily.org/files/).  UPnP support is compiled in and\n-turned off by default.  See the configure options for upnp behavior desired:\n+turned off by default.  See the configure options for UPnP behavior desired:\n \n-\t--without-miniupnpc      No UPnP support miniupnp not required\n+\t--without-miniupnpc      No UPnP support, miniupnp not required\n \t--disable-upnp-default   (the default) UPnP support turned off by default at runtime\n \t--enable-upnp-default    UPnP support turned on by default at runtime\n \n+libnatpmp\n+---------\n+\n+[libnatpmp](https://miniupnp.tuxfamily.org/libnatpmp.html) may be used for NAT-PMP port mapping. It can be downloaded\n+from [here](https://miniupnp.tuxfamily.org/files/). NAT-PMP support is compiled in and\n+turned off by default. See the configure options for NAT-PMP behavior desired:\n+\n+\t--without-natpmp          No NAT-PMP support, libnatpmp not required\n+\t--disable-natpmp-default  (the default) NAT-PMP support turned off by default at runtime\n+\t--enable-natpmp-default   NAT-PMP support turned on by default at runtime\n \n Berkeley DB\n -----------\n@@ -238,7 +257,7 @@ disable-wallet mode with:\n \n     ./configure --disable-wallet\n \n-In this case there is no dependency on Berkeley DB 4.8.\n+In this case there is no dependency on Berkeley DB 4.8 and SQLite.\n \n Mining is also possible in disable-wallet mode using the `getblocktemplate` RPC call.\n "
      },
      {
        "sha": "28b6aceb3cc6208857e73aedd54efa472a094867",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -9,7 +9,7 @@ The options known to work for building Bitcoin Core on Windows are:\n and is the platform used to build the Bitcoin Core Windows release binaries.\n * On Windows, using [Windows\n Subsystem for Linux (WSL)](https://docs.microsoft.com/windows/wsl/about) and the Mingw-w64 cross compiler tool chain.\n-* On Windows, using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n+* On Windows, using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com). See [README.md](/build_msvc/README.md).\n \n Other options which may work, but which have not been extensively tested are (please contribute instructions):\n \n@@ -91,15 +91,22 @@ Note that for WSL the Bitcoin Core source path MUST be somewhere in the default\n example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n This means you cannot use a directory that is located directly on the host Windows file system to perform the build.\n \n+Additional WSL Note: WSL support for [launching Win32 applications](https://docs.microsoft.com/en-us/archive/blogs/wsl/windows-and-ubuntu-interoperability#launching-win32-applications-from-within-wsl)\n+results in `Autoconf` configure scripts being able to execute Windows Portable Executable files. This can cause\n+unexpected behaviour during the build, such as Win32 error dialogs for missing libraries. The recommended approach\n+is to temporarily disable WSL support for Win32 applications.\n+\n Build using:\n \n     PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n+    sudo bash -c \"echo 0 > /proc/sys/fs/binfmt_misc/status\" # Disable WSL support for Win32 applications.\n     cd depends\n     make HOST=x86_64-w64-mingw32\n     cd ..\n     ./autogen.sh # not required when building from tarball\n     CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/\n     make\n+    sudo bash -c \"echo 1 > /proc/sys/fs/binfmt_misc/status\" # Enable WSL support for Win32 applications.\n \n ## Depends system\n "
      },
      {
        "sha": "6b2b904632e47ebc2133a2dc548feaa4d40eca0d",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -6,21 +6,23 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Dependency | Version used | Minimum required | CVEs | Shared | [Bundled Qt library](https://doc.qt.io/qt-5/configure-options.html#third-party-libraries) |\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n-| Boost | [1.70.0](https://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n-| Clang |  | [3.3+](https://releases.llvm.org/download.html) (C++11 support) |  |  |  |\n+| Boost | [1.71.0](https://www.boost.org/users/download/) | [1.58.0](https://github.com/bitcoin/bitcoin/pull/19667) | No |  |  |\n+| Clang |  | [5.0+](https://releases.llvm.org/download.html) (C++17 support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n | FreeType | [2.7.1](https://download.savannah.gnu.org/releases/freetype) |  | No |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Android only) |\n-| GCC |  | [4.8+](https://gcc.gnu.org/) (C++11 support) |  |  |  |\n+| GCC |  | [7+](https://gcc.gnu.org/) (C++17 support) |  |  |  |\n | HarfBuzz-NG |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | libevent | [2.1.11-stable](https://github.com/libevent/libevent/releases) | [2.0.21](https://github.com/bitcoin/bitcoin/pull/18676) | No |  |  |\n+| libnatpmp | [20150609](https://miniupnp.tuxfamily.org/files) |  | No |  |  |\n | libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | librsvg | |  |  |  |  |\n | MiniUPnPc | [2.0.20180203](https://miniupnp.tuxfamily.org/files) |  | No |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n-| Python (tests) |  | [3.5](https://www.python.org/downloads) |  |  |  |\n+| Python (tests) |  | [3.6](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n | Qt | [5.9.8](https://download.qt.io/official_releases/qt/) | [5.5.1](https://github.com/bitcoin/bitcoin/issues/13478) | No |  |  |\n+| SQLite | [3.32.1](https://sqlite.org/download.html) | [3.7.17](https://github.com/bitcoin/bitcoin/pull/19077) |  |  |  |\n | XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Linux only) |\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Linux only) |\n | ZeroMQ | [4.3.1](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |\n@@ -31,8 +33,10 @@ Controlling dependencies\n Some dependencies are not needed in all configurations. The following are some factors that affect the dependency list.\n \n #### Options passed to `./configure`\n-* MiniUPnPc is not needed with  `--with-miniupnpc=no`.\n-* Berkeley DB is not needed with `--disable-wallet`.\n+* MiniUPnPc is not needed with `--without-miniupnpc`.\n+* libnatpmp is not needed with `--without-natpmp`.\n+* Berkeley DB is not needed with `--disable-wallet` or `--without-bdb`.\n+* SQLite is not needed with `--disable-wallet` or `--without-sqlite`.\n * Qt is not needed with `--without-gui`.\n * If the qrencode dependency is absent, QR support won't be added. To force an error when that happens, pass `--with-qrencode`.\n * ZeroMQ is needed only with the `--with-zmq` option."
      },
      {
        "sha": "63acb9167fbbc37e09c678a647d8ff1f73334e2e",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -50,7 +50,7 @@ Output descriptors currently support:\n - `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` describes a P2WSH *2-of-3* multisig output with keys in the specified order.\n - `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` describes a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n - `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` describes a P2PK output with the public key of the specified xpub.\n-- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` describes a P2PKH output with child key *1'/2* of the specified xpub.\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/2)` describes a P2PKH output with child key *1/2* of the specified xpub.\n - `pkh([d34db33f/44'/0'/0']xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/1/*)` describes a set of P2PKH outputs, but additionally specifies that the specified xpub is a child of a master with fingerprint `d34db33f`, and derived using path `44'/0'/0'`.\n - `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n - `wsh(sortedmulti(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where one multisig key is the *1/0/`i`* child of the first specified xpub and the other multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default). The order of public keys in the resulting witnessScripts is determined by the lexicographic order of the public keys at that index."
      },
      {
        "sha": "596f65cf102e239104dee22b27d61a835de7e778",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 102,
        "deletions": 14,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -14,7 +14,7 @@ Developer Notes\n         - [Compiling for debugging](#compiling-for-debugging)\n         - [Compiling for gprof profiling](#compiling-for-gprof-profiling)\n         - [`debug.log`](#debuglog)\n-        - [Testnet and Regtest modes](#testnet-and-regtest-modes)\n+        - [Signet, testnet, and regtest modes](#signet-testnet-and-regtest-modes)\n         - [DEBUG_LOCKORDER](#debug_lockorder)\n         - [Valgrind suppressions file](#valgrind-suppressions-file)\n         - [Compiling for test coverage](#compiling-for-test-coverage)\n@@ -135,7 +135,7 @@ Refer to [/test/functional/README.md#style-guidelines](/test/functional/README.m\n Coding Style (Doxygen-compatible comments)\n ------------------------------------------\n \n-Bitcoin Core uses [Doxygen](http://www.doxygen.nl/) to generate its official documentation.\n+Bitcoin Core uses [Doxygen](https://www.doxygen.nl/) to generate its official documentation.\n \n Use Doxygen-compatible comment blocks for functions, methods, and fields.\n \n@@ -156,7 +156,7 @@ For example, to describe a function use:\n bool function(int arg1, const char *arg2, std::string& arg3)\n ```\n \n-A complete list of `@xxx` commands can be found at http://www.doxygen.nl/manual/commands.html.\n+A complete list of `@xxx` commands can be found at https://www.doxygen.nl/manual/commands.html.\n As Doxygen recognizes the comments by the delimiters (`/**` and `*/` in this case), you don't\n *need* to provide any commands for a comment to be valid; just a description text is fine.\n \n@@ -203,7 +203,7 @@ Also not picked up by Doxygen:\n  */\n ```\n \n-A full list of comment syntaxes picked up by Doxygen can be found at http://www.doxygen.nl/manual/docblocks.html,\n+A full list of comment syntaxes picked up by Doxygen can be found at https://www.doxygen.nl/manual/docblocks.html,\n but the above styles are favored.\n \n Recommendations:\n@@ -216,7 +216,7 @@ Recommendations:\n \n - Backticks aren't required when referring to functions Doxygen already knows\n   about; it will build hyperlinks for these automatically. See\n-  http://www.doxygen.nl/manual/autolink.html for complete info.\n+  https://www.doxygen.nl/manual/autolink.html for complete info.\n \n - Avoid linking to external documentation; links can break.\n \n@@ -259,14 +259,15 @@ on all categories (and give you a very large `debug.log` file).\n The Qt code routes `qDebug()` output to `debug.log` under category \"qt\": run with `-debug=qt`\n to see it.\n \n-### Testnet and Regtest modes\n+### Signet, testnet, and regtest modes\n \n-Run with the `-testnet` option to run with \"play bitcoins\" on the test network, if you\n-are testing multi-machine code that needs to operate across the internet.\n+If you are testing multi-machine code that needs to operate across the internet,\n+you can run with either the `-signet` or the `-testnet` config option to test\n+with \"play bitcoins\" on a test network.\n \n-If you are testing something that can run on one machine, run with the `-regtest` option.\n-In regression test mode, blocks can be created on-demand; see [test/functional/](/test/functional) for tests\n-that run in `-regtest` mode.\n+If you are testing something that can run on one machine, run with the\n+`-regtest` option.  In regression test mode, blocks can be created on demand;\n+see [test/functional/](/test/functional) for tests that run in `-regtest` mode.\n \n ### DEBUG_LOCKORDER\n \n@@ -276,6 +277,33 @@ configure option adds `-DDEBUG_LOCKORDER` to the compiler flags. This inserts\n run-time checks to keep track of which locks are held and adds warnings to the\n `debug.log` file if inconsistencies are detected.\n \n+### Assertions and Checks\n+\n+The util file `src/util/check.h` offers helpers to protect against coding and\n+internal logic bugs. They must never be used to validate user, network or any\n+other input.\n+\n+* `assert` or `Assert` should be used to document assumptions when any\n+  violation would mean that it is not safe to continue program execution. The\n+  code is always compiled with assertions enabled.\n+   - For example, a nullptr dereference or any other logic bug in validation\n+     code means the program code is faulty and must terminate immediately.\n+* `CHECK_NONFATAL` should be used for recoverable internal logic bugs. On\n+  failure, it will throw an exception, which can be caught to recover from the\n+  error.\n+   - For example, a nullptr dereference or any other logic bug in RPC code\n+     means that the RPC code is faulty and can not be executed. However, the\n+     logic bug can be shown to the user and the program can continue to run.\n+* `Assume` should be used to document assumptions when program execution can\n+  safely continue even if the assumption is violated. In debug builds it\n+  behaves like `Assert`/`assert` to notify developers and testers about\n+  nonfatal errors. In production it doesn't warn or log anything, though the\n+  expression is always evaluated.\n+   - For example it can be assumed that a variable is only initialized once,\n+     but a failed assumption does not result in a fatal bug. A failed\n+     assumption may or may not result in a slightly degraded user experience,\n+     but it is safe to continue program execution.\n+\n ### Valgrind suppressions file\n \n Valgrind is a programming tool for memory debugging, memory leak detection, and\n@@ -516,7 +544,7 @@ General Bitcoin Core\n   - *Rationale*: RPC allows for better automatic testing. The test suite for\n     the GUI is very limited.\n \n-- Make sure pull requests pass Travis CI before merging.\n+- Make sure pull requests pass CI before merging.\n \n   - *Rationale*: Makes sure that they pass thorough testing, and that the tester will keep passing\n      on the master branch. Otherwise, all new pull requests will start failing the tests, resulting in\n@@ -620,6 +648,19 @@ class A\n   - *Rationale*: Easier to understand what is happening, thus easier to spot mistakes, even for those\n   that are not language lawyers.\n \n+- Use `Span` as function argument when it can operate on any range-like container.\n+\n+  - *Rationale*: Compared to `Foo(const vector<int>&)` this avoids the need for a (potentially expensive)\n+    conversion to vector if the caller happens to have the input stored in another type of container.\n+    However, be aware of the pitfalls documented in [span.h](../src/span.h).\n+\n+```cpp\n+void Foo(Span<const int> data);\n+\n+std::vector<int> vec{1,2,3};\n+Foo(vec);\n+```\n+\n - Prefer `enum class` (scoped enumerations) over `enum` (traditional enumerations) where possible.\n \n   - *Rationale*: Scoped enumerations avoid two potential pitfalls/problems with traditional C++ enumerations: implicit conversions to `int`, and name clashes due to enumerators being exported to the surrounding scope.\n@@ -733,6 +774,53 @@ the upper cycle, etc.\n Threads and synchronization\n ----------------------------\n \n+- Prefer `Mutex` type to `RecursiveMutex` one\n+\n+- Consistently use [Clang Thread Safety Analysis](https://clang.llvm.org/docs/ThreadSafetyAnalysis.html) annotations to\n+  get compile-time warnings about potential race conditions in code. Combine annotations in function declarations with\n+  run-time asserts in function definitions:\n+\n+```C++\n+// txmempool.h\n+class CTxMemPool\n+{\n+public:\n+    ...\n+    mutable RecursiveMutex cs;\n+    ...\n+    void UpdateTransactionsFromBlock(...) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, cs);\n+    ...\n+}\n+\n+// txmempool.cpp\n+void CTxMemPool::UpdateTransactionsFromBlock(...)\n+{\n+    AssertLockHeld(::cs_main);\n+    AssertLockHeld(cs);\n+    ...\n+}\n+```\n+\n+```C++\n+// validation.h\n+class ChainstateManager\n+{\n+public:\n+    ...\n+    bool ProcessNewBlock(...) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\n+    ...\n+}\n+\n+// validation.cpp\n+bool ChainstateManager::ProcessNewBlock(...)\n+{\n+    AssertLockNotHeld(::cs_main);\n+    ...\n+    LOCK(::cs_main);\n+    ...\n+}\n+```\n+\n - Build and run tests with `-DDEBUG_LOCKORDER` to verify that no potential\n   deadlocks are introduced. As of 0.12, this is defined by default when\n   configuring with `--enable-debug`.\n@@ -874,7 +962,7 @@ Others are external projects without a tight relationship with our project. Chan\n be sent upstream, but bugfixes may also be prudent to PR against Bitcoin Core so that they can be integrated\n quickly. Cosmetic changes should be purely taken upstream.\n \n-There is a tool in `test/lint/git-subtree-check.sh` to check a subtree directory for consistency with\n+There is a tool in `test/lint/git-subtree-check.sh` ([instructions](../test/lint#git-subtree-checksh)) to check a subtree directory for consistency with\n its upstream repository.\n \n Current subtrees include:\n@@ -949,7 +1037,7 @@ Scripted diffs\n --------------\n \n For reformatting and refactoring commits where the changes can be easily automated using a bash script, we use\n-scripted-diff commits. The bash script is included in the commit message and our Travis CI job checks that\n+scripted-diff commits. The bash script is included in the commit message and our CI job checks that\n the result of the script is identical to the commit. This aids reviewers since they can verify that the script\n does exactly what it is supposed to do. It is also helpful for rebasing (since the same script can just be re-run\n on the new master commit)."
      },
      {
        "sha": "545e8fc92c825af88d32528ee5307ae2eddc538c",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 41,
        "deletions": 22,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -8,6 +8,10 @@\n \n - [Multi-wallet environment](#multi-wallet-environment)\n \n+  - [Berkeley DB database based wallets](#berkeley-db-database-based-wallets)\n+\n+  - [SQLite database based wallets](#sqlite-database-based-wallets)\n+\n - [GUI settings](#gui-settings)\n \n - [Legacy subdirectories and files](#legacy-subdirectories-and-files)\n@@ -26,15 +30,16 @@ Linux    | `$HOME/.bitcoin/`\n macOS    | `$HOME/Library/Application Support/Bitcoin/`\n Windows  | `%APPDATA%\\Bitcoin\\` <sup>[\\[1\\]](#note1)</sup>\n \n-2. The non-default data directory path can be specified by `-datadir` option.\n+2. A custom data directory path can be specified with the `-datadir` option.\n \n 3. All content of the data directory, except for `bitcoin.conf` file, is chain-specific. This means the actual data directory paths for non-mainnet cases differ:\n \n-Chain option        | Data directory path\n---------------------|--------------------\n-no option (mainnet) | *path_to_datadir*`/`\n-`-testnet`          | *path_to_datadir*`/testnet3/`\n-`-regtest`          | *path_to_datadir*`/regtest/`\n+Chain option                   | Data directory path\n+-------------------------------|------------------------------\n+`-chain=main` (default)        | *path_to_datadir*`/`\n+`-chain=test` or `-testnet`    | *path_to_datadir*`/testnet3/`\n+`-chain=signet` or `-signet`   | *path_to_datadir*`/signet/`\n+`-chain=regtest` or `-regtest` | *path_to_datadir*`/regtest/`\n \n ## Data directory layout\n \n@@ -44,44 +49,58 @@ Subdirectory       | File(s)               | Description\n `blocks/index/`    | LevelDB database      | Block index; `-blocksdir` option does not affect this path\n `blocks/`          | `blkNNNNN.dat`<sup>[\\[2\\]](#note2)</sup> | Actual Bitcoin blocks (in network format, dumped in raw on disk, 128 MiB per file)\n `blocks/`          | `revNNNNN.dat`<sup>[\\[2\\]](#note2)</sup> | Block undo data (custom format)\n-`chainstate/`      | LevelDB database      | Blockchain state (a compact representation of all currently unspent transaction outputs and some metadata about the transactions they are from)\n+`chainstate/`      | LevelDB database      | Blockchain state (a compact representation of all currently unspent transaction outputs (UTXOs) and metadata about the transactions they are from)\n `indexes/txindex/` | LevelDB database      | Transaction index; *optional*, used if `-txindex=1`\n `indexes/blockfilter/basic/db/` | LevelDB database      | Blockfilter index LevelDB database for the basic filtertype; *optional*, used if `-blockfilterindex=basic`\n `indexes/blockfilter/basic/`    | `fltrNNNNN.dat`<sup>[\\[2\\]](#note2)</sup> | Blockfilter index filters for the basic filtertype; *optional*, used if `-blockfilterindex=basic`\n-`wallets/`         |                       | [Contains wallets](#multi-wallet-environment); can be specified by `-walletdir` option; if `wallets/` subdirectory does not exist, a wallet resides in the data directory\n+`wallets/`         |                       | [Contains wallets](#multi-wallet-environment); can be specified by `-walletdir` option; if `wallets/` subdirectory does not exist, wallets reside in the [data directory](#data-directory-location)\n+`./`               | `anchors.dat`         | Anchor IP address database, created on shutdown and deleted at startup. Anchors are last known outgoing block-relay-only peers that are tried to re-connect to on startup\n `./`               | `banlist.dat`         | Stores the IPs/subnets of banned nodes\n-`./`               | `bitcoin.conf`        | Contains [configuration settings](bitcoin-conf.md) for `bitcoind` or `bitcoin-qt`; can be specified by `-conf` option\n+`./`               | `bitcoin.conf`        | User-defined [configuration settings](bitcoin-conf.md) for `bitcoind` or `bitcoin-qt`. File is not written to by the software and must be created manually. Path can be specified by `-conf` option\n `./`               | `bitcoind.pid`        | Stores the process ID (PID) of `bitcoind` or `bitcoin-qt` while running; created at start and deleted on shutdown; can be specified by `-pid` option\n `./`               | `debug.log`           | Contains debug information and general logging generated by `bitcoind` or `bitcoin-qt`; can be specified by `-debuglogfile` option\n `./`               | `fee_estimates.dat`   | Stores statistics used to estimate minimum transaction fees and priorities required for confirmation\n `./`               | `guisettings.ini.bak` | Backup of former [GUI settings](#gui-settings) after `-resetguisettings` option is used\n+`./`               | `ip_asn.map`          | IP addresses to Autonomous System Numbers (ASNs) mapping used for bucketing of the peers; path can be specified with the `-asmap` option\n `./`               | `mempool.dat`         | Dump of the mempool's transactions\n-`./`               | `onion_private_key`   | Cached Tor hidden service private key for `-listenonion` option\n+`./`               | `onion_v3_private_key` | Cached Tor onion service private key for `-listenonion` option\n `./`               | `peers.dat`           | Peer IP address database (custom format)\n+`./`               | `settings.json`       | Read-write settings set through GUI or RPC interfaces, augmenting manual settings from [bitcoin.conf](bitcoin-conf.md). File is created automatically if read-write settings storage is not disabled with `-nosettings` option. Path can be specified with `-settings` option\n `./`               | `.cookie`             | Session RPC authentication cookie; if used, created at start and deleted on shutdown; can be specified by `-rpccookiefile` option\n `./`               | `.lock`               | Data directory lock file\n \n ## Multi-wallet environment\n \n-Wallets are Berkeley DB (BDB) databases:\n-\n-Subdirectory | File(s)           | Description\n--------------|-------------------|------------\n-`database/`  | BDB logging files | Part of BDB environment; created at start and deleted on shutdown; a user *must keep it as safe* as personal wallet `wallet.dat`\n-`./`         | `db.log`          | BDB error file\n-`./`         | `wallet.dat`      | Personal wallet (BDB) with keys and transactions\n-`./`         | `.walletlock`     | Wallet lock file\n+Wallets are Berkeley DB (BDB) or SQLite databases.\n \n-1. Each user-defined wallet named \"wallet_name\" resides in `wallets/wallet_name/` subdirectory.\n+1. Each user-defined wallet named \"wallet_name\" resides in the `wallets/wallet_name/` subdirectory.\n \n 2. The default (unnamed) wallet resides in `wallets/` subdirectory; if the latter does not exist, the wallet resides in the data directory.\n \n-3. A wallet database path can be specified by `-wallet` option.\n+3. A wallet database path can be specified with the `-wallet` option.\n \n 4. `wallet.dat` files must not be shared across different node instances, as that can result in key-reuse and double-spends due the lack of synchronization between instances.\n \n 5. Any copy or backup of the wallet should be done through a `backupwallet` call in order to update and lock the wallet, preventing any file corruption caused by updates during the copy.\n \n+\n+### Berkeley DB database based wallets\n+\n+Subdirectory | File(s)           | Description\n+-------------|-------------------|-------------\n+`database/`  | BDB logging files | Part of BDB environment; created at start and deleted on shutdown; a user *must keep it as safe* as personal wallet `wallet.dat`\n+`./`         | `db.log`          | BDB error file\n+`./`         | `wallet.dat`      | Personal wallet (a BDB database) with keys and transactions\n+`./`         | `.walletlock`     | BDB wallet lock file\n+\n+### SQLite database based wallets\n+\n+Subdirectory | File                 | Description\n+-------------|----------------------|-------------\n+`./`         | `wallet.dat`         | Personal wallet (a SQLite database) with keys and transactions\n+`./`         | `wallet.dat-journal` | SQLite Rollback Journal file for `wallet.dat`. Usually created at start and deleted on shutdown. A user *must keep it as safe* as the `wallet.dat` file.\n+\n+\n ## GUI settings\n \n `bitcoin-qt` uses [`QSettings`](https://doc.qt.io/qt-5/qsettings.html) class; this implies platform-specific [locations where application settings are stored](https://doc.qt.io/qt-5/qsettings.html#locations-where-application-settings-are-stored).\n@@ -97,10 +116,10 @@ Path           | Description | Repository notes\n `blkindex.dat` | Blockchain index BDB database; replaced by {`chainstate/`, `blocks/index/`, `blocks/revNNNNN.dat`<sup>[\\[2\\]](#note2)</sup>} in 0.8.0 | [PR #1677](https://github.com/bitcoin/bitcoin/pull/1677)\n `blk000?.dat`  | Block data (custom format, 2 GiB per file); replaced by `blocks/blkNNNNN.dat`<sup>[\\[2\\]](#note2)</sup> in 0.8.0 | [PR #1677](https://github.com/bitcoin/bitcoin/pull/1677)\n `addr.dat`     | Peer IP address BDB database; replaced by `peers.dat` in [0.7.0](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.7.0.md) | [PR #1198](https://github.com/bitcoin/bitcoin/pull/1198), [`928d3a01`](https://github.com/bitcoin/bitcoin/commit/928d3a011cc66c7f907c4d053f674ea77dc611cc)\n+`onion_private_key` | Cached Tor onion service private key for `-listenonion` option. Was used for Tor v2 services; replaced by `onion_v3_private_key` in [0.21.0](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.21.0.md) | [PR #19954](https://github.com/bitcoin/bitcoin/pull/19954)\n \n ## Notes\n \n-<a name=\"note1\">1</a>. The `/` (slash, U+002F) is used as the platform-independent path component separator in this paper.\n+<a name=\"note1\">1</a>. The `/` (slash, U+002F) is used as the platform-independent path component separator in this document.\n \n <a name=\"note2\">2</a>. `NNNNN` matches `[0-9]{5}` regex.\n-"
      },
      {
        "sha": "80ce8210914d20509df364748d96033bd61a4a39",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -12,7 +12,7 @@ $ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzze\n # macOS users: If you have problem with this step then make sure to read \"macOS hints for\n # libFuzzer\" on https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md#macos-hints-for-libfuzzer\n $ make\n-$ src/test/fuzz/process_message\n+$ FUZZ=process_message src/test/fuzz/fuzz\n # abort fuzzing using ctrl-c\n ```\n \n@@ -26,7 +26,7 @@ If you specify a corpus directory then any new coverage increasing inputs will b\n \n ```sh\n $ mkdir -p process_message-seeded-from-thin-air/\n-$ src/test/fuzz/process_message process_message-seeded-from-thin-air/\n+$ FUZZ=process_message src/test/fuzz/fuzz process_message-seeded-from-thin-air/\n INFO: Seed: 840522292\n INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e121ef9ab8, 0x55e121f613a6),\n INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e121f613a8,0x55e1225da288),\n@@ -70,7 +70,7 @@ To fuzz `process_message` using the [`bitcoin-core/qa-assets`](https://github.co\n \n ```sh\n $ git clone https://github.com/bitcoin-core/qa-assets\n-$ src/test/fuzz/process_message qa-assets/fuzz_seed_corpus/process_message/\n+$ FUZZ=process_message src/test/fuzz/fuzz qa-assets/fuzz_seed_corpus/process_message/\n INFO: Seed: 1346407872\n INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55d8a9004ab8, 0x55d8a906c3a6),\n INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55d8a906c3a8,0x55d8a96e5288),\n@@ -121,13 +121,15 @@ $ git clone https://github.com/google/afl\n $ make -C afl/\n $ make -C afl/llvm_mode/\n $ ./autogen.sh\n+# It is possible to compile with afl-gcc and afl-g++ instead of afl-clang. However, running afl-fuzz\n+# may require more memory via the -m flag.\n $ CC=$(pwd)/afl/afl-clang-fast CXX=$(pwd)/afl/afl-clang-fast++ ./configure --enable-fuzz\n $ make\n # For macOS you may need to ignore x86 compilation checks when running \"make\". If so,\n # try compiling using: AFL_NO_X86=1 make\n $ mkdir -p inputs/ outputs/\n $ echo A > inputs/thin-air-input\n-$ afl/afl-fuzz -i inputs/ -o outputs/ -- src/test/fuzz/bech32\n+$ FUZZ=bech32 afl/afl-fuzz -i inputs/ -o outputs/ -- src/test/fuzz/fuzz\n # You may have to change a few kernel parameters to test optimally - afl-fuzz\n # will print an error and suggestion if so.\n ```\n@@ -151,7 +153,7 @@ $ cd ..\n $ CC=$(pwd)/honggfuzz/hfuzz_cc/hfuzz-clang CXX=$(pwd)/honggfuzz/hfuzz_cc/hfuzz-clang++ ./configure --enable-fuzz --with-sanitizers=address,undefined\n $ make\n $ mkdir -p inputs/\n-$ honggfuzz/honggfuzz -i inputs/ -- src/test/fuzz/process_message\n+$ FUZZ=process_message honggfuzz/honggfuzz -i inputs/ -- src/test/fuzz/fuzz\n ```\n \n Read the [Honggfuzz documentation](https://github.com/google/honggfuzz/blob/master/docs/USAGE.md) for more information."
      },
      {
        "sha": "fa9c74f4860f5374c8c707de48c17afa1a56a9b7",
        "filename": "doc/guix.md",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/guix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/guix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/guix.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,3 @@\n+# Bootstrappable Bitcoin Core Builds\n+\n+See [contrib/guix/README.md](../contrib/guix/README.md)"
      },
      {
        "sha": "8f890da5327b129a61aeab29fe402a2f7454aaf7",
        "filename": "doc/man/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/Makefile.am?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -16,6 +16,10 @@ if BUILD_BITCOIN_TX\n   dist_man1_MANS+=bitcoin-tx.1\n endif\n \n+if BUILD_BITCOIN_UTIL\n+  dist_man1_MANS+=bitcoin-util.1\n+endif\n+\n if ENABLE_WALLET\n if BUILD_BITCOIN_WALLET\n   dist_man1_MANS+=bitcoin-wallet.1"
      },
      {
        "sha": "6bcad7006b08c537e4b9e0654af16a71a48c3949",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 3,
        "deletions": 113,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,115 +1,5 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"February 2019\" \"bitcoin-cli v0.17.99.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.17.99.0\n-.SH SYNOPSIS\n-.B bitcoin-cli\n-[\\fI\\,options\\/\\fR] \\fI\\,<command> \\/\\fR[\\fI\\,params\\/\\fR]  \\fI\\,Send command to Bitcoin Core\\/\\fR\n-.br\n-.B bitcoin-cli\n-[\\fI\\,options\\/\\fR] \\fI\\,-named <command> \\/\\fR[\\fI\\,name=value\\/\\fR]...  \\fI\\,Send command to Bitcoin Core (with named arguments)\\/\\fR\n-.br\n-.B bitcoin-cli\n-[\\fI\\,options\\/\\fR] \\fI\\,help                List commands\\/\\fR\n-.br\n-.B bitcoin-cli\n-[\\fI\\,options\\/\\fR] \\fI\\,help <command>      Get help for a command\\/\\fR\n-.SH DESCRIPTION\n-Bitcoin Core RPC client version v0.17.99.0\n-.SH OPTIONS\n-.HP\n-\\-?\n-.IP\n-Print this help message and exit\n-.HP\n-\\fB\\-conf=\\fR<file>\n-.IP\n-Specify configuration file. Relative paths will be prefixed by datadir\n-location. (default: bitcoin.conf)\n-.HP\n-\\fB\\-datadir=\\fR<dir>\n-.IP\n-Specify data directory\n-.HP\n-\\fB\\-getinfo\\fR\n-.IP\n-Get general information from the remote server. Note that unlike\n-server\\-side RPC calls, the results of \\fB\\-getinfo\\fR is the result of\n-multiple non\\-atomic requests. Some entries in the result may\n-represent results from different states (e.g. wallet balance may\n-be as of a different block from the chain state reported)\n-.HP\n-\\fB\\-named\\fR\n-.IP\n-Pass named instead of positional arguments (default: false)\n-.HP\n-\\fB\\-rpcclienttimeout=\\fR<n>\n-.IP\n-Timeout in seconds during HTTP requests, or 0 for no timeout. (default:\n-900)\n-.HP\n-\\fB\\-rpcconnect=\\fR<ip>\n-.IP\n-Send commands to node running on <ip> (default: 127.0.0.1)\n-.HP\n-\\fB\\-rpccookiefile=\\fR<loc>\n-.IP\n-Location of the auth cookie. Relative paths will be prefixed by a\n-net\\-specific datadir location. (default: data dir)\n-.HP\n-\\fB\\-rpcpassword=\\fR<pw>\n-.IP\n-Password for JSON\\-RPC connections\n-.HP\n-\\fB\\-rpcport=\\fR<port>\n-.IP\n-Connect to JSON\\-RPC on <port> (default: 8332, testnet: 18332, regtest:\n-18443)\n-.HP\n-\\fB\\-rpcuser=\\fR<user>\n-.IP\n-Username for JSON\\-RPC connections\n-.HP\n-\\fB\\-rpcwait\\fR\n-.IP\n-Wait for RPC server to start\n-.HP\n-\\fB\\-rpcwallet=\\fR<walletname>\n-.IP\n-Send RPC for non\\-default wallet on RPC server (needs to exactly match\n-corresponding \\fB\\-wallet\\fR option passed to bitcoind). This changes\n-the RPC endpoint used, e.g.\n-http://127.0.0.1:8332/wallet/<walletname>\n-.HP\n-\\fB\\-stdin\\fR\n-.IP\n-Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n-(recommended for sensitive information such as passphrases). When\n-combined with \\fB\\-stdinrpcpass\\fR, the first line from standard input\n-is used for the RPC password.\n-.HP\n-\\fB\\-stdinrpcpass\\fR\n-.IP\n-Read RPC password from standard input as a single line. When combined\n-with \\fB\\-stdin\\fR, the first line from standard input is used for the\n-RPC password.\n-.HP\n-\\fB\\-version\\fR\n-.IP\n-Print version and exit\n-.PP\n-Chain selection options:\n-.HP\n-\\fB\\-testnet\\fR\n-.IP\n-Use the test chain\n-.SH COPYRIGHT\n-Copyright (C) 2009-2019 The Bitcoin Core developers\n+bitcoin-cli \\- manual page for bitcoin-cli\n \n-Please contribute if you find Bitcoin Core useful. Visit\n-<https://bitcoincore.org> for further information about the software.\n-The source code is available from <https://github.com/bitcoin/bitcoin>.\n-\n-This is experimental software.\n-Distributed under the MIT software license, see the accompanying file COPYING\n-or <https://opensource.org/licenses/MIT>\n+This is a placeholder file. Please follow the instructions in \\fIcontrib/devtools/README.md\\fR to generate the manual pages after a release."
      },
      {
        "sha": "ff4d1d2c7ac2e5f893932d286f9f0ab4ae5e18a5",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 3,
        "deletions": 608,
        "changes": 611,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,610 +1,5 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"February 2019\" \"bitcoin-qt v0.17.99.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.17.99.0\n-.SH SYNOPSIS\n-.B bitcoin-qt\n-[\\fI\\,command-line options\\/\\fR]\n-.SH DESCRIPTION\n-Bitcoin Core version v0.17.99.0 (64\\-bit)\n-.SH OPTIONS\n-.HP\n-\\-?\n-.IP\n-Print this help message and exit\n-.HP\n-\\fB\\-alertnotify=\\fR<cmd>\n-.IP\n-Execute command when a relevant alert is received or we see a really\n-long fork (%s in cmd is replaced by message)\n-.HP\n-\\fB\\-assumevalid=\\fR<hex>\n-.IP\n-If this block is in the chain assume that it and its ancestors are valid\n-and potentially skip their script verification (0 to verify all,\n-default:\n-0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n-testnet:\n-0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n-.HP\n-\\fB\\-blocknotify=\\fR<cmd>\n-.IP\n-Execute command when the best block changes (%s in cmd is replaced by\n-block hash)\n-.HP\n-\\fB\\-blockreconstructionextratxn=\\fR<n>\n-.IP\n-Extra transactions to keep in memory for compact block reconstructions\n-(default: 100)\n-.HP\n-\\fB\\-blocksdir=\\fR<dir>\n-.IP\n-Specify blocks directory (default: <datadir>/blocks)\n-.HP\n-\\fB\\-conf=\\fR<file>\n-.IP\n-Specify configuration file. Relative paths will be prefixed by datadir\n-location. (default: bitcoin.conf)\n-.HP\n-\\fB\\-daemon\\fR\n-.IP\n-Run in the background as a daemon and accept commands\n-.HP\n-\\fB\\-datadir=\\fR<dir>\n-.IP\n-Specify data directory\n-.HP\n-\\fB\\-dbcache=\\fR<n>\n-.IP\n-Set database cache size in MiB (4 to 16384, default: 450)\n-.HP\n-\\fB\\-debuglogfile=\\fR<file>\n-.IP\n-Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n-default: debug.log)\n-.HP\n-\\fB\\-includeconf=\\fR<file>\n-.IP\n-Specify additional configuration file, relative to the \\fB\\-datadir\\fR path\n-(only useable from configuration file, not command line)\n-.HP\n-\\fB\\-loadblock=\\fR<file>\n-.IP\n-Imports blocks from external blk000??.dat file on startup\n-.HP\n-\\fB\\-maxmempool=\\fR<n>\n-.IP\n-Keep the transaction memory pool below <n> megabytes (default: 300)\n-.HP\n-\\fB\\-maxorphantx=\\fR<n>\n-.IP\n-Keep at most <n> unconnectable transactions in memory (default: 100)\n-.HP\n-\\fB\\-mempoolexpiry=\\fR<n>\n-.IP\n-Do not keep transactions in the mempool longer than <n> hours (default:\n-336)\n-.HP\n-\\fB\\-par=\\fR<n>\n-.IP\n-Set the number of script verification threads (\\fB\\-8\\fR to 16, 0 = auto, <0 =\n-leave that many cores free, default: 0)\n-.HP\n-\\fB\\-persistmempool\\fR\n-.IP\n-Whether to save the mempool on shutdown and load on restart (default: 1)\n-.HP\n-\\fB\\-pid=\\fR<file>\n-.IP\n-Specify pid file. Relative paths will be prefixed by a net\\-specific\n-datadir location. (default: bitcoind.pid)\n-.HP\n-\\fB\\-prune=\\fR<n>\n-.IP\n-Reduce storage requirements by enabling pruning (deleting) of old\n-blocks. This allows the pruneblockchain RPC to be called to\n-delete specific blocks, and enables automatic pruning of old\n-blocks if a target size in MiB is provided. This mode is\n-incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n-setting requires re\\-downloading the entire blockchain. (default:\n-0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->=550 = automatically prune block files to stay under the\n-specified target size in MiB)\n-.HP\n-\\fB\\-reindex\\fR\n-.IP\n-Rebuild chain state and block index from the blk*.dat files on disk\n-.HP\n-\\fB\\-reindex\\-chainstate\\fR\n-.IP\n-Rebuild chain state from the currently indexed blocks. When in pruning\n-mode or if blocks on disk might be corrupted, use full \\fB\\-reindex\\fR\n-instead.\n-.HP\n-\\fB\\-sysperms\\fR\n-.IP\n-Create new files with system default permissions, instead of umask 077\n-(only effective with disabled wallet functionality)\n-.HP\n-\\fB\\-txindex\\fR\n-.IP\n-Maintain a full transaction index, used by the getrawtransaction rpc\n-call (default: 0)\n-.HP\n-\\fB\\-version\\fR\n-.IP\n-Print version and exit\n-.PP\n-Connection options:\n-.HP\n-\\fB\\-addnode=\\fR<ip>\n-.IP\n-Add a node to connect to and attempt to keep the connection open (see\n-the `addnode` RPC command help for more info). This option can be\n-specified multiple times to add multiple nodes.\n-.HP\n-\\fB\\-banscore=\\fR<n>\n-.IP\n-Threshold for disconnecting misbehaving peers (default: 100)\n-.HP\n-\\fB\\-bantime=\\fR<n>\n-.IP\n-Number of seconds to keep misbehaving peers from reconnecting (default:\n-86400)\n-.HP\n-\\fB\\-bind=\\fR<addr>\n-.IP\n-Bind to given address and always listen on it. Use [host]:port notation\n-for IPv6\n-.HP\n-\\fB\\-connect=\\fR<ip>\n-.IP\n-Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n-connections (the rules for this peer are the same as for\n-\\fB\\-addnode\\fR). This option can be specified multiple times to connect\n-to multiple nodes.\n-.HP\n-\\fB\\-discover\\fR\n-.IP\n-Discover own IP addresses (default: 1 when listening and no \\fB\\-externalip\\fR\n-or \\fB\\-proxy\\fR)\n-.HP\n-\\fB\\-dns\\fR\n-.IP\n-Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (default: 1)\n-.HP\n-\\fB\\-dnsseed\\fR\n-.IP\n-Query for peer addresses via DNS lookup, if low on addresses (default: 1\n-unless \\fB\\-connect\\fR used)\n-.HP\n-\\fB\\-externalip=\\fR<ip>\n-.IP\n-Specify your own public address\n-.HP\n-\\fB\\-forcednsseed\\fR\n-.IP\n-Always query for peer addresses via DNS lookup (default: 0)\n-.HP\n-\\fB\\-listen\\fR\n-.IP\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n-.HP\n-\\fB\\-listenonion\\fR\n-.IP\n-Automatically create Tor hidden service (default: 1)\n-.HP\n-\\fB\\-maxconnections=\\fR<n>\n-.IP\n-Maintain at most <n> connections to peers (default: 125)\n-.HP\n-\\fB\\-maxreceivebuffer=\\fR<n>\n-.IP\n-Maximum per\\-connection receive buffer, <n>*1000 bytes (default: 5000)\n-.HP\n-\\fB\\-maxsendbuffer=\\fR<n>\n-.IP\n-Maximum per\\-connection send buffer, <n>*1000 bytes (default: 1000)\n-.HP\n-\\fB\\-maxtimeadjustment\\fR\n-.IP\n-Maximum allowed median peer time offset adjustment. Local perspective of\n-time may be influenced by peers forward or backward by this\n-amount. (default: 4200 seconds)\n-.HP\n-\\fB\\-maxuploadtarget=\\fR<n>\n-.IP\n-Tries to keep outbound traffic under the given target (in MiB per 24h),\n-0 = no limit (default: 0)\n-.HP\n-\\fB\\-onion=\\fR<ip:port>\n-.IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n-\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n-.HP\n-\\fB\\-onlynet=\\fR<net>\n-.IP\n-Make outgoing connections only through network <net> (ipv4, ipv6 or\n-onion). Incoming connections are not affected by this option.\n-This option can be specified multiple times to allow multiple\n-networks.\n-.HP\n-\\fB\\-peerbloomfilters\\fR\n-.IP\n-Support filtering of blocks and transaction with bloom filters (default:\n-1)\n-.HP\n-\\fB\\-permitbaremultisig\\fR\n-.IP\n-Relay non\\-P2SH multisig (default: 1)\n-.HP\n-\\fB\\-port=\\fR<port>\n-.IP\n-Listen for connections on <port> (default: 8333, testnet: 18333,\n-regtest: 18444)\n-.HP\n-\\fB\\-proxy=\\fR<ip:port>\n-.IP\n-Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n-disabled)\n-.HP\n-\\fB\\-proxyrandomize\\fR\n-.IP\n-Randomize credentials for every proxy connection. This enables Tor\n-stream isolation (default: 1)\n-.HP\n-\\fB\\-seednode=\\fR<ip>\n-.IP\n-Connect to a node to retrieve peer addresses, and disconnect. This\n-option can be specified multiple times to connect to multiple\n-nodes.\n-.HP\n-\\fB\\-timeout=\\fR<n>\n-.IP\n-Specify connection timeout in milliseconds (minimum: 1, default: 5000)\n-.HP\n-\\fB\\-torcontrol=\\fR<ip>:<port>\n-.IP\n-Tor control port to use if onion listening enabled (default:\n-127.0.0.1:9051)\n-.HP\n-\\fB\\-torpassword=\\fR<pass>\n-.IP\n-Tor control port password (default: empty)\n-.HP\n-\\fB\\-upnp\\fR\n-.IP\n-Use UPnP to map the listening port (default: 0)\n-.HP\n-\\fB\\-whitebind=\\fR<addr>\n-.IP\n-Bind to given address and whitelist peers connecting to it. Use\n-[host]:port notation for IPv6\n-.HP\n-\\fB\\-whitelist=\\fR<IP address or network>\n-.IP\n-Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or\n-CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple\n-times. Whitelisted peers cannot be DoS banned and their\n-transactions are always relayed, even if they are already in the\n-mempool, useful e.g. for a gateway\n-.PP\n-Wallet options:\n-.HP\n-\\fB\\-addresstype\\fR\n-.IP\n-What type of addresses to use (\"legacy\", \"p2sh\\-segwit\", or \"bech32\",\n-default: \"p2sh\\-segwit\")\n-.HP\n-\\fB\\-avoidpartialspends\\fR\n-.IP\n-Group outputs by address, selecting all or none, instead of selecting on\n-a per\\-output basis. Privacy is improved as an address is only\n-used once (unless someone sends to it after spending from it),\n-but may result in slightly higher fees as suboptimal coin\n-selection may result due to the added limitation (default: 0)\n-.HP\n-\\fB\\-changetype\\fR\n-.IP\n-What type of change to use (\"legacy\", \"p2sh\\-segwit\", or \"bech32\").\n-Default is same as \\fB\\-addresstype\\fR, except when\n-\\fB\\-addresstype\\fR=\\fI\\,p2sh\\-segwit\\/\\fR a native segwit output is used when\n-sending to a native segwit address)\n-.HP\n-\\fB\\-disablewallet\\fR\n-.IP\n-Do not load the wallet and disable wallet RPC calls\n-.HP\n-\\fB\\-discardfee=\\fR<amt>\n-.IP\n-The fee rate (in BTC/kB) that indicates your tolerance for discarding\n-change by adding it to the fee (default: 0.0001). Note: An output\n-is discarded if it is dust at this rate, but we will always\n-discard up to the dust relay fee and a discard fee above that is\n-limited by the fee estimate for the longest target\n-.HP\n-\\fB\\-fallbackfee=\\fR<amt>\n-.IP\n-A fee rate (in BTC/kB) that will be used when fee estimation has\n-insufficient data (default: 0.0002)\n-.HP\n-\\fB\\-keypool=\\fR<n>\n-.IP\n-Set key pool size to <n> (default: 1000)\n-.HP\n-\\fB\\-mintxfee=\\fR<amt>\n-.IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for\n-transaction creation (default: 0.00001)\n-.HP\n-\\fB\\-paytxfee=\\fR<amt>\n-.IP\n-Fee (in BTC/kB) to add to transactions you send (default: 0.00)\n-.HP\n-\\fB\\-rescan\\fR\n-.IP\n-Rescan the block chain for missing wallet transactions on startup\n-.HP\n-\\fB\\-salvagewallet\\fR\n-.IP\n-Attempt to recover private keys from a corrupt wallet on startup\n-.HP\n-\\fB\\-spendzeroconfchange\\fR\n-.IP\n-Spend unconfirmed change when sending transactions (default: 1)\n-.HP\n-\\fB\\-txconfirmtarget=\\fR<n>\n-.IP\n-If paytxfee is not set, include enough fee so transactions begin\n-confirmation on average within n blocks (default: 6)\n-.HP\n-\\fB\\-upgradewallet\\fR\n-.IP\n-Upgrade wallet to latest format on startup\n-.HP\n-\\fB\\-wallet=\\fR<path>\n-.IP\n-Specify wallet database path. Can be specified multiple times to load\n-multiple wallets. Path is interpreted relative to <walletdir> if\n-it is not absolute, and will be created if it does not exist (as\n-a directory containing a wallet.dat file and log files). For\n-backwards compatibility this will also accept names of existing\n-data files in <walletdir>.)\n-.HP\n-\\fB\\-walletbroadcast\\fR\n-.IP\n-Make the wallet broadcast transactions (default: 1)\n-.HP\n-\\fB\\-walletdir=\\fR<dir>\n-.IP\n-Specify directory to hold wallets (default: <datadir>/wallets if it\n-exists, otherwise <datadir>)\n-.HP\n-\\fB\\-walletnotify=\\fR<cmd>\n-.IP\n-Execute command when a wallet transaction changes (%s in cmd is replaced\n-by TxID)\n-.HP\n-\\fB\\-walletrbf\\fR\n-.IP\n-Send transactions with full\\-RBF opt\\-in enabled (RPC only, default: 0)\n-.HP\n-\\fB\\-zapwallettxes=\\fR<mode>\n-.IP\n-Delete all wallet transactions and only recover those parts of the\n-blockchain through \\fB\\-rescan\\fR on startup (1 = keep tx meta data e.g.\n-payment request information, 2 = drop tx meta data)\n-.PP\n-ZeroMQ notification options:\n-.HP\n-\\fB\\-zmqpubhashblock=\\fR<address>\n-.IP\n-Enable publish hash block in <address>\n-.HP\n-\\fB\\-zmqpubhashtx=\\fR<address>\n-.IP\n-Enable publish hash transaction in <address>\n-.HP\n-\\fB\\-zmqpubrawblock=\\fR<address>\n-.IP\n-Enable publish raw block in <address>\n-.HP\n-\\fB\\-zmqpubrawtx=\\fR<address>\n-.IP\n-Enable publish raw transaction in <address>\n-.PP\n-Debugging/Testing options:\n-.HP\n-\\fB\\-debug=\\fR<category>\n-.IP\n-Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n-optional). If <category> is not supplied or if <category> = 1,\n-output all debugging information. <category> can be: net, tor,\n-mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n-selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej,\n-libevent, coindb, qt, leveldb.\n-.HP\n-\\fB\\-debugexclude=\\fR<category>\n-.IP\n-Exclude debugging information for a category. Can be used in conjunction\n-with \\fB\\-debug\\fR=\\fI\\,1\\/\\fR to output debug logs for all categories except one\n-or more specified categories.\n-.HP\n-\\fB\\-help\\-debug\\fR\n-.IP\n-Print help message with debugging options and exit\n-.HP\n-\\fB\\-logips\\fR\n-.IP\n-Include IP addresses in debug output (default: 0)\n-.HP\n-\\fB\\-logtimestamps\\fR\n-.IP\n-Prepend debug output with timestamp (default: 1)\n-.HP\n-\\fB\\-maxtxfee=\\fR<amt>\n-.IP\n-Maximum total fees (in BTC) to use in a single wallet transaction or raw\n-transaction; setting this too low may abort large transactions\n-(default: 0.10)\n-.HP\n-\\fB\\-printtoconsole\\fR\n-.IP\n-Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set \\fB\\-nodebuglogfile\\fR)\n-.HP\n-\\fB\\-shrinkdebugfile\\fR\n-.IP\n-Shrink debug.log file on client startup (default: 1 when no \\fB\\-debug\\fR)\n-.HP\n-\\fB\\-uacomment=\\fR<cmt>\n-.IP\n-Append comment to the user agent string\n-.PP\n-Chain selection options:\n-.HP\n-\\fB\\-testnet\\fR\n-.IP\n-Use the test chain\n-.PP\n-Node relay options:\n-.HP\n-\\fB\\-bytespersigop\\fR\n-.IP\n-Equivalent bytes per sigop in transactions for relay and mining\n-(default: 20)\n-.HP\n-\\fB\\-datacarrier\\fR\n-.IP\n-Relay and mine data carrier transactions (default: 1)\n-.HP\n-\\fB\\-datacarriersize\\fR\n-.IP\n-Maximum size of data in data carrier transactions we relay and mine\n-(default: 83)\n-.HP\n-.HP\n-\\fB\\-minrelaytxfee=\\fR<amt>\n-.IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n-mining and transaction creation (default: 0.00001)\n-.HP\n-\\fB\\-whitelistforcerelay\\fR\n-.IP\n-Force relay of transactions from whitelisted peers even if they violate\n-local relay policy (default: 0)\n-.HP\n-\\fB\\-whitelistrelay\\fR\n-.IP\n-Accept relayed transactions received from whitelisted peers even when\n-not relaying transactions (default: 1)\n-.PP\n-Block creation options:\n-.HP\n-\\fB\\-blockmaxweight=\\fR<n>\n-.IP\n-Set maximum BIP141 block weight (default: 3996000)\n-.HP\n-\\fB\\-blockmintxfee=\\fR<amt>\n-.IP\n-Set lowest fee rate (in BTC/kB) for transactions to be included in block\n-creation. (default: 0.00001)\n-.PP\n-RPC server options:\n-.HP\n-\\fB\\-rest\\fR\n-.IP\n-Accept public REST requests (default: 0)\n-.HP\n-\\fB\\-rpcallowip=\\fR<ip>\n-.IP\n-Allow JSON\\-RPC connections from specified source. Valid for <ip> are a\n-single IP (e.g. 1.2.3.4), a network/netmask (e.g.\n-1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This\n-option can be specified multiple times\n-.HP\n-\\fB\\-rpcauth=\\fR<userpw>\n-.IP\n-Username and HMAC\\-SHA\\-256 hashed password for JSON\\-RPC connections. The\n-field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n-canonical python script is included in share/rpcauth. The client\n-then connects normally using the\n-rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This\n-option can be specified multiple times\n-.HP\n-\\fB\\-rpcbind=\\fR<addr>[:port]\n-.IP\n-Bind to given address to listen for JSON\\-RPC connections. Do not expose\n-the RPC server to untrusted networks such as the public internet!\n-This option is ignored unless \\fB\\-rpcallowip\\fR is also passed. Port is\n-optional and overrides \\fB\\-rpcport\\fR. Use [host]:port notation for\n-IPv6. This option can be specified multiple times (default:\n-127.0.0.1 and ::1 i.e., localhost)\n-.HP\n-\\fB\\-rpccookiefile=\\fR<loc>\n-.IP\n-Location of the auth cookie. Relative paths will be prefixed by a\n-net\\-specific datadir location. (default: data dir)\n-.HP\n-\\fB\\-rpcpassword=\\fR<pw>\n-.IP\n-Password for JSON\\-RPC connections\n-.HP\n-\\fB\\-rpcport=\\fR<port>\n-.IP\n-Listen for JSON\\-RPC connections on <port> (default: 8332, testnet:\n-18332, regtest: 18443)\n-.HP\n-\\fB\\-rpcserialversion\\fR\n-.IP\n-Sets the serialization of raw transaction or block hex returned in\n-non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n-.HP\n-\\fB\\-rpcthreads=\\fR<n>\n-.IP\n-Set the number of threads to service RPC calls (default: 4)\n-.HP\n-\\fB\\-rpcuser=\\fR<user>\n-.IP\n-Username for JSON\\-RPC connections\n-.HP\n-\\fB\\-server\\fR\n-.IP\n-Accept command line and JSON\\-RPC commands\n-.PP\n-UI Options:\n-.HP\n-\\fB\\-choosedatadir\\fR\n-.IP\n-Choose data directory on startup (default: 0)\n-.HP\n-\\fB\\-lang=\\fR<lang>\n-.IP\n-Set language, for example \"de_DE\" (default: system locale)\n-.HP\n-\\fB\\-min\\fR\n-.IP\n-Start minimized\n-.HP\n-\\fB\\-resetguisettings\\fR\n-.IP\n-Reset all settings changed in the GUI\n-.HP\n-\\fB\\-rootcertificates=\\fR<file>\n-.IP\n-Set SSL root certificates for payment request (default: \\fB\\-system\\-\\fR)\n-.HP\n-\\fB\\-splash\\fR\n-.IP\n-Show splash screen on startup (default: 1)\n-.SH COPYRIGHT\n-Copyright (C) 2009-2019 The Bitcoin Core developers\n+bitcoin-qt \\- manual page for bitcoin-qt\n \n-Please contribute if you find Bitcoin Core useful. Visit\n-<https://bitcoincore.org> for further information about the software.\n-The source code is available from <https://github.com/bitcoin/bitcoin>.\n-\n-This is experimental software.\n-Distributed under the MIT software license, see the accompanying file COPYING\n-or <https://opensource.org/licenses/MIT>\n+This is a placeholder file. Please follow the instructions in \\fIcontrib/devtools/README.md\\fR to generate the manual pages after a release."
      },
      {
        "sha": "776bb462342a6f39cb60a1664f03de4a7b581ef1",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 3,
        "deletions": 114,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,116 +1,5 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"February 2019\" \"bitcoin-tx v0.17.99.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.17.99.0\n-.SH SYNOPSIS\n-.B bitcoin-tx\n-[\\fI\\,options\\/\\fR] \\fI\\,<hex-tx> \\/\\fR[\\fI\\,commands\\/\\fR]  \\fI\\,Update hex-encoded bitcoin transaction\\/\\fR\n-.br\n-.B bitcoin-tx\n-[\\fI\\,options\\/\\fR] \\fI\\,-create \\/\\fR[\\fI\\,commands\\/\\fR]   \\fI\\,Create hex-encoded bitcoin transaction\\/\\fR\n-.SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.17.99.0\n-.SH OPTIONS\n-.HP\n-\\-?\n-.IP\n-Print this help message and exit\n-.HP\n-\\fB\\-create\\fR\n-.IP\n-Create new, empty TX.\n-.HP\n-\\fB\\-json\\fR\n-.IP\n-Select JSON output\n-.HP\n-\\fB\\-txid\\fR\n-.IP\n-Output only the hex\\-encoded transaction id of the resultant transaction.\n-.PP\n-Chain selection options:\n-.HP\n-\\fB\\-testnet\\fR\n-.IP\n-Use the test chain\n-.PP\n-Commands:\n-.IP\n-delin=N\n-.IP\n-Delete input N from TX\n-.IP\n-delout=N\n-.IP\n-Delete output N from TX\n-.IP\n-in=TXID:VOUT(:SEQUENCE_NUMBER)\n-.IP\n-Add input to TX\n-.IP\n-locktime=N\n-.IP\n-Set TX lock time to N\n-.IP\n-nversion=N\n-.IP\n-Set TX version to N\n-.IP\n-outaddr=VALUE:ADDRESS\n-.IP\n-Add address\\-based output to TX\n-.IP\n-outdata=[VALUE:]DATA\n-.IP\n-Add data\\-based output to TX\n-.IP\n-outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\n-.IP\n-Add Pay To n\\-of\\-m Multi\\-sig output to TX. n = REQUIRED, m = PUBKEYS.\n-Optionally add the \"W\" flag to produce a\n-pay\\-to\\-witness\\-script\\-hash output. Optionally add the \"S\" flag to\n-wrap the output in a pay\\-to\\-script\\-hash.\n-.IP\n-outpubkey=VALUE:PUBKEY[:FLAGS]\n-.IP\n-Add pay\\-to\\-pubkey output to TX. Optionally add the \"W\" flag to produce a\n-pay\\-to\\-witness\\-pubkey\\-hash output. Optionally add the \"S\" flag to\n-wrap the output in a pay\\-to\\-script\\-hash.\n-.IP\n-outscript=VALUE:SCRIPT[:FLAGS]\n-.IP\n-Add raw script output to TX. Optionally add the \"W\" flag to produce a\n-pay\\-to\\-witness\\-script\\-hash output. Optionally add the \"S\" flag to\n-wrap the output in a pay\\-to\\-script\\-hash.\n-.IP\n-replaceable(=N)\n-.IP\n-Set RBF opt\\-in sequence number for input N (if not provided, opt\\-in all\n-available inputs)\n-.IP\n-sign=SIGHASH\\-FLAGS\n-.IP\n-Add zero or more signatures to transaction. This command requires JSON\n-registers:prevtxs=JSON object, privatekeys=JSON object. See\n-signrawtransactionwithkey docs for format of sighash flags, JSON\n-objects.\n-.PP\n-Register Commands:\n-.IP\n-load=NAME:FILENAME\n-.IP\n-Load JSON file FILENAME into register NAME\n-.IP\n-set=NAME:JSON\\-STRING\n-.IP\n-Set register NAME to given JSON\\-STRING\n-.SH COPYRIGHT\n-Copyright (C) 2009-2019 The Bitcoin Core developers\n+bitcoin-tx \\- manual page for bitcoin-tx\n \n-Please contribute if you find Bitcoin Core useful. Visit\n-<https://bitcoincore.org> for further information about the software.\n-The source code is available from <https://github.com/bitcoin/bitcoin>.\n-\n-This is experimental software.\n-Distributed under the MIT software license, see the accompanying file COPYING\n-or <https://opensource.org/licenses/MIT>\n+This is a placeholder file. Please follow the instructions in \\fIcontrib/devtools/README.md\\fR to generate the manual pages after a release."
      },
      {
        "sha": "5c733c6e21dcc6e785a051dd0cf7ef099adddc87",
        "filename": "doc/man/bitcoin-util.1",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/bitcoin-util.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/bitcoin-util.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-util.1?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,5 @@\n+.TH BITCOIN-UTIL \"1\"\n+.SH NAME\n+bitcoin-util \\- manual page for bitcoin-util\n+\n+This is a placeholder file. Please follow the instructions in \\fIcontrib/devtools/README.md\\fR to generate the manual pages after a release."
      },
      {
        "sha": "2da43dec663982b7ae1c52eff159e4280ca541fd",
        "filename": "doc/man/bitcoin-wallet.1",
        "status": "modified",
        "additions": 3,
        "deletions": 61,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/bitcoin-wallet.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/bitcoin-wallet.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-wallet.1?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,63 +1,5 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-WALLET \"1\" \"February 2019\" \"bitcoin-wallet v0.17.99.0\" \"User Commands\"\n+.TH BITCOIN-WALLET \"1\"\n .SH NAME\n-bitcoin-wallet \\- manual page for bitcoin-wallet v0.17.99.0\n-.SH DESCRIPTION\n-Bitcoin Core bitcoin\\-wallet version v0.17.99.0\n-.PP\n-wallet\\-tool is an offline tool for creating and interacting with Bitcoin Core wallet files.\n-By default wallet\\-tool will act on wallets in the default mainnet wallet directory in the datadir.\n-To change the target wallet, use the \\fB\\-datadir\\fR, \\fB\\-wallet\\fR and \\fB\\-testnet\\fR/\\-regtest arguments.\n-.SS \"Usage:\"\n-.IP\n-bitcoin\\-wallet [options] <command>\n-.SH OPTIONS\n-.HP\n-\\-?\n-.IP\n-Print this help message and exit\n-.HP\n-\\fB\\-datadir=\\fR<dir>\n-.IP\n-Specify data directory\n-.HP\n-\\fB\\-wallet=\\fR<wallet\\-name>\n-.IP\n-Specify wallet name\n-.PP\n-Debugging/Testing options:\n-.HP\n-\\fB\\-debug=\\fR<category>\n-.IP\n-Output debugging information (default: 0).\n-.HP\n-\\fB\\-printtoconsole\\fR\n-.IP\n-Send trace/debug info to console (default: 1 when no \\fB\\-debug\\fR is true, 0\n-otherwise.\n-.PP\n-Chain selection options:\n-.HP\n-\\fB\\-testnet\\fR\n-.IP\n-Use the test chain\n-.PP\n-Commands:\n-.IP\n-create\n-.IP\n-Create new wallet file\n-.IP\n-info\n-.IP\n-Get wallet info\n-.SH COPYRIGHT\n-Copyright (C) 2009-2019 The Bitcoin Core developers\n+bitcoin-wallet \\- manual page for bitcoin-wallet\n \n-Please contribute if you find Bitcoin Core useful. Visit\n-<https://bitcoincore.org> for further information about the software.\n-The source code is available from <https://github.com/bitcoin/bitcoin>.\n-\n-This is experimental software.\n-Distributed under the MIT software license, see the accompanying file COPYING\n-or <https://opensource.org/licenses/MIT>\n+This is a placeholder file. Please follow the instructions in \\fIcontrib/devtools/README.md\\fR to generate the manual pages after a release."
      },
      {
        "sha": "2c88f745205bc00db0cfa26797af00a2d8bf1865",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 3,
        "deletions": 581,
        "changes": 584,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,583 +1,5 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"February 2019\" \"bitcoind v0.17.99.0\" \"User Commands\"\n+.TH BITCOIND \"1\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.17.99.0\n-.SH SYNOPSIS\n-.B bitcoind\n-[\\fI\\,options\\/\\fR]                     \\fI\\,Start Bitcoin Core Daemon\\/\\fR\n-.SH DESCRIPTION\n-Bitcoin Core Daemon version v0.17.99.0\n-.SH OPTIONS\n-.HP\n-\\-?\n-.IP\n-Print this help message and exit\n-.HP\n-\\fB\\-alertnotify=\\fR<cmd>\n-.IP\n-Execute command when a relevant alert is received or we see a really\n-long fork (%s in cmd is replaced by message)\n-.HP\n-\\fB\\-assumevalid=\\fR<hex>\n-.IP\n-If this block is in the chain assume that it and its ancestors are valid\n-and potentially skip their script verification (0 to verify all,\n-default:\n-0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n-testnet:\n-0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n-.HP\n-\\fB\\-blocknotify=\\fR<cmd>\n-.IP\n-Execute command when the best block changes (%s in cmd is replaced by\n-block hash)\n-.HP\n-\\fB\\-blockreconstructionextratxn=\\fR<n>\n-.IP\n-Extra transactions to keep in memory for compact block reconstructions\n-(default: 100)\n-.HP\n-\\fB\\-blocksdir=\\fR<dir>\n-.IP\n-Specify blocks directory (default: <datadir>/blocks)\n-.HP\n-\\fB\\-conf=\\fR<file>\n-.IP\n-Specify configuration file. Relative paths will be prefixed by datadir\n-location. (default: bitcoin.conf)\n-.HP\n-\\fB\\-daemon\\fR\n-.IP\n-Run in the background as a daemon and accept commands\n-.HP\n-\\fB\\-datadir=\\fR<dir>\n-.IP\n-Specify data directory\n-.HP\n-\\fB\\-dbcache=\\fR<n>\n-.IP\n-Set database cache size in MiB (4 to 16384, default: 450)\n-.HP\n-\\fB\\-debuglogfile=\\fR<file>\n-.IP\n-Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n-default: debug.log)\n-.HP\n-\\fB\\-includeconf=\\fR<file>\n-.IP\n-Specify additional configuration file, relative to the \\fB\\-datadir\\fR path\n-(only useable from configuration file, not command line)\n-.HP\n-\\fB\\-loadblock=\\fR<file>\n-.IP\n-Imports blocks from external blk000??.dat file on startup\n-.HP\n-\\fB\\-maxmempool=\\fR<n>\n-.IP\n-Keep the transaction memory pool below <n> megabytes (default: 300)\n-.HP\n-\\fB\\-maxorphantx=\\fR<n>\n-.IP\n-Keep at most <n> unconnectable transactions in memory (default: 100)\n-.HP\n-\\fB\\-mempoolexpiry=\\fR<n>\n-.IP\n-Do not keep transactions in the mempool longer than <n> hours (default:\n-336)\n-.HP\n-\\fB\\-par=\\fR<n>\n-.IP\n-Set the number of script verification threads (\\fB\\-8\\fR to 16, 0 = auto, <0 =\n-leave that many cores free, default: 0)\n-.HP\n-\\fB\\-persistmempool\\fR\n-.IP\n-Whether to save the mempool on shutdown and load on restart (default: 1)\n-.HP\n-\\fB\\-pid=\\fR<file>\n-.IP\n-Specify pid file. Relative paths will be prefixed by a net\\-specific\n-datadir location. (default: bitcoind.pid)\n-.HP\n-\\fB\\-prune=\\fR<n>\n-.IP\n-Reduce storage requirements by enabling pruning (deleting) of old\n-blocks. This allows the pruneblockchain RPC to be called to\n-delete specific blocks, and enables automatic pruning of old\n-blocks if a target size in MiB is provided. This mode is\n-incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n-setting requires re\\-downloading the entire blockchain. (default:\n-0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->=550 = automatically prune block files to stay under the\n-specified target size in MiB)\n-.HP\n-\\fB\\-reindex\\fR\n-.IP\n-Rebuild chain state and block index from the blk*.dat files on disk\n-.HP\n-\\fB\\-reindex\\-chainstate\\fR\n-.IP\n-Rebuild chain state from the currently indexed blocks. When in pruning\n-mode or if blocks on disk might be corrupted, use full \\fB\\-reindex\\fR\n-instead.\n-.HP\n-\\fB\\-sysperms\\fR\n-.IP\n-Create new files with system default permissions, instead of umask 077\n-(only effective with disabled wallet functionality)\n-.HP\n-\\fB\\-txindex\\fR\n-.IP\n-Maintain a full transaction index, used by the getrawtransaction rpc\n-call (default: 0)\n-.HP\n-\\fB\\-version\\fR\n-.IP\n-Print version and exit\n-.PP\n-Connection options:\n-.HP\n-\\fB\\-addnode=\\fR<ip>\n-.IP\n-Add a node to connect to and attempt to keep the connection open (see\n-the `addnode` RPC command help for more info). This option can be\n-specified multiple times to add multiple nodes.\n-.HP\n-\\fB\\-banscore=\\fR<n>\n-.IP\n-Threshold for disconnecting misbehaving peers (default: 100)\n-.HP\n-\\fB\\-bantime=\\fR<n>\n-.IP\n-Number of seconds to keep misbehaving peers from reconnecting (default:\n-86400)\n-.HP\n-\\fB\\-bind=\\fR<addr>\n-.IP\n-Bind to given address and always listen on it. Use [host]:port notation\n-for IPv6\n-.HP\n-\\fB\\-connect=\\fR<ip>\n-.IP\n-Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n-connections (the rules for this peer are the same as for\n-\\fB\\-addnode\\fR). This option can be specified multiple times to connect\n-to multiple nodes.\n-.HP\n-\\fB\\-discover\\fR\n-.IP\n-Discover own IP addresses (default: 1 when listening and no \\fB\\-externalip\\fR\n-or \\fB\\-proxy\\fR)\n-.HP\n-\\fB\\-dns\\fR\n-.IP\n-Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (default: 1)\n-.HP\n-\\fB\\-dnsseed\\fR\n-.IP\n-Query for peer addresses via DNS lookup, if low on addresses (default: 1\n-unless \\fB\\-connect\\fR used)\n-.HP\n-\\fB\\-externalip=\\fR<ip>\n-.IP\n-Specify your own public address\n-.HP\n-\\fB\\-forcednsseed\\fR\n-.IP\n-Always query for peer addresses via DNS lookup (default: 0)\n-.HP\n-\\fB\\-listen\\fR\n-.IP\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n-.HP\n-\\fB\\-listenonion\\fR\n-.IP\n-Automatically create Tor hidden service (default: 1)\n-.HP\n-\\fB\\-maxconnections=\\fR<n>\n-.IP\n-Maintain at most <n> connections to peers (default: 125)\n-.HP\n-\\fB\\-maxreceivebuffer=\\fR<n>\n-.IP\n-Maximum per\\-connection receive buffer, <n>*1000 bytes (default: 5000)\n-.HP\n-\\fB\\-maxsendbuffer=\\fR<n>\n-.IP\n-Maximum per\\-connection send buffer, <n>*1000 bytes (default: 1000)\n-.HP\n-\\fB\\-maxtimeadjustment\\fR\n-.IP\n-Maximum allowed median peer time offset adjustment. Local perspective of\n-time may be influenced by peers forward or backward by this\n-amount. (default: 4200 seconds)\n-.HP\n-\\fB\\-maxuploadtarget=\\fR<n>\n-.IP\n-Tries to keep outbound traffic under the given target (in MiB per 24h),\n-0 = no limit (default: 0)\n-.HP\n-\\fB\\-onion=\\fR<ip:port>\n-.IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n-\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n-.HP\n-\\fB\\-onlynet=\\fR<net>\n-.IP\n-Make outgoing connections only through network <net> (ipv4, ipv6 or\n-onion). Incoming connections are not affected by this option.\n-This option can be specified multiple times to allow multiple\n-networks.\n-.HP\n-\\fB\\-peerbloomfilters\\fR\n-.IP\n-Support filtering of blocks and transaction with bloom filters (default:\n-1)\n-.HP\n-\\fB\\-permitbaremultisig\\fR\n-.IP\n-Relay non\\-P2SH multisig (default: 1)\n-.HP\n-\\fB\\-port=\\fR<port>\n-.IP\n-Listen for connections on <port> (default: 8333, testnet: 18333,\n-regtest: 18444)\n-.HP\n-\\fB\\-proxy=\\fR<ip:port>\n-.IP\n-Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n-disabled)\n-.HP\n-\\fB\\-proxyrandomize\\fR\n-.IP\n-Randomize credentials for every proxy connection. This enables Tor\n-stream isolation (default: 1)\n-.HP\n-\\fB\\-seednode=\\fR<ip>\n-.IP\n-Connect to a node to retrieve peer addresses, and disconnect. This\n-option can be specified multiple times to connect to multiple\n-nodes.\n-.HP\n-\\fB\\-timeout=\\fR<n>\n-.IP\n-Specify connection timeout in milliseconds (minimum: 1, default: 5000)\n-.HP\n-\\fB\\-torcontrol=\\fR<ip>:<port>\n-.IP\n-Tor control port to use if onion listening enabled (default:\n-127.0.0.1:9051)\n-.HP\n-\\fB\\-torpassword=\\fR<pass>\n-.IP\n-Tor control port password (default: empty)\n-.HP\n-\\fB\\-upnp\\fR\n-.IP\n-Use UPnP to map the listening port (default: 0)\n-.HP\n-\\fB\\-whitebind=\\fR<addr>\n-.IP\n-Bind to given address and whitelist peers connecting to it. Use\n-[host]:port notation for IPv6\n-.HP\n-\\fB\\-whitelist=\\fR<IP address or network>\n-.IP\n-Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or\n-CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple\n-times. Whitelisted peers cannot be DoS banned and their\n-transactions are always relayed, even if they are already in the\n-mempool, useful e.g. for a gateway\n-.PP\n-Wallet options:\n-.HP\n-\\fB\\-addresstype\\fR\n-.IP\n-What type of addresses to use (\"legacy\", \"p2sh\\-segwit\", or \"bech32\",\n-default: \"p2sh\\-segwit\")\n-.HP\n-\\fB\\-avoidpartialspends\\fR\n-.IP\n-Group outputs by address, selecting all or none, instead of selecting on\n-a per\\-output basis. Privacy is improved as an address is only\n-used once (unless someone sends to it after spending from it),\n-but may result in slightly higher fees as suboptimal coin\n-selection may result due to the added limitation (default: 0)\n-.HP\n-\\fB\\-changetype\\fR\n-.IP\n-What type of change to use (\"legacy\", \"p2sh\\-segwit\", or \"bech32\").\n-Default is same as \\fB\\-addresstype\\fR, except when\n-\\fB\\-addresstype\\fR=\\fI\\,p2sh\\-segwit\\/\\fR a native segwit output is used when\n-sending to a native segwit address)\n-.HP\n-\\fB\\-disablewallet\\fR\n-.IP\n-Do not load the wallet and disable wallet RPC calls\n-.HP\n-\\fB\\-discardfee=\\fR<amt>\n-.IP\n-The fee rate (in BTC/kB) that indicates your tolerance for discarding\n-change by adding it to the fee (default: 0.0001). Note: An output\n-is discarded if it is dust at this rate, but we will always\n-discard up to the dust relay fee and a discard fee above that is\n-limited by the fee estimate for the longest target\n-.HP\n-\\fB\\-fallbackfee=\\fR<amt>\n-.IP\n-A fee rate (in BTC/kB) that will be used when fee estimation has\n-insufficient data (default: 0.0002)\n-.HP\n-\\fB\\-keypool=\\fR<n>\n-.IP\n-Set key pool size to <n> (default: 1000)\n-.HP\n-\\fB\\-mintxfee=\\fR<amt>\n-.IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for\n-transaction creation (default: 0.00001)\n-.HP\n-\\fB\\-paytxfee=\\fR<amt>\n-.IP\n-Fee (in BTC/kB) to add to transactions you send (default: 0.00)\n-.HP\n-\\fB\\-rescan\\fR\n-.IP\n-Rescan the block chain for missing wallet transactions on startup\n-.HP\n-\\fB\\-salvagewallet\\fR\n-.IP\n-Attempt to recover private keys from a corrupt wallet on startup\n-.HP\n-\\fB\\-spendzeroconfchange\\fR\n-.IP\n-Spend unconfirmed change when sending transactions (default: 1)\n-.HP\n-\\fB\\-txconfirmtarget=\\fR<n>\n-.IP\n-If paytxfee is not set, include enough fee so transactions begin\n-confirmation on average within n blocks (default: 6)\n-.HP\n-\\fB\\-upgradewallet\\fR\n-.IP\n-Upgrade wallet to latest format on startup\n-.HP\n-\\fB\\-wallet=\\fR<path>\n-.IP\n-Specify wallet database path. Can be specified multiple times to load\n-multiple wallets. Path is interpreted relative to <walletdir> if\n-it is not absolute, and will be created if it does not exist (as\n-a directory containing a wallet.dat file and log files). For\n-backwards compatibility this will also accept names of existing\n-data files in <walletdir>.)\n-.HP\n-\\fB\\-walletbroadcast\\fR\n-.IP\n-Make the wallet broadcast transactions (default: 1)\n-.HP\n-\\fB\\-walletdir=\\fR<dir>\n-.IP\n-Specify directory to hold wallets (default: <datadir>/wallets if it\n-exists, otherwise <datadir>)\n-.HP\n-\\fB\\-walletnotify=\\fR<cmd>\n-.IP\n-Execute command when a wallet transaction changes (%s in cmd is replaced\n-by TxID)\n-.HP\n-\\fB\\-walletrbf\\fR\n-.IP\n-Send transactions with full\\-RBF opt\\-in enabled (RPC only, default: 0)\n-.HP\n-\\fB\\-zapwallettxes=\\fR<mode>\n-.IP\n-Delete all wallet transactions and only recover those parts of the\n-blockchain through \\fB\\-rescan\\fR on startup (1 = keep tx meta data e.g.\n-payment request information, 2 = drop tx meta data)\n-.PP\n-ZeroMQ notification options:\n-.HP\n-\\fB\\-zmqpubhashblock=\\fR<address>\n-.IP\n-Enable publish hash block in <address>\n-.HP\n-\\fB\\-zmqpubhashtx=\\fR<address>\n-.IP\n-Enable publish hash transaction in <address>\n-.HP\n-\\fB\\-zmqpubrawblock=\\fR<address>\n-.IP\n-Enable publish raw block in <address>\n-.HP\n-\\fB\\-zmqpubrawtx=\\fR<address>\n-.IP\n-Enable publish raw transaction in <address>\n-.PP\n-Debugging/Testing options:\n-.HP\n-\\fB\\-debug=\\fR<category>\n-.IP\n-Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n-optional). If <category> is not supplied or if <category> = 1,\n-output all debugging information. <category> can be: net, tor,\n-mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n-selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej,\n-libevent, coindb, qt, leveldb.\n-.HP\n-\\fB\\-debugexclude=\\fR<category>\n-.IP\n-Exclude debugging information for a category. Can be used in conjunction\n-with \\fB\\-debug\\fR=\\fI\\,1\\/\\fR to output debug logs for all categories except one\n-or more specified categories.\n-.HP\n-\\fB\\-help\\-debug\\fR\n-.IP\n-Print help message with debugging options and exit\n-.HP\n-\\fB\\-logips\\fR\n-.IP\n-Include IP addresses in debug output (default: 0)\n-.HP\n-\\fB\\-logtimestamps\\fR\n-.IP\n-Prepend debug output with timestamp (default: 1)\n-.HP\n-\\fB\\-maxtxfee=\\fR<amt>\n-.IP\n-Maximum total fees (in BTC) to use in a single wallet transaction or raw\n-transaction; setting this too low may abort large transactions\n-(default: 0.10)\n-.HP\n-\\fB\\-printtoconsole\\fR\n-.IP\n-Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set \\fB\\-nodebuglogfile\\fR)\n-.HP\n-\\fB\\-shrinkdebugfile\\fR\n-.IP\n-Shrink debug.log file on client startup (default: 1 when no \\fB\\-debug\\fR)\n-.HP\n-\\fB\\-uacomment=\\fR<cmt>\n-.IP\n-Append comment to the user agent string\n-.PP\n-Chain selection options:\n-.HP\n-\\fB\\-testnet\\fR\n-.IP\n-Use the test chain\n-.PP\n-Node relay options:\n-.HP\n-\\fB\\-bytespersigop\\fR\n-.IP\n-Equivalent bytes per sigop in transactions for relay and mining\n-(default: 20)\n-.HP\n-\\fB\\-datacarrier\\fR\n-.IP\n-Relay and mine data carrier transactions (default: 1)\n-.HP\n-\\fB\\-datacarriersize\\fR\n-.IP\n-Maximum size of data in data carrier transactions we relay and mine\n-(default: 83)\n-.HP\n-\\fB\\-minrelaytxfee=\\fR<amt>\n-.IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n-mining and transaction creation (default: 0.00001)\n-.HP\n-\\fB\\-whitelistforcerelay\\fR\n-.IP\n-Force relay of transactions from whitelisted peers even if they violate\n-local relay policy (default: 0)\n-.HP\n-\\fB\\-whitelistrelay\\fR\n-.IP\n-Accept relayed transactions received from whitelisted peers even when\n-not relaying transactions (default: 1)\n-.PP\n-Block creation options:\n-.HP\n-\\fB\\-blockmaxweight=\\fR<n>\n-.IP\n-Set maximum BIP141 block weight (default: 3996000)\n-.HP\n-\\fB\\-blockmintxfee=\\fR<amt>\n-.IP\n-Set lowest fee rate (in BTC/kB) for transactions to be included in block\n-creation. (default: 0.00001)\n-.PP\n-RPC server options:\n-.HP\n-\\fB\\-rest\\fR\n-.IP\n-Accept public REST requests (default: 0)\n-.HP\n-\\fB\\-rpcallowip=\\fR<ip>\n-.IP\n-Allow JSON\\-RPC connections from specified source. Valid for <ip> are a\n-single IP (e.g. 1.2.3.4), a network/netmask (e.g.\n-1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This\n-option can be specified multiple times\n-.HP\n-\\fB\\-rpcauth=\\fR<userpw>\n-.IP\n-Username and HMAC\\-SHA\\-256 hashed password for JSON\\-RPC connections. The\n-field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n-canonical python script is included in share/rpcauth. The client\n-then connects normally using the\n-rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This\n-option can be specified multiple times\n-.HP\n-\\fB\\-rpcbind=\\fR<addr>[:port]\n-.IP\n-Bind to given address to listen for JSON\\-RPC connections. Do not expose\n-the RPC server to untrusted networks such as the public internet!\n-This option is ignored unless \\fB\\-rpcallowip\\fR is also passed. Port is\n-optional and overrides \\fB\\-rpcport\\fR. Use [host]:port notation for\n-IPv6. This option can be specified multiple times (default:\n-127.0.0.1 and ::1 i.e., localhost)\n-.HP\n-\\fB\\-rpccookiefile=\\fR<loc>\n-.IP\n-Location of the auth cookie. Relative paths will be prefixed by a\n-net\\-specific datadir location. (default: data dir)\n-.HP\n-\\fB\\-rpcpassword=\\fR<pw>\n-.IP\n-Password for JSON\\-RPC connections\n-.HP\n-\\fB\\-rpcport=\\fR<port>\n-.IP\n-Listen for JSON\\-RPC connections on <port> (default: 8332, testnet:\n-18332, regtest: 18443)\n-.HP\n-\\fB\\-rpcserialversion\\fR\n-.IP\n-Sets the serialization of raw transaction or block hex returned in\n-non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n-.HP\n-\\fB\\-rpcthreads=\\fR<n>\n-.IP\n-Set the number of threads to service RPC calls (default: 4)\n-.HP\n-\\fB\\-rpcuser=\\fR<user>\n-.IP\n-Username for JSON\\-RPC connections\n-.HP\n-\\fB\\-server\\fR\n-.IP\n-Accept command line and JSON\\-RPC commands\n-.SH COPYRIGHT\n-Copyright (C) 2009-2019 The Bitcoin Core developers\n+bitcoind \\- manual page for bitcoind\n \n-Please contribute if you find Bitcoin Core useful. Visit\n-<https://bitcoincore.org> for further information about the software.\n-The source code is available from <https://github.com/bitcoin/bitcoin>.\n-\n-This is experimental software.\n-Distributed under the MIT software license, see the accompanying file COPYING\n-or <https://opensource.org/licenses/MIT>\n+This is a placeholder file. Please follow the instructions in \\fIcontrib/devtools/README.md\\fR to generate the manual pages after a release."
      },
      {
        "sha": "471d8561f7a27ff2aa20da9ca750b7a1a646bb72",
        "filename": "doc/multiprocess.md",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/multiprocess.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/multiprocess.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiprocess.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,35 @@\n+# Multiprocess Bitcoin\n+\n+On unix systems, the `--enable-multiprocess` build option can be passed to `./configure` to build new `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables alongside existing `bitcoind` and `bitcoin-qt` executables.\n+\n+`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally (after [#10102](https://github.com/bitcoin/bitcoin/pull/10102)), `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This will let node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n+\n+## Next steps\n+\n+Specific next steps after [#10102](https://github.com/bitcoin/bitcoin/pull/10102) will be:\n+\n+- [ ] Adding `-ipcbind` and `-ipcconnect` options to `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables so they can listen and connect to TCP ports and unix socket paths. This will allow separate processes to be started and stopped any time and connect to each other.\n+- [ ] Adding `-server` and `-rpcbind` options to the `bitcoin-wallet` executable so wallet processes can handle RPC requests directly without going through the node.\n+- [ ] Supporting windows, not just unix systems. The existing socket code is already cross-platform, so the only windows-specific code that needs to be written is code spawning a process and passing a socket descriptor. This can be implemented with `CreateProcess` and `WSADuplicateSocket`. Example: https://memset.wordpress.com/2010/10/13/win32-api-passing-socket-with-ipc-method/.\n+- [ ] Adding sandbox features, restricting subprocess access to resources and data. See [https://eklitzke.org/multiprocess-bitcoin](https://eklitzke.org/multiprocess-bitcoin).\n+\n+## Debugging\n+\n+After [#10102](https://github.com/bitcoin/bitcoin/pull/10102), the `-debug=ipc` command line option can be used to see requests and responses between processes.\n+\n+## Installation\n+\n+The multiprocess feature requires [Cap'n Proto](https://capnproto.org/) and [libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) as dependencies. A simple way to get starting using it without installing these dependencies manually is to use the [depends system](../depends) with the `MULTIPROCESS=1` [dependency option](../depends#dependency-options) passed to make:\n+\n+```\n+cd <BITCOIN_SOURCE_DIRECTORY>\n+make -C depends NO_QT=1 MULTIPROCESS=1\n+./configure --prefix=$PWD/depends/x86_64-pc-linux-gnu\n+make\n+src/bitcoin-node -regtest -printtoconsole -debug=ipc\n+BITCOIND=bitcoin-node test/functional/test_runner.py\n+```\n+\n+The configure script will pick up settings and library locations from the depends directory, so there is no need to pass `--enable-multiprocess` as a separate flag when using the depends system (it's controlled by the `MULTIPROCESS=1` option).\n+\n+Alternately, you can install [Cap'n Proto](https://capnproto.org/) and [libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) packages on your system, and just run `./configure --enable-multiprocess` without using the depends system. The configure script will be able to locate the installed packages via [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/). See [Installation](https://github.com/chaincodelabs/libmultiprocess#installation) section of the libmultiprocess readme for install steps. See [build-unix.md](build-unix.md) and [build-osx.md](build-osx.md) for information about installing dependencies in general."
      },
      {
        "sha": "a01c6f545db82f1c42bc40a201cc10ac9d5fac36",
        "filename": "doc/productivity.md",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/productivity.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/productivity.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/productivity.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -12,7 +12,7 @@ Table of Contents\n    * [Multiple working directories with `git worktrees`](#multiple-working-directories-with-git-worktrees)\n    * [Interactive \"dummy rebases\" for fixups and execs with `git merge-base`](#interactive-dummy-rebases-for-fixups-and-execs-with-git-merge-base)\n * [Writing code](#writing-code)\n-   * [Format C/C++/Protobuf diffs with `clang-format-diff.py`](#format-ccprotobuf-diffs-with-clang-format-diffpy)\n+   * [Format C/C++ diffs with `clang-format-diff.py`](#format-cc-diffs-with-clang-format-diffpy)\n    * [Format Python diffs with `yapf-diff.py`](#format-python-diffs-with-yapf-diffpy)\n * [Rebasing/Merging code](#rebasingmerging-code)\n    * [More conflict context with `merge.conflictstyle diff3`](#more-conflict-context-with-mergeconflictstyle-diff3)\n@@ -51,6 +51,7 @@ After running `./autogen.sh`, which generates the `./configure` file, use `./con\n \n ```sh\n --without-miniupnpc\n+--without-natpmp\n --disable-bench\n --disable-wallet\n --without-gui\n@@ -118,13 +119,13 @@ You can also set up [upstream refspecs](#reference-prs-easily-with-refspecs) to\n Writing code\n ------------\n \n-### Format C/C++/Protobuf diffs with `clang-format-diff.py`\n+### Format C/C++ diffs with `clang-format-diff.py`\n \n See [contrib/devtools/README.md](/contrib/devtools/README.md#clang-format-diff.py).\n \n ### Format Python diffs with `yapf-diff.py`\n \n-Usage is exactly the same as [`clang-format-diff.py`](#format-ccprotobuf-diffs-with-clang-format-diffpy). You can get it [here](https://github.com/MarcoFalke/yapf-diff).\n+Usage is exactly the same as [`clang-format-diff.py`](#format-cc-diffs-with-clang-format-diffpy). You can get it [here](https://github.com/MarcoFalke/yapf-diff).\n \n Rebasing/Merging code\n -------------"
      },
      {
        "sha": "86943b1f727cfff6e8fd3bc343a217ccd48be776",
        "filename": "doc/reduce-traffic.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/reduce-traffic.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/reduce-traffic.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reduce-traffic.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -23,7 +23,7 @@ longer serving historic blocks (blocks older than one week).\n Keep in mind that new nodes require other nodes that are willing to serve\n historic blocks.\n \n-Whitelisted peers will never be disconnected, although their traffic counts for\n+Peers with the `download` permission will never be disconnected, although their traffic counts for\n calculating the target.\n \n ## 2. Disable \"listening\" (`-listen=0`)\n@@ -50,7 +50,7 @@ Be reminded of the effects of this setting.\n   Doing so disables the automatic broadcasting of transactions from wallet. Not\n   relaying other's transactions could hurt your privacy if used while a wallet\n   is loaded or if you use the node to broadcast transactions.\n-- If a peer is whitelisted and \"-whitelistforcerelay\" is set to \"1\" (which will\n-  also set \"whitelistrelay\" to \"1\"), we will still receive and relay their transactions.\n+- If a peer has the forcerelay permission, we will still receive and relay\n+  their transactions.\n - It makes block propagation slower because compact block relay can only be\n   used when transaction relay is enabled."
      },
      {
        "sha": "4034a4c19c02cbec167cc5378bd652da001781d8",
        "filename": "doc/release-notes-18077.md",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-notes-18077.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-notes-18077.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-18077.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,10 @@\n+P2P and network changes\n+-----------------------\n+\n+- Added NAT-PMP port mapping support via [`libnatpmp`](https://miniupnp.tuxfamily.org/libnatpmp.html)\n+\n+Command-line options\n+--------------------\n+\n+- The `-natpmp` option has been added to use NAT-PMP to map the listening port. If both UPnP\n+and NAT-PMP are enabled, a successful allocation from UPnP prevails over one from NAT-PMP."
      },
      {
        "sha": "5553c5a7bde7b78b23c8238e9bb0c0af2bad6212",
        "filename": "doc/release-notes-19776.md",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-notes-19776.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-notes-19776.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-19776.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,9 @@\n+Updated RPCs\n+------------\n+\n+- The `getpeerinfo` RPC returns two new boolean fields, `bip152_hb_to` and\n+  `bip152_hb_from`, that respectively indicate whether we selected a peer to be\n+  in compact blocks high-bandwidth mode or whether a peer selected us as a\n+  compact blocks high-bandwidth peer. High-bandwidth peers send new block\n+  announcements via a `cmpctblock` message rather than the usual inv/headers\n+  announcements. See BIP 152 for more details. (#19776)"
      },
      {
        "sha": "8f1e03e16b64a975b9fff3be7197b0e6001c1f4f",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 24,
        "deletions": 23,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -34,31 +34,27 @@ How to Upgrade\n ==============\n \n If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the\n+shut down (which might take a few minutes in some cases), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n-possible, but it might take some time if the datadir needs to be migrated. Old\n+possible, but it might take some time if the data directory needs to be migrated. Old\n wallet versions of Bitcoin Core are generally supported.\n \n Compatibility\n ==============\n \n-Bitcoin Core is supported and extensively tested on operating systems using\n-the Linux kernel, macOS 10.12+, and Windows 7 and newer. It is not recommended\n-to use Bitcoin Core on unsupported systems.\n+Bitcoin Core is supported and extensively tested on operating systems\n+using the Linux kernel, macOS 10.14+, and Windows 7 and newer.  Bitcoin\n+Core should also work on most other Unix-like systems but is not as\n+frequently tested on them.  It is not recommended to use Bitcoin Core on\n+unsupported systems.\n \n-Bitcoin Core should also work on most other Unix-like systems but is not\n-as frequently tested on them.\n-\n-From Bitcoin Core 0.20.0 onwards, macOS versions earlier than 10.12 are no\n+From Bitcoin Core 0.22.0 onwards, macOS versions earlier than 10.14 are no\n longer supported. Additionally, Bitcoin Core does not yet change appearance\n when macOS \"dark mode\" is activated.\n \n-In addition to previously supported CPU platforms, this release's pre-compiled\n-distribution provides binaries for the RISC-V platform.\n-\n Notable changes\n ===============\n \n@@ -67,6 +63,11 @@ P2P and network changes\n \n Updated RPCs\n ------------\n+- `getpeerinfo` no longer returns the following fields: `addnode`, `banscore`,\n+  and `whitelisted`, which were previously deprecated in 0.21. Instead of\n+  `addnode`, the `connection_type` field returns manual. Instead of\n+  `whitelisted`, the `permissions` field indicates if the peer has special\n+  privileges. The `banscore` field has simply been removed. (#20755)\n \n Changes to Wallet or GUI related RPCs can be found in the GUI or Wallet section below.\n \n@@ -76,31 +77,31 @@ New RPCs\n Build System\n ------------\n \n+New settings\n+------------\n+\n Updated settings\n ----------------\n \n-Changes to Wallet or GUI related settings can be found in the GUI or Wallet  section below.\n+Changes to Wallet or GUI related settings can be found in the GUI or Wallet section below.\n \n-New settings\n-------------\n+- Passing an invalid `-rpcauth` argument now cause bitcoind to fail to start.  (#20461)\n+\n+Tools and Utilities\n+-------------------\n \n Wallet\n ------\n \n-#### Wallet RPC changes\n-\n-- The `upgradewallet` RPC replaces the `-upgradewallet` command line option.\n-  (#15761)\n-- The `settxfee` RPC will fail if the fee was set higher than the `-maxtxfee`\n-  command line setting. The wallet will already fail to create transactions\n-  with fees higher than `-maxtxfee`. (#18467)\n-\n GUI changes\n -----------\n \n Low-level changes\n =================\n \n+RPC\n+---\n+\n Tests\n -----\n "
      },
      {
        "sha": "6fc1606b37d51b6a64e686b438b3917b2fc2eebf",
        "filename": "doc/release-notes/release-notes-0.20.0.md",
        "status": "added",
        "additions": 987,
        "deletions": 0,
        "changes": 987,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-notes/release-notes-0.20.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-notes/release-notes-0.20.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.20.0.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,987 @@\n+0.20.0 Release Notes\n+====================\n+\n+Bitcoin Core version 0.20.0 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.20.0/>\n+\n+This release includes new features, various bug fixes and performance\n+improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes in some cases), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n+possible, but it might take some time if the data directory needs to be migrated. Old\n+wallet versions of Bitcoin Core are generally supported.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is supported and extensively tested on operating systems\n+using the Linux kernel, macOS 10.12+, and Windows 7 and newer.  Bitcoin\n+Core should also work on most other Unix-like systems but is not as\n+frequently tested on them.  It is not recommended to use Bitcoin Core on\n+unsupported systems.\n+\n+From Bitcoin Core 0.20.0 onwards, macOS versions earlier than 10.12 are no\n+longer supported. Additionally, Bitcoin Core does not yet change appearance\n+when macOS \"dark mode\" is activated.\n+\n+Known Bugs\n+==========\n+\n+The process for generating the source code release (\"tarball\") has changed in an\n+effort to make it more complete, however, there are a few regressions in\n+this release:\n+\n+- The generated `configure` script is currently missing, and you will need to\n+  install autotools and run `./autogen.sh` before you can run\n+  `./configure`. This is the same as when checking out from git.\n+\n+- Instead of running `make` simply, you should instead run\n+  `BITCOIN_GENBUILD_NO_GIT=1 make`.\n+\n+Notable changes\n+===============\n+\n+P2P and network changes\n+-----------------------\n+\n+#### Removal of BIP61 reject network messages from Bitcoin Core\n+\n+The `-enablebip61` command line option to enable BIP61 has been removed.\n+(#17004)\n+\n+This feature has been disabled by default since Bitcoin Core version 0.18.0.\n+Nodes on the network can not generally be trusted to send valid messages\n+(including reject messages), so this should only ever be used when\n+connected to a trusted node.  Please use the alternatives recommended\n+below if you rely on this removed feature:\n+\n+- Testing or debugging of implementations of the Bitcoin P2P network protocol\n+  should be done by inspecting the log messages that are produced by a recent\n+  version of Bitcoin Core. Bitcoin Core logs debug messages\n+  (`-debug=<category>`) to a stream (`-printtoconsole`) or to a file\n+  (`-debuglogfile=<debug.log>`).\n+\n+- Testing the validity of a block can be achieved by specific RPCs:\n+\n+  - `submitblock`\n+\n+  - `getblocktemplate` with `'mode'` set to `'proposal'` for blocks with\n+    potentially invalid POW\n+\n+- Testing the validity of a transaction can be achieved by specific RPCs:\n+\n+  - `sendrawtransaction`\n+\n+  - `testmempoolaccept`\n+\n+- Wallets should not assume a transaction has propagated to the network\n+  just because there are no reject messages.  Instead, listen for the\n+  transaction to be announced by other peers on the network.  Wallets\n+  should not assume a lack of reject messages means a transaction pays\n+  an appropriate fee.  Instead, set fees using fee estimation and use\n+  replace-by-fee to increase a transaction's fee if it hasn't confirmed\n+  within the desired amount of time.\n+\n+The removal of BIP61 reject message support also has the following minor RPC\n+and logging implications:\n+\n+- `testmempoolaccept` and `sendrawtransaction` no longer return the P2P reject\n+  code when a transaction is not accepted to the mempool. They still return the\n+  verbal reject reason.\n+\n+- Log messages that previously reported the reject code when a transaction was\n+  not accepted to the mempool now no longer report the reject code. The reason\n+  for rejection is still reported.\n+\n+Updated RPCs\n+------------\n+\n+- The RPCs which accept descriptors now accept the new `sortedmulti(...)` descriptor\n+  type which supports multisig scripts where the public keys are sorted\n+  lexicographically in the resulting script.  (#17056)\n+\n+- The `walletprocesspsbt` and `walletcreatefundedpsbt` RPCs now include\n+  BIP32 derivation paths by default for public keys if we know them.\n+  This can be disabled by setting the `bip32derivs` parameter to\n+  `false`.  (#17264)\n+\n+- The `bumpfee` RPC's parameter `totalFee`, which was deprecated in\n+  0.19, has been removed.  (#18312)\n+\n+- The `bumpfee` RPC will return a PSBT when used with wallets that have\n+  private keys disabled.  (#16373)\n+\n+- The `getpeerinfo` RPC now includes a `mapped_as` field to indicate the\n+  mapped Autonomous System used for diversifying peer selection. See the\n+  `-asmap` configuration option described below in _New Settings_.  (#16702)\n+\n+- The `createmultisig` and `addmultisigaddress` RPCs now return an\n+  output script descriptor for the newly created address.  (#18032)\n+\n+Build System\n+------------\n+\n+- OpenSSL is no longer used by Bitcoin Core.  (#17265)\n+\n+- BIP70 support has been fully removed from Bitcoin Core. The\n+  `--enable-bip70` option remains, but it will throw an error during configure.\n+  (#17165)\n+\n+- glibc 2.17 or greater is now required to run the release binaries. This\n+  retains compatibility with RHEL 7, CentOS 7, Debian 8 and Ubuntu 14.04 LTS. (#17538)\n+\n+- The source code archives that are provided with gitian builds no longer contain\n+  any autotools artifacts. Therefore, to build from such source, a user\n+  should run the `./autogen.sh` script from the root of the unpacked archive.\n+  This implies that `autotools` and other required packages are installed on the\n+  user's system. (#18331)\n+\n+New settings\n+------------\n+\n+- New `rpcwhitelist` and `rpcwhitelistdefault` configuration parameters\n+  allow giving certain RPC users permissions to only some RPC calls.\n+  (#12763)\n+\n+- A new `-asmap` configuration option has been added to diversify the\n+  node's network connections by mapping IP addresses Autonomous System\n+  Numbers (ASNs) and then limiting the number of connections made to any\n+  single ASN.  See [issue #16599](https://github.com/bitcoin/bitcoin/issues/16599),\n+  [PR #16702](https://github.com/bitcoin/bitcoin/pull/16702), and the\n+  `bitcoind help` for more information.  This option is experimental and\n+  subject to removal or breaking changes in future releases, so the\n+  legacy /16 prefix mapping of IP addresses remains the default.  (#16702)\n+\n+Updated settings\n+----------------\n+\n+- All custom settings configured when Bitcoin Core starts are now\n+  written to the `debug.log` file to assist troubleshooting.  (#16115)\n+\n+- Importing blocks upon startup via the `bootstrap.dat` file no longer\n+  occurs by default. The file must now be specified with\n+  `-loadblock=<file>`.  (#17044)\n+\n+- The `-debug=db` logging category has been renamed to\n+  `-debug=walletdb` to distinguish it from `coindb`.  The `-debug=db`\n+  option has been deprecated and will be removed in the next major\n+  release.  (#17410)\n+\n+- The `-walletnotify` configuration parameter will now replace any `%w`\n+  in its argument with the name of the wallet generating the\n+  notification.  This is not supported on Windows. (#13339)\n+\n+Removed settings\n+----------------\n+\n+- The `-whitelistforcerelay` configuration parameter has been removed after\n+  it was discovered that it was rendered ineffective in version 0.13 and\n+  hasn't actually been supported for almost four years.  (#17985)\n+\n+GUI changes\n+-----------\n+\n+- The \"Start Bitcoin Core on system login\" option has been removed on macOS.\n+  (#17567)\n+\n+- In the Peers window, the details for a peer now displays a `Mapped AS`\n+  field to indicate the mapped Autonomous System used for diversifying\n+  peer selection. See the `-asmap` configuration option in _New\n+  Settings_, above.  (#18402)\n+\n+- A \"known bug\" [announced](https://bitcoincore.org/en/releases/0.18.0/#wallet-gui)\n+  in the release notes of version 0.18 has been fixed.  The issue\n+  affected anyone who simultaneously used multiple Bitcoin Core wallets\n+  and the GUI coin control feature. (#18894)\n+\n+- For watch-only wallets, creating a new transaction in the Send screen\n+  or fee bumping an existing transaction in the Transactions screen will\n+  automatically copy a Partially-Signed Bitcoin Transaction (PSBT) to\n+  the system clipboard.  This can then be pasted into an external\n+  program such as [HWI](https://github.com/bitcoin-core/HWI) for\n+  signing.  Future versions of Bitcoin Core should support a GUI option\n+  for finalizing and broadcasting PSBTs, but for now the debug console\n+  may be used with the `finalizepsbt` and `sendrawtransaction` RPCs.\n+  (#16944, #17492)\n+\n+Wallet\n+------\n+\n+- The wallet now by default uses bech32 addresses when using RPC, and\n+  creates native segwit change outputs.  (#16884)\n+\n+- The way that output trust was computed has been fixed, which affects\n+  confirmed/unconfirmed balance status and coin selection.  (#16766)\n+\n+- The `gettransaction`, `listtransactions` and `listsinceblock` RPC\n+  responses now also include the height of the block that contains the\n+  wallet transaction, if any.  (#17437)\n+\n+- The `getaddressinfo` RPC has had its `label` field deprecated\n+  (re-enable for this release using the configuration parameter\n+  `-deprecatedrpc=label`).  The `labels` field is altered from returning\n+  JSON objects to returning a JSON array of label names (re-enable\n+  previous behavior for this release using the configuration parameter\n+  `-deprecatedrpc=labelspurpose`).  Backwards compatibility using the\n+  deprecated configuration parameters is expected to be dropped in the\n+  0.21 release.  (#17585, #17578)\n+\n+Documentation changes\n+---------------------\n+\n+- Bitcoin Core's automatically-generated source code documentation is\n+  now available at https://doxygen.bitcoincore.org.  (#17596)\n+\n+Low-level changes\n+=================\n+\n+Utilities\n+---------\n+\n+- The `bitcoin-cli` utility used with the `-getinfo` parameter now\n+  returns a `headers` field with the number of downloaded block headers\n+  on the best headers chain (similar to the `blocks` field that is also\n+  returned) and a `verificationprogress` field that estimates how much\n+  of the best block chain has been synced by the local node.  The\n+  information returned no longer includes the `protocolversion`,\n+  `walletversion`, and `keypoololdest` fields.  (#17302, #17650)\n+\n+- The `bitcoin-cli` utility now accepts a `-stdinwalletpassphrase`\n+  parameter that can be used when calling the `walletpassphrase` and\n+  `walletpassphrasechange` RPCs to read the passphrase from standard\n+  input without echoing it to the terminal, improving security against\n+  anyone who can look at your screen.  The existing `-stdinrpcpass`\n+  parameter is also updated to not echo the passphrase. (#13716)\n+\n+Command line\n+------------\n+\n+- Command line options prefixed with main/test/regtest network names like\n+  `-main.port=8333` `-test.server=1` previously were allowed but ignored. Now\n+  they trigger \"Invalid parameter\" errors on startup. (#17482)\n+\n+New RPCs\n+--------\n+\n+- The `dumptxoutset` RPC outputs a serialized snapshot of the current\n+  UTXO set.  A script is provided in the `contrib/devtools` directory\n+  for generating a snapshot of the UTXO set at a particular block\n+  height.  (#16899)\n+\n+- The `generatetodescriptor` RPC allows testers using regtest mode to\n+  generate blocks that pay an arbitrary output script descriptor.\n+  (#16943)\n+\n+Updated RPCs\n+------------\n+\n+- The `verifychain` RPC default values are now static instead of\n+  depending on the command line options or configuration file\n+  (`-checklevel`, and `-checkblocks`). Users can pass in the RPC\n+  arguments explicitly when they don't want to rely on the default\n+  values. (#18541)\n+\n+- The `getblockchaininfo` RPC's `verificationprogress` field will no\n+  longer report values higher than 1.  Previously it would occasionally\n+  report the chain was more than 100% verified.  (#17328)\n+\n+Tests\n+-----\n+\n+- It is now an error to use an unqualified `walletdir=path` setting in\n+  the config file if running on testnet or regtest networks. The setting\n+  now needs to be qualified as `chain.walletdir=path` or placed in the\n+  appropriate `[chain]` section. (#17447)\n+\n+- `-fallbackfee` was 0 (disabled) by default for the main chain, but\n+  0.0002 by default for the test chains. Now it is 0 by default for all\n+  chains. Testnet and regtest users will have to add\n+  `fallbackfee=0.0002` to their configuration if they weren't setting it\n+  and they want it to keep working like before. (#16524)\n+\n+Build system\n+------------\n+\n+- Support is provided for building with the Android Native Development\n+  Kit (NDK).  (#16110)\n+\n+0.20.0 change log\n+=================\n+\n+### Mining\n+- #18742 miner: Avoid stack-use-after-return in validationinterface (MarcoFalke)\n+\n+### Block and transaction handling\n+- #15283 log: Fix UB with bench on genesis block (instagibbs)\n+- #16507 feefilter: Compute the absolute fee rather than stored rate (instagibbs)\n+- #16688 log: Add validation interface logging (jkczyz)\n+- #16805 log: Add timing information to FlushStateToDisk() (jamesob)\n+- #16902 O(1) `OP_IF/NOTIF/ELSE/ENDIF` script implementation (sipa)\n+- #16945 introduce CChainState::GetCoinsCacheSizeState (jamesob)\n+- #16974 Walk pindexBestHeader back to ChainActive().Tip() if it is invalid (TheBlueMatt)\n+- #17004 Remove REJECT code from CValidationState (jnewbery)\n+- #17080 Explain why `fCheckDuplicateInputs` can not be skipped and remove it (MarcoFalke)\n+- #17328 GuessVerificationProgress: cap the ratio to 1 (darosior)\n+- #17399 Templatize ValidationState instead of subclassing (jkczyz)\n+- #17407 node: Add reference to mempool in NodeContext (MarcoFalke)\n+- #17708 prevector: Avoid misaligned member accesses (ajtowns)\n+- #17850,#17896,#17957,#18021,#18021,#18112 Serialization improvements (sipa)\n+- #17925 Improve UpdateTransactionsFromBlock with Epochs (JeremyRubin)\n+- #18002 Abstract out script execution out of `VerifyWitnessProgram()` (sipa)\n+- #18388 Make VerifyWitnessProgram use a Span stack (sipa)\n+- #18433 serialization: prevent int overflow for big Coin::nHeight (pierreN)\n+- #18500 chainparams: Bump assumed valid hash (MarcoFalke)\n+- #18551 Do not clear validationinterface entries being executed (sipa)\n+\n+### P2P protocol and network code\n+- #15437 Remove BIP61 reject messages (MarcoFalke)\n+- #16702 Supply and use asmap to improve IP bucketing in addrman (naumenkogs)\n+- #16851 Continue relaying transactions after they expire from mapRelay (ajtowns)\n+- #17164 Avoid allocating memory for addrKnown where we don't need it (naumenkogs)\n+- #17243 tools: add PoissonNextSend method that returns mockable time (amitiuttarwar)\n+- #17251 SocketHandler logs peer id for close and disconnect (Sjors)\n+- #17573 Seed RNG with precision timestamps on receipt of net messages (TheBlueMatt)\n+- #17624 Fix an uninitialized read in ProcessMessage(\u2026, \"tx\", \u2026) when receiving a transaction we already have (practicalswift)\n+- #17754 Don't allow resolving of std::string with embedded NUL characters. Add tests (practicalswift)\n+- #17758 Fix CNetAddr::IsRFC2544 comment + tests (tynes)\n+- #17812 config, net, test: Asmap feature refinements and functional tests (jonatack)\n+- #17951 Use rolling bloom filter of recent block txs for AlreadyHave() check (sdaftuar)\n+- #17985 Remove forcerelay of rejected txs (MarcoFalke)\n+- #18023 Fix some asmap issues (sipa)\n+- #18054 Reference instead of copy in BlockConnected range loop (jonatack)\n+- #18376 Fix use-after-free in tests (vasild)\n+- #18454 Make addr relay mockable, add test (MarcoFalke)\n+- #18458 Add missing `cs_vNodes` lock (MarcoFalke)\n+- #18506 Hardcoded seeds update for 0.20 (laanwj)\n+- #18808 Drop unknown types in getdata (jnewbery)\n+- #18962 Only send a getheaders for one block in an INV (jnewbery)\n+\n+### Wallet\n+- #13339 Replace %w by wallet name in -walletnotify script (promag)\n+- #15931 Remove GetDepthInMainChain dependency on locked chain interface (ariard)\n+- #16373 bumpfee: Return PSBT when wallet has privkeys disabled (instagibbs)\n+- #16524 Disable -fallbackfee by default (jtimon)\n+- #16766 Make IsTrusted scan parents recursively (JeremyRubin)\n+- #16884 Change default address type to bech32 (instagibbs)\n+- #16911 Only check the hash of transactions loaded from disk (achow101)\n+- #16923 Handle duplicate fileid exception (promag)\n+- #17056 descriptors: Introduce sortedmulti descriptor (achow101)\n+- #17070 Avoid showing GUI popups on RPC errors (MarcoFalke)\n+- #17138 Remove wallet access to some node arguments (jnewbery)\n+- #17237 LearnRelatedScripts only if KeepDestination (promag)\n+- #17260 Split some CWallet functions into new LegacyScriptPubKeyMan (achow101)\n+- #17261 Make ScriptPubKeyMan an actual interface and the wallet to have multiple (achow101)\n+- #17290 Enable BnB coin selection for preset inputs and subtract fee from outputs (achow101)\n+- #17373 Various fixes and cleanup to keypool handling in LegacyScriptPubKeyMan and CWallet (achow101)\n+- #17410 Rename `db` log category to `walletdb` (like `coindb`) (laanwj)\n+- #17444 Avoid showing GUI popups on RPC errors (take 2) (MarcoFalke)\n+- #17447 Make -walletdir network only (promag)\n+- #17537 Cleanup and move opportunistic and superfluous TopUp()s (achow101)\n+- #17553 Remove out of date comments for CalculateMaximumSignedTxSize (instagibbs)\n+- #17568 Fix when sufficient preset inputs and subtractFeeFromOutputs (achow101)\n+- #17677 Activate watchonly wallet behavior for LegacySPKM only (instagibbs)\n+- #17719 Document better -keypool as a look-ahead safety mechanism (ariard)\n+- #17843 Reset reused transactions cache (fjahr)\n+- #17889 Improve CWallet:MarkDestinationsDirty (promag)\n+- #18034 Get the OutputType for a descriptor (achow101)\n+- #18067 Improve LegacyScriptPubKeyMan::CanProvide script recognition (ryanofsky)\n+- #18115 Pass in transactions and messages for signing instead of exporting the private keys (achow101)\n+- #18192,#18546 Bugfix: Wallet: Safely deal with change in the address book (luke-jr)\n+- #18204 descriptors: Improve descriptor cache and cache xpubs (achow101)\n+- #18274 rpc/wallet: Initialize nFeeRequired to avoid using garbage value on failure (kallewoof)\n+- #18312 Remove deprecated fee bumping by totalFee (jonatack)\n+- #18338 Fix wallet unload race condition (promag)\n+\n+### RPC and other APIs\n+- #12763 Add RPC Whitelist Feature from #12248 (JeremyRubin)\n+- #13716 cli: `-stdinwalletpassphrase` and non-echo stdin passwords (kallewoof)\n+- #16689 Add missing fields to wallet rpc help output (ariard)\n+- #16821 Fix bug where duplicate PSBT keys are accepted (erasmospunk)\n+- #16899 UTXO snapshot creation (dumptxoutset)\n+- #17156 psbt: Check that various indexes and amounts are within bounds (achow101)\n+- #17264 Set default bip32derivs to true for psbt methods (Sjors)\n+- #17283 improve getaddressinfo test coverage, help, code docs (jonatack)\n+- #17302 cli: Add \"headers\" and \"verificationprogress\" to -getinfo (laanwj)\n+- #17318 replace asserts in RPC code with `CHECK_NONFATAL` and add linter (adamjonas)\n+- #17437 Expose block height of wallet transactions (promag)\n+- #17519 Remove unused `COINBASE_FLAGS` (narula)\n+- #17578 Simplify getaddressinfo labels, deprecate previous behavior (jonatack)\n+- #17585 deprecate getaddressinfo label (jonatack)\n+- #17746 Remove vector copy from listtransactions (promag)\n+- #17809 Auto-format RPCResult (MarcoFalke)\n+- #18032 Output a descriptor in createmultisig and addmultisigaddress (achow101)\n+- #18122 Update validateaddress RPCExamples to bech32 (theStack)\n+- #18208 Change RPCExamples to bech32 (yusufsahinhamza)\n+- #18268 Remove redundant types from descriptions (docallag)\n+- #18346 Document an RPCResult for all calls; Enforce at compile time (MarcoFalke)\n+- #18396 Add missing HelpExampleRpc for getblockfilter (theStack)\n+- #18398 Fix broken RPCExamples for waitforblock(height) (theStack)\n+- #18444 Remove final comma for last entry of fixed-size arrays/objects in RPCResult (luke-jr)\n+- #18459 Remove unused getbalances() code (jonatack)\n+- #18484 Correctly compute redeemScript from witnessScript for signrawtransaction (achow101)\n+- #18487 Fix rpcRunLater race in walletpassphrase (promag)\n+- #18499 Make rpc documentation not depend on call-time rpc args (MarcoFalke)\n+- #18532 Avoid initialization-order-fiasco on static CRPCCommand tables (MarcoFalke)\n+- #18541 Make verifychain default values static, not depend on global args (MarcoFalke)\n+- #18809 Do not advertise dumptxoutset as a way to flush the chainstate (MarcoFalke)\n+- #18814 Relock wallet only if most recent callback (promag)\n+\n+### GUI\n+- #15023 Restore RPC Console to non-wallet tray icon menu (luke-jr)\n+- #15084 Don't disable the sync overlay when wallet is disabled (benthecarman)\n+- #15098 Show addresses for \"SendToSelf\" transactions (hebasto)\n+- #15756 Add shortcuts for tab tools (promag)\n+- #16944 create PSBT with watch-only wallet (Sjors)\n+- #16964 Change sendcoins dialogue Yes to Send (instagibbs)\n+- #17068 Always generate `bitcoinstrings.cpp` on `make translate` (D4nte)\n+- #17096 Rename debug window (Zero-1729)\n+- #17105 Make RPCConsole::TabTypes an enum class (promag)\n+- #17125 Add toolTip and placeholderText to sign message fields (dannmat)\n+- #17165 Remove BIP70 support (fanquake)\n+- #17180 Improved tooltip for send amount field (JeremyCrookshank)\n+- #17186 Add placeholder text to the sign message field (Danny-Scott)\n+- #17195 Send amount placeholder value (JeremyCrookshank)\n+- #17226 Fix payAmount tooltip in SendCoinsEntry (promag)\n+- #17360 Cleaning up hide button tool tip (Danny-Scott)\n+- #17446 Changed tooltip for 'Label' & 'Message' text fields to be more clear (dannmat)\n+- #17453 Fix intro dialog labels when the prune button is toggled (hebasto)\n+- #17474 Bugfix: GUI: Recognise `NETWORK_LIMITED` in formatServicesStr (luke-jr)\n+- #17492 Bump fee returns PSBT on clipboard for watchonly-only wallets (instagibbs)\n+- #17567 Remove macOS start on login code (fanquake)\n+- #17587 Show watch-only balance in send screen (Sjors)\n+- #17694 Disable 3rd-party tx-urls when wallet disabled (brakmic)\n+- #17696 Force set nPruneSize in QSettings after the intro dialog (hebasto)\n+- #17702 Move static placeholder texts to forms (laanwj)\n+- #17826 Log Qt related info (hebasto)\n+- #17886 Restore English translation option (achow101)\n+- #17906 Set CConnman byte counters earlier to avoid uninitialized reads (ryanofsky)\n+- #17935 Hide HD & encryption icons when no wallet loaded (brakmic)\n+- #17998 Shortcut to close ModalOverlay (emilengler)\n+- #18007 Bugfix: GUI: Hide the HD/encrypt icons earlier so they get re-shown if another wallet is open (luke-jr)\n+- #18060 Drop PeerTableModel dependency to ClientModel (promag)\n+- #18062 Fix unintialized WalletView::progressDialog (promag)\n+- #18091 Pass clientmodel changes from walletframe to walletviews (jonasschnelli)\n+- #18101 Fix deprecated QCharRef usage (hebasto)\n+- #18121 Throttle GUI update pace when -reindex (hebasto)\n+- #18123 Fix race in WalletModel::pollBalanceChanged (ryanofsky)\n+- #18160 Avoid Wallet::GetBalance in WalletModel::pollBalanceChanged (promag)\n+- #18360 Bump transifex slug and update English translations for 0.20 (laanwj)\n+- #18402 Display mapped AS in peers info window (jonatack)\n+- #18492 Translations update pre-branch (laanwj)\n+- #18549 Fix Window -> Minimize menu item (hebasto)\n+- #18578 Fix leak in CoinControlDialog::updateView (promag)\n+- #18894 Fix manual coin control with multiple wallets loaded (promag)\n+\n+### Build system\n+- #16667 Remove mingw linker workaround from win gitian descriptor (fanquake)\n+- #16669 Use new fork of osslsigncode for windows gitian signing (fanquake)\n+- #16949 Only pass --disable-dependency-tracking to packages that understand it (fanquake)\n+- #17008 Bump libevent to 2.1.11 in depends (stefanwouldgo)\n+- #17029 gitian: Various improvements for windows descriptor (dongcarl)\n+- #17033 Disable _FORTIFY_SOURCE when enable-debug (achow101)\n+- #17057 Switch to upstream libdmg-hfsplus (fanquake)\n+- #17066 Remove workaround for ancient libtool (hebasto)\n+- #17074 Added double quotes (mztriz)\n+- #17087 Add variable printing target to Makefiles (dongcarl)\n+- #17118 depends macOS: point --sysroot to SDK (Sjors)\n+- #17231 Fix boost mac cross build with clang 9+ (theuni)\n+- #17265 Remove OpenSSL (fanquake)\n+- #17284 Update retry to current version (RandyMcMillan)\n+- #17308 nsis: Write to correct filename in first place (dongcarl)\n+- #17324,#18099 Update univalue subtree (MarcoFalke)\n+- #17398 Update leveldb to 1.22+ (laanwj)\n+- #17409 Avoid hardcoded libfaketime dir in gitian (MarcoFalke)\n+- #17466 Fix C{,XX} pickup (dongcarl)\n+- #17483 Set gitian arch back to amd64 (MarcoFalke)\n+- #17486 Make Travis catch unused variables (Sjors)\n+- #17538 Bump minimum libc to 2.17 for release binaries (fanquake)\n+- #17542 Create test utility library from src/test/util/ (brakmic)\n+- #17545 Remove libanl.so.1 from ALLOWED_LIBRARIES (fanquake)\n+- #17547 Fix configure report about qr (hebasto)\n+- #17569 Allow export of environ symbols and work around rv64 toolchain issue (laanwj)\n+- #17647 lcov: filter depends from coverage reports (nijynot)\n+- #17658 Add ability to skip building qrencode (fanquake)\n+- #17678 Support for S390X and POWER targets (MarcoFalke)\n+- #17682 util: Update tinyformat to upstream (laanwj)\n+- #17698 Don't configure `xcb_proto` (fanquake)\n+- #17730 Remove Qt networking features (fanquake)\n+- #17738 Remove linking librt for backwards compatibility (fanquake)\n+- #17740 Remove configure checks for win libraries we don't link against (fanquake)\n+- #17741 Included `test_bitcoin-qt` in msvc build (sipsorcery)\n+- #17756 Remove `WINDOWS_BITS` from build system (fanquake)\n+- #17769 Set `AC_PREREQ` to 2.69 (fanquake)\n+- #17880 Add -Wdate-time to Werror flags (fanquake)\n+- #17910 Remove double `LIBBITCOIN_SERVER` linking (fanquake)\n+- #17928 Consistent use of package variable (Bushstar)\n+- #17933 guix: Pin Guix using `guix time-machine` (dongcarl)\n+- #17948 pass -fno-ident in Windows gitian descriptor (fanquake)\n+- #18003 Remove --large-address-aware linker flag (fanquake)\n+- #18004 Don't embed a build-id when building libdmg-hfsplus (fanquake)\n+- #18051 Fix behavior when `ALLOW_HOST_PACKAGES` unset (hebasto)\n+- #18059 Add missing attributes to Win installer (fanquake)\n+- #18104 Skip i686 build by default in guix and gitian (MarcoFalke)\n+- #18107 Add `cov_fuzz` target (MarcoFalke)\n+- #18135 Add --enable-determinism configure flag (fanquake)\n+- #18145 Add Wreturn-type to Werror flags, check on more Travis machines (Sjors)\n+- #18264 Remove Boost Chrono (fanquake)\n+- #18290 Set minimum Automake version to 1.13 (hebasto)\n+- #18320 guix: Remove now-unnecessary gcc make flag (dongcarl)\n+- #18331 Use git archive as source tarball (hebasto)\n+- #18397 Fix libevent linking for `bench_bitcoin` binary (hebasto)\n+- #18426 scripts: `Previous_release`: improve behaviour on failed download (theStack)\n+- #18429 Remove double `LIBBITCOIN_SERVER` from bench-Makefile (brakmic)\n+- #18528 Create `test_fuzz` library from src/test/fuzz/fuzz.cpp (brakmic)\n+- #18558 Fix boost detection for arch armv7l (hebasto)\n+- #18598 gitian: Add missing automake package to gitian-win-signer.yml (achow101)\n+- #18676 Check libevent minimum version in configure script (hebasto)\n+- #18945 Ensure source tarball has leading directory name (laanwj)\n+\n+### Platform support\n+- #16110 Add Android NDK support (icota)\n+- #16392 macOS toolchain update (fanquake)\n+- #16569 Increase init file stop timeout (setpill)\n+- #17151 Remove OpenSSL PRNG seeding (Windows, Qt only) (fanquake)\n+- #17365 Update README.md with working Android targets and API levels (icota)\n+- #17521 Only use D-Bus with Qt on linux (fanquake)\n+- #17550 Set minimum supported macOS to 10.12 (fanquake)\n+- #17592 Appveyor install libevent[thread] vcpkg (sipsorcery)\n+- #17660 Remove deprecated key from macOS Info.plist (fanquake)\n+- #17663 Pass `-dead_strip_dylibs` to ld on macOS (fanquake)\n+- #17676 Don't use OpenGL in Qt on macOS (fanquake)\n+- #17686 Add `-bind_at_load` to macOS hardened LDFLAGS (fanquake)\n+- #17787 scripts: Add macho pie check to security-check.py (fanquake)\n+- #17800 random: don't special case clock usage on macOS (fanquake)\n+- #17863 scripts: Add macho dylib checks to symbol-check.py (fanquake)\n+- #17899 msvc: Ignore msvc linker warning and update to msvc build instructions (sipsorcery)\n+- #17916 windows: Enable heap terminate-on-corruption (fanquake)\n+- #18082 logging: Enable `thread_local` usage on macos (fanquake)\n+- #18108 Fix `.gitignore` policy in `build_msvc` directory (hebasto)\n+- #18295 scripts: Add macho lazy bindings check to security-check.py (fanquake)\n+- #18358 util: Fix compilation with mingw-w64 7.0.0 (fanquake)\n+- #18359 Fix sysctl() detection on macOS (fanquake)\n+- #18364 random: remove getentropy() fallback for macOS < 10.12 (fanquake)\n+- #18395 scripts: Add pe dylib checking to symbol-check.py (fanquake)\n+- #18415 scripts: Add macho tests to test-security-check.py (fanquake)\n+- #18425 releases: Update with new Windows code signing certificate (achow101)\n+- #18702 Fix ASLR for bitcoin-cli on Windows (fanquake)\n+\n+### Tests and QA\n+- #12134 Build previous releases and run functional tests (Sjors)\n+- #13693 Add coverage to estimaterawfee and estimatesmartfee (Empact)\n+- #13728 lint: Run the ci lint stage on mac (Empact)\n+- #15443 Add getdescriptorinfo functional test (promag)\n+- #15888 Add `wallet_implicitsegwit` to test the ability to transform keys between address types (luke-jr)\n+- #16540 Add `ASSERT_DEBUG_LOG` to unit test framework (MarcoFalke)\n+- #16597 travis: Run full test suite on native macos (Sjors)\n+- #16681 Use self.chain instead of 'regtest' in all current tests (jtimon)\n+- #16786 add unit test for wallet watch-only methods involving PubKeys (theStack)\n+- #16943 Add generatetodescriptor RPC (MarcoFalke)\n+- #16973 Fix `combine_logs.py` for AppVeyor build (mzumsande)\n+- #16975 Show debug log on unit test failure (MarcoFalke)\n+- #16978 Seed test RNG context for each test case, print seed (MarcoFalke)\n+- #17009, #17018, #17050, #17051, #17071, #17076, #17083, #17093, #17109, #17113, #17136, #17229, #17291, #17357, #17771, #17777, #17917, #17926, #17972, #17989, #17996, #18009, #18029, #18047, #18126, #18176, #18206, #18353, #18363, #18407, #18417, #18423, #18445, #18455, #18565 Add fuzzing harnesses (practicalswift)\n+- #17011 ci: Use busybox utils for one build (MarcoFalke)\n+- #17030 Fix Python Docstring to include all Args (jbampton)\n+- #17041 ci: Run tests on arm (MarcoFalke)\n+- #17069 Pass fuzzing inputs as constant references (practicalswift)\n+- #17091 Add test for loadblock option and linearize scripts (fjahr)\n+- #17108 fix \"tx-size-small\" errors after default address change (theStack)\n+- #17121 Speed up `wallet_backup` by whitelisting peers (immediate tx relay) (theStack)\n+- #17124 Speed up `wallet_address_types` by whitelisting peers (immediate tx relay) (theStack)\n+- #17140 Fix bug in `blockfilter_index_tests` (jimpo)\n+- #17199 use default address type (bech32) for `wallet_bumpfee` tests (theStack)\n+- #17205 ci: Enable address sanitizer (asan) stack-use-after-return checking (practicalswift)\n+- #17206 Add testcase to simulate bitcoin schema in leveldb (adamjonas)\n+- #17209 Remove no longer needed UBSan suppressions (issues fixed). Add documentation (practicalswift)\n+- #17220 Add unit testing for the CompressScript function (adamjonas)\n+- #17225 Test serialisation as part of deserialisation fuzzing. Test round-trip equality where possible (practicalswift)\n+- #17228 Add RegTestingSetup to `setup_common` (MarcoFalke)\n+- #17233 travis: Run unit and functional tests on native arm (MarcoFalke)\n+- #17235 Skip unnecessary fuzzer initialisation. Hold ECCVerifyHandle only when needed (practicalswift)\n+- #17240 ci: Disable functional tests on mac host (MarcoFalke)\n+- #17254 Fix `script_p2sh_tests` `OP_PUSHBACK2/4` missing (adamjonas)\n+- #17267 bench: Fix negative values and zero for -evals flag (nijynot)\n+- #17275 pubkey: Assert CPubKey's ECCVerifyHandle precondition (practicalswift)\n+- #17288 Added TestWrapper class for interactive Python environments (jachiang)\n+- #17292 Add new mempool benchmarks for a complex pool (JeremyRubin)\n+- #17299 add reason checks for non-standard txs in `test_IsStandard` (theStack)\n+- #17322 Fix input size assertion in `wallet_bumpfee.py` (instagibbs)\n+- #17327 Add `rpc_fundrawtransaction` logging (jonatack)\n+- #17330 Add `shrinkdebugfile=0` to regtest bitcoin.conf (sdaftuar)\n+- #17340 Speed up fundrawtransaction test (jnewbery)\n+- #17345 Do not instantiate CAddrDB for static call CAddrDB::Read() (hebasto)\n+- #17362 Speed up `wallet_avoidreuse`, add logging (jonatack)\n+- #17363 add \"diamond\" unit test to MempoolAncestryTests (theStack)\n+- #17366 Reset global args between test suites (MarcoFalke)\n+- #17367 ci: Run non-cross-compile builds natively (MarcoFalke)\n+- #17378 TestShell: Fix typos & implement cleanups (jachiang)\n+- #17384 Create new test library (MarcoFalke)\n+- #17387 `wallet_importmulti`: use addresses of the same type as being imported (achow101)\n+- #17388 Add missing newline in `util_ChainMerge` test (ryanofsky)\n+- #17390 Add `util_ArgParsing` test (ryanofsky)\n+- #17420 travis: Rework `cache_err_msg` (MarcoFalke)\n+- #17423 ci: Make ci system read-only on the git work tree (MarcoFalke)\n+- #17435 check custom ancestor limit in `mempool_packages.py` (theStack)\n+- #17455 Update valgrind suppressions (practicalswift)\n+- #17461 Check custom descendant limit in `mempool_packages.py` (theStack)\n+- #17469 Remove fragile `assert_memory_usage_stable` (MarcoFalke)\n+- #17470 ci: Use clang-8 for fuzzing to run on aarch64 ci systems (MarcoFalke)\n+- #17480 Add unit test for non-standard txs with too large scriptSig (theStack)\n+- #17497 Skip tests when utils haven't been compiled (fanquake)\n+- #17502 Add unit test for non-standard bare multisig txs (theStack)\n+- #17511 Add bounds checks before base58 decoding (sipa)\n+- #17517 ci: Bump to clang-8 for asan build to avoid segfaults on ppc64le (MarcoFalke)\n+- #17522 Wait until mempool is loaded in `wallet_abandonconflict` (MarcoFalke)\n+- #17532 Add functional test for non-standard txs with too large scriptSig (theStack)\n+- #17541 Add functional test for non-standard bare multisig txs (theStack)\n+- #17555 Add unit test for non-standard txs with wrong nVersion (dspicher)\n+- #17571 Add `libtest_util` library to msvc build configuration (sipsorcery)\n+- #17591 ci: Add big endian platform - s390x (elichai)\n+- #17593 Move more utility functions into test utility library (mzumsande)\n+- #17633 Add option --valgrind to run the functional tests under Valgrind (practicalswift)\n+- #17635 ci: Add centos 7 build (hebasto)\n+- #17641 Add unit test for leveldb creation with unicode path (sipsorcery)\n+- #17674 Add initialization order fiasco detection in Travis (practicalswift)\n+- #17675 Enable tests which are incorrectly skipped when running `test_runner.py --usecli` (practicalswift)\n+- #17685 Fix bug in the descriptor parsing fuzzing harness (`descriptor_parse`) (practicalswift)\n+- #17705 re-enable CLI test support by using EncodeDecimal in json.dumps() (fanquake)\n+- #17720 add unit test for non-standard \"scriptsig-not-pushonly\" txs (theStack)\n+- #17767 ci: Fix qemu issues (MarcoFalke)\n+- #17793 ci: Update github actions ci vcpkg cache on msbuild update (hebasto)\n+- #17806 Change filemode of `rpc_whitelist.py` (emilengler)\n+- #17849 ci: Fix brew python link (hebasto)\n+- #17851 Add `std::to_string` to list of locale dependent functions (practicalswift)\n+- #17893 Fix double-negative arg test (hebasto)\n+- #17900 ci: Combine 32-bit build with centos 7 build (theStack)\n+- #17921 Test `OP_CSV` empty stack fail in `feature_csv_activation.py` (theStack)\n+- #17931 Fix `p2p_invalid_messages` failing in Python 3.8 because of warning (elichai)\n+- #17947 add unit test for non-standard txs with too large tx size (theStack)\n+- #17959 Check specific reject reasons in `feature_csv_activation.py` (theStack)\n+- #17984 Add p2p test for forcerelay permission (MarcoFalke)\n+- #18001 Updated appveyor job to checkout a specific vcpkg commit ID (sipsorcery)\n+- #18008 fix fuzzing using libFuzzer on macOS (fanquake)\n+- #18013 bench: Fix benchmarks filters (elichai)\n+- #18018 reset fIsBareMultisigStd after bare-multisig tests (fanquake)\n+- #18022 Fix appveyor `test_bitcoin` build of `*.raw` (MarcoFalke)\n+- #18037 util: Allow scheduler to be mocked (amitiuttarwar)\n+- #18056 ci: Check for submodules (emilengler)\n+- #18069 Replace 'regtest' leftovers by self.chain (theStack)\n+- #18081 Set a name for CI Docker containers (fanquake)\n+- #18109 Avoid hitting some known minor tinyformat issues when fuzzing strprintf(\u2026) (practicalswift)\n+- #18155 Add harness which fuzzes EvalScript and VerifyScript using a fuzzed signature checker (practicalswift)\n+- #18159 Add --valgrind option to `test/fuzz/test_runner.py` for running fuzzing test cases under valgrind (practicalswift)\n+- #18166 ci: Run fuzz testing test cases (bitcoin-core/qa-assets) under valgrind to catch memory errors (practicalswift)\n+- #18172 Transaction expiry from mempool (0xB10C)\n+- #18181 Remove incorrect assumptions in `validation_flush_tests` (MarcoFalke)\n+- #18183 Set `catch_system_errors=no` on boost unit tests (MarcoFalke)\n+- #18195 Add `cost_of_change` parameter assertions to `bnb_search_test` (yancyribbens)\n+- #18209 Reduce unneeded whitelist permissions in tests (MarcoFalke)\n+- #18211 Disable mockforward scheduler unit test for now (MarcoFalke)\n+- #18213 Fix race in `p2p_segwit` (MarcoFalke)\n+- #18224 Make AnalyzePSBT next role calculation simple, correct (instagibbs)\n+- #18228 Add missing syncwithvalidationinterfacequeue (MarcoFalke)\n+- #18247 Wait for both veracks in `add_p2p_connection` (MarcoFalke)\n+- #18249 Bump timeouts to accomodate really slow disks (MarcoFalke)\n+- #18255 Add `bad-txns-*-toolarge` test cases to `invalid_txs` (MarcoFalke)\n+- #18263 rpc: change setmocktime check to use IsMockableChain (gzhao408)\n+- #18285 Check that `wait_until` returns if time point is in the past (MarcoFalke)\n+- #18286 Add locale fuzzer to `FUZZERS_MISSING_CORPORA` (practicalswift)\n+- #18292 fuzz: Add `assert(script == decompressed_script)` (MarcoFalke)\n+- #18299 Update `FUZZERS_MISSING_CORPORA` to enable regression fuzzing for all harnesses in master (practicalswift)\n+- #18300 fuzz: Add option to merge input dir to test runner (MarcoFalke)\n+- #18305 Explain why test logging should be used (MarcoFalke)\n+- #18306 Add logging to `wallet_listsinceblock.py` (jonatack)\n+- #18311 Bumpfee test fix (instagibbs)\n+- #18314 Add deserialization fuzzing of SnapshotMetadata (`utxo_snapshot`) (practicalswift)\n+- #18319 fuzz: Add missing `ECC_Start` to `key_io` test (MarcoFalke)\n+- #18334 Add basic test for BIP 37 (MarcoFalke)\n+- #18350 Fix mining to an invalid target + ensure that a new block has the correct hash internally (TheQuantumPhysicist)\n+- #18378 Bugfix & simplify bn2vch using `int.to_bytes` (sipa)\n+- #18393 Don't assume presence of `__builtin_mul_overflow(\u2026)` in `MultiplicationOverflow(\u2026)` fuzzing harness (practicalswift)\n+- #18406 add executable flag for `rpc_estimatefee.py` (theStack)\n+- #18420 listsinceblock block height checks (jonatack)\n+- #18430 ci: Only clone bitcoin-core/qa-assets when fuzzing (MarcoFalke)\n+- #18438 ci: Use homebrew addon on native macos (hebasto)\n+- #18447 Add coverage for script parse error in ParseScript (pierreN)\n+- #18472 Remove unsafe `BOOST_TEST_MESSAGE` (MarcoFalke)\n+- #18474 check that peer is connected when calling sync_* (MarcoFalke)\n+- #18477 ci: Use focal for fuzzers (MarcoFalke)\n+- #18481 add BIP37 'filterclear' test to p2p_filter.py (theStack)\n+- #18496 Remove redundant `sync_with_ping` after `add_p2p_connection` (jonatack)\n+- #18509 fuzz: Avoid running over all inputs after merging them (MarcoFalke)\n+- #18510 fuzz: Add CScriptNum::getint coverage (MarcoFalke)\n+- #18514 remove rapidcheck integration and tests (fanquake)\n+- #18515 Add BIP37 remote crash bug [CVE-2013-5700] test to `p2p_filter.py` (theStack)\n+- #18516 relax bumpfee `dust_to_fee` txsize an extra vbyte (jonatack)\n+- #18518 fuzz: Extend descriptor fuzz test (MarcoFalke)\n+- #18519 fuzz: Extend script fuzz test (MarcoFalke)\n+- #18521 fuzz: Add `process_messages` harness (MarcoFalke)\n+- #18529 Add fuzzer version of randomized prevector test (sipa)\n+- #18534 skip backwards compat tests if not compiled with wallet (fanquake)\n+- #18540 `wallet_bumpfee` assertion fixup (jonatack)\n+- #18543 Use one node to avoid a race due to missing sync in `rpc_signrawtransaction` (MarcoFalke)\n+- #18561 Properly raise FailedToStartError when rpc shutdown before warmup finished (MarcoFalke)\n+- #18562 ci: Run unit tests sequential once (MarcoFalke)\n+- #18563 Fix `unregister_all_during_call` cleanup (ryanofsky)\n+- #18566 Set `-use_value_profile=1` when merging fuzz inputs (MarcoFalke)\n+- #18757 Remove enumeration of expected deserialization exceptions in ProcessMessage(\u2026) fuzzer (practicalswift)\n+- #18878 Add test for conflicted wallet tx notifications (ryanofsky)\n+- #18975 Remove const to work around compiler error on xenial (laanwj)\n+\n+### Documentation\n+- #16947 Doxygen-friendly script/descriptor.h comments (ch4ot1c)\n+- #16983 Add detailed info about Bitcoin Core files (hebasto)\n+- #16986 Doxygen-friendly CuckooCache comments (ch4ot1c)\n+- #17022 move-only: Steps for \"before major release branch-off\" (MarcoFalke)\n+- #17026 Update bips.md for default bech32 addresses in 0.20.0 (MarcoFalke)\n+- #17081 Fix Makefile target in benchmarking.md (theStack)\n+- #17102 Add missing indexes/blockfilter/basic to doc/files.md (MarcoFalke)\n+- #17119 Fix broken bitcoin-cli examples (andrewtoth)\n+- #17134 Add switch on enum example to developer notes (hebasto)\n+- #17142 Update macdeploy README to include all files produced by `make deploy` (za-kk)\n+- #17146 github: Add warning for bug reports (laanwj)\n+- #17157 Added instructions for how to add an upsteam to forked repo (dannmat)\n+- #17159 Add a note about backporting (carnhofdaki)\n+- #17169 Correct function name in ReportHardwareRand() (fanquake)\n+- #17177 Describe log files + consistent paths in test READMEs (fjahr)\n+- #17239 Changed miniupnp links to https (sandakersmann)\n+- #17281 Add developer note on `c_str()` (laanwj)\n+- #17285 Bip70 removal follow-up (fjahr)\n+- #17286 Fix help-debug -checkpoints (ariard)\n+- #17309 update MSVC instructions to remove Qt OpenSSL linking (fanquake)\n+- #17339 Add template for good first issues (michaelfolkson)\n+- #17351 Fix some misspellings (RandyMcMillan)\n+- #17353 Add ShellCheck to lint tests dependencies (hebasto)\n+- #17370 Update doc/bips.md with recent changes in master (MarcoFalke)\n+- #17393 Added regtest config for linearize script (gr0kchain)\n+- #17411 Add some better examples for scripted diff (laanwj)\n+- #17503 Remove bitness from bitcoin-qt help message and manpage (laanwj)\n+- #17539 Update and improve Developer Notes (hebasto)\n+- #17561 Changed MiniUPnPc link to https in dependencies.md (sandakersmann)\n+- #17596 Change doxygen URL to doxygen.bitcoincore.org (laanwj)\n+- #17598 Update release process with latest changes (MarcoFalke)\n+- #17617 Unify unix epoch time descriptions (jonatack)\n+- #17637 script: Add keyserver to verify-commits readme (emilengler)\n+- #17648 Rename wallet-tool references to bitcoin-wallet (hel-o)\n+- #17688 Add \"ci\" prefix to CONTRIBUTING.md (hebasto)\n+- #17751 Use recommended shebang approach in documentation code block (hackerrdave)\n+- #17752 Fix directory path for secp256k1 subtree in developer-notes (hackerrdave)\n+- #17772 Mention PR Club in CONTRIBUTING.md (emilengler)\n+- #17804 Misc RPC help fixes (MarcoFalke)\n+- #17819 Developer notes guideline on RPCExamples addresses (jonatack)\n+- #17825 Update dependencies.md (hebasto)\n+- #17873 Add to Doxygen documentation guidelines (jonatack)\n+- #17907 Fix improper Doxygen inline comments (Empact)\n+- #17942 Improve fuzzing docs for macOS users (fjahr)\n+- #17945 Fix doxygen errors (Empact)\n+- #18025 Add missing supported rpcs to doc/descriptors.md (andrewtoth)\n+- #18070 Add note about `brew doctor` (givanse)\n+- #18125 Remove PPA note from release-process.md (fanquake)\n+- #18170 Minor grammatical changes and flow improvements (travinkeith)\n+- #18212 Add missing step in win deployment instructions (dangershony)\n+- #18219 Add warning against wallet.dat re-use (corollari)\n+- #18253 Correct spelling errors in comments (Empact)\n+- #18278 interfaces: Describe and follow some code conventions (ryanofsky)\n+- #18283 Explain rebase policy in CONTRIBUTING.md (MarcoFalke)\n+- #18340 Mention MAKE=gmake workaround when building on a BSD (fanquake)\n+- #18341 Replace remaining literal BTC with `CURRENCY_UNIT` (domob1812)\n+- #18342 Add fuzzing quickstart guides for libFuzzer and afl-fuzz (practicalswift)\n+- #18344 Fix nit in getblockchaininfo (stevenroose)\n+- #18379 Comment fix merkle.cpp (4d55397500)\n+- #18382 note the costs of fetching all pull requests (vasild)\n+- #18391 Update init and reduce-traffic docs for -blocksonly (glowang)\n+- #18464 Block-relay-only vs blocksonly (MarcoFalke)\n+- #18486 Explain new test logging (MarcoFalke)\n+- #18505 Update webchat URLs in README.md (SuriyaaKudoIsc)\n+- #18513 Fix git add argument (HashUnlimited)\n+- #18577 Correct scripted-diff example link (yahiheb)\n+- #18589 Fix naming of macOS SDK and clarify version (achow101)\n+\n+### Miscellaneous\n+- #15600 lockedpool: When possible, use madvise to avoid including sensitive information in core dumps (luke-jr)\n+- #15934 Merge settings one place instead of five places (ryanofsky)\n+- #16115 On bitcoind startup, write config args to debug.log (LarryRuane)\n+- #16117 util: Replace boost sleep with std sleep (MarcoFalke)\n+- #16161 util: Fix compilation errors in support/lockedpool.cpp (jkczyz)\n+- #16802 scripts: In linearize, search for next position of magic bytes rather than fail (takinbo)\n+- #16889 Add some general std::vector utility functions (sipa)\n+- #17049 contrib: Bump gitian descriptors for 0.20 (MarcoFalke)\n+- #17052 scripts: Update `copyright_header` script to include additional files (GChuf)\n+- #17059 util: Simplify path argument for cblocktreedb ctor (hebasto)\n+- #17191 random: Remove call to `RAND_screen()` (Windows only) (fanquake)\n+- #17192 util: Add `check_nonfatal` and use it in src/rpc (MarcoFalke)\n+- #17218 Replace the LogPrint function with a macro (jkczyz)\n+- #17266 util: Rename decodedumptime to parseiso8601datetime (elichai)\n+- #17270 Feed environment data into RNG initializers (sipa)\n+- #17282 contrib: Remove accounts from bash completion (fanquake)\n+- #17293 Add assertion to randrange that input is not 0 (JeremyRubin)\n+- #17325 log: Fix log message for -par=1 (hebasto)\n+- #17329 linter: Strip trailing / in path for git-subtree-check (jnewbery)\n+- #17336 scripts: Search for first block file for linearize-data with some block files pruned (Rjected)\n+- #17361 scripts: Lint gitian descriptors with shellcheck (hebasto)\n+- #17482 util: Disallow network-qualified command line options (ryanofsky)\n+- #17507 random: mark RandAddPeriodic and SeedPeriodic as noexcept (fanquake)\n+- #17527 Fix CPUID subleaf iteration (sipa)\n+- #17604 util: Make schedulebatchpriority advisory only (fanquake)\n+- #17650 util: Remove unwanted fields from bitcoin-cli -getinfo (malevolent)\n+- #17671 script: Fixed wget call in gitian-build.py (willyko)\n+- #17699 Make env data logging optional (sipa)\n+- #17721 util: Don't allow base58 decoding of non-base58 strings. add base58 tests (practicalswift)\n+- #17750 util: Change getwarnings parameter to bool (jnewbery)\n+- #17753 util: Don't allow base32/64-decoding or parsemoney(\u2026) on strings with embedded nul characters. add tests (practicalswift)\n+- #17823 scripts: Read suspicious hosts from a file instead of hardcoding (sanjaykdragon)\n+- #18162 util: Avoid potential uninitialized read in `formatiso8601datetime(int64_t)` by checking `gmtime_s`/`gmtime_r` return value (practicalswift)\n+- #18167 Fix a violation of C++ standard rules where unions are used for type-punning (TheQuantumPhysicist)\n+- #18225 util: Fail to parse empty string in parsemoney (MarcoFalke)\n+- #18270 util: Fail to parse whitespace-only strings in parsemoney(\u2026) (instead of parsing as zero) (practicalswift)\n+- #18316 util: Helpexamplerpc formatting (jonatack)\n+- #18357 Fix missing header in sync.h (promag)\n+- #18412 script: Fix `script_err_sig_pushonly` error string (theStack)\n+- #18416 util: Limit decimal range of numbers parsescript accepts (pierreN)\n+- #18503 init: Replace `URL_WEBSITE` with `PACKAGE_URL` (MarcoFalke)\n+- #18526 Remove PID file at the very end (hebasto)\n+- #18553 Avoid non-trivial global constants in SHA-NI code (sipa)\n+- #18665 Do not expose and consider `-logthreadnames` when it does not work (hebasto)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 0xb10c\n+- 251\n+- 4d55397500\n+- Aaron Clauson\n+- Adam Jonas\n+- Albert\n+- Amiti Uttarwar\n+- Andrew Chow\n+- Andrew Toth\n+- Anthony Towns\n+- Antoine Riard\n+- Ava Barron\n+- Ben Carman\n+- Ben Woosley\n+- Block Mechanic\n+- Brian Solon\n+- Bushstar\n+- Carl Dong\n+- Carnhof Daki\n+- Cory Fields\n+- Daki Carnhof\n+- Dan Gershony\n+- Daniel Kraft\n+- dannmat\n+- Danny-Scott\n+- darosior\n+- David O'Callaghan\n+- Dominik Spicher\n+- Elichai Turkel\n+- Emil Engler\n+- emu\n+- Fabian Jahr\n+- fanquake\n+- Filip Gospodinov\n+- Franck Royer\n+- Gast\u00f3n I. Silva\n+- gchuf\n+- Gleb Naumenko\n+- Gloria Zhao\n+- glowang\n+- Gr0kchain\n+- Gregory Sanders\n+- hackerrdave\n+- Harris\n+- hel0\n+- Hennadii Stepanov\n+- ianliu\n+- Igor Cota\n+- James Chiang\n+- James O'Beirne\n+- Jan Beich\n+- Jan Sarenik\n+- Jeffrey Czyz\n+- Jeremy Rubin\n+- JeremyCrookshank\n+- Jim Posen\n+- John Bampton\n+- John L. Jegutanis\n+- John Newbery\n+- Jon Atack\n+- Jon Layton\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Jorge Tim\u00f3n\n+- Karl-Johan Alm\n+- kodslav\n+- Larry Ruane\n+- Luke Dashjr\n+- malevolent\n+- MapleLaker\n+- marcaiaf\n+- MarcoFalke\n+- Marius Kj\u00e6rstad\n+- Mark Erhardt\n+- Mark Tyneway\n+- Martin Erlandsson\n+- Martin Zumsande\n+- Matt Corallo\n+- Matt Ward\n+- Michael Folkson\n+- Michael Polzer\n+- Micky Yun Chan\n+- Neha Narula\n+- nijynot\n+- naumenkogs\n+- NullFunctor\n+- Peter Bushnell\n+- pierrenn\n+- Pieter Wuille\n+- practicalswift\n+- randymcmillan\n+- Rjected\n+- Russell Yanofsky\n+- Samer Afach\n+- Samuel Dobson\n+- Sanjay K\n+- Sebastian Falbesoner\n+- setpill\n+- Sjors Provoost\n+- Stefan Richter\n+- stefanwouldgo\n+- Steven Roose\n+- Suhas Daftuar\n+- Suriyaa Sundararuban\n+- TheCharlatan\n+- Tim Akinbo\n+- Travin Keith\n+- tryphe\n+- Vasil Dimov\n+- Willy Ko\n+- Wilson Ccasihue S\n+- Wladimir J. van der Laan\n+- Yahia Chiheb\n+- Yancy Ribbens\n+- Yusuf Sahin HAMZA\n+- Zakk\n+- Zero\n+\n+As well as to everyone that helped with translations on\n+[Transifex](https://www.transifex.com/bitcoin/bitcoin/)."
      },
      {
        "sha": "9fbb29cb822f5d5b765f00a099c52da112e2957e",
        "filename": "doc/release-notes/release-notes-0.20.1.md",
        "status": "added",
        "additions": 158,
        "deletions": 0,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-notes/release-notes-0.20.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-notes/release-notes-0.20.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.20.1.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,158 @@\n+0.20.1 Release Notes\n+====================\n+\n+Bitcoin Core version 0.20.1 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.20.1/>\n+\n+This minor release includes various bug fixes and performance\n+improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes in some cases), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n+possible, but it might take some time if the data directory needs to be migrated. Old\n+wallet versions of Bitcoin Core are generally supported.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is supported and extensively tested on operating systems\n+using the Linux kernel, macOS 10.12+, and Windows 7 and newer.  Bitcoin\n+Core should also work on most other Unix-like systems but is not as\n+frequently tested on them.  It is not recommended to use Bitcoin Core on\n+unsupported systems.\n+\n+From Bitcoin Core 0.20.0 onwards, macOS versions earlier than 10.12 are no\n+longer supported. Additionally, Bitcoin Core does not yet change appearance\n+when macOS \"dark mode\" is activated.\n+\n+Known Bugs\n+==========\n+\n+The process for generating the source code release (\"tarball\") has changed in an\n+effort to make it more complete, however, there are a few regressions in\n+this release:\n+\n+- The generated `configure` script is currently missing, and you will need to\n+  install autotools and run `./autogen.sh` before you can run\n+  `./configure`. This is the same as when checking out from git.\n+\n+- Instead of running `make` simply, you should instead run\n+  `BITCOIN_GENBUILD_NO_GIT=1 make`.\n+\n+Notable changes\n+===============\n+\n+Changes regarding misbehaving peers\n+-----------------------------------\n+\n+Peers that misbehave (e.g. send us invalid blocks) are now referred to as\n+discouraged nodes in log output, as they're not (and weren't) strictly banned:\n+incoming connections are still allowed from them, but they're preferred for\n+eviction.\n+\n+Furthermore, a few additional changes are introduced to how discouraged\n+addresses are treated:\n+\n+- Discouraging an address does not time out automatically after 24 hours\n+  (or the `-bantime` setting). Depending on traffic from other peers,\n+  discouragement may time out at an indeterminate time.\n+\n+- Discouragement is not persisted over restarts.\n+\n+- There is no method to list discouraged addresses. They are not returned by\n+  the `listbanned` RPC. That RPC also no longer reports the `ban_reason`\n+  field, as `\"manually added\"` is the only remaining option.\n+\n+- Discouragement cannot be removed with the `setban remove` RPC command.\n+  If you need to remove a discouragement, you can remove all discouragements by\n+  stop-starting your node.\n+\n+Notification changes\n+--------------------\n+\n+`-walletnotify` notifications are now sent for wallet transactions that are\n+removed from the mempool because they conflict with a new block. These\n+notifications were sent previously before the v0.19 release, but had been\n+broken since that release (bug\n+[#18325](https://github.com/bitcoin/bitcoin/issues/18325)).\n+\n+PSBT changes\n+------------\n+\n+PSBTs will contain both the non-witness utxo and the witness utxo for segwit\n+inputs in order to restore compatibility with wallet software that are now\n+requiring the full previous transaction for segwit inputs. The witness utxo\n+is still provided to maintain compatibility with software which relied on its\n+existence to determine whether an input was segwit.\n+\n+0.20.1 change log\n+=================\n+\n+### Mining\n+- #19019 Fix GBT: Restore \"!segwit\" and \"csv\" to \"rules\" key (luke-jr)\n+\n+### P2P protocol and network code\n+- #19219 Replace automatic bans with discouragement filter (sipa)\n+\n+### Wallet\n+- #19300 Handle concurrent wallet loading (promag)\n+- #18982 Minimal fix to restore conflicted transaction notifications (ryanofsky)\n+\n+### RPC and other APIs\n+- #19524 Increment input value sum only once per UTXO in decodepsbt (fanquake)\n+- #19517 psbt: Increment input value sum only once per UTXO in decodepsbt (achow101)\n+- #19215 psbt: Include and allow both non_witness_utxo and witness_utxo for segwit inputs (achow101)\n+\n+### GUI\n+- #19097 Add missing QPainterPath include (achow101)\n+- #19059 update Qt base translations for macOS release (fanquake)\n+\n+### Build system\n+- #19152 improve build OS configure output (skmcontrib)\n+- #19536 qt, build: Fix QFileDialog for static builds (hebasto)\n+\n+### Tests and QA\n+- #19444 Remove cached directories and associated script blocks from appveyor config (sipsorcery)\n+- #18640 appveyor: Remove clcache (MarcoFalke)\n+\n+### Miscellaneous\n+- #19194 util: Don't reference errno when pthread fails (miztake)\n+- #18700 Fix locking on WSL using flock instead of fcntl (meshcollider)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Aaron Clauson\n+- Andrew Chow\n+- fanquake\n+- Hennadii Stepanov\n+- Jo\u00e3o Barbosa\n+- Luke Dashjr\n+- MarcoFalke\n+- MIZUTA Takeshi\n+- Pieter Wuille\n+- Russell Yanofsky\n+- sachinkm77\n+- Samuel Dobson\n+- Wladimir J. van der Laan\n+\n+As well as to everyone that helped with translations on\n+[Transifex](https://www.transifex.com/bitcoin/bitcoin/)."
      },
      {
        "sha": "3baba3d49bd082cd5d11341b2c09b26e56a9c3c4",
        "filename": "doc/release-notes/release-notes-0.21.0.md",
        "status": "added",
        "additions": 1336,
        "deletions": 0,
        "changes": 1336,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-notes/release-notes-0.21.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-notes/release-notes-0.21.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.21.0.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -0,0 +1,1336 @@\n+0.21.0 Release Notes\n+====================\n+\n+Bitcoin Core version 0.21.0 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.21.0/>\n+\n+This release includes new features, various bug fixes and performance\n+improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes in some cases), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n+possible, but it might take some time if the data directory needs to be migrated. Old\n+wallet versions of Bitcoin Core are generally supported.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is supported and extensively tested on operating systems\n+using the Linux kernel, macOS 10.12+, and Windows 7 and newer.  Bitcoin\n+Core should also work on most other Unix-like systems but is not as\n+frequently tested on them.  It is not recommended to use Bitcoin Core on\n+unsupported systems.\n+\n+From Bitcoin Core 0.20.0 onwards, macOS versions earlier than 10.12 are no\n+longer supported. Additionally, Bitcoin Core does not yet change appearance\n+when macOS \"dark mode\" is activated.\n+\n+The node's known peers are persisted to disk in a file called `peers.dat`. The\n+format of this file has been changed in a backwards-incompatible way in order to\n+accommodate the storage of Tor v3 and other BIP155 addresses. This means that if\n+the file is modified by 0.21.0 or newer then older versions will not be able to\n+read it. Those old versions, in the event of a downgrade, will log an error\n+message \"Incorrect keysize in addrman deserialization\" and will continue normal\n+operation as if the file was missing, creating a new empty one. (#19954, #20284)\n+\n+Notable changes\n+===============\n+\n+P2P and network changes\n+-----------------------\n+\n+- The mempool now tracks whether transactions submitted via the wallet or RPCs\n+  have been successfully broadcast. Every 10-15 minutes, the node will try to\n+  announce unbroadcast transactions until a peer requests it via a `getdata`\n+  message or the transaction is removed from the mempool for other reasons.\n+  The node will not track the broadcast status of transactions submitted to the\n+  node using P2P relay. This version reduces the initial broadcast guarantees\n+  for wallet transactions submitted via P2P to a node running the wallet. (#18038)\n+\n+- The size of the set of transactions that peers have announced and we consider\n+  for requests has been reduced from 100000 to 5000 (per peer), and further\n+  announcements will be ignored when that limit is reached. If you need to dump\n+  (very) large batches of transactions, exceptions can be made for trusted\n+  peers using the \"relay\" network permission. For localhost for example it can\n+  be enabled using the command line option `-whitelist=relay@127.0.0.1`.\n+  (#19988)\n+\n+- This release adds support for Tor version 3 hidden services, and rumoring them\n+  over the network to other peers using\n+  [BIP155](https://github.com/bitcoin/bips/blob/master/bip-0155.mediawiki).\n+  Version 2 hidden services are still fully supported by Bitcoin Core, but the\n+  Tor network will start\n+  [deprecating](https://blog.torproject.org/v2-deprecation-timeline) them in the\n+  coming months. (#19954)\n+\n+- The Tor onion service that is automatically created by setting the\n+  `-listenonion` configuration parameter will now be created as a Tor v3 service\n+  instead of Tor v2. The private key that was used for Tor v2 (if any) will be\n+  left untouched in the `onion_private_key` file in the data directory (see\n+  `-datadir`) and can be removed if not needed. Bitcoin Core will no longer\n+  attempt to read it. The private key for the Tor v3 service will be saved in a\n+  file named `onion_v3_private_key`. To use the deprecated Tor v2 service (not\n+  recommended), the `onion_private_key` can be copied over\n+  `onion_v3_private_key`, e.g.\n+  `cp -f onion_private_key onion_v3_private_key`. (#19954)\n+\n+- The client writes a file (`anchors.dat`) at shutdown with the network addresses\n+  of the node\u2019s two outbound block-relay-only peers (so called \"anchors\"). The\n+  next time the node starts, it reads this file and attempts to reconnect to those\n+  same two peers. This prevents an attacker from using node restarts to trigger a\n+  complete change in peers, which would be something they could use as part of an\n+  eclipse attack. (#17428)\n+\n+- This release adds support for serving\n+  [BIP157](https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki) compact\n+  filters to peers on the network when enabled using\n+  `-blockfilterindex=1 -peerblockfilters=1`. (#16442)\n+\n+- This release adds support for signets\n+  ([BIP325](https://github.com/bitcoin/bips/blob/master/bip-0325.mediawiki)) in\n+  addition to the existing mainnet, testnet, and regtest networks. Signets are\n+  centrally-controlled test networks, allowing them to be more predictable\n+  test environments than the older testnet. One public signet is maintained, and\n+  selectable using `-signet`. It is also possible to create personal signets.\n+  (#18267).\n+\n+- This release implements\n+  [BIP339](https://github.com/bitcoin/bips/blob/master/bip-0339.mediawiki)\n+  wtxid relay. When negotiated, transactions are announced using their wtxid\n+  instead of their txid. (#18044).\n+\n+- This release implements the proposed Taproot consensus rules\n+  ([BIP341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki) and\n+  [BIP342](https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki)),\n+  without activation on mainnet. Experimentation with Taproot can be done on\n+  signet, where its rules are already active. (#19553)\n+\n+Updated RPCs\n+------------\n+\n+- The `getpeerinfo` RPC has a new `network` field that provides the type of\n+  network (\"ipv4\", \"ipv6\", or \"onion\") that the peer connected through. (#20002)\n+\n+- The `getpeerinfo` RPC now has additional `last_block` and `last_transaction`\n+  fields that return the UNIX epoch time of the last block and the last *valid*\n+  transaction received from each peer. (#19731)\n+\n+- `getnetworkinfo` now returns two new fields, `connections_in` and\n+  `connections_out`, that provide the number of inbound and outbound peer\n+  connections. These new fields are in addition to the existing `connections`\n+  field, which returns the total number of peer connections. (#19405)\n+\n+- Exposed transaction version numbers are now treated as unsigned 32-bit\n+  integers instead of signed 32-bit integers. This matches their treatment in\n+  consensus logic. Versions greater than 2 continue to be non-standard\n+  (matching previous behavior of smaller than 1 or greater than 2 being\n+  non-standard). Note that this includes the `joinpsbt` command, which combines\n+  partially-signed transactions by selecting the highest version number.\n+  (#16525)\n+\n+- `getmempoolinfo` now returns an additional `unbroadcastcount` field. The\n+  mempool tracks locally submitted transactions until their initial broadcast\n+  is acknowledged by a peer. This field returns the count of transactions\n+  waiting for acknowledgement.\n+\n+- Mempool RPCs such as `getmempoolentry` and `getrawmempool` with\n+  `verbose=true` now return an additional `unbroadcast` field. This indicates\n+  whether initial broadcast of the transaction has been acknowledged by a\n+  peer. `getmempoolancestors` and `getmempooldescendants` are also updated.\n+\n+- The `getpeerinfo` RPC no longer returns the `banscore` field unless the configuration\n+  option `-deprecatedrpc=banscore` is used. The `banscore` field will be fully\n+  removed in the next major release. (#19469)\n+\n+- The `testmempoolaccept` RPC returns `vsize` and a `fees` object with the `base` fee\n+  if the transaction would pass validation. (#19940)\n+\n+- The `getpeerinfo` RPC now returns a `connection_type` field. This indicates\n+  the type of connection established with the peer. It will return one of six\n+  options. For more information, see the `getpeerinfo` help documentation.\n+  (#19725)\n+\n+- The `getpeerinfo` RPC no longer returns the `addnode` field by default. This\n+  field will be fully removed in the next major release.  It can be accessed\n+  with the configuration option `-deprecatedrpc=getpeerinfo_addnode`. However,\n+  it is recommended to instead use the `connection_type` field (it will return\n+  `manual` when addnode is true). (#19725)\n+\n+- The `getpeerinfo` RPC no longer returns the `whitelisted` field by default. \n+  This field will be fully removed in the next major release. It can be accessed \n+  with the configuration option `-deprecatedrpc=getpeerinfo_whitelisted`. However, \n+  it is recommended to instead use the `permissions` field to understand if specific \n+  privileges have been granted to the peer. (#19770)\n+\n+- The `walletcreatefundedpsbt` RPC call will now fail with\n+  `Insufficient funds` when inputs are manually selected but are not enough to cover\n+  the outputs and fee. Additional inputs can automatically be added through the\n+  new `add_inputs` option. (#16377)\n+\n+- The `fundrawtransaction` RPC now supports `add_inputs` option that when `false`\n+  prevents adding more inputs if necessary and consequently the RPC fails.\n+\n+Changes to Wallet or GUI related RPCs can be found in the GUI or Wallet section below.\n+\n+New RPCs\n+--------\n+\n+- The `getindexinfo` RPC returns the actively running indices of the node,\n+  including their current sync status and height. It also accepts an `index_name`\n+  to specify returning the status of that index only. (#19550)\n+\n+Build System\n+------------\n+\n+Updated settings\n+----------------\n+\n+- The same ZeroMQ notification (e.g. `-zmqpubhashtx=address`) can now be\n+  specified multiple times to publish the same notification to different ZeroMQ\n+  sockets. (#18309)\n+\n+- The `-banscore` configuration option, which modified the default threshold for\n+  disconnecting and discouraging misbehaving peers, has been removed as part of\n+  changes in 0.20.1 and in this release to the handling of misbehaving peers.\n+  Refer to \"Changes regarding misbehaving peers\" in the 0.20.1 release notes for\n+  details. (#19464)\n+\n+- The `-debug=db` logging category, which was deprecated in 0.20 and replaced by\n+  `-debug=walletdb` to distinguish it from `coindb`, has been removed. (#19202)\n+\n+- A `download` permission has been extracted from the `noban` permission. For\n+  compatibility, `noban` implies the `download` permission, but this may change\n+  in future releases. Refer to the help of the affected settings `-whitebind`\n+  and `-whitelist` for more details. (#19191)\n+\n+- Netmasks that contain 1-bits after 0-bits (the 1-bits are not contiguous on\n+  the left side, e.g. 255.0.255.255) are no longer accepted. They are invalid\n+  according to RFC 4632. Netmasks are used in the `-rpcallowip` and `-whitelist`\n+  configuration options and in the `setban` RPC. (#19628)\n+\n+- The `-blocksonly` setting now completely disables fee estimation. (#18766)\n+\n+Changes to Wallet or GUI related settings can be found in the GUI or Wallet section below.\n+\n+Tools and Utilities\n+-------------------\n+\n+- A new `bitcoin-cli -netinfo` command provides a network peer connections\n+  dashboard that displays data from the `getpeerinfo` and `getnetworkinfo` RPCs\n+  in a human-readable format. An optional integer argument from `0` to `4` may\n+  be passed to see increasing levels of detail. (#19643)\n+\n+- A new `bitcoin-cli -generate` command, equivalent to RPC `generatenewaddress`\n+  followed by `generatetoaddress`, can generate blocks for command line testing\n+  purposes. This is a client-side version of the former `generate` RPC. See the\n+  help for details. (#19133)\n+\n+- The `bitcoin-cli -getinfo` command now displays the wallet name and balance for\n+  each of the loaded wallets when more than one is loaded (e.g. in multiwallet\n+  mode) and a wallet is not specified with `-rpcwallet`. (#18594)\n+\n+- The `connections` field of `bitcoin-cli -getinfo` is now expanded to return a JSON\n+  object with `in`, `out` and `total` numbers of peer connections. It previously\n+  returned a single integer value for the total number of peer connections. (#19405)\n+\n+New settings\n+------------\n+\n+- The `startupnotify` option is used to specify a command to\n+  execute when Bitcoin Core has finished with its startup\n+  sequence. (#15367)\n+\n+Wallet\n+------\n+\n+- Backwards compatibility has been dropped for two `getaddressinfo` RPC\n+  deprecations, as notified in the 0.20 release notes. The deprecated `label`\n+  field has been removed as well as the deprecated `labels` behavior of\n+  returning a JSON object containing `name` and `purpose` key-value pairs. Since\n+  0.20, the `labels` field returns a JSON array of label names. (#19200)\n+\n+- To improve wallet privacy, the frequency of wallet rebroadcast attempts is\n+  reduced from approximately once every 15 minutes to once every 12-36 hours.\n+  To maintain a similar level of guarantee for initial broadcast of wallet\n+  transactions, the mempool tracks these transactions as a part of the newly\n+  introduced unbroadcast set. See the \"P2P and network changes\" section for\n+  more information on the unbroadcast set. (#18038)\n+\n+- The `sendtoaddress` and `sendmany` RPCs accept an optional `verbose=True`\n+  argument to also return the fee reason about the sent tx. (#19501)\n+\n+- The wallet can create a transaction without change even when the keypool is\n+  empty. Previously it failed. (#17219)\n+\n+- The `-salvagewallet` startup option has been removed. A new `salvage` command\n+  has been added to the `bitcoin-wallet` tool which performs the salvage\n+  operations that `-salvagewallet` did. (#18918)\n+\n+- A new configuration flag `-maxapsfee` has been added, which sets the max\n+  allowed avoid partial spends (APS) fee. It defaults to 0 (i.e. fee is the\n+  same with and without APS). Setting it to -1 will disable APS, unless\n+  `-avoidpartialspends` is set. (#14582)\n+\n+- The wallet will now avoid partial spends (APS) by default, if this does not\n+  result in a difference in fees compared to the non-APS variant. The allowed\n+  fee threshold can be adjusted using the new `-maxapsfee` configuration\n+  option. (#14582)\n+\n+- The `createwallet`, `loadwallet`, and `unloadwallet` RPCs now accept\n+  `load_on_startup` options to modify the settings list. Unless these options\n+  are explicitly set to true or false, the list is not modified, so the RPC\n+  methods remain backwards compatible. (#15937)\n+\n+- A new `send` RPC with similar syntax to `walletcreatefundedpsbt`, including\n+  support for coin selection and a custom fee rate, is added. The `send` RPC is\n+  experimental and may change in subsequent releases. (#16378)\n+\n+- The `estimate_mode` parameter is now case-insensitive in the `bumpfee`,\n+  `fundrawtransaction`, `sendmany`, `sendtoaddress`, `send` and\n+  `walletcreatefundedpsbt` RPCs. (#11413)\n+\n+- The `bumpfee` RPC now uses `conf_target` rather than `confTarget` in the\n+  options. (#11413)\n+\n+- `fundrawtransaction` and `walletcreatefundedpsbt` when used with the\n+  `lockUnspents` argument now lock manually selected coins, in addition to\n+  automatically selected coins. Note that locked coins are never used in\n+  automatic coin selection, but can still be manually selected. (#18244)\n+\n+- The `-zapwallettxes` startup option has been removed and its functionality\n+  removed from the wallet.  This option was originally intended to allow for\n+  rescuing wallets which were affected by a malleability attack. More recently,\n+  it has been used in the fee bumping of transactions that did not signal RBF.\n+  This functionality has been superseded with the abandon transaction feature. (#19671)\n+\n+- The error code when no wallet is loaded, but a wallet RPC is called, has been\n+  changed from `-32601` (method not found) to `-18` (wallet not found).\n+  (#20101)\n+\n+### Automatic wallet creation removed\n+\n+Bitcoin Core will no longer automatically create new wallets on startup. It will\n+load existing wallets specified by `-wallet` options on the command line or in\n+`bitcoin.conf` or `settings.json` files. And by default it will also load a\n+top-level unnamed (\"\") wallet. However, if specified wallets don't exist,\n+Bitcoin Core will now just log warnings instead of creating new wallets with\n+new keys and addresses like previous releases did.\n+\n+New wallets can be created through the GUI (which has a more prominent create\n+wallet option), through the `bitcoin-cli createwallet` or `bitcoin-wallet\n+create` commands, or the `createwallet` RPC. (#15454, #20186)\n+\n+### Experimental Descriptor Wallets\n+\n+Please note that Descriptor Wallets are still experimental and not all expected functionality\n+is available. Additionally there may be some bugs and current functions may change in the future.\n+Bugs and missing functionality can be reported to the [issue tracker](https://github.com/bitcoin/bitcoin/issues).\n+\n+0.21 introduces a new type of wallet - Descriptor Wallets. Descriptor Wallets store\n+scriptPubKey information using output descriptors. This is in contrast to the Legacy Wallet\n+structure where keys are used to implicitly generate scriptPubKeys and addresses. Because of this\n+shift to being script based instead of key based, many of the confusing things that Legacy\n+Wallets do are not possible with Descriptor Wallets. Descriptor Wallets use a definition\n+of \"mine\" for scripts which is simpler and more intuitive than that used by Legacy Wallets.\n+Descriptor Wallets also uses different semantics for watch-only things and imports.\n+\n+As Descriptor Wallets are a new type of wallet, their introduction does not affect existing wallets.\n+Users who already have a Bitcoin Core wallet can continue to use it as they did before without\n+any change in behavior. Newly created Legacy Wallets (which remains the default type of wallet) will\n+behave as they did in previous versions of Bitcoin Core.\n+\n+The differences between Descriptor Wallets and Legacy Wallets are largely limited to non user facing\n+things. They are intended to behave similarly except for the import/export and watchonly functionality\n+as described below.\n+\n+#### Creating Descriptor Wallets\n+\n+Descriptor wallets are not the default type of wallet.\n+\n+In the GUI, a checkbox has been added to the Create Wallet Dialog to indicate that a\n+Descriptor Wallet should be created. And a `descriptors` option has been added to `createwallet` RPC.\n+Setting `descriptors` to `true` will create a Descriptor Wallet instead of a Legacy Wallet.\n+\n+Without those options being set, a Legacy Wallet will be created instead.\n+\n+#### `IsMine` Semantics\n+\n+`IsMine` refers to the function used to determine whether a script belongs to the wallet.\n+This is used to determine whether an output belongs to the wallet. `IsMine` in Legacy Wallets\n+returns true if the wallet would be able to sign an input that spends an output with that script.\n+Since keys can be involved in a variety of different scripts, this definition for `IsMine` can\n+lead to many unexpected scripts being considered part of the wallet.\n+\n+With Descriptor Wallets, descriptors explicitly specify the set of scripts that are owned by\n+the wallet. Since descriptors are deterministic and easily enumerable, users will know exactly\n+what scripts the wallet will consider to belong to it. Additionally the implementation of `IsMine`\n+in Descriptor Wallets is far simpler than for Legacy Wallets. Notably, in Legacy Wallets, `IsMine`\n+allowed for users to take one type of address (e.g. P2PKH), mutate it into another address type\n+(e.g. P2WPKH), and the wallet would still detect outputs sending to the new address type\n+even without that address being requested from the wallet. Descriptor Wallets do not\n+allow for this and will only watch for the addresses that were explicitly requested from the wallet.\n+\n+These changes to `IsMine` will make it easier to reason about what scripts the wallet will\n+actually be watching for in outputs. However for the vast majority of users, this change is\n+largely transparent and will not have noticeable effect.\n+\n+#### Imports and Exports\n+\n+In Legacy Wallets, raw scripts and keys could be imported to the wallet. Those imported scripts\n+and keys are treated separately from the keys generated by the wallet. This complicates the `IsMine`\n+logic as it has to distinguish between spendable and watchonly.\n+\n+Descriptor Wallets handle importing scripts and keys differently. Only complete descriptors can be\n+imported. These descriptors are then added to the wallet as if it were a descriptor generated by\n+the wallet itself. This simplifies the `IsMine` logic so that it no longer has to distinguish\n+between spendable and watchonly. As such, the watchonly model for Descriptor Wallets is also\n+different and described in more detail in the next section.\n+\n+To import into a Descriptor Wallet, a new `importdescriptors` RPC has been added that uses a syntax\n+similar to that of `importmulti`.\n+\n+As Legacy Wallets and Descriptor Wallets use different mechanisms for storing and importing scripts and keys\n+the existing import RPCs have been disabled for descriptor wallets.\n+New export RPCs for Descriptor Wallets have not yet been added.\n+\n+The following RPCs are disabled for Descriptor Wallets:\n+\n+* `importprivkey`\n+* `importpubkey`\n+* `importaddress`\n+* `importwallet`\n+* `dumpprivkey`\n+* `dumpwallet`\n+* `importmulti`\n+* `addmultisigaddress`\n+* `sethdseed`\n+\n+#### Watchonly Wallets\n+\n+A Legacy Wallet contains both private keys and scripts that were being watched.\n+Those watched scripts would not contribute to your normal balance. In order to see the watchonly\n+balance and to use watchonly things in transactions, an `include_watchonly` option was added\n+to many RPCs that would allow users to do that. However it is easy to forget to include this option.\n+\n+Descriptor Wallets move to a per-wallet watchonly model. Instead an entire wallet is considered to be\n+watchonly depending on whether it was created with private keys disabled. This eliminates the need\n+to distinguish between things that are watchonly and things that are not within a wallet itself.\n+\n+This change does have a caveat. If a Descriptor Wallet with private keys *enabled* has\n+a multiple key descriptor without all of the private keys (e.g. `multi(...)` with only one private key),\n+then the wallet will fail to sign and broadcast transactions. Such wallets would need to use the PSBT\n+workflow but the typical GUI Send, `sendtoaddress`, etc. workflows would still be available, just\n+non-functional.\n+\n+This issue is worsened if the wallet contains both single key (e.g. `wpkh(...)`) descriptors and such\n+multiple key descriptors as some transactions could be signed and broadcast and others not. This is\n+due to some transactions containing only single key inputs, while others would contain both single\n+key and multiple key inputs, depending on which are available and how the coin selection algorithm\n+selects inputs. However this is not considered to be a supported use case; multisigs\n+should be in their own wallets which do not already have descriptors. Although users cannot export\n+descriptors with private keys for now as explained earlier.\n+\n+#### BIP 44/49/84 Support\n+\n+The change to using descriptors changes the default derivation paths used by Bitcoin Core\n+to adhere to BIP 44/49/84. Descriptors with different derivation paths can be imported without\n+issue.\n+\n+#### SQLite Database Backend\n+\n+Descriptor wallets use SQLite for the wallet file instead of the Berkeley DB used in legacy wallets.\n+This will break compatibility with any existing tooling that operates on wallets, however compatibility\n+was already being broken by the move to descriptors.\n+\n+### Wallet RPC changes\n+\n+- The `upgradewallet` RPC replaces the `-upgradewallet` command line option.\n+  (#15761)\n+\n+- The `settxfee` RPC will fail if the fee was set higher than the `-maxtxfee`\n+  command line setting. The wallet will already fail to create transactions\n+  with fees higher than `-maxtxfee`. (#18467)\n+\n+- A new `fee_rate` parameter/option denominated in satoshis per vbyte (sat/vB)\n+  is introduced to the `sendtoaddress`, `sendmany`, `fundrawtransaction` and\n+  `walletcreatefundedpsbt` RPCs as well as to the experimental new `send`\n+  RPC. The legacy `feeRate` option in `fundrawtransaction` and\n+  `walletcreatefundedpsbt` still exists for setting a fee rate in BTC per 1,000\n+  vbytes (BTC/kvB), but it is expected to be deprecated soon to avoid\n+  confusion. For these RPCs, the fee rate error message is updated from BTC/kB\n+  to sat/vB and the help documentation in BTC/kB is updated to BTC/kvB. The\n+  `send` and `sendtoaddress` RPC examples are updated to aid users in creating\n+  transactions with explicit fee rates. (#20305, #11413)\n+\n+- The `bumpfee` RPC `fee_rate` option is changed from BTC/kvB to sat/vB and the\n+  help documentation is updated. Users are warned that this is a breaking API\n+  change, but it should be relatively benign: the large (100,000 times)\n+  difference between BTC/kvB and sat/vB units means that a transaction with a\n+  fee rate mistakenly calculated in BTC/kvB rather than sat/vB should raise an\n+  error due to the fee rate being set too low. In the worst case, the\n+  transaction may send at 1 sat/vB, but as Replace-by-Fee (BIP125 RBF) is active\n+  by default when an explicit fee rate is used, the transaction fee can be\n+  bumped. (#20305)\n+\n+GUI changes\n+-----------\n+\n+- Wallets created or loaded in the GUI will now be automatically loaded on\n+  startup, so they don't need to be manually reloaded next time Bitcoin Core is\n+  started. The list of wallets to load on startup is stored in\n+  `\\<datadir\\>/settings.json` and augments any command line or `bitcoin.conf`\n+  `-wallet=` settings that specify more wallets to load. Wallets that are\n+  unloaded in the GUI get removed from the settings list so they won't load\n+  again automatically next startup. (#19754)\n+\n+- The GUI Peers window no longer displays a \"Ban Score\" field. This is part of\n+  changes in 0.20.1 and in this release to the handling of misbehaving\n+  peers. Refer to \"Changes regarding misbehaving peers\" in the 0.20.1 release\n+  notes for details. (#19512)\n+\n+Low-level changes\n+=================\n+\n+RPC\n+---\n+\n+- To make RPC `sendtoaddress` more consistent with `sendmany` the following error\n+    `sendtoaddress` codes were changed from `-4` to `-6`:\n+  - Insufficient funds\n+  - Fee estimation failed\n+  - Transaction has too long of a mempool chain\n+\n+- The `sendrawtransaction` error code for exceeding `maxfeerate` has been changed from\n+  `-26` to `-25`. The error string has been changed from \"absurdly-high-fee\" to\n+  \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate).\" The\n+  `testmempoolaccept` RPC returns `max-fee-exceeded` rather than `absurdly-high-fee`\n+  as the `reject-reason`. (#19339)\n+\n+- To make wallet and rawtransaction RPCs more consistent, the error message for\n+  exceeding maximum feerate has been changed to \"Fee exceeds maximum configured by user\n+  (e.g. -maxtxfee, maxfeerate).\" (#19339)\n+\n+Tests\n+-----\n+\n+- The BIP 325 default signet can be enabled by the `-chain=signet` or `-signet`\n+  setting. The settings `-signetchallenge` and `-signetseednode` allow\n+  enabling a custom signet.\n+\n+- The `generateblock` RPC allows testers using regtest mode to\n+  generate blocks that consist of a custom set of transactions. (#17693)\n+\n+0.21.0 change log\n+=================\n+\n+### Consensus\n+- #18267 BIP-325: Signet (kallewoof)\n+- #20016 uint256: 1 is a constant (ajtowns)\n+- #20006 Fix misleading error message: Clean stack rule (sanket1729)\n+- #19953 Implement BIP 340-342 validation (Schnorr/taproot/tapscript) (sipa)\n+- #20169 Taproot follow-up: Make ComputeEntrySchnorr and ComputeEntryECDSA const to clarify contract (practicalswift)\n+\n+### Policy\n+- #18766 Disable fee estimation in blocksonly mode (darosior)\n+- #19630 Cleanup fee estimation code (darosior)\n+- #20165 Only relay Taproot spends if next block has it active (sipa)\n+\n+### Mining\n+- #17946 Fix GBT: Restore \"!segwit\" and \"csv\" to \"rules\" key (luke-jr)\n+\n+### Privacy\n+- #16432 Add privacy to the Overview page (hebasto)\n+- #18861 Do not answer GETDATA for to-be-announced tx (sipa)\n+- #18038 Mempool tracks locally submitted transactions to improve wallet privacy (amitiuttarwar)\n+- #19109 Only allow getdata of recently announced invs (sipa)\n+\n+### Block and transaction handling\n+- #17737 Add ChainstateManager, remove BlockManager global (jamesob)\n+- #18960 indexes: Add compact block filter headers cache (jnewbery)\n+- #13204 Faster sigcache nonce (JeremyRubin)\n+- #19088 Use std::chrono throughout some validation functions (fanquake)\n+- #19142 Make VerifyDB level 4 interruptible (MarcoFalke)\n+- #17994 Flush undo files after last block write (kallewoof)\n+- #18990 log: Properly log txs rejected from mempool (MarcoFalke)\n+- #18984 Remove unnecessary input blockfile SetPos (dgenr8)\n+- #19526 log: Avoid treating remote misbehvior as local system error (MarcoFalke)\n+- #18044 Use wtxid for transaction relay (sdaftuar)\n+- #18637 coins: allow cache resize after init (jamesob)\n+- #19854 Avoid locking CTxMemPool::cs recursively in simple cases (hebasto)\n+- #19478 Remove CTxMempool::mapLinks data structure member (JeremyRubin)\n+- #19927 Reduce direct `g_chainman` usage (dongcarl)\n+- #19898 log: print unexpected version warning in validation log category (n-thumann)\n+- #20036 signet: Add assumed values for default signet (MarcoFalke)\n+- #20048 chainparams: do not log signet startup messages for other chains (jonatack)\n+- #19339 re-delegate absurd fee checking from mempool to clients (glozow)\n+- #20035 signet: Fix uninitialized read in validation (MarcoFalke)\n+- #20157 Bugfix: chainparams: Add missing (always enabled) Taproot deployment for Signet (luke-jr)\n+- #20263 Update assumed chain params (MarcoFalke)\n+- #20372 Avoid signed integer overflow when loading a mempool.dat file with a malformed time field (practicalswift)\n+- #18621 script: Disallow silent bool -> cscript conversion (MarcoFalke)\n+- #18612, #18732 script: Remove undocumented and unused operator+ (MarcoFalke)\n+- #19317 Add a left-justified width field to `log2_work` component for a uniform debug.log output (jamesgmorgan)\n+\n+### P2P protocol and network code\n+- #18544 Limit BIP37 filter lifespan (active between `filterload`..`filterclear`) (theStack)\n+- #18806 Remove is{Empty,Full} flags from CBloomFilter, clarify CVE fix (theStack)\n+- #18512 Improve asmap checks and add sanity check (sipa)\n+- #18877 Serve cfcheckpt requests (jnewbery)\n+- #18895 Unbroadcast followups: rpcs, nLastResend, mempool sanity check (gzhao408)\n+- #19010 net processing: Add support for `getcfheaders` (jnewbery)\n+- #16939 Delay querying DNS seeds (ajtowns)\n+- #18807 Unbroadcast follow-ups (amitiuttarwar)\n+- #19044 Add support for getcfilters (jnewbery)\n+- #19084 improve code documentation for dns seed behaviour (ajtowns)\n+- #19260 disconnect peers that send filterclear + update existing filter msg disconnect logic (gzhao408)\n+- #19284 Add seed.bitcoin.wiz.biz to DNS seeds (wiz)\n+- #19322 split PushInventory() (jnewbery)\n+- #19204 Reduce inv traffic during IBD (MarcoFalke)\n+- #19470 banlist: log post-swept banlist size at startup (fanquake)\n+- #19191 Extract download permission from noban (MarcoFalke)\n+- #14033 Drop `CADDR_TIME_VERSION` checks now that `MIN_PEER_PROTO_VERSION` is greater (Empact)\n+- #19464 net, rpc: remove -banscore option, deprecate banscore in getpeerinfo (jonatack)\n+- #19514 [net/net processing] check banman pointer before dereferencing (jnewbery)\n+- #19512 banscore updates to gui, tests, release notes (jonatack)\n+- #19360 improve encapsulation of CNetAddr (vasild)\n+- #19217 disambiguate block-relay-only variable names from blocksonly variables (glowang)\n+- #19473 Add -networkactive option (hebasto)\n+- #19472 [net processing] Reduce `cs_main` scope in MaybeDiscourageAndDisconnect() (jnewbery)\n+- #19583 clean up Misbehaving() (jnewbery)\n+- #19534 save the network type explicitly in CNetAddr (vasild)\n+- #19569 Enable fetching of orphan parents from wtxid peers (sipa)\n+- #18991 Cache responses to GETADDR to prevent topology leaks (naumenkogs)\n+- #19596 Deduplicate parent txid loop of requested transactions and missing parents of orphan transactions (sdaftuar)\n+- #19316 Cleanup logic around connection types (amitiuttarwar)\n+- #19070 Signal support for compact block filters with `NODE_COMPACT_FILTERS` (jnewbery)\n+- #19705 Shrink CAddress from 48 to 40 bytes on x64 (vasild)\n+- #19704 Move ProcessMessage() to PeerLogicValidation (jnewbery)\n+- #19628 Change CNetAddr::ip to have flexible size (vasild)\n+- #19797 Remove old check for 3-byte shifted IP addresses from pre-0.2.9 nodes (#19797)\n+- #19607 Add Peer struct for per-peer data in net processing (jnewbery)\n+- #19857 improve nLastBlockTime and nLastTXTime documentation (jonatack)\n+- #19724 Cleanup connection types- followups (amitiuttarwar)\n+- #19670 Protect localhost and block-relay-only peers from eviction (sdaftuar)\n+- #19728 Increase the ip address relay branching factor for unreachable networks (sipa)\n+- #19879 Miscellaneous wtxid followups (amitiuttarwar)\n+- #19697 Improvements on ADDR caching (naumenkogs)\n+- #17785 Unify Send and Receive protocol versions (hebasto)\n+- #19845 CNetAddr: add support to (un)serialize as ADDRv2 (vasild)\n+- #19107 Move all header verification into the network layer, extend logging (troygiorshev)\n+- #20003 Exit with error message if -proxy is specified without arguments (instead of continuing without proxy server) (practicalswift)\n+- #19991 Use alternative port for incoming Tor connections (hebasto)\n+- #19723 Ignore unknown messages before VERACK (sdaftuar)\n+- #19954 Complete the BIP155 implementation and upgrade to TORv3 (vasild)\n+- #20119 BIP155 follow-ups (sipa)\n+- #19988 Overhaul transaction request logic (sipa)\n+- #17428 Try to preserve outbound block-relay-only connections during restart (hebasto)\n+- #19911 Guard `vRecvGetData` with `cs_vRecv` and `orphan_work_set` with `g_cs_orphans` (narula)\n+- #19753 Don't add AlreadyHave transactions to recentRejects (troygiorshev)\n+- #20187 Test-before-evict bugfix and improvements for block-relay-only peers (sdaftuar)\n+- #20237 Hardcoded seeds update for 0.21 (laanwj)\n+- #20212 Fix output of peer address in version message (vasild)\n+- #20284 Ensure old versions don't parse peers.dat (vasild)\n+- #20405 Avoid calculating onion address checksum when version is not 3 (lontivero)\n+- #20564 Don't send 'sendaddrv2' to pre-70016 software, and send before 'verack' (sipa)\n+- #20660 Move signet onion seed from v2 to v3 (Sjors)\n+\n+### Wallet\n+- #18262 Exit selection when `best_waste` is 0 (achow101)\n+- #17824 Prefer full destination groups in coin selection (fjahr)\n+- #17219 Allow transaction without change if keypool is empty (Sjors)\n+- #15761 Replace -upgradewallet startup option with upgradewallet RPC (achow101)\n+- #18671 Add BlockUntilSyncedToCurrentChain to dumpwallet (MarcoFalke)\n+- #16528 Native Descriptor Wallets using DescriptorScriptPubKeyMan (achow101)\n+- #18777 Recommend absolute path for dumpwallet (MarcoFalke)\n+- #16426 Reverse `cs_main`, `cs_wallet` lock order and reduce `cs_main` locking (ariard)\n+- #18699 Avoid translating RPC errors (MarcoFalke)\n+- #18782 Make sure no DescriptorScriptPubKeyMan or WalletDescriptor members are left uninitialized after construction (practicalswift)\n+- #9381 Remove CWalletTx merging logic from AddToWallet (ryanofsky)\n+- #16946 Include a checksum of encrypted private keys (achow101)\n+- #17681 Keep inactive seeds after sethdseed and derive keys from them as needed (achow101)\n+- #18918 Move salvagewallet into wallettool (achow101)\n+- #14988 Fix for confirmed column in csv export for payment to self transactions (benthecarman)\n+- #18275 Error if an explicit fee rate was given but the needed fee rate differed (kallewoof)\n+- #19054 Skip hdKeypath of 'm' when determining inactive hd seeds (achow101)\n+- #17938 Disallow automatic conversion between disparate hash types (Empact)\n+- #19237 Check size after unserializing a pubkey (elichai)\n+- #11413 sendtoaddress/sendmany: Add explicit feerate option (kallewoof)\n+- #18850 Fix ZapSelectTx to sync wallet spends (bvbfan)\n+- #18923 Never schedule MaybeCompactWalletDB when `-flushwallet` is off (MarcoFalke)\n+- #19441 walletdb: Don't reinitialize desc cache with multiple cache entries (achow101)\n+- #18907 walletdb: Don't remove database transaction logs and instead error (achow101)\n+- #19334 Introduce WalletDatabase abstract class (achow101)\n+- #19335 Cleanup and separate BerkeleyDatabase and BerkeleyBatch (achow101)\n+- #19102 Introduce and use DummyDatabase instead of dummy BerkeleyDatabase (achow101)\n+- #19568 Wallet should not override signing errors (fjahr)\n+- #17204 Do not turn `OP_1NEGATE` in scriptSig into `0x0181` in signing code (sipa) (meshcollider)\n+- #19457 Cleanup wallettool salvage and walletdb extraneous declarations (achow101)\n+- #15937 Add loadwallet and createwallet `load_on_startup` options (ryanofsky)\n+- #16841 Replace GetScriptForWitness with GetScriptForDestination (meshcollider)\n+- #14582 always do avoid partial spends if fees are within a specified range (kallewoof)\n+- #19743 -maxapsfee follow-up (kallewoof)\n+- #19289 GetWalletTx and IsMine require `cs_wallet` lock (promag)\n+- #19671 Remove -zapwallettxes (achow101)\n+- #19805 Avoid deserializing unused records when salvaging (achow101)\n+- #19754 wallet, gui: Reload previously loaded wallets on startup (achow101)\n+- #19738 Avoid multiple BerkeleyBatch in DelAddressBook (promag)\n+- #19919 bugfix: make LoadWallet assigns status always (AkioNak)\n+- #16378 The ultimate send RPC (Sjors)\n+- #15454 Remove the automatic creation and loading of the default wallet (achow101)\n+- #19501 `send*` RPCs in the wallet returns the \"fee reason\" (stackman27)\n+- #20130 Remove db mode string (S3RK)\n+- #19077 Add sqlite as an alternative wallet database and use it for new descriptor wallets (achow101)\n+- #20125 Expose database format in getwalletinfo (promag)\n+- #20198 Show name, format and if uses descriptors in bitcoin-wallet tool (jonasschnelli)\n+- #20216 Fix buffer over-read in SQLite file magic check (theStack)\n+- #20186 Make -wallet setting not create wallets (ryanofsky)\n+- #20230 Fix bug when just created encrypted wallet cannot get address (hebasto)\n+- #20282 Change `upgradewallet` return type to be an object (jnewbery)\n+- #20220 Explicit fee rate follow-ups/fixes for 0.21 (jonatack)\n+- #20199 Ignore (but warn) on duplicate -wallet parameters (jonasschnelli)\n+- #20324 Set DatabaseStatus::SUCCESS in MakeSQLiteDatabase (MarcoFalke)\n+- #20266 Fix change detection of imported internal descriptors (achow101)\n+- #20153 Do not import a descriptor with hardened derivations into a watch-only wallet (S3RK)\n+- #20344 Fix scanning progress calculation for single block range (theStack)\n+- #19502 Bugfix: Wallet: Soft-fail exceptions within ListWalletDir file checks (luke-jr)\n+- #20378 Fix potential division by 0 in WalletLogPrintf (jonasschnelli)\n+- #18836 Upgradewallet fixes and additional tests (achow101)\n+- #20139 Do not return warnings from UpgradeWallet() (stackman27)\n+- #20305 Introduce `fee_rate` sat/vB param/option (jonatack)\n+- #20426 Allow zero-fee fundrawtransaction/walletcreatefundedpsbt and other fixes (jonatack)\n+- #20573 wallet, bugfix: allow send with string `fee_rate` amounts (jonatack)\n+\n+### RPC and other APIs\n+- #18574 cli: Call getbalances.ismine.trusted instead of getwalletinfo.balance (jonatack)\n+- #17693 Add `generateblock` to mine a custom set of transactions (andrewtoth)\n+- #18495 Remove deprecated migration code (vasild)\n+- #18493 Remove deprecated \"size\" from mempool txs (vasild)\n+- #18467 Improve documentation and return value of settxfee (fjahr)\n+- #18607 Fix named arguments in documentation (MarcoFalke)\n+- #17831 doc: Fix and extend getblockstats examples (asoltys)\n+- #18785 Prevent valgrind false positive in `rest_blockhash_by_height` (ryanofsky)\n+- #18999 log: Remove \"No rpcpassword set\" from logs (MarcoFalke)\n+- #19006 Avoid crash when `g_thread_http` was never started (MarcoFalke)\n+- #18594 cli: Display multiwallet balances in -getinfo (jonatack)\n+- #19056 Make gettxoutsetinfo/GetUTXOStats interruptible (MarcoFalke)\n+- #19112 Remove special case for unknown service flags (MarcoFalke)\n+- #18826 Expose txinwitness for coinbase in JSON form from RPC (rvagg)\n+- #19282 Rephrase generatetoaddress help, and use `PACKAGE_NAME` (luke-jr)\n+- #16377 don't automatically append inputs in walletcreatefundedpsbt (Sjors)\n+- #19200 Remove deprecated getaddressinfo fields (jonatack)\n+- #19133 rpc, cli, test: add bitcoin-cli -generate command (jonatack)\n+- #19469 Deprecate banscore field in getpeerinfo (jonatack)\n+- #16525 Dump transaction version as an unsigned integer in RPC/TxToUniv (TheBlueMatt)\n+- #19555 Deduplicate WriteHDKeypath() used in decodepsbt (theStack)\n+- #19589 Avoid useless mempool query in gettxoutproof (MarcoFalke)\n+- #19585 RPCResult Type of MempoolEntryDescription should be OBJ (stylesuxx)\n+- #19634 Document getwalletinfo's `unlocked_until` field as optional (justinmoon)\n+- #19658 Allow RPC to fetch all addrman records and add records to addrman (jnewbery)\n+- #19696 Fix addnode remove command error (fjahr)\n+- #18654 Separate bumpfee's psbt creation function into psbtbumpfee (achow101)\n+- #19655 Catch listsinceblock `target_confirmations` exceeding block count (adaminsky)\n+- #19644 Document returned error fields as optional if applicable (theStack)\n+- #19455 rpc generate: print useful help and error message (jonatack)\n+- #19550 Add listindices RPC (fjahr)\n+- #19169 Validate provided keys for `query_options` parameter in listunspent (PastaPastaPasta)\n+- #18244 fundrawtransaction and walletcreatefundedpsbt also lock manually selected coins (Sjors)\n+- #14687 zmq: Enable TCP keepalive (mruddy)\n+- #19405 Add network in/out connections to `getnetworkinfo` and `-getinfo` (jonatack)\n+- #19878 rawtransaction: Fix argument in combinerawtransaction help message (pinheadmz)\n+- #19940 Return fee and vsize from testmempoolaccept (gzhao408)\n+- #13686 zmq: Small cleanups in the ZMQ code (domob1812)\n+- #19386, #19528, #19717, #19849, #19994 Assert that RPCArg names are equal to CRPCCommand ones (MarcoFalke)\n+- #19725 Add connection type to getpeerinfo, improve logs (amitiuttarwar)\n+- #19969 Send RPC bug fix and touch-ups (Sjors)\n+- #18309 zmq: Add support to listen on multiple interfaces (n-thumann)\n+- #20055 Set HTTP Content-Type in bitcoin-cli (laanwj)\n+- #19956 Improve invalid vout value rpc error message (n1rna)\n+- #20101 Change no wallet loaded message to be clearer (achow101)\n+- #19998 Add `via_tor` to `getpeerinfo` output (hebasto)\n+- #19770 getpeerinfo: Deprecate \"whitelisted\" field (replaced by \"permissions\") (luke-jr)\n+- #20120 net, rpc, test, bugfix: update GetNetworkName, GetNetworksInfo, regression tests (jonatack)\n+- #20595 Improve heuristic hex transaction decoding (sipa)\n+- #20731 Add missing description of vout in getrawtransaction help text (benthecarman)\n+- #19328 Add gettxoutsetinfo `hash_type` option (fjahr)\n+- #19731 Expose nLastBlockTime/nLastTXTime as last `block/last_transaction` in getpeerinfo (jonatack)\n+- #19572 zmq: Create \"sequence\" notifier, enabling client-side mempool tracking (instagibbs)\n+- #20002 Expose peer network in getpeerinfo; simplify/improve -netinfo (jonatack)\n+\n+### GUI\n+- #17905 Avoid redundant tx status updates (ryanofsky)\n+- #18646 Use `PACKAGE_NAME` in exception message (fanquake)\n+- #17509 Save and load PSBT (Sjors)\n+- #18769 Remove bug fix for Qt < 5.5 (10xcryptodev)\n+- #15768 Add close window shortcut (IPGlider)\n+- #16224 Bilingual GUI error messages (hebasto)\n+- #18922 Do not translate InitWarning messages in debug.log (hebasto)\n+- #18152 Use NotificationStatus enum for signals to GUI (hebasto)\n+- #18587 Avoid wallet tryGetBalances calls in WalletModel::pollBalanceChanged (ryanofsky)\n+- #17597 Fix height of QR-less ReceiveRequestDialog (hebasto)\n+- #17918 Hide non PKHash-Addresses in signing address book (emilengler)\n+- #17956 Disable unavailable context menu items in transactions tab (kristapsk)\n+- #17968 Ensure that ModalOverlay is resized properly (hebasto)\n+- #17993 Balance/TxStatus polling update based on last block hash (furszy)\n+- #18424 Use parent-child relation to manage lifetime of OptionsModel object (hebasto)\n+- #18452 Fix shutdown when `waitfor*` cmds are called from RPC console (hebasto)\n+- #15202 Add Close All Wallets action (promag)\n+- #19132 lock `cs_main`, `m_cached_tip_mutex` in that order (vasild)\n+- #18898 Display warnings as rich text (hebasto)\n+- #19231 add missing translation.h include to fix build (fanquake)\n+- #18027 \"PSBT Operations\" dialog (gwillen)\n+- #19256 Change combiner for signals to `optional_last_value` (fanquake)\n+- #18896 Reset toolbar after all wallets are closed (hebasto)\n+- #18993 increase console command max length (10xcryptodev)\n+- #19323 Fix regression in *txoutset* in GUI console (hebasto)\n+- #19210 Get rid of cursor in out-of-focus labels (hebasto)\n+- #19011 Reduce `cs_main` lock accumulation during GUI startup (jonasschnelli)\n+- #19844 Remove usage of boost::bind (fanquake)\n+- #20479 Fix QPainter non-determinism on macOS (0.21 backport) (laanwj)\n+- gui#6 Do not truncate node flag strings in debugwindow peers details tab (Saibato)\n+- gui#8 Fix regression in TransactionTableModel (hebasto)\n+- gui#17 doc: Remove outdated comment in TransactionTablePriv (MarcoFalke)\n+- gui#20 Wrap tooltips in the intro window (hebasto)\n+- gui#30 Disable the main window toolbar when the modal overlay is shown (hebasto)\n+- gui#34 Show permissions instead of whitelisted (laanwj)\n+- gui#35 Parse params directly instead of through node (ryanofsky)\n+- gui#39 Add visual accenting for the 'Create new receiving address' button (hebasto)\n+- gui#40 Clarify block height label (hebasto)\n+- gui#43 bugfix: Call setWalletActionsEnabled(true) only for the first wallet (hebasto)\n+- gui#97 Relax GUI freezes during IBD (jonasschnelli)\n+- gui#71 Fix visual quality of text in QR image (hebasto)\n+- gui#96 Slight improve create wallet dialog (Sjors)\n+- gui#102 Fix SplashScreen crash when run with -disablewallet (hebasto)\n+- gui#116 Fix unreasonable default size of the main window without loaded wallets (hebasto)\n+- gui#120 Fix multiwallet transaction notifications (promag)\n+\n+### Build system\n+- #18504 Drop bitcoin-tx and bitcoin-wallet dependencies on libevent (ryanofsky)\n+- #18586 Bump gitian descriptors to 0.21 (laanwj)\n+- #17595 guix: Enable building for `x86_64-w64-mingw32` target (dongcarl)\n+- #17929 add linker optimisation flags to gitian & guix (Linux) (fanquake)\n+- #18556 Drop make dist in gitian builds (hebasto)\n+- #18088 ensure we aren't using GNU extensions (fanquake)\n+- #18741 guix: Make source tarball using git-archive (dongcarl)\n+- #18843 warn on potentially uninitialized reads (vasild)\n+- #17874 make linker checks more robust (fanquake)\n+- #18535 remove -Qunused-arguments workaround for clang + ccache (fanquake)\n+- #18743 Add --sysroot option to mac os native compile flags (ryanofsky)\n+- #18216 test, build: Enable -Werror=sign-compare (Empact)\n+- #18928 don't pass -w when building for Windows (fanquake)\n+- #16710 Enable -Wsuggest-override if available (hebasto)\n+- #18738 Suppress -Wdeprecated-copy warnings (hebasto)\n+- #18862 Remove fdelt_chk back-compat code and sanity check (fanquake)\n+- #18887 enable -Werror=gnu (vasild)\n+- #18956 enforce minimum required Windows version (7) (fanquake)\n+- #18958 guix: Make V=1 more powerful for debugging (dongcarl)\n+- #18677 Multiprocess build support (ryanofsky)\n+- #19094 Only allow ASCII identifiers (laanwj)\n+- #18820 Propagate well-known vars into depends (dongcarl)\n+- #19173 turn on --enable-c++17 by --enable-fuzz (vasild)\n+- #18297 Use pkg-config in BITCOIN_QT_CONFIGURE for all hosts including Windows (hebasto)\n+- #19301 don't warn when doxygen isn't found (fanquake)\n+- #19240 macOS toolchain simplification and bump (dongcarl)\n+- #19356 Fix search for brew-installed BDB 4 on OS X (gwillen)\n+- #19394 Remove unused `RES_IMAGES` (Bushstar)\n+- #19403 improve `__builtin_clz*` detection (fanquake)\n+- #19375 target Windows 7 when building libevent and fix ipv6 usage (fanquake)\n+- #19331 Do not include server symbols in wallet (MarcoFalke)\n+- #19257 remove BIP70 configure option (fanquake)\n+- #18288 Add MemorySanitizer (MSan) in Travis to detect use of uninitialized memory (practicalswift)\n+- #18307 Require pkg-config for all of the hosts (hebasto)\n+- #19445 Update msvc build to use ISO standard C++17 (sipsorcery)\n+- #18882 fix -Wformat-security check when compiling with GCC (fanquake)\n+- #17919 Allow building with system clang (dongcarl)\n+- #19553 pass -fcommon when building genisoimage (fanquake)\n+- #19565 call `AC_PATH_TOOL` for dsymutil in macOS cross-compile (fanquake)\n+- #19530 build LTO support into Apple's ld64 (theuni)\n+- #19525 add -Wl,-z,separate-code to hardening flags (fanquake)\n+- #19667 set minimum required Boost to 1.58.0 (fanquake)\n+- #19672 make clean removes .gcda and .gcno files from fuzz directory (Crypt-iQ)\n+- #19622 Drop ancient hack in gitian-linux descriptor (hebasto)\n+- #19688 Add support for llvm-cov (hebasto)\n+- #19718 Add missed gcov files to 'make clean' (hebasto)\n+- #19719 Add Werror=range-loop-analysis (MarcoFalke)\n+- #19015 Enable some commonly enabled compiler diagnostics (practicalswift)\n+- #19689 build, qt: Add Qt version checking (hebasto)\n+- #17396 modest Android improvements (icota)\n+- #18405 Drop all of the ZeroMQ patches (hebasto)\n+- #15704 Move Win32 defines to configure.ac to ensure they are globally defined (luke-jr)\n+- #19761 improve sed robustness by not using sed (fanquake)\n+- #19758 Drop deprecated and unused `GUARDED_VAR` and `PT_GUARDED_VAR` annotations (hebasto)\n+- #18921 add stack-clash and control-flow protection options to hardening flags (fanquake)\n+- #19803 Bugfix: Define and use `HAVE_FDATASYNC` correctly outside LevelDB (luke-jr)\n+- #19685 CMake invocation cleanup (dongcarl)\n+- #19861 add /usr/local/ to `LCOV_FILTER_PATTERN` for macOS builds (Crypt-iQ)\n+- #19916 allow user to specify `DIR_FUZZ_SEED_CORPUS` for `cov_fuzz` (Crypt-iQ)\n+- #19944 Update secp256k1 subtree (including BIP340 support) (sipa)\n+- #19558 Split pthread flags out of ldflags and dont use when building libconsensus (fanquake)\n+- #19959 patch qt libpng to fix powerpc build (fanquake)\n+- #19868 Fix target name (hebasto)\n+- #19960 The vcpkg tool has introduced a proper way to use manifests (sipsorcery)\n+- #20065 fuzz: Configure check for main function (MarcoFalke)\n+- #18750 Optionally skip external warnings (vasild)\n+- #20147 Update libsecp256k1 (endomorphism, test improvements) (sipa)\n+- #20156 Make sqlite support optional (compile-time) (luke-jr)\n+- #20318 Ensure source tarball has leading directory name (MarcoFalke)\n+- #20447 Patch `qt_intersect_spans` to avoid non-deterministic behavior in LLVM 8 (achow101)\n+- #20505 Avoid secp256k1.h include from system (dergoegge)\n+- #20527 Do not ignore Homebrew's SQLite on macOS (hebasto)\n+- #20478 Don't set BDB flags when configuring without (jonasschnelli)\n+- #20563 Check that Homebrew's berkeley-db4 package is actually installed (hebasto)\n+- #19493 Fix clang build on Mac (bvbfan)\n+\n+### Tests and QA\n+- #18593 Complete impl. of `msg_merkleblock` and `wait_for_merkleblock` (theStack)\n+- #18609 Remove REJECT message code (hebasto)\n+- #18584 Check that the version message does not leak the local address (MarcoFalke)\n+- #18597 Extend `wallet_dump` test to cover comments (MarcoFalke)\n+- #18596 Try once more when RPC connection fails on Windows (MarcoFalke)\n+- #18451 shift coverage from getunconfirmedbalance to getbalances (jonatack)\n+- #18631 appveyor: Disable functional tests for now (MarcoFalke)\n+- #18628 Add various low-level p2p tests (MarcoFalke)\n+- #18615 Avoid accessing free'd memory in `validation_chainstatemanager_tests` (MarcoFalke)\n+- #18571 fuzz: Disable debug log file (MarcoFalke)\n+- #18653 add coverage for bitcoin-cli -rpcwait (jonatack)\n+- #18660 Verify findCommonAncestor always initializes outputs (ryanofsky)\n+- #17669 Have coins simulation test also use CCoinsViewDB (jamesob)\n+- #18662 Replace gArgs with local argsman in bench (MarcoFalke)\n+- #18641 Create cached blocks not in the future (MarcoFalke)\n+- #18682 fuzz: `http_request` workaround for libevent < 2.1.1 (theStack)\n+- #18692 Bump timeout in `wallet_import_rescan` (MarcoFalke)\n+- #18695 Replace boost::mutex with std::mutex (hebasto)\n+- #18633 Properly raise FailedToStartError when rpc shutdown before warmup finished (MarcoFalke)\n+- #18675 Don't initialize PrecomputedTransactionData in txvalidationcache tests (jnewbery)\n+- #18691 Add `wait_for_cookie_credentials()` to framework for rpcwait tests (jonatack)\n+- #18672 Add further BIP37 size limit checks to `p2p_filter.py` (theStack)\n+- #18721 Fix linter issue (hebasto)\n+- #18384 More specific `feature_segwit` test error messages and fixing incorrect comments (gzhao408)\n+- #18575 bench: Remove requirement that all benches use same testing setup (MarcoFalke)\n+- #18690 Check object hashes in `wait_for_getdata` (robot-visions)\n+- #18712 display command line options passed to `send_cli()` in debug log (jonatack)\n+- #18745 Check submitblock return values (MarcoFalke)\n+- #18756 Use `wait_for_getdata()` in `p2p_compactblocks.py` (theStack)\n+- #18724 Add coverage for -rpcwallet cli option (jonatack)\n+- #18754 bench: Add caddrman benchmarks (vasild)\n+- #18585 Use zero-argument super() shortcut (Python 3.0+) (theStack)\n+- #18688 fuzz: Run in parallel (MarcoFalke)\n+- #18770 Remove raw-tx byte juggling in `mempool_reorg` (MarcoFalke)\n+- #18805 Add missing `sync_all` to `wallet_importdescriptors.py` (achow101)\n+- #18759 bench: Start nodes with -nodebuglogfile (MarcoFalke)\n+- #18774 Added test for upgradewallet RPC (brakmic)\n+- #18485 Add `mempool_updatefromblock.py` (hebasto)\n+- #18727 Add CreateWalletFromFile test (ryanofsky)\n+- #18726 Check misbehavior more independently in `p2p_filter.py` (robot-visions)\n+- #18825 Fix message for `ECC_InitSanityCheck` test (fanquake)\n+- #18576 Use unittest for `test_framework` unit testing (gzhao408)\n+- #18828 Strip down previous releases boilerplate (MarcoFalke)\n+- #18617 Add factor option to adjust test timeouts (brakmic)\n+- #18855 `feature_backwards_compatibility.py` test downgrade after upgrade (achow101)\n+- #18864 Add v0.16.3 backwards compatibility test, bump v0.19.0.1 to v0.19.1 (Sjors)\n+- #18917 fuzz: Fix vector size problem in system fuzzer (brakmic)\n+- #18901 fuzz: use std::optional for `sep_pos_opt` variable (brakmic)\n+- #18888 Remove RPCOverloadWrapper boilerplate (MarcoFalke)\n+- #18952 Avoid os-dependent path (fametrano)\n+- #18938 Fill fuzzing coverage gaps for functions in consensus/validation.h, primitives/block.h and util/translation.h (practicalswift)\n+- #18986 Add capability to disable RPC timeout in functional tests (rajarshimaitra)\n+- #18530 Add test for -blocksonly and -whitelistforcerelay param interaction (glowang)\n+- #19014 Replace `TEST_PREVIOUS_RELEASES` env var with `test_framework` option (MarcoFalke)\n+- #19052 Don't limit fuzzing inputs to 1 MB for afl-fuzz (now: \u221e \u2200 fuzzers) (practicalswift)\n+- #19060 Remove global `wait_until` from `p2p_getdata` (MarcoFalke)\n+- #18926 Pass ArgsManager into `getarg_tests` (glowang)\n+- #19110 Explain that a bug should be filed when the tests fail (MarcoFalke)\n+- #18965 Implement `base58_decode` (10xcryptodev)\n+- #16564 Always define the `raii_event_tests` test suite (candrews)\n+- #19122 Add missing `sync_blocks` to `wallet_hd` (MarcoFalke)\n+- #18875 fuzz: Stop nodes in `process_message*` fuzzers (MarcoFalke)\n+- #18974 Check that invalid witness destinations can not be imported (MarcoFalke)\n+- #18210 Type hints in Python tests (kiminuo)\n+- #19159 Make valgrind.supp work on aarch64 (MarcoFalke)\n+- #19082 Moved the CScriptNum asserts into the unit test in script.py (gillichu)\n+- #19172 Do not swallow flake8 exit code (hebasto)\n+- #19188 Avoid overwriting the NodeContext member of the testing setup [-Wshadow-field] (MarcoFalke)\n+- #18890 `disconnect_nodes` should warn if nodes were already disconnected (robot-visions)\n+- #19227 change blacklist to blocklist (TrentZ)\n+- #19230 Move base58 to own module to break circular dependency (sipa)\n+- #19083 `msg_mempool`, `fRelay`, and other bloomfilter tests (gzhao408)\n+- #16756 Connection eviction logic tests (mzumsande)\n+- #19177 Fix and clean `p2p_invalid_messages` functional tests (troygiorshev)\n+- #19264 Don't import asyncio to test magic bytes (jnewbery)\n+- #19178 Make `mininode_lock` non-reentrant (jnewbery)\n+- #19153 Mempool compatibility test (S3RK)\n+- #18434 Add a test-security target and run it in CI (fanquake)\n+- #19252 Wait for disconnect in `disconnect_p2ps` + bloomfilter test followups (gzhao408)\n+- #19298 Add missing `sync_blocks` (MarcoFalke)\n+- #19304 Check that message sends successfully when header is split across two buffers (troygiorshev)\n+- #19208 move `sync_blocks` and `sync_mempool` functions to `test_framework.py` (ycshao)\n+- #19198 Check that peers with forcerelay permission are not asked to feefilter (MarcoFalke)\n+- #19351 add two edge case tests for CSubNet (vasild)\n+- #19272 net, test: invalid p2p messages and test framework improvements (jonatack)\n+- #19348 Bump linter versions (duncandean)\n+- #19366 Provide main(\u2026) function in fuzzer. Allow building uninstrumented harnesses with --enable-fuzz (practicalswift)\n+- #19412 move `TEST_RUNNER_EXTRA` into native tsan setup (fanquake)\n+- #19368 Improve functional tests compatibility with BSD/macOS (S3RK)\n+- #19028 Set -logthreadnames in unit tests (MarcoFalke)\n+- #18649 Add std::locale::global to list of locale dependent functions (practicalswift)\n+- #19140 Avoid fuzzer-specific nullptr dereference in libevent when handling PROXY requests (practicalswift)\n+- #19214 Auto-detect SHA256 implementation in benchmarks (sipa)\n+- #19353 Fix mistakenly swapped \"previous\" and \"current\" lock orders (hebasto)\n+- #19533 Remove unnecessary `cs_mains` in `denialofservice_tests` (jnewbery)\n+- #19423 add functional test for txrelay during and after IBD (gzhao408)\n+- #16878 Fix non-deterministic coverage of test `DoS_mapOrphans` (davereikher)\n+- #19548 fuzz: add missing overrides to `signature_checker` (jonatack)\n+- #19562 Fix fuzzer compilation on macOS (freenancial)\n+- #19370 Static asserts for consistency of fee defaults (domob1812)\n+- #19599 clean `message_count` and `last_message` (troygiorshev)\n+- #19597 test decodepsbt fee calculation (count input value only once per UTXO) (theStack)\n+- #18011 Replace current benchmarking framework with nanobench (martinus)\n+- #19489 Fail `wait_until` early if connection is lost (MarcoFalke)\n+- #19340 Preserve the `LockData` initial state if \"potential deadlock detected\" exception thrown (hebasto)\n+- #19632 Catch decimal.InvalidOperation from `TestNodeCLI#send_cli` (Empact)\n+- #19098 Remove duplicate NodeContext hacks (ryanofsky)\n+- #19649 Restore test case for p2p transaction blinding (instagibbs)\n+- #19657 Wait until `is_connected` in `add_p2p_connection` (MarcoFalke)\n+- #19631 Wait for 'cmpctblock' in `p2p_compactblocks` when it is expected (Empact)\n+- #19674 use throwaway _ variable for unused loop counters (theStack)\n+- #19709 Fix 'make cov' with clang (hebasto)\n+- #19564 `p2p_feefilter` improvements (logging, refactoring, speedup) (theStack)\n+- #19756 add `sync_all` to fix race condition in wallet groups test (kallewoof)\n+- #19727 Removing unused classes from `p2p_leak.py` (dhruv)\n+- #19722 Add test for getblockheader verboseness (torhte)\n+- #19659 Add a seed corpus generation option to the fuzzing `test_runner` (darosior)\n+- #19775 Activate segwit in TestChain100Setup (MarcoFalke)\n+- #19760 Remove confusing mininode terminology (jnewbery)\n+- #19752 Update `wait_until` usage in tests not to use the one from utils (slmtpz)\n+- #19839 Set appveyor VM version to previous Visual Studio 2019 release (sipsorcery)\n+- #19830 Add tsan supp for leveldb::DBImpl::DeleteObsoleteFiles (MarcoFalke)\n+- #19710 bench: Prevent thread oversubscription and decreases the variance of result values (hebasto)\n+- #19842 Update the vcpkg checkout commit ID in appveyor config (sipsorcery)\n+- #19507 Expand functional zmq transaction tests (instagibbs)\n+- #19816 Rename wait until helper to `wait_until_helper` (MarcoFalke)\n+- #19859 Fixes failing functional test by changing version (n-thumann)\n+- #19887 Fix flaky `wallet_basic` test (fjahr)\n+- #19897 Change `FILE_CHAR_BLOCKLIST` to `FILE_CHARS_DISALLOWED` (verretor)\n+- #19800 Mockwallet (MarcoFalke)\n+- #19922 Run `rpc_txoutproof.py` even with wallet disabled (MarcoFalke)\n+- #19936 batch rpc with params (instagibbs)\n+- #19971 create default wallet in extended tests (Sjors)\n+- #19781 add parameterized constructor for `msg_sendcmpct()` (theStack)\n+- #19963 Clarify blocksonly whitelistforcerelay test (t-bast)\n+- #20022 Use explicit p2p objects where available (guggero)\n+- #20028 Check that invalid peer traffic is accounted for (MarcoFalke)\n+- #20004 Add signet witness commitment section parse tests (MarcoFalke)\n+- #20034 Get rid of default wallet hacks (ryanofsky)\n+- #20069 Mention commit id in scripted diff error (laanwj)\n+- #19947 Cover `change_type` option of \"walletcreatefundedpsbt\" RPC (guggero)\n+- #20126 `p2p_leak_tx.py` improvements (use MiniWallet, add `p2p_lock` acquires) (theStack)\n+- #20129 Don't export `in6addr_loopback` (vasild)\n+- #20131 Remove unused nVersion=1 in p2p tests (MarcoFalke)\n+- #20161 Minor Taproot follow-ups (sipa)\n+- #19401 Use GBT to get block versions correct (luke-jr)\n+- #20159 `mining_getblocktemplate_longpoll.py` improvements (use MiniWallet, add logging) (theStack)\n+- #20039 Convert amounts from float to decimal (prayank23)\n+- #20112 Speed up `wallet_resendwallettransactions` with mockscheduler RPC (MarcoFalke)\n+- #20247 fuzz: Check for addrv1 compatibility before using addrv1 serializer. Fuzz addrv2 serialization (practicalswift)\n+- #20167 Add test for -blockversion (MarcoFalke)\n+- #19877 Clarify `rpc_net` & `p2p_disconnect_ban functional` tests (amitiuttarwar)\n+- #20258 Remove getnettotals/getpeerinfo consistency test (jnewbery)\n+- #20242 fuzz: Properly initialize PrecomputedTransactionData (MarcoFalke)\n+- #20262 Skip --descriptor tests if sqlite is not compiled (achow101)\n+- #18788 Update more tests to work with descriptor wallets (achow101)\n+- #20289 fuzz: Check for addrv1 compatibility before using addrv1 serializer/deserializer on CService (practicalswift)\n+- #20290 fuzz: Fix DecodeHexTx fuzzing harness issue (practicalswift)\n+- #20245 Run `script_assets_test` even if built --with-libs=no (MarcoFalke)\n+- #20300 fuzz: Add missing `ECC_Start` to `descriptor_parse` test (S3RK)\n+- #20283 Only try witness deser when checking for witness deser failure (MarcoFalke)\n+- #20303 fuzz: Assert expected DecodeHexTx behaviour when using legacy decoding (practicalswift)\n+- #20316 Fix `wallet_multiwallet` test issue on Windows (MarcoFalke)\n+- #20326 Fix `ecdsa_verify` in test framework (stepansnigirev)\n+- #20328 cirrus: Skip tasks on the gui repo main branch (MarcoFalke)\n+- #20355 fuzz: Check for addrv1 compatibility before using addrv1 serializer/deserializer on CSubNet (practicalswift)\n+- #20332 Mock IBD in `net_processing` fuzzers (MarcoFalke)\n+- #20218 Suppress `epoll_ctl` data race (MarcoFalke)\n+- #20375 fuzz: Improve coverage for CPartialMerkleTree fuzzing harness (practicalswift)\n+- #19669 contrib: Fixup valgrind suppressions file (MarcoFalke)\n+- #18879 valgrind: remove outdated suppressions (fanquake)\n+- #19226 Add BerkeleyDatabase tsan suppression (MarcoFalke)\n+- #20379 Remove no longer needed UBSan suppression (float divide-by-zero in validation.cpp) (practicalswift)\n+- #18190, #18736, #18744, #18775, #18783, #18867, #18994, #19065,\n+  #19067, #19143, #19222, #19247, #19286, #19296, #19379, #19934,\n+  #20188, #20395 Add fuzzing harnessses (practicalswift)\n+- #18638 Use mockable time for ping/pong, add tests (MarcoFalke)\n+- #19951 CNetAddr scoped ipv6 test coverage, rename scopeId to `m_scope_id` (jonatack)\n+- #20027 Use mockable time everywhere in `net_processing` (sipa)\n+- #19105 Add Muhash3072 implementation in Python (fjahr)\n+- #18704, #18752, #18753, #18765, #18839, #18866, #18873, #19022,\n+  #19023, #19429, #19552, #19778, #20176, #20179, #20214, #20292,\n+  #20299, #20322 Fix intermittent test issues (MarcoFalke)\n+- #20390 CI/Cirrus: Skip `merge_base` step for non-PRs (luke-jr)\n+- #18634 ci: Add fuzzbuzz integration configuration file (practicalswift)\n+- #18591 Add C++17 build to Travis (sipa)\n+- #18581, #18667, #18798, #19495, #19519, #19538 CI improvements (hebasto)\n+- #18683, #18705, #18735, #18778, #18799, #18829, #18912, #18929,\n+  #19008, #19041, #19164, #19201, #19267, #19276, #19321, #19371,\n+  #19427, #19730, #19746, #19881, #20294, #20339, #20368 CI improvements (MarcoFalke)\n+- #20489, #20506 MSVC CI improvements (sipsorcery)\n+\n+### Miscellaneous\n+- #18713 scripts: Add macho stack canary check to security-check.py (fanquake)\n+- #18629 scripts: Add pe .reloc section check to security-check.py (fanquake)\n+- #18437 util: `Detect posix_fallocate()` instead of assuming (vasild)\n+- #18413 script: Prevent ub when computing abs value for num opcode serialize (pierreN)\n+- #18443 lockedpool: avoid sensitive data in core files (FreeBSD) (vasild)\n+- #18885 contrib: Move optimize-pngs.py script to the maintainer repo (MarcoFalke)\n+- #18317 Serialization improvements step 6 (all except wallet/gui) (sipa)\n+- #16127 More thread safety annotation coverage (ajtowns)\n+- #19228 Update libsecp256k1 subtree (sipa)\n+- #19277 util: Add assert identity function (MarcoFalke)\n+- #19491 util: Make assert work with any value (MarcoFalke)\n+- #19205 script: `previous_release.sh` rewritten in python (bliotti)\n+- #15935 Add <datadir>/settings.json persistent settings storage (ryanofsky)\n+- #19439 script: Linter to check commit message formatting (Ghorbanian)\n+- #19654 lint: Improve commit message linter in travis (fjahr)\n+- #15382 util: Add runcommandparsejson (Sjors)\n+- #19614 util: Use `have_fdatasync` to determine fdatasync() use (fanquake)\n+- #19813 util, ci: Hard code previous release tarball checksums (hebasto)\n+- #19841 Implement Keccak and `SHA3_256` (sipa)\n+- #19643 Add -netinfo peer connections dashboard (jonatack)\n+- #15367 feature: Added ability for users to add a startup command (benthecarman)\n+- #19984 log: Remove static log message \"Initializing chainstate Chainstate [ibd] @ height -1 (null)\" (practicalswift)\n+- #20092 util: Do not use gargs global in argsmanager member functions (hebasto)\n+- #20168 contrib: Fix `gen_key_io_test_vectors.py` imports (MarcoFalke)\n+- #19624 Warn on unknown `rw_settings` (MarcoFalke)\n+- #20257 Update secp256k1 subtree to latest master (sipa)\n+- #20346 script: Modify security-check.py to use \"==\" instead of \"is\" for literal comparison (tylerchambers)\n+- #18881 Prevent UB in DeleteLock() function (hebasto)\n+- #19180, #19189, #19190, #19220, #19399 Replace RecursiveMutex with Mutex (hebasto)\n+- #19347 Make `cs_inventory` nonrecursive (jnewbery)\n+- #19773 Avoid recursive lock in IsTrusted (promag)\n+- #18790 Improve thread naming (hebasto)\n+- #20140 Restore compatibility with old CSubNet serialization (sipa)\n+- #17775 DecodeHexTx: Try case where txn has inputs first (instagibbs)\n+\n+### Documentation\n+- #18502 Update docs for getbalance (default minconf should be 0) (uzyn)\n+- #18632 Fix macos comments in release-notes (MarcoFalke)\n+- #18645 Update thread information in developer docs (jnewbery)\n+- #18709 Note why we can't use `thread_local` with glibc back compat (fanquake)\n+- #18410 Improve commenting for coins.cpp|h (jnewbery)\n+- #18157 fixing init.md documentation to not require rpcpassword (jkcd)\n+- #18739 Document how to fuzz Bitcoin Core using Honggfuzz (practicalswift)\n+- #18779 Better explain GNU ld's dislike of ld64's options (fanquake)\n+- #18663 Mention build docs in README.md (saahilshangle)\n+- #18810 Update rest info on block size and json (chrisabrams)\n+- #18939 Add c++17-enable flag to fuzzing instructions (mzumsande)\n+- #18957 Add a link from ZMQ doc to ZMQ example in contrib/ (meeDamian)\n+- #19058 Drop protobuf stuff (hebasto)\n+- #19061 Add link to Visual Studio build readme (maitrebitcoin)\n+- #19072 Expand section on Getting Started (MarcoFalke)\n+- #18968 noban precludes maxuploadtarget disconnects (MarcoFalke)\n+- #19005 Add documentation for 'checklevel' argument in 'verifychain' RPC\u2026 (kcalvinalvin)\n+- #19192 Extract net permissions doc (MarcoFalke)\n+- #19071 Separate repository for the gui (MarcoFalke)\n+- #19018 fixing description of the field sequence in walletcreatefundedpsbt RPC method (limpbrains)\n+- #19367 Span pitfalls (sipa)\n+- #19408 Windows WSL build recommendation to temporarily disable Win32 PE support (sipsorcery)\n+- #19407 explain why passing -mlinker-version is required when cross-compiling (fanquake)\n+- #19452 afl fuzzing comment about afl-gcc and afl-g++ (Crypt-iQ)\n+- #19258 improve subtree check instructions (Sjors)\n+- #19474 Use precise permission flags where possible (MarcoFalke)\n+- #19494 CONTRIBUTING.md improvements (jonatack)\n+- #19268 Add non-thread-safe note to FeeFilterRounder::round() (hebasto)\n+- #19547 Update macOS cross compilation dependencies for Focal (hebasto)\n+- #19617 Clang 8 or later is required with `FORCE_USE_SYSTEM_CLANG` (fanquake)\n+- #19639 Remove Reference Links #19582 (RobertHosking)\n+- #19605 Set `CC_FOR_BUILD` when building on OpenBSD (fanquake)\n+- #19765 Fix getmempoolancestors RPC result doc (MarcoFalke)\n+- #19786 Remove label from good first issue template (MarcoFalke)\n+- #19646 Updated outdated help command for getblocktemplate (jakeleventhal)\n+- #18817 Document differences in bitcoind and bitcoin-qt locale handling (practicalswift)\n+- #19870 update PyZMQ install instructions, fix `zmq_sub.py` file permissions (jonatack)\n+- #19903 Update build-openbsd.md with GUI support (grubles)\n+- #19241 help: Generate checkpoint height from chainparams (luke-jr)\n+- #18949 Add CODEOWNERS file to automatically nominate PR reviewers (adamjonas)\n+- #20014 Mention signet in -help output (hebasto)\n+- #20015 Added default signet config for linearize script (gr0kchain)\n+- #19958 Better document features of feelers (naumenkogs)\n+- #19871 Clarify scope of eviction protection of outbound block-relay peers (ariard)\n+- #20076 Update and improve files.md (hebasto)\n+- #20107 Collect release-notes snippets (MarcoFalke)\n+- #20109 Release notes and followups from 19339 (glozow)\n+- #20090 Tiny followups to new getpeerinfo connection type field (amitiuttarwar)\n+- #20152 Update wallet files in files.md (hebasto)\n+- #19124 Document `ALLOW_HOST_PACKAGES` dependency option (skmcontrib)\n+- #20271 Document that wallet salvage is experimental (MarcoFalke)\n+- #20281 Correct getblockstats documentation for `(sw)total_weight` (shesek)\n+- #20279 release process updates/fixups (jonatack)\n+- #20238 Missing comments for signet parameters (decryp2kanon)\n+- #20756 Add missing field (permissions) to the getpeerinfo help (amitiuttarwar)\n+- #20668 warn that incoming conns are unlikely when not using default ports (adamjonas)\n+- #19961 tor.md updates (jonatack)\n+- #19050 Add warning for rest interface limitation (fjahr)\n+- #19390 doc/REST-interface: Remove stale info (luke-jr)\n+- #19344 docs: update testgen usage example (Bushstar)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 10xcryptodev\n+- Aaron Clauson\n+- Aaron Hook\n+- Adam Jonas\n+- Adam Soltys\n+- Adam Stein\n+- Akio Nakamura\n+- Alex Willmer\n+- Amir Ghorbanian\n+- Amiti Uttarwar\n+- Andrew Chow\n+- Andrew Toth\n+- Anthony Fieroni\n+- Anthony Towns\n+- Antoine Poinsot\n+- Antoine Riard\n+- Ben Carman\n+- Ben Woosley\n+- Benoit Verret\n+- Brian Liotti\n+- Bushstar\n+- Calvin Kim\n+- Carl Dong\n+- Chris Abrams\n+- Chris L\n+- Christopher Coverdale\n+- codeShark149\n+- Cory Fields\n+- Craig Andrews\n+- Damian Mee\n+- Daniel Kraft\n+- Danny Lee\n+- David Reikher\n+- DesWurstes\n+- Dhruv Mehta\n+- Duncan Dean\n+- Elichai Turkel\n+- Elliott Jin\n+- Emil Engler\n+- Ethan Heilman\n+- eugene\n+- Fabian Jahr\n+- fanquake\n+- Ferdinando M. Ametrano\n+- freenancial\n+- furszy\n+- Gillian Chu\n+- Gleb Naumenko\n+- Glenn Willen\n+- Gloria Zhao\n+- glowang\n+- gr0kchain\n+- Gregory Sanders\n+- grubles\n+- gzhao408\n+- Harris\n+- Hennadii Stepanov\n+- Hugo Nguyen\n+- Igor Cota\n+- Ivan Metlushko\n+- Ivan Vershigora\n+- Jake Leventhal\n+- James O'Beirne\n+- Jeremy Rubin\n+- jgmorgan\n+- Jim Posen\n+- \u201cjkcd\u201d\n+- jmorgan\n+- John Newbery\n+- Johnson Lau\n+- Jon Atack\n+- Jonas Schnelli\n+- Jonathan Schoeller\n+- Jo\u00e3o Barbosa\n+- Justin Moon\n+- kanon\n+- Karl-Johan Alm\n+- Kiminuo\n+- Kristaps Kaupe\n+- lontivero\n+- Luke Dashjr\n+- Marcin Jachymiak\n+- MarcoFalke\n+- Martin Ankerl\n+- Martin Zumsande\n+- maskoficarus\n+- Matt Corallo\n+- Matthew Zipkin\n+- MeshCollider\n+- Miguel Herranz\n+- MIZUTA Takeshi\n+- mruddy\n+- Nadav Ivgi\n+- Neha Narula\n+- Nicolas Thumann\n+- Niklas G\u00f6gge\n+- Nima Yazdanmehr\n+- nsa\n+- nthumann\n+- Oliver Gugger\n+- pad\n+- pasta\n+- Peter Bushnell\n+- pierrenn\n+- Pieter Wuille\n+- practicalswift\n+- Prayank\n+- Ra\u00fal Mart\u00ednez (RME)\n+- RandyMcMillan\n+- Rene Pickhardt\n+- Riccardo Masutti\n+- Robert\n+- Rod Vagg\n+- Roy Shao\n+- Russell Yanofsky\n+- Saahil Shangle\n+- sachinkm77\n+- saibato\n+- Samuel Dobson\n+- sanket1729\n+- Sebastian Falbesoner\n+- Seleme Topuz\n+- Sishir Giri\n+- Sjors Provoost\n+- skmcontrib\n+- Stepan Snigirev\n+- Stephan Oeste\n+- Suhas Daftuar\n+- t-bast\n+- Tom Harding\n+- Torhte Butler\n+- TrentZ\n+- Troy Giorshev\n+- tryphe\n+- Tyler Chambers\n+- U-Zyn Chua\n+- Vasil Dimov\n+- wiz\n+- Wladimir J. van der Laan\n+\n+As well as to everyone that helped with translations on\n+[Transifex](https://www.transifex.com/bitcoin/bitcoin/)."
      },
      {
        "sha": "9fdb19edf17969e7c6090a0d34ddda49b773c1dd",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 23,
        "deletions": 11,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -18,20 +18,20 @@ Release Process\n ### Before every major release\n \n * On both the master branch and the new release branch:\n-  - update `CLIENT_VERSION_MINOR` in [`configure.ac`](../configure.ac)\n-  - update `CLIENT_VERSION_MINOR`, `PACKAGE_VERSION`, and `PACKAGE_STRING` in [`build_msvc/bitcoin_config.h`](/build_msvc/bitcoin_config.h)\n+  - update `CLIENT_VERSION_MAJOR` in [`configure.ac`](../configure.ac)\n+  - update `CLIENT_VERSION_MAJOR`, `PACKAGE_VERSION`, and `PACKAGE_STRING` in [`build_msvc/bitcoin_config.h`](/build_msvc/bitcoin_config.h)\n * On the new release branch in [`configure.ac`](../configure.ac) and [`build_msvc/bitcoin_config.h`](/build_msvc/bitcoin_config.h) (see [this commit](https://github.com/bitcoin/bitcoin/commit/742f7dd)):\n-  - set `CLIENT_VERSION_REVISION` to `0`\n+  - set `CLIENT_VERSION_MINOR` to `0`\n+  - set `CLIENT_VERSION_BUILD` to `0`\n   - set `CLIENT_VERSION_IS_RELEASE` to `true`\n \n #### Before branch-off\n \n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n-* Update [`src/chainparams.cpp`](/src/chainparams.cpp) m_assumed_blockchain_size and m_assumed_chain_state_size with the current size plus some overhead (see [this](#how-to-calculate-m_assumed_blockchain_size-and-m_assumed_chain_state_size) for information on how to calculate them).\n-* Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate. Use the output of the RPC `getchaintxstats`, see\n-  [this pull request](https://github.com/bitcoin/bitcoin/pull/17002) for an example. Reviewers can verify the results by running `getchaintxstats <window_block_count> <window_last_block_hash>` with the `window_block_count` and `window_last_block_hash` from your output.\n-* Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n-* Update `src/chainparams.cpp` defaultAssumeValid with information from the getblockhash rpc.\n+* Update [`src/chainparams.cpp`](/src/chainparams.cpp) m_assumed_blockchain_size and m_assumed_chain_state_size with the current size plus some overhead (see [this](#how-to-calculate-assumed-blockchain-and-chain-state-size) for information on how to calculate them).\n+* Update [`src/chainparams.cpp`](/src/chainparams.cpp) chainTxData with statistics about the transaction count and rate. Use the output of the `getchaintxstats` RPC, see\n+  [this pull request](https://github.com/bitcoin/bitcoin/pull/20263) for an example. Reviewers can verify the results by running `getchaintxstats <window_block_count> <window_final_block_hash>` with the `window_block_count` and `window_final_block_hash` from your output.\n+* Update `src/chainparams.cpp` nMinimumChainWork and defaultAssumeValid (and the block height comment) with information from the `getblockheader` (and `getblockhash`) RPCs.\n   - The selected value must not be orphaned so it may be useful to set the value two blocks back from the tip.\n   - Testnet should be set some tens of thousands back from the tip due to reorgs there.\n   - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect\n@@ -307,9 +307,9 @@ bitcoin.org (see below for bitcoin.org update instructions).\n   - First, check to see if the Bitcoin.org maintainers have prepared a\n     release: https://github.com/bitcoin-dot-org/bitcoin.org/labels/Core\n \n-      - If they have, it will have previously failed their Travis CI\n+      - If they have, it will have previously failed their CI\n         checks because the final release files weren't uploaded.\n-        Trigger a Travis CI rebuild---if it passes, merge.\n+        Trigger a CI rebuild---if it passes, merge.\n \n   - If they have not prepared a release, follow the Bitcoin.org release\n     instructions: https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/adding-events-release-notes-and-alerts.md#release-notes\n@@ -326,6 +326,18 @@ bitcoin.org (see below for bitcoin.org update instructions).\n \n   - bitcoincore.org RPC documentation update\n \n+      - Install [golang](https://golang.org/doc/install)\n+\n+      - Install the new Bitcoin Core release\n+\n+      - Run bitcoind on regtest\n+\n+      - Clone the [bitcoincore.org repository](https://github.com/bitcoin-core/bitcoincore.org)\n+\n+      - Run: `go run generate.go` while being in `contrib/doc-gen` folder, and with bitcoin-cli in PATH\n+\n+      - Add the generated files to git\n+\n   - Update packaging repo\n \n       - Push the flatpak to flathub, e.g. https://github.com/flathub/org.bitcoincore.bitcoin-qt/pull/2\n@@ -371,7 +383,7 @@ bitcoin.org (see below for bitcoin.org update instructions).\n \n ### Additional information\n \n-#### How to calculate `m_assumed_blockchain_size` and `m_assumed_chain_state_size`\n+#### <a name=\"how-to-calculate-assumed-blockchain-and-chain-state-size\"></a>How to calculate `m_assumed_blockchain_size` and `m_assumed_chain_state_size`\n \n Both variables are used as a guideline for how much space the user needs on their drive in total, not just strictly for the blockchain.\n Note that all values should be taken from a **fully synced** node and have an overhead of 5-10% added on top of its base value."
      },
      {
        "sha": "147e2237115ec7911ef57019925462adbbb5f642",
        "filename": "doc/shared-libraries.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/shared-libraries.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/shared-libraries.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/shared-libraries.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -41,9 +41,10 @@ The interface is defined in the C header `bitcoinconsensus.h` located in `src/sc\n - `bitcoinconsensus_ERR_TX_SIZE_MISMATCH` - `txToLen` did not match with the size of `txTo`\n - `bitcoinconsensus_ERR_DESERIALIZE` - An error deserializing `txTo`\n - `bitcoinconsensus_ERR_AMOUNT_REQUIRED` - Input amount is required if WITNESS is used\n+- `bitcoinconsensus_ERR_INVALID_FLAGS` - Script verification `flags` are invalid (i.e. not part of the libconsensus interface)\n \n ### Example Implementations\n-- [NBitcoin](https://github.com/NicolasDorier/NBitcoin/blob/master/NBitcoin/Script.cs#L814) (.NET Bindings)\n+- [NBitcoin](https://github.com/MetacoSA/NBitcoin/blob/5e1055cd7c4186dee4227c344af8892aea54faec/NBitcoin/Script.cs#L979-#L1031) (.NET Bindings)\n - [node-libbitcoinconsensus](https://github.com/bitpay/node-libbitcoinconsensus) (Node.js Bindings)\n - [java-libbitcoinconsensus](https://github.com/dexX7/java-libbitcoinconsensus) (Java Bindings)\n - [bitcoinconsensus-php](https://github.com/Bit-Wasp/bitcoinconsensus-php) (PHP Bindings)"
      },
      {
        "sha": "8a2aef2d0798f3836692ee07802e45294391e904",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 140,
        "deletions": 61,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,10 +1,20 @@\n # TOR SUPPORT IN BITCOIN\n \n-It is possible to run Bitcoin Core as a Tor hidden service, and connect to such services.\n+It is possible to run Bitcoin Core as a Tor onion service, and connect to such services.\n \n The following directions assume you have a Tor proxy running on port 9050. Many distributions default to having a SOCKS proxy listening on port 9050, but others may not. In particular, the Tor Browser Bundle defaults to listening on port 9150. See [Tor Project FAQ:TBBSocksPort](https://www.torproject.org/docs/faq.html.en#TBBSocksPort) for how to properly\n configure Tor.\n \n+## How to see information about your Tor configuration via Bitcoin Core\n+\n+There are several ways to see your local onion address in Bitcoin Core:\n+- in the debug log (grep for \"tor:\" or \"AddLocal\")\n+- in the output of RPC `getnetworkinfo` in the \"localaddresses\" section\n+- in the output of the CLI `-netinfo` peer connections dashboard\n+\n+You may set the `-debug=tor` config logging option to have additional\n+information in the debug log about your Tor configuration.\n+\n \n ## 1. Run Bitcoin Core behind a Tor proxy\n \n@@ -13,14 +23,19 @@ outgoing connections, but more is possible.\n \n \t-proxy=ip:port  Set the proxy server. If SOCKS5 is selected (default), this proxy\n \t                server will be used to try to reach .onion addresses as well.\n+\t                You need to use -noonion or -onion=0 to explicitly disable\n+\t                outbound access to onion services.\n \n-\t-onion=ip:port  Set the proxy server to use for Tor hidden services. You do not\n-\t                need to set this if it's the same as -proxy. You can use -noonion\n-\t                to explicitly disable access to hidden services.\n+\t-onion=ip:port  Set the proxy server to use for Tor onion services. You do not\n+\t                need to set this if it's the same as -proxy. You can use -onion=0\n+\t                to explicitly disable access to onion services.\n+\t                Note: Only the -proxy option sets the proxy for DNS requests;\n+\t                with -onion they will not route over Tor, so use -proxy if you\n+\t                have privacy concerns.\n \n \t-listen         When using -proxy, listening is disabled by default. If you want\n-\t                to run a hidden service (see next section), you'll need to enable\n-\t                it explicitly.\n+\t                to manually configure an onion service (see section 3), you'll\n+\t                need to enable it explicitly.\n \n \t-connect=X      When behind a Tor proxy, you can specify .onion addresses instead\n \t-addnode=X      of IP addresses or hostnames in these parameters. It requires\n@@ -30,35 +45,133 @@ outgoing connections, but more is possible.\n \t-onlynet=onion  Make outgoing connections only to .onion addresses. Incoming\n \t                connections are not affected by this option. This option can be\n \t                specified multiple times to allow multiple network types, e.g.\n-\t                ipv4, ipv6, or onion.\n+\t                ipv4, ipv6 or onion. If you use this option with values other\n+\t                than onion you *cannot* disable onion connections; outgoing onion\n+\t                connections will be enabled when you use -proxy or -onion. Use\n+\t                -noonion or -onion=0 if you want to be sure there are no outbound\n+\t                onion connections over the default proxy or your defined -proxy.\n \n In a typical situation, this suffices to run behind a Tor proxy:\n \n \t./bitcoind -proxy=127.0.0.1:9050\n \n+## 2. Automatically create a Bitcoin Core onion service\n+\n+Bitcoin Core makes use of Tor's control socket API to create and destroy\n+ephemeral onion services programmatically. This means that if Tor is running and\n+proper authentication has been configured, Bitcoin Core automatically creates an\n+onion service to listen on. The goal is to increase the number of available\n+onion nodes.\n+\n+This feature is enabled by default if Bitcoin Core is listening (`-listen`) and\n+it requires a Tor connection to work. It can be explicitly disabled with\n+`-listenonion=0`. If it is not disabled, it can be configured using the\n+`-torcontrol` and `-torpassword` settings.\n+\n+To see verbose Tor information in the bitcoind debug log, pass `-debug=tor`.\n+\n+### Control Port\n+\n+You may need to set up the Tor Control Port. On Linux distributions there may be\n+some or all of the following settings in `/etc/tor/torrc`, generally commented\n+out by default (if not, add them):\n+\n+```\n+ControlPort 9051\n+CookieAuthentication 1\n+CookieAuthFileGroupReadable 1\n+```\n+\n+Add or uncomment those, save, and restart Tor (usually `systemctl restart tor`\n+or `sudo systemctl restart tor` on most systemd-based systems, including recent\n+Debian and Ubuntu, or just restart the computer).\n+\n+On some systems (such as Arch Linux), you may also need to add the following\n+line:\n+\n+```\n+DataDirectoryGroupReadable 1\n+```\n+\n+### Authentication\n+\n+Connecting to Tor's control socket API requires one of two authentication\n+methods to be configured: cookie authentication or bitcoind's `-torpassword`\n+configuration option.\n+\n+#### Cookie authentication\n \n-## 2. Run a Bitcoin Core hidden server\n+For cookie authentication, the user running bitcoind must have read access to\n+the `CookieAuthFile` specified in the Tor configuration. In some cases this is\n+preconfigured and the creation of an onion service is automatic. Don't forget to\n+use the `-debug=tor` bitcoind configuration option to enable Tor debug logging.\n \n-If you configure your Tor system accordingly, it is possible to make your node also\n-reachable from the Tor network. Add these lines to your /etc/tor/torrc (or equivalent\n-config file): *Needed for Tor version 0.2.7.0 and older versions of Tor only. For newer\n-versions of Tor see [Section 3](#3-automatically-listen-on-tor).*\n+If a permissions problem is seen in the debug log, e.g. `tor: Authentication\n+cookie /run/tor/control.authcookie could not be opened (check permissions)`, it\n+can be resolved by adding both the user running Tor and the user running\n+bitcoind to the same Tor group and setting permissions appropriately.\n+\n+On Debian-derived systems, the Tor group will likely be `debian-tor` and one way\n+to verify could be to list the groups and grep for a \"tor\" group name:\n+\n+```\n+getent group | cut -d: -f1 | grep -i tor\n+```\n+\n+You can also check the group of the cookie file. On most Linux systems, the Tor\n+auth cookie will usually be `/run/tor/control.authcookie`:\n+\n+```\n+stat -c '%G' /run/tor/control.authcookie\n+```\n+\n+Once you have determined the `${TORGROUP}` and selected the `${USER}` that will\n+run bitcoind, run this as root:\n+\n+```\n+usermod -a -G ${TORGROUP} ${USER}\n+```\n+\n+Then restart the computer (or log out) and log in as the `${USER}` that will run\n+bitcoind.\n+\n+#### `torpassword` authentication\n+\n+For the `-torpassword=password` option, the password is the clear text form that\n+was used when generating the hashed password for the `HashedControlPassword`\n+option in the Tor configuration file.\n+\n+The hashed password can be obtained with the command `tor --hash-password\n+password` (refer to the [Tor Dev\n+Manual](https://2019.www.torproject.org/docs/tor-manual.html.en) for more\n+details).\n+\n+\n+## 3. Manually create a Bitcoin Core onion service\n+\n+You can also manually configure your node to be reachable from the Tor network.\n+Add these lines to your `/etc/tor/torrc` (or equivalent config file):\n \n \tHiddenServiceDir /var/lib/tor/bitcoin-service/\n-\tHiddenServicePort 8333 127.0.0.1:8333\n-\tHiddenServicePort 18333 127.0.0.1:18333\n+\tHiddenServicePort 8333 127.0.0.1:8334\n \n-The directory can be different of course, but (both) port numbers should be equal to\n-your bitcoind's P2P listen port (8333 by default).\n+The directory can be different of course, but virtual port numbers should be equal to\n+your bitcoind's P2P listen port (8333 by default), and target addresses and ports\n+should be equal to binding address and port for inbound Tor connections (127.0.0.1:8334 by default).\n \n-\t-externalip=X   You can tell bitcoin about its publicly reachable address using\n-\t                this option, and this can be a .onion address. Given the above\n-\t                configuration, you can find your .onion address in\n+\t-externalip=X   You can tell bitcoin about its publicly reachable addresses using\n+\t                this option, and this can be an onion address. Given the above\n+\t                configuration, you can find your onion address in\n \t                /var/lib/tor/bitcoin-service/hostname. For connections\n \t                coming from unroutable addresses (such as 127.0.0.1, where the\n-\t                Tor proxy typically runs), .onion addresses are given\n+\t                Tor proxy typically runs), onion addresses are given\n \t                preference for your node to advertise itself with.\n \n+\t                You can set multiple local addresses with -externalip. The\n+\t                one that will be rumoured to a particular peer is the most\n+\t                compatible one and also using heuristics, e.g. the address\n+\t                with the most incoming connections, etc.\n+\n \t-listen         You'll need to enable listening for incoming connections, as this\n \t                is off by default behind a proxy.\n \n@@ -71,7 +184,7 @@ your bitcoind's P2P listen port (8333 by default).\n \n In a typical situation, where you're only reachable via Tor, this should suffice:\n \n-\t./bitcoind -proxy=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -listen\n+\t./bitcoind -proxy=127.0.0.1:9050 -externalip=7zvj7a2imdgkdbg4f2dryd5rgtrn7upivr5eeij4cicjh65pooxeshid.onion -listen\n \n (obviously, replace the .onion address with your own). It should be noted that you still\n listen on all devices and another node could establish a clearnet connection, when knowing\n@@ -84,51 +197,17 @@ as well, use `discover` instead:\n \n \t./bitcoind ... -discover\n \n-and open port 8333 on your firewall (or use -upnp).\n+and open port 8333 on your firewall (or use port mapping, i.e., `-upnp` or `-natpmp`).\n \n If you only want to use Tor to reach .onion addresses, but not use it as a proxy\n for normal IPv4/IPv6 communication, use:\n \n-\t./bitcoind -onion=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -discover\n-\n-## 3. Automatically listen on Tor\n-\n-Starting with Tor version 0.2.7.1 it is possible, through Tor's control socket\n-API, to create and destroy 'ephemeral' hidden services programmatically.\n-Bitcoin Core has been updated to make use of this.\n-\n-This means that if Tor is running (and proper authentication has been configured),\n-Bitcoin Core automatically creates a hidden service to listen on. This will positively\n-affect the number of available .onion nodes.\n-\n-This new feature is enabled by default if Bitcoin Core is listening (`-listen`), and\n-requires a Tor connection to work. It can be explicitly disabled with `-listenonion=0`\n-and, if not disabled, configured using the `-torcontrol` and `-torpassword` settings.\n-To show verbose debugging information, pass `-debug=tor`.\n-\n-Connecting to Tor's control socket API requires one of two authentication methods to be\n-configured. It also requires the control socket to be enabled, e.g. put `ControlPort 9051`\n-in `torrc` config file. For cookie authentication the user running bitcoind must have read\n-access to the `CookieAuthFile` specified in Tor configuration. In some cases this is\n-preconfigured and the creation of a hidden service is automatic. If permission problems\n-are seen with `-debug=tor` they can be resolved by adding both the user running Tor and\n-the user running bitcoind to the same group and setting permissions appropriately. On\n-Debian-based systems the user running bitcoind can be added to the debian-tor group,\n-which has the appropriate permissions. Before starting bitcoind you will need to re-login\n-to allow debian-tor group to be applied. Otherwise you will see the following notice: \"tor:\n-Authentication cookie /run/tor/control.authcookie could not be opened (check permissions)\"\n-on debug.log.\n-\n-An alternative authentication method is the use\n-of the `-torpassword=password` option. The `password` is the clear text form that\n-was used when generating the hashed password for the `HashedControlPassword` option\n-in the tor configuration file. The hashed password can be obtained with the command\n-`tor --hash-password password` (read the tor manual for more details).\n+\t./bitcoind -onion=127.0.0.1:9050 -externalip=7zvj7a2imdgkdbg4f2dryd5rgtrn7upivr5eeij4cicjh65pooxeshid.onion -discover\n \n ## 4. Privacy recommendations\n \n-- Do not add anything but Bitcoin Core ports to the hidden service created in section 2.\n-  If you run a web service too, create a new hidden service for that.\n-  Otherwise it is trivial to link them, which may reduce privacy. Hidden\n-  services created automatically (as in section 3) always have only one port\n+- Do not add anything but Bitcoin Core ports to the onion service created in section 3.\n+  If you run a web service too, create a new onion service for that.\n+  Otherwise it is trivial to link them, which may reduce privacy. Onion\n+  services created automatically (as in section 2) always have only one port\n   open."
      },
      {
        "sha": "1931302ddafdb745e72f3aeecf3674aa271cbcbe",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -23,7 +23,8 @@ On a high level, these strings are to be translated:\n \n ### GUI strings\n \n-Anything that appears to the user in the GUI is to be translated. This includes labels, menu items, button texts, tooltips and window titles.\n+Do not translate technical or extremely rare errors.\n+Anything else that appears to the user in the GUI is to be translated. This includes labels, menu items, button texts, tooltips and window titles.\n This includes messages passed to the GUI through the UI interface through `InitMessage`, `ThreadSafeMessageBox` or `ShowProgress`.\n \n General recommendations"
      },
      {
        "sha": "85f33701306bc261355ef5318b17e2189a617580",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 44,
        "deletions": 10,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,6 +1,6 @@\n # Block and Transaction Broadcasting with ZeroMQ\n \n-[ZeroMQ](http://zeromq.org/) is a lightweight wrapper around TCP\n+[ZeroMQ](https://zeromq.org/) is a lightweight wrapper around TCP\n connections, inter-process communication, and shared-memory,\n providing various message-oriented semantics such as publish/subscribe,\n request/reply, and push/pull.\n@@ -39,8 +39,9 @@ For version information, see [dependencies.md](dependencies.md).\n Typically, it is packaged by distributions as something like\n *libzmq3-dev*. The C++ wrapper for ZeroMQ is *not* needed.\n \n-In order to run the example Python client scripts in contrib/ one must\n-also install *python3-zmq*, though this is not necessary for daemon\n+In order to run the example Python client scripts in the `contrib/zmq/`\n+directory, one must also install [PyZMQ](https://github.com/zeromq/pyzmq)\n+(generally with `pip install pyzmq`), though this is not necessary for daemon\n operation.\n \n ## Enabling\n@@ -62,9 +63,11 @@ Currently, the following notifications are supported:\n     -zmqpubhashblock=address\n     -zmqpubrawblock=address\n     -zmqpubrawtx=address\n+    -zmqpubsequence=address\n \n The socket type is PUB and the address must be a valid ZeroMQ socket\n address. The same address can be used in more than one notification.\n+The same notification can be specified more than once.\n \n The option to set the PUB socket's outbound message high water mark\n (SNDHWM) may be set individually for each notification:\n@@ -73,20 +76,30 @@ The option to set the PUB socket's outbound message high water mark\n     -zmqpubhashblockhwm=n\n     -zmqpubrawblockhwm=n\n     -zmqpubrawtxhwm=n\n+    -zmqpubsequencehwm=address\n \n The high water mark value must be an integer greater than or equal to 0.\n \n For instance:\n \n     $ bitcoind -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n+               -zmqpubhashtx=tcp://192.168.1.2:28332 \\\n                -zmqpubrawtx=ipc:///tmp/bitcoind.tx.raw \\\n                -zmqpubhashtxhwm=10000\n \n Each PUB notification has a topic and body, where the header\n corresponds to the notification type. For instance, for the\n notification `-zmqpubhashtx` the topic is `hashtx` (no null\n terminator) and the body is the transaction hash (32\n-bytes).\n+bytes) for all but `sequence` topic. For `sequence`, the body\n+is structured as the following based on the type of message:\n+\n+    <32-byte hash>C :                 Blockhash connected\n+    <32-byte hash>D :                 Blockhash disconnected\n+    <32-byte hash>R<8-byte LE uint> : Transactionhash removed from mempool for non-block inclusion reason\n+    <32-byte hash>A<8-byte LE uint> : Transactionhash added mempool\n+\n+Where the 8-byte uints correspond to the mempool sequence number.\n \n These options can also be provided in bitcoin.conf.\n \n@@ -96,7 +109,21 @@ ZeroMQ endpoint specifiers for TCP (and others) are documented in the\n Client side, then, the ZeroMQ subscriber socket must have the\n ZMQ_SUBSCRIBE option set to one or either of these prefixes (for\n instance, just `hash`); without doing so will result in no messages\n-arriving. Please see `contrib/zmq/zmq_sub.py` for a working example.\n+arriving. Please see [`contrib/zmq/zmq_sub.py`](/contrib/zmq/zmq_sub.py) for a working example.\n+\n+The ZMQ_PUB socket's ZMQ_TCP_KEEPALIVE option is enabled. This means that\n+the underlying SO_KEEPALIVE option is enabled when using a TCP transport.\n+The effective TCP keepalive values are managed through the underlying\n+operating system configuration and must be configured prior to connection establishment.\n+\n+For example, when running on GNU/Linux, one might use the following\n+to lower the keepalive setting to 10 minutes:\n+\n+sudo sysctl -w net.ipv4.tcp_keepalive_time=600\n+\n+Setting the keepalive values appropriately for your operating environment may\n+improve connectivity in situations where long-lived connections are silently\n+dropped by network middle boxes.\n \n ## Remarks\n \n@@ -109,13 +136,20 @@ No authentication or authorization is done on connecting clients; it\n is assumed that the ZeroMQ port is exposed only to trusted entities,\n using other means such as firewalling.\n \n-Note that when the block chain tip changes, a reorganisation may occur\n-and just the tip will be notified. It is up to the subscriber to\n-retrieve the chain from the last known block to the new tip. Also note\n-that no notification occurs if the tip was in the active chain - this\n-is the case after calling invalidateblock RPC.\n+Note that for `*block` topics, when the block chain tip changes,\n+a reorganisation may occur and just the tip will be notified.\n+It is up to the subscriber to retrieve the chain from the last known\n+block to the new tip. Also note that no notification will occur if the tip\n+was in the active chain--as would be the case after calling invalidateblock RPC.\n+In contrast, the `sequence` topic publishes all block connections and\n+disconnections.\n \n There are several possibilities that ZMQ notification can get lost\n during transmission depending on the communication type you are\n using. Bitcoind appends an up-counting sequence number to each\n notification which allows listeners to detect lost notifications.\n+\n+The `sequence` topic refers specifically to the mempool sequence\n+number, which is also published along with all mempool events. This\n+is a different sequence value than in ZMQ itself in order to allow a total\n+ordering of mempool events to be constructed."
      },
      {
        "sha": "90a592cc63f1625142308580e59155e09559b4e9",
        "filename": "share/examples/bitcoin.conf",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/share/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/share/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/examples/bitcoin.conf?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -20,8 +20,8 @@\n # Bind to given address and always listen on it. Use [host]:port notation for IPv6\n #bind=<addr>\n \n-# Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\n-#whitebind=<addr>\n+# Bind to given address and add permission flags to peers connecting to it. Use [host]:port notation for IPv6\n+#whitebind=perm@<addr>\n \n ##############################################################\n ##            Quick Primer on addnode vs connect            ##"
      },
      {
        "sha": "fe89ae1fdefcfa4195d3e20f65eeeef4f0f051a3",
        "filename": "share/genbuild.sh",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/share/genbuild.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/share/genbuild.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/genbuild.sh?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -1,5 +1,5 @@\n #!/bin/sh\n-# Copyright (c) 2012-2019 The Bitcoin Core developers\n+# Copyright (c) 2012-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,27 +18,27 @@ else\n     exit 1\n fi\n \n-DESC=\"\"\n-SUFFIX=\"\"\n+GIT_TAG=\"\"\n+GIT_COMMIT=\"\"\n if [ \"${BITCOIN_GENBUILD_NO_GIT}\" != \"1\" ] && [ -e \"$(command -v git)\" ] && [ \"$(git rev-parse --is-inside-work-tree 2>/dev/null)\" = \"true\" ]; then\n     # clean 'dirty' status of touched files that haven't been modified\n     git diff >/dev/null 2>/dev/null\n \n     # if latest commit is tagged and not dirty, then override using the tag name\n     RAWDESC=$(git describe --abbrev=0 2>/dev/null)\n     if [ \"$(git rev-parse HEAD)\" = \"$(git rev-list -1 $RAWDESC 2>/dev/null)\" ]; then\n-        git diff-index --quiet HEAD -- && DESC=$RAWDESC\n+        git diff-index --quiet HEAD -- && GIT_TAG=$RAWDESC\n     fi\n \n     # otherwise generate suffix from git, i.e. string like \"59887e8-dirty\"\n-    SUFFIX=$(git rev-parse --short HEAD)\n-    git diff-index --quiet HEAD -- || SUFFIX=\"$SUFFIX-dirty\"\n+    GIT_COMMIT=$(git rev-parse --short=12 HEAD)\n+    git diff-index --quiet HEAD -- || GIT_COMMIT=\"$GIT_COMMIT-dirty\"\n fi\n \n-if [ -n \"$DESC\" ]; then\n-    NEWINFO=\"#define BUILD_DESC \\\"$DESC\\\"\"\n-elif [ -n \"$SUFFIX\" ]; then\n-    NEWINFO=\"#define BUILD_SUFFIX $SUFFIX\"\n+if [ -n \"$GIT_TAG\" ]; then\n+    NEWINFO=\"#define BUILD_GIT_TAG \\\"$GIT_TAG\\\"\"\n+elif [ -n \"$GIT_COMMIT\" ]; then\n+    NEWINFO=\"#define BUILD_GIT_COMMIT \\\"$GIT_COMMIT\\\"\"\n else\n     NEWINFO=\"// No build information available\"\n fi"
      },
      {
        "sha": "207d60aca38ba02f3f28a8b3ef399a915a5100bd",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806",
        "patch": "@@ -3,7 +3,7 @@\n <plist version=\"0.9\">\n <dict>\n   <key>LSMinimumSystemVersion</key>\n-  <string>10.12.0</string>\n+  <string>10.14.0</string>\n \n   <key>LSArchitecturePriority</key>\n   <array>\n@@ -17,13 +17,13 @@\n   <string>APPL</string>\n \n   <key>NSHumanReadableCopyright</key>\n-  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@.@CLIENT_VERSION_BUILD@, Copyright \u00a9 2009-@COPYRIGHT_YEAR@ @COPYRIGHT_HOLDERS_FINAL@</string>\n+  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_BUILD@, Copyright \u00a9 2009-@COPYRIGHT_YEAR@ @COPYRIGHT_HOLDERS_FINAL@</string>\n \n   <key>CFBundleShortVersionString</key>\n-  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@</string>\n+  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_BUILD@</string>\n \n   <key>CFBundleVersion</key>\n-  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@</string>\n+  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_BUILD@</string>\n \n   <key>CFBundleSignature</key>\n   <string>????</string>"
      },
      {
        "sha": "681f243d045fb3a6390e9892cc9ec23e76c9adbd",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "ef7a0ef5c7a626ce7568599c2a181d34c62c2f91",
        "filename": "src/.clang-format",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/.clang-format",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/.clang-format",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/.clang-format?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "2616eb8638d4fd1595abcfac5e9a2ae7161c6151",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 116,
        "deletions": 50,
        "changes": 166,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "56b8ca8ce686dfd5206ec3d03277e98516a532db",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "113272e65e89efff5d271ca1ba5567f39de6588f",
        "filename": "src/Makefile.crc32c.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.crc32c.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.crc32c.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.crc32c.include?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "8a28f4f24924eb5c74674886113744e1a7d260db",
        "filename": "src/Makefile.leveldb.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "969f0ca411bc4665b91fa1cf369031af93c0a7fe",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 44,
        "deletions": 21,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "aea42fd9023af4d12f3aef3d1ccb93959fcb9915",
        "filename": "src/Makefile.qt_locale.include",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.qt_locale.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.qt_locale.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt_locale.include?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "a6a857d9520805541b9cf3e30d007e5f7ed263be",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "e9f9b73abe67df6b8a24652df33bac3dd02ae598",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 124,
        "deletions": 898,
        "changes": 1022,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "75fe68fcd198df70775e0d4754ad0c67a81a498d",
        "filename": "src/Makefile.test_fuzz.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.test_fuzz.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.test_fuzz.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_fuzz.include?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "0621da8ddf6304aaec7882e3bf520b4bf6a9912d",
        "filename": "src/Makefile.test_util.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.test_util.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/Makefile.test_util.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_util.include?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "8f77ed35ce5cadd72b9100c474fb7e2dcc51d0d9",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "8953ebb169c3138c25cf39feba8151daab392655",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 22,
        "deletions": 28,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "ed7fccc0ff60f172c7f2fea37fc46f8100e1073e",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "9ac67b7af6a74e0746dfacdd6f9fcf9a3dc87331",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 95,
        "deletions": 31,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "9957bcd84b70751a0478c01a6bba039b7872b78b",
        "filename": "src/attributes.h",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/attributes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/attributes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/attributes.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "49bf6c43dce0bf314befac833409561618e952c3",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 29,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "f6bfbd1e493cc5d182db6f4ff7c71ff59f2527c8",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 44,
        "deletions": 19,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "65e373283caa34584b71b0a36894d41daa94bb96",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 19,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "9ba5af73e0596274eb5c2b5771c746634600a7c7",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 8,
        "deletions": 26,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "ebdad5a4b8ff4c6884454d9a7f7930847a2f387c",
        "filename": "src/bench/addrman.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/addrman.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "6f6b4e3bfa9c41d69ff533909bc3e603d043f879",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 17,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "c74d8d51b3fa42f2b2c2f0ef4a6f4278f59fdcb5",
        "filename": "src/bench/bech32.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bech32.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "012057e792d2754bb6c3adf247ed77c296b53ad4",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 103,
        "changes": 141,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "bafc7f8716a12bef749ce155e894dc67c7224c16",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 19,
        "deletions": 97,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "135659f87f3c275ff2904ba5bc138e3b0c239c3a",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 40,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "af5a82f69f4ce5ad3ac98645b218885e799b5af2",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "d5275b0b763f19d7bb0a39fcbb102829767e8491",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "a6f4eec4ca9e0b2201378329651fdfa059b6132d",
        "filename": "src/bench/chacha20.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/chacha20.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/chacha20.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/chacha20.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "e994279a4d8b1bb7c1452f0ac7f942d3deea91f1",
        "filename": "src/bench/chacha_poly_aead.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 36,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/chacha_poly_aead.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/chacha_poly_aead.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/chacha_poly_aead.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "a9f3f5f84d20f922db74bc2d0cb1c694bdc29104",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "d7b8c1badc66ee8b8d2a1c837a778d01b2c977c3",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 19,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "e50c4476bb574e30a34eb6f83243bc695e543a95",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "30fe11be6b3032a2ff7eec3eaa4fb6e43621a952",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 100,
        "deletions": 31,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "5745e4276c5aee52129036e752f272a507c31485",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "dcd615b9da26987df65b37f60a9adba9ef6a0487",
        "filename": "src/bench/examples.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 16,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/examples.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/examples.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/examples.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "607e4392b7a1ac3099ac01399efa5dd589312309",
        "filename": "src/bench/gcs_filter.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/gcs_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/gcs_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/gcs_filter.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "753c8c288119a7d9cd6479ee97f8c08bfd35628a",
        "filename": "src/bench/hashpadding.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/hashpadding.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/hashpadding.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/hashpadding.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "b6d8824abae5e37bcc1717ff2d0bf946f5d4b42a",
        "filename": "src/bench/lockedpool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 18,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/lockedpool.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "db9a5661fde970f0c87afa85bb7e00a6540dfa0b",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "9b862b735c1c1167f89e839662871c6e96a4ba34",
        "filename": "src/bench/mempool_stress.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/mempool_stress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/mempool_stress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_stress.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "ba6629b9f0a598bb3aeb0a302a318fd797f6e072",
        "filename": "src/bench/merkle_root.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/merkle_root.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/merkle_root.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/merkle_root.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "fcdd86495a6a84d3cf4ccdd87fb8031d69460167",
        "filename": "src/bench/nanobench.cpp",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/nanobench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/nanobench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/nanobench.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "c5379e7fd4e3419e9f42aadf25b307d54a2ea4fd",
        "filename": "src/bench/nanobench.h",
        "status": "added",
        "additions": 3225,
        "deletions": 0,
        "changes": 3225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/nanobench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/nanobench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/nanobench.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "cdef97c0ea3984c396b952e47110cb9ff6cd7ec3",
        "filename": "src/bench/poly1305.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/poly1305.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/poly1305.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/poly1305.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "dcd0e10285b010e2954afb35556024744c356945",
        "filename": "src/bench/prevector.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 62,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "997ab56549cf38f02f3d118ec963359b612b3e48",
        "filename": "src/bench/rollingbloom.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/rollingbloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/rollingbloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rollingbloom.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "45ed9f60dc018c7e4a78181d32ab2ed4bb7457d0",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "f1eeef88850495e51599f1db85e7c24c48e1bf64",
        "filename": "src/bench/rpc_mempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/rpc_mempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/rpc_mempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_mempool.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "afc733482e8ac6bcc2a232882dd8bca43cf74829",
        "filename": "src/bench/util_time.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/util_time.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/util_time.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/util_time.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "e3f6b35a7db53e7f9e1f33a7dc435cd6720de614",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "b385cec085f3218a1a3ba65d9525806934ede6c1",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 16,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "405a302261fc4cd200ebcf333e2e35f10cb25adf",
        "filename": "src/bitcoin-cli-res.rc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-cli-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-cli-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli-res.rc?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "6a0d44a183343e68f6905feebfd1c6aa2ec3ebd1",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 464,
        "deletions": 93,
        "changes": 557,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "b545ce9dbed40d5b36519fd0ff579c2e87062d27",
        "filename": "src/bitcoin-tx-res.rc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-tx-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-tx-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx-res.rc?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "321d62fe4de0c8db1a416049c363683c2d852f9c",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 40,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "3f0fa8ab6d61481b27d5a3160cfd9f214328cb5b",
        "filename": "src/bitcoin-util-res.rc",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-util-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-util-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-util-res.rc?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "af07b28d3d532fb4888515ea83e57bb46933432a",
        "filename": "src/bitcoin-util.cpp",
        "status": "added",
        "additions": 221,
        "deletions": 0,
        "changes": 221,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-util.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "59346ab8f674517274777af6ffff62a83beed819",
        "filename": "src/bitcoin-wallet-res.rc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-wallet-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-wallet-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet-res.rc?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "3e8e5fc7bc593c02a9a250b3267d81f1a08a5df9",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 24,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "a98b50c8995b3ef365fd5fb376dd96c666ad82d9",
        "filename": "src/bitcoind-res.rc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoind-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoind-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind-res.rc?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "b7bcb534ef03495182d29efb1bc43567b378a5b5",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 53,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "aa111b5939fa8b6c45c791dd77a0628b7d5055af",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "326db1b4a7c4745b146477e52982d741dfe09cbc",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "41fa0b6fa04cf8fd7a28f12ffbd7f1723e0826c4",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "96cefbf3b2f9ffb0c688eee6d00249ad1ad75cc5",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "d0128a26d73f55918cbc19a3b365a55bb3ac5bfe",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 26,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "fdaa8abfb23d9bf10e155c231966056d15765407",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 15,
        "deletions": 17,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "43e8a39f3643c3fa8f085b1eebfd021ed1c389ff",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "88cf5ef0a88e720c956efa44f8cd223bc4565e4c",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 154,
        "deletions": 32,
        "changes": 186,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "d8b25c722046adc298c1c092f39b793257766674",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "2c517b58f844522ad64c5e2e4cd17715f1b2cc94",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 15,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "d593cff722f9f828dee742093a7960ab9d76387a",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "3dfbae33bc8c4b43279cd593083571a28fa484b1",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 976,
        "deletions": 559,
        "changes": 1535,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "4ceeb3600a364803f735e815f6b8ad0637094d3e",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 63,
        "deletions": 29,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "29c38e2d3ba6b7f708607b24f0444dda3af64db6",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 49,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "2da909f829f6588c38a3eac6f2ec917b697dfe13",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "dd84e720e72b244b8b4a3e3c3dcda63da1e32248",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "d2eb42d8cf4c1c3f302c4b793910e6b5dc0b82c1",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 10,
        "deletions": 30,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "dad14748a2ea17b1ed730f7ed164b5763b81f3b3",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "301c2d914cfd89357edc07060c2451e3116dfca5",
        "filename": "src/compat/assumptions.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/compat/assumptions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/compat/assumptions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/assumptions.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "8a51f310f7a990ee69e2fbc28ce162e9ebf23dfe",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 14,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "06d0dd6fbabe1cfe9838f8accaa0691276bf38b7",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "87140d0c714dc5c261d678a48ba329d2f68b8643",
        "filename": "src/compat/glibc_sanity_fdelt.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/src/compat/glibc_sanity_fdelt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4/src/compat/glibc_sanity_fdelt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity_fdelt.cpp?ref=ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4"
      },
      {
        "sha": "217cb019e1ad98e887e38e0bd1e471ef63ce8afa",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "f595f16eabf3271ce069457c272433178dd84cc6",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "e78dc9f2a5a07104ad8decc7d486b9e0974911a7",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "c4d305434a09629b706015b6ce30e4999cf21fa5",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 51,
        "deletions": 17,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      },
      {
        "sha": "5469a760eec250388c991744a10ef8e21540c7e5",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6d7a54270e3cf1d31aa1fe51184799101a7806/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=6f6d7a54270e3cf1d31aa1fe51184799101a7806"
      }
    ]
  }
]