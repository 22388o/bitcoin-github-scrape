MarcoFalke,2019-10-31 15:55:30,"Could add a unit test that fails without this patch? This should only happen in testnet when the block is mined 20 minutes in the future, right?",https://github.com/bitcoin/bitcoin/pull/17328#issuecomment-548443689,548443689,
darosior,2019-10-31 16:39:04,"> Could add a unit test that fails without this patch?\n\nI could not manage to make it return `verificationprogress` > 1 in a clean way. I think launching a mining thread and polling `getblockchaininfo` would make it occur, but it seems way too overkill for a minor patch like this doesn't it ?\n\n> This should only happen in testnet when the block is mined 20 minutes in the future, right?\n",https://github.com/bitcoin/bitcoin/pull/17328#issuecomment-548462985,548462985,
laanwj,2019-11-01 09:22:16,With regtest and mocked block times it ought to be possible.,https://github.com/bitcoin/bitcoin/pull/17328#issuecomment-548721149,548721149,
darosior,2019-11-01 13:44:12,"Could not reproduce on regtest, the `verificationprogress` would always be `1` in all my tests case.",https://github.com/bitcoin/bitcoin/pull/17328#issuecomment-548792392,548792392,
darosior,2019-11-02 11:52:21,"@laanwj why did you add the ""Waiting for author"" tag ?",https://github.com/bitcoin/bitcoin/pull/17328#issuecomment-549036870,549036870,
laanwj,2019-11-02 12:00:59,Waiting for you to add a test,https://github.com/bitcoin/bitcoin/pull/17328#issuecomment-549037469,549037469,
darosior,2019-11-02 14:44:26,"@laanwj Finally I think there is something going on that impeach me to test the `verificationprogress` : it will always be `1`, even during IBD (with transactions). Is this due to some regtest tweak I don't know about ? Anyway I think it's out of the scope of this PR and will open an issue to track this behavior.",https://github.com/bitcoin/bitcoin/pull/17328#issuecomment-549049935,549049935,
darosior,2019-11-04 20:55:47,"@laanwj (sorry to ping you again..) is this still ""waiting for author"" since it seems untestable on regtest for now and that there is an issue to track this specific problem ?",https://github.com/bitcoin/bitcoin/pull/17328#issuecomment-549542881,549542881,
laanwj,2019-11-06 09:33:52,"No, I think this is fine, you should look for more reviewers than me though.",https://github.com/bitcoin/bitcoin/pull/17328#issuecomment-550226203,550226203,
laanwj,2019-11-18 13:13:52,ACK 2f5f7d6b135e4eab368bbafd9e6e979aa72398de,https://github.com/bitcoin/bitcoin/pull/17328#issuecomment-555009396,555009396,
laanwj,2019-10-31 16:06:25,"please return `1.0` instead of `1` (more clear that it's a double/fraction)\nor maybe collapse it into one statement\n```\nreturn std::min(pindex->nChainTx / fTxTotal, 1.0);\n```",https://github.com/bitcoin/bitcoin/pull/17328#discussion_r341228540,341228540,src/validation.cpp
MarcoFalke,2019-10-31 16:10:18,"I think we use `std::min<double>(...)`, so that the type of the args doesn't matter.",https://github.com/bitcoin/bitcoin/pull/17328#discussion_r341230667,341230667,src/validation.cpp
laanwj,2019-10-31 16:29:20,that's fine with me too; I just think the `return 1; ` looks strange in a function that returns double,https://github.com/bitcoin/bitcoin/pull/17328#discussion_r341241158,341241158,src/validation.cpp
darosior,2019-10-31 16:34:14,"Corrected, thanks!",https://github.com/bitcoin/bitcoin/pull/17328#discussion_r341243750,341243750,src/validation.cpp
promag,2019-11-06 10:02:34,A comment explaining the truncate would be nice.,https://github.com/bitcoin/bitcoin/pull/17328#discussion_r343008655,343008655,src/validation.cpp
promag,2019-11-06 10:07:27,"An alternative is to truncate where it's needed, in L5064:\n```\nfTxTotal = std::max<double>(data.nTxCount + (nNow - data.nTime) * data.dTxRate, pindex->nChainTx);\n```",https://github.com/bitcoin/bitcoin/pull/17328#discussion_r343010835,343010835,src/validation.cpp
laanwj,2019-11-06 10:39:29,"IMO this is fine as-is\n\n- `std::min(..., bound)`  is a common enough way to cap values, it doesn't need explaining on every usage site\n- it makes sense for ""progress"" values to never be able to get above 1.0 or below 0.0\n",https://github.com/bitcoin/bitcoin/pull/17328#discussion_r343025200,343025200,src/validation.cpp
