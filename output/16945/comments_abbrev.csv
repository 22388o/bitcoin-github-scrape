DrahtBot,2019-09-23 20:01:21,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17737](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17737.html) (Add ChainstateManager, remove BlockManager ",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-534260399,534260399,
jamesob,2019-09-24 18:16:25,"Thanks for the looks so far @ryanofsky @MarcoFalke. I've taken all proposed advice, as well as going further to parameterize the maximum coins cache and mempool target sizes. I've also added a unittest exercising this.",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-534683144,534683144,
jamesob,2019-09-25 19:39:30,"Okay, after some fiddling the unittests are passing.",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-535179389,535179389,
jamesob,2019-11-06 18:31:17,"I've revised the new unittest so that it passes on Travis. I don't really follow the AppVeyor failure, so would appreciate any hints there.",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-550441394,550441394,
ryanofsky,2019-11-06 18:37:16,"> I've revised the new unittest so that it passes on Travis. I don't really follow the AppVeyor failure, so would appreciate any hints there.\n\nAppveyor failure is a known issue and should be fixed by https://github.com/bitcoin/bitcoin/pull/17384#issuecomment-550305021\n\n\n",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-550443607,550443607,
jamesob,2019-11-06 19:11:32,"Thanks for the review, Russ.\n> replacing int64_t with size_t argument\n\nI did this to appease @ariard without thinking too hard about it but you're right, I think it doesn't make too much sense. Can revert if preferable. ",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-550457355,550457355,
ariard,2019-11-07 17:04:44,"Code review ACK 513981f.\n\n> Changes since last review: replacing int64_t with size_t argument (not actually sure why, since it's called with an int64_t in the commit and only ever passed to std::max<int64_t>).\n\nI think more variable types need to be updated in `GetCoinsCacheSizeState` to be `size_t` to make sense. IIRC, it's better to use size_t as it let more flexibility to the compiler t",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-551171779,551171779,
ryanofsky,2019-11-18 19:53:55,Status of this PR? I guess it needs a little more review. Hopefully it shouldn't take much. The code change is simple even though the test is complicated.,https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-555182147,555182147,
jamesob,2019-11-18 20:31:41,"Happy to make (or at least investigate) the `size_t` change if reviewers want, but also not eager to invalidate ACKs.",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-555196304,555196304,
ryanofsky,2019-11-18 21:02:12,"> Happy to make (or at least investigate) the `size_t` change if reviewers want, but also not eager to invalidate ACKs.\n\nI'm not at all concerned about the size_t thing, so feel to just push for merge or more review",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-555207388,555207388,
ariard,2019-11-19 16:43:58,"> Happy to make (or at least investigate) the size_t change if reviewers want, but also not eager to invalidate ACKs.\n\nDon't bother for the `size_t`, not worth invalidating ACKs.",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-555597051,555597051,
ryanofsky,2019-11-21 14:34:47,"Is this ready to be merged? It's a simple change that's had reviews it looks like from 5 people, including 3 reviews of the latest 513981f (Sjors ACK is for the latest code but has a different hash because he skipped the test-only commit).",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-557111829,557111829,
promag,2019-11-24 22:13:36,"Concept ACK.\n\n@jamesob are you going to do something about https://github.com/bitcoin/bitcoin/pull/16945/files#r342743813?",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-557933478,557933478,
jamesob,2019-11-26 16:54:12,"@promag the tests have been fixed to be stable on CI (see the [changes](https://github.com/bitcoin/bitcoin/compare/028778a75f03a866b557a463bcee810a454e5404..513981fe733564eddfb13de59a0e59a5c10736f9)). I agree with @ryanofsky that this seems ready for merge, but if anyone else has any feedback they feel is blocking the PR, I'm happy to address.",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-558721388,558721388,
jamesob,2019-12-11 20:40:21,"I've pushed [changes](https://github.com/bitcoin/bitcoin/compare/513981fe733564eddfb13de59a0e59a5c10736f9..825ab6c3b67b91f01e5d49991cc8d2f956456a13) addressing @Sjors' feedback. \n\nSo far the ACK tally for the previous HEAD (and current HEAD, less comment changes) is\n\n@promag - code review ACK\n@Sjors - code review ACK\n@ryanofsky - code review ACK\n@ariard - code review ACK",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-564723209,564723209,
Sjors,2019-12-12 09:00:31,Travis bloodbath :-(,https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-564913486,564913486,
jamesob,2019-12-12 16:30:45,"> Travis bloodbath :-(\n\nRebased to avoid carnage by fixing a silent merge conflict.",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-565081593,565081593,
ryanofsky,2019-12-17 16:59:32,"Saw this in IRC:\n\n> it's discouraging to think that #16945 probably just would've sailed through review if I hadn't bothered to add a unittest\n\nI understand the sentiment, but I also do think the unit test is hard to understand, and I would not like to have to debug it in the future. I'm comfortable acking it now with the hope that maybe it is the type of thing that's a little complicated ",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-566653236,566653236,
jamesob,2019-12-17 21:16:42,"> The basic problem is that is that instead of being a test of the just\nGetCoinsCacheSizeState function, it is a test of that function plus all the DynamicMemoryUsage functions which are very platform specific. I think a more ideal unit test would either mock or wrap the the DynamicMemoryUsage functions to be independent of the implementations of those functions.\n\nPersonally I think it's mor",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-566752559,566752559,
ryanofsky,2020-01-08 21:57:50,"It seems like this has had enough review, but some of the previous reviews are out of date. @promag, @Sjors, @ariard maybe you could reack?",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-572276562,572276562,
ariard,2020-01-09 16:54:55,"Code review ACK 02b9511.\n\nChanges since 513981f, documenting better new test and printing an exit message in case of exotic archs.",https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-572653422,572653422,
ryanofsky,2019-09-24 15:04:04,"Maybe avoid introducing `static` here since there was no `static` previously, and in general this isn't a pattern we use with other `GetArg` calls, and and it makes this code harder to test with different sizes, or allow updating the size without restarting.",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327669352,327669352,src/validation.cpp
MarcoFalke,2019-09-24 15:24:58,Would it make sense to pass in the mempool as a `tx_pool` argument instead of using the global in this function?,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327681232,327681232,src/validation.cpp
jamesob,2019-09-24 15:45:51,"Good points, will fix. Can't remember why I added that.",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327692844,327692844,src/validation.cpp
jamesob,2019-09-24 15:45:57,"Yep, good idea.",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327692899,327692899,src/validation.cpp
MarcoFalke,2019-09-24 19:18:37,"Looks like this fails:\n\n```\nRunning tests: validation_flush_tests from test/validation_flush_tests.cpp\n\nRunning 1 test case...\n\nTest cases order is shuffled using seed: 1589090245\n\nEntering test module ""Bitcoin Core Test Suite""\n\ntest/validation_flush_tests.cpp(12): Entering test suite ""validation_flush_tests""\n\ntest/validation_flush_tests.cpp(19): Entering test case ""getco",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327790044,327790044,src/test/validation_flush_tests.cpp
jamesob,2019-09-24 19:31:59,"Ah right, forgot to account for 32 bit platforms.",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327795428,327795428,src/test/validation_flush_tests.cpp
MarcoFalke,2019-09-25 17:06:11,"```\ntest/validation_flush_tests.cpp(106): error: in ""validation_flush_tests/getcoinscachesizestate"": check chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, 0) == CoinsCacheSizeState::CRITICAL has failed [1 != 2]\n```\n\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/589530820#L2957",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r328237794,328237794,src/test/validation_flush_tests.cpp
ryanofsky,2019-09-30 17:25:12,"It's not clear from the comment when this is expected to happen, like whether it happens on a certain type of plaform. Also it's not clear how if `DynamicMemoryUsage()` is just using `sizeof` internally, the test couldn't take this into account using the same sizeof expressions. Would at least extend comment to explain the issue.",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r329695559,329695559,src/test/validation_flush_tests.cpp
ryanofsky,2019-09-30 17:28:43,"It might be clearer to move these fallback checks into a basic test and have the checks below be an extended test, running the basic test on all platforms and the extended test only on supported platforms. This would make the basic test more robust and easier to debug since it would run everywhere, and improve the extended test by making it shorter.",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r329697146,329697146,src/test/validation_flush_tests.cpp
ryanofsky,2019-09-30 17:42:37,"These magic `-1` values do not seem like the best thing. They aren't explicitly documented, assign a negative number to an unsigned type, add a runtime condition for something that is known at compile time, and cause the function to be linked against global variables that it doesn't always need.\n\nWould suggest using an overload instead of default values:\n\n```c++\nCoinsCacheSizeState GetCo",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r329703114,329703114,src/validation.cpp
jamesob,2019-10-17 06:45:31,I tried breaking the extended tests out but the two end up sharing so much data that it's a pain to pass it all into the extended function. If you really think this is worthwhile I can think harder about how to break it up cleanly but in the meantime I don't think it's too egregious to leave as-is.,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r335832313,335832313,src/test/validation_flush_tests.cpp
jamesob,2019-10-17 06:45:51,"Good points, will fix.",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r335832412,335832412,src/validation.cpp
jamesob,2019-10-17 06:52:49,I wanted to avoid duplicating the `DynamicMemoryUsage()` calculations explicitly because they're not totally trivial and it seemed like something that'd be bad to copy/paste. To be honest I don't understand why some 64-bit Travis platforms didn't slot into these initial allocations and so I can't think of what else to say here.,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r335834389,335834389,src/test/validation_flush_tests.cpp
ariard,2019-10-30 20:18:51,"Even if mempool is passed as a const reference can't we go further and pass only mempool memory usage ?\n\nAlso if wrapper is for test-only or convenience for its further usage inside `PopulateAndValidateSnapshot` add reason in function comment",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340836922,340836922,src/validation.h
ariard,2019-10-30 20:21:33,nit: `nLargeThreshold` (naming conv shouldn't be same with nTotalSpace?),https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340838123,340838123,src/validation.cpp
ariard,2019-10-30 21:06:31,Could we use `size_t` instead of `int64_t`? `DynamicUsage` is already returning a `size_t`?,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340858159,340858159,src/validation.h
ariard,2019-10-30 22:19:30,"Hmmm I spent some time trying to do the math for 32 but without a 32-bit platform it's quite hard so I've tried to observe some allocation patterns thanks to `print_view_mem_usage` on 64-bit, but given there are allocation threshold effects on how `std::unordered_map` is behaving (common practices for allocators to multiply some magic numbers by 2 after being full) we can't do hard assumptions...",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340885423,340885423,src/test/validation_flush_tests.cpp
ariard,2019-10-30 22:22:14,"nit: could use MAX_MEMPOOL_SIZE_BYTES = 1024, I like bitwise but maybe not everyone :p",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340886240,340886240,src/test/validation_flush_tests.cpp
mzumsande,2019-10-31 00:05:24,Just noting that the test fails on ARM ([travis-log](https://travis-ci.org/bitcoin/bitcoin/jobs/599016306?utm_medium=notification&utm_source=github_status)) because `CoinsCacheSizeState::LARGE` is not hit.,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340912856,340912856,src/test/validation_flush_tests.cpp
jamesob,2019-11-05 19:07:02,"Yeah I'm beginning to think that this test is a fool's errand. I might early-exit if the first map expansion doesn't match some pattern, but in general everything feels a little flaky here.",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r342743813,342743813,src/test/validation_flush_tests.cpp
jamesob,2019-11-05 20:34:02,Snake case is preferred in new code per the styleguide (https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c) -- I don't think naming new variables to match the naming convention of old ones is something we've asked for previously.,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r342783788,342783788,src/validation.cpp
jamesob,2019-11-05 20:34:11,done,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r342783853,342783853,src/validation.h
jamesob,2019-11-06 19:10:17,I think this is fine as-is for tests.,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r343275568,343275568,src/test/validation_flush_tests.cpp
ariard,2019-11-07 16:45:06,Ah thanks and so snaking case `nTotalSpace`?,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r343756348,343756348,src/validation.cpp
Sjors,2019-11-19 15:14:26,"`total_space`, `cache_size` and `mempool_usage` would make sense.",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r347982946,347982946,src/validation.cpp
Sjors,2019-11-19 15:15:08,This is an odd place for a constant.,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r347983347,347983347,src/validation.cpp
Sjors,2019-11-27 13:12:16,Some explanation would be useful here.,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r351278238,351278238,src/test/validation_flush_tests.cpp
Sjors,2019-11-27 13:14:58,"It should probably report when these tests are skipped, which seems to be the case on native 32 bit machines.\n\nWhy not inspect the value of `view.DynamicMemoryUsage()` to infer how many coins you need to add to reach `CRITICAL`? Alternatively, why not just keep adding coins until you do reach `CRITICAL` (with some upper bound to prevent an infinite loop if there's a serious bug)?\n",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r351279406,351279406,src/test/validation_flush_tests.cpp
jamesob,2019-12-05 17:23:30,"> It should probably report when these tests are skipped\n\nWhat are you thinking, `BOOST_TEST_MESSAGE`?\n\n> Why not inspect the value of view.DynamicMemoryUsage() to infer how many coins you need to add to reach CRITICAL?\n\nI don't think it's that simple - different platforms/std::unordered_map implementations allocate differently, and so the current memory usage doesn't tell us enough ab",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r354445776,354445776,src/test/validation_flush_tests.cpp
promag,2019-12-09 00:49:53,"Why you choose this order (2,1,0)?",https://github.com/bitcoin/bitcoin/pull/16945#discussion_r355229672,355229672,src/validation.h
jamesob,2019-12-11 20:04:50,Why not? It's so we can make statements like https://github.com/bitcoin/bitcoin/pull/15606/commits/f8a21cd1dbde9389523e21a93c0f0b1734336996#diff-24efdb00bfbe56b140fb006b562cc70bR5331,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r356807361,356807361,src/validation.h
jamesob,2019-12-17 21:18:57,Is that change good or would you prefer to see something else?,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r359033578,359033578,src/test/validation_flush_tests.cpp
promag,2020-01-09 19:15:37,Ok.,https://github.com/bitcoin/bitcoin/pull/16945#discussion_r364914626,364914626,src/validation.h
