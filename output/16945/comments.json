[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/534260399",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-534260399",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 534260399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDI2MDM5OQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-23T20:01:21Z",
    "updated_at": "2020-01-08T00:35:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17737](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17737.html) (Add ChainstateManager, remove BlockManager global by jamesob)\n* [#15606](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15606.html) ([experimental] UTXO snapshots by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/534260399/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/534683144",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-534683144",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 534683144,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDY4MzE0NA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-24T18:16:25Z",
    "updated_at": "2019-09-24T18:16:25Z",
    "author_association": "MEMBER",
    "body": "Thanks for the looks so far @ryanofsky @MarcoFalke. I've taken all proposed advice, as well as going further to parameterize the maximum coins cache and mempool target sizes. I've also added a unittest exercising this.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/534683144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/535179389",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-535179389",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 535179389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNTE3OTM4OQ==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-25T19:39:30Z",
    "updated_at": "2019-09-25T19:39:30Z",
    "author_association": "MEMBER",
    "body": "Okay, after some fiddling the unittests are passing.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/535179389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550441394",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-550441394",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 550441394,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MDQ0MTM5NA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-06T18:31:17Z",
    "updated_at": "2019-11-06T18:31:17Z",
    "author_association": "MEMBER",
    "body": "I've revised the new unittest so that it passes on Travis. I don't really follow the AppVeyor failure, so would appreciate any hints there.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550441394/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550443607",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-550443607",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 550443607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MDQ0MzYwNw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-06T18:37:16Z",
    "updated_at": "2019-11-06T18:37:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I've revised the new unittest so that it passes on Travis. I don't really follow the AppVeyor failure, so would appreciate any hints there.\r\n\r\nAppveyor failure is a known issue and should be fixed by https://github.com/bitcoin/bitcoin/pull/17384#issuecomment-550305021\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550443607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550457355",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-550457355",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 550457355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MDQ1NzM1NQ==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-06T19:11:32Z",
    "updated_at": "2019-11-06T19:11:32Z",
    "author_association": "MEMBER",
    "body": "Thanks for the review, Russ.\r\n> replacing int64_t with size_t argument\r\n\r\nI did this to appease @ariard without thinking too hard about it but you're right, I think it doesn't make too much sense. Can revert if preferable. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550457355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/551171779",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-551171779",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 551171779,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTE3MTc3OQ==",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-07T17:04:44Z",
    "updated_at": "2019-11-07T17:04:44Z",
    "author_association": "MEMBER",
    "body": "Code review ACK 513981f.\r\n\r\n> Changes since last review: replacing int64_t with size_t argument (not actually sure why, since it's called with an int64_t in the commit and only ever passed to std::max<int64_t>).\r\n\r\nI think more variable types need to be updated in `GetCoinsCacheSizeState` to be `size_t` to make sense. IIRC, it's better to use size_t as it let more flexibility to the compiler to optimize for the platform addresses size.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/551171779/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555182147",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-555182147",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 555182147,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTE4MjE0Nw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-18T19:53:55Z",
    "updated_at": "2019-11-18T19:53:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Status of this PR? I guess it needs a little more review. Hopefully it shouldn't take much. The code change is simple even though the test is complicated.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555182147/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555196304",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-555196304",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 555196304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTE5NjMwNA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-18T20:31:41Z",
    "updated_at": "2019-11-18T20:31:41Z",
    "author_association": "MEMBER",
    "body": "Happy to make (or at least investigate) the `size_t` change if reviewers want, but also not eager to invalidate ACKs.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555196304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555207388",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-555207388",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 555207388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTIwNzM4OA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-18T21:02:12Z",
    "updated_at": "2019-11-18T21:02:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Happy to make (or at least investigate) the `size_t` change if reviewers want, but also not eager to invalidate ACKs.\r\n\r\nI'm not at all concerned about the size_t thing, so feel to just push for merge or more review",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555207388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555597051",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-555597051",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 555597051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTU5NzA1MQ==",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-19T16:43:58Z",
    "updated_at": "2019-11-19T16:43:58Z",
    "author_association": "MEMBER",
    "body": "> Happy to make (or at least investigate) the size_t change if reviewers want, but also not eager to invalidate ACKs.\r\n\r\nDon't bother for the `size_t`, not worth invalidating ACKs.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555597051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557111829",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-557111829",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 557111829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzExMTgyOQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-21T14:34:47Z",
    "updated_at": "2019-11-21T14:34:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is this ready to be merged? It's a simple change that's had reviews it looks like from 5 people, including 3 reviews of the latest 513981f (Sjors ACK is for the latest code but has a different hash because he skipped the test-only commit).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557111829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557933478",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-557933478",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 557933478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzkzMzQ3OA==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-24T22:13:36Z",
    "updated_at": "2019-11-24T22:13:36Z",
    "author_association": "MEMBER",
    "body": "Concept ACK.\r\n\r\n@jamesob are you going to do something about https://github.com/bitcoin/bitcoin/pull/16945/files#r342743813?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557933478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558721388",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-558721388",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 558721388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODcyMTM4OA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T16:54:12Z",
    "updated_at": "2019-11-26T16:54:12Z",
    "author_association": "MEMBER",
    "body": "@promag the tests have been fixed to be stable on CI (see the [changes](https://github.com/bitcoin/bitcoin/compare/028778a75f03a866b557a463bcee810a454e5404..513981fe733564eddfb13de59a0e59a5c10736f9)). I agree with @ryanofsky that this seems ready for merge, but if anyone else has any feedback they feel is blocking the PR, I'm happy to address.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558721388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564723209",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-564723209",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 564723209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDcyMzIwOQ==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-11T20:40:21Z",
    "updated_at": "2019-12-11T20:40:21Z",
    "author_association": "MEMBER",
    "body": "I've pushed [changes](https://github.com/bitcoin/bitcoin/compare/513981fe733564eddfb13de59a0e59a5c10736f9..825ab6c3b67b91f01e5d49991cc8d2f956456a13) addressing @Sjors' feedback. \r\n\r\nSo far the ACK tally for the previous HEAD (and current HEAD, less comment changes) is\r\n\r\n@promag - code review ACK\r\n@Sjors - code review ACK\r\n@ryanofsky - code review ACK\r\n@ariard - code review ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564723209/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564913486",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-564913486",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 564913486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDkxMzQ4Ng==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-12T09:00:31Z",
    "updated_at": "2019-12-12T09:00:31Z",
    "author_association": "MEMBER",
    "body": "Travis bloodbath :-(",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564913486/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565081593",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-565081593",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 565081593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTA4MTU5Mw==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-12T16:30:45Z",
    "updated_at": "2019-12-12T16:30:45Z",
    "author_association": "MEMBER",
    "body": "> Travis bloodbath :-(\r\n\r\nRebased to avoid carnage by fixing a silent merge conflict.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565081593/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/566653236",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-566653236",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 566653236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjY1MzIzNg==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-17T16:59:32Z",
    "updated_at": "2019-12-17T16:59:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Saw this in IRC:\r\n\r\n> it's discouraging to think that #16945 probably just would've sailed through review if I hadn't bothered to add a unittest\r\n\r\nI understand the sentiment, but I also do think the unit test is hard to understand, and I would not like to have to debug it in the future. I'm comfortable acking it now with the hope that maybe it is the type of thing that's a little complicated to put in place, but once there will be reliable and useful. But if it started breaking in the future and the fix wasn't obvious I could see wanting to drop it instead of update it. \r\n\r\nThe basic problem is that is that instead of being a test of the just \r\n`GetCoinsCacheSizeState` function, it is a test of that function plus all the `DynamicMemoryUsage` functions which are very platform specific. I think a more ideal unit test would either mock or wrap the the `DynamicMemoryUsage` functions to be independent of the implementations of those functions.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/566653236/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/566752559",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-566752559",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 566752559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njc1MjU1OQ==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-17T21:16:42Z",
    "updated_at": "2019-12-17T21:16:42Z",
    "author_association": "MEMBER",
    "body": "> The basic problem is that is that instead of being a test of the just\r\nGetCoinsCacheSizeState function, it is a test of that function plus all the DynamicMemoryUsage functions which are very platform specific. I think a more ideal unit test would either mock or wrap the the DynamicMemoryUsage functions to be independent of the implementations of those functions.\r\n\r\nPersonally I think it's more desirable to have wider/incidental coverage (at the expense of lower specificity in terms of what failed) because the coins cache is a critically important part of the system. We should be alerted if e.g. the size of the coins cache entries changes, since that has pretty drastic effects on performance. Our unittest coverage is paltry as it stands, and when that's the case I tend more towards adding integration- rather than strict unit-tests to get as much coverage out of what few tests we do have.\r\n\r\nI'd much prefer to be hyper-aware of what's going on with the coins cache and have to update a few tests once in a while than risk being unaware of even a small change to such an important part of the system. If there are ways I can make the test clearer or better, I'm all ears, but I am very hesitant to look to mocks - not only because that will probably require substantive changes to code purely for the sake of testing, but because for a system like Bitcoin it seems preferable have overzealous test coverage than the illusion of it thanks to a constellation of mocks.\r\n\r\nThere is an argument to be made that a test about when to flush the cache isn't an appropriate place to make assertions about the size of its contents, but it was convenient and this stuff wasn't tested so I figured better have it somewhere than not at all.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/566752559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572276562",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-572276562",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 572276562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjI3NjU2Mg==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-08T21:57:50Z",
    "updated_at": "2020-01-08T21:57:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems like this has had enough review, but some of the previous reviews are out of date. @promag, @Sjors, @ariard maybe you could reack?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572276562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572653422",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#issuecomment-572653422",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16945",
    "id": 572653422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjY1MzQyMg==",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-09T16:54:55Z",
    "updated_at": "2020-01-09T16:54:55Z",
    "author_association": "MEMBER",
    "body": "Code review ACK 02b9511.\r\n\r\nChanges since 513981f, documenting better new test and printing an exit message in case of exotic archs.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572653422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327669352",
    "pull_request_review_id": 292493041,
    "id": 327669352,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzY2OTM1Mg==",
    "diff_hunk": "@@ -2206,13 +2206,30 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()\n+{\n+    static int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "e3ac4ebeeb64b9fc9752384177474a53d8bf75c3",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe avoid introducing `static` here since there was no `static` previously, and in general this isn't a pattern we use with other `GetArg` calls, and and it makes this code harder to test with different sizes, or allow updating the size without restarting.",
    "created_at": "2019-09-24T15:04:04Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327669352",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327669352"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327669352"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327669352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2211,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327681232",
    "pull_request_review_id": 292508828,
    "id": 327681232,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzY4MTIzMg==",
    "diff_hunk": "@@ -2206,13 +2206,30 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()\n+{\n+    static int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolUsage = mempool.DynamicMemoryUsage();",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 7,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "e3ac4ebeeb64b9fc9752384177474a53d8bf75c3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Would it make sense to pass in the mempool as a `tx_pool` argument instead of using the global in this function?",
    "created_at": "2019-09-24T15:24:58Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327681232",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327681232"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327681232"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327681232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2212,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327692844",
    "pull_request_review_id": 292524313,
    "id": 327692844,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzY5Mjg0NA==",
    "diff_hunk": "@@ -2206,13 +2206,30 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()\n+{\n+    static int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "e3ac4ebeeb64b9fc9752384177474a53d8bf75c3",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good points, will fix. Can't remember why I added that.",
    "created_at": "2019-09-24T15:45:51Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327692844",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327692844"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327692844"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327692844/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2211,
    "side": "RIGHT",
    "in_reply_to_id": 327669352
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327692899",
    "pull_request_review_id": 292524313,
    "id": 327692899,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzY5Mjg5OQ==",
    "diff_hunk": "@@ -2206,13 +2206,30 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()\n+{\n+    static int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolUsage = mempool.DynamicMemoryUsage();",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 7,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "e3ac4ebeeb64b9fc9752384177474a53d8bf75c3",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yep, good idea.",
    "created_at": "2019-09-24T15:45:57Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327692899",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327692899"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327692899"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327692899/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2212,
    "side": "RIGHT",
    "in_reply_to_id": 327681232
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327790044",
    "pull_request_review_id": 292650589,
    "id": 327790044,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzc5MDA0NA==",
    "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    print_view_mem_usage(view);\n+    BOOST_CHECK_EQUAL(view.DynamicMemoryUsage(), 32);",
    "path": "src/test/validation_flush_tests.cpp",
    "position": null,
    "original_position": 55,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "3c66fb4e585f727b2718af8987dcafe1cff05bbb",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Looks like this fails:\r\n\r\n```\r\nRunning tests: validation_flush_tests from test/validation_flush_tests.cpp\r\n\r\nRunning 1 test case...\r\n\r\nTest cases order is shuffled using seed: 1589090245\r\n\r\nEntering test module \"Bitcoin Core Test Suite\"\r\n\r\ntest/validation_flush_tests.cpp(12): Entering test suite \"validation_flush_tests\"\r\n\r\ntest/validation_flush_tests.cpp(19): Entering test case \"getcoinscachesizestate\"\r\n\r\nCCoinsViewCache memory usage: 16\r\n\r\ntest/validation_flush_tests.cpp(55): error: in \"validation_flush_tests/getcoinscachesizestate\": check view.DynamicMemoryUsage() == 32 has failed [16 != 32]",
    "created_at": "2019-09-24T19:18:37Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327790044",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327790044"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327790044"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327790044/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 55,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327795428",
    "pull_request_review_id": 292657569,
    "id": 327795428,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzc5NTQyOA==",
    "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    print_view_mem_usage(view);\n+    BOOST_CHECK_EQUAL(view.DynamicMemoryUsage(), 32);",
    "path": "src/test/validation_flush_tests.cpp",
    "position": null,
    "original_position": 55,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "3c66fb4e585f727b2718af8987dcafe1cff05bbb",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah right, forgot to account for 32 bit platforms.",
    "created_at": "2019-09-24T19:31:59Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327795428",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327795428"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r327795428"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327795428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 55,
    "side": "RIGHT",
    "in_reply_to_id": 327790044
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328237794",
    "pull_request_review_id": 293230080,
    "id": 328237794,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODIzNzc5NA==",
    "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    void* __ptr;\n+    constexpr bool is_64_bit = sizeof(__ptr) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common\n+    // cases, we can't really continue to make assertions about memory usage.\n+    // End the test early.\n+    if (view.DynamicMemoryUsage() != 32 && view.DynamicMemoryUsage() != 16) {\n+        // Add a bunch of coins to see that we at least flip over to CRITICAL.\n+\n+        for (int i{0}; i < 1000; ++i) {\n+            COutPoint res = add_coin(view);\n+            BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        }\n+\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::CRITICAL);\n+\n+        return;\n+    }\n+\n+    print_view_mem_usage(view);\n+    BOOST_CHECK_EQUAL(view.DynamicMemoryUsage(), is_64_bit ? 32 : 16);\n+\n+    // We should be able to add COINS_UNTIL_CRITICAL coins to the cache before going CRITICAL.\n+    // This is contingent not only on the dynamic memory usage of the Coins\n+    // that we're adding (COIN_SIZE bytes per), but also on how much memory the\n+    // cacheCoins (unordered_map) preallocates.\n+    //\n+    // I came up with the count by examining the printed memory usage of the\n+    // CCoinsCacheView, so it's sort of arbitrary - but it shouldn't change\n+    // unless we somehow change the way the cacheCoins map allocates memory.\n+    //\n+    constexpr int COINS_UNTIL_CRITICAL = is_64_bit ? 4 : 5;\n+\n+    for (int i{0}; i < COINS_UNTIL_CRITICAL; ++i) {\n+        COutPoint res = add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    // Adding an additional coin will push us over the edge to CRITICAL.\n+    COutPoint res = add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::CRITICAL);",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 119,
    "original_position": 106,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "4708fcbf99725ccb38b1f2f847aa8f7eb0e4849a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\ntest/validation_flush_tests.cpp(106): error: in \"validation_flush_tests/getcoinscachesizestate\": check chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, 0) == CoinsCacheSizeState::CRITICAL has failed [1 != 2]\r\n```\r\n\r\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/589530820#L2957",
    "created_at": "2019-09-25T17:06:11Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r328237794",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328237794"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r328237794"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328237794/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 119,
    "original_line": 119,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329695559",
    "pull_request_review_id": 295131253,
    "id": 329695559,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTY5NTU1OQ==",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    void* __ptr;\n+    constexpr bool is_64_bit = sizeof(__ptr) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 62,
    "original_position": 59,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "d780c6a3ef07715330edec21fcf2882db75d9166",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's not clear from the comment when this is expected to happen, like whether it happens on a certain type of plaform. Also it's not clear how if `DynamicMemoryUsage()` is just using `sizeof` internally, the test couldn't take this into account using the same sizeof expressions. Would at least extend comment to explain the issue.",
    "created_at": "2019-09-30T17:25:12Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r329695559",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329695559"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r329695559"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329695559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 62,
    "original_line": 62,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329697146",
    "pull_request_review_id": 295131253,
    "id": 329697146,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTY5NzE0Ng==",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    void* __ptr;\n+    constexpr bool is_64_bit = sizeof(__ptr) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common\n+    // cases, we can't really continue to make assertions about memory usage.\n+    // End the test early.\n+    if (view.DynamicMemoryUsage() != 32 && view.DynamicMemoryUsage() != 16) {\n+        // Add a bunch of coins to see that we at least flip over to CRITICAL.",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 66,
    "original_position": 63,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "d780c6a3ef07715330edec21fcf2882db75d9166",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It might be clearer to move these fallback checks into a basic test and have the checks below be an extended test, running the basic test on all platforms and the extended test only on supported platforms. This would make the basic test more robust and easier to debug since it would run everywhere, and improve the extended test by making it shorter.",
    "created_at": "2019-09-30T17:28:43Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r329697146",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329697146"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r329697146"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329697146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329703114",
    "pull_request_review_id": 295131253,
    "id": 329703114,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTcwMzExNA==",
    "diff_hunk": "@@ -2206,13 +2206,42 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n+    const CTxMemPool& tx_pool,\n+    size_t max_coins_cache_size_bytes,\n+    int64_t max_mempool_size_bytes)\n+{\n+    if (max_coins_cache_size_bytes == -1) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "d780c6a3ef07715330edec21fcf2882db75d9166",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "These magic `-1` values do not seem like the best thing. They aren't explicitly documented, assign a negative number to an unsigned type, add a runtime condition for something that is known at compile time, and cause the function to be linked against global variables that it doesn't always need.\r\n\r\nWould suggest using an overload instead of default values:\r\n\r\n```c++\r\nCoinsCacheSizeState GetCoinsCacheSizeState(const CTxMemPool& tx_pool, size_t max_coins_cache_size_bytes, int64_t max_mempool_size_bytes);\r\nCoinsCacheSizeState GetCoinsCacheSizeState(const CTxMemPool& tx_pool) {\r\n    return GetCoinsCacheSizeState(tx_pool, ::nCoinCacheUsage, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\r\n}\r\n```",
    "created_at": "2019-09-30T17:42:37Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r329703114",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329703114"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r329703114"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329703114/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2214,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335832313",
    "pull_request_review_id": 303032495,
    "id": 335832313,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgzMjMxMw==",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    void* __ptr;\n+    constexpr bool is_64_bit = sizeof(__ptr) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common\n+    // cases, we can't really continue to make assertions about memory usage.\n+    // End the test early.\n+    if (view.DynamicMemoryUsage() != 32 && view.DynamicMemoryUsage() != 16) {\n+        // Add a bunch of coins to see that we at least flip over to CRITICAL.",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 66,
    "original_position": 63,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "d780c6a3ef07715330edec21fcf2882db75d9166",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I tried breaking the extended tests out but the two end up sharing so much data that it's a pain to pass it all into the extended function. If you really think this is worthwhile I can think harder about how to break it up cleanly but in the meantime I don't think it's too egregious to leave as-is.",
    "created_at": "2019-10-17T06:45:31Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r335832313",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335832313"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r335832313"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335832313/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 329697146
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335832412",
    "pull_request_review_id": 303032635,
    "id": 335832412,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgzMjQxMg==",
    "diff_hunk": "@@ -2206,13 +2206,42 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n+    const CTxMemPool& tx_pool,\n+    size_t max_coins_cache_size_bytes,\n+    int64_t max_mempool_size_bytes)\n+{\n+    if (max_coins_cache_size_bytes == -1) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "d780c6a3ef07715330edec21fcf2882db75d9166",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good points, will fix.",
    "created_at": "2019-10-17T06:45:51Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r335832412",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335832412"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r335832412"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335832412/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2214,
    "side": "RIGHT",
    "in_reply_to_id": 329703114
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335834389",
    "pull_request_review_id": 303035177,
    "id": 335834389,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgzNDM4OQ==",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    void* __ptr;\n+    constexpr bool is_64_bit = sizeof(__ptr) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 62,
    "original_position": 59,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "d780c6a3ef07715330edec21fcf2882db75d9166",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wanted to avoid duplicating the `DynamicMemoryUsage()` calculations explicitly because they're not totally trivial and it seemed like something that'd be bad to copy/paste. To be honest I don't understand why some 64-bit Travis platforms didn't slot into these initial allocations and so I can't think of what else to say here.",
    "created_at": "2019-10-17T06:52:49Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r335834389",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335834389"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r335834389"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335834389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 62,
    "original_line": 62,
    "side": "RIGHT",
    "in_reply_to_id": 329695559
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340836922",
    "pull_request_review_id": 309493874,
    "id": 340836922,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDgzNjkyMg==",
    "diff_hunk": "@@ -720,6 +729,17 @@ class CChainState {\n     /** Update the chain tip based on database information, i.e. CoinsTip()'s best block. */\n     bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    //! Dictates whether we need to flush the cache to disk or not.\n+    //!\n+    //! @return the state of the size of the coins cache.\n+    CoinsCacheSizeState GetCoinsCacheSizeState(const CTxMemPool& tx_pool)",
    "path": "src/validation.h",
    "position": 23,
    "original_position": 23,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "b1f69a3126eb42e07ffdfdaf814c424a8fc5a7d1",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Even if mempool is passed as a const reference can't we go further and pass only mempool memory usage ?\r\n\r\nAlso if wrapper is for test-only or convenience for its further usage inside `PopulateAndValidateSnapshot` add reason in function comment",
    "created_at": "2019-10-30T20:18:51Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340836922",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340836922"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340836922"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340836922/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 736,
    "original_line": 736,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340838123",
    "pull_request_review_id": 309493874,
    "id": 340838123,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDgzODEyMw==",
    "diff_hunk": "@@ -2206,13 +2206,44 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool& tx_pool)\n+{\n+    return this->GetCoinsCacheSizeState(\n+        tx_pool,\n+        nCoinCacheUsage,\n+        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+}\n+\n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n+    const CTxMemPool& tx_pool,\n+    size_t max_coins_cache_size_bytes,\n+    int64_t max_mempool_size_bytes)\n+{\n+    int64_t nMempoolUsage = tx_pool.DynamicMemoryUsage();\n+    int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n+    int64_t nTotalSpace =\n+        max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);\n+\n+    //! No need to periodic flush if at least this much space still available.\n+    static constexpr int64_t MAX_BLOCK_COINSDB_USAGE_BYTES = 10 * 1024 * 1024;  // 10MB\n+    int64_t large_threshold =",
    "path": "src/validation.cpp",
    "position": 24,
    "original_position": 24,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "b1f69a3126eb42e07ffdfdaf814c424a8fc5a7d1",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: `nLargeThreshold` (naming conv shouldn't be same with nTotalSpace?)",
    "created_at": "2019-10-30T20:21:33Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340838123",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340838123"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340838123"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340838123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2208,
    "original_line": 2208,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340858159",
    "pull_request_review_id": 309493874,
    "id": 340858159,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDg1ODE1OQ==",
    "diff_hunk": "@@ -720,6 +729,17 @@ class CChainState {\n     /** Update the chain tip based on database information, i.e. CoinsTip()'s best block. */\n     bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    //! Dictates whether we need to flush the cache to disk or not.\n+    //!\n+    //! @return the state of the size of the coins cache.\n+    CoinsCacheSizeState GetCoinsCacheSizeState(const CTxMemPool& tx_pool)\n+        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n+    CoinsCacheSizeState GetCoinsCacheSizeState(\n+        const CTxMemPool& tx_pool,\n+        size_t max_coins_cache_size_bytes,\n+        int64_t max_mempool_size_bytes) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);",
    "path": "src/validation.h",
    "position": null,
    "original_position": 29,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "b1f69a3126eb42e07ffdfdaf814c424a8fc5a7d1",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could we use `size_t` instead of `int64_t`? `DynamicUsage` is already returning a `size_t`?",
    "created_at": "2019-10-30T21:06:31Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340858159",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340858159"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340858159"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340858159/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 741,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340885423",
    "pull_request_review_id": 309493874,
    "id": 340885423,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDg4NTQyMw==",
    "diff_hunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    constexpr bool is_64_bit = sizeof(void*) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common\n+    // cases, we can't really continue to make assertions about memory usage.\n+    // End the test early.\n+    if (view.DynamicMemoryUsage() != 32 && view.DynamicMemoryUsage() != 16) {\n+        // Add a bunch of coins to see that we at least flip over to CRITICAL.\n+\n+        for (int i{0}; i < 1000; ++i) {\n+            COutPoint res = add_coin(view);\n+            BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        }\n+\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::CRITICAL);\n+\n+        return;\n+    }\n+\n+    print_view_mem_usage(view);\n+    BOOST_CHECK_EQUAL(view.DynamicMemoryUsage(), is_64_bit ? 32 : 16);\n+\n+    // We should be able to add COINS_UNTIL_CRITICAL coins to the cache before going CRITICAL.\n+    // This is contingent not only on the dynamic memory usage of the Coins\n+    // that we're adding (COIN_SIZE bytes per), but also on how much memory the\n+    // cacheCoins (unordered_map) preallocates.\n+    //\n+    // I came up with the count by examining the printed memory usage of the\n+    // CCoinsCacheView, so it's sort of arbitrary - but it shouldn't change\n+    // unless we somehow change the way the cacheCoins map allocates memory.\n+    //\n+    constexpr int COINS_UNTIL_CRITICAL = is_64_bit ? 4 : 5;\n+\n+    for (int i{0}; i < COINS_UNTIL_CRITICAL; ++i) {\n+        COutPoint res = add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    if (!is_64_bit) {\n+        // On 32 bit hosts, we'll hit LARGE before CRITICAL.\n+        add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::LARGE);\n+    }\n+\n+    // Adding an additional coin will push us over the edge to CRITICAL.\n+    add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::CRITICAL);\n+\n+    // Passing non-zero max mempool usage should allow us more headroom.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+        CoinsCacheSizeState::OK);\n+\n+    for (int i{0}; i < 3; ++i) {\n+        add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    // Adding another coin with the additional mempool room will put us >90%\n+    // but not yet critical.\n+    add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    // Only perform these checks on 64 bit hosts; I haven't done the math for 32.\n+    if (is_64_bit) {",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 140,
    "original_position": 135,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "028778a75f03a866b557a463bcee810a454e5404",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hmmm I spent some time trying to do the math for 32 but without a 32-bit platform it's quite hard so I've tried to observe some allocation patterns thanks to `print_view_mem_usage` on 64-bit, but given there are allocation threshold effects on how `std::unordered_map` is behaving (common practices for allocators to multiply some magic numbers by 2 after being full) we can't do hard assumptions...\r\n\r\nAnyway I think this test is really dependent on how the standard library is implemented to get the right max_coins_cache_bytes/max_mempool_size_bytes.\r\n\r\nHave you tried to run this part of the test as it is on 32-bit platform ?",
    "created_at": "2019-10-30T22:19:30Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340885423",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340885423"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340885423"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340885423/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 140,
    "original_line": 140,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340886240",
    "pull_request_review_id": 309493874,
    "id": 340886240,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDg4NjI0MA==",
    "diff_hunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    constexpr bool is_64_bit = sizeof(void*) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common\n+    // cases, we can't really continue to make assertions about memory usage.\n+    // End the test early.\n+    if (view.DynamicMemoryUsage() != 32 && view.DynamicMemoryUsage() != 16) {\n+        // Add a bunch of coins to see that we at least flip over to CRITICAL.\n+\n+        for (int i{0}; i < 1000; ++i) {\n+            COutPoint res = add_coin(view);\n+            BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        }\n+\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::CRITICAL);\n+\n+        return;\n+    }\n+\n+    print_view_mem_usage(view);\n+    BOOST_CHECK_EQUAL(view.DynamicMemoryUsage(), is_64_bit ? 32 : 16);\n+\n+    // We should be able to add COINS_UNTIL_CRITICAL coins to the cache before going CRITICAL.\n+    // This is contingent not only on the dynamic memory usage of the Coins\n+    // that we're adding (COIN_SIZE bytes per), but also on how much memory the\n+    // cacheCoins (unordered_map) preallocates.\n+    //\n+    // I came up with the count by examining the printed memory usage of the\n+    // CCoinsCacheView, so it's sort of arbitrary - but it shouldn't change\n+    // unless we somehow change the way the cacheCoins map allocates memory.\n+    //\n+    constexpr int COINS_UNTIL_CRITICAL = is_64_bit ? 4 : 5;\n+\n+    for (int i{0}; i < COINS_UNTIL_CRITICAL; ++i) {\n+        COutPoint res = add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    if (!is_64_bit) {\n+        // On 32 bit hosts, we'll hit LARGE before CRITICAL.\n+        add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::LARGE);\n+    }\n+\n+    // Adding an additional coin will push us over the edge to CRITICAL.\n+    add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::CRITICAL);\n+\n+    // Passing non-zero max mempool usage should allow us more headroom.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 123,
    "original_position": 118,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "028778a75f03a866b557a463bcee810a454e5404",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: could use MAX_MEMPOOL_SIZE_BYTES = 1024, I like bitwise but maybe not everyone :p",
    "created_at": "2019-10-30T22:22:14Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340886240",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340886240"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340886240"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340886240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 123,
    "original_line": 123,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340912856",
    "pull_request_review_id": 309589389,
    "id": 340912856,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDkxMjg1Ng==",
    "diff_hunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    constexpr bool is_64_bit = sizeof(void*) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common\n+    // cases, we can't really continue to make assertions about memory usage.\n+    // End the test early.\n+    if (view.DynamicMemoryUsage() != 32 && view.DynamicMemoryUsage() != 16) {\n+        // Add a bunch of coins to see that we at least flip over to CRITICAL.\n+\n+        for (int i{0}; i < 1000; ++i) {\n+            COutPoint res = add_coin(view);\n+            BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        }\n+\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::CRITICAL);\n+\n+        return;\n+    }\n+\n+    print_view_mem_usage(view);\n+    BOOST_CHECK_EQUAL(view.DynamicMemoryUsage(), is_64_bit ? 32 : 16);\n+\n+    // We should be able to add COINS_UNTIL_CRITICAL coins to the cache before going CRITICAL.\n+    // This is contingent not only on the dynamic memory usage of the Coins\n+    // that we're adding (COIN_SIZE bytes per), but also on how much memory the\n+    // cacheCoins (unordered_map) preallocates.\n+    //\n+    // I came up with the count by examining the printed memory usage of the\n+    // CCoinsCacheView, so it's sort of arbitrary - but it shouldn't change\n+    // unless we somehow change the way the cacheCoins map allocates memory.\n+    //\n+    constexpr int COINS_UNTIL_CRITICAL = is_64_bit ? 4 : 5;\n+\n+    for (int i{0}; i < COINS_UNTIL_CRITICAL; ++i) {\n+        COutPoint res = add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    if (!is_64_bit) {\n+        // On 32 bit hosts, we'll hit LARGE before CRITICAL.\n+        add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::LARGE);\n+    }\n+\n+    // Adding an additional coin will push us over the edge to CRITICAL.\n+    add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::CRITICAL);\n+\n+    // Passing non-zero max mempool usage should allow us more headroom.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+        CoinsCacheSizeState::OK);\n+\n+    for (int i{0}; i < 3; ++i) {\n+        add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    // Adding another coin with the additional mempool room will put us >90%\n+    // but not yet critical.\n+    add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    // Only perform these checks on 64 bit hosts; I haven't done the math for 32.\n+    if (is_64_bit) {",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 140,
    "original_position": 135,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "028778a75f03a866b557a463bcee810a454e5404",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Just noting that the test fails on ARM ([travis-log](https://travis-ci.org/bitcoin/bitcoin/jobs/599016306?utm_medium=notification&utm_source=github_status)) because `CoinsCacheSizeState::LARGE` is not hit.",
    "created_at": "2019-10-31T00:05:24Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340912856",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340912856"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r340912856"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340912856/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 140,
    "original_line": 140,
    "side": "RIGHT",
    "in_reply_to_id": 340885423
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342743813",
    "pull_request_review_id": 311971665,
    "id": 342743813,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjc0MzgxMw==",
    "diff_hunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    constexpr bool is_64_bit = sizeof(void*) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common\n+    // cases, we can't really continue to make assertions about memory usage.\n+    // End the test early.\n+    if (view.DynamicMemoryUsage() != 32 && view.DynamicMemoryUsage() != 16) {\n+        // Add a bunch of coins to see that we at least flip over to CRITICAL.\n+\n+        for (int i{0}; i < 1000; ++i) {\n+            COutPoint res = add_coin(view);\n+            BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        }\n+\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::CRITICAL);\n+\n+        return;\n+    }\n+\n+    print_view_mem_usage(view);\n+    BOOST_CHECK_EQUAL(view.DynamicMemoryUsage(), is_64_bit ? 32 : 16);\n+\n+    // We should be able to add COINS_UNTIL_CRITICAL coins to the cache before going CRITICAL.\n+    // This is contingent not only on the dynamic memory usage of the Coins\n+    // that we're adding (COIN_SIZE bytes per), but also on how much memory the\n+    // cacheCoins (unordered_map) preallocates.\n+    //\n+    // I came up with the count by examining the printed memory usage of the\n+    // CCoinsCacheView, so it's sort of arbitrary - but it shouldn't change\n+    // unless we somehow change the way the cacheCoins map allocates memory.\n+    //\n+    constexpr int COINS_UNTIL_CRITICAL = is_64_bit ? 4 : 5;\n+\n+    for (int i{0}; i < COINS_UNTIL_CRITICAL; ++i) {\n+        COutPoint res = add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    if (!is_64_bit) {\n+        // On 32 bit hosts, we'll hit LARGE before CRITICAL.\n+        add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::LARGE);\n+    }\n+\n+    // Adding an additional coin will push us over the edge to CRITICAL.\n+    add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::CRITICAL);\n+\n+    // Passing non-zero max mempool usage should allow us more headroom.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+        CoinsCacheSizeState::OK);\n+\n+    for (int i{0}; i < 3; ++i) {\n+        add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    // Adding another coin with the additional mempool room will put us >90%\n+    // but not yet critical.\n+    add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    // Only perform these checks on 64 bit hosts; I haven't done the math for 32.\n+    if (is_64_bit) {",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 140,
    "original_position": 135,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "028778a75f03a866b557a463bcee810a454e5404",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah I'm beginning to think that this test is a fool's errand. I might early-exit if the first map expansion doesn't match some pattern, but in general everything feels a little flaky here.",
    "created_at": "2019-11-05T19:07:02Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r342743813",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342743813"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r342743813"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342743813/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 140,
    "original_line": 140,
    "side": "RIGHT",
    "in_reply_to_id": 340885423
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342783788",
    "pull_request_review_id": 312023953,
    "id": 342783788,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjc4Mzc4OA==",
    "diff_hunk": "@@ -2206,13 +2206,44 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool& tx_pool)\n+{\n+    return this->GetCoinsCacheSizeState(\n+        tx_pool,\n+        nCoinCacheUsage,\n+        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+}\n+\n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n+    const CTxMemPool& tx_pool,\n+    size_t max_coins_cache_size_bytes,\n+    int64_t max_mempool_size_bytes)\n+{\n+    int64_t nMempoolUsage = tx_pool.DynamicMemoryUsage();\n+    int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n+    int64_t nTotalSpace =\n+        max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);\n+\n+    //! No need to periodic flush if at least this much space still available.\n+    static constexpr int64_t MAX_BLOCK_COINSDB_USAGE_BYTES = 10 * 1024 * 1024;  // 10MB\n+    int64_t large_threshold =",
    "path": "src/validation.cpp",
    "position": 24,
    "original_position": 24,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "b1f69a3126eb42e07ffdfdaf814c424a8fc5a7d1",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Snake case is preferred in new code per the styleguide (https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c) -- I don't think naming new variables to match the naming convention of old ones is something we've asked for previously.",
    "created_at": "2019-11-05T20:34:02Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r342783788",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342783788"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r342783788"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342783788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2208,
    "original_line": 2208,
    "side": "RIGHT",
    "in_reply_to_id": 340838123
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342783853",
    "pull_request_review_id": 312024062,
    "id": 342783853,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjc4Mzg1Mw==",
    "diff_hunk": "@@ -720,6 +729,17 @@ class CChainState {\n     /** Update the chain tip based on database information, i.e. CoinsTip()'s best block. */\n     bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    //! Dictates whether we need to flush the cache to disk or not.\n+    //!\n+    //! @return the state of the size of the coins cache.\n+    CoinsCacheSizeState GetCoinsCacheSizeState(const CTxMemPool& tx_pool)\n+        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n+    CoinsCacheSizeState GetCoinsCacheSizeState(\n+        const CTxMemPool& tx_pool,\n+        size_t max_coins_cache_size_bytes,\n+        int64_t max_mempool_size_bytes) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);",
    "path": "src/validation.h",
    "position": null,
    "original_position": 29,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "b1f69a3126eb42e07ffdfdaf814c424a8fc5a7d1",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2019-11-05T20:34:11Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r342783853",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342783853"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r342783853"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342783853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 741,
    "side": "RIGHT",
    "in_reply_to_id": 340858159
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343275568",
    "pull_request_review_id": 312674788,
    "id": 343275568,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzI3NTU2OA==",
    "diff_hunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    constexpr bool is_64_bit = sizeof(void*) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common\n+    // cases, we can't really continue to make assertions about memory usage.\n+    // End the test early.\n+    if (view.DynamicMemoryUsage() != 32 && view.DynamicMemoryUsage() != 16) {\n+        // Add a bunch of coins to see that we at least flip over to CRITICAL.\n+\n+        for (int i{0}; i < 1000; ++i) {\n+            COutPoint res = add_coin(view);\n+            BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        }\n+\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::CRITICAL);\n+\n+        return;\n+    }\n+\n+    print_view_mem_usage(view);\n+    BOOST_CHECK_EQUAL(view.DynamicMemoryUsage(), is_64_bit ? 32 : 16);\n+\n+    // We should be able to add COINS_UNTIL_CRITICAL coins to the cache before going CRITICAL.\n+    // This is contingent not only on the dynamic memory usage of the Coins\n+    // that we're adding (COIN_SIZE bytes per), but also on how much memory the\n+    // cacheCoins (unordered_map) preallocates.\n+    //\n+    // I came up with the count by examining the printed memory usage of the\n+    // CCoinsCacheView, so it's sort of arbitrary - but it shouldn't change\n+    // unless we somehow change the way the cacheCoins map allocates memory.\n+    //\n+    constexpr int COINS_UNTIL_CRITICAL = is_64_bit ? 4 : 5;\n+\n+    for (int i{0}; i < COINS_UNTIL_CRITICAL; ++i) {\n+        COutPoint res = add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    if (!is_64_bit) {\n+        // On 32 bit hosts, we'll hit LARGE before CRITICAL.\n+        add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::LARGE);\n+    }\n+\n+    // Adding an additional coin will push us over the edge to CRITICAL.\n+    add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::CRITICAL);\n+\n+    // Passing non-zero max mempool usage should allow us more headroom.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 123,
    "original_position": 118,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "028778a75f03a866b557a463bcee810a454e5404",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this is fine as-is for tests.",
    "created_at": "2019-11-06T19:10:17Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r343275568",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343275568"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r343275568"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343275568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 123,
    "original_line": 123,
    "side": "RIGHT",
    "in_reply_to_id": 340886240
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343756348",
    "pull_request_review_id": 313481017,
    "id": 343756348,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mzc1NjM0OA==",
    "diff_hunk": "@@ -2206,13 +2206,44 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool& tx_pool)\n+{\n+    return this->GetCoinsCacheSizeState(\n+        tx_pool,\n+        nCoinCacheUsage,\n+        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+}\n+\n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n+    const CTxMemPool& tx_pool,\n+    size_t max_coins_cache_size_bytes,\n+    int64_t max_mempool_size_bytes)\n+{\n+    int64_t nMempoolUsage = tx_pool.DynamicMemoryUsage();\n+    int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n+    int64_t nTotalSpace =\n+        max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);\n+\n+    //! No need to periodic flush if at least this much space still available.\n+    static constexpr int64_t MAX_BLOCK_COINSDB_USAGE_BYTES = 10 * 1024 * 1024;  // 10MB\n+    int64_t large_threshold =",
    "path": "src/validation.cpp",
    "position": 24,
    "original_position": 24,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "b1f69a3126eb42e07ffdfdaf814c424a8fc5a7d1",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah thanks and so snaking case `nTotalSpace`?",
    "created_at": "2019-11-07T16:45:06Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r343756348",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343756348"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r343756348"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343756348/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2208,
    "original_line": 2208,
    "side": "RIGHT",
    "in_reply_to_id": 340838123
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347982946",
    "pull_request_review_id": 319113714,
    "id": 347982946,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Nzk4Mjk0Ng==",
    "diff_hunk": "@@ -2206,13 +2206,44 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool& tx_pool)\n+{\n+    return this->GetCoinsCacheSizeState(\n+        tx_pool,\n+        nCoinCacheUsage,\n+        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+}\n+\n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n+    const CTxMemPool& tx_pool,\n+    size_t max_coins_cache_size_bytes,\n+    int64_t max_mempool_size_bytes)\n+{\n+    int64_t nMempoolUsage = tx_pool.DynamicMemoryUsage();\n+    int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n+    int64_t nTotalSpace =\n+        max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);\n+\n+    //! No need to periodic flush if at least this much space still available.\n+    static constexpr int64_t MAX_BLOCK_COINSDB_USAGE_BYTES = 10 * 1024 * 1024;  // 10MB\n+    int64_t large_threshold =",
    "path": "src/validation.cpp",
    "position": 24,
    "original_position": 24,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "b1f69a3126eb42e07ffdfdaf814c424a8fc5a7d1",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`total_space`, `cache_size` and `mempool_usage` would make sense.",
    "created_at": "2019-11-19T15:14:26Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r347982946",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347982946"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r347982946"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347982946/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2208,
    "original_line": 2208,
    "side": "RIGHT",
    "in_reply_to_id": 340838123
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347983347",
    "pull_request_review_id": 319113714,
    "id": 347983347,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Nzk4MzM0Nw==",
    "diff_hunk": "@@ -2206,13 +2206,44 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool& tx_pool)\n+{\n+    return this->GetCoinsCacheSizeState(\n+        tx_pool,\n+        nCoinCacheUsage,\n+        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+}\n+\n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n+    const CTxMemPool& tx_pool,\n+    size_t max_coins_cache_size_bytes,\n+    size_t max_mempool_size_bytes)\n+{\n+    int64_t nMempoolUsage = tx_pool.DynamicMemoryUsage();\n+    int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n+    int64_t nTotalSpace =\n+        max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);\n+\n+    //! No need to periodic flush if at least this much space still available.\n+    static constexpr int64_t MAX_BLOCK_COINSDB_USAGE_BYTES = 10 * 1024 * 1024;  // 10MB",
    "path": "src/validation.cpp",
    "position": 23,
    "original_position": 23,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "73e6503a6c96f2909a766ca464e96826b560e600",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is an odd place for a constant.",
    "created_at": "2019-11-19T15:15:08Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r347983347",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347983347"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r347983347"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347983347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2207,
    "original_line": 2207,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351278238",
    "pull_request_review_id": 323598154,
    "id": 351278238,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTI3ODIzOA==",
    "diff_hunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    constexpr bool is_64_bit = sizeof(void*) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 49,
    "original_position": 45,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "513981fe733564eddfb13de59a0e59a5c10736f9",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Some explanation would be useful here.",
    "created_at": "2019-11-27T13:12:16Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r351278238",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351278238"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r351278238"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351278238/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 49,
    "original_line": 49,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351279406",
    "pull_request_review_id": 323598154,
    "id": 351279406,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTI3OTQwNg==",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    void* __ptr;\n+    constexpr bool is_64_bit = sizeof(__ptr) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common\n+    // cases, we can't really continue to make assertions about memory usage.\n+    // End the test early.\n+    if (view.DynamicMemoryUsage() != 32 && view.DynamicMemoryUsage() != 16) {\n+        // Add a bunch of coins to see that we at least flip over to CRITICAL.",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 66,
    "original_position": 63,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "d780c6a3ef07715330edec21fcf2882db75d9166",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It should probably report when these tests are skipped, which seems to be the case on native 32 bit machines.\r\n\r\nWhy not inspect the value of `view.DynamicMemoryUsage()` to infer how many coins you need to add to reach `CRITICAL`? Alternatively, why not just keep adding coins until you do reach `CRITICAL` (with some upper bound to prevent an infinite loop if there's a serious bug)?\r\n",
    "created_at": "2019-11-27T13:14:58Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r351279406",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351279406"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r351279406"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351279406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 329697146
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/354445776",
    "pull_request_review_id": 327721504,
    "id": 354445776,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NDQ0NTc3Ng==",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    void* __ptr;\n+    constexpr bool is_64_bit = sizeof(__ptr) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common\n+    // cases, we can't really continue to make assertions about memory usage.\n+    // End the test early.\n+    if (view.DynamicMemoryUsage() != 32 && view.DynamicMemoryUsage() != 16) {\n+        // Add a bunch of coins to see that we at least flip over to CRITICAL.",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 66,
    "original_position": 63,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "d780c6a3ef07715330edec21fcf2882db75d9166",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> It should probably report when these tests are skipped\r\n\r\nWhat are you thinking, `BOOST_TEST_MESSAGE`?\r\n\r\n> Why not inspect the value of view.DynamicMemoryUsage() to infer how many coins you need to add to reach CRITICAL?\r\n\r\nI don't think it's that simple - different platforms/std::unordered_map implementations allocate differently, and so the current memory usage doesn't tell us enough about how memory usage will change as individual coins are added.\r\n\r\n> Alternatively, why not just keep adding coins until you do reach CRITICAL (with some upper bound to prevent an infinite loop if there's a serious bug)?\r\n\r\nThat's basically what I do below: https://github.com/bitcoin/bitcoin/pull/16945/files#diff-1c02ab3ed49056a4df577f3db9b53d30R64-R71\r\n",
    "created_at": "2019-12-05T17:23:30Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r354445776",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/354445776"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r354445776"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/354445776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 329697146
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355229672",
    "pull_request_review_id": 328647633,
    "id": 355229672,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTIyOTY3Mg==",
    "diff_hunk": "@@ -529,6 +529,15 @@ class CoinsViews {\n     void InitCache() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n };\n \n+enum class CoinsCacheSizeState\n+{\n+    //! The coins cache is in immediate need of a flush.\n+    CRITICAL = 2,",
    "path": "src/validation.h",
    "position": 7,
    "original_position": 7,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "73e6503a6c96f2909a766ca464e96826b560e600",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why you choose this order (2,1,0)?",
    "created_at": "2019-12-09T00:49:53Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r355229672",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355229672"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r355229672"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355229672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 536,
    "original_line": 536,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356807361",
    "pull_request_review_id": 330808166,
    "id": 356807361,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NjgwNzM2MQ==",
    "diff_hunk": "@@ -529,6 +529,15 @@ class CoinsViews {\n     void InitCache() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n };\n \n+enum class CoinsCacheSizeState\n+{\n+    //! The coins cache is in immediate need of a flush.\n+    CRITICAL = 2,",
    "path": "src/validation.h",
    "position": 7,
    "original_position": 7,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "73e6503a6c96f2909a766ca464e96826b560e600",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why not? It's so we can make statements like https://github.com/bitcoin/bitcoin/pull/15606/commits/f8a21cd1dbde9389523e21a93c0f0b1734336996#diff-24efdb00bfbe56b140fb006b562cc70bR5331",
    "created_at": "2019-12-11T20:04:50Z",
    "updated_at": "2019-12-12T16:56:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r356807361",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356807361"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r356807361"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356807361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 536,
    "original_line": 536,
    "side": "RIGHT",
    "in_reply_to_id": 355229672
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359033578",
    "pull_request_review_id": 333586805,
    "id": 359033578,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTAzMzU3OA==",
    "diff_hunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    constexpr bool is_64_bit = sizeof(void*) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;",
    "path": "src/test/validation_flush_tests.cpp",
    "position": 49,
    "original_position": 45,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "513981fe733564eddfb13de59a0e59a5c10736f9",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is that change good or would you prefer to see something else?",
    "created_at": "2019-12-17T21:18:57Z",
    "updated_at": "2019-12-17T21:18:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r359033578",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359033578"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r359033578"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359033578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 49,
    "original_line": 49,
    "side": "RIGHT",
    "in_reply_to_id": 351278238
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364914626",
    "pull_request_review_id": 340754212,
    "id": 364914626,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkxNDYyNg==",
    "diff_hunk": "@@ -529,6 +529,15 @@ class CoinsViews {\n     void InitCache() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n };\n \n+enum class CoinsCacheSizeState\n+{\n+    //! The coins cache is in immediate need of a flush.\n+    CRITICAL = 2,",
    "path": "src/validation.h",
    "position": 7,
    "original_position": 7,
    "commit_id": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "original_commit_id": "73e6503a6c96f2909a766ca464e96826b560e600",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ok.",
    "created_at": "2020-01-09T19:15:37Z",
    "updated_at": "2020-01-09T19:15:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r364914626",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364914626"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16945#discussion_r364914626"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16945"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364914626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 536,
    "original_line": 536,
    "side": "RIGHT",
    "in_reply_to_id": 355229672
  }
]