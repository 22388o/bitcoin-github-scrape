[
  {
    "sha": "b17e91d842724d2888a179a73585cc4c2ef1dc21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTdlOTFkODQyNzI0ZDI4ODhhMTc5YTczNTg1Y2M0YzJlZjFkYzIx",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-04-16T20:40:40Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-12-12T16:20:17Z"
      },
      "message": "refactoring: introduce CChainState::GetCoinsCacheSizeState\n\nThis separates out some logic for detecting how full the coins cache is from\nFlushStateToDisk. We'll want to reuse this logic when deciding when to flush\nthe coins cache during UTXO snapshot activation.",
      "tree": {
        "sha": "5a46df4981661ad2cc55bbeddd890c1ac4a688da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a46df4981661ad2cc55bbeddd890c1ac4a688da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b17e91d842724d2888a179a73585cc4c2ef1dc21",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b17e91d842724d2888a179a73585cc4c2ef1dc21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b17e91d842724d2888a179a73585cc4c2ef1dc21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b17e91d842724d2888a179a73585cc4c2ef1dc21/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54e11a39e14dce11b2869b4610eb175cb7d27b05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54e11a39e14dce11b2869b4610eb175cb7d27b05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54e11a39e14dce11b2869b4610eb175cb7d27b05"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 55,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f6db06b6de6af65eab93a8a9f0ec11598f00862a",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b17e91d842724d2888a179a73585cc4c2ef1dc21/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b17e91d842724d2888a179a73585cc4c2ef1dc21/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=b17e91d842724d2888a179a73585cc4c2ef1dc21",
        "patch": "@@ -20,8 +20,6 @@ class CBlockIndex;\n class CCoinsViewDBCursor;\n class uint256;\n \n-//! No need to periodic flush if at least this much space still available.\n-static constexpr int MAX_BLOCK_COINSDB_USAGE = 10;\n //! -dbcache default (MiB)\n static const int64_t nDefaultDbCache = 450;\n //! -dbbatchsize default (bytes)"
      },
      {
        "sha": "5db0ec5d96af169b10e29eadddf54b353702dc83",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 6,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b17e91d842724d2888a179a73585cc4c2ef1dc21/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b17e91d842724d2888a179a73585cc4c2ef1dc21/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b17e91d842724d2888a179a73585cc4c2ef1dc21",
        "patch": "@@ -2185,13 +2185,44 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool& tx_pool)\n+{\n+    return this->GetCoinsCacheSizeState(\n+        tx_pool,\n+        nCoinCacheUsage,\n+        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+}\n+\n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n+    const CTxMemPool& tx_pool,\n+    size_t max_coins_cache_size_bytes,\n+    size_t max_mempool_size_bytes)\n+{\n+    int64_t nMempoolUsage = tx_pool.DynamicMemoryUsage();\n+    int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n+    int64_t nTotalSpace =\n+        max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);\n+\n+    //! No need to periodic flush if at least this much space still available.\n+    static constexpr int64_t MAX_BLOCK_COINSDB_USAGE_BYTES = 10 * 1024 * 1024;  // 10MB\n+    int64_t large_threshold =\n+        std::max((9 * nTotalSpace) / 10, nTotalSpace - MAX_BLOCK_COINSDB_USAGE_BYTES);\n+\n+    if (cacheSize > nTotalSpace) {\n+        LogPrintf(\"Cache size (%s) exceeds total space (%s)\\n\", cacheSize, nTotalSpace);\n+        return CoinsCacheSizeState::CRITICAL;\n+    } else if (cacheSize > large_threshold) {\n+        return CoinsCacheSizeState::LARGE;\n+    }\n+    return CoinsCacheSizeState::OK;\n+}\n+\n bool CChainState::FlushStateToDisk(\n     const CChainParams& chainparams,\n     BlockValidationState &state,\n     FlushStateMode mode,\n     int nManualPruneHeight)\n {\n-    int64_t nMempoolUsage = mempool.DynamicMemoryUsage();\n     LOCK(cs_main);\n     assert(this->CanFlushToDisk());\n     static int64_t nLastWrite = 0;\n@@ -2206,6 +2237,7 @@ bool CChainState::FlushStateToDisk(\n     {\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n+        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(::mempool);\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             if (nManualPruneHeight > 0) {\n@@ -2234,13 +2266,10 @@ bool CChainState::FlushStateToDisk(\n         if (nLastFlush == 0) {\n             nLastFlush = nNow;\n         }\n-        int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-        int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n-        int64_t nTotalSpace = nCoinCacheUsage + std::max<int64_t>(nMempoolSizeMax - nMempoolUsage, 0);\n         // The cache is large and we're within 10% and 10 MiB of the limit, but we have time now (not in the middle of a block processing).\n-        bool fCacheLarge = mode == FlushStateMode::PERIODIC && cacheSize > std::max((9 * nTotalSpace) / 10, nTotalSpace - MAX_BLOCK_COINSDB_USAGE * 1024 * 1024);\n+        bool fCacheLarge = mode == FlushStateMode::PERIODIC && cache_state >= CoinsCacheSizeState::LARGE;\n         // The cache is over the limit, we have to write now.\n-        bool fCacheCritical = mode == FlushStateMode::IF_NEEDED && cacheSize > nTotalSpace;\n+        bool fCacheCritical = mode == FlushStateMode::IF_NEEDED && cache_state >= CoinsCacheSizeState::CRITICAL;\n         // It's been a while since we wrote the block index to disk. Do this frequently, so we don't need to redownload after a crash.\n         bool fPeriodicWrite = mode == FlushStateMode::PERIODIC && nNow > nLastWrite + (int64_t)DATABASE_WRITE_INTERVAL * 1000000;\n         // It's been very long since we flushed the cache. Do this infrequently, to optimize cache usage."
      },
      {
        "sha": "81b2ccffc284a88c466b34181e84c1da4890094c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b17e91d842724d2888a179a73585cc4c2ef1dc21/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b17e91d842724d2888a179a73585cc4c2ef1dc21/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b17e91d842724d2888a179a73585cc4c2ef1dc21",
        "patch": "@@ -530,6 +530,15 @@ class CoinsViews {\n     void InitCache() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n };\n \n+enum class CoinsCacheSizeState\n+{\n+    //! The coins cache is in immediate need of a flush.\n+    CRITICAL = 2,\n+    //! The cache is at >= 90% capacity.\n+    LARGE = 1,\n+    OK = 0\n+};\n+\n /**\n  * CChainState stores and provides an API to update our local knowledge of the\n  * current best chain.\n@@ -721,6 +730,17 @@ class CChainState {\n     /** Update the chain tip based on database information, i.e. CoinsTip()'s best block. */\n     bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    //! Dictates whether we need to flush the cache to disk or not.\n+    //!\n+    //! @return the state of the size of the coins cache.\n+    CoinsCacheSizeState GetCoinsCacheSizeState(const CTxMemPool& tx_pool)\n+        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n+    CoinsCacheSizeState GetCoinsCacheSizeState(\n+        const CTxMemPool& tx_pool,\n+        size_t max_coins_cache_size_bytes,\n+        size_t max_mempool_size_bytes) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n private:\n     bool ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);\n     bool ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);"
      }
    ]
  },
  {
    "sha": "02b9511d6bace5711e454d2b685b2fee0d65e341",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmI5NTExZDZiYWNlNTcxMWU0NTRkMmI2ODViMmZlZTBkNjVlMzQx",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-09-24T18:10:18Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-12-12T16:55:27Z"
      },
      "message": "tests: add tests for GetCoinsCacheSizeState",
      "tree": {
        "sha": "4af2dfec502a9fcaf9d8c701bde2ad0a5daf0e7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4af2dfec502a9fcaf9d8c701bde2ad0a5daf0e7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02b9511d6bace5711e454d2b685b2fee0d65e341",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02b9511d6bace5711e454d2b685b2fee0d65e341",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02b9511d6bace5711e454d2b685b2fee0d65e341",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02b9511d6bace5711e454d2b685b2fee0d65e341/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b17e91d842724d2888a179a73585cc4c2ef1dc21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b17e91d842724d2888a179a73585cc4c2ef1dc21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b17e91d842724d2888a179a73585cc4c2ef1dc21"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 175,
      "deletions": 0
    },
    "files": [
      {
        "sha": "26cbe7bd104715b414e60b1fd80f8fb46845c856",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02b9511d6bace5711e454d2b685b2fee0d65e341/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02b9511d6bace5711e454d2b685b2fee0d65e341/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=02b9511d6bace5711e454d2b685b2fee0d65e341",
        "patch": "@@ -182,6 +182,7 @@ BITCOIN_TESTS =\\\n   test/uint256_tests.cpp \\\n   test/util_tests.cpp \\\n   test/validation_block_tests.cpp \\\n+  test/validation_flush_tests.cpp \\\n   test/versionbits_tests.cpp\n \n if ENABLE_PROPERTY_TESTS"
      },
      {
        "sha": "ab8b957f7df4bec3798678baf69ca51a32093d8b",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "added",
        "additions": 174,
        "deletions": 0,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02b9511d6bace5711e454d2b685b2fee0d65e341/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02b9511d6bace5711e454d2b685b2fee0d65e341/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=02b9511d6bace5711e454d2b685b2fee0d65e341",
        "patch": "@@ -0,0 +1,174 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    constexpr bool is_64_bit = sizeof(void*) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    // The number of bytes consumed by coin's heap data, i.e. CScript\n+    // (prevector<28, unsigned char>) when assigned 56 bytes of data per above.\n+    //\n+    // See also: Coin::DynamicMemoryUsage().\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common\n+    // cases, we can't really continue to make assertions about memory usage.\n+    // End the test early.\n+    if (view.DynamicMemoryUsage() != 32 && view.DynamicMemoryUsage() != 16) {\n+        // Add a bunch of coins to see that we at least flip over to CRITICAL.\n+\n+        for (int i{0}; i < 1000; ++i) {\n+            COutPoint res = add_coin(view);\n+            BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        }\n+\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::CRITICAL);\n+\n+        BOOST_TEST_MESSAGE(\"Exiting cache flush tests early due to unsupported arch\");\n+        return;\n+    }\n+\n+    print_view_mem_usage(view);\n+    BOOST_CHECK_EQUAL(view.DynamicMemoryUsage(), is_64_bit ? 32 : 16);\n+\n+    // We should be able to add COINS_UNTIL_CRITICAL coins to the cache before going CRITICAL.\n+    // This is contingent not only on the dynamic memory usage of the Coins\n+    // that we're adding (COIN_SIZE bytes per), but also on how much memory the\n+    // cacheCoins (unordered_map) preallocates.\n+    //\n+    // I came up with the count by examining the printed memory usage of the\n+    // CCoinsCacheView, so it's sort of arbitrary - but it shouldn't change\n+    // unless we somehow change the way the cacheCoins map allocates memory.\n+    //\n+    constexpr int COINS_UNTIL_CRITICAL = is_64_bit ? 4 : 5;\n+\n+    for (int i{0}; i < COINS_UNTIL_CRITICAL; ++i) {\n+        COutPoint res = add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    // Adding an additional coin will push us over the edge to CRITICAL.\n+    add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    auto size_state = chainstate.GetCoinsCacheSizeState(\n+        tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0);\n+\n+    if (!is_64_bit && size_state == CoinsCacheSizeState::LARGE) {\n+        // On 32 bit hosts, we may hit LARGE before CRITICAL.\n+        add_coin(view);\n+        print_view_mem_usage(view);\n+    }\n+\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::CRITICAL);\n+\n+    // Passing non-zero max mempool usage should allow us more headroom.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+        CoinsCacheSizeState::OK);\n+\n+    for (int i{0}; i < 3; ++i) {\n+        add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    // Adding another coin with the additional mempool room will put us >90%\n+    // but not yet critical.\n+    add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    // Only perform these checks on 64 bit hosts; I haven't done the math for 32.\n+    if (is_64_bit) {\n+        float usage_percentage = (float)view.DynamicMemoryUsage() / (MAX_COINS_CACHE_BYTES + (1 << 10));\n+        BOOST_TEST_MESSAGE(\"CoinsTip usage percentage: \" << usage_percentage);\n+        BOOST_CHECK(usage_percentage >= 0.9);\n+        BOOST_CHECK(usage_percentage < 1);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, 1 << 10),\n+            CoinsCacheSizeState::LARGE);\n+    }\n+\n+    // Using the default max_* values permits way more coins to be added.\n+    for (int i{0}; i < 1000; ++i) {\n+        add_coin(view);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    // Flushing the view doesn't take us back to OK because cacheCoins has\n+    // preallocated memory that doesn't get reclaimed even after flush.\n+\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        CoinsCacheSizeState::CRITICAL);\n+\n+    view.SetBestBlock(InsecureRand256());\n+    BOOST_CHECK(view.Flush());\n+    print_view_mem_usage(view);\n+\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        CoinsCacheSizeState::CRITICAL);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]