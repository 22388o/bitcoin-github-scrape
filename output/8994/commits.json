[
  {
    "sha": "83f08b30648ba02a060e71917585e47c3867d9f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2YwOGIzMDY0OGJhMDJhMDYwZTcxOTE3NTg1ZTQ3YzM4NjdkOWY3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-08-22T16:17:31Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-08T19:49:07Z"
      },
      "message": "Tests: Use self.chain instead of 'regtest' in almost all current tests",
      "tree": {
        "sha": "bab004102abee772d98a0e169341e62d47f730cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bab004102abee772d98a0e169341e62d47f730cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83f08b30648ba02a060e71917585e47c3867d9f7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl2c6FIACgkQiGbBjqHJ\nRKI5eg//WJ+vmGvwGGhV0X+Mx/Qd6eoTbn/T6oodwxoS3qyUJs6IraRiaKitsSo8\nGGnUlF/uBU0OpabHQ8q/PL3XbwL4/2BcJNLvWlhIgDAwS4SDMwnswuIG2c0CfzW1\nalovcPxAly7EJhP9zdjVzDtNipdeAwiGkGMo8H1OTA8EvhnBf0jkeb+OhZSPX3eP\n3OFcGRRF8w4QSYYHI0674vaUwK2nto2hvXQmtyEqdDoGGfADPxbl0Nyt3jdtYK6C\nif4sbxzMzUDbS1dMik7eJ1nTZ1dRVNPaNkNwMiAzR9SX+6sVY/13AdRwMEsLV4Wd\n2rxbhQ730fPLJQSp3Q3K+u+wbrNbFLetwHP5kgYVr2qZM+DU6tDq0ZRdlmDdTxK5\noai4aiaEX+mLj0Jo0kRAGPwQQ0XLrepn9r4pEu519SoP4/OldtPjQgofZqg6d7Jq\nj+z2sLuvI7sbftxdK/XBUYFuNsBflabaXwjwcIBodqCF+uwzlWBeBYKcDYsazlce\njNiZ2+SBxqea6Bs4ZXAbJ9r7ksQYYslCOioJxGH9hkN760t2GVuo6GL/7uDjnaD8\nkzYPtMwPrUdiG/jxG2b/tirMtTmhOV09u4BRlkBae/8GF3+RQjnuVTEBX3cNbXmb\nCvDi6wP2TXGZqHvssJccYo5MfU6jrL5F8ol65dFIcwVqFNzRG/w=\n=z53p\n-----END PGP SIGNATURE-----",
        "payload": "tree bab004102abee772d98a0e169341e62d47f730cc\nparent 520d140e6e4456e0e0de58a181cca5b9c458bffb\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1566490651 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570564147 +0200\n\nTests: Use self.chain instead of 'regtest' in almost all current tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83f08b30648ba02a060e71917585e47c3867d9f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83f08b30648ba02a060e71917585e47c3867d9f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83f08b30648ba02a060e71917585e47c3867d9f7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "520d140e6e4456e0e0de58a181cca5b9c458bffb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/520d140e6e4456e0e0de58a181cca5b9c458bffb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/520d140e6e4456e0e0de58a181cca5b9c458bffb"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 43,
      "deletions": 43
    },
    "files": [
      {
        "sha": "874243ec5d6335e160dd9852e57ab4a5220e56e9",
        "filename": "test/functional/feature_abortnode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/feature_abortnode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/feature_abortnode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_abortnode.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -29,7 +29,7 @@ def run_test(self):\n         datadir = get_datadir_path(self.options.tmpdir, 0)\n \n         # Deleting the undo file will result in reorg failure\n-        os.unlink(os.path.join(datadir, 'regtest', 'blocks', 'rev00000.dat'))\n+        os.unlink(os.path.join(datadir, self.chain, 'blocks', 'rev00000.dat'))\n \n         # Connecting to a node with a more work chain will trigger a reorg\n         # attempt."
      },
      {
        "sha": "1b1ff14151e1542322b0b20a08e5665ee8710cc2",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -38,7 +38,7 @@ def test_config_file_parser(self):\n         if self.is_wallet_compiled():\n             with open(inc_conf_file_path, 'w', encoding='utf8') as conf:\n                 conf.write(\"wallet=foo\\n\")\n-            self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Config setting for -wallet only applied on regtest network when in [regtest] section.')\n+            self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Config setting for -wallet only applied on %s network when in [%s] section.' % (self.chain, self.chain))\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('regtest=0\\n') # mainnet\n@@ -103,7 +103,7 @@ def run_test(self):\n         # Check that using non-existent datadir in conf file fails\n         conf_file = os.path.join(default_data_dir, \"bitcoin.conf\")\n \n-        # datadir needs to be set before [regtest] section\n+        # datadir needs to be set before [chain] section\n         conf_file_contents = open(conf_file, encoding='utf8').read()\n         with open(conf_file, 'w', encoding='utf8') as f:\n             f.write(\"datadir=\" + new_data_dir + \"\\n\")\n@@ -115,17 +115,17 @@ def run_test(self):\n         os.mkdir(new_data_dir)\n         self.start_node(0, ['-conf='+conf_file, '-wallet=w1'])\n         self.stop_node(0)\n-        assert os.path.exists(os.path.join(new_data_dir, 'regtest', 'blocks'))\n+        assert os.path.exists(os.path.join(new_data_dir, self.chain, 'blocks'))\n         if self.is_wallet_compiled():\n-            assert os.path.exists(os.path.join(new_data_dir, 'regtest', 'wallets', 'w1'))\n+            assert os.path.exists(os.path.join(new_data_dir, self.chain, 'wallets', 'w1'))\n \n         # Ensure command line argument overrides datadir in conf\n         os.mkdir(new_data_dir_2)\n         self.nodes[0].datadir = new_data_dir_2\n         self.start_node(0, ['-datadir='+new_data_dir_2, '-conf='+conf_file, '-wallet=w2'])\n-        assert os.path.exists(os.path.join(new_data_dir_2, 'regtest', 'blocks'))\n+        assert os.path.exists(os.path.join(new_data_dir_2, self.chain, 'blocks'))\n         if self.is_wallet_compiled():\n-            assert os.path.exists(os.path.join(new_data_dir_2, 'regtest', 'wallets', 'w2'))\n+            assert os.path.exists(os.path.join(new_data_dir_2, self.chain, 'wallets', 'w2'))\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "89843f84f7c9e5f57823db57988d283f6a26b5d0",
        "filename": "test/functional/feature_filelock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/feature_filelock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/feature_filelock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_filelock.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -19,7 +19,7 @@ def setup_network(self):\n         self.nodes[0].wait_for_rpc_connection()\n \n     def run_test(self):\n-        datadir = os.path.join(self.nodes[0].datadir, 'regtest')\n+        datadir = os.path.join(self.nodes[0].datadir, self.chain)\n         self.log.info(\"Using datadir {}\".format(datadir))\n \n         self.log.info(\"Check that we can't start a second bitcoind instance using the same datadir\")"
      },
      {
        "sha": "4065572510bc14599a116fc05234126686141500",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -16,7 +16,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def relative_log_path(self, name):\n-        return os.path.join(self.nodes[0].datadir, \"regtest\", name)\n+        return os.path.join(self.nodes[0].datadir, self.chain, name)\n \n     def run_test(self):\n         # test default log file name"
      },
      {
        "sha": "b2ae76eb5a574953471f56899d708f45754d5687",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -100,7 +100,7 @@ def skip_test_if_missing_module(self):\n     def setup_network(self):\n         self.setup_nodes()\n \n-        self.prunedir = os.path.join(self.nodes[2].datadir, 'regtest', 'blocks', '')\n+        self.prunedir = os.path.join(self.nodes[2].datadir, self.chain, 'blocks', '')\n \n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[1], 2)\n@@ -278,7 +278,7 @@ def prune(index):\n             assert_equal(ret, node.getblockchaininfo()['pruneheight'])\n \n         def has_block(index):\n-            return os.path.isfile(os.path.join(self.nodes[node_number].datadir, \"regtest\", \"blocks\", \"blk{:05}.dat\".format(index)))\n+            return os.path.isfile(os.path.join(self.nodes[node_number].datadir, self.chain, \"blocks\", \"blk{:05}.dat\".format(index)))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n         assert_raises_rpc_error(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))"
      },
      {
        "sha": "62f5cd277150651cb507e478daa60be9892d653a",
        "filename": "test/functional/interface_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/interface_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/interface_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rpc.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -32,7 +32,7 @@ def test_getrpcinfo(self):\n         command = info['active_commands'][0]\n         assert_equal(command['method'], 'getrpcinfo')\n         assert_greater_than_or_equal(command['duration'], 0)\n-        assert_equal(info['logpath'], os.path.join(self.nodes[0].datadir, 'regtest', 'debug.log'))\n+        assert_equal(info['logpath'], os.path.join(self.nodes[0].datadir, self.chain, 'debug.log'))\n \n     def test_batch_request(self):\n         self.log.info(\"Testing basic JSON-RPC batch request...\")"
      },
      {
        "sha": "5ce23af94fbe4f77cde41b687b9a96be7507f603",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -117,8 +117,8 @@ def run_test(self):\n         wait_until(lambda: self.nodes[0].getmempoolinfo()[\"loaded\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 5)\n \n-        mempooldat0 = os.path.join(self.nodes[0].datadir, 'regtest', 'mempool.dat')\n-        mempooldat1 = os.path.join(self.nodes[1].datadir, 'regtest', 'mempool.dat')\n+        mempooldat0 = os.path.join(self.nodes[0].datadir, self.chain, 'mempool.dat')\n+        mempooldat1 = os.path.join(self.nodes[1].datadir, self.chain, 'mempool.dat')\n         self.log.debug(\"Remove the mempool.dat file. Verify that savemempool to disk via RPC re-creates it\")\n         os.remove(mempooldat0)\n         self.nodes[0].savemempool()"
      },
      {
        "sha": "a32e4b8ff95045a08df9787fce4b0b28da36e64f",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -69,7 +69,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         self.log.info('getmininginfo')\n         mining_info = node.getmininginfo()\n         assert_equal(mining_info['blocks'], 200)\n-        assert_equal(mining_info['chain'], 'regtest')\n+        assert_equal(mining_info['chain'], self.chain)\n         assert 'currentblocktx' not in mining_info\n         assert 'currentblockweight' not in mining_info\n         assert_equal(mining_info['difficulty'], Decimal('4.656542373906925E-10'))"
      },
      {
        "sha": "e08731dc977083486876fc479a0c98688e29f3ee",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -54,7 +54,7 @@ def run_test(self):\n \n         self.log.info(\"Stop node, remove wallet, mine again some blocks...\")\n         self.stop_node(0)\n-        shutil.rmtree(os.path.join(self.nodes[0].datadir, \"regtest\", 'wallets'))\n+        shutil.rmtree(os.path.join(self.nodes[0].datadir, self.chain, 'wallets'))\n         self.start_node(0)\n         self.nodes[0].generate(110)\n "
      },
      {
        "sha": "2c224671f33c3ce837736b0c9798991c70326d1a",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -26,7 +26,7 @@ def skip_test_if_missing_module(self):\n \n     def bitcoin_wallet_process(self, *args):\n         binary = self.config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoin-wallet' + self.config[\"environment\"][\"EXEEXT\"]\n-        args = ['-datadir={}'.format(self.nodes[0].datadir), '-regtest'] + list(args)\n+        args = ['-datadir={}'.format(self.nodes[0].datadir), '-chain=%s' % self.chain] + list(args)\n         return subprocess.Popen([binary] + args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n \n     def assert_raises_tool_error(self, error, *args):\n@@ -197,7 +197,7 @@ def test_getwalletinfo_on_different_wallet(self):\n         self.log.debug('Wallet file shasum unchanged\\n')\n \n     def run_test(self):\n-        self.wallet_path = os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', 'wallet.dat')\n+        self.wallet_path = os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat')\n         self.test_invalid_tool_commands_and_args()\n         # Warning: The following tests are order-dependent.\n         self.test_tool_wallet_info()"
      },
      {
        "sha": "4e62b5e81775b4822d2a4d53d861e9181e748ea3",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -101,9 +101,9 @@ def stop_three(self):\n         self.stop_node(2)\n \n     def erase_three(self):\n-        os.remove(os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', 'wallet.dat'))\n-        os.remove(os.path.join(self.nodes[1].datadir, 'regtest', 'wallets', 'wallet.dat'))\n-        os.remove(os.path.join(self.nodes[2].datadir, 'regtest', 'wallets', 'wallet.dat'))\n+        os.remove(os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat'))\n+        os.remove(os.path.join(self.nodes[1].datadir, self.chain, 'wallets', 'wallet.dat'))\n+        os.remove(os.path.join(self.nodes[2].datadir, self.chain, 'wallets', 'wallet.dat'))\n \n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n@@ -161,13 +161,13 @@ def run_test(self):\n         self.erase_three()\n \n         # Start node2 with no chain\n-        shutil.rmtree(os.path.join(self.nodes[2].datadir, 'regtest', 'blocks'))\n-        shutil.rmtree(os.path.join(self.nodes[2].datadir, 'regtest', 'chainstate'))\n+        shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'blocks'))\n+        shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'chainstate'))\n \n         # Restore wallets from backup\n-        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', 'wallet.dat'))\n-        shutil.copyfile(os.path.join(self.nodes[1].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, 'regtest', 'wallets', 'wallet.dat'))\n-        shutil.copyfile(os.path.join(self.nodes[2].datadir, 'wallet.bak'), os.path.join(self.nodes[2].datadir, 'regtest', 'wallets', 'wallet.dat'))\n+        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat'))\n+        shutil.copyfile(os.path.join(self.nodes[1].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, self.chain, 'wallets', 'wallet.dat'))\n+        shutil.copyfile(os.path.join(self.nodes[2].datadir, 'wallet.bak'), os.path.join(self.nodes[2].datadir, self.chain, 'wallets', 'wallet.dat'))\n \n         self.log.info(\"Re-starting nodes\")\n         self.start_three()\n@@ -182,8 +182,8 @@ def run_test(self):\n         self.erase_three()\n \n         #start node2 with no chain\n-        shutil.rmtree(os.path.join(self.nodes[2].datadir, 'regtest', 'blocks'))\n-        shutil.rmtree(os.path.join(self.nodes[2].datadir, 'regtest', 'chainstate'))\n+        shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'blocks'))\n+        shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'chainstate'))\n \n         self.start_three()\n \n@@ -203,10 +203,10 @@ def run_test(self):\n \n         # Backup to source wallet file must fail\n         sourcePaths = [\n-            os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', 'wallet.dat'),\n-            os.path.join(self.nodes[0].datadir, 'regtest', '.', 'wallets', 'wallet.dat'),\n-            os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', ''),\n-            os.path.join(self.nodes[0].datadir, 'regtest', 'wallets')]\n+            os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat'),\n+            os.path.join(self.nodes[0].datadir, self.chain, '.', 'wallets', 'wallet.dat'),\n+            os.path.join(self.nodes[0].datadir, self.chain, 'wallets', ''),\n+            os.path.join(self.nodes[0].datadir, self.chain, 'wallets')]\n \n         for sourcePath in sourcePaths:\n             assert_raises_rpc_error(-4, \"backup failed\", self.nodes[0].backupwallet, sourcePath)"
      },
      {
        "sha": "3107d44e9b381331933a9060af8e5ab8e5be56ec",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -67,11 +67,11 @@ def run_test(self):\n \n         self.log.info(\"Restore backup ...\")\n         self.stop_node(1)\n-        # we need to delete the complete regtest directory\n+        # we need to delete the complete chain directory\n         # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n-        shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"blocks\"))\n-        shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"chainstate\"))\n-        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\"))\n+        shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"blocks\"))\n+        shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n+        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", \"wallet.dat\"))\n         self.start_node(1)\n \n         # Assert that derivation is deterministic\n@@ -92,9 +92,9 @@ def run_test(self):\n \n         # Try a RPC based rescan\n         self.stop_node(1)\n-        shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"blocks\"))\n-        shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"chainstate\"))\n-        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\"))\n+        shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"blocks\"))\n+        shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n+        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", \"wallet.dat\"))\n         self.start_node(1, extra_args=self.extra_args[1])\n         connect_nodes(self.nodes[0], 1)\n         self.sync_all()"
      },
      {
        "sha": "829633a05004b73419d4cff33ce5d97a8a8a2701",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -30,7 +30,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\")\n+        wallet_path = os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", \"wallet.dat\")\n         wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")\n         self.nodes[0].generate(101)\n "
      },
      {
        "sha": "a089a1534ae7c2c381ef7246651a4b2a443f979c",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -39,7 +39,7 @@ def add_options(self, parser):\n     def run_test(self):\n         node = self.nodes[0]\n \n-        data_dir = lambda *p: os.path.join(node.datadir, 'regtest', *p)\n+        data_dir = lambda *p: os.path.join(node.datadir, self.chain, *p)\n         wallet_dir = lambda *p: data_dir('wallets', *p)\n         wallet = lambda name: node.get_wallet_rpc(name)\n \n@@ -187,7 +187,7 @@ def wallet_file(name):\n         assert_equal(w4.getbalance(), 3)\n \n         batch = w1.batch([w1.getblockchaininfo.get_request(), w1.getwalletinfo.get_request()])\n-        assert_equal(batch[0][\"result\"][\"chain\"], \"regtest\")\n+        assert_equal(batch[0][\"result\"][\"chain\"], self.chain)\n         assert_equal(batch[1][\"result\"][\"walletname\"], \"w1\")\n \n         self.log.info('Check for per-wallet settxfee call')"
      },
      {
        "sha": "497a5dd95e4444aaae52e1655ae939dcaba44c27",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f08b30648ba02a060e71917585e47c3867d9f7/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=83f08b30648ba02a060e71917585e47c3867d9f7",
        "patch": "@@ -90,7 +90,7 @@ def run_test(self):\n         # Node0 wallet file is loaded on longest sync'ed node1\n         self.stop_node(1)\n         self.nodes[0].backupwallet(os.path.join(self.nodes[0].datadir, 'wallet.bak'))\n-        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, 'regtest', 'wallet.dat'))\n+        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, self.chain, 'wallet.dat'))\n         self.start_node(1)\n         tx_after_reorg = self.nodes[1].gettransaction(txid)\n         # Check that normal confirmed tx is confirmed again but with different blockhash"
      }
    ]
  },
  {
    "sha": "c3665586791a136f7aa312ab8656239df63401c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzY2NTU4Njc5MWExMzZmN2FhMzEyYWI4NjU2MjM5ZGY2MzQwMWMz",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2016-11-07T19:03:42Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-08T19:49:39Z"
      },
      "message": "9102: Really don't validate genesis block",
      "tree": {
        "sha": "765816cfaf43e667a392421cf375e4b3edeb7106",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/765816cfaf43e667a392421cf375e4b3edeb7106"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3665586791a136f7aa312ab8656239df63401c3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl2c6FMACgkQiGbBjqHJ\nRKK+3A//asMEvLKOxufxCpHygxyBjjgSOGUHNMO5/pKQNLn7hZlIjm5sZmglrRYR\nfF6jc7/OF7dHkUCWwO+5o/zqYAetw6m2h6857z7Kx3hMzDUVYaHRMttw2rrro4Uf\nVAMKK7UCW6gSD7en5JP773MYfYigSqBAxdZKLO4xD0xEYQIo4OnZ4jxdjAbrXPwQ\ncp3M0GQc3qGAwfcy76WmQlaY6YnLqDmf3PJHgPxdH4pjI2Y7Kz8stApiKCjdbKiM\nSjXlmP4gpBu9nomqVQuZ6hSsBK8kmgLoLtjX8ipW8PjZ9NJX68IsqMLKDPxtRqG1\nqC/VYeQqWHhZcRLp1HmMFUHrJpW5e9kpKGkIwSJoC1Tc/+xWHaRJ6FJdclK5PSUu\nzYxiYRH2im+L6jgTBABkUffmTfOPDvmRRo4dYpgnBGFoi3BwfGhimdXsrFT1x8gw\nXzgos94Fc6ImGUHMNLl3J0Fe1P3rRfRzONceoiwgky6Co4A62/Wzy3Jh9zj5AH2t\nxwlG48afdex1GRAF6ICANSQD3MlBEp1N3vcxBeBYcxMh0W9FPDVThJupINZxtZdW\n9eJeJrsJ5LebI1HPjHo5bbCP+Bddl8kjm52oxuHSrm3+ETB/4wCKAekmyJbz2rLm\njPBDfYc0kveW0AN+XmeWUo13rIEjzPTQFg8ZGMjfrO5z4VpmXJE=\n=M2qo\n-----END PGP SIGNATURE-----",
        "payload": "tree 765816cfaf43e667a392421cf375e4b3edeb7106\nparent 83f08b30648ba02a060e71917585e47c3867d9f7\nauthor Gregory Sanders <gsanders87@gmail.com> 1478545422 -0500\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570564179 +0200\n\n9102: Really don't validate genesis block\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3665586791a136f7aa312ab8656239df63401c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3665586791a136f7aa312ab8656239df63401c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3665586791a136f7aa312ab8656239df63401c3/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83f08b30648ba02a060e71917585e47c3867d9f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83f08b30648ba02a060e71917585e47c3867d9f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83f08b30648ba02a060e71917585e47c3867d9f7"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 24,
      "deletions": 18
    },
    "files": [
      {
        "sha": "239a45050a7336aec74534cfe3f90e4cc4d058c4",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3665586791a136f7aa312ab8656239df63401c3/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3665586791a136f7aa312ab8656239df63401c3/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=c3665586791a136f7aa312ab8656239df63401c3",
        "patch": "@@ -274,9 +274,11 @@ bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams,\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, consensusParams))\n-                    return error(\"%s: CheckProofOfWork failed: %s\", __func__, pindexNew->ToString());\n-\n+                const uint256 block_hash = pindexNew->GetBlockHash();\n+                if (!CheckProofOfWork(block_hash, pindexNew->nBits, consensusParams) &&\n+                    block_hash != consensusParams.hashGenesisBlock) {\n+                    return error(\"%s: CheckProofOfWork: %s, %s\", __func__, block_hash.ToString(), pindexNew->ToString());\n+                }\n                 pcursor->Next();\n             } else {\n                 return error(\"%s: failed to read value\", __func__);"
      },
      {
        "sha": "64bb2bb0986fb656185346971e517f7c9e11aaeb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 15,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3665586791a136f7aa312ab8656239df63401c3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3665586791a136f7aa312ab8656239df63401c3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c3665586791a136f7aa312ab8656239df63401c3",
        "patch": "@@ -1163,8 +1163,11 @@ bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::P\n     }\n \n     // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+    const uint256 block_hash = block.GetHash();\n+    if (!CheckProofOfWork(block_hash, block.nBits, consensusParams) &&\n+        block_hash != consensusParams.hashGenesisBlock) {\n         return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n+    }\n \n     return true;\n }\n@@ -1907,6 +1910,18 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     assert(*pindex->phashBlock == block.GetHash());\n     int64_t nTimeStart = GetTimeMicros();\n \n+    // verify that the view's current state corresponds to the previous block\n+    const uint256 hashPrevBlock = pindex->pprev == nullptr ? uint256() : pindex->pprev->GetBlockHash();\n+    assert(hashPrevBlock == view.GetBestBlock());\n+\n+    // Special case for the genesis block, skipping connection of its transactions\n+    // (its coinbase is unspendable)\n+    if (block.GetHash() == chainparams.GetConsensus().hashGenesisBlock) {\n+        if (!fJustCheck)\n+            view.SetBestBlock(pindex->GetBlockHash());\n+        return true;\n+    }\n+\n     // Check it again in case a previous version let a bad block in\n     // NOTE: We don't currently (re-)invoke ContextualCheckBlock() or\n     // ContextualCheckBlockHeader() here. This means that if we add a new\n@@ -1930,18 +1945,6 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     }\n \n-    // verify that the view's current state corresponds to the previous block\n-    uint256 hashPrevBlock = pindex->pprev == nullptr ? uint256() : pindex->pprev->GetBlockHash();\n-    assert(hashPrevBlock == view.GetBestBlock());\n-\n-    // Special case for the genesis block, skipping connection of its transactions\n-    // (its coinbase is unspendable)\n-    if (block.GetHash() == chainparams.GetConsensus().hashGenesisBlock) {\n-        if (!fJustCheck)\n-            view.SetBestBlock(pindex->GetBlockHash());\n-        return true;\n-    }\n-\n     nBlocksTotal++;\n \n     bool fScriptChecks = true;\n@@ -3712,8 +3715,9 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n         if (pindex->nChainWork < nMinimumChainWork) return true;\n     }\n \n-    if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n-        !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n+    if (chainparams.GetConsensus().hashGenesisBlock != block.GetHash() &&\n+        (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n+        !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev))) {\n         assert(IsBlockReason(state.GetReason()));\n         if (state.IsInvalid() && state.GetReason() != ValidationInvalidReason::BLOCK_MUTATED) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;"
      }
    ]
  },
  {
    "sha": "b3339893a925f2e6aae478d3f18e8e5bf909a87b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzMzOTg5M2E5MjVmMmU2YWFlNDc4ZDNmMThlOGU1YmY5MDlhODdi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2018-12-20T19:39:38Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-08T19:49:40Z"
      },
      "message": "Config: Allow any chain/section name",
      "tree": {
        "sha": "0bfa9a8e8fb3f007f199af73961e2f0ff60347db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bfa9a8e8fb3f007f199af73961e2f0ff60347db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3339893a925f2e6aae478d3f18e8e5bf909a87b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl2c6FQACgkQiGbBjqHJ\nRKKLVg/+I6gS6clN7DC+eUTG92AcD/j3VcthXWOA1tFz1wmqfYCP/QQuVPV2gZzI\nyfi1EBPXV0gucl4eJm8A/pRUvbmqUM2gQj3XozuWVZsfTUZtTL8Ex45DVvk4nSLY\n2TUKn0yWfcq/Lfl2vhZ4YghyEL0ZNyLjz7PPnZxMPDxmaMwAztRPP7gTdw4twqqT\nmrXiLGCkpbm5Z+hPguwQFnfufpIP+CHzgXV7brYKD9vXeSMKtl1MC3nD7toM92Wk\nUWIXVklHsgcbHOJoB+42hcjrM9tKmbAWl51rQMEASODM0TOOTWKMa40x+/jzbR3H\nbbFDJznY3slJhuiCL3Y7tQYLszg4HXut83vD+hSbtD7Io9gMQhkeX8PcRoKen2q6\ndIyPAQYJ+haJ9qw5Pdzj+nu7aacqv99YEIxn+AN58vxRxaOivmIlbvVE8ON+LUP0\niKrypXbpLHCKETaKGf4kOL2l5kI7WvKXOFWlKEQJSZirD/99JBD/TfBzkfOQwNZ1\ni2guoeV1ErBgeeAPB7XNbillu5BicequNMTeUtAx2OZZJOQYHdBMG2X8kR7rFh8O\nFV8mHGgGcRUHfbSUPJ+mRAEurZ61HoXbhRtVy+6eITbDldjU/uTUWFzEq6pKEnlP\n67JGojpTXgLdSAZKq/GaMqAKcotEG5XMZcckG+EKzbPt+y0Y5Mc=\n=PCmg\n-----END PGP SIGNATURE-----",
        "payload": "tree 0bfa9a8e8fb3f007f199af73961e2f0ff60347db\nparent c3665586791a136f7aa312ab8656239df63401c3\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1545334778 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570564180 +0200\n\nConfig: Allow any chain/section name\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3339893a925f2e6aae478d3f18e8e5bf909a87b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3339893a925f2e6aae478d3f18e8e5bf909a87b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3339893a925f2e6aae478d3f18e8e5bf909a87b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3665586791a136f7aa312ab8656239df63401c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3665586791a136f7aa312ab8656239df63401c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3665586791a136f7aa312ab8656239df63401c3"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 0,
      "deletions": 38
    },
    "files": [
      {
        "sha": "fcb703facf925bf3deecdb27965258c4680806ee",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3339893a925f2e6aae478d3f18e8e5bf909a87b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3339893a925f2e6aae478d3f18e8e5bf909a87b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b3339893a925f2e6aae478d3f18e8e5bf909a87b",
        "patch": "@@ -938,11 +938,6 @@ bool AppInitParameterInteraction()\n         return InitError(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\").translated, arg, network, network));\n     }\n \n-    // Warn if unrecognized section name are present in the config file.\n-    for (const auto& section : gArgs.GetUnrecognizedSections()) {\n-        InitWarning(strprintf(\"%s:%i \" + _(\"Section [%s] is not recognized.\").translated, section.m_file, section.m_line, section.m_name));\n-    }\n-\n     if (!fs::is_directory(GetBlocksDir())) {\n         return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\").translated, gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n     }"
      },
      {
        "sha": "00db76325eac64da092bd27219dc038a68100733",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3339893a925f2e6aae478d3f18e8e5bf909a87b/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3339893a925f2e6aae478d3f18e8e5bf909a87b/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=b3339893a925f2e6aae478d3f18e8e5bf909a87b",
        "patch": "@@ -352,21 +352,6 @@ const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n     return unsuitables;\n }\n \n-const std::list<SectionInfo> ArgsManager::GetUnrecognizedSections() const\n-{\n-    // Section names to be recognized in the config file.\n-    static const std::set<std::string> available_sections{\n-        CBaseChainParams::REGTEST,\n-        CBaseChainParams::TESTNET,\n-        CBaseChainParams::MAIN\n-    };\n-\n-    LOCK(cs_args);\n-    std::list<SectionInfo> unrecognized = m_config_sections;\n-    unrecognized.remove_if([](const SectionInfo& appeared){ return available_sections.find(appeared.m_name) != available_sections.end(); });\n-    return unrecognized;\n-}\n-\n void ArgsManager::SelectConfigNetwork(const std::string& network)\n {\n     LOCK(cs_args);"
      },
      {
        "sha": "44efa2219b8ea79476e25e01f227acf17735a3e8",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3339893a925f2e6aae478d3f18e8e5bf909a87b/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3339893a925f2e6aae478d3f18e8e5bf909a87b/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=b3339893a925f2e6aae478d3f18e8e5bf909a87b",
        "patch": "@@ -185,11 +185,6 @@ class ArgsManager\n      */\n     const std::set<std::string> GetUnsuitableSectionOnlyArgs() const;\n \n-    /**\n-     * Log warnings for unrecognized section names in the config file.\n-     */\n-    const std::list<SectionInfo> GetUnrecognizedSections() const;\n-\n     /**\n      * Return a vector of strings of the given argument\n      *"
      },
      {
        "sha": "06a8d5b7eef9dfceb79c16674e5674560e20c647",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3339893a925f2e6aae478d3f18e8e5bf909a87b/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3339893a925f2e6aae478d3f18e8e5bf909a87b/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=b3339893a925f2e6aae478d3f18e8e5bf909a87b",
        "patch": "@@ -61,20 +61,7 @@ def test_config_file_parser(self):\n             conf.write('server=1\\nrpcuser=someuser\\n[main]\\nrpcpassword=some#pass')\n         self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 4, using # in rpcpassword can be ambiguous and should be avoided')\n \n-        inc_conf_file2_path = os.path.join(self.nodes[0].datadir, 'include2.conf')\n-        with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n-            conf.write('includeconf={}\\n'.format(inc_conf_file2_path))\n-\n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n-            conf.write('testnot.datadir=1\\n')\n-        with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n-            conf.write('[testnet]\\n')\n-        self.restart_node(0)\n-        self.nodes[0].stop_node(expected_stderr='Warning: ' + inc_conf_file_path + ':1 Section [testnot] is not recognized.' + os.linesep + 'Warning: ' + inc_conf_file2_path + ':1 Section [testnet] is not recognized.')\n-\n-        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n-            conf.write('')  # clear\n-        with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n             conf.write('')  # clear\n \n     def test_log_buffer(self):"
      }
    ]
  },
  {
    "sha": "6ad087eeb33d66035dbe3a3a9d45f9067db294d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWQwODdlZWIzM2Q2NjAzNWRiZTNhM2E5ZDQ1ZjkwNjdkYjI5NGQ3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-05T20:33:28Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-08T19:49:41Z"
      },
      "message": "Chainparams: Test: Make is_test_chain configurable for regtest",
      "tree": {
        "sha": "0b71eaf942d20e9bd6dfc4642863bb17bad69dd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b71eaf942d20e9bd6dfc4642863bb17bad69dd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ad087eeb33d66035dbe3a3a9d45f9067db294d7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl2c6FUACgkQiGbBjqHJ\nRKIzzw/8CBa3ncX9ooA1SmhU+R7ALu0LB2odQyJYyYNghnG+BD5iBd4Gj45QH7nj\n52zxNCA4ynvlo/R+4kHZvZSmD/Ah3meKprXfncYTWFTUSG4cRndwu/feIlw5jgOr\n+FnY+fYpI5/0MR8uzx1IgIdoN4U6j35DJYVC6E8HQquCGYGs1joZyduHv7LnX43T\ngzpTNzo4SrCW4N4fitZvFBp1KAhx23tO4eNqCYlCn/xiHPJ6WVsV6sssqfVeAqrY\ni4PcF/fJzEyQUOZ+fonFVzc2Orp0YehCWTOExB15UD9Wpmx6SbXCDOMJpIovAJ67\nwrrw4XVvamR2Zao175PlFK+Yal4OaTo2FG6ve2UBXn6eNhxmv1JoHa68scj2wmzk\nIhgkwh5UirspKD+Bo5LlTOALyW7043kWLvGYuuyUJwSoKbHb6jGEcj/kLBnbHUgl\nPxvzAf1jeKCDebTZfmgE5wPltrZvZVPaWeZ9Wvx3wBwy+34EkQ7qDsI2wzLYoezu\nchoMyIfRfXlxoS1JZaHvoVrDX+gQfEiLnT7PeVhIcGTuJ6LG5J1Wij8sL3YEou/V\nk9Wi01wSoX1mds6JNpLH+EZ7bh4eh3uE8xUzSfbj3W/A4AX9h1Dvh4yc61NY+4nE\nqWfM4OTHyOz1f6ab44igTbrhsFCAJtOdQ2cSGQy8t6imE5bN36M=\n=bCBt\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b71eaf942d20e9bd6dfc4642863bb17bad69dd5\nparent b3339893a925f2e6aae478d3f18e8e5bf909a87b\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570307608 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570564181 +0200\n\nChainparams: Test: Make is_test_chain configurable for regtest\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad087eeb33d66035dbe3a3a9d45f9067db294d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad087eeb33d66035dbe3a3a9d45f9067db294d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad087eeb33d66035dbe3a3a9d45f9067db294d7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3339893a925f2e6aae478d3f18e8e5bf909a87b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3339893a925f2e6aae478d3f18e8e5bf909a87b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3339893a925f2e6aae478d3f18e8e5bf909a87b"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "84a136a42a57b1e2d02e10726d3f2decfa96cfef",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad087eeb33d66035dbe3a3a9d45f9067db294d7/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad087eeb33d66035dbe3a3a9d45f9067db294d7/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6ad087eeb33d66035dbe3a3a9d45f9067db294d7",
        "patch": "@@ -290,7 +290,7 @@ class CRegTestParams : public CChainParams {\n         m_assumed_blockchain_size = 0;\n         m_assumed_chain_state_size = 0;\n \n-        UpdateActivationParametersFromArgs(args);\n+        UpdateFromArgs(args);\n \n         genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n@@ -302,7 +302,6 @@ class CRegTestParams : public CChainParams {\n \n         fDefaultConsistencyChecks = true;\n         fRequireStandard = true;\n-        m_is_test_chain = true;\n \n         checkpointData = {\n             {\n@@ -334,6 +333,7 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[d].nTimeout = nTimeout;\n     }\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n+    void UpdateFromArgs(const ArgsManager& args);\n };\n \n void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n@@ -379,6 +379,13 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n     }\n }\n \n+void CRegTestParams::UpdateFromArgs(const ArgsManager& args)\n+{\n+    UpdateActivationParametersFromArgs(args);\n+\n+    m_is_test_chain = args.GetBoolArg(\"-is_test_chain\", true);\n+}\n+\n static std::unique_ptr<const CChainParams> globalChainParams;\n \n const CChainParams &Params() {"
      },
      {
        "sha": "f9fad04ea8274f699500872e00b9b7c0fc0134e7",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad087eeb33d66035dbe3a3a9d45f9067db294d7/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad087eeb33d66035dbe3a3a9d45f9067db294d7/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=6ad087eeb33d66035dbe3a3a9d45f9067db294d7",
        "patch": "@@ -23,6 +23,7 @@ void SetupChainParamsBaseOptions()\n     gArgs.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-is_test_chain\", \"Whether it's allowed to set -acceptnonstdtxn=0 for this chain or not. Default: 1 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "01c61691bb188a3cd1df41b1b2d228b1d5420687",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad087eeb33d66035dbe3a3a9d45f9067db294d7/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad087eeb33d66035dbe3a3a9d45f9067db294d7/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=6ad087eeb33d66035dbe3a3a9d45f9067db294d7",
        "patch": "@@ -41,9 +41,9 @@ def test_config_file_parser(self):\n             self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Config setting for -wallet only applied on %s network when in [%s] section.' % (self.chain, self.chain))\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n-            conf.write('regtest=0\\n') # mainnet\n+            conf.write('is_test_chain=0\\n') # like mainnet\n             conf.write('acceptnonstdtxn=1\\n')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: acceptnonstdtxn is not currently supported for main chain')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: acceptnonstdtxn is not currently supported for %s chain' % self.chain)\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('nono\\n')"
      }
    ]
  },
  {
    "sha": "5326b3f5cd3648e769d8709b82121a466fbce971",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzI2YjNmNWNkMzY0OGU3NjlkODcwOWI4MjEyMWE0NjZmYmNlOTcx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-05T20:37:36Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-08T19:49:42Z"
      },
      "message": "Test: select chain using -chain=regtest instead of regtest=1",
      "tree": {
        "sha": "372c30aee2d3223bdaaece1c03718c3f8dce899a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/372c30aee2d3223bdaaece1c03718c3f8dce899a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5326b3f5cd3648e769d8709b82121a466fbce971",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl2c6FYACgkQiGbBjqHJ\nRKKSeBAA0prkU2nB90Qgx6OcNT8gQ/iIMyXjMA8BXRpXcY5W0XErjKX1KImzWYfh\nGVh8MLVB5yi0CDy+xfwOozEvxSDrgvude/fR3KtEWkEJTVgHpTsIpJoDmWGR8VKj\nI9RFw8RiTsa29F6Mr2fpJkdSpZRBUglwvZEp3so47/hgycoVNTQq4p9flpQeS61J\nLTcUa9xYUNxSafY71XY7d7dBArUUwdZkvVg7iFfTyXM5e+k69Vwy0X7wGQiJxe6b\n8NyazweoM3ik2RJyTYmV76x/rTlz9oKNZVvtp9SgQyV70LHN7qj0LThUh1sl1xrU\nozfwNRrCTk91aAsbAbQZJhgKqQHj61vuzoZHqnbv0f7OWWLCDcHBFbqiku7JP7dX\nNiOw4Ij36jyof0UtxFSVgHTbkfhqrUOwOOU+R2KtWCo3jsU3lXt+6t9Oa75W/uyK\noGtFmwfU1tVTc+umSsLgiEL4werT0SKrC90K0VtPt4Y6NzXgPHS7ptMsxbO6JwXu\nMu8Jj9IcYMbPGFCR8ogOOCov8XpHiTFwP7k94Q4w9Nzhp2a84Fzwm5N1xcbDoLHT\nKr/KINHNxLg+l/Jf/lPpt+onPzeUT6cEj0ruGQ9zhWL1WwgF2bow5qjxkIhweT0U\n/mpEQYUVjgZ9gusaUt6jn0EIKK3DNMU+2SCC1et1Wg2xB1fJjac=\n=cUha\n-----END PGP SIGNATURE-----",
        "payload": "tree 372c30aee2d3223bdaaece1c03718c3f8dce899a\nparent 6ad087eeb33d66035dbe3a3a9d45f9067db294d7\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570307856 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570564182 +0200\n\nTest: select chain using -chain=regtest instead of regtest=1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5326b3f5cd3648e769d8709b82121a466fbce971",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5326b3f5cd3648e769d8709b82121a466fbce971",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5326b3f5cd3648e769d8709b82121a466fbce971/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ad087eeb33d66035dbe3a3a9d45f9067db294d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad087eeb33d66035dbe3a3a9d45f9067db294d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad087eeb33d66035dbe3a3a9d45f9067db294d7"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 6,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6a314e102636414ad594b52e1d9a3e14c4dbb420",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5326b3f5cd3648e769d8709b82121a466fbce971/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5326b3f5cd3648e769d8709b82121a466fbce971/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=5326b3f5cd3648e769d8709b82121a466fbce971",
        "patch": "@@ -296,16 +296,14 @@ def initialize_datadir(dirname, n, chain):\n     datadir = get_datadir_path(dirname, n)\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n-    # Translate chain name to config name\n+\n+    # Translate datadir name to chain bip70 name\n     if chain == 'testnet3':\n-        chain_name_conf_arg = 'testnet'\n-        chain_name_conf_section = 'test'\n-    else:\n-        chain_name_conf_arg = chain\n-        chain_name_conf_section = chain\n+        chain = 'test'\n+\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w', encoding='utf8') as f:\n-        f.write(\"{}=1\\n\".format(chain_name_conf_arg))\n-        f.write(\"[{}]\\n\".format(chain_name_conf_section))\n+        f.write(\"chain={}\\n\".format(chain))\n+        f.write(\"[{}]\\n\".format(chain))\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"fallbackfee=0.0002\\n\")"
      }
    ]
  },
  {
    "sha": "76c00e0701912e8f1ada285d72730232db7ed432",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmMwMGUwNzAxOTEyZThmMWFkYTI4NWQ3MjczMDIzMmRiN2VkNDMy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-21T17:15:26Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-08T19:49:43Z"
      },
      "message": "Testchains: Qt: Introduce custom chains with different:\n\n1) genesis block hash\n2) default datadir\n3) chain name (bip70)\n\nall directly or indirectly configured with the -chain option\n\n...whose constructor reads params from regular arguments (like regtests)...\n\nQt: Add a default purple and title for unkown chains",
      "tree": {
        "sha": "bd6c20506046c3cc422bee34938db7dd0473a48a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd6c20506046c3cc422bee34938db7dd0473a48a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76c00e0701912e8f1ada285d72730232db7ed432",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl2c6FcACgkQiGbBjqHJ\nRKJWVA/+JbdY0Xng1BTRINLywLqsY2sacnFeGCbwK30zZho6iLNXFp44QEpsvbwl\nLgZznQUCYxuKlw/2qY8U1CXERwnZrXeNArz7BV21Kf3EeCSQndtA9ObmHipGJr/Q\nEApbrKmLwGJ8x4X1hyn1HbQ4nzHRN/T/dkYnwQUVjCuatD2MnACmqkFmp5N2h9a1\n7yue5J4r2Mr6CnCuNYqZLS8a/U3AHfBIe+RDhvnzEA+jD4dhb2gCOGEP3ur9SR8K\nGX89l2vjn1+/tdMfCEIPhSGu2pg0801J9dzUSFxk6kMNZyPV6FgxoKN/QBlJKGWq\nIwhL9RV3/x75z0Pe95H1w7yHixI22xY7uGX1oE6EewPWHSDJt3HthT4UMlRj6rYB\nMTh0TkKcXa9jv0DspiO05Lvx8KXFrA33XWtf73cJm5gxBizJK02TXrJteXmyXy+8\nT/j3asKApNTtA+qabcsvYTBELfoj0qoPU4m7S0t8QPpWX3CleKKTXb0joyK6gkKS\nplBQ7r7z7lLwpHK4l3UeF44dBwV88+vLHAaw72XfqrheBH9W0qIkU2MYnax+Ttzq\ndnrC6QvVKSfSYOHtu0ldIKwNsksIpMpeefr7IYFNLzBEIoQelONDrm0n+P4yIq6O\nExhtQZ4EsJQPKTrot1ULRCXVXjtVUo4zlXCtV6E/GIDqU8gzp0Y=\n=HvJR\n-----END PGP SIGNATURE-----",
        "payload": "tree bd6c20506046c3cc422bee34938db7dd0473a48a\nparent 5326b3f5cd3648e769d8709b82121a466fbce971\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1477070126 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570564183 +0200\n\nTestchains: Qt: Introduce custom chains with different:\n\n1) genesis block hash\n2) default datadir\n3) chain name (bip70)\n\nall directly or indirectly configured with the -chain option\n\n...whose constructor reads params from regular arguments (like regtests)...\n\nQt: Add a default purple and title for unkown chains\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76c00e0701912e8f1ada285d72730232db7ed432",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76c00e0701912e8f1ada285d72730232db7ed432",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76c00e0701912e8f1ada285d72730232db7ed432/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5326b3f5cd3648e769d8709b82121a466fbce971",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5326b3f5cd3648e769d8709b82121a466fbce971",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5326b3f5cd3648e769d8709b82121a466fbce971"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 38,
      "deletions": 8
    },
    "files": [
      {
        "sha": "9bd36179f1dcbb050566636de7e3f730d68a432a",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 4,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c00e0701912e8f1ada285d72730232db7ed432/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c00e0701912e8f1ada285d72730232db7ed432/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=76c00e0701912e8f1ada285d72730232db7ed432",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n+#include <hash.h>\n #include <tinyformat.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n@@ -17,13 +18,13 @@\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>\n \n-static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n+static CBlock CreateGenesisBlock(const CScript& coinbase_sig, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     CMutableTransaction txNew;\n     txNew.nVersion = 1;\n     txNew.vin.resize(1);\n     txNew.vout.resize(1);\n-    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << std::vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+    txNew.vin[0].scriptSig = coinbase_sig;\n     txNew.vout[0].nValue = genesisReward;\n     txNew.vout[0].scriptPubKey = genesisOutputScript;\n \n@@ -52,8 +53,10 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n+    const CScript coinbase_sig = CScript() << 486604799 << CScriptNum(4) << std::vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+\n     const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n+    return CreateGenesisBlock(coinbase_sig, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n }\n \n /**\n@@ -386,6 +389,30 @@ void CRegTestParams::UpdateFromArgs(const ArgsManager& args)\n     m_is_test_chain = args.GetBoolArg(\"-is_test_chain\", true);\n }\n \n+/**\n+ * Custom params for creating many chains with different genesis blocks.\n+ */\n+class CCustomParams : public CRegTestParams {\n+public:\n+    CCustomParams(const std::string& chain, ArgsManager& args) : CRegTestParams(args)\n+    {\n+        strNetworkID = chain;\n+        UpdateFromArgs(args);\n+\n+        CHashWriter h(SER_DISK, 0);\n+        h << strNetworkID;\n+        const uint256 hash = h.GetHash();\n+        CScript coinbase_sig = CScript() << std::vector<uint8_t>(hash.begin(), hash.end());\n+        genesis = CreateGenesisBlock(coinbase_sig, CScript(OP_RETURN), 1296688602, 2, 0x207fffff, 1, 50 * COIN);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        checkpointData = {\n+            {\n+                {0, uint256S(consensus.hashGenesisBlock.GetHex())},\n+            }\n+        };\n+    }\n+};\n+\n static std::unique_ptr<const CChainParams> globalChainParams;\n \n const CChainParams &Params() {\n@@ -395,13 +422,15 @@ const CChainParams &Params() {\n \n std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)\n {\n+    // Reserved names for non-custom chains\n     if (chain == CBaseChainParams::MAIN)\n         return std::unique_ptr<CChainParams>(new CMainParams());\n     else if (chain == CBaseChainParams::TESTNET)\n         return std::unique_ptr<CChainParams>(new CTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n         return std::unique_ptr<CChainParams>(new CRegTestParams(gArgs));\n-    throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n+\n+    return std::unique_ptr<CChainParams>(new CCustomParams(chain, gArgs));\n }\n \n void SelectParams(const std::string& network)"
      },
      {
        "sha": "47ab1320477bee07c87bb5698c038c737badbde9",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c00e0701912e8f1ada285d72730232db7ed432/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c00e0701912e8f1ada285d72730232db7ed432/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=76c00e0701912e8f1ada285d72730232db7ed432",
        "patch": "@@ -17,7 +17,7 @@ const std::string CBaseChainParams::REGTEST = \"regtest\";\n \n void SetupChainParamsBaseOptions()\n {\n-    gArgs.AddArg(\"-chain=<chain>\", \"Use the chain <chain> (default: main). Allowed values: main, test, regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-chain=<chain>\", \"Use the chain <chain> (default: main). Reserved values: main, test, regtest. With any other value, a custom chain is used. All regtest-only options are available in custom chains too.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n@@ -42,8 +42,8 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n         return MakeUnique<CBaseChainParams>(\"testnet3\", 18332);\n     else if (chain == CBaseChainParams::REGTEST)\n         return MakeUnique<CBaseChainParams>(\"regtest\", 18443);\n-    else\n-        throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n+\n+    return MakeUnique<CBaseChainParams>(chain, 18553);\n }\n \n void SelectBaseParams(const std::string& chain)"
      },
      {
        "sha": "fc27aef6617a7b753397a78451f6ef950a0bb4a7",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c00e0701912e8f1ada285d72730232db7ed432/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c00e0701912e8f1ada285d72730232db7ed432/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=76c00e0701912e8f1ada285d72730232db7ed432",
        "patch": "@@ -47,6 +47,7 @@ static const int TOOLTIP_WRAP_THRESHOLD = 80;\n #define QAPP_APP_NAME_DEFAULT \"Bitcoin-Qt\"\n #define QAPP_APP_NAME_TESTNET \"Bitcoin-Qt-testnet\"\n #define QAPP_APP_NAME_REGTEST \"Bitcoin-Qt-regtest\"\n+#define QAPP_APP_NAME_CUSTOM \"Bitcoin-Qt-custom-chain\"\n \n /* One gigabyte (GB) in bytes */\n static constexpr uint64_t GB_BYTES{1000000000};"
      },
      {
        "sha": "dcb405b5d9c82fa3d2c6bce0bd357df40483f973",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c00e0701912e8f1ada285d72730232db7ed432/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c00e0701912e8f1ada285d72730232db7ed432/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=76c00e0701912e8f1ada285d72730232db7ed432",
        "patch": "@@ -91,5 +91,5 @@ const NetworkStyle* NetworkStyle::instantiate(const std::string& networkId)\n                     titleAddText.c_str());\n         }\n     }\n-    return nullptr;\n+    return new NetworkStyle(strprintf(\"%s-%s\", QAPP_APP_NAME_CUSTOM, networkId).c_str(), 250, 30, titleAddText.c_str());\n }"
      }
    ]
  },
  {
    "sha": "d42efe17c80f2ca4e47f1a2edcee730ed5b28aae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDJlZmUxN2M4MGYyY2E0ZTQ3ZjFhMmVkY2VlNzMwZWQ1YjI4YWFl",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-03T04:49:22Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-08T19:49:43Z"
      },
      "message": "Test: Custom chain genesis' are deterministic from the name",
      "tree": {
        "sha": "3dff056f288685f05ef6e41c558ef33c4bc80343",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dff056f288685f05ef6e41c558ef33c4bc80343"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d42efe17c80f2ca4e47f1a2edcee730ed5b28aae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl2c6FcACgkQiGbBjqHJ\nRKIE9Q//UznSlRGVQnoALmomMpVjtR2M8JwPcdJ0f/rit+2j3vcCASBDhorDC0Eq\nTGOBfYqvbYljBsssB6yVc8+JtRjNn+JhQuXk0T3Rg9j9PhwDgkPWrWNUzJ1o8FzE\nsm2S+KszZLc6NadZTYFfq9VNgF+WDPmaBjeYFCYssAbVdQujVXOZk8A7bjjzlyJh\nnOnACeiW/Qp5LQOuaEH5SFKhNmKHWk2jhc8ujZCXQJuPwTkjX7rKDlJDefkFsCIc\nTWG3kU1rxZ/MbIc+FBpBBjdnBYPqJbCWadATFVTcNgvHuQoXBv9CTgFuIAAqIpH0\na/ee6fsr5cSdxdix3J8XXwRHMvgghKezpMkJiG5O8W246LVPg3DtGv7r1BzTLGUk\nuxB5ZlqRMaNt08A/EhTyEMlF4wu2gvlTPTf4LfeHt2WN2FUC9IEuN6Zg3S32OmcL\ny8ZyE3rbxN6HvkmFrwEPCef3wrQgLM/ynhj6PRey/P+ccK/l2OjlRTsUVLZ5brkF\nZhwBUueQpkCst3kp8CHW8UOHsEGJZk5n/viYlOfQCc/FYoipDMjYWwCwyzCTRQcT\niTXSFWer91FSZueGqHc2v0hh9mFaq/+wFt9gtr8UAniRLiw/i8NdfFcLMMwmWQoC\nhuWjjxn7f2TdW6W+xJQplCC01Yq4g4gmUx8xHFhLd8wtxz5aLAs=\n=zL/E\n-----END PGP SIGNATURE-----",
        "payload": "tree 3dff056f288685f05ef6e41c558ef33c4bc80343\nparent 76c00e0701912e8f1ada285d72730232db7ed432\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570078162 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570564183 +0200\n\nTest: Custom chain genesis' are deterministic from the name\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d42efe17c80f2ca4e47f1a2edcee730ed5b28aae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d42efe17c80f2ca4e47f1a2edcee730ed5b28aae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d42efe17c80f2ca4e47f1a2edcee730ed5b28aae/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76c00e0701912e8f1ada285d72730232db7ed432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76c00e0701912e8f1ada285d72730232db7ed432",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76c00e0701912e8f1ada285d72730232db7ed432"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 37,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6be6fb9b027d6d976b00c9b6ec8f435792605ae5",
        "filename": "test/functional/feature_custom_chain.py",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d42efe17c80f2ca4e47f1a2edcee730ed5b28aae/test/functional/feature_custom_chain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d42efe17c80f2ca4e47f1a2edcee730ed5b28aae/test/functional/feature_custom_chain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_custom_chain.py?ref=d42efe17c80f2ca4e47f1a2edcee730ed5b28aae",
        "patch": "@@ -0,0 +1,34 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"Test running bitcoind with multiple custom chains with different genesis blocks\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+EXPECTED_GENESIS_HASH = {\n+    'regtest': '0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206',\n+    'chain_1': '58ebd25d25b128530d4d462c65a7e679b7e053e6f25ffb8ac63bc68832fda201',\n+    'chain_2': 'e07d79a4f8f1525814e421eb71aa9527fe8a25091fe1b9c5c312939c887aadc7',\n+    'chain_3': 'de650213b96a541df3bd9ee530cc3da4e9424d3617f95e6b2a0d5452e23412b9',\n+    'chain_4': '075e818d62bbe049a715856344987294ea2b4ff636b857911966e7fc9fee637c',\n+    'chain_5': '54a435af6a093f145769b138c20d5f72b35395e7057a89d36a0b8e954031b04c',\n+}\n+\n+class CustomChainTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        assert_equal(EXPECTED_GENESIS_HASH[self.chain], self.nodes[0].getblockhash(0))\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.log.info(\"Success\")\n+\n+if __name__ == '__main__':\n+    for chain_name in EXPECTED_GENESIS_HASH.keys():\n+        CustomChainTest(chain=chain_name).main()"
      },
      {
        "sha": "0ef076213652166a913e455f274a86f0f5bc579e",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d42efe17c80f2ca4e47f1a2edcee730ed5b28aae/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d42efe17c80f2ca4e47f1a2edcee730ed5b28aae/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=d42efe17c80f2ca4e47f1a2edcee730ed5b28aae",
        "patch": "@@ -89,9 +89,9 @@ class BitcoinTestFramework(metaclass=BitcoinTestMetaClass):\n \n     This class also contains various public and private helper methods.\"\"\"\n \n-    def __init__(self):\n+    def __init__(self, chain='regtest'):\n         \"\"\"Sets test framework defaults. Do not override this method. Instead, override the set_test_params() method\"\"\"\n-        self.chain = 'regtest'\n+        self.chain = chain\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.network_thread = None"
      },
      {
        "sha": "ad24fdffca71707e56a0acc6969df0aa80718f72",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d42efe17c80f2ca4e47f1a2edcee730ed5b28aae/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d42efe17c80f2ca4e47f1a2edcee730ed5b28aae/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d42efe17c80f2ca4e47f1a2edcee730ed5b28aae",
        "patch": "@@ -208,6 +208,7 @@\n     'p2p_permissions.py',\n     'feature_blocksdir.py',\n     'feature_config_args.py',\n+    'feature_custom_chain.py',\n     'rpc_help.py',\n     'feature_help.py',\n     'feature_shutdown.py',"
      }
    ]
  },
  {
    "sha": "635771dfca8d3fcb8f95510fac2ccd049d65284f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzU3NzFkZmNhOGQzZmNiOGY5NTUxMGZhYzJjY2QwNDlkNjUyODRm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-02T20:26:30Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-08T19:49:44Z"
      },
      "message": "Chainparams: Make regtest almost fully customizable",
      "tree": {
        "sha": "e49bc079be97bf1513c1d7295f5162f3ca941f33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e49bc079be97bf1513c1d7295f5162f3ca941f33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/635771dfca8d3fcb8f95510fac2ccd049d65284f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl2c6FgACgkQiGbBjqHJ\nRKLYsg/+LJL5Xkl5q1OKhR3pFRn2JMWdxVnMkOe66cPhM5tzsHUZv26dXP2fbhaS\nc5gU/BnzU0Wb5mOd5q+YP8oaJdi1eExCeiAyAxY/R+/sQbP1DnavX+dypePC3gXk\nmeDKn8smYVT+yvwe/psDIi+0tGQSXG/G9FM/6pUCpDFxJncLn+K8GEyfMh66qNUR\n6nVNEn1mZsmkDM+RpvTb28cBXAxMWEt92LSwz9Y9mxdpKo0lRgzgHIsVpbLV98Tv\n9rkSHWCAcBq9S9c910XH8UsRKUetVXQQ8CzhKDw0RCKE3g/kgfNrgjZNZziLZCCw\n4rgT5Veu3LQ6OkXZ15rpdJRDOf2LkVfNg2xxHZsQdDL+HbPIbZtsG6duxGdawBPh\nexG5hGkG2to3R1Fjopz+eiXrYJ7aMK5h8xwzeaaMnDbcN/9A/J9YUZEnTFiYvsV5\negtN36jMCJ4LbedV7IVzodn580iyd7uSbJL0PvYZ2MNlMNvKyMRAZ3dwW+vFukfm\nBLv5GeLcASxT0Ak0NFOR+NpLgG0cdK0+tEIjhj6qQbdE+NQhawXZ1IwIYJgM5dC6\nQJ2BFvt2gDh9zQukKvcrOGmZ/1zDbXWIOz5c7KOg7s2JKOM4H+izxUQQRZsiTTBx\nOFdanAotAOdzI69fLdmdez5QaxxlJtbddfTbc3KE/tZjThl0tyw=\n=cYRl\n-----END PGP SIGNATURE-----",
        "payload": "tree e49bc079be97bf1513c1d7295f5162f3ca941f33\nparent d42efe17c80f2ca4e47f1a2edcee730ed5b28aae\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570047990 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570564184 +0200\n\nChainparams: Make regtest almost fully customizable\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/635771dfca8d3fcb8f95510fac2ccd049d65284f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/635771dfca8d3fcb8f95510fac2ccd049d65284f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/635771dfca8d3fcb8f95510fac2ccd049d65284f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d42efe17c80f2ca4e47f1a2edcee730ed5b28aae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d42efe17c80f2ca4e47f1a2edcee730ed5b28aae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d42efe17c80f2ca4e47f1a2edcee730ed5b28aae"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 96,
      "deletions": 53
    },
    "files": [
      {
        "sha": "b20a0aae2facd5eb3d2a123fc0dfb76d8fbd80a4",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 53,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/635771dfca8d3fcb8f95510fac2ccd049d65284f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/635771dfca8d3fcb8f95510fac2ccd049d65284f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=635771dfca8d3fcb8f95510fac2ccd049d65284f",
        "patch": "@@ -258,75 +258,24 @@ class CRegTestParams : public CChainParams {\n public:\n     explicit CRegTestParams(const ArgsManager& args) {\n         strNetworkID = \"regtest\";\n-        consensus.nSubsidyHalvingInterval = 150;\n-        consensus.BIP16Exception = uint256();\n-        consensus.BIP34Height = 500; // BIP34 activated on regtest (Used in functional tests)\n-        consensus.BIP34Hash = uint256();\n-        consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in functional tests)\n-        consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)\n-        consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n-        consensus.SegwitHeight = 0; // SEGWIT is always activated on regtest unless overridden\n-        consensus.MinBIP9WarningHeight = 0;\n-        consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-        consensus.nPowTargetSpacing = 10 * 60;\n-        consensus.fPowAllowMinDifficultyBlocks = true;\n-        consensus.fPowNoRetargeting = true;\n-        consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n-        consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n \n-        // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x00\");\n-\n-        // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x00\");\n-\n-        pchMessageStart[0] = 0xfa;\n-        pchMessageStart[1] = 0xbf;\n-        pchMessageStart[2] = 0xb5;\n-        pchMessageStart[3] = 0xda;\n-        nDefaultPort = 18444;\n-        nPruneAfterHeight = 1000;\n-        m_assumed_blockchain_size = 0;\n-        m_assumed_chain_state_size = 0;\n-\n         UpdateFromArgs(args);\n \n         genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n-\n-        vFixedSeeds.clear(); //!< Regtest mode doesn't have any fixed seeds.\n-        vSeeds.clear();      //!< Regtest mode doesn't have any DNS seeds.\n-\n-        fDefaultConsistencyChecks = true;\n-        fRequireStandard = true;\n-\n         checkpointData = {\n             {\n-                {0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")},\n+                {0, uint256S(consensus.hashGenesisBlock.GetHex())},\n             }\n         };\n-\n-        chainTxData = ChainTxData{\n-            0,\n-            0,\n-            0\n-        };\n-\n-        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n-        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n-        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n-        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n-\n-        bech32_hrp = \"bcrt\";\n     }\n \n+protected:\n     /**\n      * Allows modifying the Version Bits regtest parameters.\n      */\n@@ -341,6 +290,7 @@ class CRegTestParams : public CChainParams {\n \n void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n+    consensus.SegwitHeight = 0; // SEGWIT is always activated on regtest unless overridden\n     if (gArgs.IsArgSet(\"-segwitheight\")) {\n         int64_t height = gArgs.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n         if (height < -1 || height >= std::numeric_limits<int>::max()) {\n@@ -386,7 +336,69 @@ void CRegTestParams::UpdateFromArgs(const ArgsManager& args)\n {\n     UpdateActivationParametersFromArgs(args);\n \n+    consensus.nSubsidyHalvingInterval = args.GetArg(\"-con_nsubsidyhalvinginterval\", 150);\n+    consensus.BIP16Exception = uint256S(args.GetArg(\"-con_bip16exception\", \"0x0\"));\n+    consensus.BIP34Height = args.GetArg(\"-con_bip34height\", 500); // BIP34 activation (Used in functional tests)\n+    consensus.BIP34Hash = uint256S(args.GetArg(\"-con_bip34hash\", \"0x0\"));\n+    consensus.BIP65Height = args.GetArg(\"-con_bip65height\", 1351); // BIP65 activation (Used in functional tests)\n+    consensus.BIP66Height = args.GetArg(\"-con_bip66height\", 1251); // BIP66 activation (Used in functional tests)\n+    consensus.CSVHeight = args.GetArg(\"-con_csvheight\", 432); // CSV activation (Used in functional tests)\n+    consensus.MinBIP9WarningHeight = args.GetArg(\"-con_minbip9warningheight\", 0); // BIP9 warning activation (Used in functional tests)\n+    consensus.powLimit = uint256S(args.GetArg(\"-con_powlimit\", \"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n+    consensus.nPowTargetTimespan = args.GetArg(\"-con_npowtargettimespan\", 14 * 24 * 60 * 60); // two weeks\n+    consensus.nPowTargetSpacing = args.GetArg(\"-con_npowtargetspacing\", 10 * 60);\n+    consensus.fPowAllowMinDifficultyBlocks = args.GetBoolArg(\"-con_fpowallowmindifficultyblocks\", true);\n+    consensus.fPowNoRetargeting = args.GetBoolArg(\"-con_fpownoretargeting\", true);\n+    // 75% of 144 for regtest by default\n+    consensus.nRuleChangeActivationThreshold = (uint32_t)args.GetArg(\"-con_nrulechangeactivationthreshold\", 108);\n+    // Faster than normal for regtest (144 instead of 2016)\n+    consensus.nMinerConfirmationWindow = (uint32_t)args.GetArg(\"-con_nminerconfirmationwindow\", 144);\n+\n+    // The best chain should have at least this much work.\n+    consensus.nMinimumChainWork = uint256S(args.GetArg(\"-con_nminimumchainwork\", \"0x00\"));\n+\n+    // By default assume that the signatures in ancestors of this block are valid.\n+    consensus.defaultAssumeValid = uint256S(args.GetArg(\"-con_defaultassumevalid\", \"0x00\"));\n+\n+    nDefaultPort = (uint64_t)args.GetArg(\"-ndefaultport\", 18444);\n+    nPruneAfterHeight = (uint64_t)args.GetArg(\"-npruneafterheight\", 1000);\n+    m_assumed_blockchain_size = (uint64_t)args.GetArg(\"-assumed_blockchain_size\", 0);\n+    m_assumed_chain_state_size = (uint64_t)args.GetArg(\"-assumed_chain_state_size\", 0);\n+    fDefaultConsistencyChecks = args.GetBoolArg(\"-fdefaultconsistencychecks\", true);\n+    fRequireStandard = args.GetBoolArg(\"-frequirestandard\", true);\n     m_is_test_chain = args.GetBoolArg(\"-is_test_chain\", true);\n+\n+    bech32_hrp = args.GetArg(\"-bech32_hrp\", \"bcrt\");\n+    base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1, args.GetArg(\"-pubkeyprefix\", 111));\n+    base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1, args.GetArg(\"-scriptprefix\", 196));\n+    base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1, args.GetArg(\"-secretprefix\", 239));\n+\n+    const std::string extpubprefix = args.GetArg(\"-extpubkeyprefix\", \"043587CF\");\n+    assert(IsHex(extpubprefix) && extpubprefix.size() == 8 && \"-extpubkeyprefix must be hex string of length 8\");\n+    base58Prefixes[EXT_PUBLIC_KEY] = ParseHex(extpubprefix);\n+\n+    const std::string extprvprefix = args.GetArg(\"-extprvkeyprefix\", \"04358394\");\n+    assert(IsHex(extprvprefix) && extprvprefix.size() == 8 && \"-extprvkeyprefix must be hex string of length 8\");\n+    base58Prefixes[EXT_SECRET_KEY] = ParseHex(extprvprefix);\n+\n+    const std::string magic_str = args.GetArg(\"-pchmessagestart\", \"FABFB5DA\");\n+    assert(IsHex(magic_str) && magic_str.size() == 8 && \"-pchmessagestart must be hex string of length 8\");\n+    const std::vector<unsigned char> magic_byte = ParseHex(magic_str);\n+    std::copy(begin(magic_byte), end(magic_byte), pchMessageStart);\n+\n+    vFixedSeeds.clear(); //!< Regtest mode doesn't have any fixed seeds.\n+    vSeeds.clear(); //!< Regtest mode doesn't have any DNS seeds by default\n+    if (gArgs.IsArgSet(\"-seednode\")) {\n+        const auto seednodes = gArgs.GetArgs(\"-seednode\");\n+        if (seednodes.size() != 1 || seednodes[0] != \"0\") {\n+            vSeeds = seednodes;\n+        }\n+    }\n+    chainTxData = ChainTxData{\n+        0,\n+        0,\n+        0\n+    };\n }\n \n /**"
      },
      {
        "sha": "8adc8a7b7f34d36ec47a61ce14227f85bf72ee83",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/635771dfca8d3fcb8f95510fac2ccd049d65284f/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/635771dfca8d3fcb8f95510fac2ccd049d65284f/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=635771dfca8d3fcb8f95510fac2ccd049d65284f",
        "patch": "@@ -23,7 +23,38 @@ void SetupChainParamsBaseOptions()\n     gArgs.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_nsubsidyhalvinginterval\", \"Number of blocks between one subsidy adjustment and the next one. Default: 150 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_bip16exception\", \"A block hash not to validate BIP16 on. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_bip34height\", \"Height from which BIP34 is enforced. Default: 500 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_bip34hash\", \"Hardcoded hash for BIP34 activation corresponding to the bip34height so that bip30 checks can be saved. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_bip65height\", \"Height from which BIP65 is enforced. Default: 1351 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_bip66height\", \"Height from which BIP66 is enforced. Default: 1251 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_csvheight\", \"Height from which CSV is enforced. Default: 432 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_minbip9warningheight\", \"Height from which BIP9 warnings are used. Default: 0 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_powlimit\", \"Maximum proof of work target. Default 7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_npowtargettimespan\", \"Proof of work retargetting interval in seconds. Default: 2 weeks (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_npowtargetspacing\", \"Proof of work target for interval between blocks in seconds. Default: 600 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_fpowallowmindifficultyblocks\", \"Whether the chain allows minimum difficulty blocks or not. Default: 1 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_fpownoretargeting\", \"Whether the chain skips proof of work retargetting or not. Default: 1 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_nminerconfirmationwindow\", \"Interval for BIP9 deployment activation. Default: 144 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_nrulechangeactivationthreshold\", \"Minimum blocks to signal readiness for a chain for BIP9 activation. Default 108 (ie 75%). (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_nminimumchainwork\", \"The best chain should have at least this much work. Default: 0 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_defaultassumevalid\", \"By default assume that the signatures in ancestors of this block are valid. Consider using -assumevalid instead. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-ndefaultport\", \"The port to listen for connections on by default. Consider using -port instead of changing the default.  Default: 18444 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-npruneafterheight\", \"Only start prunning after this height. Default: 1000 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-assumed_blockchain_size\", \"Estimated current blockchain size (in GB) for UI purposes. Default 0 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-assumed_chain_state_size\", \"Estimated current chain state size (in GB) for UI purposes. Default 0 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-fdefaultconsistencychecks\", \"Whether -checkblockindex and -checkmempool are active by default or not. Consider using those options instead. Default: 1 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-frequirestandard\", \"Whether standard policy rules are applied in the local mempool by default. Consider using -acceptnonstdtxn=0 instead of changing the default. Default: 0 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-is_test_chain\", \"Whether it's allowed to set -acceptnonstdtxn=0 for this chain or not. Default: 1 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-bech32_hrp\", \"Human readable part for bech32 addresses. See BIP173 for more info. Default: bcrt (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-pubkeyprefix\", \"Magic for base58 pubkeys. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-scriptprefix\", \"Magic for base58 scripts. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-secretprefix\", \"Magic for base58 secret keys. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-extpubkeyprefix\", \"Magic for base58 external pubkeys. Default: 043587CF (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-extprvkeyprefix\", \"Magic for base58 external secret keys. Default: 04358394 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-pchmessagestart\", \"Magic for p2p protocol. Default: FABFB5DA (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-seednode=<ip>\", \"Use specified node as seed node. This option can be specified multiple times to connect to multiple nodes. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      }
    ]
  },
  {
    "sha": "0da5e7294e10a61605db497030afe0e556438bb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGE1ZTcyOTRlMTBhNjE2MDVkYjQ5NzAzMGFmZTBlNTU2NDM4YmI0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-02T16:38:46Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-08T20:11:51Z"
      },
      "message": "QA: Use resgtest2 chain instead of regtest for rpc tests (except rpc_getblockstats)",
      "tree": {
        "sha": "85c4bb1566e61ca5f8b45e0cd1156899080605c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85c4bb1566e61ca5f8b45e0cd1156899080605c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0da5e7294e10a61605db497030afe0e556438bb4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl2c7YcACgkQiGbBjqHJ\nRKKj8RAAiR6hSkquFJxdAVCr3c2UKHqToURJCdbkAamiDCLD97XoriqnxYi2siSQ\nlfn9P+1k2FGOjwSxPnJPm79SaOuqiihbwyQFUq3NH+xXviKrPusEW0HmMXC5ZRbh\nOSKUXee67rRvwFb75J1tZwX1IlY5/qcaLlVbLjL367NXsQ7DHypQYZ5QfYiLq3l1\nCFAe6ge0ooBGzMZbTesOVs9FRaJnTShIL1F1MRK94QX2KW6kAqVNFNoqUlTScAiR\nU9pp1nynPDV+l5a610AuZ7vmSbeI39CoyuYBP+SWpQAE97xj6AfCOdsNlikTWVFX\npm0Kn+teD1FlGq4BaTlT4dLaG0TzLuKa7AEAFXbz8malSo10xRwoUSTATgTVImMm\nPsPCQHUv2RchgWzVTEquT8ZPry67Pheuau3PAwDUPyp/Iwhy1dDtlfRXxgbBUIcT\ntzIyhVCnVLJdbJx+rTx4zrpRFmAMC6VhVWEsQ7+QsnJFqTIEchp4JbxHDGgnrPXW\nGJh9IrXYzDGGgXUVz5b3iQ4hVQpbp2dECuWkLZlwJq4BmXrjGoCApOca9PabK0Ij\n4xhHo/cVqC+EZSJNPCul5bWnKhg7NoGGsqwhV4LdP8/vsRL8jgMTeSuqAKgkoH1q\ny+6vxtocXUYz7rvyMijMAvr7eigaM6e8jG85evxpXmnf0tzzDxc=\n=MnKi\n-----END PGP SIGNATURE-----",
        "payload": "tree 85c4bb1566e61ca5f8b45e0cd1156899080605c2\nparent 635771dfca8d3fcb8f95510fac2ccd049d65284f\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570034326 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570565511 +0200\n\nQA: Use resgtest2 chain instead of regtest for rpc tests (except rpc_getblockstats)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0da5e7294e10a61605db497030afe0e556438bb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0da5e7294e10a61605db497030afe0e556438bb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0da5e7294e10a61605db497030afe0e556438bb4/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "635771dfca8d3fcb8f95510fac2ccd049d65284f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/635771dfca8d3fcb8f95510fac2ccd049d65284f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/635771dfca8d3fcb8f95510fac2ccd049d65284f"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e7dbc01657fdb61f871b7f6d8512e1f8647572eb",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0da5e7294e10a61605db497030afe0e556438bb4/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0da5e7294e10a61605db497030afe0e556438bb4/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=0da5e7294e10a61605db497030afe0e556438bb4",
        "patch": "@@ -204,7 +204,7 @@ test run:\n Use the path to find the pid file in the temp folder:\n \n ```bash\n-cat /tmp/user/1000/testo9vsdjo3/node1/regtest/bitcoind.pid\n+cat /tmp/user/1000/testo9vsdjo3/node1/regtest2/bitcoind.pid\n ```\n \n Then you can use the pid to start `gdb`:"
      },
      {
        "sha": "0fe5d3015bec708ad7078c14294684099c14c2ed",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0da5e7294e10a61605db497030afe0e556438bb4/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0da5e7294e10a61605db497030afe0e556438bb4/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=0da5e7294e10a61605db497030afe0e556438bb4",
        "patch": "@@ -83,7 +83,7 @@ def read_logs(tmp_dir):\n         chain = chain[0]  # pick the first one if more than one chain was found (should never happen)\n         chain = re.search(r'node0/(.+?)/debug\\.log$', chain).group(1)  # extract the chain name\n     else:\n-        chain = 'regtest'  # fallback to regtest (should only happen when none exists)\n+        chain = 'regtest2'  # fallback to regtest2 (should only happen when none exists)\n \n     files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n     for i in itertools.count():"
      },
      {
        "sha": "b6a7d048cd7073ab9278ab3ffe6fb9f5ff18c9f9",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0da5e7294e10a61605db497030afe0e556438bb4/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0da5e7294e10a61605db497030afe0e556438bb4/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=0da5e7294e10a61605db497030afe0e556438bb4",
        "patch": "@@ -31,6 +31,7 @@ def add_options(self, parser):\n                             help='Test data file')\n \n     def set_test_params(self):\n+        self.chain = 'regtest'\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n "
      },
      {
        "sha": "51536b1d02719b2ca18140874abee8ac80223c77",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0da5e7294e10a61605db497030afe0e556438bb4/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0da5e7294e10a61605db497030afe0e556438bb4/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=0da5e7294e10a61605db497030afe0e556438bb4",
        "patch": "@@ -83,9 +83,10 @@\n }\n \n MAGIC_BYTES = {\n-    \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n+    \"main\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n     \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n     \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n+    \"regtest2\": b\"\\xfa\\xbf\\xb5\\xda\",   # -chain=regtest2\n }\n \n "
      },
      {
        "sha": "a522b67d9f068b387548e78d5fb77a7dfaa95db6",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0da5e7294e10a61605db497030afe0e556438bb4/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0da5e7294e10a61605db497030afe0e556438bb4/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=0da5e7294e10a61605db497030afe0e556438bb4",
        "patch": "@@ -89,7 +89,7 @@ class BitcoinTestFramework(metaclass=BitcoinTestMetaClass):\n \n     This class also contains various public and private helper methods.\"\"\"\n \n-    def __init__(self, chain='regtest'):\n+    def __init__(self, chain='regtest2'):\n         \"\"\"Sets test framework defaults. Do not override this method. Instead, override the set_test_params() method\"\"\"\n         self.chain = chain\n         self.setup_clean_chain = False"
      }
    ]
  }
]