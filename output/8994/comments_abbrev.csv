btcdrak,2016-10-22T07:08:02Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-255512114,255512114,
btcdrak,2016-10-22T07:27:26Z,"Some ideas from [IRC today](https://botbot.me/freenode/bitcoin-core-dev/2016-10-22/?msg=75272893&page=1): Allow users to specify a .json file with all the parameters, and include an option for federated signing with list of signing keys.\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-255512760,255512760,
jtimon,2016-11-03T22:39:08Z,"Needed rebase. Also, new configurable parameter was introduced in #9053\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-258295321,258295321,
jtimon,2016-11-08T03:50:36Z,Rebased on top of #9102\n,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-259038637,259038637,
jtimon,2016-11-14T20:02:40Z,"Since #8855 needed rebase, this one too. Also adapted some more rpc tests to use the custom chain instead of regtest (only 4 missing it seems, but travis should pass).\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-260445967,260445967,
jtimon,2016-12-02T09:02:50Z,"Needed rebase.\n\nUpdate:\n\n- Now all rpc tests pass for self.chain=""regtest""\n\n""Magic"" fixes:\n\n- pruning.py and mempool_packages.py now pass with both regtest and custom (they were passing travis before because they are in the extended set of tests).\n\n""Magic"" fails:\n\n- Now p2p-segwit.py only passes with regtest but not with custom like before\n\nThis is related to #9102 (see",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-264406053,264406053,
jtimon,2016-12-02T22:24:32Z,"@TheBlueMatt said in #9243 :\n\n> I think for things which are their own classes, they should either have the arguments they care about passed into the constructor, or passed in when they need them (eg the way mempool limiting is done now)\n\nThe longer version of CreateChainParams could indeed take all fields in CChainParams and Consensus::Params as arguments, but that would break the encapsu",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-264578963,264578963,
jtimon,2016-12-03T13:13:51Z,Rebased,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-264638552,264638552,
jtimon,2016-12-20T07:08:26Z,Rebased,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-268171241,268171241,
jtimon,2016-12-20T10:24:31Z,"As a reminder, segwit.py and p2p-compactblocks.py still need to run with self.chain = ""regtest"" instead of self.chain = ""custom"". Perhaps that's ok?",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-268207841,268207841,
jtimon,2017-01-03T16:21:24Z,Needs rebase after #9243,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-270153767,270153767,
jtimon,2017-01-09T22:36:00Z,"Rebased, now including #9494 as a dependency.\nAt the same time, some simplifications have been done in the last rebase like less disruption to avoid usage of globals in SelectParams.\nAlso not do anything with bip9params like before (it is allowed for both retest and custom, unless you set fmineblocksondemand=0 in your custom chainparams.conf). Trying to move the bip9params args from regular ar",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-271430000,271430000,
jtimon,2017-01-11T15:56:27Z,"Sorry for the back and forth, but we only need #9494 as a dependency if we want the args to be loaded from a different .conf file. If loading from the same conf file (or regular command line args) is good enough as a first step there's no need to interfere with #9494 or temporarily creating a more generic version of ReadConfigFile that doesn't take the lock.\nIn case that's a strong requirement, ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-271906822,271906822,
rustyrussell,2017-02-21T23:25:08Z,"Concept Ack; I really like this, especially as lightning's spec has resorted to specifying a full blockchain for the test vectors (only way to get specific txids, see https://github.com/lightningnetwork/lightning-rfc/blob/master/03-transactions.md#appendix-c-funding-transaction-test-vectors )",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-281515924,281515924,
jtimon,2017-03-24T04:45:27Z,"Rebased, but the python tests were broken again.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-288932321,288932321,
jtimon,2017-03-25T21:04:39Z,"Sorry, false alarm, it was just pruning which seems to be dependent on the regtest genesis block too. In the process I noticed that I was missing option con_defaultassumevalid.\n  ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-289239470,289239470,
jtimon,2017-05-03T18:56:00Z,"Needed rebase like #8855 and in some python tests. Also fixed pruning.py so that it can run with self.chain=""custom"" again.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-299003178,299003178,
jtimon,2017-05-09T12:47:44Z,"Needed rebase for python tests.\nAlso, after #8855 has been merged, it goes from 9 commits and +248-137 to 6 commits and +161-55.\nSome squashing could be done too.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-300152017,300152017,
jtimon,2017-05-09T19:01:35Z,"Fixed some nits\n> what's the presumed use-case for the petname? A way to introduce some randomness into the genesis block?\n\nIt allows you to create another chain with a different genesis block but with the exact same parameters on the rest. For example, let's say people create ""lightningtestnet"", then gets attacked and people just need to change the petname ""lightningtestnet2"" to coordinate ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-300268792,300268792,
ryanofsky,2017-05-10T15:41:35Z,"What's the reason for the dependency on #9102? Also, you could remove #8855 from the list of dependencies in the PR description since it's now merged.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-300523631,300523631,
instagibbs,2017-05-10T20:47:25Z,"@ryanofsky not sure if it occurs here, but if a custom chain has a PoW that fails the minimum PoW check, it will fail to validate.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-300607608,300607608,
jtimon,2017-05-18T18:43:30Z,"Updated the list. Yes, that's the reason for #9102, so that any arbitrary genesis block doesn't fail on pow checks (whether the chain is regtest-like or not). At the same time, I think this PR is the best way to test this, so perhaps #9102 should be closed as independent?",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-302506375,302506375,
instagibbs,2017-05-18T18:51:04Z,"@jtimon Agreed, I think it fails to be mergable if not packaged with tests. Closing mine(for now?).",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-302508281,302508281,
jtimon,2017-05-30T19:49:45Z,"Although it didn't strictly needed, rebased after #9494 I can show more easily my preferred option of only allowing to load the custom chainparam arguments from file (not command line options), and only from a separated file from the one with the rest of the config. So I added a commit to do that as this PR did before (which can be squashed if it is liked or removed if it is not).\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-304988279,304988279,
jtimon,2017-06-05T18:45:19Z,Needed rebase,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306270515,306270515,
jnewbery,2017-06-05T20:48:50Z,"I don't understand the use of `-chainconf` argument. It looks like the actual functionality is just an additional config file that gets loaded after the main bitcoin.conf file. I originally thought that it'd be doing something like #9374, and allowing the user to specify a config file that would only get used if a specific chain was chosen, which would be very useful.\n\nIn any case, I think the",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306303583,306303583,
kallewoof,2017-06-07T00:34:03Z,I have to admit I don't really understand the purpose of it either. With #10267 you could also just do `-datadir` and/or `-conf` from command line and the chain specific config would `includeconf` the main config file.,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306652272,306652272,
jtimon,2017-06-07T12:31:03Z,"I don't think you are understanding what the last commit does.\n\nExample after last commit:\n```bitcoind -chain=custom -chainconf=mytestnet.conf```\nmytestnet.conf:\n```\nchainpetname=mytestnet1\ncon_fpowallowmindifficultyblocks=0\ncon_npowtargetspacing=700\n...\n```\nExample before the last commit (edited, it had a mistake):\n\n```bitcoind -chain=custom -con_fpowallowmindifficultybl",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306780110,306780110,
kallewoof,2017-06-07T12:55:39Z,"@jtimon `-includeconf` is not allowed on command line, only the config file. So in your case (I believe you meant includeconf=mytestnet3.conf there btw, but you wrote mytestnet2.conf in both), mytestnet2.conf would includeconf mytestnet3.conf, which actually isn't allowed and probably makes no sense.\n\nI'm still not really sure why you can't put \n\n```\nincludeconf=globalstuff.conf\n```\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306785983,306785983,
jtimon,2017-06-07T13:19:59Z,"Sorry, if I wasn't clear enough and that the example was wrong about -includeconf (corrected).\nTo be clear, without the last commit (and with you pr) you can do what you describe, with the last commit, you cannot, or put chainparams in the regular config file nor on the command line. Disallowing those options in favor of only allowing completely separated file for custom chainparams is the whole",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306792217,306792217,
jtimon,2017-06-08T00:31:57Z,"Since it conflicted with it, preemptively rebase on top of #10339 ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-306964226,306964226,
jtimon,2017-06-25T01:07:54Z,"Needed rebase, also removed the commit from #10339 .",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-310875298,310875298,
jtimon,2017-06-26T00:58:30Z,Needed trivial rebase after #9176,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-310940564,310940564,
jtimon,2017-07-04T15:24:55Z,Needed rebase.,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-312904046,312904046,
jnewbery,2017-08-09T19:20:34Z,"Concept ACK. I like this idea. A few high-level thoughts:\n\n- it'd be nice if we could just move the functional tests across to exclusively use the custom chain. Then you wouldn't need to make the changes in test_framework to store and pass around the chain name. What are the problems with the `segwit.py` test that prevent you from doing that?\n- What do you think about simplifying the config ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-321355349,321355349,
jtimon,2017-08-15T01:15:17Z,"Rebased.\nHopefully fixed some nits and suggestions by @jnewbery . Also removed a warning in the qt change.\nUpdated OP.\n\nRegarding allowing -chainconf or main_chain.conf for main, testnet3 or regtest, yeah, I think that would belong in another PR, but interested on hearing more thoughts on that.\n\nDetails of the segwit failure (I'll leave it failing on travis):\n```\nsegwit.py failed, ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-322351307,322351307,
jtimon,2017-08-31T02:05:42Z,"Rebased.\n~~Squashed except for the 3 file-related commits at the end, which could be one.~~\n~~Perhaps we can leave loading from a different file for later?~~\nEDIT: Squashed. Since there's some discussion related to the config files and potential conflict with other PRs, I left that part for later in https://github.com/jtimon/bitcoin/compare/0.13-new-testchain...jtimon:b16-new-testnet-file\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-326168476,326168476,
jtimon,2017-08-31T23:30:28Z,"Fixed the tests, except for the segwit one which still needs to remain in regtest or have some tests commented (not an option, but see last commit, in case anybody has an idea why may be failing).\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-326447191,326447191,
jtimon,2017-09-01T00:02:27Z,"Alright, it seems I solved segwit.py too, it seems I needed https://github.com/bitcoin/bitcoin/pull/8994/commits/9b4feab8d48972b5f3241d1926095da3401f536b",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-326451584,326451584,
jtimon,2017-09-07T03:16:58Z,Needed rebase,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-327672189,327672189,
jtimon,2017-09-20T22:03:01Z,Needed rebase.,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-330993851,330993851,
jtimon,2017-10-27T20:12:54Z,"Needed rebase, also some new adaptations in the python tests and taking care of bech32_hrp. ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-340073969,340073969,
TheBlueMatt,2017-11-10T21:45:39Z,"I'd say I'm -0 on this by the scale at https://github.com/bitcoin/bitcoin/pull/11426#issuecomment-334091207 - I'm fine with this if others want to review and maintain this, but unless we need it for testing, I dont think its worth the effort at all. Currently all our tests that need to change chainparams flags are pretty contained to only change one chainparams value (and we only ever care about o",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-343595690,343595690,
MarcoFalke,2017-11-11T18:58:47Z,"The code looks well written and I really like that experiment. Though, I fail to see how this helps with testing Bitcoin Core. We already have three networks that should cover all our testing needs. I am -0 on this change, given that it is a nice generalizing refactor, but might not be worth the effort of review and maintaining.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-343686501,343686501,
jtimon,2017-11-11T19:16:51Z,"Several new testchains were created when testing segwit. Lightning developers also wanted their own testnet, preferably with signed blocks (related to that, I would like to continue my work on #9177 if this gets merged).\nPerhaps similar testing needs/wants will arise again in the future. Regarding testing needs, I would say they're always unbounded.\n\nThis is also a way to test  #9102 which h",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-343687601,343687601,
MarcoFalke,2017-11-12T02:59:34Z,"> This is also a way to test #9102 which has never been merged due to lack of tests.\n\nWell. That reasoning is circular. #9102 was never merged because it is only required for this pull.\n\nThough, easier creation of future testchains (similar to segnet) is a valid rationale for this pull request. I change my preference to +0.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-343709973,343709973,
MarcoFalke,2017-11-14T22:38:06Z,I actually begin to like this pull. Going to review...,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-344423266,344423266,
Sjors,2017-12-01T15:43:47Z,"Came accross this PR today after waiting forever for my SegWit transactions to confirm on testnet, which makes #11403 a pain to test. Concept ACK. I'll try after the next rebase.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-348528056,348528056,
jtimon,2017-12-12T01:00:06Z,"Rebased. Hopefully solved or answered many nits by @MarcoFalke but not all.\nSome nits remain as debt for now but new nits are welcomed.\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-350910026,350910026,
jtimon,2017-12-12T14:18:09Z,"> The RPC port is 18553, right? When I run cgminer I get: No Stratum, GBT or Solo support in pool 0. It works for me on testnet (although its difficulty is out of reach for me).\n\nYeah, the default port, you can set it to something else. I don't know much about cgminer but this shouldn't affect it. Does it work for you with -regtest (or -chain=regtest)?\n\n> Maybe it's because initialblockdow",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-351064006,351064006,
Sjors,2017-12-12T14:46:58Z,"@jtimon I haven't tried mining on regtest, only on testnet. I'm not familiar with how the difference between regtest and testnet would impact the ability to use mining software like cgminer.\n\nRegardless of mining, shouldn't `initialblockdownload` in `getblockchaininfo` be `false`? It remained `true` when I used `-chain=sjors`. \n\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-351072387,351072387,
jtimon,2017-12-12T16:45:35Z,"Well, this changes nothing about testnet or getblockchaininfo, just allows you to use -chain=test instead of -testnet additionally.\nI really don't know what you're trying to do with the mining software, but if it's currently not working for -regtest it can't work with this patch and -chain=sjors, becasue -chain=sjors is basically just regtest with a different genesis block.\nThere's not much to",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-351110738,351110738,
jtimon,2018-01-09T03:27:10Z,"Rebased, mainly to make sure new tests were failing. Updated the OP accordingly. Ok, also updated because one more commit was separated into its own PR (ie https://github.com/bitcoin/bitcoin/pull/12128 ).\nCurrently 2 tests are failing documented in the TODO section of the OP.\n\nEDIT: Also add one last commit for CCustomParams to extend from CRegTestParams as suggested by @MarcoFalke (although",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-356169354,356169354,
jtimon,2018-01-31T23:56:42Z,Squashed the commit in which CCustomParams extends CRegTestParams and rebased.,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-362111513,362111513,
jtimon,2018-02-01T02:00:43Z,"Added commit named ""regtest and custom could be the same"", with it, commits ""QA: Adapt BitcoinTestFramework for chains other than ""regtest"""" and ""QA: Use custom chain instead of regtest for rpc tests"" aren't really necesary to test CCustomParams, since with it only CCustomParams be used, even for -regtest, never CRegTestParams on its own. IMO it still wouldn't hurt to have those 2 last commits cha",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-362133793,362133793,
jtimon,2018-02-08T21:22:14Z,Needed rebase,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-364252390,364252390,
jtimon,2018-02-20T20:30:21Z,"To clarify my earlier question, if we unify regtest CRegTestParams and CCustomParams (ie we use the equivalent of -chain=regtest for -regtest) there would be no need to touch the python tests to test the CCustomParams class, since it would already be used for all python tests (with the custom name ""regtest""). But this is a HF to regtest because it would change its genesis block, and people would n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-367108914,367108914,
Sjors,2018-02-22T09:17:32Z,"Assuming regtest is really only used by developers, it's not too much to ask them to delete it once, if it results in cleaner code. Using a new directory could lead to confusion ""where did my regtest history go?""\n\nThis needs a release note.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-367616305,367616305,
jtimon,2018-02-26T19:19:11Z,"> Do we really need the con_ prefix for these new arguments? It makes them hard to read.\n\nWell, it's to distinguish them from the non-consensus chain params.\n\n> If parameters can't be changed between launches, shouldn't bitcoind throw an error upon launch?\n\nI don't think so, no. Unless the change itself produces an error.\n\n> For example, if I change -bech32_hrp between launches, it",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-368616861,368616861,
Sjors,2018-02-27T11:55:02Z,"> discussion about how it fits with #10267 . Or that can be done after merging this.\n\nIf consensus paramaters are _only_ stored in a `.conf` and can't be changed through parameters, this shouldn't get in the way of #10267.\n\n>> For example, if I change -bech32_hrp between launches, it will consider its own previously generated addresses invalid.\n\n> And won't that throw an error like you",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-368850035,368850035,
jtimon,2018-02-27T21:42:53Z,"> If consensus paramaters are only stored in a .conf and can't be changed through parameters, this shouldn't get in the way of #10267.\n\nWell, in previous discussion it seemed that using a separate file was getting the PR stuck instead of merged, so I decided to leave that for a following PR, but I have the code written, it should just be one rebase if we prefer that (but I'm really not sure th",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-369036565,369036565,
Sjors,2018-02-28T09:26:50Z,"> I don't even understand why someone would want to use 2 different bech32_hrp on the same chain at different times\n\nMe neither. I assume this would only happen by accident and confuse a developer until they realize what's going on.\n\n> by ""on the fly"", you mean stopping the node and restarting it with different rules but the same genesis block and datadir\n\nCorrect. Perhaps in order to ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-369175577,369175577,
jtimon,2018-03-22T10:48:37Z,"@MarcoFalke I honestly don't know what's the status of this at this point. I feel I asked too many question and I got too many different answers.\n\nThere's a few components here:\n\n1) regtest could make all its attributes configurable within its constructor. we already do this outside the constructor for bip9 and plan to do the same for segwitheight (there's older examples for trying to edit",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-375260638,375260638,
MarcoFalke,2018-03-22T10:58:59Z,"@jtimon Sorry that I haven't looked at this after the rebase. I just wanted to get in #12300 first, which touches the same files.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-375263812,375263812,
jtimon,2018-04-09T17:05:09Z,"@MarcoFalke It seems there's some controversy around https://github.com/bitcoin/bitcoin/pull/12300 though. Rebasing either one on top of the other should be relatively easy I think.\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-379823556,379823556,
MarcoFalke,2018-04-09T17:08:41Z,@jtimon Sounds fine. (Needs rebase),https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-379824547,379824547,
fanquake,2018-10-10T02:52:01Z,"Have spoken to @jtimon. He said he's planning on rebasing this within ~1 week from today, so this can remain open until at least then.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-428420403,428420403,
jtimon,2018-10-10T03:01:35Z,"Actually, it's more likely to be ~2 weeks, but yeah, I intend to rebase this.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-428421873,428421873,
jtimon,2018-10-13T01:01:30Z,"Rebased earlier than anticipated, but...\n\nEven without running with:\n\n```\npython3 ./test/functional/test_runner.py -j4 --extended\n```\n\n... the following test fail:\n\n```\nfeature_block.py                      | ✖ Failed  | 1 s\nfeature_cltv.py                       | ✖ Failed  | 11 s\nfeature_csv_activation.py             | ✖ Failed  | 1 s\nfeature_dersig.py                 ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-429498522,429498522,
Sjors,2018-10-13T07:39:56Z,"`feature_block.py` fails for me because it's looking for a log file in `regtest` instead of `regtest2`:\n<img width=""1055"" alt=""schermafbeelding 2018-10-13 om 16 33 54"" src=""https://user-images.githubusercontent.com/10217/46902769-f4952000-cf05-11e8-9464-e3130dd1960a.png"">\n<img width=""1056"" alt=""schermafbeelding 2018-10-13 om 16 35 35"" src=""https://user-images.githubusercontent.com/10217/469027",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-429519475,429519475,
jtimon,2018-10-13T17:16:32Z,"Fixed nits, thanks! And made a few more other fixes.\nWith that and running with the -extended tests, they pass.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-429559163,429559163,
Sjors,2018-10-14T02:45:17Z,"`-chain` now works, but other consensus parameters still throw an `Invalid parameter` error, unless I put them in the config file.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-429591756,429591756,
jtimon,2018-10-14T12:26:39Z,"@Sjors It seems I had to add them to hidden_args in init.cpp. Hopefully fixed.\n\nAdded: -seednode, '-fallback_fee_enabled', '-pubkeyprefix', '-scriptprefix', '-secretprefix', '-extpubkeyprefix', '-extprvkeyprefix', '-pchmessagestart'\n\nRemoved: -frequirestandard (since it is redundant with acceptnonstdtxn).\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-429622291,429622291,
jtimon,2018-10-16T16:26:04Z,Fixed @practicalswift 's nits.,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-430304159,430304159,
DrahtBot,2018-10-20T11:18:48Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17037](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17037.html) (Testschains: Many regtests with different g",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-431571560,431571560,
Sjors,2018-11-27T13:51:22Z,"Concept ACK on making it easier to test the interaction between multiple chains. Optionally combined with #12134 it offers a lot flexibility when testing future soft-forks. The change to the test framework looks simple enough, but could use @jnewbery's eyes.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-442064934,442064934,
jtimon,2018-12-20T19:54:50Z,"Rebased. A new commit undoing recent changes was also needed.\nThere are still some pending nits/discussions.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-449117239,449117239,
jtimon,2019-06-08T14:51:33Z,Rebased again,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-500130058,500130058,
jtimon,2019-06-13T18:29:57Z,"Added customization for -assumed_blockchain_size and -assumed_chain_state_size introduced in https://github.com/bitcoin/bitcoin/pull/13216/ . I forgot that on rebase.\n\nAlso, added basic documentation for all fields as discussed before. Although nits for the documention are of course welcomed, we could perhaps fine tune that and, more importantly, which fields don't even deserve to be exposed, ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-501826862,501826862,
instagibbs,2019-06-13T19:15:20Z,"concept ACK\n\nIt makes testing easier, enough said.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-501842464,501842464,
kallewoof,2019-06-17T04:37:44Z,"Concept ACK and light code re-utACK.\n\nI am not a big fan of adding a ton of new `-options` but I don't see a way around it without some custom grokkery. The # of lines added (+351-267=+84) seems warranted for the functionality this provides, and I think this would go hand in hand with signet.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-502531645,502531645,
jtimon,2019-06-17T16:06:15Z,"Well, we can leave some of the options undocumented and we can also not expose some of the chain params at all since there are alternative ways to test that functionality (like the port number or allownonstd).\nNot sure if that's what you mean by ""some custom grokkery though"".\n ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-502747525,502747525,
kallewoof,2019-06-17T17:28:58Z,"I meant a new file format for custom chains that is separate from the main argument stuff. People would either provide a JSON object describing all the options or a file that had the options in it.\n\nThat said though, isn't it already possible to do e.g. `-chain=""{\""name\"":\""foochain\"", \""optionxyz\"": 36, ...}`? That would put your command additions at one, but the downside is that error checki",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-502777501,502777501,
ajtowns,2019-06-18T05:10:31Z,"Concept ACK. There's two things I'm ""Approach NACK"" on -- all the extra options, and switching to regtest2.\n\nI think the options can be broken out into:\n\n * chain params: halving interval, (initial reward?), pow (limit, interval, spacing, retargeting, min chain work)\n * soft-fork params: vbparams, bip16exception, etc\n * p2p params: default port, seednode, pchmessagestart\n * UI elemen",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-502949416,502949416,
MarcoFalke,2019-06-18T13:57:44Z,Not sure about the `hex` part. That makes it hard to change a param. What about requiring that the specs are provided in a json file (`-customchainfile=foo.json`) and can not be passed in on the command line?,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-503147342,503147342,
jtimon,2019-06-18T14:41:30Z,"What is the advantage of the blob? How is copying and pasting from conf files harder than running a script to then copy and paste just the same?\nIf you require proof of work, then the same config for a chain won't necessarily result in the same genesis hash.\nYou can already ""chose your newspaper quote"", whatever you put in -chain=hashthis is going to be hashed in the genesis block instead of s",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-503166755,503166755,
Sjors,2019-07-05T14:50:20Z,"Can we make the consensus arguments available exclusively via the config file? In that case you wouldn't need the `-con_` prefix either. And it will make it easier in the future to change how we configure these new chains, e.g. via the hex string @ajtowns suggested above; that would then be a simple matter of the regular parser ignoring sections other than [main], [testnet] and [regtest]. ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-508783114,508783114,
jtimon,2019-07-05T16:13:18Z,"The con_ prefix is just meant to be informative, I don't see what would be\nthe point in trating the consensus args differently from the others.\nAs said I don't see how @ajtowns's sugfestion simplifies anything, I think\nit actually makes things more complicated.\n\nThe parser already separates the sections by chain, now you would just put\nut under [mychain].\n\nRegarding allowing the args to be",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-508806172,508806172,
jtimon,2019-08-01T19:48:18Z,"Rebased and then squashed the documentation commit, since nobody seemed to dislike it. Also removed the arguments from the hidden_args variable in init.cpp.\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-517431273,517431273,
jtimon,2019-08-07T03:27:32Z,Rebased and adapted the tests a little bit more,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-518924833,518924833,
jtimon,2019-08-08T09:32:30Z,"Fixed @MarcoFalke 's nit.\nAlso fixed new test (kind of secretly introduced by in the merge commit of #16366 ) that this PR was breaking.\n ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-519444559,519444559,
jtimon,2019-08-08T09:38:34Z,"Also, I don't think this needs concept ACKs. I mean, I guess nacks are still ""welcomed"", even though potential nackers have had plenty of time. \nI think it just needs ACKs, and I'm afraid the needs concept acks label may be dissuading people from reviewing it.\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-519446579,519446579,
Sjors,2019-08-19T12:33:09Z,"I can see this being very useful in combination with Signet (#16411). For example someone might use the default signet as a custom signet for projects they're working on. Right now that requires separate data dirs. @kallewoof any thoughts on sequencing?\n\nThe signet PR also takes the approach of passing consensus params via the config file and bitcoind, so let's just stick to that. The extra do",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-522551234,522551234,
MarcoFalke,2019-08-19T12:42:55Z,"The only commits that are useful for signet are 66e8da33b45a7cf5affc2afaff1c7ed594c1d755 and the gui change, so maybe create a separate pull request with those?",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-522555390,522555390,
Sjors,2019-08-19T14:24:44Z,"@MarcoFalke custom consensus parameters are also useful, but I agree it could be a good idea to split those commits into their own PR.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-522598507,522598507,
jtimon,2019-08-19T15:10:27Z,"I'm happy to separate commits, but I disagree those are rhe only changes\nuseful for signet.\nSignet could be implemented just by adding an optional parameter to the\ncustom chain chainparams.\n\nOn Mon, Aug 19, 2019, 16:28 Sjors Provoost <notifications@github.com> wrote:\n\n> @MarcoFalke <https://github.com/MarcoFalke> custom consensus parameters\n> are also useful, but I agree it could be a good",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-522620370,522620370,
jtimon,2019-08-22T13:56:21Z,"Rebased, also separated https://github.com/bitcoin/bitcoin/pull/16680 as suggested.",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-523917469,523917469,
jtimon,2019-08-22T14:19:14Z,Also separated #16681 ,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-523926800,523926800,
jtimon,2019-09-06T21:24:31Z,"Rebased on top of the latest:\n\n- Tests: Use self.chain instead of 'regtest' in all current tests #16681\n- Preparations for more testchains #16680\n\n...and added them to the dependencies in the OP.\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-529019382,529019382,
jtimon,2019-09-10T20:01:49Z,Rebased after #16680 was merged,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-530096447,530096447,
jtimon,2019-09-10T22:32:32Z,"Small change: instead of simply replacing the pszTimestamp string in the genesis block with the chain name, hash it like in signet #16411 ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-530146041,530146041,
jtimon,2019-09-12T17:41:23Z,"Needed rebase after https://github.com/bitcoin/bitcoin/pull/16551 was merged.\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-530930480,530930480,
jtimon,2019-10-02T16:42:33Z,"Rebased.\nAlso I left rpc_getblockstats in ""regtest"" instead of moving it to ""regtest2"" like all other tests since that's trivial to do and review later and adapting it now made the total diff much more scary (+312-230 adapting it vs +206-123 now).\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-537579215,537579215,
jtimon,2019-10-02T19:43:31Z,Rebased and changed the documentation string for -is_test_chain after https://github.com/bitcoin/bitcoin/pull/16524 was merged.,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-537648935,537648935,
jtimon,2019-10-03T00:19:30Z,"Rebased on top of #17032 , again trying to separate things.\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-537733361,537733361,
jtimon,2019-10-03T03:25:04Z,Rebased on top of separated https://github.com/bitcoin/bitcoin/pull/17037,https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-537768106,537768106,
jtimon,2019-10-08T20:18:19Z,"Rebased on top of rebased and modified #16681 , one less commit in total, but the total diff it's the same.\n",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-539685222,539685222,
jtimon,2019-10-09T13:38:39Z,"Since #16681 was closed, closing this too. There's also more discussions there with people saying they don't like the idea of moving the test framework default chain from ""regtest"" to ""regtest2"".\n ",https://github.com/bitcoin/bitcoin/pull/8994#issuecomment-540004892,540004892,
instagibbs,2017-05-09T14:34:39Z,do we want to disallow both `chain` and `testnet`/`regtest` being given?,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r115505684,115505684,src/chainparamsbase.cpp
instagibbs,2017-05-09T14:39:38Z,nit:extra space,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r115506967,115506967,contrib/devtools/check-doc.py
instagibbs,2017-05-09T16:46:50Z,s/Regtest/custom,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r115540493,115540493,src/chainparams.cpp
instagibbs,2017-05-09T16:46:57Z,s/Regtest/custom,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r115540521,115540521,src/chainparams.cpp
instagibbs,2017-05-09T16:51:18Z,this is unused.,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r115541557,115541557,src/chainparamsbase.h
jtimon,2017-05-09T17:36:26Z,"Oops, this are rests from when the PR only allowed to set the custom chainparams parameter from its own specific conf file, but not from the command line options nor the regular config file (to separate concerns). If that's preferred, it shouldn't be hard to do again on top of #9494 ",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r115552434,115552434,src/chainparamsbase.h
jtimon,2017-05-09T17:37:29Z,Isn't this the correct indentation?,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r115552701,115552701,contrib/devtools/check-doc.py
jnewbery,2017-08-09T19:21:40Z,recommend you keep the consensus parameters separated in their own set and then add them with the existing `SET_DOC_OPTIONAL`,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r132281166,132281166,contrib/devtools/check-doc.py
jnewbery,2017-08-09T19:23:18Z,Comment seems wrong. This isn't just for unit tests.,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r132281522,132281522,src/chainparams.h
jnewbery,2017-08-09T19:23:36Z,"Should be part of consensus params, not general params.",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r132281587,132281587,src/chainparamsbase.cpp
jtimon,2017-08-14T23:12:19Z,"I like more your suggested idea of -chainpetaname and taking it directly from -chain if other than  main, test and regtest which are reserved.",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r133084672,133084672,src/chainparamsbase.cpp
MarcoFalke,2017-11-14T21:11:32Z,"refactoring-nit:\n\n```cpp\nif (is_chain_arg_set + fRegTest + fTestNet >= 2) {\n    throw std::runtime_eror(""... Can use at most one."");",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r150964237,150964237,src/chainparamsbase.cpp
MarcoFalke,2017-11-14T21:45:57Z,"nit for the chain params above: Since you compare `strNetworkID` with `CBaseChainParams`, they should be set to the constant, instead of verbose copy.",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r150973118,150973118,src/chainparams.cpp
MarcoFalke,2017-11-14T21:49:05Z,"nit: Since you compare those strings against the constants in `CBaseChainParams`, you might want to replace the strings with the constants.",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r150973886,150973886,src/qt/networkstyle.cpp
MarcoFalke,2017-11-14T22:01:47Z,"Needs rebase, which raises the question why this class can not just derive from the CRegTestParams class...",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r150976963,150976963,src/chainparams.cpp
MarcoFalke,2017-11-14T22:06:45Z,"When it is possible to derive from the RegTestPrams class, you might want to put the current value (i.e. `consensus.fPowAllowMinDifficultyBlocks` instead of the hardcoded value here?",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r150978134,150978134,src/chainparams.cpp
MarcoFalke,2017-11-14T22:33:14Z,Nit: The string constants should not be translated. Mind replacing them by `CBaseChainParams` constants.,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r150984247,150984247,src/chainparamsbase.cpp
MarcoFalke,2017-11-14T22:33:50Z,Same translation nit here.,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r150984385,150984385,src/chainparamsbase.cpp
MarcoFalke,2017-11-14T22:34:52Z,Surely this should not be translated. Might as well remove it altogether from the help output.,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r150984627,150984627,src/chainparamsbase.cpp
MarcoFalke,2017-11-14T22:36:11Z,Maybe set to 18553 to prevent another #10825,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r150984948,150984948,src/chainparamsbase.cpp
MarcoFalke,2017-11-29T21:39:49Z,Needs rebase for the bracket change,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r153922809,153922809,src/qt/networkstyle.cpp
jtimon,2017-12-11T20:47:10Z,"Unfortunately, since std::string is a non-literal type, these constants are initialized in chainparamsbase.cpp after network_styles here. If these constants were macros instead of static attributes there would be no problem.\nSince now we sometimes do scripted diffs PRs, perhaps it's a good time to think about s/CBaseChainParams::MAIN/CHAINPARAMS_MAIN/ and then more s/""main""/CHAINPARAMS_MAIN/ but",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r156194083,156194083,src/qt/networkstyle.cpp
jtimon,2017-12-11T21:07:34Z,"ack on the translation nit since this is only for the debug options anyway. On anything in the debug options at all, I was using -con_nsubsidyhalvinginterval just as an example to catch feedback like this. I think probably all the supported options should be shown or none of them. Which also opens the question of whether all options are worth it or not. For example,  -con_nsubsidyhalvinginterval m",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r156198882,156198882,src/chainparamsbase.cpp
jtimon,2017-12-11T21:16:40Z,See https://github.com/bitcoin/bitcoin/pull/8994/commits/52f6f43968595a769b109b9b6987ab03275c4a9d#r156194083 I didn't check if it applies to this though.,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r156201041,156201041,src/chainparamsbase.cpp
jtimon,2017-12-11T21:21:41Z,"The ""constants"" (static attributes) are not always available, see https://github.com/bitcoin/bitcoin/pull/8994/commits/52f6f43968595a769b109b9b6987ab03275c4a9d#r156194083\n\nApart from that, this allows chain with other names (say -chain=custom2) and they will work the same as custom except for the strNetworkID as suggested by @jnewbery . This eliminates the need for the -chainpetname argument I",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r156202217,156202217,src/chainparams.cpp
Sjors,2017-12-12T10:37:01Z,Isn't the convention for the RPC port to be `P2P port - 1`?,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r156327862,156327862,src/chainparamsbase.cpp
jtimon,2017-12-12T14:17:30Z,"You mean ndefault port could be, by default 18554 instead of 18444 ?\nYeah, That would make it a little bit more different than regtest by default but I guess it's alright.\nIf @MarcoFalke hasn't asked I would have been personally fine with leaving both the same as regtest. These are default ports that can be configured manually anyway. ",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r156376992,156376992,src/chainparamsbase.cpp
Sjors,2018-02-26T15:13:02Z,These might actually be worth documenting.,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r170622933,170622933,contrib/devtools/check-doc.py
Sjors,2018-02-26T15:36:20Z,Redundant given `port=`?,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r170631215,170631215,src/chainparams.cpp
jtimon,2018-02-26T19:01:30Z,"Happy to do so if more people feel the same way, or only some of them, whatever.",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r170699140,170699140,contrib/devtools/check-doc.py
Sjors,2018-10-13T07:48:17Z,Why `--` rather than `-`?,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r224952761,224952761,src/chainparamsbase.cpp
ken2812221,2018-10-13T13:30:35Z,"const is an unknown argument. I assume that this is what you want:\n```python\nparser.add_argument('--chain', dest='chain', help='selected chain in the tests (default: %(default)s)', default='regtest2')",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r224960259,224960259,test/functional/combine_logs.py
practicalswift,2018-10-15T12:21:36Z,Make this signedness conversion explicit :-),https://github.com/bitcoin/bitcoin/pull/8994#discussion_r225143812,225143812,src/chainparams.cpp
practicalswift,2018-10-15T12:25:34Z,Make the conversion from `bool` to `int` explicit :-),https://github.com/bitcoin/bitcoin/pull/8994#discussion_r225145082,225145082,src/util.cpp
practicalswift,2018-10-15T12:26:12Z,nit: Redundant blank line,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r225145260,225145260,src/chainparams.cpp
practicalswift,2018-10-15T13:13:49Z,"Nit: Move outside of the `if`:\n\n```\nassert(IsHex(extpubprefix) && extpubprefix.size() == 8 && ""-extpubkeyprefix must be hex string of length 8"");\n```",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r225160029,225160029,src/chainparams.cpp
practicalswift,2018-10-15T13:14:00Z,Same here.,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r225160093,225160093,src/chainparams.cpp
practicalswift,2018-10-15T13:14:06Z,Same here.,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r225160128,225160128,src/chainparams.cpp
practicalswift,2018-10-15T13:16:46Z,From where is `log_filename` used? :-),https://github.com/bitcoin/bitcoin/pull/8994#discussion_r225160895,225160895,test/functional/test_framework/test_framework.py
jtimon,2018-10-16T16:07:27Z,Will do the same for nRuleChangeActivationThreshold and nMinerConfirmationWindow.,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r225607753,225607753,src/chainparams.cpp
MarcoFalke,2018-11-01T21:11:25Z,"I am wondering if this option should be hidden like regtest...\n\nEffectively this reverts the option sanitization check at initialization, where typos would be rejected for e.g. `-tesnet`. Now, `-chain=tesnet` is neither an error, nor does sync with testnet3.",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r230200450,230200450,src/chainparamsbase.cpp
jtimon,2018-11-05T12:25:52Z,"I'm fine changing it to hidden, but I plan to stop using -testnet and use the equivalent ""-chain=test"" myself. ""-chain=testnet"" doesn't work as you expect because the bip70 petname for testnet3 is neither ""testnet"" nor ""testnet3"" (what would have been my preference) but ""test"". Note it says the reserved value is ""test"" and not ""testnet"". ""-chain=testnet"" just create a new custom chain with testnet",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r230731447,230731447,src/chainparamsbase.cpp
jtimon,2018-11-05T12:27:07Z,"Presumably -testnet and -regtest could be deprecated one day, since the -chain parameter is sufficient (-chain=test is equivalent to -testnet, -chain=regtest is equivalent to -regtest).",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r230731740,230731740,src/chainparamsbase.cpp
MarcoFalke,2018-11-05T14:39:14Z,"Ah, sorry. I mean `-chain=tes` (with a typo) would no longer throw an error nor sync with testnet. I just wanted to point out that behaviour change.",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r230772560,230772560,src/chainparamsbase.cpp
luke-jr,2018-11-19T21:50:08Z,We only need one regression test framework...,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r234794624,234794624,test/functional/combine_logs.py
jtimon,2018-11-20T20:37:47Z,Another option that would also work would be to simply hardcode regtest2 in combine_logs.py (instead of hardcoding regtest like before). Would that look better to you?,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r235160497,235160497,test/functional/combine_logs.py
flack,2018-11-20T22:00:27Z,"maybe it could log/print an extra message like ""using custom chain xyz"" when `chain` is not equal to `main`, `test` or `regtest`? At least that would make the potential typo easier to spot",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r235185056,235185056,src/chainparamsbase.cpp
kallewoof,2018-11-20T23:29:48Z,"Why can't you name it just ""regtest""?",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r235207280,235207280,test/functional/combine_logs.py
stevenroose,2018-11-26T10:57:23Z,"You need to explicitly add `-chain=` to the [arg list here](https://github.com/ElementsProject/elements/pull/458/files#diff-86294e5ae5283eebdd9f98d79007a0e1). Because the config file chain variable is created before any of the tests start, so that variable defaults to the default test-framework chain. That's why [I also removed the `chain=` in the config file](https://github.com/ElementsProject/el",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r236206875,236206875,test/functional/test_framework/test_node.py
stevenroose,2018-11-26T10:59:01Z,This doesn't seem to be flexible enough to support multiple chains per test. I had to [make this change](https://github.com/ElementsProject/elements/pull/458/files#diff-64721c5ee64d44f7114d6d0d2226db4dL257) to allow for that. (Also see my suggestion to TestNode to allow that.),https://github.com/bitcoin/bitcoin/pull/8994#discussion_r236207451,236207451,test/functional/test_framework/test_framework.py
jtimon,2018-12-20T18:39:10Z,"Because regtest is reserved for the current regtest, with a different genesis block hash. I suggested we just remove the regtest chainparams and simply use a custom chain named regtest instead (wouldn't require this change), but someone was against it.",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r243376262,243376262,test/functional/combine_logs.py
jtimon,2018-12-20T18:40:14Z,@flack That seems simple and reasonable. @MarcoFalke would that solve your concern?,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r243376634,243376634,src/chainparamsbase.cpp
jtimon,2018-12-20T18:40:59Z,"This doesn't intend to support multiple chains per test, at least not in principle. Note this comment is appearing in bitcoin/bitcoin, not elements.",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r243376858,243376858,test/functional/test_framework/test_framework.py
jtimon,2018-12-20T19:54:16Z,Not sure if this comment applies to this PR or to elements.,https://github.com/bitcoin/bitcoin/pull/8994#discussion_r243398575,243398575,test/functional/test_framework/test_node.py
MarcoFalke,2019-08-07T11:46:03Z,"Why is this required, given that you already pass the datadir, which has the conf file, which sets the chain?",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r311508312,311508312,test/functional/test_framework/test_node.py
jtimon,2019-08-08T09:13:25Z,"yeah, it seems that's redundant, I'll remove it.",https://github.com/bitcoin/bitcoin/pull/8994#discussion_r311933755,311933755,test/functional/test_framework/test_node.py
