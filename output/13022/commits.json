[
  {
    "sha": "80a5e59532925a3445f523a8b3bc29e2e11e8848",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGE1ZTU5NTMyOTI1YTM0NDVmNTIzYThiM2JjMjllMmUxMWU4ODQ4",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-04-18T19:17:22Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-04-19T14:21:36Z"
      },
      "message": "[qa] Attach node index to test_node AssertionError and print messages\n\nto aid debugging. Feedback incorporated from @Empact.",
      "tree": {
        "sha": "a9df4dd36116f5dac6eb3b0d8254410d4fe22b7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9df4dd36116f5dac6eb3b0d8254410d4fe22b7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80a5e59532925a3445f523a8b3bc29e2e11e8848",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80a5e59532925a3445f523a8b3bc29e2e11e8848",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80a5e59532925a3445f523a8b3bc29e2e11e8848",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80a5e59532925a3445f523a8b3bc29e2e11e8848/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "615f7c288414a89cd1dec1d67e0f84abe2fb4c6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/615f7c288414a89cd1dec1d67e0f84abe2fb4c6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/615f7c288414a89cd1dec1d67e0f84abe2fb4c6d"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 24,
      "deletions": 13
    },
    "files": [
      {
        "sha": "54e533d6f6f4d4f257423032ebb5aa892d1e2658",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 24,
        "deletions": 13,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80a5e59532925a3445f523a8b3bc29e2e11e8848/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80a5e59532925a3445f523a8b3bc29e2e11e8848/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=80a5e59532925a3445f523a8b3bc29e2e11e8848",
        "patch": "@@ -19,7 +19,6 @@\n from .authproxy import JSONRPCException\n from .util import (\n     append_config,\n-    assert_equal,\n     delete_cookie_file,\n     get_rpc_proxy,\n     rpc_url,\n@@ -103,22 +102,30 @@ def __init__(self, i, datadir, rpchost, timewait, binary, stderr, mocktime, cove\n \n         self.p2ps = []\n \n+    def _node_msg(self, msg: str) -> str:\n+        \"\"\"Return a modified msg that identifies this node by its index as a debugging aid.\"\"\"\n+        return \"[node %d] %s\" % (self.index, msg)\n+\n+    def _raise_assertion_error(self, msg: str):\n+        \"\"\"Raise an AssertionError with msg modified to identify this node.\"\"\"\n+        raise AssertionError(self._node_msg(msg))\n+\n     def __del__(self):\n         # Ensure that we don't leave any bitcoind processes lying around after\n         # the test ends\n         if self.process and self.cleanup_on_exit:\n             # Should only happen on test failure\n             # Avoid using logger, as that may have already been shutdown when\n             # this destructor is called.\n-            print(\"Cleaning up leftover process\")\n+            print(self._node_msg(\"Cleaning up leftover process\"))\n             self.process.kill()\n \n     def __getattr__(self, name):\n         \"\"\"Dispatches any unrecognised messages to the RPC connection or a CLI instance.\"\"\"\n         if self.use_cli:\n             return getattr(self.cli, name)\n         else:\n-            assert self.rpc_connected and self.rpc is not None, \"Error: no RPC connection\"\n+            assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\n             return getattr(self.rpc, name)\n \n     def start(self, extra_args=None, stderr=None, *args, **kwargs):\n@@ -141,7 +148,8 @@ def wait_for_rpc_connection(self):\n         poll_per_s = 4\n         for _ in range(poll_per_s * self.rpc_timeout):\n             if self.process.poll() is not None:\n-                raise FailedToStartError('bitcoind exited with status {} during initialization'.format(self.process.returncode))\n+                raise FailedToStartError(self._node_msg(\n+                    'bitcoind exited with status {} during initialization'.format(self.process.returncode)))\n             try:\n                 self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, timeout=self.rpc_timeout, coveragedir=self.coverage_dir)\n                 self.rpc.getblockcount()\n@@ -160,14 +168,13 @@ def wait_for_rpc_connection(self):\n                 if \"No RPC credentials\" not in str(e):\n                     raise\n             time.sleep(1.0 / poll_per_s)\n-        raise AssertionError(\"Unable to connect to bitcoind\")\n+        self._raise_assertion_error(\"Unable to connect to bitcoind\")\n \n     def get_wallet_rpc(self, wallet_name):\n         if self.use_cli:\n             return self.cli(\"-rpcwallet={}\".format(wallet_name))\n         else:\n-            assert self.rpc_connected\n-            assert self.rpc\n+            assert self.rpc_connected and self.rpc, self._node_msg(\"RPC not connected\")\n             wallet_path = \"wallet/%s\" % wallet_name\n             return self.rpc / wallet_path\n \n@@ -194,7 +201,8 @@ def is_node_stopped(self):\n             return False\n \n         # process has stopped. Assert that it didn't return an error code.\n-        assert_equal(return_code, 0)\n+        assert return_code == 0, self._node_msg(\n+            \"Node returned non-zero exit code (%d) when stopping\" % return_code)\n         self.running = False\n         self.process = None\n         self.rpc_connected = False\n@@ -229,19 +237,22 @@ def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, mat\n                     stderr = log_stderr.read().decode('utf-8').strip()\n                     if match == ErrorMatch.PARTIAL_REGEX:\n                         if re.search(expected_msg, stderr, flags=re.MULTILINE) is None:\n-                            raise AssertionError('Expected message \"{}\" does not partially match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n+                            self._raise_assertion_error(\n+                                'Expected message \"{}\" does not partially match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n                     elif match == ErrorMatch.FULL_REGEX:\n                         if re.fullmatch(expected_msg, stderr) is None:\n-                            raise AssertionError('Expected message \"{}\" does not fully match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n+                            self._raise_assertion_error(\n+                                'Expected message \"{}\" does not fully match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n                     elif match == ErrorMatch.FULL_TEXT:\n                         if expected_msg != stderr:\n-                            raise AssertionError('Expected message \"{}\" does not fully match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n+                            self._raise_assertion_error(\n+                                'Expected message \"{}\" does not fully match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n             else:\n                 if expected_msg is None:\n                     assert_msg = \"bitcoind should have exited with an error\"\n                 else:\n                     assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n-                raise AssertionError(assert_msg)\n+                self._raise_assertion_error(assert_msg)\n \n     def node_encrypt_wallet(self, passphrase):\n         \"\"\"\"Encrypts the wallet.\n@@ -272,7 +283,7 @@ def p2p(self):\n \n         Convenience property - most tests only use a single p2p connection to each\n         node, so this saves having to write node.p2ps[0] many times.\"\"\"\n-        assert self.p2ps, \"No p2p connection\"\n+        assert self.p2ps, self._node_msg(\"No p2p connection\")\n         return self.p2ps[0]\n \n     def disconnect_p2ps(self):"
      }
    ]
  }
]