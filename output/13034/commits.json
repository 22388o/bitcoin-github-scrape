[
  {
    "sha": "c0e00ee71cf4c440aad6863ea7039ac8505508a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGUwMGVlNzFjZjRjNDQwYWFkNjg2M2VhNzAzOWFjODUwNTUwOGE3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-19T23:15:48Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-05-02T11:01:24Z"
      },
      "message": "wallet: Introduce WalletManager",
      "tree": {
        "sha": "8794afc3a8cda9ac5f501c1b549125d0c51419d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8794afc3a8cda9ac5f501c1b549125d0c51419d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0e00ee71cf4c440aad6863ea7039ac8505508a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0e00ee71cf4c440aad6863ea7039ac8505508a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0e00ee71cf4c440aad6863ea7039ac8505508a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0e00ee71cf4c440aad6863ea7039ac8505508a7/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bc980b1f65f3739bb9667d58abab1137c0f942a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc980b1f65f3739bb9667d58abab1137c0f942a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bc980b1f65f3739bb9667d58abab1137c0f942a"
      }
    ],
    "stats": {
      "total": 204,
      "additions": 132,
      "deletions": 72
    },
    "files": [
      {
        "sha": "b66539fe2a98215162599193bdcb8578f6db3412",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -176,6 +176,7 @@ BITCOIN_CORE_H = \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n+  wallet/walletmanager.h \\\n   wallet/walletutil.h \\\n   wallet/coinselection.h \\\n   warnings.h \\\n@@ -259,6 +260,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\\n   wallet/walletdb.cpp \\\n+  wallet/walletmanager.cpp \\\n   wallet/walletutil.cpp \\\n   wallet/coinselection.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "87928b5f94a62925257c07c4f0d872ee9f0329f3",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -34,6 +34,7 @@\n #ifdef ENABLE_WALLET\n #include <wallet/fees.h>\n #include <wallet/wallet.h>\n+#include <wallet/walletmanager.h>\n #define CHECK_WALLET(x) x\n #else\n #define CHECK_WALLET(x) throw std::logic_error(\"Wallet function called in non-wallet build.\")\n@@ -222,7 +223,7 @@ class NodeImpl : public Node\n     {\n #ifdef ENABLE_WALLET\n         std::vector<std::unique_ptr<Wallet>> wallets;\n-        for (CWallet* wallet : GetWallets()) {\n+        for (CWallet* wallet : g_wallet_manager.GetWallets()) {\n             wallets.emplace_back(MakeWallet(*wallet));\n         }\n         return wallets;"
      },
      {
        "sha": "27d4ee5c7dc89c9d71b80300e0bfbad23b5ea42d",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -11,6 +11,7 @@\n #include <qt/platformstyle.h>\n #include <qt/qvalidatedlineedit.h>\n #include <qt/walletmodel.h>\n+#include <wallet/walletmanager.h>\n \n #include <key.h>\n #include <pubkey.h>\n@@ -103,9 +104,9 @@ void TestAddAddressesToSendBook()\n     std::unique_ptr<const PlatformStyle> platformStyle(PlatformStyle::instantiate(\"other\"));\n     auto node = interfaces::MakeNode();\n     OptionsModel optionsModel(*node);\n-    AddWallet(&wallet);\n+    g_wallet_manager.AddWallet(&wallet);\n     WalletModel walletModel(std::move(node->getWallets()[0]), *node, platformStyle.get(), &optionsModel);\n-    RemoveWallet(&wallet);\n+    g_wallet_manager.RemoveWallet(&wallet);\n     EditAddressDialog editAddressDialog(EditAddressDialog::NewSendingAddress);\n     editAddressDialog.setModel(walletModel.getAddressTableModel());\n "
      },
      {
        "sha": "6b94b4618bb433cbc1f439605693c9cb35e237e6",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -16,6 +16,7 @@\n #include <test/test_bitcoin.h>\n #include <validation.h>\n #include <wallet/wallet.h>\n+#include <wallet/walletmanager.h>\n #include <qt/overviewpage.h>\n #include <qt/receivecoinsdialog.h>\n #include <qt/recentrequeststablemodel.h>\n@@ -166,9 +167,9 @@ void TestGUI()\n     TransactionView transactionView(platformStyle.get());\n     auto node = interfaces::MakeNode();\n     OptionsModel optionsModel(*node);\n-    AddWallet(&wallet);\n+    g_wallet_manager.AddWallet(&wallet);\n     WalletModel walletModel(std::move(node->getWallets().back()), *node, platformStyle.get(), &optionsModel);\n-    RemoveWallet(&wallet);\n+    g_wallet_manager.RemoveWallet(&wallet);\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);\n "
      },
      {
        "sha": "d3f58c38fe3236518ee5d28cd2180752cc18faeb",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -23,6 +23,7 @@\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n+#include <wallet/walletmanager.h>\n #endif\n #include <warnings.h>\n \n@@ -69,7 +70,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     {\n \n #ifdef ENABLE_WALLET\n-        if (HasWallets() && IsDeprecatedRPCEnabled(\"validateaddress\")) {\n+        if (g_wallet_manager.HasWallets() && IsDeprecatedRPCEnabled(\"validateaddress\")) {\n             ret.pushKVs(getaddressinfo(request));\n         }\n #endif"
      },
      {
        "sha": "033b4f2aaf9759db7344ec9f06c73242cd09eda7",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -12,6 +12,7 @@\n #include <walletinitinterface.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n+#include <wallet/walletmanager.h>\n #include <wallet/walletutil.h>\n \n class WalletInit : public WalletInitInterface {\n@@ -263,37 +264,37 @@ bool WalletInit::Open() const\n         if (!pwallet) {\n             return false;\n         }\n-        AddWallet(pwallet);\n+        g_wallet_manager.AddWallet(pwallet);\n     }\n \n     return true;\n }\n \n void WalletInit::Start(CScheduler& scheduler) const\n {\n-    for (CWallet* pwallet : GetWallets()) {\n+    for (CWallet* pwallet : g_wallet_manager.GetWallets()) {\n         pwallet->postInitProcess(scheduler);\n     }\n }\n \n void WalletInit::Flush() const\n {\n-    for (CWallet* pwallet : GetWallets()) {\n+    for (CWallet* pwallet : g_wallet_manager.GetWallets()) {\n         pwallet->Flush(false);\n     }\n }\n \n void WalletInit::Stop() const\n {\n-    for (CWallet* pwallet : GetWallets()) {\n+    for (CWallet* pwallet : g_wallet_manager.GetWallets()) {\n         pwallet->Flush(true);\n     }\n }\n \n void WalletInit::Close() const\n {\n-    for (CWallet* pwallet : GetWallets()) {\n-        RemoveWallet(pwallet);\n+    for (CWallet* pwallet : g_wallet_manager.GetWallets()) {\n+        g_wallet_manager.RemoveWallet(pwallet);\n         delete pwallet;\n     }\n }"
      },
      {
        "sha": "be258964d68572c09b056001e11e64becfaee0a3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -28,6 +28,7 @@\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n+#include <wallet/walletmanager.h>\n #include <wallet/walletutil.h>\n \n #include <init.h>  // For StartShutdown\n@@ -45,12 +46,12 @@ CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n     if (request.URI.substr(0, WALLET_ENDPOINT_BASE.size()) == WALLET_ENDPOINT_BASE) {\n         // wallet endpoint was used\n         std::string requestedWallet = urlDecode(request.URI.substr(WALLET_ENDPOINT_BASE.size()));\n-        CWallet* pwallet = GetWallet(requestedWallet);\n+        CWallet* pwallet = g_wallet_manager.GetWallet(requestedWallet);\n         if (!pwallet) throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Requested wallet does not exist or is not loaded\");\n         return pwallet;\n     }\n \n-    std::vector<CWallet*> wallets = GetWallets();\n+    std::vector<CWallet*> wallets = g_wallet_manager.GetWallets();\n     return wallets.size() == 1 || (request.fHelp && wallets.size() > 0) ? wallets[0] : nullptr;\n }\n \n@@ -65,7 +66,7 @@ bool EnsureWalletIsAvailable(CWallet * const pwallet, bool avoidException)\n {\n     if (pwallet) return true;\n     if (avoidException) return false;\n-    if (!HasWallets()) {\n+    if (!g_wallet_manager.HasWallets()) {\n         // Note: It isn't currently possible to trigger this error because\n         // wallet RPC methods aren't registered unless a wallet is loaded. But\n         // this error is being kept as a precaution, because it's possible in\n@@ -2984,7 +2985,7 @@ UniValue listwallets(const JSONRPCRequest& request)\n \n     UniValue obj(UniValue::VARR);\n \n-    for (CWallet* pwallet : GetWallets()) {\n+    for (CWallet* pwallet : g_wallet_manager.GetWallets()) {\n         if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n             return NullUniValue;\n         }"
      },
      {
        "sha": "d68e9dc64c633068615150ae59b212e3cb1fb829",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -15,6 +15,7 @@\n #include <test/test_bitcoin.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>\n+#include <wallet/walletmanager.h>\n #include <wallet/test/wallet_test_fixture.h>\n \n #include <boost/test/unit_test.hpp>\n@@ -74,7 +75,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // after.\n     {\n         CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n-        AddWallet(&wallet);\n+        g_wallet_manager.AddWallet(&wallet);\n         UniValue keys;\n         keys.setArray();\n         UniValue key;\n@@ -105,7 +106,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n                       \"downloading and rescanning the relevant blocks (see -reindex and -rescan \"\n                       \"options).\\\"}},{\\\"success\\\":true}]\",\n                               0, oldTip->GetBlockTimeMax(), TIMESTAMP_WINDOW));\n-        RemoveWallet(&wallet);\n+        g_wallet_manager.RemoveWallet(&wallet);\n     }\n }\n \n@@ -140,9 +141,9 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back((pathTemp / \"wallet.backup\").string());\n-        AddWallet(&wallet);\n+        g_wallet_manager.AddWallet(&wallet);\n         ::dumpwallet(request);\n-        RemoveWallet(&wallet);\n+        g_wallet_manager.RemoveWallet(&wallet);\n     }\n \n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n@@ -153,9 +154,9 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back((pathTemp / \"wallet.backup\").string());\n-        AddWallet(&wallet);\n+        g_wallet_manager.AddWallet(&wallet);\n         ::importwallet(request);\n-        RemoveWallet(&wallet);\n+        g_wallet_manager.RemoveWallet(&wallet);\n \n         LOCK(wallet.cs_wallet);\n         BOOST_CHECK_EQUAL(wallet.mapWallet.size(), 3U);"
      },
      {
        "sha": "9738b77bc0e27e0fd528d730c2c38afd6f1572dd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 44,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -28,55 +28,11 @@\n #include <utilmoneystr.h>\n #include <wallet/fees.h>\n \n-#include <algorithm>\n #include <assert.h>\n #include <future>\n \n #include <boost/algorithm/string/replace.hpp>\n \n-static CCriticalSection cs_wallets;\n-static std::vector<CWallet*> vpwallets GUARDED_BY(cs_wallets);\n-\n-bool AddWallet(CWallet* wallet)\n-{\n-    LOCK(cs_wallets);\n-    assert(wallet);\n-    std::vector<CWallet*>::const_iterator i = std::find(vpwallets.begin(), vpwallets.end(), wallet);\n-    if (i != vpwallets.end()) return false;\n-    vpwallets.push_back(wallet);\n-    return true;\n-}\n-\n-bool RemoveWallet(CWallet* wallet)\n-{\n-    LOCK(cs_wallets);\n-    assert(wallet);\n-    std::vector<CWallet*>::iterator i = std::find(vpwallets.begin(), vpwallets.end(), wallet);\n-    if (i == vpwallets.end()) return false;\n-    vpwallets.erase(i);\n-    return true;\n-}\n-\n-bool HasWallets()\n-{\n-    LOCK(cs_wallets);\n-    return !vpwallets.empty();\n-}\n-\n-std::vector<CWallet*> GetWallets()\n-{\n-    LOCK(cs_wallets);\n-    return vpwallets;\n-}\n-\n-CWallet* GetWallet(const std::string& name)\n-{\n-    LOCK(cs_wallets);\n-    for (CWallet* wallet : vpwallets) {\n-        if (wallet->GetName() == name) return wallet;\n-    }\n-    return nullptr;\n-}\n \n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n "
      },
      {
        "sha": "66f16d3a3a41387bfaa117563accc8d5ce058b00",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -32,11 +32,6 @@\n #include <utility>\n #include <vector>\n \n-bool AddWallet(CWallet* wallet);\n-bool RemoveWallet(CWallet* wallet);\n-bool HasWallets();\n-std::vector<CWallet*> GetWallets();\n-CWallet* GetWallet(const std::string& name);\n \n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;"
      },
      {
        "sha": "286711b50219fa60d775889cc5a559913124104d",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -15,6 +15,7 @@\n #include <util.h>\n #include <utiltime.h>\n #include <wallet/wallet.h>\n+#include <wallet/walletmanager.h>\n \n #include <atomic>\n \n@@ -756,7 +757,7 @@ void MaybeCompactWalletDB()\n         return;\n     }\n \n-    for (CWallet* pwallet : GetWallets()) {\n+    for (CWallet* pwallet : g_wallet_manager.GetWallets()) {\n         WalletDatabase& dbh = pwallet->GetDBHandle();\n \n         unsigned int nUpdateCounter = dbh.nUpdateCounter;"
      },
      {
        "sha": "66d77843002338be208c62159af278253754e252",
        "filename": "src/wallet/walletmanager.cpp",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/walletmanager.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/walletmanager.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletmanager.cpp?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/walletmanager.h>\n+\n+#include <wallet/wallet.h>\n+\n+#include <algorithm>\n+\n+\n+WalletManager g_wallet_manager;\n+\n+bool WalletManager::AddWallet(CWallet* wallet)\n+{\n+    LOCK(m_cs);\n+    assert(wallet);\n+    std::vector<CWallet*>::const_iterator i = std::find(m_wallets.begin(), m_wallets.end(), wallet);\n+    if (i != m_wallets.end()) return false;\n+    m_wallets.push_back(wallet);\n+    return true;\n+}\n+\n+bool WalletManager::RemoveWallet(CWallet* wallet)\n+{\n+    LOCK(m_cs);\n+    assert(wallet);\n+    std::vector<CWallet*>::iterator i = std::find(m_wallets.begin(), m_wallets.end(), wallet);\n+    if (i == m_wallets.end()) return false;\n+    m_wallets.erase(i);\n+    return true;\n+}\n+\n+bool WalletManager::HasWallets() const\n+{\n+    LOCK(m_cs);\n+    return !m_wallets.empty();\n+}\n+\n+std::vector<CWallet*> WalletManager::GetWallets() const\n+{\n+    LOCK(m_cs);\n+    return m_wallets;\n+}\n+\n+CWallet* WalletManager::GetWallet(const std::string& name) const\n+{\n+    LOCK(m_cs);\n+    for (CWallet* wallet : m_wallets) {\n+        if (wallet->GetName() == name) return wallet;\n+    }\n+    return nullptr;\n+}"
      },
      {
        "sha": "b4c0610eac2dda13302c77ad20bcb63ef9acbc3c",
        "filename": "src/wallet/walletmanager.h",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/walletmanager.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e00ee71cf4c440aad6863ea7039ac8505508a7/src/wallet/walletmanager.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletmanager.h?ref=c0e00ee71cf4c440aad6863ea7039ac8505508a7",
        "patch": "@@ -0,0 +1,46 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_WALLETMANAGER_H\n+#define BITCOIN_WALLET_WALLETMANAGER_H\n+\n+#include <sync.h>\n+\n+#include <string>\n+#include <vector>\n+\n+class CWallet;\n+\n+//! A thread safe wallet manager.\n+class WalletManager final\n+{\n+    mutable CCriticalSection m_cs;\n+    std::vector<CWallet*> m_wallets GUARDED_BY(m_cs);\n+\n+public:\n+    WalletManager() = default;\n+    WalletManager(const WalletManager&) = delete;\n+    WalletManager& operator=(const WalletManager&) = delete;\n+    ~WalletManager() = default;\n+\n+    //! Add wallet to the registered wallets.\n+    bool AddWallet(CWallet* wallet);\n+\n+    //! Remove wallet from the registered wallets.\n+    bool RemoveWallet(CWallet* wallet);\n+\n+    //! Check if there are registered wallets.\n+    bool HasWallets() const;\n+\n+    //! Retrieve all registered wallets.\n+    std::vector<CWallet*> GetWallets() const;\n+\n+    //! Retrieve wallet by name or nullptr if not found.\n+    CWallet* GetWallet(const std::string& name) const;\n+};\n+\n+//! Global wallet manager.\n+extern WalletManager g_wallet_manager;\n+\n+#endif // BITCOIN_WALLET_WALLETMANAGER_H"
      }
    ]
  }
]