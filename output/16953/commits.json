[
  {
    "sha": "43e7d576f590e90ad7d1ba3d550671a7958f1188",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0M2U3ZDU3NmY1OTBlOTBhZDdkMWJhM2Q1NTA2NzFhNzk1OGYxMTg4",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2019-09-24T12:42:18Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2019-09-26T17:04:58Z"
      },
      "message": "doc: Improve test READMEs",
      "tree": {
        "sha": "fd463a532082eff65c9ef1ef3d0bbcc223755e3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd463a532082eff65c9ef1ef3d0bbcc223755e3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43e7d576f590e90ad7d1ba3d550671a7958f1188",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43e7d576f590e90ad7d1ba3d550671a7958f1188",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/43e7d576f590e90ad7d1ba3d550671a7958f1188",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43e7d576f590e90ad7d1ba3d550671a7958f1188/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ce829888861a6dc6a29da669584ada961d965fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ce829888861a6dc6a29da669584ada961d965fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ce829888861a6dc6a29da669584ada961d965fa"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 50,
      "deletions": 18
    },
    "files": [
      {
        "sha": "96dcb072bc9d533a0df289d6e49d2c2662893a46",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 29,
        "deletions": 13,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43e7d576f590e90ad7d1ba3d550671a7958f1188/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43e7d576f590e90ad7d1ba3d550671a7958f1188/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=43e7d576f590e90ad7d1ba3d550671a7958f1188",
        "patch": "@@ -1,3 +1,15 @@\n+# Unit tests\n+\n+The sources in this directory are unit test cases. Boost includes a\n+unit testing framework, and since Bitcoin Core already uses Boost, it makes\n+sense to simply use this framework rather than require developers to\n+configure some other framework (we want as few impediments to creating\n+unit tests as possible).\n+\n+The build system is set up to compile an executable called `test_bitcoin`\n+that runs all of the unit tests. The main source file is called\n+`setup_common.cpp`.\n+\n ### Compiling/running unit tests\n \n Unit tests will be automatically compiled if dependencies were met in `./configure`\n@@ -12,7 +24,7 @@ to run the bitcoind tests.\n \n To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n .cpp files in the `test/` directory or add new .cpp files that\n-implement new BOOST_AUTO_TEST_SUITE sections.\n+implement new `BOOST_AUTO_TEST_SUITE` sections.\n \n To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n \n@@ -32,20 +44,24 @@ example, to run just the getarg_tests verbosely:\n \n Run `test_bitcoin --help` for the full list.\n \n-### Note on adding test cases\n-\n-The sources in this directory are unit test cases.  Boost includes a\n-unit testing framework, and since bitcoin already uses boost, it makes\n-sense to simply use this framework rather than require developers to\n-configure some other framework (we want as few impediments to creating\n-unit tests as possible).\n+### Adding test cases\n \n-The build system is setup to compile an executable called `test_bitcoin`\n-that runs all of the unit tests.  The main source file is called\n-setup_common.cpp. To add a new unit test file to our test suite you need\n+To add a new unit test file to our test suite you need\n to add the file to `src/Makefile.test.include`. The pattern is to create\n one test file for each class or source file for which you want to create\n-unit tests.  The file naming convention is `<source_filename>_tests.cpp`\n+unit tests. The file naming convention is `<source_filename>_tests.cpp`\n and such files should wrap their tests in a test suite\n called `<source_filename>_tests`. For an example of this pattern,\n-examine `uint256_tests.cpp`.\n+see `uint256_tests.cpp`.\n+\n+### Logging and debugging in unit tests\n+\n+To write to logs from unit tests you need to use specific message methods\n+provided by Boost. The simplest is `BOOST_TEST_MESSAGE`.\n+\n+For debugging you can launch the test_bitcoin executable with `gdb`or `lldb` and\n+start debugging, just like you would with bitcoind:\n+\n+```bash\n+gdb src/test/test_bitcoin\n+```"
      },
      {
        "sha": "26fd525064e62bb7898bd525e9cf7971b3216aad",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 21,
        "deletions": 5,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43e7d576f590e90ad7d1ba3d550671a7958f1188/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43e7d576f590e90ad7d1ba3d550671a7958f1188/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=43e7d576f590e90ad7d1ba3d550671a7958f1188",
        "patch": "@@ -136,8 +136,10 @@ killall bitcoind\n \n ##### Test logging\n \n-The tests contain logging at different levels (debug, info, warning, etc). By\n-default:\n+The tests contain logging at five different levels (DEBUG, INFO, WARNING, ERROR\n+and CRITICAL). From within your functional tests you can log to these different\n+levels using the logger included in the test_framework, e.g.\n+`self.log.debug(object)`. By default:\n \n - when run through the test_runner harness, *all* logs are written to\n   `test_framework.log` and no logs are output to the console.\n@@ -182,18 +184,32 @@ call methods that interact with the bitcoind nodes-under-test.\n If further introspection of the bitcoind instances themselves becomes\n necessary, this can be accomplished by first setting a pdb breakpoint\n at an appropriate location, running the test to that point, then using\n-`gdb` to attach to the process and debug.\n+`gdb` (or `lldb` on macOS) to attach to the process and debug.\n \n-For instance, to attach to `self.node[1]` during a run:\n+For instance, to attach to `self.node[1]` during a run you can get\n+the pid of the node within `pdb`.\n+\n+```\n+(pdb) self.node[1].process.pid\n+```\n+\n+Alternatively, you can find the pid by inspecting the temp folder for the specific test\n+you are running. The path to that folder is printed at the beginning of every\n+test run:\n \n ```bash\n 2017-06-27 14:13:56.686000 TestFramework (INFO): Initializing test directory /tmp/user/1000/testo9vsdjo3\n ```\n \n-use the directory path to get the pid from the pid file:\n+Use the path to find the pid file in the temp folder:\n \n ```bash\n cat /tmp/user/1000/testo9vsdjo3/node1/regtest/bitcoind.pid\n+```\n+\n+Then you can use the pid to start `gdb`:\n+\n+```bash\n gdb /home/example/bitcoind <pid>\n ```\n "
      }
    ]
  }
]