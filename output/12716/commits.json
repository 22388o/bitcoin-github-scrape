[
  {
    "sha": "4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDliNDI1NmQ4OWQxZjdjNmIzZTQ5MzhhYjJlODljZGUyOTZlOGU4",
    "commit": {
      "author": {
        "name": "Dimitris Apostolou",
        "email": "dimitris.apostolou@icloud.com",
        "date": "2018-03-18T14:26:45Z"
      },
      "committer": {
        "name": "Dimitris Apostolou",
        "email": "rex@MacBook-Pro-2011.local",
        "date": "2018-03-21T06:34:44Z"
      },
      "message": "Fix typos",
      "tree": {
        "sha": "1fc1e7662fcaeb8a9503eb80fc4038eee2da5b55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fc1e7662fcaeb8a9503eb80fc4038eee2da5b55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/comments",
    "author": {
      "login": "rex4539",
      "id": 227442,
      "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rex4539",
      "html_url": "https://github.com/rex4539",
      "followers_url": "https://api.github.com/users/rex4539/followers",
      "following_url": "https://api.github.com/users/rex4539/following{/other_user}",
      "gists_url": "https://api.github.com/users/rex4539/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rex4539/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
      "organizations_url": "https://api.github.com/users/rex4539/orgs",
      "repos_url": "https://api.github.com/users/rex4539/repos",
      "events_url": "https://api.github.com/users/rex4539/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rex4539/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "00d1680498c5550e7db1f359202d3433a092fafd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00d1680498c5550e7db1f359202d3433a092fafd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00d1680498c5550e7db1f359202d3433a092fafd"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 55,
      "deletions": 55
    },
    "files": [
      {
        "sha": "54b18a49310fc7c3f4be155c2cfc1f1720e2d687",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -209,6 +209,6 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n         entry.pushKV(\"blockhash\", hashBlock.GetHex());\n \n     if (include_hex) {\n-        entry.pushKV(\"hex\", EncodeHexTx(tx, serialize_flags)); // the hex-encoded transaction. used the name \"hex\" to be consistent with the verbose output of \"getrawtransaction\".\n+        entry.pushKV(\"hex\", EncodeHexTx(tx, serialize_flags)); // The hex-encoded transaction. Used the name \"hex\" to be consistent with the verbose output of \"getrawtransaction\".\n     }\n }"
      },
      {
        "sha": "d1de712024ab9158c7dde281a3e1106edd792367",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -224,7 +224,7 @@ class cache\n      *\n      * Instead we treat the 32-bit random number as a Q32 fixed-point number in the range\n      *  [0,1) and simply multiply it by the size.  Then we just shift the result down by\n-     *  32-bits to get our bucket number.  The results has non-uniformity the same as a\n+     *  32-bits to get our bucket number.  The result has non-uniformity the same as a\n      *  mod, but it is much faster to compute. More about this technique can be found at\n      *  http://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n      *"
      },
      {
        "sha": "975a1d10a00e52fab75231ef20ead389b2101506",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -1954,7 +1954,7 @@ void CConnman::ThreadOpenAddedConnections()\n         for (const AddedNodeInfo& info : vInfo) {\n             if (!info.fConnected) {\n                 if (!grant.TryAcquire()) {\n-                    // If we've used up our semaphore and need a new one, lets not wait here since while we are waiting\n+                    // If we've used up our semaphore and need a new one, let's not wait here since while we are waiting\n                     // the addednodeinfo state might change.\n                     break;\n                 }"
      },
      {
        "sha": "61e6ae74482ced9c04984703d31afc9894db3ed6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -339,7 +339,7 @@ bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex*\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n-    // Short-circuit most stuff in case its from the same node\n+    // Short-circuit most stuff in case it is from the same node\n     std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end() && itInFlight->second.first == nodeid) {\n         if (pit) {\n@@ -518,7 +518,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n         }\n \n         // Iterate over those blocks in vToFetch (in forward direction), adding the ones that\n-        // are not yet downloaded and not in flight to vBlocks. In the mean time, update\n+        // are not yet downloaded and not in flight to vBlocks. In the meantime, update\n         // pindexLastCommonBlock as long as all ancestors are already downloaded, or if it's\n         // already part of our chain (and therefore don't need it even if pruned).\n         for (const CBlockIndex* pindex : vToFetch) {"
      },
      {
        "sha": "a45e9f85c18c3eb8b7c01f4585f3297a541e5515",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -206,7 +206,7 @@ void CoinControlDialog::showMenu(const QPoint &point)\n         contextMenuItem = item;\n \n         // disable some items (like Copy Transaction ID, lock, unlock) for tree roots in context menu\n-        if (item->text(COLUMN_TXHASH).length() == 64) // transaction hash is 64 characters (this means its a child node, so its not a parent node in tree mode)\n+        if (item->text(COLUMN_TXHASH).length() == 64) // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)\n         {\n             copyTransactionHashAction->setEnabled(true);\n             if (model->isLockedCoin(uint256S(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt()))\n@@ -374,7 +374,7 @@ void CoinControlDialog::radioListMode(bool checked)\n // checkbox clicked by user\n void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)\n {\n-    if (column == COLUMN_CHECKBOX && item->text(COLUMN_TXHASH).length() == 64) // transaction hash is 64 characters (this means its a child node, so its not a parent node in tree mode)\n+    if (column == COLUMN_CHECKBOX && item->text(COLUMN_TXHASH).length() == 64) // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)\n     {\n         COutPoint outpt(uint256S(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt());\n "
      },
      {
        "sha": "4b856986dafe0287f105468b0187412581fb9f15",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -141,7 +141,7 @@ namespace GUIUtil\n      * Makes a QTableView last column feel as if it was being resized from its left border.\n      * Also makes sure the column widths are never larger than the table's viewport.\n      * In Qt, all columns are resizable from the right, but it's not intuitive resizing the last column from the right.\n-     * Usually our second to last columns behave as if stretched, and when on strech mode, columns aren't resizable\n+     * Usually our second to last columns behave as if stretched, and when on stretch mode, columns aren't resizable\n      * interactively or programmatically.\n      *\n      * This helper object takes care of this issue."
      },
      {
        "sha": "249418213f67777343ad416d543979c572946703",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -81,7 +81,7 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n     // keep a vector of samples of verification progress at height\n     blockProcessTime.push_front(qMakePair(currentDate.toMSecsSinceEpoch(), nVerificationProgress));\n \n-    // show progress speed if we have more then one sample\n+    // show progress speed if we have more than one sample\n     if (blockProcessTime.size() >= 2) {\n         double progressDelta = 0;\n         double progressPerHour = 0;"
      },
      {
        "sha": "66e9dd0465b50e6afc959b08872a3ee3e93e1b8e",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -91,7 +91,7 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n \n     pixPaint.setFont(QFont(font, 15*fontFactor));\n \n-    // if the version string is to long, reduce size\n+    // if the version string is too long, reduce size\n     fm = pixPaint.fontMetrics();\n     int versionTextWidth  = fm.width(versionText);\n     if(versionTextWidth > titleTextWidth+paddingRight-10) {"
      },
      {
        "sha": "b17bc3c91a56ba85fa68afed255113c50b776784",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -698,7 +698,7 @@ bool WalletModel::bumpFee(uint256 hash)\n     confirmationDialog.exec();\n     QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n \n-    // cancel sign&broadcast if users doesn't want to bump the fee\n+    // cancel sign&broadcast if user doesn't want to bump the fee\n     if (retval != QMessageBox::Yes) {\n         return false;\n     }"
      },
      {
        "sha": "5fe8f2fd0478d80bd816b8ff27d3642509f66427",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -32,7 +32,7 @@ void RandAddSeedSleep();\n \n /**\n  * Function to gather random data from multiple sources, failing whenever any\n- * of those source fail to provide a result.\n+ * of those sources fail to provide a result.\n  */\n void GetStrongRandBytes(unsigned char* buf, int num);\n "
      },
      {
        "sha": "ffaba393c0adcd86fcbb7d717a30328e85cc5213",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -110,7 +110,7 @@ bool static IsValidSignatureEncoding(const std::vector<unsigned char> &sig) {\n     //   excluding the sighash byte.\n     // * R-length: 1-byte length descriptor of the R value that follows.\n     // * R: arbitrary-length big-endian encoded R value. It must use the shortest\n-    //   possible encoding for a positive integers (which means no null bytes at\n+    //   possible encoding for a positive integer (which means no null bytes at\n     //   the start, except a single one when the next byte has its highest bit set).\n     // * S-length: 1-byte length descriptor of the S value that follows.\n     // * S: arbitrary-length big-endian encoded S value. The same rules apply."
      },
      {
        "sha": "1401188a2b969c456b13a6645a129946c5bf21bd",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -184,7 +184,7 @@ void Win32LockedPageAllocator::FreeLocked(void* addr, size_t len)\n \n size_t Win32LockedPageAllocator::GetLimit()\n {\n-    // TODO is there a limit on windows, how to get it?\n+    // TODO is there a limit on Windows, how to get it?\n     return std::numeric_limits<size_t>::max();\n }\n #endif"
      },
      {
        "sha": "6b188a06b42760f12e9a3f85611fffd75f50a520",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -491,7 +491,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     //  this test could be a security issue.\n     BOOST_CHECK(info1.GetNewBucket(nKey1) != info1.GetNewBucket(nKey2));\n \n-    // Test: Ports should not effect bucket placement in the addr\n+    // Test: Ports should not affect bucket placement in the addr\n     CAddrInfo info2 = CAddrInfo(addr2, source1);\n     BOOST_CHECK(info1.GetKey() != info2.GetKey());\n     BOOST_CHECK_EQUAL(info1.GetNewBucket(nKey1), info2.GetNewBucket(nKey1));"
      },
      {
        "sha": "de7d8f7b90a664372e5149ce2ffb866150f73ab3",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -313,7 +313,7 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n                     auto utxod = FindRandomFrom(coinbase_coins);\n                     // Reuse the exact same coinbase\n                     tx = std::get<0>(utxod->second);\n-                    // shouldn't be available for reconnection if its been duplicated\n+                    // shouldn't be available for reconnection if it's been duplicated\n                     disconnected_coins.erase(utxod->first);\n \n                     duplicate_coins.insert(utxod->first);"
      },
      {
        "sha": "ccd5caacd5c466960b671416871a453eed2564f5",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -163,7 +163,7 @@ void test_cache_erase(size_t megabytes)\n     for (uint32_t i = (n_insert / 2); i < n_insert; ++i)\n         set.insert(hashes_insert_copy[i]);\n \n-    /** elements that we marked erased but that are still there */\n+    /** elements that we marked as erased but are still there */\n     size_t count_erased_but_contained = 0;\n     /** elements that we did not erase but are older */\n     size_t count_stale = 0;\n@@ -303,7 +303,7 @@ void test_cache_generations()\n     local_rand_ctx = FastRandomContext(true);\n \n     // block_activity models a chunk of network activity. n_insert elements are\n-    // adde to the cache. The first and last n/4 are stored for removal later\n+    // added to the cache. The first and last n/4 are stored for removal later\n     // and the middle n/2 are not stored. This models a network which uses half\n     // the signatures of recently (since the last block) added transactions\n     // immediately and never uses the other half."
      },
      {
        "sha": "6694401a29c74b5ebc99e7bb389277c4dd56080e",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -237,7 +237,7 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n }\n \n struct StringContentsSerializer {\n-    // Used to make two serialized objects the same while letting them have a different lengths\n+    // Used to make two serialized objects the same while letting them have different lengths\n     // This is a terrible idea\n     std::string str;\n     StringContentsSerializer() {}"
      },
      {
        "sha": "19cd3b0963a3d0ff0ec93f78da02eca2d68e6929",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -523,7 +523,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(tx6.GetHash(), entry.Fee(1100LL).FromTx(tx6));\n     pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7));\n \n-    // we only require this remove, at max, 2 txn, because its not clear what we're really optimizing for aside from that\n+    // we only require this to remove, at max, 2 txn, because it's not clear what we're really optimizing for aside from that\n     pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n     BOOST_CHECK(pool.exists(tx4.GetHash()));\n     BOOST_CHECK(pool.exists(tx6.GetHash()));"
      },
      {
        "sha": "1aa54189b6e71b43baf9b56caba276a7f974c0a7",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -35,7 +35,7 @@ ToMemPool(CMutableTransaction& tx)\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n {\n-    // Make sure skipping validation of transctions that were\n+    // Make sure skipping validation of transactions that were\n     // validated going into the memory pool does not allow\n     // double-spends in blocks to pass validation when they should not.\n "
      },
      {
        "sha": "14b7cd30262fd0a63376329be7a5e7546e7aa19e",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -155,7 +155,7 @@ namespace tfm = tinyformat;\n #endif\n \n #ifdef __APPLE__\n-// Workaround OSX linker warning: xcode uses different default symbol\n+// Workaround OSX linker warning: Xcode uses different default symbol\n // visibilities for static libs vs executables (see issue #25)\n #   define TINYFORMAT_HIDDEN __attribute__((visibility(\"hidden\")))\n #else\n@@ -592,7 +592,7 @@ inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)\n // Formatting options which can't be natively represented using the ostream\n // state are returned in spacePadPositive (for space padded positive numbers)\n // and ntrunc (for truncating conversions).  argIndex is incremented if\n-// necessary to pull out variable width and precision .  The function returns a\n+// necessary to pull out variable width and precision.  The function returns a\n // pointer to the character after the end of the current format spec.\n inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositive,\n                                          int& ntrunc, const char* fmtStart,"
      },
      {
        "sha": "08a34210159bd9046bccde620e6f5ed774564936",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -689,7 +689,7 @@ class CTxMemPool\n };\n \n /** \n- * CCoinsView that brings transactions from a memorypool into view.\n+ * CCoinsView that brings transactions from a mempool into view.\n  * It does not check for spendings by memory pool transactions.\n  * Instead, it provides access to all Coins which are either unspent in the\n  * base CCoinsView, or are outputs from any mempool transaction!"
      },
      {
        "sha": "673a1f00effd42b9f9961bb61821e2c9b5a788f0",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -15,7 +15,7 @@\n  *\n  *  Contains the prevout's CTxOut being spent, and its metadata as well\n  *  (coinbase or not, height). The serialization contains a dummy value of\n- *  zero. This is be compatible with older versions which expect to see\n+ *  zero. This is compatible with older versions which expect to see\n  *  the transaction version there.\n  */\n class TxInUndoSerializer"
      },
      {
        "sha": "aebd2fd59087359cc10a9ac24836039b6d8847dd",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -136,7 +136,7 @@ template<typename T, typename... Args> static inline void MarkUsed(const T& t, c\n \n // Be conservative when using LogPrintf/error or other things which\n // unconditionally log to debug.log! It should not be the case that an inbound\n-// peer can fill up a users disk with debug.log entries.\n+// peer can fill up a user's disk with debug.log entries.\n \n #ifdef USE_COVERAGE\n #define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)"
      },
      {
        "sha": "614876ea49793716e14e3c01bdb0b9fc2ee1e0f9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -949,7 +949,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         // This transaction should only count for fee estimation if:\n         // - it isn't a BIP 125 replacement transaction (may not be widely supported)\n-        // - it's not being readded during a reorg which bypasses typical mempool fee limits\n+        // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n         // - the node is not behind\n         // - the transaction is not dependent on any other transactions in the mempool\n         bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n@@ -1852,7 +1852,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     // Once BIP34 activated it was not possible to create new duplicate coinbases and thus other than starting\n     // with the 2 existing duplicate coinbase pairs, not possible to create overwriting txs.  But by the\n     // time BIP34 activated, in each of the existing pairs the duplicate coinbase had overwritten the first\n-    // before the first had been spent.  Since those coinbases are sufficiently buried its no longer possible to create further\n+    // before the first had been spent.  Since those coinbases are sufficiently buried it's no longer possible to create further\n     // duplicate transactions descending from the known pairs either.\n     // If we're on the known chain at height greater than where BIP34 activated, we can save the db accesses needed for the BIP30 check.\n "
      },
      {
        "sha": "3dbc01c068a55c89c7a1df0713ef523d13bf8f1e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -2015,7 +2015,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             \"  ],\\n\"\n             \"  \\\"removed\\\": [\\n\"\n             \"    <structure is the same as \\\"transactions\\\" above, only present if include_removed=true>\\n\"\n-            \"    Note: transactions that were readded in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\\n\"\n+            \"    Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\\n\"\n             \"  ],\\n\"\n             \"  \\\"lastblock\\\": \\\"lastblockhash\\\"     (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\\n\"\n             \"}\\n\"\n@@ -3578,7 +3578,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n             else if (pindexStop->nHeight < pindexStart->nHeight) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater then start_height\");\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n     }"
      },
      {
        "sha": "0d21570858921dadd6370b5a6639d9edaf3033f8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -1269,7 +1269,7 @@ void CWallet::BlockUntilSyncedToCurrentChain() {\n         // chainActive.Tip()...\n         // We could also take cs_wallet here, and call m_last_block_processed\n         // protected by cs_wallet instead of cs_main, but as long as we need\n-        // cs_main here anyway, its easier to just call it cs_main-protected.\n+        // cs_main here anyway, it's easier to just call it cs_main-protected.\n         LOCK(cs_main);\n         const CBlockIndex* initialChainTip = chainActive.Tip();\n \n@@ -4186,8 +4186,8 @@ bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a\n     // user could call sendmoney in a loop and hit spurious out of funds errors\n-    // because we think that the transaction they just generated's change is\n-    // unavailable as we're not yet aware its in mempool.\n+    // because we think that this newly generated transaction's change is\n+    // unavailable as we're not yet aware that it is in the mempool.\n     bool ret = ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n                                 nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n     fInMempool |= ret;"
      },
      {
        "sha": "05d1c1bf4ef0fdbe8573f6cd59d6981fa59f7ea4",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -38,7 +38,7 @@ class BaseNode(P2PInterface):\n     def __init__(self):\n         \"\"\"Initialize the P2PInterface\n \n-        Used to inialize custom properties for the Node that aren't\n+        Used to initialize custom properties for the Node that aren't\n         included by default in the base class. Be aware that the P2PInterface\n         base class already stores a counter for each P2P message type and the\n         last received message of each type, which should be sufficient for the"
      },
      {
        "sha": "11c7de2ba04a7be449f733ca9232e89f62858a93",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -6,7 +6,7 @@\n \n * Verify that getdata requests for old blocks (>1week) are dropped\n if uploadtarget has been reached.\n-* Verify that getdata requests for recent blocks are respecteved even\n+* Verify that getdata requests for recent blocks are respected even\n if uploadtarget has been reached.\n * Verify that the upload counters are reset after 24 hours.\n \"\"\""
      },
      {
        "sha": "365ff08d289f4b89553e148a75aa0c4956009fad",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -190,8 +190,8 @@ def reorg_back(self):\n \n         # Verify that we have enough history to reorg back to the fork point\n         # Although this is more than 288 blocks, because this chain was written more recently\n-        # and only its other 299 small and 220 large block are in the block files after it,\n-        # its expected to still be retained\n+        # and only its other 299 small and 220 large blocks are in the block files after it,\n+        # it is expected to still be retained\n         self.nodes[2].getblock(self.nodes[2].getblockhash(self.forkheight))\n \n         first_reorg_height = self.nodes[2].getblockcount()"
      },
      {
        "sha": "c6cb4c54cd4c8c19068c634c15ea7a1544685b9d",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -107,7 +107,7 @@ def run_test(self):\n         #check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n-        #make sure there is no utox in the response because this oupoint has been spent\n+        #make sure there is no utxo in the response because this oupoint has been spent\n         assert_equal(len(json_obj['utxos']), 0)\n \n         #check bitmap"
      },
      {
        "sha": "76e5e02c0126ab6038ea847d7b11cc14731cbe56",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -29,7 +29,7 @@\n     transactions in its mempool. This tests that -persistmempool=0\n     does not overwrite a previously valid mempool stored on disk.\n   - Remove node0 mempool.dat and verify savemempool RPC recreates it\n-    and verify that node1 can load it and has 5 transaction in its\n+    and verify that node1 can load it and has 5 transactions in its\n     mempool.\n   - Verify that savemempool throws when the RPC is called if\n     node1 can't write to disk."
      },
      {
        "sha": "e754dd31ad1f9358d230999e4ee82aeb5de087f5",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -124,7 +124,7 @@ def run_test(self):\n         assert(tx_id not in self.nodes[0].getrawmempool())\n \n         # This is a less than 1000-byte transaction, so just set the fee\n-        # to be the minimum for a 1000 byte transaction and check that it is\n+        # to be the minimum for a 1000-byte transaction and check that it is\n         # accepted.\n         self.nodes[0].prioritisetransaction(txid=tx_id, fee_delta=int(self.relayfee*COIN))\n "
      },
      {
        "sha": "8354505b160c7354d4fc29cf97ea447129e9e353",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -548,7 +548,7 @@ def test_incorrect_blocktxn_response(self, node, test_node, version):\n         # Note that it's possible for bitcoind to be smart enough to know we're\n         # lying, since it could check to see if the shortid matches what we're\n         # sending, and eg disconnect us for misbehavior.  If that behavior\n-        # change were made, we could just modify this test by having a\n+        # change was made, we could just modify this test by having a\n         # different peer provide the block further down, so that we're still\n         # verifying that the block isn't marked bad permanently. This is good\n         # enough for now."
      },
      {
        "sha": "198dcc14901992ea1396760a740e8c246a3f707e",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -7,7 +7,7 @@\n A node should never send anything other than VERSION/VERACK/REJECT until it's\n received a VERACK.\n \n-This test connects to a node and sends it a few messages, trying to intice it\n+This test connects to a node and sends it a few messages, trying to entice it\n into sending us something it shouldn't.\n \n Also test that nodes that send unsupported service bits to bitcoind are disconnected"
      },
      {
        "sha": "301d8c181ad95617e1dc9ece52d7e0137cb14005",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -64,7 +64,7 @@ def run_test(self):\n         blocks = self.nodes[1].generate(292)\n         sync_blocks([self.nodes[0], self.nodes[1]])\n \n-        self.log.info(\"Make sure we can max retrive block at tip-288.\")\n+        self.log.info(\"Make sure we can max retrieve block at tip-288.\")\n         node.send_getdata_for_block(blocks[1])  # last block in valid range\n         node.wait_for_block(int(blocks[1], 16), timeout=3)\n "
      },
      {
        "sha": "915f26eda6dd2029caccdea405d4707a0b34f017",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -1511,7 +1511,7 @@ def test_upgrade_after_activation(self, node_id):\n         # Make sure that this peer thinks segwit has activated.\n         assert(get_bip9_status(self.nodes[node_id], 'segwit')['status'] == \"active\")\n \n-        # Make sure this peers blocks match those of node0.\n+        # Make sure this peer's blocks match those of node0.\n         height = self.nodes[node_id].getblockcount()\n         while height >= 0:\n             block_hash = self.nodes[node_id].getblockhash(height)"
      },
      {
        "sha": "53b2856eb5d247ea4b98e2fdcb6b588b9b35fd8e",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -166,7 +166,7 @@ def run_test(self):\n         self.log.info(\"Unrequested more-work block accepted\")\n \n         # 4c. Now mine 288 more blocks and deliver; all should be processed but\n-        # the last (height-too-high) on node (as long as its not missing any headers)\n+        # the last (height-too-high) on node (as long as it is not missing any headers)\n         tip = block_h3\n         all_blocks = []\n         for i in range(288):"
      },
      {
        "sha": "414da0207238b5d8fe25d4a843e0f367b475a95b",
        "filename": "test/functional/rpc_bind.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/rpc_bind.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/rpc_bind.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_bind.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -55,7 +55,7 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n     def run_test(self):\n         # due to OS-specific network stats queries, this test works only on Linux\n         if not sys.platform.startswith('linux'):\n-            raise SkipTest(\"This test can only be run on linux.\")\n+            raise SkipTest(\"This test can only be run on Linux.\")\n         # find the first non-loopback interface for testing\n         non_loopback_ip = None\n         for name,ip in all_interfaces():"
      },
      {
        "sha": "ee573e01cc2250917ef0bf3f7f9e522704a60597",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -4,7 +4,7 @@\n # Copyright (c) 2010-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Bitcoin test framework primitive and message strcutures\n+\"\"\"Bitcoin test framework primitive and message structures\n \n CBlock, CTransaction, CBlockHeader, CTxIn, CTxOut, etc....:\n     data structures that should map to corresponding structures in"
      },
      {
        "sha": "f1f7d0c0cd8fbdfd955ba19752fc5f7524779d72",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -405,7 +405,7 @@ def sync_with_ping(self, timeout=60):\n \n \n # Keep our own socket map for asyncore, so that we can track disconnects\n-# ourselves (to workaround an issue with closing an asyncore socket when\n+# ourselves (to work around an issue with closing an asyncore socket when\n # using select)\n mininode_socket_map = dict()\n \n@@ -424,7 +424,7 @@ def __init__(self):\n     def run(self):\n         while mininode_socket_map:\n             # We check for whether to disconnect outside of the asyncore\n-            # loop to workaround the behavior of asyncore when using\n+            # loop to work around the behavior of asyncore when using\n             # select\n             disconnected = []\n             for fd, obj in mininode_socket_map.items():"
      },
      {
        "sha": "8233087faa6fa17562c96e6430643bab5072e67f",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -335,7 +335,7 @@ def enable_mocktime(self):\n         blockchain.  If the cached version of the blockchain is used without\n         mocktime then the mempools will not sync due to IBD.\n \n-        For backwared compatibility of the python scripts with previous\n+        For backward compatibility of the python scripts with previous\n         versions of the cache, this helper function sets mocktime to Jan 1,\n         2014 + (201 * 10 * 60)\"\"\"\n         self.mocktime = 1388534400 + (201 * 10 * 60)"
      },
      {
        "sha": "13f5d224c71671e957814ab46e4de1d599562471",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -61,7 +61,7 @@ def __init__(self, i, dirname, rpchost, timewait, binary, stderr, mocktime, cove\n         if extra_conf != None:\n             append_config(dirname, i, extra_conf)\n         # Most callers will just need to add extra args to the standard list below.\n-        # For those callers that need more flexibity, they can just set the args property directly.\n+        # For those callers that need more flexibility, they can just set the args property directly.\n         # Note that common args are set in the config file (see initialize_datadir)\n         self.extra_args = extra_args\n         self.args = [self.binary, \"-datadir=\" + self.datadir, \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]"
      },
      {
        "sha": "d5ef08d782ad0751bd3fa960b388cd00f22c3ba5",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -109,15 +109,15 @@ def run_test(self):\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(self.nodes[0].getbalance(), balance)\n \n-        # But if its received again then it is unabandoned\n+        # But if it is received again then it is unabandoned\n         # And since now in mempool, the change is available\n         # But its child tx remains abandoned\n         self.nodes[0].sendrawtransaction(signed[\"hex\"])\n         newbalance = self.nodes[0].getbalance()\n         assert_equal(newbalance, balance - Decimal(\"20\") + Decimal(\"14.99998\"))\n         balance = newbalance\n \n-        # Send child tx again so its unabandoned\n+        # Send child tx again so it is unabandoned\n         self.nodes[0].sendrawtransaction(signed2[\"hex\"])\n         newbalance = self.nodes[0].getbalance()\n         assert_equal(newbalance, balance - Decimal(\"10\") - Decimal(\"14.99998\") + Decimal(\"24.9996\"))"
      },
      {
        "sha": "934b9444a07c233ffb8e3e1303bd6b9d088b81cf",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -283,7 +283,7 @@ def run_test(self):\n         sync_blocks(self.nodes[0:3])\n         node_2_bal += 2\n \n-        #tx should be added to balance because after restarting the nodes tx should be broadcastet\n+        #tx should be added to balance because after restarting the nodes tx should be broadcast\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n \n         #send a tx with value in a string (PR#6380 +)"
      },
      {
        "sha": "0f2434ff0d0e9889df85c83a34da84741d7defca",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=4d9b4256d89d1f7c6b3e4938ab2e89cde296e8e8",
        "patch": "@@ -211,7 +211,7 @@ def test_double_send(self):\n         1. tx1 is listed in listsinceblock.\n         2. It is included in 'removed' as it was removed, even though it is now\n            present in a different block.\n-        3. It is listed with a confirmations count of 2 (bb3, bb4), not\n+        3. It is listed with a confirmation count of 2 (bb3, bb4), not\n            3 (aa1, aa2, aa3).\n         '''\n "
      }
    ]
  }
]