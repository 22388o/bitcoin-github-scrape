DrahtBot,2020-02-05 10:14:00,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19601 (Refactoring CHashWriter & Get{Prevouts,Sequence,Outputs}Hash to SHA256 (Alternative to #18071) by JeremyRubin)\n* ",https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-582335557,582335557,
prestwich,2020-02-17 18:44:35,utACK,https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-587117806,587117806,
Sjors,2020-07-24 09:30:45,Concept ACK on getting this refactor in separate from #17977 (Taproot) and #19055 (MuHash). Will review later.,https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-663447256,663447256,
jnewbery,2020-07-24 12:11:48,"There are some changes in #17977 to these commits, which should be added here if we merge this separately.",https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-663508515,663508515,
JeremyRubin,2020-07-24 17:58:27,"@Sjors requested changes made where applicable.\n\n@jnewbery could you be more specific? I scanned over the diffs and am not sure what you're referring to.",https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-663661067,663661067,
jnewbery,2020-07-24 19:36:04,"> could you be more specific?\n\nOne example is here: https://github.com/bitcoin/bitcoin/pull/17977/files#diff-46ec93803811240fe7b2b9e83eac7ba2R94\n\nHere's another: https://github.com/bitcoin/bitcoin/pull/17977/files#diff-05b3817be9a0d72b5ad9fa1cff567facR218",https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-663699881,663699881,
JeremyRubin,2020-07-24 20:29:31,"Ah those changes are intentional for SHA256Uint256, since we use a r-value version at a callsite I figure it's better to have an explicit version that does that.\n\nIn this version, I make the r-value version return a hash (forcing lifetime consumption of it's parameter) and make the reference version overwrite it's parameter and return void. It should be harder to misuse this API as the types a",https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-663720955,663720955,
Sjors,2020-07-27 09:02:07,It's still unresolved if the `CheapHash` function can use `GetHash` (instead of `GetSHA256`) without breaking Addrman's bucketing. See https://github.com/bitcoin/bitcoin/pull/19055#discussion_r460172516,https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-664216225,664216225,
jnewbery,2020-07-27 10:35:07,"If the intention here is to have function signatures that are different from #17977, then I'm NACKish on this, since it would create additional rebase work for the author and reviewers of that PR.",https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-664292688,664292688,
fjahr,2020-07-27 12:34:40,"> It's still unresolved if the `CheapHash` function can use `GetHash` (instead of `GetSHA256`) without breaking Addrman's bucketing. See [#19055 (comment)](https://github.com/bitcoin/bitcoin/pull/19055#discussion_r460172516)\n\nI think that consideration can be left for a follow-up. It is a further behavior change that makes sense to review separately to make sure nothing breaks. And this change",https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-664368923,664368923,
JeremyRubin,2020-07-27 17:41:45,"I agree with @fjahr, it's best if this PR can make no functional changes. Am happy to make a follow-up PR that can be reviewed independently switching cheaphash to a single sha256 (or as sipa points out, even siphash). @Sjors is that OK?\n\n@jnewbery this PR has been open for half a year, and is a part of my review of the Taproot code. The below should be about the only diff required as a result",https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-664539720,664539720,
Sjors,2020-07-31 17:32:32,"> I agree with @fjahr, it's best if this PR can make no functional changes. Am happy to make a follow-up PR that can be reviewed independently switching cheaphash to a single sha256 (or as sipa points out, even siphash). @Sjors is that OK?\n\nThat makes no sense; cheaphash uses a single sha256. This PR changes it to a double hash, so it's a functional change. Unless I'm reading it wrong.",https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-667244333,667244333,
JeremyRubin,2020-07-31 17:42:10,@Sjors yes you are reading it wrong. The type of ctx changes from double hashed writer to a single hashed writer.,https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-667248559,667248559,
JeremyRubin,2020-08-03 19:54:00,"I've rebased #18071 following the hash.h span changes (but not #19601 -- I can rebase that one if there is a preference for that approach).\n\npre-rebase summary:\n@jnewbery nack-ish (#17977 conflicts may prefer #19601 approach?)\n@instagibbs code review ACK (slightly prefers #18071 over #19601)\n@fjahr code review ACK (micro nit fixed)\n@luke-jr utack\n@prestwich utack\n@Sjors concept-ack",https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-668211508,668211508,
Sjors,2020-08-04 09:11:00,"Ah, I missed the switch from `CHash256` (double) to `CSHA256` (single). I wrote a test, which this PR indeed doesn't break:\n\n```cpp\nBOOST_AUTO_TEST_CASE(getcheaphash)\n{\n    CHashWriter ss(SER_DISK, CLIENT_VERSION);\n    ss << 1;\n    BOOST_CHECK_EQUAL(ss.GetCheapHash(), 0x8D07CCE5F258F741ULL);    \n}\n```",https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-668481325,668481325,
JeremyRubin,2020-08-07 21:04:52,"Since #19601 seems to be preferred by @sipa, @practicalswift, and @jnewbery, going to close #18071.",https://github.com/bitcoin/bitcoin/pull/18071#issuecomment-670712829,670712829,
Sjors,2020-07-24 10:22:08,"Shouldn't GetCheapHash be calling GetSHA256? I.e. ""Cheap"" refers to a single rather than a double hash.",https://github.com/bitcoin/bitcoin/pull/18071#discussion_r459970859,459970859,src/hash.h
Sjors,2020-07-24 10:45:40,Might as well rename these to plural prevout**s** and sequence**s**: `GetPrevoutsSHA256` and `GetSequencesSHA256`. ,https://github.com/bitcoin/bitcoin/pull/18071#discussion_r459980372,459980372,src/script/interpreter.cpp
Sjors,2020-07-24 10:47:00,"Would prefer to do this as a one-liner: `hashPrevouts = SHA256Uint256(GetPrevoutSHA256(txTo))`, as you do below.",https://github.com/bitcoin/bitcoin/pull/18071#discussion_r459980886,459980886,src/script/interpreter.cpp
JeremyRubin,2020-07-24 16:53:11,see https://github.com/bitcoin/bitcoin/pull/19055#discussion_r460171013,https://github.com/bitcoin/bitcoin/pull/18071#discussion_r460173088,460173088,src/hash.h
JeremyRubin,2020-07-24 16:54:34,The point of not being a one liner is to make it easier for future work to just add a line of copying.,https://github.com/bitcoin/bitcoin/pull/18071#discussion_r460173819,460173819,src/script/interpreter.cpp
JeremyRubin,2020-07-24 17:57:33,done.,https://github.com/bitcoin/bitcoin/pull/18071#discussion_r460205137,460205137,src/script/interpreter.cpp
instagibbs,2020-07-30 20:35:07,nano nit: hash_io.size(),https://github.com/bitcoin/bitcoin/pull/18071#discussion_r463255545,463255545,src/hash.cpp
instagibbs,2020-07-30 20:35:13,nano nit: hash_io.size(),https://github.com/bitcoin/bitcoin/pull/18071#discussion_r463255613,463255613,src/hash.cpp
JeremyRubin,2020-07-30 20:55:44,We do this a ton of places in the codebase -- might be nice for someone to add a Write/Finalize interface that is uint256 aware and fix these all at once?,https://github.com/bitcoin/bitcoin/pull/18071#discussion_r463266029,463266029,src/hash.cpp
sipa,2020-07-30 21:14:29,"See #19326 (which only does it for the hash.h ones and not the crypto/* ones, but certainly makes sense as a follow-up there too).",https://github.com/bitcoin/bitcoin/pull/18071#discussion_r463275088,463275088,src/hash.cpp
sipa,2020-08-03 20:04:34,What is the point of having these functions instead of a single `uint256 SHA256Uint256(const uint256& input)` ?,https://github.com/bitcoin/bitcoin/pull/18071#discussion_r464633591,464633591,src/hash.h
JeremyRubin,2020-08-04 00:36:57,"One benefit is that both versions operate completely in-place on their arguments (otherwise we're reading from a pointer, writing to the stack, then writing to a pointer). Another benefit is that it is slightly harder to misuse this because when you are operating on a l-value there is no return value, which otherwise you might forget to assign.",https://github.com/bitcoin/bitcoin/pull/18071#discussion_r464733374,464733374,src/hash.h
sipa,2020-08-04 19:33:24,That could be solved using NODISCARD instead. I don't think saving a super brief 32 bytes on the stack is even going to be be observable.,https://github.com/bitcoin/bitcoin/pull/18071#discussion_r465283390,465283390,src/hash.h
