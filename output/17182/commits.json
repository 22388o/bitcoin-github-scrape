[
  {
    "sha": "3df6b3100fdc07174d17967634c6f753254dc3ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGY2YjMxMDBmZGMwNzE3NGQxNzk2NzYzNGM2Zjc1MzI1NGRjM2Vh",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-10-17T22:46:52Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-10-17T23:07:25Z"
      },
      "message": "wip: Revert fa2b083c3feb0522baf652045efa6b73458761a3",
      "tree": {
        "sha": "024b76170e8bed97ef0d1c2370e26f474b2bf60f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/024b76170e8bed97ef0d1c2370e26f474b2bf60f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3df6b3100fdc07174d17967634c6f753254dc3ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3df6b3100fdc07174d17967634c6f753254dc3ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3df6b3100fdc07174d17967634c6f753254dc3ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3df6b3100fdc07174d17967634c6f753254dc3ea/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3834d3d12196da5ac3549af195bc81d497c2b970",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3834d3d12196da5ac3549af195bc81d497c2b970",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3834d3d12196da5ac3549af195bc81d497c2b970"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 3,
      "deletions": 149
    },
    "files": [
      {
        "sha": "6a9813442bf008ea28609070951f8a0b79ad7739",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 149,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df6b3100fdc07174d17967634c6f753254dc3ea/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df6b3100fdc07174d17967634c6f753254dc3ea/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=3df6b3100fdc07174d17967634c6f753254dc3ea",
        "patch": "@@ -10,7 +10,6 @@\n #include <miner.h>\n #include <pow.h>\n #include <random.h>\n-#include <script/standard.h>\n #include <test/setup_common.h>\n #include <util/time.h>\n #include <validation.h>\n@@ -22,8 +21,6 @@ struct RegtestingSetup : public TestingSetup {\n     RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n };\n \n-static const std::vector<unsigned char> V_OP_TRUE{OP_TRUE};\n-\n BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n \n struct TestSubscriber : public CValidationInterface {\n@@ -65,21 +62,8 @@ std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n     pblock->hashPrevBlock = prev_hash;\n     pblock->nTime = ++time;\n \n-    pubKey.clear();\n-    {\n-        WitnessV0ScriptHash witness_program;\n-        CSHA256().Write(&V_OP_TRUE[0], V_OP_TRUE.size()).Finalize(witness_program.begin());\n-        pubKey << OP_0 << ToByteVector(witness_program);\n-    }\n-\n-    // Make the coinbase transaction with two outputs:\n-    // One zero-value one that has a unique pubkey to make sure that blocks at the same height can have a different hash\n-    // Another one that has the coinbase reward in a P2WSH with OP_TRUE as witness program to make it easy to spend\n     CMutableTransaction txCoinbase(*pblock->vtx[0]);\n-    txCoinbase.vout.resize(2);\n-    txCoinbase.vout[1].scriptPubKey = pubKey;\n-    txCoinbase.vout[1].nValue = txCoinbase.vout[0].nValue;\n-    txCoinbase.vout[0].nValue = 0;\n+    txCoinbase.vout.resize(1);\n     txCoinbase.vin[0].scriptWitness.SetNull();\n     pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n \n@@ -88,9 +72,6 @@ std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n \n std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)\n {\n-    LOCK(cs_main); // For LookupBlockIndex\n-    GenerateCoinbaseCommitment(*pblock, LookupBlockIndex(pblock->hashPrevBlock), Params().GetConsensus());\n-\n     pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n \n     while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n@@ -101,13 +82,13 @@ std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)\n }\n \n // construct a valid block\n-std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n {\n     return FinalizeBlock(Block(prev_hash));\n }\n \n // construct an invalid block (but with a valid header)\n-std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n {\n     auto pblock = Block(prev_hash);\n \n@@ -207,131 +188,4 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n-/**\n- * Test that mempool updates happen atomically with reorgs.\n- *\n- * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n- * during large reorgs.\n- *\n- * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n- * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n- * invalidating the txns and evicting them from the mempool.\n- *\n- * We verify that the mempool updates atomically by polling it continuously\n- * from another thread during the reorg and checking that its size only changes\n- * once. The size changing exactly once indicates that the polling thread's\n- * view of the mempool is either consistent with the chain state before reorg,\n- * or consistent with the chain state after the reorg, and not just consistent\n- * with some intermediate state during the reorg.\n- */\n-BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n-{\n-    bool ignored;\n-    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n-        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n-    };\n-\n-    // Process all mined blocks\n-    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n-    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n-    BOOST_REQUIRE(ProcessBlock(last_mined));\n-\n-    // Run the test multiple times\n-    for (int test_runs = 3; test_runs > 0; --test_runs) {\n-        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n-\n-        // Later on split from here\n-        const uint256 split_hash{last_mined->hashPrevBlock};\n-\n-        // Create a bunch of transactions to spend the miner rewards of the\n-        // most recent blocks\n-        std::vector<CTransactionRef> txs;\n-        for (int num_txs = 22; num_txs > 0; --num_txs) {\n-            CMutableTransaction mtx;\n-            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n-            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n-            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n-            mtx.vout[0].nValue -= 1000;\n-            txs.push_back(MakeTransactionRef(mtx));\n-\n-            last_mined = GoodBlock(last_mined->GetHash());\n-            BOOST_REQUIRE(ProcessBlock(last_mined));\n-        }\n-\n-        // Mature the inputs of the txs\n-        for (int j = COINBASE_MATURITY; j > 0; --j) {\n-            last_mined = GoodBlock(last_mined->GetHash());\n-            BOOST_REQUIRE(ProcessBlock(last_mined));\n-        }\n-\n-        // Mine a reorg (and hold it back) before adding the txs to the mempool\n-        const uint256 tip_init{last_mined->GetHash()};\n-\n-        std::vector<std::shared_ptr<const CBlock>> reorg;\n-        last_mined = GoodBlock(split_hash);\n-        reorg.push_back(last_mined);\n-        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j > 0; --j) {\n-            last_mined = GoodBlock(last_mined->GetHash());\n-            reorg.push_back(last_mined);\n-        }\n-\n-        // Add the txs to the tx pool\n-        {\n-            LOCK(cs_main);\n-            CValidationState state;\n-            std::list<CTransactionRef> plTxnReplaced;\n-            for (const auto& tx : txs) {\n-                BOOST_REQUIRE(AcceptToMemoryPool(\n-                    ::mempool,\n-                    state,\n-                    tx,\n-                    /* pfMissingInputs */ &ignored,\n-                    &plTxnReplaced,\n-                    /* bypass_limits */ false,\n-                    /* nAbsurdFee */ 0));\n-            }\n-        }\n-\n-        // Check that all txs are in the pool\n-        {\n-            LOCK(::mempool.cs);\n-            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n-        }\n-\n-        // Run a thread that simulates an RPC caller that is polling while\n-        // validation is doing a reorg\n-        std::thread rpc_thread{[&]() {\n-            // This thread is checking that the mempool either contains all of\n-            // the transactions invalidated by the reorg, or none of them, and\n-            // not some intermediate amount.\n-            while (true) {\n-                LOCK(::mempool.cs);\n-                if (::mempool.mapTx.size() == 0) {\n-                    // We are done with the reorg\n-                    break;\n-                }\n-                // Internally, we might be in the middle of the reorg, but\n-                // externally the reorg to the most-proof-of-work chain should\n-                // be atomic. So the caller assumes that the returned mempool\n-                // is consistent. That is, it has all txs that were there\n-                // before the reorg.\n-                assert(::mempool.mapTx.size() == txs.size());\n-                continue;\n-            }\n-            LOCK(cs_main);\n-            // We are done with the reorg, so the tip must have changed\n-            assert(tip_init != ::ChainActive().Tip()->GetBlockHash());\n-        }};\n-\n-        // Submit the reorg in this thread to invalidate and remove the txs from the tx pool\n-        for (const auto& b : reorg) {\n-            ProcessBlock(b);\n-        }\n-        // Check that the reorg was eventually successful\n-        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n-\n-        // We can join the other thread, which returns when the reorg was successful\n-        rpc_thread.join();\n-    }\n-}\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "0ba85fc1c76a9b37e158a7e6b043a594e7d41543",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmE4NWZjMWM3NmE5YjM3ZTE1OGE3ZTZiMDQzYTU5NGU3ZDQxNTQz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-10-17T23:00:57Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-10-17T23:07:28Z"
      },
      "message": "wip: Revert fabeb1f613653a8c1560e4a093a9b6b7a069b60b",
      "tree": {
        "sha": "cbbbf5dbdc8764a6132aca12b36a7754133c37b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbbbf5dbdc8764a6132aca12b36a7754133c37b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ba85fc1c76a9b37e158a7e6b043a594e7d41543",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ba85fc1c76a9b37e158a7e6b043a594e7d41543",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ba85fc1c76a9b37e158a7e6b043a594e7d41543",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ba85fc1c76a9b37e158a7e6b043a594e7d41543/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3df6b3100fdc07174d17967634c6f753254dc3ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3df6b3100fdc07174d17967634c6f753254dc3ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3df6b3100fdc07174d17967634c6f753254dc3ea"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 34,
      "deletions": 27
    },
    "files": [
      {
        "sha": "9ede7982b59b6262c6f4192b4a07bd359254d7c4",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ba85fc1c76a9b37e158a7e6b043a594e7d41543/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ba85fc1c76a9b37e158a7e6b043a594e7d41543/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=0ba85fc1c76a9b37e158a7e6b043a594e7d41543",
        "patch": "@@ -457,7 +457,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n-        // Release lock while waiting\n+        // Release the wallet and main lock while waiting\n         LEAVE_CRITICAL_SECTION(cs_main);\n         {\n             checktxtime = std::chrono::steady_clock::now() + std::chrono::minutes(1);"
      },
      {
        "sha": "2f4e5fee4b2287d469bdb6aea9df9a1c62a14f6b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ba85fc1c76a9b37e158a7e6b043a594e7d41543/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ba85fc1c76a9b37e158a7e6b043a594e7d41543/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=0ba85fc1c76a9b37e158a7e6b043a594e7d41543",
        "patch": "@@ -104,7 +104,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n // for each such descendant, also update the ancestor state to include the parent.\n void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n {\n-    AssertLockHeld(cs);\n+    LOCK(cs);\n     // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n     // in-vHashesToUpdate transactions, so that we don't have to recalculate\n     // descendants when we come across a previously seen entry.\n@@ -457,7 +457,8 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants\n void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)\n {\n     // Remove transaction from memory pool\n-    AssertLockHeld(cs);\n+    {\n+        LOCK(cs);\n         setEntries txToRemove;\n         txiter origit = mapTx.find(origTx.GetHash());\n         if (origit != mapTx.end()) {\n@@ -482,12 +483,13 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n         }\n \n         RemoveStaged(setAllRemoves, false, reason);\n+    }\n }\n \n void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n-    AssertLockHeld(cs);\n+    LOCK(cs);\n     setEntries txToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n@@ -543,7 +545,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx)\n  */\n void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight)\n {\n-    AssertLockHeld(cs);\n+    LOCK(cs);\n     std::vector<const CTxMemPoolEntry*> entries;\n     for (const auto& tx : vtx)\n     {\n@@ -918,7 +920,7 @@ void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPool\n }\n \n int CTxMemPool::Expire(int64_t time) {\n-    AssertLockHeld(cs);\n+    LOCK(cs);\n     indexed_transaction_set::index<entry_time>::type::iterator it = mapTx.get<entry_time>().begin();\n     setEntries toremove;\n     while (it != mapTx.get<entry_time>().end() && it->GetTime() < time) {\n@@ -1011,7 +1013,7 @@ void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n }\n \n void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining) {\n-    AssertLockHeld(cs);\n+    LOCK(cs);\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);"
      },
      {
        "sha": "b120e9207f2df53391809d87c0139c62eb201f3a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ba85fc1c76a9b37e158a7e6b043a594e7d41543/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ba85fc1c76a9b37e158a7e6b043a594e7d41543/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0ba85fc1c76a9b37e158a7e6b043a594e7d41543",
        "patch": "@@ -513,12 +513,21 @@ class CTxMemPool\n      * `mempool.cs` whenever adding transactions to the mempool and whenever\n      * changing the chain tip. It's necessary to keep both mutexes locked until\n      * the mempool is consistent with the new chain tip and fully populated.\n+     *\n+     * @par Consistency bug\n+     *\n+     * The second guarantee above is not currently enforced, but\n+     * https://github.com/bitcoin/bitcoin/pull/14193 will fix it. No known code\n+     * in bitcoin currently depends on second guarantee, but it is important to\n+     * fix for third party code that needs be able to frequently poll the\n+     * mempool without locking `cs_main` and without encountering missing\n+     * transactions during reorgs.\n      */\n     mutable RecursiveMutex cs;\n     indexed_transaction_set mapTx GUARDED_BY(cs);\n \n     using txiter = indexed_transaction_set::nth_index<0>::type::const_iterator;\n-    std::vector<std::pair<uint256, txiter>> vTxHashes GUARDED_BY(cs); //!< All tx witness hashes/entries in mapTx, in random order\n+    std::vector<std::pair<uint256, txiter> > vTxHashes; //!< All tx witness hashes/entries in mapTx, in random order\n \n     struct CompareIteratorByHash {\n         bool operator()(const txiter &a, const txiter &b) const {\n@@ -573,10 +582,10 @@ class CTxMemPool\n     void addUnchecked(const CTxMemPoolEntry& entry, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n     void addUnchecked(const CTxMemPoolEntry& entry, setEntries& setAncestors, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n \n-    void removeRecursive(const CTransaction& tx, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void removeForReorg(const CCoinsViewCache* pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n+    void removeRecursive(const CTransaction& tx, MemPoolRemovalReason reason);\n+    void removeForReorg(const CCoinsViewCache* pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     void removeConflicts(const CTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight);\n \n     void clear();\n     void _clear() EXCLUSIVE_LOCKS_REQUIRED(cs); //lock free\n@@ -589,7 +598,7 @@ class CTxMemPool\n      * Check that none of this transactions inputs are in the mempool, and thus\n      * the tx is not dependent on other mempool transactions to be included in a block.\n      */\n-    bool HasNoInputsOf(const CTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    bool HasNoInputsOf(const CTransaction& tx) const;\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n     void PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta);\n@@ -623,7 +632,7 @@ class CTxMemPool\n      *  for).  Note: vHashesToUpdate should be the set of transactions from the\n      *  disconnected block that have been accepted back into the mempool.\n      */\n-    void UpdateTransactionsFromBlock(const std::vector<uint256>& vHashesToUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n+    void UpdateTransactionsFromBlock(const std::vector<uint256>& vHashesToUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Try to calculate all in-mempool ancestors of entry.\n      *  (these are all calculated including the tx itself)\n@@ -654,10 +663,10 @@ class CTxMemPool\n       *  pvNoSpendsRemaining, if set, will be populated with the list of outpoints\n       *  which are not in mempool which no longer have any spends in this mempool.\n       */\n-    void TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining=nullptr);\n \n     /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n-    int Expire(int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    int Expire(int64_t time);\n \n     /**\n      * Calculate the ancestor and descendant count for the given transaction."
      },
      {
        "sha": "c3888ea8cb5cd69319b8eb05ab9aaf8daa7aa742",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ba85fc1c76a9b37e158a7e6b043a594e7d41543/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ba85fc1c76a9b37e158a7e6b043a594e7d41543/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0ba85fc1c76a9b37e158a7e6b043a594e7d41543",
        "patch": "@@ -314,9 +314,7 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n // Returns the script flags which should be checked for a given block\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);\n \n-static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age)\n-    EXCLUSIVE_LOCKS_REQUIRED(pool.cs, ::cs_main)\n-{\n+static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n     int expired = pool.Expire(GetTime() - age);\n     if (expired != 0) {\n         LogPrint(BCLog::MEMPOOL, \"Expired %i transactions from the memory pool\\n\", expired);\n@@ -353,7 +351,7 @@ static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n  * and instead just erase from the mempool as needed.\n  */\n \n-static void UpdateMempoolForReorg(DisconnectedBlockTransactions& disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs)\n+static void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     std::vector<uint256> vHashUpdate;\n@@ -2812,7 +2810,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n         LimitValidationInterfaceQueue();\n \n         {\n-            LOCK2(cs_main, ::mempool.cs); // Lock transaction pool for at least as long as it takes for connectTrace to be consumed\n+            LOCK(cs_main);\n             CBlockIndex* starting_tip = m_chain.Tip();\n             bool blocks_connected = false;\n             do {\n@@ -2966,7 +2964,6 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         LimitValidationInterfaceQueue();\n \n         LOCK(cs_main);\n-        LOCK(::mempool.cs); // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is called after DisconnectTip without unlocking in between\n         if (!m_chain.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n         CBlockIndex *invalid_walk_tip = m_chain.Tip();\n@@ -4437,7 +4434,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n     // Loop until the tip is below nHeight, or we reach a pruned block.\n     while (!ShutdownRequested()) {\n         {\n-            LOCK2(cs_main, ::mempool.cs);\n+            LOCK(cs_main);\n             // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n             assert(tip == m_chain.Tip());\n             if (tip == nullptr || tip->nHeight < nHeight) break;"
      },
      {
        "sha": "b805fca37563f5db8e90c9264acb4c585d7b63f0",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ba85fc1c76a9b37e158a7e6b043a594e7d41543/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ba85fc1c76a9b37e158a7e6b043a594e7d41543/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0ba85fc1c76a9b37e158a7e6b043a594e7d41543",
        "patch": "@@ -18,7 +18,6 @@\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <script/script_error.h>\n #include <sync.h>\n-#include <txmempool.h> // For CTxMemPool::cs\n #include <txdb.h>\n #include <versionbits.h>\n \n@@ -693,8 +692,8 @@ class CChainState {\n     bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n                       CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-    // Apply the effects of a block disconnection on the UTXO set.\n-    bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);\n+    // Block disconnection on our pcoinsTip:\n+    bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Manual block validity manipulation:\n     bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n@@ -724,8 +723,8 @@ class CChainState {\n     bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n private:\n-    bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);\n-    bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);\n+    bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  },
  {
    "sha": "14efdc9830d8afa4e228c68ee73219e09eaec0b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGVmZGM5ODMwZDhhZmE0ZTIyOGM2OGVlNzMyMTllMDllYWVjMGI0",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-10-17T23:35:49Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-10-17T23:35:49Z"
      },
      "message": "wip: Drop annotations to fix build",
      "tree": {
        "sha": "a0cfd1a9f2ad9082a09cce86cdb19b1dc5b2f7ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0cfd1a9f2ad9082a09cce86cdb19b1dc5b2f7ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14efdc9830d8afa4e228c68ee73219e09eaec0b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14efdc9830d8afa4e228c68ee73219e09eaec0b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14efdc9830d8afa4e228c68ee73219e09eaec0b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14efdc9830d8afa4e228c68ee73219e09eaec0b4/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ba85fc1c76a9b37e158a7e6b043a594e7d41543",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ba85fc1c76a9b37e158a7e6b043a594e7d41543",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ba85fc1c76a9b37e158a7e6b043a594e7d41543"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dd683123d87c372642c25ae3c75ac16af21f17e4",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14efdc9830d8afa4e228c68ee73219e09eaec0b4/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14efdc9830d8afa4e228c68ee73219e09eaec0b4/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=14efdc9830d8afa4e228c68ee73219e09eaec0b4",
        "patch": "@@ -517,7 +517,7 @@ class CoinsViews {\n \n     //! This is the top layer of the cache hierarchy - it keeps as many coins in memory as\n     //! can fit per the dbcache setting.\n-    std::unique_ptr<CCoinsViewCache> m_cacheview GUARDED_BY(cs_main);\n+    std::unique_ptr<CCoinsViewCache> m_cacheview;\n \n     //! This constructor initializes CCoinsViewDB and CCoinsViewErrorCatcher instances, but it\n     //! *does not* create a CCoinsViewCache instance by default. This is done separately because the\n@@ -620,7 +620,7 @@ class CChainState {\n     std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n \n     //! @returns A reference to the in-memory cache of the UTXO set.\n-    CCoinsViewCache& CoinsTip() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+    CCoinsViewCache& CoinsTip()\n     {\n         assert(m_coins_views->m_cacheview);\n         return *m_coins_views->m_cacheview.get();"
      }
    ]
  }
]