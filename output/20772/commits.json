[
  {
    "sha": "a29f522ba4aa71582b54025c5682b4c1687ae9f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjlmNTIyYmE0YWE3MTU4MmI1NDAyNWM1NjgyYjRjMTY4N2FlOWYz",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2020-12-27T00:53:32Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-01-03T17:38:19Z"
      },
      "message": "fuzz: bolster ExtractDestination(s) checks",
      "tree": {
        "sha": "afe27b396ce97389fa25ad9af11408cde200b4ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afe27b396ce97389fa25ad9af11408cde200b4ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a29f522ba4aa71582b54025c5682b4c1687ae9f3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAl/yAQsACgkQc3/VzfHR\nRrnhxQ/+MZYV8MsibEoc5aDd7s6AD48pNosEQl8Vld4CywCJ5CpCSDZoLpvIweSk\nZEi9K2Je9wJdP1esd6BIpujKU4IT5H0rDDlUzn6J0y2A7nGSskuhSSl3DaONa9CG\n5px+YKTUjV7KSvGg0jzlfx45IJ4D+jo4Du+U+cX2cq4S8YaOPTEq6lzKc0SoJJE6\nyQL7bSNHWvgtIAhiOhfIJ0z6kJ0fpLvXSs2GjGkUjwVmJA8Pw8CtCtxDLjEC28uM\ndAgF+k7yzHkcqsA60jhCWrIlNGT3qCMF2ArvofzouS68wyTXPA1OfIbK/XvHk21k\n4Q+B4FAIp6oCKoLt89SFEoOzz469sSgBNYKYouW/U3mkBeMjuJmRiWMA+Fpw2QKu\nrclyxz7+bhozmeAlyrIxuTMFolGwBpmwogQ1vrUH3yDyR7V+/1poC09Ec0vPpZ1c\nVAsYZphvA8rH4f6gnuUfI/iX0FQlsk6Xvfmt9njPh3dHX+dJKKi74KGLUgqwJGx4\nu7u6RaGcRs4RPuf5OvVDNZrFGq4yHLVt1RsWTn90eUS8yjnIVWKghZ7YwPgA0bTi\ngyW+ImCcE+GfnCdMH0DDqev6x61lh0wyb55hGF5Qq6/fMoBMX6x6iFpcQTyEBQwP\nirSry68Dv5mLnU1VYi0tq0u/Rwzk2M8cL1sKBijAqOLyOF0Dm4U=\n=gwpB\n-----END PGP SIGNATURE-----",
        "payload": "tree afe27b396ce97389fa25ad9af11408cde200b4ae\nparent 2dab2d239a4777b5ffd59a94a8eebd8638644e6c\nauthor Michael Dietz <michael.dietz@waya.ai> 1609030412 -0600\ncommitter Michael Dietz <michael.dietz@waya.ai> 1609695499 -0600\n\nfuzz: bolster ExtractDestination(s) checks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a29f522ba4aa71582b54025c5682b4c1687ae9f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a29f522ba4aa71582b54025c5682b4c1687ae9f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a29f522ba4aa71582b54025c5682b4c1687ae9f3/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2dab2d239a4777b5ffd59a94a8eebd8638644e6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dab2d239a4777b5ffd59a94a8eebd8638644e6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2dab2d239a4777b5ffd59a94a8eebd8638644e6c"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 38,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c89ce24171f9d4ab217850fc27e3bdc3ccd06d32",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 10,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a29f522ba4aa71582b54025c5682b4c1687ae9f3/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a29f522ba4aa71582b54025c5682b4c1687ae9f3/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=a29f522ba4aa71582b54025c5682b4c1687ae9f3",
        "patch": "@@ -56,22 +56,45 @@ FUZZ_TARGET_INIT(script, initialize_script)\n     }\n \n     CTxDestination address;\n-    (void)ExtractDestination(script, address);\n-\n     TxoutType type_ret;\n     std::vector<CTxDestination> addresses;\n     int required_ret;\n-    (void)ExtractDestinations(script, type_ret, addresses, required_ret);\n-\n-    const FlatSigningProvider signing_provider;\n-    (void)InferDescriptor(script, signing_provider);\n-\n-    (void)IsSegWitOutput(signing_provider, script);\n-\n-    (void)IsSolvable(signing_provider, script);\n+    bool extract_destinations_ret = ExtractDestinations(script, type_ret, addresses, required_ret);\n+    bool extract_destination_ret = ExtractDestination(script, address);\n+    if (!extract_destinations_ret) {\n+        assert(!extract_destination_ret);\n+        if (type_ret == TxoutType::MULTISIG) {\n+            assert(addresses.empty() && required_ret == 0);\n+        } else {\n+            assert(type_ret == TxoutType::PUBKEY ||\n+                   type_ret == TxoutType::NONSTANDARD ||\n+                   type_ret == TxoutType::NULL_DATA);\n+        }\n+    } else {\n+        assert(required_ret >= 1 && required_ret <= 16);\n+        assert((unsigned long)required_ret == addresses.size());\n+        assert(type_ret == TxoutType::MULTISIG || required_ret == 1);\n+    }\n+    if (type_ret == TxoutType::NONSTANDARD || type_ret == TxoutType::NULL_DATA) {\n+        assert(!extract_destinations_ret);\n+    }\n+    if (!extract_destination_ret) {\n+        assert(type_ret == TxoutType::PUBKEY ||\n+               type_ret == TxoutType::NONSTANDARD ||\n+               type_ret == TxoutType::NULL_DATA ||\n+               type_ret == TxoutType::MULTISIG);\n+    } else {\n+        assert(address == addresses[0]);\n+    }\n+    if (type_ret == TxoutType::NONSTANDARD ||\n+        type_ret == TxoutType::NULL_DATA ||\n+        type_ret == TxoutType::MULTISIG) {\n+        assert(!extract_destination_ret);\n+    }\n \n     TxoutType which_type;\n     bool is_standard_ret = IsStandard(script, which_type);\n+    assert(type_ret == which_type);\n     if (!is_standard_ret) {\n         assert(which_type == TxoutType::NONSTANDARD ||\n                which_type == TxoutType::NULL_DATA ||\n@@ -88,6 +111,11 @@ FUZZ_TARGET_INIT(script, initialize_script)\n                which_type == TxoutType::NONSTANDARD);\n     }\n \n+    const FlatSigningProvider signing_provider;\n+    (void)InferDescriptor(script, signing_provider);\n+    (void)IsSegWitOutput(signing_provider, script);\n+    (void)IsSolvable(signing_provider, script);\n+\n     (void)RecursiveDynamicUsage(script);\n \n     std::vector<std::vector<unsigned char>> solutions;"
      }
    ]
  }
]