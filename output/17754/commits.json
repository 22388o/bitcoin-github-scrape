[
  {
    "sha": "9574de86ad703ad942cdd0eca79f48c0d42b102b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTc0ZGU4NmFkNzAzYWQ5NDJjZGQwZWNhNzlmNDhjMGQ0MmIxMDJi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-11T16:39:29Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-08T12:35:59Z"
      },
      "message": "net: Avoid using C-style NUL-terminated strings as arguments in the netbase interface",
      "tree": {
        "sha": "54955eedefb9824d094f9e1e9d199274a6d3a7ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54955eedefb9824d094f9e1e9d199274a6d3a7ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9574de86ad703ad942cdd0eca79f48c0d42b102b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9574de86ad703ad942cdd0eca79f48c0d42b102b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9574de86ad703ad942cdd0eca79f48c0d42b102b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9574de86ad703ad942cdd0eca79f48c0d42b102b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcef6dbc15ef9630832697b9ebf80f05f20efda8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcef6dbc15ef9630832697b9ebf80f05f20efda8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcef6dbc15ef9630832697b9ebf80f05f20efda8"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 74,
      "deletions": 54
    },
    "files": [
      {
        "sha": "0e13b85806d88f8896d589624febc5bb9feaab0c",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "patch": "@@ -172,7 +172,7 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n     for (const std::string& strAllow : gArgs.GetArgs(\"-rpcallowip\")) {\n         CSubNet subnet;\n-        LookupSubNet(strAllow.c_str(), subnet);\n+        LookupSubNet(strAllow, subnet);\n         if (!subnet.IsValid()) {\n             uiInterface.ThreadSafeMessageBox(\n                 strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n@@ -324,7 +324,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n         evhttp_bound_socket *bind_handle = evhttp_bind_socket_with_handle(http, i->first.empty() ? nullptr : i->first.c_str(), i->second);\n         if (bind_handle) {\n             CNetAddr addr;\n-            if (i->first.empty() || (LookupHost(i->first.c_str(), addr, false) && addr.IsBindAny())) {\n+            if (i->first.empty() || (LookupHost(i->first, addr, false) && addr.IsBindAny())) {\n                 LogPrintf(\"WARNING: the RPC server is not safe to expose to untrusted networks such as the public internet\\n\");\n             }\n             boundSockets.push_back(bind_handle);"
      },
      {
        "sha": "3bb3b9f01ecbf6d6f26f8c9b5db08c5868adcb56",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "patch": "@@ -1354,7 +1354,7 @@ bool AppInitMain(NodeContext& node)\n     SetReachable(NET_ONION, false);\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n-        if (!Lookup(proxyArg.c_str(), proxyAddr, 9050, fNameLookup)) {\n+        if (!Lookup(proxyArg, proxyAddr, 9050, fNameLookup)) {\n             return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\").translated, proxyArg));\n         }\n \n@@ -1378,7 +1378,7 @@ bool AppInitMain(NodeContext& node)\n             SetReachable(NET_ONION, false);\n         } else {\n             CService onionProxy;\n-            if (!Lookup(onionArg.c_str(), onionProxy, 9050, fNameLookup)) {\n+            if (!Lookup(onionArg, onionProxy, 9050, fNameLookup)) {\n                 return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\").translated, onionArg));\n             }\n             proxyType addrOnion = proxyType(onionProxy, proxyRandomize);\n@@ -1396,7 +1396,7 @@ bool AppInitMain(NodeContext& node)\n \n     for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n         CService addrLocal;\n-        if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n+        if (Lookup(strAddr, addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n             AddLocal(addrLocal, LOCAL_MANUAL);\n         else\n             return InitError(ResolveErrMsg(\"externalip\", strAddr));\n@@ -1776,7 +1776,7 @@ bool AppInitMain(NodeContext& node)\n \n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n         CService addrBind;\n-        if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n+        if (!Lookup(strBind, addrBind, GetListenPort(), false)) {\n             return InitError(ResolveErrMsg(\"bind\", strBind));\n         }\n         connOptions.vBinds.push_back(addrBind);"
      },
      {
        "sha": "4e1f4cd8ecc12853966c4c8902e07e0dc2359d28",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "patch": "@@ -410,7 +410,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             if (hSocket == INVALID_SOCKET) {\n                 return nullptr;\n             }\n-            connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(), hSocket, nConnectTimeout, &proxyConnectionFailed);\n+            connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(), hSocket, nConnectTimeout, proxyConnectionFailed);\n         } else {\n             // no proxy needed (none set for target network)\n             hSocket = CreateSocket(addrConnect);\n@@ -432,7 +432,8 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         std::string host;\n         int port = default_port;\n         SplitHostPort(std::string(pszDest), port, host);\n-        connected = ConnectThroughProxy(proxy, host, port, hSocket, nConnectTimeout, nullptr);\n+        bool proxyConnectionFailed;\n+        connected = ConnectThroughProxy(proxy, host, port, hSocket, nConnectTimeout, proxyConnectionFailed);\n     }\n     if (!connected) {\n         CloseSocket(hSocket);\n@@ -1609,7 +1610,7 @@ void CConnman::ThreadDNSAddressSeed()\n                 continue;\n             }\n             unsigned int nMaxIPs = 256; // Limits number of IPs learned from a DNS seed\n-            if (LookupHost(host.c_str(), vIPs, nMaxIPs, true)) {\n+            if (LookupHost(host, vIPs, nMaxIPs, true)) {\n                 for (const CNetAddr& ip : vIPs) {\n                     int nOneDay = 24*3600;\n                     CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()), requiredServiceBits);\n@@ -1907,7 +1908,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n     }\n \n     for (const std::string& strAddNode : lAddresses) {\n-        CService service(LookupNumeric(strAddNode.c_str(), Params().GetDefaultPort()));\n+        CService service(LookupNumeric(strAddNode, Params().GetDefaultPort()));\n         AddedNodeInfo addedNode{strAddNode, CService(), false, false};\n         if (service.IsValid()) {\n             // strAddNode is an IP:port"
      },
      {
        "sha": "22fa5ee73b4cfd8a626bea5bbdea46b9d0423bae",
        "filename": "src/net_permissions.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.cpp?ref=9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "patch": "@@ -71,7 +71,7 @@ bool NetWhitebindPermissions::TryParse(const std::string str, NetWhitebindPermis\n \n     const std::string strBind = str.substr(offset);\n     CService addrBind;\n-    if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n+    if (!Lookup(strBind, addrBind, 0, false)) {\n         error = ResolveErrMsg(\"whitebind\", strBind);\n         return false;\n     }\n@@ -94,7 +94,7 @@ bool NetWhitelistPermissions::TryParse(const std::string str, NetWhitelistPermis\n \n     const std::string net = str.substr(offset);\n     CSubNet subnet;\n-    LookupSubNet(net.c_str(), subnet);\n+    LookupSubNet(net, subnet);\n     if (!subnet.IsValid()) {\n         error = strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\").translated, net);\n         return false;"
      },
      {
        "sha": "d87b14a6ab5ec8eef0961678e1a76b953403f4d4",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 29,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "patch": "@@ -7,8 +7,9 @@\n \n #include <sync.h>\n #include <tinyformat.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n \n #include <atomic>\n \n@@ -59,10 +60,14 @@ std::string GetNetworkName(enum Network net) {\n     }\n }\n \n-bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n+bool static LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n     vIP.clear();\n \n+    if (!ValidAsCString(name)) {\n+        return false;\n+    }\n+\n     {\n         CNetAddr addr;\n         // From our perspective, onion addresses are not hostnames but rather\n@@ -71,7 +76,7 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n         // getaddrinfo to decode them and it wouldn't make sense to resolve\n         // them, we return a network address representing it instead. See\n         // CNetAddr::SetSpecial(const std::string&) for more details.\n-        if (addr.SetSpecial(std::string(pszName))) {\n+        if (addr.SetSpecial(name)) {\n             vIP.push_back(addr);\n             return true;\n         }\n@@ -93,7 +98,7 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n     // hostname lookups.\n     aiHint.ai_flags = fAllowLookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n     struct addrinfo *aiRes = nullptr;\n-    int nErr = getaddrinfo(pszName, nullptr, &aiHint, &aiRes);\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n     if (nErr)\n         return false;\n \n@@ -131,7 +136,7 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n /**\n  * Resolve a host string to its corresponding network addresses.\n  *\n- * @param pszName The string representing a host. Could be a name or a numerical\n+ * @param name    The string representing a host. Could be a name or a numerical\n  *                IP address (IPv6 addresses in their bracketed form are\n  *                allowed).\n  * @param[out] vIP The resulting network addresses to which the specified host\n@@ -143,28 +148,34 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n  * @see Lookup(const char *, std::vector<CService>&, int, bool, unsigned int)\n  *      for additional parameter descriptions.\n  */\n-bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n+bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n-    std::string strHost(pszName);\n+    if (!ValidAsCString(name)) {\n+        return false;\n+    }\n+    std::string strHost = name;\n     if (strHost.empty())\n         return false;\n     if (strHost.front() == '[' && strHost.back() == ']') {\n         strHost = strHost.substr(1, strHost.size() - 2);\n     }\n \n-    return LookupIntern(strHost.c_str(), vIP, nMaxSolutions, fAllowLookup);\n+    return LookupIntern(strHost, vIP, nMaxSolutions, fAllowLookup);\n }\n \n  /**\n  * Resolve a host string to its first corresponding network address.\n  *\n- * @see LookupHost(const char *, std::vector<CNetAddr>&, unsigned int, bool) for\n+ * @see LookupHost(const std::string&, std::vector<CNetAddr>&, unsigned int, bool) for\n  *      additional parameter descriptions.\n  */\n-bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)\n+bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup)\n {\n+    if (!ValidAsCString(name)) {\n+        return false;\n+    }\n     std::vector<CNetAddr> vIP;\n-    LookupHost(pszName, vIP, 1, fAllowLookup);\n+    LookupHost(name, vIP, 1, fAllowLookup);\n     if(vIP.empty())\n         return false;\n     addr = vIP.front();\n@@ -174,7 +185,7 @@ bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)\n /**\n  * Resolve a service string to its corresponding service.\n  *\n- * @param pszName The string representing a service. Could be a name or a\n+ * @param name    The string representing a service. Could be a name or a\n  *                numerical IP address (IPv6 addresses should be in their\n  *                disambiguated bracketed form), optionally followed by a port\n  *                number. (e.g. example.com:8333 or\n@@ -191,16 +202,17 @@ bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)\n  * @returns Whether or not the service string successfully resolved to any\n  *          resulting services.\n  */\n-bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)\n+bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)\n {\n-    if (pszName[0] == 0)\n+    if (name.empty() || !ValidAsCString(name)) {\n         return false;\n+    }\n     int port = portDefault;\n     std::string hostname;\n-    SplitHostPort(std::string(pszName), port, hostname);\n+    SplitHostPort(name, port, hostname);\n \n     std::vector<CNetAddr> vIP;\n-    bool fRet = LookupIntern(hostname.c_str(), vIP, nMaxSolutions, fAllowLookup);\n+    bool fRet = LookupIntern(hostname, vIP, nMaxSolutions, fAllowLookup);\n     if (!fRet)\n         return false;\n     vAddr.resize(vIP.size());\n@@ -215,10 +227,13 @@ bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault,\n  * @see Lookup(const char *, std::vector<CService>&, int, bool, unsigned int)\n  *      for additional parameter descriptions.\n  */\n-bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup)\n+bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup)\n {\n+    if (!ValidAsCString(name)) {\n+        return false;\n+    }\n     std::vector<CService> vService;\n-    bool fRet = Lookup(pszName, vService, portDefault, fAllowLookup, 1);\n+    bool fRet = Lookup(name, vService, portDefault, fAllowLookup, 1);\n     if (!fRet)\n         return false;\n     addr = vService[0];\n@@ -235,12 +250,15 @@ bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLoo\n  * @see Lookup(const char *, CService&, int, bool) for additional parameter\n  *      descriptions.\n  */\n-CService LookupNumeric(const char *pszName, int portDefault)\n+CService LookupNumeric(const std::string& name, int portDefault)\n {\n+    if (!ValidAsCString(name)) {\n+        return {};\n+    }\n     CService addr;\n     // \"1.2:345\" will fail to resolve the ip, but will still set the port.\n     // If the ip fails to resolve, re-init the result.\n-    if(!Lookup(pszName, addr, portDefault, false))\n+    if(!Lookup(name, addr, portDefault, false))\n         addr = CService();\n     return addr;\n }\n@@ -768,12 +786,11 @@ bool IsProxy(const CNetAddr &addr) {\n  *\n  * @returns Whether or not the operation succeeded.\n  */\n-bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocket, int nTimeout, bool *outProxyConnectionFailed)\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocket, int nTimeout, bool& outProxyConnectionFailed)\n {\n     // first connect to proxy server\n     if (!ConnectSocketDirectly(proxy.proxy, hSocket, nTimeout, true)) {\n-        if (outProxyConnectionFailed)\n-            *outProxyConnectionFailed = true;\n+        outProxyConnectionFailed = true;\n         return false;\n     }\n     // do socks negotiation\n@@ -796,23 +813,25 @@ bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int\n  * Parse and resolve a specified subnet string into the appropriate internal\n  * representation.\n  *\n- * @param pszName A string representation of a subnet of the form `network\n+ * @param strSubnet A string representation of a subnet of the form `network\n  *                address [ \"/\", ( CIDR-style suffix | netmask ) ]`(e.g.\n  *                `2001:db8::/32`, `192.0.2.0/255.255.255.0`, or `8.8.8.8`).\n  * @param ret The resulting internal representation of a subnet.\n  *\n  * @returns Whether the operation succeeded or not.\n  */\n-bool LookupSubNet(const char* pszName, CSubNet& ret)\n+bool LookupSubNet(const std::string& strSubnet, CSubNet& ret)\n {\n-    std::string strSubnet(pszName);\n+    if (!ValidAsCString(strSubnet)) {\n+        return false;\n+    }\n     size_t slash = strSubnet.find_last_of('/');\n     std::vector<CNetAddr> vIP;\n \n     std::string strAddress = strSubnet.substr(0, slash);\n-    // TODO: Use LookupHost(const char *, CNetAddr&, bool) instead to just get\n+    // TODO: Use LookupHost(const std::string&, CNetAddr&, bool) instead to just get\n     //       one CNetAddr.\n-    if (LookupHost(strAddress.c_str(), vIP, 1, false))\n+    if (LookupHost(strAddress, vIP, 1, false))\n     {\n         CNetAddr network = vIP[0];\n         if (slash != strSubnet.npos)\n@@ -827,7 +846,7 @@ bool LookupSubNet(const char* pszName, CSubNet& ret)\n             else // If not a valid number, try full netmask syntax\n             {\n                 // Never allow lookup for netmask\n-                if (LookupHost(strNetmask.c_str(), vIP, 1, false)) {\n+                if (LookupHost(strNetmask, vIP, 1, false)) {\n                     ret = CSubNet(network, vIP[0]);\n                     return ret.IsValid();\n                 }"
      },
      {
        "sha": "ac4cd97673aa364b609f2fa51d1cbd71bcf532e7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "patch": "@@ -45,15 +45,15 @@ bool IsProxy(const CNetAddr &addr);\n bool SetNameProxy(const proxyType &addrProxy);\n bool HaveNameProxy();\n bool GetNameProxy(proxyType &nameProxyOut);\n-bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\n-bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup);\n-bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup);\n-bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n-CService LookupNumeric(const char *pszName, int portDefault = 0);\n-bool LookupSubNet(const char *pszName, CSubNet& subnet);\n+bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\n+bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup);\n+bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup);\n+bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n+CService LookupNumeric(const std::string& name, int portDefault = 0);\n+bool LookupSubNet(const std::string& strSubnet, CSubNet& subnet);\n SOCKET CreateSocket(const CService &addrConnect);\n bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocketRet, int nTimeout, bool manual_connection);\n-bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed);\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocketRet, int nTimeout, bool& outProxyConnectionFailed);\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);\n /** Close socket and set hSocket to INVALID_SOCKET */"
      },
      {
        "sha": "8ee6c947e6e4a4c113d12396856d2a468eef0241",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "patch": "@@ -375,7 +375,7 @@ QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) cons\n {\n     Q_UNUSED(pos);\n     // Validate the proxy\n-    CService serv(LookupNumeric(input.toStdString().c_str(), DEFAULT_GUI_PROXY_PORT));\n+    CService serv(LookupNumeric(input.toStdString(), DEFAULT_GUI_PROXY_PORT));\n     proxyType addrProxy = proxyType(serv, true);\n     if (addrProxy.IsValid())\n         return QValidator::Acceptable;"
      },
      {
        "sha": "b87be65f5e72bb1d00c963b6204e0e9b04d622ef",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "patch": "@@ -1240,7 +1240,7 @@ void RPCConsole::unbanSelectedNode()\n         QString strNode = nodes.at(i).data().toString();\n         CSubNet possibleSubnet;\n \n-        LookupSubNet(strNode.toStdString().c_str(), possibleSubnet);\n+        LookupSubNet(strNode.toStdString(), possibleSubnet);\n         if (possibleSubnet.IsValid() && m_node.unban(possibleSubnet))\n         {\n             clientModel->getBanTableModel()->refresh();"
      },
      {
        "sha": "e0c1976f1a7f7771c4736b151d4abb7f4e492c20",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "patch": "@@ -562,11 +562,11 @@ static UniValue setban(const JSONRPCRequest& request)\n \n     if (!isSubnet) {\n         CNetAddr resolved;\n-        LookupHost(request.params[0].get_str().c_str(), resolved, false);\n+        LookupHost(request.params[0].get_str(), resolved, false);\n         netAddr = resolved;\n     }\n     else\n-        LookupSubNet(request.params[0].get_str().c_str(), subNet);\n+        LookupSubNet(request.params[0].get_str(), subNet);\n \n     if (! (isSubnet ? subNet.IsValid() : netAddr.IsValid()) )\n         throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Invalid IP/Subnet\");"
      },
      {
        "sha": "87baa8934595254d451e9e065cd82aa6462c6646",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "patch": "@@ -105,7 +105,7 @@ BOOST_AUTO_TEST_CASE(netbase_splithost)\n \n bool static TestParse(std::string src, std::string canon)\n {\n-    CService addr(LookupNumeric(src.c_str(), 65535));\n+    CService addr(LookupNumeric(src, 65535));\n     return canon == addr.ToString();\n }\n "
      },
      {
        "sha": "84118b36efdf193e0af7edcd370cfdd893ceedc8",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9574de86ad703ad942cdd0eca79f48c0d42b102b/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "patch": "@@ -501,7 +501,7 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n             }\n             return;\n         }\n-        service = LookupNumeric(std::string(service_id+\".onion\").c_str(), Params().GetDefaultPort());\n+        service = LookupNumeric(std::string(service_id+\".onion\"), Params().GetDefaultPort());\n         LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n             LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());"
      }
    ]
  },
  {
    "sha": "fefb9165f23fe9d10ad092ec31715f906e0d2ee7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWZiOTE2NWYyM2ZlOWQxMGFkMDkyZWMzMTcxNWY5MDZlMGQyZWU3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T11:46:19Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-08T12:35:59Z"
      },
      "message": "tests: Add tests to make sure lookup methods fail on std::string parameters with embedded NUL characters",
      "tree": {
        "sha": "9933f815e4c7b834f8b0b1dc26d54647ba1b25a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9933f815e4c7b834f8b0b1dc26d54647ba1b25a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fefb9165f23fe9d10ad092ec31715f906e0d2ee7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fefb9165f23fe9d10ad092ec31715f906e0d2ee7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fefb9165f23fe9d10ad092ec31715f906e0d2ee7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fefb9165f23fe9d10ad092ec31715f906e0d2ee7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9574de86ad703ad942cdd0eca79f48c0d42b102b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9574de86ad703ad942cdd0eca79f48c0d42b102b"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 20,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cb1ef5dcf39b6ef32ce5f3401163cfce528f5481",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fefb9165f23fe9d10ad092ec31715f906e0d2ee7/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fefb9165f23fe9d10ad092ec31715f906e0d2ee7/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=fefb9165f23fe9d10ad092ec31715f906e0d2ee7",
        "patch": "@@ -99,6 +99,8 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     BOOST_CHECK(Lookup(\"250.7.1.1\", addr1, 8333, false));\n     BOOST_CHECK(Lookup(\"250.7.2.2\", addr2, 9999, false));\n     BOOST_CHECK(Lookup(\"250.7.3.3\", addr3, 9999, false));\n+    BOOST_CHECK(Lookup(std::string(\"250.7.3.3\", 9), addr3, 9999, false));\n+    BOOST_CHECK(!Lookup(std::string(\"250.7.3.3\\0example.com\", 21), addr3, 9999, false));\n \n     // Add three addresses to new table.\n     CService source;"
      },
      {
        "sha": "3d2dfadc47256ae7077107c7147a6cfacec35815",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fefb9165f23fe9d10ad092ec31715f906e0d2ee7/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fefb9165f23fe9d10ad092ec31715f906e0d2ee7/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=fefb9165f23fe9d10ad092ec31715f906e0d2ee7",
        "patch": "@@ -127,7 +127,6 @@ BOOST_AUTO_TEST_CASE(netbase_lookupnumeric)\n \n BOOST_AUTO_TEST_CASE(onioncat_test)\n {\n-\n     // values from https://web.archive.org/web/20121122003543/http://www.cypherpunk.at/onioncat/wiki/OnionCat\n     CNetAddr addr1(ResolveIP(\"5wyqrzbvrdsumnok.onion\"));\n     CNetAddr addr2(ResolveIP(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\"));\n@@ -402,4 +401,22 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"mempool\") != strings.end());\n }\n \n+BOOST_AUTO_TEST_CASE(netbase_dont_resolve_strings_with_embedded_nul_characters)\n+{\n+    CNetAddr addr;\n+    BOOST_CHECK(LookupHost(std::string(\"127.0.0.1\", 9), addr, false));\n+    BOOST_CHECK(!LookupHost(std::string(\"127.0.0.1\\0\", 10), addr, false));\n+    BOOST_CHECK(!LookupHost(std::string(\"127.0.0.1\\0example.com\", 21), addr, false));\n+    BOOST_CHECK(!LookupHost(std::string(\"127.0.0.1\\0example.com\\0\", 22), addr, false));\n+    CSubNet ret;\n+    BOOST_CHECK(LookupSubNet(std::string(\"1.2.3.0/24\", 10), ret));\n+    BOOST_CHECK(!LookupSubNet(std::string(\"1.2.3.0/24\\0\", 11), ret));\n+    BOOST_CHECK(!LookupSubNet(std::string(\"1.2.3.0/24\\0example.com\", 22), ret));\n+    BOOST_CHECK(!LookupSubNet(std::string(\"1.2.3.0/24\\0example.com\\0\", 23), ret));\n+    BOOST_CHECK(LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\", 22), ret));\n+    BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\\0\", 23), ret));\n+    BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\\0example.com\", 34), ret));\n+    BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\\0example.com\\0\", 35), ret));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "7a046cdc1423963bdcbcf9bb98560af61fa90b37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTA0NmNkYzE0MjM5NjNiZGNiY2Y5YmI5ODU2MGFmNjFmYTkwYjM3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-29T20:23:48Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-08T12:35:59Z"
      },
      "message": "tests: Avoid using C-style NUL-terminated strings as arguments",
      "tree": {
        "sha": "b06d88144cab5c18c45b06592d28ce237bd9a16f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b06d88144cab5c18c45b06592d28ce237bd9a16f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a046cdc1423963bdcbcf9bb98560af61fa90b37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a046cdc1423963bdcbcf9bb98560af61fa90b37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a046cdc1423963bdcbcf9bb98560af61fa90b37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a046cdc1423963bdcbcf9bb98560af61fa90b37/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fefb9165f23fe9d10ad092ec31715f906e0d2ee7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fefb9165f23fe9d10ad092ec31715f906e0d2ee7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fefb9165f23fe9d10ad092ec31715f906e0d2ee7"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 5,
      "deletions": 14
    },
    "files": [
      {
        "sha": "f44ed712d92fde156eb7350b821c1c5555061262",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a046cdc1423963bdcbcf9bb98560af61fa90b37/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a046cdc1423963bdcbcf9bb98560af61fa90b37/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=7a046cdc1423963bdcbcf9bb98560af61fa90b37",
        "patch": "@@ -59,29 +59,20 @@ class CAddrManTest : public CAddrMan\n      }\n };\n \n-static CNetAddr ResolveIP(const char* ip)\n+static CNetAddr ResolveIP(const std::string& ip)\n {\n     CNetAddr addr;\n     BOOST_CHECK_MESSAGE(LookupHost(ip, addr, false), strprintf(\"failed to resolve: %s\", ip));\n     return addr;\n }\n \n-static CNetAddr ResolveIP(std::string ip)\n-{\n-    return ResolveIP(ip.c_str());\n-}\n-\n-static CService ResolveService(const char* ip, int port = 0)\n+static CService ResolveService(const std::string& ip, const int port = 0)\n {\n     CService serv;\n     BOOST_CHECK_MESSAGE(Lookup(ip, serv, port, false), strprintf(\"failed to resolve: %s:%i\", ip, port));\n     return serv;\n }\n \n-static CService ResolveService(std::string ip, int port = 0)\n-{\n-    return ResolveService(ip.c_str(), port);\n-}\n \n BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n "
      },
      {
        "sha": "58e0565bdabe400f12199f2ca002ea13bb2fada9",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a046cdc1423963bdcbcf9bb98560af61fa90b37/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a046cdc1423963bdcbcf9bb98560af61fa90b37/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=7a046cdc1423963bdcbcf9bb98560af61fa90b37",
        "patch": "@@ -13,21 +13,21 @@\n \n BOOST_FIXTURE_TEST_SUITE(netbase_tests, BasicTestingSetup)\n \n-static CNetAddr ResolveIP(const char* ip)\n+static CNetAddr ResolveIP(const std::string& ip)\n {\n     CNetAddr addr;\n     LookupHost(ip, addr, false);\n     return addr;\n }\n \n-static CSubNet ResolveSubNet(const char* subnet)\n+static CSubNet ResolveSubNet(const std::string& subnet)\n {\n     CSubNet ret;\n     LookupSubNet(subnet, ret);\n     return ret;\n }\n \n-static CNetAddr CreateInternal(const char* host)\n+static CNetAddr CreateInternal(const std::string& host)\n {\n     CNetAddr addr;\n     addr.SetInternal(host);"
      }
    ]
  }
]