DrahtBot,2021-02-11 05:54:09,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21270 ([Bundle 4/n] Prune g_chainman usage in validation-adjacent modules by dongcarl)\n* #21224 ([p2p] Halt processing o",https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-777218822,777218822,
ajtowns,2021-02-15 02:32:35,Rebased for conflict with #21062 ,https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-778900606,778900606,
jnewbery,2021-02-15 11:42:30,Concept ACK. Will review once this is rebased and out of draft status.,https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-779167259,779167259,
ajtowns,2021-02-15 14:24:55,"Rebased, tweaked the orphan code a little, and cleaned up the results some. Should be ready for review.",https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-779255411,779255411,
amitiuttarwar,2021-02-16 03:42:50,"concept ACK, starting to review. \n\ntwo thoughts for now-\n1. I don't quite understand the context of the first commit. There are other commits that are essentially move-only, so wondering how you grouped together the changes in that commit. \n2. Are you open to some feedback around improvements of code you moved around? eg. using chrono instead of ints? or are you trying to keep the diff as ",https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-779561043,779561043,
ajtowns,2021-02-17 07:30:41,"@amitiuttarwar 1) The first commit just sets up the new files and moves whole functions / globals into it. Later commits are pulling code out into their own functions, restructuring functions into classes, etc. 2) hmm, I was ignoring chrono stuff since #21015 exists, but I guess it didn't switch COrphanTx to chrono. Not sure it makes sense to add more things to this PR versus adding to the #20758 ",https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-780364661,780364661,
ajtowns,2021-02-26 15:06:24,"Added most of jnewbery's suggestions, and also added some missing `const` annotations on `TxOrphanage` methods.",https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-786703013,786703013,
ajtowns,2021-03-02 09:43:42,"Added a commit to update comments with suggestions.\n\n@jnewbery yeah, other commit could have been dropped -- it was only there to move `AddOrphan` into `PeerManagerImpl` so that `m_orphanage` could also be in `PeerManagerImpl`, but that stopped being an issue after doing away with net_processing's `AddOrphan` -- but should be pretty harmless to leave it there.",https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-788772866,788772866,
jnewbery,2021-03-02 11:37:45,utACK 5e50e2d1b9,https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-788844262,788844262,
amitiuttarwar,2021-03-02 20:04:36,utACK 5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8 ,https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-789177849,789177849,
glozow,2021-03-02 23:47:56,"re ACK https://github.com/bitcoin/bitcoin/pull/21148/commits/5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8, comment updates",https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-789306761,789306761,
laanwj,2021-03-04 09:16:21,"> the orphanage is v. beautiful! my least favorite thing about it is the two-line if statements without parenthesis (they were copied over in move-only commits), but I'll survive :)\n\nYes I like how this cleanly encapsulates the transaction orphan handling, exposing a single documented interface in a small header file.\n\nIt is clearly an improvement. The only thing I don't completely underst",https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-790460791,790460791,
jnewbery,2021-03-04 10:13:46,">  The only thing I don't completely understand is why the g_cs_orphans lock is global and not on the orphanage itself, but maybe that's too much impact?\n\n`g_cs_orphans` is still used to guard some objects outside the orphange (`Peer.m_orphan_work_set` and `vExtraTxnForCompact`). The plan is for future PRs to remove those dependencies and make the orphan mutex a member of the orphanage.",https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-790499978,790499978,
laanwj,2021-03-04 12:08:42,"@jnewbery Good to know, thanks!",https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-790572101,790572101,
MarcoFalke,2021-03-05 11:12:56,pm ACK,https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-791352871,791352871,
jnewbery,2021-02-25 10:18:48,"It's generally recommended to include the c++ versions of the c headers:\n\n```suggestion\n#include <cassert>\n```",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582712110,582712110,src/txorphanage.cpp
jnewbery,2021-02-25 10:59:54,"Possibly slightly more idiomatic to drop the `> 0`:\n\n```suggestion\n        return m_wtxid_to_orphan_it.count(gtxid.GetHash());\n```\n\nSame below",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582740285,582740285,src/txorphanage.cpp
jnewbery,2021-02-25 11:14:07,"This feels like it's exposing too much of the internals to the caller. The pointer is only valid as long as `m_orphans` isn't updated while it's being held. That's protected by `g_cs_orphans`, but it still feels unnecessary.\n\nThe only parts of `OrphanTx` that are needed by the caller in the one place this is used are the `CTransactionRef` and the `NodeId`, both of which are cheap to copy. How ",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582748821,582748821,src/txorphanage.h
jnewbery,2021-02-25 11:17:02,"Can you include `logging.h` rather than relying on it being included transitively?\n\nIt might also make sense to change all these logs' categories to NET at some point?",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582750624,582750624,src/txorphanage.cpp
jnewbery,2021-02-25 11:35:38,"This is using the definition for `CBlock` which is included transitively through txorphanage.h -> net.h -> chainparams.h -> primitives/block.h.\n\nYou could erase that dependency, so that the orphanage has no concept of blocks:\n\n```suggestion\n    /** Erase orphans */\n    void EraseOrphans(const std::vector<CTransactionRef>& txs) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n```\n\nAnd the",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582761488,582761488,src/txorphanage.h
jnewbery,2021-02-25 11:41:37,I'm not sure if this alias is very useful. It's only used in two places.,https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582765024,582765024,src/txorphanage.h
jnewbery,2021-02-25 11:44:18,"If you're touching this comment, then maybe just remove it. These section markers have long outlived their usefulness.",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582766809,582766809,src/net_processing.cpp
jnewbery,2021-02-25 11:45:20,:heart: ,https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582767376,582767376,src/net_processing.cpp
jnewbery,2021-02-25 11:47:05,It might make sense to move the orphanage unit tests into their own file now that txorphanage has been split out from net_processing?,https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582768423,582768423,src/test/denialofservice_tests.cpp
jnewbery,2021-02-25 11:51:58,"Doesn't have to be in this PR, but perhaps a future PR could make `nMaxOrphanTx` a ctor argument, and then just call `LimitOrphans()` without an argument. This is the only place in the non-test code that `LimitOrphans` is called, and it's always with the same argument.\n\nIn fact, once `const nMaxOrphanTx` is a member of the orphanage, we don't need a `LimitOrphans()` call at all. We can just li",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582771389,582771389,src/net_processing.cpp
jnewbery,2021-02-25 11:56:27,"Consider just removing this function entirely:\n\n- it's only called in one place\n- it consists of two function calls\n- the return value is discarded",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582774084,582774084,src/net_processing.cpp
glozow,2021-02-25 13:54:57,"I think these could be const, they should never change?\n```suggestion\n        const NodeId fromPeer;\n        const int64_t nTimeExpire;\n```",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582850158,582850158,src/txorphanage.h
ajtowns,2021-02-26 14:20:26,I think that would be a good idea for a later PR (particularly one that added more test coverage),https://github.com/bitcoin/bitcoin/pull/21148#discussion_r583670694,583670694,src/test/denialofservice_tests.cpp
ajtowns,2021-02-26 14:21:19,Not sure about the `const` part -- it might make sense for the limit to change depending on how much pressure there is in the mempool at large. Agree otherwise.,https://github.com/bitcoin/bitcoin/pull/21148#discussion_r583671340,583671340,src/net_processing.cpp
ajtowns,2021-02-26 14:49:22,"Dang, why didn't I think of that.",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r583691471,583691471,src/net_processing.cpp
ajtowns,2021-02-26 14:59:21,Done. First instance of structure binding in the codebase?,https://github.com/bitcoin/bitcoin/pull/21148#discussion_r583698718,583698718,src/txorphanage.h
ajtowns,2021-02-26 15:04:39,"Definite nack on the comment change -- the function erases orphans that are double-spent by txs in the block, not just orphans that are included in the block directly.\n\nI'm not against having vtx dereferenced in the caller, but the logic seems specific to a block arriving: if it were just an in-mempool tx double-spending an orphan tx, it might be that the orphan is actually a successful RBF an",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r583702390,583702390,src/txorphanage.h
jnewbery,2021-02-26 17:02:59,"Ah, good point about erasing orphans that are conflicted by the block. I agree that it's fine to keep this as it is.\n\nThanks for including primitives/block.h",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r583784124,583784124,src/txorphanage.h
jnewbery,2021-02-27 09:32:20,"Perhaps update this comment to reflect the new return value:\n\n```suggestion\n    /** Get a transation ref and originating peer for an orphan transaction\n      * (transaction ref will be nullptr if not found) */```",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r584096409,584096409,src/txorphanage.h
jnewbery,2021-02-27 09:41:10,"```suggestion\n    /** Erase all orphans included in or invalidated by a new block */\n```\n\nis slightly clearer. The `/` could be interpreted as 'and'.",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r584097273,584097273,src/txorphanage.h
glozow,2021-03-01 19:42:42,"~Question: Would using a `std::list` be simpler? It looks like we use `list_pos` + swapping with the last element to get better performance on random eviction in a vector, but why not just use a linked list?~",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r584999313,584999313,src/txorphanage.h
glozow,2021-03-01 19:50:38,"Question: This data structure doesn't seem entirely necessary to me... Would it be better to just have `HaveTx` search for the tx in `m_orphans` using `std::find_if()` and a predicate like `[&, uint256 wtxid](OrphanTx& orphan) { return orphan.tx->GetWitnessHash() == wtxid }` ?",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585004118,585004118,src/txorphanage.h
glozow,2021-03-01 20:29:02,"Technically not guaranteed to be orphans? I think adding a bit more overall context could help someone looking at orphan handling for the first time (was the case for me)\n```suggestion\n/** A class to temporarily track transactions we believe to be orphans (failed on TX_MISSING_INPUTS)\n* while we request the missing parent(s). Since we cannot distinguish orphans from bad transactions\n* with",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585027396,585027396,src/txorphanage.h
amitiuttarwar,2021-03-02 00:58:02,"In commit 38a11c355acfc15134c682571b3d92f66b0e7c3c, “txorphanage: Add lock annotations” \n\nIs the main advantage of moving where we grab `g_cs_orphans` from `EraseOrphansFor` into the call site in `FinalizeNode` to allow for the clang safety annotations / dynamic `AssertLockHeld` check? Since my understanding is that `FinalizeNode` is sometimes called with `g_cs_orphans` already held, so this d",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585166595,585166595,src/net_processing.cpp
amitiuttarwar,2021-03-02 01:31:19,"aw yeah, that structure binding ✨",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585180763,585180763,src/net_processing.cpp
amitiuttarwar,2021-03-02 02:13:43,"Is there a reason `peer` here and `AddTx`, `EraseForPeer` are non-const? I think they can be but since most things in this header are constified & it's consistently the `peer NodeId` that's not, I'm wondering if I'm missing something.\n\nAlso, I like the const member functions, that's awesome for communicating/enforcing the intention of the functions. ",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585196203,585196203,src/txorphanage.h
amitiuttarwar,2021-03-02 02:36:45,"hmm, it seems like a tradeoff between memory & runtime complexity. the `HaveTx` lookup is currently logarithmic, but using a `find_if` would be linear. I'm guessing opting for the additional data structure was chosen to minimize the runtime impact on the program since we call this function so frequently (at least.. for every txid in inv messages, before we send a getdata, when processing a tx)",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585203876,585203876,src/txorphanage.h
amitiuttarwar,2021-03-02 02:45:44,+1 came here to make a very similar suggestion :) ,https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585207010,585207010,src/net_processing.cpp
sipa,2021-03-02 03:00:15,Woah! I forgot we got that with C++17.,https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585212013,585212013,src/net_processing.cpp
ajtowns,2021-03-02 08:59:07,The `CTransactionRef tx` could be const as well; the only entry that changes after insertion is `list_pos`. Not sure there's much benefit to adding the const annotations for that though.,https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585379261,585379261,src/txorphanage.h
ajtowns,2021-03-02 09:31:25,"denialofservice_tests locks `g_cs_orphans` then calls `EraseOrphansFor`, so it would have required more changes to have `EraseOrphansFor` do the locking.\n\nI don't think `FinalizeNode` is called from anywhere that holds `g_cs_orphans`? Am I missing somewhere?",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585403627,585403627,src/net_processing.cpp
ajtowns,2021-03-02 09:35:51,I don't usually add `const` to arguments that are passed by vaue rather than reference -- it makes no difference to the caller; and not much difference to the implementation.,https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585406986,585406986,src/txorphanage.h
jnewbery,2021-03-02 11:39:27,Here: https://github.com/bitcoin/bitcoin/blob/b9f41df1ead4b6a83a51fc41966b111c8459c313/src/init.cpp#L213-L214 ?,https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585492464,585492464,src/net_processing.cpp
ajtowns,2021-03-02 13:33:06,"Yes, that's it!\n\nStopNodes() calls DeleteNode() calls FinalizeNode() calls EraseForPeer(); with EraseForPeer needing `g_cs_orphans`. StopNodes locks `cs_vNodes` before calling DeleteNode, so `g_cs_orphans` has to be locked before calling CConnman::StopNodes but only if it's linked to a PeerManagerImpl.\n\nStopNodes is also called from `~CConnman` so that path will still get a lock order viol",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585566739,585566739,src/net_processing.cpp
jnewbery,2021-03-02 14:35:23,"> for a future PR, I think the aim is to make g_cs_orphans become private: TxOrphanage::m_mutex and not have it be the last thing locked / first thing released so that the ordering constraint goes away, and then it should trivially be non-recursive.\n\nConcept ACK :)",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585616200,585616200,src/net_processing.cpp
ajtowns,2021-03-02 16:39:23,"https://github.com/ajtowns/bitcoin/commits/202102-orphanworkset has work-in-progress that turns g_cs_orphans a protected m_mutex, doesn't quite turn orphans back into the responsibility of who sent them rather than who sent their final parent though.",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585725021,585725021,src/net_processing.cpp
amitiuttarwar,2021-03-02 20:03:10,"ah, right. thanks ",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585870278,585870278,src/txorphanage.h
ariard,2021-03-04 14:37:28,"Let's say an attacker sends an invalid orphan Z to Alice. Such orphan will be stored\nin `m_orphans` until expiration time, random eviction or parent reception. Another honest\npeer Bob announce Z's parent and Z through txid-relay to Alice. Announcement for Z from Bob\nwon't be scheduled for request by `AddTxAnnouncement()` as it'll be bounced off before\ndue to a positive `AlreadyHaveTx()`.\",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r587522262,587522262,src/txorphanage.cpp
ariard,2021-03-04 14:54:04,"Couldn't the ""orphanage overflow"" log L3131 in net_processing be moved here instead of returning `nEvicted` ? And change the message to dissociate clearly expiration-from-eviction.",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r587536050,587536050,src/txorphanage.cpp
ariard,2021-03-04 15:06:40,"If we had a `std::map<uint256, OrphanMap::iterator> m_parentid_to_orphan_it` index we could update each peer's `orphan_work_set` in function of the parent received through this block. \n\nOtherwise, I think you might have stalling valid orphans never re-processed. Any ulterior parent announcement should be bounce off by `m_recent_confirmed_transactions`. Though rare enough to not be worthy of th",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r587547275,587547275,src/txorphanage.cpp
ariard,2021-03-04 15:07:34,nit: originating,https://github.com/bitcoin/bitcoin/pull/21148#discussion_r587548092,587548092,src/txorphanage.h
ajtowns,2021-03-07 08:40:07,"I think what you're saying is: Bob has tx `P` (parent) and a child of that tx `C`. Mallory knows both and malleates the witness of `C` so that it creates a new invalid tx `X` that has the same txid as `C` but obviously a different wtxid. Mallory relays `X` to Alice before Alice hears about `P` or `C`. Alice adds `X` to the orphan pool and requests `P` from Mallory by wtxid.\n\nI think the expect",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r588994829,588994829,src/txorphanage.cpp
ariard,2021-03-08 12:43:54,"> I'm not sure if we'll re-request from other honest peers at that point in normal usage\n\nOnce the transaction is rejected from orphanage in reason of an already present orphan, we forget its txid/wtxid from tx-requester. So effectively, we shouldn't re-request it from other onest peers at that stage. Ultimately, parent `P` withhold by Mallory should expire, Alice will fetch a valid parent `P`",https://github.com/bitcoin/bitcoin/pull/21148#discussion_r589393892,589393892,src/txorphanage.cpp
