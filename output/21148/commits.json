[
  {
    "sha": "9d5313df7eedad8562c822f5477747e924929fd3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDUzMTNkZjdlZWRhZDg1NjJjODIyZjU0Nzc3NDdlOTI0OTI5ZmQz",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-30T14:55:54Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:03Z"
      },
      "message": "move-only: Add txorphanage module\n\nThis module captures orphan tracking code for tx relay.\n\nCan be reviewed with --color-moved=dimmed-zebra",
      "tree": {
        "sha": "536a9a73902a59cf14a69c3528d938587573d905",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/536a9a73902a59cf14a69c3528d938587573d905"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d5313df7eedad8562c822f5477747e924929fd3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d5313df7eedad8562c822f5477747e924929fd3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d5313df7eedad8562c822f5477747e924929fd3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d5313df7eedad8562c822f5477747e924929fd3/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56f06a986385b24818a53fde24c6f3a0b01f1a93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56f06a986385b24818a53fde24c6f3a0b01f1a93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56f06a986385b24818a53fde24c6f3a0b01f1a93"
      }
    ],
    "stats": {
      "total": 304,
      "additions": 170,
      "deletions": 134
    },
    "files": [
      {
        "sha": "a797075d07d7390f50d2c993cce84a7b3c4e4384",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5313df7eedad8562c822f5477747e924929fd3/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5313df7eedad8562c822f5477747e924929fd3/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9d5313df7eedad8562c822f5477747e924929fd3",
        "patch": "@@ -224,8 +224,9 @@ BITCOIN_CORE_H = \\\n   timedata.h \\\n   torcontrol.h \\\n   txdb.h \\\n-  txrequest.h \\\n   txmempool.h \\\n+  txorphanage.h \\\n+  txrequest.h \\\n   undo.h \\\n   util/asmap.h \\\n   util/bip32.h \\\n@@ -347,8 +348,9 @@ libbitcoin_server_a_SOURCES = \\\n   timedata.cpp \\\n   torcontrol.cpp \\\n   txdb.cpp \\\n-  txrequest.cpp \\\n   txmempool.cpp \\\n+  txorphanage.cpp \\\n+  txrequest.cpp \\\n   validation.cpp \\\n   validationinterface.cpp \\\n   versionbits.cpp \\"
      },
      {
        "sha": "99a88ffa29fcd537c5b1fa48e991cc787fb83cff",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5313df7eedad8562c822f5477747e924929fd3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5313df7eedad8562c822f5477747e924929fd3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9d5313df7eedad8562c822f5477747e924929fd3",
        "patch": "@@ -52,6 +52,7 @@\n #include <torcontrol.h>\n #include <txdb.h>\n #include <txmempool.h>\n+#include <txorphanage.h>\n #include <util/asmap.h>\n #include <util/check.h>\n #include <util/moneystr.h>"
      },
      {
        "sha": "d842dca95b65e353688837f666ba927cbb35887e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 122,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5313df7eedad8562c822f5477747e924929fd3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5313df7eedad8562c822f5477747e924929fd3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9d5313df7eedad8562c822f5477747e924929fd3",
        "patch": "@@ -26,6 +26,7 @@\n #include <streams.h>\n #include <tinyformat.h>\n #include <txmempool.h>\n+#include <txorphanage.h>\n #include <txrequest.h>\n #include <util/check.h> // For NDEBUG compile time check\n #include <util/strencodings.h>\n@@ -35,10 +36,6 @@\n #include <memory>\n #include <typeinfo>\n \n-/** Expiration time for orphan transactions in seconds */\n-static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n-/** Minimum time between orphan transactions expire time checks in seconds */\n-static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n /** How long to cache transactions in mapRelay for normal relay */\n static constexpr std::chrono::seconds RELAY_TX_CACHE_TIME = std::chrono::minutes{15};\n /** How long a transaction has to be in the mempool before it can unconditionally be relayed (even when not in mapRelay). */\n@@ -148,25 +145,6 @@ static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n /** the maximum percentage of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_PCT_ADDR_TO_SEND = 23;\n \n-struct COrphanTx {\n-    // When modifying, adapt the copy of this definition in tests/DoS_tests.\n-    CTransactionRef tx;\n-    NodeId fromPeer;\n-    int64_t nTimeExpire;\n-    size_t list_pos;\n-};\n-\n-/** Guards orphan transactions and extra txs for compact blocks */\n-RecursiveMutex g_cs_orphans;\n-/** Map from txid to orphan transaction record. Limited by\n- *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n-std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n-/** Index from wtxid into the mapOrphanTransactions to lookup orphan\n- *  transactions using their witness ids. */\n-std::map<uint256, std::map<uint256, COrphanTx>::iterator> g_orphans_by_wtxid GUARDED_BY(g_cs_orphans);\n-\n-void EraseOrphansFor(NodeId peer);\n-\n // Internal stuff\n namespace {\n /** Blocks that are in flight, and that are in the queue to be downloaded. */\n@@ -487,21 +465,6 @@ namespace {\n     /** Number of preferable block download peers. */\n     int nPreferredDownload GUARDED_BY(cs_main) = 0;\n \n-    struct IteratorComparator\n-    {\n-        template<typename I>\n-        bool operator()(const I& a, const I& b) const\n-        {\n-            return &(*a) < &(*b);\n-        }\n-    };\n-\n-    /** Index from the parents' COutPoint into the mapOrphanTransactions. Used\n-     *  to remove orphan transactions from the mapOrphanTransactions */\n-    std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n-    /** Orphan transactions in vector for quick random eviction */\n-    std::vector<std::map<uint256, COrphanTx>::iterator> g_orphan_list GUARDED_BY(g_cs_orphans);\n-\n     /** Orphan/conflicted/etc transactions that are kept for compact block reconstruction.\n      *  The last -blockreconstructionextratxn/DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN of\n      *  these are kept in a ring buffer */\n@@ -1169,90 +1132,6 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n     return true;\n }\n \n-int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n-{\n-    std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n-    if (it == mapOrphanTransactions.end())\n-        return 0;\n-    for (const CTxIn& txin : it->second.tx->vin)\n-    {\n-        auto itPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n-        if (itPrev == mapOrphanTransactionsByPrev.end())\n-            continue;\n-        itPrev->second.erase(it);\n-        if (itPrev->second.empty())\n-            mapOrphanTransactionsByPrev.erase(itPrev);\n-    }\n-\n-    size_t old_pos = it->second.list_pos;\n-    assert(g_orphan_list[old_pos] == it);\n-    if (old_pos + 1 != g_orphan_list.size()) {\n-        // Unless we're deleting the last entry in g_orphan_list, move the last\n-        // entry to the position we're deleting.\n-        auto it_last = g_orphan_list.back();\n-        g_orphan_list[old_pos] = it_last;\n-        it_last->second.list_pos = old_pos;\n-    }\n-    g_orphan_list.pop_back();\n-    g_orphans_by_wtxid.erase(it->second.tx->GetWitnessHash());\n-\n-    mapOrphanTransactions.erase(it);\n-    return 1;\n-}\n-\n-void EraseOrphansFor(NodeId peer)\n-{\n-    LOCK(g_cs_orphans);\n-    int nErased = 0;\n-    std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n-    while (iter != mapOrphanTransactions.end())\n-    {\n-        std::map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n-        if (maybeErase->second.fromPeer == peer)\n-        {\n-            nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n-        }\n-    }\n-    if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n-}\n-\n-\n-unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n-{\n-    LOCK(g_cs_orphans);\n-\n-    unsigned int nEvicted = 0;\n-    static int64_t nNextSweep;\n-    int64_t nNow = GetTime();\n-    if (nNextSweep <= nNow) {\n-        // Sweep out expired orphan pool entries:\n-        int nErased = 0;\n-        int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n-        std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n-        while (iter != mapOrphanTransactions.end())\n-        {\n-            std::map<uint256, COrphanTx>::iterator maybeErase = iter++;\n-            if (maybeErase->second.nTimeExpire <= nNow) {\n-                nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n-            } else {\n-                nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n-            }\n-        }\n-        // Sweep again 5 minutes after the next entry that expires in order to batch the linear scan.\n-        nNextSweep = nMinExpTime + ORPHAN_TX_EXPIRE_INTERVAL;\n-        if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx due to expiration\\n\", nErased);\n-    }\n-    FastRandomContext rng;\n-    while (mapOrphanTransactions.size() > nMaxOrphans)\n-    {\n-        // Evict a random orphan:\n-        size_t randompos = rng.randrange(g_orphan_list.size());\n-        EraseOrphanTx(g_orphan_list[randompos]->first);\n-        ++nEvicted;\n-    }\n-    return nEvicted;\n-}\n-\n void PeerManagerImpl::Misbehaving(const NodeId pnode, const int howmuch, const std::string& message)\n {\n     assert(howmuch > 0);"
      },
      {
        "sha": "3b09907443233fda1b41625dc9481ce9a5038dc3",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5313df7eedad8562c822f5477747e924929fd3/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5313df7eedad8562c822f5477747e924929fd3/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=9d5313df7eedad8562c822f5477747e924929fd3",
        "patch": "@@ -15,7 +15,6 @@ class CTxMemPool;\n class ChainstateManager;\n \n extern RecursiveMutex cs_main;\n-extern RecursiveMutex g_cs_orphans;\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;"
      },
      {
        "sha": "e2e38b3f03e9f7236c3939da27fe9c04962a6619",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5313df7eedad8562c822f5477747e924929fd3/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5313df7eedad8562c822f5477747e924929fd3/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=9d5313df7eedad8562c822f5477747e924929fd3",
        "patch": "@@ -14,6 +14,7 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <serialize.h>\n+#include <txorphanage.h>\n #include <util/memory.h>\n #include <util/string.h>\n #include <util/system.h>\n@@ -45,15 +46,6 @@ struct CConnmanTest : public CConnman {\n \n // Tests these internal-to-net_processing.cpp methods:\n extern bool AddOrphanTx(const CTransactionRef& tx, NodeId peer);\n-extern void EraseOrphansFor(NodeId peer);\n-extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n-\n-struct COrphanTx {\n-    CTransactionRef tx;\n-    NodeId fromPeer;\n-    int64_t nTimeExpire;\n-};\n-extern std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n \n static CService ip(uint32_t i)\n {"
      },
      {
        "sha": "cea724344e665b75f9bcdf1b11c653e9e7c22d68",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5313df7eedad8562c822f5477747e924929fd3/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5313df7eedad8562c822f5477747e924929fd3/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=9d5313df7eedad8562c822f5477747e924929fd3",
        "patch": "@@ -18,6 +18,7 @@\n #include <test/util/net.h>\n #include <test/util/setup_common.h>\n #include <test/util/validation.h>\n+#include <txorphanage.h>\n #include <util/memory.h>\n #include <validationinterface.h>\n #include <version.h>"
      },
      {
        "sha": "12186f4f25d64b9ffba9543f930803b975f619d2",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5313df7eedad8562c822f5477747e924929fd3/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5313df7eedad8562c822f5477747e924929fd3/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=9d5313df7eedad8562c822f5477747e924929fd3",
        "patch": "@@ -13,6 +13,7 @@\n #include <test/util/net.h>\n #include <test/util/setup_common.h>\n #include <test/util/validation.h>\n+#include <txorphanage.h>\n #include <util/memory.h>\n #include <validation.h>\n #include <validationinterface.h>"
      },
      {
        "sha": "fb03914681e830456e0693c3323312ba8796fb17",
        "filename": "src/txorphanage.cpp",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5313df7eedad8562c822f5477747e924929fd3/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5313df7eedad8562c822f5477747e924929fd3/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=9d5313df7eedad8562c822f5477747e924929fd3",
        "patch": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txorphanage.h>\n+\n+#include <consensus/validation.h>\n+#include <logging.h>\n+#include <policy/policy.h>\n+\n+#include <cassert>\n+\n+/** Minimum time between orphan transactions expire time checks in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n+\n+RecursiveMutex g_cs_orphans;\n+\n+std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+std::map<uint256, std::map<uint256, COrphanTx>::iterator> g_orphans_by_wtxid GUARDED_BY(g_cs_orphans);\n+\n+    std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n+\n+    std::vector<std::map<uint256, COrphanTx>::iterator> g_orphan_list GUARDED_BY(g_cs_orphans);\n+\n+int EraseOrphanTx(uint256 hash)\n+{\n+    std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n+    if (it == mapOrphanTransactions.end())\n+        return 0;\n+    for (const CTxIn& txin : it->second.tx->vin)\n+    {\n+        auto itPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n+        if (itPrev == mapOrphanTransactionsByPrev.end())\n+            continue;\n+        itPrev->second.erase(it);\n+        if (itPrev->second.empty())\n+            mapOrphanTransactionsByPrev.erase(itPrev);\n+    }\n+\n+    size_t old_pos = it->second.list_pos;\n+    assert(g_orphan_list[old_pos] == it);\n+    if (old_pos + 1 != g_orphan_list.size()) {\n+        // Unless we're deleting the last entry in g_orphan_list, move the last\n+        // entry to the position we're deleting.\n+        auto it_last = g_orphan_list.back();\n+        g_orphan_list[old_pos] = it_last;\n+        it_last->second.list_pos = old_pos;\n+    }\n+    g_orphan_list.pop_back();\n+    g_orphans_by_wtxid.erase(it->second.tx->GetWitnessHash());\n+\n+    mapOrphanTransactions.erase(it);\n+    return 1;\n+}\n+\n+void EraseOrphansFor(NodeId peer)\n+{\n+    LOCK(g_cs_orphans);\n+    int nErased = 0;\n+    std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+    while (iter != mapOrphanTransactions.end())\n+    {\n+        std::map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        if (maybeErase->second.fromPeer == peer)\n+        {\n+            nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n+        }\n+    }\n+    if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n+}\n+\n+unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n+{\n+    LOCK(g_cs_orphans);\n+\n+    unsigned int nEvicted = 0;\n+    static int64_t nNextSweep;\n+    int64_t nNow = GetTime();\n+    if (nNextSweep <= nNow) {\n+        // Sweep out expired orphan pool entries:\n+        int nErased = 0;\n+        int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n+        std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+        while (iter != mapOrphanTransactions.end())\n+        {\n+            std::map<uint256, COrphanTx>::iterator maybeErase = iter++;\n+            if (maybeErase->second.nTimeExpire <= nNow) {\n+                nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n+            } else {\n+                nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n+            }\n+        }\n+        // Sweep again 5 minutes after the next entry that expires in order to batch the linear scan.\n+        nNextSweep = nMinExpTime + ORPHAN_TX_EXPIRE_INTERVAL;\n+        if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx due to expiration\\n\", nErased);\n+    }\n+    FastRandomContext rng;\n+    while (mapOrphanTransactions.size() > nMaxOrphans)\n+    {\n+        // Evict a random orphan:\n+        size_t randompos = rng.randrange(g_orphan_list.size());\n+        EraseOrphanTx(g_orphan_list[randompos]->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;\n+}\n+"
      },
      {
        "sha": "d97b4b1f43ba34eb4dbe081ddcdceaebf9bd0e02",
        "filename": "src/txorphanage.h",
        "status": "added",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5313df7eedad8562c822f5477747e924929fd3/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5313df7eedad8562c822f5477747e924929fd3/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=9d5313df7eedad8562c822f5477747e924929fd3",
        "patch": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Expiration time for orphan transactions in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+struct COrphanTx {\n+    // When modifying, adapt the copy of this definition in tests/DoS_tests.\n+    CTransactionRef tx;\n+    NodeId fromPeer;\n+    int64_t nTimeExpire;\n+    size_t list_pos;\n+};\n+\n+int EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+void EraseOrphansFor(NodeId peer);\n+unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n+\n+/** Map from txid to orphan transaction record. Limited by\n+ *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+extern std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+\n+/** Index from wtxid into the mapOrphanTransactions to lookup orphan\n+ *  transactions using their witness ids. */\n+extern std::map<uint256, std::map<uint256, COrphanTx>::iterator> g_orphans_by_wtxid GUARDED_BY(g_cs_orphans);\n+\n+    struct IteratorComparator\n+    {\n+        template<typename I>\n+        bool operator()(const I& a, const I& b) const\n+        {\n+            return &(*a) < &(*b);\n+        }\n+    };\n+\n+    /** Index from the parents' COutPoint into the mapOrphanTransactions. Used\n+     *  to remove orphan transactions from the mapOrphanTransactions */\n+    extern std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n+\n+    /** Orphan transactions in vector for quick random eviction */\n+    extern std::vector<std::map<uint256, COrphanTx>::iterator> g_orphan_list GUARDED_BY(g_cs_orphans);\n+\n+#endif // BITCOIN_TXORPHANAGE_H"
      }
    ]
  },
  {
    "sha": "81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWRkNTdlNWIxYWIxYWZhN2U1OTQ2OGUzMGVmNDFiZDM0ZjBjOGQ3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-15T13:04:21Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:07Z"
      },
      "message": "txorphanage: Pass uint256 by reference instead of value",
      "tree": {
        "sha": "f72b8a881133c56daec1a2dc6b9c1cd41267f126",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f72b8a881133c56daec1a2dc6b9c1cd41267f126"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d5313df7eedad8562c822f5477747e924929fd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d5313df7eedad8562c822f5477747e924929fd3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d5313df7eedad8562c822f5477747e924929fd3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d418ed93231d243397945f2c777013db54c53190",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7",
        "patch": "@@ -22,9 +22,9 @@ std::map<uint256, std::map<uint256, COrphanTx>::iterator> g_orphans_by_wtxid GUA\n \n     std::vector<std::map<uint256, COrphanTx>::iterator> g_orphan_list GUARDED_BY(g_cs_orphans);\n \n-int EraseOrphanTx(uint256 hash)\n+int EraseOrphanTx(const uint256& txid)\n {\n-    std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n+    std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(txid);\n     if (it == mapOrphanTransactions.end())\n         return 0;\n     for (const CTxIn& txin : it->second.tx->vin)"
      },
      {
        "sha": "343f12c9c5f787efc6ada828c5202abf73333499",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7",
        "patch": "@@ -23,7 +23,7 @@ struct COrphanTx {\n     size_t list_pos;\n };\n \n-int EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+int EraseOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n void EraseOrphansFor(NodeId peer);\n unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n "
      }
    ]
  },
  {
    "sha": "38a11c355acfc15134c682571b3d92f66b0e7c3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGExMWMzNTVhY2ZjMTUxMzRjNjgyNTcxYjNkOTJmNjZiMGU3YzNj",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T15:35:08Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:10Z"
      },
      "message": "txorphanage: Add lock annotations\n\nEraseOrphansFor was called both with and without g_cs_orphans held,\ncorrect that so that it's always called with it already held.\n\nLimitOrphanTxSize was always called with g_cs_orphans held, so\nadd annotations and don't lock it a second time.",
      "tree": {
        "sha": "05fb4cb6b122f806b6a5a9cd81c75f4989b32f9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05fb4cb6b122f806b6a5a9cd81c75f4989b32f9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38a11c355acfc15134c682571b3d92f66b0e7c3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38a11c355acfc15134c682571b3d92f66b0e7c3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38a11c355acfc15134c682571b3d92f66b0e7c3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38a11c355acfc15134c682571b3d92f66b0e7c3c/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "01effa92458f8f5a7dc1e3be664d11a1749939dc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38a11c355acfc15134c682571b3d92f66b0e7c3c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38a11c355acfc15134c682571b3d92f66b0e7c3c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=38a11c355acfc15134c682571b3d92f66b0e7c3c",
        "patch": "@@ -1003,7 +1003,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node, bool& fUpdateConnectionTim\n     for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n     }\n-    EraseOrphansFor(nodeid);\n+    WITH_LOCK(g_cs_orphans, EraseOrphansFor(nodeid));\n     m_txrequest.DisconnectedPeer(nodeid);\n     nPreferredDownload -= state->fPreferredDownload;\n     nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);"
      },
      {
        "sha": "c883aaa57fd9f7227e466cbb3a58fe9e2a348479",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38a11c355acfc15134c682571b3d92f66b0e7c3c/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38a11c355acfc15134c682571b3d92f66b0e7c3c/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=38a11c355acfc15134c682571b3d92f66b0e7c3c",
        "patch": "@@ -55,7 +55,8 @@ int EraseOrphanTx(const uint256& txid)\n \n void EraseOrphansFor(NodeId peer)\n {\n-    LOCK(g_cs_orphans);\n+    AssertLockHeld(g_cs_orphans);\n+\n     int nErased = 0;\n     std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n     while (iter != mapOrphanTransactions.end())\n@@ -71,7 +72,7 @@ void EraseOrphansFor(NodeId peer)\n \n unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n {\n-    LOCK(g_cs_orphans);\n+    AssertLockHeld(g_cs_orphans);\n \n     unsigned int nEvicted = 0;\n     static int64_t nNextSweep;"
      },
      {
        "sha": "d8dfaec8a007f116b8c70bd7ccaa6bbded1ef25c",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38a11c355acfc15134c682571b3d92f66b0e7c3c/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38a11c355acfc15134c682571b3d92f66b0e7c3c/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=38a11c355acfc15134c682571b3d92f66b0e7c3c",
        "patch": "@@ -24,8 +24,8 @@ struct COrphanTx {\n };\n \n int EraseOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void EraseOrphansFor(NodeId peer);\n-unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n+void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n /** Map from txid to orphan transaction record. Limited by\n  *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */"
      }
    ]
  },
  {
    "sha": "ee135c8d5b39b0cb8b301a83e286285ab926dca7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTEzNWM4ZDViMzliMGNiOGIzMDFhODNlMjg2Mjg1YWI5MjZkY2E3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T10:36:24Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:10Z"
      },
      "message": "txorphanage: Extract AddChildrenToWorkSet\n\nExtract some common code into AddChildrenToWorkSet function.\n\n(It's a hard knock life)",
      "tree": {
        "sha": "952f654c4767b501d734041c94b12a0f23e66502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/952f654c4767b501d734041c94b12a0f23e66502"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee135c8d5b39b0cb8b301a83e286285ab926dca7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee135c8d5b39b0cb8b301a83e286285ab926dca7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee135c8d5b39b0cb8b301a83e286285ab926dca7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee135c8d5b39b0cb8b301a83e286285ab926dca7/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38a11c355acfc15134c682571b3d92f66b0e7c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38a11c355acfc15134c682571b3d92f66b0e7c3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38a11c355acfc15134c682571b3d92f66b0e7c3c"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "181e64c77e7b65ca95ce2d2154ff10b7ac02bc87",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 16,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee135c8d5b39b0cb8b301a83e286285ab926dca7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee135c8d5b39b0cb8b301a83e286285ab926dca7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ee135c8d5b39b0cb8b301a83e286285ab926dca7",
        "patch": "@@ -2121,14 +2121,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n-            for (unsigned int i = 0; i < porphanTx->vout.size(); i++) {\n-                auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(orphanHash, i));\n-                if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n-                    for (const auto& elem : it_by_prev->second) {\n-                        orphan_work_set.insert(elem->first);\n-                    }\n-                }\n-            }\n+            AddChildrenToWorkSet(*porphanTx, orphan_work_set);\n             EraseOrphanTx(orphanHash);\n             for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n                 AddToCompactExtraTransactions(removedTx);\n@@ -3147,14 +3140,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n             RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n-            for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-                auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(txid, i));\n-                if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n-                    for (const auto& elem : it_by_prev->second) {\n-                        peer->m_orphan_work_set.insert(elem->first);\n-                    }\n-                }\n-            }\n+            AddChildrenToWorkSet(tx, peer->m_orphan_work_set);\n \n             pfrom.nLastTXTime = GetTime();\n "
      },
      {
        "sha": "c1443115f0c7735d896a3149374faff33475c310",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee135c8d5b39b0cb8b301a83e286285ab926dca7/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee135c8d5b39b0cb8b301a83e286285ab926dca7/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=ee135c8d5b39b0cb8b301a83e286285ab926dca7",
        "patch": "@@ -106,3 +106,16 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     return nEvicted;\n }\n \n+void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        const auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(tx.GetHash(), i));\n+        if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n+            for (const auto& elem : it_by_prev->second) {\n+                orphan_work_set.insert(elem->first);\n+            }\n+        }\n+    }\n+}\n+"
      },
      {
        "sha": "c57249265e7e31c518b599fb2bc26608564eeb21",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee135c8d5b39b0cb8b301a83e286285ab926dca7/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee135c8d5b39b0cb8b301a83e286285ab926dca7/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=ee135c8d5b39b0cb8b301a83e286285ab926dca7",
        "patch": "@@ -26,6 +26,7 @@ struct COrphanTx {\n int EraseOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n /** Map from txid to orphan transaction record. Limited by\n  *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */"
      }
    ]
  },
  {
    "sha": "83679ffc600305ec0926fd195ee31c11de2ed613",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzY3OWZmYzYwMDMwNWVjMDkyNmZkMTk1ZWUzMWMxMWRlMmVkNjEz",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T11:24:08Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:10Z"
      },
      "message": "txorphanage: Extract HaveOrphanTx\n\nExtract some common code into HaveOrphanTx function.",
      "tree": {
        "sha": "174fe9757d0aaf5354acf0d6eba68cbe3b9e79dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/174fe9757d0aaf5354acf0d6eba68cbe3b9e79dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83679ffc600305ec0926fd195ee31c11de2ed613",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83679ffc600305ec0926fd195ee31c11de2ed613",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83679ffc600305ec0926fd195ee31c11de2ed613",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83679ffc600305ec0926fd195ee31c11de2ed613/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee135c8d5b39b0cb8b301a83e286285ab926dca7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee135c8d5b39b0cb8b301a83e286285ab926dca7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee135c8d5b39b0cb8b301a83e286285ab926dca7"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "cda177dfe39d52c6e65c7023147791b8d8a92edc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83679ffc600305ec0926fd195ee31c11de2ed613/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83679ffc600305ec0926fd195ee31c11de2ed613/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=83679ffc600305ec0926fd195ee31c11de2ed613",
        "patch": "@@ -1509,14 +1509,7 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid)\n \n     const uint256& hash = gtxid.GetHash();\n \n-    {\n-        LOCK(g_cs_orphans);\n-        if (!gtxid.IsWtxid() && mapOrphanTransactions.count(hash)) {\n-            return true;\n-        } else if (gtxid.IsWtxid() && g_orphans_by_wtxid.count(hash)) {\n-            return true;\n-        }\n-    }\n+    if (HaveOrphanTx(gtxid)) return true;\n \n     {\n         LOCK(m_recent_confirmed_transactions_mutex);"
      },
      {
        "sha": "473abd504456713d87669a8a87bbad8d05c16b74",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83679ffc600305ec0926fd195ee31c11de2ed613/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83679ffc600305ec0926fd195ee31c11de2ed613/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=83679ffc600305ec0926fd195ee31c11de2ed613",
        "patch": "@@ -119,3 +119,13 @@ void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work\n     }\n }\n \n+bool HaveOrphanTx(const GenTxid& gtxid)\n+{\n+    LOCK(g_cs_orphans);\n+    if (gtxid.IsWtxid()) {\n+        return g_orphans_by_wtxid.count(gtxid.GetHash());\n+    } else {\n+        return mapOrphanTransactions.count(gtxid.GetHash());\n+    }\n+}\n+"
      },
      {
        "sha": "ab4960be69340945bdecf19671a3a169cb14cdbc",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83679ffc600305ec0926fd195ee31c11de2ed613/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83679ffc600305ec0926fd195ee31c11de2ed613/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=83679ffc600305ec0926fd195ee31c11de2ed613",
        "patch": "@@ -27,6 +27,7 @@ int EraseOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+bool HaveOrphanTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n \n /** Map from txid to orphan transaction record. Limited by\n  *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */"
      }
    ]
  },
  {
    "sha": "f294da727413210fda279afdc206a4dd12046d56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjk0ZGE3Mjc0MTMyMTBmZGEyNzlhZmRjMjA2YTRkZDEyMDQ2ZDU2",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T11:59:57Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:10Z"
      },
      "message": "txorphanage: Extract GetOrphanTx\n\nExtract orphan lookup code into GetOrphanTx function.",
      "tree": {
        "sha": "2fa630f333aae50b5122e8796151300df0cd03c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fa630f333aae50b5122e8796151300df0cd03c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f294da727413210fda279afdc206a4dd12046d56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f294da727413210fda279afdc206a4dd12046d56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f294da727413210fda279afdc206a4dd12046d56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f294da727413210fda279afdc206a4dd12046d56/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83679ffc600305ec0926fd195ee31c11de2ed613",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83679ffc600305ec0926fd195ee31c11de2ed613",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83679ffc600305ec0926fd195ee31c11de2ed613"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 13,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4ac50dc1f0b59843da2a257d54e074bd04990aef",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f294da727413210fda279afdc206a4dd12046d56/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f294da727413210fda279afdc206a4dd12046d56/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f294da727413210fda279afdc206a4dd12046d56",
        "patch": "@@ -2104,10 +2104,9 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         const uint256 orphanHash = *orphan_work_set.begin();\n         orphan_work_set.erase(orphan_work_set.begin());\n \n-        auto orphan_it = mapOrphanTransactions.find(orphanHash);\n-        if (orphan_it == mapOrphanTransactions.end()) continue;\n+        const auto [porphanTx, from_peer] = GetOrphanTx(orphanHash);\n+        if (porphanTx == nullptr) continue;\n \n-        const CTransactionRef porphanTx = orphan_it->second.tx;\n         const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), m_mempool, porphanTx, false /* bypass_limits */);\n         const TxValidationState& state = result.m_state;\n \n@@ -2124,10 +2123,10 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n             if (state.IsInvalid()) {\n                 LogPrint(BCLog::MEMPOOL, \"   invalid orphan tx %s from peer=%d. %s\\n\",\n                     orphanHash.ToString(),\n-                    orphan_it->second.fromPeer,\n+                    from_peer,\n                     state.ToString());\n                 // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(orphan_it->second.fromPeer, state);\n+                MaybePunishNodeForTx(from_peer, state);\n             }\n             // Has inputs but not accepted to mempool\n             // Probably non-standard or insufficient fee"
      },
      {
        "sha": "6baea9f69ecfe8837e8eaaa8fd7be4ecee635d33",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f294da727413210fda279afdc206a4dd12046d56/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f294da727413210fda279afdc206a4dd12046d56/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=f294da727413210fda279afdc206a4dd12046d56",
        "patch": "@@ -129,3 +129,11 @@ bool HaveOrphanTx(const GenTxid& gtxid)\n     }\n }\n \n+std::pair<CTransactionRef, NodeId> GetOrphanTx(const uint256& txid)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    const auto it = mapOrphanTransactions.find(txid);\n+    if (it == mapOrphanTransactions.end()) return {nullptr, -1};\n+    return {it->second.tx, it->second.fromPeer};\n+}"
      },
      {
        "sha": "1adc6f1d6c31a8ca0419b4fce4e76db62609468c",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f294da727413210fda279afdc206a4dd12046d56/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f294da727413210fda279afdc206a4dd12046d56/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=f294da727413210fda279afdc206a4dd12046d56",
        "patch": "@@ -28,6 +28,7 @@ void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n bool HaveOrphanTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+std::pair<CTransactionRef, NodeId> GetOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n /** Map from txid to orphan transaction record. Limited by\n  *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */"
      }
    ]
  },
  {
    "sha": "1041616d7eb66281bb4de51ffbc83df0923b2f7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDQxNjE2ZDdlYjY2MjgxYmI0ZGU1MWZmYmM4M2RmMDkyM2IyZjdl",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T13:12:24Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:10Z"
      },
      "message": "txorphanage: Extract OrphanageAddTx\n\nExtract code from AddOrphanTx into OrphanageAddTx.",
      "tree": {
        "sha": "dd8cc8d2d577f18ab8df56f3b9b6e12e9d949f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd8cc8d2d577f18ab8df56f3b9b6e12e9d949f3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1041616d7eb66281bb4de51ffbc83df0923b2f7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1041616d7eb66281bb4de51ffbc83df0923b2f7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1041616d7eb66281bb4de51ffbc83df0923b2f7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1041616d7eb66281bb4de51ffbc83df0923b2f7e/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f294da727413210fda279afdc206a4dd12046d56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f294da727413210fda279afdc206a4dd12046d56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f294da727413210fda279afdc206a4dd12046d56"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 40,
      "deletions": 29
    },
    "files": [
      {
        "sha": "89586beba5d2d96a4b8c0ae4c0c8891ba53cb918",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 26,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1041616d7eb66281bb4de51ffbc83df0923b2f7e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1041616d7eb66281bb4de51ffbc83df0923b2f7e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1041616d7eb66281bb4de51ffbc83df0923b2f7e",
        "patch": "@@ -1098,37 +1098,12 @@ static void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_L\n \n bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n {\n-    const uint256& hash = tx->GetHash();\n-    if (mapOrphanTransactions.count(hash))\n+    if (!OrphanageAddTx(tx, peer)) {\n         return false;\n-\n-    // Ignore big transactions, to avoid a\n-    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n-    // large transaction with a missing parent then we assume\n-    // it will rebroadcast it later, after the parent transaction(s)\n-    // have been mined or received.\n-    // 100 orphans, each of which is at most 100,000 bytes big is\n-    // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n-    unsigned int sz = GetTransactionWeight(*tx);\n-    if (sz > MAX_STANDARD_TX_WEIGHT)\n-    {\n-        LogPrint(BCLog::MEMPOOL, \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n-        return false;\n-    }\n-\n-    auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, g_orphan_list.size()});\n-    assert(ret.second);\n-    g_orphan_list.push_back(ret.first);\n-    // Allow for lookups in the orphan pool by wtxid, as well as txid\n-    g_orphans_by_wtxid.emplace(tx->GetWitnessHash(), ret.first);\n-    for (const CTxIn& txin : tx->vin) {\n-        mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n     }\n \n     AddToCompactExtraTransactions(tx);\n \n-    LogPrint(BCLog::MEMPOOL, \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n-             mapOrphanTransactions.size(), mapOrphanTransactionsByPrev.size());\n     return true;\n }\n "
      },
      {
        "sha": "1527bdf5eacd2ac7cbde7775301a8fced29686ea",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1041616d7eb66281bb4de51ffbc83df0923b2f7e/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1041616d7eb66281bb4de51ffbc83df0923b2f7e/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=1041616d7eb66281bb4de51ffbc83df0923b2f7e",
        "patch": "@@ -10,6 +10,8 @@\n \n #include <cassert>\n \n+/** Expiration time for orphan transactions in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n@@ -22,6 +24,42 @@ std::map<uint256, std::map<uint256, COrphanTx>::iterator> g_orphans_by_wtxid GUA\n \n     std::vector<std::map<uint256, COrphanTx>::iterator> g_orphan_list GUARDED_BY(g_cs_orphans);\n \n+bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    const uint256& hash = tx->GetHash();\n+    if (mapOrphanTransactions.count(hash))\n+        return false;\n+\n+    // Ignore big transactions, to avoid a\n+    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n+    // large transaction with a missing parent then we assume\n+    // it will rebroadcast it later, after the parent transaction(s)\n+    // have been mined or received.\n+    // 100 orphans, each of which is at most 100,000 bytes big is\n+    // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n+    unsigned int sz = GetTransactionWeight(*tx);\n+    if (sz > MAX_STANDARD_TX_WEIGHT)\n+    {\n+        LogPrint(BCLog::MEMPOOL, \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        return false;\n+    }\n+\n+    auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, g_orphan_list.size()});\n+    assert(ret.second);\n+    g_orphan_list.push_back(ret.first);\n+    // Allow for lookups in the orphan pool by wtxid, as well as txid\n+    g_orphans_by_wtxid.emplace(tx->GetWitnessHash(), ret.first);\n+    for (const CTxIn& txin : tx->vin) {\n+        mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n+    }\n+\n+    LogPrint(BCLog::MEMPOOL, \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n+             mapOrphanTransactions.size(), mapOrphanTransactionsByPrev.size());\n+    return true;\n+}\n+\n int EraseOrphanTx(const uint256& txid)\n {\n     std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(txid);"
      },
      {
        "sha": "1a72af175c1cc8eaecd5d0bf738029b55e853205",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1041616d7eb66281bb4de51ffbc83df0923b2f7e/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1041616d7eb66281bb4de51ffbc83df0923b2f7e/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=1041616d7eb66281bb4de51ffbc83df0923b2f7e",
        "patch": "@@ -9,9 +9,6 @@\n #include <primitives/transaction.h>\n #include <sync.h>\n \n-/** Expiration time for orphan transactions in seconds */\n-static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n-\n /** Guards orphan transactions and extra txs for compact blocks */\n extern RecursiveMutex g_cs_orphans;\n \n@@ -29,6 +26,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n bool HaveOrphanTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n std::pair<CTransactionRef, NodeId> GetOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n /** Map from txid to orphan transaction record. Limited by\n  *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */"
      }
    ]
  },
  {
    "sha": "26d1a6ccd5fcc7abec737c0d8c67238561627d59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmQxYTZjY2Q1ZmNjN2FiZWM3MzdjMGQ4YzY3MjM4NTYxNjI3ZDU5",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T16:00:14Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:10Z"
      },
      "message": "denialofservices_tests: check txorphanage's AddTx\n\nRather than checking net_processing's internal implementation of\nAddOrphanTx, test txorphanage's exported AddTx interface. Note that\nthis means AddToCompactExtraTransactions is no longer tested here.",
      "tree": {
        "sha": "73ac75c7b741aa5c083819011990bbb46adeab90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73ac75c7b741aa5c083819011990bbb46adeab90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26d1a6ccd5fcc7abec737c0d8c67238561627d59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26d1a6ccd5fcc7abec737c0d8c67238561627d59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26d1a6ccd5fcc7abec737c0d8c67238561627d59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26d1a6ccd5fcc7abec737c0d8c67238561627d59/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1041616d7eb66281bb4de51ffbc83df0923b2f7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1041616d7eb66281bb4de51ffbc83df0923b2f7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1041616d7eb66281bb4de51ffbc83df0923b2f7e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 5,
      "deletions": 7
    },
    "files": [
      {
        "sha": "83b2016cd4dc6c13a59216787394a0ece0d4198b",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26d1a6ccd5fcc7abec737c0d8c67238561627d59/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26d1a6ccd5fcc7abec737c0d8c67238561627d59/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=26d1a6ccd5fcc7abec737c0d8c67238561627d59",
        "patch": "@@ -44,9 +44,6 @@ struct CConnmanTest : public CConnman {\n     }\n };\n \n-// Tests these internal-to-net_processing.cpp methods:\n-extern bool AddOrphanTx(const CTransactionRef& tx, NodeId peer);\n-\n static CService ip(uint32_t i)\n {\n     struct in_addr s;\n@@ -320,6 +317,8 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     FillableSigningProvider keystore;\n     BOOST_CHECK(keystore.AddKey(key));\n \n+    LOCK(g_cs_orphans);\n+\n     // 50 orphan transactions:\n     for (int i = 0; i < 50; i++)\n     {\n@@ -332,7 +331,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key.GetPubKey()));\n \n-        AddOrphanTx(MakeTransactionRef(tx), i);\n+        OrphanageAddTx(MakeTransactionRef(tx), i);\n     }\n \n     // ... and 50 that depend on other orphans:\n@@ -349,7 +348,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key.GetPubKey()));\n         BOOST_CHECK(SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL));\n \n-        AddOrphanTx(MakeTransactionRef(tx), i);\n+        OrphanageAddTx(MakeTransactionRef(tx), i);\n     }\n \n     // This really-big orphan should be ignored:\n@@ -373,10 +372,9 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         for (unsigned int j = 1; j < tx.vin.size(); j++)\n             tx.vin[j].scriptSig = tx.vin[0].scriptSig;\n \n-        BOOST_CHECK(!AddOrphanTx(MakeTransactionRef(tx), i));\n+        BOOST_CHECK(!OrphanageAddTx(MakeTransactionRef(tx), i));\n     }\n \n-    LOCK2(cs_main, g_cs_orphans);\n     // Test EraseOrphansFor:\n     for (NodeId i = 0; i < 3; i++)\n     {"
      }
    ]
  },
  {
    "sha": "3c4c3c2fdda3a361e3802e97bc3566f815b75de1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzRjM2MyZmRkYTNhMzYxZTM4MDJlOTdiYzM1NjZmODE1Yjc1ZGUx",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T14:30:08Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T14:30:11Z"
      },
      "message": "net_processing: drop AddOrphanTx\n\nAll the interesting functionality of AddOrphanTx is already in other\nfunctions, so call those functions directly in the one place that\nAddOrphanTx was used.",
      "tree": {
        "sha": "d601baec217dbe5f4189df493cfeca600123cbe0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d601baec217dbe5f4189df493cfeca600123cbe0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c4c3c2fdda3a361e3802e97bc3566f815b75de1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c4c3c2fdda3a361e3802e97bc3566f815b75de1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c4c3c2fdda3a361e3802e97bc3566f815b75de1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c4c3c2fdda3a361e3802e97bc3566f815b75de1/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26d1a6ccd5fcc7abec737c0d8c67238561627d59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26d1a6ccd5fcc7abec737c0d8c67238561627d59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26d1a6ccd5fcc7abec737c0d8c67238561627d59"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 4,
      "deletions": 12
    },
    "files": [
      {
        "sha": "67a0c0e3d20e87f7c3621fed02668a7a0b631f17",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c4c3c2fdda3a361e3802e97bc3566f815b75de1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c4c3c2fdda3a361e3802e97bc3566f815b75de1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3c4c3c2fdda3a361e3802e97bc3566f815b75de1",
        "patch": "@@ -1096,17 +1096,6 @@ static void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_L\n     vExtraTxnForCompactIt = (vExtraTxnForCompactIt + 1) % max_extra_txn;\n }\n \n-bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n-{\n-    if (!OrphanageAddTx(tx, peer)) {\n-        return false;\n-    }\n-\n-    AddToCompactExtraTransactions(tx);\n-\n-    return true;\n-}\n-\n void PeerManagerImpl::Misbehaving(const NodeId pnode, const int howmuch, const std::string& message)\n {\n     assert(howmuch > 0);\n@@ -3156,7 +3145,10 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     pfrom.AddKnownTx(parent_txid);\n                     if (!AlreadyHaveTx(gtxid)) AddTxAnnouncement(pfrom, gtxid, current_time);\n                 }\n-                AddOrphanTx(ptx, pfrom.GetId());\n+\n+                if (OrphanageAddTx(ptx, pfrom.GetId())) {\n+                    AddToCompactExtraTransactions(ptx);\n+                }\n \n                 // Once added to the orphan pool, a tx is considered AlreadyHave, and we shouldn't request it anymore.\n                 m_txrequest.ForgetTxHash(tx.GetHash());"
      }
    ]
  },
  {
    "sha": "03257b832debcb1470420d8657d30ba30f4be770",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzI1N2I4MzJkZWJjYjE0NzA0MjBkODY1N2QzMGJhMzBmNGJlNzcw",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T13:37:41Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T14:31:09Z"
      },
      "message": "txorphanage: Extract EraseOrphansForBlock\n\nExtract code that erases orphans when a new block is found into\nEraseOrphansForBlock.",
      "tree": {
        "sha": "37d9ea35a839832c1629523ef8345139e0bd55c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37d9ea35a839832c1629523ef8345139e0bd55c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03257b832debcb1470420d8657d30ba30f4be770",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03257b832debcb1470420d8657d30ba30f4be770",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03257b832debcb1470420d8657d30ba30f4be770",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03257b832debcb1470420d8657d30ba30f4be770/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c4c3c2fdda3a361e3802e97bc3566f815b75de1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c4c3c2fdda3a361e3802e97bc3566f815b75de1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c4c3c2fdda3a361e3802e97bc3566f815b75de1"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 35,
      "deletions": 30
    },
    "files": [
      {
        "sha": "f1b5c6f38d82ef1aa9acc8b1b1ef44a3515da5f5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 30,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03257b832debcb1470420d8657d30ba30f4be770/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03257b832debcb1470420d8657d30ba30f4be770/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=03257b832debcb1470420d8657d30ba30f4be770",
        "patch": "@@ -1261,37 +1261,9 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n  */\n void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n {\n-    {\n-        LOCK(g_cs_orphans);\n-\n-        std::vector<uint256> vOrphanErase;\n-\n-        for (const CTransactionRef& ptx : pblock->vtx) {\n-            const CTransaction& tx = *ptx;\n+    EraseOrphansForBlock(*pblock);\n+    m_last_tip_update = GetTime();\n \n-            // Which orphan pool entries must we evict?\n-            for (const auto& txin : tx.vin) {\n-                auto itByPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n-                if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n-                for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n-                    const CTransaction& orphanTx = *(*mi)->second.tx;\n-                    const uint256& orphanHash = orphanTx.GetHash();\n-                    vOrphanErase.push_back(orphanHash);\n-                }\n-            }\n-        }\n-\n-        // Erase orphan transactions included or precluded by this block\n-        if (vOrphanErase.size()) {\n-            int nErased = 0;\n-            for (const uint256& orphanHash : vOrphanErase) {\n-                nErased += EraseOrphanTx(orphanHash);\n-            }\n-            LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n-        }\n-\n-        m_last_tip_update = GetTime();\n-    }\n     {\n         LOCK(m_recent_confirmed_transactions_mutex);\n         for (const auto& ptx : pblock->vtx) {"
      },
      {
        "sha": "45bc0885fa304b56661c805f102220ba731bce71",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03257b832debcb1470420d8657d30ba30f4be770/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03257b832debcb1470420d8657d30ba30f4be770/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=03257b832debcb1470420d8657d30ba30f4be770",
        "patch": "@@ -175,3 +175,34 @@ std::pair<CTransactionRef, NodeId> GetOrphanTx(const uint256& txid)\n     if (it == mapOrphanTransactions.end()) return {nullptr, -1};\n     return {it->second.tx, it->second.fromPeer};\n }\n+\n+void EraseOrphansForBlock(const CBlock& block)\n+{\n+    LOCK(g_cs_orphans);\n+\n+    std::vector<uint256> vOrphanErase;\n+\n+    for (const CTransactionRef& ptx : block.vtx) {\n+        const CTransaction& tx = *ptx;\n+\n+        // Which orphan pool entries must we evict?\n+        for (const auto& txin : tx.vin) {\n+            auto itByPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n+            if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n+            for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n+                const CTransaction& orphanTx = *(*mi)->second.tx;\n+                const uint256& orphanHash = orphanTx.GetHash();\n+                vOrphanErase.push_back(orphanHash);\n+            }\n+        }\n+    }\n+\n+    // Erase orphan transactions included or precluded by this block\n+    if (vOrphanErase.size()) {\n+        int nErased = 0;\n+        for (const uint256& orphanHash : vOrphanErase) {\n+            nErased += EraseOrphanTx(orphanHash);\n+        }\n+        LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n+    }\n+}"
      },
      {
        "sha": "f2ffbf3d671b27375d86f40f069a014945208c6d",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03257b832debcb1470420d8657d30ba30f4be770/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03257b832debcb1470420d8657d30ba30f4be770/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=03257b832debcb1470420d8657d30ba30f4be770",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_TXORPHANAGE_H\n \n #include <net.h>\n+#include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <sync.h>\n \n@@ -22,6 +23,7 @@ struct COrphanTx {\n \n int EraseOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+void EraseOrphansForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n bool HaveOrphanTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);"
      }
    ]
  },
  {
    "sha": "6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmQ0OTYzYzA2OWJmZDBhZjQyMGU4YTNmYjcyNGMzYjY5M2ExZTc2",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T13:42:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T15:07:55Z"
      },
      "message": "txorphanage: Move functions and data into class\n\nCollects all the orphan handling globals into a single member var in\nnet_processing, and ensures access is encapuslated into the interface\nfunctions. Also adds doxygen comments for methods.",
      "tree": {
        "sha": "847afd573b5bd2f2a01a1f48155c737f28886604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/847afd573b5bd2f2a01a1f48155c737f28886604"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bd4963c069bfd0af420e8a3fb724c3b693a1e76/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03257b832debcb1470420d8657d30ba30f4be770",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03257b832debcb1470420d8657d30ba30f4be770",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03257b832debcb1470420d8657d30ba30f4be770"
      }
    ],
    "stats": {
      "total": 202,
      "additions": 106,
      "deletions": 96
    },
    "files": [
      {
        "sha": "98d9709eb2bfc57be05b3875f6f7ec5dfdf0ecf1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 31,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd4963c069bfd0af420e8a3fb724c3b693a1e76/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd4963c069bfd0af420e8a3fb724c3b693a1e76/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
        "patch": "@@ -457,11 +457,12 @@ class PeerManagerImpl final : public PeerManager\n     /** Number of peers from which we're downloading blocks. */\n     int nPeersWithValidatedDownloads GUARDED_BY(cs_main) = 0;\n \n+    /** Storage for orphan information */\n+    TxOrphanage m_orphanage;\n };\n } // namespace\n \n namespace {\n-\n     /** Number of preferable block download peers. */\n     int nPreferredDownload GUARDED_BY(cs_main) = 0;\n \n@@ -1003,7 +1004,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node, bool& fUpdateConnectionTim\n     for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n     }\n-    WITH_LOCK(g_cs_orphans, EraseOrphansFor(nodeid));\n+    WITH_LOCK(g_cs_orphans, m_orphanage.EraseForPeer(nodeid));\n     m_txrequest.DisconnectedPeer(nodeid);\n     nPreferredDownload -= state->fPreferredDownload;\n     nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);\n@@ -1080,11 +1081,6 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats)\n     return true;\n }\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// mapOrphanTransactions\n-//\n-\n static void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n {\n     size_t max_extra_txn = gArgs.GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n@@ -1255,13 +1251,13 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n }\n \n /**\n- * Evict orphan txn pool entries (EraseOrphanTx) based on a newly connected\n+ * Evict orphan txn pool entries based on a newly connected\n  * block, remember the recently confirmed transactions, and delete tracked\n  * announcements for them. Also save the time of the last tip update.\n  */\n void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n {\n-    EraseOrphansForBlock(*pblock);\n+    m_orphanage.EraseForBlock(*pblock);\n     m_last_tip_update = GetTime();\n \n     {\n@@ -1445,7 +1441,7 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid)\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (HaveOrphanTx(gtxid)) return true;\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n \n     {\n         LOCK(m_recent_confirmed_transactions_mutex);\n@@ -2040,7 +2036,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         const uint256 orphanHash = *orphan_work_set.begin();\n         orphan_work_set.erase(orphan_work_set.begin());\n \n-        const auto [porphanTx, from_peer] = GetOrphanTx(orphanHash);\n+        const auto [porphanTx, from_peer] = m_orphanage.GetTx(orphanHash);\n         if (porphanTx == nullptr) continue;\n \n         const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), m_mempool, porphanTx, false /* bypass_limits */);\n@@ -2049,8 +2045,8 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n-            AddChildrenToWorkSet(*porphanTx, orphan_work_set);\n-            EraseOrphanTx(orphanHash);\n+            m_orphanage.AddChildrenToWorkSet(*porphanTx, orphan_work_set);\n+            m_orphanage.EraseTx(orphanHash);\n             for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n                 AddToCompactExtraTransactions(removedTx);\n             }\n@@ -2097,7 +2093,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n                     recentRejects->insert(porphanTx->GetHash());\n                 }\n             }\n-            EraseOrphanTx(orphanHash);\n+            m_orphanage.EraseTx(orphanHash);\n             break;\n         }\n     }\n@@ -3068,7 +3064,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n             RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n-            AddChildrenToWorkSet(tx, peer->m_orphan_work_set);\n+            m_orphanage.AddChildrenToWorkSet(tx, peer->m_orphan_work_set);\n \n             pfrom.nLastTXTime = GetTime();\n \n@@ -3118,19 +3114,19 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     if (!AlreadyHaveTx(gtxid)) AddTxAnnouncement(pfrom, gtxid, current_time);\n                 }\n \n-                if (OrphanageAddTx(ptx, pfrom.GetId())) {\n+                if (m_orphanage.AddTx(ptx, pfrom.GetId())) {\n                     AddToCompactExtraTransactions(ptx);\n                 }\n \n                 // Once added to the orphan pool, a tx is considered AlreadyHave, and we shouldn't request it anymore.\n                 m_txrequest.ForgetTxHash(tx.GetHash());\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n \n-                // DoS prevention: do not allow mapOrphanTransactions to grow unbounded (see CVE-2012-3789)\n+                // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n                 unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n-                unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n+                unsigned int nEvicted = m_orphanage.LimitOrphans(nMaxOrphanTx);\n                 if (nEvicted > 0) {\n-                    LogPrint(BCLog::MEMPOOL, \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n+                    LogPrint(BCLog::MEMPOOL, \"orphanage overflow, removed %u tx\\n\", nEvicted);\n                 }\n             } else {\n                 LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s\\n\",tx.GetHash().ToString());\n@@ -4744,15 +4740,3 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n     return true;\n }\n \n-class CNetProcessingCleanup\n-{\n-public:\n-    CNetProcessingCleanup() {}\n-    ~CNetProcessingCleanup() {\n-        // orphan transactions\n-        mapOrphanTransactions.clear();\n-        mapOrphanTransactionsByPrev.clear();\n-        g_orphans_by_wtxid.clear();\n-    }\n-};\n-static CNetProcessingCleanup instance_of_cnetprocessingcleanup;"
      },
      {
        "sha": "35f16aa69da3df55169eb11939de4ef08a5e4075",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 22,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd4963c069bfd0af420e8a3fb724c3b693a1e76/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd4963c069bfd0af420e8a3fb724c3b693a1e76/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
        "patch": "@@ -284,15 +284,23 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode, dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+class TxOrphanageTest : public TxOrphanage\n {\n-    std::map<uint256, COrphanTx>::iterator it;\n-    LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n-    if (it == mapOrphanTransactions.end())\n-        it = mapOrphanTransactions.begin();\n-    return it->second.tx;\n-}\n+public:\n+    inline size_t CountOrphans() const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n+    {\n+        return mapOrphanTransactions.size();\n+    }\n+\n+    CTransactionRef RandomOrphan() EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n+    {\n+        std::map<uint256, COrphanTx>::iterator it;\n+        it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+        if (it == mapOrphanTransactions.end())\n+            it = mapOrphanTransactions.begin();\n+        return it->second.tx;\n+    }\n+};\n \n static void MakeNewKeyWithFastRandomContext(CKey& key)\n {\n@@ -312,6 +320,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     // signature's R and S values have leading zeros.\n     g_insecure_rand_ctx = FastRandomContext(ArithToUint256(arith_uint256(33)));\n \n+    TxOrphanageTest orphanage;\n     CKey key;\n     MakeNewKeyWithFastRandomContext(key);\n     FillableSigningProvider keystore;\n@@ -331,13 +340,13 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key.GetPubKey()));\n \n-        OrphanageAddTx(MakeTransactionRef(tx), i);\n+        orphanage.AddTx(MakeTransactionRef(tx), i);\n     }\n \n     // ... and 50 that depend on other orphans:\n     for (int i = 0; i < 50; i++)\n     {\n-        CTransactionRef txPrev = RandomOrphan();\n+        CTransactionRef txPrev = orphanage.RandomOrphan();\n \n         CMutableTransaction tx;\n         tx.vin.resize(1);\n@@ -348,13 +357,13 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key.GetPubKey()));\n         BOOST_CHECK(SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL));\n \n-        OrphanageAddTx(MakeTransactionRef(tx), i);\n+        orphanage.AddTx(MakeTransactionRef(tx), i);\n     }\n \n     // This really-big orphan should be ignored:\n     for (int i = 0; i < 10; i++)\n     {\n-        CTransactionRef txPrev = RandomOrphan();\n+        CTransactionRef txPrev = orphanage.RandomOrphan();\n \n         CMutableTransaction tx;\n         tx.vout.resize(1);\n@@ -372,24 +381,24 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         for (unsigned int j = 1; j < tx.vin.size(); j++)\n             tx.vin[j].scriptSig = tx.vin[0].scriptSig;\n \n-        BOOST_CHECK(!OrphanageAddTx(MakeTransactionRef(tx), i));\n+        BOOST_CHECK(!orphanage.AddTx(MakeTransactionRef(tx), i));\n     }\n \n     // Test EraseOrphansFor:\n     for (NodeId i = 0; i < 3; i++)\n     {\n-        size_t sizeBefore = mapOrphanTransactions.size();\n-        EraseOrphansFor(i);\n-        BOOST_CHECK(mapOrphanTransactions.size() < sizeBefore);\n+        size_t sizeBefore = orphanage.CountOrphans();\n+        orphanage.EraseForPeer(i);\n+        BOOST_CHECK(orphanage.CountOrphans() < sizeBefore);\n     }\n \n     // Test LimitOrphanTxSize() function:\n-    LimitOrphanTxSize(40);\n-    BOOST_CHECK(mapOrphanTransactions.size() <= 40);\n-    LimitOrphanTxSize(10);\n-    BOOST_CHECK(mapOrphanTransactions.size() <= 10);\n-    LimitOrphanTxSize(0);\n-    BOOST_CHECK(mapOrphanTransactions.empty());\n+    orphanage.LimitOrphans(40);\n+    BOOST_CHECK(orphanage.CountOrphans() <= 40);\n+    orphanage.LimitOrphans(10);\n+    BOOST_CHECK(orphanage.CountOrphans() <= 10);\n+    orphanage.LimitOrphans(0);\n+    BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "f758107b82878a3fecb6ce0d37afb08766bfd7f1",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 19,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd4963c069bfd0af420e8a3fb724c3b693a1e76/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd4963c069bfd0af420e8a3fb724c3b693a1e76/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
        "patch": "@@ -17,14 +17,7 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n RecursiveMutex g_cs_orphans;\n \n-std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n-std::map<uint256, std::map<uint256, COrphanTx>::iterator> g_orphans_by_wtxid GUARDED_BY(g_cs_orphans);\n-\n-    std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n-\n-    std::vector<std::map<uint256, COrphanTx>::iterator> g_orphan_list GUARDED_BY(g_cs_orphans);\n-\n-bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer)\n+bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n {\n     AssertLockHeld(g_cs_orphans);\n \n@@ -60,8 +53,9 @@ bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer)\n     return true;\n }\n \n-int EraseOrphanTx(const uint256& txid)\n+int TxOrphanage::EraseTx(const uint256& txid)\n {\n+    AssertLockHeld(g_cs_orphans);\n     std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(txid);\n     if (it == mapOrphanTransactions.end())\n         return 0;\n@@ -91,7 +85,7 @@ int EraseOrphanTx(const uint256& txid)\n     return 1;\n }\n \n-void EraseOrphansFor(NodeId peer)\n+void TxOrphanage::EraseForPeer(NodeId peer)\n {\n     AssertLockHeld(g_cs_orphans);\n \n@@ -102,13 +96,13 @@ void EraseOrphansFor(NodeId peer)\n         std::map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n-            nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n+            nErased += EraseTx(maybeErase->second.tx->GetHash());\n         }\n     }\n     if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n }\n \n-unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n+unsigned int TxOrphanage::LimitOrphans(unsigned int nMaxOrphans)\n {\n     AssertLockHeld(g_cs_orphans);\n \n@@ -124,7 +118,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n         {\n             std::map<uint256, COrphanTx>::iterator maybeErase = iter++;\n             if (maybeErase->second.nTimeExpire <= nNow) {\n-                nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n+                nErased += EraseTx(maybeErase->second.tx->GetHash());\n             } else {\n                 nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n             }\n@@ -138,13 +132,13 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     {\n         // Evict a random orphan:\n         size_t randompos = rng.randrange(g_orphan_list.size());\n-        EraseOrphanTx(g_orphan_list[randompos]->first);\n+        EraseTx(g_orphan_list[randompos]->first);\n         ++nEvicted;\n     }\n     return nEvicted;\n }\n \n-void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set)\n+void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const\n {\n     AssertLockHeld(g_cs_orphans);\n     for (unsigned int i = 0; i < tx.vout.size(); i++) {\n@@ -157,7 +151,7 @@ void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work\n     }\n }\n \n-bool HaveOrphanTx(const GenTxid& gtxid)\n+bool TxOrphanage::HaveTx(const GenTxid& gtxid) const\n {\n     LOCK(g_cs_orphans);\n     if (gtxid.IsWtxid()) {\n@@ -167,7 +161,7 @@ bool HaveOrphanTx(const GenTxid& gtxid)\n     }\n }\n \n-std::pair<CTransactionRef, NodeId> GetOrphanTx(const uint256& txid)\n+std::pair<CTransactionRef, NodeId> TxOrphanage::GetTx(const uint256& txid) const\n {\n     AssertLockHeld(g_cs_orphans);\n \n@@ -176,7 +170,7 @@ std::pair<CTransactionRef, NodeId> GetOrphanTx(const uint256& txid)\n     return {it->second.tx, it->second.fromPeer};\n }\n \n-void EraseOrphansForBlock(const CBlock& block)\n+void TxOrphanage::EraseForBlock(const CBlock& block)\n {\n     LOCK(g_cs_orphans);\n \n@@ -201,7 +195,7 @@ void EraseOrphansForBlock(const CBlock& block)\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n         for (const uint256& orphanHash : vOrphanErase) {\n-            nErased += EraseOrphanTx(orphanHash);\n+            nErased += EraseTx(orphanHash);\n         }\n         LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }"
      },
      {
        "sha": "6b9837815b8bb7186a50eeb864e3eb619a58c390",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 46,
        "deletions": 23,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd4963c069bfd0af420e8a3fb724c3b693a1e76/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd4963c069bfd0af420e8a3fb724c3b693a1e76/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
        "patch": "@@ -13,30 +13,48 @@\n /** Guards orphan transactions and extra txs for compact blocks */\n extern RecursiveMutex g_cs_orphans;\n \n-struct COrphanTx {\n-    // When modifying, adapt the copy of this definition in tests/DoS_tests.\n-    CTransactionRef tx;\n-    NodeId fromPeer;\n-    int64_t nTimeExpire;\n-    size_t list_pos;\n-};\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n-int EraseOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void EraseOrphansForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n-unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-bool HaveOrphanTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n-std::pair<CTransactionRef, NodeId> GetOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    /** Erase an orphan by txid */\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n-/** Map from txid to orphan transaction record. Limited by\n- *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n-extern std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n-/** Index from wtxid into the mapOrphanTransactions to lookup orphan\n- *  transactions using their witness ids. */\n-extern std::map<uint256, std::map<uint256, COrphanTx>::iterator> g_orphans_by_wtxid GUARDED_BY(g_cs_orphans);\n+    /** Erase all orphans included in / invalidated by a new block */\n+    void EraseForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Limit the orphanage to the given maximum */\n+    unsigned int LimitOrphans(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Add any orphans that list a particular tx as a parent into a peer's work set\n+     * (ie orphans that may have found their final missing parent, and so should be reconsidered for the mempool) */\n+    void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+protected:\n+    struct COrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    /** Map from txid to orphan transaction record. Limited by\n+     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+    std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+\n+    using OrphanMap = decltype(mapOrphanTransactions);\n \n     struct IteratorComparator\n     {\n@@ -49,9 +67,14 @@ extern std::map<uint256, std::map<uint256, COrphanTx>::iterator> g_orphans_by_wt\n \n     /** Index from the parents' COutPoint into the mapOrphanTransactions. Used\n      *  to remove orphan transactions from the mapOrphanTransactions */\n-    extern std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n+    std::map<COutPoint, std::set<OrphanMap::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n \n     /** Orphan transactions in vector for quick random eviction */\n-    extern std::vector<std::map<uint256, COrphanTx>::iterator> g_orphan_list GUARDED_BY(g_cs_orphans);\n+    std::vector<OrphanMap::iterator> g_orphan_list GUARDED_BY(g_cs_orphans);\n+\n+    /** Index from wtxid into the mapOrphanTransactions to lookup orphan\n+     *  transactions using their witness ids. */\n+    std::map<uint256, OrphanMap::iterator> g_orphans_by_wtxid GUARDED_BY(g_cs_orphans);\n+};\n \n #endif // BITCOIN_TXORPHANAGE_H"
      },
      {
        "sha": "8783c244c3ff3838ff6d6d35712796841127e2e7",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd4963c069bfd0af420e8a3fb724c3b693a1e76/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd4963c069bfd0af420e8a3fb724c3b693a1e76/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
        "patch": "@@ -154,7 +154,7 @@ def run_test(self):\n             orphan_tx_pool[i].vin.append(CTxIn(outpoint=COutPoint(i, 333)))\n             orphan_tx_pool[i].vout.append(CTxOut(nValue=11 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\n \n-        with node.assert_debug_log(['mapOrphan overflow, removed 1 tx']):\n+        with node.assert_debug_log(['orphanage overflow, removed 1 tx']):\n             node.p2ps[0].send_txs_and_test(orphan_tx_pool, node, success=False)\n \n         rejected_parent = CTransaction()"
      }
    ]
  },
  {
    "sha": "f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGMwNjg4Yjk0OTBjOGQ0OTAyNTMwYmEzYzNiNmZiZDhiNDhlMGRl",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-15T12:53:06Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T15:08:09Z"
      },
      "message": "scripted-diff: Update txorphanage naming convention\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/mapOrphanTransactionsByPrev/m_outpoint_to_orphan_it/g' src/txorphanage.h src/txorphanage.cpp\nsed -i 's/mapOrphanTransactions/m_orphans/g' src/txorphanage.h src/txorphanage.cpp src/net_processing.cpp src/test/denialofservice_tests.cpp\nsed -i 's/g_orphan_list/m_orphan_list/g' src/txorphanage.h src/txorphanage.cpp\nsed -i 's/g_orphans_by_wtxid/m_wtxid_to_orphan_it/g' src/txorphanage.h src/txorphanage.cpp\nsed -i 's/nMaxOrphans/max_orphans/g' src/txorphanage.h src/txorphanage.cpp\nsed -i 's/COrphanTx/OrphanTx/g' src/txorphanage.h src/txorphanage.cpp src/test/denialofservice_tests.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "0d11b535636c6c46064266c43f90b9bc4b096da5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d11b535636c6c46064266c43f90b9bc4b096da5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bd4963c069bfd0af420e8a3fb724c3b693a1e76"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 52,
      "deletions": 52
    },
    "files": [
      {
        "sha": "5906913b58b8fd40712a7f0a750303a080efc067",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
        "patch": "@@ -289,15 +289,15 @@ class TxOrphanageTest : public TxOrphanage\n public:\n     inline size_t CountOrphans() const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n     {\n-        return mapOrphanTransactions.size();\n+        return m_orphans.size();\n     }\n \n     CTransactionRef RandomOrphan() EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n     {\n-        std::map<uint256, COrphanTx>::iterator it;\n-        it = mapOrphanTransactions.lower_bound(InsecureRand256());\n-        if (it == mapOrphanTransactions.end())\n-            it = mapOrphanTransactions.begin();\n+        std::map<uint256, OrphanTx>::iterator it;\n+        it = m_orphans.lower_bound(InsecureRand256());\n+        if (it == m_orphans.end())\n+            it = m_orphans.begin();\n         return it->second.tx;\n     }\n };"
      },
      {
        "sha": "ed4783f1a5c2163a188b45d2e2f3c849e7209e32",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 37,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
        "patch": "@@ -22,7 +22,7 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n     AssertLockHeld(g_cs_orphans);\n \n     const uint256& hash = tx->GetHash();\n-    if (mapOrphanTransactions.count(hash))\n+    if (m_orphans.count(hash))\n         return false;\n \n     // Ignore big transactions, to avoid a\n@@ -39,49 +39,49 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n         return false;\n     }\n \n-    auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, g_orphan_list.size()});\n+    auto ret = m_orphans.emplace(hash, OrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, m_orphan_list.size()});\n     assert(ret.second);\n-    g_orphan_list.push_back(ret.first);\n+    m_orphan_list.push_back(ret.first);\n     // Allow for lookups in the orphan pool by wtxid, as well as txid\n-    g_orphans_by_wtxid.emplace(tx->GetWitnessHash(), ret.first);\n+    m_wtxid_to_orphan_it.emplace(tx->GetWitnessHash(), ret.first);\n     for (const CTxIn& txin : tx->vin) {\n-        mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n+        m_outpoint_to_orphan_it[txin.prevout].insert(ret.first);\n     }\n \n     LogPrint(BCLog::MEMPOOL, \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n-             mapOrphanTransactions.size(), mapOrphanTransactionsByPrev.size());\n+             m_orphans.size(), m_outpoint_to_orphan_it.size());\n     return true;\n }\n \n int TxOrphanage::EraseTx(const uint256& txid)\n {\n     AssertLockHeld(g_cs_orphans);\n-    std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(txid);\n-    if (it == mapOrphanTransactions.end())\n+    std::map<uint256, OrphanTx>::iterator it = m_orphans.find(txid);\n+    if (it == m_orphans.end())\n         return 0;\n     for (const CTxIn& txin : it->second.tx->vin)\n     {\n-        auto itPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n-        if (itPrev == mapOrphanTransactionsByPrev.end())\n+        auto itPrev = m_outpoint_to_orphan_it.find(txin.prevout);\n+        if (itPrev == m_outpoint_to_orphan_it.end())\n             continue;\n         itPrev->second.erase(it);\n         if (itPrev->second.empty())\n-            mapOrphanTransactionsByPrev.erase(itPrev);\n+            m_outpoint_to_orphan_it.erase(itPrev);\n     }\n \n     size_t old_pos = it->second.list_pos;\n-    assert(g_orphan_list[old_pos] == it);\n-    if (old_pos + 1 != g_orphan_list.size()) {\n-        // Unless we're deleting the last entry in g_orphan_list, move the last\n+    assert(m_orphan_list[old_pos] == it);\n+    if (old_pos + 1 != m_orphan_list.size()) {\n+        // Unless we're deleting the last entry in m_orphan_list, move the last\n         // entry to the position we're deleting.\n-        auto it_last = g_orphan_list.back();\n-        g_orphan_list[old_pos] = it_last;\n+        auto it_last = m_orphan_list.back();\n+        m_orphan_list[old_pos] = it_last;\n         it_last->second.list_pos = old_pos;\n     }\n-    g_orphan_list.pop_back();\n-    g_orphans_by_wtxid.erase(it->second.tx->GetWitnessHash());\n+    m_orphan_list.pop_back();\n+    m_wtxid_to_orphan_it.erase(it->second.tx->GetWitnessHash());\n \n-    mapOrphanTransactions.erase(it);\n+    m_orphans.erase(it);\n     return 1;\n }\n \n@@ -90,10 +90,10 @@ void TxOrphanage::EraseForPeer(NodeId peer)\n     AssertLockHeld(g_cs_orphans);\n \n     int nErased = 0;\n-    std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n-    while (iter != mapOrphanTransactions.end())\n+    std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+    while (iter != m_orphans.end())\n     {\n-        std::map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        std::map<uint256, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n             nErased += EraseTx(maybeErase->second.tx->GetHash());\n@@ -102,7 +102,7 @@ void TxOrphanage::EraseForPeer(NodeId peer)\n     if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n }\n \n-unsigned int TxOrphanage::LimitOrphans(unsigned int nMaxOrphans)\n+unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n {\n     AssertLockHeld(g_cs_orphans);\n \n@@ -113,10 +113,10 @@ unsigned int TxOrphanage::LimitOrphans(unsigned int nMaxOrphans)\n         // Sweep out expired orphan pool entries:\n         int nErased = 0;\n         int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n-        std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n-        while (iter != mapOrphanTransactions.end())\n+        std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+        while (iter != m_orphans.end())\n         {\n-            std::map<uint256, COrphanTx>::iterator maybeErase = iter++;\n+            std::map<uint256, OrphanTx>::iterator maybeErase = iter++;\n             if (maybeErase->second.nTimeExpire <= nNow) {\n                 nErased += EraseTx(maybeErase->second.tx->GetHash());\n             } else {\n@@ -128,11 +128,11 @@ unsigned int TxOrphanage::LimitOrphans(unsigned int nMaxOrphans)\n         if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx due to expiration\\n\", nErased);\n     }\n     FastRandomContext rng;\n-    while (mapOrphanTransactions.size() > nMaxOrphans)\n+    while (m_orphans.size() > max_orphans)\n     {\n         // Evict a random orphan:\n-        size_t randompos = rng.randrange(g_orphan_list.size());\n-        EraseTx(g_orphan_list[randompos]->first);\n+        size_t randompos = rng.randrange(m_orphan_list.size());\n+        EraseTx(m_orphan_list[randompos]->first);\n         ++nEvicted;\n     }\n     return nEvicted;\n@@ -142,8 +142,8 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>\n {\n     AssertLockHeld(g_cs_orphans);\n     for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-        const auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(tx.GetHash(), i));\n-        if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n             for (const auto& elem : it_by_prev->second) {\n                 orphan_work_set.insert(elem->first);\n             }\n@@ -155,18 +155,18 @@ bool TxOrphanage::HaveTx(const GenTxid& gtxid) const\n {\n     LOCK(g_cs_orphans);\n     if (gtxid.IsWtxid()) {\n-        return g_orphans_by_wtxid.count(gtxid.GetHash());\n+        return m_wtxid_to_orphan_it.count(gtxid.GetHash());\n     } else {\n-        return mapOrphanTransactions.count(gtxid.GetHash());\n+        return m_orphans.count(gtxid.GetHash());\n     }\n }\n \n std::pair<CTransactionRef, NodeId> TxOrphanage::GetTx(const uint256& txid) const\n {\n     AssertLockHeld(g_cs_orphans);\n \n-    const auto it = mapOrphanTransactions.find(txid);\n-    if (it == mapOrphanTransactions.end()) return {nullptr, -1};\n+    const auto it = m_orphans.find(txid);\n+    if (it == m_orphans.end()) return {nullptr, -1};\n     return {it->second.tx, it->second.fromPeer};\n }\n \n@@ -181,8 +181,8 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n \n         // Which orphan pool entries must we evict?\n         for (const auto& txin : tx.vin) {\n-            auto itByPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n-            if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n+            auto itByPrev = m_outpoint_to_orphan_it.find(txin.prevout);\n+            if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n                 const uint256& orphanHash = orphanTx.GetHash();"
      },
      {
        "sha": "a5e6764d75c5c5e5277689245851e97597b7cc1a",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
        "patch": "@@ -36,14 +36,14 @@ class TxOrphanage {\n     void EraseForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n \n     /** Limit the orphanage to the given maximum */\n-    unsigned int LimitOrphans(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    unsigned int LimitOrphans(unsigned int max_orphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n     /** Add any orphans that list a particular tx as a parent into a peer's work set\n      * (ie orphans that may have found their final missing parent, and so should be reconsidered for the mempool) */\n     void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n protected:\n-    struct COrphanTx {\n+    struct OrphanTx {\n         CTransactionRef tx;\n         NodeId fromPeer;\n         int64_t nTimeExpire;\n@@ -52,9 +52,9 @@ class TxOrphanage {\n \n     /** Map from txid to orphan transaction record. Limited by\n      *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n-    std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+    std::map<uint256, OrphanTx> m_orphans GUARDED_BY(g_cs_orphans);\n \n-    using OrphanMap = decltype(mapOrphanTransactions);\n+    using OrphanMap = decltype(m_orphans);\n \n     struct IteratorComparator\n     {\n@@ -65,16 +65,16 @@ class TxOrphanage {\n         }\n     };\n \n-    /** Index from the parents' COutPoint into the mapOrphanTransactions. Used\n-     *  to remove orphan transactions from the mapOrphanTransactions */\n-    std::map<COutPoint, std::set<OrphanMap::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n+    /** Index from the parents' COutPoint into the m_orphans. Used\n+     *  to remove orphan transactions from the m_orphans */\n+    std::map<COutPoint, std::set<OrphanMap::iterator, IteratorComparator>> m_outpoint_to_orphan_it GUARDED_BY(g_cs_orphans);\n \n     /** Orphan transactions in vector for quick random eviction */\n-    std::vector<OrphanMap::iterator> g_orphan_list GUARDED_BY(g_cs_orphans);\n+    std::vector<OrphanMap::iterator> m_orphan_list GUARDED_BY(g_cs_orphans);\n \n-    /** Index from wtxid into the mapOrphanTransactions to lookup orphan\n+    /** Index from wtxid into the m_orphans to lookup orphan\n      *  transactions using their witness ids. */\n-    std::map<uint256, OrphanMap::iterator> g_orphans_by_wtxid GUARDED_BY(g_cs_orphans);\n+    std::map<uint256, OrphanMap::iterator> m_wtxid_to_orphan_it GUARDED_BY(g_cs_orphans);\n };\n \n #endif // BITCOIN_TXORPHANAGE_H"
      }
    ]
  },
  {
    "sha": "eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWVhZmIzMjRlZjYwNTdmNDBiNWM1ZmRkODQ2NDExMGU4MDliMGY3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T13:50:53Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T15:08:09Z"
      },
      "message": "net_processing: move AddToCompactExtraTransactions into PeerManagerImpl\n\nAllows making vExtraTxnForCompact and vExtraTxnForCompactIt member vars\ninstead of globals.",
      "tree": {
        "sha": "ece3731edd6340d867b4ed5267ce9da7d7a3eb55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ece3731edd6340d867b4ed5267ce9da7d7a3eb55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeafb324ef6057f40b5c5fdd8464110e809b0f7/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 10,
      "deletions": 8
    },
    "files": [
      {
        "sha": "af61e7064e503cf3161a7ab69a4625b80526678a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeeafb324ef6057f40b5c5fdd8464110e809b0f7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeeafb324ef6057f40b5c5fdd8464110e809b0f7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
        "patch": "@@ -459,19 +459,21 @@ class PeerManagerImpl final : public PeerManager\n \n     /** Storage for orphan information */\n     TxOrphanage m_orphanage;\n-};\n-} // namespace\n \n-namespace {\n-    /** Number of preferable block download peers. */\n-    int nPreferredDownload GUARDED_BY(cs_main) = 0;\n+    void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n     /** Orphan/conflicted/etc transactions that are kept for compact block reconstruction.\n      *  The last -blockreconstructionextratxn/DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN of\n      *  these are kept in a ring buffer */\n-    static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUARDED_BY(g_cs_orphans);\n+    std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUARDED_BY(g_cs_orphans);\n     /** Offset into vExtraTxnForCompact to insert the next tx */\n-    static size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n+    size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n+};\n+} // namespace\n+\n+namespace {\n+    /** Number of preferable block download peers. */\n+    int nPreferredDownload GUARDED_BY(cs_main) = 0;\n } // namespace\n \n namespace {\n@@ -1081,7 +1083,7 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats)\n     return true;\n }\n \n-static void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n+void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n     size_t max_extra_txn = gArgs.GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n     if (max_extra_txn <= 0)"
      }
    ]
  },
  {
    "sha": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTUwZTJkMWI5NWU3Y2E3NzA5YTk2NzFhYjIxZjExNjRiOGQwY2I4",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-02T09:36:48Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-02T09:40:11Z"
      },
      "message": "txorphanage: comment improvements",
      "tree": {
        "sha": "987034c53f4e886aa5e48d4123b1d07b61a87397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/987034c53f4e886aa5e48d4123b1d07b61a87397"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eeeafb324ef6057f40b5c5fdd8464110e809b0f7"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "df55cdb3befd95cf242240163316d29e52704387",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
        "patch": "@@ -13,7 +13,10 @@\n /** Guards orphan transactions and extra txs for compact blocks */\n extern RecursiveMutex g_cs_orphans;\n \n-/** Data structure to keep track of orphan transactions\n+/** A class to track orphan transactions (failed on TX_MISSING_INPUTS)\n+ * Since we cannot distinguish orphans from bad transactions with\n+ * non-existent inputs, we heavily limit the number of orphans\n+ * we keep and the duration we keep them for.\n  */\n class TxOrphanage {\n public:\n@@ -23,7 +26,9 @@ class TxOrphanage {\n     /** Check if we already have an orphan transaction (by txid or wtxid) */\n     bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n \n-    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    /** Get an orphan transaction and its orginating peer\n+     * (Transaction ref will be nullptr if not found)\n+     */\n     std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n     /** Erase an orphan by txid */\n@@ -32,7 +37,7 @@ class TxOrphanage {\n     /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n     void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n-    /** Erase all orphans included in / invalidated by a new block */\n+    /** Erase all orphans included in or invalidated by a new block */\n     void EraseForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n \n     /** Limit the orphanage to the given maximum */"
      }
    ]
  }
]