sipa,2015-04-25T16:41:02Z,"The HMAC for address inventory hashing is absolute overkill, but was easy to write. I doubt the performance matters.\n",https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-96234859,96234859,
sipa,2015-04-25T21:47:34Z,"Rebased on top of @gavinandresen's #6066 (so that I don't need the address hasher here).\n\nRemoved the boost::unordered_set usage for now, as it is incompatible with older boost versions (which don't have unordered_set::reserve).\n",https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-96284019,96284019,
gavinandresen,2015-04-26T19:24:25Z,"Code review ACK-- note I changed the CRollingBloomFilter implementation commit in #6066 .\n\nMeasured heap usage on OSX for a 1,000-entry mruset<CInv> : 72,192 bytes.\n(before this change: 100,992 bytes).\n\nI'm running a node with these changes now.\n",https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-96422464,96422464,
sipa,2015-04-26T20:59:22Z,"Rebased on updated #6066, and addressed a nit.\n",https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-96434748,96434748,
sipa,2015-04-26T21:04:32Z,"@gavinandresen I measure around a 50 byte overhead per mruset entry now. Before, it was 50 bytes + double storage of the elements.\n",https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-96435183,96435183,
sandakersmann,2015-04-27T13:49:48Z,Heading in src/mruset.h should be:\n// Copyright (c) 2012-2015 The Bitcoin Core developers\n,https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-96658861,96658861,
sipa,2015-04-27T14:27:50Z,@sandakersmann Why? It's only worked on in 2012 and 2015.\n,https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-96675191,96675191,
sandakersmann,2015-04-27T14:34:13Z,@sipa Last update was in 2014.\n,https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-96677819,96677819,
sipa,2015-04-27T17:30:51Z,"@sandakersmann Ok, fixed.\n",https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-96751152,96751152,
sipa,2015-04-30T15:14:35Z,"Made several changes:\n- The MRU size of mruset is now a constant (set at constructor time).\n- Restyled some of the rolling bloom filter code.\n\nI think there is a significant improvement possible to the size of the rolling bloom filter, by using a different tweak for multiple filters, and checking several filters for a 'contains'. I'll check the math and write a separate PR for that if found us",https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-97833767,97833767,
gavinandresen,2015-04-30T15:30:37Z,"@sipa: There's a good survey paper by Sasu Tarkoma et al:  ""Theory and Practice of Bloom Filters for Distributed Systems.""  Which pointed me to:  https://home.kookmin.ac.kr/~mkyoon/publications/2010TKDE.pdf \n... which has a more complicated scheme (maybe similar to what you're thinking).\n",https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-97839845,97839845,
gavinandresen,2015-04-30T15:41:22Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-97844006,97844006,
laanwj,2015-05-01T05:09:20Z,">  I think there is a significant improvement possible to the size of the rolling bloom filter, by using a different tweak for both, and checking both filters for a 'contains'. I'll check the math and write a separate PR for that if found useful.\n\n@sipa sounds great to me, although let's do that in a later pull, this is already a great improvement compared to the current state, so let's get this",https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-98046318,98046318,
laanwj,2015-05-01T10:52:05Z,Tested ACK\n,https://github.com/bitcoin/bitcoin/pull/6064#issuecomment-98099469,98099469,
gavinandresen,2015-04-26T18:58:34Z,"I'm probably just an old fuddy-duddy...\n... but I find the ""use swap to assign"" idiom hard to review.\nWhy not just:\norder.assign(nMaxSizeIn, set.end());\n",https://github.com/bitcoin/bitcoin/pull/6064#discussion_r29112655,29112655,src/mruset.h
gavinandresen,2015-04-26T19:03:01Z,Save a line of code with:\nfirst_used = (first_used+1)%nMaxSize;\n,https://github.com/bitcoin/bitcoin/pull/6064#discussion_r29112682,29112682,src/mruset.h
sipa,2015-04-26T20:39:45Z,"It's horrible, but it's the only way to make a vector release its memory, afaik.\n",https://github.com/bitcoin/bitcoin/pull/6064#discussion_r29113580,29113580,src/mruset.h
sipa,2015-04-26T20:40:23Z,"Modulo operator is slow, if it's not a compile-time known power-of-two constant.\n",https://github.com/bitcoin/bitcoin/pull/6064#discussion_r29113583,29113583,src/mruset.h
sipa,2015-04-26T20:58:11Z,Updated to use another one-line construct.\n,https://github.com/bitcoin/bitcoin/pull/6064#discussion_r29113708,29113708,src/mruset.h
laanwj,2015-04-30T12:57:47Z,Nit: indentation\n,https://github.com/bitcoin/bitcoin/pull/6064#discussion_r29426121,29426121,src/bloom.cpp
laanwj,2015-04-30T12:59:19Z,"Comment should be `two filters of nElements*2 each`, if I understand the above initialization correctly?\n",https://github.com/bitcoin/bitcoin/pull/6064#discussion_r29426232,29426232,src/bloom.cpp
laanwj,2015-04-30T13:10:49Z,"I'd prefer to wrap this counter around at nBloomSize, this avoids some `%` operations, and also avoids trouble with integer overflows when UIINT_MAX is not divisible by nBloomSize.\n",https://github.com/bitcoin/bitcoin/pull/6064#discussion_r29427076,29427076,src/bloom.cpp
laanwj,2015-04-30T13:36:26Z,This comment is no longer relevant: `contains` is self-documenting in contrast to `insert`'s second return value\n,https://github.com/bitcoin/bitcoin/pull/6064#discussion_r29429219,29429219,src/main.cpp
laanwj,2015-04-30T13:44:56Z,"AFAIK too. Though this is only important if we expect the size to change (become smaller) dynamically. \n\nI'm not sure I like having `clear()` double as set-maximum-size method. I'd prefer the maximum size to be passed to the constructor and be static over the lifetime of the object. If that's not possible, let's add a special `resize()` call for resizing (that happens to clear the structure too)",https://github.com/bitcoin/bitcoin/pull/6064#discussion_r29429962,29429962,src/mruset.h
laanwj,2015-04-30T13:58:26Z,I've checked that the old test still passes on the new code (a drawback of replacing the tests as well as the code that is tested :grin:)\n,https://github.com/bitcoin/bitcoin/pull/6064#discussion_r29431189,29431189,src/test/mruset_tests.cpp
