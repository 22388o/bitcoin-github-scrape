[
  {
    "sha": "dbf283a5840a623f9d745d531987599a87e5763e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmYyODNhNTg0MGE2MjNmOWQ3NDVkNTMxOTg3NTk5YTg3ZTU3NjNl",
    "commit": {
      "author": {
        "name": "Sriram",
        "email": "sriramdvt@gmail.com",
        "date": "2021-07-21T17:43:50Z"
      },
      "committer": {
        "name": "Sriram",
        "email": "sriramdvt@gmail.com",
        "date": "2021-09-01T06:34:24Z"
      },
      "message": "Minor changes to MiniWallet",
      "tree": {
        "sha": "56dbd3d3498155f928423aea7df77da409a975d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56dbd3d3498155f928423aea7df77da409a975d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbf283a5840a623f9d745d531987599a87e5763e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf283a5840a623f9d745d531987599a87e5763e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbf283a5840a623f9d745d531987599a87e5763e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf283a5840a623f9d745d531987599a87e5763e/comments",
    "author": {
      "login": "sriramdvt",
      "id": 41079588,
      "node_id": "MDQ6VXNlcjQxMDc5NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41079588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sriramdvt",
      "html_url": "https://github.com/sriramdvt",
      "followers_url": "https://api.github.com/users/sriramdvt/followers",
      "following_url": "https://api.github.com/users/sriramdvt/following{/other_user}",
      "gists_url": "https://api.github.com/users/sriramdvt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sriramdvt/subscriptions",
      "organizations_url": "https://api.github.com/users/sriramdvt/orgs",
      "repos_url": "https://api.github.com/users/sriramdvt/repos",
      "events_url": "https://api.github.com/users/sriramdvt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sriramdvt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sriramdvt",
      "id": 41079588,
      "node_id": "MDQ6VXNlcjQxMDc5NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41079588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sriramdvt",
      "html_url": "https://github.com/sriramdvt",
      "followers_url": "https://api.github.com/users/sriramdvt/followers",
      "following_url": "https://api.github.com/users/sriramdvt/following{/other_user}",
      "gists_url": "https://api.github.com/users/sriramdvt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sriramdvt/subscriptions",
      "organizations_url": "https://api.github.com/users/sriramdvt/orgs",
      "repos_url": "https://api.github.com/users/sriramdvt/repos",
      "events_url": "https://api.github.com/users/sriramdvt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sriramdvt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70676e40d8c6f025ab115e59324dadc5c49f2497",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70676e40d8c6f025ab115e59324dadc5c49f2497",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70676e40d8c6f025ab115e59324dadc5c49f2497"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c0ba8e9b2f23e4998a9acb8554f5ea1767fe27fc",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf283a5840a623f9d745d531987599a87e5763e/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf283a5840a623f9d745d531987599a87e5763e/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=dbf283a5840a623f9d745d531987599a87e5763e",
        "patch": "@@ -80,7 +80,7 @@ def __init__(self, test_node, *, mode=MiniWalletMode.ADDRESS_OP_TRUE):\n             self._scriptPubKey = bytes.fromhex(self._test_node.validateaddress(self._address)['scriptPubKey'])\n \n     def scan_blocks(self, *, start=1, num):\n-        \"\"\"Scan the blocks for self._address outputs and add them to self._utxos\"\"\"\n+        \"\"\"Scan the blocks for self._scriptPubKey outputs and add them to self._utxos\"\"\"\n         for i in range(start, start + num):\n             block = self._test_node.getblock(blockhash=self._test_node.getblockhash(i), verbosity=2)\n             for tx in block['tx']:\n@@ -176,7 +176,7 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         if mempool_valid:\n             assert_equal(tx_info['vsize'], vsize)\n             assert_equal(tx_info['fees']['base'], fee)\n-        return {'txid': tx_info['txid'], 'wtxid': tx_info['wtxid'], 'hex': tx_hex, 'tx': tx}\n+        return {'txid': tx_info['txid'], 'wtxid': tx_info['wtxid'], 'hex': tx_hex, 'tx': tx, 'fees': fee}\n \n     def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)"
      }
    ]
  },
  {
    "sha": "69dda69bf671533824651b979c8bec4551d78b17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWRkYTY5YmY2NzE1MzM4MjQ2NTFiOTc5YzhiZWM0NTUxZDc4YjE3",
    "commit": {
      "author": {
        "name": "Sriram",
        "email": "sriramdvt@gmail.com",
        "date": "2021-07-21T18:15:35Z"
      },
      "committer": {
        "name": "Sriram",
        "email": "sriramdvt@gmail.com",
        "date": "2021-09-01T08:25:53Z"
      },
      "message": "Run mempool_accept.py with MiniWallet\n\nReplaced all wallet functionality in `test/functional/mempool_accept.py` to use `test/functional/test_framework/wallet.py` instead of the wallet built with Bitcoin Core.\n\nCo-authored-by: Sishir Giri <sishirg27@gmail.com>\nCo-authored-by: Sebastian Falbesoner <sebastian.falbesoner@gmail.com>",
      "tree": {
        "sha": "b6b07d3d64c0628c3e4733675506c02636884214",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6b07d3d64c0628c3e4733675506c02636884214"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69dda69bf671533824651b979c8bec4551d78b17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69dda69bf671533824651b979c8bec4551d78b17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69dda69bf671533824651b979c8bec4551d78b17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69dda69bf671533824651b979c8bec4551d78b17/comments",
    "author": {
      "login": "sriramdvt",
      "id": 41079588,
      "node_id": "MDQ6VXNlcjQxMDc5NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41079588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sriramdvt",
      "html_url": "https://github.com/sriramdvt",
      "followers_url": "https://api.github.com/users/sriramdvt/followers",
      "following_url": "https://api.github.com/users/sriramdvt/following{/other_user}",
      "gists_url": "https://api.github.com/users/sriramdvt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sriramdvt/subscriptions",
      "organizations_url": "https://api.github.com/users/sriramdvt/orgs",
      "repos_url": "https://api.github.com/users/sriramdvt/repos",
      "events_url": "https://api.github.com/users/sriramdvt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sriramdvt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sriramdvt",
      "id": 41079588,
      "node_id": "MDQ6VXNlcjQxMDc5NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41079588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sriramdvt",
      "html_url": "https://github.com/sriramdvt",
      "followers_url": "https://api.github.com/users/sriramdvt/followers",
      "following_url": "https://api.github.com/users/sriramdvt/following{/other_user}",
      "gists_url": "https://api.github.com/users/sriramdvt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sriramdvt/subscriptions",
      "organizations_url": "https://api.github.com/users/sriramdvt/orgs",
      "repos_url": "https://api.github.com/users/sriramdvt/repos",
      "events_url": "https://api.github.com/users/sriramdvt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sriramdvt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbf283a5840a623f9d745d531987599a87e5763e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf283a5840a623f9d745d531987599a87e5763e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbf283a5840a623f9d745d531987599a87e5763e"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 54,
      "deletions": 82
    },
    "files": [
      {
        "sha": "1f5ed02ac4f39fa06b17a63447b3809d1ab8bd24",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 54,
        "deletions": 82,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dda69bf671533824651b979c8bec4551d78b17/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dda69bf671533824651b979c8bec4551d78b17/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=69dda69bf671533824651b979c8bec4551d78b17",
        "patch": "@@ -11,7 +11,6 @@\n from test_framework.key import ECKey\n from test_framework.messages import (\n     BIP125_SEQUENCE_NUMBER,\n-    COIN,\n     COutPoint,\n     CTxIn,\n     CTxOut,\n@@ -35,7 +34,7 @@\n     assert_equal,\n     assert_raises_rpc_error,\n )\n-\n+from test_framework.wallet import MiniWallet\n \n class MempoolAcceptanceTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -45,9 +44,6 @@ def set_test_params(self):\n         ]] * self.num_nodes\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def check_mempool_result(self, result_expected, *args, **kwargs):\n         \"\"\"Wrapper to check result of testmempoolaccept on node_0's mempool\"\"\"\n         result_test = self.nodes[0].testmempoolaccept(*args, **kwargs)\n@@ -58,12 +54,13 @@ def check_mempool_result(self, result_expected, *args, **kwargs):\n \n     def run_test(self):\n         node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n \n         self.log.info('Start with empty mempool, and 200 blocks')\n         self.mempool_size = 0\n+        miniwallet.scan_blocks(num=200)\n         assert_equal(node.getblockcount(), 200)\n         assert_equal(node.getmempoolinfo()['size'], self.mempool_size)\n-        coins = node.listunspent()\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n@@ -72,85 +69,68 @@ def run_test(self):\n         assert_raises_rpc_error(-22, 'TX decode failed', lambda: node.testmempoolaccept(rawtxs=['ff00baar']))\n \n         self.log.info('A transaction already in the blockchain')\n-        coin = coins.pop()  # Pick a random coin(base) to spend\n-        raw_tx_in_block = node.signrawtransactionwithwallet(node.createrawtransaction(\n-            inputs=[{'txid': coin['txid'], 'vout': coin['vout']}],\n-            outputs=[{node.getnewaddress(): 0.3}, {node.getnewaddress(): 49}],\n-        ))['hex']\n-        txid_in_block = node.sendrawtransaction(hexstring=raw_tx_in_block, maxfeerate=0)\n+        tx_in_block = miniwallet.send_self_transfer(from_node=node)\n         node.generate(1)\n         self.mempool_size = 0\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_in_block, 'allowed': False, 'reject-reason': 'txn-already-known'}],\n-            rawtxs=[raw_tx_in_block],\n+            result_expected=[{'txid': tx_in_block['txid'], 'allowed': False, 'reject-reason': 'txn-already-known'}],\n+            rawtxs=[tx_in_block['hex']],\n         )\n \n         self.log.info('A transaction not in the mempool')\n-        fee = Decimal('0.000007')\n-        raw_tx_0 = node.signrawtransactionwithwallet(node.createrawtransaction(\n-            inputs=[{\"txid\": txid_in_block, \"vout\": 0, \"sequence\": BIP125_SEQUENCE_NUMBER}],  # RBF is used later\n-            outputs=[{node.getnewaddress(): Decimal('0.3') - fee}],\n-        ))['hex']\n-        tx = tx_from_hex(raw_tx_0)\n-        txid_0 = tx.rehash()\n+        fee_rate = Decimal(\"0.003\")  # The default fee_rate in MiniWallet\n+        coin = miniwallet.get_utxo()  # Get a utxo and store it for later\n+        tx_0 = miniwallet.create_self_transfer(fee_rate=fee_rate, from_node=node, utxo_to_spend=coin, sequence=BIP125_SEQUENCE_NUMBER) # RBF is used later\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': fee}}],\n-            rawtxs=[raw_tx_0],\n+            result_expected=[{'txid': tx_0['txid'], 'allowed': True, 'vsize': tx_0['tx'].get_vsize(), 'fees': {'base': tx_0['fees']}}],\n+            rawtxs=[tx_0['hex']],\n         )\n \n         self.log.info('A final transaction not in the mempool')\n-        coin = coins.pop()  # Pick a random coin(base) to spend\n-        output_amount = Decimal('0.025')\n-        raw_tx_final = node.signrawtransactionwithwallet(node.createrawtransaction(\n-            inputs=[{'txid': coin['txid'], 'vout': coin['vout'], \"sequence\": 0xffffffff}],  # SEQUENCE_FINAL\n-            outputs=[{node.getnewaddress(): output_amount}],\n-            locktime=node.getblockcount() + 2000,  # Can be anything\n-        ))['hex']\n-        tx = tx_from_hex(raw_tx_final)\n-        fee_expected = coin['amount'] - output_amount\n+        tx_final = miniwallet.create_self_transfer(\n+            from_node=node,\n+            sequence=0xffffffff,  # SEQUENCE_FINAL\n+            locktime=node.getblockcount()+2000  # locktime can be anything\n+        )\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': fee_expected}}],\n-            rawtxs=[tx.serialize().hex()],\n+            result_expected=[{'txid': tx_final['txid'], 'allowed': True, 'vsize': tx_final['tx'].get_vsize(), 'fees': {'base': tx_0['fees']}}],\n+            rawtxs=[tx_final['hex']],\n             maxfeerate=0,\n         )\n-        node.sendrawtransaction(hexstring=raw_tx_final, maxfeerate=0)\n+        node.sendrawtransaction(hexstring=tx_final['hex'], maxfeerate=0)\n         self.mempool_size += 1\n \n         self.log.info('A transaction in the mempool')\n-        node.sendrawtransaction(hexstring=raw_tx_0)\n+        node.sendrawtransaction(hexstring=tx_0['hex'])\n         self.mempool_size += 1\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': False, 'reject-reason': 'txn-already-in-mempool'}],\n-            rawtxs=[raw_tx_0],\n+            result_expected=[{'txid': tx_0['txid'], 'allowed': False, 'reject-reason': 'txn-already-in-mempool'}],\n+            rawtxs=[tx_0['hex']],\n         )\n \n         self.log.info('A transaction that replaces a mempool transaction')\n-        tx = tx_from_hex(raw_tx_0)\n-        tx.vout[0].nValue -= int(fee * COIN)  # Double the fee\n-        tx.vin[0].nSequence = BIP125_SEQUENCE_NUMBER + 1  # Now, opt out of RBF\n-        raw_tx_0 = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n-        tx = tx_from_hex(raw_tx_0)\n-        txid_0 = tx.rehash()\n+        prev_fee = tx_0['fees']\n+        # remake the original tx_0 with more fee\n+        tx_0 = miniwallet.create_self_transfer(fee_rate=2*fee_rate, from_node=node, utxo_to_spend=coin, sequence=BIP125_SEQUENCE_NUMBER + 1) # Now, opt out of RBF\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': (2 * fee)}}],\n-            rawtxs=[raw_tx_0],\n+            result_expected=[{'txid': tx_0['txid'], 'allowed': True, 'vsize': tx_0['tx'].get_vsize(), 'fees': {'base': (2 * prev_fee)}}],\n+            rawtxs=[tx_0['hex']],\n         )\n \n         self.log.info('A transaction that conflicts with an unconfirmed tx')\n         # Send the transaction that replaces the mempool transaction and opts out of replaceability\n-        node.sendrawtransaction(hexstring=tx.serialize().hex(), maxfeerate=0)\n-        # take original raw_tx_0\n-        tx = tx_from_hex(raw_tx_0)\n-        tx.vout[0].nValue -= int(4 * fee * COIN)  # Set more fee\n-        # skip re-signing the tx\n+        node.sendrawtransaction(hexstring=tx_0['tx'].serialize().hex(), maxfeerate=0)\n+\n+        # remake the original tx_0 with even more fee to attempt to replace it\n+        tx_1 = miniwallet.create_self_transfer(fee_rate=4*fee_rate, from_node=node, utxo_to_spend=coin, mempool_valid=False,sequence=BIP125_SEQUENCE_NUMBER + 1)\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'txn-mempool-conflict'}],\n-            rawtxs=[tx.serialize().hex()],\n+            result_expected=[{'txid': tx_1['txid'], 'allowed': False, 'reject-reason': 'txn-mempool-conflict'}],\n+            rawtxs=[tx_1['hex']],\n             maxfeerate=0,\n         )\n \n         self.log.info('A transaction with missing inputs, that never existed')\n-        tx = tx_from_hex(raw_tx_0)\n+        tx = tx_from_hex(tx_0['hex'])\n         tx.vin[0].prevout = COutPoint(hash=int('ff' * 32, 16), n=14)\n         # skip re-signing the tx\n         self.check_mempool_result(\n@@ -159,49 +139,40 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction with missing inputs, that existed once in the past')\n-        tx = tx_from_hex(raw_tx_0)\n-        tx.vin[0].prevout.n = 1  # Set vout to 1, to spend the other outpoint (49 coins) of the in-chain-tx we want to double spend\n-        raw_tx_1 = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n-        txid_1 = node.sendrawtransaction(hexstring=raw_tx_1, maxfeerate=0)\n-        # Now spend both to \"clearly hide\" the outputs, ie. remove the coins from the utxo set by spending them\n-        raw_tx_spend_both = node.signrawtransactionwithwallet(node.createrawtransaction(\n-            inputs=[\n-                {'txid': txid_0, 'vout': 0},\n-                {'txid': txid_1, 'vout': 0},\n-            ],\n-            outputs=[{node.getnewaddress(): 0.1}]\n-        ))['hex']\n-        txid_spend_both = node.sendrawtransaction(hexstring=raw_tx_spend_both, maxfeerate=0)\n+        node.sendrawtransaction(hexstring=tx_0['hex'], maxfeerate=0) # spend the tx_0\n+        self.mempool_size += 1\n+        tx_1 = miniwallet.send_self_transfer(fee_rate=4*fee_rate, from_node=node)\n+        utxo_1 = miniwallet.get_utxo()\n+        miniwallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_1)\n+        miniwallet.send_self_transfer(from_node=node)\n         node.generate(1)\n         self.mempool_size = 0\n+\n         # Now see if we can add the coins back to the utxo set by sending the exact txs again\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': False, 'reject-reason': 'missing-inputs'}],\n-            rawtxs=[raw_tx_0],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'missing-inputs'}],\n+            rawtxs=[tx.serialize().hex()],\n         )\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_1, 'allowed': False, 'reject-reason': 'missing-inputs'}],\n-            rawtxs=[raw_tx_1],\n+            result_expected=[{'txid': tx_1['txid'], 'allowed': False, 'reject-reason': 'missing-inputs'}],\n+            rawtxs=[tx_1['hex']],\n         )\n \n         self.log.info('Create a signed \"reference\" tx for later use')\n-        raw_tx_reference = node.signrawtransactionwithwallet(node.createrawtransaction(\n-            inputs=[{'txid': txid_spend_both, 'vout': 0}],\n-            outputs=[{node.getnewaddress(): 0.05}],\n-        ))['hex']\n-        tx = tx_from_hex(raw_tx_reference)\n+        utxo_2 = miniwallet.get_utxo()\n+        tx_reference = miniwallet.create_self_transfer(from_node=node, utxo_to_spend=utxo_2)\n+        raw_tx_reference = tx_reference['hex']\n         # Reference tx should be valid on itself\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': tx.get_vsize(), 'fees': { 'base': Decimal('0.1') - Decimal('0.05')}}],\n-            rawtxs=[tx.serialize().hex()],\n+            result_expected=[{'txid': tx_reference['txid'], 'allowed': True, 'vsize': tx_reference['tx'].get_vsize(), 'fees': {'base': tx_reference['fees']}}],\n+            rawtxs=[raw_tx_reference],\n             maxfeerate=0,\n         )\n \n         self.log.info('A transaction with no outputs')\n         tx = tx_from_hex(raw_tx_reference)\n         tx.vout = []\n         # Skip re-signing the transaction for context independent checks from now on\n-        # tx = tx_from_hex(node.signrawtransactionwithwallet(tx.serialize().hex())['hex'])\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-vout-empty'}],\n             rawtxs=[tx.serialize().hex()],\n@@ -259,11 +230,11 @@ def run_test(self):\n \n         self.log.info('A coinbase transaction')\n         # Pick the input of the first tx we signed, so it has to be a coinbase tx\n-        raw_tx_coinbase_spent = node.getrawtransaction(txid=node.decoderawtransaction(hexstring=raw_tx_in_block)['vin'][0]['txid'])\n+        raw_tx_coinbase_spent = node.getrawtransaction(txid=node.decoderawtransaction(hexstring=tx_in_block['hex'])['vin'][0]['txid'])\n         tx = tx_from_hex(raw_tx_coinbase_spent)\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'coinbase'}],\n-            rawtxs=[tx.serialize().hex()],\n+            rawtxs=[raw_tx_coinbase_spent],\n         )\n \n         self.log.info('Some nonstandard transactions')\n@@ -325,7 +296,7 @@ def run_test(self):\n \n         self.log.info('A timelocked transaction')\n         tx = tx_from_hex(raw_tx_reference)\n-        tx.vin[0].nSequence -= 1  # Should be non-max, so locktime is not ignored\n+        tx.vin[0].nSequence = 0xffffffff - 1  # Should be non-max, so locktime is not ignored\n         tx.nLockTime = node.getblockcount() + 1\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'non-final'}],\n@@ -334,6 +305,7 @@ def run_test(self):\n \n         self.log.info('A transaction that is locked by BIP68 sequence logic')\n         tx = tx_from_hex(raw_tx_reference)\n+        tx.nVersion = 2\n         tx.vin[0].nSequence = 2  # We could include it in the second block mined from now, but not the very next one\n         # Can skip re-signing the tx because of early rejection\n         self.check_mempool_result("
      }
    ]
  }
]