[
  {
    "sha": "ae9ae6dad2f271f3745416ec9f2536adbae05a19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTlhZTZkYWQyZjI3MWYzNzQ1NDE2ZWM5ZjI1MzZhZGJhZTA1YTE5",
    "commit": {
      "author": {
        "name": "Christopher Jeffrey",
        "email": "chjjeffrey@gmail.com",
        "date": "2014-10-09T02:06:03Z"
      },
      "committer": {
        "name": "Christopher Jeffrey",
        "email": "chjjeffrey@gmail.com",
        "date": "2014-12-09T18:56:13Z"
      },
      "message": "allow compiling of libbitcoind.so.",
      "tree": {
        "sha": "a6f19a0e8214b6b9e065cc060d1db9a34cbe742b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6f19a0e8214b6b9e065cc060d1db9a34cbe742b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae9ae6dad2f271f3745416ec9f2536adbae05a19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae9ae6dad2f271f3745416ec9f2536adbae05a19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae9ae6dad2f271f3745416ec9f2536adbae05a19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae9ae6dad2f271f3745416ec9f2536adbae05a19/comments",
    "author": {
      "login": "chjj",
      "id": 470564,
      "node_id": "MDQ6VXNlcjQ3MDU2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/470564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chjj",
      "html_url": "https://github.com/chjj",
      "followers_url": "https://api.github.com/users/chjj/followers",
      "following_url": "https://api.github.com/users/chjj/following{/other_user}",
      "gists_url": "https://api.github.com/users/chjj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chjj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chjj/subscriptions",
      "organizations_url": "https://api.github.com/users/chjj/orgs",
      "repos_url": "https://api.github.com/users/chjj/repos",
      "events_url": "https://api.github.com/users/chjj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chjj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "chjj",
      "id": 470564,
      "node_id": "MDQ6VXNlcjQ3MDU2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/470564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chjj",
      "html_url": "https://github.com/chjj",
      "followers_url": "https://api.github.com/users/chjj/followers",
      "following_url": "https://api.github.com/users/chjj/following{/other_user}",
      "gists_url": "https://api.github.com/users/chjj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chjj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chjj/subscriptions",
      "organizations_url": "https://api.github.com/users/chjj/orgs",
      "repos_url": "https://api.github.com/users/chjj/repos",
      "events_url": "https://api.github.com/users/chjj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chjj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a1d03ca5265293e6419b0ffb68d277da6b1d9a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a1d03ca5265293e6419b0ffb68d277da6b1d9a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a1d03ca5265293e6419b0ffb68d277da6b1d9a0"
      }
    ],
    "stats": {
      "total": 240,
      "additions": 207,
      "deletions": 33
    },
    "files": [
      {
        "sha": "58241df191a1285ff3903a9d5c2543218d1af0a3",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -35,6 +35,11 @@ COVERAGE_INFO = baseline_filtered_combined.info baseline.info block_test.info \\\n   baseline_filtered.info block_test_filtered.info \\\n   leveldb_baseline_filtered.info test_bitcoin_coverage.info test_bitcoin.info\n \n+if ENABLE_DAEMONLIB\n+all:\n+\t$(MAKE) -C src\n+endif\n+\n dist-hook:\n \t-$(MAKE) -C $(top_distdir)/src/leveldb clean\n \t-$(MAKE) -C $(top_distdir)/src/secp256k1 distclean"
      },
      {
        "sha": "3f25415ed622572d87ec2b4862c76147e0139ee1",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 29,
        "deletions": 2,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -126,6 +126,12 @@ AC_ARG_ENABLE([reduce-exports],\n   [use_reduce_exports=$enableval],\n   [use_reduce_exports=auto])\n \n+AC_ARG_ENABLE([daemonlib],\n+  [AS_HELP_STRING([--enable-daemonlib],\n+  [compile all of bitcoind as a library (default is no)])],\n+  [use_daemonlib=$enableval],\n+  [use_daemonlib=no])\n+\n AC_ARG_ENABLE([ccache],\n   [AS_HELP_STRING([--enable-ccache],\n   [use ccache for building (default is yes if ccache is found)])],\n@@ -387,6 +393,9 @@ fi\n if test x$use_hardening != xno; then\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n   AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+  if test x$use_daemonlib = xno; then\n+    AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+  fi\n \n   AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[\n     AX_CHECK_PREPROC_FLAG([-U_FORTIFY_SOURCE],[\n@@ -400,7 +409,7 @@ if test x$use_hardening != xno; then\n   AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"])\n   AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n \n-  if test x$TARGET_OS != xwindows; then\n+  if test x$TARGET_OS != xwindows -a x$use_daemonlib = xno; then\n     # All windows code is PIC, forcing it on just adds useless compile warnings\n     AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n     AX_CHECK_LINK_FLAG([[-pie]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n@@ -418,6 +427,17 @@ if test x$use_hardening != xno; then\n   OBJCXXFLAGS=\"$CXXFLAGS\"\n fi\n \n+AC_DEFINE([ENABLE_DAEMONLIB],[0],[Enable daemonlib.])\n+AM_CONDITIONAL([ENABLE_DAEMONLIB],[false])\n+if test x$use_daemonlib != xno; then\n+  AX_CHECK_COMPILE_FLAG([-fPIC],[DAEMONLIB_CXXFLAGS=\"$DAEMONLIB_CXXFLAGS -fPIC\"])\n+  AC_DEFINE([ENABLE_DAEMONLIB],[1],[Enable daemonlib.])\n+  AM_CONDITIONAL([ENABLE_DAEMONLIB],[true])\n+  CXXFLAGS=\"$CXXFLAGS $DAEMONLIB_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $DAEMONLIB_CPPFLAGS\"\n+  OBJCXXFLAGS=\"$CXXFLAGS\"\n+fi\n+\n dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n@@ -463,7 +483,7 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   ]\n )\n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports != xno -a x$use_daemonlib = xno; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n   [\n     if test x$use_reduce_exports = xyes; then\n@@ -811,6 +831,13 @@ if test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_q\n   AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui or --enable-tests])\n fi\n \n+AC_MSG_CHECKING([whether to compile as daemonlib])\n+if test x$use_daemonlib != xno; then\n+  AC_MSG_RESULT([yes])\n+else\n+  AC_MSG_RESULT([no])\n+fi\n+\n AM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\n AM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\n AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])"
      },
      {
        "sha": "c4274a30022987c9930417379fa26f606c37872e",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -239,3 +239,42 @@ In this case there is no dependency on Berkeley DB 4.8.\n Mining is also possible in disable-wallet mode, but only using the `getblocktemplate` RPC\n call not `getwork`.\n \n+Compiling bitcoind as a shared object (`libbitcoind.so`)\n+--------------------------------------------------------\n+\n+### Compiling as a library\n+\n+``` bash\n+# ensure clean up\n+$ make clean\n+\n+# create configure file\n+$ ./autogen.sh\n+\n+# configure as a library with -fPIC on all object files\n+# use --with-incompatible-bdb if necessary\n+# use --prefix=/usr if necessary\n+$ ./configure --enable-daemonlib\n+\n+# build libbitcoind.so\n+$ time make\n+...\n+real    31m33.128s\n+user    16m23.930s\n+sys     2m52.310s\n+```\n+\n+`--enable-daemonlib` will compile all object files with `-fPIC` (Position\n+Independent Code - needed to create a shared object).\n+\n+`make` will then compile `./src/libbitcoind.so` (with `-shared -fPIC`), linking\n+to all the freshly compiled PIC object files. This will completely ignore\n+compiling tests and the QT object files.\n+\n+Without `--enable-daemonlib`, the Makefile with compile bitcoind with -fPIE\n+(Position Independent for Executable), this allows compiling of bitcoind.\n+\n+#### Todo\n+\n+- Find a way to compile bitcoind and libbitcoind.so at the same time without\n+  recompiling object files each time? Possibly use libtool's .lo/.la."
      },
      {
        "sha": "4ac63a27bb5ca39bcacf3f294047eb9a5539ac49",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -31,12 +31,15 @@ LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n LIBBITCOIN_UNIVALUE=univalue/libbitcoin_univalue.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n+LIBBITCOIND=libbitcoind.so\n \n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n+\n+if !ENABLE_DAEMONLIB\n noinst_LIBRARIES = \\\n   crypto/libbitcoin_crypto.a \\\n   libbitcoin_util.a \\\n@@ -76,6 +79,7 @@ BITCOIN_CORE_H = \\\n   amount.h \\\n   base58.h \\\n   bloom.h \\\n+  bitcoind.h \\\n   chain.h \\\n   chainparams.h \\\n   chainparamsbase.h \\\n@@ -152,10 +156,17 @@ JSON_H = \\\n   json/json_spirit_writer.h \\\n   json/json_spirit_writer_template.h\n \n+else\n+.PHONY: FORCE\n+BITCOIN_INCLUDES += $(BDB_CPPFLAGS)\n+endif\n+\n obj/build.h: FORCE\n \t@$(MKDIR_P) $(builddir)/obj\n \t@$(top_srcdir)/share/genbuild.sh $(abs_top_builddir)/src/obj/build.h \\\n \t  $(abs_top_srcdir)\n+\n+if !ENABLE_DAEMONLIB\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n # server: shared between bitcoind and bitcoin-qt\n@@ -165,6 +176,7 @@ libbitcoin_server_a_SOURCES = \\\n   alert.cpp \\\n   bloom.cpp \\\n   chain.cpp \\\n+  bitcoind.cpp \\\n   checkpoints.cpp \\\n   init.cpp \\\n   leveldbwrapper.cpp \\\n@@ -304,7 +316,7 @@ bitcoind_LDADD = \\\n if ENABLE_WALLET\n bitcoind_LDADD += libbitcoin_wallet.a\n endif\n-bitcoind_SOURCES = bitcoind.cpp\n+bitcoind_SOURCES = bitcoin-main.cpp\n #\n \n if TARGET_WINDOWS\n@@ -380,6 +392,7 @@ if USE_LIBSECP256K1\n libbitcoinconsensus_la_LIBADD += secp256k1/libsecp256k1.la\n endif\n endif\n+endif\n \n CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno\n \n@@ -405,6 +418,9 @@ clean-local:\n \t@test -f $(PROTOC)\n \t$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(abspath $(<D) $<)\n \n+if ENABLE_DAEMONLIB\n+include Makefile.daemon.include\n+else\n if ENABLE_TESTS\n include Makefile.test.include\n endif\n@@ -416,3 +432,4 @@ endif\n if ENABLE_QT_TESTS\n include Makefile.qttest.include\n endif\n+endif"
      },
      {
        "sha": "f411ea813b60c881299f5848e014911a9158dcb3",
        "filename": "src/Makefile.daemon.include",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/Makefile.daemon.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/Makefile.daemon.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.daemon.include?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -0,0 +1,43 @@\n+all: $(LIBBITCOIND)\n+\n+leveldb_obj = \\\n+\t$(patsubst %test.o,,\\\n+\t$(patsubst %bench.o,,\\\n+\t$(subst leveldb/db/leveldb_main.o,,\\\n+\t$(subst leveldb/util/testharness.o,,\\\n+\t$(subst leveldb/util/testutil.o,,\\\n+\t$(subst leveldb/port/port_win.o,,\\\n+\t\t$(subst .cc,.o,$(wildcard leveldb/**/*.cc)) \\\n+\t\t$(subst .cc,.o,$(wildcard leveldb/helpers/memenv/memenv.cc)) \\\n+\t))))))\n+\n+libbitcoind_obj = \\\n+\t$(subst bitcoin-main.o,, \\\n+\t\t$(subst bitcoin-cli.o,, \\\n+\t\t$(subst bitcoin-tx.o,, \\\n+\t\t$(subst .cpp,.o,$(wildcard *.cpp))))) \\\n+\t$(subst compat/glibcxx_compat.o,, \\\n+\t\t$(subst compat/glibc_compat.o,, \\\n+\t\t$(subst .cpp,.o,$(wildcard compat/*.cpp)))) \\\n+\t$(subst .cpp,.o,$(wildcard primitives/*.cpp)) \\\n+\t$(subst .cpp,.o,$(wildcard crypto/*.cpp)) \\\n+\t$(subst .cpp,.o,$(wildcard script/*.cpp)) \\\n+\t$(subst .cpp,.o,$(wildcard secp256k1/*.cpp)) \\\n+\t$(subst univalue/gen.o,, \\\n+\t\t$(subst .cpp,.o,$(wildcard univalue/*.cpp)))\n+\n+if GLIBC_BACK_COMPAT\n+libbitcoind_obj += compat/glibc_compat.o\n+libbitcoind_obj += compat/glibcxx_compat.o\n+endif\n+\n+clientversion.o: clientversion.cpp obj/build.h\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n+\t  $(BITCOIN_INCLUDES) $(BITCOIN_CONFIG_INCLUDES) \\\n+\t  $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@\n+\n+$(LIBBITCOIND): $(LIBLEVELDB) $(LIBMEMENV) $(LIBSECP256K1) $(libbitcoind_obj)\n+\t$(CC) -shared $(CXXFLAGS) $(CPPFLAGS) $(DEFS) $(LEVELDB_CPPFLAGS) \\\n+\t$(BITCOIN_INCLUDES) $(BITCOIN_CONFIG_INCLUDES) -o $@ $(BOOST_LIBS) \\\n+\t$(BDB_LIBS) $(PROTOBUF_LIBS) $(SSL_LIBS) $(LIBS) \\\n+\t$(leveldb_obj) $(libbitcoind_obj)"
      },
      {
        "sha": "b37f9cf4f703c0dc45bba5642b62a7dad73168c0",
        "filename": "src/bitcoin-main.cpp",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/bitcoin-main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/bitcoin-main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-main.cpp?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -0,0 +1,15 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bitcoind.h\"\n+\n+int main(int argc, char* argv[]) {\n+    SetupEnvironment();\n+\n+    // Connect bitcoind signal handlers\n+    noui_connect();\n+\n+    return (AppInit(argc, argv) ? 0 : 1);\n+}"
      },
      {
        "sha": "0e76df13c98e0c6f915e641f8754a35e12488808",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 21,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -3,17 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"clientversion.h\"\n-#include \"rpcserver.h\"\n-#include \"init.h\"\n-#include \"main.h\"\n-#include \"noui.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-\n-#include <boost/algorithm/string/predicate.hpp>\n-#include <boost/filesystem.hpp>\n-#include <boost/thread.hpp>\n+#include \"bitcoind.h\"\n \n /* Introduction text for doxygen: */\n \n@@ -174,13 +164,3 @@ bool AppInit(int argc, char* argv[])\n \n     return fRet;\n }\n-\n-int main(int argc, char* argv[])\n-{\n-    SetupEnvironment();\n-\n-    // Connect bitcoind signal handlers\n-    noui_connect();\n-\n-    return (AppInit(argc, argv) ? 0 : 1);\n-}"
      },
      {
        "sha": "0e34008a4105ed89b1128ec5695745ec7d0462e0",
        "filename": "src/bitcoind.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/bitcoind.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/bitcoind.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.h?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_BITCOIND\n+#define _BITCOIN_BITCOIND 1\n+\n+#include \"clientversion.h\"\n+#include \"rpcserver.h\"\n+#include \"init.h\"\n+#include \"main.h\"\n+#include \"noui.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"rpcclient.h\"\n+\n+#include <boost/algorithm/string/predicate.hpp>\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+extern void DetectShutdownThread(boost::thread_group* threadGroup);\n+extern bool AppInit(int argc, char* argv[]);\n+\n+#endif"
      },
      {
        "sha": "10abc3af66680de069833f7fc50ee03b2cf8e18f",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -15,7 +15,15 @@ namespace boost\n class thread_group;\n } // namespace boost\n \n+#ifdef ENABLE_WALLET\n+extern std::string strWalletFile;\n extern CWallet* pwalletMain;\n+#endif\n+\n+#include <boost/filesystem/path.hpp>\n+#include <boost/thread/mutex.hpp>\n+\n+void ThreadImport(std::vector<boost::filesystem::path> vImportFiles);\n \n void StartShutdown();\n bool ShutdownRequested();"
      },
      {
        "sha": "08c816474fd04343e04c47db68fe5c1ae4c4e824",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -29,10 +29,9 @@ class CLevelDBBatch\n {\n     friend class CLevelDBWrapper;\n \n-private:\n+public:\n     leveldb::WriteBatch batch;\n \n-public:\n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n     {\n@@ -63,7 +62,7 @@ class CLevelDBBatch\n \n class CLevelDBWrapper\n {\n-private:\n+public:\n     //! custom environment this database is using (may be NULL in case of default environment)\n     leveldb::Env* penv;\n \n@@ -85,7 +84,6 @@ class CLevelDBWrapper\n     //! the database itself\n     leveldb::DB* pdb;\n \n-public:\n     CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n     ~CLevelDBWrapper();\n "
      },
      {
        "sha": "53f9a5ac8887746535fc73e6e5d819eb78646bbf",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -26,11 +26,11 @@ using namespace std;\n \n void EnsureWalletIsUnlocked();\n \n-std::string static EncodeDumpTime(int64_t nTime) {\n+std::string EncodeDumpTime(int64_t nTime) {\n     return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n }\n \n-int64_t static DecodeDumpTime(const std::string &str) {\n+int64_t DecodeDumpTime(const std::string &str) {\n     static const boost::posix_time::ptime epoch = boost::posix_time::from_time_t(0);\n     static const std::locale loc(std::locale::classic(),\n         new boost::posix_time::time_input_facet(\"%Y-%m-%dT%H:%M:%SZ\"));\n@@ -43,7 +43,7 @@ int64_t static DecodeDumpTime(const std::string &str) {\n     return (ptime - epoch).total_seconds();\n }\n \n-std::string static EncodeDumpString(const std::string &str) {\n+std::string EncodeDumpString(const std::string &str) {\n     std::stringstream ret;\n     BOOST_FOREACH(unsigned char c, str) {\n         if (c <= 32 || c >= 128 || c == '%') {"
      },
      {
        "sha": "e8abb3da4648d92b70ba990dad50ff32b17e1baf",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"amount.h\"\n+#include \"rpcwallet.h\"\n #include \"base58.h\"\n #include \"core_io.h\"\n #include \"rpcserver.h\""
      },
      {
        "sha": "2b532414efed53a91bafbc2567da76cb104f3866",
        "filename": "src/rpcwallet.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.h?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOINRPC_WALLET_H_\n+#define _BITCOINRPC_WALLET_H_ 1\n+\n+#include \"wallet.h\"\n+#include \"walletdb.h\"\n+\n+#include <stdint.h>\n+\n+CAmount GetAccountBalance(CWalletDB& walletdb, const std::string& strAccount, int nMinDepth, const isminefilter& filter);\n+CAmount GetAccountBalance(const std::string& strAccount, int nMinDepth, const isminefilter& filter);\n+\n+#endif"
      },
      {
        "sha": "604e9e72125fc6222151ee5a55396fe85448a7f4",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9ae6dad2f271f3745416ec9f2536adbae05a19/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ae9ae6dad2f271f3745416ec9f2536adbae05a19",
        "patch": "@@ -105,8 +105,6 @@ class CAddressBookData\n class CWallet : public CCryptoKeyStore, public CValidationInterface\n {\n private:\n-    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n-\n     CWalletDB *pwalletdbEncryption;\n \n     //! the current wallet version: clients below this version are not able to load the wallet\n@@ -201,6 +199,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;"
      }
    ]
  }
]