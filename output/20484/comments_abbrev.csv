DrahtBot,2020-11-25 06:50:27,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20286 (rpc: deprecate `addresses` and `reqSigs` from rpc outputs by mjdietzx)\n* #16795 (rpc: have raw transaction decodi",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-733505284,733505284,
kristapsk,2020-11-26 00:57:39,"I don't think deprecating `feerate` here so fast is a good idea, as `estimatesmartfee` is widely used RPC by various software. Maybe just add `fee_rate` here and deprecate `feerate` at some point later in the future?",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734013544,734013544,
jonatack,2020-11-26 18:05:10,"> I don't think deprecating `feerate` here so fast is a good idea, as `estimatesmartfee` is widely used RPC by various software. Maybe just add `fee_rate` here and deprecate `feerate` at some point later in the future?\n\nI agree, but here are two reasons why deprecating immediately may (a) be acceptable to reviewers and (b) a good idea:\n\n(a) I made a similar argument a couple months ago aga",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734429396,734429396,
MarcoFalke,2020-11-26 18:14:07,What is the benefit of forcing every user to change their scripts when both units can be supported forever at no additional cost?,https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734432191,734432191,
jonatack,2020-11-26 18:55:08,"> What is the benefit of forcing every user to change their scripts when both units can be supported forever at no additional cost?\n\nMaybe this is answered by (b) in my comment above: confusion, possible footgun.\n\nAn alternative would be to rename them and add the units in the names, but I think that's sub-optimal if we want to simplify and standardize the naming and units and it would be ",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734443196,734443196,
sipa,2020-11-26 19:10:04,"If the goal is reducing user confusion rather than due to maintenance burden, we could just make the new fields preferred over the old ones, and e.g. stop listing the old ones in help output.",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734447367,734447367,
kristapsk,2020-11-26 19:12:18,"> What is the benefit of forcing every user to change their scripts when both units can be supported forever at no additional cost?\n\nThat's the approach c-lightning is taking with various calls.\n\nThis isn't affecting just some scripts, I think this may affect most of the Bitcoin software in existence that relies on Bitcoin Core. And I believe [not breaking userspace](https://github.com/bit",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734448045,734448045,
jonatack,2020-11-26 20:24:13,"> What is the benefit of forcing every user to change their scripts when both units can be supported forever at no additional cost?\n\nRemember, the scripts don't have to change if the deprecation flag is passed on restart after updating to 0.21. They have to change only if the code is actually removed later on. The deprecation just hides the fields somewhat similarly to @sipa's suggestion.\n",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734467441,734467441,
kristapsk,2020-11-26 20:30:43,"> scripts don't have to change if the deprecation flag is passed on restart after updating to 0.21.\n\nThat might only help if Bitcoin Core is bundled into other software, user uses his own scripts or is Bitcoin dev in general.\n\nOrdinary user may use Bitcoin Core, c-lightning, JoinMarket and other software relying on Bitcoin Core on his computer, updating everything or parts with OS package ",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734469046,734469046,
jonatack,2020-11-26 21:26:39,"Ok, to not spend more time on this, please confirm if you think this would be safe and clear.\n\n```json\n{\n  ""feerate"": 0.00078464,\n  ""fee_rate"": 78.464,\n  ""blocks"": 6\n}\n```\n",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734483224,734483224,
kristapsk,2020-11-26 21:34:24,"@jonatack , yes that looks ok to me, should not break any properly written software.",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734484985,734484985,
jonatack,2020-11-27 11:20:32,"Thinking about this more, I propose we:\n\n- add sat/vB RPCs `setfeerate` (done in #20391), `estimatefeerate`, and maybe `estimaterawfeerate`\n- deprecate `feeRate` (done in #20483)\n- make `settxfee` and `estimatesmartfee` hidden RPCs to avoid confusion for new users while allowing current ones to keep using them (update: settxfee now made hidden in #20391)\n\nThis seems the best way to: \",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734786305,734786305,
kristapsk,2020-11-27 11:33:14,"@jonatack  , sounds like a good plan to me!",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734791231,734791231,
jonatack,2020-11-27 11:35:15,@kristapsk great! I'll do it today.,https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734791967,734791967,
luke-jr,2020-11-27 15:33:29,"I like @jonatack 's plan/approach better, closing.",https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734887594,734887594,
jonatack,2020-11-26 17:45:50,"Would need to also update the help further up, e.g.\n```diff\n+++ b/src/rpc/mining.cpp\n@@ -1022,7 +1022,7 @@ static RPCHelpMan submitheader()\n static RPCHelpMan estimatesmartfee()\n {\n     return RPCHelpMan{""estimatesmartfee"",\n-                ""\nEstimates the approximate fee per kilobyte needed for a transaction to begin\n""\n+                ""\nEstimates the approximate fee rate in sa",https://github.com/bitcoin/bitcoin/pull/20484#discussion_r531168376,531168376,src/rpc/mining.cpp
