[
  {
    "sha": "fa7d0503d320900e14c4d9bc016d65c7431070bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdkMDUwM2QzMjA5MDBlMTRjNGQ5YmMwMTZkNjVjNzQzMTA3MGJi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-25T20:26:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-02-25T15:33:01Z"
      },
      "message": "rpc: Move OuterType enum to header\n\nThis is needed so that it can be used by RPCResult\n\nAlso,\n* rename NAMED_ARG to NONE for generalization.\n* change RPCArg constructors to initialize the members by moving values",
      "tree": {
        "sha": "08f4ed35f020ec4c75085e8b8bd0aa064957d21d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08f4ed35f020ec4c75085e8b8bd0aa064957d21d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7d0503d320900e14c4d9bc016d65c7431070bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjAuAv+MipCrjkRlCTRv4RMvr0BuzJYmhX8AzIZYSylG3Iu7mx26BG7y8vjxg5D\ndPBCiHRkfKlmTKTz80dJYfg1lbpPBlkJnQbpi3FQ2paVUePHryyvy4h1JeePaCvR\nyMfbfcOTn3P2EJIR+V4QKoOA3Jw94FvDYlpOy1P1fOjCmjRNray/spVKaPkxaaxT\nR9fdOTX7UZcr5M/PYW9c3/EkEuDvRtePMiCzc2vJglTI8tNVLT8qVAgbZ5ezskxm\nk0ctN/1kV2WoTrGfvoFp8mb1T97mTJLcTAkN6BsQ4vQLU5hA2ma6Qslmz9E562qM\n+5HEADULlIVfl1geIPaPDv/3RJq5JG6TsG2fShKyXmPB0QhOffR3zZXa6lnhSyeX\nX7ewhPP+KGksr/74NVtFBFEjGr0oUkKNXv04YLb//kz6T69UIYWFkb+1jLlhaoIY\nRkyAMdr1nx0YrsEJwgSpsBhpjLRssq2/dA/cHiHKqwgC1D3XVXVff1gkv3Ext8gR\nXWa20rYG\n=+8/L\n-----END PGP SIGNATURE-----",
        "payload": "tree 08f4ed35f020ec4c75085e8b8bd0aa064957d21d\nparent 31c0006a6cd5ecbabd119eaf9dae6978aa54f150\nauthor MarcoFalke <falke.marco@gmail.com> 1577305619 +0700\ncommitter MarcoFalke <falke.marco@gmail.com> 1582644781 +0700\n\nrpc: Move OuterType enum to header\n\nThis is needed so that it can be used by RPCResult\n\nAlso,\n* rename NAMED_ARG to NONE for generalization.\n* change RPCArg constructors to initialize the members by moving values\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7d0503d320900e14c4d9bc016d65c7431070bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7d0503d320900e14c4d9bc016d65c7431070bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7d0503d320900e14c4d9bc016d65c7431070bb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31c0006a6cd5ecbabd119eaf9dae6978aa54f150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31c0006a6cd5ecbabd119eaf9dae6978aa54f150",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31c0006a6cd5ecbabd119eaf9dae6978aa54f150"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 42,
      "deletions": 43
    },
    "files": [
      {
        "sha": "189a9efe7b9152b7f4933852cc14862d6663c162",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 17,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7d0503d320900e14c4d9bc016d65c7431070bb/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7d0503d320900e14c4d9bc016d65c7431070bb/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fa7d0503d320900e14c4d9bc016d65c7431070bb",
        "patch": "@@ -311,21 +311,10 @@ struct Sections {\n         m_sections.push_back(s);\n     }\n \n-    /**\n-     * Serializing RPCArgs depends on the outer type. Only arrays and\n-     * dictionaries can be nested in json. The top-level outer type is \"named\n-     * arguments\", a mix between a dictionary and arrays.\n-     */\n-    enum class OuterType {\n-        ARR,\n-        OBJ,\n-        NAMED_ARG, // Only set on first recursion\n-    };\n-\n     /**\n      * Recursive helper to translate an RPCArg into sections\n      */\n-    void Push(const RPCArg& arg, const size_t current_indent = 5, const OuterType outer_type = OuterType::NAMED_ARG)\n+    void Push(const RPCArg& arg, const size_t current_indent = 5, const OuterType outer_type = OuterType::NONE)\n     {\n         const auto indent = std::string(current_indent, ' ');\n         const auto indent_next = std::string(current_indent + 2, ' ');\n@@ -338,7 +327,7 @@ struct Sections {\n         case RPCArg::Type::AMOUNT:\n         case RPCArg::Type::RANGE:\n         case RPCArg::Type::BOOL: {\n-            if (outer_type == OuterType::NAMED_ARG) return; // Nothing more to do for non-recursive types on first recursion\n+            if (outer_type == OuterType::NONE) return; // Nothing more to do for non-recursive types on first recursion\n             auto left = indent;\n             if (arg.m_type_str.size() != 0 && push_name) {\n                 left += \"\\\"\" + arg.m_name + \"\\\": \" + arg.m_type_str.at(0);\n@@ -351,28 +340,28 @@ struct Sections {\n         }\n         case RPCArg::Type::OBJ:\n         case RPCArg::Type::OBJ_USER_KEYS: {\n-            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString();\n+            const auto right = outer_type == OuterType::NONE ? \"\" : arg.ToDescriptionString();\n             PushSection({indent + (push_name ? \"\\\"\" + arg.m_name + \"\\\": \" : \"\") + \"{\", right});\n             for (const auto& arg_inner : arg.m_inner) {\n                 Push(arg_inner, current_indent + 2, OuterType::OBJ);\n             }\n             if (arg.m_type != RPCArg::Type::OBJ) {\n                 PushSection({indent_next + \"...\", \"\"});\n             }\n-            PushSection({indent + \"}\" + (outer_type != OuterType::NAMED_ARG ? \",\" : \"\"), \"\"});\n+            PushSection({indent + \"}\" + (outer_type != OuterType::NONE ? \",\" : \"\"), \"\"});\n             break;\n         }\n         case RPCArg::Type::ARR: {\n             auto left = indent;\n             left += push_name ? \"\\\"\" + arg.m_name + \"\\\": \" : \"\";\n             left += \"[\";\n-            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString();\n+            const auto right = outer_type == OuterType::NONE ? \"\" : arg.ToDescriptionString();\n             PushSection({left, right});\n             for (const auto& arg_inner : arg.m_inner) {\n                 Push(arg_inner, current_indent + 2, OuterType::ARR);\n             }\n             PushSection({indent_next + \"...\", \"\"});\n-            PushSection({indent + \"]\" + (outer_type != OuterType::NAMED_ARG ? \",\" : \"\"), \"\"});\n+            PushSection({indent + \"]\" + (outer_type != OuterType::NONE ? \",\" : \"\"), \"\"});\n             break;\n         }\n "
      },
      {
        "sha": "661a007e95b4e1e11dee046165243e8896f2df13",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 36,
        "deletions": 26,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7d0503d320900e14c4d9bc016d65c7431070bb/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7d0503d320900e14c4d9bc016d65c7431070bb/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fa7d0503d320900e14c4d9bc016d65c7431070bb",
        "patch": "@@ -101,6 +101,16 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n /** Returns, given services flags, a list of humanly readable (known) network services */\n UniValue GetServicesNames(ServiceFlags services);\n \n+/**\n+ * Serializing JSON objects depends on the outer type. Only arrays and\n+ * dictionaries can be nested in json. The top-level outer type is \"NONE\".\n+ */\n+enum class OuterType {\n+    ARR,\n+    OBJ,\n+    NONE, // Only set on first recursion\n+};\n+\n struct RPCArg {\n     enum class Type {\n         OBJ,\n@@ -140,37 +150,37 @@ struct RPCArg {\n     const std::vector<std::string> m_type_str; //!< Should be empty unless it is supposed to override the auto-generated type strings. Vector length is either 0 or 2, m_type_str.at(0) will override the type of the value in a key-value pair, m_type_str.at(1) will override the type in the argument description.\n \n     RPCArg(\n-        const std::string& name,\n-        const Type& type,\n-        const Fallback& fallback,\n-        const std::string& description,\n-        const std::string& oneline_description = \"\",\n-        const std::vector<std::string>& type_str = {})\n-        : m_name{name},\n-          m_type{type},\n-          m_fallback{fallback},\n-          m_description{description},\n-          m_oneline_description{oneline_description},\n-          m_type_str{type_str}\n+        const std::string name,\n+        const Type type,\n+        const Fallback fallback,\n+        const std::string description,\n+        const std::string oneline_description = \"\",\n+        const std::vector<std::string> type_str = {})\n+        : m_name{std::move(name)},\n+          m_type{std::move(type)},\n+          m_fallback{std::move(fallback)},\n+          m_description{std::move(description)},\n+          m_oneline_description{std::move(oneline_description)},\n+          m_type_str{std::move(type_str)}\n     {\n         CHECK_NONFATAL(type != Type::ARR && type != Type::OBJ);\n     }\n \n     RPCArg(\n-        const std::string& name,\n-        const Type& type,\n-        const Fallback& fallback,\n-        const std::string& description,\n-        const std::vector<RPCArg>& inner,\n-        const std::string& oneline_description = \"\",\n-        const std::vector<std::string>& type_str = {})\n-        : m_name{name},\n-          m_type{type},\n-          m_inner{inner},\n-          m_fallback{fallback},\n-          m_description{description},\n-          m_oneline_description{oneline_description},\n-          m_type_str{type_str}\n+        const std::string name,\n+        const Type type,\n+        const Fallback fallback,\n+        const std::string description,\n+        const std::vector<RPCArg> inner,\n+        const std::string oneline_description = \"\",\n+        const std::vector<std::string> type_str = {})\n+        : m_name{std::move(name)},\n+          m_type{std::move(type)},\n+          m_inner{std::move(inner)},\n+          m_fallback{std::move(fallback)},\n+          m_description{std::move(description)},\n+          m_oneline_description{std::move(oneline_description)},\n+          m_type_str{std::move(type_str)}\n     {\n         CHECK_NONFATAL(type == Type::ARR || type == Type::OBJ);\n     }"
      }
    ]
  },
  {
    "sha": "fa6b061fc118995eec41766519a11bc0dd1a901d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZiMDYxZmMxMTg5OTVlZWM0MTc2NjUxOWExMWJjMGRkMWE5MDFk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-01-09T17:00:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-02-25T15:35:58Z"
      },
      "message": "rpc: Auto-format RPCResult",
      "tree": {
        "sha": "751a1f2e3d33f20775b6deb1da15657346b19047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/751a1f2e3d33f20775b6deb1da15657346b19047"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6b061fc118995eec41766519a11bc0dd1a901d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj4iQwAm7ow54D9h/Hu7AtVT+N2DHsI0L5KKTxhuXFZ2AT/cCJghi3qbytI1rom\n62EDw6/Ev2cpahZ374kaUnlxk72bqUMJFae35SKOO2mYiVWoo3urolGSiO/qxLS1\nyQ+0D9fTzNuhPEnd4Hvr8CnD6+p98giW5CA7CxkoVG0Tvz9BOu5Ocvhzvq1zSJoq\nXcvmTEGr/kG0susysAXkEtJQb2U0GBox6LOrUiMZKXKhYdS2Nl8zstaJIht7QFIx\n01B2uLtFXlZ+Byw3P6F1dg9dDJMQL+sGYH52P/TQLdTPTZTZkrycnf6pKMuruEFo\n10n9ujRNmI435Nv2IvKuCEMSECIbgIUkaAvyd+Xt0YvvIM6jvghfDz10lFBPSAQi\nrc1Ln9uyM/K5TANCy6qqi7H5LGLDypKK8+Wj4TH0s8h/p23nZbddwX/IFk0XnRo1\nnR+ewP0pneFoKS/rFx8SUkaup52gjritMod17ASEYICY++qs6G+jJ2AfLDaCXRRE\npbhYxQpV\n=fhQK\n-----END PGP SIGNATURE-----",
        "payload": "tree 751a1f2e3d33f20775b6deb1da15657346b19047\nparent fa7d0503d320900e14c4d9bc016d65c7431070bb\nauthor MarcoFalke <falke.marco@gmail.com> 1578589257 +0700\ncommitter MarcoFalke <falke.marco@gmail.com> 1582644958 +0700\n\nrpc: Auto-format RPCResult\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6b061fc118995eec41766519a11bc0dd1a901d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6b061fc118995eec41766519a11bc0dd1a901d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6b061fc118995eec41766519a11bc0dd1a901d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa7d0503d320900e14c4d9bc016d65c7431070bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7d0503d320900e14c4d9bc016d65c7431070bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7d0503d320900e14c4d9bc016d65c7431070bb"
      }
    ],
    "stats": {
      "total": 2678,
      "additions": 1473,
      "deletions": 1205
    },
    "files": [
      {
        "sha": "f508af128247383e03910ddf4be12212c78bb965",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 298,
        "deletions": 322,
        "changes": 620,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa6b061fc118995eec41766519a11bc0dd1a901d",
        "patch": "@@ -178,8 +178,7 @@ static UniValue getblockcount(const JSONRPCRequest& request)\n                 \"The genesis block has height 0.\\n\",\n                 {},\n                 RPCResult{\n-            \"n    (numeric) The current block count\\n\"\n-                },\n+                    RPCResult::Type::NUM, \"\", \"The current block count\"},\n                 RPCExamples{\n                     HelpExampleCli(\"getblockcount\", \"\")\n             + HelpExampleRpc(\"getblockcount\", \"\")\n@@ -196,8 +195,7 @@ static UniValue getbestblockhash(const JSONRPCRequest& request)\n                 \"\\nReturns the hash of the best (tip) block in the most-work fully-validated chain.\\n\",\n                 {},\n                 RPCResult{\n-            \"\\\"hex\\\"      (string) the block hash, hex-encoded\\n\"\n-                },\n+                    RPCResult::Type::STR_HEX, \"\", \"the block hash, hex-encoded\"},\n                 RPCExamples{\n                     HelpExampleCli(\"getbestblockhash\", \"\")\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n@@ -227,11 +225,11 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n                     {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n-            \"{                           (json object)\\n\"\n-            \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n-            \"  \\\"height\\\" : {     (numeric) Block height\\n\"\n-            \"}\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"hash\", \"The blockhash\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Block height\"},\n+                    }},\n                 RPCExamples{\n                     HelpExampleCli(\"waitfornewblock\", \"1000\")\n             + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n@@ -267,11 +265,11 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n                     {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n-            \"{                           (json object)\\n\"\n-            \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n-            \"  \\\"height\\\" : {     (numeric) Block height\\n\"\n-            \"}\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"hash\", \"The blockhash\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Block height\"},\n+                    }},\n                 RPCExamples{\n                     HelpExampleCli(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n             + HelpExampleRpc(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n@@ -311,11 +309,11 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n                     {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n-            \"{                           (json object)\\n\"\n-            \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n-            \"  \\\"height\\\" : {     (numeric) Block height\\n\"\n-            \"}\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"hash\", \"The blockhash\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Block height\"},\n+                    }},\n                 RPCExamples{\n                     HelpExampleCli(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n             + HelpExampleRpc(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n@@ -365,8 +363,7 @@ static UniValue getdifficulty(const JSONRPCRequest& request)\n                 \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\",\n                 {},\n                 RPCResult{\n-            \"n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n-                },\n+                    RPCResult::Type::NUM, \"\", \"the proof-of-work difficulty as a multiple of the minimum difficulty.\"},\n                 RPCExamples{\n                     HelpExampleCli(\"getdifficulty\", \"\")\n             + HelpExampleRpc(\"getdifficulty\", \"\")\n@@ -377,37 +374,35 @@ static UniValue getdifficulty(const JSONRPCRequest& request)\n     return GetDifficulty(::ChainActive().Tip());\n }\n \n-static std::string EntryDescriptionString()\n-{\n-    return \"    \\\"vsize\\\" : n,            (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\\n\"\n-           \"    \\\"size\\\" : n,             (numeric) (DEPRECATED) same as vsize. Only returned if bitcoind is started with -deprecatedrpc=size\\n\"\n-           \"                              size will be completely removed in v0.20.\\n\"\n-           \"    \\\"weight\\\" : n,           (numeric) transaction weight as defined in BIP 141.\\n\"\n-           \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \" (DEPRECATED)\\n\"\n-           \"    \\\"modifiedfee\\\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\\n\"\n-           \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n-           \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n-           \"    \\\"descendantcount\\\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\\n\"\n-           \"    \\\"descendantsize\\\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)\\n\"\n-           \"    \\\"descendantfees\\\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\\n\"\n-           \"    \\\"ancestorcount\\\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)\\n\"\n-           \"    \\\"ancestorsize\\\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)\\n\"\n-           \"    \\\"ancestorfees\\\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\\n\"\n-           \"    \\\"wtxid\\\" : hash,         (string) hash of serialized transaction, including witness data\\n\"\n-           \"    \\\"fees\\\" : {\\n\"\n-           \"        \\\"base\\\" : n,         (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n-           \"        \\\"modified\\\" : n,     (numeric) transaction fee with fee deltas used for mining priority in \" + CURRENCY_UNIT + \"\\n\"\n-           \"        \\\"ancestor\\\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in \" + CURRENCY_UNIT + \"\\n\"\n-           \"        \\\"descendant\\\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in \" + CURRENCY_UNIT + \"\\n\"\n-           \"    }\\n\"\n-           \"    \\\"depends\\\" : [           (json array) unconfirmed transactions used as inputs for this transaction\\n\"\n-           \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n-           \"       ... ]\\n\"\n-           \"    \\\"spentby\\\" : [           (json array) unconfirmed transactions spending outputs from this transaction\\n\"\n-           \"        \\\"transactionid\\\",    (string) child transaction id\\n\"\n-           \"       ... ]\\n\"\n-           \"    \\\"bip125-replaceable\\\" : true|false,  (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)\\n\";\n-}\n+static std::vector<RPCResult> MempoolEntryDescription() { return {\n+    RPCResult{RPCResult::Type::NUM, \"vsize\", \"virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\"},\n+    RPCResult{RPCResult::Type::NUM, \"size\", \"(DEPRECATED) same as vsize. Only returned if bitcoind is started with -deprecatedrpc=size\\n\"\n+                                            \"size will be completely removed in v0.20.\"},\n+    RPCResult{RPCResult::Type::NUM, \"weight\", \"transaction weight as defined in BIP 141.\"},\n+    RPCResult{RPCResult::Type::STR_AMOUNT, \"fee\", \"transaction fee in \" + CURRENCY_UNIT + \" (DEPRECATED)\"},\n+    RPCResult{RPCResult::Type::STR_AMOUNT, \"modifiedfee\", \"transaction fee with fee deltas used for mining priority (DEPRECATED)\"},\n+    RPCResult{RPCResult::Type::NUM_TIME, \"time\", \"local time transaction entered pool in seconds since 1 Jan 1970 GMT\"},\n+    RPCResult{RPCResult::Type::NUM, \"height\", \"block height when transaction entered pool\"},\n+    RPCResult{RPCResult::Type::NUM, \"descendantcount\", \"number of in-mempool descendant transactions (including this one)\"},\n+    RPCResult{RPCResult::Type::NUM, \"descendantsize\", \"virtual transaction size of in-mempool descendants (including this one)\"},\n+    RPCResult{RPCResult::Type::STR_AMOUNT, \"descendantfees\", \"modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\"},\n+    RPCResult{RPCResult::Type::NUM, \"ancestorcount\", \"number of in-mempool ancestor transactions (including this one)\"},\n+    RPCResult{RPCResult::Type::NUM, \"ancestorsize\", \"virtual transaction size of in-mempool ancestors (including this one)\"},\n+    RPCResult{RPCResult::Type::STR_AMOUNT, \"ancestorfees\", \"modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\"},\n+    RPCResult{RPCResult::Type::STR_HEX, \"wtxid\", \"hash of serialized transaction, including witness data\"},\n+    RPCResult{RPCResult::Type::OBJ, \"fees\", \"\",\n+        {\n+            RPCResult{RPCResult::Type::STR_AMOUNT, \"base\", \"transaction fee in \" + CURRENCY_UNIT},\n+            RPCResult{RPCResult::Type::STR_AMOUNT, \"modified\", \"transaction fee with fee deltas used for mining priority in \" + CURRENCY_UNIT},\n+            RPCResult{RPCResult::Type::STR_AMOUNT, \"ancestor\", \"modified fees (see above) of in-mempool ancestors (including this one) in \" + CURRENCY_UNIT},\n+            RPCResult{RPCResult::Type::STR_AMOUNT, \"descendant\", \"modified fees (see above) of in-mempool descendants (including this one) in \" + CURRENCY_UNIT},\n+        }},\n+    RPCResult{RPCResult::Type::ARR, \"depends\", \"unconfirmed transactions used as inputs for this transaction\",\n+        {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"parent transaction id\"}}},\n+    RPCResult{RPCResult::Type::ARR, \"spentby\", \"unconfirmed transactions spending outputs from this transaction\",\n+        {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"child transaction id\"}}},\n+    RPCResult{RPCResult::Type::BOOL, \"bip125-replaceable\", \"Whether this transaction could be replaced due to BIP125 (replace-by-fee)\"},\n+};}\n \n static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPoolEntry& e) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n {\n@@ -506,17 +501,17 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n                 {\n                     {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 },\n-                RPCResult{\"for verbose = false\",\n-            \"[                     (json array of string)\\n\"\n-            \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nResult: (for verbose = true):\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            + EntryDescriptionString()\n-            + \"  }, ...\\n\"\n-            \"}\\n\"\n+                {\n+                    RPCResult{\"for verbose = false\",\n+                        RPCResult::Type::ARR, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR_HEX, \"\", \"The transaction id\"},\n+                        }},\n+                    RPCResult{\"for verbose = true\",\n+                        RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ_DYN, \"transactionid\", \"\", MempoolEntryDescription()},\n+                        }},\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getrawmempool\", \"true\")\n@@ -541,18 +536,10 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n                 },\n                 {\n                     RPCResult{\"for verbose = false\",\n-            \"[                       (json array of strings)\\n\"\n-            \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool ancestor transaction\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-                    },\n+                        RPCResult::Type::ARR, \"\", \"\",\n+                        {{RPCResult::Type::STR_HEX, \"\", \"The transaction id of an in-mempool ancestor transaction\"}}},\n                     RPCResult{\"for verbose = true\",\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            + EntryDescriptionString()\n-            + \"  }, ...\\n\"\n-            \"}\\n\"\n-                    },\n+                        RPCResult::Type::OBJ_DYN, \"transactionid\", \"\", MempoolEntryDescription()},\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n@@ -609,18 +596,13 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n                 },\n                 {\n                     RPCResult{\"for verbose = false\",\n-            \"[                       (json array of strings)\\n\"\n-            \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool descendant transaction\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-                    },\n+                        RPCResult::Type::ARR, \"\", \"\",\n+                        {{RPCResult::Type::STR_HEX, \"\", \"The transaction id of an in-mempool descendant transaction\"}}},\n                     RPCResult{\"for verbose = true\",\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            + EntryDescriptionString()\n-            + \"  }, ...\\n\"\n-            \"}\\n\"\n-                    },\n+                        RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ_DYN, \"transactionid\", \"\", MempoolEntryDescription()},\n+                        }},\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n@@ -675,10 +657,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n                 },\n                 RPCResult{\n-            \"{                           (json object)\\n\"\n-            + EntryDescriptionString()\n-            + \"}\\n\"\n-                },\n+                    RPCResult::Type::OBJ_DYN, \"\", \"\", MempoolEntryDescription()},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n@@ -709,8 +688,7 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n                     {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The height index\"},\n                 },\n                 RPCResult{\n-            \"\\\"hash\\\"         (string) The block hash\\n\"\n-                },\n+                    RPCResult::Type::STR_HEX, \"\", \"The block hash\"},\n                 RPCExamples{\n                     HelpExampleCli(\"getblockhash\", \"1000\")\n             + HelpExampleRpc(\"getblockhash\", \"1000\")\n@@ -738,27 +716,26 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n                 },\n                 {\n                     RPCResult{\"for verbose = true\",\n-            \"{\\n\"\n-            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n-            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n-            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n-            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n-            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n-            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n-            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n-            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n-            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n-            \"  \\\"chainwork\\\" : \\\"0000...1f3\\\"     (string) Expected number of hashes required to produce the current chain (in hex)\\n\"\n-            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n-            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n-            \"  \\\"nextblockhash\\\" : \\\"hash\\\",      (string) The hash of the next block\\n\"\n-            \"}\\n\"\n-                    },\n+                        RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR_HEX, \"hash\", \"the block hash (same as provided)\"},\n+                            {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations, or -1 if the block is not on the main chain\"},\n+                            {RPCResult::Type::NUM, \"height\", \"The block height or index\"},\n+                            {RPCResult::Type::NUM, \"version\", \"The block version\"},\n+                            {RPCResult::Type::STR_HEX, \"versionHex\", \"The block version formatted in hexadecimal\"},\n+                            {RPCResult::Type::STR_HEX, \"merkleroot\", \"The merkle root\"},\n+                            {RPCResult::Type::NUM_TIME, \"time\", \"The block time expressed in \" + UNIX_EPOCH_TIME},\n+                            {RPCResult::Type::NUM_TIME, \"mediantime\", \"The median block time expressed in \" + UNIX_EPOCH_TIME},\n+                            {RPCResult::Type::NUM, \"nonce\", \"The nonce\"},\n+                            {RPCResult::Type::STR_HEX, \"bits\", \"The bits\"},\n+                            {RPCResult::Type::NUM, \"difficulty\", \"The difficulty\"},\n+                            {RPCResult::Type::STR_HEX, \"chainwork\", \"Expected number of hashes required to produce the current chain\"},\n+                            {RPCResult::Type::NUM, \"nTx\", \"The number of transactions in the block\"},\n+                            {RPCResult::Type::STR_HEX, \"previousblockhash\", \"The hash of the previous block\"},\n+                            {RPCResult::Type::STR_HEX, \"nextblockhash\", \"The hash of the next block\"},\n+                        }},\n                     RPCResult{\"for verbose=false\",\n-            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-                    },\n+                        RPCResult::Type::STR_HEX, \"\", \"A string that is serialized, hex-encoded data for block 'hash'\"},\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n@@ -840,44 +817,45 @@ static UniValue getblock(const JSONRPCRequest& request)\n                 },\n                 {\n                     RPCResult{\"for verbosity = 0\",\n-            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-                    },\n+                RPCResult::Type::STR_HEX, \"\", \"A string that is serialized, hex-encoded data for block 'hash'\"},\n                     RPCResult{\"for verbosity = 1\",\n-            \"{\\n\"\n-            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n-            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n-            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n-            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n-            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n-            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n-            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n-            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n-            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n-            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n-            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n-            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n-            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n-            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n-            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n-            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n-            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n-            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n-            \"}\\n\"\n-                    },\n+                RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::STR_HEX, \"hash\", \"the block hash (same as provided)\"},\n+                    {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations, or -1 if the block is not on the main chain\"},\n+                    {RPCResult::Type::NUM, \"size\", \"The block size\"},\n+                    {RPCResult::Type::NUM, \"strippedsize\", \"The block size excluding witness data\"},\n+                    {RPCResult::Type::NUM, \"weight\", \"The block weight as defined in BIP 141\"},\n+                    {RPCResult::Type::NUM, \"height\", \"The block height or index\"},\n+                    {RPCResult::Type::NUM, \"version\", \"The block version\"},\n+                    {RPCResult::Type::STR_HEX, \"versionHex\", \"The block version formatted in hexadecimal\"},\n+                    {RPCResult::Type::STR_HEX, \"merkleroot\", \"The merkle root\"},\n+                    {RPCResult::Type::ARR, \"tx\", \"The transaction ids\",\n+                        {{RPCResult::Type::STR_HEX, \"\", \"The transaction id\"}}},\n+                    {RPCResult::Type::NUM_TIME, \"time\",       \"The block time expressed in \" + UNIX_EPOCH_TIME},\n+                    {RPCResult::Type::NUM_TIME, \"mediantime\", \"The median block time expressed in \" + UNIX_EPOCH_TIME},\n+                    {RPCResult::Type::NUM, \"nonce\", \"The nonce\"},\n+                    {RPCResult::Type::STR_HEX, \"bits\", \"The bits\"},\n+                    {RPCResult::Type::NUM, \"difficulty\", \"The difficulty\"},\n+                    {RPCResult::Type::STR_HEX, \"chainwork\", \"Expected number of hashes required to produce the chain up to this block (in hex)\"},\n+                    {RPCResult::Type::NUM, \"nTx\", \"The number of transactions in the block\"},\n+                    {RPCResult::Type::STR_HEX, \"previousblockhash\", \"The hash of the previous block\"},\n+                    {RPCResult::Type::STR_HEX, \"nextblockhash\", \"The hash of the next block\"},\n+                }},\n                     RPCResult{\"for verbosity = 2\",\n-            \"{\\n\"\n-            \"  ...,                     Same output as verbosity = 1.\\n\"\n-            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n-            \"         ,...\\n\"\n-            \"  ],\\n\"\n-            \"  ,...                     Same output as verbosity = 1.\\n\"\n-            \"}\\n\"\n-                    },\n-                },\n+                RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"Same output as verbosity = 1\"},\n+                    {RPCResult::Type::ARR, \"tx\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::ELISION, \"\", \"The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result\"},\n+                        }},\n+                    }},\n+                    {RPCResult::Type::ELISION, \"\", \"Same output as verbosity = 1\"},\n+                }},\n+        },\n                 RPCExamples{\n                     HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n@@ -928,8 +906,7 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n             \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\"},\n                 },\n                 RPCResult{\n-            \"n    (numeric) Height of the last block pruned.\\n\"\n-                },\n+                    RPCResult::Type::NUM, \"\", \"Height of the last block pruned\"},\n                 RPCExamples{\n                     HelpExampleCli(\"pruneblockchain\", \"1000\")\n             + HelpExampleRpc(\"pruneblockchain\", \"1000\")\n@@ -983,17 +960,17 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n                 \"Note this call may take some time.\\n\",\n                 {},\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"height\\\" : n,     (numeric) The current block height (index)\\n\"\n-            \"  \\\"bestblock\\\" : \\\"hex\\\",   (string) The hash of the block at the tip of the chain\\n\"\n-            \"  \\\"transactions\\\" : n,      (numeric) The number of transactions with unspent outputs\\n\"\n-            \"  \\\"txouts\\\" : n,            (numeric) The number of unspent transaction outputs\\n\"\n-            \"  \\\"bogosize\\\" : n,          (numeric) A meaningless metric for UTXO set size\\n\"\n-            \"  \\\"hash_serialized_2\\\": \\\"hash\\\", (string) The serialized hash\\n\"\n-            \"  \\\"disk_size\\\" : n,         (numeric) The estimated size of the chainstate on disk\\n\"\n-            \"  \\\"total_amount\\\" : x.xxx          (numeric) The total amount\\n\"\n-            \"}\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n+                        {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n+                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n+                        {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n+                        {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n+                        {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n+                    }},\n                 RPCExamples{\n                     HelpExampleCli(\"gettxoutsetinfo\", \"\")\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n@@ -1031,23 +1008,22 @@ UniValue gettxout(const JSONRPCRequest& request)\n                     {\"include_mempool\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"bestblock\\\" :  \\\"hash\\\",    (string) The hash of the block at the tip of the chain\\n\"\n-            \"  \\\"confirmations\\\" : n,       (numeric) The number of confirmations\\n\"\n-            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"scriptPubKey\\\" : {         (json object)\\n\"\n-            \"     \\\"asm\\\" : \\\"code\\\",       (string) \\n\"\n-            \"     \\\"hex\\\" : \\\"hex\\\",        (string) \\n\"\n-            \"     \\\"reqSigs\\\" : n,          (numeric) Number of required signatures\\n\"\n-            \"     \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n-            \"     \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n-            \"        \\\"address\\\"     (string) bitcoin address\\n\"\n-            \"        ,...\\n\"\n-            \"     ]\\n\"\n-            \"  },\\n\"\n-            \"  \\\"coinbase\\\" : true|false   (boolean) Coinbase or not\\n\"\n-            \"}\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n+                        {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"value\", \"The transaction value in \" + CURRENCY_UNIT},\n+                        {RPCResult::Type::OBJ, \"scriptPubKey\", \"\",\n+                            {\n+                                {RPCResult::Type::STR_HEX, \"asm\", \"\"},\n+                                {RPCResult::Type::STR_HEX, \"hex\", \"\"},\n+                                {RPCResult::Type::NUM, \"reqSigs\", \"Number of required signatures\"},\n+                                {RPCResult::Type::STR_HEX, \"type\", \"The type, eg pubkeyhash\"},\n+                                {RPCResult::Type::ARR, \"addresses\", \"array of bitcoin addresses\",\n+                                    {{RPCResult::Type::STR, \"address\", \"bitcoin address\"}}},\n+                            }},\n+                        {RPCResult::Type::BOOL, \"coinbase\", \"Coinbase or not\"},\n+                    }},\n                 RPCExamples{\n             \"\\nGet unspent transactions\\n\"\n             + HelpExampleCli(\"listunspent\", \"\") +\n@@ -1112,8 +1088,7 @@ static UniValue verifychain(const JSONRPCRequest& request)\n                     {\"nblocks\", RPCArg::Type::NUM, /* default */ strprintf(\"%d, 0=all\", nCheckDepth), \"The number of blocks to check.\"},\n                 },\n                 RPCResult{\n-            \"true|false       (boolean) Verified or not\\n\"\n-                },\n+                    RPCResult::Type::BOOL, \"\", \"Verified or not\"},\n                 RPCExamples{\n                     HelpExampleCli(\"verifychain\", \"\")\n             + HelpExampleRpc(\"verifychain\", \"\")\n@@ -1203,45 +1178,49 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n                 \"Returns an object containing various state info regarding blockchain processing.\\n\",\n                 {},\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"chain\\\" : \\\"xxxx\\\",              (string) current network name (main, test, regtest)\\n\"\n-            \"  \\\"blocks\\\" : xxxxxx,             (numeric) the height of the most-work fully-validated chain. The genesis block has height 0\\n\"\n-            \"  \\\"headers\\\" : xxxxxx,            (numeric) the current number of headers we have validated\\n\"\n-            \"  \\\"bestblockhash\\\" : \\\"...\\\",       (string) the hash of the currently best block\\n\"\n-            \"  \\\"difficulty\\\" : xxxxxx,         (numeric) the current difficulty\\n\"\n-            \"  \\\"mediantime\\\" : xxxxxx,         (numeric) median time for the current best block\\n\"\n-            \"  \\\"verificationprogress\\\" : xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n-            \"  \\\"initialblockdownload\\\" : xxxx, (boolean) (debug information) estimate of whether this node is in Initial Block Download mode.\\n\"\n-            \"  \\\"chainwork\\\" : \\\"xxxx\\\"           (string) total amount of work in active chain, in hexadecimal\\n\"\n-            \"  \\\"size_on_disk\\\" : xxxxxx,       (numeric) the estimated size of the block and undo files on disk\\n\"\n-            \"  \\\"pruned\\\" : xx,                 (boolean) if the blocks are subject to pruning\\n\"\n-            \"  \\\"pruneheight\\\" : xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n-            \"  \\\"automatic_pruning\\\" : xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n-            \"  \\\"prune_target_size\\\" : xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n-            \"  \\\"softforks\\\" : {                (json object) status of softforks\\n\"\n-            \"     \\\"xxxx\\\" : {                 (string) name of the softfork\\n\"\n-            \"        \\\"type\\\" : \\\"xxxx\\\",         (string) one of \\\"buried\\\", \\\"bip9\\\"\\n\"\n-            \"        \\\"bip9\\\": {               (json object) status of bip9 softforks (only for \\\"bip9\\\" type)\\n\"\n-            \"           \\\"status\\\" : \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n-            \"           \\\"bit\\\" : xx,           (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n-            \"           \\\"start_time\\\" : xx,     (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"           \\\"timeout\\\" : xx,       (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n-            \"           \\\"since\\\" : xx,         (numeric) height of the first block to which the status applies\\n\"\n-            \"           \\\"statistics\\\" : {      (json object) numeric statistics about BIP9 signalling for a softfork\\n\"\n-            \"              \\\"period\\\" : xx,     (numeric) the length in blocks of the BIP9 signalling period \\n\"\n-            \"              \\\"threshold\\\" : xx,  (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n-            \"              \\\"elapsed\\\" : xx,    (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n-            \"              \\\"count\\\" : xx,      (numeric) the number of blocks with the version bit set in the current period \\n\"\n-            \"              \\\"possible\\\" : xx    (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n-            \"           }\\n\"\n-            \"        },\\n\"\n-            \"        \\\"height\\\" : \\\"xxxxxx\\\",     (numeric) height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\\n\"\n-            \"        \\\"active\\\" : xx,           (boolean) true if the rules are enforced for the mempool and the next block\\n\"\n-            \"     }\\n\"\n-            \"  }\\n\"\n-            \"  \\\"warnings\\\" : \\\"...\\\",           (string) any network and blockchain warnings.\\n\"\n-            \"}\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"chain\", \"current network name (main, test, regtest)\"},\n+                        {RPCResult::Type::NUM, \"blocks\", \"the height of the most-work fully-validated chain. The genesis block has height 0\"},\n+                        {RPCResult::Type::NUM, \"headers\", \"the current number of headers we have validated\"},\n+                        {RPCResult::Type::STR, \"bestblockhash\", \"the hash of the currently best block\"},\n+                        {RPCResult::Type::NUM, \"difficulty\", \"the current difficulty\"},\n+                        {RPCResult::Type::NUM, \"mediantime\", \"median time for the current best block\"},\n+                        {RPCResult::Type::NUM, \"verificationprogress\", \"estimate of verification progress [0..1]\"},\n+                        {RPCResult::Type::BOOL, \"initialblockdownload\", \"(debug information) estimate of whether this node is in Initial Block Download mode\"},\n+                        {RPCResult::Type::STR_HEX, \"chainwork\", \"total amount of work in active chain, in hexadecimal\"},\n+                        {RPCResult::Type::NUM, \"size_on_disk\", \"the estimated size of the block and undo files on disk\"},\n+                        {RPCResult::Type::BOOL, \"pruned\", \"if the blocks are subject to pruning\"},\n+                        {RPCResult::Type::NUM, \"pruneheight\", \"lowest-height complete block stored (only present if pruning is enabled)\"},\n+                        {RPCResult::Type::BOOL, \"automatic_pruning\", \"whether automatic pruning is enabled (only present if pruning is enabled)\"},\n+                        {RPCResult::Type::NUM, \"prune_target_size\", \"the target size used by pruning (only present if automatic pruning is enabled)\"},\n+                        {RPCResult::Type::OBJ_DYN, \"softforks\", \"status of softforks\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"xxxx\", \"name of the softfork\",\n+                            {\n+                                {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip9\\\"\"},\n+                                {RPCResult::Type::OBJ, \"bip9\", \"status of bip9 softforks (only for \\\"bip9\\\" type)\",\n+                                {\n+                                    {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n+                                    {RPCResult::Type::NUM, \"bit\", \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\"},\n+                                    {RPCResult::Type::NUM_TIME, \"start_time\", \"the minimum median time past of a block at which the bit gains its meaning\"},\n+                                    {RPCResult::Type::NUM_TIME, \"timeout\", \"the median time past of a block at which the deployment is considered failed if not yet locked in\"},\n+                                    {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n+                                    {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP9 signalling for a softfork\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"period\", \"the length in blocks of the BIP9 signalling period\"},\n+                                        {RPCResult::Type::NUM, \"threshold\", \"the number of blocks with the version bit set required to activate the feature\"},\n+                                        {RPCResult::Type::NUM, \"elapsed\", \"the number of blocks elapsed since the beginning of the current period\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"the number of blocks with the version bit set in the current period\"},\n+                                        {RPCResult::Type::BOOL, \"possible\", \"returns false if there are not enough blocks left in this period to pass activation threshold\"},\n+                                    }},\n+                                }},\n+                                {RPCResult::Type::NUM, \"height\", \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n+                                {RPCResult::Type::BOOL, \"active\", \"true if the rules are enforced for the mempool and the next block\"},\n+                            }},\n+                        }},\n+                        {RPCResult::Type::STR, \"warnings\", \"any network and blockchain warnings\"},\n+                    }},\n                 RPCExamples{\n                     HelpExampleCli(\"getblockchaininfo\", \"\")\n             + HelpExampleRpc(\"getblockchaininfo\", \"\")\n@@ -1316,27 +1295,20 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n                 \" including the main chain as well as orphaned branches.\\n\",\n                 {},\n                 RPCResult{\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"height\\\" : xxxx,         (numeric) height of the chain tip\\n\"\n-            \"    \\\"hash\\\" : \\\"xxxx\\\",         (string) block hash of the tip\\n\"\n-            \"    \\\"branchlen\\\" : 0          (numeric) zero for main chain\\n\"\n-            \"    \\\"status\\\" : \\\"active\\\"      (string) \\\"active\\\" for the main chain\\n\"\n-            \"  },\\n\"\n-            \"  {\\n\"\n-            \"    \\\"height\\\" : xxxx,\\n\"\n-            \"    \\\"hash\\\" : \\\"xxxx\\\",\\n\"\n-            \"    \\\"branchlen\\\" : 1          (numeric) length of branch connecting the tip to the main chain\\n\"\n-            \"    \\\"status\\\" : \\\"xxxx\\\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\\n\"\n-            \"  }\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {{RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::NUM, \"height\", \"height of the chain tip\"},\n+                            {RPCResult::Type::STR_HEX, \"hash\", \"block hash of the tip\"},\n+                            {RPCResult::Type::NUM, \"branchlen\", \"zero for main chain, otherwise length of branch connecting the tip to the main chain\"},\n+                            {RPCResult::Type::STR, \"status\", \"status of the chain, \\\"active\\\" for the main chain\\n\"\n             \"Possible values for status:\\n\"\n             \"1.  \\\"invalid\\\"               This branch contains at least one invalid block\\n\"\n             \"2.  \\\"headers-only\\\"          Not all blocks for this branch are available, but the headers are valid\\n\"\n             \"3.  \\\"valid-headers\\\"         All blocks are available for this branch, but they were never fully validated\\n\"\n             \"4.  \\\"valid-fork\\\"            This branch is not part of the active chain, but is fully validated\\n\"\n-            \"5.  \\\"active\\\"                This is the tip of the active main chain, which is certainly valid\\n\"\n-                },\n+            \"5.  \\\"active\\\"                This is the tip of the active main chain, which is certainly valid\"},\n+                        }}}},\n                 RPCExamples{\n                     HelpExampleCli(\"getchaintips\", \"\")\n             + HelpExampleRpc(\"getchaintips\", \"\")\n@@ -1436,16 +1408,16 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n                 {},\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"loaded\\\" : true|false         (boolean) True if the mempool is fully loaded\\n\"\n-            \"  \\\"size\\\" : xxxxx,               (numeric) Current tx count\\n\"\n-            \"  \\\"bytes\\\" : xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\\n\"\n-            \"  \\\"usage\\\" : xxxxx,              (numeric) Total memory usage for the mempool\\n\"\n-            \"  \\\"maxmempool\\\" : xxxxx,         (numeric) Maximum memory usage for the mempool\\n\"\n-            \"  \\\"mempoolminfee\\\" : xxxxx       (numeric) Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\\n\"\n-            \"  \\\"minrelaytxfee\\\" : xxxxx       (numeric) Current minimum relay fee for transactions\\n\"\n-            \"}\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n+                        {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n+                        {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n+                        {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n+                        {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n+                    }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n@@ -1576,17 +1548,17 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n                     {\"blockhash\", RPCArg::Type::STR_HEX, /* default */ \"chain tip\", \"The hash of the block that ends the window.\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"time\\\" : xxxxx,                         (numeric) The timestamp for the final block in the window, expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n-            \"  \\\"txcount\\\" : xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\\n\"\n-            \"  \\\"window_final_block_hash\\\" : \\\"...\\\",      (string) The hash of the final block in the window.\\n\"\n-            \"  \\\"window_final_block_height\\\" : xxxxx,    (numeric) The height of the final block in the window.\\n\"\n-            \"  \\\"window_block_count\\\" : xxxxx,           (numeric) Size of the window in number of blocks.\\n\"\n-            \"  \\\"window_tx_count\\\" : xxxxx,              (numeric) The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n-            \"  \\\"window_interval\\\" : xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n-            \"  \\\"txrate\\\" : x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\\n\"\n-            \"}\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::NUM_TIME, \"time\", \"The timestamp for the final block in the window, expressed in \" + UNIX_EPOCH_TIME},\n+                        {RPCResult::Type::NUM, \"txcount\", \"The total number of transactions in the chain up to that point\"},\n+                        {RPCResult::Type::STR_HEX, \"window_final_block_hash\", \"The hash of the final block in the window\"},\n+                        {RPCResult::Type::NUM, \"window_final_block_height\", \"The height of the final block in the window.\"},\n+                        {RPCResult::Type::NUM, \"window_block_count\", \"Size of the window in number of blocks\"},\n+                        {RPCResult::Type::NUM, \"window_tx_count\", \"The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0\"},\n+                        {RPCResult::Type::NUM, \"window_interval\", \"The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0\"},\n+                        {RPCResult::Type::NUM, \"txrate\", \"The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0\"},\n+                    }},\n                 RPCExamples{\n                     HelpExampleCli(\"getchaintxstats\", \"\")\n             + HelpExampleRpc(\"getchaintxstats\", \"2016\")\n@@ -1715,44 +1687,45 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                         \"stats\"},\n                 },\n                 RPCResult{\n-            \"{                           (json object)\\n\"\n-            \"  \\\"avgfee\\\" : xxxxx,          (numeric) Average fee in the block\\n\"\n-            \"  \\\"avgfeerate\\\" : xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n-            \"  \\\"avgtxsize\\\" : xxxxx,       (numeric) Average transaction size\\n\"\n-            \"  \\\"blockhash\\\" : xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n-            \"  \\\"feerate_percentiles\\\" : [  (array of numeric) Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\\n\"\n-            \"      \\\"10th_percentile_feerate\\\",      (numeric) The 10th percentile feerate\\n\"\n-            \"      \\\"25th_percentile_feerate\\\",      (numeric) The 25th percentile feerate\\n\"\n-            \"      \\\"50th_percentile_feerate\\\",      (numeric) The 50th percentile feerate\\n\"\n-            \"      \\\"75th_percentile_feerate\\\",      (numeric) The 75th percentile feerate\\n\"\n-            \"      \\\"90th_percentile_feerate\\\",      (numeric) The 90th percentile feerate\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"height\\\" : xxxxx,          (numeric) The height of the block\\n\"\n-            \"  \\\"ins\\\" : xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n-            \"  \\\"maxfee\\\" : xxxxx,          (numeric) Maximum fee in the block\\n\"\n-            \"  \\\"maxfeerate\\\" : xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n-            \"  \\\"maxtxsize\\\" : xxxxx,       (numeric) Maximum transaction size\\n\"\n-            \"  \\\"medianfee\\\" : xxxxx,       (numeric) Truncated median fee in the block\\n\"\n-            \"  \\\"mediantime\\\" : xxxxx,      (numeric) The block median time past\\n\"\n-            \"  \\\"mediantxsize\\\" : xxxxx,    (numeric) Truncated median transaction size\\n\"\n-            \"  \\\"minfee\\\" : xxxxx,          (numeric) Minimum fee in the block\\n\"\n-            \"  \\\"minfeerate\\\" : xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n-            \"  \\\"mintxsize\\\" : xxxxx,       (numeric) Minimum transaction size\\n\"\n-            \"  \\\"outs\\\" : xxxxx,            (numeric) The number of outputs\\n\"\n-            \"  \\\"subsidy\\\" : xxxxx,         (numeric) The block subsidy\\n\"\n-            \"  \\\"swtotal_size\\\" : xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n-            \"  \\\"swtotal_weight\\\" : xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n-            \"  \\\"swtxs\\\" : xxxxx,           (numeric) The number of segwit transactions\\n\"\n-            \"  \\\"time\\\" : xxxxx,            (numeric) The block time\\n\"\n-            \"  \\\"total_out\\\" : xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n-            \"  \\\"total_size\\\" : xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n-            \"  \\\"total_weight\\\" : xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n-            \"  \\\"totalfee\\\" : xxxxx,        (numeric) The fee total\\n\"\n-            \"  \\\"txs\\\" : xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n-            \"  \\\"utxo_increase\\\" : xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n-            \"  \\\"utxo_size_inc\\\" : xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n-            \"}\\n\"\n-                },\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::NUM, \"avgfee\", \"Average fee in the block\"},\n+                {RPCResult::Type::NUM, \"avgfeerate\", \"Average feerate (in satoshis per virtual byte)\"},\n+                {RPCResult::Type::NUM, \"avgtxsize\", \"Average transaction size\"},\n+                {RPCResult::Type::STR_HEX, \"blockhash\", \"The block hash (to check for potential reorgs)\"},\n+                {RPCResult::Type::ARR_FIXED, \"feerate_percentiles\", \"Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\",\n+                {\n+                    {RPCResult::Type::NUM, \"10th_percentile_feerate\", \"The 10th percentile feerate\"},\n+                    {RPCResult::Type::NUM, \"25th_percentile_feerate\", \"The 25th percentile feerate\"},\n+                    {RPCResult::Type::NUM, \"50th_percentile_feerate\", \"The 50th percentile feerate\"},\n+                    {RPCResult::Type::NUM, \"75th_percentile_feerate\", \"The 75th percentile feerate\"},\n+                    {RPCResult::Type::NUM, \"90th_percentile_feerate\", \"The 90th percentile feerate\"},\n+                }},\n+                {RPCResult::Type::NUM, \"height\", \"The height of the block\"},\n+                {RPCResult::Type::NUM, \"ins\", \"The number of inputs (excluding coinbase)\"},\n+                {RPCResult::Type::NUM, \"maxfee\", \"Maximum fee in the block\"},\n+                {RPCResult::Type::NUM, \"maxfeerate\", \"Maximum feerate (in satoshis per virtual byte)\"},\n+                {RPCResult::Type::NUM, \"maxtxsize\", \"Maximum transaction size\"},\n+                {RPCResult::Type::NUM, \"medianfee\", \"Truncated median fee in the block\"},\n+                {RPCResult::Type::NUM, \"mediantime\", \"The block median time past\"},\n+                {RPCResult::Type::NUM, \"mediantxsize\", \"Truncated median transaction size\"},\n+                {RPCResult::Type::NUM, \"minfee\", \"Minimum fee in the block\"},\n+                {RPCResult::Type::NUM, \"minfeerate\", \"Minimum feerate (in satoshis per virtual byte)\"},\n+                {RPCResult::Type::NUM, \"mintxsize\", \"Minimum transaction size\"},\n+                {RPCResult::Type::NUM, \"outs\", \"The number of outputs\"},\n+                {RPCResult::Type::NUM, \"subsidy\", \"The block subsidy\"},\n+                {RPCResult::Type::NUM, \"swtotal_size\", \"Total size of all segwit transactions\"},\n+                {RPCResult::Type::NUM, \"swtotal_weight\", \"Total weight of all segwit transactions divided by segwit scale factor (4)\"},\n+                {RPCResult::Type::NUM, \"swtxs\", \"The number of segwit transactions\"},\n+                {RPCResult::Type::NUM, \"time\", \"The block time\"},\n+                {RPCResult::Type::NUM, \"total_out\", \"Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\"},\n+                {RPCResult::Type::NUM, \"total_size\", \"Total size of all non-coinbase transactions\"},\n+                {RPCResult::Type::NUM, \"total_weight\", \"Total weight of all non-coinbase transactions divided by segwit scale factor (4)\"},\n+                {RPCResult::Type::NUM, \"totalfee\", \"The fee total\"},\n+                {RPCResult::Type::NUM, \"txs\", \"The number of transactions (excluding coinbase)\"},\n+                {RPCResult::Type::NUM, \"utxo_increase\", \"The increase/decrease in the number of unspent outputs\"},\n+                {RPCResult::Type::NUM, \"utxo_size_inc\", \"The increase/decrease in size for the utxo index (not discounting op_return and similar)\"},\n+            }},\n                 RPCExamples{\n                     HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n             + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n@@ -2075,24 +2048,26 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                         \"[scanobjects,...]\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"success\\\" : true|false,         (boolean) Whether the scan was completed\\n\"\n-            \"  \\\"txouts\\\" : n,                   (numeric) The number of unspent transaction outputs scanned\\n\"\n-            \"  \\\"height\\\" : n,                   (numeric) The current block height (index)\\n\"\n-            \"  \\\"bestblock\\\" : \\\"hex\\\",            (string) The hash of the block at the tip of the chain\\n\"\n-            \"  \\\"unspents\\\" : [\\n\"\n-            \"   {\\n\"\n-            \"    \\\"txid\\\" : \\\"hash\\\",              (string) The transaction id\\n\"\n-            \"    \\\"vout\\\" : n,                   (numeric) The vout value\\n\"\n-            \"    \\\"scriptPubKey\\\" : \\\"script\\\",    (string) The script key\\n\"\n-            \"    \\\"desc\\\" : \\\"descriptor\\\",        (string) A specialized descriptor for the matched scriptPubKey\\n\"\n-            \"    \\\"amount\\\" : x.xxx,             (numeric) The total amount in \" + CURRENCY_UNIT + \" of the unspent output\\n\"\n-            \"    \\\"height\\\" : n,                 (numeric) Height of the unspent transaction output\\n\"\n-            \"   }\\n\"\n-            \"   ,...],\\n\"\n-            \"  \\\"total_amount\\\" : x.xxx,          (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n-            \"]\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::BOOL, \"success\", \"Whether the scan was completed\"},\n+                        {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs scanned\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n+                        {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n+                        {RPCResult::Type::ARR, \"unspents\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"\", \"\",\n+                                    {\n+                                        {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id\"},\n+                                        {RPCResult::Type::NUM, \"vout\", \"The vout value\"},\n+                                        {RPCResult::Type::STR_HEX, \"scriptPubKey\", \"The script key\"},\n+                                        {RPCResult::Type::STR, \"desc\", \"A specialized descriptor for the matched scriptPubKey\"},\n+                                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the unspent output\"},\n+                                        {RPCResult::Type::NUM, \"height\", \"Height of the unspent transaction output\"},\n+                                    }},\n+                            }},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of all found unspent outputs in \" + CURRENCY_UNIT},\n+                    }},\n                 RPCExamples{\"\"},\n             }.Check(request);\n \n@@ -2198,11 +2173,11 @@ static UniValue getblockfilter(const JSONRPCRequest& request)\n                     {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"},\n                 },\n                 RPCResult{\n-                    \"{\\n\"\n-                    \"  \\\"filter\\\" : (string) the hex-encoded filter data\\n\"\n-                    \"  \\\"header\\\" : (string) the hex-encoded filter header\\n\"\n-                    \"}\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"filter\", \"the hex-encoded filter data\"},\n+                        {RPCResult::Type::STR_HEX, \"header\", \"the hex-encoded filter header\"},\n+                    }},\n                 RPCExamples{\n                     HelpExampleCli(\"getblockfilter\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\" \\\"basic\\\"\")\n                 }\n@@ -2283,12 +2258,13 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n                 \"path to the output file. If relative, will be prefixed by datadir.\"},\n         },\n         RPCResult{\n-            \"{\\n\"\n-            \"  \\\"coins_written\\\" : n,   (numeric) the number of coins written in the snapshot\\n\"\n-            \"  \\\"base_hash\\\" : \\\"...\\\",   (string) the hash of the base of the snapshot\\n\"\n-            \"  \\\"base_height\\\" : n,     (string) the height of the base of the snapshot\\n\"\n-            \"  \\\"path\\\" : \\\"...\\\"         (string) the absolute path that the snapshot was written to\\n\"\n-            \"]\\n\"\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::NUM, \"coins_written\", \"the number of coins written in the snapshot\"},\n+                    {RPCResult::Type::STR_HEX, \"base_hash\", \"the hash of the base of the snapshot\"},\n+                    {RPCResult::Type::NUM, \"base_height\", \"the height of the base of the snapshot\"},\n+                    {RPCResult::Type::STR, \"path\", \"the absolute path that the snapshot was written to\"},\n+                }\n         },\n         RPCExamples{\n             HelpExampleCli(\"dumptxoutset\", \"utxo.dat\")"
      },
      {
        "sha": "9c7861262286be3ffd8ffc0874a18074dbc8f60b",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 119,
        "deletions": 100,
        "changes": 219,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa6b061fc118995eec41766519a11bc0dd1a901d",
        "patch": "@@ -90,8 +90,7 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n                     {\"height\", RPCArg::Type::NUM, /* default */ \"-1\", \"To estimate at the time of the given height.\"},\n                 },\n                 RPCResult{\n-            \"x             (numeric) Hashes per second estimated\\n\"\n-                },\n+                    RPCResult::Type::NUM, \"\", \"Hashes per second estimated\"},\n                 RPCExamples{\n                     HelpExampleCli(\"getnetworkhashps\", \"\")\n             + HelpExampleRpc(\"getnetworkhashps\", \"\")\n@@ -154,7 +153,11 @@ static UniValue generatetodescriptor(const JSONRPCRequest& request)\n             {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n         },\n         RPCResult{\n-            \"[ blockhashes ]     (json array) hashes of blocks generated\\n\"},\n+            RPCResult::Type::ARR, \"\", \"hashes of blocks generated\",\n+            {\n+                {RPCResult::Type::STR_HEX, \"\", \"blockhash\"},\n+            }\n+        },\n         RPCExamples{\n             \"\\nGenerate 11 blocks to mydesc\\n\" + HelpExampleCli(\"generatetodescriptor\", \"11 \\\"mydesc\\\"\")},\n     }\n@@ -196,8 +199,10 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n                     {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n                 },\n                 RPCResult{\n-            \"[ blockhashes ]     (json array) hashes of blocks generated\\n\"\n-                },\n+                    RPCResult::Type::ARR, \"\", \"hashes of blocks generated\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"blockhash\"},\n+                    }},\n                 RPCExamples{\n             \"\\nGenerate 11 blocks to myaddress\\n\"\n             + HelpExampleCli(\"generatetoaddress\", \"11 \\\"myaddress\\\"\")\n@@ -230,17 +235,17 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n                 \"\\nReturns a json object containing mining-related information.\",\n                 {},\n                 RPCResult{\n-                    \"{\\n\"\n-                    \"  \\\"blocks\\\" : nnn,             (numeric) The current block\\n\"\n-                    \"  \\\"currentblockweight\\\" : nnn, (numeric, optional) The block weight of the last assembled block (only present if a block was ever assembled)\\n\"\n-                    \"  \\\"currentblocktx\\\" : nnn,     (numeric, optional) The number of block transactions of the last assembled block (only present if a block was ever assembled)\\n\"\n-                    \"  \\\"difficulty\\\" : xxx.xxxxx    (numeric) The current difficulty\\n\"\n-                    \"  \\\"networkhashps\\\" : nnn,      (numeric) The network hashes per second\\n\"\n-                    \"  \\\"pooledtx\\\" : n              (numeric) The size of the mempool\\n\"\n-                    \"  \\\"chain\\\" : \\\"xxxx\\\",           (string) current network name (main, test, regtest)\\n\"\n-                    \"  \\\"warnings\\\" : \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n-                    \"}\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"blocks\", \"The current block\"},\n+                        {RPCResult::Type::NUM, \"currentblockweight\", /* optional */ true, \"The block weight of the last assembled block (only present if a block was ever assembled)\"},\n+                        {RPCResult::Type::NUM, \"currentblocktx\", /* optional */ true, \"The number of block transactions of the last assembled block (only present if a block was ever assembled)\"},\n+                        {RPCResult::Type::NUM, \"difficulty\", \"The current difficulty\"},\n+                        {RPCResult::Type::NUM, \"networkhashps\", \"The network hashes per second\"},\n+                        {RPCResult::Type::NUM, \"pooledtx\", \"The size of the mempool\"},\n+                        {RPCResult::Type::STR, \"chain\", \"current network name (main, test, regtest)\"},\n+                        {RPCResult::Type::STR, \"warnings\", \"any network and blockchain warnings\"},\n+                    }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmininginfo\", \"\")\n             + HelpExampleRpc(\"getmininginfo\", \"\")\n@@ -278,8 +283,7 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n             \"                  considers the transaction as it would have paid a higher (or lower) fee.\"},\n                 },\n                 RPCResult{\n-            \"true              (boolean) Returns true\\n\"\n-                },\n+                    RPCResult::Type::BOOL, \"\", \"Returns true\"},\n                 RPCExamples{\n                     HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 0.0 10000\")\n             + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n@@ -356,48 +360,58 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                         \"\\\"template_request\\\"\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"version\\\" : n,                    (numeric) The preferred block version\\n\"\n-            \"  \\\"rules\\\" : [ \\\"rulename\\\", ... ],    (array of strings) specific block rules that are to be enforced\\n\"\n-            \"  \\\"vbavailable\\\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments\\n\"\n-            \"      \\\"rulename\\\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule\\n\"\n-            \"      ,...\\n\"\n-            \"  },\\n\"\n-            \"  \\\"vbrequired\\\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions\\n\"\n-            \"  \\\"previousblockhash\\\" : \\\"xxxx\\\",     (string) The hash of current highest block\\n\"\n-            \"  \\\"transactions\\\" : [                (json array) contents of non-coinbase transactions that should be included in the next block\\n\"\n-            \"      {\\n\"\n-            \"         \\\"data\\\" : \\\"xxxx\\\",             (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n-            \"         \\\"txid\\\" : \\\"xxxx\\\",             (string) transaction id encoded in little-endian hexadecimal\\n\"\n-            \"         \\\"hash\\\" : \\\"xxxx\\\",             (string) hash encoded in little-endian hexadecimal (including witness data)\\n\"\n-            \"         \\\"depends\\\" : [                (json array) array of numbers \\n\"\n-            \"             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n-            \"             ,...\\n\"\n-            \"         ],\\n\"\n-            \"         \\\"fee\\\" : n,                    (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n-            \"         \\\"sigops\\\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n-            \"         \\\"weight\\\" : n,                (numeric) total transaction weight, as counted for purposes of block limits\\n\"\n-            \"      }\\n\"\n-            \"      ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"coinbaseaux\\\" : { ... },            (json object) data that should be included in the coinbase's scriptSig content\\n\"\n-            \"  \\\"coinbasevalue\\\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\\n\"\n-            \"  \\\"coinbasetxn\\\" : { ... },          (json object) information for coinbase transaction\\n\"\n-            \"  \\\"target\\\" : \\\"xxxx\\\",                (string) The hash target\\n\"\n-            \"  \\\"mintime\\\" : xxx,                  (numeric) The minimum timestamp appropriate for the next block time, expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n-            \"  \\\"mutable\\\" : [                     (array of string) list of ways the block template may be changed \\n\"\n-            \"     \\\"value\\\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",(string) A range of valid nonces\\n\"\n-            \"  \\\"sigoplimit\\\" : n,                 (numeric) limit of sigops in blocks\\n\"\n-            \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n-            \"  \\\"weightlimit\\\" : n,                (numeric) limit of block weight\\n\"\n-            \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in \" + UNIX_EPOCH_TIME + \"\\n\"\n-            \"  \\\"bits\\\" : \\\"xxxxxxxx\\\",              (string) compressed target of next block\\n\"\n-            \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n-            \"}\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"version\", \"The preferred block version\"},\n+                        {RPCResult::Type::ARR, \"rules\", \"specific block rules that are to be enforced\",\n+                            {\n+                                {RPCResult::Type::STR, \"\", \"rulename\"},\n+                            }},\n+                        {RPCResult::Type::OBJ_DYN, \"vbavailable\", \"set of pending, supported versionbit (BIP 9) softfork deployments\",\n+                            {\n+                                {RPCResult::Type::NUM, \"rulename\", \"identifies the bit number as indicating acceptance and readiness for the named softfork rule\"},\n+                            }},\n+                        {RPCResult::Type::NUM, \"vbrequired\", \"bit mask of versionbits the server requires set in submissions\"},\n+                        {RPCResult::Type::STR, \"previousblockhash\", \"The hash of current highest block\"},\n+                        {RPCResult::Type::ARR, \"\", \"contents of non-coinbase transactions that should be included in the next block\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"\", \"\",\n+                                    {\n+                                        {RPCResult::Type::STR_HEX, \"data\", \"transaction data encoded in hexadecimal (byte-for-byte)\"},\n+                                        {RPCResult::Type::STR_HEX, \"txid\", \"transaction id encoded in little-endian hexadecimal\"},\n+                                        {RPCResult::Type::STR_HEX, \"hash\", \"hash encoded in little-endian hexadecimal (including witness data)\"},\n+                                        {RPCResult::Type::ARR, \"depends\", \"array of numbers\",\n+                                            {\n+                                                {RPCResult::Type::NUM, \"\", \"transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\"},\n+                                            }},\n+                                        {RPCResult::Type::NUM, \"fee\", \"difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\"},\n+                                        {RPCResult::Type::NUM, \"sigops\", \"total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\"},\n+                                        {RPCResult::Type::NUM, \"weight\", \"total transaction weight, as counted for purposes of block limits\"},\n+                                    }},\n+                            }},\n+                        {RPCResult::Type::OBJ, \"coinbaseaux\", \"data that should be included in the coinbase's scriptSig content\",\n+                        {\n+                            {RPCResult::Type::ELISION, \"\", \"\"},\n+                        }},\n+                        {RPCResult::Type::NUM, \"coinbasevalue\", \"maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\"},\n+                        {RPCResult::Type::OBJ, \"coinbasetxn\", \"information for coinbase transaction\",\n+                        {\n+                            {RPCResult::Type::ELISION, \"\", \"\"},\n+                        }},\n+                        {RPCResult::Type::STR, \"target\", \"The hash target\"},\n+                        {RPCResult::Type::NUM_TIME, \"mintime\", \"The minimum timestamp appropriate for the next block time, expressed in \" + UNIX_EPOCH_TIME},\n+                        {RPCResult::Type::ARR, \"mutable\", \"list of ways the block template may be changed\",\n+                            {\n+                                {RPCResult::Type::STR, \"value\", \"A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\"},\n+                            }},\n+                        {RPCResult::Type::STR_HEX, \"noncerange\", \"A range of valid nonces\"},\n+                        {RPCResult::Type::NUM, \"sigoplimit\", \"limit of sigops in blocks\"},\n+                        {RPCResult::Type::NUM, \"sizelimit\", \"limit of block size\"},\n+                        {RPCResult::Type::NUM, \"weightlimit\", \"limit of block weight\"},\n+                        {RPCResult::Type::NUM_TIME, \"curtime\", \"current timestamp in \" + UNIX_EPOCH_TIME},\n+                        {RPCResult::Type::STR, \"bits\", \"compressed target of next block\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the next block\"},\n+                    }},\n                 RPCExamples{\n                     HelpExampleCli(\"getblocktemplate\", \"'{\\\"rules\\\": [\\\"segwit\\\"]}'\")\n             + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n@@ -800,8 +814,7 @@ static UniValue submitheader(const JSONRPCRequest& request)\n                     {\"hexdata\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded block header data\"},\n                 },\n                 RPCResult{\n-            \"None\"\n-                },\n+                    RPCResult::Type::NONE, \"\", \"None\"},\n                 RPCExamples{\n                     HelpExampleCli(\"submitheader\", \"\\\"aabbcc\\\"\") +\n                     HelpExampleRpc(\"submitheader\", \"\\\"aabbcc\\\"\")\n@@ -848,17 +861,19 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n             \"       \\\"CONSERVATIVE\\\"\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"errors\\\" : [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n-            \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n-            \"}\\n\"\n-            \"\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"feerate\", /* optional */ true, \"estimate fee rate in \" + CURRENCY_UNIT + \"/kB (only present if no errors were encountered)\"},\n+                        {RPCResult::Type::ARR, \"errors\", \"Errors encountered during processing\",\n+                            {\n+                                {RPCResult::Type::STR, \"\", \"error\"},\n+                            }},\n+                        {RPCResult::Type::NUM, \"blocks\", \"block number where estimate was found\\n\"\n             \"The request target will be clamped between 2 and the highest target\\n\"\n             \"fee estimation is able to return based on how long it has been running.\\n\"\n             \"An error is returned if not enough transactions and blocks\\n\"\n-            \"have been observed to make an estimate for any number of blocks.\\n\"\n-                },\n+            \"have been observed to make an estimate for any number of blocks.\"},\n+                    }},\n                 RPCExamples{\n                     HelpExampleCli(\"estimatesmartfee\", \"6\")\n                 },\n@@ -908,36 +923,40 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"               lower buckets.\"},\n                 },\n                 RPCResult{\n-            \"{                        (json object) Results are returned for any horizon which tracks blocks up to the confirmation target\\n\"\n-            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n-            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"      },\\n\"\n-            \"      \\\"fail\\\" : {              (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n-            \"        ...\\n\"\n-            \"      },\\n\"\n-            \"      \\\"errors\\\" :  [            (json array, optional) Errors encountered during processing\\n\"\n-            \"        \\\"str\\\",                (string)\\n\"\n-            \"        ...\\n\"\n-            \"      ],\\n\"\n-            \"  },\\n\"\n-            \"  \\\"medium\\\" : {           (json object, optional) estimate for medium time horizon\\n\"\n-            \"    ...\\n\"\n-            \"  },\\n\"\n-            \"  \\\"long\\\" : {             (json object, optional) estimate for long time horizon\\n\"\n-            \"    ...\\n\"\n-            \"  },\\n\"\n-            \"}\\n\"\n-            \"\\n\"\n-                },\n+                    RPCResult::Type::OBJ, \"\", \"Results are returned for any horizon which tracks blocks up to the confirmation target\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"short\", /* optional */ true, \"estimate for short time horizon\",\n+                            {\n+                                {RPCResult::Type::NUM, \"feerate\", /* optional */ true, \"estimate fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                                {RPCResult::Type::NUM, \"decay\", \"exponential decay (per block) for historical moving average of confirmation data\"},\n+                                {RPCResult::Type::NUM, \"scale\", \"The resolution of confirmation targets at this time horizon\"},\n+                                {RPCResult::Type::OBJ, \"pass\", /* optional */ true, \"information about the lowest range of feerates to succeed in meeting the threshold\",\n+                                {\n+                                        {RPCResult::Type::NUM, \"startrange\", \"start of feerate range\"},\n+                                        {RPCResult::Type::NUM, \"endrange\", \"end of feerate range\"},\n+                                        {RPCResult::Type::NUM, \"withintarget\", \"number of txs over history horizon in the feerate range that were confirmed within target\"},\n+                                        {RPCResult::Type::NUM, \"totalconfirmed\", \"number of txs over history horizon in the feerate range that were confirmed at any point\"},\n+                                        {RPCResult::Type::NUM, \"inmempool\", \"current number of txs in mempool in the feerate range unconfirmed for at least target blocks\"},\n+                                        {RPCResult::Type::NUM, \"leftmempool\", \"number of txs over history horizon in the feerate range that left mempool unconfirmed after target\"},\n+                                }},\n+                                {RPCResult::Type::OBJ, \"fail\", /* optional */ true, \"information about the highest range of feerates to fail to meet the threshold\",\n+                                {\n+                                    {RPCResult::Type::ELISION, \"\", \"\"},\n+                                }},\n+                                {RPCResult::Type::ARR, \"errors\", /* optional */ true, \"Errors encountered during processing\",\n+                                {\n+                                    {RPCResult::Type::STR, \"error\", \"\"},\n+                                }},\n+                        }},\n+                        {RPCResult::Type::OBJ, \"medium\", /* optional */ true, \"estimate for medium time horizon\",\n+                        {\n+                            {RPCResult::Type::ELISION, \"\", \"\"},\n+                        }},\n+                        {RPCResult::Type::OBJ, \"long\", /* optional */ true, \"estimate for long time horizon\",\n+                        {\n+                            {RPCResult::Type::ELISION, \"\", \"\"},\n+                        }},\n+                    }},\n                 RPCExamples{\n                     HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n                 },"
      },
      {
        "sha": "ccfdfe4340374d27bb712dbd092170e6689eb3d1",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 39,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fa6b061fc118995eec41766519a11bc0dd1a901d",
        "patch": "@@ -33,15 +33,16 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n-            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n-            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::BOOL, \"isvalid\", \"If the address is valid or not. If not, this is the only property returned.\"},\n+                        {RPCResult::Type::STR, \"address\", \"The bitcoin address validated\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptPubKey\", \"The hex-encoded scriptPubKey generated by the address\"},\n+                        {RPCResult::Type::BOOL, \"isscript\", \"If the key is a script\"},\n+                        {RPCResult::Type::BOOL, \"iswitness\", \"If the address is a witness address\"},\n+                        {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program\"},\n+                        {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"validateaddress\", EXAMPLE_ADDRESS) +\n@@ -82,11 +83,12 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n                     {\"address_type\", RPCArg::Type::STR, /* default */ \"legacy\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"address\\\" : \\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n-            \"  \\\"redeemScript\\\" : \\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n-            \"  \\\"descriptor\\\" : \\\"descriptor\\\"     (string) The descriptor for this multisig\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"address\", \"The value of the new multisig address.\"},\n+                        {RPCResult::Type::STR_HEX, \"redeemScript\", \"The string value of the hex-encoded redemption script.\"},\n+                        {RPCResult::Type::STR, \"descriptor\", \"The descriptor for this multisig\"},\n+                    }\n                 },\n                 RPCExamples{\n             \"\\nCreate a multisig address from 2 public keys\\n\"\n@@ -141,13 +143,14 @@ UniValue getdescriptorinfo(const JSONRPCRequest& request)\n                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n             },\n             RPCResult{\n-            \"{\\n\"\n-            \"  \\\"descriptor\\\" : \\\"desc\\\",         (string) The descriptor in canonical form, without private keys\\n\"\n-            \"  \\\"checksum\\\" : \\\"chksum\\\",         (string) The checksum for the input descriptor\\n\"\n-            \"  \\\"isrange\\\" : true|false,        (boolean) Whether the descriptor is ranged\\n\"\n-            \"  \\\"issolvable\\\" : true|false,     (boolean) Whether the descriptor is solvable\\n\"\n-            \"  \\\"hasprivatekeys\\\" : true|false, (boolean) Whether the input descriptor contained at least one private key\\n\"\n-            \"}\\n\"\n+                RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::STR, \"descriptor\", \"The descriptor in canonical form, without private keys\"},\n+                    {RPCResult::Type::STR, \"checksum\", \"The checksum for the input descriptor\"},\n+                    {RPCResult::Type::BOOL, \"isrange\", \"Whether the descriptor is ranged\"},\n+                    {RPCResult::Type::BOOL, \"issolvable\", \"Whether the descriptor is solvable\"},\n+                    {RPCResult::Type::BOOL, \"hasprivatekeys\", \"Whether the input descriptor contained at least one private key\"},\n+                }\n             },\n             RPCExamples{\n                 \"Analyse a descriptor\\n\" +\n@@ -189,7 +192,10 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n                 {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.\"},\n             },\n             RPCResult{\n-                \"[ address ] (json array) the derived addresses\\n\"\n+                RPCResult::Type::ARR, \"\", \"\",\n+                {\n+                    {RPCResult::Type::STR, \"address\", \"the derived addresses\"},\n+                }\n             },\n             RPCExamples{\n                 \"First three native segwit receive addresses\\n\" +\n@@ -258,7 +264,7 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n                     {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message that was signed.\"},\n                 },\n                 RPCResult{\n-            \"true|false   (boolean) If the signature is verified or not.\\n\"\n+                    RPCResult::Type::BOOL, \"\", \"If the signature is verified or not.\"\n                 },\n                 RPCExamples{\n             \"\\nUnlock the wallet for 30 seconds\\n\"\n@@ -304,7 +310,7 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n                     {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message to create a signature of.\"},\n                 },\n                 RPCResult{\n-            \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n+                    RPCResult::Type::STR, \"signature\", \"The signature of the message encoded in base 64\"\n                 },\n                 RPCExamples{\n             \"\\nCreate the signature\\n\"\n@@ -437,19 +443,21 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n                 },\n                 {\n                     RPCResult{\"mode \\\"stats\\\"\",\n-            \"{\\n\"\n-            \"  \\\"locked\\\" : {               (json object) Information about locked memory manager\\n\"\n-            \"    \\\"used\\\" : xxxxx,          (numeric) Number of bytes used\\n\"\n-            \"    \\\"free\\\" : xxxxx,          (numeric) Number of bytes available in current arenas\\n\"\n-            \"    \\\"total\\\" : xxxxxxx,       (numeric) Total number of bytes managed\\n\"\n-            \"    \\\"locked\\\" : xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\\n\"\n-            \"    \\\"chunks_used\\\" : xxxxx,   (numeric) Number allocated chunks\\n\"\n-            \"    \\\"chunks_free\\\" : xxxxx,   (numeric) Number unused chunks\\n\"\n-            \"  }\\n\"\n-            \"}\\n\"\n+                        RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"locked\", \"Information about locked memory manager\",\n+                            {\n+                                {RPCResult::Type::NUM, \"used\", \"Number of bytes used\"},\n+                                {RPCResult::Type::NUM, \"free\", \"Number of bytes available in current arenas\"},\n+                                {RPCResult::Type::NUM, \"total\", \"Total number of bytes managed\"},\n+                                {RPCResult::Type::NUM, \"locked\", \"Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\"},\n+                                {RPCResult::Type::NUM, \"chunks_used\", \"Number allocated chunks\"},\n+                                {RPCResult::Type::NUM, \"chunks_free\", \"Number unused chunks\"},\n+                            }},\n+                        }\n                     },\n                     RPCResult{\"mode \\\"mallocinfo\\\"\",\n-            \"\\\"<malloc version=\\\"1\\\">...\\\"\\n\"\n+                        RPCResult::Type::STR, \"\", \"\\\"<malloc version=\\\"1\\\">...\\\"\"\n                     },\n                 },\n                 RPCExamples{\n@@ -516,10 +524,10 @@ UniValue logging(const JSONRPCRequest& request)\n                         }},\n                 },\n                 RPCResult{\n-            \"{                   (json object where keys are the logging categories, and values indicates its status\\n\"\n-            \"  \\\"category\\\" : true|false,  (boolean) if being debug logged or not. false:inactive, true:active\\n\"\n-            \"  ...\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ_DYN, \"\", \"keys are the logging categories, and values indicates its status\",\n+                    {\n+                        {RPCResult::Type::BOOL, \"category\", \"if being debug logged or not. false:inactive, true:active\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"logging\", \"\\\"[\\\\\\\"all\\\\\\\"]\\\" \\\"[\\\\\\\"http\\\\\\\"]\\\"\")"
      },
      {
        "sha": "482c68928548cbe182cd3369f2274c01306240bc",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 133,
        "deletions": 123,
        "changes": 256,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa6b061fc118995eec41766519a11bc0dd1a901d",
        "patch": "@@ -33,7 +33,7 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n                 \"\\nReturns the number of connections to other nodes.\\n\",\n                 {},\n                 RPCResult{\n-            \"n          (numeric) The connection count\\n\"\n+                    RPCResult::Type::NUM, \"\", \"The connection count\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getconnectioncount\", \"\")\n@@ -77,57 +77,59 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n                 \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n                 {},\n                 RPCResult{\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"id\\\" : n,                   (numeric) Peer index\\n\"\n-            \"    \\\"addr\\\" : \\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n-            \"    \\\"addrbind\\\" : \\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n-            \"    \\\"addrlocal\\\" : \\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n-            \"    \\\"mapped_as\\\" : \\\"mapped_as\\\", (string) The AS in the BGP route to the peer used for diversifying peer selection\\n\"\n-            \"    \\\"services\\\" : \\\"xxxxxxxxxxxxxxxx\\\",   (string) The services offered\\n\"\n-            \"    \\\"servicesnames\\\" : [              (json array) the services offered, in human-readable form\\n\"\n-            \"        \\\"SERVICE_NAME\\\",         (string) the service name if it is recognised\\n\"\n-            \"         ...\\n\"\n-            \"     ],\\n\"\n-            \"    \\\"relaytxes\\\" : true|false,    (boolean) Whether peer has asked us to relay transactions to it\\n\"\n-            \"    \\\"lastsend\\\" : ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the last send\\n\"\n-            \"    \\\"lastrecv\\\" : ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the last receive\\n\"\n-            \"    \\\"bytessent\\\" : n,            (numeric) The total bytes sent\\n\"\n-            \"    \\\"bytesrecv\\\" : n,            (numeric) The total bytes received\\n\"\n-            \"    \\\"conntime\\\" : ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the connection\\n\"\n-            \"    \\\"timeoffset\\\" : ttt,         (numeric) The time offset in seconds\\n\"\n-            \"    \\\"pingtime\\\" : n,             (numeric) ping time (if available)\\n\"\n-            \"    \\\"minping\\\" : n,              (numeric) minimum observed ping time (if any at all)\\n\"\n-            \"    \\\"pingwait\\\" : n,             (numeric) ping wait (if non-zero)\\n\"\n-            \"    \\\"version\\\" : v,              (numeric) The peer version, such as 70001\\n\"\n-            \"    \\\"subver\\\" : \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n-            \"    \\\"inbound\\\" : true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n-            \"    \\\"addnode\\\" : true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\\n\"\n-            \"    \\\"startingheight\\\" : n,       (numeric) The starting height (block) of the peer\\n\"\n-            \"    \\\"banscore\\\" : n,             (numeric) The ban score\\n\"\n-            \"    \\\"synced_headers\\\" : n,       (numeric) The last header we have in common with this peer\\n\"\n-            \"    \\\"synced_blocks\\\" : n,        (numeric) The last block we have in common with this peer\\n\"\n-            \"    \\\"inflight\\\" : [\\n\"\n-            \"       n,                        (numeric) The heights of blocks we're currently asking from this peer\\n\"\n-            \"       ...\\n\"\n-            \"    ],\\n\"\n-            \"    \\\"whitelisted\\\" : true|false, (boolean) Whether the peer is whitelisted\\n\"\n-            \"    \\\"minfeefilter\\\" : n,         (numeric) The minimum fee rate for transactions this peer accepts\\n\"\n-            \"    \\\"bytessent_per_msg\\\" : {\\n\"\n-            \"       \\\"msg\\\" : n,               (numeric) The total bytes sent aggregated by message type\\n\"\n-            \"                               When a message type is not listed in this json object, the bytes sent are 0.\\n\"\n-            \"                               Only known message types can appear as keys in the object.\\n\"\n-            \"       ...\\n\"\n-            \"    },\\n\"\n-            \"    \\\"bytesrecv_per_msg\\\" : {\\n\"\n-            \"       \\\"msg\\\" : n,               (numeric) The total bytes received aggregated by message type\\n\"\n-            \"                               When a message type is not listed in this json object, the bytes received are 0.\\n\"\n-            \"                               Only known message types can appear as keys in the object and all bytes received of unknown message types are listed under '\"+NET_MESSAGE_COMMAND_OTHER+\"'.\\n\"\n-            \"       ...\\n\"\n-            \"    }\\n\"\n-            \"  }\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {\n+                            {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n+                            {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n+                            {RPCResult::Type::STR, \"addrbind\", \"(ip:port) Bind address of the connection to the peer\"},\n+                            {RPCResult::Type::STR, \"addrlocal\", \"(ip:port) Local address as reported by the peer\"},\n+                            {RPCResult::Type::STR, \"mapped_as\", \"The AS in the BGP route to the peer used for diversifying peer selection\"},\n+                            {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n+                            {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n+                            {\n+                                {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n+                            }},\n+                            {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n+                            {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n+                            {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n+                            {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n+                            {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n+                            {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n+                            {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n+                            {RPCResult::Type::NUM, \"pingtime\", \"ping time (if available)\"},\n+                            {RPCResult::Type::NUM, \"minping\", \"minimum observed ping time (if any at all)\"},\n+                            {RPCResult::Type::NUM, \"pingwait\", \"ping wait (if non-zero)\"},\n+                            {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n+                            {RPCResult::Type::STR, \"subver\", \"The string version\"},\n+                            {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n+                            {RPCResult::Type::BOOL, \"addnode\", \"Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\"},\n+                            {RPCResult::Type::NUM, \"startingheight\", \"The starting height (block) of the peer\"},\n+                            {RPCResult::Type::NUM, \"banscore\", \"The ban score\"},\n+                            {RPCResult::Type::NUM, \"synced_headers\", \"The last header we have in common with this peer\"},\n+                            {RPCResult::Type::NUM, \"synced_blocks\", \"The last block we have in common with this peer\"},\n+                            {RPCResult::Type::ARR, \"inflight\", \"\",\n+                            {\n+                                {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n+                            }},\n+                            {RPCResult::Type::BOOL, \"whitelisted\", \"Whether the peer is whitelisted\"},\n+                            {RPCResult::Type::NUM, \"minfeefilter\", \"The minimum fee rate for transactions this peer accepts\"},\n+                            {RPCResult::Type::OBJ_DYN, \"bytessent_per_msg\", \"\",\n+                            {\n+                                {RPCResult::Type::NUM, \"msg\", \"The total bytes sent aggregated by message type\\n\"\n+                                                              \"When a message type is not listed in this json object, the bytes sent are 0.\\n\"\n+                                                              \"Only known message types can appear as keys in the object.\"}\n+                            }},\n+                            {RPCResult::Type::OBJ, \"bytesrecv_per_msg\", \"\",\n+                            {\n+                                {RPCResult::Type::NUM, \"msg\", \"The total bytes received aggregated by message type\\n\"\n+                                                              \"When a message type is not listed in this json object, the bytes received are 0.\\n\"\n+                                                              \"Only known message types can appear as keys in the object and all bytes received of unknown message types are listed under '\"+NET_MESSAGE_COMMAND_OTHER+\"'.\"}\n+                            }},\n+                        }},\n+                    }},\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getpeerinfo\", \"\")\n@@ -320,19 +322,22 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                     {\"node\", RPCArg::Type::STR, /* default */ \"all nodes\", \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n                 },\n                 RPCResult{\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"addednode\\\" : \\\"192.168.0.201\\\",   (string) The node IP address or name (as provided to addnode)\\n\"\n-            \"    \\\"connected\\\" : true|false,          (boolean) If connected\\n\"\n-            \"    \\\"addresses\\\" : [                    (list of objects) Only when connected = true\\n\"\n-            \"       {\\n\"\n-            \"         \\\"address\\\" : \\\"192.168.0.201:8333\\\",  (string) The bitcoin server IP and port we're connected to\\n\"\n-            \"         \\\"connected\\\" : \\\"outbound\\\"           (string) connection, inbound or outbound\\n\"\n-            \"       }\\n\"\n-            \"     ]\\n\"\n-            \"  }\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR, \"addednode\", \"The node IP address or name (as provided to addnode)\"},\n+                            {RPCResult::Type::BOOL, \"connected\", \"If connected\"},\n+                            {RPCResult::Type::ARR, \"addresses\", \"Only when connected = true\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"\", \"\",\n+                                {\n+                                    {RPCResult::Type::STR, \"address\", \"The bitcoin server IP and port we're connected to\"},\n+                                    {RPCResult::Type::STR, \"connected\", \"connection, inbound or outbound\"},\n+                                }},\n+                            }},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n@@ -386,20 +391,21 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n                 \"and current time.\\n\",\n                 {},\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"totalbytesrecv\\\" : n,   (numeric) Total bytes received\\n\"\n-            \"  \\\"totalbytessent\\\" : n,   (numeric) Total bytes sent\\n\"\n-            \"  \\\"timemillis\\\" : t,       (numeric) Current UNIX time in milliseconds\\n\"\n-            \"  \\\"uploadtarget\\\" : \\n\"\n-            \"  {\\n\"\n-            \"    \\\"timeframe\\\" : n,                         (numeric) Length of the measuring timeframe in seconds\\n\"\n-            \"    \\\"target\\\" : n,                            (numeric) Target in bytes\\n\"\n-            \"    \\\"target_reached\\\" : true|false,           (boolean) True if target is reached\\n\"\n-            \"    \\\"serve_historical_blocks\\\" : true|false,  (boolean) True if serving historical blocks\\n\"\n-            \"    \\\"bytes_left_in_cycle\\\" : t,               (numeric) Bytes left in current time cycle\\n\"\n-            \"    \\\"time_left_in_cycle\\\" : t                 (numeric) Seconds left in current time cycle\\n\"\n-            \"  }\\n\"\n-            \"}\\n\"\n+                   RPCResult::Type::OBJ, \"\", \"\",\n+                   {\n+                       {RPCResult::Type::NUM, \"totalbytesrecv\", \"Total bytes received\"},\n+                       {RPCResult::Type::NUM, \"totalbytessent\", \"Total bytes sent\"},\n+                       {RPCResult::Type::NUM_TIME, \"timemillis\", \"Current UNIX time in milliseconds\"},\n+                       {RPCResult::Type::OBJ, \"uploadtarget\", \"\",\n+                       {\n+                           {RPCResult::Type::NUM, \"timeframe\", \"Length of the measuring timeframe in seconds\"},\n+                           {RPCResult::Type::NUM, \"target\", \"Target in bytes\"},\n+                           {RPCResult::Type::BOOL, \"target_reached\", \"True if target is reached\"},\n+                           {RPCResult::Type::BOOL, \"serve_historical_blocks\", \"True if serving historical blocks\"},\n+                           {RPCResult::Type::NUM, \"bytes_left_in_cycle\", \"Bytes left in current time cycle\"},\n+                           {RPCResult::Type::NUM, \"time_left_in_cycle\", \"Seconds left in current time cycle\"},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getnettotals\", \"\")\n@@ -452,41 +458,44 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n                 \"Returns an object containing various state info regarding P2P networking.\\n\",\n                 {},\n                 RPCResult{\n-            \"{                                        (json object)\\n\"\n-            \"  \\\"version\\\" : xxxxx,                      (numeric) the server version\\n\"\n-            \"  \\\"subversion\\\" : \\\"str\\\",                  (string) the server subversion string\\n\"\n-            \"  \\\"protocolversion\\\" : xxxxx,              (numeric) the protocol version\\n\"\n-            \"  \\\"localservices\\\" : \\\"hex\\\",               (string) the services we offer to the network\\n\"\n-            \"  \\\"localservicesnames\\\" : [                (json array) the services we offer to the network, in human-readable form\\n\"\n-            \"      \\\"SERVICE_NAME\\\",                    (string) the service name\\n\"\n-            \"       ...\\n\"\n-            \"   ],\\n\"\n-            \"  \\\"localrelay\\\" : true|false,              (boolean) true if transaction relay is requested from peers\\n\"\n-            \"  \\\"timeoffset\\\" : xxxxx,                   (numeric) the time offset\\n\"\n-            \"  \\\"connections\\\" : xxxxx,                  (numeric) the number of connections\\n\"\n-            \"  \\\"networkactive\\\" : true|false,           (boolean) whether p2p networking is enabled\\n\"\n-            \"  \\\"networks\\\" : [                          (json array) information per network\\n\"\n-            \"  {                                      (json object)\\n\"\n-            \"    \\\"name\\\" : \\\"str\\\",                       (string) network (ipv4, ipv6 or onion)\\n\"\n-            \"    \\\"limited\\\" : true|false,               (boolean) is the network limited using -onlynet?\\n\"\n-            \"    \\\"reachable\\\" : true|false,             (boolean) is the network reachable?\\n\"\n-            \"    \\\"proxy\\\" : \\\"str\\\"                      (string) (\\\"host:port\\\") the proxy that is used for this network, or empty if none\\n\"\n-            \"    \\\"proxy_randomize_credentials\\\" : true|false,  (boolean) Whether randomized credentials are used\\n\"\n-            \"  },\\n\"\n-            \"  ...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"relayfee\\\" : x.xxxxxxxx,                (numeric) minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"incrementalfee\\\" : x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"localaddresses\\\" : [                    (json array) list of local addresses\\n\"\n-            \"  {                                      (json object)\\n\"\n-            \"    \\\"address\\\" : \\\"xxxx\\\",                  (string) network address\\n\"\n-            \"    \\\"port\\\" : xxx,                         (numeric) network port\\n\"\n-            \"    \\\"score\\\" : xxx                         (numeric) relative score\\n\"\n-            \"  },\\n\"\n-            \"  ...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"warnings\\\" : \\\"str\\\",                     (string) any network and blockchain warnings\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"version\", \"the server version\"},\n+                        {RPCResult::Type::STR, \"subversion\", \"the server subversion string\"},\n+                        {RPCResult::Type::NUM, \"protocolversion\", \"the protocol version\"},\n+                        {RPCResult::Type::STR_HEX, \"localservices\", \"the services we offer to the network\"},\n+                        {RPCResult::Type::ARR, \"localservicesnames\", \"the services we offer to the network, in human-readable form\",\n+                        {\n+                            {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name\"},\n+                        }},\n+                        {RPCResult::Type::BOOL, \"localrelay\", \"true if transaction relay is requested from peers\"},\n+                        {RPCResult::Type::NUM, \"timeoffset\", \"the time offset\"},\n+                        {RPCResult::Type::NUM, \"connections\", \"the number of connections\"},\n+                        {RPCResult::Type::BOOL, \"networkactive\", \"whether p2p networking is enabled\"},\n+                        {RPCResult::Type::ARR, \"networks\", \"information per network\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR, \"name\", \"network (ipv4, ipv6 or onion)\"},\n+                                {RPCResult::Type::BOOL, \"limited\", \"is the network limited using -onlynet?\"},\n+                                {RPCResult::Type::BOOL, \"reachable\", \"is the network reachable?\"},\n+                                {RPCResult::Type::STR, \"proxy\", \"(\\\"host:port\\\") the proxy that is used for this network, or empty if none\"},\n+                                {RPCResult::Type::BOOL, \"proxy_randomize_credentials\", \"Whether randomized credentials are used\"},\n+                            }},\n+                        }},\n+                        {RPCResult::Type::NUM, \"relayfee\", \"minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kB\"},\n+                        {RPCResult::Type::NUM, \"incrementalfee\", \"minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\"},\n+                        {RPCResult::Type::ARR, \"localaddresses\", \"list of local addresses\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR, \"address\", \"network address\"},\n+                                {RPCResult::Type::NUM, \"port\", \"network port\"},\n+                                {RPCResult::Type::NUM, \"score\", \"relative score\"},\n+                            }},\n+                        }},\n+                        {RPCResult::Type::STR, \"warnings\", \"any network and blockchain warnings\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getnetworkinfo\", \"\")\n@@ -693,15 +702,16 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n                     {\"count\", RPCArg::Type::NUM, /* default */ \"1\", \"How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) + \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses.\"},\n                 },\n                 RPCResult{\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"time\\\" : ttt,                (numeric) The \" + UNIX_EPOCH_TIME + \" of when the node was last seen\\n\"\n-            \"    \\\"services\\\" : n,              (numeric) The services offered\\n\"\n-            \"    \\\"address\\\" : \\\"host\\\",          (string) The address of the node\\n\"\n-            \"    \\\"port\\\" : n                   (numeric) The port of the node\\n\"\n-            \"  }\\n\"\n-            \"  ,....\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::NUM_TIME, \"time\", \"The \" + UNIX_EPOCH_TIME + \" of when the node was last seen\"},\n+                            {RPCResult::Type::NUM, \"services\", \"The services offered\"},\n+                            {RPCResult::Type::STR, \"address\", \"The address of the node\"},\n+                            {RPCResult::Type::NUM, \"port\", \"The port of the node\"},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getnodeaddresses\", \"8\")"
      },
      {
        "sha": "361cf08086d71a1915509cd70bf03ccab9c7f97e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 301,
        "deletions": 253,
        "changes": 554,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa6b061fc118995eec41766519a11bc0dd1a901d",
        "patch": "@@ -94,54 +94,62 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                 },\n                 {\n                     RPCResult{\"if verbose is not set or set to false\",\n-            \"\\\"data\\\"      (string) The serialized, hex-encoded data for 'txid'\\n\"\n+                         RPCResult::Type::STR, \"data\", \"The serialized, hex-encoded data for 'txid'\"\n                      },\n                      RPCResult{\"if verbose is set to true\",\n-            \"{\\n\"\n-            \"  \\\"in_active_chain\\\" : b, (boolean) Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\\n\"\n-            \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n-            \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n-            \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n-            \"  \\\"size\\\" : n,             (numeric) The serialized transaction size\\n\"\n-            \"  \\\"vsize\\\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n-            \"  \\\"weight\\\" : n,           (numeric) The transaction's weight (between vsize*4-3 and vsize*4)\\n\"\n-            \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n-            \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n-            \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n-            \"     {\\n\"\n-            \"       \\\"txid\\\" : \\\"id\\\",    (string) The transaction id\\n\"\n-            \"       \\\"vout\\\" : n,         (numeric) \\n\"\n-            \"       \\\"scriptSig\\\" : {     (json object) The script\\n\"\n-            \"         \\\"asm\\\" : \\\"asm\\\",  (string) asm\\n\"\n-            \"         \\\"hex\\\" : \\\"hex\\\"   (string) hex\\n\"\n-            \"       },\\n\"\n-            \"       \\\"sequence\\\" : n      (numeric) The script sequence number\\n\"\n-            \"       \\\"txinwitness\\\" : [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n-            \"     }\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"vout\\\" : [              (array of json objects)\\n\"\n-            \"     {\\n\"\n-            \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n-            \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n-            \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n-            \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n-            \"         \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n-            \"         \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n-            \"         \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n-            \"         \\\"addresses\\\" : [           (json array of string)\\n\"\n-            \"           \\\"address\\\"        (string) bitcoin address\\n\"\n-            \"           ,...\\n\"\n-            \"         ]\\n\"\n-            \"       }\\n\"\n-            \"     }\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"blockhash\\\" : \\\"hash\\\",   (string) the block hash\\n\"\n-            \"  \\\"confirmations\\\" : n,      (numeric) The confirmations\\n\"\n-            \"  \\\"blocktime\\\" : ttt         (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n-            \"  \\\"time\\\" : ttt,             (numeric) Same as \\\"blocktime\\\"\\n\"\n-            \"}\\n\"\n+                         RPCResult::Type::OBJ, \"\", \"\",\n+                         {\n+                             {RPCResult::Type::BOOL, \"in_active_chain\", \"Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\"},\n+                             {RPCResult::Type::STR_HEX, \"hex\", \"The serialized, hex-encoded data for 'txid'\"},\n+                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id (same as provided)\"},\n+                             {RPCResult::Type::STR_HEX, \"hash\", \"The transaction hash (differs from txid for witness transactions)\"},\n+                             {RPCResult::Type::NUM, \"size\", \"The serialized transaction size\"},\n+                             {RPCResult::Type::NUM, \"vsize\", \"The virtual transaction size (differs from size for witness transactions)\"},\n+                             {RPCResult::Type::NUM, \"weight\", \"The transaction's weight (between vsize*4-3 and vsize*4)\"},\n+                             {RPCResult::Type::NUM, \"version\", \"The version\"},\n+                             {RPCResult::Type::NUM_TIME, \"locktime\", \"The lock time\"},\n+                             {RPCResult::Type::ARR, \"vin\", \"\",\n+                             {\n+                                 {RPCResult::Type::OBJ, \"\", \"\",\n+                                 {\n+                                     {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id\"},\n+                                     {RPCResult::Type::STR, \"vout\", \"\"},\n+                                     {RPCResult::Type::OBJ, \"scriptSig\", \"The script\",\n+                                     {\n+                                         {RPCResult::Type::STR, \"asm\", \"asm\"},\n+                                         {RPCResult::Type::STR_HEX, \"hex\", \"hex\"},\n+                                     }},\n+                                     {RPCResult::Type::NUM, \"sequence\", \"The script sequence number\"},\n+                                     {RPCResult::Type::ARR, \"txinwitness\", \"\",\n+                                     {\n+                                         {RPCResult::Type::STR_HEX, \"hex\", \"hex-encoded witness data (if any)\"},\n+                                     }},\n+                                 }},\n+                             }},\n+                             {RPCResult::Type::ARR, \"vout\", \"\",\n+                             {\n+                                 {RPCResult::Type::OBJ, \"\", \"\",\n+                                 {\n+                                     {RPCResult::Type::NUM, \"value\", \"The value in \" + CURRENCY_UNIT},\n+                                     {RPCResult::Type::NUM, \"n\", \"index\"},\n+                                     {RPCResult::Type::OBJ, \"scriptPubKey\", \"\",\n+                                     {\n+                                         {RPCResult::Type::STR, \"asm\", \"the asm\"},\n+                                         {RPCResult::Type::STR, \"hex\", \"the hex\"},\n+                                         {RPCResult::Type::NUM, \"reqSigs\", \"The required sigs\"},\n+                                         {RPCResult::Type::STR, \"type\", \"The type, eg 'pubkeyhash'\"},\n+                                         {RPCResult::Type::ARR, \"addresses\", \"\",\n+                                         {\n+                                             {RPCResult::Type::STR, \"address\", \"bitcoin address\"},\n+                                         }},\n+                                     }},\n+                                 }},\n+                             }},\n+                             {RPCResult::Type::STR_HEX, \"blockhash\", \"the block hash\"},\n+                             {RPCResult::Type::NUM, \"confirmations\", \"The confirmations\"},\n+                             {RPCResult::Type::NUM_TIME, \"blocktime\", \"The block time expressed in \" + UNIX_EPOCH_TIME},\n+                             {RPCResult::Type::NUM, \"time\", \"Same as \\\"blocktime\\\"\"},\n+                        }\n                     },\n                 },\n                 RPCExamples{\n@@ -230,7 +238,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED_NAMED_ARG, \"If specified, looks for txid in the block with this hash\"},\n                 },\n                 RPCResult{\n-            \"\\\"data\\\"           (string) A string that is a serialized, hex-encoded data for the proof.\\n\"\n+                    RPCResult::Type::STR, \"data\", \"A string that is a serialized, hex-encoded data for the proof.\"\n                 },\n                 RPCExamples{\"\"},\n             }.Check(request);\n@@ -315,7 +323,10 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n                     {\"proof\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex-encoded proof generated by gettxoutproof\"},\n                 },\n                 RPCResult{\n-            \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid(s) which the proof commits to, or empty array if the proof can not be validated.\"},\n+                    }\n                 },\n                 RPCExamples{\"\"},\n             }.Check(request);\n@@ -390,7 +401,7 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n                 },\n                 RPCResult{\n-            \"\\\"transaction\\\"              (string) hex string of the transaction\\n\"\n+                    RPCResult::Type::STR_HEX, \"transaction\", \"hex string of the transaction\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n@@ -432,45 +443,53 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n                     },\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id\\n\"\n-            \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n-            \"  \\\"size\\\" : n,             (numeric) The transaction size\\n\"\n-            \"  \\\"vsize\\\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n-            \"  \\\"weight\\\" : n,           (numeric) The transaction's weight (between vsize*4 - 3 and vsize*4)\\n\"\n-            \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n-            \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n-            \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n-            \"     {\\n\"\n-            \"       \\\"txid\\\" : \\\"id\\\",    (string) The transaction id\\n\"\n-            \"       \\\"vout\\\" : n,         (numeric) The output number\\n\"\n-            \"       \\\"scriptSig\\\" : {     (json object) The script\\n\"\n-            \"         \\\"asm\\\" : \\\"asm\\\",  (string) asm\\n\"\n-            \"         \\\"hex\\\" : \\\"hex\\\"   (string) hex\\n\"\n-            \"       },\\n\"\n-            \"       \\\"txinwitness\\\" : [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n-            \"       \\\"sequence\\\" : n     (numeric) The script sequence number\\n\"\n-            \"     }\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"vout\\\" : [             (array of json objects)\\n\"\n-            \"     {\\n\"\n-            \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n-            \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n-            \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n-            \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n-            \"         \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n-            \"         \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n-            \"         \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n-            \"         \\\"addresses\\\" : [           (json array of string)\\n\"\n-            \"           \\\"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\\\"   (string) bitcoin address\\n\"\n-            \"           ,...\\n\"\n-            \"         ]\\n\"\n-            \"       }\\n\"\n-            \"     }\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id\"},\n+                        {RPCResult::Type::STR_HEX, \"hash\", \"The transaction hash (differs from txid for witness transactions)\"},\n+                        {RPCResult::Type::NUM, \"size\", \"The transaction size\"},\n+                        {RPCResult::Type::NUM, \"vsize\", \"The virtual transaction size (differs from size for witness transactions)\"},\n+                        {RPCResult::Type::NUM, \"weight\", \"The transaction's weight (between vsize*4 - 3 and vsize*4)\"},\n+                        {RPCResult::Type::NUM, \"version\", \"The version\"},\n+                        {RPCResult::Type::NUM_TIME, \"locktime\", \"The lock time\"},\n+                        {RPCResult::Type::ARR, \"vin\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id\"},\n+                                {RPCResult::Type::NUM, \"vout\", \"The output number\"},\n+                                {RPCResult::Type::OBJ, \"scriptSig\", \"The script\",\n+                                {\n+                                    {RPCResult::Type::STR, \"asm\", \"asm\"},\n+                                    {RPCResult::Type::STR_HEX, \"hex\", \"hex\"},\n+                                }},\n+                                {RPCResult::Type::ARR, \"txinwitness\", \"\",\n+                                {\n+                                    {RPCResult::Type::STR_HEX, \"hex\", \"hex-encoded witness data (if any)\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"sequence\", \"The script sequence number\"},\n+                            }},\n+                        }},\n+                        {RPCResult::Type::ARR, \"vout\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::NUM, \"value\", \"The value in \" + CURRENCY_UNIT},\n+                                {RPCResult::Type::NUM, \"n\", \"index\"},\n+                                {RPCResult::Type::OBJ, \"scriptPubKey\", \"\",\n+                                {\n+                                    {RPCResult::Type::STR, \"asm\", \"the asm\"},\n+                                    {RPCResult::Type::STR_HEX, \"hex\", \"the hex\"},\n+                                    {RPCResult::Type::NUM, \"reqSigs\", \"The required sigs\"},\n+                                    {RPCResult::Type::STR, \"type\", \"The type, eg 'pubkeyhash'\"},\n+                                    {RPCResult::Type::ARR, \"addresses\", \"\",\n+                                    {\n+                                        {RPCResult::Type::STR, \"address\", \"bitcoin address\"},\n+                                    }},\n+                                }},\n+                            }},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n@@ -513,26 +532,29 @@ static UniValue decodescript(const JSONRPCRequest& request)\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded script\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"asm\\\" : \\\"asm\\\",          (string) Script public key\\n\"\n-            \"  \\\"type\\\" : \\\"type\\\",        (string) The output type (e.g. \"+GetAllOutputTypes()+\")\\n\"\n-            \"  \\\"reqSigs\\\" : n,         (numeric) The required signatures\\n\"\n-            \"  \\\"addresses\\\" : [        (json array of string)\\n\"\n-            \"     \\\"address\\\"          (string) bitcoin address\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"p2sh\\\":\\\"str\\\"          (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).\\n\"\n-            \"  \\\"segwit\\\" : {           (json object) Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness).\\n\"\n-            \"    \\\"asm\\\" : \\\"str\\\",        (string) String representation of the script public key\\n\"\n-            \"    \\\"hex\\\" : \\\"hexstr\\\",     (string) Hex string of the script public key\\n\"\n-            \"    \\\"type\\\" : \\\"str\\\",       (string) The type of the script public key (e.g. witness_v0_keyhash or witness_v0_scripthash)\\n\"\n-            \"    \\\"reqSigs\\\" : n,       (numeric) The required signatures (always 1)\\n\"\n-            \"    \\\"addresses\\\" : [      (json array of string) (always length 1)\\n\"\n-            \"      \\\"address\\\"         (string) segwit address\\n\"\n-            \"       ,...\\n\"\n-            \"    ],\\n\"\n-            \"    \\\"p2sh-segwit\\\":\\\"str\\\" (string) address of the P2SH script wrapping this witness redeem script.\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"asm\", \"Script public key\"},\n+                        {RPCResult::Type::STR, \"type\", \"The output type (e.g. \"+GetAllOutputTypes()+\")\"},\n+                        {RPCResult::Type::NUM, \"reqSigs\", \"The required signatures\"},\n+                        {RPCResult::Type::ARR, \"addresses\", \"\",\n+                        {\n+                            {RPCResult::Type::STR, \"address\", \"bitcoin address\"},\n+                        }},\n+                        {RPCResult::Type::STR, \"p2sh\", \"address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH)\"},\n+                        {RPCResult::Type::OBJ, \"segwit\", \"Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness)\",\n+                        {\n+                            {RPCResult::Type::STR, \"asm\", \"String representation of the script public key\"},\n+                            {RPCResult::Type::STR_HEX, \"hex\", \"Hex string of the script public key\"},\n+                            {RPCResult::Type::STR, \"type\", \"The type of the script public key (e.g. witness_v0_keyhash or witness_v0_scripthash)\"},\n+                            {RPCResult::Type::NUM, \"reqSigs\", \"The required signatures (always 1)\"},\n+                            {RPCResult::Type::ARR, \"addresses\", \"(always length 1)\",\n+                            {\n+                                {RPCResult::Type::STR, \"address\", \"segwit address\"},\n+                            }},\n+                            {RPCResult::Type::STR, \"p2sh-segwit\", \"address of the P2SH script wrapping this witness redeem script\"},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n@@ -607,7 +629,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n                         },\n                 },\n                 RPCResult{\n-            \"\\\"hex\\\"            (string) The hex-encoded raw transaction with signature(s)\\n\"\n+                    RPCResult::Type::STR, \"\", \"The hex-encoded raw transaction with signature(s)\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"combinerawtransaction\", R\"('[\"myhex1\", \"myhex2\", \"myhex3\"]')\")\n@@ -715,20 +737,22 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                     },\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"hex\", \"The hex-encoded raw transaction with signature(s)\"},\n+                        {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                        {RPCResult::Type::ARR, \"errors\", \"Script verification errors (if there are any)\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR_HEX, \"txid\", \"The hash of the referenced, previous transaction\"},\n+                                {RPCResult::Type::NUM, \"vout\", \"The index of the output to spent and used as input\"},\n+                                {RPCResult::Type::STR_HEX, \"scriptSig\", \"The hex-encoded signature script\"},\n+                                {RPCResult::Type::NUM, \"sequence\", \"Script sequence number\"},\n+                                {RPCResult::Type::STR, \"error\", \"Verification or signing error related to the input\"},\n+                            }},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\" \\\"[\\\\\\\"key1\\\\\\\",\\\\\\\"key2\\\\\\\"]\\\"\")\n@@ -784,7 +808,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n                             \"/kB.\\nSet to 0 to accept any fee rate.\\n\"},\n                 },\n                 RPCResult{\n-            \"\\\"hex\\\"             (string) The transaction hash in hex\\n\"\n+                    RPCResult::Type::STR_HEX, \"\", \"The transaction hash in hex\"\n                 },\n                 RPCExamples{\n             \"\\nCreate a transaction\\n\"\n@@ -846,14 +870,16 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                     {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK()), \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kB\\n\"},\n                 },\n                 RPCResult{\n-            \"[                   (json array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-            \"                            Length is exactly one for now.\\n\"\n-            \" {\\n\"\n-            \"  \\\"txid\\\"           (string) The transaction hash in hex\\n\"\n-            \"  \\\"allowed\\\"        (boolean) If the mempool allows this tx to be inserted\\n\"\n-            \"  \\\"reject-reason\\\"  (string) Rejection string (only present when 'allowed' is false)\\n\"\n-            \" }\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n+                        \"Length is exactly one for now.\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n+                            {RPCResult::Type::BOOL, \"allowed\", \"If the mempool allows this tx to be inserted\"},\n+                            {RPCResult::Type::STR, \"reject-reason\", \"Rejection string (only present when 'allowed' is false)\"},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n             \"\\nCreate a transaction\\n\"\n@@ -950,92 +976,108 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n                     {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The PSBT base64 string\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"tx\\\" : {                   (json object) The decoded network-serialized unsigned transaction.\\n\"\n-            \"    ...                                      The layout is the same as the output of decoderawtransaction.\\n\"\n-            \"  },\\n\"\n-            \"  \\\"unknown\\\" : {                (json object) The unknown global fields\\n\"\n-            \"    \\\"key\\\" : \\\"value\\\"            (key-value pair) An unknown key-value pair\\n\"\n-            \"     ...\\n\"\n-            \"  },\\n\"\n-            \"  \\\"inputs\\\" : [                 (array of json objects)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"non_witness_utxo\\\" : {   (json object, optional) Decoded network transaction for non-witness UTXOs\\n\"\n-            \"        ...\\n\"\n-            \"      },\\n\"\n-            \"      \\\"witness_utxo\\\" : {            (json object, optional) Transaction output for witness UTXOs\\n\"\n-            \"        \\\"amount\\\" : x.xxx,           (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n-            \"        \\\"scriptPubKey\\\" : {          (json object)\\n\"\n-            \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n-            \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n-            \"          \\\"type\\\" : \\\"pubkeyhash\\\",    (string) The type, eg 'pubkeyhash'\\n\"\n-            \"          \\\"address\\\" : \\\"address\\\"     (string) Bitcoin address if there is one\\n\"\n-            \"        }\\n\"\n-            \"      },\\n\"\n-            \"      \\\"partial_signatures\\\" : {             (json object, optional)\\n\"\n-            \"        \\\"pubkey\\\" : \\\"signature\\\",           (string) The public key and signature that corresponds to it.\\n\"\n-            \"        ,...\\n\"\n-            \"      }\\n\"\n-            \"      \\\"sighash\\\" : \\\"type\\\",                  (string, optional) The sighash type to be used\\n\"\n-            \"      \\\"redeem_script\\\" : {       (json object, optional)\\n\"\n-            \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n-            \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n-            \"          \\\"type\\\" : \\\"pubkeyhash\\\",    (string) The type, eg 'pubkeyhash'\\n\"\n-            \"        }\\n\"\n-            \"      \\\"witness_script\\\" : {       (json object, optional)\\n\"\n-            \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n-            \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n-            \"          \\\"type\\\" : \\\"pubkeyhash\\\",    (string) The type, eg 'pubkeyhash'\\n\"\n-            \"        }\\n\"\n-            \"      \\\"bip32_derivs\\\" : {          (json object, optional)\\n\"\n-            \"        \\\"pubkey\\\" : {                     (json object, optional) The public key with the derivation path as the value.\\n\"\n-            \"          \\\"master_fingerprint\\\" : \\\"fingerprint\\\"     (string) The fingerprint of the master key\\n\"\n-            \"          \\\"path\\\" : \\\"path\\\",                         (string) The path\\n\"\n-            \"        }\\n\"\n-            \"        ,...\\n\"\n-            \"      }\\n\"\n-            \"      \\\"final_scriptsig\\\" : {       (json object, optional)\\n\"\n-            \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n-            \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n-            \"        }\\n\"\n-            \"       \\\"final_scriptwitness\\\" : [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n-            \"      \\\"unknown\\\" : {                (json object) The unknown global fields\\n\"\n-            \"        \\\"key\\\" : \\\"value\\\"            (key-value pair) An unknown key-value pair\\n\"\n-            \"         ...\\n\"\n-            \"      },\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"  \\\"outputs\\\" : [                 (array of json objects)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"redeem_script\\\" : {       (json object, optional)\\n\"\n-            \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n-            \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n-            \"          \\\"type\\\" : \\\"pubkeyhash\\\",    (string) The type, eg 'pubkeyhash'\\n\"\n-            \"        }\\n\"\n-            \"      \\\"witness_script\\\" : {       (json object, optional)\\n\"\n-            \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n-            \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n-            \"          \\\"type\\\" : \\\"pubkeyhash\\\",    (string) The type, eg 'pubkeyhash'\\n\"\n-            \"      }\\n\"\n-            \"      \\\"bip32_derivs\\\" : [          (array of json objects, optional)\\n\"\n-            \"        {\\n\"\n-            \"          \\\"pubkey\\\" : \\\"pubkey\\\",                     (string) The public key this path corresponds to\\n\"\n-            \"          \\\"master_fingerprint\\\" : \\\"fingerprint\\\"     (string) The fingerprint of the master key\\n\"\n-            \"          \\\"path\\\" : \\\"path\\\",                         (string) The path\\n\"\n-            \"          }\\n\"\n-            \"        }\\n\"\n-            \"        ,...\\n\"\n-            \"      ],\\n\"\n-            \"      \\\"unknown\\\" : {                (json object) The unknown global fields\\n\"\n-            \"        \\\"key\\\" : \\\"value\\\"            (key-value pair) An unknown key-value pair\\n\"\n-            \"         ...\\n\"\n-            \"      },\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"  \\\"fee\\\" : fee                      (numeric, optional) The transaction fee paid if all UTXOs slots in the PSBT have been filled.\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"tx\", \"The decoded network-serialized unsigned transaction.\",\n+                        {\n+                            {RPCResult::Type::ELISION, \"\", \"The layout is the same as the output of decoderawtransaction.\"},\n+                        }},\n+                        {RPCResult::Type::OBJ_DYN, \"unknown\", \"The unknown global fields\",\n+                        {\n+                             {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n+                        }},\n+                        {RPCResult::Type::ARR, \"inputs\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"non_witness_utxo\", /* optional */ true, \"Decoded network transaction for non-witness UTXOs\",\n+                                {\n+                                    {RPCResult::Type::ELISION, \"\",\"\"},\n+                                }},\n+                                {RPCResult::Type::OBJ, \"witness_utxo\", /* optional */ true, \"Transaction output for witness UTXOs\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"amount\", \"The value in \" + CURRENCY_UNIT},\n+                                    {RPCResult::Type::OBJ, \"scriptPubKey\", \"\",\n+                                    {\n+                                        {RPCResult::Type::STR, \"asm\", \"The asm\"},\n+                                        {RPCResult::Type::STR_HEX, \"hex\", \"The hex\"},\n+                                        {RPCResult::Type::STR, \"type\", \"The type, eg 'pubkeyhash'\"},\n+                                        {RPCResult::Type::STR, \"address\",\" Bitcoin address if there is one\"},\n+                                    }},\n+                                }},\n+                                {RPCResult::Type::OBJ_DYN, \"partial_signatures\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::STR, \"pubkey\", \"The public key and signature that corresponds to it.\"},\n+                                }},\n+                                {RPCResult::Type::STR, \"sighash\", /* optional */ true, \"The sighash type to be used\"},\n+                                {RPCResult::Type::OBJ, \"redeem_script\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::STR, \"asm\", \"The asm\"},\n+                                    {RPCResult::Type::STR_HEX, \"hex\", \"The hex\"},\n+                                    {RPCResult::Type::STR, \"type\", \"The type, eg 'pubkeyhash'\"},\n+                                }},\n+                                {RPCResult::Type::OBJ, \"witness_script\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::STR, \"asm\", \"The asm\"},\n+                                    {RPCResult::Type::STR_HEX, \"hex\", \"The hex\"},\n+                                    {RPCResult::Type::STR, \"type\", \"The type, eg 'pubkeyhash'\"},\n+                                }},\n+                                {RPCResult::Type::ARR, \"bip32_derivs\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"pubkey\", /* optional */ true, \"The public key with the derivation path as the value.\",\n+                                    {\n+                                        {RPCResult::Type::STR, \"master_fingerprint\", \"The fingerprint of the master key\"},\n+                                        {RPCResult::Type::STR, \"path\", \"The path\"},\n+                                    }},\n+                                }},\n+                                {RPCResult::Type::OBJ, \"final_scriptsig\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::STR, \"asm\", \"The asm\"},\n+                                    {RPCResult::Type::STR, \"hex\", \"The hex\"},\n+                                }},\n+                                {RPCResult::Type::ARR, \"final_scriptwitness\", \"\",\n+                                {\n+                                    {RPCResult::Type::STR_HEX, \"\", \"hex-encoded witness data (if any)\"},\n+                                }},\n+                                {RPCResult::Type::OBJ_DYN, \"unknown\", \"The unknown global fields\",\n+                                {\n+                                    {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n+                                }},\n+                            }},\n+                        }},\n+                        {RPCResult::Type::ARR, \"outputs\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"redeem_script\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::STR, \"asm\", \"The asm\"},\n+                                    {RPCResult::Type::STR_HEX, \"hex\", \"The hex\"},\n+                                    {RPCResult::Type::STR, \"type\", \"The type, eg 'pubkeyhash'\"},\n+                                }},\n+                                {RPCResult::Type::OBJ, \"witness_script\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::STR, \"asm\", \"The asm\"},\n+                                    {RPCResult::Type::STR_HEX, \"hex\", \"The hex\"},\n+                                    {RPCResult::Type::STR, \"type\", \"The type, eg 'pubkeyhash'\"},\n+                                }},\n+                                {RPCResult::Type::ARR, \"bip32_derivs\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"\", \"\",\n+                                    {\n+                                        {RPCResult::Type::STR, \"pubkey\", \"The public key this path corresponds to\"},\n+                                        {RPCResult::Type::STR, \"master_fingerprint\", \"The fingerprint of the master key\"},\n+                                        {RPCResult::Type::STR, \"path\", \"The path\"},\n+                                    }},\n+                                }},\n+                                {RPCResult::Type::OBJ_DYN, \"unknown\", \"The unknown global fields\",\n+                                {\n+                                    {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n+                                }},\n+                            }},\n+                        }},\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The transaction fee paid if all UTXOs slots in the PSBT have been filled.\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"decodepsbt\", \"\\\"psbt\\\"\")\n@@ -1244,7 +1286,7 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n                         },\n                 },\n                 RPCResult{\n-            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                    RPCResult::Type::STR, \"\", \"The base64-encoded partially signed transaction\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"combinepsbt\", R\"('[\"mybase64_1\", \"mybase64_2\", \"mybase64_3\"]')\")\n@@ -1292,11 +1334,12 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n             \"                             extract and return the complete transaction in normal network serialization instead of the PSBT.\"},\n                 },\n                 RPCResult{\n-            \"{                             (json object)\\n\"\n-            \"  \\\"psbt\\\" : \\\"str\\\",             (string) The base64-encoded partially signed transaction if not extracted\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",              (string) The hex-encoded network transaction if extracted\\n\"\n-            \"  \\\"complete\\\" : true|false,    (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded partially signed transaction if not extracted\"},\n+                        {RPCResult::Type::STR_HEX, \"hex\", \"The hex-encoded network transaction if extracted\"},\n+                        {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"finalizepsbt\", \"\\\"psbt\\\"\")\n@@ -1374,7 +1417,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n                 },\n                 RPCResult{\n-                            \"  \\\"psbt\\\"        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n+                    RPCResult::Type::STR, \"\", \"The resulting raw transaction (base64-encoded string)\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"createpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n@@ -1431,7 +1474,7 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                     },\n                 },\n                 RPCResult{\n-                            \"  \\\"psbt\\\"        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n+                    RPCResult::Type::STR, \"\", \"The resulting raw transaction (base64-encoded string)\"\n                 },\n                 RPCExamples{\n                             \"\\nCreate a transaction\\n\"\n@@ -1495,7 +1538,7 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n                 }},\n             },\n             RPCResult {\n-                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                    RPCResult::Type::STR, \"\", \"The base64-encoded partially signed transaction with inputs updated\"\n             },\n             RPCExamples {\n                 HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n@@ -1580,7 +1623,7 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n                     }}\n             },\n             RPCResult {\n-                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                    RPCResult::Type::STR, \"\", \"The base64-encoded partially signed transaction\"\n             },\n             RPCExamples {\n                 HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n@@ -1669,31 +1712,36 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n                 {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n             },\n             RPCResult {\n-                \"{\\n\"\n-                \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n-                \"    {\\n\"\n-                \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n-                \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n-                \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n-                \"        \\\"pubkeys\\\" : [             (array, optional)\\n\"\n-                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n-                \"        ]\\n\"\n-                \"        \\\"signatures\\\" : [          (array, optional)\\n\"\n-                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n-                \"        ]\\n\"\n-                \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string, optional) Hash160 of the redeemScript that is missing\\n\"\n-                \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string, optional) SHA256 of the witnessScript that is missing\\n\"\n-                \"      }\\n\"\n-                \"      \\\"next\\\" : \\\"role\\\"             (string, optional) Role of the next person that this input needs to go to\\n\"\n-                \"    }\\n\"\n-                \"    ,...\\n\"\n-                \"  ]\\n\"\n-                \"  \\\"estimated_vsize\\\" : vsize       (numeric, optional) Estimated vsize of the final signed transaction\\n\"\n-                \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction in \" + CURRENCY_UNIT + \"/kB. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n-                \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n-                \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n-                \"  \\\"error\\\" : \\\"error\\\"               (string) Error message if there is one\\n\"\n-                \"}\\n\"\n+                RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::ARR, \"inputs\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::BOOL, \"has_utxo\", \"Whether a UTXO is provided\"},\n+                            {RPCResult::Type::BOOL, \"is_final\", \"Whether the input is finalized\"},\n+                            {RPCResult::Type::OBJ, \"missing\", /* optional */ true, \"Things that are missing that are required to complete this input\",\n+                            {\n+                                {RPCResult::Type::ARR, \"pubkeys\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::STR_HEX, \"keyid\", \"Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\"},\n+                                }},\n+                                {RPCResult::Type::ARR, \"signatures\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::STR_HEX, \"keyid\", \"Public key ID, hash160 of the public key, of a public key whose signature is missing\"},\n+                                }},\n+                                {RPCResult::Type::STR_HEX, \"redeemscript\", /* optional */ true, \"Hash160 of the redeemScript that is missing\"},\n+                                {RPCResult::Type::STR_HEX, \"witnessscript\", /* optional */ true, \"SHA256 of the witnessScript that is missing\"},\n+                            }},\n+                            {RPCResult::Type::STR, \"next\", /* optional */ true, \"Role of the next person that this input needs to go to\"},\n+                        }},\n+                    }},\n+                    {RPCResult::Type::NUM, \"estimated_vsize\", /* optional */ true, \"Estimated vsize of the final signed transaction\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"estimated_feerate\", /* optional */ true, \"Estimated feerate of the final signed transaction in \" + CURRENCY_UNIT + \"/kB. Shown only if all UTXO slots in the PSBT have been filled\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled\"},\n+                    {RPCResult::Type::STR, \"next\", \"Role of the next person that this psbt needs to go to\"},\n+                    {RPCResult::Type::STR, \"error\", \"Error message if there is one\"},\n+                }\n             },\n             RPCExamples {\n                 HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")"
      },
      {
        "sha": "75baacd6f2b524430203a9c0ac382e62b8a00b2e",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa6b061fc118995eec41766519a11bc0dd1a901d",
        "patch": "@@ -137,7 +137,7 @@ UniValue help(const JSONRPCRequest& jsonRequest)\n                     {\"command\", RPCArg::Type::STR, /* default */ \"all commands\", \"The command to get help on\"},\n                 },\n                 RPCResult{\n-            \"\\\"text\\\"     (string) The help text\\n\"\n+                    RPCResult::Type::STR, \"\", \"The help text\"\n                 },\n                 RPCExamples{\"\"},\n             }.ToString()\n@@ -180,7 +180,7 @@ static UniValue uptime(const JSONRPCRequest& jsonRequest)\n                 \"\\nReturns the total uptime of the server.\\n\",\n                             {},\n                             RPCResult{\n-                        \"ttt        (numeric) The number of seconds that the server has been running\\n\"\n+                                RPCResult::Type::NUM, \"\", \"The number of seconds that the server has been running\"\n                             },\n                 RPCExamples{\n                     HelpExampleCli(\"uptime\", \"\")\n@@ -197,16 +197,18 @@ static UniValue getrpcinfo(const JSONRPCRequest& request)\n                 \"\\nReturns details of the RPC server.\\n\",\n                 {},\n                 RPCResult{\n-            \"{\\n\"\n-            \" \\\"active_commands\\\" (json array) All active commands\\n\"\n-            \"  [\\n\"\n-            \"   {               (json object) Information about an active command\\n\"\n-            \"    \\\"method\\\"       (string)  The name of the RPC command \\n\"\n-            \"    \\\"duration\\\"     (numeric)  The running time in microseconds\\n\"\n-            \"   },...\\n\"\n-            \"  ],\\n\"\n-            \" \\\"logpath\\\" : \\\"xxx\\\" (string) The complete file path to the debug log\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::ARR, \"active_commands\", \"All active commands\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"Information about an active command\",\n+                            {\n+                                 {RPCResult::Type::STR, \"method\", \"The name of the RPC command\"},\n+                                 {RPCResult::Type::NUM, \"duration\", \"The running time in microseconds\"},\n+                            }},\n+                        }},\n+                        {RPCResult::Type::STR, \"logpath\", \"The complete file path to the debug log\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getrpcinfo\", \"\")"
      },
      {
        "sha": "a4e67c8da8e6f81de8a81ebf4691f768d6c31aab",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 90,
        "deletions": 1,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fa6b061fc118995eec41766519a11bc0dd1a901d",
        "patch": "@@ -433,7 +433,9 @@ std::string RPCResults::ToDescriptionString() const\n         } else {\n             result += \"\\nResult (\" + r.m_cond + \"):\\n\";\n         }\n-        result += r.m_result;\n+        Sections sections;\n+        r.ToSections(sections);\n+        result += sections.ToString();\n     }\n     return result;\n }\n@@ -580,6 +582,93 @@ std::string RPCArg::ToDescriptionString() const\n     return ret;\n }\n \n+void RPCResult::ToSections(Sections& sections, const OuterType outer_type, const int current_indent) const\n+{\n+    // Indentation\n+    const std::string indent(current_indent, ' ');\n+    const std::string indent_next(current_indent + 2, ' ');\n+\n+    // Elements in a JSON structure (dictionary or array) are separated by a comma\n+    const std::string maybe_separator{outer_type != OuterType::NONE ? \",\" : \"\"};\n+\n+    // The key name if recursed into an dictionary\n+    const std::string maybe_key{\n+        outer_type == OuterType::OBJ ?\n+            \"\\\"\" + this->m_key_name + \"\\\" : \" :\n+            \"\"};\n+\n+    // Format description with type\n+    const auto Description = [&](const std::string& type) {\n+        return \"(\" + type + (this->m_optional ? \", optional\" : \"\") + \")\" +\n+               (this->m_description.empty() ? \"\" : \" \" + this->m_description);\n+    };\n+\n+    switch (m_type) {\n+    case Type::ELISION: {\n+        // If the inner result is empty, use three dots for elision\n+        sections.PushSection({indent_next + \"...\", m_description});\n+        return;\n+    }\n+    case Type::NONE: {\n+        sections.PushSection({indent + \"None\", Description(\"json null\")});\n+        return;\n+    }\n+    case Type::STR: {\n+        sections.PushSection({indent + maybe_key + \"\\\"str\\\"\" + maybe_separator, Description(\"string\")});\n+        return;\n+    }\n+    case Type::STR_AMOUNT: {\n+        sections.PushSection({indent + maybe_key + \"n\" + maybe_separator, Description(\"numeric\")});\n+        return;\n+    }\n+    case Type::STR_HEX: {\n+        sections.PushSection({indent + maybe_key + \"\\\"hex\\\"\" + maybe_separator, Description(\"string\")});\n+        return;\n+    }\n+    case Type::NUM: {\n+        sections.PushSection({indent + maybe_key + \"n\" + maybe_separator, Description(\"numeric\")});\n+        return;\n+    }\n+    case Type::NUM_TIME: {\n+        sections.PushSection({indent + maybe_key + \"xxx\" + maybe_separator, Description(\"numeric\")});\n+        return;\n+    }\n+    case Type::BOOL: {\n+        sections.PushSection({indent + maybe_key + \"true|false\" + maybe_separator, Description(\"boolean\")});\n+        return;\n+    }\n+    case Type::ARR_FIXED:\n+    case Type::ARR: {\n+        sections.PushSection({indent + maybe_key + \"[\", Description(\"json array\")});\n+        for (const auto& i : m_inner) {\n+            i.ToSections(sections, OuterType::ARR, current_indent + 2);\n+        }\n+        if (m_type == Type::ARR) {\n+            sections.PushSection({indent_next + \"...\", \"\"});\n+        }\n+        sections.PushSection({indent + \"]\" + maybe_separator, \"\"});\n+        return;\n+    }\n+    case Type::OBJ_DYN:\n+    case Type::OBJ: {\n+        sections.PushSection({indent + maybe_key + \"{\", Description(\"json object\")});\n+        for (const auto& i : m_inner) {\n+            i.ToSections(sections, OuterType::OBJ, current_indent + 2);\n+        }\n+        if (m_type == Type::OBJ_DYN) {\n+            // If the dictionary keys are dynamic, use three dots for continuation\n+            sections.PushSection({indent_next + \"...\", \"\"});\n+        }\n+        sections.PushSection({indent + \"}\" + maybe_separator, \"\"});\n+        return;\n+    }\n+\n+        // no default case, so the compiler can warn about missing cases\n+    }\n+\n+    CHECK_NONFATAL(false);\n+}\n+\n std::string RPCArg::ToStringObj(const bool oneline) const\n {\n     std::string res;"
      },
      {
        "sha": "b5eebf09154dd817b6dac0fdd36f2fea34c0fbe6",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 73,
        "deletions": 8,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6b061fc118995eec41766519a11bc0dd1a901d/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fa6b061fc118995eec41766519a11bc0dd1a901d",
        "patch": "@@ -37,6 +37,7 @@ extern const std::string EXAMPLE_ADDRESS;\n class FillableSigningProvider;\n class CPubKey;\n class CScript;\n+struct Sections;\n \n /** Wrapper for UniValue::VType, which includes typeAny:\n  * Used to denote don't care type. */\n@@ -205,21 +206,85 @@ struct RPCArg {\n };\n \n struct RPCResult {\n+    enum class Type {\n+        OBJ,\n+        ARR,\n+        STR,\n+        NUM,\n+        BOOL,\n+        NONE,\n+        STR_AMOUNT, //!< Special string to represent a floating point amount\n+        STR_HEX,    //!< Special string with only hex chars\n+        OBJ_DYN,    //!< Special dictionary with keys that are not literals\n+        ARR_FIXED,  //!< Special array that has a fixed number of entries\n+        NUM_TIME,   //!< Special numeric to denote unix epoch time\n+        ELISION,    //!< Special type to denote elision (...)\n+    };\n+\n+    const Type m_type;\n+    const std::string m_key_name;         //!< Only used for dicts\n+    const std::vector<RPCResult> m_inner; //!< Only used for arrays or dicts\n+    const bool m_optional;\n+    const std::string m_description;\n     const std::string m_cond;\n-    const std::string m_result;\n \n-    explicit RPCResult(std::string result)\n-        : m_cond{}, m_result{std::move(result)}\n+    RPCResult(\n+        const std::string cond,\n+        const Type type,\n+        const std::string m_key_name,\n+        const bool optional,\n+        const std::string description,\n+        const std::vector<RPCResult> inner = {})\n+        : m_type{std::move(type)},\n+          m_key_name{std::move(m_key_name)},\n+          m_inner{std::move(inner)},\n+          m_optional{optional},\n+          m_description{std::move(description)},\n+          m_cond{std::move(cond)}\n     {\n-        CHECK_NONFATAL(!m_result.empty());\n+        CHECK_NONFATAL(!m_cond.empty());\n+        const bool inner_needed{type == Type::ARR || type == Type::ARR_FIXED || type == Type::OBJ || type == Type::OBJ_DYN};\n+        CHECK_NONFATAL(inner_needed != inner.empty());\n     }\n \n-    RPCResult(std::string cond, std::string result)\n-        : m_cond{std::move(cond)}, m_result{std::move(result)}\n+    RPCResult(\n+        const std::string cond,\n+        const Type type,\n+        const std::string m_key_name,\n+        const std::string description,\n+        const std::vector<RPCResult> inner = {})\n+        : RPCResult{cond, type, m_key_name, false, description, inner} {}\n+\n+    RPCResult(\n+        const Type type,\n+        const std::string m_key_name,\n+        const bool optional,\n+        const std::string description,\n+        const std::vector<RPCResult> inner = {})\n+        : m_type{std::move(type)},\n+          m_key_name{std::move(m_key_name)},\n+          m_inner{std::move(inner)},\n+          m_optional{optional},\n+          m_description{std::move(description)},\n+          m_cond{}\n     {\n-        CHECK_NONFATAL(!m_cond.empty());\n-        CHECK_NONFATAL(!m_result.empty());\n+        const bool inner_needed{type == Type::ARR || type == Type::ARR_FIXED || type == Type::OBJ || type == Type::OBJ_DYN};\n+        CHECK_NONFATAL(inner_needed != inner.empty());\n     }\n+\n+    RPCResult(\n+        const Type type,\n+        const std::string m_key_name,\n+        const std::string description,\n+        const std::vector<RPCResult> inner = {})\n+        : RPCResult{type, m_key_name, false, description, inner} {}\n+\n+    /** Append the sections of the result. */\n+    void ToSections(Sections& sections, OuterType outer_type = OuterType::NONE, const int current_indent = 0) const;\n+    /** Return the type string of the result when it is in an object (dict). */\n+    std::string ToStringObj() const;\n+    /** Return the description string, including the result type. */\n+    std::string ToDescriptionString() const;\n };\n \n struct RPCResults {"
      },
      {
        "sha": "425303809057447fc022aa4394c20e97cad2c139",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 17,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6b061fc118995eec41766519a11bc0dd1a901d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6b061fc118995eec41766519a11bc0dd1a901d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa6b061fc118995eec41766519a11bc0dd1a901d",
        "patch": "@@ -688,7 +688,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for the private key\"},\n                 },\n                 RPCResult{\n-            \"\\\"key\\\"                (string) The private key\\n\"\n+                    RPCResult::Type::STR, \"key\", \"The private key\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n@@ -738,9 +738,10 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                     {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The filename with path (either absolute or relative to bitcoind)\"},\n                 },\n                 RPCResult{\n-            \"{                           (json object)\\n\"\n-            \"  \\\"filename\\\" : {        (string) The filename with full absolute path\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"filename\", \"The filename with full absolute path\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\")\n@@ -1321,19 +1322,21 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                         \"\\\"options\\\"\"},\n                 },\n                 RPCResult{\n-            \"[                              (json array) Response is an array with the same size as the input that has the execution result\\n\"\n-            \"  {                            (json object)\\n\"\n-            \"    \\\"success\\\" : true|false,    (boolean)\\n\"\n-            \"    \\\"warnings\\\" : [             (json array, optional)\\n\"\n-            \"      \\\"str\\\",                   (string)\\n\"\n-            \"      ...\\n\"\n-            \"    ],\\n\"\n-            \"    \\\"error\\\" : {                (json object, optional)\\n\"\n-            \"        ...                    JSONRPC error\\n\"\n-            \"    },\\n\"\n-            \"  },\\n\"\n-            \"  ...\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"Response is an array with the same size as the input that has the execution result\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::BOOL, \"success\", \"\"},\n+                            {RPCResult::Type::ARR, \"warnings\", /* optional */ true, \"\",\n+                            {\n+                                {RPCResult::Type::STR, \"\", \"\"},\n+                            }},\n+                            {RPCResult::Type::OBJ, \"error\", /* optional */ true, \"\",\n+                            {\n+                                {RPCResult::Type::ELISION, \"\", \"JSONRPC error\"},\n+                            }},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }, \""
      },
      {
        "sha": "d9d92f89845cddd640ab56aff1a6b04a3c527096",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 369,
        "deletions": 322,
        "changes": 691,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6b061fc118995eec41766519a11bc0dd1a901d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6b061fc118995eec41766519a11bc0dd1a901d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa6b061fc118995eec41766519a11bc0dd1a901d",
        "patch": "@@ -24,6 +24,7 @@\n #include <util/string.h>\n #include <util/system.h>\n #include <util/url.h>\n+#include <util/vector.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n #include <wallet/psbtwallet.h>\n@@ -205,7 +206,7 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                     {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n-            \"\\\"address\\\"    (string) The new bitcoin address\\n\"\n+                    RPCResult::Type::STR, \"address\", \"The new bitcoin address\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getnewaddress\", \"\")\n@@ -256,7 +257,7 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                     {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n-            \"\\\"address\\\"    (string) The address\\n\"\n+                    RPCResult::Type::STR, \"address\", \"The address\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getrawchangeaddress\", \"\")\n@@ -390,7 +391,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"                             dirty if they have previously been used in a transaction.\"},\n                 },\n                 RPCResult{\n-            \"\\\"txid\\\"                  (string) The transaction id.\\n\"\n+                    RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1\")\n@@ -469,17 +470,18 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n                 \"in past transactions\\n\",\n                 {},\n                 RPCResult{\n-            \"[\\n\"\n-            \"  [\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\",            (string) The bitcoin address\\n\"\n-            \"      amount,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n-            \"      \\\"label\\\"               (string, optional) The label\\n\"\n-            \"    ]\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::ARR, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::ARR, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR, \"address\", \"The bitcoin address\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n+                                {RPCResult::Type::STR, \"label\", /* optional */ true, \"The label\"},\n+                            }},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"listaddressgroupings\", \"\")\n@@ -532,7 +534,7 @@ static UniValue signmessage(const JSONRPCRequest& request)\n                     {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message to create a signature of.\"},\n                 },\n                 RPCResult{\n-            \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n+                    RPCResult::Type::STR, \"signature\", \"The signature of the message encoded in base 64\"\n                 },\n                 RPCExamples{\n             \"\\nUnlock the wallet for 30 seconds\\n\"\n@@ -601,7 +603,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n                     {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n                 },\n                 RPCResult{\n-            \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n+                    RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received at this address.\"\n                 },\n                 RPCExamples{\n             \"\\nThe amount from transactions with at least 1 confirmation\\n\"\n@@ -671,7 +673,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n                     {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n                 },\n                 RPCResult{\n-            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this label.\\n\"\n+                    RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received for this label.\"\n                 },\n                 RPCExamples{\n             \"\\nAmount received by the default label with at least 1 confirmation\\n\"\n@@ -743,7 +745,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction.\"},\n                 },\n                 RPCResult{\n-            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\\n\"\n+                    RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\"\n                 },\n                 RPCExamples{\n             \"\\nThe total amount in the wallet with 1 or more confirmations\\n\"\n@@ -845,8 +847,8 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             \"       \\\"CONSERVATIVE\\\"\"},\n                 },\n                  RPCResult{\n-            \"\\\"txid\\\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n-            \"                                    the number of addresses.\\n\"\n+                     RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of\\n\"\n+            \"the number of addresses.\"\n                  },\n                 RPCExamples{\n             \"\\nSend two amounts to two different addresses:\\n\"\n@@ -969,11 +971,12 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n                     {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"address\\\" : \\\"multisigaddress\\\",    (string) The value of the new multisig address.\\n\"\n-            \"  \\\"redeemScript\\\" : \\\"script\\\"         (string) The string value of the hex-encoded redemption script.\\n\"\n-            \"  \\\"descriptor\\\" : \\\"descriptor\\\"     (string) The descriptor for this multisig\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"address\", \"The value of the new multisig address\"},\n+                        {RPCResult::Type::STR_HEX, \"redeemScript\", \"The string value of the hex-encoded redemption script\"},\n+                        {RPCResult::Type::STR, \"descriptor\", \"The descriptor for this multisig\"},\n+                    }\n                 },\n                 RPCExamples{\n             \"\\nAdd a multisig address from 2 addresses\\n\"\n@@ -1202,20 +1205,21 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n                     {\"address_filter\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If present, only return information on this address.\"},\n                 },\n                 RPCResult{\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"involvesWatchonly\\\" : true,        (boolean) Only returns true if imported addresses were involved in transaction.\\n\"\n-            \"    \\\"address\\\" : \\\"receivingaddress\\\",  (string) The receiving address\\n\"\n-            \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n-            \"    \\\"confirmations\\\" : n,               (numeric) The number of confirmations of the most recent transaction included\\n\"\n-            \"    \\\"label\\\" : \\\"label\\\",               (string) The label of the receiving address. The default label is \\\"\\\".\\n\"\n-            \"    \\\"txids\\\" : [\\n\"\n-            \"       \\\"txid\\\",                         (string) The ids of transactions received with the address \\n\"\n-            \"       ...\\n\"\n-            \"    ]\\n\"\n-            \"  }\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction\"},\n+                            {RPCResult::Type::STR, \"address\", \"The receiving address\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received by the address\"},\n+                            {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations of the most recent transaction included\"},\n+                            {RPCResult::Type::STR, \"label\", \"The label of the receiving address. The default label is \\\"\\\"\"},\n+                            {RPCResult::Type::ARR, \"txids\", \"\",\n+                            {\n+                                {RPCResult::Type::STR_HEX, \"txid\", \"The ids of transactions received with the address\"},\n+                            }},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"listreceivedbyaddress\", \"\")\n@@ -1252,15 +1256,16 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Whether to include watch-only addresses (see 'importaddress')\"},\n                 },\n                 RPCResult{\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"involvesWatchonly\\\" : true,   (boolean) Only returns true if imported addresses were involved in transaction.\\n\"\n-            \"    \\\"amount\\\" : x.xxx,             (numeric) The total amount received by addresses with this label\\n\"\n-            \"    \\\"confirmations\\\" : n,          (numeric) The number of confirmations of the most recent transaction included\\n\"\n-            \"    \\\"label\\\" : \\\"label\\\"           (string) The label of the receiving address. The default label is \\\"\\\".\\n\"\n-            \"  }\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount received by addresses with this label\"},\n+                            {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations of the most recent transaction included\"},\n+                            {RPCResult::Type::STR, \"label\", \"The label of the receiving address. The default label is \\\"\\\"\"},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"listreceivedbylabel\", \"\")\n@@ -1372,26 +1377,26 @@ static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* con\n     }\n }\n \n-static const std::string TransactionDescriptionString()\n+static const std::vector<RPCResult> TransactionDescriptionString()\n {\n-    return \"    \\\"confirmations\\\": n,                        (numeric) The number of confirmations for the transaction. Negative confirmations means the\\n\"\n-           \"                                                       transaction conflicted that many blocks ago.\\n\"\n-           \"    \\\"generated\\\" : xxx,                          (boolean) Only present if transaction only input is a coinbase one.\\n\"\n-           \"    \\\"trusted\\\" : xxx,                            (boolean) Only present if we consider transaction to be trusted and so safe to spend from.\\n\"\n-           \"    \\\"blockhash\\\" : \\\"hashvalue\\\",                  (string) The block hash containing the transaction.\\n\"\n-           \"    \\\"blockheight\\\" : n,                          (numeric) The block height containing the transaction.\\n\"\n-           \"    \\\"blockindex\\\" : n,                           (numeric) The index of the transaction in the block that includes it.\\n\"\n-           \"    \\\"blocktime\\\" : xxx,                          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n-           \"    \\\"txid\\\" : \\\"transactionid\\\",                   (string) The transaction id.\\n\"\n-           \"    \\\"walletconflicts\\\" : [                       (json array) Conflicting transaction ids.\\n\"\n-           \"      \\\"txid\\\",                                  (string) The transaction id.\\n\"\n-           \"      ...\\n\"\n-           \"    ],\\n\"\n-           \"    \\\"time\\\" : xxx,                               (numeric) The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n-           \"    \\\"timereceived\\\" : xxx,                       (numeric) The time received expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n-           \"    \\\"comment\\\" : \\\"...\\\",                          (string) If a comment is associated with the transaction, only present if not empty.\\n\"\n-           \"    \\\"bip125-replaceable\\\" : \\\"str\\\",              (string) (\\\"yes|no|unknown\\\") Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n-           \"                                                     may be unknown for unconfirmed transactions not in the mempool\\n\";\n+    return{{RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations for the transaction. Negative confirmations means the\\n\"\n+               \"transaction conflicted that many blocks ago.\"},\n+           {RPCResult::Type::BOOL, \"generated\", \"Only present if transaction only input is a coinbase one.\"},\n+           {RPCResult::Type::BOOL, \"trusted\", \"Only present if we consider transaction to be trusted and so safe to spend from.\"},\n+           {RPCResult::Type::STR_HEX, \"blockhash\", \"The block hash containing the transaction.\"},\n+           {RPCResult::Type::NUM, \"blockheight\", \"The block height containing the transaction.\"},\n+           {RPCResult::Type::NUM, \"blockindex\", \"The index of the transaction in the block that includes it.\"},\n+           {RPCResult::Type::NUM_TIME, \"blocktime\", \"The block time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n+           {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n+           {RPCResult::Type::ARR, \"walletconflicts\", \"Conflicting transaction ids.\",\n+           {\n+               {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n+           }},\n+           {RPCResult::Type::NUM_TIME, \"time\", \"The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n+           {RPCResult::Type::NUM_TIME, \"timereceived\", \"The time received expressed in \" + UNIX_EPOCH_TIME + \".\"},\n+           {RPCResult::Type::STR, \"comment\", \"If a comment is associated with the transaction, only present if not empty.\"},\n+           {RPCResult::Type::STR, \"bip125-replaceable\", \"(\\\"yes|no|unknown\\\") Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n+               \"may be unknown for unconfirmed transactions not in the mempool\"}};\n }\n \n UniValue listtransactions(const JSONRPCRequest& request)\n@@ -1414,27 +1419,31 @@ UniValue listtransactions(const JSONRPCRequest& request)\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n                 },\n                 RPCResult{\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"involvesWatchonly\\\" : xxx, (boolean) Only returns true if imported addresses were involved in transaction.\\n\"\n-            \"    \\\"address\\\" : \\\"address\\\",    (string) The bitcoin address of the transaction.\\n\"\n-            \"    \\\"category\\\" :               (string) The transaction category.\\n\"\n-            \"                \\\"send\\\"                  Transactions sent.\\n\"\n-            \"                \\\"receive\\\"               Non-coinbase transactions received.\\n\"\n-            \"                \\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n-            \"                \\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n-            \"                \\\"orphan\\\"                Orphaned coinbase transactions received.\\n\"\n-            \"    \\\"amount\\\" : x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n-            \"                                        for all other categories\\n\"\n-            \"    \\\"label\\\" : \\\"label\\\",       (string) A comment for the address/transaction, if any\\n\"\n-            \"    \\\"vout\\\" : n,                (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\" : x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n-            \"                                         'send' category of transactions.\\n\"\n-            + TransactionDescriptionString()\n-            + \"    \\\"abandoned\\\": xxx          (boolean) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n-            \"                                         'send' category of transactions.\\n\"\n-            \"  }\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n+                        {\n+                            {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction.\"},\n+                            {RPCResult::Type::STR, \"address\", \"The bitcoin address of the transaction.\"},\n+                            {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n+                                \"\\\"send\\\"                  Transactions sent.\\n\"\n+                                \"\\\"receive\\\"               Non-coinbase transactions received.\\n\"\n+                                \"\\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n+                                \"\\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n+                                \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n+                                \"for all other categories\"},\n+                            {RPCResult::Type::STR, \"label\", \"A comment for the address/transaction, if any\"},\n+                            {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"fee\", \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n+                                 \"'send' category of transactions.\"},\n+                        },\n+                        TransactionDescriptionString()),\n+                        {\n+                            {RPCResult::Type::BOOL, \"abandoned\", \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+                                 \"'send' category of transactions.\"},\n+                        })},\n+                    }\n                 },\n                 RPCExamples{\n             \"\\nList the most recent 10 transactions in the systems\\n\"\n@@ -1525,34 +1534,39 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n             \"                                                           (not guaranteed to work on pruned nodes)\"},\n                 },\n                 RPCResult{\n-            \"{                             (json object)\\n\"\n-            \"  \\\"transactions\\\" : [          (json array)\\n\"\n-            \"  {                           (json object)\\n\"\n-            \"    \\\"involvesWatchonly\\\" : xxx, (boolean) Only returns true if imported addresses were involved in transaction.\\n\"\n-            \"    \\\"address\\\" : \\\"str\\\",        (string) The bitcoin address of the transaction.\\n\"\n-            \"    \\\"category\\\" : \\\"str\\\",       (string) The transaction category.\\n\"\n-            \"                \\\"send\\\"                  Transactions sent.\\n\"\n-            \"                \\\"receive\\\"               Non-coinbase transactions received.\\n\"\n-            \"                \\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n-            \"                \\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n-            \"                \\\"orphan\\\"                Orphaned coinbase transactions received.\\n\"\n-            \"    \\\"amount\\\" : x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n-            \"                                         for all other categories\\n\"\n-            \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\" : x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the 'send' category of transactions.\\n\"\n-            + TransactionDescriptionString()\n-            + \"    \\\"abandoned\\\": xxx,         (boolean) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 'send' category of transactions.\\n\"\n-            \"    \\\"label\\\" : \\\"label\\\"       (string) A comment for the address/transaction, if any\\n\"\n-            \"    \\\"to\\\" : \\\"...\\\",            (string) If a comment to is associated with the transaction.\\n\"\n-            \"   },\\n\"\n-            \"   ...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"removed\\\" : [              (json array)\\n\"\n-            \"    <structure is the same as \\\"transactions\\\" above, only present if include_removed=true>\\n\"\n-            \"    Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"lastblock\\\" : \\\"hex\\\"        (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::ARR, \"transactions\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n+                            {\n+                                {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction.\"},\n+                                {RPCResult::Type::STR, \"address\", \"The bitcoin address of the transaction.\"},\n+                                {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n+                                    \"\\\"send\\\"                  Transactions sent.\\n\"\n+                                    \"\\\"receive\\\"               Non-coinbase transactions received.\\n\"\n+                                    \"\\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n+                                    \"\\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n+                                    \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n+                                    \"for all other categories\"},\n+                                {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"fee\", \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n+                                     \"'send' category of transactions.\"},\n+                            },\n+                            TransactionDescriptionString()),\n+                            {\n+                                {RPCResult::Type::BOOL, \"abandoned\", \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+                                     \"'send' category of transactions.\"},\n+                                {RPCResult::Type::STR, \"label\", \"A comment for the address/transaction, if any\"},\n+                                {RPCResult::Type::STR, \"to\", \"If a comment to is associated with the transaction.\"},\n+                            })},\n+                        }},\n+                        {RPCResult::Type::ARR, \"removed\", \"<structure is the same as \\\"transactions\\\" above, only present if include_removed=true>\\n\"\n+                            \"Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\"\n+                        , {{RPCResult::Type::ELISION, \"\", \"\"},}},\n+                        {RPCResult::Type::STR_HEX, \"lastblock\", \"The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"listsinceblock\", \"\")\n@@ -1660,35 +1674,41 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n                             \"Whether to include a `decoded` field containing the decoded transaction (equivalent to RPC decoderawtransaction)\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"    \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n-            \"    \\\"fee\\\" : x.xxx,            (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n-            \"                              'send' category of transactions.\\n\"\n-            + TransactionDescriptionString()\n-            + \"    \\\"details\\\" : [\\n\"\n-            \"      {\\n\"\n-            \"        \\\"involvesWatchonly\\\" : xxx,         (boolean) Only returns true if imported addresses were involved in transaction.\\n\"\n-            \"        \\\"address\\\" : \\\"address\\\",          (string) The bitcoin address involved in the transaction\\n\"\n-            \"        \\\"category\\\" :                      (string) The transaction category.\\n\"\n-            \"                     \\\"send\\\"                  Transactions sent.\\n\"\n-            \"                     \\\"receive\\\"               Non-coinbase transactions received.\\n\"\n-            \"                     \\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n-            \"                     \\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n-            \"                     \\\"orphan\\\"                Orphaned coinbase transactions received.\\n\"\n-            \"        \\\"amount\\\" : x.xxx,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n-            \"        \\\"label\\\" : \\\"label\\\",              (string) A comment for the address/transaction, if any\\n\"\n-            \"        \\\"vout\\\" : n,                       (numeric) the vout value\\n\"\n-            \"        \\\"fee\\\" : x.xxx,                     (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n-            \"                                           'send' category of transactions.\\n\"\n-            \"        \\\"abandoned\\\" : xxx                  (boolean) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n-            \"                                           'send' category of transactions.\\n\"\n-            \"      }\\n\"\n-            \"      ,...\\n\"\n-            \"    ],\\n\"\n-            \"    \\\"hex\\\" : \\\"data\\\"         (string) Raw data for transaction\\n\"\n-            \"    \\\"decoded\\\" : transaction         (json object) Optional, the decoded transaction (only present when `verbose` is passed), equivalent to the\\n\"\n-            \"                                                  RPC decoderawtransaction method, or the RPC getrawtransaction method when `verbose` is passed.\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n+                    {\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n+                                     \"'send' category of transactions.\"},\n+                    },\n+                    TransactionDescriptionString()),\n+                    {\n+                        {RPCResult::Type::ARR, \"details\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction.\"},\n+                                {RPCResult::Type::STR, \"address\", \"The bitcoin address involved in the transaction.\"},\n+                                {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n+                                    \"\\\"send\\\"                  Transactions sent.\\n\"\n+                                    \"\\\"receive\\\"               Non-coinbase transactions received.\\n\"\n+                                    \"\\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n+                                    \"\\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n+                                    \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n+                                {RPCResult::Type::STR, \"label\", \"A comment for the address/transaction, if any\"},\n+                                {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"fee\", \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n+                                    \"'send' category of transactions.\"},\n+                                {RPCResult::Type::BOOL, \"abandoned\", \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+                                     \"'send' category of transactions.\"},\n+                            }},\n+                        }},\n+                        {RPCResult::Type::STR_HEX, \"hex\", \"Raw data for transaction\"},\n+                        {RPCResult::Type::OBJ, \"decoded\", \"Optional, the decoded transaction (only present when `verbose` is passed)\",\n+                        {\n+                            {RPCResult::Type::ELISION, \"\", \"Equivalent to the RPC decoderawtransaction method, or the RPC getrawtransaction method when `verbose` is passed.\"},\n+                        }},\n+                    })\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n@@ -2147,7 +2167,7 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n                     },\n                 },\n                 RPCResult{\n-            \"true|false    (boolean) Whether the command was successful or not\\n\"\n+                    RPCResult::Type::BOOL, \"\", \"Whether the command was successful or not\"\n                 },\n                 RPCExamples{\n             \"\\nList the unspent transactions\\n\"\n@@ -2257,13 +2277,14 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n                 \"See the lockunspent call to lock and unlock transactions for spending.\\n\",\n                 {},\n                 RPCResult{\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"txid\\\" : \\\"transactionid\\\",     (string) The transaction id locked\\n\"\n-            \"    \\\"vout\\\" : n                      (numeric) The vout value\\n\"\n-            \"  }\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id locked\"},\n+                            {RPCResult::Type::NUM, \"vout\", \"The vout value\"},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n             \"\\nList the unspent transactions\\n\"\n@@ -2313,7 +2334,7 @@ static UniValue settxfee(const JSONRPCRequest& request)\n                     {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n                 },\n                 RPCResult{\n-            \"true|false        (boolean) Returns true if successful\\n\"\n+                    RPCResult::Type::BOOL, \"\", \"Returns true if successful\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"settxfee\", \"0.00001\")\n@@ -2351,19 +2372,23 @@ static UniValue getbalances(const JSONRPCRequest& request)\n         \"Returns an object with all balances in \" + CURRENCY_UNIT + \".\\n\",\n         {},\n         RPCResult{\n-            \"{\\n\"\n-            \"    \\\"mine\\\" : {                        (json object) balances from outputs that the wallet can sign\\n\"\n-            \"      \\\"trusted\\\" : xxx                 (numeric) trusted balance (outputs created by the wallet or confirmed outputs)\\n\"\n-            \"      \\\"untrusted_pending\\\" : xxx       (numeric) untrusted pending balance (outputs created by others that are in the mempool)\\n\"\n-            \"      \\\"immature\\\" : xxx                (numeric) balance from immature coinbase outputs\\n\"\n-            \"      \\\"used\\\" : xxx                    (numeric) (only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\\n\"\n-            \"    },\\n\"\n-            \"    \\\"watchonly\\\" : {                   (json object) watchonly balances (not present if wallet does not watch anything)\\n\"\n-            \"      \\\"trusted\\\" : xxx                 (numeric) trusted balance (outputs created by the wallet or confirmed outputs)\\n\"\n-            \"      \\\"untrusted_pending\\\" : xxx       (numeric) untrusted pending balance (outputs created by others that are in the mempool)\\n\"\n-            \"      \\\"immature\\\" : xxx                (numeric) balance from immature coinbase outputs\\n\"\n-            \"    },\\n\"\n-            \"}\\n\"},\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::OBJ, \"mine\", \"balances from outputs that the wallet can sign\",\n+                {\n+                    {RPCResult::Type::STR_AMOUNT, \"trusted\", \"trusted balance (outputs created by the wallet or confirmed outputs)\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"untrusted_pending\", \"untrusted pending balance (outputs created by others that are in the mempool)\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"immature\", \"balance from immature coinbase outputs\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"used\", \"(only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\"},\n+                }},\n+                {RPCResult::Type::OBJ, \"watchonly\", \"watchonly balances (not present if wallet does not watch anything)\",\n+                {\n+                    {RPCResult::Type::STR_AMOUNT, \"trusted\", \"trusted balance (outputs created by the wallet or confirmed outputs)\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"untrusted_pending\", \"untrusted pending balance (outputs created by others that are in the mempool)\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"immature\", \"balance from immature coinbase outputs\"},\n+                }},\n+            }\n+            },\n         RPCExamples{\n             HelpExampleCli(\"getbalances\", \"\") +\n             HelpExampleRpc(\"getbalances\", \"\")},\n@@ -2417,27 +2442,29 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n                 \"Returns an object containing various wallet state info.\\n\",\n                 {},\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"walletname\\\" : xxxxx,               (string) the wallet name\\n\"\n-            \"  \\\"walletversion\\\" : xxxxx,            (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\" : xxxxxxx,                (numeric) DEPRECATED. Identical to getbalances().mine.trusted\\n\"\n-            \"  \\\"unconfirmed_balance\\\" : xxx,        (numeric) DEPRECATED. Identical to getbalances().mine.untrusted_pending\\n\"\n-            \"  \\\"immature_balance\\\" : xxxxxx,        (numeric) DEPRECATED. Identical to getbalances().mine.immature\\n\"\n-            \"  \\\"txcount\\\" : xxxxxxx,                (numeric) the total number of transactions in the wallet\\n\"\n-            \"  \\\"keypoololdest\\\" : xxxxxx,           (numeric) the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool\\n\"\n-            \"  \\\"keypoolsize\\\" : xxxx,               (numeric) how many new keys are pre-generated (only counts external keys)\\n\"\n-            \"  \\\"keypoolsize_hd_internal\\\" : xxxx,   (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n-            \"  \\\"unlocked_until\\\" : ttt,             (numeric) the \" + UNIX_EPOCH_TIME + \" until which the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\" : x.xxxx,                (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n-            \"  \\\"private_keys_enabled\\\" : true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\\n\"\n-            \"  \\\"avoid_reuse\\\" : true|false          (boolean) whether this wallet tracks clean/dirty coins in terms of reuse\\n\"\n-            \"  \\\"scanning\\\" :                        (json object) current scanning details, or false if no scan is in progress\\n\"\n-            \"    {\\n\"\n-            \"      \\\"duration\\\" : xxxx              (numeric) elapsed seconds since scan start\\n\"\n-            \"      \\\"progress\\\" : x.xxxx,           (numeric) scanning progress percentage [0.0, 1.0]\\n\"\n-            \"    }\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {\n+                        {RPCResult::Type::STR, \"walletname\", \"the wallet name\"},\n+                        {RPCResult::Type::NUM, \"walletversion\", \"the wallet version\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"balance\", \"DEPRECATED. Identical to getbalances().mine.trusted\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"unconfirmed_balance\", \"DEPRECATED. Identical to getbalances().mine.untrusted_pending\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"immature_balance\", \"DEPRECATED. Identical to getbalances().mine.immature\"},\n+                        {RPCResult::Type::NUM, \"txcount\", \"the total number of transactions in the wallet\"},\n+                        {RPCResult::Type::NUM_TIME, \"keypoololdest\", \"the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool\"},\n+                        {RPCResult::Type::NUM, \"keypoolsize\", \"how many new keys are pre-generated (only counts external keys)\"},\n+                        {RPCResult::Type::NUM, \"keypoolsize_hd_internal\", \"how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\"},\n+                        {RPCResult::Type::NUM_TIME, \"unlocked_until\", \"the \" + UNIX_EPOCH_TIME + \" until which the wallet is unlocked for transfers, or 0 if the wallet is locked\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"paytxfee\", \"the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\"},\n+                        {RPCResult::Type::STR_HEX, \"hdseedid\", /* optional */ true, \"the Hash160 of the HD seed (only present when HD is enabled)\"},\n+                        {RPCResult::Type::BOOL, \"private_keys_enabled\", \"false if privatekeys are disabled for this wallet (enforced watch-only wallet)\"},\n+                        {RPCResult::Type::BOOL, \"avoid_reuse\", \"whether this wallet tracks clean/dirty coins in terms of reuse\"},\n+                        {RPCResult::Type::OBJ, \"scanning\", \"current scanning details, or false if no scan is in progress\",\n+                        {\n+                            {RPCResult::Type::NUM, \"duration\", \"elapsed seconds since scan start\"},\n+                            {RPCResult::Type::NUM, \"progress\", \"scanning progress percentage [0.0, 1.0]\"},\n+                        }},\n+                    }},\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2499,14 +2526,16 @@ static UniValue listwalletdir(const JSONRPCRequest& request)\n                 \"Returns a list of wallets in the wallet directory.\\n\",\n                 {},\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"wallets\\\" : [                (json array of objects)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"name\\\" : \\\"name\\\"          (string) The wallet name\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::ARR, \"wallets\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR, \"name\", \"The wallet name\"},\n+                            }},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"listwalletdir\", \"\")\n@@ -2533,10 +2562,10 @@ static UniValue listwallets(const JSONRPCRequest& request)\n                 \"For full information on the wallet, use \\\"getwalletinfo\\\"\\n\",\n                 {},\n                 RPCResult{\n-            \"[                         (json array of strings)\\n\"\n-            \"  \\\"walletname\\\"            (string) the wallet name\\n\"\n-            \"   ...\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"walletname\", \"the wallet name\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"listwallets\", \"\")\n@@ -2569,10 +2598,11 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n                     {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet directory or .dat file.\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"name\\\" :    <wallet_name>,        (string) The wallet name if loaded successfully.\\n\"\n-            \"  \\\"warning\\\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"name\", \"The wallet name if loaded successfully.\"},\n+                        {RPCResult::Type::STR, \"warning\", \"Warning message if wallet was not loaded cleanly.\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"loadwallet\", \"\\\"test.dat\\\"\")\n@@ -2624,11 +2654,12 @@ static UniValue setwalletflag(const JSONRPCRequest& request)\n                     {\"value\", RPCArg::Type::BOOL, /* default */ \"true\", \"The new state.\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"    \\\"flag_name\\\" : string   (string) The name of the flag that was modified\\n\"\n-            \"    \\\"flag_state\\\" : bool    (boolean) The new state of the flag\\n\"\n-            \"    \\\"warnings\\\" : string    (string) Any warnings associated with the change\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"flag_name\", \"The name of the flag that was modified\"},\n+                        {RPCResult::Type::BOOL, \"flag_state\", \"The new state of the flag\"},\n+                        {RPCResult::Type::STR, \"warnings\", \"Any warnings associated with the change\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"setwalletflag\", \"avoid_reuse\")\n@@ -2684,10 +2715,11 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"false\", \"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\"},\n         },\n         RPCResult{\n-            \"{\\n\"\n-            \"  \\\"name\\\" :    <wallet_name>,        (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.\\n\"\n-            \"  \\\"warning\\\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.\\n\"\n-            \"}\\n\"\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::STR, \"name\", \"The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.\"},\n+                {RPCResult::Type::STR, \"warning\", \"Warning message if wallet was not loaded cleanly.\"},\n+            }\n         },\n         RPCExamples{\n             HelpExampleCli(\"createwallet\", \"\\\"testwallet\\\"\")\n@@ -2813,27 +2845,28 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                         \"query_options\"},\n                 },\n                 RPCResult{\n-            \"[                   (array of json object)\\n\"\n-            \"  {\\n\"\n-            \"    \\\"txid\\\" : \\\"txid\\\",          (string) the transaction id \\n\"\n-            \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"address\\\" : \\\"address\\\",    (string) the bitcoin address\\n\"\n-            \"    \\\"label\\\" : \\\"label\\\",        (string) The associated label, or \\\"\\\" for the default label\\n\"\n-            \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n-            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n-            \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n-            \"    \\\"redeemScript\\\" : \\\"script\\\" (string) The redeemScript if scriptPubKey is P2SH\\n\"\n-            \"    \\\"witnessScript\\\" : \\\"script\\\" (string) witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\\n\"\n-            \"    \\\"spendable\\\" : xxx,        (boolean) Whether we have the private keys to spend this output\\n\"\n-            \"    \\\"solvable\\\" : xxx,         (boolean) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n-            \"    \\\"reused\\\" : xxx,           (boolean) (only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\\n\"\n-            \"    \\\"desc\\\" : xxx,             (string, only when solvable) A descriptor for spending this output\\n\"\n-            \"    \\\"safe\\\" : xxx              (boolean) Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR_HEX, \"txid\", \"the transaction id\"},\n+                            {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n+                            {RPCResult::Type::STR, \"address\", \"the bitcoin address\"},\n+                            {RPCResult::Type::STR, \"label\", \"The associated label, or \\\"\\\" for the default label\"},\n+                            {RPCResult::Type::STR, \"scriptPubKey\", \"the script key\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"amount\", \"the transaction output amount in \" + CURRENCY_UNIT},\n+                            {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations\"},\n+                            {RPCResult::Type::STR_HEX, \"redeemScript\", \"The redeemScript if scriptPubKey is P2SH\"},\n+                            {RPCResult::Type::STR, \"witnessScript\", \"witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\"},\n+                            {RPCResult::Type::BOOL, \"spendable\", \"Whether we have the private keys to spend this output\"},\n+                            {RPCResult::Type::BOOL, \"solvable\", \"Whether we know how to spend this output, ignoring the lack of keys\"},\n+                            {RPCResult::Type::BOOL, \"reused\", \"(only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\"},\n+                            {RPCResult::Type::STR, \"desc\", \"(only when solvable) A descriptor for spending this output\"},\n+                            {RPCResult::Type::BOOL, \"safe\", \"Whether this output is considered safe to spend. Unconfirmed transactions\"\n             \"                              from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n-            \"                              and are not eligible for spending by fundrawtransaction and sendtoaddress.\\n\"\n-            \"  }\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n+                                \"and are not eligible for spending by fundrawtransaction and sendtoaddress.\"},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"listunspent\", \"\")\n@@ -3171,11 +3204,12 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                     },\n                 },\n                 RPCResult{\n-                            \"{\\n\"\n-                            \"  \\\"hex\\\" :       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n-                            \"  \\\"fee\\\" :       n,         (numeric) Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\\n\"\n-                            \"  \\\"changepos\\\" : n          (numeric) The position of the added change output, or -1\\n\"\n-                            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"hex\", \"The resulting raw transaction (hex-encoded string)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\"},\n+                        {RPCResult::Type::NUM, \"changepos\", \"The position of the added change output, or -1\"},\n+                    }\n                                 },\n                                 RPCExamples{\n                             \"\\nCreate a transaction with no inputs\\n\"\n@@ -3250,20 +3284,22 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"hex\", \"The hex-encoded raw transaction with signature(s)\"},\n+                        {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                        {RPCResult::Type::ARR, \"errors\", \"Script verification errors (if there are any)\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR_HEX, \"txid\", \"The hash of the referenced, previous transaction\"},\n+                                {RPCResult::Type::NUM, \"vout\", \"The index of the output to spent and used as input\"},\n+                                {RPCResult::Type::STR_HEX, \"scriptSig\", \"The hex-encoded signature script\"},\n+                                {RPCResult::Type::NUM, \"sequence\", \"Script sequence number\"},\n+                                {RPCResult::Type::STR, \"error\", \"Verification or signing error related to the input\"},\n+                            }},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n@@ -3360,13 +3396,16 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                         \"options\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"psbt\\\" :    \\\"psbt\\\",    (string) The base64-encoded unsigned PSBT of the new transaction. Only returned when wallet private keys are disabled.\\n\"\n-            \"  \\\"txid\\\" :    \\\"value\\\",   (string) The id of the new transaction. Only returned when wallet private keys are enabled.\\n\"\n-            \"  \\\"origfee\\\" :  n,        (numeric) The fee of the replaced transaction.\\n\"\n-            \"  \\\"fee\\\" :      n,        (numeric) The fee of the new transaction.\\n\"\n-            \"  \\\"errors\\\" :  [ str... ] (json array of strings) Errors encountered during processing (may be empty).\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded unsigned PSBT of the new transaction. Only returned when wallet private keys are disabled.\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The id of the new transaction. Only returned when wallet private keys are enabled.\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"origfee\", \"The fee of the replaced transaction.\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"The fee of the new transaction.\"},\n+                        {RPCResult::Type::ARR, \"errors\", \"Errors encountered during processing (may be empty).\",\n+                        {\n+                            {RPCResult::Type::STR, \"\", \"\"},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n             \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n@@ -3521,10 +3560,11 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n                     {\"stop_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"start_height\\\"     (numeric) The block height where the rescan started (the requested height or 0)\\n\"\n-            \"  \\\"stop_height\\\"      (numeric) The height of the last rescanned block. May be null in rare cases if there was a reorg and the call didn't scan any blocks because they were already scanned in the background.\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"start_height\", \"The block height where the rescan started (the requested height or 0)\"},\n+                        {RPCResult::Type::NUM, \"stop_height\", \"The height of the last rescanned block. May be null in rare cases if there was a reorg and the call didn't scan any blocks because they were already scanned in the background.\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"rescanblockchain\", \"100000 120000\")\n@@ -3729,49 +3769,52 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for which to get information.\"},\n                 },\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\",              (string) The bitcoin address validated.\\n\"\n-            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",             (string) The hex-encoded scriptPubKey generated by the address.\\n\"\n-            \"  \\\"ismine\\\" : true|false,              (boolean) If the address is yours.\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,         (boolean) If the address is watchonly.\\n\"\n-            \"  \\\"solvable\\\" : true|false,            (boolean) If we know how to spend coins sent to this address, ignoring the possible lack of private keys.\\n\"\n-            \"  \\\"desc\\\" : \\\"desc\\\",                    (string, optional) A descriptor for spending coins sent to this address (only when solvable).\\n\"\n-            \"  \\\"isscript\\\" : true|false,            (boolean) If the key is a script.\\n\"\n-            \"  \\\"ischange\\\" : true|false,            (boolean) If the address was used for change output.\\n\"\n-            \"  \\\"iswitness\\\" : true|false,           (boolean) If the address is a witness address.\\n\"\n-            \"  \\\"witness_version\\\" : version         (numeric, optional) The version number of the witness program.\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"           (string, optional) The hex value of the witness program.\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"                   (string, optional) The output script type. Only if isscript is true and the redeemscript is known. Possible\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"address\", \"The bitcoin address validated.\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptPubKey\", \"The hex-encoded scriptPubKey generated by the address.\"},\n+                        {RPCResult::Type::BOOL, \"ismine\", \"If the address is yours.\"},\n+                        {RPCResult::Type::BOOL, \"iswatchonly\", \"If the address is watchonly.\"},\n+                        {RPCResult::Type::BOOL, \"solvable\", \"If we know how to spend coins sent to this address, ignoring the possible lack of private keys.\"},\n+                        {RPCResult::Type::STR, \"desc\", /* optional */ true, \"A descriptor for spending coins sent to this address (only when solvable).\"},\n+                        {RPCResult::Type::BOOL, \"isscript\", \"If the key is a script.\"},\n+                        {RPCResult::Type::BOOL, \"ischange\", \"If the address was used for change output.\"},\n+                        {RPCResult::Type::BOOL, \"iswitness\", \"If the address is a witness address.\"},\n+                        {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program.\"},\n+                        {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program.\"},\n+                        {RPCResult::Type::STR, \"script\", /* optional */ true, \"The output script type. Only if isscript is true and the redeemscript is known. Possible\\n\"\n             \"                                                         types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,\\n\"\n-            \"                                                         witness_v0_scripthash, witness_unknown.\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                      (string, optional) The redeemscript for the p2sh address.\\n\"\n-            \"  \\\"pubkeys\\\"                           (array, optional) Array of pubkeys associated with the known redeemscript (only if script is multisig).\\n\"\n-            \"    [\\n\"\n-            \"      \\\"pubkey\\\" (string)\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx              (numeric, optional) The number of signatures required to spend multisig output (only if script is multisig).\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",          (string, optional) The hex value of the raw public key for single-key addresses (possibly embedded in P2SH or P2WSH).\\n\"\n-            \"  \\\"embedded\\\" : {...},                 (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. Includes all\\n\"\n+                            \"witness_v0_scripthash, witness_unknown.\"},\n+                        {RPCResult::Type::STR_HEX, \"hex\", /* optional */ true, \"The redeemscript for the p2sh address.\"},\n+                        {RPCResult::Type::ARR, \"pubkeys\", /* optional */ true, \"Array of pubkeys associated with the known redeemscript (only if script is multisig).\",\n+                        {\n+                            {RPCResult::Type::STR, \"pubkey\", \"\"},\n+                        }},\n+                        {RPCResult::Type::NUM, \"sigsrequired\", /* optional */ true, \"The number of signatures required to spend multisig output (only if script is multisig).\"},\n+                        {RPCResult::Type::STR_HEX, \"pubkey\", /* optional */ true, \"The hex value of the raw public key for single-key addresses (possibly embedded in P2SH or P2WSH).\"},\n+                        {RPCResult::Type::OBJ, \"embedded\", /* optional */ true, \"Information about the address embedded in P2SH or P2WSH, if relevant and known.\",\n+                        {\n+                            {RPCResult::Type::ELISION, \"\", \"Includes all\\n\"\n             \"                                                         getaddressinfo output fields for the embedded address, excluding metadata (timestamp, hdkeypath,\\n\"\n-            \"                                                         hdseedid) and relation to the wallet (ismine, iswatchonly).\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed.\\n\"\n-            \"  \\\"label\\\" :  \\\"label\\\"                  (string) DEPRECATED. The label associated with the address. Defaults to \\\"\\\". Replaced by the labels array below.\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key, if available, expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath, if the key is HD and available.\\n\"\n-            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed.\\n\"\n-            \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingerprint of the master key.\\n\"\n-            \"  \\\"labels\\\"                            (json array) Array of labels associated with the address. Currently limited to one label but returned\\n\"\n-            \"                                              as an array to keep the API stable if multiple labels are enabled in the future.\\n\"\n-            \"    [\\n\"\n-            \"      \\\"label name\\\" (string) The label name. Defaults to \\\"\\\".\\n\"\n-            \"      DEPRECATED, will be removed in 0.21. To re-enable, launch bitcoind with `-deprecatedrpc=labelspurpose`:\\n\"\n-            \"      {\\n\"\n-            \"        \\\"name\\\" : \\\"label name\\\" (string) The label name. Defaults to \\\"\\\".\\n\"\n-            \"        \\\"purpose\\\" : \\\"purpose\\\" (string) The purpose of the associated address (send or receive).\\n\"\n-            \"      }\\n\"\n-            \"    ]\\n\"\n-            \"}\\n\"\n+                            \"hdseedid) and relation to the wallet (ismine, iswatchonly).\"},\n+                        }},\n+                        {RPCResult::Type::BOOL, \"iscompressed\", /* optional */ true, \"If the pubkey is compressed.\"},\n+                        {RPCResult::Type::STR, \"label\", \"DEPRECATED. The label associated with the address. Defaults to \\\"\\\". Replaced by the labels array below.\"},\n+                        {RPCResult::Type::NUM_TIME, \"timestamp\", /* optional */ true, \"The creation time of the key, if available, expressed in \" + UNIX_EPOCH_TIME + \".\"},\n+                        {RPCResult::Type::STR, \"hdkeypath\", /* optional */ true, \"The HD keypath, if the key is HD and available.\"},\n+                        {RPCResult::Type::STR_HEX, \"hdseedid\", /* optional */ true, \"The Hash160 of the HD seed.\"},\n+                        {RPCResult::Type::STR_HEX, \"hdmasterfingerprint\", /* optional */ true, \"The fingerprint of the master key.\"},\n+                        {RPCResult::Type::ARR, \"labels\", \"Array of labels associated with the address. Currently limited to one label but returned\\n\"\n+                            \"as an array to keep the API stable if multiple labels are enabled in the future.\",\n+                        {\n+                            {RPCResult::Type::STR, \"label name\", \"The label name. Defaults to \\\"\\\".\"},\n+                            {RPCResult::Type::OBJ, \"\", \"label data, DEPRECATED, will be removed in 0.21. To re-enable, launch bitcoind with `-deprecatedrpc=labelspurpose`\",\n+                            {\n+                                {RPCResult::Type::STR, \"name\", \"The label name. Defaults to \\\"\\\".\"},\n+                                {RPCResult::Type::STR, \"purpose\", \"The purpose of the associated address (send or receive).\"},\n+                            }},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getaddressinfo\", EXAMPLE_ADDRESS) +\n@@ -3868,11 +3911,13 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n                     {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label.\"},\n                 },\n                 RPCResult{\n-            \"{ (json object with addresses as keys)\\n\"\n-            \"  \\\"address\\\" : { (json object with information about address)\\n\"\n-            \"    \\\"purpose\\\" : \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n-            \"  },...\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ_DYN, \"\", \"json object with addresses as keys\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"address\", \"json object with information about address\",\n+                        {\n+                            {RPCResult::Type::STR, \"purpose\", \"Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\"},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n@@ -3925,10 +3970,10 @@ static UniValue listlabels(const JSONRPCRequest& request)\n                     {\"purpose\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n                 },\n                 RPCResult{\n-            \"[               (json array of string)\\n\"\n-            \"  \\\"label\\\",      (string) Label name\\n\"\n-            \"  ...\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"label\", \"Label name\"},\n+                    }\n                 },\n                 RPCExamples{\n             \"\\nList all labels\\n\"\n@@ -4069,10 +4114,11 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n                     {\"bip32derivs\", RPCArg::Type::BOOL, /* default */ \"true\", \"Include BIP 32 derivation paths for public keys if we know them\"},\n                 },\n                 RPCResult{\n-            \"{                            (json object)\\n\"\n-            \"  \\\"psbt\\\" : \\\"str\\\",            (string) The base64-encoded partially signed transaction\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded partially signed transaction\"},\n+                        {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"walletprocesspsbt\", \"\\\"psbt\\\"\")\n@@ -4179,11 +4225,12 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                     {\"bip32derivs\", RPCArg::Type::BOOL, /* default */ \"true\", \"Include BIP 32 derivation paths for public keys if we know them\"},\n                 },\n                 RPCResult{\n-                            \"{\\n\"\n-                            \"  \\\"psbt\\\" : \\\"value\\\",        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n-                            \"  \\\"fee\\\" :       n,         (numeric) Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\\n\"\n-                            \"  \\\"changepos\\\" : n          (numeric) The position of the added change output, or -1\\n\"\n-                            \"}\\n\"\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"psbt\", \"The resulting raw transaction (base64-encoded string)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\"},\n+                        {RPCResult::Type::NUM, \"changepos\", \"The position of the added change output, or -1\"},\n+                    }\n                                 },\n                                 RPCExamples{\n                             \"\\nCreate a transaction with no inputs\\n\""
      },
      {
        "sha": "0fbefb6023f2e5d342cbbb7ea428dcdd585e8174",
        "filename": "src/zmq/zmqrpc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6b061fc118995eec41766519a11bc0dd1a901d/src/zmq/zmqrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6b061fc118995eec41766519a11bc0dd1a901d/src/zmq/zmqrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqrpc.cpp?ref=fa6b061fc118995eec41766519a11bc0dd1a901d",
        "patch": "@@ -19,14 +19,15 @@ UniValue getzmqnotifications(const JSONRPCRequest& request)\n                 \"\\nReturns information about the active ZeroMQ notifications.\\n\",\n                 {},\n                 RPCResult{\n-            \"[\\n\"\n-            \"  {                        (json object)\\n\"\n-            \"    \\\"type\\\" : \\\"pubhashtx\\\",   (string) Type of notification\\n\"\n-            \"    \\\"address\\\" : \\\"...\\\",      (string) Address of the publisher\\n\"\n-            \"    \\\"hwm\\\" : n                 (numeric) Outbound message high water mark\\n\"\n-            \"  },\\n\"\n-            \"  ...\\n\"\n-            \"]\\n\"\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR, \"type\", \"Type of notification\"},\n+                            {RPCResult::Type::STR, \"address\", \"Address of the publisher\"},\n+                            {RPCResult::Type::NUM, \"hwm\", \"Outbound message high water mark\"},\n+                        }},\n+                    }\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getzmqnotifications\", \"\")"
      }
    ]
  }
]