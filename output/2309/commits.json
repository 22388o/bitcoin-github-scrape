[
  {
    "sha": "b8c0bea673cc00969d0a5562a9e5459fad51c30d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGMwYmVhNjczY2MwMDk2OWQwYTU1NjJhOWU1NDU5ZmFkNTFjMzBk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-02-10T18:01:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-02-10T18:01:30Z"
      },
      "message": "Change progress bar from block-based to time-based\n\nThis is less confusing to most people, and doesn't rely on estimates\nof the total number of blocks received from other nodes.",
      "tree": {
        "sha": "d248effda7e4d65565649180c8bd218bad448d13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d248effda7e4d65565649180c8bd218bad448d13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8c0bea673cc00969d0a5562a9e5459fad51c30d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c0bea673cc00969d0a5562a9e5459fad51c30d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8c0bea673cc00969d0a5562a9e5459fad51c30d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c0bea673cc00969d0a5562a9e5459fad51c30d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f50706796b7786a7d85ad0baea81b709ae3ed683",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f50706796b7786a7d85ad0baea81b709ae3ed683",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f50706796b7786a7d85ad0baea81b709ae3ed683"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 35,
      "deletions": 24
    },
    "files": [
      {
        "sha": "cfb0f9cb3c51f6449807c6675d2e10dfbcee6b02",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 23,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c0bea673cc00969d0a5562a9e5459fad51c30d/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c0bea673cc00969d0a5562a9e5459fad51c30d/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=b8c0bea673cc00969d0a5562a9e5459fad51c30d",
        "patch": "@@ -527,52 +527,44 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n         importText = tr(\"Reindexing blocks on disk...\");\n     }\n \n+    QDateTime genesisBlockDate = clientModel->getGenesisBlockDate();\n+    QDateTime lastBlockDate = clientModel->getLastBlockDate();\n+    QDateTime currentDate = QDateTime::currentDateTime();\n+    int secs = lastBlockDate.secsTo(currentDate);\n+    int totalSecs = genesisBlockDate.secsTo(currentDate);\n+\n     if(count < nTotalBlocks)\n     {\n-        int nRemainingBlocks = nTotalBlocks - count;\n-        float nPercentageDone = count / (nTotalBlocks * 0.01f);\n-\n-        progressBarLabel->setText(importText);\n-        progressBarLabel->setVisible(true);\n-        progressBar->setFormat(tr(\"~%n block(s) remaining\", \"\", nRemainingBlocks));\n-        progressBar->setMaximum(nTotalBlocks);\n-        progressBar->setValue(count);\n-        progressBar->setVisible(true);\n-\n-        tooltip = tr(\"Processed %1 of %2 blocks of transaction history (%3% done).\").arg(count).arg(nTotalBlocks).arg(nPercentageDone, 0, 'f', 2);\n+        tooltip = tr(\"Processed %1 of %2 blocks of transaction history.\").arg(count).arg(nTotalBlocks);\n     }\n     else\n     {\n-        progressBarLabel->setVisible(false);\n-\n-        progressBar->setVisible(false);\n         tooltip = tr(\"Processed %1 blocks of transaction history.\").arg(count);\n     }\n \n-    QDateTime lastBlockDate = clientModel->getLastBlockDate();\n-    int secs = lastBlockDate.secsTo(QDateTime::currentDateTime());\n-    QString text;\n-\n     // Represent time from last generated block in human readable text\n+    QString text;\n     if(secs <= 0)\n     {\n         // Fully up to date. Leave text empty.\n     }\n     else if(secs < 60)\n     {\n-        text = tr(\"%n second(s) ago\",\"\",secs);\n+        text = tr(\"%n second(s)\",\"\",secs);\n     }\n     else if(secs < 60*60)\n     {\n-        text = tr(\"%n minute(s) ago\",\"\",secs/60);\n+        text = tr(\"%n minute(s)\",\"\",secs/60);\n     }\n     else if(secs < 24*60*60)\n     {\n-        text = tr(\"%n hour(s) ago\",\"\",secs/(60*60));\n+        text = tr(\"%n hour(s)\",\"\",secs/(60*60));\n     }\n     else\n     {\n-        text = tr(\"%n day(s) ago\",\"\",secs/(60*60*24));\n+        text = tr(\"%1 and %2\")\n+                .arg(tr(\"%n day(s)\",\"\",secs/(60*60*24)))\n+                .arg(tr(\"%n hour(s)\",\"\",(secs%(60*60*24))/(60*60)));\n     }\n \n     // Set icon state: spinning if catching up, tick otherwise\n@@ -582,9 +574,19 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n         labelBlocksIcon->setPixmap(QIcon(\":/icons/synced\").pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n \n         overviewPage->showOutOfSyncWarning(false);\n+\n+        progressBarLabel->setVisible(false);\n+        progressBar->setVisible(false);\n     }\n     else\n     {\n+        progressBarLabel->setText(importText);\n+        progressBarLabel->setVisible(true);\n+        progressBar->setFormat(tr(\"%1 behind\").arg(text));\n+        progressBar->setMaximum(totalSecs);\n+        progressBar->setValue(totalSecs - secs);\n+        progressBar->setVisible(true);\n+\n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;\n         labelBlocksIcon->setMovie(syncIconMovie);\n         syncIconMovie->start();\n@@ -595,7 +597,8 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n     if(!text.isEmpty())\n     {\n         tooltip += QString(\"<br>\");\n-        tooltip += tr(\"Last received block was generated %1.\").arg(text);\n+        tooltip += tr(\"Last received block was generated %1 ago.\").arg(text);\n+        tooltip += tr(\"Transactions after this will not yet be visible.\");\n     }\n \n     // Don't word-wrap this (fixed-width) tooltip"
      },
      {
        "sha": "0c8b2f7e2ca748533910ecec85daf6d9d800558d",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c0bea673cc00969d0a5562a9e5459fad51c30d/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c0bea673cc00969d0a5562a9e5459fad51c30d/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=b8c0bea673cc00969d0a5562a9e5459fad51c30d",
        "patch": "@@ -51,9 +51,16 @@ QDateTime ClientModel::getLastBlockDate() const\n     if (pindexBest)\n         return QDateTime::fromTime_t(pindexBest->GetBlockTime());\n     else\n-        return QDateTime::fromTime_t(1231006505); // Genesis block's time\n+        return getGenesisBlockDate();\n }\n \n+QDateTime ClientModel::getGenesisBlockDate() const\n+{\n+    /// TODO testnet\n+    return QDateTime::fromTime_t(1231006505); // Genesis block's time\n+}\n+\n+\n void ClientModel::updateTimer()\n {\n     // Some quantities (such as number of blocks) change so fast that we don't want to be notified for each change."
      },
      {
        "sha": "4a2f6cb638b7a80e5a783688085d18f4d49ca679",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c0bea673cc00969d0a5562a9e5459fad51c30d/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c0bea673cc00969d0a5562a9e5459fad51c30d/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=b8c0bea673cc00969d0a5562a9e5459fad51c30d",
        "patch": "@@ -35,6 +35,7 @@ class ClientModel : public QObject\n     int getNumBlocksAtStartup();\n \n     QDateTime getLastBlockDate() const;\n+    QDateTime getGenesisBlockDate() const;\n \n     //! Return true if client connected to testnet\n     bool isTestNet() const;"
      }
    ]
  },
  {
    "sha": "e1882ae47afe2e05e627f34af885a910c1303fc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTg4MmFlNDdhZmUyZTA1ZTYyN2YzNGFmODg1YTkxMGMxMzAzZmMy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-02-10T18:46:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-02-10T19:13:05Z"
      },
      "message": "Transactions-based verification progress",
      "tree": {
        "sha": "68f9efe25ed0e4a45f339bdeb510521d1f5b2936",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68f9efe25ed0e4a45f339bdeb510521d1f5b2936"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1882ae47afe2e05e627f34af885a910c1303fc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1882ae47afe2e05e627f34af885a910c1303fc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1882ae47afe2e05e627f34af885a910c1303fc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1882ae47afe2e05e627f34af885a910c1303fc2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8c0bea673cc00969d0a5562a9e5459fad51c30d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c0bea673cc00969d0a5562a9e5459fad51c30d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8c0bea673cc00969d0a5562a9e5459fad51c30d"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 41,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b922fc44ef1bbfa361d1c66d2d9c3d8ab132b586",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1882ae47afe2e05e627f34af885a910c1303fc2/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1882ae47afe2e05e627f34af885a910c1303fc2/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=e1882ae47afe2e05e627f34af885a910c1303fc2",
        "patch": "@@ -34,6 +34,11 @@ namespace Checkpoints\n         (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n         ;\n \n+    static const int64 nTimeLastCheckpoint = 1357902690;\n+    static const int64 nTransactionsLastCheckpoint = 11011160;\n+    static const double fTransactionsPerDay = 50500;\n+    static const double fSigcheckVerificationFactor = 15.0;\n+\n     static MapCheckpoints mapCheckpointsTestnet =\n         boost::assign::map_list_of\n         ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n@@ -51,6 +56,32 @@ namespace Checkpoints\n         return hash == i->second;\n     }\n \n+    double GuessVerificationProgress(CBlockIndex *pindex) {\n+        int64 nNow = time(NULL);\n+\n+        double fWorkBefore = 0.0;\n+        double fWorkAfter = 0.0;\n+\n+        if (pindex->nTime <= nTimeLastCheckpoint) {\n+            double nCheapBefore = pindex->nChainTx;\n+            double nCheapAfter = nTransactionsLastCheckpoint - pindex->nChainTx;\n+            double nExpensiveAfter = (nNow - nTimeLastCheckpoint)/86400.0*fTransactionsPerDay;\n+            fWorkBefore = nCheapBefore;\n+            fWorkAfter = nCheapAfter + nExpensiveAfter*fSigcheckVerificationFactor;\n+            // printf(\"before checkpoint: nCheapBefore=%f nCheapAfter=%f nExpensiveAfter=%f\\n\", nCheapBefore, nCheapAfter, nExpensiveAfter);\n+        } else {\n+            double nCheapBefore = nTransactionsLastCheckpoint;\n+            double nExpensiveBefore = pindex->nChainTx - nTransactionsLastCheckpoint;\n+            double nExpensiveAfter = (nNow - pindex->nTime)/86400.0*fTransactionsPerDay;\n+            fWorkBefore = nCheapBefore + nExpensiveBefore*fSigcheckVerificationFactor;\n+            fWorkAfter = nExpensiveAfter*fSigcheckVerificationFactor;\n+            // printf(\"after checkpoint: nCheapBefore=%f nExpensiveBefore=%f nExpensiveAfter=%f\\n\", nCheapBefore, nExpensiveBefore, nExpensiveAfter);\n+        }\n+\n+        // printf(\"guess: %g%%\\n\", 100.0*fWorkBefore / (fWorkBefore + fWorkAfter));\n+        return (fWorkBefore / (fWorkBefore + fWorkAfter));\n+    }\n+\n     int GetTotalBlocksEstimate()\n     {\n         if (!GetBoolArg(\"-checkpoints\", true))"
      },
      {
        "sha": "dcfb44e10f6c206da19594a91fce7d75d7d9f73e",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1882ae47afe2e05e627f34af885a910c1303fc2/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1882ae47afe2e05e627f34af885a910c1303fc2/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=e1882ae47afe2e05e627f34af885a910c1303fc2",
        "patch": "@@ -22,6 +22,8 @@ namespace Checkpoints\n \n     // Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n     CBlockIndex* GetLastCheckpoint(const std::map<uint256, CBlockIndex*>& mapBlockIndex);\n+\n+    double GuessVerificationProgress(CBlockIndex *pindex);\n }\n \n #endif"
      },
      {
        "sha": "544e95d609a97a8aa09cc100d79a90676a549a40",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1882ae47afe2e05e627f34af885a910c1303fc2/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1882ae47afe2e05e627f34af885a910c1303fc2/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=e1882ae47afe2e05e627f34af885a910c1303fc2",
        "patch": "@@ -583,8 +583,8 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n         progressBarLabel->setText(importText);\n         progressBarLabel->setVisible(true);\n         progressBar->setFormat(tr(\"%1 behind\").arg(text));\n-        progressBar->setMaximum(totalSecs);\n-        progressBar->setValue(totalSecs - secs);\n+        progressBar->setMaximum(1000000000);\n+        progressBar->setValue(clientModel->getVerificationProgress() * 1000000000.0 + 0.5);\n         progressBar->setVisible(true);\n \n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;"
      },
      {
        "sha": "fbe5d12e324bfe86e294366b2c2f129713c9b791",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1882ae47afe2e05e627f34af885a910c1303fc2/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1882ae47afe2e05e627f34af885a910c1303fc2/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=e1882ae47afe2e05e627f34af885a910c1303fc2",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"alert.h\"\n #include \"main.h\"\n+#include \"checkpoints.h\"\n #include \"ui_interface.h\"\n \n #include <QDateTime>\n@@ -60,6 +61,10 @@ QDateTime ClientModel::getGenesisBlockDate() const\n     return QDateTime::fromTime_t(1231006505); // Genesis block's time\n }\n \n+double ClientModel::getVerificationProgress() const\n+{\n+    return Checkpoints::GuessVerificationProgress(pindexBest);\n+}\n \n void ClientModel::updateTimer()\n {"
      },
      {
        "sha": "77c0bf14a6fa67b78af5e28c0f57f3cce280dcbc",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1882ae47afe2e05e627f34af885a910c1303fc2/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1882ae47afe2e05e627f34af885a910c1303fc2/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=e1882ae47afe2e05e627f34af885a910c1303fc2",
        "patch": "@@ -34,6 +34,7 @@ class ClientModel : public QObject\n     int getNumBlocks() const;\n     int getNumBlocksAtStartup();\n \n+    double getVerificationProgress() const;\n     QDateTime getLastBlockDate() const;\n     QDateTime getGenesisBlockDate() const;\n "
      }
    ]
  },
  {
    "sha": "d4d72e490fa1adb1756683184f8ab475c3aadeec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGQ3MmU0OTBmYTFhZGIxNzU2NjgzMTg0ZjhhYjQ3NWMzYWFkZWVj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-02-13T11:37:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieterw@google.com",
        "date": "2013-02-14T21:29:32Z"
      },
      "message": "Refactor testnet checkpoints",
      "tree": {
        "sha": "eca41b3ae581fdbcec17eb38ffab039cc4074621",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eca41b3ae581fdbcec17eb38ffab039cc4074621"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4d72e490fa1adb1756683184f8ab475c3aadeec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4d72e490fa1adb1756683184f8ab475c3aadeec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4d72e490fa1adb1756683184f8ab475c3aadeec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4d72e490fa1adb1756683184f8ab475c3aadeec/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "e1882ae47afe2e05e627f34af885a910c1303fc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1882ae47afe2e05e627f34af885a910c1303fc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1882ae47afe2e05e627f34af885a910c1303fc2"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 52,
      "deletions": 24
    },
    "files": [
      {
        "sha": "1743b4ce9fb4f019888f36fa96ef28d0409c8a05",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 24,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4d72e490fa1adb1756683184f8ab475c3aadeec/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4d72e490fa1adb1756683184f8ab475c3aadeec/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=d4d72e490fa1adb1756683184f8ab475c3aadeec",
        "patch": "@@ -14,13 +14,25 @@ namespace Checkpoints\n {\n     typedef std::map<int, uint256> MapCheckpoints;\n \n-    //\n+    // How many time we expect transactions after the last checkpoint to\n+    // be slower. This number is conservative. On multi-core CPUs with\n+    // parallel signature checking enabled, this number is way too high.\n+    // We prefer a progressbar that's faster at the end than the other\n+    // way around, though.\n+    static const double fSigcheckVerificationFactor = 15.0;\n+\n+    struct CCheckpointData {\n+        const MapCheckpoints *mapCheckpoints;\n+        int64 nTimeLastCheckpoint;\n+        int64 nTransactionsLastCheckpoint;\n+        double fTransactionsPerDay;\n+    };\n+\n     // What makes a good checkpoint block?\n     // + Is surrounded by blocks with reasonable timestamps\n     //   (no blocks before with a timestamp after, none after with\n     //    timestamp before)\n     // + Contains no strange transactions\n-    //\n     static MapCheckpoints mapCheckpoints =\n         boost::assign::map_list_of\n         ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n@@ -33,61 +45,77 @@ namespace Checkpoints\n         (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n         (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n         ;\n-\n-    static const int64 nTimeLastCheckpoint = 1357902690;\n-    static const int64 nTransactionsLastCheckpoint = 11011160;\n-    static const double fTransactionsPerDay = 50500;\n-    static const double fSigcheckVerificationFactor = 15.0;\n-\n-    static MapCheckpoints mapCheckpointsTestnet =\n+    static const CCheckpointData data = {\n+        &mapCheckpoints,\n+        1357902690, // UNIX timestamp of last checkpoint\n+        11011160, // total number of transactions between genesis and last checkpoint\n+        50500.0 // estimated number of transactions per day after checkpoint\n+    };\n+\n+    static MapCheckpoints mapCheckpointsTestnet = \n         boost::assign::map_list_of\n         ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n         ;\n+    static const CCheckpointData dataTestnet = {\n+        &mapCheckpointsTestnet,\n+        1338180505,\n+        16341,\n+        300\n+    };\n+\n+    const CCheckpointData &Checkpoints() {\n+        if (fTestNet)\n+            return dataTestnet;\n+        else\n+            return data;\n+    }\n \n     bool CheckBlock(int nHeight, const uint256& hash)\n     {\n         if (!GetBoolArg(\"-checkpoints\", true))\n             return true;\n \n-        MapCheckpoints& checkpoints = (fTestNet ? mapCheckpointsTestnet : mapCheckpoints);\n+        const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n \n         MapCheckpoints::const_iterator i = checkpoints.find(nHeight);\n         if (i == checkpoints.end()) return true;\n         return hash == i->second;\n     }\n \n+    // Guess how far we are in the verification process at the given block index\n     double GuessVerificationProgress(CBlockIndex *pindex) {\n         int64 nNow = time(NULL);\n \n-        double fWorkBefore = 0.0;\n-        double fWorkAfter = 0.0;\n+        double fWorkBefore = 0.0; // Amount of work done before pindex\n+        double fWorkAfter = 0.0;  // Amount of work left after pindex (estimated)\n+        // Work is defined as: 1.0 per transaction before the last checkoint, and\n+        // fSigcheckVerificationFactor per transaction after.\n+\n+        const CCheckpointData &data = Checkpoints();\n \n-        if (pindex->nTime <= nTimeLastCheckpoint) {\n+        if (pindex->nChainTx <= data.nTransactionsLastCheckpoint) {\n             double nCheapBefore = pindex->nChainTx;\n-            double nCheapAfter = nTransactionsLastCheckpoint - pindex->nChainTx;\n-            double nExpensiveAfter = (nNow - nTimeLastCheckpoint)/86400.0*fTransactionsPerDay;\n+            double nCheapAfter = data.nTransactionsLastCheckpoint - pindex->nChainTx;\n+            double nExpensiveAfter = (nNow - data.nTimeLastCheckpoint)/86400.0*data.fTransactionsPerDay;\n             fWorkBefore = nCheapBefore;\n             fWorkAfter = nCheapAfter + nExpensiveAfter*fSigcheckVerificationFactor;\n-            // printf(\"before checkpoint: nCheapBefore=%f nCheapAfter=%f nExpensiveAfter=%f\\n\", nCheapBefore, nCheapAfter, nExpensiveAfter);\n         } else {\n-            double nCheapBefore = nTransactionsLastCheckpoint;\n-            double nExpensiveBefore = pindex->nChainTx - nTransactionsLastCheckpoint;\n-            double nExpensiveAfter = (nNow - pindex->nTime)/86400.0*fTransactionsPerDay;\n+            double nCheapBefore = data.nTransactionsLastCheckpoint;\n+            double nExpensiveBefore = pindex->nChainTx - data.nTransactionsLastCheckpoint;\n+            double nExpensiveAfter = (nNow - pindex->nTime)/86400.0*data.fTransactionsPerDay;\n             fWorkBefore = nCheapBefore + nExpensiveBefore*fSigcheckVerificationFactor;\n             fWorkAfter = nExpensiveAfter*fSigcheckVerificationFactor;\n-            // printf(\"after checkpoint: nCheapBefore=%f nExpensiveBefore=%f nExpensiveAfter=%f\\n\", nCheapBefore, nExpensiveBefore, nExpensiveAfter);\n         }\n \n-        // printf(\"guess: %g%%\\n\", 100.0*fWorkBefore / (fWorkBefore + fWorkAfter));\n-        return (fWorkBefore / (fWorkBefore + fWorkAfter));\n+        return fWorkBefore / (fWorkBefore + fWorkAfter);\n     }\n \n     int GetTotalBlocksEstimate()\n     {\n         if (!GetBoolArg(\"-checkpoints\", true))\n             return 0;\n \n-        MapCheckpoints& checkpoints = (fTestNet ? mapCheckpointsTestnet : mapCheckpoints);\n+        const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n \n         return checkpoints.rbegin()->first;\n     }\n@@ -97,7 +125,7 @@ namespace Checkpoints\n         if (!GetBoolArg(\"-checkpoints\", true))\n             return NULL;\n \n-        MapCheckpoints& checkpoints = (fTestNet ? mapCheckpointsTestnet : mapCheckpoints);\n+        const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n \n         BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n         {"
      }
    ]
  }
]