[
  {
    "sha": "a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWMzOGEzYTk1NWE3ZDZjZGFjYjhkY2Y2YzQxODE2MTNmZmM4M2Jh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-05T21:03:46Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-05T21:03:46Z"
      },
      "message": "Use range-based for loops (C++11) when looping over vector elements",
      "tree": {
        "sha": "21111b3708adb2da07268ad653a97a91e2c2aa32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21111b3708adb2da07268ad653a97a91e2c2aa32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35da2aeed7d4000dde93957c3b6e048ab83c4f2b"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 29,
      "deletions": 31
    },
    "files": [
      {
        "sha": "e4965ba44477387419c17ed0941ee29092b08777",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba",
        "patch": "@@ -753,8 +753,8 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n         const CTransaction& tx = *ptx;\n \n         // Which orphan pool entries must we evict?\n-        for (size_t j = 0; j < tx.vin.size(); j++) {\n-            auto itByPrev = mapOrphanTransactionsByPrev.find(tx.vin[j].prevout);\n+        for (auto txIn : tx.vin) {\n+            auto itByPrev = mapOrphanTransactionsByPrev.find(txIn.prevout);\n             if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n@@ -1554,10 +1554,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         std::vector<CInv> vToFetch;\n \n-        for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n+        for (CInv &inv : vInv)\n         {\n-            CInv &inv = vInv[nInv];\n-\n             if (interruptMsgProc)\n                 return true;\n "
      },
      {
        "sha": "18dcbfff5fe73756c0e6c618103fae8489a302d2",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba",
        "patch": "@@ -508,8 +508,8 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n \n     unsigned int countedTxs = 0;\n     // Repopulate the current block states\n-    for (unsigned int i = 0; i < entries.size(); i++) {\n-        if (processBlockTx(nBlockHeight, entries[i]))\n+    for (auto entry : entries) {\n+        if (processBlockTx(nBlockHeight, entry))\n             countedTxs++;\n     }\n "
      },
      {
        "sha": "6a0aecb235a0bca15af86721348b51551a8f03d9",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba",
        "patch": "@@ -1142,24 +1142,24 @@ class CTransactionSignatureSerializer {\n \n uint256 GetPrevoutHash(const CTransaction& txTo) {\n     CHashWriter ss(SER_GETHASH, 0);\n-    for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n-        ss << txTo.vin[n].prevout;\n+    for (auto txIn : txTo.vin) {\n+        ss << txIn.prevout;\n     }\n     return ss.GetHash();\n }\n \n uint256 GetSequenceHash(const CTransaction& txTo) {\n     CHashWriter ss(SER_GETHASH, 0);\n-    for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n-        ss << txTo.vin[n].nSequence;\n+    for (auto txIn : txTo.vin) {\n+        ss << txIn.nSequence;\n     }\n     return ss.GetHash();\n }\n \n uint256 GetOutputsHash(const CTransaction& txTo) {\n     CHashWriter ss(SER_GETHASH, 0);\n-    for (unsigned int n = 0; n < txTo.vout.size(); n++) {\n-        ss << txTo.vout[n];\n+    for (auto txOut : txTo.vout) {\n+        ss << txOut;\n     }\n     return ss.GetHash();\n }"
      },
      {
        "sha": "1731a7562d324613dc3c4fa558be32f2a8879c11",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba",
        "patch": "@@ -425,11 +425,11 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n         return 0;\n \n     unsigned int nSigOps = 0;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    for (auto txIn : tx.vin)\n     {\n-        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        const CTxOut &prevout = inputs.GetOutputFor(txIn);\n         if (prevout.scriptPubKey.IsPayToScriptHash())\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+            nSigOps += prevout.scriptPubKey.GetSigOpCount(txIn.scriptSig);\n     }\n     return nSigOps;\n }\n@@ -445,10 +445,10 @@ int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& i\n         nSigOps += GetP2SHSigOpCount(tx, inputs) * WITNESS_SCALE_FACTOR;\n     }\n \n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    for (auto txIn : tx.vin)\n     {\n-        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n-        nSigOps += CountWitnessSigOps(tx.vin[i].scriptSig, prevout.scriptPubKey, &tx.vin[i].scriptWitness, flags);\n+        const CTxOut &prevout = inputs.GetOutputFor(txIn);\n+        nSigOps += CountWitnessSigOps(txIn.scriptSig, prevout.scriptPubKey, &txIn.scriptWitness, flags);\n     }\n     return nSigOps;\n }\n@@ -1319,9 +1319,9 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n \n         CAmount nValueIn = 0;\n         CAmount nFees = 0;\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        for (auto txIn : tx.vin)\n         {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n+            const COutPoint &prevout = txIn.prevout;\n             const CCoins *coins = inputs.AccessCoins(prevout.hash);\n             assert(coins);\n \n@@ -3058,8 +3058,8 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n \n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam\n     if (!fHaveWitness) {\n-        for (size_t i = 0; i < block.vtx.size(); i++) {\n-            if (block.vtx[i]->HasWitness()) {\n+      for (auto transactionRef : block.vtx) {\n+            if (transactionRef->HasWitness()) {\n                 return state.DoS(100, false, REJECT_INVALID, \"unexpected-witness\", true, strprintf(\"%s : unexpected witness data found\", __func__));\n             }\n         }"
      },
      {
        "sha": "190852229cee3ccb1f86fdf76d966d07186573ea",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a1c38a3a955a7d6cdacb8dcf6c4181613ffc83ba",
        "patch": "@@ -1781,8 +1781,8 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n {\n         CMutableTransaction tx1 = *this->tx;\n         CMutableTransaction tx2 = *_tx.tx;\n-        for (unsigned int i = 0; i < tx1.vin.size(); i++) tx1.vin[i].scriptSig = CScript();\n-        for (unsigned int i = 0; i < tx2.vin.size(); i++) tx2.vin[i].scriptSig = CScript();\n+        for (auto txIn : tx1.vin) txIn.scriptSig = CScript();\n+        for (auto txIn : tx2.vin) txIn.scriptSig = CScript();\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n@@ -2149,10 +2149,10 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n     if (nTotalLower == nTargetValue)\n     {\n-        for (unsigned int i = 0; i < vValue.size(); ++i)\n+        for (auto inputCoin : vValue) {\n         {\n-            setCoinsRet.insert(vValue[i]);\n-            nValueRet += vValue[i].txout.nValue;\n+            setCoinsRet.insert(inputCoin);\n+            nValueRet += inputCoin.txout.nValue;\n         }\n         return true;\n     }\n@@ -3222,11 +3222,11 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n         }\n \n         // group lone addrs by themselves\n-        for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++)\n-            if (IsMine(pcoin->tx->vout[i]))\n+        for (auto txOut : pcoin->tx->vout) {\n+            if (IsMine(txOut))\n             {\n                 CTxDestination address;\n-                if(!ExtractDestination(pcoin->tx->vout[i].scriptPubKey, address))\n+                if(!ExtractDestination(txOut.scriptPubKey, address))\n                     continue;\n                 grouping.insert(address);\n                 groupings.insert(grouping);"
      }
    ]
  }
]