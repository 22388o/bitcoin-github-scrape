[
  {
    "sha": "cc6c539ecb93ea71126fc2db1b04e024b38e81fb",
    "node_id": "C_kwDOABII59oAKGNjNmM1MzllY2I5M2VhNzExMjZmYzJkYjFiMDRlMDI0YjM4ZTgxZmI",
    "commit": {
      "author": {
        "name": "katesalazar",
        "email": "mercedes.catherine.salazar@gmail.com",
        "date": "2021-10-06T18:33:05Z"
      },
      "committer": {
        "name": "katesalazar",
        "email": "mercedes.catherine.salazar@gmail.com",
        "date": "2021-10-07T20:13:05Z"
      },
      "message": "Reject float at satoshi_round\n\nUsing strings and integers will be more predictable than using float,\nwhich is less repeatable.",
      "tree": {
        "sha": "abd522aabfa2e302cb75fa3405646fc7b298ca58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abd522aabfa2e302cb75fa3405646fc7b298ca58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc6c539ecb93ea71126fc2db1b04e024b38e81fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc6c539ecb93ea71126fc2db1b04e024b38e81fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc6c539ecb93ea71126fc2db1b04e024b38e81fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc6c539ecb93ea71126fc2db1b04e024b38e81fb/comments",
    "author": {
      "login": "katesalazar",
      "id": 52637275,
      "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/katesalazar",
      "html_url": "https://github.com/katesalazar",
      "followers_url": "https://api.github.com/users/katesalazar/followers",
      "following_url": "https://api.github.com/users/katesalazar/following{/other_user}",
      "gists_url": "https://api.github.com/users/katesalazar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/katesalazar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
      "organizations_url": "https://api.github.com/users/katesalazar/orgs",
      "repos_url": "https://api.github.com/users/katesalazar/repos",
      "events_url": "https://api.github.com/users/katesalazar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/katesalazar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "katesalazar",
      "id": 52637275,
      "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/katesalazar",
      "html_url": "https://github.com/katesalazar",
      "followers_url": "https://api.github.com/users/katesalazar/followers",
      "following_url": "https://api.github.com/users/katesalazar/following{/other_user}",
      "gists_url": "https://api.github.com/users/katesalazar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/katesalazar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
      "organizations_url": "https://api.github.com/users/katesalazar/orgs",
      "repos_url": "https://api.github.com/users/katesalazar/repos",
      "events_url": "https://api.github.com/users/katesalazar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/katesalazar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "577b0ffd2ea408e08e9fdecffc3b64933a8fc467",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/577b0ffd2ea408e08e9fdecffc3b64933a8fc467",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/577b0ffd2ea408e08e9fdecffc3b64933a8fc467"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f35180852da2a0b1548556bdadde7d04e45ebe04",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc6c539ecb93ea71126fc2db1b04e024b38e81fb/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc6c539ecb93ea71126fc2db1b04e024b38e81fb/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=cc6c539ecb93ea71126fc2db1b04e024b38e81fb",
        "patch": "@@ -219,6 +219,14 @@ def str_to_b64str(string):\n \n \n def satoshi_round(amount):\n+    \"\"\" Doesn't accept floating point rational numbers. \"\"\"\n+    if type(amount) == type(0.1):\n+        # For best predictabilty do not convert floating point rational\n+        # numbers into fixed point rational numbers.\n+        raise TypeError(\n+            'contract transgression receiving {} of type {}'\n+            ', try passing an integer or a string'.format(\n+                amount, type(amount)))\n     return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n "
      }
    ]
  },
  {
    "sha": "200a7afa0cdf9827434dfd548056268d41bf0035",
    "node_id": "C_kwDOABII59oAKDIwMGE3YWZhMGNkZjk4Mjc0MzRkZmQ1NDgwNTYyNjhkNDFiZjAwMzU",
    "commit": {
      "author": {
        "name": "katesalazar",
        "email": "mercedes.catherine.salazar@gmail.com",
        "date": "2021-10-06T19:26:25Z"
      },
      "committer": {
        "name": "katesalazar",
        "email": "mercedes.catherine.salazar@gmail.com",
        "date": "2021-10-07T20:22:52Z"
      },
      "message": "Adapt tests to util changes",
      "tree": {
        "sha": "4d5ff4ed2f6a397120ecec665002914c58fb25ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d5ff4ed2f6a397120ecec665002914c58fb25ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/200a7afa0cdf9827434dfd548056268d41bf0035",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/200a7afa0cdf9827434dfd548056268d41bf0035",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/200a7afa0cdf9827434dfd548056268d41bf0035",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/200a7afa0cdf9827434dfd548056268d41bf0035/comments",
    "author": {
      "login": "katesalazar",
      "id": 52637275,
      "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/katesalazar",
      "html_url": "https://github.com/katesalazar",
      "followers_url": "https://api.github.com/users/katesalazar/followers",
      "following_url": "https://api.github.com/users/katesalazar/following{/other_user}",
      "gists_url": "https://api.github.com/users/katesalazar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/katesalazar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
      "organizations_url": "https://api.github.com/users/katesalazar/orgs",
      "repos_url": "https://api.github.com/users/katesalazar/repos",
      "events_url": "https://api.github.com/users/katesalazar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/katesalazar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "katesalazar",
      "id": 52637275,
      "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/katesalazar",
      "html_url": "https://github.com/katesalazar",
      "followers_url": "https://api.github.com/users/katesalazar/followers",
      "following_url": "https://api.github.com/users/katesalazar/following{/other_user}",
      "gists_url": "https://api.github.com/users/katesalazar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/katesalazar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
      "organizations_url": "https://api.github.com/users/katesalazar/orgs",
      "repos_url": "https://api.github.com/users/katesalazar/repos",
      "events_url": "https://api.github.com/users/katesalazar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/katesalazar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc6c539ecb93ea71126fc2db1b04e024b38e81fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc6c539ecb93ea71126fc2db1b04e024b38e81fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc6c539ecb93ea71126fc2db1b04e024b38e81fb"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6fceed8b59c74feb3c2198127b16c123eaf41d06",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/200a7afa0cdf9827434dfd548056268d41bf0035/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/200a7afa0cdf9827434dfd548056268d41bf0035/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=200a7afa0cdf9827434dfd548056268d41bf0035",
        "patch": "@@ -57,7 +57,7 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n     # It's best to exponentially distribute our random fees\n     # because the buckets are exponentially spaced.\n     # Exponentially distributed from 1-128 * fee_increment\n-    rand_fee = float(fee_increment) * (1.1892 ** random.randint(0, 28))\n+    rand_fee = fee_increment * Decimal(1.1892 ** random.randint(0, 28))\n     # Total fee ranges from min_fee to min_fee + 127*fee_increment\n     fee = min_fee - fee_increment + satoshi_round(rand_fee)\n     tx = CTransaction()"
      },
      {
        "sha": "2273cf46ff0c55f8456f8980f01b0c4c60d82061",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/200a7afa0cdf9827434dfd548056268d41bf0035/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/200a7afa0cdf9827434dfd548056268d41bf0035/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=200a7afa0cdf9827434dfd548056268d41bf0035",
        "patch": "@@ -209,10 +209,10 @@ def run_test(self):\n             entry = self.nodes[0].getmempoolentry(x)\n             descendant_fees += entry['fee']\n             if (x == chain[-1]):\n-                assert_equal(entry['modifiedfee'], entry['fee']+satoshi_round(0.00002))\n-                assert_equal(entry['fees']['modified'], entry['fee']+satoshi_round(0.00002))\n+                assert_equal(entry['modifiedfee'], entry['fee']+satoshi_round('0.00002'))\n+                assert_equal(entry['fees']['modified'], entry['fee']+satoshi_round('0.00002'))\n             assert_equal(entry['descendantfees'], descendant_fees * COIN + 2000)\n-            assert_equal(entry['fees']['descendant'], descendant_fees+satoshi_round(0.00002))\n+            assert_equal(entry['fees']['descendant'], descendant_fees+satoshi_round('0.00002'))\n \n         # Check that node1's mempool is as expected (-> custom ancestor limit)\n         mempool0 = self.nodes[0].getrawmempool(False)"
      }
    ]
  },
  {
    "sha": "085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
    "node_id": "C_kwDOABII59oAKDA4NWVhOWQ4NmU4NmFkMzdkZDgxYTFmODAzMmUyZDU5NGEwZDQzMTI",
    "commit": {
      "author": {
        "name": "katesalazar",
        "email": "52637275+katesalazar@users.noreply.github.com",
        "date": "2021-10-07T20:30:54Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-10-07T20:30:54Z"
      },
      "message": "Merge branch 'master' into 20211006",
      "tree": {
        "sha": "1248a69996abbfa89a319a347d3a2b106133ea7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1248a69996abbfa89a319a347d3a2b106133ea7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhX1j+CRBK7hj4Ov3rIwAAF4UIAA9I2iiR8TY1V0aN7p/IaBc2\nMunOpJux9CIB52YGjHTX5Yg6ReJ40bzbVAOJQ/uRv/NiIR504kiSgF5RZG5PP24c\nOZOG6fLP2C/ZkDpalgzRJQDs1n6j1tRf1KVp3I+HVnuI9eOLU1/eTXW804putSFB\nXW967yn9TRZnjfO/sWw0NTAsoTRnbWf+EZ+otLwL2VFSvJT0GzttbxsCwesDVuEw\nMUdAVg1B22gtsr5LVFQfgx+jWbMNcfFcuowEnVIW4D+2aktiZStH3ovaiwbzwoMu\nub/JQxhD11JN126quNuNmZsYNQuHvbVXU1RFs6R6yqpFFCfwqSHijIoJi1/SuqQ=\n=27XR\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 1248a69996abbfa89a319a347d3a2b106133ea7e\nparent 200a7afa0cdf9827434dfd548056268d41bf0035\nparent 991753e4d50ea5c973f4d3330e5afba797b1b1e7\nauthor katesalazar <52637275+katesalazar@users.noreply.github.com> 1633638654 +0200\ncommitter GitHub <noreply@github.com> 1633638654 +0200\n\nMerge branch 'master' into 20211006"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/comments",
    "author": {
      "login": "katesalazar",
      "id": 52637275,
      "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/katesalazar",
      "html_url": "https://github.com/katesalazar",
      "followers_url": "https://api.github.com/users/katesalazar/followers",
      "following_url": "https://api.github.com/users/katesalazar/following{/other_user}",
      "gists_url": "https://api.github.com/users/katesalazar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/katesalazar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
      "organizations_url": "https://api.github.com/users/katesalazar/orgs",
      "repos_url": "https://api.github.com/users/katesalazar/repos",
      "events_url": "https://api.github.com/users/katesalazar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/katesalazar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "200a7afa0cdf9827434dfd548056268d41bf0035",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/200a7afa0cdf9827434dfd548056268d41bf0035",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/200a7afa0cdf9827434dfd548056268d41bf0035"
      },
      {
        "sha": "991753e4d50ea5c973f4d3330e5afba797b1b1e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/991753e4d50ea5c973f4d3330e5afba797b1b1e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/991753e4d50ea5c973f4d3330e5afba797b1b1e7"
      }
    ],
    "stats": {
      "total": 466,
      "additions": 284,
      "deletions": 182
    },
    "files": [
      {
        "sha": "5491f2c04bbae86721aef32b9a672a3a52113c24",
        "filename": ".cirrus.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.cirrus.yml?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -90,7 +90,7 @@ task:\n     QT_DOWNLOAD_URL: 'https://download.qt.io/official_releases/qt/5.12/5.12.11/single/qt-everywhere-src-5.12.11.zip'\n     QT_LOCAL_PATH: 'C:\\qt-everywhere-src-5.12.11.zip'\n     QT_SOURCE_DIR: 'C:\\qt-everywhere-src-5.12.11'\n-    QTBASEDIR: 'C:\\Qt5.12.11_x64_static_vs2019_160900'\n+    QTBASEDIR: 'C:\\Qt_static'\n     x64_NATIVE_TOOLS: '\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat\"'\n     IgnoreWarnIntDirInTempDetected: 'true'\n   merge_script:"
      },
      {
        "sha": "36fb942c8e30eb395c479cd7891fc686e28ea6dd",
        "filename": "build_msvc/README.md",
        "status": "modified",
        "additions": 32,
        "deletions": 34,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -3,67 +3,65 @@ Building Bitcoin Core with Visual Studio\n \n Introduction\n ---------------------\n-Solution and project files to build the Bitcoin Core applications `msbuild` or Visual Studio can be found in the `build_msvc` directory. The build has been tested with Visual Studio 2019 (building with earlier versions of Visual Studio should not be expected to work).\n+Solution and project files to build Bitcoin Core with `msbuild` or Visual Studio can be found in the `build_msvc` directory. The build has been tested with Visual Studio 2019 (building with earlier versions of Visual Studio should not be expected to work).\n \n-Building with Visual Studio is an alternative to the Linux based [cross-compiler build](https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md).\n+To build Bitcoin Core from the command-line, it is sufficient to only install the Visual Studio Build Tools component.\n \n-Quick Start\n----------------------\n-The minimal steps required to build Bitcoin Core with the msbuild toolchain are below. More detailed instructions are contained in the following sections.\n+Building with Visual Studio is an alternative to the Linux based [cross-compiler build](../doc/build-windows.md).\n \n-```\n-cd build_msvc\n-py -3 msvc-autogen.py\n-msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n-```\n \n-Dependencies\n+Prerequisites\n ---------------------\n-A number of [open source libraries](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) are required in order to be able to build Bitcoin Core.\n+To build [dependencies](../doc/dependencies.md) (except for [Qt](#qt)),\n+the default approach is to use the [vcpkg](https://docs.microsoft.com/en-us/cpp/vcpkg) package manager from Microsoft:\n \n-Options for installing the dependencies in a Visual Studio compatible manner are:\n+1. [Install](https://vcpkg.io/en/getting-started.html) vcpkg.\n \n-- Use Microsoft's [vcpkg](https://docs.microsoft.com/en-us/cpp/vcpkg) to download the source packages and build locally. This is the recommended approach.\n-- Download the source code, build each dependency, add the required include paths, link libraries and binary tools to the Visual Studio project files.\n-- Use [nuget](https://www.nuget.org/) packages with the understanding that any binary files have been compiled by an untrusted third party.\n+2. By default, vcpkg makes both `release` and `debug` builds for each package.\n+To save build time and disk space, one could skip `debug` builds (example uses PowerShell):\n+```powershell\n \n-The [external dependencies](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) required for building are listed in the `build_msvc/vcpkg.json` file. To ensure `msbuild` project files automatically install the `vcpkg` dependencies use:\n-\n-```\n-vcpkg integrate install\n+Add-Content -Path \"vcpkg\\triplets\\x64-windows-static.cmake\" -Value \"set(VCPKG_BUILD_TYPE release)\"\n ```\n \n Qt\n ---------------------\n-In order to build Bitcoin Core a static build of Qt is required. The runtime library version (e.g. v142) and platform type (x86 or x64) must also match.\n+To build Bitcoin Core with the GUI, a static build of Qt is required.\n+\n+1. Download a single ZIP archive of Qt source code from https://download.qt.io/official_releases/qt/ (e.g., [`qt-everywhere-src-5.12.11.zip`](https://download.qt.io/official_releases/qt/5.12/5.12.11/single/qt-everywhere-src-5.12.11.zip)), and expand it into a dedicated folder. The following instructions assume that this folder is `C:\\dev\\qt-source`.\n+\n+2. Open \"x64 Native Tools Command Prompt for VS 2019\", and input the following commands:\n+```cmd\n+cd C:\\dev\\qt-source\n+mkdir build\n+cd build\n+..\\configure -release -silent -opensource -confirm-license -opengl desktop -no-shared -static -static-runtime -mp -qt-zlib -qt-pcre -qt-libpng -no-libjpeg -nomake examples -nomake tests -nomake tools -no-dbus -no-libudev -no-icu -no-gtk -no-opengles3 -no-angle -no-sql-sqlite -no-sql-odbc -no-sqlite -no-libudev -no-vulkan -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcanvas3d -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdeclarative -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtmacextras -skip qtmultimedia -skip qtnetworkauth -skip qtpurchasing -skip qtquickcontrols -skip qtquickcontrols2 -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtvirtualkeyboard -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip qtx11extras -skip qtxmlpatterns -no-openssl -no-feature-sql -no-feature-sqlmodel -prefix C:\\Qt_static\n+nmake\n+nmake install\n+```\n \n-Some prebuilt x64 versions of Qt can be downloaded from [here](https://github.com/sipsorcery/qt_win_binary/releases). Please be aware these downloads are NOT officially sanctioned by Bitcoin Core and are provided for developer convenience only. They should NOT be used for builds that will be used in a production environment or with real funds.\n+One could speed up building with [`jom`](https://wiki.qt.io/Jom), a replacement for `nmake` which makes use of all CPU cores.\n \n-To determine which Qt prebuilt version to download open the `.cirrus.yml` file and note the `QT_DOWNLOAD_URL`. When extracting the zip file the destination path must be set to `C:\\`. This is due to the way that Qt includes, libraries and tools use internal paths.\n+To build Bitcoin Core without Qt, unload or disable the `bitcoin-qt`, `libbitcoin_qt` and `test_bitcoin-qt` projects.\n \n-To build Bitcoin Core without Qt unload or disable the `bitcoin-qt`, `libbitcoin_qt` and `test_bitcoin-qt` projects.\n \n Building\n ---------------------\n-The instructions below use `vcpkg` to install the dependencies.\n-\n-- Install [`vcpkg`](https://github.com/Microsoft/vcpkg).\n-\n-- Use Python to generate `*.vcxproj` from Makefile\n+1. Use Python to generate `*.vcxproj` from Makefile:\n \n ```\n PS >py -3 msvc-autogen.py\n ```\n \n-- An optional step is to adjust the settings in the `build_msvc` directory and the `common.init.vcxproj` file. This project file contains settings that are common to all projects such as the runtime library version and target Windows SDK version. The Qt directories can also be set.\n+2. An optional step is to adjust the settings in the `build_msvc` directory and the `common.init.vcxproj` file. This project file contains settings that are common to all projects such as the runtime library version and target Windows SDK version. The Qt directories can also be set. To specify a non-default path to a static Qt package directory, use the `QTBASEDIR` environment variable.\n \n-- To build from the command line with the Visual Studio 2019 toolchain use:\n+3. To build from the command-line with the Visual Studio 2019 toolchain use:\n \n-```\n-msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n+```cmd\n+msbuild -property:Configuration=Release -maxCpuCount -verbosity:minimal bitcoin.sln\n ```\n \n-- Alternatively, open the `build_msvc/bitcoin.sln` file in Visual Studio 2019.\n+Alternatively, open the `build_msvc/bitcoin.sln` file in Visual Studio 2019.\n \n Security\n ---------------------"
      },
      {
        "sha": "cc8063e545b870475534ba310e0a91c433b45f5c",
        "filename": "build_msvc/common.qt.init.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/build_msvc/common.qt.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/build_msvc/common.qt.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.qt.init.vcxproj?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -2,7 +2,7 @@\n <Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n \n   <PropertyGroup Label=\"QtGlobals\">\n-    <QtBaseDir>C:\\Qt5.12.11_x64_static_vs2019_160900</QtBaseDir>\n+    <QtBaseDir Condition=\"'$(QTBASEDIR)' == ''\">C:\\Qt_static</QtBaseDir>\n     <QtPluginsLibraryDir>$(QtBaseDir)\\plugins</QtPluginsLibraryDir>\n     <QtLibraryDir>$(QtBaseDir)\\lib</QtLibraryDir>\n     <QtIncludeDir>$(QtBaseDir)\\include</QtIncludeDir>"
      },
      {
        "sha": "9f5607145198945f9dc76b870018ed4da41781e6",
        "filename": "doc/release-notes-22539.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/doc/release-notes-22539.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/doc/release-notes-22539.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-22539.md?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -0,0 +1,8 @@\n+Notable changes\n+===============\n+\n+P2P and network changes\n+-----------------------\n+\n+- Fee estimation now takes the feerate of replacement (RBF) transactions into\n+  account."
      },
      {
        "sha": "7e76ecbf3a1c02692c4373a4ff263ad8bccb1a27",
        "filename": "src/util/syscall_sandbox.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 7,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/src/util/syscall_sandbox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/src/util/syscall_sandbox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/syscall_sandbox.cpp?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -58,6 +58,10 @@ bool g_syscall_sandbox_log_violation_before_terminating{false};\n #define __NR_membarrier 324\n #endif\n \n+#ifndef __NR_copy_file_range\n+#define __NR_copy_file_range 326\n+#endif\n+\n // This list of syscalls in LINUX_SYSCALLS is only used to map syscall numbers to syscall names in\n // order to be able to print user friendly error messages which include the syscall name in addition\n // to the syscall number.\n@@ -268,15 +272,23 @@ const std::map<uint32_t, std::string> LINUX_SYSCALLS{\n     {__NR_pipe, \"pipe\"},\n     {__NR_pipe2, \"pipe2\"},\n     {__NR_pivot_root, \"pivot_root\"},\n+#ifdef __NR_pkey_alloc\n     {__NR_pkey_alloc, \"pkey_alloc\"},\n+#endif\n+#ifdef __NR_pkey_free\n     {__NR_pkey_free, \"pkey_free\"},\n+#endif\n+#ifdef __NR_pkey_mprotect\n     {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+#endif\n     {__NR_poll, \"poll\"},\n     {__NR_ppoll, \"ppoll\"},\n     {__NR_prctl, \"prctl\"},\n     {__NR_pread64, \"pread64\"},\n     {__NR_preadv, \"preadv\"},\n+#ifdef __NR_preadv2\n     {__NR_preadv2, \"preadv2\"},\n+#endif\n     {__NR_prlimit64, \"prlimit64\"},\n     {__NR_process_vm_readv, \"process_vm_readv\"},\n     {__NR_process_vm_writev, \"process_vm_writev\"},\n@@ -285,7 +297,9 @@ const std::map<uint32_t, std::string> LINUX_SYSCALLS{\n     {__NR_putpmsg, \"putpmsg\"},\n     {__NR_pwrite64, \"pwrite64\"},\n     {__NR_pwritev, \"pwritev\"},\n+#ifdef __NR_pwritev2\n     {__NR_pwritev2, \"pwritev2\"},\n+#endif\n     {__NR_query_module, \"query_module\"},\n     {__NR_quotactl, \"quotactl\"},\n     {__NR_read, \"read\"},\n@@ -523,14 +537,15 @@ class SeccompPolicyBuilder\n \n     void AllowAddressSpaceAccess()\n     {\n-        allowed_syscalls.insert(__NR_brk);     // change data segment size\n-        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+        allowed_syscalls.insert(__NR_brk);        // change data segment size\n+        allowed_syscalls.insert(__NR_madvise);    // give advice about use of memory\n         allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n-        allowed_syscalls.insert(__NR_mlock);    // lock memory\n-        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n-        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n-        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n-        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+        allowed_syscalls.insert(__NR_mlock);      // lock memory\n+        allowed_syscalls.insert(__NR_mmap);       // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect);   // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_mremap);     // remap a file in memory\n+        allowed_syscalls.insert(__NR_munlock);    // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);     // unmap files or devices into memory\n     }\n \n     void AllowEpoll()"
      },
      {
        "sha": "14dcd2c24be946f05c84de1ec0f45aec696321c9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -474,7 +474,6 @@ class MemPoolAccept\n         std::unique_ptr<CTxMemPoolEntry> m_entry;\n         std::list<CTransactionRef> m_replaced_transactions;\n \n-        bool m_replacement_transaction;\n         CAmount m_base_fees;\n         CAmount m_modified_fees;\n         /** Total modified fees of all transactions being replaced. */\n@@ -556,7 +555,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n     CTxMemPool::setEntries& setAncestors = ws.m_ancestors;\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n-    bool& fReplacementTransaction = ws.m_replacement_transaction;\n     CAmount& nModifiedFees = ws.m_modified_fees;\n     CAmount& nConflictingFees = ws.m_conflicting_fees;\n     size_t& nConflictingSize = ws.m_conflicting_size;\n@@ -779,8 +777,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n \n-    fReplacementTransaction = setConflicts.size();\n-    if (fReplacementTransaction) {\n+    if (!setConflicts.empty()) {\n         CFeeRate newFeeRate(nModifiedFees, nSize);\n         // It's possible that the replacement pays more fees than its direct conflicts but not more\n         // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n@@ -885,7 +882,6 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     const CAmount& nModifiedFees = ws.m_modified_fees;\n     const CAmount& nConflictingFees = ws.m_conflicting_fees;\n     const size_t& nConflictingSize = ws.m_conflicting_size;\n-    const bool fReplacementTransaction = ws.m_replacement_transaction;\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n \n     // Remove conflicting transactions from the mempool\n@@ -901,11 +897,10 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     m_pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n \n     // This transaction should only count for fee estimation if:\n-    // - it isn't a BIP 125 replacement transaction (may not be widely supported)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, setAncestors, validForFeeEstimation);"
      },
      {
        "sha": "8ca8f87bca28b9da41d253f00d39db4b83d71c60",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 75,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -3177,6 +3177,34 @@ static RPCHelpMan listunspent()\n     };\n }\n \n+// Only includes key documentation where the key is snake_case in all RPC methods. MixedCase keys can be added later.\n+static std::vector<RPCArg> FundTxDoc()\n+{\n+    return {\n+        {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+        {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+        {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125 replaceable.\\n\"\n+            \"Allows this transaction to be replaced by a transaction with higher fees\"},\n+        {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n+            \"Used for fee estimation during coin selection.\",\n+         {\n+             {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n+             {\n+                 {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n+             }},\n+             {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n+             {\n+                 {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n+             }},\n+             {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n+             {\n+                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n+             }},\n+         }},\n+    };\n+}\n+\n void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, const UniValue& options, CCoinControl& coinControl, bool override_min_fee)\n {\n     // Make sure the results are valid at least up to the most recent block\n@@ -3394,6 +3422,7 @@ static RPCHelpMan fundrawtransaction()\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n+                        Cat<std::vector<RPCArg>>(\n                         {\n                             {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"For a transaction with existing inputs, automatically include more if they are not enough.\"},\n                             {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n@@ -3416,32 +3445,8 @@ static RPCHelpMan fundrawtransaction()\n                                     {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125 replaceable.\\n\"\n-                                                          \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-                            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-                            {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n-                                \"Used for fee estimation during coin selection.\",\n-                                {\n-                                    {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n-                                        {\n-                                            {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n-                                        },\n-                                    },\n-                                    {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n-                                        {\n-                                            {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n-                                        },\n-                                    },\n-                                    {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n-                                        {\n-                                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n-                                        },\n-                                    }\n-                                }\n-                            },\n                         },\n+                        FundTxDoc()),\n                         \"options\"},\n                     {\"iswitness\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"depends on heuristic tests\"}, \"Whether the transaction hex is a serialized witness transaction.\\n\"\n                         \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n@@ -4250,6 +4255,7 @@ static RPCHelpMan send()\n                         \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n             {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n                 {\n                     {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If inputs are specified, automatically include more if they are not enough.\"},\n                     {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n@@ -4259,9 +4265,6 @@ static RPCHelpMan send()\n                     {\"change_address\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                     {\"change_position\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n                     {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n                     {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n                                           \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n@@ -4284,29 +4287,8 @@ static RPCHelpMan send()\n                             {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                         },\n                     },\n-                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125 replaceable.\\n\"\n-                                                  \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                    {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n-                        \"Used for fee estimation during coin selection.\",\n-                        {\n-                            {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n-                                {\n-                                    {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n-                                },\n-                            },\n-                            {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n-                                {\n-                                    {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n-                                },\n-                            },\n-                            {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n-                                {\n-                                    {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n-                                },\n-                            }\n-                        }\n-                    },\n                 },\n+                FundTxDoc()),\n                 \"options\"},\n         },\n         RPCResult{\n@@ -4627,6 +4609,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n                     },\n                     {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                        Cat<std::vector<RPCArg>>(\n                         {\n                             {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If inputs are specified, automatically include more if they are not enough.\"},\n                             {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n@@ -4647,32 +4630,8 @@ static RPCHelpMan walletcreatefundedpsbt()\n                                     {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125 replaceable.\\n\"\n-                                                          \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-                            \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-                            {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n-                                \"Used for fee estimation during coin selection.\",\n-                                {\n-                                    {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n-                                        {\n-                                            {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n-                                        },\n-                                    },\n-                                    {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n-                                        {\n-                                            {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n-                                        },\n-                                    },\n-                                    {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n-                                        {\n-                                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n-                                        },\n-                                    }\n-                                }\n-                            },\n                         },\n+                        FundTxDoc()),\n                         \"options\"},\n                     {\"bip32derivs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include BIP 32 derivation paths for public keys if we know them\"},\n                 },"
      },
      {
        "sha": "99ac1b5884709fc74ee785909d2a8610cbbf77fe",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -24,7 +24,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    satoshi_round,\n     softfork_active,\n )\n from test_framework.script_util import DUMMY_P2WPKH_SCRIPT\n@@ -94,7 +93,7 @@ def test_disable_flag(self):\n         utxo = utxos[0]\n \n         tx1 = CTransaction()\n-        value = int(satoshi_round(utxo[\"amount\"] - self.relayfee)*COIN)\n+        value = int((utxo[\"amount\"] - self.relayfee) * COIN)\n \n         # Check that the disable flag disables relative locktime.\n         # If sequence locks were used, this would require 1 block for the"
      },
      {
        "sha": "2b8c45ea99427e498a8ca3ef03275ec4fc51a33e",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 121,
        "deletions": 28,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test fee estimation code.\"\"\"\n from decimal import Decimal\n+import os\n import random\n \n from test_framework.messages import (\n@@ -155,6 +156,21 @@ def check_estimates(node, fees_seen):\n     check_raw_estimates(node, fees_seen)\n     check_smart_estimates(node, fees_seen)\n \n+\n+def send_tx(node, utxo, feerate):\n+    \"\"\"Broadcast a 1in-1out transaction with a specific input and feerate (sat/vb).\"\"\"\n+    overhead, op, scriptsig, nseq, value, spk = 10, 36, 5, 4, 8, 24\n+    tx_size = overhead + op + scriptsig + nseq + value + spk\n+    fee = tx_size * feerate\n+\n+    tx = CTransaction()\n+    tx.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), SCRIPT_SIG[utxo[\"vout\"]])]\n+    tx.vout = [CTxOut(int(utxo[\"amount\"] * COIN) - fee, P2SH_1)]\n+    txid = node.sendrawtransaction(tx.serialize().hex())\n+\n+    return txid\n+\n+\n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n@@ -212,48 +228,36 @@ def transact_and_mine(self, numblocks, mining_node):\n                     newmem.append(utx)\n             self.memutxo = newmem\n \n-    def run_test(self):\n-        self.log.info(\"This test is time consuming, please be patient\")\n-        self.log.info(\"Splitting inputs so we can generate tx's\")\n-\n-        # Start node0\n-        self.start_node(0)\n+    def initial_split(self, node):\n+        \"\"\"Split two coinbase UTxOs into many small coins\"\"\"\n         self.txouts = []\n         self.txouts2 = []\n         # Split a coinbase into two transaction puzzle outputs\n-        split_inputs(self.nodes[0], self.nodes[0].listunspent(0), self.txouts, True)\n+        split_inputs(node, node.listunspent(0), self.txouts, True)\n \n         # Mine\n-        while len(self.nodes[0].getrawmempool()) > 0:\n-            self.generate(self.nodes[0], 1)\n+        while len(node.getrawmempool()) > 0:\n+            self.generate(node, 1)\n \n         # Repeatedly split those 2 outputs, doubling twice for each rep\n         # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n         reps = 0\n         while reps < 5:\n             # Double txouts to txouts2\n             while len(self.txouts) > 0:\n-                split_inputs(self.nodes[0], self.txouts, self.txouts2)\n-            while len(self.nodes[0].getrawmempool()) > 0:\n-                self.generate(self.nodes[0], 1)\n+                split_inputs(node, self.txouts, self.txouts2)\n+            while len(node.getrawmempool()) > 0:\n+                self.generate(node, 1)\n             # Double txouts2 to txouts\n             while len(self.txouts2) > 0:\n-                split_inputs(self.nodes[0], self.txouts2, self.txouts)\n-            while len(self.nodes[0].getrawmempool()) > 0:\n-                self.generate(self.nodes[0], 1)\n+                split_inputs(node, self.txouts2, self.txouts)\n+            while len(node.getrawmempool()) > 0:\n+                self.generate(node, 1)\n             reps += 1\n-        self.log.info(\"Finished splitting\")\n-\n-        # Now we can connect the other nodes, didn't want to connect them earlier\n-        # so the estimates would not be affected by the splitting transactions\n-        self.start_node(1)\n-        self.start_node(2)\n-        self.connect_nodes(1, 0)\n-        self.connect_nodes(0, 2)\n-        self.connect_nodes(2, 1)\n-\n-        self.sync_all()\n \n+    def sanity_check_estimates_range(self):\n+        \"\"\"Populate estimation buckets, assert estimates are in a sane range and\n+        are strictly increasing as the target decreases.\"\"\"\n         self.fees_per_kb = []\n         self.memutxo = []\n         self.confutxo = self.txouts  # Start with the set of confirmed txouts after splitting\n@@ -279,11 +283,100 @@ def run_test(self):\n         self.log.info(\"Final estimates after emptying mempools\")\n         check_estimates(self.nodes[1], self.fees_per_kb)\n \n-        # check that the effective feerate is greater than or equal to the mempoolminfee even for high mempoolminfee\n-        self.log.info(\"Test fee rate estimation after restarting node with high MempoolMinFee\")\n+    def test_feerate_mempoolminfee(self):\n         high_val = 3*self.nodes[1].estimatesmartfee(1)['feerate']\n         self.restart_node(1, extra_args=[f'-minrelaytxfee={high_val}'])\n         check_estimates(self.nodes[1], self.fees_per_kb)\n+        self.restart_node(1)\n+\n+    def sanity_check_rbf_estimates(self, utxos):\n+        \"\"\"During 5 blocks, broadcast low fee transactions. Only 10% of them get\n+        confirmed and the remaining ones get RBF'd with a high fee transaction at\n+        the next block.\n+        The block policy estimator should return the high feerate.\n+        \"\"\"\n+        # The broadcaster and block producer\n+        node = self.nodes[0]\n+        miner = self.nodes[1]\n+        # In sat/vb\n+        low_feerate = 1\n+        high_feerate = 10\n+        # Cache the utxos of which to replace the spender after it failed to get\n+        # confirmed\n+        utxos_to_respend = []\n+        txids_to_replace = []\n+\n+        assert len(utxos) >= 250\n+        for _ in range(5):\n+            # Broadcast 45 low fee transactions that will need to be RBF'd\n+            for _ in range(45):\n+                u = utxos.pop(0)\n+                txid = send_tx(node, u, low_feerate)\n+                utxos_to_respend.append(u)\n+                txids_to_replace.append(txid)\n+            # Broadcast 5 low fee transaction which don't need to\n+            for _ in range(5):\n+                send_tx(node, utxos.pop(0), low_feerate)\n+            # Mine the transactions on another node\n+            self.sync_mempools(wait=.1, nodes=[node, miner])\n+            for txid in txids_to_replace:\n+                miner.prioritisetransaction(txid=txid, fee_delta=-COIN)\n+            self.generate(miner, 1)\n+            self.sync_blocks(wait=.1, nodes=[node, miner])\n+            # RBF the low-fee transactions\n+            while True:\n+                try:\n+                    u = utxos_to_respend.pop(0)\n+                    send_tx(node, u, high_feerate)\n+                except IndexError:\n+                    break\n+\n+        # Mine the last replacement txs\n+        self.sync_mempools(wait=.1, nodes=[node, miner])\n+        self.generate(miner, 1)\n+        self.sync_blocks(wait=.1, nodes=[node, miner])\n+\n+        # Only 10% of the transactions were really confirmed with a low feerate,\n+        # the rest needed to be RBF'd. We must return the 90% conf rate feerate.\n+        high_feerate_kvb = Decimal(high_feerate) / COIN * 10**3\n+        est_feerate = node.estimatesmartfee(2)[\"feerate\"]\n+        assert est_feerate == high_feerate_kvb\n+\n+    def run_test(self):\n+        self.log.info(\"This test is time consuming, please be patient\")\n+        self.log.info(\"Splitting inputs so we can generate tx's\")\n+\n+        # Split two coinbases into many small utxos\n+        self.start_node(0)\n+        self.initial_split(self.nodes[0])\n+        self.log.info(\"Finished splitting\")\n+\n+        # Now we can connect the other nodes, didn't want to connect them earlier\n+        # so the estimates would not be affected by the splitting transactions\n+        self.start_node(1)\n+        self.start_node(2)\n+        self.connect_nodes(1, 0)\n+        self.connect_nodes(0, 2)\n+        self.connect_nodes(2, 1)\n+        self.sync_all()\n+\n+        self.log.info(\"Testing estimates with single transactions.\")\n+        self.sanity_check_estimates_range()\n+\n+        # check that the effective feerate is greater than or equal to the mempoolminfee even for high mempoolminfee\n+        self.log.info(\"Test fee rate estimation after restarting node with high MempoolMinFee\")\n+        self.test_feerate_mempoolminfee()\n+\n+        self.log.info(\"Restarting node with fresh estimation\")\n+        self.stop_node(0)\n+        fee_dat = os.path.join(self.nodes[0].datadir, self.chain, \"fee_estimates.dat\")\n+        os.remove(fee_dat)\n+        self.start_node(0)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.log.info(\"Testing estimates with RBF.\")\n+        self.sanity_check_rbf_estimates(self.confutxo + self.memutxo)\n \n         self.log.info(\"Testing that fee estimation is disabled in blocksonly.\")\n         self.restart_node(0, [\"-blocksonly\"])"
      },
      {
        "sha": "2f9ab34e999b02ebb9ef3c5a4aa98117c9f906c6",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -31,11 +31,11 @@\n     OP_1,\n     OP_2,\n     OP_CHECKMULTISIG,\n-    OP_CHECKSIG,\n     OP_DROP,\n     OP_TRUE,\n )\n from test_framework.script_util import (\n+    key_to_p2pk_script,\n     key_to_p2pkh_script,\n     key_to_p2wpkh_script,\n     script_to_p2sh_script,\n@@ -459,7 +459,7 @@ def run_test(self):\n                 importlist.append(script_to_p2wsh_script(bare).hex())\n             else:\n                 pubkey = bytes.fromhex(v['pubkey'])\n-                p2pk = CScript([pubkey, OP_CHECKSIG])\n+                p2pk = key_to_p2pk_script(pubkey)\n                 p2pkh = key_to_p2pkh_script(pubkey)\n                 importlist.append(p2pk.hex())\n                 importlist.append(p2pkh.hex())\n@@ -628,7 +628,7 @@ def p2pkh_address_to_script(self, v):\n         pubkey = bytes.fromhex(v['pubkey'])\n         p2wpkh = key_to_p2wpkh_script(pubkey)\n         p2sh_p2wpkh = script_to_p2sh_script(p2wpkh)\n-        p2pk = CScript([pubkey, OP_CHECKSIG])\n+        p2pk = key_to_p2pk_script(pubkey)\n         p2pkh = CScript(bytes.fromhex(v['scriptPubKey']))\n         p2sh_p2pk = script_to_p2sh_script(p2pk)\n         p2sh_p2pkh = script_to_p2sh_script(p2pkh)"
      },
      {
        "sha": "50a25ee1ef5c955ae2275a29623f5d3fb0292014",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -76,6 +76,7 @@\n     taproot_construct,\n )\n from test_framework.script_util import (\n+    key_to_p2pk_script,\n     key_to_p2wpkh_script,\n     keyhash_to_p2pkh_script,\n     script_to_p2sh_script,\n@@ -1109,7 +1110,7 @@ def predict_sigops_ratio(n, dummy_size):\n             for witv0 in [False, True]:\n                 for hashtype in VALID_SIGHASHES_ECDSA + [random.randrange(0x04, 0x80), random.randrange(0x84, 0x100)]:\n                     standard = (hashtype in VALID_SIGHASHES_ECDSA) and (compressed or not witv0)\n-                    add_spender(spenders, \"legacy/pk-wrongkey\", hashtype=hashtype, p2sh=p2sh, witv0=witv0, standard=standard, script=CScript([pubkey1, OP_CHECKSIG]), **SINGLE_SIG, key=eckey1, failure={\"key\": eckey2}, sigops_weight=4-3*witv0, **ERR_NO_SUCCESS)\n+                    add_spender(spenders, \"legacy/pk-wrongkey\", hashtype=hashtype, p2sh=p2sh, witv0=witv0, standard=standard, script=key_to_p2pk_script(pubkey1), **SINGLE_SIG, key=eckey1, failure={\"key\": eckey2}, sigops_weight=4-3*witv0, **ERR_NO_SUCCESS)\n                     add_spender(spenders, \"legacy/pkh-sighashflip\", hashtype=hashtype, p2sh=p2sh, witv0=witv0, standard=standard, pkh=pubkey1, key=eckey1, **SIGHASH_BITFLIP, sigops_weight=4-3*witv0, **ERR_NO_SUCCESS)\n \n     # Verify that OP_CHECKSIGADD wasn't accidentally added to pre-taproot validation logic."
      },
      {
        "sha": "3943bba4899451db468512e102487119e5ef8183",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -14,7 +14,6 @@\n     assert_equal,\n     assert_raises_rpc_error,\n     chain_transaction,\n-    satoshi_round,\n )\n \n # default limits\n@@ -209,10 +208,10 @@ def run_test(self):\n             entry = self.nodes[0].getmempoolentry(x)\n             descendant_fees += entry['fee']\n             if (x == chain[-1]):\n-                assert_equal(entry['modifiedfee'], entry['fee']+satoshi_round('0.00002'))\n-                assert_equal(entry['fees']['modified'], entry['fee']+satoshi_round('0.00002'))\n+                assert_equal(entry['modifiedfee'], entry['fee'] + Decimal(\"0.00002\"))\n+                assert_equal(entry['fees']['modified'], entry['fee'] + Decimal(\"0.00002\"))\n             assert_equal(entry['descendantfees'], descendant_fees * COIN + 2000)\n-            assert_equal(entry['fees']['descendant'], descendant_fees+satoshi_round('0.00002'))\n+            assert_equal(entry['fees']['descendant'], descendant_fees + Decimal(\"0.00002\"))\n \n         # Check that node1's mempool is as expected (-> custom ancestor limit)\n         mempool0 = self.nodes[0].getrawmempool(False)\n@@ -308,7 +307,7 @@ def run_test(self):\n         value = utxo[0]['amount']\n         vout = utxo[0]['vout']\n \n-        send_value = satoshi_round((value - fee)/2)\n+        send_value = (value - fee) / 2\n         inputs = [ {'txid' : txid, 'vout' : vout} ]\n         outputs = {}\n         for _ in range(2):"
      },
      {
        "sha": "4e21d08e5c634b9fef0253ca8d379cec182c4fdb",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -72,6 +72,7 @@\n     hash160,\n )\n from test_framework.script_util import (\n+    key_to_p2pk_script,\n     key_to_p2wpkh_script,\n     keyhash_to_p2pkh_script,\n     script_to_p2sh_script,\n@@ -1455,7 +1456,7 @@ def test_uncompressed_pubkey(self):\n \n         # Now try to spend it. Send it to a P2WSH output, which we'll\n         # use in the next test.\n-        witness_script = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n+        witness_script = key_to_p2pk_script(pubkey)\n         script_wsh = script_to_p2wsh_script(witness_script)\n \n         tx2 = CTransaction()\n@@ -1533,7 +1534,7 @@ def test_signature_version_1(self):\n         key.generate()\n         pubkey = key.get_pubkey().get_bytes()\n \n-        witness_script = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n+        witness_script = key_to_p2pk_script(pubkey)\n         script_pubkey = script_to_p2wsh_script(witness_script)\n \n         # First create a witness output for use in the tests."
      },
      {
        "sha": "c519d0c7d19075fc524fe760fbd1768aa7bd687f",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -25,12 +25,12 @@\n from test_framework.script import (\n     CScript,\n     OP_CHECKLOCKTIMEVERIFY,\n-    OP_CHECKSIG,\n     OP_CHECKSEQUENCEVERIFY,\n     OP_DROP,\n     OP_TRUE,\n )\n from test_framework.script_util import (\n+    key_to_p2pk_script,\n     key_to_p2pkh_script,\n     script_to_p2sh_p2wsh_script,\n     script_to_p2wsh_script,\n@@ -229,7 +229,7 @@ def verify_txn_with_witness_script(self, tx_type):\n         embedded_pubkey = eckey.get_pubkey().get_bytes().hex()\n         witness_script = {\n             'P2PKH': key_to_p2pkh_script(embedded_pubkey).hex(),\n-            'P2PK': CScript([bytes.fromhex(embedded_pubkey), OP_CHECKSIG]).hex()\n+            'P2PK': key_to_p2pk_script(embedded_pubkey).hex()\n         }.get(tx_type, \"Invalid tx_type\")\n         redeem_script = script_to_p2wsh_script(witness_script).hex()\n         addr = script_to_p2sh(redeem_script)"
      },
      {
        "sha": "85e3c2a3834c1c98bce5580656f6867aade8d3b7",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -33,11 +33,11 @@\n     CScriptOp,\n     OP_1,\n     OP_CHECKMULTISIG,\n-    OP_CHECKSIG,\n     OP_RETURN,\n     OP_TRUE,\n )\n from .script_util import (\n+    key_to_p2pk_script,\n     key_to_p2wpkh_script,\n     script_to_p2wsh_script,\n )\n@@ -134,7 +134,7 @@ def create_coinbase(height, pubkey=None, extra_output_script=None, fees=0, nValu\n         coinbaseoutput.nValue >>= halvings\n         coinbaseoutput.nValue += fees\n     if pubkey is not None:\n-        coinbaseoutput.scriptPubKey = CScript([pubkey, OP_CHECKSIG])\n+        coinbaseoutput.scriptPubKey = key_to_p2pk_script(pubkey)\n     else:\n         coinbaseoutput.scriptPubKey = CScript([OP_TRUE])\n     coinbase.vout = [coinbaseoutput]"
      },
      {
        "sha": "82a9067dd2d6fa5c2ae2ed94805141906bcc7fa1",
        "filename": "test/functional/test_framework/script_util.py",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/test_framework/script_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/test_framework/script_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script_util.py?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -5,14 +5,14 @@\n \"\"\"Useful Script constants and utils.\"\"\"\n from test_framework.script import (\n     CScript,\n-    hash160,\n-    sha256,\n     OP_0,\n-    OP_DUP,\n-    OP_HASH160,\n     OP_CHECKSIG,\n+    OP_DUP,\n     OP_EQUAL,\n     OP_EQUALVERIFY,\n+    OP_HASH160,\n+    hash160,\n+    sha256,\n )\n \n # To prevent a \"tx-size-small\" policy rule error, a transaction has to have a\n@@ -36,6 +36,11 @@\n DUMMY_2_P2WPKH_SCRIPT = CScript([b'b' * 21])\n \n \n+def key_to_p2pk_script(key):\n+    key = check_key(key)\n+    return CScript([key, OP_CHECKSIG])\n+\n+\n def keyhash_to_p2pkh_script(hash):\n     assert len(hash) == 20\n     return CScript([OP_DUP, OP_HASH160, hash, OP_EQUALVERIFY, OP_CHECKSIG])"
      },
      {
        "sha": "b0b578e5447cec7063176bd31128b05ddeeda8ae",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -24,16 +24,17 @@\n from test_framework.script import (\n     CScript,\n     LegacySignatureHash,\n-    OP_CHECKSIG,\n     OP_TRUE,\n     OP_NOP,\n     SIGHASH_ALL,\n )\n-from test_framework.script_util import key_to_p2wpkh_script\n+from test_framework.script_util import (\n+    key_to_p2pk_script,\n+    key_to_p2wpkh_script,\n+)\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than_or_equal,\n-    satoshi_round,\n )\n \n DEFAULT_FEE = Decimal(\"0.0001\")\n@@ -76,7 +77,7 @@ def __init__(self, test_node, *, mode=MiniWalletMode.ADDRESS_OP_TRUE):\n             self._priv_key = ECKey()\n             self._priv_key.set((1).to_bytes(32, 'big'), True)\n             pub_key = self._priv_key.get_pubkey()\n-            self._scriptPubKey = bytes(CScript([pub_key.get_bytes(), OP_CHECKSIG]))\n+            self._scriptPubKey = key_to_p2pk_script(pub_key.get_bytes())\n         elif mode == MiniWalletMode.ADDRESS_OP_TRUE:\n             self._address = ADDRESS_BCRT1_P2WSH_OP_TRUE\n             self._scriptPubKey = bytes.fromhex(self._test_node.validateaddress(self._address)['scriptPubKey'])\n@@ -175,13 +176,12 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n             vsize = Decimal(96)  # anyone-can-spend\n         else:\n             vsize = Decimal(168)  # P2PK (73 bytes scriptSig + 35 bytes scriptPubKey + 60 bytes other)\n-        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate * (vsize / 1000))\n-        fee = utxo_to_spend['value'] - send_value\n+        send_value = int(COIN * (utxo_to_spend['value'] - fee_rate * (vsize / 1000)))\n         assert send_value > 0\n \n         tx = CTransaction()\n         tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']), nSequence=sequence)]\n-        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.vout = [CTxOut(send_value, self._scriptPubKey)]\n         tx.nLockTime = locktime\n         if not self._address:\n             # raw script\n@@ -200,7 +200,7 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         assert_equal(mempool_valid, tx_info['allowed'])\n         if mempool_valid:\n             assert_equal(tx_info['vsize'], vsize)\n-            assert_equal(tx_info['fees']['base'], fee)\n+            assert_equal(tx_info['fees']['base'], utxo_to_spend['value'] - Decimal(send_value) / COIN)\n         return {'txid': tx_info['txid'], 'wtxid': tx_info['wtxid'], 'hex': tx_hex, 'tx': tx}\n \n     def sendrawtransaction(self, *, from_node, tx_hex):"
      },
      {
        "sha": "70ca5a2fe4a9a7c3052d8a87104e376065bf37a1",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085ea9d86e86ad37dd81a1f8032e2d594a0d4312/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "patch": "@@ -149,6 +149,7 @@ def run_test(self):\n         assert_equal(newbalance, balance - Decimal(\"24.9996\"))\n         balance = newbalance\n \n+        self.log.info(\"Test transactions conflicted by a double spend\")\n         # Create a double spend of AB1 by spending again from only A's 10 output\n         # Mine double spend from node 1\n         inputs = []\n@@ -163,6 +164,34 @@ def run_test(self):\n         self.connect_nodes(0, 1)\n         self.sync_blocks()\n \n+        tx_list = self.nodes[0].listtransactions()\n+\n+        conflicted = [tx for tx in tx_list if tx[\"confirmations\"] < 0]\n+        assert_equal(4, len(conflicted))\n+\n+        wallet_conflicts = [tx for tx in conflicted if tx[\"walletconflicts\"]]\n+        assert_equal(2, len(wallet_conflicts))\n+\n+        double_spends = [tx for tx in tx_list if tx[\"walletconflicts\"] and tx[\"confirmations\"] > 0]\n+        assert_equal(1, len(double_spends))\n+        double_spend = double_spends[0]\n+\n+        # Test the properties of the conflicted transactions, i.e. with confirmations < 0.\n+        for tx in conflicted:\n+            assert_equal(tx[\"abandoned\"], False)\n+            assert_equal(tx[\"confirmations\"], -1)\n+            assert_equal(tx[\"trusted\"], False)\n+\n+        # Test the properties of the double-spend transaction, i.e. having wallet conflicts and confirmations > 0.\n+        assert_equal(double_spend[\"abandoned\"], False)\n+        assert_equal(double_spend[\"confirmations\"], 1)\n+        assert \"trusted\" not in double_spend.keys()  # \"trusted\" only returned if tx has 0 or negative confirmations.\n+\n+        # Test the walletconflicts field of each.\n+        for tx in wallet_conflicts:\n+            assert_equal(double_spend[\"walletconflicts\"], [tx[\"txid\"]])\n+            assert_equal(tx[\"walletconflicts\"], [double_spend[\"txid\"]])\n+\n         # Verify that B and C's 10 BTC outputs are available for spending again because AB1 is now conflicted\n         newbalance = self.nodes[0].getbalance()\n         assert_equal(newbalance, balance + Decimal(\"20\"))"
      }
    ]
  },
  {
    "sha": "63ce461a71a343155cc365406a42a773fbfd8e7a",
    "node_id": "C_kwDOABII59oAKDYzY2U0NjFhNzFhMzQzMTU1Y2MzNjU0MDZhNDJhNzczZmJmZDhlN2E",
    "commit": {
      "author": {
        "name": "katesalazar",
        "email": "mercedes.catherine.salazar@gmail.com",
        "date": "2021-10-07T21:35:16Z"
      },
      "committer": {
        "name": "katesalazar",
        "email": "mercedes.catherine.salazar@gmail.com",
        "date": "2021-10-07T21:35:16Z"
      },
      "message": "Lint",
      "tree": {
        "sha": "aafcfe9342637c7017c38f714cb1252461733f7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aafcfe9342637c7017c38f714cb1252461733f7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63ce461a71a343155cc365406a42a773fbfd8e7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63ce461a71a343155cc365406a42a773fbfd8e7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63ce461a71a343155cc365406a42a773fbfd8e7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63ce461a71a343155cc365406a42a773fbfd8e7a/comments",
    "author": {
      "login": "katesalazar",
      "id": 52637275,
      "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/katesalazar",
      "html_url": "https://github.com/katesalazar",
      "followers_url": "https://api.github.com/users/katesalazar/followers",
      "following_url": "https://api.github.com/users/katesalazar/following{/other_user}",
      "gists_url": "https://api.github.com/users/katesalazar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/katesalazar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
      "organizations_url": "https://api.github.com/users/katesalazar/orgs",
      "repos_url": "https://api.github.com/users/katesalazar/repos",
      "events_url": "https://api.github.com/users/katesalazar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/katesalazar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "katesalazar",
      "id": 52637275,
      "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/katesalazar",
      "html_url": "https://github.com/katesalazar",
      "followers_url": "https://api.github.com/users/katesalazar/followers",
      "following_url": "https://api.github.com/users/katesalazar/following{/other_user}",
      "gists_url": "https://api.github.com/users/katesalazar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/katesalazar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
      "organizations_url": "https://api.github.com/users/katesalazar/orgs",
      "repos_url": "https://api.github.com/users/katesalazar/repos",
      "events_url": "https://api.github.com/users/katesalazar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/katesalazar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/085ea9d86e86ad37dd81a1f8032e2d594a0d4312",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/085ea9d86e86ad37dd81a1f8032e2d594a0d4312"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5c0d4fa55cd738f2333fee9aa9661f2155b91c27",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63ce461a71a343155cc365406a42a773fbfd8e7a/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63ce461a71a343155cc365406a42a773fbfd8e7a/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=63ce461a71a343155cc365406a42a773fbfd8e7a",
        "patch": "@@ -220,7 +220,7 @@ def str_to_b64str(string):\n \n def satoshi_round(amount):\n     \"\"\" Doesn't accept floating point rational numbers. \"\"\"\n-    if type(amount) == type(0.1):\n+    if isinstance(amount, float):\n         # For best predictabilty do not convert floating point rational\n         # numbers into fixed point rational numbers.\n         raise TypeError("
      }
    ]
  }
]