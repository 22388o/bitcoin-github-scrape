[
  {
    "sha": "3e7c89196ceb2742b62cd183d6fab74edc40647a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTdjODkxOTZjZWIyNzQyYjYyY2QxODNkNmZhYjc0ZWRjNDA2NDdh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-10-19T09:19:38Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-11-21T01:48:25Z"
      },
      "message": "Optimisation: Store transaction list order in memory rather than compute it every need\n\nHuge performance improvement (450%) for zapwallettxes",
      "tree": {
        "sha": "e1e14d18e88a0a88015e7c3c4642659b3b018487",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1e14d18e88a0a88015e7c3c4642659b3b018487"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e7c89196ceb2742b62cd183d6fab74edc40647a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e7c89196ceb2742b62cd183d6fab74edc40647a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e7c89196ceb2742b62cd183d6fab74edc40647a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e7c89196ceb2742b62cd183d6fab74edc40647a/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac53ec992018a14db6f8a65a7ce333a4c8284cc"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 44,
      "deletions": 52
    },
    "files": [
      {
        "sha": "4a294c6712d78be9d85fa21d0ecd56af50393955",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "patch": "@@ -45,7 +45,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333333;\n     ae.strOtherAccount = \"b\";\n     ae.strComment = \"\";\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n     pwalletMain->AddToWallet(wtx, false, &walletdb);\n@@ -55,7 +55,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     ae.nTime = 1333333336;\n     ae.strOtherAccount = \"c\";\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     GetResults(walletdb, results);\n \n@@ -71,7 +71,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333330;\n     ae.strOtherAccount = \"d\";\n     ae.nOrderPos = pwalletMain->IncOrderPosNext();\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     GetResults(walletdb, results);\n \n@@ -121,7 +121,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333334;\n     ae.strOtherAccount = \"e\";\n     ae.nOrderPos = -1;\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     GetResults(walletdb, results);\n "
      },
      {
        "sha": "84881226c4530d3e6508c179956e1dfb47919445",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "patch": "@@ -835,7 +835,7 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n     debit.nTime = nNow;\n     debit.strOtherAccount = strTo;\n     debit.strComment = strComment;\n-    walletdb.WriteAccountingEntry(debit);\n+    pwalletMain->AddAccountingEntry(debit, walletdb);\n \n     // Credit\n     CAccountingEntry credit;\n@@ -845,7 +845,7 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n     credit.nTime = nNow;\n     credit.strOtherAccount = strFrom;\n     credit.strComment = strComment;\n-    walletdb.WriteAccountingEntry(credit);\n+    pwalletMain->AddAccountingEntry(credit, walletdb);\n \n     if (!walletdb.TxnCommit())\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n@@ -1470,11 +1470,10 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n \n     UniValue ret(UniValue::VARR);\n \n-    std::list<CAccountingEntry> acentries;\n-    CWallet::TxItems txOrdered = pwalletMain->OrderedTxItems(acentries, strAccount);\n+    const CWallet::TxItems & txOrdered = pwalletMain->wtxOrdered;\n \n     // iterate backwards until we have nCount items to return:\n-    for (CWallet::TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+    for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)\n@@ -1579,8 +1578,7 @@ UniValue listaccounts(const UniValue& params, bool fHelp)\n         }\n     }\n \n-    list<CAccountingEntry> acentries;\n-    CWalletDB(pwalletMain->strWalletFile).ListAccountCreditDebit(\"*\", acentries);\n+    const list<CAccountingEntry> & acentries = pwalletMain->laccentries;\n     BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n "
      },
      {
        "sha": "1b152f4192a3e1c57585c8fddeb73823e0daf131",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 29,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "patch": "@@ -588,31 +588,6 @@ int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n     return nRet;\n }\n \n-CWallet::TxItems CWallet::OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount)\n-{\n-    AssertLockHeld(cs_wallet); // mapWallet\n-    CWalletDB walletdb(strWalletFile);\n-\n-    // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n-    TxItems txOrdered;\n-\n-    // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n-    // would make this much faster for applications that do this a lot.\n-    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n-    {\n-        CWalletTx* wtx = &((*it).second);\n-        txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n-    }\n-    acentries.clear();\n-    walletdb.ListAccountCreditDebit(strAccount, acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n-    {\n-        txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n-    }\n-\n-    return txOrdered;\n-}\n-\n void CWallet::MarkDirty()\n {\n     {\n@@ -629,7 +604,9 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n     if (fFromLoadWallet)\n     {\n         mapWallet[hash] = wtxIn;\n-        mapWallet[hash].BindWallet(this);\n+        CWalletTx& wtx = mapWallet[hash];\n+        wtx.BindWallet(this);\n+        wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n         AddToSpends(hash);\n     }\n     else\n@@ -644,6 +621,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n         {\n             wtx.nTimeReceived = GetAdjustedTime();\n             wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n+            wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n \n             wtx.nTimeSmart = wtx.nTimeReceived;\n             if (!wtxIn.hashBlock.IsNull())\n@@ -655,9 +633,8 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n                     {\n                         // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n                         int64_t latestTolerated = latestNow + 300;\n-                        std::list<CAccountingEntry> acentries;\n-                        TxItems txOrdered = OrderedTxItems(acentries);\n-                        for (TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+                        const TxItems & txOrdered = wtxOrdered;\n+                        for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n                         {\n                             CWalletTx *const pwtx = (*it).second.first;\n                             if (pwtx == &wtx)\n@@ -2118,6 +2095,18 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n     return true;\n }\n \n+bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry, CWalletDB & pwalletdb)\n+{\n+    if (!pwalletdb.WriteAccountingEntry_Backend(acentry))\n+        return false;\n+\n+    laccentries.push_back(acentry);\n+    CAccountingEntry & entry = laccentries.back();\n+    wtxOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n+\n+    return true;\n+}\n+\n CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n {\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));"
      },
      {
        "sha": "7e846569ff19af23612d2b1efd3980fd005d6876",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "patch": "@@ -531,6 +531,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n+    std::list<CAccountingEntry> laccentries;\n+\n+    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n+    typedef std::multimap<int64_t, TxPair > TxItems;\n+    TxItems wtxOrdered;\n \n     int64_t nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n@@ -617,16 +622,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     int64_t IncOrderPosNext(CWalletDB *pwalletdb = NULL);\n \n-    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n-    typedef std::multimap<int64_t, TxPair > TxItems;\n-\n-    /**\n-     * Get the wallet's activity log\n-     * @return multimap of ordered transactions and accounting entries\n-     * @warning Returned pointers are *only* valid within the scope of passed acentries\n-     */\n-    TxItems OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount = \"\");\n-\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n     void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n@@ -656,6 +651,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n+    bool AddAccountingEntry(const CAccountingEntry&, CWalletDB & pwalletdb);\n+\n     static CFeeRate minTxFee;\n     /**\n      * Estimate the minimum fee considering user set parameters"
      },
      {
        "sha": "9ce9f53bd97597b2c46e752514b1e8ace84b8b02",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "patch": "@@ -191,7 +191,7 @@ bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccount\n     return Write(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);\n }\n \n-bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n+bool CWalletDB::WriteAccountingEntry_Backend(const CAccountingEntry& acentry)\n {\n     return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n@@ -709,6 +709,12 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     if (wss.fAnyUnordered)\n         result = ReorderTransactions(pwallet);\n \n+    pwallet->laccentries.clear();\n+    ListAccountCreditDebit(\"*\", pwallet->laccentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, pwallet->laccentries) {\n+        pwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n     return result;\n }\n "
      },
      {
        "sha": "3ebc05afd18dadd764c3ae06fffb495d243c4b5c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "patch": "@@ -110,6 +110,9 @@ class CWalletDB : public CDB\n \n     bool WriteMinVersion(int nVersion);\n \n+    /// This writes directly to the database, and will not update the CWallet's cached accounting entries!\n+    /// Use wallet.AddAccountingEntry instead, to write *and* update its caches.\n+    bool WriteAccountingEntry_Backend(const CAccountingEntry& acentry);\n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n \n@@ -118,7 +121,6 @@ class CWalletDB : public CDB\n     /// Erase destination data tuple from wallet database\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n-    bool WriteAccountingEntry(const CAccountingEntry& acentry);\n     CAmount GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n "
      }
    ]
  }
]