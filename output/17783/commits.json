[
  {
    "sha": "2772948473df34181535558f6b105ca413730053",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzcyOTQ4NDczZGYzNDE4MTUzNTU1OGY2YjEwNWNhNDEzNzMwMDUz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-08-04T13:36:04Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-02T14:53:05Z"
      },
      "message": "refactor: Implement missing error checking for ArgsManager flags\n\nTrigger startup errors if bitcoin is configured with bad setting values\naccording to flags. Also raise internal errors if settings are registered and\nretrieved with inconsistent flags.\n\nThis change has no effect on behavior because ArgsManager flags were recently\nadded in #16097 and aren't used anywhere yet.",
      "tree": {
        "sha": "13c8693fc447e3552131c2fd1a8b553653ebc173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13c8693fc447e3552131c2fd1a8b553653ebc173"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2772948473df34181535558f6b105ca413730053",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2772948473df34181535558f6b105ca413730053",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2772948473df34181535558f6b105ca413730053",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2772948473df34181535558f6b105ca413730053/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7d17daa5cd8bf6398d5f8d7e77290009407d6ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d17daa5cd8bf6398d5f8d7e77290009407d6ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d17daa5cd8bf6398d5f8d7e77290009407d6ea"
      }
    ],
    "stats": {
      "total": 427,
      "additions": 348,
      "deletions": 79
    },
    "files": [
      {
        "sha": "bd87546a1f758324e3d0d0704f1db39855ffe006",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772948473df34181535558f6b105ca413730053/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772948473df34181535558f6b105ca413730053/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=2772948473df34181535558f6b105ca413730053",
        "patch": "@@ -24,7 +24,7 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n }\n "
      },
      {
        "sha": "91eae9c5a39b7302910fe53e0ccc97655c983a5f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772948473df34181535558f6b105ca413730053/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772948473df34181535558f6b105ca413730053/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2772948473df34181535558f6b105ca413730053",
        "patch": "@@ -464,7 +464,7 @@ void SetupServerArgs(NodeContext& node)\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n #ifdef USE_NATPMP\n-    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #else\n     hidden_args.emplace_back(\"-natpmp\");\n #endif // USE_NATPMP"
      },
      {
        "sha": "c5d5eea38ee91d1152e86366d613423961717440",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 7,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772948473df34181535558f6b105ca413730053/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772948473df34181535558f6b105ca413730053/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=2772948473df34181535558f6b105ca413730053",
        "patch": "@@ -38,13 +38,21 @@ FUZZ_TARGET(system)\n                 args_manager.SelectConfigNetwork(fuzzed_data_provider.ConsumeRandomLengthString(16));\n             },\n             [&] {\n-                args_manager.SoftSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                // Avoid Can't call SoftSetArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                } catch (const std::logic_error&) {\n+                }\n             },\n             [&] {\n                 args_manager.ForceSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n             },\n             [&] {\n-                args_manager.SoftSetBoolArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeBool());\n+                // Avoid Can't call SoftSetBoolArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetBoolArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeBool());\n+                } catch (const std::logic_error&) {\n+                }\n             },\n             [&] {\n                 const OptionsCategory options_category = fuzzed_data_provider.PickValueInArray<OptionsCategory>({OptionsCategory::OPTIONS, OptionsCategory::CONNECTION, OptionsCategory::WALLET, OptionsCategory::WALLET_DEBUG_TEST, OptionsCategory::ZMQ, OptionsCategory::DEBUG_TEST, OptionsCategory::CHAINPARAMS, OptionsCategory::NODE_RELAY, OptionsCategory::BLOCK_CREATION, OptionsCategory::RPC, OptionsCategory::GUI, OptionsCategory::COMMANDS, OptionsCategory::REGISTER_COMMANDS, OptionsCategory::HIDDEN});\n@@ -54,7 +62,16 @@ FUZZ_TARGET(system)\n                 if (args_manager.GetArgFlags(argument_name) != std::nullopt) {\n                     return;\n                 }\n-                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND, options_category);\n+                unsigned int flags = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+                // Avoid hitting \"ALLOW_{BOOL|INT|STRING} flags would have no effect with ALLOW_ANY present (ALLOW_ANY disables validation)\"\n+                if (flags & ArgsManager::ALLOW_ANY) {\n+                    flags &= ~(ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT | ArgsManager::ALLOW_STRING);\n+                }\n+                // Avoid hitting \"ALLOW_INT would have no effect with ALLOW_STRING present (any valid integer is also a valid string)\"\n+                if (flags & ArgsManager::ALLOW_STRING) {\n+                    flags &= ~ArgsManager::ALLOW_INT;\n+                }\n+                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), flags & ~ArgsManager::COMMAND, options_category);\n             },\n             [&] {\n                 // Avoid hitting:\n@@ -96,11 +113,23 @@ FUZZ_TARGET(system)\n     const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const bool b = fuzzed_data_provider.ConsumeBool();\n \n-    (void)args_manager.GetArg(s1, i64);\n-    (void)args_manager.GetArg(s1, s2);\n+    try {\n+        (void)args_manager.GetArg(s1, i64);\n+    } catch (const std::logic_error&) {\n+    }\n+    try {\n+        (void)args_manager.GetArg(s1, s2);\n+    } catch (const std::logic_error&) {\n+    }\n     (void)args_manager.GetArgFlags(s1);\n-    (void)args_manager.GetArgs(s1);\n-    (void)args_manager.GetBoolArg(s1, b);\n+    try {\n+        (void)args_manager.GetArgs(s1);\n+    } catch (const std::logic_error&) {\n+    }\n+    try {\n+        (void)args_manager.GetBoolArg(s1, b);\n+    } catch (const std::logic_error&) {\n+    }\n     try {\n         (void)args_manager.GetChainName();\n     } catch (const std::runtime_error&) {"
      },
      {
        "sha": "53f6b69598dd10010ac9e6102f7dca1526f46fcc",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772948473df34181535558f6b105ca413730053/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772948473df34181535558f6b105ca413730053/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=2772948473df34181535558f6b105ca413730053",
        "patch": "@@ -213,7 +213,7 @@ BOOST_AUTO_TEST_CASE(logargs)\n \n     LogInstance().DeleteCallback(print_connection);\n     // Check that what should appear does, and what shouldn't doesn't.\n-    BOOST_CHECK(str.find(\"Command-line arg: okaylog-bool=\\\"\\\"\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"Command-line arg: okaylog-bool=true\") != std::string::npos);\n     BOOST_CHECK(str.find(\"Command-line arg: okaylog-negbool=false\") != std::string::npos);\n     BOOST_CHECK(str.find(\"Command-line arg: okaylog=\\\"public\\\"\") != std::string::npos);\n     BOOST_CHECK(str.find(\"dontlog=****\") != std::string::npos);"
      },
      {
        "sha": "dc7717506a16341b6cb61bab9732eea66c9007f8",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 140,
        "deletions": 9,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772948473df34181535558f6b105ca413730053/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772948473df34181535558f6b105ca413730053/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=2772948473df34181535558f6b105ca413730053",
        "patch": "@@ -269,7 +269,7 @@ class CheckValueTest : public TestChain100Setup\n \n         if (expect.error) {\n             BOOST_CHECK(!success);\n-            BOOST_CHECK_NE(error.find(expect.error), std::string::npos);\n+            BOOST_CHECK_EQUAL(error, expect.error);\n         } else {\n             BOOST_CHECK(success);\n             BOOST_CHECK_EQUAL(error, \"\");\n@@ -279,16 +279,16 @@ class CheckValueTest : public TestChain100Setup\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), \"zzzzz\");\n         } else if (expect.string_value) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), expect.string_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArg(\"-value\", \"zzzzz\"), std::logic_error);\n         }\n \n         if (expect.default_int) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), 99999);\n         } else if (expect.int_value) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), *expect.int_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArg(\"-value\", 99999), std::logic_error);\n         }\n \n         if (expect.default_bool) {\n@@ -297,15 +297,16 @@ class CheckValueTest : public TestChain100Setup\n         } else if (expect.bool_value) {\n             BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), *expect.bool_value);\n             BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), *expect.bool_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetBoolArg(\"-value\", false), std::logic_error);\n+            BOOST_CHECK_THROW(test.GetBoolArg(\"-value\", true), std::logic_error);\n         }\n \n         if (expect.list_value) {\n             auto l = test.GetArgs(\"-value\");\n             BOOST_CHECK_EQUAL_COLLECTIONS(l.begin(), l.end(), expect.list_value->begin(), expect.list_value->end());\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArgs(\"-value\"), std::logic_error);\n         }\n     }\n };\n@@ -327,6 +328,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(util_CheckBoolStringsNotSpecial, CheckValueTest)\n+{\n+    using M = ArgsManager;\n+\n+    // Check that \"true\" and \"false\" strings are rejected for ALLOW_BOOL\n+    // arguments. We might want to change this behavior in the future and\n+    // interpret strings like \"true\" as true, and strings like \"false\" as false.\n+    // But because it would be confusing to interpret \"true\" as true for\n+    // ALLOW_BOOL arguments but false for ALLOW_ANY arguments (because\n+    // atoi(\"true\")==0), for now it is safer to just disallow strings like\n+    // \"true\" and \"false\" for ALLOW_BOOL arguments as long as there are still\n+    // other boolean arguments interpreted with ALLOW_ANY.\n+    CheckValue(M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to 0 or 1.\"));\n+\n+    // Similarly, check \"true\" and \"false\" are not treated specially when\n+    // ALLOW_BOOL is combined with ALLOW_INT and ALLOW_STRING. (The only\n+    // difference ALLOW_BOOL makes for int and string arguments is that it\n+    // enables \"-foo\" syntax with no equal sign assigning explicit int or string\n+    // values. This is useful for arguments like \"-upgradewallet\" or \"-listen\"\n+    // that primarily toggle features on and off, but also accept optional int\n+    // or string values to influence behavior.)\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=true\", Expect{\"true\"}.String(\"true\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=false\", Expect{\"false\"}.String(\"false\").DefaultBool());\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_CheckSingleValue)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-single\", ArgsManager::ALLOW_INT}});\n+    std::istringstream stream(\"single=1\\nsingle=2\\n\");\n+    std::string error;\n+    BOOST_CHECK(!test.ReadConfigStream(stream, \"file.conf\", error));\n+    BOOST_CHECK_EQUAL(error, \"Multiple values specified for -single in same section of config file.\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_CheckBadFlagCombinations)\n+{\n+    TestArgsManager test;\n+    using M = ArgsManager;\n+    BOOST_CHECK_THROW(test.AddArg(\"-arg1\", \"name\", M::ALLOW_INT | M::ALLOW_ANY, OptionsCategory::OPTIONS), std::logic_error);\n+    BOOST_CHECK_THROW(test.AddArg(\"-arg2\", \"name\", M::ALLOW_INT | M::ALLOW_STRING, OptionsCategory::OPTIONS), std::logic_error);\n }\n \n BOOST_AUTO_TEST_CASE(util_ParseParameters)"
      },
      {
        "sha": "f45469b9b372a3808cec0c4ca1315061a3e4ee88",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 143,
        "deletions": 51,
        "changes": 194,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772948473df34181535558f6b105ca413730053/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772948473df34181535558f6b105ca413730053/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=2772948473df34181535558f6b105ca413730053",
        "patch": "@@ -66,6 +66,7 @@\n #endif\n \n #include <boost/algorithm/string/replace.hpp>\n+#include <optional>\n #include <thread>\n #include <typeinfo>\n #include <univalue.h>\n@@ -180,26 +181,17 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n- *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n+ * Interpret key portion of a \"key=value\" config string. Strip \"section.\" and\n+ * \"no\" prefixes from the key if they are present, updating the section output\n+ * argument if a section was found, and returning false if the key was negated,\n+ * true otherwise.\n  *\n  * Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+static bool InterpretKey(std::string& section, std::string& key)\n {\n     // Split section name from key name for keys like \"testnet.foo\" or \"regtest.bar\"\n     size_t option_index = key.find('.');\n@@ -209,30 +201,98 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW_* type checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that\n+ * isn't allowed by the flags, otherwise return the parsed value.\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n-{\n-    if (val.isBool() && !(flags & ArgsManager::ALLOW_BOOL)) {\n-        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n-        return false;\n+static std::optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string* value,\n+    bool negated,\n+    unsigned int flags,\n+    std::string& error)\n+{\n+    // If validation was disabled with ALLOW_ANY, check for negation, but\n+    // otherwise always return the value as a string.\n+    if (flags & ArgsManager::ALLOW_ANY) {\n+        if (negated) {\n+            // Double negatives like -nokey=0 are supported (but discouraged)\n+            if (value && !InterpretBool(*value)) {\n+                LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, *value);\n+                return util::SettingsValue{true};\n+            }\n+            return util::SettingsValue{false};\n+        }\n+        return util::SettingsValue{value ? *value : \"\"};\n     }\n-    return true;\n+\n+    // Return negated -nokey and -nokey=1 settings as false values.\n+    if (negated) {\n+        if (value && *value != \"1\") {\n+            error = strprintf(\"Can not negate -%s at the same time as setting value '%s'.\", key, *value);\n+            return std::nullopt;\n+        }\n+        return util::SettingsValue{false};\n+    }\n+\n+    // Allow -key=\"\" settings. These are useful on the command line to reset\n+    // settings specified in the config file back to default values.\n+    if (value && value->empty()) return util::SettingsValue{\"\"};\n+\n+    // Return parsed bool, int, and string values if allowed by flags.\n+    int64_t parsed_int;\n+    if ((flags & ArgsManager::ALLOW_STRING) && value) return util::SettingsValue{*value};\n+    if ((flags & ArgsManager::ALLOW_INT) && value && ParseInt64(*value, &parsed_int)) return util::SettingsValue{parsed_int};\n+    if ((flags & ArgsManager::ALLOW_BOOL) && value && *value == \"0\") return util::SettingsValue{false};\n+    if ((flags & ArgsManager::ALLOW_BOOL) && (!value || *value == \"1\")) return util::SettingsValue{true};\n+\n+    // If didn't return above, settings value is not valid for this key.\n+    if (value) {\n+        error = strprintf(\"Can not set -%s value to '%s'\", key, *value);\n+    } else {\n+        error = strprintf(\"Can not set -%s with no value\", key);\n+    }\n+    error = strprintf(\"%s. %s\", error,\n+                      (flags & ArgsManager::ALLOW_STRING) ? \"It must be set to a string.\" :\n+                      (flags & ArgsManager::ALLOW_INT) ? \"It must be set to an integer.\" :\n+                      (flags & ArgsManager::ALLOW_BOOL) ? \"It must be set to 0 or 1.\" :\n+                      \"It must be left unset.\");\n+    return std::nullopt;\n+}\n+\n+//! Return bool if setting is a bool or number, otherwise return default_value.\n+//! Optionally coerce strings settings as well.\n+static inline bool ValueToBool(const util::SettingsValue& value, bool default_value, bool coerce)\n+{\n+    if (coerce && value.isStr()) return InterpretBool(value.get_str());\n+    return value.isBool() ? value.get_bool() : value.isNum() ? value.get_int64() != 0 : default_value;\n+}\n+\n+//! Return int64 if setting is a number or bool, otherwise return default_value.\n+//! Optionally coerce string settings as well.\n+static inline int64_t ValueToInt64(const util::SettingsValue& value, int64_t default_value, bool coerce)\n+{\n+    if (coerce && value.isStr()) return atoi64(value.get_str());\n+    return value.isNum() ? value.get_int64() : value.isFalse() ? 0 : value.isTrue() ? 1 : default_value;\n+}\n+\n+//! Return string if setting is a nonempty string (-setting=abc), \"\" if setting\n+//! is false (-nosetting), otherwise return default_value. Optionally coerce\n+//! bool and number settings to strings as well.\n+static inline std::string ValueToString(const util::SettingsValue& value,\n+    const std::string& default_value,\n+    bool coerce)\n+{\n+    if (coerce && value.isBool()) return value.get_bool() ? \"1\" : \"0\";\n+    if (coerce && value.isNum()) return value.getValStr();\n+    if (coerce && value.isStr()) return value.get_str();\n+    return value.isStr() && !value.get_str().empty() ? value.get_str() : value.isFalse() ? \"\" : default_value;\n }\n \n namespace {\n@@ -313,7 +373,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n #endif\n \n         if (key == \"-\") break; //bitcoin-tx using stdin\n-        std::string val;\n+        std::optional<std::string> val;\n         size_t is_index = key.find('=');\n         if (is_index != std::string::npos) {\n             val = key.substr(is_index + 1);\n@@ -349,20 +409,21 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         // Transform -foo to foo\n         key.erase(0, 1);\n         std::string section;\n-        util::SettingsValue value = InterpretOption(section, key, val);\n+        bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n \n         // Unknown command line options and command line options with dot\n-        // characters (which are returned from InterpretOption with nonempty\n+        // characters (which are returned from InterpretKey with nonempty\n         // section strings) are not valid.\n         if (!flags || !section.empty()) {\n             error = strprintf(\"Invalid parameter %s\", argv[i]);\n             return false;\n         }\n \n-        if (!CheckValid(key, value, *flags, error)) return false;\n+        std::optional<util::SettingsValue> value = InterpretValue(key, val ? &*val : nullptr, negated, *flags, error);\n+        if (!value) return false;\n \n-        m_settings.command_line_options[key].push_back(value);\n+        m_settings.command_line_options[key].push_back(*value);\n     }\n \n     // we do not allow -includeconf from command line\n@@ -386,6 +447,21 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n     return std::nullopt;\n }\n \n+bool ArgsManager::CheckArgFlags(const std::string& name,\n+    unsigned int require,\n+    unsigned int forbid,\n+    const char* context) const\n+{\n+    std::optional<unsigned int> flags = GetArgFlags(name);\n+    if (!flags || *flags & ArgsManager::ALLOW_ANY) return false;\n+    if ((*flags & require) != require || (*flags & forbid) != 0) {\n+        throw std::logic_error(\n+            strprintf(\"Bug: Can't call %s on arg %s registered with flags 0x%08x (requires 0x%x, disallows 0x%x)\",\n+                context, name, *flags, require, forbid));\n+    }\n+    return true;\n+}\n+\n const fs::path& ArgsManager::GetBlocksDirPath() const\n {\n     LOCK(cs_args);\n@@ -474,9 +550,10 @@ std::optional<const ArgsManager::Command> ArgsManager::GetCommand() const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_STRING | ALLOW_LIST, /* forbid= */ 0, __func__);\n     std::vector<std::string> result;\n     for (const util::SettingsValue& value : GetSettingsList(strArg)) {\n-        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n+        result.push_back(ValueToString(value, \"\", coerce));\n     }\n     return result;\n }\n@@ -544,7 +621,7 @@ bool ArgsManager::ReadSettingsFile(std::vector<std::string>* errors)\n     for (const auto& setting : m_settings.rw_settings) {\n         std::string section;\n         std::string key = setting.first;\n-        (void)InterpretOption(section, key, /* value */ {}); // Split setting key into section and argname\n+        (void)InterpretKey(section, key); // Split setting key into section and argname\n         if (!GetArgFlags('-' + key)) {\n             LogPrintf(\"Ignoring unknown rw_settings value %s\\n\", setting.first);\n         }\n@@ -579,20 +656,20 @@ bool ArgsManager::IsArgNegated(const std::string& strArg) const\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_STRING, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToString(GetSetting(strArg), strDefault, coerce);\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_INT, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToInt64(GetSetting(strArg), nDefault, coerce);\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ 0, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToBool(GetSetting(strArg), fDefault, coerce);\n }\n \n bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)\n@@ -605,15 +682,17 @@ bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strVa\n \n bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n-    if (fValue)\n-        return SoftSetArg(strArg, std::string(\"1\"));\n-    else\n-        return SoftSetArg(strArg, std::string(\"0\"));\n+    LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_BOOL, /* forbid= */ ALLOW_LIST, __func__);\n+    if (IsArgSet(strArg)) return false;\n+    m_settings.forced_settings[SettingName(strArg)] = fValue;\n+    return true;\n }\n \n void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_STRING, /* forbid= */ 0, __func__);\n     m_settings.forced_settings[SettingName(strArg)] = strValue;\n }\n \n@@ -648,6 +727,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_{BOOL|INT|STRING} flags would have no effect with \"\n+                                         \"ALLOW_ANY present (ALLOW_ANY disables validation)\", arg_name));\n+    }\n+\n+    if ((flags & ALLOW_INT) && (flags & ALLOW_STRING)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_INT would have no effect with ALLOW_STRING present \"\n+                                         \"(any valid integer is also a valid string)\", arg_name));\n+    }\n }\n \n void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)\n@@ -866,13 +955,16 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n     for (const std::pair<std::string, std::string>& option : options) {\n         std::string section;\n         std::string key = option.first;\n-        util::SettingsValue value = InterpretOption(section, key, option.second);\n+        bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n-            if (!CheckValid(key, value, *flags, error)) {\n+            if (!(*flags & (ALLOW_ANY | ALLOW_LIST)) && m_settings.ro_config[section].count(key)) {\n+                error = strprintf(\"Multiple values specified for -%s in same section of config file.\", key);\n                 return false;\n             }\n-            m_settings.ro_config[section][key].push_back(value);\n+            std::optional<util::SettingsValue> value = InterpretValue(key, &option.second, negated, *flags, error);\n+            if (!value) return false;\n+            m_settings.ro_config[section][key].push_back(*value);\n         } else {\n             if (ignore_invalid_keys) {\n                 LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);\n@@ -979,7 +1071,7 @@ std::string ArgsManager::GetChainName() const\n         util::SettingsValue value = util::GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n             /* ignore_default_section_config= */ false,\n             /* get_chain_name= */ true);\n-        return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+        return ValueToBool(value, /* default= */ false, /* coerce= */ true);\n     };\n \n     const bool fRegTest = get_net(\"-regtest\");"
      },
      {
        "sha": "cc264d7de7911c4a48fb1c890dd3b8d28f2b263b",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 25,
        "deletions": 8,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772948473df34181535558f6b105ca413730053/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772948473df34181535558f6b105ca413730053/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=2772948473df34181535558f6b105ca413730053",
        "patch": "@@ -160,12 +160,17 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation\n+        ALLOW_BOOL = 0x02,   //!< allow -foo=1, -foo=0, -foo, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_INT = 0x04,    //!< allow -foo=123, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_STRING = 0x08, //!< allow -foo=abc, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_LIST = 0x10,   //!< allow multiple -foo=bar -foo=baz values\n+\n         DEBUG_ONLY = 0x100,\n         /* Some options would cause cross-contamination if values for\n          * mainnet were used while running on regtest/testnet (or vice-versa).\n@@ -210,9 +215,10 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n-     * argument was passed.\n+     * Result will be null if setting was unset, true if \"-setting\" argument was\n+     * passed, false if \"-nosetting\" argument was passed, and a string, integer,\n+     * or boolean depending on ALLOW_{BOOL|INT|STRING} flags if a\n+     * \"-setting=value\" argument was passed.\n      */\n     util::SettingsValue GetSetting(const std::string& arg) const;\n \n@@ -221,6 +227,17 @@ class ArgsManager\n      */\n     std::vector<util::SettingsValue> GetSettingsList(const std::string& arg) const;\n \n+    /**\n+     * Check that arg has the right flags for use in a given context. Raises\n+     * logic_error if this isn't the case, indicating the argument was\n+     * registered with bad AddArg flags.\n+     *\n+     * Returns true if the arg is registered and has checking enabled. Returns\n+     * false if the arg was never registered or checking was disabled with\n+     * ALLOW_ANY.\n+     */\n+    bool CheckArgFlags(const std::string& name, unsigned int require, unsigned int forbid, const char* context) const;\n+\n public:\n     ArgsManager();\n     ~ArgsManager();"
      },
      {
        "sha": "ce7abffabed663cbeb59f5bbcab9b591a1a755e0",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772948473df34181535558f6b105ca413730053/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772948473df34181535558f6b105ca413730053/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=2772948473df34181535558f6b105ca413730053",
        "patch": "@@ -83,7 +83,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n #endif\n \n #ifdef USE_SQLITE\n-    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n #else\n     argsman.AddHiddenArgs({\"-unsafesqlitesync\"});\n #endif"
      }
    ]
  },
  {
    "sha": "27dfafa719ac3fa3d64183b912a400625b9662b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2RmYWZhNzE5YWMzZmEzZDY0MTgzYjkxMmE0MDA2MjViOTY2MmI4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-02T14:53:05Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-02T14:53:05Z"
      },
      "message": "Merge remote-tracking branch 'origin/pull/16545/head'",
      "tree": {
        "sha": "13c8693fc447e3552131c2fd1a8b553653ebc173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13c8693fc447e3552131c2fd1a8b553653ebc173"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27dfafa719ac3fa3d64183b912a400625b9662b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27dfafa719ac3fa3d64183b912a400625b9662b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27dfafa719ac3fa3d64183b912a400625b9662b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27dfafa719ac3fa3d64183b912a400625b9662b8/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7d17daa5cd8bf6398d5f8d7e77290009407d6ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d17daa5cd8bf6398d5f8d7e77290009407d6ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d17daa5cd8bf6398d5f8d7e77290009407d6ea"
      },
      {
        "sha": "2772948473df34181535558f6b105ca413730053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2772948473df34181535558f6b105ca413730053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2772948473df34181535558f6b105ca413730053"
      }
    ],
    "stats": {
      "total": 427,
      "additions": 348,
      "deletions": 79
    },
    "files": [
      {
        "sha": "bd87546a1f758324e3d0d0704f1db39855ffe006",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27dfafa719ac3fa3d64183b912a400625b9662b8/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27dfafa719ac3fa3d64183b912a400625b9662b8/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=27dfafa719ac3fa3d64183b912a400625b9662b8",
        "patch": "@@ -24,7 +24,7 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n }\n "
      },
      {
        "sha": "91eae9c5a39b7302910fe53e0ccc97655c983a5f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27dfafa719ac3fa3d64183b912a400625b9662b8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27dfafa719ac3fa3d64183b912a400625b9662b8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=27dfafa719ac3fa3d64183b912a400625b9662b8",
        "patch": "@@ -464,7 +464,7 @@ void SetupServerArgs(NodeContext& node)\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n #ifdef USE_NATPMP\n-    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #else\n     hidden_args.emplace_back(\"-natpmp\");\n #endif // USE_NATPMP"
      },
      {
        "sha": "c5d5eea38ee91d1152e86366d613423961717440",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 7,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27dfafa719ac3fa3d64183b912a400625b9662b8/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27dfafa719ac3fa3d64183b912a400625b9662b8/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=27dfafa719ac3fa3d64183b912a400625b9662b8",
        "patch": "@@ -38,13 +38,21 @@ FUZZ_TARGET(system)\n                 args_manager.SelectConfigNetwork(fuzzed_data_provider.ConsumeRandomLengthString(16));\n             },\n             [&] {\n-                args_manager.SoftSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                // Avoid Can't call SoftSetArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                } catch (const std::logic_error&) {\n+                }\n             },\n             [&] {\n                 args_manager.ForceSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n             },\n             [&] {\n-                args_manager.SoftSetBoolArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeBool());\n+                // Avoid Can't call SoftSetBoolArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetBoolArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeBool());\n+                } catch (const std::logic_error&) {\n+                }\n             },\n             [&] {\n                 const OptionsCategory options_category = fuzzed_data_provider.PickValueInArray<OptionsCategory>({OptionsCategory::OPTIONS, OptionsCategory::CONNECTION, OptionsCategory::WALLET, OptionsCategory::WALLET_DEBUG_TEST, OptionsCategory::ZMQ, OptionsCategory::DEBUG_TEST, OptionsCategory::CHAINPARAMS, OptionsCategory::NODE_RELAY, OptionsCategory::BLOCK_CREATION, OptionsCategory::RPC, OptionsCategory::GUI, OptionsCategory::COMMANDS, OptionsCategory::REGISTER_COMMANDS, OptionsCategory::HIDDEN});\n@@ -54,7 +62,16 @@ FUZZ_TARGET(system)\n                 if (args_manager.GetArgFlags(argument_name) != std::nullopt) {\n                     return;\n                 }\n-                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND, options_category);\n+                unsigned int flags = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+                // Avoid hitting \"ALLOW_{BOOL|INT|STRING} flags would have no effect with ALLOW_ANY present (ALLOW_ANY disables validation)\"\n+                if (flags & ArgsManager::ALLOW_ANY) {\n+                    flags &= ~(ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT | ArgsManager::ALLOW_STRING);\n+                }\n+                // Avoid hitting \"ALLOW_INT would have no effect with ALLOW_STRING present (any valid integer is also a valid string)\"\n+                if (flags & ArgsManager::ALLOW_STRING) {\n+                    flags &= ~ArgsManager::ALLOW_INT;\n+                }\n+                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), flags & ~ArgsManager::COMMAND, options_category);\n             },\n             [&] {\n                 // Avoid hitting:\n@@ -96,11 +113,23 @@ FUZZ_TARGET(system)\n     const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const bool b = fuzzed_data_provider.ConsumeBool();\n \n-    (void)args_manager.GetArg(s1, i64);\n-    (void)args_manager.GetArg(s1, s2);\n+    try {\n+        (void)args_manager.GetArg(s1, i64);\n+    } catch (const std::logic_error&) {\n+    }\n+    try {\n+        (void)args_manager.GetArg(s1, s2);\n+    } catch (const std::logic_error&) {\n+    }\n     (void)args_manager.GetArgFlags(s1);\n-    (void)args_manager.GetArgs(s1);\n-    (void)args_manager.GetBoolArg(s1, b);\n+    try {\n+        (void)args_manager.GetArgs(s1);\n+    } catch (const std::logic_error&) {\n+    }\n+    try {\n+        (void)args_manager.GetBoolArg(s1, b);\n+    } catch (const std::logic_error&) {\n+    }\n     try {\n         (void)args_manager.GetChainName();\n     } catch (const std::runtime_error&) {"
      },
      {
        "sha": "53f6b69598dd10010ac9e6102f7dca1526f46fcc",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27dfafa719ac3fa3d64183b912a400625b9662b8/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27dfafa719ac3fa3d64183b912a400625b9662b8/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=27dfafa719ac3fa3d64183b912a400625b9662b8",
        "patch": "@@ -213,7 +213,7 @@ BOOST_AUTO_TEST_CASE(logargs)\n \n     LogInstance().DeleteCallback(print_connection);\n     // Check that what should appear does, and what shouldn't doesn't.\n-    BOOST_CHECK(str.find(\"Command-line arg: okaylog-bool=\\\"\\\"\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"Command-line arg: okaylog-bool=true\") != std::string::npos);\n     BOOST_CHECK(str.find(\"Command-line arg: okaylog-negbool=false\") != std::string::npos);\n     BOOST_CHECK(str.find(\"Command-line arg: okaylog=\\\"public\\\"\") != std::string::npos);\n     BOOST_CHECK(str.find(\"dontlog=****\") != std::string::npos);"
      },
      {
        "sha": "dc7717506a16341b6cb61bab9732eea66c9007f8",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 140,
        "deletions": 9,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27dfafa719ac3fa3d64183b912a400625b9662b8/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27dfafa719ac3fa3d64183b912a400625b9662b8/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=27dfafa719ac3fa3d64183b912a400625b9662b8",
        "patch": "@@ -269,7 +269,7 @@ class CheckValueTest : public TestChain100Setup\n \n         if (expect.error) {\n             BOOST_CHECK(!success);\n-            BOOST_CHECK_NE(error.find(expect.error), std::string::npos);\n+            BOOST_CHECK_EQUAL(error, expect.error);\n         } else {\n             BOOST_CHECK(success);\n             BOOST_CHECK_EQUAL(error, \"\");\n@@ -279,16 +279,16 @@ class CheckValueTest : public TestChain100Setup\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), \"zzzzz\");\n         } else if (expect.string_value) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), expect.string_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArg(\"-value\", \"zzzzz\"), std::logic_error);\n         }\n \n         if (expect.default_int) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), 99999);\n         } else if (expect.int_value) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), *expect.int_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArg(\"-value\", 99999), std::logic_error);\n         }\n \n         if (expect.default_bool) {\n@@ -297,15 +297,16 @@ class CheckValueTest : public TestChain100Setup\n         } else if (expect.bool_value) {\n             BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), *expect.bool_value);\n             BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), *expect.bool_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetBoolArg(\"-value\", false), std::logic_error);\n+            BOOST_CHECK_THROW(test.GetBoolArg(\"-value\", true), std::logic_error);\n         }\n \n         if (expect.list_value) {\n             auto l = test.GetArgs(\"-value\");\n             BOOST_CHECK_EQUAL_COLLECTIONS(l.begin(), l.end(), expect.list_value->begin(), expect.list_value->end());\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArgs(\"-value\"), std::logic_error);\n         }\n     }\n };\n@@ -327,6 +328,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(util_CheckBoolStringsNotSpecial, CheckValueTest)\n+{\n+    using M = ArgsManager;\n+\n+    // Check that \"true\" and \"false\" strings are rejected for ALLOW_BOOL\n+    // arguments. We might want to change this behavior in the future and\n+    // interpret strings like \"true\" as true, and strings like \"false\" as false.\n+    // But because it would be confusing to interpret \"true\" as true for\n+    // ALLOW_BOOL arguments but false for ALLOW_ANY arguments (because\n+    // atoi(\"true\")==0), for now it is safer to just disallow strings like\n+    // \"true\" and \"false\" for ALLOW_BOOL arguments as long as there are still\n+    // other boolean arguments interpreted with ALLOW_ANY.\n+    CheckValue(M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to 0 or 1.\"));\n+\n+    // Similarly, check \"true\" and \"false\" are not treated specially when\n+    // ALLOW_BOOL is combined with ALLOW_INT and ALLOW_STRING. (The only\n+    // difference ALLOW_BOOL makes for int and string arguments is that it\n+    // enables \"-foo\" syntax with no equal sign assigning explicit int or string\n+    // values. This is useful for arguments like \"-upgradewallet\" or \"-listen\"\n+    // that primarily toggle features on and off, but also accept optional int\n+    // or string values to influence behavior.)\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=true\", Expect{\"true\"}.String(\"true\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=false\", Expect{\"false\"}.String(\"false\").DefaultBool());\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_CheckSingleValue)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-single\", ArgsManager::ALLOW_INT}});\n+    std::istringstream stream(\"single=1\\nsingle=2\\n\");\n+    std::string error;\n+    BOOST_CHECK(!test.ReadConfigStream(stream, \"file.conf\", error));\n+    BOOST_CHECK_EQUAL(error, \"Multiple values specified for -single in same section of config file.\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_CheckBadFlagCombinations)\n+{\n+    TestArgsManager test;\n+    using M = ArgsManager;\n+    BOOST_CHECK_THROW(test.AddArg(\"-arg1\", \"name\", M::ALLOW_INT | M::ALLOW_ANY, OptionsCategory::OPTIONS), std::logic_error);\n+    BOOST_CHECK_THROW(test.AddArg(\"-arg2\", \"name\", M::ALLOW_INT | M::ALLOW_STRING, OptionsCategory::OPTIONS), std::logic_error);\n }\n \n BOOST_AUTO_TEST_CASE(util_ParseParameters)"
      },
      {
        "sha": "f45469b9b372a3808cec0c4ca1315061a3e4ee88",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 143,
        "deletions": 51,
        "changes": 194,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27dfafa719ac3fa3d64183b912a400625b9662b8/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27dfafa719ac3fa3d64183b912a400625b9662b8/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=27dfafa719ac3fa3d64183b912a400625b9662b8",
        "patch": "@@ -66,6 +66,7 @@\n #endif\n \n #include <boost/algorithm/string/replace.hpp>\n+#include <optional>\n #include <thread>\n #include <typeinfo>\n #include <univalue.h>\n@@ -180,26 +181,17 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n- *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n+ * Interpret key portion of a \"key=value\" config string. Strip \"section.\" and\n+ * \"no\" prefixes from the key if they are present, updating the section output\n+ * argument if a section was found, and returning false if the key was negated,\n+ * true otherwise.\n  *\n  * Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+static bool InterpretKey(std::string& section, std::string& key)\n {\n     // Split section name from key name for keys like \"testnet.foo\" or \"regtest.bar\"\n     size_t option_index = key.find('.');\n@@ -209,30 +201,98 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW_* type checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that\n+ * isn't allowed by the flags, otherwise return the parsed value.\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n-{\n-    if (val.isBool() && !(flags & ArgsManager::ALLOW_BOOL)) {\n-        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n-        return false;\n+static std::optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string* value,\n+    bool negated,\n+    unsigned int flags,\n+    std::string& error)\n+{\n+    // If validation was disabled with ALLOW_ANY, check for negation, but\n+    // otherwise always return the value as a string.\n+    if (flags & ArgsManager::ALLOW_ANY) {\n+        if (negated) {\n+            // Double negatives like -nokey=0 are supported (but discouraged)\n+            if (value && !InterpretBool(*value)) {\n+                LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, *value);\n+                return util::SettingsValue{true};\n+            }\n+            return util::SettingsValue{false};\n+        }\n+        return util::SettingsValue{value ? *value : \"\"};\n     }\n-    return true;\n+\n+    // Return negated -nokey and -nokey=1 settings as false values.\n+    if (negated) {\n+        if (value && *value != \"1\") {\n+            error = strprintf(\"Can not negate -%s at the same time as setting value '%s'.\", key, *value);\n+            return std::nullopt;\n+        }\n+        return util::SettingsValue{false};\n+    }\n+\n+    // Allow -key=\"\" settings. These are useful on the command line to reset\n+    // settings specified in the config file back to default values.\n+    if (value && value->empty()) return util::SettingsValue{\"\"};\n+\n+    // Return parsed bool, int, and string values if allowed by flags.\n+    int64_t parsed_int;\n+    if ((flags & ArgsManager::ALLOW_STRING) && value) return util::SettingsValue{*value};\n+    if ((flags & ArgsManager::ALLOW_INT) && value && ParseInt64(*value, &parsed_int)) return util::SettingsValue{parsed_int};\n+    if ((flags & ArgsManager::ALLOW_BOOL) && value && *value == \"0\") return util::SettingsValue{false};\n+    if ((flags & ArgsManager::ALLOW_BOOL) && (!value || *value == \"1\")) return util::SettingsValue{true};\n+\n+    // If didn't return above, settings value is not valid for this key.\n+    if (value) {\n+        error = strprintf(\"Can not set -%s value to '%s'\", key, *value);\n+    } else {\n+        error = strprintf(\"Can not set -%s with no value\", key);\n+    }\n+    error = strprintf(\"%s. %s\", error,\n+                      (flags & ArgsManager::ALLOW_STRING) ? \"It must be set to a string.\" :\n+                      (flags & ArgsManager::ALLOW_INT) ? \"It must be set to an integer.\" :\n+                      (flags & ArgsManager::ALLOW_BOOL) ? \"It must be set to 0 or 1.\" :\n+                      \"It must be left unset.\");\n+    return std::nullopt;\n+}\n+\n+//! Return bool if setting is a bool or number, otherwise return default_value.\n+//! Optionally coerce strings settings as well.\n+static inline bool ValueToBool(const util::SettingsValue& value, bool default_value, bool coerce)\n+{\n+    if (coerce && value.isStr()) return InterpretBool(value.get_str());\n+    return value.isBool() ? value.get_bool() : value.isNum() ? value.get_int64() != 0 : default_value;\n+}\n+\n+//! Return int64 if setting is a number or bool, otherwise return default_value.\n+//! Optionally coerce string settings as well.\n+static inline int64_t ValueToInt64(const util::SettingsValue& value, int64_t default_value, bool coerce)\n+{\n+    if (coerce && value.isStr()) return atoi64(value.get_str());\n+    return value.isNum() ? value.get_int64() : value.isFalse() ? 0 : value.isTrue() ? 1 : default_value;\n+}\n+\n+//! Return string if setting is a nonempty string (-setting=abc), \"\" if setting\n+//! is false (-nosetting), otherwise return default_value. Optionally coerce\n+//! bool and number settings to strings as well.\n+static inline std::string ValueToString(const util::SettingsValue& value,\n+    const std::string& default_value,\n+    bool coerce)\n+{\n+    if (coerce && value.isBool()) return value.get_bool() ? \"1\" : \"0\";\n+    if (coerce && value.isNum()) return value.getValStr();\n+    if (coerce && value.isStr()) return value.get_str();\n+    return value.isStr() && !value.get_str().empty() ? value.get_str() : value.isFalse() ? \"\" : default_value;\n }\n \n namespace {\n@@ -313,7 +373,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n #endif\n \n         if (key == \"-\") break; //bitcoin-tx using stdin\n-        std::string val;\n+        std::optional<std::string> val;\n         size_t is_index = key.find('=');\n         if (is_index != std::string::npos) {\n             val = key.substr(is_index + 1);\n@@ -349,20 +409,21 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         // Transform -foo to foo\n         key.erase(0, 1);\n         std::string section;\n-        util::SettingsValue value = InterpretOption(section, key, val);\n+        bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n \n         // Unknown command line options and command line options with dot\n-        // characters (which are returned from InterpretOption with nonempty\n+        // characters (which are returned from InterpretKey with nonempty\n         // section strings) are not valid.\n         if (!flags || !section.empty()) {\n             error = strprintf(\"Invalid parameter %s\", argv[i]);\n             return false;\n         }\n \n-        if (!CheckValid(key, value, *flags, error)) return false;\n+        std::optional<util::SettingsValue> value = InterpretValue(key, val ? &*val : nullptr, negated, *flags, error);\n+        if (!value) return false;\n \n-        m_settings.command_line_options[key].push_back(value);\n+        m_settings.command_line_options[key].push_back(*value);\n     }\n \n     // we do not allow -includeconf from command line\n@@ -386,6 +447,21 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n     return std::nullopt;\n }\n \n+bool ArgsManager::CheckArgFlags(const std::string& name,\n+    unsigned int require,\n+    unsigned int forbid,\n+    const char* context) const\n+{\n+    std::optional<unsigned int> flags = GetArgFlags(name);\n+    if (!flags || *flags & ArgsManager::ALLOW_ANY) return false;\n+    if ((*flags & require) != require || (*flags & forbid) != 0) {\n+        throw std::logic_error(\n+            strprintf(\"Bug: Can't call %s on arg %s registered with flags 0x%08x (requires 0x%x, disallows 0x%x)\",\n+                context, name, *flags, require, forbid));\n+    }\n+    return true;\n+}\n+\n const fs::path& ArgsManager::GetBlocksDirPath() const\n {\n     LOCK(cs_args);\n@@ -474,9 +550,10 @@ std::optional<const ArgsManager::Command> ArgsManager::GetCommand() const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_STRING | ALLOW_LIST, /* forbid= */ 0, __func__);\n     std::vector<std::string> result;\n     for (const util::SettingsValue& value : GetSettingsList(strArg)) {\n-        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n+        result.push_back(ValueToString(value, \"\", coerce));\n     }\n     return result;\n }\n@@ -544,7 +621,7 @@ bool ArgsManager::ReadSettingsFile(std::vector<std::string>* errors)\n     for (const auto& setting : m_settings.rw_settings) {\n         std::string section;\n         std::string key = setting.first;\n-        (void)InterpretOption(section, key, /* value */ {}); // Split setting key into section and argname\n+        (void)InterpretKey(section, key); // Split setting key into section and argname\n         if (!GetArgFlags('-' + key)) {\n             LogPrintf(\"Ignoring unknown rw_settings value %s\\n\", setting.first);\n         }\n@@ -579,20 +656,20 @@ bool ArgsManager::IsArgNegated(const std::string& strArg) const\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_STRING, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToString(GetSetting(strArg), strDefault, coerce);\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_INT, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToInt64(GetSetting(strArg), nDefault, coerce);\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ 0, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToBool(GetSetting(strArg), fDefault, coerce);\n }\n \n bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)\n@@ -605,15 +682,17 @@ bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strVa\n \n bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n-    if (fValue)\n-        return SoftSetArg(strArg, std::string(\"1\"));\n-    else\n-        return SoftSetArg(strArg, std::string(\"0\"));\n+    LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_BOOL, /* forbid= */ ALLOW_LIST, __func__);\n+    if (IsArgSet(strArg)) return false;\n+    m_settings.forced_settings[SettingName(strArg)] = fValue;\n+    return true;\n }\n \n void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_STRING, /* forbid= */ 0, __func__);\n     m_settings.forced_settings[SettingName(strArg)] = strValue;\n }\n \n@@ -648,6 +727,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_{BOOL|INT|STRING} flags would have no effect with \"\n+                                         \"ALLOW_ANY present (ALLOW_ANY disables validation)\", arg_name));\n+    }\n+\n+    if ((flags & ALLOW_INT) && (flags & ALLOW_STRING)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_INT would have no effect with ALLOW_STRING present \"\n+                                         \"(any valid integer is also a valid string)\", arg_name));\n+    }\n }\n \n void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)\n@@ -866,13 +955,16 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n     for (const std::pair<std::string, std::string>& option : options) {\n         std::string section;\n         std::string key = option.first;\n-        util::SettingsValue value = InterpretOption(section, key, option.second);\n+        bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n-            if (!CheckValid(key, value, *flags, error)) {\n+            if (!(*flags & (ALLOW_ANY | ALLOW_LIST)) && m_settings.ro_config[section].count(key)) {\n+                error = strprintf(\"Multiple values specified for -%s in same section of config file.\", key);\n                 return false;\n             }\n-            m_settings.ro_config[section][key].push_back(value);\n+            std::optional<util::SettingsValue> value = InterpretValue(key, &option.second, negated, *flags, error);\n+            if (!value) return false;\n+            m_settings.ro_config[section][key].push_back(*value);\n         } else {\n             if (ignore_invalid_keys) {\n                 LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);\n@@ -979,7 +1071,7 @@ std::string ArgsManager::GetChainName() const\n         util::SettingsValue value = util::GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n             /* ignore_default_section_config= */ false,\n             /* get_chain_name= */ true);\n-        return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+        return ValueToBool(value, /* default= */ false, /* coerce= */ true);\n     };\n \n     const bool fRegTest = get_net(\"-regtest\");"
      },
      {
        "sha": "cc264d7de7911c4a48fb1c890dd3b8d28f2b263b",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 25,
        "deletions": 8,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27dfafa719ac3fa3d64183b912a400625b9662b8/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27dfafa719ac3fa3d64183b912a400625b9662b8/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=27dfafa719ac3fa3d64183b912a400625b9662b8",
        "patch": "@@ -160,12 +160,17 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation\n+        ALLOW_BOOL = 0x02,   //!< allow -foo=1, -foo=0, -foo, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_INT = 0x04,    //!< allow -foo=123, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_STRING = 0x08, //!< allow -foo=abc, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_LIST = 0x10,   //!< allow multiple -foo=bar -foo=baz values\n+\n         DEBUG_ONLY = 0x100,\n         /* Some options would cause cross-contamination if values for\n          * mainnet were used while running on regtest/testnet (or vice-versa).\n@@ -210,9 +215,10 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n-     * argument was passed.\n+     * Result will be null if setting was unset, true if \"-setting\" argument was\n+     * passed, false if \"-nosetting\" argument was passed, and a string, integer,\n+     * or boolean depending on ALLOW_{BOOL|INT|STRING} flags if a\n+     * \"-setting=value\" argument was passed.\n      */\n     util::SettingsValue GetSetting(const std::string& arg) const;\n \n@@ -221,6 +227,17 @@ class ArgsManager\n      */\n     std::vector<util::SettingsValue> GetSettingsList(const std::string& arg) const;\n \n+    /**\n+     * Check that arg has the right flags for use in a given context. Raises\n+     * logic_error if this isn't the case, indicating the argument was\n+     * registered with bad AddArg flags.\n+     *\n+     * Returns true if the arg is registered and has checking enabled. Returns\n+     * false if the arg was never registered or checking was disabled with\n+     * ALLOW_ANY.\n+     */\n+    bool CheckArgFlags(const std::string& name, unsigned int require, unsigned int forbid, const char* context) const;\n+\n public:\n     ArgsManager();\n     ~ArgsManager();"
      },
      {
        "sha": "ce7abffabed663cbeb59f5bbcab9b591a1a755e0",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27dfafa719ac3fa3d64183b912a400625b9662b8/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27dfafa719ac3fa3d64183b912a400625b9662b8/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=27dfafa719ac3fa3d64183b912a400625b9662b8",
        "patch": "@@ -83,7 +83,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n #endif\n \n #ifdef USE_SQLITE\n-    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n #else\n     argsman.AddHiddenArgs({\"-unsafesqlitesync\"});\n #endif"
      }
    ]
  },
  {
    "sha": "4fad5353d5730532a7f59174742f3ad47cf425fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmFkNTM1M2Q1NzMwNTMyYTdmNTkxNzQ3NDJmM2FkNDdjZjQyNWZh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-15T16:12:18Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-02T14:53:05Z"
      },
      "message": "scripted-diff: Add ALLOW_LIST flag to arguments retrieved with GetArgs\n\nThis change has no effect on behavior, and is basically just a\ndocumentation-only change. ALLOW_LIST currently is not checked for or enforced\nat all when ALLOW_ANY is specified.\n\n-BEGIN VERIFY SCRIPT-\nfor f in `git grep -n 'GetArgs(' | grep -v _tests | sed -n 's/.*GetArgs(\"\\([^\"]\\+\\)\".*/\\1/p' | sort -u`; do\n   git grep -l -- \"$f\" | xargs sed -i \"/AddArg(\\\"$f[=\\\"]/ s/ArgsManager::ALLOW_ANY/& | ArgsManager::ALLOW_LIST/g\"\ndone\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "e4cc3c57d94b1324a73c38692be5191f613404dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4cc3c57d94b1324a73c38692be5191f613404dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fad5353d5730532a7f59174742f3ad47cf425fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fad5353d5730532a7f59174742f3ad47cf425fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fad5353d5730532a7f59174742f3ad47cf425fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fad5353d5730532a7f59174742f3ad47cf425fa/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27dfafa719ac3fa3d64183b912a400625b9662b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27dfafa719ac3fa3d64183b912a400625b9662b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27dfafa719ac3fa3d64183b912a400625b9662b8"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "f88cf754523af6efb066f2ac278b2e297ef5b2b7",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fad5353d5730532a7f59174742f3ad47cf425fa/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fad5353d5730532a7f59174742f3ad47cf425fa/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=4fad5353d5730532a7f59174742f3ad47cf425fa",
        "patch": "@@ -26,9 +26,9 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n \n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for 'create'\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "022ba918e5a9c0e7c58dda6f939967ddcf8c7299",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fad5353d5730532a7f59174742f3ad47cf425fa/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fad5353d5730532a7f59174742f3ad47cf425fa/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=4fad5353d5730532a7f59174742f3ad47cf425fa",
        "patch": "@@ -22,9 +22,9 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n }\n "
      },
      {
        "sha": "6d65bbbd3b9f81ea071f480da7ad696d223b54f2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fad5353d5730532a7f59174742f3ad47cf425fa/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fad5353d5730532a7f59174742f3ad47cf425fa/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4fad5353d5730532a7f59174742f3ad47cf425fa",
        "patch": "@@ -391,7 +391,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-loadblock=<file>\", \"Imports blocks from external file on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-loadblock=<file>\", \"Imports blocks from external file on startup\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -420,15 +420,15 @@ void SetupServerArgs(NodeContext& node)\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n-    argsman.AddArg(\"-addnode=<ip>\", strprintf(\"Add a node to connect to and attempt to keep the connection open (see the addnode RPC help for more info). This option can be specified multiple times to add multiple nodes; connections are limited to %u at a time and are counted separately from the -maxconnections limit.\", MAX_ADDNODE_CONNECTIONS), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-addnode=<ip>\", strprintf(\"Add a node to connect to and attempt to keep the connection open (see the addnode RPC help for more info). This option can be specified multiple times to add multiple nodes; connections are limited to %u at a time and are counted separately from the -maxconnections limit.\", MAX_ADDNODE_CONNECTIONS), ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-asmap=<file>\", strprintf(\"Specify asn mapping used for bucketing of the peers (default: %s). Relative paths will be prefixed by the net-specific datadir location.\", DEFAULT_ASMAP_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-bantime=<n>\", strprintf(\"Default duration (in seconds) of manually configured bans (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-bind=<addr>[:<port>][=onion]\", strprintf(\"Bind to given address and always listen on it (default: 0.0.0.0). Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming Tor connections (default: 127.0.0.1:%u=onion, testnet: 127.0.0.1:%u=onion, signet: 127.0.0.1:%u=onion, regtest: 127.0.0.1:%u=onion)\", defaultBaseParams->OnionServiceTargetPort(), testnetBaseParams->OnionServiceTargetPort(), signetBaseParams->OnionServiceTargetPort(), regtestBaseParams->OnionServiceTargetPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-bind=<addr>[:<port>][=onion]\", strprintf(\"Bind to given address and always listen on it (default: 0.0.0.0). Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming Tor connections (default: 127.0.0.1:%u=onion, testnet: 127.0.0.1:%u=onion, signet: 127.0.0.1:%u=onion, regtest: 127.0.0.1:%u=onion)\", defaultBaseParams->OnionServiceTargetPort(), testnetBaseParams->OnionServiceTargetPort(), signetBaseParams->OnionServiceTargetPort(), regtestBaseParams->OnionServiceTargetPort()), ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dnsseed\", strprintf(\"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)\", DEFAULT_DNSSEED), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-fixedseeds\", strprintf(\"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -441,14 +441,14 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2psam=<ip:port>\", \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with non-onion networks and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with non-onion networks and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port>. Nodes not using the default ports (default: %u, testnet: %u, signet: %u, regtest: %u) are unlikely to get incoming connections.\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-timeout=<n>\", strprintf(\"Specify socket connection timeout in milliseconds. If an initial attempt to connect is unsuccessful after this amount of time, drop it (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify a p2p connection timeout delay in seconds. After connecting to a peer, wait this amount of time before considering disconnection based on inactivity (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n@@ -507,7 +507,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-checkblockindex\", strprintf(\"Do a consistency check for the block tree, chainstate, and other validation data structures occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-checkpoints\", strprintf(\"Enable rejection of any forks from the known historical chain until block %s (default: %u)\", defaultChainParams->Checkpoints().GetHeight(), DEFAULT_CHECKPOINTS_ENABLED), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n@@ -520,7 +520,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printpriority\", strprintf(\"Log transaction fee rate in \" + CURRENCY_UNIT + \"/kvB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n \n     SetupChainParamsBaseOptions(argsman);\n \n@@ -541,17 +541,17 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::BLOCK_CREATION);\n \n     argsman.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, signet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);"
      },
      {
        "sha": "7b934023246b538374cafc7ed95f4c9fee4d7fe0",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fad5353d5730532a7f59174742f3ad47cf425fa/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fad5353d5730532a7f59174742f3ad47cf425fa/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=4fad5353d5730532a7f59174742f3ad47cf425fa",
        "patch": "@@ -64,7 +64,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + LogInstance().LogCategoriesString() + \". This option can be specified multiple times to output multiple categories.\",\n         ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except the specified category. This option can be specified multiple times to exclude multiple categories.\"), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except the specified category. This option can be specified multiple times to exclude multiple categories.\"), ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n #ifdef HAVE_THREAD_LOCAL"
      },
      {
        "sha": "77801612957b2958ae29f65dbf6687f7af8c1a49",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fad5353d5730532a7f59174742f3ad47cf425fa/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fad5353d5730532a7f59174742f3ad47cf425fa/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=4fad5353d5730532a7f59174742f3ad47cf425fa",
        "patch": "@@ -66,7 +66,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n #endif\n     argsman.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-wallet=<path>\", \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-wallet=<path>\", \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n #if HAVE_SYSTEM"
      }
    ]
  },
  {
    "sha": "e9cfbae37e1105b09f6bdeebbc5e931bc1a911af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWNmYmFlMzdlMTEwNWIwOWY2YmRlZWJiYzVlOTMxYmMxYTkxMWFm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-15T21:26:23Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-02T14:53:05Z"
      },
      "message": "refactor: Fix more ALLOW_LIST arguments\n\n- Remove ALLOW_LIST flag from bitcoin-wallet -wallet and -debug arguments. They\n  are list arguments for bitcoind, but single arguments for bitcoin-wallet.\n\n- Add ALLOW_LIST flag to -includeconf arg (missed by scripted diff since it's\n  not accessed through GetArgs)\n\n- Add ALLOW_LIST flag to -debug, -signetchallenge, -whitebind, and -whitelist\n  args (missed by scripted diff due to line breaks in AddArgs calls)\n\n- Add ALLOW_LIST flag to -zmq args (missed by scripted diff due to programmatic\n  GetArgs calls)\n\nThese changes have no effect on behavior. ALLOW_LIST flag isn't currently\nenforced or checked when ALLOW_ANY is also specified.",
      "tree": {
        "sha": "0ae800639cb1443798331ec97b6d7352bc34938a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ae800639cb1443798331ec97b6d7352bc34938a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9cfbae37e1105b09f6bdeebbc5e931bc1a911af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9cfbae37e1105b09f6bdeebbc5e931bc1a911af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9cfbae37e1105b09f6bdeebbc5e931bc1a911af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9cfbae37e1105b09f6bdeebbc5e931bc1a911af/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fad5353d5730532a7f59174742f3ad47cf425fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fad5353d5730532a7f59174742f3ad47cf425fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fad5353d5730532a7f59174742f3ad47cf425fa"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "b84d909b07ee5ed6844ac94e82be7369a08897ba",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9cfbae37e1105b09f6bdeebbc5e931bc1a911af/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9cfbae37e1105b09f6bdeebbc5e931bc1a911af/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=e9cfbae37e1105b09f6bdeebbc5e931bc1a911af",
        "patch": "@@ -26,9 +26,9 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n \n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for 'create'\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "8d979af50acc27a0cbbc7640c9edbe47482e23a2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9cfbae37e1105b09f6bdeebbc5e931bc1a911af/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9cfbae37e1105b09f6bdeebbc5e931bc1a911af/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e9cfbae37e1105b09f6bdeebbc5e931bc1a911af",
        "patch": "@@ -390,7 +390,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-loadblock=<file>\", \"Imports blocks from external file on startup\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -470,20 +470,20 @@ void SetupServerArgs(NodeContext& node)\n #endif // USE_NATPMP\n     argsman.AddArg(\"-whitebind=<[permissions@]addr>\", \"Bind to the given address and add permission flags to the peers connecting to it. \"\n         \"Use [host]:port notation for IPv6. Allowed permissions: \" + Join(NET_PERMISSIONS_DOC, \", \") + \". \"\n-        \"Specify multiple permissions separated by commas (default: download,noban,mempool,relay). Can be specified multiple times.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+        \"Specify multiple permissions separated by commas (default: download,noban,mempool,relay). Can be specified multiple times.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n \n     argsman.AddArg(\"-whitelist=<[permissions@]IP address or network>\", \"Add permission flags to the peers connecting from the given IP address (e.g. 1.2.3.4) or \"\n         \"CIDR-notated network (e.g. 1.2.3.0/24). Uses the same permissions as \"\n-        \"-whitebind. Can be specified multiple times.\" , ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+        \"-whitebind. Can be specified multiple times.\" , ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n \n     g_wallet_init_interface.AddWalletOptions(argsman);\n \n #if ENABLE_ZMQ\n-    argsman.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    argsman.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    argsman.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    argsman.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    argsman.AddArg(\"-zmqpubsequence=<address>\", \"Enable publish hash block and tx sequence in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubsequence=<address>\", \"Enable publish hash block and tx sequence in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n     argsman.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n     argsman.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n     argsman.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);"
      },
      {
        "sha": "764d8379e6acc17569f7c25dc97a9cd26781c01a",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9cfbae37e1105b09f6bdeebbc5e931bc1a911af/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9cfbae37e1105b09f6bdeebbc5e931bc1a911af/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=e9cfbae37e1105b09f6bdeebbc5e931bc1a911af",
        "patch": "@@ -63,7 +63,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + LogInstance().LogCategoriesString() + \". This option can be specified multiple times to output multiple categories.\",\n-        ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+        ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except the specified category. This option can be specified multiple times to exclude multiple categories.\"), ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);"
      }
    ]
  },
  {
    "sha": "776e2d87ebd770e4b47c755351745671688aef62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzZlMmQ4N2ViZDc3MGU0YjQ3Yzc1NTM1MTc0NTY3MTY4OGFlZjYy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-15T21:26:23Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-02T14:53:05Z"
      },
      "message": "Always reject empty -rpcauth=\"\" arguments\n\nPrevious behavior was nonsensical:\n\n- If an empty -rpcauth=\"\" argument was specified as the last command\n  line argument, it would cause all other -rpcauth arguments to be\n  ignored.\n- If an empty -rpcauth=\"\" argument was specified on the command line\n  followed by any nonempty -rpcauth argument, it would cause an error.\n- If an empty \"rpcauth=\" line was specified after non-empty rpcauth line\n  it would cause an error.\n- If an empty \"rpcauth=\" line in a config file was the entry in the\n  config file it would cause all rpcauth entries to be ignored, unless\n  the last command line argument was a nonempty -rpcauth argument, in\n  which case it would be ignored.\n\nNew behavior is simple:\n\n- If an empty \"rpcauth=\" config line or -rpcauth=\"\" command line\n  argument is used it will cause an error",
      "tree": {
        "sha": "d0f6816a0308d52c885f9124036747463b862911",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0f6816a0308d52c885f9124036747463b862911"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/776e2d87ebd770e4b47c755351745671688aef62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/776e2d87ebd770e4b47c755351745671688aef62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/776e2d87ebd770e4b47c755351745671688aef62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/776e2d87ebd770e4b47c755351745671688aef62/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9cfbae37e1105b09f6bdeebbc5e931bc1a911af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9cfbae37e1105b09f6bdeebbc5e931bc1a911af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9cfbae37e1105b09f6bdeebbc5e931bc1a911af"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a0f1d40918b110c2fb233555f22b4319b316fb1d",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/776e2d87ebd770e4b47c755351745671688aef62/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/776e2d87ebd770e4b47c755351745671688aef62/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=776e2d87ebd770e4b47c755351745671688aef62",
        "patch": "@@ -251,7 +251,7 @@ static bool InitRPCAuthentication()\n         LogPrintf(\"Config options rpcuser and rpcpassword will soon be deprecated. Locally-run instances may remove rpcuser to use cookie-based auth, or may be replaced with rpcauth. Please see share/rpcauth for rpcauth auth generation.\\n\");\n         strRPCUserColonPass = gArgs.GetArg(\"-rpcuser\", \"\") + \":\" + gArgs.GetArg(\"-rpcpassword\", \"\");\n     }\n-    if (gArgs.GetArg(\"-rpcauth\",\"\") != \"\")\n+    if (!gArgs.GetArgs(\"-rpcauth\").empty())\n     {\n         LogPrintf(\"Using rpcauth authentication.\\n\");\n         for (const std::string& rpcauth : gArgs.GetArgs(\"-rpcauth\")) {"
      },
      {
        "sha": "031a86377e3b313be0d61d0492e00faa6765a76a",
        "filename": "test/functional/rpc_users.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/776e2d87ebd770e4b47c755351745671688aef62/test/functional/rpc_users.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/776e2d87ebd770e4b47c755351745671688aef62/test/functional/rpc_users.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_users.py?ref=776e2d87ebd770e4b47c755351745671688aef62",
        "patch": "@@ -102,9 +102,8 @@ def run_test(self):\n         init_error = 'Error: Unable to start HTTP server. See debug log for details.'\n \n         self.log.info('Check -rpcauth are validated')\n-        # Empty -rpcauth= are ignored\n-        self.restart_node(0, extra_args=['-rpcauth='])\n         self.stop_node(0)\n+        self.nodes[0].assert_start_raises_init_error(expected_msg=init_error, extra_args=['-rpcauth='])\n         self.nodes[0].assert_start_raises_init_error(expected_msg=init_error, extra_args=['-rpcauth=foo'])\n         self.nodes[0].assert_start_raises_init_error(expected_msg=init_error, extra_args=['-rpcauth=foo:bar'])\n "
      }
    ]
  },
  {
    "sha": "b83d0e0b35a418207b4c7731ebace9c739716551",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODNkMGUwYjM1YTQxODIwN2I0Yzc3MzFlYmFjZTljNzM5NzE2NTUx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-21T18:47:48Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-02T14:53:05Z"
      },
      "message": "refactor: Always enforce ALLOW_LIST in CheckArgFlags\n\nPrevent GetArg() from being called on ALLOW_LIST arguments, and GetArgs() from\nbeing called on non-list arguments.\n\nThis checking was previously skipped if ALLOW_ANY flag was present, but now\nit's always done.\n\nThis change has no effect on external behavior. It is just supposed to enforce\ninternal consistency and prevent bugs caused by using the wrong GetArg method\nto retrieve settings.",
      "tree": {
        "sha": "125b9f2cb3fd5733ada1c31282147f6e99c247f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/125b9f2cb3fd5733ada1c31282147f6e99c247f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b83d0e0b35a418207b4c7731ebace9c739716551",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83d0e0b35a418207b4c7731ebace9c739716551",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b83d0e0b35a418207b4c7731ebace9c739716551",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83d0e0b35a418207b4c7731ebace9c739716551/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "776e2d87ebd770e4b47c755351745671688aef62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/776e2d87ebd770e4b47c755351745671688aef62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/776e2d87ebd770e4b47c755351745671688aef62"
      }
    ],
    "stats": {
      "total": 173,
      "additions": 117,
      "deletions": 56
    },
    "files": [
      {
        "sha": "38b8733ff7d2714c5b6639e88cc7e19af8be467e",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 111,
        "deletions": 54,
        "changes": 165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b83d0e0b35a418207b4c7731ebace9c739716551/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b83d0e0b35a418207b4c7731ebace9c739716551/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=b83d0e0b35a418207b4c7731ebace9c739716551",
        "patch": "@@ -216,6 +216,49 @@ struct TestArgsManager : public ArgsManager\n             AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n         }\n     }\n+    //! Return registered argument information.\n+    Arg* FindArg(const std::string& name)\n+    {\n+        LOCK(cs_args);\n+        for (auto& category : m_available_args) {\n+            if (Arg* arg = util::FindKey(category.second, name)) {\n+                return arg;\n+            }\n+        }\n+        return nullptr;\n+    }\n+    //! Look up current registered argument flags so they can be modified, and\n+    //! restore them on destruction.\n+    struct TestFlags {\n+        TestFlags(TestArgsManager& test, const std::string& name) : arg(test.FindArg(name)) {}\n+        ~TestFlags() { if (arg) arg->m_flags = prev_flags; }\n+        Arg* arg;\n+        unsigned int prev_flags = arg ? arg->m_flags : 0;\n+    };\n+    //! Call GetArgs(), temporarily enabling ALLOW_LIST so call can succeed.\n+    //! This is called by old tests written before ALLOW_LIST was enforced.\n+    std::vector<std::string> TestArgList(const std::string& name)\n+    {\n+        TestFlags test(*this, name);\n+        if (test.arg) test.arg->m_flags |= ALLOW_LIST;\n+        return GetArgs(name);\n+    }\n+    //! Call GetArg(), temporarily disabling ALLOW_LIST so call can succeed.\n+    //! This is called by old tests written before ALLOW_LIST was enforced.\n+    std::string TestArgString(const std::string& name, const std::string& default_value)\n+    {\n+        TestFlags test(*this, name);\n+        if (test.arg) test.arg->m_flags &= ~ALLOW_LIST;\n+        return GetArg(name, default_value);\n+    }\n+    //! Call GetBoolArg(), temporarily disabling ALLOW_LIST so call can succeed.\n+    //! This is called by old tests written before ALLOW_LIST was enforced.\n+    bool TestArgBool(const std::string& name, bool default_value)\n+    {\n+        TestFlags test(*this, name);\n+        if (test.arg) test.arg->m_flags &= ~ALLOW_LIST;\n+        return GetBoolArg(name, default_value);\n+    }\n     using ArgsManager::GetSetting;\n     using ArgsManager::GetSettingsList;\n     using ArgsManager::ReadConfigStream;\n@@ -315,19 +358,33 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n {\n     using M = ArgsManager;\n \n-    CheckValue(M::ALLOW_ANY, nullptr, Expect{{}}.DefaultString().DefaultInt().DefaultBool().List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=0\", Expect{true}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=1\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=2\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=abc\", Expect{true}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value\", Expect{\"\"}.String(\"\").Int(0).Bool(true).List({\"\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=\", Expect{\"\"}.String(\"\").Int(0).Bool(true).List({\"\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=0\", Expect{\"0\"}.String(\"0\").Int(0).Bool(false).List({\"0\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+    CheckValue(M::ALLOW_ANY, nullptr, Expect{{}}.DefaultString().DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_ANY, \"-novalue\", Expect{false}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=\", Expect{false}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=0\", Expect{true}.String(\"1\").Int(1).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=1\", Expect{false}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=2\", Expect{false}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=abc\", Expect{true}.String(\"1\").Int(1).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value\", Expect{\"\"}.String(\"\").Int(0).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value=\", Expect{\"\"}.String(\"\").Int(0).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value=0\", Expect{\"0\"}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false));\n+\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=0\", Expect{true}.List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=2\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=abc\", Expect{true}.List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n \n     CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n     CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n@@ -465,7 +522,7 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     TestArgsManager testArgs;\n     const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_ANY);\n     const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_ANY);\n-    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY);\n+    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n     const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_ANY);\n \n     const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n@@ -619,7 +676,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     TestArgsManager testArgs;\n \n     // Params test\n-    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.SetupArgs({foo, bar});\n@@ -628,7 +685,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.TestArgString(\"-foo\", \"xxx\") == \"\");\n \n     // A double negative is a positive, and not marked as negated.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-bar\"));\n@@ -642,7 +699,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     // This was passed twice, second one overrides the negative setting,\n     // and the value.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"1\");\n+    BOOST_CHECK(testArgs.TestArgString(\"-foo\", \"xxx\") == \"1\");\n \n     // A double negative is a positive, and does not count as negated.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-bar\"));\n@@ -656,14 +713,14 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n \n     // Command line overrides, but doesn't erase old setting\n     BOOST_CHECK(testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.TestArgString(\"-foo\", \"xxx\") == \"0\");\n     BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 0);\n \n     // Command line overrides, but doesn't erase old setting\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-bar\"));\n     BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n-    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 1\n-                && testArgs.GetArgs(\"-bar\").front() == \"\");\n+    BOOST_CHECK(testArgs.TestArgList(\"-bar\").size() == 1\n+                && testArgs.TestArgList(\"-bar\").front() == \"\");\n }\n \n BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n@@ -694,13 +751,13 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     LOCK(test_args.cs_args);\n     const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_ANY);\n     const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_ANY);\n-    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY);\n+    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n     const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_ANY);\n     const auto e = std::make_pair(\"-e\", ArgsManager::ALLOW_ANY);\n     const auto fff = std::make_pair(\"-fff\", ArgsManager::ALLOW_ANY);\n     const auto ggg = std::make_pair(\"-ggg\", ArgsManager::ALLOW_ANY);\n-    const auto h = std::make_pair(\"-h\", ArgsManager::ALLOW_ANY);\n-    const auto i = std::make_pair(\"-i\", ArgsManager::ALLOW_ANY);\n+    const auto h = std::make_pair(\"-h\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n+    const auto i = std::make_pair(\"-i\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n     const auto iii = std::make_pair(\"-iii\", ArgsManager::ALLOW_ANY);\n     test_args.SetupArgs({a, b, ccc, d, e, fff, ggg, h, i, iii});\n \n@@ -740,46 +797,46 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n \n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-a\", \"xxx\"), \"\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-b\", \"xxx\"), \"1\");\n-    BOOST_CHECK_EQUAL(test_args.GetArg(\"-ccc\", \"xxx\"), \"argument\");\n+    BOOST_CHECK_EQUAL(test_args.TestArgString(\"-ccc\", \"xxx\"), \"argument\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-d\", \"xxx\"), \"e\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-fff\", \"xxx\"), \"0\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-ggg\", \"xxx\"), \"1\");\n-    BOOST_CHECK_EQUAL(test_args.GetArg(\"-h\", \"xxx\"), \"0\");\n-    BOOST_CHECK_EQUAL(test_args.GetArg(\"-i\", \"xxx\"), \"1\");\n+    BOOST_CHECK_EQUAL(test_args.TestArgString(\"-h\", \"xxx\"), \"0\");\n+    BOOST_CHECK_EQUAL(test_args.TestArgString(\"-i\", \"xxx\"), \"1\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-zzz\", \"xxx\"), \"xxx\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-iii\", \"xxx\"), \"xxx\");\n \n     for (const bool def : {false, true}) {\n         BOOST_CHECK(test_args.GetBoolArg(\"-a\", def));\n         BOOST_CHECK(test_args.GetBoolArg(\"-b\", def));\n-        BOOST_CHECK(!test_args.GetBoolArg(\"-ccc\", def));\n+        BOOST_CHECK(!test_args.TestArgBool(\"-ccc\", def));\n         BOOST_CHECK(!test_args.GetBoolArg(\"-d\", def));\n         BOOST_CHECK(!test_args.GetBoolArg(\"-fff\", def));\n         BOOST_CHECK(test_args.GetBoolArg(\"-ggg\", def));\n-        BOOST_CHECK(!test_args.GetBoolArg(\"-h\", def));\n-        BOOST_CHECK(test_args.GetBoolArg(\"-i\", def));\n+        BOOST_CHECK(!test_args.TestArgBool(\"-h\", def));\n+        BOOST_CHECK(test_args.TestArgBool(\"-i\", def));\n         BOOST_CHECK(test_args.GetBoolArg(\"-zzz\", def) == def);\n         BOOST_CHECK(test_args.GetBoolArg(\"-iii\", def) == def);\n     }\n \n-    BOOST_CHECK(test_args.GetArgs(\"-a\").size() == 1\n-                && test_args.GetArgs(\"-a\").front() == \"\");\n-    BOOST_CHECK(test_args.GetArgs(\"-b\").size() == 1\n-                && test_args.GetArgs(\"-b\").front() == \"1\");\n+    BOOST_CHECK(test_args.TestArgList(\"-a\").size() == 1\n+                && test_args.TestArgList(\"-a\").front() == \"\");\n+    BOOST_CHECK(test_args.TestArgList(\"-b\").size() == 1\n+                && test_args.TestArgList(\"-b\").front() == \"1\");\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2\n                 && test_args.GetArgs(\"-ccc\").front() == \"argument\"\n                 && test_args.GetArgs(\"-ccc\").back() == \"multiple\");\n-    BOOST_CHECK(test_args.GetArgs(\"-fff\").size() == 0);\n-    BOOST_CHECK(test_args.GetArgs(\"-nofff\").size() == 0);\n-    BOOST_CHECK(test_args.GetArgs(\"-ggg\").size() == 1\n-                && test_args.GetArgs(\"-ggg\").front() == \"1\");\n-    BOOST_CHECK(test_args.GetArgs(\"-noggg\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-fff\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-nofff\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-ggg\").size() == 1\n+                && test_args.TestArgList(\"-ggg\").front() == \"1\");\n+    BOOST_CHECK(test_args.TestArgList(\"-noggg\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-h\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-noh\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-i\").size() == 1\n                 && test_args.GetArgs(\"-i\").front() == \"1\");\n     BOOST_CHECK(test_args.GetArgs(\"-noi\").size() == 0);\n-    BOOST_CHECK(test_args.GetArgs(\"-zzz\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-zzz\").size() == 0);\n \n     BOOST_CHECK(!test_args.IsArgNegated(\"-a\"));\n     BOOST_CHECK(!test_args.IsArgNegated(\"-b\"));\n@@ -804,9 +861,9 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     // d is overridden\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"eee\");\n     // section-specific setting\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"1\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"1\");\n     // section takes priority for multiple values\n-    BOOST_CHECK(test_args.GetArg(\"-ccc\", \"xxx\") == \"extend1\");\n+    BOOST_CHECK(test_args.TestArgString(\"-ccc\", \"xxx\") == \"extend1\");\n     // check multiple values works\n     const std::vector<std::string> sec1_ccc_expected = {\"extend1\",\"extend2\",\"argument\",\"multiple\"};\n     const auto& sec1_ccc_res = test_args.GetArgs(\"-ccc\");\n@@ -821,11 +878,11 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     BOOST_CHECK(test_args.GetArg(\"-fff\", \"xxx\") == \"0\");\n     BOOST_CHECK(test_args.GetArg(\"-ggg\", \"xxx\") == \"1\");\n     BOOST_CHECK(test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\");\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"0\");\n     // section-specific setting\n     BOOST_CHECK(test_args.GetArg(\"-iii\", \"xxx\") == \"2\");\n     // section takes priority for multiple values\n-    BOOST_CHECK(test_args.GetArg(\"-ccc\", \"xxx\") == \"extend3\");\n+    BOOST_CHECK(test_args.TestArgString(\"-ccc\", \"xxx\") == \"extend3\");\n     // check multiple values works\n     const std::vector<std::string> sec2_ccc_expected = {\"extend3\",\"argument\",\"multiple\"};\n     const auto& sec2_ccc_res = test_args.GetArgs(\"-ccc\");\n@@ -840,19 +897,19 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     test_args.SelectConfigNetwork(CBaseChainParams::MAIN);\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"e\");\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2);\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"0\");\n \n     test_args.SelectConfigNetwork(\"sec1\");\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"eee\");\n-    BOOST_CHECK(test_args.GetArgs(\"-d\").size() == 1);\n+    BOOST_CHECK(test_args.TestArgList(\"-d\").size() == 1);\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2);\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"1\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"1\");\n \n     test_args.SelectConfigNetwork(\"sec2\");\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"xxx\");\n-    BOOST_CHECK(test_args.GetArgs(\"-d\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-d\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 1);\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"0\");\n }\n \n BOOST_AUTO_TEST_CASE(util_GetArg)\n@@ -1074,7 +1131,7 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n \n         const std::string& name = net_specific ? \"wallet\" : \"server\";\n         const std::string key = \"-\" + name;\n-        parser.AddArg(key, name, ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+        parser.AddArg(key, name, ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n         if (net_specific) parser.SetNetworkOnlyArg(key);\n \n         auto args = GetValues(arg_actions, section, name, \"a\");\n@@ -1117,14 +1174,14 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n         if (!parser.IsArgSet(key)) {\n             desc += \"unset\";\n             BOOST_CHECK(!parser.IsArgNegated(key));\n-            BOOST_CHECK_EQUAL(parser.GetArg(key, \"default\"), \"default\");\n+            BOOST_CHECK_EQUAL(parser.TestArgString(key, \"default\"), \"default\");\n             BOOST_CHECK(parser.GetArgs(key).empty());\n         } else if (parser.IsArgNegated(key)) {\n             desc += \"negated\";\n-            BOOST_CHECK_EQUAL(parser.GetArg(key, \"default\"), \"0\");\n+            BOOST_CHECK_EQUAL(parser.TestArgString(key, \"default\"), \"0\");\n             BOOST_CHECK(parser.GetArgs(key).empty());\n         } else {\n-            desc += parser.GetArg(key, \"default\");\n+            desc += parser.TestArgString(key, \"default\");\n             desc += \" |\";\n             for (const auto& arg : parser.GetArgs(key)) {\n                 desc += \" \";\n@@ -1201,8 +1258,8 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n     ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions) {\n         TestArgsManager parser;\n         LOCK(parser.cs_args);\n-        parser.AddArg(\"-regtest\", \"regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-        parser.AddArg(\"-testnet\", \"testnet\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+        parser.AddArg(\"-regtest\", \"regtest\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n+        parser.AddArg(\"-testnet\", \"testnet\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n \n         auto arg = [](Action action) { return action == ENABLE_TEST  ? \"-testnet=1\"   :\n                                               action == DISABLE_TEST ? \"-testnet=0\"   :"
      },
      {
        "sha": "240f4cde6cf02834fcc7498c26bae991dd44386e",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b83d0e0b35a418207b4c7731ebace9c739716551/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b83d0e0b35a418207b4c7731ebace9c739716551/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=b83d0e0b35a418207b4c7731ebace9c739716551",
        "patch": "@@ -453,13 +453,17 @@ bool ArgsManager::CheckArgFlags(const std::string& name,\n     const char* context) const\n {\n     std::optional<unsigned int> flags = GetArgFlags(name);\n-    if (!flags || *flags & ArgsManager::ALLOW_ANY) return false;\n+    if (!flags) return false;\n+\n+    if (*flags & ALLOW_ANY) require &= ~(ALLOW_BOOL | ALLOW_INT | ALLOW_STRING);\n+\n     if ((*flags & require) != require || (*flags & forbid) != 0) {\n         throw std::logic_error(\n             strprintf(\"Bug: Can't call %s on arg %s registered with flags 0x%08x (requires 0x%x, disallows 0x%x)\",\n                 context, name, *flags, require, forbid));\n     }\n-    return true;\n+\n+    return !(*flags & ALLOW_ANY);\n }\n \n const fs::path& ArgsManager::GetBlocksDirPath() const"
      }
    ]
  },
  {
    "sha": "9bcb45347ebdc2e969129318214631369d466073",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmNiNDUzNDdlYmRjMmU5NjkxMjkzMTgyMTQ2MzEzNjlkNDY2MDcz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-16T03:27:16Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-16T03:27:16Z"
      },
      "message": "Merge remote-tracking branch 'origin/pull/17580/head'",
      "tree": {
        "sha": "be886b3d2aeb435633020cc1b3ab9977099de019",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be886b3d2aeb435633020cc1b3ab9977099de019"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bcb45347ebdc2e969129318214631369d466073",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bcb45347ebdc2e969129318214631369d466073",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bcb45347ebdc2e969129318214631369d466073",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bcb45347ebdc2e969129318214631369d466073/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bc1eca01b2f88e081e71b783b3d45287700f8a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc1eca01b2f88e081e71b783b3d45287700f8a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bc1eca01b2f88e081e71b783b3d45287700f8a5"
      },
      {
        "sha": "b83d0e0b35a418207b4c7731ebace9c739716551",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83d0e0b35a418207b4c7731ebace9c739716551",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b83d0e0b35a418207b4c7731ebace9c739716551"
      }
    ],
    "stats": {
      "total": 651,
      "additions": 490,
      "deletions": 161
    },
    "files": [
      {
        "sha": "022ba918e5a9c0e7c58dda6f939967ddcf8c7299",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bcb45347ebdc2e969129318214631369d466073/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bcb45347ebdc2e969129318214631369d466073/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=9bcb45347ebdc2e969129318214631369d466073",
        "patch": "@@ -22,9 +22,9 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n }\n "
      },
      {
        "sha": "a0f1d40918b110c2fb233555f22b4319b316fb1d",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bcb45347ebdc2e969129318214631369d466073/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bcb45347ebdc2e969129318214631369d466073/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=9bcb45347ebdc2e969129318214631369d466073",
        "patch": "@@ -251,7 +251,7 @@ static bool InitRPCAuthentication()\n         LogPrintf(\"Config options rpcuser and rpcpassword will soon be deprecated. Locally-run instances may remove rpcuser to use cookie-based auth, or may be replaced with rpcauth. Please see share/rpcauth for rpcauth auth generation.\\n\");\n         strRPCUserColonPass = gArgs.GetArg(\"-rpcuser\", \"\") + \":\" + gArgs.GetArg(\"-rpcpassword\", \"\");\n     }\n-    if (gArgs.GetArg(\"-rpcauth\",\"\") != \"\")\n+    if (!gArgs.GetArgs(\"-rpcauth\").empty())\n     {\n         LogPrintf(\"Using rpcauth authentication.\\n\");\n         for (const std::string& rpcauth : gArgs.GetArgs(\"-rpcauth\")) {"
      },
      {
        "sha": "472bf0e88f05064e6aa4e79a86d6a89a340f7e0c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bcb45347ebdc2e969129318214631369d466073/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bcb45347ebdc2e969129318214631369d466073/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9bcb45347ebdc2e969129318214631369d466073",
        "patch": "@@ -386,8 +386,8 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-loadblock=<file>\", \"Imports blocks from external file on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-loadblock=<file>\", \"Imports blocks from external file on startup\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -416,15 +416,15 @@ void SetupServerArgs(ArgsManager& argsman)\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n-    argsman.AddArg(\"-addnode=<ip>\", strprintf(\"Add a node to connect to and attempt to keep the connection open (see the addnode RPC help for more info). This option can be specified multiple times to add multiple nodes; connections are limited to %u at a time and are counted separately from the -maxconnections limit.\", MAX_ADDNODE_CONNECTIONS), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-addnode=<ip>\", strprintf(\"Add a node to connect to and attempt to keep the connection open (see the addnode RPC help for more info). This option can be specified multiple times to add multiple nodes; connections are limited to %u at a time and are counted separately from the -maxconnections limit.\", MAX_ADDNODE_CONNECTIONS), ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-asmap=<file>\", strprintf(\"Specify asn mapping used for bucketing of the peers (default: %s). Relative paths will be prefixed by the net-specific datadir location.\", DEFAULT_ASMAP_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-bantime=<n>\", strprintf(\"Default duration (in seconds) of manually configured bans (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-bind=<addr>[:<port>][=onion]\", strprintf(\"Bind to given address and always listen on it (default: 0.0.0.0). Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming Tor connections (default: 127.0.0.1:%u=onion, testnet: 127.0.0.1:%u=onion, signet: 127.0.0.1:%u=onion, regtest: 127.0.0.1:%u=onion)\", defaultBaseParams->OnionServiceTargetPort(), testnetBaseParams->OnionServiceTargetPort(), signetBaseParams->OnionServiceTargetPort(), regtestBaseParams->OnionServiceTargetPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-bind=<addr>[:<port>][=onion]\", strprintf(\"Bind to given address and always listen on it (default: 0.0.0.0). Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming Tor connections (default: 127.0.0.1:%u=onion, testnet: 127.0.0.1:%u=onion, signet: 127.0.0.1:%u=onion, regtest: 127.0.0.1:%u=onion)\", defaultBaseParams->OnionServiceTargetPort(), testnetBaseParams->OnionServiceTargetPort(), signetBaseParams->OnionServiceTargetPort(), regtestBaseParams->OnionServiceTargetPort()), ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dnsseed\", strprintf(\"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)\", DEFAULT_DNSSEED), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-fixedseeds\", strprintf(\"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -437,14 +437,14 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2psam=<ip:port>\", \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with non-onion networks and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with non-onion networks and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port>. Nodes not using the default ports (default: %u, testnet: %u, signet: %u, regtest: %u) are unlikely to get incoming connections.\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-timeout=<n>\", strprintf(\"Specify socket connection timeout in milliseconds. If an initial attempt to connect is unsuccessful after this amount of time, drop it (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify a p2p connection timeout delay in seconds. After connecting to a peer, wait this amount of time before considering disconnection based on inactivity (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n@@ -460,26 +460,26 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n #ifdef USE_NATPMP\n-    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #else\n     hidden_args.emplace_back(\"-natpmp\");\n #endif // USE_NATPMP\n     argsman.AddArg(\"-whitebind=<[permissions@]addr>\", \"Bind to the given address and add permission flags to the peers connecting to it. \"\n         \"Use [host]:port notation for IPv6. Allowed permissions: \" + Join(NET_PERMISSIONS_DOC, \", \") + \". \"\n-        \"Specify multiple permissions separated by commas (default: download,noban,mempool,relay). Can be specified multiple times.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+        \"Specify multiple permissions separated by commas (default: download,noban,mempool,relay). Can be specified multiple times.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n \n     argsman.AddArg(\"-whitelist=<[permissions@]IP address or network>\", \"Add permission flags to the peers connecting from the given IP address (e.g. 1.2.3.4) or \"\n         \"CIDR-notated network (e.g. 1.2.3.0/24). Uses the same permissions as \"\n-        \"-whitebind. Can be specified multiple times.\" , ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+        \"-whitebind. Can be specified multiple times.\" , ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n \n     g_wallet_init_interface.AddWalletOptions(argsman);\n \n #if ENABLE_ZMQ\n-    argsman.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    argsman.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    argsman.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    argsman.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    argsman.AddArg(\"-zmqpubsequence=<address>\", \"Enable publish hash block and tx sequence in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubsequence=<address>\", \"Enable publish hash block and tx sequence in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n     argsman.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n     argsman.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n     argsman.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n@@ -503,7 +503,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-checkblockindex\", strprintf(\"Do a consistency check for the block tree, chainstate, and other validation data structures occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-checkpoints\", strprintf(\"Enable rejection of any forks from the known historical chain until block %s (default: %u)\", defaultChainParams->Checkpoints().GetHeight(), DEFAULT_CHECKPOINTS_ENABLED), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n@@ -516,7 +516,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printpriority\", strprintf(\"Log transaction fee rate in \" + CURRENCY_UNIT + \"/kvB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n \n     SetupChainParamsBaseOptions(argsman);\n \n@@ -537,17 +537,17 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::BLOCK_CREATION);\n \n     argsman.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, signet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);"
      },
      {
        "sha": "764d8379e6acc17569f7c25dc97a9cd26781c01a",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bcb45347ebdc2e969129318214631369d466073/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bcb45347ebdc2e969129318214631369d466073/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=9bcb45347ebdc2e969129318214631369d466073",
        "patch": "@@ -63,8 +63,8 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + LogInstance().LogCategoriesString() + \". This option can be specified multiple times to output multiple categories.\",\n-        ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except the specified category. This option can be specified multiple times to exclude multiple categories.\"), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+        ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except the specified category. This option can be specified multiple times to exclude multiple categories.\"), ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n #ifdef HAVE_THREAD_LOCAL"
      },
      {
        "sha": "c5d5eea38ee91d1152e86366d613423961717440",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 7,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bcb45347ebdc2e969129318214631369d466073/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bcb45347ebdc2e969129318214631369d466073/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=9bcb45347ebdc2e969129318214631369d466073",
        "patch": "@@ -38,13 +38,21 @@ FUZZ_TARGET(system)\n                 args_manager.SelectConfigNetwork(fuzzed_data_provider.ConsumeRandomLengthString(16));\n             },\n             [&] {\n-                args_manager.SoftSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                // Avoid Can't call SoftSetArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                } catch (const std::logic_error&) {\n+                }\n             },\n             [&] {\n                 args_manager.ForceSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n             },\n             [&] {\n-                args_manager.SoftSetBoolArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeBool());\n+                // Avoid Can't call SoftSetBoolArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetBoolArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeBool());\n+                } catch (const std::logic_error&) {\n+                }\n             },\n             [&] {\n                 const OptionsCategory options_category = fuzzed_data_provider.PickValueInArray<OptionsCategory>({OptionsCategory::OPTIONS, OptionsCategory::CONNECTION, OptionsCategory::WALLET, OptionsCategory::WALLET_DEBUG_TEST, OptionsCategory::ZMQ, OptionsCategory::DEBUG_TEST, OptionsCategory::CHAINPARAMS, OptionsCategory::NODE_RELAY, OptionsCategory::BLOCK_CREATION, OptionsCategory::RPC, OptionsCategory::GUI, OptionsCategory::COMMANDS, OptionsCategory::REGISTER_COMMANDS, OptionsCategory::HIDDEN});\n@@ -54,7 +62,16 @@ FUZZ_TARGET(system)\n                 if (args_manager.GetArgFlags(argument_name) != std::nullopt) {\n                     return;\n                 }\n-                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND, options_category);\n+                unsigned int flags = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+                // Avoid hitting \"ALLOW_{BOOL|INT|STRING} flags would have no effect with ALLOW_ANY present (ALLOW_ANY disables validation)\"\n+                if (flags & ArgsManager::ALLOW_ANY) {\n+                    flags &= ~(ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT | ArgsManager::ALLOW_STRING);\n+                }\n+                // Avoid hitting \"ALLOW_INT would have no effect with ALLOW_STRING present (any valid integer is also a valid string)\"\n+                if (flags & ArgsManager::ALLOW_STRING) {\n+                    flags &= ~ArgsManager::ALLOW_INT;\n+                }\n+                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), flags & ~ArgsManager::COMMAND, options_category);\n             },\n             [&] {\n                 // Avoid hitting:\n@@ -96,11 +113,23 @@ FUZZ_TARGET(system)\n     const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const bool b = fuzzed_data_provider.ConsumeBool();\n \n-    (void)args_manager.GetArg(s1, i64);\n-    (void)args_manager.GetArg(s1, s2);\n+    try {\n+        (void)args_manager.GetArg(s1, i64);\n+    } catch (const std::logic_error&) {\n+    }\n+    try {\n+        (void)args_manager.GetArg(s1, s2);\n+    } catch (const std::logic_error&) {\n+    }\n     (void)args_manager.GetArgFlags(s1);\n-    (void)args_manager.GetArgs(s1);\n-    (void)args_manager.GetBoolArg(s1, b);\n+    try {\n+        (void)args_manager.GetArgs(s1);\n+    } catch (const std::logic_error&) {\n+    }\n+    try {\n+        (void)args_manager.GetBoolArg(s1, b);\n+    } catch (const std::logic_error&) {\n+    }\n     try {\n         (void)args_manager.GetChainName();\n     } catch (const std::runtime_error&) {"
      },
      {
        "sha": "53f6b69598dd10010ac9e6102f7dca1526f46fcc",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bcb45347ebdc2e969129318214631369d466073/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bcb45347ebdc2e969129318214631369d466073/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=9bcb45347ebdc2e969129318214631369d466073",
        "patch": "@@ -213,7 +213,7 @@ BOOST_AUTO_TEST_CASE(logargs)\n \n     LogInstance().DeleteCallback(print_connection);\n     // Check that what should appear does, and what shouldn't doesn't.\n-    BOOST_CHECK(str.find(\"Command-line arg: okaylog-bool=\\\"\\\"\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"Command-line arg: okaylog-bool=true\") != std::string::npos);\n     BOOST_CHECK(str.find(\"Command-line arg: okaylog-negbool=false\") != std::string::npos);\n     BOOST_CHECK(str.find(\"Command-line arg: okaylog=\\\"public\\\"\") != std::string::npos);\n     BOOST_CHECK(str.find(\"dontlog=****\") != std::string::npos);"
      },
      {
        "sha": "2d26045db6a5514192ca99698ffe6c8b16436779",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 251,
        "deletions": 63,
        "changes": 314,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bcb45347ebdc2e969129318214631369d466073/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bcb45347ebdc2e969129318214631369d466073/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=9bcb45347ebdc2e969129318214631369d466073",
        "patch": "@@ -216,6 +216,49 @@ struct TestArgsManager : public ArgsManager\n             AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n         }\n     }\n+    //! Return registered argument information.\n+    Arg* FindArg(const std::string& name)\n+    {\n+        LOCK(cs_args);\n+        for (auto& category : m_available_args) {\n+            if (Arg* arg = util::FindKey(category.second, name)) {\n+                return arg;\n+            }\n+        }\n+        return nullptr;\n+    }\n+    //! Look up current registered argument flags so they can be modified, and\n+    //! restore them on destruction.\n+    struct TestFlags {\n+        TestFlags(TestArgsManager& test, const std::string& name) : arg(test.FindArg(name)) {}\n+        ~TestFlags() { if (arg) arg->m_flags = prev_flags; }\n+        Arg* arg;\n+        unsigned int prev_flags = arg ? arg->m_flags : 0;\n+    };\n+    //! Call GetArgs(), temporarily enabling ALLOW_LIST so call can succeed.\n+    //! This is called by old tests written before ALLOW_LIST was enforced.\n+    std::vector<std::string> TestArgList(const std::string& name)\n+    {\n+        TestFlags test(*this, name);\n+        if (test.arg) test.arg->m_flags |= ALLOW_LIST;\n+        return GetArgs(name);\n+    }\n+    //! Call GetArg(), temporarily disabling ALLOW_LIST so call can succeed.\n+    //! This is called by old tests written before ALLOW_LIST was enforced.\n+    std::string TestArgString(const std::string& name, const std::string& default_value)\n+    {\n+        TestFlags test(*this, name);\n+        if (test.arg) test.arg->m_flags &= ~ALLOW_LIST;\n+        return GetArg(name, default_value);\n+    }\n+    //! Call GetBoolArg(), temporarily disabling ALLOW_LIST so call can succeed.\n+    //! This is called by old tests written before ALLOW_LIST was enforced.\n+    bool TestArgBool(const std::string& name, bool default_value)\n+    {\n+        TestFlags test(*this, name);\n+        if (test.arg) test.arg->m_flags &= ~ALLOW_LIST;\n+        return GetBoolArg(name, default_value);\n+    }\n     using ArgsManager::GetSetting;\n     using ArgsManager::GetSettingsList;\n     using ArgsManager::ReadConfigStream;\n@@ -269,7 +312,7 @@ class CheckValueTest : public TestChain100Setup\n \n         if (expect.error) {\n             BOOST_CHECK(!success);\n-            BOOST_CHECK_NE(error.find(expect.error), std::string::npos);\n+            BOOST_CHECK_EQUAL(error, expect.error);\n         } else {\n             BOOST_CHECK(success);\n             BOOST_CHECK_EQUAL(error, \"\");\n@@ -279,16 +322,16 @@ class CheckValueTest : public TestChain100Setup\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), \"zzzzz\");\n         } else if (expect.string_value) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), expect.string_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArg(\"-value\", \"zzzzz\"), std::logic_error);\n         }\n \n         if (expect.default_int) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), 99999);\n         } else if (expect.int_value) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), *expect.int_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArg(\"-value\", 99999), std::logic_error);\n         }\n \n         if (expect.default_bool) {\n@@ -297,15 +340,16 @@ class CheckValueTest : public TestChain100Setup\n         } else if (expect.bool_value) {\n             BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), *expect.bool_value);\n             BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), *expect.bool_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetBoolArg(\"-value\", false), std::logic_error);\n+            BOOST_CHECK_THROW(test.GetBoolArg(\"-value\", true), std::logic_error);\n         }\n \n         if (expect.list_value) {\n             auto l = test.GetArgs(\"-value\");\n             BOOST_CHECK_EQUAL_COLLECTIONS(l.begin(), l.end(), expect.list_value->begin(), expect.list_value->end());\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArgs(\"-value\"), std::logic_error);\n         }\n     }\n };\n@@ -314,19 +358,163 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n {\n     using M = ArgsManager;\n \n-    CheckValue(M::ALLOW_ANY, nullptr, Expect{{}}.DefaultString().DefaultInt().DefaultBool().List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=0\", Expect{true}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=1\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=2\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=abc\", Expect{true}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value\", Expect{\"\"}.String(\"\").Int(0).Bool(true).List({\"\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=\", Expect{\"\"}.String(\"\").Int(0).Bool(true).List({\"\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=0\", Expect{\"0\"}.String(\"0\").Int(0).Bool(false).List({\"0\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+    CheckValue(M::ALLOW_ANY, nullptr, Expect{{}}.DefaultString().DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_ANY, \"-novalue\", Expect{false}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=\", Expect{false}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=0\", Expect{true}.String(\"1\").Int(1).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=1\", Expect{false}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=2\", Expect{false}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=abc\", Expect{true}.String(\"1\").Int(1).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value\", Expect{\"\"}.String(\"\").Int(0).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value=\", Expect{\"\"}.String(\"\").Int(0).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value=0\", Expect{\"0\"}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false));\n+\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=0\", Expect{true}.List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=2\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=abc\", Expect{true}.List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(util_CheckBoolStringsNotSpecial, CheckValueTest)\n+{\n+    using M = ArgsManager;\n+\n+    // Check that \"true\" and \"false\" strings are rejected for ALLOW_BOOL\n+    // arguments. We might want to change this behavior in the future and\n+    // interpret strings like \"true\" as true, and strings like \"false\" as false.\n+    // But because it would be confusing to interpret \"true\" as true for\n+    // ALLOW_BOOL arguments but false for ALLOW_ANY arguments (because\n+    // atoi(\"true\")==0), for now it is safer to just disallow strings like\n+    // \"true\" and \"false\" for ALLOW_BOOL arguments as long as there are still\n+    // other boolean arguments interpreted with ALLOW_ANY.\n+    CheckValue(M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to 0 or 1.\"));\n+\n+    // Similarly, check \"true\" and \"false\" are not treated specially when\n+    // ALLOW_BOOL is combined with ALLOW_INT and ALLOW_STRING. (The only\n+    // difference ALLOW_BOOL makes for int and string arguments is that it\n+    // enables \"-foo\" syntax with no equal sign assigning explicit int or string\n+    // values. This is useful for arguments like \"-upgradewallet\" or \"-listen\"\n+    // that primarily toggle features on and off, but also accept optional int\n+    // or string values to influence behavior.)\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=true\", Expect{\"true\"}.String(\"true\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=false\", Expect{\"false\"}.String(\"false\").DefaultBool());\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_CheckSingleValue)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-single\", ArgsManager::ALLOW_INT}});\n+    std::istringstream stream(\"single=1\\nsingle=2\\n\");\n+    std::string error;\n+    BOOST_CHECK(!test.ReadConfigStream(stream, \"file.conf\", error));\n+    BOOST_CHECK_EQUAL(error, \"Multiple values specified for -single in same section of config file.\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_CheckBadFlagCombinations)\n+{\n+    TestArgsManager test;\n+    using M = ArgsManager;\n+    BOOST_CHECK_THROW(test.AddArg(\"-arg1\", \"name\", M::ALLOW_INT | M::ALLOW_ANY, OptionsCategory::OPTIONS), std::logic_error);\n+    BOOST_CHECK_THROW(test.AddArg(\"-arg2\", \"name\", M::ALLOW_INT | M::ALLOW_STRING, OptionsCategory::OPTIONS), std::logic_error);\n }\n \n struct NoIncludeConfTest {\n@@ -353,7 +541,7 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     TestArgsManager testArgs;\n     const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_ANY);\n     const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_ANY);\n-    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY);\n+    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n     const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_ANY);\n \n     const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n@@ -507,7 +695,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     TestArgsManager testArgs;\n \n     // Params test\n-    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.SetupArgs({foo, bar});\n@@ -516,7 +704,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.TestArgString(\"-foo\", \"xxx\") == \"\");\n \n     // A double negative is a positive, and not marked as negated.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-bar\"));\n@@ -530,7 +718,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     // This was passed twice, second one overrides the negative setting,\n     // and the value.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"1\");\n+    BOOST_CHECK(testArgs.TestArgString(\"-foo\", \"xxx\") == \"1\");\n \n     // A double negative is a positive, and does not count as negated.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-bar\"));\n@@ -544,14 +732,14 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n \n     // Command line overrides, but doesn't erase old setting\n     BOOST_CHECK(testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.TestArgString(\"-foo\", \"xxx\") == \"0\");\n     BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 0);\n \n     // Command line overrides, but doesn't erase old setting\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-bar\"));\n     BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n-    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 1\n-                && testArgs.GetArgs(\"-bar\").front() == \"\");\n+    BOOST_CHECK(testArgs.TestArgList(\"-bar\").size() == 1\n+                && testArgs.TestArgList(\"-bar\").front() == \"\");\n }\n \n BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n@@ -582,13 +770,13 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     LOCK(test_args.cs_args);\n     const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_ANY);\n     const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_ANY);\n-    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY);\n+    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n     const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_ANY);\n     const auto e = std::make_pair(\"-e\", ArgsManager::ALLOW_ANY);\n     const auto fff = std::make_pair(\"-fff\", ArgsManager::ALLOW_ANY);\n     const auto ggg = std::make_pair(\"-ggg\", ArgsManager::ALLOW_ANY);\n-    const auto h = std::make_pair(\"-h\", ArgsManager::ALLOW_ANY);\n-    const auto i = std::make_pair(\"-i\", ArgsManager::ALLOW_ANY);\n+    const auto h = std::make_pair(\"-h\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n+    const auto i = std::make_pair(\"-i\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n     const auto iii = std::make_pair(\"-iii\", ArgsManager::ALLOW_ANY);\n     test_args.SetupArgs({a, b, ccc, d, e, fff, ggg, h, i, iii});\n \n@@ -628,46 +816,46 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n \n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-a\", \"xxx\"), \"\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-b\", \"xxx\"), \"1\");\n-    BOOST_CHECK_EQUAL(test_args.GetArg(\"-ccc\", \"xxx\"), \"argument\");\n+    BOOST_CHECK_EQUAL(test_args.TestArgString(\"-ccc\", \"xxx\"), \"argument\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-d\", \"xxx\"), \"e\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-fff\", \"xxx\"), \"0\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-ggg\", \"xxx\"), \"1\");\n-    BOOST_CHECK_EQUAL(test_args.GetArg(\"-h\", \"xxx\"), \"0\");\n-    BOOST_CHECK_EQUAL(test_args.GetArg(\"-i\", \"xxx\"), \"1\");\n+    BOOST_CHECK_EQUAL(test_args.TestArgString(\"-h\", \"xxx\"), \"0\");\n+    BOOST_CHECK_EQUAL(test_args.TestArgString(\"-i\", \"xxx\"), \"1\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-zzz\", \"xxx\"), \"xxx\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-iii\", \"xxx\"), \"xxx\");\n \n     for (const bool def : {false, true}) {\n         BOOST_CHECK(test_args.GetBoolArg(\"-a\", def));\n         BOOST_CHECK(test_args.GetBoolArg(\"-b\", def));\n-        BOOST_CHECK(!test_args.GetBoolArg(\"-ccc\", def));\n+        BOOST_CHECK(!test_args.TestArgBool(\"-ccc\", def));\n         BOOST_CHECK(!test_args.GetBoolArg(\"-d\", def));\n         BOOST_CHECK(!test_args.GetBoolArg(\"-fff\", def));\n         BOOST_CHECK(test_args.GetBoolArg(\"-ggg\", def));\n-        BOOST_CHECK(!test_args.GetBoolArg(\"-h\", def));\n-        BOOST_CHECK(test_args.GetBoolArg(\"-i\", def));\n+        BOOST_CHECK(!test_args.TestArgBool(\"-h\", def));\n+        BOOST_CHECK(test_args.TestArgBool(\"-i\", def));\n         BOOST_CHECK(test_args.GetBoolArg(\"-zzz\", def) == def);\n         BOOST_CHECK(test_args.GetBoolArg(\"-iii\", def) == def);\n     }\n \n-    BOOST_CHECK(test_args.GetArgs(\"-a\").size() == 1\n-                && test_args.GetArgs(\"-a\").front() == \"\");\n-    BOOST_CHECK(test_args.GetArgs(\"-b\").size() == 1\n-                && test_args.GetArgs(\"-b\").front() == \"1\");\n+    BOOST_CHECK(test_args.TestArgList(\"-a\").size() == 1\n+                && test_args.TestArgList(\"-a\").front() == \"\");\n+    BOOST_CHECK(test_args.TestArgList(\"-b\").size() == 1\n+                && test_args.TestArgList(\"-b\").front() == \"1\");\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2\n                 && test_args.GetArgs(\"-ccc\").front() == \"argument\"\n                 && test_args.GetArgs(\"-ccc\").back() == \"multiple\");\n-    BOOST_CHECK(test_args.GetArgs(\"-fff\").size() == 0);\n-    BOOST_CHECK(test_args.GetArgs(\"-nofff\").size() == 0);\n-    BOOST_CHECK(test_args.GetArgs(\"-ggg\").size() == 1\n-                && test_args.GetArgs(\"-ggg\").front() == \"1\");\n-    BOOST_CHECK(test_args.GetArgs(\"-noggg\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-fff\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-nofff\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-ggg\").size() == 1\n+                && test_args.TestArgList(\"-ggg\").front() == \"1\");\n+    BOOST_CHECK(test_args.TestArgList(\"-noggg\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-h\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-noh\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-i\").size() == 1\n                 && test_args.GetArgs(\"-i\").front() == \"1\");\n     BOOST_CHECK(test_args.GetArgs(\"-noi\").size() == 0);\n-    BOOST_CHECK(test_args.GetArgs(\"-zzz\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-zzz\").size() == 0);\n \n     BOOST_CHECK(!test_args.IsArgNegated(\"-a\"));\n     BOOST_CHECK(!test_args.IsArgNegated(\"-b\"));\n@@ -692,9 +880,9 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     // d is overridden\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"eee\");\n     // section-specific setting\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"1\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"1\");\n     // section takes priority for multiple values\n-    BOOST_CHECK(test_args.GetArg(\"-ccc\", \"xxx\") == \"extend1\");\n+    BOOST_CHECK(test_args.TestArgString(\"-ccc\", \"xxx\") == \"extend1\");\n     // check multiple values works\n     const std::vector<std::string> sec1_ccc_expected = {\"extend1\",\"extend2\",\"argument\",\"multiple\"};\n     const auto& sec1_ccc_res = test_args.GetArgs(\"-ccc\");\n@@ -709,11 +897,11 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     BOOST_CHECK(test_args.GetArg(\"-fff\", \"xxx\") == \"0\");\n     BOOST_CHECK(test_args.GetArg(\"-ggg\", \"xxx\") == \"1\");\n     BOOST_CHECK(test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\");\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"0\");\n     // section-specific setting\n     BOOST_CHECK(test_args.GetArg(\"-iii\", \"xxx\") == \"2\");\n     // section takes priority for multiple values\n-    BOOST_CHECK(test_args.GetArg(\"-ccc\", \"xxx\") == \"extend3\");\n+    BOOST_CHECK(test_args.TestArgString(\"-ccc\", \"xxx\") == \"extend3\");\n     // check multiple values works\n     const std::vector<std::string> sec2_ccc_expected = {\"extend3\",\"argument\",\"multiple\"};\n     const auto& sec2_ccc_res = test_args.GetArgs(\"-ccc\");\n@@ -728,19 +916,19 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     test_args.SelectConfigNetwork(CBaseChainParams::MAIN);\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"e\");\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2);\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"0\");\n \n     test_args.SelectConfigNetwork(\"sec1\");\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"eee\");\n-    BOOST_CHECK(test_args.GetArgs(\"-d\").size() == 1);\n+    BOOST_CHECK(test_args.TestArgList(\"-d\").size() == 1);\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2);\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"1\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"1\");\n \n     test_args.SelectConfigNetwork(\"sec2\");\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"xxx\");\n-    BOOST_CHECK(test_args.GetArgs(\"-d\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-d\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 1);\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"0\");\n }\n \n BOOST_AUTO_TEST_CASE(util_GetArg)\n@@ -962,7 +1150,7 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n \n         const std::string& name = net_specific ? \"wallet\" : \"server\";\n         const std::string key = \"-\" + name;\n-        parser.AddArg(key, name, ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+        parser.AddArg(key, name, ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n         if (net_specific) parser.SetNetworkOnlyArg(key);\n \n         auto args = GetValues(arg_actions, section, name, \"a\");\n@@ -1005,14 +1193,14 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n         if (!parser.IsArgSet(key)) {\n             desc += \"unset\";\n             BOOST_CHECK(!parser.IsArgNegated(key));\n-            BOOST_CHECK_EQUAL(parser.GetArg(key, \"default\"), \"default\");\n+            BOOST_CHECK_EQUAL(parser.TestArgString(key, \"default\"), \"default\");\n             BOOST_CHECK(parser.GetArgs(key).empty());\n         } else if (parser.IsArgNegated(key)) {\n             desc += \"negated\";\n-            BOOST_CHECK_EQUAL(parser.GetArg(key, \"default\"), \"0\");\n+            BOOST_CHECK_EQUAL(parser.TestArgString(key, \"default\"), \"0\");\n             BOOST_CHECK(parser.GetArgs(key).empty());\n         } else {\n-            desc += parser.GetArg(key, \"default\");\n+            desc += parser.TestArgString(key, \"default\");\n             desc += \" |\";\n             for (const auto& arg : parser.GetArgs(key)) {\n                 desc += \" \";\n@@ -1089,8 +1277,8 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n     ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions) {\n         TestArgsManager parser;\n         LOCK(parser.cs_args);\n-        parser.AddArg(\"-regtest\", \"regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-        parser.AddArg(\"-testnet\", \"testnet\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+        parser.AddArg(\"-regtest\", \"regtest\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n+        parser.AddArg(\"-testnet\", \"testnet\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n \n         auto arg = [](Action action) { return action == ENABLE_TEST  ? \"-testnet=1\"   :\n                                               action == DISABLE_TEST ? \"-testnet=0\"   :"
      },
      {
        "sha": "d0bd0deada7257f4edf0e161f2fb28fae44c788b",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 147,
        "deletions": 51,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bcb45347ebdc2e969129318214631369d466073/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bcb45347ebdc2e969129318214631369d466073/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=9bcb45347ebdc2e969129318214631369d466073",
        "patch": "@@ -66,6 +66,7 @@\n #endif\n \n #include <boost/algorithm/string/replace.hpp>\n+#include <optional>\n #include <thread>\n #include <typeinfo>\n #include <univalue.h>\n@@ -180,26 +181,17 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n- *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n+ * Interpret key portion of a \"key=value\" config string. Strip \"section.\" and\n+ * \"no\" prefixes from the key if they are present, updating the section output\n+ * argument if a section was found, and returning false if the key was negated,\n+ * true otherwise.\n  *\n  * Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+static bool InterpretKey(std::string& section, std::string& key)\n {\n     // Split section name from key name for keys like \"testnet.foo\" or \"regtest.bar\"\n     size_t option_index = key.find('.');\n@@ -209,30 +201,98 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW_* type checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that\n+ * isn't allowed by the flags, otherwise return the parsed value.\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n-{\n-    if (val.isBool() && !(flags & ArgsManager::ALLOW_BOOL)) {\n-        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n-        return false;\n+static std::optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string* value,\n+    bool negated,\n+    unsigned int flags,\n+    std::string& error)\n+{\n+    // If validation was disabled with ALLOW_ANY, check for negation, but\n+    // otherwise always return the value as a string.\n+    if (flags & ArgsManager::ALLOW_ANY) {\n+        if (negated) {\n+            // Double negatives like -nokey=0 are supported (but discouraged)\n+            if (value && !InterpretBool(*value)) {\n+                LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, *value);\n+                return util::SettingsValue{true};\n+            }\n+            return util::SettingsValue{false};\n+        }\n+        return util::SettingsValue{value ? *value : \"\"};\n     }\n-    return true;\n+\n+    // Return negated -nokey and -nokey=1 settings as false values.\n+    if (negated) {\n+        if (value && *value != \"1\") {\n+            error = strprintf(\"Can not negate -%s at the same time as setting value '%s'.\", key, *value);\n+            return std::nullopt;\n+        }\n+        return util::SettingsValue{false};\n+    }\n+\n+    // Allow -key=\"\" settings. These are useful on the command line to reset\n+    // settings specified in the config file back to default values.\n+    if (value && value->empty()) return util::SettingsValue{\"\"};\n+\n+    // Return parsed bool, int, and string values if allowed by flags.\n+    int64_t parsed_int;\n+    if ((flags & ArgsManager::ALLOW_STRING) && value) return util::SettingsValue{*value};\n+    if ((flags & ArgsManager::ALLOW_INT) && value && ParseInt64(*value, &parsed_int)) return util::SettingsValue{parsed_int};\n+    if ((flags & ArgsManager::ALLOW_BOOL) && value && *value == \"0\") return util::SettingsValue{false};\n+    if ((flags & ArgsManager::ALLOW_BOOL) && (!value || *value == \"1\")) return util::SettingsValue{true};\n+\n+    // If didn't return above, settings value is not valid for this key.\n+    if (value) {\n+        error = strprintf(\"Can not set -%s value to '%s'\", key, *value);\n+    } else {\n+        error = strprintf(\"Can not set -%s with no value\", key);\n+    }\n+    error = strprintf(\"%s. %s\", error,\n+                      (flags & ArgsManager::ALLOW_STRING) ? \"It must be set to a string.\" :\n+                      (flags & ArgsManager::ALLOW_INT) ? \"It must be set to an integer.\" :\n+                      (flags & ArgsManager::ALLOW_BOOL) ? \"It must be set to 0 or 1.\" :\n+                      \"It must be left unset.\");\n+    return std::nullopt;\n+}\n+\n+//! Return bool if setting is a bool or number, otherwise return default_value.\n+//! Optionally coerce strings settings as well.\n+static inline bool ValueToBool(const util::SettingsValue& value, bool default_value, bool coerce)\n+{\n+    if (coerce && value.isStr()) return InterpretBool(value.get_str());\n+    return value.isBool() ? value.get_bool() : value.isNum() ? value.get_int64() != 0 : default_value;\n+}\n+\n+//! Return int64 if setting is a number or bool, otherwise return default_value.\n+//! Optionally coerce string settings as well.\n+static inline int64_t ValueToInt64(const util::SettingsValue& value, int64_t default_value, bool coerce)\n+{\n+    if (coerce && value.isStr()) return atoi64(value.get_str());\n+    return value.isNum() ? value.get_int64() : value.isFalse() ? 0 : value.isTrue() ? 1 : default_value;\n+}\n+\n+//! Return string if setting is a nonempty string (-setting=abc), \"\" if setting\n+//! is false (-nosetting), otherwise return default_value. Optionally coerce\n+//! bool and number settings to strings as well.\n+static inline std::string ValueToString(const util::SettingsValue& value,\n+    const std::string& default_value,\n+    bool coerce)\n+{\n+    if (coerce && value.isBool()) return value.get_bool() ? \"1\" : \"0\";\n+    if (coerce && value.isNum()) return value.getValStr();\n+    if (coerce && value.isStr()) return value.get_str();\n+    return value.isStr() && !value.get_str().empty() ? value.get_str() : value.isFalse() ? \"\" : default_value;\n }\n \n namespace {\n@@ -313,7 +373,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n #endif\n \n         if (key == \"-\") break; //bitcoin-tx using stdin\n-        std::string val;\n+        std::optional<std::string> val;\n         size_t is_index = key.find('=');\n         if (is_index != std::string::npos) {\n             val = key.substr(is_index + 1);\n@@ -349,20 +409,21 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         // Transform -foo to foo\n         key.erase(0, 1);\n         std::string section;\n-        util::SettingsValue value = InterpretOption(section, key, val);\n+        bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n \n         // Unknown command line options and command line options with dot\n-        // characters (which are returned from InterpretOption with nonempty\n+        // characters (which are returned from InterpretKey with nonempty\n         // section strings) are not valid.\n         if (!flags || !section.empty()) {\n             error = strprintf(\"Invalid parameter %s\", argv[i]);\n             return false;\n         }\n \n-        if (!CheckValid(key, value, *flags, error)) return false;\n+        std::optional<util::SettingsValue> value = InterpretValue(key, val ? &*val : nullptr, negated, *flags, error);\n+        if (!value) return false;\n \n-        m_settings.command_line_options[key].push_back(value);\n+        m_settings.command_line_options[key].push_back(*value);\n     }\n \n     // we do not allow -includeconf from command line, only -noincludeconf\n@@ -389,6 +450,25 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n     return std::nullopt;\n }\n \n+bool ArgsManager::CheckArgFlags(const std::string& name,\n+    unsigned int require,\n+    unsigned int forbid,\n+    const char* context) const\n+{\n+    std::optional<unsigned int> flags = GetArgFlags(name);\n+    if (!flags) return false;\n+\n+    if (*flags & ALLOW_ANY) require &= ~(ALLOW_BOOL | ALLOW_INT | ALLOW_STRING);\n+\n+    if ((*flags & require) != require || (*flags & forbid) != 0) {\n+        throw std::logic_error(\n+            strprintf(\"Bug: Can't call %s on arg %s registered with flags 0x%08x (requires 0x%x, disallows 0x%x)\",\n+                context, name, *flags, require, forbid));\n+    }\n+\n+    return !(*flags & ALLOW_ANY);\n+}\n+\n const fs::path& ArgsManager::GetBlocksDirPath() const\n {\n     LOCK(cs_args);\n@@ -477,9 +557,10 @@ std::optional<const ArgsManager::Command> ArgsManager::GetCommand() const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_STRING | ALLOW_LIST, /* forbid= */ 0, __func__);\n     std::vector<std::string> result;\n     for (const util::SettingsValue& value : GetSettingsList(strArg)) {\n-        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n+        result.push_back(ValueToString(value, \"\", coerce));\n     }\n     return result;\n }\n@@ -547,7 +628,7 @@ bool ArgsManager::ReadSettingsFile(std::vector<std::string>* errors)\n     for (const auto& setting : m_settings.rw_settings) {\n         std::string section;\n         std::string key = setting.first;\n-        (void)InterpretOption(section, key, /* value */ {}); // Split setting key into section and argname\n+        (void)InterpretKey(section, key); // Split setting key into section and argname\n         if (!GetArgFlags('-' + key)) {\n             LogPrintf(\"Ignoring unknown rw_settings value %s\\n\", setting.first);\n         }\n@@ -582,20 +663,20 @@ bool ArgsManager::IsArgNegated(const std::string& strArg) const\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_STRING, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToString(GetSetting(strArg), strDefault, coerce);\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_INT, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToInt64(GetSetting(strArg), nDefault, coerce);\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ 0, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToBool(GetSetting(strArg), fDefault, coerce);\n }\n \n bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)\n@@ -608,15 +689,17 @@ bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strVa\n \n bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n-    if (fValue)\n-        return SoftSetArg(strArg, std::string(\"1\"));\n-    else\n-        return SoftSetArg(strArg, std::string(\"0\"));\n+    LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_BOOL, /* forbid= */ ALLOW_LIST, __func__);\n+    if (IsArgSet(strArg)) return false;\n+    m_settings.forced_settings[SettingName(strArg)] = fValue;\n+    return true;\n }\n \n void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_STRING, /* forbid= */ 0, __func__);\n     m_settings.forced_settings[SettingName(strArg)] = strValue;\n }\n \n@@ -651,6 +734,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_{BOOL|INT|STRING} flags would have no effect with \"\n+                                         \"ALLOW_ANY present (ALLOW_ANY disables validation)\", arg_name));\n+    }\n+\n+    if ((flags & ALLOW_INT) && (flags & ALLOW_STRING)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_INT would have no effect with ALLOW_STRING present \"\n+                                         \"(any valid integer is also a valid string)\", arg_name));\n+    }\n }\n \n void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)\n@@ -869,13 +962,16 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n     for (const std::pair<std::string, std::string>& option : options) {\n         std::string section;\n         std::string key = option.first;\n-        util::SettingsValue value = InterpretOption(section, key, option.second);\n+        bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n-            if (!CheckValid(key, value, *flags, error)) {\n+            if (!(*flags & (ALLOW_ANY | ALLOW_LIST)) && m_settings.ro_config[section].count(key)) {\n+                error = strprintf(\"Multiple values specified for -%s in same section of config file.\", key);\n                 return false;\n             }\n-            m_settings.ro_config[section][key].push_back(value);\n+            std::optional<util::SettingsValue> value = InterpretValue(key, &option.second, negated, *flags, error);\n+            if (!value) return false;\n+            m_settings.ro_config[section][key].push_back(*value);\n         } else {\n             if (ignore_invalid_keys) {\n                 LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);\n@@ -982,7 +1078,7 @@ std::string ArgsManager::GetChainName() const\n         util::SettingsValue value = util::GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n             /* ignore_default_section_config= */ false,\n             /* get_chain_name= */ true);\n-        return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+        return ValueToBool(value, /* default= */ false, /* coerce= */ true);\n     };\n \n     const bool fRegTest = get_net(\"-regtest\");"
      },
      {
        "sha": "cc264d7de7911c4a48fb1c890dd3b8d28f2b263b",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 25,
        "deletions": 8,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bcb45347ebdc2e969129318214631369d466073/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bcb45347ebdc2e969129318214631369d466073/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=9bcb45347ebdc2e969129318214631369d466073",
        "patch": "@@ -160,12 +160,17 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation\n+        ALLOW_BOOL = 0x02,   //!< allow -foo=1, -foo=0, -foo, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_INT = 0x04,    //!< allow -foo=123, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_STRING = 0x08, //!< allow -foo=abc, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_LIST = 0x10,   //!< allow multiple -foo=bar -foo=baz values\n+\n         DEBUG_ONLY = 0x100,\n         /* Some options would cause cross-contamination if values for\n          * mainnet were used while running on regtest/testnet (or vice-versa).\n@@ -210,9 +215,10 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n-     * argument was passed.\n+     * Result will be null if setting was unset, true if \"-setting\" argument was\n+     * passed, false if \"-nosetting\" argument was passed, and a string, integer,\n+     * or boolean depending on ALLOW_{BOOL|INT|STRING} flags if a\n+     * \"-setting=value\" argument was passed.\n      */\n     util::SettingsValue GetSetting(const std::string& arg) const;\n \n@@ -221,6 +227,17 @@ class ArgsManager\n      */\n     std::vector<util::SettingsValue> GetSettingsList(const std::string& arg) const;\n \n+    /**\n+     * Check that arg has the right flags for use in a given context. Raises\n+     * logic_error if this isn't the case, indicating the argument was\n+     * registered with bad AddArg flags.\n+     *\n+     * Returns true if the arg is registered and has checking enabled. Returns\n+     * false if the arg was never registered or checking was disabled with\n+     * ALLOW_ANY.\n+     */\n+    bool CheckArgFlags(const std::string& name, unsigned int require, unsigned int forbid, const char* context) const;\n+\n public:\n     ArgsManager();\n     ~ArgsManager();"
      },
      {
        "sha": "77801612957b2958ae29f65dbf6687f7af8c1a49",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bcb45347ebdc2e969129318214631369d466073/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bcb45347ebdc2e969129318214631369d466073/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=9bcb45347ebdc2e969129318214631369d466073",
        "patch": "@@ -66,7 +66,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n #endif\n     argsman.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-wallet=<path>\", \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-wallet=<path>\", \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n #if HAVE_SYSTEM\n@@ -83,7 +83,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n #endif\n \n #ifdef USE_SQLITE\n-    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n #else\n     argsman.AddHiddenArgs({\"-unsafesqlitesync\"});\n #endif"
      },
      {
        "sha": "031a86377e3b313be0d61d0492e00faa6765a76a",
        "filename": "test/functional/rpc_users.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bcb45347ebdc2e969129318214631369d466073/test/functional/rpc_users.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bcb45347ebdc2e969129318214631369d466073/test/functional/rpc_users.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_users.py?ref=9bcb45347ebdc2e969129318214631369d466073",
        "patch": "@@ -102,9 +102,8 @@ def run_test(self):\n         init_error = 'Error: Unable to start HTTP server. See debug log for details.'\n \n         self.log.info('Check -rpcauth are validated')\n-        # Empty -rpcauth= are ignored\n-        self.restart_node(0, extra_args=['-rpcauth='])\n         self.stop_node(0)\n+        self.nodes[0].assert_start_raises_init_error(expected_msg=init_error, extra_args=['-rpcauth='])\n         self.nodes[0].assert_start_raises_init_error(expected_msg=init_error, extra_args=['-rpcauth=foo'])\n         self.nodes[0].assert_start_raises_init_error(expected_msg=init_error, extra_args=['-rpcauth=foo:bar'])\n "
      }
    ]
  },
  {
    "sha": "9c0e6975f42a1197a7b898b19d8af81a03868123",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzBlNjk3NWY0MmExMTk3YTdiODk4YjE5ZDhhZjgxYTAzODY4MTIz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-12-19T23:00:04Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-16T03:27:16Z"
      },
      "message": "Fix nonsensical -norpcwhitelist, -norpcallowip and related behavior\n\nThis change fixes some corner cases handling negated list options:\n-norpcwhitelist, -norpcallowip, -norpcbind, -nobind, -nowhitebind, -noconnect,\n-noexternalip, -noonlynet, and -nosignetchalleng. Negating these options is now\nthe same as not specifying them at all. This is useful for being able to\noverride config file options on the command line without seeing parameter\ninteraction side effects from the otherwise ignored config options.\n\nThe code change here is just avoid calling the IsArgSet() function on\nALLOW_LIST options, and to disallow such calls in the future. Code that uses\nIsArgSet() with list options is confusing and leads to mistakes due to the easy\nto overlook case where an argument is negated and IsArgSet() returns true, but\nGetArgs() returns an empty list.\n\nThis change includes release notes, but the release notes don't go into details\nabout specific options. For reference this change:\n\n- Treats specifying -norpcwhitelist exactly the same as not specifying any\n  -rpcwhitelist, instead of behaving almost the same but flipping the default\n  -rpcwhitelistdefault value.\n\n- Treats specifying -norpcallowip and -norpcbind exactly the same as not\n  specifying -rpcallowip or -rpcbind, instead of failing to bind to localhost\n  and failing to show warnings when one value is set without the other.\n\n- Treats specifying -nobind, -nowhitebind, and -noconnect exactly the same as\n  not specifying -bind, -whitebind, or -connect values instead of treating them\n  almost the same but causing parameter interactions with -dnsseed, -listen,\n  and m_use_addrman_outgoing values.\n\n- Treats specifying -noexternalip exactly the same as not specifying any\n  -externalip, instead of treating it almost the same but interacting with the\n  -discover value.\n\n- Treats specifying -noonlynet exactly the same as not specifying -onlynet\n  instead of marking all networks unreachable.\n\n- Treats specifying -nosignetchallenge exactly the same as not specifying\n  -signetchallenge instead of throwing strange error \"-signetchallenge cannot\n  be multiple values\"\n\n- Clarifies -vbparams and -debug handling code and fixes misleading comments\n  without changing behavior.",
      "tree": {
        "sha": "d358aafa5666c3a2bb3582d88f08ea89ef674134",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d358aafa5666c3a2bb3582d88f08ea89ef674134"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c0e6975f42a1197a7b898b19d8af81a03868123",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c0e6975f42a1197a7b898b19d8af81a03868123",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c0e6975f42a1197a7b898b19d8af81a03868123",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c0e6975f42a1197a7b898b19d8af81a03868123/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bcb45347ebdc2e969129318214631369d466073",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bcb45347ebdc2e969129318214631369d466073",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bcb45347ebdc2e969129318214631369d466073"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 61,
      "deletions": 24
    },
    "files": [
      {
        "sha": "6f6f10b697f763dbd4d6769be9257e10176cb663",
        "filename": "doc/release-notes-17783.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c0e6975f42a1197a7b898b19d8af81a03868123/doc/release-notes-17783.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c0e6975f42a1197a7b898b19d8af81a03868123/doc/release-notes-17783.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-17783.md?ref=9c0e6975f42a1197a7b898b19d8af81a03868123",
        "patch": "@@ -0,0 +1,4 @@\n+Configuration\n+-------------\n+\n+Some corner cases handling negated list options `-norpcallowip`, `-norpcbind`, `-nobind`, `-nowhitebind`, `-noconnect`, `-noexternalip`, `-noonlynet`, `-nosignetchallenge` have been fixed. Now negating these options is the same as not specifying them at all."
      },
      {
        "sha": "35259989033cba2e83cb6f0834e5a614955a0a55",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c0e6975f42a1197a7b898b19d8af81a03868123/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c0e6975f42a1197a7b898b19d8af81a03868123/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=9c0e6975f42a1197a7b898b19d8af81a03868123",
        "patch": "@@ -278,7 +278,7 @@ class SigNetParams : public CChainParams {\n         std::vector<uint8_t> bin;\n         vSeeds.clear();\n \n-        if (!args.IsArgSet(\"-signetchallenge\")) {\n+        if (args.GetArgs(\"-signetchallenge\").empty()) {\n             bin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n             vSeeds.emplace_back(\"178.128.221.177\");\n             vSeeds.emplace_back(\"2a01:7c8:d005:390::5\");\n@@ -499,8 +499,6 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n         consensus.SegwitHeight = static_cast<int>(height);\n     }\n \n-    if (!args.IsArgSet(\"-vbparams\")) return;\n-\n     for (const std::string& strDeployment : args.GetArgs(\"-vbparams\")) {\n         std::vector<std::string> vDeploymentParams;\n         boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));"
      },
      {
        "sha": "e74d89261d12241c779ea01c8330bc1844d13433",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c0e6975f42a1197a7b898b19d8af81a03868123/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c0e6975f42a1197a7b898b19d8af81a03868123/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=9c0e6975f42a1197a7b898b19d8af81a03868123",
        "patch": "@@ -266,7 +266,7 @@ static bool InitRPCAuthentication()\n         }\n     }\n \n-    g_rpc_whitelist_default = gArgs.GetBoolArg(\"-rpcwhitelistdefault\", gArgs.IsArgSet(\"-rpcwhitelist\"));\n+    g_rpc_whitelist_default = gArgs.GetBoolArg(\"-rpcwhitelistdefault\", gArgs.GetArgs(\"-rpcwhitelist\").size() > 0);\n     for (const std::string& strRPCWhitelist : gArgs.GetArgs(\"-rpcwhitelist\")) {\n         auto pos = strRPCWhitelist.find(':');\n         std::string strUser = strRPCWhitelist.substr(0, pos);"
      },
      {
        "sha": "b097fdf57a6229db5c537049761a5e356e4c6ace",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c0e6975f42a1197a7b898b19d8af81a03868123/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c0e6975f42a1197a7b898b19d8af81a03868123/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=9c0e6975f42a1197a7b898b19d8af81a03868123",
        "patch": "@@ -293,16 +293,20 @@ static bool HTTPBindAddresses(struct evhttp* http)\n     std::vector<std::pair<std::string, uint16_t>> endpoints;\n \n     // Determine what addresses to bind to\n-    if (!(gArgs.IsArgSet(\"-rpcallowip\") && gArgs.IsArgSet(\"-rpcbind\"))) { // Default to loopback if not allowing external IPs\n+    // To prevent misconfiguration and accidental exposure of the RPC\n+    // interface, require -rpcallowip and -rpcbind to both be specified\n+    // together. If either is missing, ignore both values, bind to localhost\n+    // instead, and log warnings.\n+    if (gArgs.GetArgs(\"-rpcallowip\").size() == 0 || gArgs.GetArgs(\"-rpcbind\").size() == 0) { // Default to loopback if not allowing external IPs\n         endpoints.push_back(std::make_pair(\"::1\", http_port));\n         endpoints.push_back(std::make_pair(\"127.0.0.1\", http_port));\n-        if (gArgs.IsArgSet(\"-rpcallowip\")) {\n+        if (gArgs.GetArgs(\"-rpcallowip\").size() > 0) {\n             LogPrintf(\"WARNING: option -rpcallowip was specified without -rpcbind; this doesn't usually make sense\\n\");\n         }\n-        if (gArgs.IsArgSet(\"-rpcbind\")) {\n+        if (gArgs.GetArgs(\"-rpcbind\").size() > 0) {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n-    } else if (gArgs.IsArgSet(\"-rpcbind\")) { // Specific bind address\n+    } else { // Specific bind addresses\n         for (const std::string& strRPCBind : gArgs.GetArgs(\"-rpcbind\")) {\n             uint16_t port{http_port};\n             std::string host;"
      },
      {
        "sha": "a13e48867bfcb5231adee898183139d20d13107a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c0e6975f42a1197a7b898b19d8af81a03868123/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c0e6975f42a1197a7b898b19d8af81a03868123/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9c0e6975f42a1197a7b898b19d8af81a03868123",
        "patch": "@@ -630,16 +630,16 @@ void InitParameterInteraction(ArgsManager& args)\n {\n     // when specifying an explicit binding address, you want to listen on it\n     // even when -connect or -proxy is specified\n-    if (args.IsArgSet(\"-bind\")) {\n+    if (args.GetArgs(\"-bind\").size() > 0) {\n         if (args.SoftSetBoolArg(\"-listen\", true))\n             LogPrintf(\"%s: parameter interaction: -bind set -> setting -listen=1\\n\", __func__);\n     }\n-    if (args.IsArgSet(\"-whitebind\")) {\n+    if (args.GetArgs(\"-whitebind\").size() > 0) {\n         if (args.SoftSetBoolArg(\"-listen\", true))\n             LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n     }\n \n-    if (args.IsArgSet(\"-connect\")) {\n+    if (args.GetArgs(\"-connect\").size() > 0) {\n         // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n         if (args.SoftSetBoolArg(\"-dnsseed\", false))\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n@@ -679,7 +679,7 @@ void InitParameterInteraction(ArgsManager& args)\n         }\n     }\n \n-    if (args.IsArgSet(\"-externalip\")) {\n+    if (args.GetArgs(\"-externalip\").size() > 0) {\n         // if an explicit public IP is specified, do not try to find others\n         if (args.SoftSetBoolArg(\"-discover\", false))\n             LogPrintf(\"%s: parameter interaction: -externalip set -> setting -discover=0\\n\", __func__);\n@@ -1196,7 +1196,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n     }\n \n-    if (args.IsArgSet(\"-onlynet\")) {\n+    if (args.GetArgs(\"-onlynet\").size() > 0) {\n         std::set<enum Network> nets;\n         for (const std::string& snet : args.GetArgs(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n@@ -1745,7 +1745,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     connOptions.vSeedNodes = args.GetArgs(\"-seednode\");\n \n     // Initiate outbound connections unless connect=0\n-    connOptions.m_use_addrman_outgoing = !args.IsArgSet(\"-connect\");\n+    connOptions.m_use_addrman_outgoing = args.GetArgs(\"-connect\").empty();\n     if (!connOptions.m_use_addrman_outgoing) {\n         const auto connect = args.GetArgs(\"-connect\");\n         if (connect.size() != 1 || connect[0] != \"0\") {"
      },
      {
        "sha": "f6cd6389d1c8b3c5beef315e447e5f6d0016b477",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c0e6975f42a1197a7b898b19d8af81a03868123/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c0e6975f42a1197a7b898b19d8af81a03868123/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=9c0e6975f42a1197a7b898b19d8af81a03868123",
        "patch": "@@ -95,8 +95,9 @@ void SetLoggingOptions(const ArgsManager& args)\n \n void SetLoggingCategories(const ArgsManager& args)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n+    const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n+    if (!categories.empty()) {\n+        // Special-case: if -debug=0/-debug=none is set, turn off debugging messages\n         const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n \n         if (std::none_of(categories.begin(), categories.end(),"
      },
      {
        "sha": "1cfafe28a1014cc1cfd4abe024c3511b5f416a0c",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c0e6975f42a1197a7b898b19d8af81a03868123/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c0e6975f42a1197a7b898b19d8af81a03868123/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=9c0e6975f42a1197a7b898b19d8af81a03868123",
        "patch": "@@ -59,6 +59,7 @@ FUZZ_TARGET(system)\n                 // Avoid hitting:\n                 // util/system.cpp:425: void ArgsManager::AddArg(const std::string &, const std::string &, unsigned int, const OptionsCategory &): Assertion `ret.second' failed.\n                 const std::string argument_name = GetArgumentName(fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                // Avoid assertion in AddArg if this would try to add an already registered flag.\n                 if (args_manager.GetArgFlags(argument_name) != std::nullopt) {\n                     return;\n                 }\n@@ -138,7 +139,17 @@ FUZZ_TARGET(system)\n     (void)args_manager.GetUnrecognizedSections();\n     (void)args_manager.GetUnsuitableSectionOnlyArgs();\n     (void)args_manager.IsArgNegated(s1);\n-    (void)args_manager.IsArgSet(s1);\n+    try {\n+        (void)args_manager.IsArgSet(s1);\n+    } catch (const std::logic_error&) {\n+        // Will throw logic_error if called on an ALLOW_LIST arg.\n+    }\n \n-    (void)HelpRequested(args_manager);\n+    try {\n+        (void)HelpRequested(args_manager);\n+    } catch (const std::logic_error&) {\n+        // May throw logic_error in rare case where SetupHelpOptions randomly\n+        // was not called above, but AddArg was called, with a valid arg name\n+        // like \"-?\" combined with invalid flags like ALLOW_LIST.\n+    }\n }"
      },
      {
        "sha": "1c355493b33d1fb41f0e06bc4417e0f654d2d6cb",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c0e6975f42a1197a7b898b19d8af81a03868123/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c0e6975f42a1197a7b898b19d8af81a03868123/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=9c0e6975f42a1197a7b898b19d8af81a03868123",
        "patch": "@@ -259,6 +259,14 @@ struct TestArgsManager : public ArgsManager\n         if (test.arg) test.arg->m_flags &= ~ALLOW_LIST;\n         return GetBoolArg(name, default_value);\n     }\n+    //! Call IsArgSet(), temporarily disabling ALLOW_LIST so call can succeed.\n+    //! This is called by old tests written before ALLOW_LIST was enforced.\n+    bool TestArgSet(const std::string& name)\n+    {\n+        TestFlags test(*this, name);\n+        if (test.arg) test.arg->m_flags &= ~ALLOW_LIST;\n+        return IsArgSet(name);\n+    }\n     using ArgsManager::GetSetting;\n     using ArgsManager::GetSettingsList;\n     using ArgsManager::ReadConfigStream;\n@@ -560,7 +568,7 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     // -a, -b and -ccc end up in map, -d ignored because it is after\n     // a non-option argument (non-GNU option parsing)\n     BOOST_CHECK(testArgs.m_settings.command_line_options.size() == 3 && testArgs.m_settings.ro_config.empty());\n-    BOOST_CHECK(testArgs.IsArgSet(\"-a\") && testArgs.IsArgSet(\"-b\") && testArgs.IsArgSet(\"-ccc\")\n+    BOOST_CHECK(testArgs.IsArgSet(\"-a\") && testArgs.IsArgSet(\"-b\") && testArgs.TestArgSet(\"-ccc\")\n                 && !testArgs.IsArgSet(\"f\") && !testArgs.IsArgSet(\"-d\"));\n     BOOST_CHECK(testArgs.m_settings.command_line_options.count(\"a\") && testArgs.m_settings.command_line_options.count(\"b\") && testArgs.m_settings.command_line_options.count(\"ccc\")\n                 && !testArgs.m_settings.command_line_options.count(\"f\") && !testArgs.m_settings.command_line_options.count(\"d\"));\n@@ -805,12 +813,12 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n \n     BOOST_CHECK(test_args.IsArgSet(\"-a\"));\n     BOOST_CHECK(test_args.IsArgSet(\"-b\"));\n-    BOOST_CHECK(test_args.IsArgSet(\"-ccc\"));\n+    BOOST_CHECK(test_args.TestArgSet(\"-ccc\"));\n     BOOST_CHECK(test_args.IsArgSet(\"-d\"));\n     BOOST_CHECK(test_args.IsArgSet(\"-fff\"));\n     BOOST_CHECK(test_args.IsArgSet(\"-ggg\"));\n-    BOOST_CHECK(test_args.IsArgSet(\"-h\"));\n-    BOOST_CHECK(test_args.IsArgSet(\"-i\"));\n+    BOOST_CHECK(test_args.TestArgSet(\"-h\"));\n+    BOOST_CHECK(test_args.TestArgSet(\"-i\"));\n     BOOST_CHECK(!test_args.IsArgSet(\"-zzz\"));\n     BOOST_CHECK(!test_args.IsArgSet(\"-iii\"));\n \n@@ -1190,7 +1198,7 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n \n         desc += \" || \";\n \n-        if (!parser.IsArgSet(key)) {\n+        if (!parser.TestArgSet(key)) {\n             desc += \"unset\";\n             BOOST_CHECK(!parser.IsArgNegated(key));\n             BOOST_CHECK_EQUAL(parser.TestArgString(key, \"default\"), \"default\");"
      },
      {
        "sha": "4b92d98ad1882ce3e65f36b2f7c018858831b962",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c0e6975f42a1197a7b898b19d8af81a03868123/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c0e6975f42a1197a7b898b19d8af81a03868123/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=9c0e6975f42a1197a7b898b19d8af81a03868123",
        "patch": "@@ -567,6 +567,17 @@ std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n+    // Don't allow IsArgSet() to be called on list arguments, because the odd\n+    // case where an argument is negated and IsArgSet() returns true but\n+    // GetArgs() returns an empty list has resulted in confusing code and bugs.\n+    //\n+    // In most cases it's best to treat empty lists and negated lists the same.\n+    // In cases where it's useful treat them differently (cases where the\n+    // default list value is effectively non-empty), code is less confusing if\n+    // it explicity calls IsArgNegated() to distinguish the negated and empty\n+    // conditions instead of IsArgSet() which makes the distinction more\n+    // indirectly.\n+    CheckArgFlags(strArg, /* require= */ 0, /* forbid= */ ALLOW_LIST, __func__);\n     return !GetSetting(strArg).isNull();\n }\n \n@@ -682,7 +693,7 @@ bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n-    if (IsArgSet(strArg)) return false;\n+    if (!GetSetting(strArg).isNull()) return false;\n     ForceSetArg(strArg, strValue);\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "048a4ee606a370d51620e39aecc8f6d4a132c31c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDhhNGVlNjA2YTM3MGQ1MTYyMGUzOWFlY2M4ZjZkNGExMzJjMzFj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-12-19T23:00:04Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-16T03:27:16Z"
      },
      "message": "Fix nonsensical bitcoin-cli -norpcwallet behavior\n\nTreat specifying -norpcwallet exactly the same as not specifying any -rpcwallet\noption, instead of treating it like -rpcwallet=0 with 0 as the wallet name.\n\nThis restores previous behavior before 743077544b5420246ef29e0b708c90e3a8dfeeb6\nfrom https://github.com/bitcoin/bitcoin/pull/18594, which inadvertently changed\nit.",
      "tree": {
        "sha": "8e897874e29c73bc13cc1e91e69e447993d9cd2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e897874e29c73bc13cc1e91e69e447993d9cd2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/048a4ee606a370d51620e39aecc8f6d4a132c31c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/048a4ee606a370d51620e39aecc8f6d4a132c31c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/048a4ee606a370d51620e39aecc8f6d4a132c31c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/048a4ee606a370d51620e39aecc8f6d4a132c31c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c0e6975f42a1197a7b898b19d8af81a03868123",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c0e6975f42a1197a7b898b19d8af81a03868123",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c0e6975f42a1197a7b898b19d8af81a03868123"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b8b71a2905490650b4d4e563fcb4095a22e08f75",
        "filename": "doc/release-notes-17783.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/048a4ee606a370d51620e39aecc8f6d4a132c31c/doc/release-notes-17783.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/048a4ee606a370d51620e39aecc8f6d4a132c31c/doc/release-notes-17783.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-17783.md?ref=048a4ee606a370d51620e39aecc8f6d4a132c31c",
        "patch": "@@ -1,4 +1,4 @@\n Configuration\n -------------\n \n-Some corner cases handling negated list options `-norpcallowip`, `-norpcbind`, `-nobind`, `-nowhitebind`, `-noconnect`, `-noexternalip`, `-noonlynet`, `-nosignetchallenge` have been fixed. Now negating these options is the same as not specifying them at all.\n+Some corner cases handling negated list options `-norpcallowip`, `-norpcbind`, `-nobind`, `-nowhitebind`, `-noconnect`, `-noexternalip`, `-noonlynet`, `-nosignetchallenge`, `-norpcwallet` have been fixed. Now negating these options is the same as not specifying them at all."
      },
      {
        "sha": "946fab9bbd3a8b7582e4e62e7a82543d8ddbe6f1",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/048a4ee606a370d51620e39aecc8f6d4a132c31c/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/048a4ee606a370d51620e39aecc8f6d4a132c31c/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=048a4ee606a370d51620e39aecc8f6d4a132c31c",
        "patch": "@@ -874,7 +874,7 @@ static void GetWalletBalances(UniValue& result)\n static UniValue GetNewAddress()\n {\n     std::optional<std::string> wallet_name{};\n-    if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\n+    if (gArgs.IsArgSet(\"-rpcwallet\") && !gArgs.IsArgNegated(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\n     DefaultRequestHandler rh;\n     return ConnectAndCallRPC(&rh, \"getnewaddress\", /* args=*/{}, wallet_name);\n }\n@@ -981,14 +981,14 @@ static int CommandLineRPC(int argc, char *argv[])\n         if (nRet == 0) {\n             // Perform RPC call\n             std::optional<std::string> wallet_name{};\n-            if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\n+            if (gArgs.IsArgSet(\"-rpcwallet\") && !gArgs.IsArgNegated(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\n             const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, wallet_name);\n \n             // Parse reply\n             UniValue result = find_value(reply, \"result\");\n             const UniValue& error = find_value(reply, \"error\");\n             if (error.isNull()) {\n-                if (gArgs.IsArgSet(\"-getinfo\") && !gArgs.IsArgSet(\"-rpcwallet\")) {\n+                if (gArgs.IsArgSet(\"-getinfo\") && (!gArgs.IsArgSet(\"-rpcwallet\") || gArgs.IsArgNegated(\"-rpcwallet\"))) {\n                     GetWalletBalances(result); // fetch multiwallet balances and append to result\n                 }\n                 ParseResult(result, strPrint);"
      }
    ]
  }
]