[
  {
    "sha": "fafb880e8854f9b7fb3934e02a0bd0409aec72c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZiODgwZTg4NTRmOWI3ZmIzOTM0ZTAyYTBiZDA0MDlhZWM3MmMy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-01T11:49:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-01T11:48:42Z"
      },
      "message": "refactor: [index] Replace deprecated char with uint8_t in serialization",
      "tree": {
        "sha": "c7bc7f2b4b47c2188ac29afde951390360e7ef28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7bc7f2b4b47c2188ac29afde951390360e7ef28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafb880e8854f9b7fb3934e02a0bd0409aec72c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg8bAv+JsIAirIJ/BUFEreyUWNsx9v5wq1BqGkdOGjRoiw0OOL5MnJ68m5CWo9X\nEF3qKzUBWiTKBYozdaTRLHB4E8PgC8Gj/LEGUbxVv32EOVfJhj5ARbwSI3yefF3t\npw08D0pBKxFrFnatxiUIV3s/iaS5dWirZIPO8Db/R402hJngLZQ740OZBifeCa3A\n7uR0TwmmhHxbgebNk6R4+OGsFjRrv0ZFWf4ybnaCe/nL+5l7X7qOu6O9wvO87Szx\ntAdeAp++vWLR1oaOWVU1G3NkaPWwDrmJizpToPFlWL5cWiFRhCZVeAgpujx/NiRz\nDyLE5y3+nJQ4dFa8+i8ZY3otbH9wmOxWHUakVokMQpc68VnrrvXbiUWwX33nWqnp\nlY/9D5ignDg8XEkkNZfoYW/9V9iFCcaPKYPnyb0yPVHDHmS0CzgovHsN3+WkCwiC\n/jJX3CH84SzQ7rZIQF/2/qEf0t0EhGeGGibiAGKCHItjsdpqvDhVsk9+N2xC7Zwv\n+Xfk+dch\n=3lgn\n-----END PGP SIGNATURE-----",
        "payload": "tree c7bc7f2b4b47c2188ac29afde951390360e7ef28\nparent d22e7ee93313b13365bd14a5fffeb055cff4dcd2\nauthor MarcoFalke <falke.marco@gmail.com> 1619869777 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1619869722 +0200\n\nrefactor: [index] Replace deprecated char with uint8_t in serialization\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafb880e8854f9b7fb3934e02a0bd0409aec72c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafb880e8854f9b7fb3934e02a0bd0409aec72c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafb880e8854f9b7fb3934e02a0bd0409aec72c2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d22e7ee93313b13365bd14a5fffeb055cff4dcd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d22e7ee93313b13365bd14a5fffeb055cff4dcd2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d22e7ee93313b13365bd14a5fffeb055cff4dcd2"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 20,
      "deletions": 21
    },
    "files": [
      {
        "sha": "357c4fbaf921a7a51ddd01bae2c9e030e312ca23",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafb880e8854f9b7fb3934e02a0bd0409aec72c2/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafb880e8854f9b7fb3934e02a0bd0409aec72c2/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=fafb880e8854f9b7fb3934e02a0bd0409aec72c2",
        "patch": "@@ -13,7 +13,7 @@\n #include <validation.h> // For g_chainman\n #include <warnings.h>\n \n-constexpr char DB_BEST_BLOCK = 'B';\n+constexpr uint8_t DB_BEST_BLOCK{'B'};\n \n constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; // seconds"
      },
      {
        "sha": "b82b9915d5dbd669f216a3e0c08f8a5a1f1c9a9b",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafb880e8854f9b7fb3934e02a0bd0409aec72c2/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafb880e8854f9b7fb3934e02a0bd0409aec72c2/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=fafb880e8854f9b7fb3934e02a0bd0409aec72c2",
        "patch": "@@ -24,9 +24,9 @@\n  * as big-endian so that sequential reads of filters by height are fast.\n  * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n  */\n-constexpr char DB_BLOCK_HASH = 's';\n-constexpr char DB_BLOCK_HEIGHT = 't';\n-constexpr char DB_FILTER_POS = 'P';\n+constexpr uint8_t DB_BLOCK_HASH{'s'};\n+constexpr uint8_t DB_BLOCK_HEIGHT{'t'};\n+constexpr uint8_t DB_FILTER_POS{'P'};\n \n constexpr unsigned int MAX_FLTR_FILE_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for fltr?????.dat files */\n@@ -63,7 +63,7 @@ struct DBHeightKey {\n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        char prefix = ser_readdata8(s);\n+        const uint8_t prefix{ser_readdata8(s)};\n         if (prefix != DB_BLOCK_HEIGHT) {\n             throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n         }\n@@ -77,7 +77,7 @@ struct DBHashKey {\n     explicit DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n \n     SERIALIZE_METHODS(DBHashKey, obj) {\n-        char prefix = DB_BLOCK_HASH;\n+        uint8_t prefix{DB_BLOCK_HASH};\n         READWRITE(prefix);\n         if (prefix != DB_BLOCK_HASH) {\n             throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n@@ -149,7 +149,7 @@ bool BlockFilterIndex::ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& f\n     }\n \n     uint256 block_hash;\n-    std::vector<unsigned char> encoded_filter;\n+    std::vector<uint8_t> encoded_filter;\n     try {\n         filein >> block_hash >> encoded_filter;\n         filter = BlockFilter(GetFilterType(), block_hash, std::move(encoded_filter));"
      },
      {
        "sha": "7c8b2b186e04ef6f04ba180b14ad4a5a76033526",
        "filename": "src/index/coinstatsindex.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafb880e8854f9b7fb3934e02a0bd0409aec72c2/src/index/coinstatsindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafb880e8854f9b7fb3934e02a0bd0409aec72c2/src/index/coinstatsindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.cpp?ref=fafb880e8854f9b7fb3934e02a0bd0409aec72c2",
        "patch": "@@ -12,9 +12,9 @@\n #include <undo.h>\n #include <validation.h>\n \n-static constexpr char DB_BLOCK_HASH = 's';\n-static constexpr char DB_BLOCK_HEIGHT = 't';\n-static constexpr char DB_MUHASH = 'M';\n+static constexpr uint8_t DB_BLOCK_HASH{'s'};\n+static constexpr uint8_t DB_BLOCK_HEIGHT{'t'};\n+static constexpr uint8_t DB_MUHASH{'M'};\n \n namespace {\n \n@@ -66,7 +66,7 @@ struct DBHeightKey {\n     template <typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        char prefix{static_cast<char>(ser_readdata8(s))};\n+        const uint8_t prefix{ser_readdata8(s)};\n         if (prefix != DB_BLOCK_HEIGHT) {\n             throw std::ios_base::failure(\"Invalid format for coinstatsindex DB height key\");\n         }\n@@ -81,7 +81,7 @@ struct DBHashKey {\n \n     SERIALIZE_METHODS(DBHashKey, obj)\n     {\n-        char prefix{DB_BLOCK_HASH};\n+        uint8_t prefix{DB_BLOCK_HASH};\n         READWRITE(prefix);\n         if (prefix != DB_BLOCK_HASH) {\n             throw std::ios_base::failure(\"Invalid format for coinstatsindex DB hash key\");"
      },
      {
        "sha": "06f591023894b1e7e2f174a98f20b3dedff0d23d",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafb880e8854f9b7fb3934e02a0bd0409aec72c2/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafb880e8854f9b7fb3934e02a0bd0409aec72c2/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=fafb880e8854f9b7fb3934e02a0bd0409aec72c2",
        "patch": "@@ -10,14 +10,13 @@\n #include <util/translation.h>\n #include <validation.h>\n \n-constexpr char DB_BEST_BLOCK = 'B';\n-constexpr char DB_TXINDEX = 't';\n-constexpr char DB_TXINDEX_BLOCK = 'T';\n+constexpr uint8_t DB_BEST_BLOCK{'B'};\n+constexpr uint8_t DB_TXINDEX{'t'};\n+constexpr uint8_t DB_TXINDEX_BLOCK{'T'};\n \n std::unique_ptr<TxIndex> g_txindex;\n \n \n-\n /** Access to the txindex database (indexes/txindex/) */\n class TxIndex::DB : public BaseIndex::DB\n {\n@@ -60,8 +59,8 @@ bool TxIndex::DB::WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_\n  */\n static void WriteTxIndexMigrationBatches(CDBWrapper& newdb, CDBWrapper& olddb,\n                                          CDBBatch& batch_newdb, CDBBatch& batch_olddb,\n-                                         const std::pair<unsigned char, uint256>& begin_key,\n-                                         const std::pair<unsigned char, uint256>& end_key)\n+                                         const std::pair<uint8_t, uint256>& begin_key,\n+                                         const std::pair<uint8_t, uint256>& end_key)\n {\n     // Sync new DB changes to disk before deleting from old DB.\n     newdb.WriteBatch(batch_newdb, /*fSync=*/ true);\n@@ -113,9 +112,9 @@ bool TxIndex::DB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator&\n     CDBBatch batch_newdb(*this);\n     CDBBatch batch_olddb(block_tree_db);\n \n-    std::pair<unsigned char, uint256> key;\n-    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n-    std::pair<unsigned char, uint256> prev_key = begin_key;\n+    std::pair<uint8_t, uint256> key;\n+    std::pair<uint8_t, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<uint8_t, uint256> prev_key = begin_key;\n \n     bool interrupted = false;\n     std::unique_ptr<CDBIterator> cursor(block_tree_db.NewIterator());"
      }
    ]
  }
]