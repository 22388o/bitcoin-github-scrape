[
  {
    "sha": "6674a75bfbdf680d0a3648f44c6591ff5fc983cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Njc0YTc1YmZiZGY2ODBkMGEzNjQ4ZjQ0YzY1OTFmZjVmYzk4M2Nm",
    "commit": {
      "author": {
        "name": "Qasim Javed",
        "email": "qasimj@gmail.com",
        "date": "2018-04-23T07:39:12Z"
      },
      "committer": {
        "name": "Qasim Javed",
        "email": "qasimj@gmail.com",
        "date": "2018-04-24T18:41:20Z"
      },
      "message": "[tests] Make rpcauth.py testable and add unit tests\n\nrefs #12995",
      "tree": {
        "sha": "76fe134f57f4150f572c25246b0285389eb6d389",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76fe134f57f4150f572c25246b0285389eb6d389"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6674a75bfbdf680d0a3648f44c6591ff5fc983cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6674a75bfbdf680d0a3648f44c6591ff5fc983cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6674a75bfbdf680d0a3648f44c6591ff5fc983cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6674a75bfbdf680d0a3648f44c6591ff5fc983cf/comments",
    "author": {
      "login": "nixbox",
      "id": 198132,
      "node_id": "MDQ6VXNlcjE5ODEzMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/198132?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nixbox",
      "html_url": "https://github.com/nixbox",
      "followers_url": "https://api.github.com/users/nixbox/followers",
      "following_url": "https://api.github.com/users/nixbox/following{/other_user}",
      "gists_url": "https://api.github.com/users/nixbox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nixbox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nixbox/subscriptions",
      "organizations_url": "https://api.github.com/users/nixbox/orgs",
      "repos_url": "https://api.github.com/users/nixbox/repos",
      "events_url": "https://api.github.com/users/nixbox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nixbox/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "nixbox",
      "id": 198132,
      "node_id": "MDQ6VXNlcjE5ODEzMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/198132?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nixbox",
      "html_url": "https://github.com/nixbox",
      "followers_url": "https://api.github.com/users/nixbox/followers",
      "following_url": "https://api.github.com/users/nixbox/following{/other_user}",
      "gists_url": "https://api.github.com/users/nixbox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nixbox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nixbox/subscriptions",
      "organizations_url": "https://api.github.com/users/nixbox/orgs",
      "repos_url": "https://api.github.com/users/nixbox/repos",
      "events_url": "https://api.github.com/users/nixbox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nixbox/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0079d4b6dc67be3889af9a16eda89b3c4b33bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0079d4b6dc67be3889af9a16eda89b3c4b33bc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0079d4b6dc67be3889af9a16eda89b3c4b33bc5"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 81,
      "deletions": 19
    },
    "files": [
      {
        "sha": "8a8debb079d499485ff950726ce53b7f2843b3e0",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6674a75bfbdf680d0a3648f44c6591ff5fc983cf/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6674a75bfbdf680d0a3648f44c6591ff5fc983cf/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=6674a75bfbdf680d0a3648f44c6591ff5fc983cf",
        "patch": "@@ -269,7 +269,8 @@ EXTRA_DIST += \\\n     test/util/data/txcreatescript4.json \\\n     test/util/data/txcreatesignv1.hex \\\n     test/util/data/txcreatesignv1.json \\\n-    test/util/data/txcreatesignv2.hex\n+    test/util/data/txcreatesignv2.hex \\\n+    test/util/rpcauth-test.py\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n "
      },
      {
        "sha": "da84deb5e2f3571067ee454af16bd6f3b84bf6fb",
        "filename": "share/rpcauth/rpcauth.py",
        "status": "modified",
        "additions": 28,
        "deletions": 18,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6674a75bfbdf680d0a3648f44c6591ff5fc983cf/share/rpcauth/rpcauth.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6674a75bfbdf680d0a3648f44c6591ff5fc983cf/share/rpcauth/rpcauth.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/rpcauth.py?ref=6674a75bfbdf680d0a3648f44c6591ff5fc983cf",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env python3\n # Copyright (c) 2015-2017 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying \n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n import sys\n@@ -9,26 +9,36 @@\n import base64\n import hmac\n \n-if len(sys.argv) < 2:\n-    sys.stderr.write('Please include username as an argument.\\n')\n-    sys.exit(0)\n+def generate_salt():\n+    # This uses os.urandom() underneath\n+    cryptogen = SystemRandom()\n \n-username = sys.argv[1]\n+    # Create 16 byte hex salt\n+    salt_sequence = [cryptogen.randrange(256) for _ in range(16)]\n+    return ''.join([format(r, 'x') for r in salt_sequence])\n \n-#This uses os.urandom() underneath\n-cryptogen = SystemRandom()\n+def generate_password(salt):\n+    \"\"\"Create 32 byte b64 password\"\"\"\n+    password = base64.urlsafe_b64encode(os.urandom(32)).decode('utf-8')\n \n-#Create 16 byte hex salt\n-salt_sequence = [cryptogen.randrange(256) for i in range(16)]\n-hexseq = list(map(hex, salt_sequence))\n-salt = \"\".join([x[2:] for x in hexseq])\n+    m = hmac.new(bytearray(salt, 'utf-8'), bytearray(password, 'utf-8'), 'SHA256')\n+    password_hmac = m.hexdigest()\n \n-#Create 32 byte b64 password\n-password = base64.urlsafe_b64encode(os.urandom(32)).decode(\"utf-8\")\n+    return password, password_hmac\n \n-m = hmac.new(bytearray(salt, 'utf-8'), bytearray(password, 'utf-8'), \"SHA256\")\n-result = m.hexdigest()\n+def main():\n+    if len(sys.argv) < 2:\n+        sys.stderr.write('Please include username as an argument.\\n')\n+        sys.exit(0)\n \n-print(\"String to be appended to bitcoin.conf:\")\n-print(\"rpcauth=\"+username+\":\"+salt+\"$\"+result)\n-print(\"Your password:\\n\"+password)\n+    username = sys.argv[1]\n+\n+    salt = generate_salt()\n+    password, password_hmac = generate_password(salt)\n+\n+    print('String to be appended to bitcoin.conf:')\n+    print('rpcauth={0}:{1}${2}'.format(username, salt, password_hmac))\n+    print('Your password:\\n{0}'.format(password))\n+\n+if __name__ == '__main__':\n+    main()"
      },
      {
        "sha": "f7eb712089ff015476b5d41c33cb7c165d34829c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6674a75bfbdf680d0a3648f44c6591ff5fc983cf/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6674a75bfbdf680d0a3648f44c6591ff5fc983cf/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=6674a75bfbdf680d0a3648f44c6591ff5fc983cf",
        "patch": "@@ -156,6 +156,8 @@ bitcoin_test_clean : FORCE\n check-local: $(BITCOIN_TESTS:.cpp=.cpp.test)\n \t@echo \"Running test/util/bitcoin-util-test.py...\"\n \t$(PYTHON) $(top_builddir)/test/util/bitcoin-util-test.py\n+\t@echo \"Running test/util/rpcauth-test.py...\"\n+\t$(PYTHON) $(top_builddir)/test/util/rpcauth-test.py\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n if EMBEDDED_UNIVALUE\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check"
      },
      {
        "sha": "dfbb5ea3a7c9d92e48eb656cdbcb0e04241b8b32",
        "filename": "test/util/rpcauth-test.py",
        "status": "added",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6674a75bfbdf680d0a3648f44c6591ff5fc983cf/test/util/rpcauth-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6674a75bfbdf680d0a3648f44c6591ff5fc983cf/test/util/rpcauth-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/rpcauth-test.py?ref=6674a75bfbdf680d0a3648f44c6591ff5fc983cf",
        "patch": "@@ -0,0 +1,49 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test share/rpcauth/rpcauth.py\n+\"\"\"\n+import base64\n+import configparser\n+import hmac\n+import importlib\n+import os\n+import sys\n+import unittest\n+\n+class TestRPCAuth(unittest.TestCase):\n+    def setUp(self):\n+        config = configparser.ConfigParser()\n+        config_path = os.path.abspath(\n+            os.path.join(os.sep, os.path.abspath(os.path.dirname(__file__)),\n+            \"../config.ini\"))\n+        with open(config_path) as config_file:\n+            config.read_file(config_file)\n+        sys.path.insert(0, os.path.dirname(config['environment']['RPCAUTH']))\n+        self.rpcauth = importlib.import_module('rpcauth')\n+\n+    def test_generate_salt(self):\n+        self.assertLessEqual(len(self.rpcauth.generate_salt()), 32)\n+        self.assertGreaterEqual(len(self.rpcauth.generate_salt()), 16)\n+\n+    def test_generate_password(self):\n+        salt = self.rpcauth.generate_salt()\n+        password, password_hmac = self.rpcauth.generate_password(salt)\n+\n+        expected_password = base64.urlsafe_b64encode(\n+            base64.urlsafe_b64decode(password)).decode('utf-8')\n+        self.assertEqual(expected_password, password)\n+\n+    def test_check_password_hmac(self):\n+        salt = self.rpcauth.generate_salt()\n+        password, password_hmac = self.rpcauth.generate_password(salt)\n+\n+        m = hmac.new(bytearray(salt, 'utf-8'),\n+            bytearray(password, 'utf-8'), 'SHA256')\n+        expected_password_hmac = m.hexdigest()\n+\n+        self.assertEqual(expected_password_hmac, password_hmac)\n+\n+if __name__ == '__main__':\n+    unittest.main()"
      }
    ]
  }
]