[
  {
    "sha": "fa2197c8b3178787d99e2acb5c3c717df14ddabf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTIxOTdjOGIzMTc4Nzg3ZDk5ZTJhY2I1YzNjNzE3ZGYxNGRkYWJm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-30T17:53:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-03T09:50:05Z"
      },
      "message": "test: Use loop to register RPCs\n\nThe same loop is used by the server, so no need for\nthe tests to do this differently.",
      "tree": {
        "sha": "05e8db79da4b58f8d009f65e8ae9e62cabdc49a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05e8db79da4b58f8d009f65e8ae9e62cabdc49a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2197c8b3178787d99e2acb5c3c717df14ddabf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiKkQv/f0KOusWc/a3C1dOGetf1D6pd5LbqWc48wa4XpKH8XeYP+PX3FIi6t0xU\n5wXNeuU5AlTGrBkodIFl9gng9ncBL2/tZsgy3y86xLSqCjJk1/JoVOaFkpV6ZHTH\nuqqFnb5RcFqA+4blKNpSMTbcyrWq7RkMIoXAe4owlGwvqrSyBYIXWcIJ97llUWBL\n29gRgk4AU5XvnlwtbLVfc52nfbYdJLWZXWHPnF2kis+cmhQQPuXaPiQitJBXMM/g\n6i89vjPjS1HPlPAJDcFngRQ0LA2cYTlKT/S3uJUdX6cm/7M55qLRH0Yz4LuYIEJh\ndvjDN2zkhBuq2QL2eCArOzw0LX4hwrA/WNJ1NXIFCcnHdos5CN/O0dup5kt7cQiI\nHmoRRVakKEoyCjacZYAw0OpdDkMo2d723VeZnYYiDGPnjv3ZqyiO9oXphL5bRSWP\nKJjc6gBo0LxLy9W6RGwlV+aPpoMvrKZ6AI4e4hM8541617o5J4Ifd+RuCvyLWt1/\nz1odGIdk\n=1b6+\n-----END PGP SIGNATURE-----",
        "payload": "tree 05e8db79da4b58f8d009f65e8ae9e62cabdc49a6\nparent b8593616dc2ab5b8f81edd8b2408d400e3b696cd\nauthor MarcoFalke <falke.marco@gmail.com> 1619805211 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1620035405 +0200\n\ntest: Use loop to register RPCs\n\nThe same loop is used by the server, so no need for\nthe tests to do this differently.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2197c8b3178787d99e2acb5c3c717df14ddabf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2197c8b3178787d99e2acb5c3c717df14ddabf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2197c8b3178787d99e2acb5c3c717df14ddabf/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8593616dc2ab5b8f81edd8b2408d400e3b696cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8593616dc2ab5b8f81edd8b2408d400e3b696cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8593616dc2ab5b8f81edd8b2408d400e3b696cd"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "df3b85ea71b081b97aa1d27d142b1e539a297658",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2197c8b3178787d99e2acb5c3c717df14ddabf/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2197c8b3178787d99e2acb5c3c717df14ddabf/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=fa2197c8b3178787d99e2acb5c3c717df14ddabf",
        "patch": "@@ -35,14 +35,16 @@ static RPCHelpMan rpcNestedTest_rpc()\n }\n \n static const CRPCCommand vRPCCommands[] = {\n-    {\"test\", &rpcNestedTest_rpc},\n+    {\"rpcNestedTest\", &rpcNestedTest_rpc},\n };\n \n void RPCNestedTests::rpcNestedTests()\n {\n     // do some test setup\n     // could be moved to a more generic place when we add more tests on QT level\n-    tableRPC.appendCommand(\"rpcNestedTest\", &vRPCCommands[0]);\n+    for (const auto& c : vRPCCommands) {\n+        tableRPC.appendCommand(c.name, &c);\n+    }\n \n     TestingSetup test;\n     m_node.setContext(&test.m_node);"
      }
    ]
  },
  {
    "sha": "000098f9647cd2e21660603b7d7a8f623f70f673",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDAwOThmOTY0N2NkMmUyMTY2MDYwM2I3ZDdhOGY2MjNmNzBmNjcz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-30T16:55:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-03T09:50:29Z"
      },
      "message": "test: Use throwing variant accessor\n\nIt does not matter if the tests fail due to a BOOST_CHECK failure or\ndue to a thrown exception. Prefer the exception because it is less\ncode.\n\nExample fail with the throwing accessor:\n\nunknown location(0): fatal error: in \"script_standard_tests/script_standard_ExtractDestinations\": std::bad_variant_access: std::get: wrong index for variant\ntest/script_standard_tests.cpp(314): last checkpoint\n\n*** 1 failure is detected in the test module \"Bitcoin Core Test Suite\"",
      "tree": {
        "sha": "dea0a37963ef709c3f2b1609bee9097a6619f59c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dea0a37963ef709c3f2b1609bee9097a6619f59c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/000098f9647cd2e21660603b7d7a8f623f70f673",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUixGwwAuIYEDqvYsTo/flYsjZYPwvEMuQ22AbaIwCuiAIy5ozz0UE75zA5Vb6D+\nbKOyGMZnK6VtcbJtlNpoklhZ6ZLXGPt9mA9moKatb9VfCKDixKVw3QZXusZsTAdY\nZfIbGZ0SRKvdDj6YQSm8WYPcDWQvRb3PzQQNFyT9xKvcHeIfSX3osqPjTtorDw9t\nCsz75dDbdiIu49zQbOXuQo6bYoTCasJauCbwgpKxZpEr+a6Aw1Uk7Nv1qaEZ30bm\nQyIWXbWSAnqXJOUuygMAuvfdjgaphTyX4PTGmetv4uNXAJ1tJZVBcPqeYy3x3hF8\nUdZcqy/YoJnSGmeLhuhIf4kX5DM9qlPdXWN4FRq7I4DWh1xhu6eTcoB/+9XXiyLB\nNhJ/5LgG9W2iFnDPy/zH8hgTKm+VOARIuTIxXoydISwOXBBcpo9BN7QQrOCoyKkY\njLUHohb5eu6Z22A4FjketEiRtRVWcoQxX9JI0pcOxawiwutma/nWqPyMjANRnuUL\nBvyHn9TD\n=zytf\n-----END PGP SIGNATURE-----",
        "payload": "tree dea0a37963ef709c3f2b1609bee9097a6619f59c\nparent fa2197c8b3178787d99e2acb5c3c717df14ddabf\nauthor MarcoFalke <falke.marco@gmail.com> 1619801706 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1620035429 +0200\n\ntest: Use throwing variant accessor\n\nIt does not matter if the tests fail due to a BOOST_CHECK failure or\ndue to a thrown exception. Prefer the exception because it is less\ncode.\n\nExample fail with the throwing accessor:\n\nunknown location(0): fatal error: in \"script_standard_tests/script_standard_ExtractDestinations\": std::bad_variant_access: std::get: wrong index for variant\ntest/script_standard_tests.cpp(314): last checkpoint\n\n*** 1 failure is detected in the test module \"Bitcoin Core Test Suite\"\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/000098f9647cd2e21660603b7d7a8f623f70f673",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/000098f9647cd2e21660603b7d7a8f623f70f673",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/000098f9647cd2e21660603b7d7a8f623f70f673/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa2197c8b3178787d99e2acb5c3c717df14ddabf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2197c8b3178787d99e2acb5c3c717df14ddabf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2197c8b3178787d99e2acb5c3c717df14ddabf"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 11,
      "deletions": 19
    },
    "files": [
      {
        "sha": "103a971d9826a5bd7902397a1d7e7a6fdf8194db",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 19,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/000098f9647cd2e21660603b7d7a8f623f70f673/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/000098f9647cd2e21660603b7d7a8f623f70f673/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=000098f9647cd2e21660603b7d7a8f623f70f673",
        "patch": "@@ -199,23 +199,20 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     s.clear();\n     s << ToByteVector(pubkey) << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(std::get_if<PKHash>(&address) &&\n-                *std::get_if<PKHash>(&address) == PKHash(pubkey));\n+    BOOST_CHECK(std::get<PKHash>(address) == PKHash(pubkey));\n \n     // TxoutType::PUBKEYHASH\n     s.clear();\n     s << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(std::get_if<PKHash>(&address) &&\n-                *std::get_if<PKHash>(&address) == PKHash(pubkey));\n+    BOOST_CHECK(std::get<PKHash>(address) == PKHash(pubkey));\n \n     // TxoutType::SCRIPTHASH\n     CScript redeemScript(s); // initialize with leftover P2PKH script\n     s.clear();\n     s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(std::get_if<ScriptHash>(&address) &&\n-                *std::get_if<ScriptHash>(&address) == ScriptHash(redeemScript));\n+    BOOST_CHECK(std::get<ScriptHash>(address) == ScriptHash(redeemScript));\n \n     // TxoutType::MULTISIG\n     s.clear();\n@@ -233,15 +230,15 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     BOOST_CHECK(ExtractDestination(s, address));\n     WitnessV0KeyHash keyhash;\n     CHash160().Write(pubkey).Finalize(keyhash);\n-    BOOST_CHECK(std::get_if<WitnessV0KeyHash>(&address) && *std::get_if<WitnessV0KeyHash>(&address) == keyhash);\n+    BOOST_CHECK(std::get<WitnessV0KeyHash>(address) == keyhash);\n \n     // TxoutType::WITNESS_V0_SCRIPTHASH\n     s.clear();\n     WitnessV0ScriptHash scripthash;\n     CSHA256().Write(redeemScript.data(), redeemScript.size()).Finalize(scripthash.begin());\n     s << OP_0 << ToByteVector(scripthash);\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(std::get_if<WitnessV0ScriptHash>(&address) && *std::get_if<WitnessV0ScriptHash>(&address) == scripthash);\n+    BOOST_CHECK(std::get<WitnessV0ScriptHash>(address) == scripthash);\n \n     // TxoutType::WITNESS_UNKNOWN with unknown version\n     s.clear();\n@@ -251,7 +248,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     unk.length = 33;\n     unk.version = 1;\n     std::copy(pubkey.begin(), pubkey.end(), unk.program);\n-    BOOST_CHECK(std::get_if<WitnessUnknown>(&address) && *std::get_if<WitnessUnknown>(&address) == unk);\n+    BOOST_CHECK(std::get<WitnessUnknown>(address) == unk);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n@@ -275,8 +272,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TxoutType::PUBKEY);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(std::get_if<PKHash>(&addresses[0]) &&\n-                *std::get_if<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n+    BOOST_CHECK(std::get<PKHash>(addresses[0]) == PKHash(pubkeys[0]));\n \n     // TxoutType::PUBKEYHASH\n     s.clear();\n@@ -285,8 +281,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TxoutType::PUBKEYHASH);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(std::get_if<PKHash>(&addresses[0]) &&\n-                *std::get_if<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n+    BOOST_CHECK(std::get<PKHash>(addresses[0]) == PKHash(pubkeys[0]));\n \n     // TxoutType::SCRIPTHASH\n     CScript redeemScript(s); // initialize with leftover P2PKH script\n@@ -296,8 +291,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TxoutType::SCRIPTHASH);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(std::get_if<ScriptHash>(&addresses[0]) &&\n-                *std::get_if<ScriptHash>(&addresses[0]) == ScriptHash(redeemScript));\n+    BOOST_CHECK(std::get<ScriptHash>(addresses[0]) == ScriptHash(redeemScript));\n \n     // TxoutType::MULTISIG\n     s.clear();\n@@ -309,10 +303,8 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TxoutType::MULTISIG);\n     BOOST_CHECK_EQUAL(addresses.size(), 2U);\n     BOOST_CHECK_EQUAL(nRequired, 2);\n-    BOOST_CHECK(std::get_if<PKHash>(&addresses[0]) &&\n-                *std::get_if<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n-    BOOST_CHECK(std::get_if<PKHash>(&addresses[1]) &&\n-                *std::get_if<PKHash>(&addresses[1]) == PKHash(pubkeys[1]));\n+    BOOST_CHECK(std::get<PKHash>(addresses[0]) == PKHash(pubkeys[0]));\n+    BOOST_CHECK(std::get<PKHash>(addresses[1]) == PKHash(pubkeys[1]));\n \n     // TxoutType::NULL_DATA\n     s.clear();"
      }
    ]
  },
  {
    "sha": "fa8a88849c08c810a82338bf0e70738eb6748906",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYThhODg4NDljMDhjODEwYTgyMzM4YmYwZTcwNzM4ZWI2NzQ4OTA2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-30T15:47:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-03T09:50:30Z"
      },
      "message": "bench: Remove duplicate constants",
      "tree": {
        "sha": "b2da64185d0af4284be96b96124185366cdbffee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2da64185d0af4284be96b96124185366cdbffee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa8a88849c08c810a82338bf0e70738eb6748906",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjsrgv/Y5qX6taERAOELyelZSTiZHm+GNGdg4Ot1hkSKuhDtSXv16uSBOOLSFqb\nreY2DZVi7zgn4vh5uZTNFE3Mh4uXhqny/rslG8F3cQ9jNtvxwH53hg0xyamnB2mB\nA05D010kg9lYHRhijU2OUN8AT9nVguZcTzFfxRIk/JkA02NWpPbnWuf+QF8rxNZj\n3fInvFd8e0ZwMkhXhFff0IdiQhjc7fvqbY2Jfd/SbQpIBF1froMeTWo79uzxy4Fy\n6pLbIBRTgefKbm2BPqy3U8XM9vfCH+I1+gc/jNrQEw+Lm1MBGwof2nUSJSV8UecO\ncBeY42r6CaTnrBWbx+wtiGrPRUdVMBUTskRPxewFM7lsUZr6edtpAccxaGy2s6nY\njSLgq6n3DITmCkPL+tvyg1lweRcUrvoagE8EclIirSfxJ2NLFAkYO4x4b6hsS8oa\nbNQ35EdDpRyWijGEjvtIQz35+Z/Jq58RtbM8N8mrfQuXsCRquXLtMJAQvljKTZoT\niDLeVQ34\n=5V7K\n-----END PGP SIGNATURE-----",
        "payload": "tree b2da64185d0af4284be96b96124185366cdbffee\nparent 000098f9647cd2e21660603b7d7a8f623f70f673\nauthor MarcoFalke <falke.marco@gmail.com> 1619797651 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1620035430 +0200\n\nbench: Remove duplicate constants\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8a88849c08c810a82338bf0e70738eb6748906",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8a88849c08c810a82338bf0e70738eb6748906",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8a88849c08c810a82338bf0e70738eb6748906/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "000098f9647cd2e21660603b7d7a8f623f70f673",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/000098f9647cd2e21660603b7d7a8f623f70f673",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/000098f9647cd2e21660603b7d7a8f623f70f673"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 5,
      "deletions": 10
    },
    "files": [
      {
        "sha": "aa72981cb4fc85908a4f1b5c50f49e393ae22523",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 10,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8a88849c08c810a82338bf0e70738eb6748906/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8a88849c08c810a82338bf0e70738eb6748906/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=fa8a88849c08c810a82338bf0e70738eb6748906",
        "patch": "@@ -6,6 +6,7 @@\n #include <consensus/validation.h>\n #include <crypto/sha256.h>\n #include <test/util/mining.h>\n+#include <test/util/script.h>\n #include <test/util/setup_common.h>\n #include <test/util/wallet.h>\n #include <txmempool.h>\n@@ -18,23 +19,17 @@ static void AssembleBlock(benchmark::Bench& bench)\n {\n     const auto test_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    const std::vector<unsigned char> op_true{OP_TRUE};\n     CScriptWitness witness;\n-    witness.stack.push_back(op_true);\n-\n-    uint256 witness_program;\n-    CSHA256().Write(&op_true[0], op_true.size()).Finalize(witness_program.begin());\n-\n-    const CScript SCRIPT_PUB{CScript(OP_0) << std::vector<unsigned char>{witness_program.begin(), witness_program.end()}};\n+    witness.stack.push_back(WITNESS_STACK_ELEM_OP_TRUE);\n \n     // Collect some loose transactions that spend the coinbases of our mined blocks\n     constexpr size_t NUM_BLOCKS{200};\n     std::array<CTransactionRef, NUM_BLOCKS - COINBASE_MATURITY + 1> txs;\n     for (size_t b{0}; b < NUM_BLOCKS; ++b) {\n         CMutableTransaction tx;\n-        tx.vin.push_back(MineBlock(test_setup->m_node, SCRIPT_PUB));\n+        tx.vin.push_back(MineBlock(test_setup->m_node, P2WSH_OP_TRUE));\n         tx.vin.back().scriptWitness = witness;\n-        tx.vout.emplace_back(1337, SCRIPT_PUB);\n+        tx.vout.emplace_back(1337, P2WSH_OP_TRUE);\n         if (NUM_BLOCKS - b >= COINBASE_MATURITY)\n             txs.at(b) = MakeTransactionRef(tx);\n     }\n@@ -48,7 +43,7 @@ static void AssembleBlock(benchmark::Bench& bench)\n     }\n \n     bench.run([&] {\n-        PrepareBlock(test_setup->m_node, SCRIPT_PUB);\n+        PrepareBlock(test_setup->m_node, P2WSH_OP_TRUE);\n     });\n }\n "
      }
    ]
  }
]