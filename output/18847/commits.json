[
  {
    "sha": "83a425d25af033086744c1c8c892015014ed46bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2E0MjVkMjVhZjAzMzA4Njc0NGMxYzhjODkyMDE1MDE0ZWQ0NmJk",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-02T00:31:38Z"
      },
      "committer": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-15T22:26:54Z"
      },
      "message": "compressor: use a prevector in compressed script serialization\n\nUse a prevector for stack allocation instead of heap allocation during\nscript compression and decompression. These functions were doing\nmillions of unnecessary heap allocations during IBD.\n\nWe introduce a CompressedScript type alias for this prevector. It is\nsize 33 as that is the maximum size of a compressed script.\n\nFix the DecompressScript header to match the variable name from\ncompressor.cpp\n\nSigned-off-by: William Casarin <jb55@jb55.com>",
      "tree": {
        "sha": "1fd1094b3c5c37aa900b49b496e0d1c40468b7b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fd1094b3c5c37aa900b49b496e0d1c40468b7b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83a425d25af033086744c1c8c892015014ed46bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83a425d25af033086744c1c8c892015014ed46bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83a425d25af033086744c1c8c892015014ed46bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83a425d25af033086744c1c8c892015014ed46bd/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "844d2070a2c0106bb7a54be5cad7d4da4d9cd55e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 27,
      "deletions": 13
    },
    "files": [
      {
        "sha": "ef3135e7a5d0b7a2802cea8ce88e837eb94d306b",
        "filename": "src/compressor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83a425d25af033086744c1c8c892015014ed46bd/src/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83a425d25af033086744c1c8c892015014ed46bd/src/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.cpp?ref=83a425d25af033086744c1c8c892015014ed46bd",
        "patch": "@@ -52,7 +52,7 @@ static bool IsToPubKey(const CScript& script, CPubKey &pubkey)\n     return false;\n }\n \n-bool CompressScript(const CScript& script, std::vector<unsigned char> &out)\n+bool CompressScript(const CScript& script, CompressedScript& out)\n {\n     CKeyID keyID;\n     if (IsToKeyID(script, keyID)) {\n@@ -92,7 +92,7 @@ unsigned int GetSpecialScriptSize(unsigned int nSize)\n     return 0;\n }\n \n-bool DecompressScript(CScript& script, unsigned int nSize, const std::vector<unsigned char> &in)\n+bool DecompressScript(CScript& script, unsigned int nSize, const CompressedScript& in)\n {\n     switch(nSize) {\n     case 0x00:"
      },
      {
        "sha": "40b2496f06e81c0eb345c830d4372bad87441146",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83a425d25af033086744c1c8c892015014ed46bd/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83a425d25af033086744c1c8c892015014ed46bd/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=83a425d25af033086744c1c8c892015014ed46bd",
        "patch": "@@ -6,14 +6,26 @@\n #ifndef BITCOIN_COMPRESSOR_H\n #define BITCOIN_COMPRESSOR_H\n \n+#include <prevector.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <serialize.h>\n #include <span.h>\n \n-bool CompressScript(const CScript& script, std::vector<unsigned char> &out);\n+/**\n+ * This saves us from making many heap allocations when serializing\n+ * and deserializing compressed scripts.\n+ *\n+ * This prevector size is determined by the largest .resize() in the\n+ * CompressScript function. The largest compressed script format is a\n+ * compressed public key, which is 33 bytes.\n+ */\n+using CompressedScript = prevector<33, unsigned char>;\n+\n+\n+bool CompressScript(const CScript& script, CompressedScript& out);\n unsigned int GetSpecialScriptSize(unsigned int nSize);\n-bool DecompressScript(CScript& script, unsigned int nSize, const std::vector<unsigned char> &out);\n+bool DecompressScript(CScript& script, unsigned int nSize, const CompressedScript& in);\n \n /**\n  * Compress amount.\n@@ -51,7 +63,7 @@ struct ScriptCompression\n \n     template<typename Stream>\n     void Ser(Stream &s, const CScript& script) {\n-        std::vector<unsigned char> compr;\n+        CompressedScript compr;\n         if (CompressScript(script, compr)) {\n             s << MakeSpan(compr);\n             return;\n@@ -66,7 +78,7 @@ struct ScriptCompression\n         unsigned int nSize = 0;\n         s >> VARINT(nSize);\n         if (nSize < nSpecialScripts) {\n-            std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n+            CompressedScript vch(GetSpecialScriptSize(nSize), 0x00);\n             s >> MakeSpan(vch);\n             DecompressScript(script, nSize, vch);\n             return;"
      },
      {
        "sha": "4bc301f583f373fd9754e7cb7c1d253c263d9a36",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83a425d25af033086744c1c8c892015014ed46bd/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83a425d25af033086744c1c8c892015014ed46bd/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=83a425d25af033086744c1c8c892015014ed46bd",
        "patch": "@@ -72,7 +72,7 @@ BOOST_AUTO_TEST_CASE(compress_script_to_ckey_id)\n     CScript script = CScript() << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n     BOOST_CHECK_EQUAL(script.size(), 25);\n \n-    std::vector<unsigned char> out;\n+    CompressedScript out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n@@ -89,7 +89,7 @@ BOOST_AUTO_TEST_CASE(compress_script_to_cscript_id)\n     script << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n     BOOST_CHECK_EQUAL(script.size(), 23);\n \n-    std::vector<unsigned char> out;\n+    CompressedScript out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n@@ -107,7 +107,7 @@ BOOST_AUTO_TEST_CASE(compress_script_to_compressed_pubkey_id)\n     CScript script = CScript() << ToByteVector(key.GetPubKey()) << OP_CHECKSIG; // COMPRESSED_PUBLIC_KEY_SIZE (33)\n     BOOST_CHECK_EQUAL(script.size(), 35);\n \n-    std::vector<unsigned char> out;\n+    CompressedScript out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n@@ -124,7 +124,7 @@ BOOST_AUTO_TEST_CASE(compress_script_to_uncompressed_pubkey_id)\n     CScript script =  CScript() << ToByteVector(key.GetPubKey()) << OP_CHECKSIG; // PUBLIC_KEY_SIZE (65)\n     BOOST_CHECK_EQUAL(script.size(), 67);                   // 1 char code + 65 char pubkey + OP_CHECKSIG\n \n-    std::vector<unsigned char> out;\n+    CompressedScript out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n "
      },
      {
        "sha": "63fff7d2ba279ac590370e12dadd66b5a851ff1a",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83a425d25af033086744c1c8c892015014ed46bd/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83a425d25af033086744c1c8c892015014ed46bd/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=83a425d25af033086744c1c8c892015014ed46bd",
        "patch": "@@ -36,7 +36,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     if (!script_opt) return;\n     const CScript script{*script_opt};\n \n-    std::vector<unsigned char> compressed;\n+    CompressedScript compressed;\n     if (CompressScript(script, compressed)) {\n         const unsigned int size = compressed[0];\n         compressed.erase(compressed.begin());\n@@ -94,10 +94,12 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n \n     {\n         const std::vector<uint8_t> bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+        CompressedScript compressed_script;\n+        compressed_script.assign(bytes.begin(), bytes.end());\n         // DecompressScript(..., ..., bytes) is not guaranteed to be defined if the bytes vector is too short\n-        if (bytes.size() >= 32) {\n+        if (compressed_script.size() >= 32) {\n             CScript decompressed_script;\n-            DecompressScript(decompressed_script, fuzzed_data_provider.ConsumeIntegral<unsigned int>(), bytes);\n+            DecompressScript(decompressed_script, fuzzed_data_provider.ConsumeIntegral<unsigned int>(), compressed_script);\n         }\n     }\n "
      }
    ]
  }
]