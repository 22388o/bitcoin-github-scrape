jonasschnelli,2016-08-05T10:56:24Z,Thanks! Looks good.\nConcept ACK will review and test soon.\n,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-237822346,237822346,
jonasschnelli,2016-08-19T16:50:24Z,Needs rebase and reviewers... setting 0.14 milestone.\n,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-241071499,241071499,
mrbandrews,2016-10-18T18:07:09Z,Rebased and addressed feedback.\n,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-254590532,254590532,
jonasschnelli,2016-10-20T19:55:23Z,Needs rebase again...\n,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-255210711,255210711,
mrbandrews,2016-10-21T15:44:36Z,"Rebased and edited to use JSONRPCRequest, consistent with #8788.\n",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-255412618,255412618,
RHavar,2016-10-26T00:30:55Z,"I think it's very important for this command to actual figure out the change output on its own.  I understand that it's a bit messier and more fragile doing it here -- but it actually has enough information to do this, and by avoiding it, it just pushes that mess into the caller which comes at a very significant usability issue.\n\nCompare:\nTransaction stuck? Use `bumpfee $txid`\n\nvs\n\nTransact",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-256217731,256217731,
RHavar,2016-10-26T00:34:39Z,"Also ideally, I think the `txid` argument should be an array of transaction ids to bump. And then it creates a single transaction that bumps the fees on all of those transactions (stripping out extraneous change outputs as it goes). However, I imagine this can be done separately and later as the `txid` argument could be overloaded to either accept a string or array of strings?\n",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-256218209,256218209,
mrbandrews,2016-10-27T21:10:51Z,"Addressed JeremyRubin feedback, edited the python test, and made a few other small changes I noticed with further testing. \n\nRHavar:  I understand your point but I still think it's better for this command to be low-level and not fragile.  A more user-friendly RPC (e.g., ""bumpfeeauto"" or something) could be layered on top, identifying the change output and then using this code.  Then if the chang",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-256770931,256770931,
Victorsueca,2016-11-11T13:13:31Z,"ACK f3833f4\nTested on Windows x64\n\n```\nbumpfee 8c56b13830405a55ec4bc58b26b531f1b187d2349ee19bd0dd01aa835972929a 1\n\n{\n  ""txid"": ""67d6af1a3e29e246eaef0b7ce272f745e2ae6178050ccb78fca515b13c0f9e92"",\n  ""oldfee"": 0.00000260,\n  ""fee"": 0.00000520\n}\n```\n",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-259954550,259954550,
jonasschnelli,2016-11-11T13:31:11Z,"Oh. I just realized that this PR does not add new inputs (it requires an output index to identify the change-output which then can be reduced).\n\nIMO we should...\n\n1.) not let the user identify which output is change\n2.) allow bumping fees including adding new inputs (some transactions do not have a change output, some will not allow a reasonable bumping without adding a new input).\n\nBut 1.)",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-259957619,259957619,
mrbandrews,2016-11-14T16:38:21Z,"Feedback addressed.  Good catch on checking whether the tx had already been mined - that code was able to be shortened to a single line.\nYes, the approach of this PR is to solve 1) and 2) later.\nIf this looks good I'll squash the commits. \n",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-260387468,260387468,
mrbandrews,2016-11-17T16:26:00Z,"morcos feedback addressed, including adding the first commit from #9167. \n",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-261294348,261294348,
mrbandrews,2016-12-01T19:52:49Z,"OK, rebased and squashed, with edits addressing the most recent feedback in a separate commit.\n\nI didn't separate code into non-rpc files because I'm not 100% sure which logic should be moved, and thought this decision could be made when using it from the GUI, as moving the code then should be easy enough. \n \n\n",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-264275910,264275910,
gmaxwell,2016-12-04T21:55:15Z,"Asking the user to identify change is unreasonable and dangerous.  Within our own wallet we should know which outputs are our own.  This also has a problem of creating a mess when the original version of the transaction it spent, but later sends may have spent the replacements output.\n\nI would suggest that a minimal bump-fee would do this:\n\n(1) Only be available on transactions where none ",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-264734557,264734557,
mrbandrews,2016-12-09T18:59:00Z,"Addressed the gmaxwell feedback as follows: now it identifies the change output and guards against spending outputs until the bumped transaction (or perhaps the original transaction) is mined.\n\nI reorganized this into two commits, the latter being the python test, which is updated. ",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-266093096,266093096,
luke-jr,2016-12-10T00:51:10Z,I wonder if this ought to interact with abandontransaction in some way?,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-266163465,266163465,
mrbandrews,2016-12-13T17:49:36Z,"Pushed a new commit addressing the recent feedback and rebased due to a conflict in rpc-tests.py.\n\n",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-266810046,266810046,
mrbandrews,2016-12-15T16:55:58Z,"Pushed a new commit addressing ryanofsky's feedback.  \n\nI removed the maxFee option.  The rationale for this option was to have a more conservative tx fee limit for a bumpfee user, as the default maxTxFee (0.1 btc) is quite high and in particular, if bumping fee on a transaction with lots of descendants a user might end up paying a pretty high fee for the parent transaction alone (since the de",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-267380319,267380319,
mrbandrews,2016-12-15T20:15:50Z,"I got a travis failure I think due to the default transaction version=2, which caused a failure in the python test.  I corrected the test, rebased, and force-pushed.\n",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-267432232,267432232,
sdaftuar,2017-01-06T15:32:50Z,"~ACK b1a06207ed57425e0e4cccaad4588485d4483b08 (feel free to squash).~ EDIT: ACK pending resolution of https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95196336\n\nI believe all of @gmaxwell's comments in https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-264734557 have been addressed, with the exception of being able to add new inputs to a transaction to bump the fee.  I think tha",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-270928450,270928450,
ryanofsky,2017-01-06T15:41:09Z,Squashed b1a06207ed57425e0e4cccaad4588485d4483b08 -> f4fa93b29a59c6d0f0341f442fd1805972b43ca1.,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-270930464,270930464,
morcos,2017-01-09T19:35:09Z,ACK modulo comments above.  ,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-271384781,271384781,
jtimon,2017-01-10T19:37:44Z,"Concept ACK, needs rebase.",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-271675511,271675511,
ryanofsky,2017-01-10T22:44:11Z,Rebased to handle named arguments.,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-271722085,271722085,
gmaxwell,2017-01-12T01:26:27Z,"I believe this should make the new transaction non-RBF replaceable.  (1) we currently won't replace it, (2) if someone made an original payment and the receiver is squaking because it's replaceable, a mechanism is needed to issue a non-replacable version.   Since we won't replace it, we can do this in one step.   Does this make sense? ",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272049263,272049263,
gmaxwell,2017-01-12T01:31:36Z,Hm. I expected this to change the walletrbf default. ,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272050079,272050079,
laanwj,2017-01-12T11:09:19Z,"> Hm. I expected this to change the walletrbf default.\n\nI don't think we should change that last-minute for 0.14 (only mentioning that because this is tagged 0.14).\n\nEdit: Concept ACK otherwise.",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272136812,272136812,
ryanofsky,2017-01-12T15:33:00Z,Created https://github.com/bitcoin/bitcoin/pull/9527 for changing the walletrbf default.,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272193979,272193979,
ryanofsky,2017-01-12T19:22:07Z,"Added replaceable option in 8d3cd2844b844cad92d741d848ee0ffebdffef40, to allow users to create replacement transactions that are not replaceable.\n\nI ran into a lot of spurious errors related to `fundrawtransaction` in the bumpfee tests while trying to add a simple test for this. fundrawtransaction would sometimes chose different sized inputs than the `small_output_fails` and `dust_to_fee tests",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272256286,272256286,
sdaftuar,2017-01-12T20:56:01Z,re-ACK 8d3cd28,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272280878,272280878,
morcos,2017-01-12T21:12:23Z,"tested ACK 8d3cd28\n",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272284948,272284948,
ryanofsky,2017-01-13T14:02:36Z,Squashed 8d3cd2844b844cad92d741d848ee0ffebdffef40 -> 1d71fd0dab96430643b818ea993acea2aaa09256,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272449558,272449558,
TheBlueMatt,2017-01-16T00:39:22Z,"I know other ways of calling getbalance are pretty broken (#8183), but I think we need to fix a bit of how bumpfee interacts with getbalance ""\*"". In testing I got getbalance ""\*"" to give me a negative number, which seems super shitty.\n\nAdditionally, we need documentation on how bumpfee interacts with listunspent. While I dont mind the change outputs from bumpfee not appearing in the results, ",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272750912,272750912,
morcos,2017-01-16T02:30:13Z,"@TheBlueMatt I don't see how this PR has any affect on any of the getbalance calls.  I think what you are seeing is pre-existing misbehavior for multiple spends of the same outputs being present in the wallet.   \n\nI went through all the calls to AvailableCoins (which is the only thing this PR changes) and I think the only open decision is deciding what we want the interaction with listunspent ",https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272760263,272760263,
ryanofsky,2017-01-17T17:20:09Z,Squashed 28fd457a73fc6291f72d89d9dd3532ada9ebe35c -> ce3a363049bf8fdd8be926ca3ab8c803c98de6d2.,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-273235705,273235705,
TheBlueMatt,2017-01-17T18:08:18Z,utACK ce3a363049bf8fdd8be926ca3ab8c803c98de6d2,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-273249816,273249816,
morcos,2017-01-17T18:09:11Z,tested previous iteration ACK ce3a363,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-273250019,273250019,
sdaftuar,2017-01-18T19:59:55Z,utACK ce3a363049bf8fdd8be926ca3ab8c803c98de6d2 (reviewed diff from last iteration I tested and ACKed above).,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-273584313,273584313,
ryanofsky,2017-01-19T16:31:46Z,Squashed 4beb7c92c70b7668042383d37c49545198aa00cd -> cc0243ad32cee1cc9faab317364b889beaf07647,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-273825274,273825274,
morcos,2017-01-19T18:13:16Z,Still ACK cc0243a,https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-273853554,273853554,
NicolasDorier,2016-08-05T22:39:53Z,nit: Double negation makes it hards to read. I suggest to replace by\n\n```\n CAmount nOldFee = wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0;\n```\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73769322,73769322,src/wallet/rpcwallet.cpp
NicolasDorier,2016-08-05T22:47:25Z,"I'm not sure about this. The problem is that such case will rarely happen so applications risk to break during sudden peak usage, amplifying bad news. \n\nI suggest to silently bump fees to the minMempoolFeeRate.\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73769911,73769911,src/wallet/rpcwallet.cpp
NicolasDorier,2016-08-05T22:50:32Z,nit: \n\n```\n nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)\n```\n\nIs repeated. Suggest using variable.\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73770122,73770122,src/wallet/rpcwallet.cpp
NicolasDorier,2016-08-05T22:55:41Z,additional check should be done:\n\n```\nnDelta >= poutput->GetDustThreshold(::minRelayTxFee);\n```\n\nOr it won't get propagated.\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73770489,73770489,src/wallet/rpcwallet.cpp
NicolasDorier,2016-08-05T22:56:20Z,can you use C++11 loop style ?\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73770556,73770556,src/wallet/rpcwallet.cpp
NicolasDorier,2016-08-05T22:58:48Z,You should use the same SIGHASH than the previous one. (might be done separate PR ?)\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73770774,73770774,src/wallet/rpcwallet.cpp
NicolasDorier,2016-08-05T23:02:03Z,">  (nIn < (int)(*mi).second.vout.size())\n\nI think this is a bug, why does the index of the input to sign should be below the number of vout of the parent ? Does not make sense.\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73771062,73771062,src/wallet/rpcwallet.cpp
mrbandrews,2016-10-18T18:07:33Z,"Good idea, fixed.\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83915487,83915487,src/wallet/rpcwallet.cpp
mrbandrews,2016-10-18T18:07:47Z,Let's punt to separate PR. \n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83915534,83915534,src/wallet/rpcwallet.cpp
mrbandrews,2016-10-18T18:09:04Z,"Good catch, edited to bounds-check the prevout.\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83915788,83915788,src/wallet/rpcwallet.cpp
mrbandrews,2016-10-18T18:11:13Z,I checked earlier that the bumped fee pays for the new relay fee;  I'm not following as to the relationship between nDelta and dust. \n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83916251,83916251,src/wallet/rpcwallet.cpp
mrbandrews,2016-10-18T18:11:32Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83916320,83916320,src/wallet/rpcwallet.cpp
mrbandrews,2016-10-18T18:13:02Z,I edited the comment to explain why I'm reporting an error.  Especially if the user set totalFee (or had in the recent past used paytxfee to set an explicit fee rate) I think silently bumping could surprise the user. \n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83916647,83916647,src/wallet/rpcwallet.cpp
mrbandrews,2016-10-18T18:13:12Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83916680,83916680,src/wallet/rpcwallet.cpp
luke-jr,2016-10-22T14:35:52Z,This line is outdated\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r84578211,84578211,src/wallet/rpcwallet.cpp
JeremyRubin,2016-10-26T19:38:20Z,Perhaps make this fail if there are any options other than confTarget or totalFee passed in to guard against the case where a user has a typo or something.\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85203030,85203030,src/wallet/rpcwallet.cpp
JeremyRubin,2016-10-26T19:48:41Z,"Maybe add a tighter limit to your bumpfee code, bumpfeeMaxTxFee. Set this to be an optional default parameter in options. maxTxFee is huge, so might be safer to have something smaller and not much added code. This parameter can be overridden if need be, but not to more the maxTxFee.\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85204987,85204987,src/wallet/rpcwallet.cpp
JeremyRubin,2016-10-26T20:12:09Z,"There is kind of a weird deal here where nDelta can be <= 0 if totalFee is set, and will be accepted on a race condition with mempool, I would explicitly guard against this case by restricting nDelta > 0.\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85209694,85209694,src/wallet/rpcwallet.cpp
JeremyRubin,2016-10-26T20:13:26Z,"Using a nNewFee = 0 is fine here, it just slightly bothers me to use this as a null value when indeed 0 is a valid fee amount.\n\n-1 would be an invalid fee amount (creates coins) so I have a slight preference to use this.\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85209934,85209934,src/wallet/rpcwallet.cpp
JeremyRubin,2016-10-26T20:21:00Z,"I would suggest that this should also return in the error message the txid of the furthest child, and suggest bumping the fee on that one if possible to take advantage of ancestor fee based mining and keep txs valid?\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85211353,85211353,src/wallet/rpcwallet.cpp
JeremyRubin,2016-10-26T20:48:30Z,There is something kinda funky when a user is running in say blocksonlymode and doesn't know about any child transactions that may exist and therefore has trouble setting the fee correctly for those that they will invalidate.\n\nThis is probably a hard problem to solve; so I'm just pointing it out.\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85216916,85216916,src/wallet/rpcwallet.cpp
mrbandrews,2016-10-27T21:03:03Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85427104,85427104,src/wallet/rpcwallet.cpp
mrbandrews,2016-10-27T21:05:03Z,As far as I can tell it's a little tricky to track down the furthest child (and there could be numerous furthest children at the same level) but I edited the error message to give the user more info (number of children and size of those transactions) and explaining the situation a bit better.\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85427448,85427448,src/wallet/rpcwallet.cpp
jonasschnelli,2016-11-11T13:18:38Z,nit: Maybe use txid to correspond with the call header at L2587 or use `transactionid` there?\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87586451,87586451,src/wallet/rpcwallet.cpp
jonasschnelli,2016-11-11T13:19:22Z,"add third parameter `(""options"")`?\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87586523,87586523,src/wallet/rpcwallet.cpp
jonasschnelli,2016-11-11T13:22:38Z,"I'm not sure if we want absolute fee values here.\nThe user can't be sure how many inputs are getting added when setting this value, probably resulting in an uncontrollable feerate.\n\nWhat about switching this to a feerate?\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87586825,87586825,src/wallet/rpcwallet.cpp
jonasschnelli,2016-11-11T13:25:49Z,This check looks really expensive for large wallets. Why not calling `mapWallet.find(hash)` and check `nDepth` (and maybe call `GetConflicts()` to ensure its not conflicted with a already mined tx)?\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87587175,87587175,src/wallet/rpcwallet.cpp
Victorsueca,2016-11-11T13:26:03Z,Another possibility is to leave the RPC with an absolute value and use Fee/KB on the GUI.\nSome software may want to use it's own relative fee rate.\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87587201,87587201,src/wallet/rpcwallet.cpp
morcos,2016-11-14T19:49:02Z,"I don't think this section makes sense.  Transactions which are in newer in the wallet are not a good indication of the most ""up to date"" spend of the outputs.  If anything, conflicts in the mempool would be a good proxy, because at least for those you'd be able to calculate any descendants fees.  But it may make the most sense to make this more of a utility function and just assume the user is tr",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87878468,87878468,src/wallet/rpcwallet.cpp
morcos,2016-11-14T19:53:20Z,"Would be helpful to refer to this as the output index throughout...  (comments, help, and error messages)\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87879296,87879296,src/wallet/rpcwallet.cpp
morcos,2016-11-15T21:29:51Z,We need to be sure we are calculating the correct fee here.  Either using new `IsAllFromMe` or getting the fee from the mempool.\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88117668,88117668,src/wallet/rpcwallet.cpp
morcos,2016-11-15T21:44:39Z,"you don't need this, you can just leave it out as an argument\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88120736,88120736,src/wallet/rpcwallet.cpp
morcos,2016-11-15T21:52:42Z,"~~I think this reduces bumpfee to a two step process in the common case (whenever there are children) and makes it so the second step is going to require setting totalfee.  It seems more user friendly to just pay what it takes?~~\n\n~~On a separate note, I think it might be nice to check all of the children transactions and make sure their ancestor fee rate isn't higher than the new feerate you ar",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88122200,88122200,src/wallet/rpcwallet.cpp
morcos,2016-11-17T15:25:00Z,"I spoke with @sdaftuar and @mrbandrews about this and withdraw both of the above points.  If the transaction has children, it becomes quite complicated to decide whether bumping fee makes sense and by how much and its probably better to just report to the user the minimum fee that would be required to bump and let the user decide whether that makes sense.\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88474390,88474390,src/wallet/rpcwallet.cpp
mrbandrews,2016-11-17T16:21:39Z,Fixed (removed)\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88488019,88488019,src/wallet/rpcwallet.cpp
mrbandrews,2016-11-17T16:21:47Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88488069,88488069,src/wallet/rpcwallet.cpp
mrbandrews,2016-11-17T16:24:17Z,This should be correct since now we're checking that the user owns all the inputs.\n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88488714,88488714,src/wallet/rpcwallet.cpp
mrbandrews,2016-11-17T16:24:25Z,Fixed. \n,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88488750,88488750,src/wallet/rpcwallet.cpp
morcos,2016-11-21T21:04:02Z,"You should probably check that the depth is exactly 0, because otherwise the tx is already mined or conflicted with a mined tx and no point in bumping.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88987177,88987177,src/wallet/rpcwallet.cpp
morcos,2016-11-21T21:28:01Z,@JeremyRubin how could nDelta be negative here?,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88991899,88991899,src/wallet/rpcwallet.cpp
luke-jr,2016-11-23T07:18:13Z,"""BIP 125""",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89264742,89264742,src/wallet/rpcwallet.cpp
luke-jr,2016-11-23T07:19:30Z,"Maybe move output into options? Even if it's required in this version, it should ideally become optional in the future...",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89264849,89264849,src/wallet/rpcwallet.cpp
luke-jr,2016-11-23T07:22:02Z,"Just use `int64_t`? `int` is only guaranteed to be 15-bit, so it's too small anyway.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89265083,89265083,src/wallet/rpcwallet.cpp
luke-jr,2016-11-23T07:23:58Z,`nNewFeeRate = payTxFee;`?,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89265215,89265215,src/wallet/rpcwallet.cpp
luke-jr,2016-11-23T07:26:17Z,`+ wtx.vin.size()` seems appropriate here too?,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89265391,89265391,src/wallet/rpcwallet.cpp
luke-jr,2016-11-23T07:31:49Z,"s/would/may probably/\n\nIn the future, it may make sense to combine some children transactions (ie, our own) into this one while bumping the fee.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89265811,89265811,src/wallet/rpcwallet.cpp
luke-jr,2016-11-23T07:33:31Z,@NicolasDorier I also don't see a need for that...,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89265932,89265932,src/wallet/rpcwallet.cpp
luke-jr,2016-11-23T07:33:40Z,Why not just discard the change?,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89265943,89265943,src/wallet/rpcwallet.cpp
luke-jr,2016-11-23T07:35:50Z,This needs to be rebased...,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89266113,89266113,src/wallet/rpcwallet.cpp
luke-jr,2016-11-23T08:24:37Z,No need for strprintf here,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89270776,89270776,src/wallet/rpcwallet.cpp
luke-jr,2016-11-23T08:24:50Z,Also no strprintf here,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89270794,89270794,src/wallet/rpcwallet.cpp
jonasschnelli,2016-11-23T09:24:18Z,"I think, because every else use fee-ratres per KB, we should make clear at this point that `totalFee` and `maxFee` are absolute fee-values (and not per KB).",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89278178,89278178,src/wallet/rpcwallet.cpp
luke-jr,2016-11-23T10:20:47Z,del strprintf,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89287183,89287183,src/wallet/rpcwallet.cpp
luke-jr,2016-12-04T04:48:46Z,"You should calculate txSize + wtx.vin.size() once and keep it in a const variable for these...\n\n```C++\nconst int64_t maxNewTxSize = txSize + wtx.vin.size();\n```",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r90770633,90770633,src/wallet/rpcwallet.cpp
luke-jr,2016-12-10T00:25:19Z,Any reason not to automatically just switch to the new txid here?,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91820598,91820598,src/wallet/rpcwallet.cpp
luke-jr,2016-12-10T00:25:56Z,"Just use a size_t here, not cast to int... And use ++i, not i++\n\nBut more importantly, better to use C++11 iterators in this case:\n\n```C++\nfor (const CTxOut& txout : wtx.tv->vout) {\n    if (pwalletMain->IsChange(txout)) {\n        if (nOutput != -1) {\n            throw JSONRPCError(RPC_MISC_ERROR, ""Transaction has multiple change outputs"");\n        }\n        nOutput = i;\n    }",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91820649,91820649,src/wallet/rpcwallet.cpp
luke-jr,2016-12-10T00:32:39Z,I think we're trying to keep CWalletDB only used by CWallet. @pstratem ?,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91821141,91821141,src/wallet/rpcwallet.cpp
luke-jr,2016-12-10T00:39:17Z,Probably this needs to go through CWallet::AddToWallet,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91821594,91821594,src/wallet/rpcwallet.cpp
luke-jr,2016-12-10T00:41:05Z,May need to be atomic with adding the new one as well...,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91821708,91821708,src/wallet/rpcwallet.cpp
sdaftuar,2016-12-12T14:30:36Z,@luke-jr  That won't compile since`i` is undefined...  Is there a better way to loop here where the index is needed?  Also I'd suggest that this kind of style nit can be cleaned up in a later pull anyway; this one has been open for long enough.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91956751,91956751,src/wallet/rpcwallet.cpp
sdaftuar,2016-12-12T16:34:31Z,This line in the help text needs to be updated for the latest semantics (no descendants in mempool or wallet).,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91984171,91984171,src/wallet/rpcwallet.cpp
sdaftuar,2016-12-12T16:37:50Z,"I found this sentence, and the ones below (""This command will fail if fee is not high enough..."") to be confusing.  Perhaps some explanation of what automatic fee calculation will occur, unless overriden/modified by the options, and that if the resulting fee isn't high enough then the command will fail? ",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91984951,91984951,src/wallet/rpcwallet.cpp
sdaftuar,2016-12-12T16:38:54Z,`<output>` should not be here anymore.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91985184,91985184,src/wallet/rpcwallet.cpp
sdaftuar,2016-12-12T17:24:43Z,I think this cast isn't correct after #8580 was merged; looks like the correct way to do this is `GetVirtualTransactionSize(*wtx->tx)`.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91995460,91995460,src/wallet/rpcwallet.cpp
sdaftuar,2016-12-12T17:35:58Z,"I don't think we should rely on the CMerkleTx function\n```    \noperator const CTransaction&() const { return *tx; }\n```\nthat makes this work, as that function has a comment saying it should be removed.  `*wtx->tx` here again I think?",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91997774,91997774,src/wallet/rpcwallet.cpp
sdaftuar,2016-12-12T18:47:08Z,I think this line should be removed now that the output is no longer specified?,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92012040,92012040,src/rpc/client.cpp
mrbandrews,2016-12-13T17:42:26Z,"For now, I'd rather leave it as is, and let the user resubmit with the correct txid.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92224356,92224356,src/wallet/rpcwallet.cpp
mrbandrews,2016-12-13T17:43:20Z,Changed to a size_t (and ++i),https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92224536,92224536,src/wallet/rpcwallet.cpp
mrbandrews,2016-12-13T17:48:04Z,"I moved this code into a new method on the wallet so the CWalletDB is only used from CWallet.  I looked at AddToWallet but I would need to have edited it a bit, plus it does some stuff I don't need so I thought a new but concise method was a better approach. \n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92225380,92225380,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T17:51:16Z,"Why use `0.01 * COIN` instead of the global `maxTxFee`? I think it would be worth explaining in a comment. Also, if `0.01 * COIN` is a significant value, maybe it would be good to declare it in validation.h alongside similar sounding constants like `HIGH_MAX_TX_FEE`.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92449789,92449789,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T18:06:40Z,I would move this declaration down closer to where the variable is first used (line 2719 `nNewFee = nNewFeeRate.GetFee(maxNewTxSize);`,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92452706,92452706,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T18:37:21Z,"Seems like if this condition is true, the work done above gets thrown away. Maybe that code could be moved into an else block so the sematics of the totalFee > 0 case are more straightforward.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92459085,92459085,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T18:48:35Z,"This block of code seems very similar to existing code in `CWallet::GetMinimumFee`. If you tweaked that function to return the fee rate in addition to the fee, could that function be reused here?",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92461226,92461226,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:00:44Z,What should the user do when this case happens? Should they report a bug because it should not be possible for this condition to happen? Or should they just try passing in a high(er) totalFee value? I think it'd be good to clarify in the error message.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92463667,92463667,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:01:22Z,Would suggest changing error code below to RPC_INTERNAL_ERROR if it's really not possible for this condition to happen at this point.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92463788,92463788,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:13:54Z,"I think it would make sense to move this check up towards the top of this function near the pwalletMain / wtx checks, instead of leaving it down here after fee estimation & option parsing. As a user I wouldn't want to first resolve a bunch of errors about fees and options before finding out that the transaction I am trying to bump can't be bumped in the first place.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92466211,92466211,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:18:35Z,"Think `<=` would be better than `<` here. Thinking in a theoretical situation where nValue was 0 and dust threshould was somehow also 0, it would be more consistent to remove the output than keep it.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92467255,92467255,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:21:57Z,Maybe use `poutput->nValue -= nDelta` syntax here (and `nNewFee += poutput->nValue` below). `+=` and `-=` operators I think would make the code easier to read and less prone to typo errors.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92468014,92468014,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:29:00Z,"Maybe say this will decrease and possibly remove the change output, but leave other outputs alone. Also could say explicitly that this will not change existing inputs.\n\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92469677,92469677,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:34:31Z,"`it` isn't really a good name for this variable, since it's a direct reference to the input, and not an iterator. Maybe `in` or `input` would be a better name.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92470862,92470862,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:36:15Z,Maybe use auto here since you're already using it one line up.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92471236,92471236,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:38:43Z,Would suggest replacing `tx.vin[nIn]` here with `it` or replacing the opposite way above to be consistent about how the input is referred to inside the loop.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92471762,92471762,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:45:16Z,Maybe add `|| !state.IsValid()` to the condition here or assert(state.IsValid()) as a sanity check below.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92473397,92473397,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:48:40Z,"Unclear what good having this variable does. Seems like it's always just set in one line then thrown in the next line, making the code more verbose and causing unnecessary string copies.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92474152,92474152,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:56:12Z,Can write mi->second instead of (*mi).second.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92475795,92475795,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-14T19:57:43Z,"self isn't being used here, would suggest making this a standalone function like submit_block_with_tx below.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92476143,92476143,qa/rpc-tests/bumpfee.py
ryanofsky,2016-12-14T20:11:50Z,"This test is long and it's not clear right away whether the different parts of it depend on each other. If it could be broken up in some way, I think it would be more readable and easier to work with in the future. E.g.\n\n```\nself.test_simple_bumpfee_succeeds(a1)\nself.test_nonrbf_bumpfee_fails(a1)\nself.test_notmine_bumpfee_fails(a0)\n...\n```",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92478972,92478972,qa/rpc-tests/bumpfee.py
MarcoFalke,2016-12-14T21:47:04Z,"Regardless, we don't want to use flops for CAmount.\n\n(I know that in this case the compiler can do static analysis and figure out the exact result, but we should not promote bad practice; It is proved to break on 32 bit platforms when static code analysis does not catch the flop.)",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92496592,92496592,src/wallet/rpcwallet.cpp
luke-jr,2016-12-20T04:38:42Z,I don't think we should guarantee this. (sorry for reposting),https://github.com/bitcoin/bitcoin/pull/8456#discussion_r93170722,93170722,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-04T16:08:24Z,"Thanks, I changed the wording to describe the current behavior but suggest it could be improved in the future.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94610929,94610929,src/wallet/rpcwallet.cpp
sdaftuar,2017-01-05T17:03:24Z,I think this include is not needed.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94807302,94807302,src/wallet/rpcwallet.cpp
sdaftuar,2017-01-05T17:31:46Z,"nit: We're calling RPCTypeCheck multiple times, which I don't think should be needed.  I believe we can just change this to `RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ))` and remove the one at line 2675 below.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94812614,94812614,src/wallet/rpcwallet.cpp
sdaftuar,2017-01-05T18:10:47Z,"I think this should be `CFeeRate(totalFee, maxNewTxSize)`.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94819938,94819938,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-06T15:09:18Z,"Thanks, removed.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94958773,94958773,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-06T15:09:30Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94958806,94958806,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-06T15:10:05Z,Added a comment. I think this was probably intentional since it makes the fee rate check below more conservative.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94958882,94958882,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-06T15:24:54Z,Now fixed (got this backward).,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94961158,94961158,src/wallet/rpcwallet.cpp
morcos,2017-01-09T16:54:09Z,"@sdaftuar points out that this won't correctly update scriptWitness for witness transactions\nProbably better to use the UpdateTransaction function\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95196336,95196336,src/wallet/rpcwallet.cpp
morcos,2017-01-09T17:57:27Z,nit: mentioning fallbackfee is too much implementation detail here,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95208926,95208926,src/wallet/rpcwallet.cpp
morcos,2017-01-09T18:12:09Z,Should there be a check against providing both options,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95211699,95211699,src/wallet/rpcwallet.cpp
morcos,2017-01-09T19:33:43Z,"i'd abandon bumpid here so it doesn't accidentally rereplace rbfid if its reaccepted from the wallet\n\nif later abandoning conflicts/replacements frees up the original to spend again then thats a change in behavior that can result in changing the test",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95228707,95228707,qa/rpc-tests/bumpfee.py
ryanofsky,2017-01-10T22:48:48Z,"Added UpdateTransaction in e4a766291a90440d0ee8b8b25619cdd91329ffc2, and after a lot of struggle, eventually got a test to work which creates a segwit transaction and makes sure scriptWitness is set.\n\nThe test also uncovered another bug in the TransactionSignatureCreator call above where the SIGHASH_ALL value was incorrectly being interpretted as a CAmount. This is also fixed in e4a766291a9044",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95475856,95475856,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-10T22:49:09Z,Removed in e4a766291a90440d0ee8b8b25619cdd91329ffc2.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95475915,95475915,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-10T22:49:19Z,Added in e4a766291a90440d0ee8b8b25619cdd91329ffc2.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95475942,95475942,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-10T22:59:37Z,Added abandontransaction call in b0d4f9323250d81b53668362413134bc7a13d998.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95477645,95477645,qa/rpc-tests/bumpfee.py
morcos,2017-01-11T14:00:59Z,"This should take place after `submit_block_with_tx` and before `invalidateblock`\nThat is the only time it is guaranteed that bumpid is not in the mempool.\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95582692,95582692,qa/rpc-tests/bumpfee.py
ryanofsky,2017-01-11T15:16:54Z,"Oops, yes, I got confused about what the test was doing with the two transactions. Fixed and updated the comment in a1046e099e4fac8b82d6e268eeb9fb97e4a9c9ef.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95598215,95598215,qa/rpc-tests/bumpfee.py
gmaxwell,2017-01-12T06:38:58Z,I can't see where it checks if the wallet is unlocked. Am I missing it?,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95732721,95732721,src/wallet/rpcwallet.cpp
morcos,2017-01-12T13:40:40Z,yikes that seems like a pretty big oversight,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95792084,95792084,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-12T15:29:24Z,Added EnsureWalletIsUnlocked call in 59e425aa8e634a939e12594ce7c8824e9764e61c,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95815232,95815232,src/wallet/rpcwallet.cpp
instagibbs,2017-01-12T21:36:34Z,nit: maybe name the relay fee constant in case user wants to look it up.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95890149,95890149,src/wallet/rpcwallet.cpp
instagibbs,2017-01-12T21:36:38Z,nit: add `n` here as well as below,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95890163,95890163,src/wallet/rpcwallet.cpp
instagibbs,2017-01-12T21:37:40Z,"can you explain why user-chosen feerate isn't an option, but absolute fee?",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95890379,95890379,src/wallet/rpcwallet.cpp
instagibbs,2017-01-12T21:45:08Z,nit: or full RBF nodes relay it,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95891750,95891750,src/wallet/rpcwallet.cpp
instagibbs,2017-01-12T21:47:29Z,"nit: you already check that the wallet is available above, I believe unneeded. ",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95892125,95892125,src/wallet/rpcwallet.cpp
instagibbs,2017-01-12T22:25:15Z,"if this is the intended user flow, we might want to inform them via the following error message by including a totalfee guess alongside the minimum required feerate with a suggestion to use that option.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95899033,95899033,src/wallet/rpcwallet.cpp
instagibbs,2017-01-13T15:06:55Z,just set it,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96012078,96012078,src/wallet/rpcwallet.cpp
morcos,2017-01-13T16:36:28Z,why does it need to be in the mempool?,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96026308,96026308,src/wallet/rpcwallet.cpp
instagibbs,2017-01-13T16:39:48Z,"(weird, comments are in wrong order) it doesn't you're right. ",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96026776,96026776,src/wallet/rpcwallet.cpp
morcos,2017-01-13T16:52:11Z,"I guess I don't see how it makes a difference, but it seems to me that the whole point of this PR is to change the transaction to the least degree possible.  I don't know why someone would have chosen to set their sequence to 0xffffffff, but if they did, why should we change it for them here?",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96028852,96028852,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-13T17:16:45Z,Added in 7c9ad69f946f1db623d4243aa4a10fe57296cc4d,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96033375,96033375,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-13T17:17:07Z,Removed in 7c9ad69f946f1db623d4243aa4a10fe57296cc4d,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96033441,96033441,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-13T17:17:22Z,Added in 7c9ad69f946f1db623d4243aa4a10fe57296cc4d,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96033483,96033483,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-13T17:20:39Z,Options style here is the same as the style used in fundrawtransaction (and it seems clearer without all the n's and extra punctuation).,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96034071,96034071,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-13T17:28:24Z,"User chosen feerate is possible with settxfee, and could be added as another option here in the future. Absolute fee is a reasonable thing a user might want to set, probably determining it from the fee of the previous transaction.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96035383,96035383,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-13T17:32:14Z,"Referring to nodes that don't follow BIP-125? Maybe a more general note about these nodes would be helpful, but it seems like an odd thing to mention only in this context.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96036049,96036049,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-01-13T18:17:20Z,"Hum, should we be ignoring the return value here? (We check it in some places, ignore it in others in wallet.cpp, but it seems wrong to ignore it).",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96043848,96043848,src/wallet/wallet.cpp
TheBlueMatt,2017-01-13T18:21:39Z,"I'm super not convinced that this is sufficient. See all the places where isAbandoned is checked - we probably need to check for replacement in most, if not all, of the same places.\n\neg probably want to check in RelayWalletTransaction and possibly isSpent?",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96044619,96044619,src/wallet/wallet.cpp
TheBlueMatt,2017-01-13T18:26:04Z,"Do we need/want a MarkDirty here, too? I think we might not need it, but it seems strange to not have it here when we have it in all the other similar things (conflicted, abandon, etc).",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96045410,96045410,src/wallet/wallet.cpp
TheBlueMatt,2017-01-13T18:31:03Z,"Obviously prefer to leave this in because belt-and-suspenders, but shouldn't this check be redundant with the !InMempool() check, two checks above?",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96046375,96046375,src/wallet/wallet.cpp
ryanofsky,2017-01-13T19:16:28Z,"This is being set specifically to change the behavior of AvailableCoins to avoid creating new transactions which spend outputs of rbf & bumpfee transactions, for reasons described in comments in AvailableCoins.\n\nI'm actually not sure why we don't mark the transaction that is being replaced to be abandoned. But I don't think it should make any practical difference right now.\n\nRelayWalletTra",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96054845,96054845,src/wallet/wallet.cpp
ryanofsky,2017-01-13T19:42:16Z,"It's not completely redundant (see https://github.com/mrbandrews/bitcoin/blob/1d71fd0dab96430643b818ea993acea2aaa09256/qa/rpc-tests/bumpfee.py#L251 for the test which triggers this condition), but this is checking for a really esoteric case. See description above for all the gory details, but in this can happen when the replaced transaction A temporarily becomes part of a block instead of the repl",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96060042,96060042,src/wallet/wallet.cpp
sdaftuar,2017-01-13T19:54:19Z,"Fee bumped should not imply abandoned -- it's entirely possible the original version of the transaction will confirm.\n\nChanging IsSpent as you suggest ought to have no visible effect (since bumpfee spends all the same inputs, currently), yet I think it would be incorrect to make your change -- if we add smarter fee bumping behavior in the future, and it becomes possible to drop an input from t",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96062364,96062364,src/wallet/wallet.cpp
ryanofsky,2017-01-13T19:58:49Z,"Will look more, but I would want to find a specific case it is needed before adding MarkDirty here. I have another PR https://github.com/bitcoin/bitcoin/pull/9381 which eliminates MarkDirty from AddToWallet() and will get rid of this entire MarkReplaced() method, replacing it with an AddToWallet call.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96063132,96063132,src/wallet/wallet.cpp
ryanofsky,2017-01-13T19:59:30Z,Will add a check.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96063240,96063240,src/wallet/wallet.cpp
morcos,2017-01-13T20:08:12Z,100% agree with sdaftuar.  it would be incorrect to auto abandon the bumpee.  ,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96064667,96064667,src/wallet/wallet.cpp
sdaftuar,2017-01-13T20:10:17Z,"I don't think we should treat this differently from any other unconfirmed, conflicting transaction entering the wallet, so I don't believe this is necessary (and it seems confusing to me to add calls like that in places where we think that balances shouldn't be changing).",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96065043,96065043,src/wallet/wallet.cpp
sdaftuar,2017-01-13T20:13:34Z,"I think we can just clean this up in a subsequent PR?  I agree that the differing behaviors are not good, but perhaps this is a small enough issue to not hold this up...",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96065599,96065599,src/wallet/wallet.cpp
TheBlueMatt,2017-01-13T20:27:57Z,"Abandoned doesn't imply the original version of the transaction won't confirm, it just means ""pretend this isnt here, unless it somehow gets confirmed""?\n\nBut, ok, fair point regarding IsSpent - I'm not convinced thats is definitely The Right Behavior to not allow a user to spend something they removed from their transaction, but this is the more conservative option, so have no problem with it ",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96068068,96068068,src/wallet/wallet.cpp
ryanofsky,2017-01-13T20:42:24Z,Either way seems fine. Added a check and error print for now in f9c4007977a25d53cc5ad9459db51a831fb8ae89.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96070260,96070260,src/wallet/wallet.cpp
TheBlueMatt,2017-01-13T20:45:33Z,I only brought it up because I'd prefer new code to check it...it seems bad to not do so.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96070737,96070737,src/wallet/wallet.cpp
ryanofsky,2017-01-13T21:12:14Z,"Agreed, check is added in f9c4007977a25d53cc5ad9459db51a831fb8ae89.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96074805,96074805,src/wallet/wallet.cpp
TheBlueMatt,2017-01-13T21:15:35Z,"I'll withdraw my request after IRC discussion. I've been convinced that in some use-cases a user might prefer us to accept the old version of a transaction which has been bumped, so no need to change that.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96075289,96075289,src/wallet/wallet.cpp
ryanofsky,2017-01-13T21:28:06Z,"Long discussion in IRC about this beginning here: https://botbot.me/freenode/bitcoin-core-dev/msg/79332875/.\n\nI think the conclusion is that it is preferable to keep the current code which attempts to add all replaced and replacing transactions to the mempool , because there are cases when there is a problem with the replacing tx (e.g. output too close to dust limit) that would cause it to get",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96077369,96077369,src/wallet/wallet.cpp
luke-jr,2017-01-13T22:01:14Z,"It says in the wallet, not the mempool...?",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96082690,96082690,src/wallet/rpcwallet.cpp
luke-jr,2017-01-13T22:11:12Z,"""(though it may still be replacable in practice)"" seems sufficient.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96084174,96084174,src/wallet/rpcwallet.cpp
luke-jr,2017-01-13T23:13:07Z,`>3` now... but I don't know that we need an explicit check here. Seems like asking for bugs.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96092534,96092534,src/wallet/rpcwallet.cpp
luke-jr,2017-01-13T23:14:56Z,Should be `1` now (as of #9239). Maybe make a const int in some header for this number...,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96092748,96092748,src/wallet/rpcwallet.cpp
luke-jr,2017-01-13T23:15:44Z,`get_int64`,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96092826,96092826,src/wallet/rpcwallet.cpp
luke-jr,2017-01-13T23:17:21Z,"Prefer to just do:\n\n```C++\nif (options.exists(""replaceable"")) {\n    replaceable = options[""replaceable""].get_bool();\n}\n```\n\nSo that if the default changes, this still works right.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96093010,96093010,src/wallet/rpcwallet.cpp
luke-jr,2017-01-13T23:25:31Z,"So long as the user is explicitly setting a total fee, we should either fail when discarding dust, or at least document this behaviour in the RPC help.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96094023,96094023,src/wallet/rpcwallet.cpp
luke-jr,2017-01-13T23:26:29Z,"Agreed with @morcos, leave this as-is.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96094125,96094125,src/wallet/rpcwallet.cpp
luke-jr,2017-01-13T23:38:06Z,"Maybe just add `""errors""` to the response below?",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96095311,96095311,src/wallet/rpcwallet.cpp
morcos,2017-01-14T00:06:42Z,"nothing bad happens if you call it with 1, i think it makes most sense to allow users to select 1 meaning as fast as possible, and then we just return the fastest estimate we're comfortable with",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96098001,96098001,src/wallet/rpcwallet.cpp
luke-jr,2017-01-14T00:14:17Z,Okay,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96098610,96098610,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-15T22:21:00Z,"Makes sense, removed in 23c389ab8697bc0040cfd45a32d282906554a84a.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96149281,96149281,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-15T22:22:29Z,"Ok, keeping as is to change the transaction as little as possible.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96149335,96149335,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-15T22:35:42Z,"Clarified the error message in 23c389ab8697bc0040cfd45a32d282906554a84a. If there are other examples of returning an ""errors"" key in a RPC response, I could change this to conform. But my preference would be to keep the exception (since this would be a sign of a serious problem that should not be ignored) and to just return more complete status information with the exception.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96149671,96149671,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-15T22:37:41Z,"morcos was responding to a review comment ""painfully obvious, but needs to be in mempool as well :)"" that is gone now.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96149705,96149705,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-15T22:51:51Z,"Reworded, adding ""for example"" in 23c389ab8697bc0040cfd45a32d282906554a84a. Just saying non-replaceable transactions are replaceable sounds mysterious. Maybe I'm less knowledgeable than the target user, but at least I would find it confusing.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96150047,96150047,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-15T22:54:59Z,"Thanks, fixed in 23c389ab8697bc0040cfd45a32d282906554a84a.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96150117,96150117,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-15T22:55:10Z,"Good point, fixed in 23c389ab8697bc0040cfd45a32d282906554a84a.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96150124,96150124,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-15T23:04:17Z,Added note to totalFee documentation in 4e1a04002b0783d53c27eaed8df4ddb2bded6bf7.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96150335,96150335,src/wallet/rpcwallet.cpp
morcos,2017-01-16T02:10:09Z,"I'd vote against making this statement.\nI think it should be a more general principle of our wallet that you might always lose unexpectedly something on the order of the dust threshold, rather than explicitly mention it every time we think it could happen.   But if I'm outvoted, so be it..\n",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96156341,96156341,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-01-17T01:33:53Z,I think if you have specified a manual confTarget you probably want to always take this branch.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96330335,96330335,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-01-17T02:08:58Z,"I believe this and the check further down should have a fOnlyConfirmed && at the beginning to avoid not showing the tx currently in mempool's change output in listunspent, which I think would be the correct behavior.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96332908,96332908,src/wallet/wallet.cpp
TheBlueMatt,2017-01-17T02:10:50Z,"Or maybe only the one below, but in either case should be well-documented.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96333048,96333048,src/wallet/wallet.cpp
ryanofsky,2017-01-17T15:51:07Z,Added in 0f83aa3a1e1b2668a6231a1660ed864e2da3a341.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96440795,96440795,src/wallet/wallet.cpp
instagibbs,2017-01-17T16:01:29Z,note: in the future we should rename and invert the AvailableCoins argument to this. ,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96443450,96443450,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-17T16:27:49Z,Done in a29b3f557fe8b7bb8e1b28933f3d5a4a3a36d362.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96450396,96450396,src/wallet/rpcwallet.cpp
luke-jr,2017-01-18T18:04:02Z,"I would worry that a caller might ignore the error and try again, but I guess the harm risk of that is minimal with bumpfee.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96696736,96696736,src/wallet/rpcwallet.cpp
luke-jr,2017-01-18T18:06:40Z,This seems redundant. Type-checking is the purpose of the .get_&lt;type> methods on UniValue.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96697253,96697253,src/rpc/server.cpp
luke-jr,2017-01-18T18:07:52Z,We can't be sure 1-block confirmed transactions won't have a replacement mined either...,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96697489,96697489,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-01-18T18:09:19Z,We absolutely do not use .get_<type>'s built-in type check anywhere - it throws a different type of exception which will not be correctly reported as an RPC_TYPE_ERROR.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96697761,96697761,src/rpc/server.cpp
luke-jr,2017-01-18T18:26:53Z,Prefer to add an options Object for this.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96701580,96701580,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-18T20:32:49Z,Changed wording in 4beb7c92c70b7668042383d37c49545198aa00cd.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96727363,96727363,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-18T20:34:58Z,"Interesting. I wasn't following the named argument discussion in detail, but I thought named arguments would be preferable to options because they are easier to specify on the command line. But maybe there are advantages to options objects that I'm not aware of.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96727791,96727791,src/wallet/rpcwallet.cpp
instagibbs,2017-01-19T18:34:56Z,"ultra-nit: ""bumped"" is a bit confusing since it's already used in another sense(bumped fee), ""replace"" is likely better.",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96925962,96925962,src/wallet/rpcwallet.cpp
jameshilliard,2017-01-20T02:10:26Z,Should probably have an option to override this.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r97000879,97000879,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-20T05:14:37Z,"An option to signal RBF in the original transaction (which already exists, see -walletrbf option, and #9592, #9527), or an option to create a bumpfee transaction even if the original doesn't signal RBF?",https://github.com/bitcoin/bitcoin/pull/8456#discussion_r97013772,97013772,src/wallet/rpcwallet.cpp
jameshilliard,2017-01-20T05:26:55Z,An option to create a bumpfee transaction regardless of if the original signaled RBF since some nodes may accept it.,https://github.com/bitcoin/bitcoin/pull/8456#discussion_r97014539,97014539,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-24T18:51:32Z,There was some discussion about this idea in IRC https://botbot.me/freenode/bitcoin-core-dev/msg/79836432/ (unclear what the outcome was),https://github.com/bitcoin/bitcoin/pull/8456#discussion_r97621411,97621411,src/wallet/rpcwallet.cpp
