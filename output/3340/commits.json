[
  {
    "sha": "b67ca63e8b0d44e4990d25ebcfed755552f7df40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjdjYTYzZThiMGQ0NGU0OTkwZDI1ZWJjZmVkNzU1NTUyZjdkZjQw",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-12-02T05:01:16Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-12-11T23:10:07Z"
      },
      "message": "dont use mmap in leveldb, this is a marginal performance hit\n\nfail on short writes\n\nEnsure new files referred to by the manifest are in the filesystem.",
      "tree": {
        "sha": "fec18214664e8955094e59edeb9281c2122a9ee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fec18214664e8955094e59edeb9281c2122a9ee5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b67ca63e8b0d44e4990d25ebcfed755552f7df40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b67ca63e8b0d44e4990d25ebcfed755552f7df40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b67ca63e8b0d44e4990d25ebcfed755552f7df40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b67ca63e8b0d44e4990d25ebcfed755552f7df40/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e47c2b70a4cffa2de60d578ddd6b7767879c83f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e47c2b70a4cffa2de60d578ddd6b7767879c83f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e47c2b70a4cffa2de60d578ddd6b7767879c83f"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 86,
      "deletions": 16
    },
    "files": [
      {
        "sha": "9859e25c4b0166cb63e8819ac06d3fecd7d99862",
        "filename": "src/leveldb/util/env_posix.cc",
        "status": "modified",
        "additions": 86,
        "deletions": 16,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b67ca63e8b0d44e4990d25ebcfed755552f7df40/src/leveldb/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b67ca63e8b0d44e4990d25ebcfed755552f7df40/src/leveldb/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_posix.cc?ref=b67ca63e8b0d44e4990d25ebcfed755552f7df40",
        "patch": "@@ -377,6 +377,91 @@ class PosixMmapFile : public WritableFile {\n   }\n };\n \n+class PosixWriteableFile : public WritableFile {\n+ private:\n+  std::string filename_;\n+  int fd_;\n+ public:\n+  PosixWriteableFile(const std::string& fname, int fd)\n+  : filename_(fname),\n+  fd_(fd)\n+  { }\n+\n+\n+  ~PosixWriteableFile() {\n+    if (fd_ >= 0) {\n+      PosixWriteableFile::Close();\n+    }\n+  }\n+\n+  virtual Status Append(const Slice& data) {\n+    Status s;\n+    int ret;\n+    ret = write(fd_, data.data(), data.size());\n+    if (ret < 0) {\n+      s = IOError(filename_, errno);\n+    } else if (ret < data.size()) {\n+      s = Status::IOError(filename_, \"short write\");\n+    }\n+    \n+    return s;\n+  }\n+\n+  virtual Status Close() {\n+    Status s;\n+    if (close(fd_) < 0) {\n+      s = IOError(filename_, errno);\n+    }\n+    fd_ = -1;\n+    return s;\n+  }\n+\n+  virtual Status Flush() {\n+    return Status::OK();\n+  }\n+  \n+  Status SyncDirIfManifest() {\n+    const char* f = filename_.c_str();\n+    const char* sep = strrchr(f, '/');\n+    Slice basename;\n+    std::string dir;\n+    if (sep == NULL) {\n+      dir = \".\";\n+      basename = f;\n+    } else {\n+      dir = std::string(f, sep - f);\n+      basename = sep + 1;\n+    }\n+    Status s;\n+    if (basename.starts_with(\"MANIFEST\")) {\n+      int fd = open(dir.c_str(), O_RDONLY);\n+      if (fd < 0) {\n+        s = IOError(dir, errno);\n+      } else {\n+        if (fsync(fd) < 0) {\n+          s = IOError(dir, errno);\n+        }\n+        close(fd);\n+      }\n+    }\n+    return s;\n+  }\n+  \n+  virtual Status Sync() {\n+    // Ensure new files referred to by the manifest are in the filesystem.\n+    Status s = SyncDirIfManifest();\n+    if (!s.ok()) {\n+      return s;\n+    }\n+    \n+    if (fdatasync(fd_) < 0) {\n+      s = IOError(filename_, errno);\n+    }\n+    \n+    return s;\n+  }\n+};\n+\n static int LockOrUnlock(int fd, bool lock) {\n   errno = 0;\n   struct flock f;\n@@ -439,21 +524,6 @@ class PosixEnv : public Env {\n     int fd = open(fname.c_str(), O_RDONLY);\n     if (fd < 0) {\n       s = IOError(fname, errno);\n-    } else if (mmap_limit_.Acquire()) {\n-      uint64_t size;\n-      s = GetFileSize(fname, &size);\n-      if (s.ok()) {\n-        void* base = mmap(NULL, size, PROT_READ, MAP_SHARED, fd, 0);\n-        if (base != MAP_FAILED) {\n-          *result = new PosixMmapReadableFile(fname, base, size, &mmap_limit_);\n-        } else {\n-          s = IOError(fname, errno);\n-        }\n-      }\n-      close(fd);\n-      if (!s.ok()) {\n-        mmap_limit_.Release();\n-      }\n     } else {\n       *result = new PosixRandomAccessFile(fname, fd);\n     }\n@@ -468,7 +538,7 @@ class PosixEnv : public Env {\n       *result = NULL;\n       s = IOError(fname, errno);\n     } else {\n-      *result = new PosixMmapFile(fname, fd, page_size_);\n+      *result = new PosixWriteableFile(fname, fd);\n     }\n     return s;\n   }"
      }
    ]
  },
  {
    "sha": "b1a4f7e75864dafdf5be8eda20bbabeb5788150c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWE0ZjdlNzU4NjRkYWZkZjViZThlZGEyMGJiYWJlYjU3ODgxNTBj",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-12-11T23:08:58Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-12-11T23:10:07Z"
      },
      "message": "add internal memory buffer for PosixWriteableFile\nmiinor improvement in sequential write times",
      "tree": {
        "sha": "7316a4c8858ac2305239179a95bbf26c7091fe63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7316a4c8858ac2305239179a95bbf26c7091fe63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1a4f7e75864dafdf5be8eda20bbabeb5788150c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1a4f7e75864dafdf5be8eda20bbabeb5788150c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1a4f7e75864dafdf5be8eda20bbabeb5788150c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1a4f7e75864dafdf5be8eda20bbabeb5788150c/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b67ca63e8b0d44e4990d25ebcfed755552f7df40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b67ca63e8b0d44e4990d25ebcfed755552f7df40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b67ca63e8b0d44e4990d25ebcfed755552f7df40"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 47,
      "deletions": 7
    },
    "files": [
      {
        "sha": "28dce2d251b6f515f842ba95c14c985dd8bdb97c",
        "filename": "src/leveldb/util/env_posix.cc",
        "status": "modified",
        "additions": 47,
        "deletions": 7,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1a4f7e75864dafdf5be8eda20bbabeb5788150c/src/leveldb/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1a4f7e75864dafdf5be8eda20bbabeb5788150c/src/leveldb/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_posix.cc?ref=b1a4f7e75864dafdf5be8eda20bbabeb5788150c",
        "patch": "@@ -381,10 +381,13 @@ class PosixWriteableFile : public WritableFile {\n  private:\n   std::string filename_;\n   int fd_;\n+  char buf_[1048576];\n+  unsigned int buf_used_;\n  public:\n   PosixWriteableFile(const std::string& fname, int fd)\n   : filename_(fname),\n-  fd_(fd)\n+  fd_(fd),\n+  buf_used_(0)\n   { }\n \n \n@@ -397,18 +400,39 @@ class PosixWriteableFile : public WritableFile {\n   virtual Status Append(const Slice& data) {\n     Status s;\n     int ret;\n-    ret = write(fd_, data.data(), data.size());\n-    if (ret < 0) {\n-      s = IOError(filename_, errno);\n-    } else if (ret < data.size()) {\n-      s = Status::IOError(filename_, \"short write\");\n+    \n+    if (buf_used_ + data.size() < sizeof(buf_)) {\n+      memcpy(buf_+buf_used_, data.data(), data.size());\n+      buf_used_ += data.size();\n+    } else {\n+      s = PosixWriteableFile::Flush();\n+      \n+      if (!s.ok())\n+        return s;\n+      \n+      if (data.size() < sizeof(buf_)) {\n+        memcpy(buf_, data.data(), data.size());\n+        buf_used_ += data.size();\n+      } else {\n+        ret = write(fd_, data.data(), data.size());\n+        if (ret < 0) {\n+          s = IOError(filename_, errno);\n+        } else if (ret < data.size()) {\n+          s = Status::IOError(filename_, \"short write\");\n+        }\n+      }\n     }\n     \n     return s;\n   }\n \n   virtual Status Close() {\n     Status s;\n+    s = PosixWriteableFile::Sync();\n+    \n+    if (!s.ok())\n+      return s;\n+        \n     if (close(fd_) < 0) {\n       s = IOError(filename_, errno);\n     }\n@@ -417,7 +441,19 @@ class PosixWriteableFile : public WritableFile {\n   }\n \n   virtual Status Flush() {\n-    return Status::OK();\n+    Status s;\n+    int ret;\n+    \n+    if (buf_used_ > 0) {\n+      ret = write(fd_, buf_, buf_used_);\n+      if (ret < 0) {\n+        s = IOError(filename_, errno);\n+      } else if (ret < buf_used_) {\n+        s = Status::IOError(filename_, \"short write\");\n+      }\n+      buf_used_ = 0;\n+    }\n+    return s;\n   }\n   \n   Status SyncDirIfManifest() {\n@@ -454,6 +490,10 @@ class PosixWriteableFile : public WritableFile {\n       return s;\n     }\n     \n+    s = PosixWriteableFile::Flush();\n+    if (!s.ok())\n+      return s;\n+    \n     if (fdatasync(fd_) < 0) {\n       s = IOError(filename_, errno);\n     }"
      }
    ]
  }
]