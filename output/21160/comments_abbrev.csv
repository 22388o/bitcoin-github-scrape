DrahtBot,2021-02-12 22:39:57,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23604](https://github.com/bitcoin/bitcoin/pull/23604) (Use Sock in CNode by vasild)\n* [#23575](https://github.com/bitco",https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-778494756,778494756,
jnewbery,2021-02-22 08:48:27,Rebased on master to pick up fix for interface_zmq.py in #21008.,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-783204949,783204949,
jnewbery,2021-02-22 19:10:33,Rebase resulted in silent merge conflict with 9476886353dffb730dcb75799f2bd5e143425795. I'll fix tomorrow.,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-783605323,783605323,
jnewbery,2021-03-18 11:06:41,I've rebased this and moved it out of draft. It's now ready for review.,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-801832376,801832376,
jnewbery,2021-03-20 09:31:54,Rebased,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-803279260,803279260,
MarcoFalke,2021-03-22 08:31:02,Doesn't compile,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-803869071,803869071,
jnewbery,2021-03-22 09:34:55,Thanks Marco. Bad rebase should be fixed now.,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-803914027,803914027,
jnewbery,2021-03-22 09:54:23,Thanks for the review @vasild! I think I've addressed all of your review comments now.,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-803929392,803929392,
jnewbery,2021-03-22 09:57:42,"> It seems sub-optimal that new fields are added - CNode::m_relays_txs and CNode::m_bloom_filter_loaded that are redundant/duplicates of Peer::TxRelay::m_relay_txs and Peer::TxRelay::m_bloom_filter != nullptr. This could be confusing and leaves a chance that in the future they go out of sync. Can the duplicates be avoided somehow?\n\nThat does seem a bit of a shame, but note that even though the",https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-803931983,803931983,
vasild,2021-03-23 09:18:02,"Reviewed 66baf28fe2b76d3f214714604e9e24e83f16c20e - the patch looks correct and I do not think it introduces bugs.\n\nI will try to see when the [UI](https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597831033) and [RPC](https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597832782) fields could become empty/missing when they would have been filled/present before this PR.",https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-804745886,804745886,
jnewbery,2021-03-23 10:35:10,Thanks for the re-review @vasild. I've updated the commits to address https://github.com/bitcoin/bitcoin/pull/21160#discussion_r599387582.,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-804795139,804795139,
jnewbery,2021-03-29 11:30:48,Rebased,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-809304938,809304938,
jnewbery,2021-03-30 15:48:27,rebased,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-810374111,810374111,
jnewbery,2021-04-01 08:16:42,Rebased,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-811736077,811736077,
jnewbery,2021-04-30 09:50:46,"Thanks for the review @glozow. I've rebased on master and addressed your review comments.\n\n#21527 moves around the locks in net_processing, which interacts a bit with how this PR moves `m_wtxid_relay` around. I think it makes sense to focus on merging that PR first, since that could simplify the locking here a bit.",https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-829980035,829980035,
DrahtBot,2021-05-03 09:34:05,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @sipa has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-831142707,831142707,
jnewbery,2021-05-03 10:55:48,I'll rebase this after #21527 is merged,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-831184841,831184841,
jnewbery,2021-05-28 10:14:57,"I've rebased this on top of the _net_processing: add m_mutex_message_handling_ commit from #21527. I'm leaving as WIP for now, but it's in a state where people can review it. I'll move it out of draft as soon as #21527 or #22053 is merged (should be a trivial rebase).",https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-850312983,850312983,
jnewbery,2021-08-13 10:25:16,"I'd rebased this on top of some of the work in #21527, since they conflicted a little. However, it seems that 21527 has now been abandoned, so I've removed that commit and marked this PR ready for review again. If 21527 does get picked up again and merged, then it should be easy enough to rebase this on top of it.",https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-898357737,898357737,
jnewbery,2021-08-16 13:32:02,Rebased on master,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-899514121,899514121,
jnewbery,2021-08-19 13:40:20,Thanks for the review @vasild. I understand your arguments about the extra fields in `CNode` and removing the stats from the GUI and RPC when they're not available. I don't have anything to add beyond my responses from the first time you raised those points.,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-901924846,901924846,
jonatack,2021-08-19 16:22:00,"> Thanks for the review @vasild. I understand your arguments about the extra fields in `CNode` and removing the stats from the GUI and RPC when they're not available.\n\n(If helpful, mentioning https://github.com/bitcoin/bitcoin/pull/21160#discussion_r692284808 here, as that thread is closed as resolved.)",https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-902052740,902052740,
glozow,2021-08-23 08:51:37,"re ACK a192c23b2cb45e7c9a06bb00714347ef38df701f via `git range-diff 2533ea5...a192c23`, no overall changes, diff moved between 2 commits.",https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-903570095,903570095,
jnewbery,2021-08-23 17:18:54,rebased,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-903963368,903963368,
amitiuttarwar,2021-08-25 18:45:53,concept ACK ,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-905784695,905784695,
jnewbery,2021-08-27 10:00:14,rebased,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-907082625,907082625,
glozow,2021-09-01 10:58:05,reACK 34bd2711e7ffa0d5a7b563d15d79f8ae1d8cef43 via `git range-diff a192c23...34bd271`,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-910169620,910169620,
hebasto,2021-09-01 11:02:48,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-910173096,910173096,
MarcoFalke,2021-09-14 13:01:16,Are you still working on this?,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-919127068,919127068,
jnewbery,2021-09-14 13:11:49,"> Are you still working on this?\n\n@MarcoFalke \n\nYes. Apologies for the delay. I do intend to rebase and address your review comments soon.",https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-919136761,919136761,
jnewbery,2021-09-24 10:45:02,Thanks for the review @MarcoFalke. I've addressed your review comments and rebased on master.,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-926529232,926529232,
naumenkogs,2021-09-29 10:11:55,"ACK ce772d53048a8d0d9934a8310dbedcbdafdc34ec\nA good change for better readability with no behavior changes.",https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-930038981,930038981,
jnewbery,2021-10-22 13:29:27,Rebased on master,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-949633464,949633464,
jnewbery,2021-10-22 16:51:39,rebased,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-949802862,949802862,
MarcoFalke,2021-10-25 13:58:04,"Feedback:\n\n* https://github.com/bitcoin/bitcoin/pull/21160#discussion_r701114184\n* https://github.com/bitcoin/bitcoin/pull/21160#discussion_r701121335\n\nConcept ACK b0dfefec249302cd9d9f121fe081a9a51294d0ab  🌠\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nConcept ACK b0dfefec249302cd9d9f121fe0",https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-950956810,950956810,
jnewbery,2021-10-29 11:25:44,Thanks for the reviews @glozow and @theuni! I've resolved @glozow's review comment and rebased on master. I plan to address @theuni's review comments very soon.,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-954666132,954666132,
MarcoFalke,2021-10-29 11:36:30,"There is also this feedback, which you haven't responded to: https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-950956810",https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-954672180,954672180,
jnewbery,2021-12-01 13:50:03,rebased. I still intend to address @theuni's comments.,https://github.com/bitcoin/bitcoin/pull/21160#issuecomment-983659420,983659420,
vasild,2021-03-19 12:23:21,"\n```suggestion\n    /** Whether we should relay transactions to this peer (he asked us to in his version message and this is not a `ConnectionType::BLOCK_RELAY` connection). This only changes from\n```",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597635838,597635838,src/net.h
vasild,2021-03-19 12:52:41,"_(comment on irrelevant line)_\n\nIn the commit message of 465e9da51c56beaa97f5ffcdf2132471b591a8d5 `[net] Add CNode.m_relays_txs and CNode.m_bloom_filter_loaded`:\n\n```diff\n     This is currently redundant information with m_tx_relay->fRelayTxes,\n-    but m_tx_relay is moved into net_processing, then we'll need these\n+    but when m_tx_relay is moved into net_processing, then we'll nee",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597653259,597653259,src/net.cpp
vasild,2021-03-19 13:18:41,"This can be reduced to just:\n```cpp\nvEvictionCandidates.push_back(*node);\n```\nBy using a [conversion function](https://en.cppreference.com/w/cpp/language/cast_operator) from `CNode` to `NodeEvictionCandidate`.\n\nMaybe out of the scope of this PR.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597670155,597670155,src/net.cpp
vasild,2021-03-19 14:00:58,"```suggestion\n    for (auto& [node_id, peer] : m_peer_map) {\n```",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597701349,597701349,src/net_processing.cpp
vasild,2021-03-19 14:24:01,"This was moved from below without the accompanying assert, better move the assert with it.\n```suggestion\n        m_wtxid_relay_peers -= peer->m_wtxid_relay;\n        assert(m_wtxid_relay_peers >= 0);\n```",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597719018,597719018,src/net_processing.cpp
vasild,2021-03-19 14:25:04,"This assert can/should be moved up, where the decrement was moved to.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597719805,597719805,src/net_processing.cpp
vasild,2021-03-19 15:49:46,"Just a note:\n\nBefore this change both `CNodeState::m_wtxid_relay` and `PeerManagerImpl::m_wtxid_relay_peers` would have been modified under `cs_main`. After this change `Peer::m_wtxid_relay` and `PeerManagerImpl::m_wtxid_relay_peers` are not anymore modified together under `cs_main`.\n\nThis means that after `peer->m_wtxid_relay = true` and before `m_wtxid_relay_peers++` the system is in an ",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597787675,597787675,src/net_processing.cpp
vasild,2021-03-19 16:02:38,`explicit` can be removed because now we have 2 arguments.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597797245,597797245,src/net_processing.cpp
vasild,2021-03-19 16:07:01,Why not a `Peer` method?,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597800447,597800447,src/net_processing.cpp
vasild,2021-03-19 16:30:30,nit: I think the rest of the code around `m_tx_relay` uses `== nullptr` or `!= nullptr`.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597817303,597817303,src/net_processing.cpp
vasild,2021-03-19 16:42:31,"This comment `// Use half...` was removed from `master` when `{INBOUND,OUTBOUND}_INVENTORY_BROADCAST_INTERVAL` were introduced. I think it better be removed because it implies OUTBOUND is INBOUND/2.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597825250,597825250,src/net_processing.cpp
vasild,2021-03-19 16:50:30,"This change would only set the text if `stats->fNodeStateStatsAvailable` is `true` and will leave it ""uninitialized"" otherwise. What would be displayed in that case? Empty? Should something like `n/a` be displayed?\n\nThis looks like a regression in the UI - previously that text would always have been set (it was always known) and now - not anymore.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597831033,597831033,src/qt/rpcconsole.cpp
vasild,2021-03-19 16:53:06,Similarly to the UI - the fields `relaytxes` and `minfeefilter` would have always been present before and now - only if `fStateStats` is `true`.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r597832782,597832782,src/rpc/net.cpp
jnewbery,2021-03-20 09:29:33,"That means node_id is unused, which causes warnings depending on your compiler flags.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598088245,598088245,src/net_processing.cpp
jnewbery,2021-03-20 09:31:42,We don't have a project style on whether to compare to `nullptr` or use a pointer's bool conversion. Both are fine.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598088432,598088432,src/net_processing.cpp
jnewbery,2021-03-22 09:54:28,As above for the gui peer console.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598567367,598567367,src/rpc/net.cpp
jnewbery,2021-03-22 09:54:29,"In reality, I think `fNodeStateStatsAvailable` will almost always be true, so this isn't a big issue (if it was, then the other stats in `nodeStateStats` not being available would also be an issue).",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598567395,598567395,src/qt/rpcconsole.cpp
jnewbery,2021-03-22 09:54:35,Oops! Thank you. Removed.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598567467,598567467,src/net_processing.cpp
jnewbery,2021-03-22 09:54:39,I'm trying to keep `Peer` as a data structure without any internal logic.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598567518,598567518,src/net_processing.cpp
jnewbery,2021-03-22 09:54:42,Nice! Removed.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598567565,598567565,src/net_processing.cpp
jnewbery,2021-03-22 09:54:45,"Yes, that's a good observation. I agree that this is totally fine, and the fields don't need to be atomically updated under cs_main.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598567603,598567603,src/net_processing.cpp
jnewbery,2021-03-22 09:54:49,Done.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598567662,598567662,src/net_processing.cpp
jnewbery,2021-03-22 09:54:52,Done.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598567706,598567706,src/net_processing.cpp
jnewbery,2021-03-22 09:54:56,"Seems reasonable, but I agree it's out of scope for this PR.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598567747,598567747,src/net.cpp
jnewbery,2021-03-22 09:55:00,Thanks! Fixed.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598567802,598567802,src/net.cpp
jnewbery,2021-03-22 09:55:04,That's better. I've updated the comment.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r598567849,598567849,src/net.h
vasild,2021-03-23 08:49:31,"Which compiler flags produce a warning? I don't get any with either clang 12 or gcc 10:\n```cpp\n    std::map<int, int> m;\n    for (const auto& [x, y] : m) { // no warning\n        std::cout << x;\n    } \n    for (const auto& [x, y] : m) { // warning: unused structured binding declaration [-Wunused-variable]\n    } \n```",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r599373279,599373279,src/net_processing.cpp
vasild,2021-03-23 09:09:31,"Now the move of the decrement happens in commit\n`[net processing] Move m_wtxid_relay to Peer`\nwhile the move of the assert happens in\n`[net processing] Move tx relay data to Peer`.\n\nI think both moves belong to the first commit.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r599387582,599387582,src/net_processing.cpp
jnewbery,2021-03-23 10:30:53,"Hmmm, if you search for ""c++ structured binding unused variable"", there do seem to be a lot of people claiming that they've encountered this warning. Like you, I've been unable to reproduce it, either locally or on godbolt.org with various compiler versions.\n\nIn any case, I'm going to leave this as it is, since it's only one more line and no less clear to explicitly declare the `Peer` object. ",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r599446966,599446966,src/net_processing.cpp
jnewbery,2021-03-23 10:33:53,Oops. Now fixed. Thank you!,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r599449012,599449012,src/net_processing.cpp
glozow,2021-03-25 22:38:28,"I thought this could be `const` because you'd get the info from the `VERSION` and it wouldn't ever change, but then I realized the `Peer` struct is created before then, so it couldn't be const... is that accurate?",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r601883666,601883666,src/net_processing.cpp
glozow,2021-04-29 18:39:04,Why'd you delete the `explicit`?,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r623300544,623300544,src/net_processing.cpp
glozow,2021-04-29 18:46:46,"Why is this `return` instead of `break`? Maybe I'm misunderstanding what this is doing, but I thought that we'd continue iterating through the others to relay to them, but returning seems like we're just skipping over the rest?",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r623305322,623305322,src/net_processing.cpp
jnewbery,2021-04-30 07:35:55,"Correct. The `Peer` object is constructed before we receive the `wtxidrelay` message, so we can't make this const.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r623676922,623676922,src/net_processing.cpp
jnewbery,2021-04-30 09:37:42,No good reason. I've put it back.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r623748168,623748168,src/net_processing.cpp
jnewbery,2021-04-30 09:39:02,"Yikes. Good catch. In a previous iteration of this PR, I had a `ForEachPeer()` helper that took a lambda, and this `return` was effectively a `continue` (the lambda would return and then be called for the remaining peers). Now fixed!",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r623748907,623748907,src/net_processing.cpp
vasild,2021-05-07 10:49:52,"`explicit` prevents implicit conversions for _single-argument_ constructors. After the change above, the constructor has 2 arguments. See https://stackoverflow.com/a/121163",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r628113336,628113336,src/net_processing.cpp
MarcoFalke,2021-05-07 11:22:14,"`explicit` will also prevent implicit conversion for multiple-argument constructors. Is there a reason why {int,bool} should implicitly be converted into Peer?",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r628132981,628132981,src/net_processing.cpp
vasild,2021-05-07 11:57:06,Alright: https://stackoverflow.com/questions/39122101/explicit-constructor-taking-multiple-arguments,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r628152277,628152277,src/net_processing.cpp
glozow,2021-08-16 12:48:58,I have a question about this code (not related to this PR though) - why don't we lock `m_tx_inventory_mutex` here?,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r689506531,689506531,src/net_processing.cpp
glozow,2021-08-16 15:32:36,"In 203bfe156b0a25a36c19fba397c8b2577bab1e9b: Noted that the line `LOCK2(cs_main, g_cs_orphans)` was moved down a few lines, and my reasoning for why this is okay was:\n\n- Whether a peer does wtxid relay, i.e. the value of `peer->m_wtxid_relay`, wouldn't change, and either way wouldn't require `cs_main` or `g_cs_orphans`\n- The peer inventory data is guarded by `cs_tx_inventory` and that's grab",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r689641819,689641819,src/net_processing.cpp
glozow,2021-08-16 15:38:21,"In 203bfe156b0a25a36c19fba397c8b2577bab1e9b: not changed in this PR, but it's odd to me that we're subtracting a bool from an int? Why isn't it `if (peer->m_wtxid_relay) m_wtxid_relay_peers -= 1;` ?",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r689646357,689646357,src/net_processing.cpp
glozow,2021-08-16 16:44:26,"In 2533ea5161d2cb15b3a43e0fea9b146f525aea97\n\nNoting that we have 3 variables named `m_relay_txs`: in `NodeEvictionCandidate`, `Peer.TxRelay`, and `CNodeStateStats`. And we have a `CNode.m_relays_txs` (very similar but not same name) where `CNode.m_relays_txs == Peer.m_tx_relay.m_relay_txs` always, and they are not the same thing as `Peer.m_tx_relay != nullptr`.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r689696008,689696008,src/net_processing.cpp
jnewbery,2021-08-17 10:00:33,"Hmmm, actually `m_tx_inventory_mutex` is held at this point (see line 4747 above):\n\n```c++\n        if (peer->m_tx_relay != nullptr) {\n                LOCK(peer->m_tx_relay->m_tx_inventory_mutex);\n                ...\n```\n\nIn fact, all access of `m_tx_inventory_to_send` (and `setInventoryTxToSend` in master) is guarded by `m_tx_inventory_mutex` (`cs_tx_inventory` in master). It looks",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r690220985,690220985,src/net_processing.cpp
jnewbery,2021-08-17 10:03:11,"Right. This `LOCK(cs_main)` was required to access the `CNodeState` in the line below. Now that `m_wtxid_relay` is in `Peer`, we don't need to hold `cs_main` until a little bit later (when we access `m_txrequest`).",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r690222852,690222852,src/net_processing.cpp
jnewbery,2021-08-17 10:05:30,I agree that would be clearer.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r690224534,690224534,src/net_processing.cpp
jnewbery,2021-08-17 10:07:03,"Yes, this is slightly unfortunate. Please let me know if you have suggestions for improving the naming.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r690225534,690225534,src/net_processing.cpp
vasild,2021-08-19 09:03:40,"Commit 203bfe156b0a25a36c19fba397c8b2577bab1e9b `[net processing] Move m_wtxid_relay to Peer` introduces a usage of `CConnMan::ForEachNode()` with a lambda that returns `true` and `false`, however it should have a return type of `void`.\n\nThis is later removed in a subsequent commit.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r691926265,691926265,src/net_processing.cpp
jnewbery,2021-08-19 13:33:54,fixed.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r692115126,692115126,src/net_processing.cpp
jonatack,2021-08-19 16:18:13,"Oh, this change is a bit surprising.  FWIW I found that I needed to add null-checking for the new `m_addr_*` statestats in #22501 to avoid parsing errors.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r692284808,692284808,src/qt/rpcconsole.cpp
MarcoFalke,2021-08-22 17:15:50,"Is there a reason for the bool to exist? What would happen if we delayed initialization of the whole txrelay struct to when the version message is received?\n\nSomething similar is done for address relay, IIRC.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r693531183,693531183,src/net_processing.cpp
jnewbery,2021-08-23 12:25:59,"@MarcoFalke yes, that's the plan. This PR is intended to be a simple refactor, and delaying initialization of the `TxRelay` struct requires more focused discussion so should be done in a separate PR.\n\nI've opened PR #22778, which implements delaying constructing `m_tx_relay` until the `version` message is received. Note however that `m_relay_txs` is still required - a peer that we've offered `",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r693924430,693924430,src/net_processing.cpp
MarcoFalke,2021-09-02 11:44:15,nit bc3bc6ceb7265b8ea9f530066e6b79c75881f2e4: Is there a reason to not use the shorter and more clear version `pfrom.m_relays_txs = fRelay`?,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r701003777,701003777,src/net_processing.cpp
MarcoFalke,2021-09-02 13:53:14,c46d1f5eef34ec210a21d4700d6f2d4ca0b6941a: Is there some intuition available why this doesn't need any Mutex or atomic? The other members seem to have one.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r701105613,701105613,src/net_processing.cpp
MarcoFalke,2021-09-02 14:01:56,eeb0e84fc5c259dfd00f7673ad4a51582b100282: Would be nice to not break the fuzz test. Maybe a test-only mock method on PeerMan can do this?,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r701114184,701114184,src/test/fuzz/util.cpp
MarcoFalke,2021-09-02 14:06:18,Was this addressed?,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r701118395,701118395,src/net_processing.cpp
MarcoFalke,2021-09-02 14:09:23,"eeb0e84fc5c259dfd00f7673ad4a51582b100282: Would be nice to rename this from `blocks_only` to `initialize_tx_relay` (or similar). `blocks_only` is confusingly similar named to the setting `-blocksonly`, but it really means block-relay-only.\n\nMoreover, the details *why* tx relay isn't initialized here don't matter *here*, so a bool with a more general name seems fine.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r701121335,701121335,src/net_processing.cpp
MarcoFalke,2021-09-02 14:11:39,"eeb0e84fc5c259dfd00f7673ad4a51582b100282: any reason to make this code more fragile by removing the `else` in the move? The `else` used to set those to `false`, and `0`, respectively.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r701123514,701123514,src/net_processing.cpp
MarcoFalke,2021-09-02 14:13:23,"eeb0e84fc5c259dfd00f7673ad4a51582b100282: Why not `-1` (an impossible number), like the height values above? Or  maybe leave it uninitialized to make memory sanitizers more useful?",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r701125057,701125057,src/net_processing.h
jnewbery,2021-09-24 09:28:39,fixed now,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r715461019,715461019,src/net_processing.cpp
jnewbery,2021-09-24 09:30:02,Done,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r715462001,715462001,src/net_processing.cpp
jnewbery,2021-09-24 10:18:18,"Because of the comment for m_relay_txs in net.h:\n\n    /** ... This only changes from false to true. It will never change\n     *  back to false. Used only in inbound eviction logic. */\n\nThis doesn't work:\n\n```suggestion\n            pfrom.m_relays_txs &= fRelay;\n```\n\nsince the `&=` operator isn't defined for `std::atomic<bool>`. I could use:\n\n```suggestion\n            pfr",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r715493509,715493509,src/net_processing.cpp
jnewbery,2021-09-24 10:28:39,No reason. I've updated this to be an atomic.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r715499602,715499602,src/net_processing.cpp
jnewbery,2021-09-24 10:36:07,Does this break the fuzz test? `fRelayTxes` (`m_relay_txs` after this PR) will get set after the node receives and processes the `version` message. Presumably the fuzzer will be able to set the `fRelay` field on that message to true or false.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r715503886,715503886,src/test/fuzz/util.cpp
jnewbery,2021-09-24 10:43:52,"I don't think I agree that this is more fragile. The default is that there connection isn't being used to relay transactions, and the feefilter is set to zero. Those stats are only updated if the node is relaying transactions/has set a feefilter.\n\nI've reverted this to use if/else and remove the default initialization, since that's closer to the current code.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r715508638,715508638,src/net_processing.cpp
jnewbery,2021-09-24 10:44:04,As above (https://github.com/bitcoin/bitcoin/pull/21160#discussion_r715508638),https://github.com/bitcoin/bitcoin/pull/21160#discussion_r715508755,715508755,src/net_processing.h
vasild,2021-09-24 13:50:31,`pfrom.m_relays_txs = pfrom.m_relay_txs && fRelay;` could change it from `true` to `false`.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r715630337,715630337,src/net_processing.cpp
naumenkogs,2021-09-29 08:07:56,">This only changes from false to true\n\nCould you mention that this happens only at the beginning of the connection lifetime?",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r718258602,718258602,src/net.h
naumenkogs,2021-09-29 09:58:03,"I think the comment is a good justification to keeping the code this way.\nThe only problem I can see is the temptation of future devs to change this.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r718350619,718350619,src/net_processing.cpp
jnewbery,2021-09-29 16:22:35,"> pfrom.m_relays_txs = pfrom.m_relay_txs && fRelay; could change it from true to false.\n\n:man_facepalming: You're right of course. I meant `pfrom.m_relay_txs || fRelay;`",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r718686753,718686753,src/net_processing.cpp
jnewbery,2021-09-29 16:33:12,"`m_relays_txs` can be set to true after initial connection, if the peer sends a `filterload` or `filterclear` message.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r718695406,718695406,src/net.h
naumenkogs,2021-09-30 07:12:22,"Right, thanks.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r719121059,719121059,src/net.h
MarcoFalke,2021-10-25 13:55:30,"There is only one fuzz test to send more than one message type in one session, so this will break all other fuzz tests that only send one message type.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r735625280,735625280,src/test/fuzz/util.cpp
MarcoFalke,2021-10-25 13:56:39,Obviously that means you'll have to toggle the code after renaming the symbol ;),https://github.com/bitcoin/bitcoin/pull/21160#discussion_r735626454,735626454,src/net_processing.cpp
glozow,2021-10-25 14:14:51,"I see that this bool was renamed from `blocks_only` to `tx_relay` based on Marco's comment https://github.com/bitcoin/bitcoin/pull/21160#discussion_r701121335. The rename makes sense to me, but it's a little odd that if `tx_relay=true` you make `m_tx_relay` null... I would've expected it to be the other way around? :thinking: ",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r735643977,735643977,src/net_processing.cpp
theuni,2021-10-26 17:50:17,"Setting these values should be fine outside of the lock, right?\n\nCan you move this out of the lock scope to make that clear?",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r736785417,736785417,src/net_processing.cpp
theuni,2021-10-26 17:50:38,Same comment about lock scope here (and the hunk below as well),https://github.com/bitcoin/bitcoin/pull/21160#discussion_r736785662,736785662,src/net_processing.cpp
theuni,2021-10-26 17:54:49,This is the only place where these values are read outside of a lock which keeps their writes in sync.  I suppose these rarely being out of sync is of no consequence?,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r736788800,736788800,src/net.cpp
theuni,2021-10-26 18:30:53,Agreed. Can't parse this as-is.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r736814974,736814974,src/net_processing.cpp
theuni,2021-10-26 18:41:48,"Why not `const Peer& peer` here (and for `MaybeSendFeefilter`), since it's used read-only?",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r736822577,736822577,src/net_processing.cpp
theuni,2021-10-26 18:43:12,Why not make this a member function of `Peer` to avoid having to peek at the internal lock?,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r736823554,736823554,src/net_processing.cpp
theuni,2021-10-26 18:48:30,"Afaics, all this needs is a bool for `peer.m_tx_relay != nullptr`, otherwise `Peer` is unused here. Maybe just pass the bool instead of requiring all of `Peer`?",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r736827240,736827240,src/net_processing.cpp
theuni,2021-10-26 18:50:24,"Likewise, this doesn't need all of `Peer`, only a `Peer::TxRelay`.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r736828470,736828470,src/net_processing.cpp
theuni,2021-10-26 18:59:13,"See comment above about changing the `PushNodeVersion` params, which would eliminate the need for the copies here.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r736834651,736834651,src/net_processing.cpp
jnewbery,2021-10-29 11:23:29,Oops. Fixed properly now.,https://github.com/bitcoin/bitcoin/pull/21160#discussion_r739150583,739150583,src/net_processing.cpp
jnewbery,2021-10-29 11:57:50,Done! (https://github.com/bitcoin/bitcoin/pull/21160#discussion_r739150583),https://github.com/bitcoin/bitcoin/pull/21160#discussion_r739171097,739171097,src/net_processing.cpp
jnewbery,2021-10-29 12:10:50,"That seems like a bad approach to me. There's all kinds of logic that happens inside the `version` and `verack` handling. Skipping over that by reaching into `PeerManager` and `CConnman` internals and updating individual fields means that the `CNode`, `CNodeState` and `Peer` objects are only partially initialized when you send in the fuzzed network messages.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r739178813,739178813,src/test/fuzz/util.cpp
MarcoFalke,2021-10-29 12:41:00,"There shouldn't be any fields that are left uninitialized or partially initialized.\n\nIf you don't like reaching into internals, the only alternative I see is sending the fields that are set here in p2p messages.",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r739198878,739198878,src/test/fuzz/util.cpp
jnewbery,2021-10-29 12:51:28,"> There shouldn't be any fields that are left uninitialized or partially initialized.\n\nHere's one example. `CNode.fClient` is set here:\n\nhttps://github.com/bitcoin/bitcoin/blob/baa9fc941cac76b35630da16d77fa2a8b0cc1755/src/net_processing.cpp#L2600\n\ndepending on the `nServices` field in the `version` message. `FillNode()` in fuzz/util.cpp will never set that field to true, even if `(!(nS",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r739206139,739206139,src/test/fuzz/util.cpp
MarcoFalke,2021-11-22 17:00:33,"Thanks, fixed in https://github.com/bitcoin/bitcoin/pull/23575",https://github.com/bitcoin/bitcoin/pull/21160#discussion_r754471117,754471117,src/test/fuzz/util.cpp
