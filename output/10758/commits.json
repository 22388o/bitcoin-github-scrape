[
  {
    "sha": "eda888e57352037ab2e60f6ef90098b3ce23a157",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGE4ODhlNTczNTIwMzdhYjJlNjBmNmVmOTAwOThiM2NlMjNhMTU3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-06T23:57:20Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-27T19:03:05Z"
      },
      "message": "Fix some LoadChainTip-related init-order bugs.\n\n* Move the writing of fTxIndex to LoadBlockIndex - this fixes a\n  bug introduced in d6af06d68aae985436cbc942f0d11078041d121b where\n  InitBlockIndex was writing to fTxIndex which had not yet been\n  checked (because LoadChainTip hadn't yet initialized the\n  chainActive, which would otherwise have resulted in\n  InitBlockIndex being a NOP), allowing you to modify -txindex\n  without reindex, potentially corrupting your chainstate!\n\n* Rename InitBlockIndex to LoadGenesisBlock, which is now a more\n  natural name for it. Also check mapBlockIndex instead of\n  chainActive, fixing a bug where we'd write the genesis block out\n  on every start.",
      "tree": {
        "sha": "d8e500283bc5ba0e68f2cd4c6a255e8e04ccfd20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8e500283bc5ba0e68f2cd4c6a255e8e04ccfd20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eda888e57352037ab2e60f6ef90098b3ce23a157",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda888e57352037ab2e60f6ef90098b3ce23a157",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eda888e57352037ab2e60f6ef90098b3ce23a157",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda888e57352037ab2e60f6ef90098b3ce23a157/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cfdda2503c995cdd563b1a2a29162ac298d173d"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 47,
      "deletions": 33
    },
    "files": [
      {
        "sha": "b1fe8e7d3c8d98e8d6ef0060ceb1631936b4f7b4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda888e57352037ab2e60f6ef90098b3ce23a157/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda888e57352037ab2e60f6ef90098b3ce23a157/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=eda888e57352037ab2e60f6ef90098b3ce23a157",
        "patch": "@@ -646,7 +646,7 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n         fReindex = false;\n         LogPrintf(\"Reindexing finished\\n\");\n         // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-        InitBlockIndex(chainparams);\n+        LoadGenesisBlock(chainparams);\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n@@ -1419,7 +1419,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n \n                 // Initialize the block index (no-op if non-empty database was already loaded)\n-                if (!InitBlockIndex(chainparams)) {\n+                if (!fReindex && !LoadGenesisBlock(chainparams)) {\n                     strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }"
      },
      {
        "sha": "8ad955e7a23de3fd34dafcff399c5769a464feb2",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda888e57352037ab2e60f6ef90098b3ce23a157/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda888e57352037ab2e60f6ef90098b3ce23a157/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=eda888e57352037ab2e60f6ef90098b3ce23a157",
        "patch": "@@ -72,7 +72,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n-        if (!InitBlockIndex(chainparams)) {\n+        if (!LoadGenesisBlock(chainparams)) {\n             throw std::runtime_error(\"InitBlockIndex failed.\");\n         }\n         {"
      },
      {
        "sha": "ebbdb7e651d10de0d263b0a36fb46fee2a9ad18a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 27,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda888e57352037ab2e60f6ef90098b3ce23a157/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda888e57352037ab2e60f6ef90098b3ce23a157/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=eda888e57352037ab2e60f6ef90098b3ce23a157",
        "patch": "@@ -3864,42 +3864,55 @@ void UnloadBlockIndex()\n bool LoadBlockIndex(const CChainParams& chainparams)\n {\n     // Load block index from databases\n-    if (!fReindex && !LoadBlockIndexDB(chainparams))\n-        return false;\n+    bool needs_init = fReindex;\n+    if (!fReindex) {\n+        bool ret = LoadBlockIndexDB(chainparams);\n+        if (!ret) return false;\n+        needs_init = mapBlockIndex.empty();\n+    }\n+\n+    if (needs_init) {\n+        // Everything here is for *new* reindex/DBs. Thus, though\n+        // LoadBlockIndexDB may have set fReindex if we shut down\n+        // mid-reindex previously, we don't check fReindex and\n+        // instead only check it prior to LoadBlockIndexDB to set\n+        // needs_init.\n+\n+        LogPrintf(\"Initializing databases...\\n\");\n+        // Use the provided setting for -txindex in the new database\n+        fTxIndex = GetBoolArg(\"-txindex\", DEFAULT_TXINDEX);\n+        pblocktree->WriteFlag(\"txindex\", fTxIndex);\n+    }\n     return true;\n }\n \n-bool InitBlockIndex(const CChainParams& chainparams)\n+bool LoadGenesisBlock(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n \n-    // Check whether we're already initialized\n-    if (chainActive.Genesis() != NULL)\n+    // Check whether we're already initialized by checking for genesis in\n+    // mapBlockIndex. Note that we can't use chainActive here, since it is\n+    // set based on the coins db, not the block index db, which is the only\n+    // thing loaded at this point.\n+    if (mapBlockIndex.count(chainparams.GenesisBlock().GetHash()))\n         return true;\n \n-    // Use the provided setting for -txindex in the new database\n-    fTxIndex = GetBoolArg(\"-txindex\", DEFAULT_TXINDEX);\n-    pblocktree->WriteFlag(\"txindex\", fTxIndex);\n-    LogPrintf(\"Initializing databases...\\n\");\n-\n     // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)\n-    if (!fReindex) {\n-        try {\n-            CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n-            // Start new block file\n-            unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n-            CDiskBlockPos blockPos;\n-            CValidationState state;\n-            if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n-                return error(\"LoadBlockIndex(): FindBlockPos failed\");\n-            if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n-                return error(\"LoadBlockIndex(): writing genesis block to disk failed\");\n-            CBlockIndex *pindex = AddToBlockIndex(block);\n-            if (!ReceivedBlockTransactions(block, state, pindex, blockPos, chainparams.GetConsensus()))\n-                return error(\"LoadBlockIndex(): genesis block not accepted\");\n-        } catch (const std::runtime_error& e) {\n-            return error(\"LoadBlockIndex(): failed to initialize block database: %s\", e.what());\n-        }\n+    try {\n+        CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n+        // Start new block file\n+        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+        CDiskBlockPos blockPos;\n+        CValidationState state;\n+        if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n+            return error(\"%s: FindBlockPos failed\", __func__);\n+        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n+            return error(\"%s: writing genesis block to disk failed\", __func__);\n+        CBlockIndex *pindex = AddToBlockIndex(block);\n+        if (!ReceivedBlockTransactions(block, state, pindex, blockPos, chainparams.GetConsensus()))\n+            return error(\"%s: genesis block not accepted\", __func__);\n+    } catch (const std::runtime_error& e) {\n+        return error(\"%s: failed to write genesis block: %s\", __func__, e.what());\n     }\n \n     return true;"
      },
      {
        "sha": "3ce5023f0acac4090437f884ecdf331aec32a8bb",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda888e57352037ab2e60f6ef90098b3ce23a157/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda888e57352037ab2e60f6ef90098b3ce23a157/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=eda888e57352037ab2e60f6ef90098b3ce23a157",
        "patch": "@@ -256,9 +256,10 @@ FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = NULL);\n-/** Initialize a new block tree database + block data on disk */\n-bool InitBlockIndex(const CChainParams& chainparams);\n-/** Load the block tree and coins database from disk */\n+/** Ensures we have a genesis block in the block tree, possibly writing one to disk. */\n+bool LoadGenesisBlock(const CChainParams& chainparams);\n+/** Load the block tree and coins database from disk,\n+ * initializing state if we're running with -reindex. */\n bool LoadBlockIndex(const CChainParams& chainparams);\n /** Update the chain tip based on database information. */\n void LoadChainTip(const CChainParams& chainparams);"
      }
    ]
  },
  {
    "sha": "b0f32497b873cd1eaf0be86f8e265355aa86174f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGYzMjQ5N2I4NzNjZDFlYWYwYmU4NmY4ZTI2NTM1NWFhODYxNzRm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T00:00:11Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-27T19:03:05Z"
      },
      "message": "More user-friendly error message if UTXO DB runs ahead of block DB\n\nThis gives LoadChainTip a return value - allowing it to indicate that\nthe UTXO DB ran ahead of the block DB. This just provides a nicer\nerror message instead of the previous mysterious\nassert(!setBlockIndexCandidates.empty()) error.\n\nThis also calls ActivateBestChain in case we just loaded the genesis\nblock in LoadChainTip, avoiding relying on the ActivateBestChain\nin ThreadImport before continuing init process.",
      "tree": {
        "sha": "4f9c82cd3d5f51e5236254cdc874279391e75034",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f9c82cd3d5f51e5236254cdc874279391e75034"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0f32497b873cd1eaf0be86f8e265355aa86174f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0f32497b873cd1eaf0be86f8e265355aa86174f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0f32497b873cd1eaf0be86f8e265355aa86174f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0f32497b873cd1eaf0be86f8e265355aa86174f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eda888e57352037ab2e60f6ef90098b3ce23a157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda888e57352037ab2e60f6ef90098b3ce23a157",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eda888e57352037ab2e60f6ef90098b3ce23a157"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 24,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8fec69c2b87f71aaa8188c53f1416d1d520a99d6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0f32497b873cd1eaf0be86f8e265355aa86174f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0f32497b873cd1eaf0be86f8e265355aa86174f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b0f32497b873cd1eaf0be86f8e265355aa86174f",
        "patch": "@@ -1442,7 +1442,15 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n                 pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n-                LoadChainTip(chainparams);\n+\n+                if (!fReindex && !fReindexChainState) {\n+                    // LoadChainTip sets chainActive based on pcoinsTip's best block\n+                    if (!LoadChainTip(chainparams)) {\n+                        strLoadError = _(\"Error initializing block database\");\n+                        break;\n+                    }\n+                    assert(chainActive.Tip() != NULL);\n+                }\n \n                 if (!fReindex && chainActive.Tip() != NULL) {\n                     uiInterface.InitMessage(_(\"Rewinding blocks...\"));"
      },
      {
        "sha": "91982ead90f305f1c134725ddc64cda0ff6ff2af",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0f32497b873cd1eaf0be86f8e265355aa86174f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0f32497b873cd1eaf0be86f8e265355aa86174f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b0f32497b873cd1eaf0be86f8e265355aa86174f",
        "patch": "@@ -3538,14 +3538,24 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     return true;\n }\n \n-void LoadChainTip(const CChainParams& chainparams)\n+bool LoadChainTip(const CChainParams& chainparams)\n {\n-    if (chainActive.Tip() && chainActive.Tip()->GetBlockHash() == pcoinsTip->GetBestBlock()) return;\n+    if (chainActive.Tip() && chainActive.Tip()->GetBlockHash() == pcoinsTip->GetBestBlock()) return true;\n+\n+    if (pcoinsTip->GetBestBlock().IsNull() && mapBlockIndex.size() == 1) {\n+        // In case we just added the genesis block, connect it now, so\n+        // that we always have a chainActive.Tip() when we return.\n+        LogPrintf(\"%s: Connecting genesis block...\\n\", __func__);\n+        CValidationState state;\n+        if (!ActivateBestChain(state, chainparams)) {\n+            return false;\n+        }\n+    }\n \n     // Load pointer to end of best chain\n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     if (it == mapBlockIndex.end())\n-        return;\n+        return false;\n     chainActive.SetTip(it->second);\n \n     PruneBlockIndexCandidates();\n@@ -3554,6 +3564,7 @@ void LoadChainTip(const CChainParams& chainparams)\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n         DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n         GuessVerificationProgress(chainparams.TxData(), chainActive.Tip()));\n+    return true;\n }\n \n CVerifyDB::CVerifyDB()"
      },
      {
        "sha": "b1d482cbfbd10705760f6123a9e795c6d456ab9f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0f32497b873cd1eaf0be86f8e265355aa86174f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0f32497b873cd1eaf0be86f8e265355aa86174f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b0f32497b873cd1eaf0be86f8e265355aa86174f",
        "patch": "@@ -262,7 +262,7 @@ bool LoadGenesisBlock(const CChainParams& chainparams);\n  * initializing state if we're running with -reindex. */\n bool LoadBlockIndex(const CChainParams& chainparams);\n /** Update the chain tip based on database information. */\n-void LoadChainTip(const CChainParams& chainparams);\n+bool LoadChainTip(const CChainParams& chainparams);\n /** Unload database information */\n void UnloadBlockIndex();\n /** Run an instance of the script checking thread */"
      }
    ]
  },
  {
    "sha": "ff3a21919d97f7500978b4160199336e4b50b36a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjNhMjE5MTlkOTdmNzUwMDk3OGI0MTYwMTk5MzM2ZTRiNTBiMzZh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T01:29:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-27T19:03:05Z"
      },
      "message": "Call RewindBlockIndex even if we're about to run -reindex-chainstate\n\nRewindBlockIndex works over both chainActive - disconnecting blocks\nfrom the tip that need witness verification - and mapBlockIndex -\nrequiring redownload of blocks missing witness data.\n\nIt should never have been the case that the second half is skipped\nif we're about to run -reindex-chainstate.",
      "tree": {
        "sha": "db20d70619278213b27694968fd6afd693334f93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db20d70619278213b27694968fd6afd693334f93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff3a21919d97f7500978b4160199336e4b50b36a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff3a21919d97f7500978b4160199336e4b50b36a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff3a21919d97f7500978b4160199336e4b50b36a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff3a21919d97f7500978b4160199336e4b50b36a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0f32497b873cd1eaf0be86f8e265355aa86174f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0f32497b873cd1eaf0be86f8e265355aa86174f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0f32497b873cd1eaf0be86f8e265355aa86174f"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 17,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2ea778a5b18a89453dd088917a100a5557eb5e60",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff3a21919d97f7500978b4160199336e4b50b36a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff3a21919d97f7500978b4160199336e4b50b36a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ff3a21919d97f7500978b4160199336e4b50b36a",
        "patch": "@@ -1452,7 +1452,10 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     assert(chainActive.Tip() != NULL);\n                 }\n \n-                if (!fReindex && chainActive.Tip() != NULL) {\n+                if (!fReindex) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on chainActive, and drops block data in\n+                    // mapBlockIndex based on lack of available witness data.\n                     uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n                     if (!RewindBlockIndex(chainparams)) {\n                         strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");"
      },
      {
        "sha": "7ec77406ec1a3c8fdf7094fc5f3abacadb8c7967",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff3a21919d97f7500978b4160199336e4b50b36a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff3a21919d97f7500978b4160199336e4b50b36a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ff3a21919d97f7500978b4160199336e4b50b36a",
        "patch": "@@ -3763,6 +3763,8 @@ bool RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);\n \n+    // Note that during -reindex-chainstate we are called with an empty chainActive!\n+\n     int nHeight = 1;\n     while (nHeight <= chainActive.Height()) {\n         if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n@@ -3832,12 +3834,19 @@ bool RewindBlockIndex(const CChainParams& params)\n         }\n     }\n \n-    PruneBlockIndexCandidates();\n+    if (chainActive.Tip() != NULL) {\n+        // We can't prune block index candidates based on our tip if we have\n+        // no tip due to chainActive being empty!\n+        PruneBlockIndexCandidates();\n \n-    CheckBlockIndex(params.GetConsensus());\n+        CheckBlockIndex(params.GetConsensus());\n \n-    if (!FlushStateToDisk(params, state, FLUSH_STATE_ALWAYS)) {\n-        return false;\n+        // FlushStateToDisk can possibly read chainActive. Be conservative\n+        // and skip it here, we're about to -reindex-chainstate anyway, so\n+        // it'll get called a bunch real soon.\n+        if (!FlushStateToDisk(params, state, FLUSH_STATE_ALWAYS)) {\n+            return false;\n+        }\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "138569722cae09bb9e3bc31bbae4b1886b904bb5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzg1Njk3MjJjYWUwOWJiOWUzYmMzMWJiYWU0YjE4ODZiOTA0YmI1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T01:32:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-27T19:03:05Z"
      },
      "message": "Order chainstate init more logically.\n\n* Order chainstate init more logically - first all of the\n  blocktree-related loading, then coinsdb, then\n  pcoinsTip/chainActive. Only create objects as needed.\n\n* More clearly document exactly what is and isn't called in\n  -reindex and -reindex-chainstate both with comments noting\n  calls as no-ops and by adding if guards.\n\n* Move LoadGenesisBlock further down in init. This is a more logical\n  location for it, as it is after all of the blockindex-related\n  loading and checking, but before any of the UTXO-related loading\n  and checking.\n\n* Move all of the VerifyDB()-related stuff into a -reindex +\n  -reindex-chainstate if guard. It couldn't do anything useful\n  as chainActive.Tip() would be null at this point anyway.",
      "tree": {
        "sha": "dd23401f3ac15c8752de7a1a06d8f2b0cdb4c608",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd23401f3ac15c8752de7a1a06d8f2b0cdb4c608"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/138569722cae09bb9e3bc31bbae4b1886b904bb5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/138569722cae09bb9e3bc31bbae4b1886b904bb5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/138569722cae09bb9e3bc31bbae4b1886b904bb5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/138569722cae09bb9e3bc31bbae4b1886b904bb5/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff3a21919d97f7500978b4160199336e4b50b36a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff3a21919d97f7500978b4160199336e4b50b36a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff3a21919d97f7500978b4160199336e4b50b36a"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 49,
      "deletions": 33
    },
    "files": [
      {
        "sha": "5b7379e16e9221b047027d3f2a05e2531dbffc91",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 33,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/138569722cae09bb9e3bc31bbae4b1886b904bb5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/138569722cae09bb9e3bc31bbae4b1886b904bb5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=138569722cae09bb9e3bc31bbae4b1886b904bb5",
        "patch": "@@ -1391,23 +1391,19 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 delete pblocktree;\n \n                 pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n-                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex || fReindexChainState);\n-                pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n \n                 if (fReindex) {\n                     pblocktree->WriteReindexing(true);\n                     //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n                     if (fPruneMode)\n                         CleanupBlockRevFiles();\n-                } else {\n-                    // If necessary, upgrade from older database format.\n-                    if (!pcoinsdbview->Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        break;\n-                    }\n                 }\n+\n                 if (fRequestShutdown) break;\n \n+                // LoadBlockIndex will load fTxIndex from the db, or set it if\n+                // we're reindexing. It will also load fHavePruned if we've\n+                // ever removed a block file from disk.\n                 if (!LoadBlockIndex(chainparams)) {\n                     strLoadError = _(\"Error loading block database\");\n                     break;\n@@ -1418,12 +1414,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 if (!mapBlockIndex.empty() && mapBlockIndex.count(chainparams.GetConsensus().hashGenesisBlock) == 0)\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n \n-                // Initialize the block index (no-op if non-empty database was already loaded)\n-                if (!fReindex && !LoadGenesisBlock(chainparams)) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n                 // Check for changed -txindex state\n                 if (fTxIndex != GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n                     strLoadError = _(\"You need to rebuild the database using -reindex-chainstate to change -txindex\");\n@@ -1437,10 +1427,34 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n+                // At this point blocktree args are consistent with what's on disk.\n+                // If we're not mid-reindex (based on disk + args), add a genesis block on disk.\n+                // This is called again in ThreadImport in the reindex completes.\n+                if (!fReindex && !LoadGenesisBlock(chainparams)) {\n+                    strLoadError = _(\"Error initializing block database\");\n+                    break;\n+                }\n+\n+                // At this point we're either in reindex or we've loaded a useful\n+                // block tree into mapBlockIndex!\n+\n+                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex || fReindexChainState);\n+                pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n+\n+                // If necessary, upgrade from older database format.\n+                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                if (!pcoinsdbview->Upgrade()) {\n+                    strLoadError = _(\"Error upgrading chainstate database\");\n+                    break;\n+                }\n+\n+                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n                 if (!ReplayBlocks(chainparams, pcoinsdbview)) {\n                     strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n                     break;\n                 }\n+\n+                // The on-disk coinsdb is now in a good state, create the cache\n                 pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n \n                 if (!fReindex && !fReindexChainState) {\n@@ -1463,28 +1477,30 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n-                uiInterface.InitMessage(_(\"Verifying blocks...\"));\n-                if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                    LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\",\n-                        MIN_BLOCKS_TO_KEEP);\n-                }\n+                if (!fReindex && !fReindexChainState) {\n+                    uiInterface.InitMessage(_(\"Verifying blocks...\"));\n+                    if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\",\n+                            MIN_BLOCKS_TO_KEEP);\n+                    }\n \n-                {\n-                    LOCK(cs_main);\n-                    CBlockIndex* tip = chainActive.Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n-                        break;\n+                    {\n+                        LOCK(cs_main);\n+                        CBlockIndex* tip = chainActive.Tip();\n+                        RPCNotifyBlockChange(true, tip);\n+                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                    \"This may be due to your computer's date and time being set incorrectly. \"\n+                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                            break;\n+                        }\n                     }\n-                }\n \n-                if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                              GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                    strLoadError = _(\"Corrupted block database detected\");\n-                    break;\n+                    if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                  GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n+                        strLoadError = _(\"Corrupted block database detected\");\n+                        break;\n+                    }\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());"
      }
    ]
  },
  {
    "sha": "c0025d0a92e438155901438580e4d2ebb376b951",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDAyNWQwYTkyZTQzODE1NTkwMTQzODU4MGU0ZDJlYmIzNzZiOTUx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-16T00:03:11Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-27T19:03:05Z"
      },
      "message": "Fix segfault when shutting down before fully loading\n\nThis was introduced by 3192975f1d177aa9f0bbd823c6387cfbfa943610.\nIt can be triggered easily when canceling DB upgrade from\npre-per-utxo.",
      "tree": {
        "sha": "8f81601c56c9a80b6a1c39ebbf77939bc116645c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f81601c56c9a80b6a1c39ebbf77939bc116645c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0025d0a92e438155901438580e4d2ebb376b951",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0025d0a92e438155901438580e4d2ebb376b951",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0025d0a92e438155901438580e4d2ebb376b951",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0025d0a92e438155901438580e4d2ebb376b951/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "138569722cae09bb9e3bc31bbae4b1886b904bb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/138569722cae09bb9e3bc31bbae4b1886b904bb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/138569722cae09bb9e3bc31bbae4b1886b904bb5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2ca3ec17ac718aef45d0daad780b50eb2e026f17",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0025d0a92e438155901438580e4d2ebb376b951/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0025d0a92e438155901438580e4d2ebb376b951/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c0025d0a92e438155901438580e4d2ebb376b951",
        "patch": "@@ -216,7 +216,9 @@ void Shutdown()\n     }\n \n     // FlushStateToDisk generates a SetBestChain callback, which we should avoid missing\n-    FlushStateToDisk();\n+    if (pcoinsTip != nullptr) {\n+        FlushStateToDisk();\n+    }\n \n     // After there are no more peers/RPC left to give us new data which may generate\n     // CValidationInterface callbacks, flush them..."
      }
    ]
  }
]