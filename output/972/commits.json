[
  {
    "sha": "4538e45c46d3829a21aed7685e6fbac7e8aafad3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTM4ZTQ1YzQ2ZDM4MjlhMjFhZWQ3Njg1ZTZmYmFjN2U4YWFmYWQz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-03-21T22:08:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-03-22T02:19:23Z"
      },
      "message": "Add -checklevel and improve -checkblocks\n\n-checkblocks now takes a numeric argument: the number of blocks that must\nbe verified at the end of the chain. Default is 2500, and 0 means all\nblocks.\n\n-checklevel specifies how thorough the verification must be:\n0: only check whether the block exists on disk\n1: verify block validity (default)\n2: verify transaction index validity\n3: check transaction hashes\n4: check whether spent txouts were spent within the main chain\n5: check whether all prevouts are marked spent\n6: check whether spent txouts were spent by a valid transaction that consumes them",
      "tree": {
        "sha": "bdf432390f1572463cb71332ad9ea6a2ddd80229",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bdf432390f1572463cb71332ad9ea6a2ddd80229"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4538e45c46d3829a21aed7685e6fbac7e8aafad3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4538e45c46d3829a21aed7685e6fbac7e8aafad3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4538e45c46d3829a21aed7685e6fbac7e8aafad3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4538e45c46d3829a21aed7685e6fbac7e8aafad3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "100da7367767e7fa360f48f07b7a20e9374fda84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/100da7367767e7fa360f48f07b7a20e9374fda84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/100da7367767e7fa360f48f07b7a20e9374fda84"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 100,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0ee518504bbcefc97694e45a3a84d1e1903a08f8",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 97,
        "deletions": 2,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4538e45c46d3829a21aed7685e6fbac7e8aafad3/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4538e45c46d3829a21aed7685e6fbac7e8aafad3/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=4538e45c46d3829a21aed7685e6fbac7e8aafad3",
        "patch": "@@ -580,19 +580,114 @@ bool CTxDB::LoadBlockIndex()\n     ReadBestInvalidWork(bnBestInvalidWork);\n \n     // Verify blocks in the best chain\n+    int nCheckLevel = GetArg(\"-checklevel\", 1);\n+    int nCheckDepth = GetArg( \"-checkblocks\", 2500);\n+    if (nCheckDepth == 0)\n+        nCheckDepth = 1000000000; // suffices until the year 19000\n+    if (nCheckDepth > nBestHeight)\n+        nCheckDepth = nBestHeight;\n+    printf(\"Verifying last %i blocks at level %i\\n\", nCheckDepth, nCheckLevel);\n     CBlockIndex* pindexFork = NULL;\n+    map<pair<unsigned int, unsigned int>, CBlockIndex*> mapBlockPos;\n     for (CBlockIndex* pindex = pindexBest; pindex && pindex->pprev; pindex = pindex->pprev)\n     {\n-        if (pindex->nHeight < nBestHeight-2500 && !mapArgs.count(\"-checkblocks\"))\n+        if (pindex->nHeight < nBestHeight-nCheckDepth)\n             break;\n         CBlock block;\n         if (!block.ReadFromDisk(pindex))\n             return error(\"LoadBlockIndex() : block.ReadFromDisk failed\");\n-        if (!block.CheckBlock())\n+        // check level 1: verify block validity\n+        if (nCheckLevel>0 && !block.CheckBlock())\n         {\n             printf(\"LoadBlockIndex() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n             pindexFork = pindex->pprev;\n         }\n+        // check level 2: verify transaction index validity\n+        if (nCheckLevel>1)\n+        {\n+            pair<unsigned int, unsigned int> pos = make_pair(pindex->nFile, pindex->nBlockPos);\n+            mapBlockPos[pos] = pindex;\n+            BOOST_FOREACH(const CTransaction &tx, block.vtx)\n+            {\n+                uint256 hashTx = tx.GetHash();\n+                CTxIndex txindex;\n+                if (ReadTxIndex(hashTx, txindex))\n+                {\n+                    // check level 3: checker transaction hashes\n+                    if (nCheckLevel>2 || pindex->nFile != txindex.pos.nFile || pindex->nBlockPos != txindex.pos.nBlockPos)\n+                    {\n+                        // either an error or a duplicate transaction\n+                        CTransaction txFound;\n+                        if (!txFound.ReadFromDisk(txindex.pos))\n+                        {\n+                            printf(\"LoadBlockIndex() : *** cannot read mislocated transaction %s\\n\", hashTx.ToString().c_str());\n+                            pindexFork = pindex->pprev;\n+                        }\n+                        else\n+                            if (txFound.GetHash() != hashTx) // not a duplicate tx\n+                            {\n+                                printf(\"LoadBlockIndex(): *** invalid tx position for %s\\n\", hashTx.ToString().c_str());\n+                                pindexFork = pindex->pprev;\n+                            }\n+                    }\n+                    // check level 4: check whether spent txouts were spent within the main chain\n+                    int nOutput = 0;\n+                    if (nCheckLevel>3)\n+                        BOOST_FOREACH(const CDiskTxPos &txpos, txindex.vSpent)\n+                        {\n+                            if (!txpos.IsNull())\n+                            {\n+                                pair<unsigned int, unsigned int> posFind = make_pair(txpos.nFile, txpos.nBlockPos);\n+                                if (!mapBlockPos.count(posFind))\n+                                {\n+                                    printf(\"LoadBlockIndex(): *** found bad spend at %d, hashBlock=%s, hashTx=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str(), hashTx.ToString().c_str());\n+                                    pindexFork = pindex->pprev;\n+                                }\n+                                // check level 6: check whether spent txouts were spent by a valid transaction that consume them\n+                                if (nCheckLevel>5)\n+                                {\n+                                    CTransaction txSpend;\n+                                    if (!txSpend.ReadFromDisk(txpos))\n+                                    {\n+                                        printf(\"LoadBlockIndex(): *** cannot read spending transaction of %s:%i from disk\\n\", hashTx.ToString().c_str(), nOutput);\n+                                        pindexFork = pindex->pprev;\n+                                    }\n+                                    else if (!txSpend.CheckTransaction())\n+                                    {\n+                                        printf(\"LoadBlockIndex(): *** spending transaction of %s:%i is invalid\\n\", hashTx.ToString().c_str(), nOutput);\n+                                        pindexFork = pindex->pprev;\n+                                    }\n+                                    else\n+                                    {\n+                                        bool fFound = false;\n+                                        BOOST_FOREACH(const CTxIn &txin, txSpend.vin)\n+                                            if (txin.prevout.hash == hashTx && txin.prevout.n == nOutput)\n+                                                fFound = true;\n+                                        if (!fFound)\n+                                        {\n+                                            printf(\"LoadBlockIndex(): *** spending transaction of %s:%i does not spend it\\n\", hashTx.ToString().c_str(), nOutput);\n+                                            pindexFork = pindex->pprev;\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                            nOutput++;\n+                        }\n+                }\n+                // check level 5: check whether all prevouts are marked spent\n+                if (nCheckLevel>4)\n+                     BOOST_FOREACH(const CTxIn &txin, tx.vin)\n+                     {\n+                          CTxIndex txindex;\n+                          if (ReadTxIndex(txin.prevout.hash, txindex))\n+                              if (txindex.vSpent.size()-1 < txin.prevout.n || txindex.vSpent[txin.prevout.n].IsNull())\n+                              {\n+                                  printf(\"LoadBlockIndex(): *** found unspent prevout %s:%i in %s\\n\", txin.prevout.hash.ToString().c_str(), txin.prevout.n, hashTx.ToString().c_str());\n+                                  pindexFork = pindex->pprev;\n+                              }\n+                     }\n+            }\n+        }\n     }\n     if (pindexFork)\n     {"
      },
      {
        "sha": "647bf4447de28d154c672658e598ab07d63e7ea7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4538e45c46d3829a21aed7685e6fbac7e8aafad3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4538e45c46d3829a21aed7685e6fbac7e8aafad3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4538e45c46d3829a21aed7685e6fbac7e8aafad3",
        "patch": "@@ -222,7 +222,9 @@ bool AppInit2(int argc, char* argv[])\n             \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\" +\n             \"  -blocknotify=<cmd> \"     + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\" +\n             \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n> (default: 100)\") + \"\\n\" +\n-            \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\";\n+            \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\" +\n+            \"  -checkblocks=<n> \\t\\t  \" + _(\"How many blocks to check at startup (default: 2500, 0 = all)\") + \"\\n\" +\n+            \"  -checklevel=<n>  \\t\\t  \" + _(\"How thorough the block verification is (0-6, default: 1)\") + \"\\n\";\n \n #ifdef USE_SSL\n         strUsage += string() +"
      }
    ]
  }
]