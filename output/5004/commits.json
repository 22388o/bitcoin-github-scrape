[
  {
    "sha": "9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGY5Y2Y1YTlmNWY1NjI2MWIwYjIyNmRlYzYyNDlmOWRmYmVmZWQ2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-07T00:22:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-08T22:42:29Z"
      },
      "message": "Make SCRIPT_VERIFY_STRICTENC compatible with BIP62\n\n* Delete canonical_tests.cpp, and move the tests to script_tests.cpp.\n* Split off SCRIPT_VERIFY_DERSIG from SCRIPT_VERIFY_STRICTENC (the BIP62 part of it).\n* Change signature STRICTENC/DERSIG semantics to fail the script entirely rather than the CHECKSIG result (softfork safety, and BIP62 requirement).\n* Add many autogenerated tests for several odd cases.\n* Mention specific BIP62 rules in the script verification flags.",
      "tree": {
        "sha": "afb1a13bbabe88337c1f7ebe7acc86cea4286535",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afb1a13bbabe88337c1f7ebe7acc86cea4286535"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4a42334d447cad48fb3996cad0fd5c945b75571",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4a42334d447cad48fb3996cad0fd5c945b75571",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4a42334d447cad48fb3996cad0fd5c945b75571"
      }
    ],
    "stats": {
      "total": 398,
      "additions": 234,
      "deletions": 164
    },
    "files": [
      {
        "sha": "b20e226c3dd862e39aebbee4520687153b1b37b8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -40,7 +40,6 @@ BITCOIN_TESTS =\\\n   test/base58_tests.cpp \\\n   test/base64_tests.cpp \\\n   test/bloom_tests.cpp \\\n-  test/canonical_tests.cpp \\\n   test/checkblock_tests.cpp \\\n   test/Checkpoints_tests.cpp \\\n   test/compress_tests.cpp \\"
      },
      {
        "sha": "ae66217b7ca0d6a9b6b821eb3b7e5b0d8891d5a5",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 21,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -52,10 +52,7 @@ static inline void popstack(vector<valtype>& stack)\n     stack.pop_back();\n }\n \n-bool IsCanonicalPubKey(const valtype &vchPubKey, unsigned int flags) {\n-    if (!(flags & SCRIPT_VERIFY_STRICTENC))\n-        return true;\n-\n+bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n     if (vchPubKey.size() < 33)\n         return error(\"Non-canonical public key: too short\");\n     if (vchPubKey[0] == 0x04) {\n@@ -70,10 +67,7 @@ bool IsCanonicalPubKey(const valtype &vchPubKey, unsigned int flags) {\n     return true;\n }\n \n-bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n-    if (!(flags & SCRIPT_VERIFY_STRICTENC))\n-        return true;\n-\n+bool static IsDERSignature(const valtype &vchSig) {\n     // See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n     // A canonical signature exists of: <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n     // Where R and S are not negative (their first byte has its highest bit not set), and not\n@@ -83,9 +77,6 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n         return error(\"Non-canonical signature: too short\");\n     if (vchSig.size() > 73)\n         return error(\"Non-canonical signature: too long\");\n-    unsigned char nHashType = vchSig[vchSig.size() - 1] & (~(SIGHASH_ANYONECANPAY));\n-    if (nHashType < SIGHASH_ALL || nHashType > SIGHASH_SINGLE)\n-        return error(\"Non-canonical signature: unknown hashtype byte\");\n     if (vchSig[0] != 0x30)\n         return error(\"Non-canonical signature: wrong type\");\n     if (vchSig[1] != vchSig.size()-3)\n@@ -117,17 +108,54 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     if (nLenS > 1 && (S[0] == 0x00) && !(S[1] & 0x80))\n         return error(\"Non-canonical signature: S value excessively padded\");\n \n-    if (flags & SCRIPT_VERIFY_LOW_S) {\n-        // If the S value is above the order of the curve divided by two, its\n-        // complement modulo the order could have been used instead, which is\n-        // one byte shorter when encoded correctly.\n-        if (!CKey::CheckSignatureElement(S, nLenS, true))\n-            return error(\"Non-canonical signature: S value is unnecessarily high\");\n+    return true;\n+}\n+\n+bool static IsLowDERSignature(const valtype &vchSig) {\n+    if (!IsDERSignature(vchSig)) {\n+        return false;\n     }\n+    unsigned int nLenR = vchSig[3];\n+    unsigned int nLenS = vchSig[5+nLenR];\n+    const unsigned char *S = &vchSig[6+nLenR];\n+    // If the S value is above the order of the curve divided by two, its\n+    // complement modulo the order could have been used instead, which is\n+    // one byte shorter when encoded correctly.\n+    if (!CKey::CheckSignatureElement(S, nLenS, true))\n+        return error(\"Non-canonical signature: S value is unnecessarily high\");\n \n     return true;\n }\n \n+bool static IsDefinedHashtypeSignature(const valtype &vchSig) {\n+    if (vchSig.size() == 0) {\n+        return false;\n+    }\n+    unsigned char nHashType = vchSig[vchSig.size() - 1] & (~(SIGHASH_ANYONECANPAY));\n+    if (nHashType < SIGHASH_ALL || nHashType > SIGHASH_SINGLE)\n+        return error(\"Non-canonical signature: unknown hashtype byte\");\n+\n+    return true;\n+}\n+\n+bool static CheckSignatureEncoding(const valtype &vchSig, unsigned int flags) {\n+    if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsDERSignature(vchSig)) {\n+        return false;\n+    } else if ((flags & SCRIPT_VERIFY_LOW_S) != 0 && !IsLowDERSignature(vchSig)) {\n+        return false;\n+    } else if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsDefinedHashtypeSignature(vchSig)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool static CheckPubKeyEncoding(const valtype &vchSig, unsigned int flags) {\n+    if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsCompressedOrUncompressedPubKey(vchSig)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker)\n {\n     CScript::const_iterator pc = script.begin();\n@@ -670,8 +698,11 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     // Drop the signature, since there's no way for a signature to sign itself\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n-                    bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        checker.CheckSig(vchSig, vchPubKey, scriptCode);\n+                    if (!CheckSignatureEncoding(vchSig, flags)) {\n+                        return false;\n+                    }\n+\n+                    bool fSuccess = CheckPubKeyEncoding(vchPubKey, flags) && checker.CheckSig(vchSig, vchPubKey, scriptCode);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -730,9 +761,12 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         valtype& vchSig    = stacktop(-isig);\n                         valtype& vchPubKey = stacktop(-ikey);\n \n+                        if (!CheckSignatureEncoding(vchSig, flags)) {\n+                            return false;\n+                        }\n+\n                         // Check signature\n-                        bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            checker.CheckSig(vchSig, vchPubKey, scriptCode);\n+                        bool fOk = CheckPubKeyEncoding(vchPubKey, flags) && checker.CheckSig(vchSig, vchPubKey, scriptCode);\n \n                         if (fOk) {\n                             isig++;"
      },
      {
        "sha": "de5ce2ced1a3450158299e9701ea538925bf66d8",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -28,14 +28,25 @@ enum\n enum\n {\n     SCRIPT_VERIFY_NONE      = 0,\n-    SCRIPT_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n-    SCRIPT_VERIFY_STRICTENC = (1U << 1), // enforce strict conformance to DER and SEC2 for signatures and pubkeys\n-    SCRIPT_VERIFY_LOW_S     = (1U << 2), // enforce low S values (<n/2) in signatures (depends on STRICTENC)\n-    SCRIPT_VERIFY_NULLDUMMY = (1U << 3), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n-};\n \n-bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int flags);\n-bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int flags);\n+    // Evaluate P2SH subscripts (softfork safe, BIP16).\n+    SCRIPT_VERIFY_P2SH      = (1U << 0),\n+\n+    // Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure.\n+    // Passing a pubkey that is not (0x04 + 64 bytes) or (0x02 or 0x03 + 32 bytes) to checksig causes that pubkey to be\n+    // skipped (not softfork safe: this flag can widen the validity of OP_CHECKSIG OP_NOT).\n+    SCRIPT_VERIFY_STRICTENC = (1U << 1),\n+\n+    // Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP62 rule 1)\n+    SCRIPT_VERIFY_DERSIG    = (1U << 2),\n+\n+    // Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure\n+    // (softfork safe, BIP62 rule 5).\n+    SCRIPT_VERIFY_LOW_S     = (1U << 3),\n+\n+    // verify dummy stack item consumed by CHECKMULTISIG is of zero-length (softfork safe, BIP62 rule 7).\n+    SCRIPT_VERIFY_NULLDUMMY = (1U << 4),\n+};\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n "
      },
      {
        "sha": "a17099de72752307ddfe015f985abaf9221c1bb3",
        "filename": "src/test/canonical_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 113,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/canonical_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/canonical_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/canonical_tests.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -1,113 +0,0 @@\n-// Copyright (c) 2012-2013 The Bitcoin Core developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-//\n-// Unit tests for canonical signatures\n-//\n-\n-#include \"data/sig_noncanonical.json.h\"\n-#include \"data/sig_canonical.json.h\"\n-#include \"key.h\"\n-#include \"random.h\"\n-#include \"script/interpreter.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-\n-#include <boost/foreach.hpp>\n-#include <boost/test/unit_test.hpp>\n-#include \"json/json_spirit_writer_template.h\"\n-#include <openssl/ecdsa.h>\n-\n-using namespace std;\n-using namespace json_spirit;\n-\n-// In script_tests.cpp\n-extern Array read_json(const std::string& jsondata);\n-\n-BOOST_AUTO_TEST_SUITE(canonical_tests)\n-\n-// OpenSSL-based test for canonical signature (without test for hashtype byte)\n-bool static IsCanonicalSignature_OpenSSL_inner(const std::vector<unsigned char>& vchSig)\n-{\n-    if (vchSig.size() == 0)\n-        return false;\n-    const unsigned char *input = &vchSig[0];\n-    ECDSA_SIG *psig = NULL;\n-    d2i_ECDSA_SIG(&psig, &input, vchSig.size());\n-    if (psig == NULL)\n-        return false;\n-    unsigned char buf[256];\n-    unsigned char *pbuf = buf;\n-    unsigned int nLen = i2d_ECDSA_SIG(psig, NULL);\n-    if (nLen != vchSig.size()) {\n-        ECDSA_SIG_free(psig);\n-        return false;\n-    }\n-    nLen = i2d_ECDSA_SIG(psig, &pbuf);\n-    ECDSA_SIG_free(psig);\n-    return (memcmp(&vchSig[0], &buf[0], nLen) == 0);\n-}\n-\n-// OpenSSL-based test for canonical signature\n-bool static IsCanonicalSignature_OpenSSL(const std::vector<unsigned char> &vchSignature) {\n-    if (vchSignature.size() < 1)\n-        return false;\n-    if (vchSignature.size() > 127)\n-        return false;\n-    if (vchSignature[vchSignature.size() - 1] & 0x7C)\n-        return false;\n-\n-    std::vector<unsigned char> vchSig(vchSignature);\n-    vchSig.pop_back();\n-    if (!IsCanonicalSignature_OpenSSL_inner(vchSig))\n-        return false;\n-    return true;\n-}\n-\n-BOOST_AUTO_TEST_CASE(script_canon)\n-{\n-    Array tests = read_json(std::string(json_tests::sig_canonical, json_tests::sig_canonical + sizeof(json_tests::sig_canonical)));\n-\n-    BOOST_FOREACH(Value &tv, tests) {\n-        string test = tv.get_str();\n-        if (IsHex(test)) {\n-            std::vector<unsigned char> sig = ParseHex(test);\n-            BOOST_CHECK_MESSAGE(IsCanonicalSignature(sig, SCRIPT_VERIFY_STRICTENC), test);\n-            BOOST_CHECK_MESSAGE(IsCanonicalSignature_OpenSSL(sig), test);\n-        }\n-    }\n-}\n-\n-BOOST_AUTO_TEST_CASE(script_noncanon)\n-{\n-    Array tests = read_json(std::string(json_tests::sig_noncanonical, json_tests::sig_noncanonical + sizeof(json_tests::sig_noncanonical)));\n-\n-    BOOST_FOREACH(Value &tv, tests) {\n-        string test = tv.get_str();\n-        if (IsHex(test)) {\n-            std::vector<unsigned char> sig = ParseHex(test);\n-            BOOST_CHECK_MESSAGE(!IsCanonicalSignature(sig, SCRIPT_VERIFY_STRICTENC), test);\n-            BOOST_CHECK_MESSAGE(!IsCanonicalSignature_OpenSSL(sig), test);\n-        }\n-    }\n-}\n-\n-BOOST_AUTO_TEST_CASE(script_signstrict)\n-{\n-    for (int i=0; i<100; i++) {\n-        CKey key;\n-        key.MakeNewKey(i & 1);\n-        std::vector<unsigned char> sig;\n-        uint256 hash = GetRandHash();\n-\n-        BOOST_CHECK(key.Sign(hash, sig)); // Generate a random signature.\n-        BOOST_CHECK(key.GetPubKey().Verify(hash, sig)); // Check it.\n-        sig.push_back(0x01); // Append a sighash type.\n-\n-        BOOST_CHECK(IsCanonicalSignature(sig, SCRIPT_VERIFY_STRICTENC | SCRIPT_VERIFY_LOW_S));\n-        BOOST_CHECK(IsCanonicalSignature_OpenSSL(sig));\n-    }\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "b6447cb2213f06f12c2d411e35c03a1c6ee5fa46",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -444,18 +444,66 @@ nSequences are max.\n     \"STRICTENC\",\n     \"P2PK with too little R padding\"\n ],\n+[\n+    \"0x47 0x30440220001d0f82c127470cb38316c96b1719b33382353687a1146a776dee8259606905022062cd1fc8eacef819d68f0f41cc9ae9fdc2e29b70c3c7ad2c6c18f39b4e35c42701\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"P2PK NOT with bad sig with too much R padding\"\n+],\n+[\n+    \"0x47 0x30440220005d727e2a82d6e8a98a6da6fbc281325644d1a40455e386fdb17883a8e6bc4d02202d15cca42ce136047a980d288e60c679d7e84cce18c3ceffb6bc81b9e9ba517801\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with too much R padding but no DERSIG\"\n+],\n+[\n+    \"0x47 0x30440220006e8bc4f82032b12bd594847c16d8b2986de734aa3b0528bd89d664d41e6d1c02200cfd582694891bcfa2e630e899bda257486eba00a007222fae71144dba07dc2901\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"P2PK NOT with too much R padding\"\n+],\n [\n     \"0x48 0x304502206c43e065c8a8db3bbe69015afb86a51fb2fc8870defd41d436da2a197d9d6c12022100fcec35816ee2d84ec271ad159fcabf5dd712157051169e48ac328a7818cdb51e01\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"LOW_S,STRICTENC\",\n     \"P2PK with high S\"\n ],\n+[\n+    \"0x47 0x304402203aab50cd7c30cc1e1475dee615b295bcee6ccf8aa8a7f6cda6b696c70d79cbb40220558e43fe7596c31146e2d077698d5a9c38351d8ba567549a2ae43ca97231c39501\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with hybrid pubkey\"\n+],\n+[\n+    \"0x47 0x304402205745e8f846110c185ee1185c01843a108588b81463d2c34d4a3f2445529f12fe02206ee6a2657bbc4e2bb74bfc44c3a5c4f410ed6356ca68982465de6ca807c807c201\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with hybrid pubkey but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x304402201f82b99a813c9c48c8dee8d2c43b8f637b72353fe9bdcc084537bc17e2ab770402200c43b96a5f7e115f0114eabda32e068145965cb6c7b5ef64833bb4fcf9fc1b3b05\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with undefined hashtype\"\n+],\n+[\n+    \"0x47 0x30440220166848cd5b82a32b5944d90de3c35249354b43773c2ece1844ee8d1103e2f6c602203b6b046da4243c77adef80ada9201b27bbfdf7f9d5428f40434b060432afd62005\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"P2PK NOT with invalid sig and undefined hashtype\"\n+],\n [\n     \"0x01 0x01 0x47 0x304402200e48ba1cf4d7182db94ffb57bd72ea31b5545dc0d1c512e665779b4fb2badc52022054b8388dfc074c708a75b62359b7be46402751ee40c0a111aef38a837b6ed09801 0x47 0x304402201c9820f59c49107bb30e6175cfc9ec95f897b03beb628b4bc854d2b80392aa0602200235d986ae418bcd111b8814f4c26a0ab5f475fb542a44884fc14912a97a252301 0x47 0x304402204cd7894c6f10a871f5b0c1f9c13228f8cdd4050248f0d0f498ee86be69ee3080022051bd2932c7d585eb600c7194235c74da820935f0d67972fd9545673aa1fd023301\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"NULLDUMMY\",\n     \"3-of-3 with nonzero dummy\"\n ],\n+[\n+    \"0x01 0x01 0x47 0x304402201847fc3b8f7597768e7f543c58da1fca6e8e35eb28979431e6b637572ce6eaa4022048dd58608e040841d0bf52a70cfb70e1a9c8d2826fad068f4e9d2bf5c87766a501 0x47 0x30440220711311a72516affed73363763983d05c3d6a06a2eadf5d76b90b4354162ba94302204841a69e5955a7dc8e4ab3105fd0c86040c1dac6016297a51ddbf5079c28756801 0x47 0x30440220267e331a378191e7282fd10d61c97bf74bc97c233c5833d677936424ac08dee502201eee83d88b91988e1c4d9b979df2404aa190e0987a8ca09c4e5cd61da1d48ecc01\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG NOT\",\n+    \"NULLDUMMY\",\n+    \"3-of-3 NOT with invalid sig with nonzero dummy\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "88bec7238c77e5090f4f2cbe6152129fa0fccd1b",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 52,
        "deletions": 10,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -572,22 +572,28 @@ nSequences are max.\n     \"P2SH(2-of-3)\"\n ],\n [\n-    \"0x47 0x304402200001cae94b795baaafb05db38cf24cd75560cab2c36c91e29fac7d0fd2a723a3022058e2e56e568ce7c4b2b106210d114e1faa079407a6ed4154f230667c7d3583bc01\",\n+    \"0x47 0x30440220001fff8863c84c0efc8eea5bffb7f388313f966f23a00ad3c0acc30ff5339684022016e6d78f51a3a1c362745931ca40b24f71cba2903dbfe5a6d392a9189127d83701\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n-    \"P2PK with too much R padding but no STRICTENC\"\n+    \"P2PK with too much R padding but no DERSIG\"\n ],\n [\n-    \"0x48 0x304502206d01de7c2a40ac2bb1231ed97f3890a1782f421d4c28b97166deff317990288f0221005e720213b089355be2cf785d81a82c59307d30e1624f450ed9ca1ebbc11cca6d01\",\n+    \"0x48 0x304502202323d56f293842b544cacedd06baafb999196dfa1c2975314848c158ac606655022100514bd98186b8a3a1cc87f4aff76aed797781389f13f50d87bf95b2df6e488fcc01\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n-    \"P2PK with too much S padding but no STRICTENC\"\n+    \"P2PK with too much S padding but no DERSIG\"\n ],\n [\n-    \"0x47 0x30440220f3d8889602147d60d26c1d3b21b8db183eac02bf6d2fec1424c0ef377ca6fd7b02202bae8bfe39d00a432d4538a592e338b0ffc44c17d4b7056043d55063cf91f5ef01\",\n+    \"0x47 0x30440220d31c24bb6c08a496e7698a08fd41975115d7b55bfaa31cb2d573e09481e59a6702206a691239996434076b78a4e1cf46fc8e993b468a9c77fb1832186aa8040a61a201\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n-    \"P2PK with too little R padding but no STRICTENC\"\n+    \"P2PK with too little R padding but no DERSIG\"\n+],\n+[\n+    \"0x47 0x30440220007c2cc7aef1801c2937447703c87ef2a3744209ad98da2abadd4ba8bb2e3ea00220503a275582c9f9e9ff30260c81b7f64b8b696f22105605cc8241fb76a797316201\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with bad sig with too much R padding but no DERSIG\"\n ],\n [\n     \"0x48 0x3045022021bf9184d94f208ac9f4757ebca9b1cbebf008cfc244fe5be1360b1b9aba0e92022100e55074f72f3a1bfddf2ea4ea7ba984f78822e136fe04c8f9c1363238e0233bd801\",\n@@ -596,17 +602,53 @@ nSequences are max.\n     \"P2PK with high S but no LOW_S\"\n ],\n [\n-    \"0x48 0x304502205c3e81aaf2aad0673f349035b180eba783eba7797af91c979920dea6b17a16d6022100d1d46825c68da1b325f320a3503dad27bb818227f64a38d153554bfd360c0e5301\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n-    \"LOW_S\",\n-    \"P2PK with high S but no STRICTENC\"\n+    \"0x47 0x304402202163bc732c21b7de0251297d3c6c2ece182782e85fc5e19d6036f1130a79051e022033827811634924ebba68767537d78dd7bd9109ae2a89a60587927abdc25eb06401\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"\",\n+    \"P2PK with hybrid pubkey but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x3044022078033e4227aa05ded69d8da579966578e230d8a7fb44d5f1a0620c3853c24f78022006a2e3f4d872ac8dfdc529110aa37301d65a76255a4b6cce2992adacd4d2c4e201\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"P2PK NOT with hybrid pubkey\"\n+],\n+[\n+    \"0x47 0x3044022078d6c447887e88dcbe1bc5b613645280df6f4e5935648bc226e9d91da71b3216022047d6b7ef0949b228fc1b359afb8d50500268711354298217b983c26970790c7601\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x304402207592427de20e315d644839754f2a5cca5b978b983a15e6da82109ede01722baa022032ceaf78590faa3f7743821e1b47b897ed1a57f6ee1c8a7519d23774d8de3c4401\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"P2PK NOT with invalid hybrid pubkey\"\n+],\n+[\n+    \"0x47 0x304402204649e9517ef0377a8f8270bd423053fd98ddff62d74ea553e9579558abbb75e4022044a2b2344469c12e35ed898987711272b634733dd0f5e051288eceb04bd4669e05\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"\",\n+    \"P2PK with undefined hashtype but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x304402207f1cf1866a2df0bb4b8d84d0ade72aa3abb6aaab0639d608b23d9e10ead0c48202203caa97f22c3439443eea4b89f7f6729854df0f567a8184d6ecc6e8b6c68c3e9d05\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\"\n ],\n [\n     \"0x01 0x01 0x47 0x3044022046ce33d1771b0127dd4c4cef8fdc3218ebdfa60e3793ed700292d8ebd93fb1f402201029d47a414db83e96e31443c2d8b552f971469c4800f5eff7df2f0648521aed01 0x47 0x304402205c53911ad55b054920043962bbda98cf6e57e2db1cd5611138251490baabaa8702201dc80dfceae6007e7772dc13ff6e7ca66a983cb017fe5d46d30118462d83bcf801 0x47 0x304402201937e44a4ec12364f9d32f9d25e7ecbc68aee9ef90069af80efef4c05f6ace9602206c515101c00c75710b32ff7ff8dbaf7c9a0be6e86ed14a0755b47626604f31fd01\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"\",\n     \"3-of-3 with nonzero dummy but no NULLDUMMY\"\n ],\n+[\n+    \"0x01 0x01 0x47 0x30440220195038dbc6b2ae1199f86a6777824f7c5149789d85f655a3534a4422b8fba38c02204df9db87d2eb9fe06edc66870d9ac4c9ce673459f9d43cee0347ce4ffb02ee5a01 0x47 0x3044022010a45f30c6fa97a186eba9e6b595ab87d3dfcbf05dcaf1f1b8e3e7bf39515bb802203474e78d3d372e5f5c0f8c257ce8300c4bb8f37c51d4a894e11a91b5817da6ed01 0x47 0x30440220039cffd8e39850f95112662b1220b14b3c0d3d8a2772e13c947bfbf96345a64e02204154bfa77e2c0134d5434353bed82141e5da1cc479954aa288d5f0671480a04b01\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "a4b0212494e1b01d46fd6384caf0abc2ae7ef5fe",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 12,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -242,8 +242,9 @@ class TestBuilder\n         return *this;\n     }\n \n-    Array GetJSON() const\n+    Array GetJSON()\n     {\n+        DoPush();\n         Array array;\n         array.push_back(FormatScript(spendTx.vin[0].scriptSig));\n         array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n@@ -319,40 +320,87 @@ BOOST_AUTO_TEST_CASE(script_build)\n                              ).Num(0).PushSig(keys.key1).Num(0).PushRedeem());\n \n     good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                               \"P2PK with too much R padding but no STRICTENC\", 0\n+                               \"P2PK with too much R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n     bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                              \"P2PK with too much R padding\", SCRIPT_VERIFY_STRICTENC\n+                              \"P2PK with too much R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n     good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                               \"P2PK with too much S padding but no STRICTENC\", 0\n+                               \"P2PK with too much S padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n     bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                              \"P2PK with too much S padding\", SCRIPT_VERIFY_STRICTENC\n+                              \"P2PK with too much S padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n     good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                               \"P2PK with too little R padding but no STRICTENC\", 0\n+                               \"P2PK with too little R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n     bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                              \"P2PK with too little R padding\", SCRIPT_VERIFY_STRICTENC\n+                              \"P2PK with too little R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with bad sig with too much R padding but no DERSIG\", 0\n+                              ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with bad sig with too much R padding\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with too much R padding but no DERSIG\", 0\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n \n     good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n-                               \"P2PK with high S but no LOW_S\", SCRIPT_VERIFY_STRICTENC\n-                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n-    good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n-                               \"P2PK with high S but no STRICTENC\", SCRIPT_VERIFY_LOW_S\n+                               \"P2PK with high S but no LOW_S\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n     bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n-                              \"P2PK with high S\", SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC\n+                              \"P2PK with high S\", SCRIPT_VERIFY_LOW_S\n                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n \n+    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG,\n+                               \"P2PK with hybrid pubkey but no STRICTENC\", 0\n+                              ).PushSig(keys.key0, SIGHASH_ALL));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG,\n+                              \"P2PK with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key0, SIGHASH_ALL));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with hybrid pubkey but no STRICTENC\", 0\n+                             ).PushSig(keys.key0, SIGHASH_ALL));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                              ).PushSig(keys.key0, SIGHASH_ALL));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\", 0\n+                              ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with invalid hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                              ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+                               \"P2PK with undefined hashtype but no STRICTENC\", 0\n+                              ).PushSig(keys.key1, 5));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+                              \"P2PK with undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key1, 5));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\", 0\n+                              ).PushSig(keys.key1, 5).DamagePush(10));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with invalid sig and undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key1, 5).DamagePush(10));\n+\n     good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n                                \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n     bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n                               \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+    good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\", 0\n+                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n+    bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"3-of-3 NOT with invalid sig with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n+                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n \n     std::map<std::string, Array> tests_good;\n     std::map<std::string, Array> tests_bad;"
      },
      {
        "sha": "18cb8f3d1ba7af74c2fad0dd7e35ef60f7393ef3",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -31,6 +31,7 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE)\n     (string(\"P2SH\"), (unsigned int)SCRIPT_VERIFY_P2SH)\n     (string(\"STRICTENC\"), (unsigned int)SCRIPT_VERIFY_STRICTENC)\n+    (string(\"DERSIG\"), (unsigned int)SCRIPT_VERIFY_DERSIG)\n     (string(\"LOW_S\"), (unsigned int)SCRIPT_VERIFY_LOW_S)\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY);\n "
      }
    ]
  }
]