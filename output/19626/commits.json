[
  {
    "sha": "3b21535e0f866e80ba51f6f97f48f25722aadd08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjIxNTM1ZTBmODY2ZTgwYmE1MWY2Zjk3ZjQ4ZjI1NzIyYWFkZDA4",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-07-26T00:10:25Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-07-30T14:16:46Z"
      },
      "message": "refactor: replace sizeof(a)/sizeof(a[0]) by ARRAYLEN(a)",
      "tree": {
        "sha": "9274d99120470c1d16fa1e7821c6be387ef8803f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9274d99120470c1d16fa1e7821c6be387ef8803f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b21535e0f866e80ba51f6f97f48f25722aadd08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b21535e0f866e80ba51f6f97f48f25722aadd08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b21535e0f866e80ba51f6f97f48f25722aadd08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b21535e0f866e80ba51f6f97f48f25722aadd08/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ebe2f6e752c453ff572eda4a108e747d6586c97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ebe2f6e752c453ff572eda4a108e747d6586c97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ebe2f6e752c453ff572eda4a108e747d6586c97"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "f2eb8afacfee8ada1d9ca19f324b8c3ad8ed4afd",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=3b21535e0f866e80ba51f6f97f48f25722aadd08",
        "patch": "@@ -52,7 +52,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch, int max_ret_\n     int size = strlen(psz) * 733 /1000 + 1; // log(58) / log(256), rounded up.\n     std::vector<unsigned char> b256(size);\n     // Process the characters.\n-    static_assert(sizeof(mapBase58)/sizeof(mapBase58[0]) == 256, \"mapBase58.size() should be 256\"); // guarantee not out of range\n+    static_assert(ARRAYLEN(mapBase58) == 256, \"mapBase58.size() should be 256\"); // guarantee not out of range\n     while (*psz && !IsSpace(*psz)) {\n         // Decode base58 character\n         int carry = mapBase58[(uint8_t)*psz];"
      },
      {
        "sha": "95a13bd340593e5373c8d570847a8d39495938bf",
        "filename": "src/bench/data.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/bench/data.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/bench/data.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/data.cpp?ref=3b21535e0f866e80ba51f6f97f48f25722aadd08",
        "patch": "@@ -3,12 +3,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/data.h>\n+#include <util/strencodings.h>\n \n namespace benchmark {\n namespace data {\n \n #include <bench/data/block413567.raw.h>\n-const std::vector<uint8_t> block413567{block413567_raw, block413567_raw + sizeof(block413567_raw) / sizeof(block413567_raw[0])};\n+const std::vector<uint8_t> block413567{block413567_raw, block413567_raw + ARRAYLEN(block413567_raw)};\n \n } // namespace data\n } // namespace benchmark"
      },
      {
        "sha": "493454c3a2d1805ecc2f5d8a73f574d9a1a15358",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=3b21535e0f866e80ba51f6f97f48f25722aadd08",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <chainparamsbase.h>\n #include <tinyformat.h>\n+#include <util/strencodings.h>\n \n #include <QApplication>\n \n@@ -21,7 +22,6 @@ static const struct {\n     {\"test\", QAPP_APP_NAME_TESTNET, 70, 30},\n     {\"regtest\", QAPP_APP_NAME_REGTEST, 160, 30}\n };\n-static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);\n \n // titleAddText needs to be const char* for tr()\n NetworkStyle::NetworkStyle(const QString &_appName, const int iconColorHueShift, const int iconColorSaturationReduction, const char *_titleAddText):\n@@ -80,7 +80,7 @@ NetworkStyle::NetworkStyle(const QString &_appName, const int iconColorHueShift,\n const NetworkStyle* NetworkStyle::instantiate(const std::string& networkId)\n {\n     std::string titleAddText = networkId == CBaseChainParams::MAIN ? \"\" : strprintf(\"[%s]\", networkId);\n-    for (unsigned x=0; x<network_styles_count; ++x)\n+    for (unsigned x=0; x<ARRAYLEN(network_styles); ++x)\n     {\n         if (networkId == network_styles[x].networkId)\n         {"
      },
      {
        "sha": "c6b9f8b169e1fb519b93a39dc795f17096832538",
        "filename": "src/qt/platformstyle.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=3b21535e0f866e80ba51f6f97f48f25722aadd08",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/platformstyle.h>\n+#include <util/strencodings.h>\n \n #include <QApplication>\n #include <QColor>\n@@ -23,7 +24,6 @@ static const struct {\n     /* Other: linux, unix, ... */\n     {\"other\", true, true, false}\n };\n-static const unsigned platform_styles_count = sizeof(platform_styles)/sizeof(*platform_styles);\n \n namespace {\n /* Local functions for colorizing single-color images */\n@@ -121,7 +121,7 @@ QIcon PlatformStyle::TextColorIcon(const QIcon& icon) const\n \n const PlatformStyle *PlatformStyle::instantiate(const QString &platformId)\n {\n-    for (unsigned x=0; x<platform_styles_count; ++x)\n+    for (unsigned x=0; x<ARRAYLEN(platform_styles); ++x)\n     {\n         if (platformId == platform_styles[x].platformId)\n         {"
      },
      {
        "sha": "3d2fd3f856c47e41002457e3cfa7788e6947ef8a",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=3b21535e0f866e80ba51f6f97f48f25722aadd08",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <rpc/client.h>\n+#include <util/strencodings.h>\n #include <util/system.h>\n \n #include <set>\n@@ -196,10 +197,7 @@ class CRPCConvertTable\n \n CRPCConvertTable::CRPCConvertTable()\n {\n-    const unsigned int n_elem =\n-        (sizeof(vRPCConvertParams) / sizeof(vRPCConvertParams[0]));\n-\n-    for (unsigned int i = 0; i < n_elem; i++) {\n+    for (unsigned int i = 0; i < ARRAYLEN(vRPCConvertParams); i++) {\n         members.insert(std::make_pair(vRPCConvertParams[i].methodName,\n                                       vRPCConvertParams[i].paramIdx));\n         membersByName.insert(std::make_pair(vRPCConvertParams[i].methodName,"
      },
      {
        "sha": "1247f83f1d59f441dd6d6f22f505889a5cc53f82",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=3b21535e0f866e80ba51f6f97f48f25722aadd08",
        "patch": "@@ -257,7 +257,7 @@ static const CRPCCommand vRPCCommands[] =\n CRPCTable::CRPCTable()\n {\n     unsigned int vcidx;\n-    for (vcidx = 0; vcidx < (sizeof(vRPCCommands) / sizeof(vRPCCommands[0])); vcidx++)\n+    for (vcidx = 0; vcidx < ARRAYLEN(vRPCCommands); vcidx++)\n     {\n         const CRPCCommand *pcmd;\n "
      },
      {
        "sha": "64da333704e699b5a42411d78de8747fdb6c3477",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=3b21535e0f866e80ba51f6f97f48f25722aadd08",
        "patch": "@@ -13,7 +13,7 @@ BOOST_AUTO_TEST_CASE(base32_testvectors)\n {\n     static const std::string vstrIn[]  = {\"\",\"f\",\"fo\",\"foo\",\"foob\",\"fooba\",\"foobar\"};\n     static const std::string vstrOut[] = {\"\",\"my======\",\"mzxq====\",\"mzxw6===\",\"mzxw6yq=\",\"mzxw6ytb\",\"mzxw6ytboi======\"};\n-    for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n+    for (unsigned int i=0; i<ARRAYLEN(vstrIn); i++)\n     {\n         std::string strEnc = EncodeBase32(vstrIn[i]);\n         BOOST_CHECK_EQUAL(strEnc, vstrOut[i]);"
      },
      {
        "sha": "7d086782ece328850dcfc2dbc813319674c7ff7b",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=3b21535e0f866e80ba51f6f97f48f25722aadd08",
        "patch": "@@ -13,7 +13,7 @@ BOOST_AUTO_TEST_CASE(base64_testvectors)\n {\n     static const std::string vstrIn[]  = {\"\",\"f\",\"fo\",\"foo\",\"foob\",\"fooba\",\"foobar\"};\n     static const std::string vstrOut[] = {\"\",\"Zg==\",\"Zm8=\",\"Zm9v\",\"Zm9vYg==\",\"Zm9vYmE=\",\"Zm9vYmFy\"};\n-    for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n+    for (unsigned int i=0; i<ARRAYLEN(vstrIn); i++)\n     {\n         std::string strEnc = EncodeBase64(vstrIn[i]);\n         BOOST_CHECK_EQUAL(strEnc, vstrOut[i]);"
      },
      {
        "sha": "6e67aead5a1a0cb7b983ff1d40695e0311a09521",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=3b21535e0f866e80ba51f6f97f48f25722aadd08",
        "patch": "@@ -227,10 +227,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n-    static_assert(sizeof(blockinfo) / sizeof(*blockinfo) == 110, \"Should have 110 blocks to import\");\n+    static_assert(ARRAYLEN(blockinfo) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n-    for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)\n+    for (unsigned int i = 0; i < ARRAYLEN(blockinfo); ++i)\n     {\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         {"
      },
      {
        "sha": "32b0303007a260f0d289d4cfcfceb7fda39af7ca",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=3b21535e0f866e80ba51f6f97f48f25722aadd08",
        "patch": "@@ -5,6 +5,7 @@\n #include <script/script.h>\n #include <test/scriptnum10.h>\n #include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n \n #include <boost/test/unit_test.hpp>\n #include <limits.h>\n@@ -164,9 +165,9 @@ static void RunOperators(const int64_t& num1, const int64_t& num2)\n \n BOOST_AUTO_TEST_CASE(creation)\n {\n-    for(size_t i = 0; i < sizeof(values) / sizeof(values[0]); ++i)\n+    for(size_t i = 0; i < ARRAYLEN(values); ++i)\n     {\n-        for(size_t j = 0; j < sizeof(offsets) / sizeof(offsets[0]); ++j)\n+        for(size_t j = 0; j < ARRAYLEN(offsets); ++j)\n         {\n             RunCreate(values[i]);\n             RunCreate(values[i] + offsets[j]);\n@@ -177,9 +178,9 @@ BOOST_AUTO_TEST_CASE(creation)\n \n BOOST_AUTO_TEST_CASE(operators)\n {\n-    for(size_t i = 0; i < sizeof(values) / sizeof(values[0]); ++i)\n+    for(size_t i = 0; i < ARRAYLEN(values); ++i)\n     {\n-        for(size_t j = 0; j < sizeof(offsets) / sizeof(offsets[0]); ++j)\n+        for(size_t j = 0; j < ARRAYLEN(offsets); ++j)\n         {\n             RunOperators(values[i], values[i]);\n             RunOperators(values[i], -values[i]);"
      },
      {
        "sha": "61305499f50af663fa37eba0de22c60bbe60a472",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b21535e0f866e80ba51f6f97f48f25722aadd08/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=3b21535e0f866e80ba51f6f97f48f25722aadd08",
        "patch": "@@ -88,7 +88,7 @@ void static RandomScript(CScript &script) {\n     script = CScript();\n     int ops = (InsecureRandRange(10));\n     for (int i=0; i<ops; i++)\n-        script << oplist[InsecureRandRange(sizeof(oplist)/sizeof(oplist[0]))];\n+        script << oplist[InsecureRandRange(ARRAYLEN(oplist))];\n }\n \n void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {"
      }
    ]
  }
]