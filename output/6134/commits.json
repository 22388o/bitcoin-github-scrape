[
  {
    "sha": "22eca7da22b67409d757d6859b1cf212e445dd39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmVjYTdkYTIyYjY3NDA5ZDc1N2Q2ODU5YjFjZjIxMmU0NDVkZDM5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:10:22Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:33:06Z"
      },
      "message": "Add smart fee estimation functions\n\nThese are more useful fee and priority estimation functions. If there is no fee/pri high enough for the target you are aiming for, it will give you the estimate for the lowest target that you can reliably obtain.  This is better than defaulting to the minimum.  It will also pass back the target for which it returned an answer.",
      "tree": {
        "sha": "a5105ea18e0e84f7d30491da6b8e8fac66113529",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5105ea18e0e84f7d30491da6b8e8fac66113529"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22eca7da22b67409d757d6859b1cf212e445dd39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22eca7da22b67409d757d6859b1cf212e445dd39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22eca7da22b67409d757d6859b1cf212e445dd39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22eca7da22b67409d757d6859b1cf212e445dd39/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 75,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eb6e9cc8bb122ff4ff3be367e03e1c2861bb7ef4",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22eca7da22b67409d757d6859b1cf212e445dd39/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22eca7da22b67409d757d6859b1cf212e445dd39/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=22eca7da22b67409d757d6859b1cf212e445dd39",
        "patch": "@@ -504,6 +504,28 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     return CFeeRate(median);\n }\n \n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget)\n+{\n+    if (answerFoundAtTarget)\n+        *answerFoundAtTarget = confTarget;\n+    // Return failure if trying to analyze a target we're not tracking\n+    if (confTarget <= 0 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n+        return CFeeRate(0);\n+\n+    double median = -1;\n+    while (median < 0 && (unsigned int)confTarget <= feeStats.GetMaxConfirms()) {\n+        median = feeStats.EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+\n+    if (answerFoundAtTarget)\n+        *answerFoundAtTarget = confTarget - 1;\n+\n+    if (median < 0)\n+        return CFeeRate(0);\n+\n+    return CFeeRate(median);\n+}\n+\n double CBlockPolicyEstimator::estimatePriority(int confTarget)\n {\n     // Return failure if trying to analyze a target we're not tracking\n@@ -513,6 +535,25 @@ double CBlockPolicyEstimator::estimatePriority(int confTarget)\n     return priStats.EstimateMedianVal(confTarget, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n }\n \n+double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget)\n+{\n+    if (answerFoundAtTarget)\n+        *answerFoundAtTarget = confTarget;\n+    // Return failure if trying to analyze a target we're not tracking\n+    if (confTarget <= 0 || (unsigned int)confTarget > priStats.GetMaxConfirms())\n+        return -1;\n+\n+    double median = -1;\n+    while (median < 0 && (unsigned int)confTarget <= priStats.GetMaxConfirms()) {\n+        median = priStats.EstimateMedianVal(confTarget++, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+\n+    if (answerFoundAtTarget)\n+        *answerFoundAtTarget = confTarget - 1;\n+\n+    return median;\n+}\n+\n void CBlockPolicyEstimator::Write(CAutoFile& fileout)\n {\n     fileout << nBestSeenHeight;"
      },
      {
        "sha": "4c6e27fc112371e375e8030a6ecb5721e5df152a",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22eca7da22b67409d757d6859b1cf212e445dd39/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22eca7da22b67409d757d6859b1cf212e445dd39/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=22eca7da22b67409d757d6859b1cf212e445dd39",
        "patch": "@@ -242,9 +242,21 @@ class CBlockPolicyEstimator\n     /** Return a fee estimate */\n     CFeeRate estimateFee(int confTarget);\n \n+    /** Estimate fee rate needed to get be included in a block within\n+     *  confTarget blocks. If no answer can be given at confTarget, return an\n+     *  estimate at the lowest target where one can be given.\n+     */\n+    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget);\n+\n     /** Return a priority estimate */\n     double estimatePriority(int confTarget);\n \n+    /** Estimate priority needed to get be included in a block within\n+     *  confTarget blocks. If no answer can be given at confTarget, return an\n+     *  estimate at the lowest target where one can be given.\n+     */\n+    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget);\n+\n     /** Write estimation data to a file */\n     void Write(CAutoFile& fileout);\n "
      },
      {
        "sha": "503e73d454cbdf1ac7a17558400cd848b4378b7e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22eca7da22b67409d757d6859b1cf212e445dd39/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22eca7da22b67409d757d6859b1cf212e445dd39/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=22eca7da22b67409d757d6859b1cf212e445dd39",
        "patch": "@@ -701,11 +701,21 @@ CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n     LOCK(cs);\n     return minerPolicyEstimator->estimateFee(nBlocks);\n }\n+CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n+{\n+    LOCK(cs);\n+    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks);\n+}\n double CTxMemPool::estimatePriority(int nBlocks) const\n {\n     LOCK(cs);\n     return minerPolicyEstimator->estimatePriority(nBlocks);\n }\n+double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n+{\n+    LOCK(cs);\n+    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks);\n+}\n \n bool\n CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const"
      },
      {
        "sha": "5d8231fb778d4875cab9b9652a35ea1078ca361a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22eca7da22b67409d757d6859b1cf212e445dd39/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22eca7da22b67409d757d6859b1cf212e445dd39/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=22eca7da22b67409d757d6859b1cf212e445dd39",
        "patch": "@@ -454,9 +454,21 @@ class CTxMemPool\n \n     bool lookup(uint256 hash, CTransaction& result) const;\n \n+    /** Estimate fee rate needed to get into the next nBlocks\n+     *  If no answer can be given at nBlocks, return an estimate\n+     *  at the lowest number of blocks where one can be given\n+     */\n+    CFeeRate estimateSmartFee(int nBlocks, int *answerFoundAtBlocks = NULL) const;\n+\n     /** Estimate fee rate needed to get into the next nBlocks */\n     CFeeRate estimateFee(int nBlocks) const;\n \n+    /** Estimate priority needed to get into the next nBlocks\n+     *  If no answer can be given at nBlocks, return an estimate\n+     *  at the lowest number of blocks where one can be given\n+     */\n+    double estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks = NULL) const;\n+\n     /** Estimate priority needed to get into the next nBlocks */\n     double estimatePriority(int nBlocks) const;\n     "
      }
    ]
  },
  {
    "sha": "4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmUyODIzNmMwYzE2ZTIwZGRkNTM5ZjM4ZmM4ZDU4ZGI1ZWI4M2Vk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:15:32Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:33:06Z"
      },
      "message": "Change wallet and GUI code to use new smart fee estimation calls.",
      "tree": {
        "sha": "edf34a26c606a43b2bc0e71809af3c7a1d87c4a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edf34a26c606a43b2bc0e71809af3c7a1d87c4a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22eca7da22b67409d757d6859b1cf212e445dd39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22eca7da22b67409d757d6859b1cf212e445dd39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22eca7da22b67409d757d6859b1cf212e445dd39"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 22,
      "deletions": 24
    },
    "files": [
      {
        "sha": "cbc41f3416ef780c9f5fc57799bda7a41fdefbd7",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
        "patch": "@@ -538,7 +538,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         nBytes = nBytesInputs + ((CoinControlDialog::payAmounts.size() > 0 ? CoinControlDialog::payAmounts.size() + 1 : 2) * 34) + 10; // always assume +1 output for change here\n \n         // Priority\n-        double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n+        double mempoolEstimatePriority = mempool.estimateSmartPriority(nTxConfirmTarget);\n         dPriority = dPriorityInputs / (nBytes - nBytesInputs + (nQuantityUncompressed * 29)); // 29 = 180 - 151 (uncompressed public keys are over the limit. max 151 bytes of the input are ignored for priority)\n         sPriorityLabel = CoinControlDialog::getPriorityLabel(dPriority, mempoolEstimatePriority);\n \n@@ -550,10 +550,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         // Fee\n         nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n \n-        // Allow free?\n-        double dPriorityNeeded = mempoolEstimatePriority;\n-        if (dPriorityNeeded <= 0)\n-            dPriorityNeeded = AllowFreeThreshold(); // not enough data, back to hard-coded\n+        // Allow free? (require at least hard-coded threshold and default to that if no estimate)\n+        double dPriorityNeeded = std::max(mempoolEstimatePriority, AllowFreeThreshold());\n         fAllowFree = (dPriority >= dPriorityNeeded);\n \n         if (fSendFreeTransactions)\n@@ -649,8 +647,9 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     double dFeeVary;\n     if (payTxFee.GetFeePerK() > 0)\n         dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n-    else\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), mempool.estimateFee(nTxConfirmTarget).GetFeePerK()) / 1000;\n+    else {\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), mempool.estimateSmartFee(nTxConfirmTarget).GetFeePerK()) / 1000;\n+    }\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n \n     l3->setToolTip(toolTip4);\n@@ -686,7 +685,7 @@ void CoinControlDialog::updateView()\n     QFlags<Qt::ItemFlag> flgTristate = Qt::ItemIsSelectable | Qt::ItemIsEnabled | Qt::ItemIsUserCheckable | Qt::ItemIsTristate;\n \n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n-    double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n+    double mempoolEstimatePriority = mempool.estimateSmartPriority(nTxConfirmTarget);\n \n     std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);"
      },
      {
        "sha": "e764d75b2a9cde48ad3f06a3508c4381b54c90d6",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
        "patch": "@@ -633,7 +633,8 @@ void SendCoinsDialog::updateSmartFeeLabel()\n         return;\n \n     int nBlocksToConfirm = defaultConfirmTarget - ui->sliderSmartFee->value();\n-    CFeeRate feeRate = mempool.estimateFee(nBlocksToConfirm);\n+    int estimateFoundAtBlocks = nBlocksToConfirm;\n+    CFeeRate feeRate = mempool.estimateSmartFee(nBlocksToConfirm, &estimateFoundAtBlocks);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), CWallet::GetRequiredFee(1000)) + \"/kB\");\n@@ -644,7 +645,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n         ui->labelSmartFee2->hide();\n-        ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", nBlocksToConfirm));\n+        ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", estimateFoundAtBlocks));\n     }\n \n     updateFeeMinimizedLabel();"
      },
      {
        "sha": "9152a59cdf36f3176802368a69fe6b8257e01176",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
        "patch": "@@ -2033,14 +2033,10 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 if (fSendFreeTransactions && nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE)\n                 {\n                     // Not enough fee: enough priority?\n-                    double dPriorityNeeded = mempool.estimatePriority(nTxConfirmTarget);\n-                    // Not enough mempool history to estimate: use hard-coded AllowFree.\n-                    if (dPriorityNeeded <= 0 && AllowFree(dPriority))\n-                        break;\n-\n-                    // Small enough, and priority high enough, to send for free\n-                    if (dPriorityNeeded > 0 && dPriority >= dPriorityNeeded)\n-                        break;\n+                    double dPriorityNeeded = mempool.estimateSmartPriority(nTxConfirmTarget);\n+                    // Require at least hard-coded AllowFree.\n+                    if (dPriority >= dPriorityNeeded && AllowFree(dPriority))\n+                            break;\n                 }\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n@@ -2131,12 +2127,14 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n     if (fPayAtLeastCustomFee && nFeeNeeded > 0 && nFeeNeeded < payTxFee.GetFeePerK())\n         nFeeNeeded = payTxFee.GetFeePerK();\n     // User didn't set: use -txconfirmtarget to estimate...\n-    if (nFeeNeeded == 0)\n-        nFeeNeeded = pool.estimateFee(nConfirmTarget).GetFee(nTxBytes);\n-    // ... unless we don't have enough mempool data, in which case fall\n-    // back to the required fee\n-    if (nFeeNeeded == 0)\n-        nFeeNeeded = GetRequiredFee(nTxBytes);\n+    if (nFeeNeeded == 0) {\n+        int estimateFoundTarget = nConfirmTarget;\n+        nFeeNeeded = pool.estimateSmartFee(nConfirmTarget, &estimateFoundTarget).GetFee(nTxBytes);\n+        // ... unless we don't have enough mempool data for our desired target\n+        // so we make sure we're paying at least minTxFee\n+        if (nFeeNeeded == 0 || (unsigned int)estimateFoundTarget > nConfirmTarget)\n+            nFeeNeeded = std::max(nFeeNeeded, GetRequiredFee(nTxBytes));\n+    }\n     // prevent user from paying a non-sense fee (like 1 satoshi): 0 < fee < minRelayFee\n     if (nFeeNeeded < ::minRelayTxFee.GetFee(nTxBytes))\n         nFeeNeeded = ::minRelayTxFee.GetFee(nTxBytes);"
      }
    ]
  },
  {
    "sha": "f22ac4a22c570921f1c2be121e6744a1564b2ce7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjJhYzRhMjJjNTcwOTIxZjFjMmJlMTIxZTY3NDRhMTU2NGIyY2U3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:18:15Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:33:06Z"
      },
      "message": "Increase success threshold for fee estimation to 95%\n\nThis provides more conservative estimates and reacts more quickly to a backlog.\nUnfortunately the unit test for fee estimation depends on the success threshold (and the decay) chosen; also modify the unit test for the new default success thresholds.",
      "tree": {
        "sha": "8954f41b86154f914d0cd96e70732ab30e3449c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8954f41b86154f914d0cd96e70732ab30e3449c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f22ac4a22c570921f1c2be121e6744a1564b2ce7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f22ac4a22c570921f1c2be121e6744a1564b2ce7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f22ac4a22c570921f1c2be121e6744a1564b2ce7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f22ac4a22c570921f1c2be121e6744a1564b2ce7/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 22,
      "deletions": 19
    },
    "files": [
      {
        "sha": "07caa6e71362665425fba2e3f478d62d5232da50",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f22ac4a22c570921f1c2be121e6744a1564b2ce7/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f22ac4a22c570921f1c2be121e6744a1564b2ce7/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=f22ac4a22c570921f1c2be121e6744a1564b2ce7",
        "patch": "@@ -182,8 +182,8 @@ static const unsigned int MAX_BLOCK_CONFIRMS = 25;\n /** Decay of .998 is a half-life of 346 blocks or about 2.4 days */\n static const double DEFAULT_DECAY = .998;\n \n-/** Require greater than 85% of X fee transactions to be confirmed within Y blocks for X to be big enough */\n-static const double MIN_SUCCESS_PCT = .85;\n+/** Require greater than 95% of X fee transactions to be confirmed within Y blocks for X to be big enough */\n+static const double MIN_SUCCESS_PCT = .95;\n static const double UNLIKELY_PCT = .5;\n \n /** Require an avg of 1 tx in the combined fee bucket per block to have stat significance */"
      },
      {
        "sha": "63acb1cf93bdbbbbb65acb158b6fde73611e0a46",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 17,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f22ac4a22c570921f1c2be121e6744a1564b2ce7/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f22ac4a22c570921f1c2be121e6744a1564b2ce7/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=f22ac4a22c570921f1c2be121e6744a1564b2ce7",
        "patch": "@@ -83,11 +83,13 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         block.clear();\n         if (blocknum == 30) {\n             // At this point we should need to combine 5 buckets to get enough data points\n-            // So estimateFee(1) should fail and estimateFee(2) should return somewhere around\n-            // 8*baserate\n+            // So estimateFee(1,2,3) should fail and estimateFee(4) should return somewhere around\n+            // 8*baserate.  estimateFee(4) %'s are 100,100,100,100,90 = average 98%\n             BOOST_CHECK(mpool.estimateFee(1) == CFeeRate(0));\n-            BOOST_CHECK(mpool.estimateFee(2).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n-            BOOST_CHECK(mpool.estimateFee(2).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n+            BOOST_CHECK(mpool.estimateFee(2) == CFeeRate(0));\n+            BOOST_CHECK(mpool.estimateFee(3) == CFeeRate(0));\n+            BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n+            BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n         }\n     }\n \n@@ -96,20 +98,21 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Highest feerate is 10*baseRate and gets in all blocks,\n     // second highest feerate is 9*baseRate and gets in 9/10 blocks = 90%,\n     // third highest feerate is 8*base rate, and gets in 8/10 blocks = 80%,\n-    // so estimateFee(1) should return 9*baseRate.\n-    // Third highest feerate has 90% chance of being included by 2 blocks,\n-    // so estimateFee(2) should return 8*baseRate etc...\n+    // so estimateFee(1) should return 10*baseRate.\n+    // Second highest feerate has 100% chance of being included by 2 blocks,\n+    // so estimateFee(2) should return 9*baseRate etc...\n     for (int i = 1; i < 10;i++) {\n         origFeeEst.push_back(mpool.estimateFee(i).GetFeePerK());\n         origPriEst.push_back(mpool.estimatePriority(i));\n         if (i > 1) { // Fee estimates should be monotonically decreasing\n             BOOST_CHECK(origFeeEst[i-1] <= origFeeEst[i-2]);\n             BOOST_CHECK(origPriEst[i-1] <= origPriEst[i-2]);\n         }\n-        BOOST_CHECK(origFeeEst[i-1] < (10-i)*baseRate.GetFeePerK() + deltaFee);\n-        BOOST_CHECK(origFeeEst[i-1] > (10-i)*baseRate.GetFeePerK() - deltaFee);\n-        BOOST_CHECK(origPriEst[i-1] < pow(10,10-i) * basepri + deltaPri);\n-        BOOST_CHECK(origPriEst[i-1] > pow(10,10-i) * basepri - deltaPri);\n+        int mult = 11-i;\n+        BOOST_CHECK(origFeeEst[i-1] < mult*baseRate.GetFeePerK() + deltaFee);\n+        BOOST_CHECK(origFeeEst[i-1] > mult*baseRate.GetFeePerK() - deltaFee);\n+        BOOST_CHECK(origPriEst[i-1] < pow(10,mult) * basepri + deltaPri);\n+        BOOST_CHECK(origPriEst[i-1] > pow(10,mult) * basepri - deltaPri);\n     }\n \n     // Mine 50 more blocks with no transactions happening, estimates shouldn't change\n@@ -140,8 +143,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     }\n \n     for (int i = 1; i < 10;i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n-        BOOST_CHECK(mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n+        BOOST_CHECK(mpool.estimateFee(i) == CFeeRate(0) || mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(mpool.estimatePriority(i) == -1 || mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n     }\n \n     // Mine all those transactions\n@@ -161,9 +164,9 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         BOOST_CHECK(mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n     }\n \n-    // Mine 100 more blocks where everything is mined every block\n-    // Estimates should be below original estimates (not possible for last estimate)\n-    while (blocknum < 365) {\n+    // Mine 200 more blocks where everything is mined every block\n+    // Estimates should be below original estimates\n+    while (blocknum < 465) {\n         for (int j = 0; j < 10; j++) { // For each fee/pri multiple\n             for (int k = 0; k < 5; k++) { // add 4 fee txs for every priority tx\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n@@ -177,7 +180,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n         block.clear();\n     }\n-    for (int i = 1; i < 9; i++) {\n+    for (int i = 1; i < 10; i++) {\n         BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n         BOOST_CHECK(mpool.estimatePriority(i) < origPriEst[i-1] - deltaPri);\n     }"
      }
    ]
  },
  {
    "sha": "63030514701828a06040413837f5eced9deeee03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzAzMDUxNDcwMTgyOGEwNjA0MDQxMzgzN2Y1ZWNlZDlkZWVlZTAz",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:21:51Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:33:06Z"
      },
      "message": "EstimateSmart functions consider mempool min fee",
      "tree": {
        "sha": "62be88c1ff41a297a3e1b58ff5ccd68789cb699c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62be88c1ff41a297a3e1b58ff5ccd68789cb699c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63030514701828a06040413837f5eced9deeee03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63030514701828a06040413837f5eced9deeee03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63030514701828a06040413837f5eced9deeee03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63030514701828a06040413837f5eced9deeee03/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f22ac4a22c570921f1c2be121e6744a1564b2ce7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f22ac4a22c570921f1c2be121e6744a1564b2ce7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f22ac4a22c570921f1c2be121e6744a1564b2ce7"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 22,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a0bea3efbd10ca35addb3867c0b62e72c3d28fa3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63030514701828a06040413837f5eced9deeee03/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63030514701828a06040413837f5eced9deeee03/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=63030514701828a06040413837f5eced9deeee03",
        "patch": "@@ -55,8 +55,6 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n-/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n-static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 72;\n /** The maximum size of a blk?????.dat file (since 0.8) */"
      },
      {
        "sha": "e139b06c72ac1ff5ad5cab027574b4b430272475",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63030514701828a06040413837f5eced9deeee03/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63030514701828a06040413837f5eced9deeee03/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=63030514701828a06040413837f5eced9deeee03",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"policy/fees.h\"\n+#include \"policy/policy.h\"\n \n #include \"amount.h\"\n #include \"primitives/transaction.h\"\n@@ -504,7 +505,7 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget)\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n@@ -520,6 +521,11 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget - 1;\n \n+    // If mempool is limiting txs , return at least the min fee from the mempool\n+    CAmount minPoolFee = pool->GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    if (minPoolFee > 0 && minPoolFee > median)\n+        return CFeeRate(minPoolFee);\n+\n     if (median < 0)\n         return CFeeRate(0);\n \n@@ -535,14 +541,19 @@ double CBlockPolicyEstimator::estimatePriority(int confTarget)\n     return priStats.EstimateMedianVal(confTarget, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n }\n \n-double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget)\n+double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n     // Return failure if trying to analyze a target we're not tracking\n     if (confTarget <= 0 || (unsigned int)confTarget > priStats.GetMaxConfirms())\n         return -1;\n \n+    // If mempool is limiting txs, no priority txs are allowed\n+    CAmount minPoolFee = pool->GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    if (minPoolFee > 0)\n+        return INF_PRIORITY;\n+\n     double median = -1;\n     while (median < 0 && (unsigned int)confTarget <= priStats.GetMaxConfirms()) {\n         median = priStats.EstimateMedianVal(confTarget++, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n@@ -551,6 +562,7 @@ double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerF\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget - 1;\n \n+\n     return median;\n }\n "
      },
      {
        "sha": "59e6bfbc06968d98b5f0e2973f087c17190bc9de",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63030514701828a06040413837f5eced9deeee03/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63030514701828a06040413837f5eced9deeee03/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=63030514701828a06040413837f5eced9deeee03",
        "patch": "@@ -15,6 +15,7 @@\n class CAutoFile;\n class CFeeRate;\n class CTxMemPoolEntry;\n+class CTxMemPool;\n \n /** \\class CBlockPolicyEstimator\n  * The BlockPolicyEstimator is used for estimating the fee or priority needed\n@@ -246,7 +247,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget);\n+    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool);\n \n     /** Return a priority estimate */\n     double estimatePriority(int confTarget);\n@@ -255,7 +256,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget);\n+    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool);\n \n     /** Write estimation data to a file */\n     void Write(CAutoFile& fileout);"
      },
      {
        "sha": "c8d2c1a924df1a0cd15ba669fdfc6669e9da1542",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63030514701828a06040413837f5eced9deeee03/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63030514701828a06040413837f5eced9deeee03/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=63030514701828a06040413837f5eced9deeee03",
        "patch": "@@ -25,6 +25,8 @@ static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid"
      },
      {
        "sha": "ab7901d811aa62cb1e37d2ed8aea3ff748f3f334",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63030514701828a06040413837f5eced9deeee03/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63030514701828a06040413837f5eced9deeee03/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=63030514701828a06040413837f5eced9deeee03",
        "patch": "@@ -10,6 +10,7 @@\n #include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"streams.h\""
      },
      {
        "sha": "58b8448bb6f7c2acf6c162f04a3c74f1173b2467",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63030514701828a06040413837f5eced9deeee03/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63030514701828a06040413837f5eced9deeee03/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=63030514701828a06040413837f5eced9deeee03",
        "patch": "@@ -704,7 +704,7 @@ CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks);\n+    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, this);\n }\n double CTxMemPool::estimatePriority(int nBlocks) const\n {\n@@ -714,7 +714,7 @@ double CTxMemPool::estimatePriority(int nBlocks) const\n double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks);\n+    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, this);\n }\n \n bool"
      }
    ]
  },
  {
    "sha": "e93a236d7a466baa14c3320349f27b8750c956c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTNhMjM2ZDdhNDY2YmFhMTRjMzMyMDM0OWYyN2I4NzUwYzk1NmMw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:23:33Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:33:06Z"
      },
      "message": "add estimateSmartFee to the unit test",
      "tree": {
        "sha": "e463c4f04a9f736b0aea23163e4c3f8099e50381",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e463c4f04a9f736b0aea23163e4c3f8099e50381"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e93a236d7a466baa14c3320349f27b8750c956c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93a236d7a466baa14c3320349f27b8750c956c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e93a236d7a466baa14c3320349f27b8750c956c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93a236d7a466baa14c3320349f27b8750c956c0/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63030514701828a06040413837f5eced9deeee03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63030514701828a06040413837f5eced9deeee03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63030514701828a06040413837f5eced9deeee03"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e8765400d38108ab5b5182bd2b21622f636a2d81",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e93a236d7a466baa14c3320349f27b8750c956c0/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e93a236d7a466baa14c3320349f27b8750c956c0/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=e93a236d7a466baa14c3320349f27b8750c956c0",
        "patch": "@@ -90,6 +90,11 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             BOOST_CHECK(mpool.estimateFee(3) == CFeeRate(0));\n             BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n             BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n+            int answerFound;\n+            BOOST_CHECK(mpool.estimateSmartFee(1, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(mpool.estimateSmartFee(3, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(mpool.estimateSmartFee(4, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(mpool.estimateSmartFee(8, &answerFound) == mpool.estimateFee(8) && answerFound == 8);\n         }\n     }\n \n@@ -142,9 +147,12 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n     }\n \n+    int answerFound;\n     for (int i = 1; i < 10;i++) {\n         BOOST_CHECK(mpool.estimateFee(i) == CFeeRate(0) || mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(mpool.estimateSmartFee(i, &answerFound).GetFeePerK() > origFeeEst[answerFound-1] - deltaFee);\n         BOOST_CHECK(mpool.estimatePriority(i) == -1 || mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n+        BOOST_CHECK(mpool.estimateSmartPriority(i, &answerFound) > origPriEst[answerFound-1] - deltaPri);\n     }\n \n     // Mine all those transactions\n@@ -184,6 +192,18 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n         BOOST_CHECK(mpool.estimatePriority(i) < origPriEst[i-1] - deltaPri);\n     }\n+\n+    // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n+    // and that estimateSmartPriority returns essentially an infinite value\n+    mpool.addUnchecked(tx.GetHash(),  CTxMemPoolEntry(tx, feeV[0][5], GetTime(), priV[1][5], blocknum, mpool.HasNoInputsOf(tx)));\n+    // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[0][5]\n+    mpool.TrimToSize(1);\n+    BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[0][5]);\n+    for (int i = 1; i < 10; i++) {\n+        BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.estimateFee(i).GetFeePerK());\n+        BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n+        BOOST_CHECK(mpool.estimateSmartPriority(i) == INF_PRIORITY);\n+    }\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "56106a3300f844afcadf6dce50d5ef1d337f50b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjEwNmEzMzAwZjg0NGFmY2FkZjZkY2U1MGQ1ZWYxZDMzN2Y1MGI5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:26:57Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:42:31Z"
      },
      "message": "Expose RPC calls for estimatesmart functions\n\nAlso add testing for estimatesmartfee in smartfees.py",
      "tree": {
        "sha": "f6a0f45ee2744deac348d981b127c4ab5c7f1ee8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6a0f45ee2744deac348d981b127c4ab5c7f1ee8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56106a3300f844afcadf6dce50d5ef1d337f50b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56106a3300f844afcadf6dce50d5ef1d337f50b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56106a3300f844afcadf6dce50d5ef1d337f50b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56106a3300f844afcadf6dce50d5ef1d337f50b9/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e93a236d7a466baa14c3320349f27b8750c956c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93a236d7a466baa14c3320349f27b8750c956c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e93a236d7a466baa14c3320349f27b8750c956c0"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 108,
      "deletions": 22
    },
    "files": [
      {
        "sha": "ecfffc1b45b432eefcb0e66bc3f3db7b8e8a44b0",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 30,
        "deletions": 22,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56106a3300f844afcadf6dce50d5ef1d337f50b9/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56106a3300f844afcadf6dce50d5ef1d337f50b9/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "patch": "@@ -120,15 +120,26 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n         last_e = e\n     valid_estimate = False\n     invalid_estimates = 0\n-    for e in all_estimates:\n+    for i,e in enumerate(all_estimates): # estimate is for i+1\n         if e >= 0:\n             valid_estimate = True\n+            # estimatesmartfee should return the same result\n+            assert_equal(node.estimatesmartfee(i+1)[\"feerate\"], e)\n+\n         else:\n             invalid_estimates += 1\n-        # Once we're at a high enough confirmation count that we can give an estimate\n-        # We should have estimates for all higher confirmation counts\n-        if valid_estimate and e < 0:\n-            raise AssertionError(\"Invalid estimate appears at higher confirm count than valid estimate\")\n+\n+            # estimatesmartfee should still be valid\n+            approx_estimate = node.estimatesmartfee(i+1)[\"feerate\"]\n+            answer_found = node.estimatesmartfee(i+1)[\"blocks\"]\n+            assert(approx_estimate > 0)\n+            assert(answer_found > i+1)\n+\n+            # Once we're at a high enough confirmation count that we can give an estimate\n+            # We should have estimates for all higher confirmation counts\n+            if valid_estimate:\n+                raise AssertionError(\"Invalid estimate appears at higher confirm count than valid estimate\")\n+\n     # Check on the expected number of different confirmation counts\n     # that we might not have valid estimates for\n     if invalid_estimates > max_invalid:\n@@ -184,13 +195,13 @@ def setup_network(self):\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # (17k is room enough for 110 or so transactions)\n         self.nodes.append(start_node(1, self.options.tmpdir,\n-                                     [\"-blockprioritysize=1500\", \"-blockmaxsize=18000\",\n+                                     [\"-blockprioritysize=1500\", \"-blockmaxsize=17000\",\n                                       \"-maxorphantx=1000\", \"-relaypriority=0\", \"-debug=estimatefee\"]))\n         connect_nodes(self.nodes[1], 0)\n \n         # Node2 is a stingy miner, that\n-        # produces too small blocks (room for only 70 or so transactions)\n-        node2args = [\"-blockprioritysize=0\", \"-blockmaxsize=12000\", \"-maxorphantx=1000\", \"-relaypriority=0\"]\n+        # produces too small blocks (room for only 55 or so transactions)\n+        node2args = [\"-blockprioritysize=0\", \"-blockmaxsize=8000\", \"-maxorphantx=1000\", \"-relaypriority=0\"]\n \n         self.nodes.append(start_node(2, self.options.tmpdir, node2args))\n         connect_nodes(self.nodes[0], 2)\n@@ -229,22 +240,19 @@ def run_test(self):\n         self.fees_per_kb = []\n         self.memutxo = []\n         self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting\n-        print(\"Checking estimates for 1/2/3/6/15/25 blocks\")\n-        print(\"Creating transactions and mining them with a huge block size\")\n-        # Create transactions and mine 20 big blocks with node 0 such that the mempool is always emptied\n-        self.transact_and_mine(30, self.nodes[0])\n-        check_estimates(self.nodes[1], self.fees_per_kb, 1)\n+        print(\"Will output estimates for 1/2/3/6/15/25 blocks\")\n \n-        print(\"Creating transactions and mining them with a block size that can't keep up\")\n-        # Create transactions and mine 30 small blocks with node 2, but create txs faster than we can mine\n-        self.transact_and_mine(20, self.nodes[2])\n-        check_estimates(self.nodes[1], self.fees_per_kb, 3)\n+        for i in xrange(2):\n+            print(\"Creating transactions and mining them with a block size that can't keep up\")\n+            # Create transactions and mine 10 small blocks with node 2, but create txs faster than we can mine\n+            self.transact_and_mine(10, self.nodes[2])\n+            check_estimates(self.nodes[1], self.fees_per_kb, 14)\n \n-        print(\"Creating transactions and mining them at a block size that is just big enough\")\n-        # Generate transactions while mining 40 more blocks, this time with node1\n-        # which mines blocks with capacity just above the rate that transactions are being created\n-        self.transact_and_mine(40, self.nodes[1])\n-        check_estimates(self.nodes[1], self.fees_per_kb, 2)\n+            print(\"Creating transactions and mining them at a block size that is just big enough\")\n+            # Generate transactions while mining 10 more blocks, this time with node1\n+            # which mines blocks with capacity just above the rate that transactions are being created\n+            self.transact_and_mine(10, self.nodes[1])\n+            check_estimates(self.nodes[1], self.fees_per_kb, 2)\n \n         # Finish by mining a normal-sized block:\n         while len(self.nodes[1].getrawmempool()) > 0:"
      },
      {
        "sha": "cab5819017e9b897b4a8c61c01462ae6eb3bdf6a",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "patch": "@@ -96,6 +96,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getrawmempool\", 0 },\n     { \"estimatefee\", 0 },\n     { \"estimatepriority\", 0 },\n+    { \"estimatesmartfee\", 0 },\n+    { \"estimatesmartpriority\", 0 },\n     { \"prioritisetransaction\", 1 },\n     { \"prioritisetransaction\", 2 },\n     { \"setban\", 2 },"
      },
      {
        "sha": "38f3609224e1c25acf675ab011b620b2835916a7",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "patch": "@@ -726,3 +726,75 @@ UniValue estimatepriority(const UniValue& params, bool fHelp)\n \n     return mempool.estimatePriority(nBlocks);\n }\n+\n+UniValue estimatesmartfee(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"estimatesmartfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n+            \"for which the estimate is valid.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,     (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate for any number of blocks.\\n\"\n+            \"However it will not return a value below the mempool reject fee.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimatesmartfee\", \"6\")\n+            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+\n+    int nBlocks = params[0].get_int();\n+\n+    UniValue result(UniValue::VOBJ);\n+    int answerFound;\n+    CFeeRate feeRate = mempool.estimateSmartFee(nBlocks, &answerFound);\n+    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n+    result.push_back(Pair(\"blocks\", answerFound));\n+    return result;\n+}\n+\n+UniValue estimatesmartpriority(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"estimatesmartpriority nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nEstimates the approximate priority a zero-fee transaction needs to begin\\n\"\n+            \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n+            \"for which the estimate is valid.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"priority\\\" : x.x,    (numeric) estimated priority\\n\"\n+            \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate for any number of blocks.\\n\"\n+            \"However if the mempool reject fee is set it will return 1e9 * MAX_MONEY.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimatesmartpriority\", \"6\")\n+            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+\n+    int nBlocks = params[0].get_int();\n+\n+    UniValue result(UniValue::VOBJ);\n+    int answerFound;\n+    double priority = mempool.estimateSmartPriority(nBlocks, &answerFound);\n+    result.push_back(Pair(\"priority\", priority));\n+    result.push_back(Pair(\"blocks\", answerFound));\n+    return result;\n+}"
      },
      {
        "sha": "83d2c2d5037fcd054f00941a5dbf6e55c35aa1ae",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "patch": "@@ -319,6 +319,8 @@ static const CRPCCommand vRPCCommands[] =\n     { \"util\",               \"verifymessage\",          &verifymessage,          true  },\n     { \"util\",               \"estimatefee\",            &estimatefee,            true  },\n     { \"util\",               \"estimatepriority\",       &estimatepriority,       true  },\n+    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true  },\n+    { \"util\",               \"estimatesmartpriority\",  &estimatesmartpriority,  true  },\n \n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },"
      },
      {
        "sha": "fc88f82be8b5688b7ab7462d83866b2e66a18ac6",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "patch": "@@ -193,6 +193,8 @@ extern UniValue getblocktemplate(const UniValue& params, bool fHelp);\n extern UniValue submitblock(const UniValue& params, bool fHelp);\n extern UniValue estimatefee(const UniValue& params, bool fHelp);\n extern UniValue estimatepriority(const UniValue& params, bool fHelp);\n+extern UniValue estimatesmartfee(const UniValue& params, bool fHelp);\n+extern UniValue estimatesmartpriority(const UniValue& params, bool fHelp);\n \n extern UniValue getnewaddress(const UniValue& params, bool fHelp); // in rpcwallet.cpp\n extern UniValue getaccountaddress(const UniValue& params, bool fHelp);"
      }
    ]
  },
  {
    "sha": "e30443244a7a50f2db70e593ec8a57e5086db3d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzA0NDMyNDRhN2E1MGYyZGI3MGU1OTNlYzhhNTdlNTA4NmRiM2Q5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-11-24T13:53:14Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-11-24T13:53:14Z"
      },
      "message": "Pass reference to estimateSmartFee and cleanup whitespace",
      "tree": {
        "sha": "cf2d82fbe7ddf299852aaf04c7ca55f374855a7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf2d82fbe7ddf299852aaf04c7ca55f374855a7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e30443244a7a50f2db70e593ec8a57e5086db3d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30443244a7a50f2db70e593ec8a57e5086db3d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e30443244a7a50f2db70e593ec8a57e5086db3d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30443244a7a50f2db70e593ec8a57e5086db3d9/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56106a3300f844afcadf6dce50d5ef1d337f50b9"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "980ecf10dfc96f600345e8760e2e071cf38a89e2",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=e30443244a7a50f2db70e593ec8a57e5086db3d9",
        "patch": "@@ -505,7 +505,7 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool)\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n@@ -522,7 +522,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n         *answerFoundAtTarget = confTarget - 1;\n \n     // If mempool is limiting txs , return at least the min fee from the mempool\n-    CAmount minPoolFee = pool->GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     if (minPoolFee > 0 && minPoolFee > median)\n         return CFeeRate(minPoolFee);\n \n@@ -541,7 +541,7 @@ double CBlockPolicyEstimator::estimatePriority(int confTarget)\n     return priStats.EstimateMedianVal(confTarget, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n }\n \n-double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool)\n+double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n@@ -550,7 +550,7 @@ double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerF\n         return -1;\n \n     // If mempool is limiting txs, no priority txs are allowed\n-    CAmount minPoolFee = pool->GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     if (minPoolFee > 0)\n         return INF_PRIORITY;\n \n@@ -562,7 +562,6 @@ double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerF\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget - 1;\n \n-\n     return median;\n }\n "
      },
      {
        "sha": "7a293267d42d0c33149d533addb3343844fd2889",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=e30443244a7a50f2db70e593ec8a57e5086db3d9",
        "patch": "@@ -247,7 +247,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool);\n+    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n \n     /** Return a priority estimate */\n     double estimatePriority(int confTarget);\n@@ -256,7 +256,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool);\n+    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n \n     /** Write estimation data to a file */\n     void Write(CAutoFile& fileout);"
      },
      {
        "sha": "ec7971c2f1cca50586da420c888608116594ec9a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e30443244a7a50f2db70e593ec8a57e5086db3d9",
        "patch": "@@ -704,7 +704,7 @@ CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, this);\n+    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, *this);\n }\n double CTxMemPool::estimatePriority(int nBlocks) const\n {\n@@ -714,7 +714,7 @@ double CTxMemPool::estimatePriority(int nBlocks) const\n double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, this);\n+    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, *this);\n }\n \n bool"
      },
      {
        "sha": "cd5f9042f36e8982193b9ae90759c24e7a3a84f3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e30443244a7a50f2db70e593ec8a57e5086db3d9",
        "patch": "@@ -2036,7 +2036,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     double dPriorityNeeded = mempool.estimateSmartPriority(nTxConfirmTarget);\n                     // Require at least hard-coded AllowFree.\n                     if (dPriority >= dPriorityNeeded && AllowFree(dPriority))\n-                            break;\n+                        break;\n                 }\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);"
      }
    ]
  }
]