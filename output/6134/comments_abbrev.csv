jgarzik,2015-09-15T17:32:11Z,Seems quite reasonable - ut ACK\n,https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-140474419,140474419,
MarcoFalke,2015-09-20T16:57:22Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-141810898,141810898,
morcos,2015-10-16T16:48:34Z,"OK I reworked this to be a bit better, and combined it with the patch that increases the success threshold to 95%.\n\n@jonasschnelli I did something much simpler in the interface.  The slider just indicates the # of blocks for which your fee estimate was valid.  Perhaps we need to consider some kind of additional UI element that would explain to people why they aren't able to get an estimate for a",https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-148765848,148765848,
morcos,2015-11-10T23:29:53Z,"The last commit is as of yet untested, but should resolve some of the issues around accidentally generating transactions that wouldn't be accepted to your own mempool\n",https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-155601549,155601549,
jonasschnelli,2015-11-13T19:58:03Z,"Needs rebase (trivial `main.h` conflict).\nTested a bit.\n\nQT: Probably not related to this PR, but is there a reason why the slider – by default – is on the left side ""slow confirmation time"" and not at the very right side? I guess less then <1% of transactions aim for confirmation >=25blocks.\n\nQT: In my case (mainnet at current height), num-blocks 25 till 18 had the same fee. This feels bad f",https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-156541793,156541793,
morcos,2015-11-13T22:04:28Z,"@jonasschnelli This PR should prevent getting a -1 unless you directly call the RPC call estimatefee.  I might still expose estimateapproxfee, but for anyone using GUI or wallet code that automatically generates fee, they should now get the best answer possible.  I figured that for outside users, they could emulate the logic of estimateapproxfee themselves for now.  In the future I agree there sho",https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-156571950,156571950,
morcos,2015-11-14T19:02:27Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-156734259,156734259,
gmaxwell,2015-11-14T20:56:52Z,Concept(s) ACK.\n,https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-156745548,156745548,
morcos,2015-11-15T17:59:42Z,added some checks in the unit test and exposed the functions via RPC (with a warning) and tested in the RPC test.\n,https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-156839819,156839819,
jonasschnelli,2015-11-16T20:07:16Z,Concept ACK. Plans to test this soon.\n,https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-157154908,157154908,
morcos,2015-11-16T20:44:46Z,Rebased with a name change to estimateSmartFee instead of Approx\n,https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-157163803,157163803,
sdaftuar,2015-11-17T17:50:14Z,ACK apart from those nits\n,https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-157451133,157451133,
jtimon,2015-11-18T15:49:20Z,"Concept ACK with a very fast review. Again, this would be simpler if there was no priority...\n",https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-157755539,157755539,
sdaftuar,2015-11-24T13:52:57Z,Addressed nits.\n,https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-159274080,159274080,
jtimon,2015-11-24T14:28:26Z,"My main nit hasn't been addressed, which is not creating a new circular dependency (currently CTxMemPool depends on CBlockPolicyEstimator, but CBlockPolicyEstimator doesn't depend on CTxMemPool until this PR) that is unnecessary (as shown in https://github.com/jtimon/bitcoin/commit/6963b9ccb2c889564a2e0239aa73f03f6d406784 ).\n",https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-159282982,159282982,
jtimon,2015-11-27T12:42:39Z,I guess I'll create a new PR removing the new and unnecessary circular dependency introduced...\n,https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-160132043,160132043,
jtimon,2015-11-27T14:04:55Z,Opened #7115 to fix the new circular dependency introduced despite my insistence and despite coding the commit to be squashed here to avoid that circular dependency...\n,https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-160146271,160146271,
jtimon,2015-12-01T12:07:19Z,"For future reference NACK this PR. I'm really disappointed about @morcos being so stubborn and insisting on introducing the unnecessary circular dependency and that he can even accept the most minimal way to remove it (see the first commit in #7115 ), but I like circular discussions even less than I like circular dependencies and nobody else seems to care enough. So let's leave the circular depend",https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-160948893,160948893,
laanwj,2015-12-01T12:11:35Z,"> but then I need to at least do what I should have done from the beginning and will do next time: nack instead of coding nits to be ignored. NACK nack nacking...\n\nThe practical problem is that we can't hold up required changes forever because they have some coding nits. There's, unfortunately, a compromise between accumulating some technical debt or having any single change take forever because",https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-160949619,160949619,
jtimon,2015-12-01T12:16:41Z,"This was merged without my nit and morcos insists on nacking any code that removes the circular dependency he unnecessarily introduced. I think it has little to do with ""prs taking forever"".  But hey I'm in favor of merging bip68 and other PRs that are taking forever if you want to change the subject.\n",https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-160950671,160950671,
sipa,2015-12-01T12:28:03Z,He does not nack removing the circular dependency. He disagrees with making\nthe estimation code users responsible for knowing there is a limit.\n,https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-160954041,160954041,
jtimon,2015-12-01T12:35:22Z,"See yesterday's IRC discussion, yes, he even nacks the most minimal way to remove the circular dependency (the first commit currently in #7115  ) and he will not provide an alternative because he does not want to remove the dependency.\n",https://github.com/bitcoin/bitcoin/pull/6134#issuecomment-160955429,160955429,
jtimon,2015-11-18T15:47:48Z,"Can `GetArg(""-maxmempool"", DEFAULT_MAX_MEMPOOL_SIZE)` be an attribute so that it can be calculated just once in the constructor?\n",https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45216058,45216058,src/policy/fees.cpp
jtimon,2015-11-18T15:50:53Z,style nit: https://github.com/bitcoin/bitcoin/blob/master/src/.clang-format#L41\n,https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45216518,45216518,src/policy/fees.cpp
jtimon,2015-11-18T15:52:14Z,style nit: too many new lines\n,https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45216738,45216738,src/policy/fees.cpp
MarcoFalke,2015-11-18T15:56:19Z,Someone should prepare `clang-format-diff.py` for use in bitcoin?\n,https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45217357,45217357,src/policy/fees.cpp
morcos,2015-11-18T16:06:20Z,"Sure.  But honestly it seems a bit silly to me that this is not an attribute of the mempool.  I understand the point of keeping policy out of the mempool, but why should you need to be aware of the max size of the mempool just to ask what it's min fee is.   The one advantage I can see for the current structure is that you can call TrimToSize with some other number to do testing.\nPerhaps TrimToSiz",https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45218874,45218874,src/policy/fees.cpp
jtimon,2015-11-18T16:36:21Z,"Yes, you are right: it should probably be an attribute of CTxMemPool instead, and minPoolFee could be passed here instead of the CTxMemPool pointer. In fact, CTxMemPool depend on CBlockPolicyEstimator, so CBlockPolicyEstimator shouldn't depend on CTxMemPool too (sigh, I had a branch in which neither one depended on the other at least once but now just https://github.com/jtimon/bitcoin/commits/poli",https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45223295,45223295,src/policy/fees.cpp
morcos,2015-11-18T16:42:33Z,"You can't pass the minFee it's dynamic, you have to ask the mempool for it.\nI think the CBlockPolicyEstimator should come out of the mempool though for sure.  \n",https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45224193,45224193,src/policy/fees.cpp
jtimon,2015-11-18T17:09:04Z,What I'm saying is you can ask the mempool before calling this (ie rplace the pool pointer parameter with const CAmount& minPoolFee in this new method).\n,https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45228107,45228107,src/policy/fees.cpp
jtimon,2015-11-18T21:41:49Z,"Please look at https://github.com/jtimon/bitcoin/tree/6134-nits\nBy the way, we should solve the circular dependency by separating CTxMemPoolEntry. That way txmempool.cpp includes policy/fees.h, and policy/fees.cpp includes txmempoolentry.h (but not txmempool.h). Just came to mind again, not saying is within the scope of this PR.\n",https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45264672,45264672,src/policy/fees.cpp
jtimon,2015-11-19T19:06:28Z,"Yes, we have talked about this many times, but so far nobody has done it.\n",https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45384887,45384887,src/policy/fees.cpp
MarcoFalke,2015-11-19T19:18:21Z,I could do it (it's just like https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-formatpy) but when no one is actually using it...\n,https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45386518,45386518,src/policy/fees.cpp
jtimon,2015-11-20T14:31:57Z,"I didn't even knew that already existed, thanks. The problem with that is that ""This should only be applied to new files or files which are currently not actively developed on"". It would be nice (but more complicated) to have one that, applied to a specific commit, applies the format rules only on the lines you are touching (otherwise your diffs can get use).\nEDIT: anyway, we can take this to a n",https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45473892,45473892,src/policy/fees.cpp
