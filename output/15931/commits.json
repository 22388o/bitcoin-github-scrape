[
  {
    "sha": "10b4729e33f76092bd8cfa06d1a5e0a066436f76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGI0NzI5ZTMzZjc2MDkyYmQ4Y2ZhMDZkMWE1ZTBhMDY2NDM2Zjc2",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-07-24T19:41:41Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-05T17:59:16Z"
      },
      "message": "Pass block height in Chain::BlockConnected/Chain::BlockDisconnected\n\nTo do so we update CValidationInterface::BlockDisconnect to take a\nCBlockIndex pointing to the block being disconnected.\n\nThis new parameter will be use in the following commit to establish\nwallet height.",
      "tree": {
        "sha": "7ef80f8890067aa49125583624db014a0d6ec1e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ef80f8890067aa49125583624db014a0d6ec1e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10b4729e33f76092bd8cfa06d1a5e0a066436f76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b4729e33f76092bd8cfa06d1a5e0a066436f76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10b4729e33f76092bd8cfa06d1a5e0a066436f76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b4729e33f76092bd8cfa06d1a5e0a066436f76/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "50591f6ec61b802cf4193cdbefcc85ad75716e8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50591f6ec61b802cf4193cdbefcc85ad75716e8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50591f6ec61b802cf4193cdbefcc85ad75716e8d"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 24,
      "deletions": 20
    },
    "files": [
      {
        "sha": "c2a8faf8c3f371ec384154a4826fa81abdce94ec",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=10b4729e33f76092bd8cfa06d1a5e0a066436f76",
        "patch": "@@ -182,11 +182,11 @@ class NotificationsHandlerImpl : public Handler, CValidationInterface\n         const CBlockIndex* index,\n         const std::vector<CTransactionRef>& tx_conflicted) override\n     {\n-        m_notifications->BlockConnected(*block, tx_conflicted);\n+        m_notifications->BlockConnected(*block, tx_conflicted, index->nHeight);\n     }\n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& block) override\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index) override\n     {\n-        m_notifications->BlockDisconnected(*block);\n+        m_notifications->BlockDisconnected(*block, index->nHeight);\n     }\n     void UpdatedBlockTip(const CBlockIndex* index, const CBlockIndex* fork_index, bool is_ibd) override\n     {"
      },
      {
        "sha": "4cb2aba2c99c7439544696493ffc0e6228999436",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=10b4729e33f76092bd8cfa06d1a5e0a066436f76",
        "patch": "@@ -226,8 +226,8 @@ class Chain\n         virtual ~Notifications() {}\n         virtual void TransactionAddedToMempool(const CTransactionRef& tx) {}\n         virtual void TransactionRemovedFromMempool(const CTransactionRef& ptx) {}\n-        virtual void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& tx_conflicted) {}\n-        virtual void BlockDisconnected(const CBlock& block) {}\n+        virtual void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& tx_conflicted, int height) {}\n+        virtual void BlockDisconnected(const CBlock& block, int height) {}\n         virtual void UpdatedBlockTip() {}\n         virtual void ChainStateFlushed(const CBlockLocator& locator) {}\n     };"
      },
      {
        "sha": "26ca9a31627ba9d571d36706c8419ba835bcd690",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=10b4729e33f76092bd8cfa06d1a5e0a066436f76",
        "patch": "@@ -40,9 +40,10 @@ struct TestSubscriber : public CValidationInterface {\n         m_expected_tip = block->GetHash();\n     }\n \n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& block) override\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex) override\n     {\n         BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->GetBlockHash());\n \n         m_expected_tip = block->hashPrevBlock;\n     }"
      },
      {
        "sha": "7be97df78a605dc9200641b430549827a7edc702",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=10b4729e33f76092bd8cfa06d1a5e0a066436f76",
        "patch": "@@ -2435,7 +2435,7 @@ bool CChainState::DisconnectTip(BlockValidationState& state, const CChainParams&\n     UpdateTip(pindexDelete->pprev, chainparams);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n-    GetMainSignals().BlockDisconnected(pblock);\n+    GetMainSignals().BlockDisconnected(pblock, pindexDelete);\n     return true;\n }\n "
      },
      {
        "sha": "663308bae9518bb8c9eee47032abb05c5d1a16cc",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=10b4729e33f76092bd8cfa06d1a5e0a066436f76",
        "patch": "@@ -29,7 +29,7 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n     boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n     boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n@@ -92,7 +92,7 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     conns.UpdatedBlockTip = g_signals.m_internals->UpdatedBlockTip.connect(std::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n     conns.TransactionAddedToMempool = g_signals.m_internals->TransactionAddedToMempool.connect(std::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, std::placeholders::_1));\n     conns.BlockConnected = g_signals.m_internals->BlockConnected.connect(std::bind(&CValidationInterface::BlockConnected, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n-    conns.BlockDisconnected = g_signals.m_internals->BlockDisconnected.connect(std::bind(&CValidationInterface::BlockDisconnected, pwalletIn, std::placeholders::_1));\n+    conns.BlockDisconnected = g_signals.m_internals->BlockDisconnected.connect(std::bind(&CValidationInterface::BlockDisconnected, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n     conns.TransactionRemovedFromMempool = g_signals.m_internals->TransactionRemovedFromMempool.connect(std::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, std::placeholders::_1));\n     conns.ChainStateFlushed = g_signals.m_internals->ChainStateFlushed.connect(std::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, std::placeholders::_1));\n     conns.BlockChecked = g_signals.m_internals->BlockChecked.connect(std::bind(&CValidationInterface::BlockChecked, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n@@ -156,9 +156,10 @@ void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, c\n     });\n }\n \n-void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n-        m_internals->BlockDisconnected(pblock);\n+void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n+{\n+    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, this] {\n+        m_internals->BlockDisconnected(pblock, pindex);\n     });\n }\n "
      },
      {
        "sha": "6a8059a6a01e600c08467807ae55e74592f80738",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=10b4729e33f76092bd8cfa06d1a5e0a066436f76",
        "patch": "@@ -114,7 +114,7 @@ class CValidationInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n+    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) {}\n     /**\n      * Notifies listeners of the new active block chain on-disk.\n      *\n@@ -178,7 +178,7 @@ class CMainSignals {\n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &, const CBlockIndex* pindex);\n     void ChainStateFlushed(const CBlockLocator &);\n     void BlockChecked(const CBlock&, const BlockValidationState&);\n     void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);"
      },
      {
        "sha": "365a296e6f140a4fba0ae05f3ae5fc516a67a8d7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=10b4729e33f76092bd8cfa06d1a5e0a066436f76",
        "patch": "@@ -1052,7 +1052,8 @@ void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n     }\n }\n \n-void CWallet::BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted) {\n+void CWallet::BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted, int height)\n+{\n     const uint256& block_hash = block.GetHash();\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n@@ -1068,7 +1069,8 @@ void CWallet::BlockConnected(const CBlock& block, const std::vector<CTransaction\n     m_last_block_processed = block_hash;\n }\n \n-void CWallet::BlockDisconnected(const CBlock& block) {\n+void CWallet::BlockDisconnected(const CBlock& block, int height)\n+{\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n "
      },
      {
        "sha": "dba8a8cc08d01b9315a390cd0bd8194327c8e75b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=10b4729e33f76092bd8cfa06d1a5e0a066436f76",
        "patch": "@@ -855,8 +855,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     void LoadToWallet(CWalletTx& wtxIn) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted) override;\n-    void BlockDisconnected(const CBlock& block) override;\n+    void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted, int height) override;\n+    void BlockDisconnected(const CBlock& block, int height) override;\n     void UpdatedBlockTip() override;\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n "
      },
      {
        "sha": "b3b97b6a2ae3c7a2c1a8f112e3c9f698c3872c63",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=10b4729e33f76092bd8cfa06d1a5e0a066436f76",
        "patch": "@@ -185,7 +185,7 @@ void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBloc\n     }\n }\n \n-void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock)\n+void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexDisconnected)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {\n         // Do a normal notify for each transaction removed in block disconnection"
      },
      {
        "sha": "8bf9b0ba470b6fa94cb39b886960650f51c39494",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b4729e33f76092bd8cfa06d1a5e0a066436f76/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=10b4729e33f76092bd8cfa06d1a5e0a066436f76",
        "patch": "@@ -27,7 +27,7 @@ class CZMQNotificationInterface final : public CValidationInterface\n     // CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexDisconnected) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n \n private:"
      }
    ]
  },
  {
    "sha": "5aacc3eff15b9b5bdc951f1e274f00d581f63bce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWFjYzNlZmYxNWI5YjViZGM5NTFmMWUyNzRmMDBkNTgxZjYzYmNl",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-20T16:02:52Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-05T17:59:16Z"
      },
      "message": "Add m_last_block_processed_height field in CWallet\n\nAt BlockConnected/BlockDisconnected, we rely on height of block\nitself to know current height of wallet",
      "tree": {
        "sha": "cdfccd67221dfa0ea43311e5fb99f2b74140e4f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdfccd67221dfa0ea43311e5fb99f2b74140e4f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5aacc3eff15b9b5bdc951f1e274f00d581f63bce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aacc3eff15b9b5bdc951f1e274f00d581f63bce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5aacc3eff15b9b5bdc951f1e274f00d581f63bce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aacc3eff15b9b5bdc951f1e274f00d581f63bce/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "10b4729e33f76092bd8cfa06d1a5e0a066436f76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b4729e33f76092bd8cfa06d1a5e0a066436f76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10b4729e33f76092bd8cfa06d1a5e0a066436f76"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 54,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6e009145a243bd09d84f89c5d92652f585a7844f",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aacc3eff15b9b5bdc951f1e274f00d581f63bce/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aacc3eff15b9b5bdc951f1e274f00d581f63bce/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=5aacc3eff15b9b5bdc951f1e274f00d581f63bce",
        "patch": "@@ -139,10 +139,12 @@ void TestGUI(interfaces::Node& node)\n     wallet->LoadWallet(firstRun);\n     {\n         auto spk_man = wallet->GetLegacyScriptPubKeyMan();\n+        auto locked_chain = wallet->chain().lock();\n         LOCK(wallet->cs_wallet);\n         AssertLockHeld(spk_man->cs_wallet);\n         wallet->SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), wallet->m_default_address_type), \"\", \"receive\");\n         spk_man->AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n+        wallet->SetLastBlockProcessed(105, ::ChainActive().Tip()->GetBlockHash());\n     }\n     {\n         auto locked_chain = wallet->chain().lock();"
      },
      {
        "sha": "b9328634e55cc1a6200f40ed77a033f1534b4a71",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aacc3eff15b9b5bdc951f1e274f00d581f63bce/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aacc3eff15b9b5bdc951f1e274f00d581f63bce/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=5aacc3eff15b9b5bdc951f1e274f00d581f63bce",
        "patch": "@@ -50,6 +50,10 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Verify ScanForWalletTransactions accommodates a null start block.\n     {\n         CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        {\n+            LOCK(wallet.cs_wallet);\n+            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+        }\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -65,6 +69,10 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // and new block files.\n     {\n         CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        {\n+            LOCK(wallet.cs_wallet);\n+            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+        }\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -84,6 +92,10 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // file.\n     {\n         CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        {\n+            LOCK(wallet.cs_wallet);\n+            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+        }\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -102,6 +114,10 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Verify ScanForWalletTransactions scans no blocks.\n     {\n         CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        {\n+            LOCK(wallet.cs_wallet);\n+            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+        }\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -258,6 +274,7 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     LockAssertion lock(::cs_main);\n     LOCK(wallet.cs_wallet);\n     AssertLockHeld(spk_man->cs_wallet);\n+    wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n \n     wtx.SetConf(CWalletTx::Status::CONFIRMED, ::ChainActive().Tip()->GetBlockHash(), 0);\n \n@@ -435,6 +452,10 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n         wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+        {\n+            LOCK(wallet->cs_wallet);\n+            wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+        }\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n@@ -473,6 +494,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n \n         LOCK(cs_main);\n         LOCK(wallet->cs_wallet);\n+        wallet->SetLastBlockProcessed(wallet->GetLastBlockHeight() + 1, ::ChainActive().Tip()->GetBlockHash());\n         auto it = wallet->mapWallet.find(tx->GetHash());\n         BOOST_CHECK(it != wallet->mapWallet.end());\n         it->second.SetConf(CWalletTx::Status::CONFIRMED, ::ChainActive().Tip()->GetBlockHash(), 1);"
      },
      {
        "sha": "6c5754aa1fe716d37465bb5de3d5872647f4eda0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aacc3eff15b9b5bdc951f1e274f00d581f63bce/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aacc3eff15b9b5bdc951f1e274f00d581f63bce/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5aacc3eff15b9b5bdc951f1e274f00d581f63bce",
        "patch": "@@ -1058,15 +1058,15 @@ void CWallet::BlockConnected(const CBlock& block, const std::vector<CTransaction\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n \n+    m_last_block_processed_height = height;\n+    m_last_block_processed = block_hash;\n     for (size_t i = 0; i < block.vtx.size(); i++) {\n         SyncTransaction(block.vtx[i], CWalletTx::Status::CONFIRMED, block_hash, i);\n         TransactionRemovedFromMempool(block.vtx[i]);\n     }\n     for (const CTransactionRef& ptx : vtxConflicted) {\n         TransactionRemovedFromMempool(ptx);\n     }\n-\n-    m_last_block_processed = block_hash;\n }\n \n void CWallet::BlockDisconnected(const CBlock& block, int height)\n@@ -1078,6 +1078,8 @@ void CWallet::BlockDisconnected(const CBlock& block, int height)\n     // be unconfirmed, whether or not the transaction is added back to the mempool.\n     // User may have to call abandontransaction again. It may be addressed in the\n     // future with a stickier abandoned state or even removing abandontransaction call.\n+    m_last_block_processed_height = height - 1;\n+    m_last_block_processed = block.hashPrevBlock;\n     for (const CTransactionRef& ptx : block.vtx) {\n         SyncTransaction(ptx, CWalletTx::Status::UNCONFIRMED, {} /* block hash */, 0 /* position in block */);\n     }\n@@ -3785,8 +3787,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     const Optional<int> tip_height = locked_chain->getHeight();\n     if (tip_height) {\n         walletInstance->m_last_block_processed = locked_chain->getBlockHash(*tip_height);\n+        walletInstance->m_last_block_processed_height = *tip_height;\n     } else {\n         walletInstance->m_last_block_processed.SetNull();\n+        walletInstance->m_last_block_processed_height = -1;\n     }\n \n     if (tip_height && *tip_height != rescan_height)"
      },
      {
        "sha": "7c22f06e2cc983be49fbc034e72770791eaac63b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aacc3eff15b9b5bdc951f1e274f00d581f63bce/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aacc3eff15b9b5bdc951f1e274f00d581f63bce/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5aacc3eff15b9b5bdc951f1e274f00d581f63bce",
        "patch": "@@ -679,12 +679,18 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n      * The following is used to keep track of how far behind the wallet is\n      * from the chain sync, and to allow clients to block on us being caught up.\n      *\n-     * Note that this is *not* how far we've processed, we may need some rescan\n-     * to have seen all transactions in the chain, but is only used to track\n-     * live BlockConnected callbacks.\n+     * Processed hash is a pointer on node's tip and doesn't imply that the wallet\n+     * has scanned sequentially all blocks up to this one.\n      */\n     uint256 m_last_block_processed GUARDED_BY(cs_wallet);\n \n+    /* Height of last block processed is used by wallet to know depth of transactions\n+     * without relying on Chain interface beyond asynchronous updates. For safety, we\n+     * initialize it to -1. Height is a pointer on node's tip and doesn't imply\n+     * that the wallet has scanned sequentially all blocks up to this one.\n+     */\n+    int m_last_block_processed_height GUARDED_BY(cs_wallet) = -1;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -1129,6 +1135,21 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     LegacyScriptPubKeyMan::WatchKeyMap& mapWatchKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapWatchKeys;\n     WalletBatch*& encrypted_batch GUARDED_BY(cs_wallet) = m_spk_man->encrypted_batch;\n     using CryptedKeyMap = LegacyScriptPubKeyMan::CryptedKeyMap;\n+\n+    /** Get last block processed height */\n+    int GetLastBlockHeight() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n+    {\n+        AssertLockHeld(cs_wallet);\n+        assert(m_last_block_processed_height >= 0);\n+        return m_last_block_processed_height;\n+    };\n+    /** Set last block processed height, currently only use in unit test */\n+    void SetLastBlockProcessed(int block_height, uint256 block_hash) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n+    {\n+        AssertLockHeld(cs_wallet);\n+        m_last_block_processed_height = block_height;\n+        m_last_block_processed = block_hash;\n+    };\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "9700fcb47feca9d78e005b8d18b41148c8f6b25f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzAwZmNiNDdmZWNhOWQ3OGUwMDViOGQxOGI0MTE0OGM4ZjZiMjVm",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-10-24T16:53:57Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-06T16:35:39Z"
      },
      "message": "Replace CWalletTx::SetConf by Confirmation initialization list",
      "tree": {
        "sha": "b6e966d1a17f966139975649c6e125405174cbfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6e966d1a17f966139975649c6e125405174cbfc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9700fcb47feca9d78e005b8d18b41148c8f6b25f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9700fcb47feca9d78e005b8d18b41148c8f6b25f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9700fcb47feca9d78e005b8d18b41148c8f6b25f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9700fcb47feca9d78e005b8d18b41148c8f6b25f/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5aacc3eff15b9b5bdc951f1e274f00d581f63bce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aacc3eff15b9b5bdc951f1e274f00d581f63bce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5aacc3eff15b9b5bdc951f1e274f00d581f63bce"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 29,
      "deletions": 34
    },
    "files": [
      {
        "sha": "bc6df1cc99eb5ade24ff9f378e855cf64764f956",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9700fcb47feca9d78e005b8d18b41148c8f6b25f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9700fcb47feca9d78e005b8d18b41148c8f6b25f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9700fcb47feca9d78e005b8d18b41148c8f6b25f",
        "patch": "@@ -382,7 +382,8 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Something wrong with merkleblock\");\n     }\n \n-    wtx.SetConf(CWalletTx::Status::CONFIRMED, merkleBlock.header.GetHash(), txnIndex);\n+    CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, merkleBlock.header.GetHash(), txnIndex);\n+    wtx.m_confirm = confirm;\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);"
      },
      {
        "sha": "b6acaf4d9998a2a0efd4fe0c1945dc56d6f1d14e",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9700fcb47feca9d78e005b8d18b41148c8f6b25f/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9700fcb47feca9d78e005b8d18b41148c8f6b25f/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=9700fcb47feca9d78e005b8d18b41148c8f6b25f",
        "patch": "@@ -276,7 +276,8 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     AssertLockHeld(spk_man->cs_wallet);\n     wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n \n-    wtx.SetConf(CWalletTx::Status::CONFIRMED, ::ChainActive().Tip()->GetBlockHash(), 0);\n+    CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, ::ChainActive().Tip()->GetBlockHash(), 0);\n+    wtx.m_confirm = confirm;\n \n     // Call GetImmatureCredit() once before adding the key to the wallet to\n     // cache the current immature credit amount, which is 0.\n@@ -317,7 +318,8 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n         wallet.AddToWallet(wtx);\n     }\n     if (block) {\n-        wtx.SetConf(CWalletTx::Status::CONFIRMED, block->GetBlockHash(), 0);\n+        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, block->GetBlockHash(), 0);\n+        wtx.m_confirm = confirm;\n     }\n     wallet.AddToWallet(wtx);\n     return wallet.mapWallet.at(wtx.GetHash()).nTimeSmart;\n@@ -497,7 +499,8 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         wallet->SetLastBlockProcessed(wallet->GetLastBlockHeight() + 1, ::ChainActive().Tip()->GetBlockHash());\n         auto it = wallet->mapWallet.find(tx->GetHash());\n         BOOST_CHECK(it != wallet->mapWallet.end());\n-        it->second.SetConf(CWalletTx::Status::CONFIRMED, ::ChainActive().Tip()->GetBlockHash(), 1);\n+        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, ::ChainActive().Tip()->GetBlockHash(), 1);\n+        it->second.m_confirm = confirm;\n         return it->second;\n     }\n "
      },
      {
        "sha": "2ee1d001b917f3d51f6484c8ae23bc0488b5d5cf",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 23,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9700fcb47feca9d78e005b8d18b41148c8f6b25f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9700fcb47feca9d78e005b8d18b41148c8f6b25f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9700fcb47feca9d78e005b8d18b41148c8f6b25f",
        "patch": "@@ -848,19 +848,19 @@ void CWallet::LoadToWallet(CWalletTx& wtxIn)\n     }\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Status status, const uint256& block_hash, int posInBlock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool fUpdate)\n {\n     const CTransaction& tx = *ptx;\n     {\n         AssertLockHeld(cs_wallet);\n \n-        if (!block_hash.IsNull()) {\n+        if (!confirm.hashBlock.IsNull()) {\n             for (const CTxIn& txin : tx.vin) {\n                 std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n                 while (range.first != range.second) {\n                     if (range.first->second != tx.GetHash()) {\n-                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(block_hash, range.first->second);\n+                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), confirm.hashBlock.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                        MarkConflicted(confirm.hashBlock, range.first->second);\n                     }\n                     range.first++;\n                 }\n@@ -888,7 +888,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::St\n \n             // Block disconnection override an abandoned tx as unconfirmed\n             // which means user may have to call abandontransaction again\n-            wtx.SetConf(status, block_hash, posInBlock);\n+            wtx.m_confirm = confirm;\n \n             return AddToWallet(wtx, false);\n         }\n@@ -1022,9 +1022,9 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Status status, const uint256& block_hash, int posInBlock, bool update_tx)\n+void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool update_tx)\n {\n-    if (!AddToWalletIfInvolvingMe(ptx, status, block_hash, posInBlock, update_tx))\n+    if (!AddToWalletIfInvolvingMe(ptx, confirm, update_tx))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -1036,7 +1036,8 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Status stat\n void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n-    SyncTransaction(ptx, CWalletTx::Status::UNCONFIRMED, {} /* block hash */, 0 /* position in block */);\n+    CWalletTx::Confirmation confirm(CWalletTx::Status::UNCONFIRMED, {}, 0);\n+    SyncTransaction(ptx, confirm);\n \n     auto it = mapWallet.find(ptx->GetHash());\n     if (it != mapWallet.end()) {\n@@ -1061,7 +1062,8 @@ void CWallet::BlockConnected(const CBlock& block, const std::vector<CTransaction\n     m_last_block_processed_height = height;\n     m_last_block_processed = block_hash;\n     for (size_t i = 0; i < block.vtx.size(); i++) {\n-        SyncTransaction(block.vtx[i], CWalletTx::Status::CONFIRMED, block_hash, i);\n+        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, m_last_block_processed, i);\n+        SyncTransaction(block.vtx[i], confirm);\n         TransactionRemovedFromMempool(block.vtx[i]);\n     }\n     for (const CTransactionRef& ptx : vtxConflicted) {\n@@ -1081,7 +1083,8 @@ void CWallet::BlockDisconnected(const CBlock& block, int height)\n     m_last_block_processed_height = height - 1;\n     m_last_block_processed = block.hashPrevBlock;\n     for (const CTransactionRef& ptx : block.vtx) {\n-        SyncTransaction(ptx, CWalletTx::Status::UNCONFIRMED, {} /* block hash */, 0 /* position in block */);\n+        CWalletTx::Confirmation confirm(CWalletTx::Status::UNCONFIRMED, {}, 0);\n+        SyncTransaction(ptx, confirm);\n     }\n }\n \n@@ -1627,7 +1630,8 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n                 break;\n             }\n             for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                SyncTransaction(block.vtx[posInBlock], CWalletTx::Status::CONFIRMED, block_hash, posInBlock, fUpdate);\n+                CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, block_hash, posInBlock);\n+                SyncTransaction(block.vtx[posInBlock], confirm, fUpdate);\n             }\n             // scan succeeded, record block as most recent successfully scanned\n             result.last_scanned_block = block_hash;\n@@ -3918,18 +3922,6 @@ CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn)\n     m_pre_split = false;\n }\n \n-void CWalletTx::SetConf(Status status, const uint256& block_hash, int posInBlock)\n-{\n-    // Update tx status\n-    m_confirm.status = status;\n-\n-    // Update the tx's hashBlock\n-    m_confirm.hashBlock = block_hash;\n-\n-    // set the position of the transaction in the block\n-    m_confirm.nIndex = posInBlock;\n-}\n-\n int CWalletTx::GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const\n {\n     if (isUnconfirmed() || isAbandoned()) return 0;"
      },
      {
        "sha": "10a3e17f471510d3adbe83af0db50bd3732df733",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9700fcb47feca9d78e005b8d18b41148c8f6b25f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9700fcb47feca9d78e005b8d18b41148c8f6b25f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9700fcb47feca9d78e005b8d18b41148c8f6b25f",
        "patch": "@@ -361,9 +361,10 @@ class CWalletTx\n      * where they instead point to block hash and index of the deepest conflicting tx.\n      */\n     struct Confirmation {\n-        Status status = UNCONFIRMED;\n-        uint256 hashBlock = uint256();\n-        int nIndex = 0;\n+        Status status;\n+        uint256 hashBlock;\n+        int nIndex;\n+        Confirmation(Status s = UNCONFIRMED, uint256 h = uint256(), int i = 0) : status(s), hashBlock(h), nIndex(i) {}\n     };\n \n     Confirmation m_confirm;\n@@ -491,8 +492,6 @@ class CWalletTx\n     // in place.\n     std::set<uint256> GetConflicts() const NO_THREAD_SAFETY_ANALYSIS;\n \n-    void SetConf(Status status, const uint256& block_hash, int posInBlock);\n-\n     /**\n      * Return depth of transaction in blockchain:\n      * <0  : conflicts with a transaction this deep in the blockchain\n@@ -642,7 +641,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n      * Abandoned state should probably be more carefully tracked via different\n      * posInBlock signals or by checking mempool presence when necessary.\n      */\n-    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, CWalletTx::Status status, const uint256& block_hash, int posInBlock, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* Mark a transaction (and its in-wallet descendants) as conflicting with a particular block. */\n     void MarkConflicted(const uint256& hashBlock, const uint256& hashTx);\n@@ -654,7 +653,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     /* Used by TransactionAddedToMemorypool/BlockConnected/Disconnected/ScanForWalletTransactions.\n      * Should be called with non-zero block_hash and posInBlock if this is for a transaction that is included in a block. */\n-    void SyncTransaction(const CTransactionRef& tx, CWalletTx::Status status, const uint256& block_hash, int posInBlock = 0, bool update_tx = true) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void SyncTransaction(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool update_tx = true) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::atomic<uint64_t> m_wallet_flags{0};\n "
      }
    ]
  },
  {
    "sha": "5971d3848e09abf571e5308185275296127efca4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTcxZDM4NDhlMDlhYmY1NzFlNTMwODE4NTI3NTI5NjEyN2VmY2E0",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-20T15:22:59Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-06T18:29:53Z"
      },
      "message": "Add block_height field in struct Confirmation\n\nAt wallet loading, we rely on chain state querying to retrieve\nheight of txn, to do so we ensure that lock order is respected\nbetween cs_main and cs_wallet.\n\nIf wallet loaded is the wallet-tool one, all wallet txn will\nshow up with a height of zero. It doesn't matter as confirmation\nheight is not used by wallet-tool.\n\nReorder arguments and document Confirmation calls to avoid\nambiguity.\n\nFixes nits left from #16624",
      "tree": {
        "sha": "d72dc502a73f4e3b955c772225fedfa18be59cc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d72dc502a73f4e3b955c772225fedfa18be59cc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5971d3848e09abf571e5308185275296127efca4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5971d3848e09abf571e5308185275296127efca4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5971d3848e09abf571e5308185275296127efca4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5971d3848e09abf571e5308185275296127efca4/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9700fcb47feca9d78e005b8d18b41148c8f6b25f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9700fcb47feca9d78e005b8d18b41148c8f6b25f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9700fcb47feca9d78e005b8d18b41148c8f6b25f"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 43,
      "deletions": 26
    },
    "files": [
      {
        "sha": "ddb8bfaf17948c453d34435babdf47d315315229",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5971d3848e09abf571e5308185275296127efca4/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5971d3848e09abf571e5308185275296127efca4/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=5971d3848e09abf571e5308185275296127efca4",
        "patch": "@@ -364,10 +364,12 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     std::vector<uint256> vMatch;\n     std::vector<unsigned int> vIndex;\n     unsigned int txnIndex = 0;\n+    Optional<int> height;\n     if (merkleBlock.txn.ExtractMatches(vMatch, vIndex) == merkleBlock.header.hashMerkleRoot) {\n \n         auto locked_chain = pwallet->chain().lock();\n-        if (locked_chain->getBlockHeight(merkleBlock.header.GetHash()) == nullopt) {\n+        height = locked_chain->getBlockHeight(merkleBlock.header.GetHash());\n+        if (height == nullopt) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n         }\n \n@@ -382,7 +384,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Something wrong with merkleblock\");\n     }\n \n-    CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, merkleBlock.header.GetHash(), txnIndex);\n+    CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, *height, merkleBlock.header.GetHash(), txnIndex);\n     wtx.m_confirm = confirm;\n \n     auto locked_chain = pwallet->chain().lock();"
      },
      {
        "sha": "3f0e40149cfb42cb3661d30f82147512a15c6850",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5971d3848e09abf571e5308185275296127efca4/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5971d3848e09abf571e5308185275296127efca4/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=5971d3848e09abf571e5308185275296127efca4",
        "patch": "@@ -276,7 +276,7 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     AssertLockHeld(spk_man->cs_wallet);\n     wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n \n-    CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, ::ChainActive().Tip()->GetBlockHash(), 0);\n+    CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, ::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash(), 0);\n     wtx.m_confirm = confirm;\n \n     // Call GetImmatureCredit() once before adding the key to the wallet to\n@@ -318,7 +318,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n         wallet.AddToWallet(wtx);\n     }\n     if (block) {\n-        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, block->GetBlockHash(), 0);\n+        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, block->nHeight, block->GetBlockHash(), 0);\n         wtx.m_confirm = confirm;\n     }\n     wallet.AddToWallet(wtx);\n@@ -499,7 +499,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         wallet->SetLastBlockProcessed(wallet->GetLastBlockHeight() + 1, ::ChainActive().Tip()->GetBlockHash());\n         auto it = wallet->mapWallet.find(tx->GetHash());\n         BOOST_CHECK(it != wallet->mapWallet.end());\n-        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, ::ChainActive().Tip()->GetBlockHash(), 1);\n+        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, ::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash(), 1);\n         it->second.m_confirm = confirm;\n         return it->second;\n     }"
      },
      {
        "sha": "512273aa822786e81429d7fdcfca22b7e466664d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 15,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5971d3848e09abf571e5308185275296127efca4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5971d3848e09abf571e5308185275296127efca4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5971d3848e09abf571e5308185275296127efca4",
        "patch": "@@ -766,10 +766,12 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n             wtx.m_confirm.status = wtxIn.m_confirm.status;\n             wtx.m_confirm.nIndex = wtxIn.m_confirm.nIndex;\n             wtx.m_confirm.hashBlock = wtxIn.m_confirm.hashBlock;\n+            wtx.m_confirm.block_height = wtxIn.m_confirm.block_height;\n             fUpdated = true;\n         } else {\n             assert(wtx.m_confirm.nIndex == wtxIn.m_confirm.nIndex);\n             assert(wtx.m_confirm.hashBlock == wtxIn.m_confirm.hashBlock);\n+            assert(wtx.m_confirm.block_height == wtxIn.m_confirm.block_height);\n         }\n         if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n         {\n@@ -820,12 +822,22 @@ void CWallet::LoadToWallet(CWalletTx& wtxIn)\n {\n     // If wallet doesn't have a chain (e.g wallet-tool), lock can't be taken.\n     auto locked_chain = LockChain();\n-    // If tx hasn't been reorged out of chain while wallet being shutdown\n-    // change tx status to UNCONFIRMED and reset hashBlock/nIndex.\n-    if (!wtxIn.m_confirm.hashBlock.IsNull()) {\n-        if (locked_chain && !locked_chain->getBlockHeight(wtxIn.m_confirm.hashBlock)) {\n+    if (locked_chain) {\n+        Optional<int> block_height = locked_chain->getBlockHeight(wtxIn.m_confirm.hashBlock);\n+        if (block_height) {\n+            // Update cached block height variable since it not stored in the\n+            // serialized transaction.\n+            wtxIn.m_confirm.block_height = *block_height;\n+        } else if (wtxIn.isConflicted() || wtxIn.isConfirmed()) {\n+            // If tx block (or conflicting block) was reorged out of chain\n+            // while the wallet was shutdown, change tx status to UNCONFIRMED\n+            // and reset block height, hash, and index. ABANDONED tx don't have\n+            // associated blocks and don't need to be updated. The case where a\n+            // transaction was reorged out while online and then reconfirmed\n+            // while offline is covered by the rescan logic.\n             wtxIn.setUnconfirmed();\n             wtxIn.m_confirm.hashBlock = uint256();\n+            wtxIn.m_confirm.block_height = 0;\n             wtxIn.m_confirm.nIndex = 0;\n         }\n     }\n@@ -842,7 +854,7 @@ void CWallet::LoadToWallet(CWalletTx& wtxIn)\n         if (it != mapWallet.end()) {\n             CWalletTx& prevtx = it->second;\n             if (prevtx.isConflicted()) {\n-                MarkConflicted(prevtx.m_confirm.hashBlock, wtx.GetHash());\n+                MarkConflicted(prevtx.m_confirm.hashBlock, prevtx.m_confirm.block_height, wtx.GetHash());\n             }\n         }\n     }\n@@ -860,7 +872,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Co\n                 while (range.first != range.second) {\n                     if (range.first->second != tx.GetHash()) {\n                         WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), confirm.hashBlock.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(confirm.hashBlock, range.first->second);\n+                        MarkConflicted(confirm.hashBlock, confirm.block_height, range.first->second);\n                     }\n                     range.first++;\n                 }\n@@ -948,7 +960,6 @@ bool CWallet::AbandonTransaction(interfaces::Chain::Lock& locked_chain, const ui\n         if (currentconfirm == 0 && !wtx.isAbandoned()) {\n             // If the orig tx was not in block/mempool, none of its spends can be in mempool\n             assert(!wtx.InMempool());\n-            wtx.m_confirm.nIndex = 0;\n             wtx.setAbandoned();\n             wtx.MarkDirty();\n             batch.WriteTx(wtx);\n@@ -970,7 +981,7 @@ bool CWallet::AbandonTransaction(interfaces::Chain::Lock& locked_chain, const ui\n     return true;\n }\n \n-void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n+void CWallet::MarkConflicted(const uint256& hashBlock, int conflicting_height, const uint256& hashTx)\n {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n@@ -1004,6 +1015,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n             // Mark transaction as conflicted with this block.\n             wtx.m_confirm.nIndex = 0;\n             wtx.m_confirm.hashBlock = hashBlock;\n+            wtx.m_confirm.block_height = conflicting_height;\n             wtx.setConflicted();\n             wtx.MarkDirty();\n             batch.WriteTx(wtx);\n@@ -1036,7 +1048,7 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Confirmatio\n void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n-    CWalletTx::Confirmation confirm(CWalletTx::Status::UNCONFIRMED, {}, 0);\n+    CWalletTx::Confirmation confirm(CWalletTx::Status::UNCONFIRMED, /* block_height */ 0, {}, /* nIndex */ 0);\n     SyncTransaction(ptx, confirm);\n \n     auto it = mapWallet.find(ptx->GetHash());\n@@ -1061,10 +1073,10 @@ void CWallet::BlockConnected(const CBlock& block, const std::vector<CTransaction\n \n     m_last_block_processed_height = height;\n     m_last_block_processed = block_hash;\n-    for (size_t i = 0; i < block.vtx.size(); i++) {\n-        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, m_last_block_processed, i);\n-        SyncTransaction(block.vtx[i], confirm);\n-        TransactionRemovedFromMempool(block.vtx[i]);\n+    for (size_t index = 0; index < block.vtx.size(); index++) {\n+        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, height, block_hash, index);\n+        SyncTransaction(block.vtx[index], confirm);\n+        TransactionRemovedFromMempool(block.vtx[index]);\n     }\n     for (const CTransactionRef& ptx : vtxConflicted) {\n         TransactionRemovedFromMempool(ptx);\n@@ -1083,7 +1095,7 @@ void CWallet::BlockDisconnected(const CBlock& block, int height)\n     m_last_block_processed_height = height - 1;\n     m_last_block_processed = block.hashPrevBlock;\n     for (const CTransactionRef& ptx : block.vtx) {\n-        CWalletTx::Confirmation confirm(CWalletTx::Status::UNCONFIRMED, {}, 0);\n+        CWalletTx::Confirmation confirm(CWalletTx::Status::UNCONFIRMED, /* block_height */ 0, {}, /* nIndex */ 0);\n         SyncTransaction(ptx, confirm);\n     }\n }\n@@ -1630,7 +1642,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n                 break;\n             }\n             for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, block_hash, posInBlock);\n+                CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, *block_height, block_hash, posInBlock);\n                 SyncTransaction(block.vtx[posInBlock], confirm, fUpdate);\n             }\n             // scan succeeded, record block as most recent successfully scanned"
      },
      {
        "sha": "f3691a6218720f921134f498a6e7251535c8797e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5971d3848e09abf571e5308185275296127efca4/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5971d3848e09abf571e5308185275296127efca4/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5971d3848e09abf571e5308185275296127efca4",
        "patch": "@@ -356,15 +356,17 @@ class CWalletTx\n         ABANDONED\n     };\n \n-    /* Confirmation includes tx status and a pair of {block hash/tx index in block} at which tx has been confirmed.\n-     * This pair is both 0 if tx hasn't confirmed yet. Meaning of these fields changes with CONFLICTED state\n-     * where they instead point to block hash and index of the deepest conflicting tx.\n+    /* Confirmation includes tx status and a triplet of {block height/block hash/tx index in block}\n+     * at which tx has been confirmed. All three are set to 0 if tx is unconfirmed or abandoned.\n+     * Meaning of these fields changes with CONFLICTED state where they instead point to block hash\n+     * and block height of the deepest conflicting tx.\n      */\n     struct Confirmation {\n         Status status;\n+        int block_height;\n         uint256 hashBlock;\n         int nIndex;\n-        Confirmation(Status s = UNCONFIRMED, uint256 h = uint256(), int i = 0) : status(s), hashBlock(h), nIndex(i) {}\n+        Confirmation(Status s = UNCONFIRMED, int b = 0, uint256 h = uint256(), int i = 0) : status(s), block_height(b), hashBlock(h), nIndex(i) {}\n     };\n \n     Confirmation m_confirm;\n@@ -407,7 +409,6 @@ class CWalletTx\n          * compatibility (pre-commit 9ac63d6).\n          */\n         if (serializedIndex == -1 && m_confirm.hashBlock == ABANDON_HASH) {\n-            m_confirm.hashBlock = uint256();\n             setAbandoned();\n         } else if (serializedIndex == -1) {\n             setConflicted();\n@@ -512,12 +513,14 @@ class CWalletTx\n     {\n         m_confirm.status = CWalletTx::ABANDONED;\n         m_confirm.hashBlock = uint256();\n+        m_confirm.block_height = 0;\n         m_confirm.nIndex = 0;\n     }\n     bool isConflicted() const { return m_confirm.status == CWalletTx::CONFLICTED; }\n     void setConflicted() { m_confirm.status = CWalletTx::CONFLICTED; }\n     bool isUnconfirmed() const { return m_confirm.status == CWalletTx::UNCONFIRMED; }\n     void setUnconfirmed() { m_confirm.status = CWalletTx::UNCONFIRMED; }\n+    bool isConfirmed() const { return m_confirm.status == CWalletTx::CONFIRMED; }\n     void setConfirmed() { m_confirm.status = CWalletTx::CONFIRMED; }\n     const uint256& GetHash() const { return tx->GetHash(); }\n     bool IsCoinBase() const { return tx->IsCoinBase(); }\n@@ -644,7 +647,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* Mark a transaction (and its in-wallet descendants) as conflicting with a particular block. */\n-    void MarkConflicted(const uint256& hashBlock, const uint256& hashTx);\n+    void MarkConflicted(const uint256& hashBlock, int conflicting_height, const uint256& hashTx);\n \n     /* Mark a transaction's inputs dirty, thus forcing the outputs to be recomputed */\n     void MarkInputsDirty(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      }
    ]
  },
  {
    "sha": "769ff05e48fb53d4b62c59060424a0fea71d0aab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjlmZjA1ZTQ4ZmI1M2Q0YjYyYzU5MDYwNDI0YTBmZWE3MWQwYWFi",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-06T17:00:39Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-06T18:36:43Z"
      },
      "message": "Refactor some importprunedfunds checks with guard clause\n\nCredit to jkczyz",
      "tree": {
        "sha": "81edd35e123dee1278bc642477b1722233f5b006",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81edd35e123dee1278bc642477b1722233f5b006"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/769ff05e48fb53d4b62c59060424a0fea71d0aab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769ff05e48fb53d4b62c59060424a0fea71d0aab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/769ff05e48fb53d4b62c59060424a0fea71d0aab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769ff05e48fb53d4b62c59060424a0fea71d0aab/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5971d3848e09abf571e5308185275296127efca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5971d3848e09abf571e5308185275296127efca4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5971d3848e09abf571e5308185275296127efca4"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 13,
      "deletions": 18
    },
    "files": [
      {
        "sha": "d70f68f945c9d2a95e3680f308e07288463799de",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 18,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/769ff05e48fb53d4b62c59060424a0fea71d0aab/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/769ff05e48fb53d4b62c59060424a0fea71d0aab/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=769ff05e48fb53d4b62c59060424a0fea71d0aab",
        "patch": "@@ -363,31 +363,26 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     //Search partial merkle tree in proof for our transaction and index in valid block\n     std::vector<uint256> vMatch;\n     std::vector<unsigned int> vIndex;\n-    unsigned int txnIndex = 0;\n-    Optional<int> height;\n-    if (merkleBlock.txn.ExtractMatches(vMatch, vIndex) == merkleBlock.header.hashMerkleRoot) {\n-\n-        auto locked_chain = pwallet->chain().lock();\n-        height = locked_chain->getBlockHeight(merkleBlock.header.GetHash());\n-        if (height == nullopt) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n-        }\n-\n-        std::vector<uint256>::const_iterator it;\n-        if ((it = std::find(vMatch.begin(), vMatch.end(), hashTx))==vMatch.end()) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction given doesn't exist in proof\");\n-        }\n+    if (merkleBlock.txn.ExtractMatches(vMatch, vIndex) != merkleBlock.header.hashMerkleRoot) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Something wrong with merkleblock\");\n+    }\n \n-        txnIndex = vIndex[it - vMatch.begin()];\n+    auto locked_chain = pwallet->chain().lock();\n+    Optional<int> height = locked_chain->getBlockHeight(merkleBlock.header.GetHash());\n+    if (height == nullopt) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n     }\n-    else {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Something wrong with merkleblock\");\n+\n+    std::vector<uint256>::const_iterator it;\n+    if ((it = std::find(vMatch.begin(), vMatch.end(), hashTx)) == vMatch.end()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction given doesn't exist in proof\");\n     }\n \n+    unsigned int txnIndex = vIndex[it - vMatch.begin()];\n+\n     CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, *height, merkleBlock.header.GetHash(), txnIndex);\n     wtx.m_confirm = confirm;\n \n-    auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n     if (pwallet->IsMine(*wtx.tx)) {"
      }
    ]
  },
  {
    "sha": "f77b1de16feee097a88e99d2ecdd4d84beb4f915",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzdiMWRlMTZmZWVlMDk3YTg4ZTk5ZDJlY2RkNGQ4NGJlYjRmOTE1",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-06-24T23:07:09Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-06T18:36:43Z"
      },
      "message": "Only return early from BlockUntilSyncedToCurrentChain if current tip\nis exact match\n\nIn the next commit, we start using BlockConnected/BlockDisconnected\ncallbacks to establish tx depth, rather than querying the chain\ndirectly.\n\nCurrently, BlockUntilSyncedToCurrentChain will return early if\nthe best block processed by the wallet is a descendant of the node'tip.\nThat means that in the case of a re-org, it won't wait for the\nBlockDisconnected callbacks that have been enqueued during the re-org\nbut have not yet been triggered in the wallet.\n\nChange BlockUntilSyncedToCurrentChain to only return early if the\nwallet's m_last_block_processed matches the tip exactly. This ensures\nthat there are no BlockDisconnected or BlockConnected callbacks\nin-flight.",
      "tree": {
        "sha": "076310e189e2299c765cd3aa942bbc9c3125628a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/076310e189e2299c765cd3aa942bbc9c3125628a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f77b1de16feee097a88e99d2ecdd4d84beb4f915",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f77b1de16feee097a88e99d2ecdd4d84beb4f915",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f77b1de16feee097a88e99d2ecdd4d84beb4f915",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f77b1de16feee097a88e99d2ecdd4d84beb4f915/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "769ff05e48fb53d4b62c59060424a0fea71d0aab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769ff05e48fb53d4b62c59060424a0fea71d0aab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/769ff05e48fb53d4b62c59060424a0fea71d0aab"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 4,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0635909cae97f1fd68b119236cd9a37ad22783a8",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f77b1de16feee097a88e99d2ecdd4d84beb4f915/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f77b1de16feee097a88e99d2ecdd4d84beb4f915/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=f77b1de16feee097a88e99d2ecdd4d84beb4f915",
        "patch": "@@ -353,13 +353,11 @@ class ChainImpl : public Chain\n     {\n         return MakeUnique<NotificationsHandlerImpl>(*this, notifications);\n     }\n-    void waitForNotificationsIfNewBlocksConnected(const uint256& old_tip) override\n+    void waitForNotificationsIfTipChanged(const uint256& old_tip) override\n     {\n         if (!old_tip.IsNull()) {\n             LOCK(::cs_main);\n             if (old_tip == ::ChainActive().Tip()->GetBlockHash()) return;\n-            CBlockIndex* block = LookupBlockIndex(old_tip);\n-            if (block && block->GetAncestor(::ChainActive().Height()) == ::ChainActive().Tip()) return;\n         }\n         SyncWithValidationInterfaceQueue();\n     }"
      },
      {
        "sha": "e07ec1b371ab2fa3a241bd18624394db53391dc3",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f77b1de16feee097a88e99d2ecdd4d84beb4f915/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f77b1de16feee097a88e99d2ecdd4d84beb4f915/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=f77b1de16feee097a88e99d2ecdd4d84beb4f915",
        "patch": "@@ -236,9 +236,8 @@ class Chain\n     virtual std::unique_ptr<Handler> handleNotifications(Notifications& notifications) = 0;\n \n     //! Wait for pending notifications to be processed unless block hash points to the current\n-    //! chain tip, or to a possible descendant of the current chain tip that isn't currently\n-    //! connected.\n-    virtual void waitForNotificationsIfNewBlocksConnected(const uint256& old_tip) = 0;\n+    //! chain tip.\n+    virtual void waitForNotificationsIfTipChanged(const uint256& old_tip) = 0;\n \n     //! Register handler for RPC. Command is not copied, so reference\n     //! needs to remain valid until Handler is disconnected."
      },
      {
        "sha": "9fdb07ce84c2cee6b9def082b2e31909c38aef9f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f77b1de16feee097a88e99d2ecdd4d84beb4f915/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f77b1de16feee097a88e99d2ecdd4d84beb4f915/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f77b1de16feee097a88e99d2ecdd4d84beb4f915",
        "patch": "@@ -1113,7 +1113,7 @@ void CWallet::BlockUntilSyncedToCurrentChain() {\n     // for the queue to drain enough to execute it (indicating we are caught up\n     // at least with the time we entered this function).\n     uint256 last_block_hash = WITH_LOCK(cs_wallet, return m_last_block_processed);\n-    chain().waitForNotificationsIfNewBlocksConnected(last_block_hash);\n+    chain().waitForNotificationsIfTipChanged(last_block_hash);\n }\n \n "
      }
    ]
  },
  {
    "sha": "0ff03871add000f8b4d8f82aeb168eed2fc9dc5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmYwMzg3MWFkZDAwMGY4YjRkOGY4MmFlYjE2OGVlZDJmYzlkYzVm",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-22T18:22:25Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-06T18:36:43Z"
      },
      "message": "Use CWallet::m_last_block_processed_height in GetDepthInMainChain\n\nAvoid to lock chain to query state thanks to tracking last block\nheight in CWallet.",
      "tree": {
        "sha": "8700c1569ae9e6d419f4f0d6d3dc51c7221e0185",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8700c1569ae9e6d419f4f0d6d3dc51c7221e0185"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ff03871add000f8b4d8f82aeb168eed2fc9dc5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff03871add000f8b4d8f82aeb168eed2fc9dc5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ff03871add000f8b4d8f82aeb168eed2fc9dc5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff03871add000f8b4d8f82aeb168eed2fc9dc5f/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "f77b1de16feee097a88e99d2ecdd4d84beb4f915",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f77b1de16feee097a88e99d2ecdd4d84beb4f915",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f77b1de16feee097a88e99d2ecdd4d84beb4f915"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "949977104b2808ee8a22c8fb7ae017b76d6c0b6e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ff03871add000f8b4d8f82aeb168eed2fc9dc5f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ff03871add000f8b4d8f82aeb168eed2fc9dc5f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0ff03871add000f8b4d8f82aeb168eed2fc9dc5f",
        "patch": "@@ -3936,9 +3936,11 @@ CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn)\n \n int CWalletTx::GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const\n {\n+    assert(pwallet != nullptr);\n+    AssertLockHeld(pwallet->cs_wallet);\n     if (isUnconfirmed() || isAbandoned()) return 0;\n \n-    return locked_chain.getBlockDepth(m_confirm.hashBlock) * (isConflicted() ? -1 : 1);\n+    return (pwallet->GetLastBlockHeight() - m_confirm.block_height + 1) * (isConflicted() ? -1 : 1);\n }\n \n int CWalletTx::GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const"
      },
      {
        "sha": "e1dab8d37ea2ce146a88d3f448f7aaef48479db5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ff03871add000f8b4d8f82aeb168eed2fc9dc5f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ff03871add000f8b4d8f82aeb168eed2fc9dc5f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0ff03871add000f8b4d8f82aeb168eed2fc9dc5f",
        "patch": "@@ -499,7 +499,13 @@ class CWalletTx\n      *  0  : in memory pool, waiting to be included in a block\n      * >=1 : this many blocks deep in the main chain\n      */\n-    int GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const;\n+    // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n+    // annotation \"EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\". The annotation\n+    // \"NO_THREAD_SAFETY_ANALYSIS\" was temporarily added to avoid having to\n+    // resolve the issue of member access into incomplete type CWallet. Note\n+    // that we still have the runtime check \"AssertLockHeld(pwallet->cs_wallet)\"\n+    // in place.\n+    int GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const NO_THREAD_SAFETY_ANALYSIS;\n     bool IsInMainChain(interfaces::Chain::Lock& locked_chain) const { return GetDepthInMainChain(locked_chain) > 0; }\n \n     /**"
      }
    ]
  },
  {
    "sha": "b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjZjNDI5YzU2Yzg1ZmExNmMzMDliZTBiMmJjYTljMjVmZGQzZTFh",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-29T13:52:01Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-06T18:36:43Z"
      },
      "message": "Remove locked_chain from GetDepthInMainChain and its callers\n\nWe don't remove yet Chain locks as we need to preserve lock\norder with CWallet one until swapping at once to avoid\ndeadlock failures (spotted by --enable-debug)",
      "tree": {
        "sha": "15d616f9ff5b7b5a4434172f89a0d5dd7ed31276",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15d616f9ff5b7b5a4434172f89a0d5dd7ed31276"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0ff03871add000f8b4d8f82aeb168eed2fc9dc5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff03871add000f8b4d8f82aeb168eed2fc9dc5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ff03871add000f8b4d8f82aeb168eed2fc9dc5f"
      }
    ],
    "stats": {
      "total": 184,
      "additions": 91,
      "deletions": 93
    },
    "files": [
      {
        "sha": "899f04202ec57fee525661ad4b762eddfffbea78",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
        "patch": "@@ -31,7 +31,7 @@ namespace interfaces {\n namespace {\n \n //! Construct wallet tx struct.\n-WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, const CWalletTx& wtx)\n+WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n {\n     WalletTx result;\n     result.tx = wtx.tx;\n@@ -49,7 +49,7 @@ WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, co\n                                                       wallet.IsMine(result.txout_address.back()) :\n                                                       ISMINE_NO);\n     }\n-    result.credit = wtx.GetCredit(locked_chain, ISMINE_ALL);\n+    result.credit = wtx.GetCredit(ISMINE_ALL);\n     result.debit = wtx.GetDebit(ISMINE_ALL);\n     result.change = wtx.GetChange();\n     result.time = wtx.GetTxTime();\n@@ -63,21 +63,20 @@ WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const C\n {\n     WalletTxStatus result;\n     result.block_height = locked_chain.getBlockHeight(wtx.m_confirm.hashBlock).get_value_or(std::numeric_limits<int>::max());\n-    result.blocks_to_maturity = wtx.GetBlocksToMaturity(locked_chain);\n-    result.depth_in_main_chain = wtx.GetDepthInMainChain(locked_chain);\n+    result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n+    result.depth_in_main_chain = wtx.GetDepthInMainChain();\n     result.time_received = wtx.nTimeReceived;\n     result.lock_time = wtx.tx->nLockTime;\n     result.is_final = locked_chain.checkFinalTx(*wtx.tx);\n     result.is_trusted = wtx.IsTrusted(locked_chain);\n     result.is_abandoned = wtx.isAbandoned();\n     result.is_coinbase = wtx.IsCoinBase();\n-    result.is_in_main_chain = wtx.IsInMainChain(locked_chain);\n+    result.is_in_main_chain = wtx.IsInMainChain();\n     return result;\n }\n \n //! Construct wallet TxOut struct.\n-WalletTxOut MakeWalletTxOut(interfaces::Chain::Lock& locked_chain,\n-    CWallet& wallet,\n+WalletTxOut MakeWalletTxOut(CWallet& wallet,\n     const CWalletTx& wtx,\n     int n,\n     int depth) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n@@ -86,7 +85,7 @@ WalletTxOut MakeWalletTxOut(interfaces::Chain::Lock& locked_chain,\n     result.txout = wtx.tx->vout[n];\n     result.time = wtx.GetTxTime();\n     result.depth_in_main_chain = depth;\n-    result.is_spent = wallet.IsSpent(locked_chain, wtx.GetHash(), n);\n+    result.is_spent = wallet.IsSpent(wtx.GetHash(), n);\n     return result;\n }\n \n@@ -235,7 +234,7 @@ class WalletImpl : public Wallet\n     {\n         auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n-        return m_wallet->AbandonTransaction(*locked_chain, txid);\n+        return m_wallet->AbandonTransaction(txid);\n     }\n     bool transactionCanBeBumped(const uint256& txid) override\n     {\n@@ -282,7 +281,7 @@ class WalletImpl : public Wallet\n         LOCK(m_wallet->cs_wallet);\n         auto mi = m_wallet->mapWallet.find(txid);\n         if (mi != m_wallet->mapWallet.end()) {\n-            return MakeWalletTx(*locked_chain, *m_wallet, mi->second);\n+            return MakeWalletTx(*m_wallet, mi->second);\n         }\n         return {};\n     }\n@@ -293,7 +292,7 @@ class WalletImpl : public Wallet\n         std::vector<WalletTx> result;\n         result.reserve(m_wallet->mapWallet.size());\n         for (const auto& entry : m_wallet->mapWallet) {\n-            result.emplace_back(MakeWalletTx(*locked_chain, *m_wallet, entry.second));\n+            result.emplace_back(MakeWalletTx(*m_wallet, entry.second));\n         }\n         return result;\n     }\n@@ -338,7 +337,7 @@ class WalletImpl : public Wallet\n             in_mempool = mi->second.InMempool();\n             order_form = mi->second.vOrderForm;\n             tx_status = MakeWalletTxStatus(*locked_chain, mi->second);\n-            return MakeWalletTx(*locked_chain, *m_wallet, mi->second);\n+            return MakeWalletTx(*m_wallet, mi->second);\n         }\n         return {};\n     }\n@@ -407,7 +406,7 @@ class WalletImpl : public Wallet\n             auto& group = result[entry.first];\n             for (const auto& coin : entry.second) {\n                 group.emplace_back(COutPoint(coin.tx->GetHash(), coin.i),\n-                    MakeWalletTxOut(*locked_chain, *m_wallet, *coin.tx, coin.i, coin.nDepth));\n+                    MakeWalletTxOut(*m_wallet, *coin.tx, coin.i, coin.nDepth));\n             }\n         }\n         return result;\n@@ -422,9 +421,9 @@ class WalletImpl : public Wallet\n             result.emplace_back();\n             auto it = m_wallet->mapWallet.find(output.hash);\n             if (it != m_wallet->mapWallet.end()) {\n-                int depth = it->second.GetDepthInMainChain(*locked_chain);\n+                int depth = it->second.GetDepthInMainChain();\n                 if (depth >= 0) {\n-                    result.back() = MakeWalletTxOut(*locked_chain, *m_wallet, it->second, output.n, depth);\n+                    result.back() = MakeWalletTxOut(*m_wallet, it->second, output.n, depth);\n                 }\n             }\n         }"
      },
      {
        "sha": "8f0b495ac4fa9eaaa774ba4e87e4fc89b7381f66",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
        "patch": "@@ -16,7 +16,7 @@\n \n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n-static feebumper::Result PreconditionChecks(interfaces::Chain::Lock& locked_chain, const CWallet& wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n     if (wallet.HasWalletSpend(wtx.GetHash())) {\n         errors.push_back(\"Transaction has descendants in the wallet\");\n@@ -30,7 +30,7 @@ static feebumper::Result PreconditionChecks(interfaces::Chain::Lock& locked_chai\n         }\n     }\n \n-    if (wtx.GetDepthInMainChain(locked_chain) != 0) {\n+    if (wtx.GetDepthInMainChain() != 0) {\n         errors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n         return feebumper::Result::WALLET_ERROR;\n     }\n@@ -146,7 +146,7 @@ bool TransactionCanBeBumped(const CWallet& wallet, const uint256& txid)\n     if (wtx == nullptr) return false;\n \n     std::vector<std::string> errors_dummy;\n-    feebumper::Result res = PreconditionChecks(*locked_chain, wallet, *wtx, errors_dummy);\n+    feebumper::Result res = PreconditionChecks(wallet, *wtx, errors_dummy);\n     return res == feebumper::Result::OK;\n }\n \n@@ -165,7 +165,7 @@ Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, co\n     }\n     const CWalletTx& wtx = it->second;\n \n-    Result result = PreconditionChecks(*locked_chain, *wallet, wtx, errors);\n+    Result result = PreconditionChecks(*wallet, wtx, errors);\n     if (result != Result::OK) {\n         return result;\n     }\n@@ -291,7 +291,7 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n     }\n     const CWalletTx& wtx = it->second;\n \n-    Result result = PreconditionChecks(*locked_chain, wallet, wtx, errors);\n+    Result result = PreconditionChecks(wallet, wtx, errors);\n     if (result != Result::OK) {\n         return result;\n     }\n@@ -382,7 +382,7 @@ Result CommitTransaction(CWallet& wallet, const uint256& txid, CMutableTransacti\n     CWalletTx& oldWtx = it->second;\n \n     // make sure the transaction still has no descendants and hasn't been mined in the meantime\n-    Result result = PreconditionChecks(*locked_chain, wallet, oldWtx, errors);\n+    Result result = PreconditionChecks(wallet, oldWtx, errors);\n     if (result != Result::OK) {\n         return result;\n     }"
      },
      {
        "sha": "0d14d86d0265fd5fef02fc136b5b72b5c5ad522f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
        "patch": "@@ -325,7 +325,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n         {\n             auto locked_chain = pwallet->chain().lock();\n             LOCK(pwallet->cs_wallet);\n-            pwallet->ReacceptWalletTransactions(*locked_chain);\n+            pwallet->ReacceptWalletTransactions();\n         }\n     }\n \n@@ -514,7 +514,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n         {\n             auto locked_chain = pwallet->chain().lock();\n             LOCK(pwallet->cs_wallet);\n-            pwallet->ReacceptWalletTransactions(*locked_chain);\n+            pwallet->ReacceptWalletTransactions();\n         }\n     }\n \n@@ -1413,7 +1413,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         {\n             auto locked_chain = pwallet->chain().lock();\n             LOCK(pwallet->cs_wallet);\n-            pwallet->ReacceptWalletTransactions(*locked_chain);\n+            pwallet->ReacceptWalletTransactions();\n         }\n \n         if (pwallet->IsAbortingRescan()) {"
      },
      {
        "sha": "f3bd223b9818a80b859c57fa37da884175e00e20",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
        "patch": "@@ -126,7 +126,7 @@ void EnsureWalletIsUnlocked(const CWallet* pwallet)\n \n static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx, UniValue& entry)\n {\n-    int confirms = wtx.GetDepthInMainChain(locked_chain);\n+    int confirms = wtx.GetDepthInMainChain();\n     entry.pushKV(\"confirmations\", confirms);\n     if (wtx.IsCoinBase())\n         entry.pushKV(\"generated\", true);\n@@ -631,7 +631,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n         for (const CTxOut& txout : wtx.tx->vout)\n             if (txout.scriptPubKey == scriptPubKey)\n-                if (wtx.GetDepthInMainChain(*locked_chain) >= nMinDepth)\n+                if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n     }\n \n@@ -697,7 +697,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n         {\n             CTxDestination address;\n             if (ExtractDestination(txout.scriptPubKey, address) && pwallet->IsMine(address) && setAddress.count(address)) {\n-                if (wtx.GetDepthInMainChain(*locked_chain) >= nMinDepth)\n+                if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n             }\n         }\n@@ -1057,7 +1057,7 @@ static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, CWallet * co\n             continue;\n         }\n \n-        int nDepth = wtx.GetDepthInMainChain(locked_chain);\n+        int nDepth = wtx.GetDepthInMainChain();\n         if (nDepth < nMinDepth)\n             continue;\n \n@@ -1314,8 +1314,7 @@ static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* con\n     }\n \n     // Received\n-    if (listReceived.size() > 0 && wtx.GetDepthInMainChain(locked_chain) >= nMinDepth)\n-    {\n+    if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth) {\n         for (const COutputEntry& r : listReceived)\n         {\n             std::string label;\n@@ -1332,9 +1331,9 @@ static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* con\n             MaybePushAddress(entry, r.destination);\n             if (wtx.IsCoinBase())\n             {\n-                if (wtx.GetDepthInMainChain(locked_chain) < 1)\n+                if (wtx.GetDepthInMainChain() < 1)\n                     entry.pushKV(\"category\", \"orphan\");\n-                else if (wtx.IsImmatureCoinBase(locked_chain))\n+                else if (wtx.IsImmatureCoinBase())\n                     entry.pushKV(\"category\", \"immature\");\n                 else\n                     entry.pushKV(\"category\", \"generate\");\n@@ -1598,7 +1597,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         CWalletTx tx = pairWtx.second;\n \n-        if (depth == -1 || abs(tx.GetDepthInMainChain(*locked_chain)) < depth) {\n+        if (depth == -1 || abs(tx.GetDepthInMainChain()) < depth) {\n             ListTransactions(*locked_chain, pwallet, tx, 0, true, transactions, filter, nullptr /* filter_label */);\n         }\n     }\n@@ -1715,7 +1714,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     }\n     const CWalletTx& wtx = it->second;\n \n-    CAmount nCredit = wtx.GetCredit(*locked_chain, filter);\n+    CAmount nCredit = wtx.GetCredit(filter);\n     CAmount nDebit = wtx.GetDebit(filter);\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = (wtx.IsFromMe(filter) ? wtx.tx->GetValueOut() - nDebit : 0);\n@@ -1779,7 +1778,7 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n     if (!pwallet->mapWallet.count(hash)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     }\n-    if (!pwallet->AbandonTransaction(*locked_chain, hash)) {\n+    if (!pwallet->AbandonTransaction(hash)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not eligible for abandonment\");\n     }\n \n@@ -2210,7 +2209,7 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout index out of bounds\");\n         }\n \n-        if (pwallet->IsSpent(*locked_chain, outpt.hash, outpt.n)) {\n+        if (pwallet->IsSpent(outpt.hash, outpt.n)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected unspent output\");\n         }\n "
      },
      {
        "sha": "93d2a716a3c371d0d3cbb178cb97473a6daa56bc",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
        "patch": "@@ -281,13 +281,13 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n \n     // Call GetImmatureCredit() once before adding the key to the wallet to\n     // cache the current immature credit amount, which is 0.\n-    BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(*locked_chain), 0);\n+    BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(), 0);\n \n     // Invalidate the cached vanue, add the key, and make sure a new immature\n     // credit amount is calculated.\n     wtx.MarkDirty();\n     BOOST_CHECK(spk_man->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey()));\n-    BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(*locked_chain), 50*COIN);\n+    BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(), 50*COIN);\n }\n \n static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64_t blockTime)"
      },
      {
        "sha": "4936e3851b35e989b3653a59e04663c5dc93dc14",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 43,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
        "patch": "@@ -452,7 +452,7 @@ void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> ran\n  * Outpoint is spent if any non-conflicted transaction\n  * spends it:\n  */\n-bool CWallet::IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash, unsigned int n) const\n+bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n {\n     const COutPoint outpoint(hash, n);\n     std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n@@ -463,7 +463,7 @@ bool CWallet::IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash\n         const uint256& wtxid = it->second;\n         std::map<uint256, CWalletTx>::const_iterator mit = mapWallet.find(wtxid);\n         if (mit != mapWallet.end()) {\n-            int depth = mit->second.GetDepthInMainChain(locked_chain);\n+            int depth = mit->second.GetDepthInMainChain();\n             if (depth > 0  || (depth == 0 && !mit->second.isAbandoned()))\n                 return true; // Spent\n         }\n@@ -913,7 +913,7 @@ bool CWallet::TransactionCanBeAbandoned(const uint256& hashTx) const\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n     const CWalletTx* wtx = GetWalletTx(hashTx);\n-    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain(*locked_chain) == 0 && !wtx->InMempool();\n+    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain() == 0 && !wtx->InMempool();\n }\n \n void CWallet::MarkInputsDirty(const CTransactionRef& tx)\n@@ -926,9 +926,9 @@ void CWallet::MarkInputsDirty(const CTransactionRef& tx)\n     }\n }\n \n-bool CWallet::AbandonTransaction(interfaces::Chain::Lock& locked_chain, const uint256& hashTx)\n+bool CWallet::AbandonTransaction(const uint256& hashTx)\n {\n-    auto locked_chain_recursive = chain().lock();  // Temporary. Removed in upcoming lock cleanup\n+    auto locked_chain = chain().lock(); // Temporary. Removed in upcoming lock cleanup\n     LOCK(cs_wallet);\n \n     WalletBatch batch(*database, \"r+\");\n@@ -940,7 +940,7 @@ bool CWallet::AbandonTransaction(interfaces::Chain::Lock& locked_chain, const ui\n     auto it = mapWallet.find(hashTx);\n     assert(it != mapWallet.end());\n     CWalletTx& origtx = it->second;\n-    if (origtx.GetDepthInMainChain(locked_chain) != 0 || origtx.InMempool()) {\n+    if (origtx.GetDepthInMainChain() != 0 || origtx.InMempool()) {\n         return false;\n     }\n \n@@ -953,7 +953,7 @@ bool CWallet::AbandonTransaction(interfaces::Chain::Lock& locked_chain, const ui\n         auto it = mapWallet.find(now);\n         assert(it != mapWallet.end());\n         CWalletTx& wtx = it->second;\n-        int currentconfirm = wtx.GetDepthInMainChain(locked_chain);\n+        int currentconfirm = wtx.GetDepthInMainChain();\n         // If the orig tx was not in block, none of its spends can be\n         assert(currentconfirm <= 0);\n         // if (currentconfirm < 0) {Tx and spends are already conflicted, no need to abandon}\n@@ -1009,7 +1009,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, int conflicting_height, c\n         auto it = mapWallet.find(now);\n         assert(it != mapWallet.end());\n         CWalletTx& wtx = it->second;\n-        int currentconfirm = wtx.GetDepthInMainChain(*locked_chain);\n+        int currentconfirm = wtx.GetDepthInMainChain();\n         if (conflictconfirms < currentconfirm) {\n             // Block is 'more conflicted' than current confirm; update.\n             // Mark transaction as conflicted with this block.\n@@ -1691,7 +1691,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n     return result;\n }\n \n-void CWallet::ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain)\n+void CWallet::ReacceptWalletTransactions()\n {\n     // If transactions aren't being broadcasted, don't let them into local mempool either\n     if (!fBroadcastTransactions)\n@@ -1704,7 +1704,7 @@ void CWallet::ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain)\n         CWalletTx& wtx = item.second;\n         assert(wtx.GetHash() == wtxid);\n \n-        int nDepth = wtx.GetDepthInMainChain(locked_chain);\n+        int nDepth = wtx.GetDepthInMainChain();\n \n         if (!wtx.IsCoinBase() && (nDepth == 0 && !wtx.isAbandoned())) {\n             mapSorted.insert(std::make_pair(wtx.nOrderPos, &wtx));\n@@ -1715,11 +1715,11 @@ void CWallet::ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain)\n     for (const std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n         CWalletTx& wtx = *(item.second);\n         std::string unused_err_string;\n-        wtx.SubmitMemoryPoolAndRelay(unused_err_string, false, locked_chain);\n+        wtx.SubmitMemoryPoolAndRelay(unused_err_string, false);\n     }\n }\n \n-bool CWalletTx::SubmitMemoryPoolAndRelay(std::string& err_string, bool relay, interfaces::Chain::Lock& locked_chain)\n+bool CWalletTx::SubmitMemoryPoolAndRelay(std::string& err_string, bool relay)\n {\n     // Can't relay if wallet is not broadcasting\n     if (!pwallet->GetBroadcastTransactions()) return false;\n@@ -1729,7 +1729,7 @@ bool CWalletTx::SubmitMemoryPoolAndRelay(std::string& err_string, bool relay, in\n     // cause log spam.\n     if (IsCoinBase()) return false;\n     // Don't try to submit conflicted or confirmed transactions.\n-    if (GetDepthInMainChain(locked_chain) != 0) return false;\n+    if (GetDepthInMainChain() != 0) return false;\n \n     // Submit transaction to mempool for relay\n     pwallet->WalletLogPrintf(\"Submitting wtx %s to mempool for relay\\n\", GetHash().ToString());\n@@ -1783,10 +1783,10 @@ CAmount CWalletTx::GetDebit(const isminefilter& filter) const\n     return debit;\n }\n \n-CAmount CWalletTx::GetCredit(interfaces::Chain::Lock& locked_chain, const isminefilter& filter) const\n+CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n {\n     // Must wait until coinbase is safely deep enough in the chain before valuing it\n-    if (IsImmatureCoinBase(locked_chain))\n+    if (IsImmatureCoinBase())\n         return 0;\n \n     CAmount credit = 0;\n@@ -1800,16 +1800,16 @@ CAmount CWalletTx::GetCredit(interfaces::Chain::Lock& locked_chain, const ismine\n     return credit;\n }\n \n-CAmount CWalletTx::GetImmatureCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache) const\n+CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n {\n-    if (IsImmatureCoinBase(locked_chain) && IsInMainChain(locked_chain)) {\n+    if (IsImmatureCoinBase() && IsInMainChain()) {\n         return GetCachableAmount(IMMATURE_CREDIT, ISMINE_SPENDABLE, !fUseCache);\n     }\n \n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache, const isminefilter& filter) const\n+CAmount CWalletTx::GetAvailableCredit(bool fUseCache, const isminefilter& filter) const\n {\n     if (pwallet == nullptr)\n         return 0;\n@@ -1818,7 +1818,7 @@ CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, boo\n     bool allow_cache = (filter & ISMINE_ALL) && (filter & ISMINE_ALL) != ISMINE_ALL;\n \n     // Must wait until coinbase is safely deep enough in the chain before valuing it\n-    if (IsImmatureCoinBase(locked_chain))\n+    if (IsImmatureCoinBase())\n         return 0;\n \n     if (fUseCache && allow_cache && m_amounts[AVAILABLE_CREDIT].m_cached[filter]) {\n@@ -1830,7 +1830,7 @@ CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, boo\n     uint256 hashTx = GetHash();\n     for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n-        if (!pwallet->IsSpent(locked_chain, hashTx, i) && (allow_used_addresses || !pwallet->IsUsedDestination(hashTx, i))) {\n+        if (!pwallet->IsSpent(hashTx, i) && (allow_used_addresses || !pwallet->IsUsedDestination(hashTx, i))) {\n             const CTxOut &txout = tx->vout[i];\n             nCredit += pwallet->GetCredit(txout, filter);\n             if (!MoneyRange(nCredit))\n@@ -1845,9 +1845,9 @@ CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, boo\n     return nCredit;\n }\n \n-CAmount CWalletTx::GetImmatureWatchOnlyCredit(interfaces::Chain::Lock& locked_chain, const bool fUseCache) const\n+CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool fUseCache) const\n {\n-    if (IsImmatureCoinBase(locked_chain) && IsInMainChain(locked_chain)) {\n+    if (IsImmatureCoinBase() && IsInMainChain()) {\n         return GetCachableAmount(IMMATURE_CREDIT, ISMINE_WATCH_ONLY, !fUseCache);\n     }\n \n@@ -1878,7 +1878,7 @@ bool CWalletTx::IsTrusted(interfaces::Chain::Lock& locked_chain, std::set<uint25\n {\n     // Quick answer in most cases\n     if (!locked_chain.checkFinalTx(*tx)) return false;\n-    int nDepth = GetDepthInMainChain(locked_chain);\n+    int nDepth = GetDepthInMainChain();\n     if (nDepth >= 1) return true;\n     if (nDepth < 0) return false;\n     // using wtx's cached debit\n@@ -1954,7 +1954,7 @@ void CWallet::ResendWalletTransactions()\n             // any confirmed or conflicting txs.\n             if (wtx.nTimeReceived > m_best_block_time - 5 * 60) continue;\n             std::string unused_err_string;\n-            if (wtx.SubmitMemoryPoolAndRelay(unused_err_string, true, *locked_chain)) ++submitted_tx_count;\n+            if (wtx.SubmitMemoryPoolAndRelay(unused_err_string, true)) ++submitted_tx_count;\n         }\n     } // locked_chain and cs_wallet\n \n@@ -1991,9 +1991,9 @@ CWallet::Balance CWallet::GetBalance(const int min_depth, bool avoid_reuse) cons\n         {\n             const CWalletTx& wtx = entry.second;\n             const bool is_trusted{wtx.IsTrusted(*locked_chain, trusted_parents)};\n-            const int tx_depth{wtx.GetDepthInMainChain(*locked_chain)};\n-            const CAmount tx_credit_mine{wtx.GetAvailableCredit(*locked_chain, /* fUseCache */ true, ISMINE_SPENDABLE | reuse_filter)};\n-            const CAmount tx_credit_watchonly{wtx.GetAvailableCredit(*locked_chain, /* fUseCache */ true, ISMINE_WATCH_ONLY | reuse_filter)};\n+            const int tx_depth{wtx.GetDepthInMainChain()};\n+            const CAmount tx_credit_mine{wtx.GetAvailableCredit(/* fUseCache */ true, ISMINE_SPENDABLE | reuse_filter)};\n+            const CAmount tx_credit_watchonly{wtx.GetAvailableCredit(/* fUseCache */ true, ISMINE_WATCH_ONLY | reuse_filter)};\n             if (is_trusted && tx_depth >= min_depth) {\n                 ret.m_mine_trusted += tx_credit_mine;\n                 ret.m_watchonly_trusted += tx_credit_watchonly;\n@@ -2002,8 +2002,8 @@ CWallet::Balance CWallet::GetBalance(const int min_depth, bool avoid_reuse) cons\n                 ret.m_mine_untrusted_pending += tx_credit_mine;\n                 ret.m_watchonly_untrusted_pending += tx_credit_watchonly;\n             }\n-            ret.m_mine_immature += wtx.GetImmatureCredit(*locked_chain);\n-            ret.m_watchonly_immature += wtx.GetImmatureWatchOnlyCredit(*locked_chain);\n+            ret.m_mine_immature += wtx.GetImmatureCredit();\n+            ret.m_watchonly_immature += wtx.GetImmatureWatchOnlyCredit();\n         }\n     }\n     return ret;\n@@ -2047,10 +2047,10 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n             continue;\n         }\n \n-        if (wtx.IsImmatureCoinBase(locked_chain))\n+        if (wtx.IsImmatureCoinBase())\n             continue;\n \n-        int nDepth = wtx.GetDepthInMainChain(locked_chain);\n+        int nDepth = wtx.GetDepthInMainChain();\n         if (nDepth < 0)\n             continue;\n \n@@ -2110,7 +2110,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n             if (IsLockedCoin(entry.first, i))\n                 continue;\n \n-            if (IsSpent(locked_chain, wtxid, i))\n+            if (IsSpent(wtxid, i))\n                 continue;\n \n             isminetype mine = IsMine(wtx.tx->vout[i]);\n@@ -2169,7 +2169,7 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins(interfaces::Ch\n     for (const COutPoint& output : lockedCoins) {\n         auto it = mapWallet.find(output.hash);\n         if (it != mapWallet.end()) {\n-            int depth = it->second.GetDepthInMainChain(locked_chain);\n+            int depth = it->second.GetDepthInMainChain();\n             if (depth >= 0 && output.n < it->second.tx->vout.size() &&\n                 IsMine(it->second.tx->vout[output.n]) == ISMINE_SPENDABLE) {\n                 CTxDestination address;\n@@ -2909,7 +2909,7 @@ void CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n     }\n \n     std::string err_string;\n-    if (!wtx.SubmitMemoryPoolAndRelay(err_string, true, *locked_chain)) {\n+    if (!wtx.SubmitMemoryPoolAndRelay(err_string, true)) {\n         WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", err_string);\n         // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n     }\n@@ -3129,10 +3129,10 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances(interfaces::Chain:\n             if (!wtx.IsTrusted(locked_chain, trusted_parents))\n                 continue;\n \n-            if (wtx.IsImmatureCoinBase(locked_chain))\n+            if (wtx.IsImmatureCoinBase())\n                 continue;\n \n-            int nDepth = wtx.GetDepthInMainChain(locked_chain);\n+            int nDepth = wtx.GetDepthInMainChain();\n             if (nDepth < (wtx.IsFromMe(ISMINE_ALL) ? 0 : 1))\n                 continue;\n \n@@ -3144,7 +3144,7 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances(interfaces::Chain:\n                 if(!ExtractDestination(wtx.tx->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                CAmount n = IsSpent(locked_chain, walletEntry.first, i) ? 0 : wtx.tx->vout[i].nValue;\n+                CAmount n = IsSpent(walletEntry.first, i) ? 0 : wtx.tx->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;\n@@ -3908,7 +3908,7 @@ void CWallet::postInitProcess()\n \n     // Add wallet transactions that aren't already in a block to mempool\n     // Do this here as mempool requires genesis block to be loaded\n-    ReacceptWalletTransactions(*locked_chain);\n+    ReacceptWalletTransactions();\n \n     // Update wallet transactions with current mempool transactions.\n     chain().requestMempoolTransactions(*this);\n@@ -3934,7 +3934,7 @@ CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn)\n     m_pre_split = false;\n }\n \n-int CWalletTx::GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const\n+int CWalletTx::GetDepthInMainChain() const\n {\n     assert(pwallet != nullptr);\n     AssertLockHeld(pwallet->cs_wallet);\n@@ -3943,19 +3943,19 @@ int CWalletTx::GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const\n     return (pwallet->GetLastBlockHeight() - m_confirm.block_height + 1) * (isConflicted() ? -1 : 1);\n }\n \n-int CWalletTx::GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const\n+int CWalletTx::GetBlocksToMaturity() const\n {\n     if (!IsCoinBase())\n         return 0;\n-    int chain_depth = GetDepthInMainChain(locked_chain);\n+    int chain_depth = GetDepthInMainChain();\n     assert(chain_depth >= 0); // coinbase tx should not be conflicted\n     return std::max(0, (COINBASE_MATURITY+1) - chain_depth);\n }\n \n-bool CWalletTx::IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const\n+bool CWalletTx::IsImmatureCoinBase() const\n {\n     // note GetBlocksToMaturity is 0 for non-coinbase tx\n-    return GetBlocksToMaturity(locked_chain) > 0;\n+    return GetBlocksToMaturity() > 0;\n }\n \n std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const {"
      },
      {
        "sha": "081d644e1fc99c2656be999770c5eae7b7d62266",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
        "patch": "@@ -449,14 +449,14 @@ class CWalletTx\n \n     //! filter decides which addresses will count towards the debit\n     CAmount GetDebit(const isminefilter& filter) const;\n-    CAmount GetCredit(interfaces::Chain::Lock& locked_chain, const isminefilter& filter) const;\n-    CAmount GetImmatureCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache=true) const;\n+    CAmount GetCredit(const isminefilter& filter) const;\n+    CAmount GetImmatureCredit(bool fUseCache = true) const;\n     // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n     // annotation \"EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\". The\n     // annotation \"NO_THREAD_SAFETY_ANALYSIS\" was temporarily added to avoid\n     // having to resolve the issue of member access into incomplete type CWallet.\n-    CAmount GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache=true, const isminefilter& filter=ISMINE_SPENDABLE) const NO_THREAD_SAFETY_ANALYSIS;\n-    CAmount GetImmatureWatchOnlyCredit(interfaces::Chain::Lock& locked_chain, const bool fUseCache=true) const;\n+    CAmount GetAvailableCredit(bool fUseCache = true, const isminefilter& filter = ISMINE_SPENDABLE) const NO_THREAD_SAFETY_ANALYSIS;\n+    CAmount GetImmatureWatchOnlyCredit(const bool fUseCache = true) const;\n     CAmount GetChange() const;\n \n     // Get the marginal bytes if spending the specified output from this transaction\n@@ -483,7 +483,7 @@ class CWalletTx\n     int64_t GetTxTime() const;\n \n     // Pass this transaction to node for mempool insertion and relay to peers if flag set to true\n-    bool SubmitMemoryPoolAndRelay(std::string& err_string, bool relay, interfaces::Chain::Lock& locked_chain);\n+    bool SubmitMemoryPoolAndRelay(std::string& err_string, bool relay);\n \n     // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n     // annotation \"EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\". The annotation\n@@ -505,15 +505,15 @@ class CWalletTx\n     // resolve the issue of member access into incomplete type CWallet. Note\n     // that we still have the runtime check \"AssertLockHeld(pwallet->cs_wallet)\"\n     // in place.\n-    int GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const NO_THREAD_SAFETY_ANALYSIS;\n-    bool IsInMainChain(interfaces::Chain::Lock& locked_chain) const { return GetDepthInMainChain(locked_chain) > 0; }\n+    int GetDepthInMainChain() const NO_THREAD_SAFETY_ANALYSIS;\n+    bool IsInMainChain() const { return GetDepthInMainChain() > 0; }\n \n     /**\n      * @return number of blocks to maturity for this transaction:\n      *  0 : is not a coinbase transaction, or is a mature coinbase transaction\n      * >0 : is a coinbase transaction which matures in this many blocks\n      */\n-    int GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const;\n+    int GetBlocksToMaturity() const;\n     bool isAbandoned() const { return m_confirm.status == CWalletTx::ABANDONED; }\n     void setAbandoned()\n     {\n@@ -530,7 +530,7 @@ class CWalletTx\n     void setConfirmed() { m_confirm.status = CWalletTx::CONFIRMED; }\n     const uint256& GetHash() const { return tx->GetHash(); }\n     bool IsCoinBase() const { return tx->IsCoinBase(); }\n-    bool IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const;\n+    bool IsImmatureCoinBase() const;\n };\n \n class COutput\n@@ -808,7 +808,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<OutputGroup> groups,\n         std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n-    bool IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     // Whether this or any UTXO with the same CTxDestination has been spent.\n     bool IsUsedDestination(const CTxDestination& dst) const;\n@@ -891,7 +891,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     };\n     ScanResult ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, bool fUpdate);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n-    void ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void ReacceptWalletTransactions() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions();\n     struct Balance {\n         CAmount m_mine_trusted{0};           //!< Trusted, at depth=GetBalance.min_depth or more\n@@ -1070,7 +1070,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     bool TransactionCanBeAbandoned(const uint256& hashTx) const;\n \n     /* Mark a transaction (and it in-wallet descendants) as abandoned so its inputs may be respent. */\n-    bool AbandonTransaction(interfaces::Chain::Lock& locked_chain, const uint256& hashTx);\n+    bool AbandonTransaction(const uint256& hashTx);\n \n     /** Mark a transaction as replaced by another transaction (e.g., BIP 125). */\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);"
      }
    ]
  },
  {
    "sha": "36b68de5b2938722911db900ca299f7008780d01",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmI2OGRlNWIyOTM4NzIyOTExZGI5MDBjYTI5OWY3MDA4NzgwZDAx",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-29T14:18:50Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-06T18:36:43Z"
      },
      "message": "Remove getBlockDepth method from Chain::interface\n\nPass conflicting height in CWallet::MarkConflicted",
      "tree": {
        "sha": "3791969a005bbd1c2982cb8c2a510a8975cc3b7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3791969a005bbd1c2982cb8c2a510a8975cc3b7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36b68de5b2938722911db900ca299f7008780d01",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36b68de5b2938722911db900ca299f7008780d01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36b68de5b2938722911db900ca299f7008780d01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36b68de5b2938722911db900ca299f7008780d01/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b66c429c56c85fa16c309be0b2bca9c25fdd3e1a"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 1,
      "deletions": 11
    },
    "files": [
      {
        "sha": "26856a00d37828e7f3e8b1d310b45b322c5b7d0a",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b68de5b2938722911db900ca299f7008780d01/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b68de5b2938722911db900ca299f7008780d01/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=36b68de5b2938722911db900ca299f7008780d01",
        "patch": "@@ -58,12 +58,6 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n         }\n         return nullopt;\n     }\n-    int getBlockDepth(const uint256& hash) override\n-    {\n-        const Optional<int> tip_height = getHeight();\n-        const Optional<int> height = getBlockHeight(hash);\n-        return tip_height && height ? *tip_height - *height + 1 : 0;\n-    }\n     uint256 getBlockHash(int height) override\n     {\n         LockAssertion lock(::cs_main);"
      },
      {
        "sha": "349af152d5c660997434824d85ec4d3c0e767f64",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b68de5b2938722911db900ca299f7008780d01/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b68de5b2938722911db900ca299f7008780d01/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=36b68de5b2938722911db900ca299f7008780d01",
        "patch": "@@ -76,10 +76,6 @@ class Chain\n         //! included in the current chain.\n         virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n \n-        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n-        //! so on. Returns 0 for a block not included in the current chain.\n-        virtual int getBlockDepth(const uint256& hash) = 0;\n-\n         //! Get block hash. Height must be valid or this function will abort.\n         virtual uint256 getBlockHash(int height) = 0;\n "
      },
      {
        "sha": "2bc39ea3d9139ee64ecf4107855c35178f69eb01",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b68de5b2938722911db900ca299f7008780d01/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b68de5b2938722911db900ca299f7008780d01/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=36b68de5b2938722911db900ca299f7008780d01",
        "patch": "@@ -986,7 +986,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, int conflicting_height, c\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n \n-    int conflictconfirms = -locked_chain->getBlockDepth(hashBlock);\n+    int conflictconfirms = (m_last_block_processed_height - conflicting_height + 1) * -1;\n     // If number of conflict confirms cannot be determined, this means\n     // that the block is still unknown or not yet part of the main chain,\n     // for example when loading the wallet during a reindex. Do nothing in that"
      }
    ]
  }
]