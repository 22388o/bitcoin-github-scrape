ajtowns,2020-09-25 15:16:26,"This was added in #17261 in which it was [remarked](https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363058528) ""static initialization order result[ed] in a potential uninitialized object access."" I have an alternative change at https://github.com/ajtowns/bitcoin/commits/202009-uint256_1_v2 which does a static init and hence avoids the functional call, and seems to pass travis fine, so mi",https://github.com/bitcoin/bitcoin/pull/20016#issuecomment-698988515,698988515,
achow101,2020-09-25 15:45:44,"> I have an alternative change at https://github.com/ajtowns/bitcoin/commits/202009-uint256_1_v2 which does a static init and hence avoids the functional call, and seems to pass travis fine, so might be worth considering that?\n\nConcept ACK\n\n",https://github.com/bitcoin/bitcoin/pull/20016#issuecomment-699004522,699004522,
kallewoof,2020-09-26 07:07:15,"Clear improvement.\n\nACK 832109af0d213239b1b803a1de7f78f193d28ad2",https://github.com/bitcoin/bitcoin/pull/20016#issuecomment-699445273,699445273,
ajtowns,2020-09-26 08:41:11,Updated to simplfy constructors and replace `UINT256_ONE()` call with `uint256::ONE` constant,https://github.com/bitcoin/bitcoin/pull/20016#issuecomment-699461046,699461046,
practicalswift,2020-09-26 10:06:42,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20016#issuecomment-699473875,699473875,
sipa,2020-09-26 18:44:03,"utACK 915c1c25fd6d6bdc249b71be12db0744312729da\n\n> 1 is a constant\n\nIt is in tautologies that the ordering of society is centered.\n",https://github.com/bitcoin/bitcoin/pull/20016#issuecomment-699533115,699533115,
MarcoFalke,2020-09-26 20:26:02,"(1 is not a constant in python, but we don't use that here https://kate.io/blog/2017/08/22/weird-python-integers/)",https://github.com/bitcoin/bitcoin/pull/20016#issuecomment-699544091,699544091,
promag,2020-09-28 07:13:11,ACK 4cc7171c9887e88027642927c979e507d7b78dda,https://github.com/bitcoin/bitcoin/pull/20016#issuecomment-699824408,699824408,
MarcoFalke,2020-09-28 07:15:57,"re ACK 4cc7171c98, only change is some constexpr shuffling üõÅ\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre ACK 4cc7171c98, only change is some constexpr shuffling üõÅ\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhxqwwAxiSleGr6i0+dxWiXOWdI69",https://github.com/bitcoin/bitcoin/pull/20016#issuecomment-699825738,699825738,
MarcoFalke,2020-09-26 20:22:29,"```suggestion\n    constexpr explicit base_blob(uint8_t v) : m_data{v} {}\n```\n\nstyle nit: Would be nice to use the same ordering of keywords for different lines in the same patch. \n\n<!--\n(https://en.cppreference.com/w/cpp/utility/optional/optional)",https://github.com/bitcoin/bitcoin/pull/20016#discussion_r495492066,495492066,src/uint256.h
hebasto,2020-09-27 07:31:42,"fe9fbb6886a96de38dc3fdd65f28dfc01f707f81\n\nstyle nit:\n```suggestion\nBOOST_AUTO_TEST_CASE(check_ONE)\n```",https://github.com/bitcoin/bitcoin/pull/20016#discussion_r495540784,495540784,src/test/uint256_tests.cpp
ajtowns,2020-09-27 09:56:27,Makes sense; https://github.com/cplusplus/draft/wiki/Specification-Style-Guidelines#formatting-declarations-and-definitions also suggests `constexpr explicit`,https://github.com/bitcoin/bitcoin/pull/20016#discussion_r495554448,495554448,src/uint256.h
ajtowns,2020-09-28 06:00:47,Added the `constexpr` annotations. Left the formatting consistent with the rest of uint256_tests.cpp (and arith_uint256_tests.cpp).,https://github.com/bitcoin/bitcoin/pull/20016#discussion_r495705112,495705112,src/test/uint256_tests.cpp
