[
  {
    "sha": "c648e636b2f230db5f1d1137088685f74ae42454",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjQ4ZTYzNmIyZjIzMGRiNWYxZDExMzcwODg2ODVmNzRhZTQyNDU0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-04-18T15:03:13Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-04-19T16:12:03Z"
      },
      "message": "test: add wait_for_cookie_credentials() to test framework\n\nto be able to ensure the cookie file is written and auth credentials available\nwhen testing CLI/RPC commands before the RPC connection is up.",
      "tree": {
        "sha": "5252c1dc73b7769b79c26c2f338207f5bd6717d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5252c1dc73b7769b79c26c2f338207f5bd6717d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c648e636b2f230db5f1d1137088685f74ae42454",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl6ceFMACgkQT1chs9Dj\nkh1WoA//QoDuBcLBAZz56I/ErgaV0ug0FpOmevyvUgifCAaLI5mvDZR3oIaN8Fl8\nq/rg0BGVl1miTcHAwTLHdJeYsXu1+KPPXjYh3bD5RQV2ljaTkGEfbCVQivFEIDYv\n8J7vG7xgg3WvEkQe8hPrBu7Z+OkTLzTAN6zkw8BSpYIh0rN4rXpooB8L7aPxx8St\nVT0qiotujJjcFRa8GxnZn5pc9rn2CRsxqktC22M2WoPFZezKyj6XKLfjDiGKQZsW\nwmIQ96vNSQOdiOCcl8jZT6Al/AEjLCxOT0cfwQriQt/GIFRx4BkrKMVyD5l6J3jX\nnpn4gdVvoLaSL4zKQDQRQkNMjfRbFY9v62N9r2NA79O0I0BKRUs5mjKoJxuvs5hp\nqtqPxis97YZrvnw4inJFzc5AooLvEqSLxg7eQx44m31GFX5gwskpA9rkd8wMUMAG\n1ie7T6PgcS4ZRD3iVjr68PrMjBHRV907H/qWrKhjK87UFXo5ID/OIZPb124Z+2Wf\n2ygWi8Bc8z5QrxWKeSXYOXSPRXxPB0/BWgVmfn4YAY0xQZxwdlaWrExEa8s2xrn0\n02ad0tkqYfsCfEdSuAhRwLIEbqphHJG0P2zmMuQFdkgY5tnb6PuCL5uWTIOtZ778\nhvgyCShAf0yzK3mIB96rqOLG7bFZK31AciKIo7rOWJxWzXHzA6s=\n=tgWL\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILr3is0BTIeZuNkLS5al4tltmJt85y7APOPDkBjdTAVBCP/wECm2/VRM5e2B\nTwzUztkddxEI8SD41DFLbtbaAF3Z7Swn3JcDyiB/DQFq7b25+fFlECni8wjxBF6c\neFXwCJ4mvG8r1G8qAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQN6nM5fJJZMVXAgr86nbMqAjxBF6ceFXwCPxz\nPOpdxR2yAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHku\nY29t//AQXljofKl1xqug7LkaU40zmAjxICNseuoFrtqdDF7xgPfzYm0daEBn1rHi\n7gUaaRVewzLbCPEEXpx4VPAItFv6VKxSKxUAg9/jDS75DI4pKGh0dHBzOi8vZmlu\nbmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23wENi1++sP3qDDHytiu2LkzuEI\n8SCbi1lZvOXQ1LVLHgJOd7AayNLk4/+/Sr5+yeCp8/LAlAjxBF6ceFXwCDTCkTaE\n/4bPAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 5252c1dc73b7769b79c26c2f338207f5bd6717d7\nparent f8102d90889a786a568d62ee4eef13049f8cea00\nauthor Jon Atack <jon@atack.com> 1587222193 +0200\ncommitter Jon Atack <jon@atack.com> 1587312723 +0200\n\ntest: add wait_for_cookie_credentials() to test framework\n\nto be able to ensure the cookie file is written and auth credentials available\nwhen testing CLI/RPC commands before the RPC connection is up.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c648e636b2f230db5f1d1137088685f74ae42454",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c648e636b2f230db5f1d1137088685f74ae42454",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c648e636b2f230db5f1d1137088685f74ae42454/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8102d90889a786a568d62ee4eef13049f8cea00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8102d90889a786a568d62ee4eef13049f8cea00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8102d90889a786a568d62ee4eef13049f8cea00"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "64f39b8cfe3b09742f9d2de91e59940146705f6b",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c648e636b2f230db5f1d1137088685f74ae42454/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c648e636b2f230db5f1d1137088685f74ae42454/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=c648e636b2f230db5f1d1137088685f74ae42454",
        "patch": "@@ -26,6 +26,7 @@\n     MAX_NODES,\n     append_config,\n     delete_cookie_file,\n+    get_auth_cookie,\n     get_rpc_proxy,\n     rpc_url,\n     wait_until,\n@@ -237,12 +238,27 @@ def wait_for_rpc_connection(self):\n             except OSError as e:\n                 if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n                     raise  # unknown OS error\n-            except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n+            except ValueError as e:  # cookie file not found and no rpcuser or rpcpassword; bitcoind is still starting\n                 if \"No RPC credentials\" not in str(e):\n                     raise\n             time.sleep(1.0 / poll_per_s)\n         self._raise_assertion_error(\"Unable to connect to bitcoind after {}s\".format(self.rpc_timeout))\n \n+    def wait_for_cookie_credentials(self):\n+        \"\"\"Ensures auth cookie credentials can be read, e.g. for testing CLI with -rpcwait before RPC connection is up.\"\"\"\n+        self.log.debug(\"Waiting for cookie credentials\")\n+        # Poll at a rate of four times per second.\n+        poll_per_s = 4\n+        for _ in range(poll_per_s * self.rpc_timeout):\n+            try:\n+                get_auth_cookie(self.datadir, self.chain)\n+                self.log.debug(\"Cookie credentials successfully retrieved\")\n+                return\n+            except ValueError:  # cookie file not found and no rpcuser or rpcpassword; bitcoind is still starting\n+                pass            # so we continue polling until RPC credentials are retrieved\n+            time.sleep(1.0 / poll_per_s)\n+        self._raise_assertion_error(\"Unable to retrieve cookie credentials after {}s\".format(self.rpc_timeout))\n+\n     def generate(self, nblocks, maxtries=1000000):\n         self.log.debug(\"TestNode.generate() dispatches `generate` call to `generatetoaddress`\")\n         return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries)"
      }
    ]
  },
  {
    "sha": "92fe537cf704dfb4ae830c8c8b382f08c4893e65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmZlNTM3Y2Y3MDRkZmI0YWU4MzBjOGM4YjM4MmYwOGM0ODkzZTY1",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-04-17T19:19:48Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-04-19T16:12:05Z"
      },
      "message": "test: fix intermittent race condition in interface_bitcoin_cli.py\n\nby calling wait_for_cookie_credentials() to ensure the cookie file is written\nand auth credentials available for testing the CLI -rpcwait option before the\nRPC connection is up.",
      "tree": {
        "sha": "dcab81d169e6ceb33f4f4006ff8fe05856b80a0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcab81d169e6ceb33f4f4006ff8fe05856b80a0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92fe537cf704dfb4ae830c8c8b382f08c4893e65",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl6ceFYACgkQT1chs9Dj\nkh3SpQ/+Jlk8cns25kFfkZwFlDJ/0CMpJZGpRdluovX0MI45xaBHQ63PcY5GcOd7\ncxUGNKS+ENz4XXJb3V9MCaaexWevIGdaGX0EymM/Xms9dgTYewMyu2CBYlObp/rC\n+1uqh8YsQuToEV1aLAn+i6+WsyPGZmjC8C2CvHQQ+Ux+7bdjrNH6rx3y1UrTqf7O\nLKoJwvuqWminD3zrQZ+djD9z+CgCq4b67DECw8AvTmX4HuCcPDFxKwilCKz8AwF1\nouVl84va+HXfH03aSnEbK4kp4Yf0daiXacJteY0nAFCJKr5DHgkuiObZh84eSkDX\nTX+GOQmlNJC9B73BM3wn9IkmbKHJS8qR4ZZsWGfmaGgaBaRyzBylf2M+3Hf/T4on\ndy+ONCYZoXEPOJmqotlyjuc71kdboQyAWzB3OJmocUkVPit1gDeYZ0tI7xc+V/8o\nly1CzNaIjgwOvIqzsu3H6bXMwRMMRlkrOUC1VfCYhzuveMUGQYj4wh78+jpbJBtD\np1JiHxtK4Dx/1l2mssuRZ7Yd11BvCTaZWkFhgWV8pIby55cJsYVtNHvIt5Y8ZBNh\nNOuouCbNBn8RO4dsO1AaW+KEngSQaRcZdlZj9SM5RDf82mVXSpfUJKSxQ6/aVZuE\n2rUgWFxXAbITk/S210y6xjfG6OmDWxP4XdbnUWKav0MLvkuN6QQ=\n=AmRn\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICSu7u6rKhnU3gueIk7+Z3+aBkgKu6zjmrjUg2rNeHTTCP/wEApVi2u2BaDv\n026PcAUQ+uwI8QRenHhY8AgvEEVsFZGzAACD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQEsoMJLo9t0WNjv98\nNpw4EQjxBF6ceFjwCAs6oe+1uQinAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQMhjkWc6LSHN2tn3NAdm9lwjx\nBF6ceFfwCOYTn48Q8t0gAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5j\nYXRhbGxheHkuY29t8BBvGqY/cbyyPxabInK/4LMFCPEEXpx4V/AIT17RXPFWpCoA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree dcab81d169e6ceb33f4f4006ff8fe05856b80a0d\nparent c648e636b2f230db5f1d1137088685f74ae42454\nauthor Jon Atack <jon@atack.com> 1587151188 +0200\ncommitter Jon Atack <jon@atack.com> 1587312725 +0200\n\ntest: fix intermittent race condition in interface_bitcoin_cli.py\n\nby calling wait_for_cookie_credentials() to ensure the cookie file is written\nand auth credentials available for testing the CLI -rpcwait option before the\nRPC connection is up.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fe537cf704dfb4ae830c8c8b382f08c4893e65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92fe537cf704dfb4ae830c8c8b382f08c4893e65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fe537cf704dfb4ae830c8c8b382f08c4893e65/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c648e636b2f230db5f1d1137088685f74ae42454",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c648e636b2f230db5f1d1137088685f74ae42454",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c648e636b2f230db5f1d1137088685f74ae42454"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 12,
      "deletions": 16
    },
    "files": [
      {
        "sha": "2e80d7a2483756bfefcf14c361a2e73885489788",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 12,
        "deletions": 16,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fe537cf704dfb4ae830c8c8b382f08c4893e65/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fe537cf704dfb4ae830c8c8b382f08c4893e65/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=92fe537cf704dfb4ae830c8c8b382f08c4893e65",
        "patch": "@@ -13,7 +13,6 @@\n BALANCE = (BLOCKS - 100) * 50\n \n class TestBitcoinCli(BitcoinTestFramework):\n-\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n@@ -33,12 +32,12 @@ def run_test(self):\n         user, password = get_auth_cookie(self.nodes[0].datadir, self.chain)\n \n         self.log.info(\"Test -stdinrpcpass option\")\n-        assert_equal(BLOCKS, self.nodes[0].cli('-rpcuser=%s' % user, '-stdinrpcpass', input=password).getblockcount())\n-        assert_raises_process_error(1, \"Incorrect rpcuser or rpcpassword\", self.nodes[0].cli('-rpcuser=%s' % user, '-stdinrpcpass', input=\"foo\").echo)\n+        assert_equal(BLOCKS, self.nodes[0].cli('-rpcuser={}'.format(user), '-stdinrpcpass', input=password).getblockcount())\n+        assert_raises_process_error(1, 'Incorrect rpcuser or rpcpassword', self.nodes[0].cli('-rpcuser={}'.format(user), '-stdinrpcpass', input='foo').echo)\n \n         self.log.info(\"Test -stdin and -stdinrpcpass\")\n-        assert_equal([\"foo\", \"bar\"], self.nodes[0].cli('-rpcuser=%s' % user, '-stdin', '-stdinrpcpass', input=password + \"\\nfoo\\nbar\").echo())\n-        assert_raises_process_error(1, \"Incorrect rpcuser or rpcpassword\", self.nodes[0].cli('-rpcuser=%s' % user, '-stdin', '-stdinrpcpass', input=\"foo\").echo)\n+        assert_equal(['foo', 'bar'], self.nodes[0].cli('-rpcuser={}'.format(user), '-stdin', '-stdinrpcpass', input=password + '\\nfoo\\nbar').echo())\n+        assert_raises_process_error(1, 'Incorrect rpcuser or rpcpassword', self.nodes[0].cli('-rpcuser={}'.format(user), '-stdin', '-stdinrpcpass', input='foo').echo)\n \n         self.log.info(\"Test connecting to a non-existing server\")\n         assert_raises_process_error(1, \"Could not connect to the server\", self.nodes[0].cli('-rpcport=1').echo)\n@@ -52,7 +51,7 @@ def run_test(self):\n         self.log.info(\"Test -getinfo returns expected network and blockchain info\")\n         if self.is_wallet_compiled():\n             self.nodes[0].encryptwallet(password)\n-        cli_get_info = self.nodes[0].cli('-getinfo').send_cli()\n+        cli_get_info = self.nodes[0].cli().send_cli('-getinfo')\n         network_info = self.nodes[0].getnetworkinfo()\n         blockchain_info = self.nodes[0].getblockchaininfo()\n         assert_equal(cli_get_info['version'], network_info['version'])\n@@ -76,20 +75,17 @@ def run_test(self):\n         else:\n             self.log.info(\"*** Wallet not compiled; cli getwalletinfo and -getinfo wallet tests skipped\")\n \n-        self.stop_node(0)\n-\n         self.log.info(\"Test -version with node stopped\")\n-        cli_response = self.nodes[0].cli(\"-version\").send_cli()\n+        self.stop_node(0)\n+        cli_response = self.nodes[0].cli().send_cli('-version')\n         assert \"{} RPC client version\".format(self.config['environment']['PACKAGE_NAME']) in cli_response\n \n-        self.log.info(\"Test -rpcwait option waits for RPC connection instead of failing\")\n-        # Start node without RPC connection.\n-        self.nodes[0].start()\n-        # Verify failure without -rpcwait.\n-        assert_raises_process_error(1, \"Could not connect to the server\", self.nodes[0].cli('getblockcount').echo)\n-        # Verify success using -rpcwait.\n-        assert_equal(BLOCKS, self.nodes[0].cli('-rpcwait', 'getblockcount').send_cli())\n+        self.log.info(\"Test -rpcwait option successfully waits for RPC connection\")\n+        self.nodes[0].start()  # start node without RPC connection\n+        self.nodes[0].wait_for_cookie_credentials()  # ensure cookie file is available to avoid race condition\n+        blocks = self.nodes[0].cli('-rpcwait').send_cli('getblockcount')\n         self.nodes[0].wait_for_rpc_connection()\n+        assert_equal(blocks, BLOCKS)\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]