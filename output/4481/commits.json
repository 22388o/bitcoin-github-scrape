[
  {
    "sha": "709a98405e8e231a16ec50a236227e7f10217e87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDlhOTg0MDVlOGUyMzFhMTZlYzUwYTIzNjIyN2U3ZjEwMjE3ZTg3",
    "commit": {
      "author": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-07-11T14:42:49Z"
      },
      "committer": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-09-12T23:15:50Z"
      },
      "message": "Include undo data to startup checks and refactor them onto a function.\n\nThe check is now simpler, somewhat more efficient, and\ncovers more data, to be sure the node can reorganize.",
      "tree": {
        "sha": "1c298fafd75bc642247ef3862def1bafe2a04d84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c298fafd75bc642247ef3862def1bafe2a04d84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/709a98405e8e231a16ec50a236227e7f10217e87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJUE36qAAoJEAB9eonG33styOoP/RxR5+UQ59ZnX9t6wztQOV8R\n70qOcGaBuLi8gA88PRZvpP6zJW6EM5aN70NwsZTO6m89Sj5JkfqrtT97yBRve4pL\nNtPaOTNvNhV5foNiSfL6ueVFmLEas9HTJaQmUG1HhHStO55nJ/mPM+zNheEervvd\n1EaWVdVoyl7Tsqm20gXHl/9gONp/zf/mfGpYCjpacMqSK6r4k2p5UXyvRCv57Tbo\npTBv+uWn4BqSBfnXEQpggtd5zZS7L0SxPBQ2Lag9ol02ecgNpl2euDu32GrOeL5K\nb+6iUXUJNFruztLfva2GJaYzECAvvA5spFgwU063+xuQh76rxFVm0tV1z2HEpAOB\nfKzPcvO/G3PFyv9m2FazE8XJ/lBSRKAw/DS+uCXUPGj8+Qih2OcYod4X50DOGAOL\nUrVCepTB4rbWFtNQlAl04DQ/I8+1d/CXP/4nhRBXewkIrjCMoWhs35fZ2qnIjJE4\nmFZYg3hg10yynkBC3fmhNrW+fxbE8HGcU33v0uAZ8Oh7/U1rzcMdk9Fg04SamlH+\nulDvvg92gIxkjNHFgDYehPmiJZ58J0WHQq5hKV/vqRPIH86f4TJvumlCv1GZu01Z\nJusFZuDAMCDmL3utg4kG4IyS1Gvsb2ciChh8//NNGzQ6JDbnWk0vzJTeg1VbrLDu\nv4GQ1CA+FIjOm5q/KiXJ\n=gFQ4\n-----END PGP SIGNATURE-----",
        "payload": "tree 1c298fafd75bc642247ef3862def1bafe2a04d84\nparent e5fc6631b9ca452eaacc8f978b3c5ffe2ef38e77\nauthor Ruben Dario Ponticelli <rdponticelli@gmail.com> 1405089769 -0300\ncommitter Ruben Dario Ponticelli <rdponticelli@gmail.com> 1410563750 -0300\n\nInclude undo data to startup checks and refactor them onto a function.\n\nThe check is now simpler, somewhat more efficient, and\ncovers more data, to be sure the node can reorganize.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709a98405e8e231a16ec50a236227e7f10217e87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/709a98405e8e231a16ec50a236227e7f10217e87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709a98405e8e231a16ec50a236227e7f10217e87/comments",
    "author": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5fc6631b9ca452eaacc8f978b3c5ffe2ef38e77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5fc6631b9ca452eaacc8f978b3c5ffe2ef38e77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5fc6631b9ca452eaacc8f978b3c5ffe2ef38e77"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 41,
      "deletions": 18
    },
    "files": [
      {
        "sha": "2ca54363e9dae4d14230569eb85477f00b8fc659",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/709a98405e8e231a16ec50a236227e7f10217e87/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/709a98405e8e231a16ec50a236227e7f10217e87/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=709a98405e8e231a16ec50a236227e7f10217e87",
        "patch": "@@ -960,6 +960,11 @@ bool AppInit2(boost::thread_group& threadGroup)\n                     break;\n                 }\n \n+                if (!CheckBlockFiles()) {\n+                    strLoadError = _(\"Error checking required block files\");\n+                    break;\n+                }\n+\n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n                 if (!mapBlockIndex.empty() && chainActive.Genesis() == NULL)"
      },
      {
        "sha": "a301892ba8568f7697a99e0818ff7a793a29b2e4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 18,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/709a98405e8e231a16ec50a236227e7f10217e87/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/709a98405e8e231a16ec50a236227e7f10217e87/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=709a98405e8e231a16ec50a236227e7f10217e87",
        "patch": "@@ -2877,24 +2877,6 @@ bool static LoadBlockIndexDB()\n     if (pblocktree->ReadBlockFileInfo(nLastBlockFile, infoLastBlockFile))\n         LogPrintf(\"LoadBlockIndexDB(): last block file info: %s\\n\", infoLastBlockFile.ToString());\n \n-    // Check presence of blk files\n-    LogPrintf(\"Checking all blk files are present...\\n\");\n-    set<int> setBlkDataFiles;\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n-    {\n-        CBlockIndex* pindex = item.second;\n-        if (pindex->nStatus & BLOCK_HAVE_DATA) {\n-            setBlkDataFiles.insert(pindex->nFile);\n-        }\n-    }\n-    for (std::set<int>::iterator it = setBlkDataFiles.begin(); it != setBlkDataFiles.end(); it++)\n-    {\n-        CDiskBlockPos pos(*it, 0);\n-        if (!CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION)) {\n-            return false;\n-        }\n-    }\n-\n     // Check whether we need to continue reindexing\n     bool fReindexing = false;\n     pblocktree->ReadReindexing(fReindexing);\n@@ -2913,7 +2895,41 @@ bool static LoadBlockIndexDB()\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n         DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n         Checkpoints::GuessVerificationProgress(chainActive.Tip()));\n+    return true;\n+}\n \n+bool CheckBlockFiles()\n+{\n+    // Check presence of essential data\n+    LogPrintf(\"Checking all required data for active chain is available...\\n\");\n+    set<int> setBlkDataFileReadable,setBlkUndoFileReadable;\n+    for (CBlockIndex* pindex = chainActive.Tip() ; pindex && pindex->pprev ; pindex = pindex->pprev) {\n+        CDiskBlockPos pos(pindex->nFile, 0);\n+        if (pindex->nStatus & BLOCK_HAVE_DATA) {\n+            if (!setBlkDataFileReadable.count(pindex->nFile)) {\n+                if (CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION))\n+                    setBlkDataFileReadable.insert(pindex->nFile);\n+                else\n+                    return false;\n+            }\n+        }\n+        else {\n+            LogPrintf(\"Error: Missing block data for block: %i\\n\", pindex->nHeight);\n+            return false;\n+        }\n+        if (pindex->nStatus & BLOCK_HAVE_UNDO) {\n+            if (!setBlkUndoFileReadable.count(pindex->nFile)) {\n+                if (CAutoFile(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION))\n+                    setBlkUndoFileReadable.insert(pindex->nFile);\n+                else\n+                    return false;\n+            }\n+        }\n+        else {\n+            LogPrintf(\"Error: Missing undo data for block: %i\\n\", pindex->nHeight);\n+            return false;\n+        }\n+    }\n     return true;\n }\n "
      },
      {
        "sha": "cdd05a05fdbacfcb8fbe9ee1db13bd100c98f62f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/709a98405e8e231a16ec50a236227e7f10217e87/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/709a98405e8e231a16ec50a236227e7f10217e87/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=709a98405e8e231a16ec50a236227e7f10217e87",
        "patch": "@@ -152,6 +152,8 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp = NULL);\n bool InitBlockIndex();\n /** Load the block tree and coins database from disk */\n bool LoadBlockIndex();\n+/** Check all required block files are present */\n+bool CheckBlockFiles();\n /** Unload database information */\n void UnloadBlockIndex();\n /** Print the loaded block tree */"
      }
    ]
  },
  {
    "sha": "efbf886cbe560950f432b5af78f63d4a57c81b51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmJmODg2Y2JlNTYwOTUwZjQzMmI1YWY3OGY2M2Q0YTU3YzgxYjUx",
    "commit": {
      "author": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-07-08T12:50:35Z"
      },
      "committer": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-09-12T23:19:37Z"
      },
      "message": "Add a switch to allow running in a pruned state\n\nThese are the main functional changes on this state:\n\n* Do not allow running with a wallet or a txindex.\n* Check for data at startup is mandatory up to last 288 blocks.\n* NODE_NETWORK flag is unset.\n* Requests for pruned blocks from other peers is answered with \"notfound\" and they are disconnected, not to stall their IBD.\n* The range of blocks pruned is logged.",
      "tree": {
        "sha": "31e336266a311e7aecbe20d5eff6366e6d381fe4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31e336266a311e7aecbe20d5eff6366e6d381fe4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efbf886cbe560950f432b5af78f63d4a57c81b51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJUE3+LAAoJEAB9eonG33stAnUP/1EPOLoxA+ahLeBgatI9hcku\nMROOIzrObHB3cijcLFkFnX7CfXq51oCvxU/0O+on8DaoCWbF4ilY8Jy2LNVNMFD4\nSBuUcznKdH5Y6kjOBAL+TSWDnTQKoRtvzkAwvXwpaflzaAzKGfAuSIew5I7z1J4W\nddENsiOEDc5eTK4VzboXD5whSW0x6Wl8wGauZBUfDtVAJ5V8uiQE0P8CfG+VR5CN\n97XjrV2dZcumKKONPMxcU4YMSqdmDorTbmGFdzXnJ2jPJ0sFNVgdQZ/tx4j49pVX\nBAhxGte7pd1yILHewTbKK7K4rOtize2NpJmWiSCrtEtzofLjZiWXOoj3S5jcFETk\nesWJ41DPk0/1LYhDZE3INUjry6E+272TDFF/6y2N01TPhAI0S9NPeAs/QsjIl76M\nmdUEYV/aM6W58PSEMld6vj43hJGV1LFPHBOMNLljenupyIXBc3cPAFjRdCZfywFv\nOvGb3rJzxhmXD3mpW2+CVkIEOAIrvRKArm9bpHu4+V+q59emg87lbqZb1MlM48rv\nL6Xmg2SgQQTXn5DVyRli4ogP2IQtltxs9ibEKfjBKE+TQUNAmIPEiytfrI6KwSKK\nk7jywVmgd17I4a0HFD+eIzgef3XNgjvlPFa1W/nT5tP4IUfu8lTluxgrT28x2MI5\nk0zt7+83tWcdR3ROjg7S\n=rB4/\n-----END PGP SIGNATURE-----",
        "payload": "tree 31e336266a311e7aecbe20d5eff6366e6d381fe4\nparent 709a98405e8e231a16ec50a236227e7f10217e87\nauthor Ruben Dario Ponticelli <rdponticelli@gmail.com> 1404823835 -0300\ncommitter Ruben Dario Ponticelli <rdponticelli@gmail.com> 1410563977 -0300\n\nAdd a switch to allow running in a pruned state\n\nThese are the main functional changes on this state:\n\n* Do not allow running with a wallet or a txindex.\n* Check for data at startup is mandatory up to last 288 blocks.\n* NODE_NETWORK flag is unset.\n* Requests for pruned blocks from other peers is answered with \"notfound\" and they are disconnected, not to stall their IBD.\n* The range of blocks pruned is logged.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efbf886cbe560950f432b5af78f63d4a57c81b51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efbf886cbe560950f432b5af78f63d4a57c81b51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efbf886cbe560950f432b5af78f63d4a57c81b51/comments",
    "author": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "709a98405e8e231a16ec50a236227e7f10217e87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709a98405e8e231a16ec50a236227e7f10217e87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/709a98405e8e231a16ec50a236227e7f10217e87"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 103,
      "deletions": 37
    },
    "files": [
      {
        "sha": "5381c064848d43aa571d281b514f7de30ea1ec73",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efbf886cbe560950f432b5af78f63d4a57c81b51/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efbf886cbe560950f432b5af78f63d4a57c81b51/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=efbf886cbe560950f432b5af78f63d4a57c81b51",
        "patch": "@@ -229,6 +229,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -maxorphantx=<n>       \" + strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS) + \"\\n\";\n     strUsage += \"  -par=<n>               \" + strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"), -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS) + \"\\n\";\n     strUsage += \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\";\n+    strUsage += \"  -pruned                \" + _(\"Run in a pruned state\") + \"\\n\";\n     strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\") + \"\\n\";\n #if !defined(WIN32)\n     strUsage += \"  -sysperms              \" + _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") + \"\\n\";\n@@ -593,6 +594,19 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (nFD - MIN_CORE_FILEDESCRIPTORS < nMaxConnections)\n         nMaxConnections = nFD - MIN_CORE_FILEDESCRIPTORS;\n \n+    if (GetBoolArg(\"-pruned\", false)) {\n+        if (GetBoolArg(\"-txindex\", false))\n+            return InitError(_(\"Pruned mode is incompatible with -txindex.\"));\n+#ifdef ENABLE_WALLET\n+        if (!GetBoolArg(\"-disablewallet\", false)) {\n+            if (SoftSetBoolArg(\"-disablewallet\", true))\n+                LogPrintf(\"AppInit2 : parameter interaction: -pruned=1 -> setting -disablewallet=1\\n\");\n+            else\n+                return InitError(_(\"Can't run with a wallet in pruned mode.\"));\n+        }\n+#endif\n+    }\n+\n     // ********************************************************* Step 3: parameter-to-internal-flags\n \n     fDebug = !mapMultiArgs[\"-debug\"].empty();\n@@ -631,6 +645,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n     fLogIPs = GetBoolArg(\"-logips\", false);\n+    fPruned = GetBoolArg(\"-pruned\", false);\n #ifdef ENABLE_WALLET\n     bool fDisableWallet = GetBoolArg(\"-disablewallet\", false);\n #endif\n@@ -961,7 +976,10 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 }\n \n                 if (!CheckBlockFiles()) {\n-                    strLoadError = _(\"Error checking required block files\");\n+                    if (!fPruned)\n+                        strLoadError = _(\"Error checking required block files. You might try to run in -pruned mode, or try to rebuild the block database\");\n+                    else\n+                        strLoadError = _(\"Error checking required block files\");\n                     break;\n                 }\n \n@@ -1249,6 +1267,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n     LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n #endif\n \n+    if (fPruned) // unsetting NODE_NETWORK on pruned state\n+        nLocalServices &= ~NODE_NETWORK;\n     StartNode(threadGroup);\n     if (fServer)\n         StartRPCThreads();"
      },
      {
        "sha": "88961ad99bcc47a6618a9131f8c5aa12b7bddff1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 36,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efbf886cbe560950f432b5af78f63d4a57c81b51/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efbf886cbe560950f432b5af78f63d4a57c81b51/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=efbf886cbe560950f432b5af78f63d4a57c81b51",
        "patch": "@@ -49,6 +49,7 @@ bool fReindex = false;\n bool fTxIndex = false;\n bool fIsBareMultisigStd = true;\n unsigned int nCoinCacheSize = 5000;\n+bool fPruned = false;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n@@ -2901,35 +2902,69 @@ bool static LoadBlockIndexDB()\n bool CheckBlockFiles()\n {\n     // Check presence of essential data\n-    LogPrintf(\"Checking all required data for active chain is available...\\n\");\n-    set<int> setBlkDataFileReadable,setBlkUndoFileReadable;\n+    int nKeepBlksFromHeight = fPruned ? (max((int)(chainActive.Height() - MIN_BLOCKS_TO_KEEP), 0)) : 0;\n+    LogPrintf(\"Checking all required data for active chain is available (mandatory from height %i to %i)\\n\", nKeepBlksFromHeight, max(chainActive.Height(), 0));\n+    map<int, bool> mapBlkDataFileReadable,mapBlkUndoFileReadable;\n+    set<int> setBlockDataPruned,setBlockUndoPruned;\n     for (CBlockIndex* pindex = chainActive.Tip() ; pindex && pindex->pprev ; pindex = pindex->pprev) {\n         CDiskBlockPos pos(pindex->nFile, 0);\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {\n-            if (!setBlkDataFileReadable.count(pindex->nFile)) {\n+            if (!mapBlkDataFileReadable.count(pindex->nFile)) {\n                 if (CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION))\n-                    setBlkDataFileReadable.insert(pindex->nFile);\n+                    mapBlkDataFileReadable[pindex->nFile] = true;\n                 else\n-                    return false;\n+                    if (pindex->nHeight > nKeepBlksFromHeight)\n+                        return false;\n+                    else\n+                        mapBlkDataFileReadable[pindex->nFile] = false;\n             }\n         }\n         else {\n-            LogPrintf(\"Error: Missing block data for block: %i\\n\", pindex->nHeight);\n-            return false;\n+            if (pindex->nHeight > nKeepBlksFromHeight) {\n+                LogPrintf(\"Error: Missing block data for block: %i\\n\", pindex->nHeight);\n+                return false;\n+            }\n         }\n         if (pindex->nStatus & BLOCK_HAVE_UNDO) {\n-            if (!setBlkUndoFileReadable.count(pindex->nFile)) {\n+            if (!mapBlkUndoFileReadable.count(pindex->nFile)) {\n                 if (CAutoFile(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION))\n-                    setBlkUndoFileReadable.insert(pindex->nFile);\n+                    mapBlkUndoFileReadable[pindex->nFile] = true;\n                 else\n-                    return false;\n+                    if (pindex->nHeight > nKeepBlksFromHeight)\n+                        return false;\n+                    else\n+                        mapBlkUndoFileReadable[pindex->nFile] = false;\n             }\n         }\n         else {\n-            LogPrintf(\"Error: Missing undo data for block: %i\\n\", pindex->nHeight);\n-            return false;\n+            if (pindex->nHeight > nKeepBlksFromHeight) {\n+                LogPrintf(\"Error: Missing undo data for block: %i\\n\", pindex->nHeight);\n+                return false;\n+            }\n         }\n-    }\n+        bool fWrite = false;\n+        if (mapBlkDataFileReadable.count(pindex->nFile) && !mapBlkDataFileReadable.find(pindex->nFile)->second) {\n+            pindex->nStatus &= ~BLOCK_HAVE_DATA;\n+            fWrite = true;\n+        }\n+        if (mapBlkUndoFileReadable.count(pindex->nFile) && !mapBlkUndoFileReadable.find(pindex->nFile)->second) {\n+            pindex->nStatus &= ~BLOCK_HAVE_UNDO;\n+            fWrite = true;\n+        }\n+        if (fWrite) {\n+            CDiskBlockIndex blockindex(pindex);\n+            if (!pblocktree->WriteBlockIndex(blockindex))\n+                return false;\n+        }\n+        if(~pindex->nStatus & BLOCK_HAVE_DATA && pindex->nStatus & BLOCK_VALID_CHAIN)\n+            setBlockDataPruned.insert(pindex->nHeight);\n+        if(~pindex->nStatus & BLOCK_HAVE_UNDO && pindex->nStatus & BLOCK_VALID_CHAIN)\n+            setBlockUndoPruned.insert(pindex->nHeight);\n+    }\n+    if(!setBlockDataPruned.empty())\n+        LogPrintf(\"Data for blocks from %i to %i has been pruned\\n\", *setBlockDataPruned.begin(), *setBlockDataPruned.end());\n+    if(!setBlockUndoPruned.empty())\n+        LogPrintf(\"Undo data for blocks from %i to %i has been pruned\\n\", *setBlockUndoPruned.begin(), *setBlockUndoPruned.end());\n     return true;\n }\n \n@@ -3347,30 +3382,38 @@ void static ProcessGetData(CNode* pfrom)\n                 {\n                     // Send block from disk\n                     CBlock block;\n-                    if (!ReadBlockFromDisk(block, (*mi).second))\n-                        assert(!\"cannot load block from disk\");\n-                    if (inv.type == MSG_BLOCK)\n-                        pfrom->PushMessage(\"block\", block);\n-                    else // MSG_FILTERED_BLOCK)\n-                    {\n-                        LOCK(pfrom->cs_filter);\n-                        if (pfrom->pfilter)\n-                        {\n-                            CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n-                            pfrom->PushMessage(\"merkleblock\", merkleBlock);\n-                            // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n-                            // This avoids hurting performance by pointlessly requiring a round-trip\n-                            // Note that there is currently no way for a node to request any single transactions we didnt send here -\n-                            // they must either disconnect and retry or request the full block.\n-                            // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n-                            // however we MUST always provide at least what the remote peer needs\n-                            typedef std::pair<unsigned int, uint256> PairType;\n-                            BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n-                                if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n-                                    pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n+                    if (!ReadBlockFromDisk(block, (*mi).second)) {\n+                        if (fPruned) {\n+                            // Disconnect peers asking us for blocks we don't have, not to stall their IBD. They shouldn't ask as we unset NODE_NETWORK on this mode.\n+                            LogPrintf(\"cannot load block from disk, answering notfound, and disconnecting peer:%d\\n\", pfrom->id);\n+                            vNotFound.push_back(inv);\n+                            pfrom->fDisconnect = true;\n+                        }\n+                        else\n+                            AbortNode(\"cannot load block from disk\");\n+                    }\n+                    else {\n+                        if (inv.type == MSG_BLOCK)\n+                            pfrom->PushMessage(\"block\", block);\n+                        else { // MSG_FILTERED_BLOCK\n+                            LOCK(pfrom->cs_filter);\n+                            if (pfrom->pfilter) {\n+                                CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n+                                pfrom->PushMessage(\"merkleblock\", merkleBlock);\n+                                // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                                // This avoids hurting performance by pointlessly requiring a round-trip\n+                                // Note that there is currently no way for a node to request any single transactions we didnt send here -\n+                                // they must either disconnect and retry or request the full block.\n+                                // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                                // however we MUST always provide at least what the remote peer needs\n+                                typedef std::pair<unsigned int, uint256> PairType;\n+                                BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n+                                    if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n+                                        pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n+                            }\n+                            // else\n+                                // no response\n                         }\n-                        // else\n-                            // no response\n                     }\n \n                     // Trigger them to send a getblocks request for the next batch of inventory"
      },
      {
        "sha": "5ec003d0c00162a7c8cfcfce1679162c4373b8cc",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efbf886cbe560950f432b5af78f63d4a57c81b51/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efbf886cbe560950f432b5af78f63d4a57c81b51/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=efbf886cbe560950f432b5af78f63d4a57c81b51",
        "patch": "@@ -73,6 +73,8 @@ static const int DEFAULT_SCRIPTCHECK_THREADS = 0;\n static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 128;\n /** Timeout in seconds before considering a block download peer unresponsive. */\n static const unsigned int BLOCK_DOWNLOAD_TIMEOUT = 60;\n+/** Minimum amount of blocks to keep unpruned, needed to afford deep reorganizations. */\n+static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n \n /** \"reject\" message codes **/\n static const unsigned char REJECT_MALFORMED = 0x01;\n@@ -107,6 +109,7 @@ extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n extern unsigned int nCoinCacheSize;\n extern CFeeRate minRelayTxFee;\n+extern bool fPruned;\n \n // Minimum disk space required - used in CheckDiskSpace()\n static const uint64_t nMinDiskSpace = 52428800;"
      }
    ]
  }
]