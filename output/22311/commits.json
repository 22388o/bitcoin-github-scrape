[
  {
    "sha": "facd97ae0f0d816107aa3bc9de321244200636a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWNkOTdhZTBmMGQ4MTYxMDdhYTNiYzlkZTMyMTI0NDIwMDYzNmEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T16:28:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T17:41:28Z"
      },
      "message": "scripted-diff: Renames\n\n-BEGIN VERIFY SCRIPT-\n\n ren() { sed -i \"s/\\<$1\\>/$2/g\" test/functional/p2p_blockfilters.py ; }\n\n # Rename from \"node\" to \"peer\" to avoid confusion with self.nodes\n ren node0 peer_0\n ren node1 peer_1\n\n # Remove the confusing \"C\" prefix\n ren CFiltersClient FiltersClient\n\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "c772f03793514639608780f54a9c1454f99fba66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c772f03793514639608780f54a9c1454f99fba66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/facd97ae0f0d816107aa3bc9de321244200636a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiCVgv/aByghqyb66UMpPf671yao0JHpActcoFsnv6Cunw4cB3dYEOaTMvc2/FC\nt7ITedYyyol69HzOLcPo/A36tkFKwGnn+L7zt1JW5kyl8Uxnr+iZ2sNAXhmixZZs\n3FMTvNDkbgq30sa0pan/8zB0yJKQGzNOo4tBT4VU38MtUoZ5LKqKxacIX8PqhSvV\nTHIW9xHj5Gs6Jzp8bwRHx3jYSzfH/dyCn1ZrWkmgIv7M6LpVqvei83RyvsD8Y6qi\nt8zznT15pndk8cbFjO3D8D8ObkI5HTAIvxqvvWOJp+OH87ARKgjM7Rjh3KQFiiNU\nsWnSpbUl2v5QAmzmu1x3dVQ2C4j5M+bXd2Ahr6LL5fyukgMtmThERNeaXQqgsqQs\nrjvig/gMab9cZbHZfOb1dbBGJCHj7HX9Re/+QFv2NFGI346IQZdoBxpWy/nTltJ4\nT2mClUTNAiGrRLxx93veJeP2z9uKIWGpxJIHycun6feHUK5UjrHw7HTYbjDRcl8U\n87BFEZZz\n=tzu0\n-----END PGP SIGNATURE-----",
        "payload": "tree c772f03793514639608780f54a9c1454f99fba66\nparent 327e2691f6e0498aa868af965bb4a951c5be17c5\nauthor MarcoFalke <falke.marco@gmail.com> 1624379298 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624383688 +0200\n\nscripted-diff: Renames\n\n-BEGIN VERIFY SCRIPT-\n\n ren() { sed -i \"s/\\<$1\\>/$2/g\" test/functional/p2p_blockfilters.py ; }\n\n # Rename from \"node\" to \"peer\" to avoid confusion with self.nodes\n ren node0 peer_0\n ren node1 peer_1\n\n # Remove the confusing \"C\" prefix\n ren CFiltersClient FiltersClient\n\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facd97ae0f0d816107aa3bc9de321244200636a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/facd97ae0f0d816107aa3bc9de321244200636a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facd97ae0f0d816107aa3bc9de321244200636a0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "327e2691f6e0498aa868af965bb4a951c5be17c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/327e2691f6e0498aa868af965bb4a951c5be17c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/327e2691f6e0498aa868af965bb4a951c5be17c5"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 27,
      "deletions": 27
    },
    "files": [
      {
        "sha": "e8c27c8e660895829dd54eed5ae288fdcd72aa11",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facd97ae0f0d816107aa3bc9de321244200636a0/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facd97ae0f0d816107aa3bc9de321244200636a0/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=facd97ae0f0d816107aa3bc9de321244200636a0",
        "patch": "@@ -24,7 +24,7 @@\n     assert_equal,\n )\n \n-class CFiltersClient(P2PInterface):\n+class FiltersClient(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         # Store the cfilters received.\n@@ -51,8 +51,8 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Node 0 supports COMPACT_FILTERS, node 1 does not.\n-        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n-        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n+        peer_0 = self.nodes[0].add_p2p_connection(FiltersClient())\n+        peer_1 = self.nodes[1].add_p2p_connection(FiltersClient())\n \n         # Nodes 0 & 1 share the same first 999 blocks in the chain.\n         self.nodes[0].generate(999)\n@@ -69,8 +69,8 @@ def run_test(self):\n         self.wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n \n         # Check that nodes have signalled NODE_COMPACT_FILTERS correctly.\n-        assert node0.nServices & NODE_COMPACT_FILTERS != 0\n-        assert node1.nServices & NODE_COMPACT_FILTERS == 0\n+        assert peer_0.nServices & NODE_COMPACT_FILTERS != 0\n+        assert peer_1.nServices & NODE_COMPACT_FILTERS == 0\n \n         # Check that the localservices is as expected.\n         assert int(self.nodes[0].getnetworkinfo()['localservices'], 16) & NODE_COMPACT_FILTERS != 0\n@@ -81,8 +81,8 @@ def run_test(self):\n             filter_type=FILTER_TYPE_BASIC,\n             stop_hash=int(stale_block_hash, 16)\n         )\n-        node0.send_and_ping(message=request)\n-        response = node0.last_message['cfcheckpt']\n+        peer_0.send_and_ping(message=request)\n+        response = peer_0.last_message['cfcheckpt']\n         assert_equal(response.filter_type, request.filter_type)\n         assert_equal(response.stop_hash, request.stop_hash)\n         assert_equal(len(response.headers), 1)\n@@ -100,8 +100,8 @@ def run_test(self):\n             filter_type=FILTER_TYPE_BASIC,\n             stop_hash=int(tip_hash, 16)\n         )\n-        node0.send_and_ping(request)\n-        response = node0.last_message['cfcheckpt']\n+        peer_0.send_and_ping(request)\n+        response = peer_0.last_message['cfcheckpt']\n         assert_equal(response.filter_type, request.filter_type)\n         assert_equal(response.stop_hash, request.stop_hash)\n \n@@ -117,8 +117,8 @@ def run_test(self):\n             filter_type=FILTER_TYPE_BASIC,\n             stop_hash=int(stale_block_hash, 16)\n         )\n-        node0.send_and_ping(request)\n-        response = node0.last_message['cfcheckpt']\n+        peer_0.send_and_ping(request)\n+        response = peer_0.last_message['cfcheckpt']\n \n         stale_cfcheckpt = self.nodes[0].getblockfilter(stale_block_hash, 'basic')['header']\n         assert_equal(\n@@ -132,8 +132,8 @@ def run_test(self):\n             start_height=1,\n             stop_hash=int(main_block_hash, 16)\n         )\n-        node0.send_and_ping(request)\n-        response = node0.last_message['cfheaders']\n+        peer_0.send_and_ping(request)\n+        response = peer_0.last_message['cfheaders']\n         main_cfhashes = response.hashes\n         assert_equal(len(main_cfhashes), 1000)\n         assert_equal(\n@@ -147,8 +147,8 @@ def run_test(self):\n             start_height=1,\n             stop_hash=int(stale_block_hash, 16)\n         )\n-        node0.send_and_ping(request)\n-        response = node0.last_message['cfheaders']\n+        peer_0.send_and_ping(request)\n+        response = peer_0.last_message['cfheaders']\n         stale_cfhashes = response.hashes\n         assert_equal(len(stale_cfhashes), 1000)\n         assert_equal(\n@@ -163,9 +163,9 @@ def run_test(self):\n             start_height=1,\n             stop_hash=int(stop_hash, 16)\n         )\n-        node0.send_message(request)\n-        node0.sync_with_ping()\n-        response = node0.pop_cfilters()\n+        peer_0.send_message(request)\n+        peer_0.sync_with_ping()\n+        response = peer_0.pop_cfilters()\n         assert_equal(len(response), 10)\n \n         self.log.info(\"Check that cfilter responses are correct.\")\n@@ -182,9 +182,9 @@ def run_test(self):\n             start_height=1000,\n             stop_hash=int(stale_block_hash, 16)\n         )\n-        node0.send_message(request)\n-        node0.sync_with_ping()\n-        response = node0.pop_cfilters()\n+        peer_0.send_message(request)\n+        peer_0.sync_with_ping()\n+        response = peer_0.pop_cfilters()\n         assert_equal(len(response), 1)\n \n         cfilter = response[0]\n@@ -211,9 +211,9 @@ def run_test(self):\n             ),\n         ]\n         for request in requests:\n-            node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n-            node1.send_message(request)\n-            node1.wait_for_disconnect()\n+            peer_1 = self.nodes[1].add_p2p_connection(P2PInterface())\n+            peer_1.send_message(request)\n+            peer_1.wait_for_disconnect()\n \n         self.log.info(\"Check that invalid requests result in disconnection.\")\n         requests = [\n@@ -241,9 +241,9 @@ def run_test(self):\n             ),\n         ]\n         for request in requests:\n-            node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n-            node0.send_message(request)\n-            node0.wait_for_disconnect()\n+            peer_0 = self.nodes[0].add_p2p_connection(P2PInterface())\n+            peer_0.send_message(request)\n+            peer_0.wait_for_disconnect()\n \n def compute_last_header(prev_header, hashes):\n     \"\"\"Compute the last filter header from a starting header and a sequence of filter hashes.\"\"\""
      }
    ]
  },
  {
    "sha": "fa1668bf5084a190b26b022b9e625a7be3defa6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE2NjhiZjUwODRhMTkwYjI2YjAyMmI5ZTYyNWE3YmUzZGVmYTZl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T16:24:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T17:42:25Z"
      },
      "message": "test: Run pep-8\n\nCan be reviewed with --word-diff-regex=.",
      "tree": {
        "sha": "2e490d1028d3f0351ee4c1c6e3a1551ebbefaa2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e490d1028d3f0351ee4c1c6e3a1551ebbefaa2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1668bf5084a190b26b022b9e625a7be3defa6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjWFAv/UL3ZjsrwGD+YxsL+Kg0iW5lIJkNyGx+6YJ6KVzSpK3U4Y+789CwF0ZT7\n79VeF2yspdg4mC2iDqhMdqbXr4S27cMwPmVAhewaLu4xTPVd0FqqLjbdY52aUjBy\nwjI3Ddkse+B4v7cw3EErvCcbZ0XcQPdUCcYHuE8dPuON3cYORkWCJPdIbD2e3zfU\nbMrKYfuzZ7VRMl25bjmcFe3kJit0ShaFe8XlQLmp3XXwMn5+Q7UImsmW635lcCL9\nsr+ZGSegt7SM3mdJ2O1SYNYT9cpNhcJiBwh3uxqxpatQK/frhkfjcddv46cciTWu\nJaV4LUdNNwwfsHn+qJSNWYPgWn2z8CWqAi4E6TT0DsaxTuQkdi9GaRFSdL8H2CaA\nV3t2P9H5tSKBDlc7FCzvTqPGI2alcEuK7/OctpbSP/gNFeNL3Q2RSXRtBwPkxZdP\nv6CQQJ7QrUNMr+PPoBbqieaXWD0FifPEwcVzix/a5DzIKjpGFCl3g4flFtbA/W5t\nFuOiUoTF\n=rn4i\n-----END PGP SIGNATURE-----",
        "payload": "tree 2e490d1028d3f0351ee4c1c6e3a1551ebbefaa2f\nparent facd97ae0f0d816107aa3bc9de321244200636a0\nauthor MarcoFalke <falke.marco@gmail.com> 1624379062 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624383745 +0200\n\ntest: Run pep-8\n\nCan be reviewed with --word-diff-regex=.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1668bf5084a190b26b022b9e625a7be3defa6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1668bf5084a190b26b022b9e625a7be3defa6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1668bf5084a190b26b022b9e625a7be3defa6e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "facd97ae0f0d816107aa3bc9de321244200636a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facd97ae0f0d816107aa3bc9de321244200636a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/facd97ae0f0d816107aa3bc9de321244200636a0"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 20,
      "deletions": 17
    },
    "files": [
      {
        "sha": "a0bfa4eff61a5f1ec76a37fff6c66f376ad9cc28",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 20,
        "deletions": 17,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1668bf5084a190b26b022b9e625a7be3defa6e/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1668bf5084a190b26b022b9e625a7be3defa6e/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=fa1668bf5084a190b26b022b9e625a7be3defa6e",
        "patch": "@@ -39,6 +39,7 @@ def on_cfilter(self, message):\n         \"\"\"Store cfilters received in a list.\"\"\"\n         self.cfilters.append(message)\n \n+\n class CompactFiltersTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -79,7 +80,7 @@ def run_test(self):\n         self.log.info(\"get cfcheckpt on chain to be re-orged out.\")\n         request = msg_getcfcheckpt(\n             filter_type=FILTER_TYPE_BASIC,\n-            stop_hash=int(stale_block_hash, 16)\n+            stop_hash=int(stale_block_hash, 16),\n         )\n         peer_0.send_and_ping(message=request)\n         response = peer_0.last_message['cfcheckpt']\n@@ -98,7 +99,7 @@ def run_test(self):\n         tip_hash = self.nodes[0].getbestblockhash()\n         request = msg_getcfcheckpt(\n             filter_type=FILTER_TYPE_BASIC,\n-            stop_hash=int(tip_hash, 16)\n+            stop_hash=int(tip_hash, 16),\n         )\n         peer_0.send_and_ping(request)\n         response = peer_0.last_message['cfcheckpt']\n@@ -109,59 +110,59 @@ def run_test(self):\n         tip_cfcheckpt = self.nodes[0].getblockfilter(tip_hash, 'basic')['header']\n         assert_equal(\n             response.headers,\n-            [int(header, 16) for header in (main_cfcheckpt, tip_cfcheckpt)]\n+            [int(header, 16) for header in (main_cfcheckpt, tip_cfcheckpt)],\n         )\n \n         self.log.info(\"Check that peers can fetch cfcheckpt on stale chain.\")\n         request = msg_getcfcheckpt(\n             filter_type=FILTER_TYPE_BASIC,\n-            stop_hash=int(stale_block_hash, 16)\n+            stop_hash=int(stale_block_hash, 16),\n         )\n         peer_0.send_and_ping(request)\n         response = peer_0.last_message['cfcheckpt']\n \n         stale_cfcheckpt = self.nodes[0].getblockfilter(stale_block_hash, 'basic')['header']\n         assert_equal(\n             response.headers,\n-            [int(header, 16) for header in (stale_cfcheckpt,)]\n+            [int(header, 16) for header in (stale_cfcheckpt, )],\n         )\n \n         self.log.info(\"Check that peers can fetch cfheaders on active chain.\")\n         request = msg_getcfheaders(\n             filter_type=FILTER_TYPE_BASIC,\n             start_height=1,\n-            stop_hash=int(main_block_hash, 16)\n+            stop_hash=int(main_block_hash, 16),\n         )\n         peer_0.send_and_ping(request)\n         response = peer_0.last_message['cfheaders']\n         main_cfhashes = response.hashes\n         assert_equal(len(main_cfhashes), 1000)\n         assert_equal(\n             compute_last_header(response.prev_header, response.hashes),\n-            int(main_cfcheckpt, 16)\n+            int(main_cfcheckpt, 16),\n         )\n \n         self.log.info(\"Check that peers can fetch cfheaders on stale chain.\")\n         request = msg_getcfheaders(\n             filter_type=FILTER_TYPE_BASIC,\n             start_height=1,\n-            stop_hash=int(stale_block_hash, 16)\n+            stop_hash=int(stale_block_hash, 16),\n         )\n         peer_0.send_and_ping(request)\n         response = peer_0.last_message['cfheaders']\n         stale_cfhashes = response.hashes\n         assert_equal(len(stale_cfhashes), 1000)\n         assert_equal(\n             compute_last_header(response.prev_header, response.hashes),\n-            int(stale_cfcheckpt, 16)\n+            int(stale_cfcheckpt, 16),\n         )\n \n         self.log.info(\"Check that peers can fetch cfilters.\")\n         stop_hash = self.nodes[0].getblockhash(10)\n         request = msg_getcfilters(\n             filter_type=FILTER_TYPE_BASIC,\n             start_height=1,\n-            stop_hash=int(stop_hash, 16)\n+            stop_hash=int(stop_hash, 16),\n         )\n         peer_0.send_message(request)\n         peer_0.sync_with_ping()\n@@ -180,7 +181,7 @@ def run_test(self):\n         request = msg_getcfilters(\n             filter_type=FILTER_TYPE_BASIC,\n             start_height=1000,\n-            stop_hash=int(stale_block_hash, 16)\n+            stop_hash=int(stale_block_hash, 16),\n         )\n         peer_0.send_message(request)\n         peer_0.sync_with_ping()\n@@ -197,17 +198,17 @@ def run_test(self):\n         requests = [\n             msg_getcfcheckpt(\n                 filter_type=FILTER_TYPE_BASIC,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n             msg_getcfheaders(\n                 filter_type=FILTER_TYPE_BASIC,\n                 start_height=1000,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n             msg_getcfilters(\n                 filter_type=FILTER_TYPE_BASIC,\n                 start_height=1000,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n         ]\n         for request in requests:\n@@ -221,18 +222,18 @@ def run_test(self):\n             msg_getcfilters(\n                 filter_type=FILTER_TYPE_BASIC,\n                 start_height=0,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n             # Requesting too many filter headers results in disconnection.\n             msg_getcfheaders(\n                 filter_type=FILTER_TYPE_BASIC,\n                 start_height=0,\n-                stop_hash=int(tip_hash, 16)\n+                stop_hash=int(tip_hash, 16),\n             ),\n             # Requesting unknown filter type results in disconnection.\n             msg_getcfcheckpt(\n                 filter_type=255,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n             # Requesting unknown hash results in disconnection.\n             msg_getcfcheckpt(\n@@ -245,12 +246,14 @@ def run_test(self):\n             peer_0.send_message(request)\n             peer_0.wait_for_disconnect()\n \n+\n def compute_last_header(prev_header, hashes):\n     \"\"\"Compute the last filter header from a starting header and a sequence of filter hashes.\"\"\"\n     header = ser_uint256(prev_header)\n     for filter_hash in hashes:\n         header = hash256(ser_uint256(filter_hash) + header)\n     return uint256_from_str(header)\n \n+\n if __name__ == '__main__':\n     CompactFiltersTest().main()"
      }
    ]
  },
  {
    "sha": "faa211fc6e3d4984b8edff1d762dd4cba205d982",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWEyMTFmYzZlM2Q0OTg0YjhlZGZmMWQ3NjJkZDRjYmEyMDVkOTgy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T17:41:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T17:42:35Z"
      },
      "message": "test: Misc cleanup\n\n* Replace wait_until with assert_equal where possible\n* Use send_and_ping helper where possible",
      "tree": {
        "sha": "84bd0cc0fc6c90c797b6033642bd02bf1dc32ee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84bd0cc0fc6c90c797b6033642bd02bf1dc32ee4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa211fc6e3d4984b8edff1d762dd4cba205d982",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgRBgwAzdd5tx/S4HspRE8QHylLur/SsRtweOu6xss76GMtcF3lRADXgAm+6mZl\n/pZgt1JkA93NeYdR+2RMXH+MAm+2MyLvft0QXtKNdssmQEwoqBrmZDe+S/AlU4Ji\nd60DVNZdEUdBeqJNGG21E+Z4PsqNCd0+n6Md/YNcDdK9Uc5KkFmzHAcoFWuB0Qa8\nnP7+PlnBChiclSCFdIBBNd6x+0YAQp4Br2vImkNh2VIKuuh51KlEIkYpNzJLuc+i\nDcDVrmDCAPKsGKKk+IKiOlcssoR/E9VrPaTe1S9zpJpkMT/pBeqjJRigwcoOL8Pf\nosjMHz8TphR4VdRn/+0rL1/N1ZZ/X6VUv32wN7yljD0COvmq3uqOgsylvwD5A1yS\nbWPdbxVw9jue/X8eyAUmUJr3f+VHoDGoh3+9DAFm6jSUJrkkPiAp1R7Ii+mzPCuS\nAdRESfFbrODLMB0I8ITdto8xRaE+N2qZ5ixUmhwHtiGkOPyLiQ6XnLNDPp7cEtCQ\nDMPxLd4G\n=Hv2/\n-----END PGP SIGNATURE-----",
        "payload": "tree 84bd0cc0fc6c90c797b6033642bd02bf1dc32ee4\nparent fa1668bf5084a190b26b022b9e625a7be3defa6e\nauthor MarcoFalke <falke.marco@gmail.com> 1624383667 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624383755 +0200\n\ntest: Misc cleanup\n\n* Replace wait_until with assert_equal where possible\n* Use send_and_ping helper where possible\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa211fc6e3d4984b8edff1d762dd4cba205d982",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa211fc6e3d4984b8edff1d762dd4cba205d982",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa211fc6e3d4984b8edff1d762dd4cba205d982/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa1668bf5084a190b26b022b9e625a7be3defa6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1668bf5084a190b26b022b9e625a7be3defa6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1668bf5084a190b26b022b9e625a7be3defa6e"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "47ee7add7572748a061e48624e1fe036ab9a75c9",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa211fc6e3d4984b8edff1d762dd4cba205d982/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa211fc6e3d4984b8edff1d762dd4cba205d982/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=faa211fc6e3d4984b8edff1d762dd4cba205d982",
        "patch": "@@ -62,12 +62,11 @@ def run_test(self):\n         # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n         self.disconnect_nodes(0, 1)\n \n-        self.nodes[0].generate(1)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n-        stale_block_hash = self.nodes[0].getblockhash(1000)\n+        stale_block_hash = self.nodes[0].generate(1)[0]\n+        assert_equal(self.nodes[0].getblockcount(), 1000)\n \n         self.nodes[1].generate(1001)\n-        self.wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+        assert_equal(self.nodes[1].getblockcount(), 2000)\n \n         # Check that nodes have signalled NODE_COMPACT_FILTERS correctly.\n         assert peer_0.nServices & NODE_COMPACT_FILTERS != 0\n@@ -164,8 +163,7 @@ def run_test(self):\n             start_height=1,\n             stop_hash=int(stop_hash, 16),\n         )\n-        peer_0.send_message(request)\n-        peer_0.sync_with_ping()\n+        peer_0.send_and_ping(request)\n         response = peer_0.pop_cfilters()\n         assert_equal(len(response), 10)\n \n@@ -183,8 +181,7 @@ def run_test(self):\n             start_height=1000,\n             stop_hash=int(stale_block_hash, 16),\n         )\n-        peer_0.send_message(request)\n-        peer_0.sync_with_ping()\n+        peer_0.send_and_ping(request)\n         response = peer_0.pop_cfilters()\n         assert_equal(len(response), 1)\n "
      }
    ]
  },
  {
    "sha": "fadddd13eef4428f5fa7237583d4be41a9335cd9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRkZGQxM2VlZjQ0MjhmNWZhNzIzNzU4M2Q0YmU0MWE5MzM1Y2Q5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T17:43:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T17:42:51Z"
      },
      "message": "test: Add missing syncwithvalidationinterfacequeue",
      "tree": {
        "sha": "91e8c15b11f853454289576e8b1176ca07d0387a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91e8c15b11f853454289576e8b1176ca07d0387a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadddd13eef4428f5fa7237583d4be41a9335cd9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjoHwwAmpDMe1yi27zZNOCggAhCmUP1oLpgDvZdQmIMM4mkRTTdLvEcnmxPvVqe\nCOeaxSrOVN8fK9OJa54KREMum6dN38lJ3eg3uUfch4GscMBJyOsWK4qFneWWKm0Y\nr6hdAGGyUTpGllv6MYk0cDOfkX5nvNB+8zZCjSOcU5QDouAxvZdr3YKyuK1oXl6U\n0goYMTIF72L3UFab9JcTt34AfBigYOqyzY5YkeYXuyyl1Olw2pPCRaB4tQyY8Voy\nMuZyTf798LbttroIdtwJvKhLCWbVXIqXRGyPtotvsyC9iebKX7uezAFJMONYiwNO\nJPQhc1wXHrymOVrJU63NEiIGMghoEx7tH4RGJ7nmhw0xklISpolwzqJhhMUSB1LA\nSNqfwP8boY90nnpCdeAOzGEnBs2N+SfbTG42GE2X/7ClO2N1kqlu3SLt3mytESXY\nc+RPNvlSsHOFUOVqs0LajgG+YSVAIMrViY74/9lapKDkE88xDz8pdJdyfTj8g0ib\nj9lrYPZ7\n=Vawu\n-----END PGP SIGNATURE-----",
        "payload": "tree 91e8c15b11f853454289576e8b1176ca07d0387a\nparent faa211fc6e3d4984b8edff1d762dd4cba205d982\nauthor MarcoFalke <falke.marco@gmail.com> 1624383782 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624383771 +0200\n\ntest: Add missing syncwithvalidationinterfacequeue\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadddd13eef4428f5fa7237583d4be41a9335cd9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadddd13eef4428f5fa7237583d4be41a9335cd9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadddd13eef4428f5fa7237583d4be41a9335cd9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faa211fc6e3d4984b8edff1d762dd4cba205d982",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa211fc6e3d4984b8edff1d762dd4cba205d982",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa211fc6e3d4984b8edff1d762dd4cba205d982"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "63fc2a98d4f621b5c51628fca6070c09a5ec76cb",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadddd13eef4428f5fa7237583d4be41a9335cd9/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadddd13eef4428f5fa7237583d4be41a9335cd9/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=fadddd13eef4428f5fa7237583d4be41a9335cd9",
        "patch": "@@ -63,6 +63,7 @@ def run_test(self):\n         self.disconnect_nodes(0, 1)\n \n         stale_block_hash = self.nodes[0].generate(1)[0]\n+        self.nodes[0].syncwithvalidationinterfacequeue()\n         assert_equal(self.nodes[0].getblockcount(), 1000)\n \n         self.nodes[1].generate(1001)\n@@ -90,6 +91,7 @@ def run_test(self):\n         self.log.info(\"Reorg node 0 to a new chain.\")\n         self.connect_nodes(0, 1)\n         self.sync_blocks(timeout=600)\n+        self.nodes[0].syncwithvalidationinterfacequeue()\n \n         main_block_hash = self.nodes[0].getblockhash(1000)\n         assert main_block_hash != stale_block_hash, \"node 0 chain did not reorganize\""
      }
    ]
  }
]