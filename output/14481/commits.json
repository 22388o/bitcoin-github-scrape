[
  {
    "sha": "314784a60f18424b004e935aa6e41b824e9645b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTQ3ODRhNjBmMTg0MjRiMDA0ZTkzNWFhNmU0MWI4MjRlOTY0NWIz",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-15T03:57:18Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-13T01:26:19Z"
      },
      "message": "Make listunspent and signrawtransaction RPCs support witnessScript",
      "tree": {
        "sha": "e303eeb5b9f2836c635d7339528c867ba801ade6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e303eeb5b9f2836c635d7339528c867ba801ade6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/314784a60f18424b004e935aa6e41b824e9645b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/314784a60f18424b004e935aa6e41b824e9645b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/314784a60f18424b004e935aa6e41b824e9645b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/314784a60f18424b004e935aa6e41b824e9645b3/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d1160e42185983b398cbc2e2be379002f4a62e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d1160e42185983b398cbc2e2be379002f4a62e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d1160e42185983b398cbc2e2be379002f4a62e9"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 42,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1126fa3d2ca4146a8fada53e0ae8f9ad1e52f21c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/314784a60f18424b004e935aa6e41b824e9645b3/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/314784a60f18424b004e935aa6e41b824e9645b3/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=314784a60f18424b004e935aa6e41b824e9645b3",
        "patch": "@@ -856,15 +856,25 @@ UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, con\n                 RPCTypeCheckObj(prevOut,\n                     {\n                         {\"redeemScript\", UniValueType(UniValue::VSTR)},\n-                    });\n-                UniValue v = find_value(prevOut, \"redeemScript\");\n-                if (!v.isNull()) {\n-                    std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n+                        {\"witnessScript\", UniValueType(UniValue::VSTR)},\n+                    }, true);\n+                UniValue rs = find_value(prevOut, \"redeemScript\");\n+                if (!rs.isNull()) {\n+                    std::vector<unsigned char> rsData(ParseHexV(rs, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n                     keystore->AddCScript(redeemScript);\n                     // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                    // This is only for compatibility, it is encouraged to use the explicit witnessScript field instead.\n                     keystore->AddCScript(GetScriptForWitness(redeemScript));\n                 }\n+                UniValue ws = find_value(prevOut, \"witnessScript\");\n+                if (!ws.isNull()) {\n+                    std::vector<unsigned char> wsData(ParseHexV(ws, \"witnessScript\"));\n+                    CScript witnessScript(wsData.begin(), wsData.end());\n+                    keystore->AddCScript(witnessScript);\n+                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                    keystore->AddCScript(GetScriptForWitness(witnessScript));\n+                }\n             }\n         }\n     }\n@@ -949,7 +959,8 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                                     {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH) redeem script\"},\n+                                    {\"witnessScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2WSH or P2SH-P2WSH) witness script\"},\n                                     {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount spent\"},\n                                 },\n                                 },"
      },
      {
        "sha": "ac752252e72df162cd2a33d4f8da972e6de32ee3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/314784a60f18424b004e935aa6e41b824e9645b3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/314784a60f18424b004e935aa6e41b824e9645b3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=314784a60f18424b004e935aa6e41b824e9645b3",
        "patch": "@@ -2768,7 +2768,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n             \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n-            \"    \\\"redeemScript\\\" : n        (string) The redeemScript if scriptPubKey is P2SH\\n\"\n+            \"    \\\"redeemScript\\\" : \\\"script\\\" (string) The redeemScript if scriptPubKey is P2SH\"\n+            \"    \\\"witnessScript\\\" : \\\"script\\\" (string) witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\"\n             \"    \\\"solvable\\\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n             \"    \\\"desc\\\" : xxx,             (string, only when solvable) A descriptor for spending this output\\n\"\n@@ -2882,6 +2883,28 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 CScript redeemScript;\n                 if (pwallet->GetCScript(hash, redeemScript)) {\n                     entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n+                    // Now check if the redeemScript is actually a P2WSH script\n+                    CTxDestination witness_destination;\n+                    if (redeemScript.IsPayToWitnessScriptHash()) {\n+                        bool extracted = ExtractDestination(redeemScript, witness_destination);\n+                        assert(extracted);\n+                        // Also return the witness script\n+                        const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n+                        CScriptID id;\n+                        CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                        CScript witnessScript;\n+                        if (pwallet->GetCScript(id, witnessScript)) {\n+                            entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                        }\n+                    }\n+                }\n+            } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+                const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(address);\n+                CScriptID id;\n+                CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                CScript witnessScript;\n+                if (pwallet->GetCScript(id, witnessScript)) {\n+                    entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n                 }\n             }\n         }\n@@ -3137,7 +3160,8 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                                     {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH) redeem script\"},\n+                                    {\"witnessScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2WSH or P2SH-P2WSH) witness script\"},\n                                     {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount spent\"},\n                                 },\n                             },"
      }
    ]
  },
  {
    "sha": "928beae007fc2f951e79ea307a5e983af4cb3acf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjhiZWFlMDA3ZmMyZjk1MWU3OWVhMzA3YTVlOTgzYWY0Y2IzYWNm",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-15T04:19:06Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-13T01:35:16Z"
      },
      "message": "Add test for P2SH-P2WSH in signrawtransactionwithkey and listunspent",
      "tree": {
        "sha": "30898d6596e4265bee0487e1f51defe4f4324ec2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30898d6596e4265bee0487e1f51defe4f4324ec2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/928beae007fc2f951e79ea307a5e983af4cb3acf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928beae007fc2f951e79ea307a5e983af4cb3acf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/928beae007fc2f951e79ea307a5e983af4cb3acf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928beae007fc2f951e79ea307a5e983af4cb3acf/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "314784a60f18424b004e935aa6e41b824e9645b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/314784a60f18424b004e935aa6e41b824e9645b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/314784a60f18424b004e935aa6e41b824e9645b3"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 30,
      "deletions": 3
    },
    "files": [
      {
        "sha": "56e2c73a90fce7e0aad57020f33eb410faca5f71",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928beae007fc2f951e79ea307a5e983af4cb3acf/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928beae007fc2f951e79ea307a5e983af4cb3acf/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=928beae007fc2f951e79ea307a5e983af4cb3acf",
        "patch": "@@ -5,14 +5,17 @@\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.util import assert_equal, assert_raises_rpc_error, bytes_to_hex_str, hex_str_to_bytes\n+from test_framework.messages import sha256\n+from test_framework.script import CScript, OP_0\n \n+from decimal import Decimal\n \n class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n-        self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -143,9 +146,33 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['witness'], [\"304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee01\", \"025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee6357\"])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+    def witness_script_test(self):\n+        # Now test signing transaction to P2SH-P2WSH addresses without wallet\n+        # Create a new P2SH-P2WSH 1-of-1 multisig address:\n+        embedded_address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())\n+        embedded_privkey = self.nodes[1].dumpprivkey(embedded_address[\"address\"])\n+        p2sh_p2wsh_address = self.nodes[1].addmultisigaddress(1, [embedded_address[\"pubkey\"]], \"\", \"p2sh-segwit\")\n+        # send transaction to P2SH-P2WSH 1-of-1 multisig address\n+        self.nodes[0].generate(101)\n+        self.nodes[0].sendtoaddress(p2sh_p2wsh_address[\"address\"], 49.999)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        # Find the UTXO for the transaction node[1] should have received, check witnessScript matches\n+        unspent_output = self.nodes[1].listunspent(0, 999999, [p2sh_p2wsh_address[\"address\"]])[0]\n+        assert_equal(unspent_output[\"witnessScript\"], p2sh_p2wsh_address[\"redeemScript\"])\n+        p2sh_redeemScript = CScript([OP_0, sha256(hex_str_to_bytes(p2sh_p2wsh_address[\"redeemScript\"]))])\n+        assert_equal(unspent_output[\"redeemScript\"], bytes_to_hex_str(p2sh_redeemScript))\n+        # Now create and sign a transaction spending that output on node[0], which doesn't know the scripts or keys\n+        spending_tx = self.nodes[0].createrawtransaction([unspent_output], {self.nodes[1].getnewaddress(): Decimal(\"49.998\")})\n+        spending_tx_signed = self.nodes[0].signrawtransactionwithkey(spending_tx, [embedded_privkey], [unspent_output])\n+        # Check the signing completed successfully\n+        assert 'complete' in spending_tx_signed\n+        assert_equal(spending_tx_signed['complete'], True)\n+\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()\n+        self.witness_script_test()\n         self.test_with_lock_outputs()\n \n "
      }
    ]
  },
  {
    "sha": "6ca836ab3abef5a90df0c3c4e4983f328b1afe00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2E4MzZhYjNhYmVmNWE5MGRmMGMzYzRlNDk4M2YzMjhiMWFmZTAw",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-15T05:54:37Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-13T01:35:16Z"
      },
      "message": "Add release note for listunspent P2WSH change",
      "tree": {
        "sha": "cf777ab4d0e55386a6776fb08574f97df0697804",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf777ab4d0e55386a6776fb08574f97df0697804"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ca836ab3abef5a90df0c3c4e4983f328b1afe00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ca836ab3abef5a90df0c3c4e4983f328b1afe00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ca836ab3abef5a90df0c3c4e4983f328b1afe00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ca836ab3abef5a90df0c3c4e4983f328b1afe00/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "928beae007fc2f951e79ea307a5e983af4cb3acf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928beae007fc2f951e79ea307a5e983af4cb3acf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/928beae007fc2f951e79ea307a5e983af4cb3acf"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ea8fc3c34ed2a979d8f1a7feeef6fa6136473132",
        "filename": "doc/release-notes-14481.md",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca836ab3abef5a90df0c3c4e4983f328b1afe00/doc/release-notes-14481.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca836ab3abef5a90df0c3c4e4983f328b1afe00/doc/release-notes-14481.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14481.md?ref=6ca836ab3abef5a90df0c3c4e4983f328b1afe00",
        "patch": "@@ -0,0 +1,9 @@\n+Low-level RPC changes\n+----------------------\n+\n+The `listunspent` RPC has been modified so that it also returns `witnessScript`,\n+the witness script in the case of a P2WSH or P2SH-P2WSH output.\n+\n+The `signrawtransactionwithkey` and `signrawtransactionwithwallet` RPCs have been\n+modified so that they also optionally accept a `witnessScript`, the witness script in the\n+case of a P2WSH or P2SH-P2WSH output. This is compatible with the change to `listunspent`."
      }
    ]
  }
]