[
  {
    "sha": "2f2104f98feb5ac7a37baeeb6b549531f208d1e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjIxMDRmOThmZWI1YWM3YTM3YmFlZWI2YjU0OTUzMWYyMDhkMWUy",
    "commit": {
      "author": {
        "name": "Villacaleb",
        "email": "caleb@villa-community.com",
        "date": "2015-02-25T03:53:58Z"
      },
      "committer": {
        "name": "Villacaleb",
        "email": "caleb@villa-community.com",
        "date": "2015-02-25T03:53:58Z"
      },
      "message": "Updated year and comment formatting",
      "tree": {
        "sha": "0488ce26516406f3281118a72c79ba880530ea67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0488ce26516406f3281118a72c79ba880530ea67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f2104f98feb5ac7a37baeeb6b549531f208d1e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f2104f98feb5ac7a37baeeb6b549531f208d1e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f2104f98feb5ac7a37baeeb6b549531f208d1e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f2104f98feb5ac7a37baeeb6b549531f208d1e2/comments",
    "author": {
      "login": "Villacaleb",
      "id": 9440193,
      "node_id": "MDQ6VXNlcjk0NDAxOTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9440193?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Villacaleb",
      "html_url": "https://github.com/Villacaleb",
      "followers_url": "https://api.github.com/users/Villacaleb/followers",
      "following_url": "https://api.github.com/users/Villacaleb/following{/other_user}",
      "gists_url": "https://api.github.com/users/Villacaleb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Villacaleb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Villacaleb/subscriptions",
      "organizations_url": "https://api.github.com/users/Villacaleb/orgs",
      "repos_url": "https://api.github.com/users/Villacaleb/repos",
      "events_url": "https://api.github.com/users/Villacaleb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Villacaleb/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Villacaleb",
      "id": 9440193,
      "node_id": "MDQ6VXNlcjk0NDAxOTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9440193?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Villacaleb",
      "html_url": "https://github.com/Villacaleb",
      "followers_url": "https://api.github.com/users/Villacaleb/followers",
      "following_url": "https://api.github.com/users/Villacaleb/following{/other_user}",
      "gists_url": "https://api.github.com/users/Villacaleb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Villacaleb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Villacaleb/subscriptions",
      "organizations_url": "https://api.github.com/users/Villacaleb/orgs",
      "repos_url": "https://api.github.com/users/Villacaleb/repos",
      "events_url": "https://api.github.com/users/Villacaleb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Villacaleb/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 22,
      "deletions": 20
    },
    "files": [
      {
        "sha": "d1ced62262507f6356c6f35d171f1009dfa0732d",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 20,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f2104f98feb5ac7a37baeeb6b549531f208d1e2/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f2104f98feb5ac7a37baeeb6b549531f208d1e2/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=2f2104f98feb5ac7a37baeeb6b549531f208d1e2",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -341,9 +341,9 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n \n void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n {\n-    // We want all the wallet transactions in range to have the same metadata as\n-    // the oldest (smallest nOrderPos).\n-    // So: find smallest nOrderPos:\n+    /* We want all the wallet transactions in range to have the same metadata as\n+     the oldest (smallest nOrderPos).\n+    /* So: find smallest nOrderPos:\n \n     int nMinOrderPos = std::numeric_limits<int>::max();\n     const CWalletTx* copyFrom = NULL;\n@@ -485,8 +485,8 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         {\n             if (!pwalletdbEncryption->TxnCommit()) {\n                 delete pwalletdbEncryption;\n-                // We now have keys encrypted in memory, but not on disk...\n-                // die to avoid confusion and let the user reload their unencrypted wallet.\n+                /* We now have keys encrypted in memory, but not on disk...\n+                */ die to avoid confusion and let the user reload their unencrypted wallet.\n                 assert(false);\n             }\n \n@@ -529,8 +529,8 @@ CWallet::TxItems CWallet::OrderedTxItems(std::list<CAccountingEntry>& acentries,\n     // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n     TxItems txOrdered;\n \n-    // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n-    // would make this much faster for applications that do this a lot.\n+    /* Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n+    */ would make this much faster for applications that do this a lot.\n     for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n     {\n         CWalletTx* wtx = &((*it).second);\n@@ -710,9 +710,10 @@ void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n     if (!AddToWalletIfInvolvingMe(tx, pblock, true))\n         return; // Not one of ours\n \n-    // If a transaction changes 'conflicted' state, that changes the balance\n-    // available of the outputs it spends. So force those to be\n-    // recomputed, also:\n+    /* If a transaction changes 'conflicted' state, that changes the balance\n+     available of the outputs it spends. So force those to be\n+     recomputed, also:\n+     */\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         if (mapWallet.count(txin.prevout.hash))\n@@ -767,12 +768,13 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n bool CWallet::IsChange(const CTxOut& txout) const\n {\n     // TODO: fix handling of 'change' outputs. The assumption is that any\n-    // payment to a script that is ours, but is not in the address book\n-    // is change. That assumption is likely to break when we implement multisignature\n-    // wallets that return change back into a multi-signature-protected address;\n-    // a better way of identifying which outputs are 'the send' and which are\n-    // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n-    // which output, if any, was change).\n+    /* payment to a script that is ours, but is not in the address book\n+       is change. That assumption is likely to break when we implement multisignature\n+       wallets that return change back into a multi-signature-protected address;\n+       a better way of identifying which outputs are 'the send' and which are\n+       'the change' will need to be implemented (maybe extend CWalletTx to remember\n+        which output, if any, was change).\n+        */\n     if (::IsMine(*this, txout.scriptPubKey))\n     {\n         CTxDestination address;\n@@ -852,9 +854,9 @@ void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n     {\n         const CTxOut& txout = vout[i];\n         isminetype fIsMine = pwallet->IsMine(txout);\n-        // Only need to handle txouts if AT LEAST one of these is true:\n-        //   1) they debit from us (sent)\n-        //   2) the output is to us (received)\n+        /* Only need to handle txouts if AT LEAST one of these is true:\n+           1) they debit from us (sent)\n+        */   2) the output is to us (received)\n         if (nDebit > 0)\n         {\n             // Don't report 'change' txouts"
      }
    ]
  }
]