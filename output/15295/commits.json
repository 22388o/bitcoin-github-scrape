[
  {
    "sha": "fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdjYThlZjU4YmYzZTNiOTFkMWY1YTY3ZmE0MjAwOGU2M2IxZjdi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-16T16:49:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-13T22:12:28Z"
      },
      "message": "qa: Add test/fuzz/test_runner.py",
      "tree": {
        "sha": "2bb0b1b63931c12593aafded53b4021fe566ab32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bb0b1b63931c12593aafded53b4021fe566ab32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcZJZMAAoJEM4rdWl+aaVIAaYL/1ZrREZEwzX/nKSM05vo7Hsv\njjSw74oTCbbDbvspun5Cdbt0hVFoZeW58cP7ewbaCqKTFdBoYFgj75LyNcgSC42p\niXIxBXjpWisAH6WrAkdpSlLH/UFCK6i298q/gdXp5PLin5yThCSmR2Iw506ZAK6w\nbF2DgmNzpUxQ0vJRL/4szezlD2TLPl9VnYI6Y93JBiiH/6unxBDYe6v4LdpNIzno\ngbqMro2Czor/kKU/nw+FlGkcon1brJU0CneUQiNLG9Qpam8PoqUyXsnLmc0PJ1Ux\naZlLt5AjQql5a6tEckrD3AHXGFrk22mIA8Oe1IOX3ueip30XWzQGWwVBQaG1swZX\nBdJvGRuSUHOS8lx/dBiurnq7e35VuNbz/fJfZbZ3v+HFX2kEzVLxWEGjDXzwIaDy\nexEe8fTXXPeDOzwN+qCvJaR433S3nZYWYLOWCalb2/hfbu2eWE9m7EG0dyzT0kSu\n+4kwwHe5oWYRRNHSYURc1yKpPo/XIdLIFR6JPF+YaQ==\n=tzee\n-----END PGP SIGNATURE-----",
        "payload": "tree 2bb0b1b63931c12593aafded53b4021fe566ab32\nparent ad039aa0d3e8a831559434022b1da1de4d72a847\nauthor MarcoFalke <falke.marco@gmail.com> 1547657341 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550095948 -0500\n\nqa: Add test/fuzz/test_runner.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad039aa0d3e8a831559434022b1da1de4d72a847",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad039aa0d3e8a831559434022b1da1de4d72a847",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad039aa0d3e8a831559434022b1da1de4d72a847"
      }
    ],
    "stats": {
      "total": 226,
      "additions": 199,
      "deletions": 27
    },
    "files": [
      {
        "sha": "d2d462306afafafcf2a9589fac9bfd27ba66a0df",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -15,6 +15,7 @@ env:\n     - MAKEJOBS=-j3\n     - RUN_UNIT_TESTS=true\n     - RUN_FUNCTIONAL_TESTS=true\n+    - RUN_FUZZ_TESTS=false\n     - DOCKER_NAME_TAG=ubuntu:18.04\n     - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID\n     - CCACHE_SIZE=100M\n@@ -100,7 +101,7 @@ jobs:\n         PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev\"\n         DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n         GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-fuzz --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\\\"-g0 -O2\\\"\"\n+        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\\\"-g0 -O2\\\"\"\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [trusty]  [no functional tests, no depends, only system libs]'\n@@ -132,6 +133,18 @@ jobs:\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n \n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: fuzzer,address]'\n+      env: >-\n+        HOST=x86_64-unknown-linux-gnu\n+        PACKAGES=\"clang llvm python3 libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\"\n+        NO_DEPENDS=1\n+        RUN_UNIT_TESTS=false\n+        RUN_FUNCTIONAL_TESTS=false\n+        RUN_FUZZ_TESTS=true\n+        GOAL=\"install\"\n+        BITCOIN_CONFIG=\"--disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\"\n+\n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'\n       env: >-"
      },
      {
        "sha": "8055bbdd19de1837814d0df4fa29191b6f6e1e07",
        "filename": ".travis/test_04_install.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/.travis/test_04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/.travis/test_04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_04_install.sh?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -7,6 +7,11 @@\n export LC_ALL=C.UTF-8\n \n travis_retry docker pull \"$DOCKER_NAME_TAG\"\n+\n+export DIR_FUZZ_IN=${TRAVIS_BUILD_DIR}/qa-assets\n+git clone https://github.com/bitcoin-core/qa-assets ${DIR_FUZZ_IN}\n+export DIR_FUZZ_IN=${DIR_FUZZ_IN}/fuzz_seed_corpus/\n+\n mkdir -p \"${TRAVIS_BUILD_DIR}/sanitizer-output/\"\n export ASAN_OPTIONS=\"\"\n export LSAN_OPTIONS=\"suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions/lsan\""
      },
      {
        "sha": "e13abfd52f303fba09a61726d38859baad6d59d1",
        "filename": ".travis/test_06_script_b.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/.travis/test_06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/.travis/test_06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_06_script_b.sh?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -19,3 +19,9 @@ if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n   DOCKER_EXEC test/functional/test_runner.py --ci --combinedlogslen=4000 --coverage --quiet --failfast\n   END_FOLD\n fi\n+\n+if [ \"$RUN_FUZZ_TESTS\" = \"true\" ]; then\n+  BEGIN_FOLD fuzz-tests\n+  DOCKER_EXEC test/fuzz/test_runner.py -l DEBUG ${DIR_FUZZ_IN}\n+  END_FOLD\n+fi"
      },
      {
        "sha": "f4e4dc98be5ba3e938ba4e4254fabc3ad4e8d1e1",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -220,7 +220,11 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(DIST_SHARE) test/functional/test_runner.py test/functional $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n+EXTRA_DIST = $(DIST_SHARE) $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n+\n+EXTRA_DIST += \\\n+    test/functional \\\n+    test/fuzz\n \n EXTRA_DIST += \\\n     test/util/bitcoin-util-test.py \\"
      },
      {
        "sha": "f9221dde5bd9703cc6e1d536b874b55089800af4",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 33,
        "deletions": 24,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -5,6 +5,29 @@ A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n provide an easy entry point for fuzzers and the like. In this document we'll\n describe how to use it with AFL and libFuzzer.\n \n+## Preparing fuzzing\n+\n+AFL needs an input directory with examples, and an output directory where it\n+will place examples that it found. These can be anywhere in the file system,\n+we'll define environment variables to make it easy to reference them.\n+\n+libFuzzer will use the input directory as output directory.\n+\n+Extract the example seeds (or other starting inputs) into the inputs\n+directory before starting fuzzing.\n+\n+```\n+git clone https://github.com/bitcoin-core/qa-assets\n+export DIR_FUZZ_IN=$PWD/qa-assets/fuzz_seed_corpus\n+```\n+\n+Only for AFL:\n+\n+```\n+mkdir outputs\n+export AFLOUT=$PWD/outputs\n+```\n+\n ## AFL\n \n ### Building AFL\n@@ -23,7 +46,7 @@ export AFLPATH=$PWD\n To build Bitcoin Core using AFL instrumentation (this assumes that the\n `AFLPATH` was set as above):\n ```\n-./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n+./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz --disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n export AFL_HARDEN=1\n cd src/\n make\n@@ -39,31 +62,14 @@ binary will be instrumented in such a way that the AFL\n features \"persistent mode\" and \"deferred forkserver\" can be used. See\n https://github.com/mcarpenter/afl/tree/master/llvm_mode for details.\n \n-### Preparing fuzzing\n-\n-AFL needs an input directory with examples, and an output directory where it\n-will place examples that it found. These can be anywhere in the file system,\n-we'll define environment variables to make it easy to reference them.\n-\n-```\n-mkdir inputs\n-AFLIN=$PWD/inputs\n-mkdir outputs\n-AFLOUT=$PWD/outputs\n-```\n-\n-Example inputs are available from:\n-\n-- https://download.visucore.com/bitcoin/bitcoin_fuzzy_in.tar.xz\n-- http://strateman.ninja/fuzzing.tar.xz\n-\n-Extract these (or other starting inputs) into the `inputs` directory before starting fuzzing.\n-\n ### Fuzzing\n \n To start the actual fuzzing use:\n+\n ```\n-$AFLPATH/afl-fuzz -i ${AFLIN} -o ${AFLOUT} -m52 -- test/fuzz/fuzz_target_foo\n+export FUZZ_TARGET=fuzz_target_foo  # Pick a fuzz_target\n+mkdir ${AFLOUT}/${FUZZ_TARGET}\n+$AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- test/fuzz/${FUZZ_TARGET}\n ```\n \n You may have to change a few kernel parameters to test optimally - `afl-fuzz`\n@@ -74,10 +80,10 @@ will print an error and suggestion if so.\n A recent version of `clang`, the address sanitizer and libFuzzer is needed (all\n found in the `compiler-rt` runtime libraries package).\n \n-To build the `test/test_bitcoin_fuzzy` executable run\n+To build all fuzz targets with libFuzzer, run\n \n ```\n-./configure --disable-ccache --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\n+./configure --disable-ccache --disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\n make\n ```\n \n@@ -86,3 +92,6 @@ interchangeably between libFuzzer and AFL.\n \n See https://llvm.org/docs/LibFuzzer.html#running on how to run the libFuzzer\n instrumented executable.\n+\n+Alternatively run the script in `./test/fuzz/test_runner.py` and provide it\n+with the `${DIR_FUZZ_IN}` created earlier."
      },
      {
        "sha": "f40a205a73c54f243fd2b110096a7549b6c284cd",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -2,7 +2,6 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-bin_PROGRAMS += test/test_bitcoin\n \n FUZZ_TARGETS = \\\n   test/fuzz/address_deserialize \\\n@@ -28,6 +27,8 @@ FUZZ_TARGETS = \\\n \n if ENABLE_FUZZ\n noinst_PROGRAMS += $(FUZZ_TARGETS:=)\n+else\n+bin_PROGRAMS += test/test_bitcoin\n endif\n \n TEST_SRCDIR = test"
      },
      {
        "sha": "6b7ef7065921b62b0cb06a3e14343e99a0b7816e",
        "filename": "test/config.ini.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/test/config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/test/config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/config.ini.in?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -16,4 +16,5 @@ RPCAUTH=@abs_top_srcdir@/share/rpcauth/rpcauth.py\n @ENABLE_WALLET_TRUE@ENABLE_WALLET=true\n @BUILD_BITCOIN_CLI_TRUE@ENABLE_CLI=true\n @BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=true\n+@ENABLE_FUZZ_TRUE@ENABLE_FUZZ=true\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true"
      },
      {
        "sha": "eb4fe78cd4a5b081a0c354a9f67d59dc5fc61fff",
        "filename": "test/fuzz/test_runner.py",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -0,0 +1,133 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Run fuzz test targets.\n+\"\"\"\n+\n+import argparse\n+import configparser\n+import os\n+import sys\n+import subprocess\n+import logging\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n+    parser.add_argument(\n+        \"-l\",\n+        \"--loglevel\",\n+        dest=\"loglevel\",\n+        default=\"INFO\",\n+        help=\"log events at this level and higher to the console. Can be set to DEBUG, INFO, WARNING, ERROR or CRITICAL. Passing --loglevel DEBUG will output all logs to console.\",\n+    )\n+    parser.add_argument(\n+        '--export_coverage',\n+        action='store_true',\n+        help='If true, export coverage information to files in the seed corpus',\n+    )\n+    parser.add_argument(\n+        'seed_dir',\n+        help='The seed corpus to run on (must contain subfolders for each fuzz target).',\n+    )\n+    parser.add_argument(\n+        'target',\n+        nargs='*',\n+        help='The target(s) to run. Default is to run all targets.',\n+    )\n+\n+    args = parser.parse_args()\n+\n+    # Set up logging\n+    logging.basicConfig(\n+        format='%(message)s',\n+        level=int(args.loglevel) if args.loglevel.isdigit() else args.loglevel.upper(),\n+    )\n+\n+    # Read config generated by configure.\n+    config = configparser.ConfigParser()\n+    configfile = os.path.abspath(os.path.dirname(__file__)) + \"/../config.ini\"\n+    config.read_file(open(configfile, encoding=\"utf8\"))\n+\n+    if not config[\"components\"].getboolean(\"ENABLE_FUZZ\"):\n+        logging.error(\"Must have fuzz targets built\")\n+        sys.exit(1)\n+\n+    # Build list of tests\n+    test_list_all = parse_test_list(makefile=os.path.join(config[\"environment\"][\"SRCDIR\"], 'src', 'Makefile.test.include'))\n+\n+    if not test_list_all:\n+        logging.error(\"No fuzz targets found\")\n+        sys.exit(1)\n+\n+    logging.info(\"Fuzz targets found: {}\".format(test_list_all))\n+\n+    args.target = args.target or test_list_all  # By default run all\n+    test_list_error = list(set(args.target).difference(set(test_list_all)))\n+    if test_list_error:\n+        logging.error(\"Unknown fuzz targets selected: {}\".format(test_list_error))\n+    test_list_selection = list(set(test_list_all).intersection(set(args.target)))\n+    if not test_list_selection:\n+        logging.error(\"No fuzz targets selected\")\n+    logging.info(\"Fuzz targets selected: {}\".format(test_list_selection))\n+\n+    help_output = subprocess.run(\n+        args=[\n+            os.path.join(config[\"environment\"][\"BUILDDIR\"], 'src', 'test', 'fuzz', test_list_selection[0]),\n+            '-help=1',\n+        ],\n+        check=True,\n+        stderr=subprocess.PIPE,\n+        universal_newlines=True,\n+    ).stderr\n+    if \"libFuzzer\" not in help_output:\n+        logging.error(\"Must be built with libFuzzer\")\n+        sys.exit(1)\n+\n+    run_once(\n+        corpus=args.seed_dir,\n+        test_list=test_list_selection,\n+        build_dir=config[\"environment\"][\"BUILDDIR\"],\n+        export_coverage=args.export_coverage,\n+    )\n+\n+\n+def run_once(*, corpus, test_list, build_dir, export_coverage):\n+    for t in test_list:\n+        args = [\n+            os.path.join(build_dir, 'src', 'test', 'fuzz', t),\n+            '-runs=1',\n+            os.path.join(corpus, t),\n+        ]\n+        logging.debug('Run {} with args {}'.format(t, args))\n+        output = subprocess.run(args, check=True, stderr=subprocess.PIPE, universal_newlines=True).stderr\n+        logging.debug('Output: {}'.format(output))\n+        if not export_coverage:\n+            continue\n+        for l in output.splitlines():\n+            if 'INITED' in l:\n+                with open(os.path.join(corpus, t + '_coverage'), 'w', encoding='utf-8') as cov_file:\n+                    cov_file.write(l)\n+                    break\n+\n+\n+def parse_test_list(makefile):\n+    with open(makefile, encoding='utf-8') as makefile_test:\n+        test_list_all = []\n+        read_targets = False\n+        for line in makefile_test.readlines():\n+            line = line.strip().replace('test/fuzz/', '').replace(' \\\\', '')\n+            if read_targets:\n+                if not line:\n+                    break\n+                test_list_all.append(line)\n+                continue\n+\n+            if line == 'FUZZ_TARGETS =':\n+                read_targets = True\n+    return test_list_all\n+\n+\n+if __name__ == '__main__':\n+    main()"
      }
    ]
  },
  {
    "sha": "fa535af92c179b0ffb9280e0b2dc5acfeb80964a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUzNWFmOTJjMTc5YjBmZmI5MjgwZTBiMmRjNWFjZmViODA5NjRh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T20:49:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T20:47:08Z"
      },
      "message": "fuzz: test_runner: Better error message when built with afl",
      "tree": {
        "sha": "ca1a8bebe53395e6774e92d36a78c171c3897216",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca1a8bebe53395e6774e92d36a78c171c3897216"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa535af92c179b0ffb9280e0b2dc5acfeb80964a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcZdPMAAoJEM4rdWl+aaVICyQL/2js+BIiKn8QkjCaRMmoDzJl\nVJEQrVk7zCSCKsqFcegyJMQdI0kmmFOe+Vv75a/PY/oGcc+z1A54jVxOzXQxbprN\nPSuMp9LV8m3DU9QGrR4WIv38VeY0h5GYFrdeuuE6xmYkp2Sl5W4bQS14bCJaLk2Z\ncRhjzRWOGOrBgsU2g6dnMRgRZjZeuNc19wCriVCmEFttUNejqr/osssnjUuYow2s\n6QEvv17yIFtkbTdibowSNuEj3VHnqhl1zzEEReaoM8NQ6cidhrFWdx8bzPpU2RXP\n/jTr8vjuUiA0vX8KXMTRYi/9yk1chsyIkHd4zarm+MSdf9tSnWkBfJkFgmXr/9MO\nh2eAjE2Sy234Ik6+hgUcMoZsFEEd7nXWbOqL7QQ9i33CIvZel7mTRj9BodS3NJgd\nt+kETDi8FdSVsxL6M86N227Cq/SLpgaGAHIGs/IoGqYuJ6SVDPQM+sypZISs8Qzw\nQgO0DlbnP9zm3+E7u5vQfkadXW81/SsZxUcZfr+cRw==\n=K53B\n-----END PGP SIGNATURE-----",
        "payload": "tree ca1a8bebe53395e6774e92d36a78c171c3897216\nparent fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b\nauthor MarcoFalke <falke.marco@gmail.com> 1550177353 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550177228 -0500\n\nfuzz: test_runner: Better error message when built with afl\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa535af92c179b0ffb9280e0b2dc5acfeb80964a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa535af92c179b0ffb9280e0b2dc5acfeb80964a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa535af92c179b0ffb9280e0b2dc5acfeb80964a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 16,
      "deletions": 11
    },
    "files": [
      {
        "sha": "1869f717539a09dca0a6d5803e4f8fbdaa01cadc",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa535af92c179b0ffb9280e0b2dc5acfeb80964a/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa535af92c179b0ffb9280e0b2dc5acfeb80964a/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=fa535af92c179b0ffb9280e0b2dc5acfeb80964a",
        "patch": "@@ -72,17 +72,22 @@ def main():\n         logging.error(\"No fuzz targets selected\")\n     logging.info(\"Fuzz targets selected: {}\".format(test_list_selection))\n \n-    help_output = subprocess.run(\n-        args=[\n-            os.path.join(config[\"environment\"][\"BUILDDIR\"], 'src', 'test', 'fuzz', test_list_selection[0]),\n-            '-help=1',\n-        ],\n-        check=True,\n-        stderr=subprocess.PIPE,\n-        universal_newlines=True,\n-    ).stderr\n-    if \"libFuzzer\" not in help_output:\n-        logging.error(\"Must be built with libFuzzer\")\n+    try:\n+        help_output = subprocess.run(\n+            args=[\n+                os.path.join(config[\"environment\"][\"BUILDDIR\"], 'src', 'test', 'fuzz', test_list_selection[0]),\n+                '-help=1',\n+            ],\n+            timeout=1,\n+            check=True,\n+            stderr=subprocess.PIPE,\n+            universal_newlines=True,\n+        ).stderr\n+        if \"libFuzzer\" not in help_output:\n+            logging.error(\"Must be built with libFuzzer\")\n+            sys.exit(1)\n+    except subprocess.TimeoutExpired:\n+        logging.error(\"subprocess timed out: Currently only libFuzzer is supported\")\n         sys.exit(1)\n \n     run_once("
      }
    ]
  }
]