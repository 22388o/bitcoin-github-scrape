practicalswift,2019-01-30T21:22:28Z,"Concept ACK. Very nice!\n\nRelated: #10364 (""Feature request: Make Bitcoin libFuzzer-friendly and consider integration into the OSS-Fuzz project""). Feel free to collect the $20 000 USD bounty :-)",https://github.com/bitcoin/bitcoin/pull/15295#issuecomment-459114272,459114272,
DrahtBot,2019-01-30T22:30:26Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15134](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15134.html) (tests: Add a Travis ASan/LSan/UBSan job tes",https://github.com/bitcoin/bitcoin/pull/15295#issuecomment-459136152,459136152,
laanwj,2019-01-31T11:57:02Z,"Can you please explain what you're adding hereâ€”\nWill adding fuzzing to travis make the tests non-deterministic, by randomizing it? Or does it only verify the current corpus?",https://github.com/bitcoin/bitcoin/pull/15295#issuecomment-459318197,459318197,
MarcoFalke,2019-01-31T15:14:05Z,Indeed the script currently only supports running over all seeds exactly once,https://github.com/bitcoin/bitcoin/pull/15295#issuecomment-459380679,459380679,
Sjors,2019-02-01T17:55:57Z,"Concept ACK. I can't get fuzzing to work on macOS (not that I tried hard), so having it on Travis sounds like a safe idea, if only to ensure people don't accidentally break the build.",https://github.com/bitcoin/bitcoin/pull/15295#issuecomment-459809688,459809688,
MarcoFalke,2019-02-13T22:13:08Z,"Thx, done",https://github.com/bitcoin/bitcoin/pull/15295#issuecomment-463396871,463396871,
practicalswift,2019-02-14T08:09:15Z,"utACK fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b\n\nLet's get this merged :-)",https://github.com/bitcoin/bitcoin/pull/15295#issuecomment-463531840,463531840,
MarcoFalke,2019-02-14T16:45:46Z,Would be nice if at least some person other than myself and travis could test this. Just copy-paste the commands in the readme on a linux machine and tell me your computer didn't crash or something.,https://github.com/bitcoin/bitcoin/pull/15295#issuecomment-463700235,463700235,
jamesob,2019-02-14T20:34:01Z,"Tested changes (https://github.com/bitcoin/bitcoin/pull/15295/commits/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b) to `doc/fuzzing.md` on `Linux 4.15.0-43-generic #46-Ubuntu SMP x86_64` with `afl-fuzz 2.52b`. Installed afl from scratch, rebuilt Bitcoin with requisite flags, and confirmed that running `afl-fuzz` with the `transaction_deserialize` works as intended.\n\nUsed new test_runner script whi",https://github.com/bitcoin/bitcoin/pull/15295#issuecomment-463784121,463784121,
jamesob,2019-02-14T21:08:02Z,"Tested ACK https://github.com/bitcoin/bitcoin/pull/15295/commits/fa535af92c179b0ffb9280e0b2dc5acfeb80964a. Rebuilt with libfuzzer and tested the command that previously failed with afl:\n```\n$ ./test/fuzz/test_runner.py -l DEBUG ~/src/qa-assets/fuzz_seed_corpus transaction_deserialize\n\nFuzz targets found: ['address_deserialize', 'addrman_deserialize', 'banentry_deserialize', 'block_deserial",https://github.com/bitcoin/bitcoin/pull/15295#issuecomment-463797022,463797022,
practicalswift,2019-02-04T21:22:36Z,PEP-8 tells us to do membership tests using `if X not in Y` instead of `if not X in Y` :-),https://github.com/bitcoin/bitcoin/pull/15295#discussion_r253651180,253651180,test/fuzz/test_runner.py
practicalswift,2019-02-04T21:24:33Z,Why `#??` :-),https://github.com/bitcoin/bitcoin/pull/15295#discussion_r253651776,253651776,test/fuzz/test_runner.py
practicalswift,2019-02-04T21:25:26Z,`export_coverage` unused?,https://github.com/bitcoin/bitcoin/pull/15295#discussion_r253652041,253652041,test/fuzz/test_runner.py
MarcoFalke,2019-02-05T21:47:57Z,Fixed,https://github.com/bitcoin/bitcoin/pull/15295#discussion_r254059942,254059942,test/fuzz/test_runner.py
practicalswift,2019-02-05T21:53:27Z,"Nit: Isn't corpora or corpuses the plural of corpus?\n\nPerhaps the least unexpected choice is to go with ""corpus"" instead of ""corpi"" here?",https://github.com/bitcoin/bitcoin/pull/15295#discussion_r254061787,254061787,test/fuzz/test_runner.py
laanwj,2019-02-13T20:48:18Z,`s/corpi/corgi`,https://github.com/bitcoin/bitcoin/pull/15295#discussion_r256582825,256582825,test/fuzz/test_runner.py
laanwj,2019-02-13T20:49:47Z,"~~Why the build parameter change for this existing test run?~~\n\noh I see, only removing `--enable-fuzz` because it's separated out",https://github.com/bitcoin/bitcoin/pull/15295#discussion_r256583336,256583336,.travis.yml
laanwj,2019-02-13T21:15:23Z,"I think it would be more readable to factor the ""get a list of fuzz targets"", for example, out to a function, this is one very long main function. ",https://github.com/bitcoin/bitcoin/pull/15295#discussion_r256591672,256591672,test/fuzz/test_runner.py
laanwj,2019-02-13T21:17:00Z,"Could check this immediately after reading the config, I guess, no need to do any of the other things then.",https://github.com/bitcoin/bitcoin/pull/15295#discussion_r256592268,256592268,test/fuzz/test_runner.py
laanwj,2019-02-13T21:19:23Z,"no `export` for this one, but there is for `DIR_FUZZ_IN`, is that intentional?",https://github.com/bitcoin/bitcoin/pull/15295#discussion_r256593081,256593081,doc/fuzzing.md
jamesob,2019-02-14T20:52:28Z,Tested and works when bitcoin is built with afl.,https://github.com/bitcoin/bitcoin/pull/15295#discussion_r257007108,257007108,test/fuzz/test_runner.py
MarcoFalke,2019-02-14T20:53:13Z,:heart: ,https://github.com/bitcoin/bitcoin/pull/15295#discussion_r257007375,257007375,test/fuzz/test_runner.py
ryanofsky,2019-02-22T16:25:00Z,"In commit ""qa: Add test/fuzz/test_runner.py"" (fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b)\n\n@MarcoFalke  Is this no longer building test_bitcoin if ENABLE_FUZZ is true? I wouldn't expect ENABLE_FUZZ to affect this, but if this is correct it'd be helpful to have a comment here explaining what this is doing.",https://github.com/bitcoin/bitcoin/pull/15295#discussion_r259412395,259412395,src/Makefile.test.include
MarcoFalke,2019-02-22T16:35:48Z,"Yes, I think there is no reason to build `test_bitcoin` if you want to build the fuzz tests. Am I missing something?\n\nRegardless of that, it would result in linker errors later in the build process, since you can't link libfuzzer to something that has a main function.",https://github.com/bitcoin/bitcoin/pull/15295#discussion_r259416865,259416865,src/Makefile.test.include
ryanofsky,2019-02-22T17:08:47Z,"Oh ok, I don't know really anything about fuzzing, and I assumed enabling a fuzzing option would just build some new binaries, not affect existing binaries in any way. But I guess due to autotools lack of support for side-by-side build configurations, ENABLE_FUZZ affects every existing binary we build, as well as building new binaries? Probably not worth adding a comment here just for `test_bitcoi",https://github.com/bitcoin/bitcoin/pull/15295#discussion_r259430949,259430949,src/Makefile.test.include
MarcoFalke,2019-02-22T18:16:09Z,"Yes, ideally it should disable all other binaries.\n\nCurrently we hack around that by specifying it manually:\n\nhttps://github.com/bitcoin/bitcoin/blob/169dced9a42bd741b3265adee23e6a8d1f852227/.travis.yml#L146",https://github.com/bitcoin/bitcoin/pull/15295#discussion_r259455521,259455521,src/Makefile.test.include
apoelstra,2020-12-09T15:09:51Z,"It is surprising that --enable-fuzz silently stops building the test binary, especially as config.log continues to claim that test_bitcoin is being built.",https://github.com/bitcoin/bitcoin/pull/15295#discussion_r539386647,539386647,src/Makefile.test.include
MarcoFalke,2020-12-09T15:17:17Z,"> It is surprising that --enable-fuzz silently stops building the test binary\n\nMight be fixed by #19388, which is blocked on #20560 . Though when building and linking with a fuzz engine, the test_bitcoin binary won't have any meaning. Not sure if it will even compile/link.\n\n> config.log continues to claim that test_bitcoin is being built.\n\nI don't really understand build systems, so if",https://github.com/bitcoin/bitcoin/pull/15295#discussion_r539393175,539393175,src/Makefile.test.include
apoelstra,2020-12-09T15:37:29Z,"I'll open a PR to change config to output something like\n```\nconfigure:27478: checking whether to build test_bitcoin-qt\nconfigure:27481: result: no, because fuzzing is enabled\nconfigure:27499: checking whether to build test_bitcoin\nconfigure:27502: result: no, because fuzzing is enabled\n```\nIt's not really surprising that enabling fuzzing would break all the other binaries, I was jus",https://github.com/bitcoin/bitcoin/pull/15295#discussion_r539410631,539410631,src/Makefile.test.include
apoelstra,2020-12-09T23:36:09Z,https://github.com/bitcoin/bitcoin/pull/20609,https://github.com/bitcoin/bitcoin/pull/15295#discussion_r539728760,539728760,src/Makefile.test.include
