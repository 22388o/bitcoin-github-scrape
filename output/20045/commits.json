[
  {
    "sha": "28fd43b4c876717e2a4d9b9a9c06e0daed8ce11c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGZkNDNiNGM4NzY3MTdlMmE0ZDliOWE5YzA2ZTBkYWVkOGNlMTFj",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-30T11:18:54Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-01T04:32:53Z"
      },
      "message": "upstream/univalue: add overloaded defaulted get()",
      "tree": {
        "sha": "acefacef82ba1cf41da55fc16721dbe16b51a020",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acefacef82ba1cf41da55fc16721dbe16b51a020"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28fd43b4c876717e2a4d9b9a9c06e0daed8ce11c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl91W/UACgkQV692LbM1\nMyIq6Q/+N8LbPIbnINtK7J6PNTvCmU4UQXecbLS//rhW5Rm39/LnjZfXHFmu7YeE\nbuAXzdv/KOQvt4rVK9T4lkJhkE3ltT8MbZNnN76qvbZ3C4y0lhsV9Y+yW9FQQGH3\nzfe6nEDsPfXckuDtXvCNcfOrOgtHr6HPifI4ReXzENXDYkZcAvXxTM6fc2YDYtC/\n2wviDz8ejszO6D8v+gE9B2FQxTrjlkfvA7jmvaJBUFlaAFZJdK10QfC0h8Qd6rbK\nfWbqZ+/Lud5hA83Jav17MuMx9HXTG08CBN6H/kFrxP8xw3IcdXLbi9qzR56VmCdi\nZhpX/hrCuX+tyJqbBrpNdDwVclTx9Wi0EJ7AjZcoG6SxfsiwB40fJUu3kLEPwM7/\nvBUVG52hMQFnaKqbnE9baaMMNSqtIEFcPwaAC8qL9ge3uCFjjFEunHqMd4xVOOBX\nLg2VUpFiKhB1ckYcYHOmWMFXxLCtnm6jnYs7ASAwCFzKLZ8xIqtywKeAB3qCvwwL\niiUXQzsy8yaP4bS8Gkoo5wt3k7Hcz1zBo4iTwqSEQ02h3vQQZEJvrbh7riWlFzG6\nr9EbUJNKsX/CXajdayfcJz5FTyAwb7B0B1vT1CtTLx7CpYBNPPjoZeXVbX1X2k9M\nqb4ZTIWLNzC1tXipmCyrAVliwr+gQRN421ZgvVaNlWiZWci0MwY=\n=BBqv\n-----END PGP SIGNATURE-----",
        "payload": "tree acefacef82ba1cf41da55fc16721dbe16b51a020\nparent e36aa351a31cde0f95ce957b2ff593a97f91eb6d\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1601464734 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1601526773 +0900\n\nupstream/univalue: add overloaded defaulted get()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28fd43b4c876717e2a4d9b9a9c06e0daed8ce11c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28fd43b4c876717e2a4d9b9a9c06e0daed8ce11c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28fd43b4c876717e2a4d9b9a9c06e0daed8ce11c/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e36aa351a31cde0f95ce957b2ff593a97f91eb6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e36aa351a31cde0f95ce957b2ff593a97f91eb6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e36aa351a31cde0f95ce957b2ff593a97f91eb6d"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "688cc9d2c49cde5b1a66e92b5f1b1dd14f4b5337",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28fd43b4c876717e2a4d9b9a9c06e0daed8ce11c/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28fd43b4c876717e2a4d9b9a9c06e0daed8ce11c/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=28fd43b4c876717e2a4d9b9a9c06e0daed8ce11c",
        "patch": "@@ -174,6 +174,15 @@ class UniValue {\n     const UniValue& get_obj() const;\n     const UniValue& get_array() const;\n \n+    bool get(bool default_value) const                             { return isNull() ? default_value : get_bool(); }\n+    const std::string get(const std::string& default_value) const  { return isNull() ? default_value : get_str(); }\n+    const std::string get(const char* default_value) const         { return isNull() ? default_value : get_str(); }\n+    int get(int default_value) const                               { return isNull() ? default_value : get_int(); }\n+    int64_t get(int64_t default_value) const                       { return isNull() ? default_value : get_int64(); }\n+    uint64_t get(uint64_t default_value) const                     { return isNull() ? default_value : (uint64_t)get_int64(); }\n+    double get(double default_value) const                         { return isNull() ? default_value : get_real(); }\n+    const UniValue& get(const UniValue& default_value) const       { return isNull() ? default_value : default_value.isArray() ? get_array() : get_obj(); }\n+\n     enum VType type() const { return getType(); }\n     friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n };"
      }
    ]
  },
  {
    "sha": "c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWY3ZWUwMmRmNmNjMjcyN2E2N2ZiNmYzNmFiM2MxNTNmNzA1MjYw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-30T11:40:26Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-01T04:57:50Z"
      },
      "message": "refactor: use UniValue::get() for default case",
      "tree": {
        "sha": "f0873f60fb73770eff92c50d331549288db74470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0873f60fb73770eff92c50d331549288db74470"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl91Yc4ACgkQV692LbM1\nMyL/yg/+JBktHnOcaU4xjTErcecdoNsolfZWvp8jKCBZQahmPxiqBTmhV2LXzYwY\niFf+ri7jqMZKguZMRNIyfSqz1rMLsOS9euMQ9s1dpHOoWvU6nTkQlI3S2DIL8/n7\np5gGVaeGsyTnUN1OoDmq5q1uXRZRe3db7Cy7WXJ7iIpsCkKYTBRJmRudQoEIhKH3\n/QaKfmqoQn+svn9QI2DkjAD/8KDifL4VhsJOtrAKwRPNSbvpSs322oFKqPgzE5CD\nTOP2Z0od3SoXY0RueDWRtVboc6VMMfY2HlQvLNhTqW6DeVLfhssc9y4d6IWa5VCi\nX/wArNr4W9fpbxCN6RiRqog9oFEPh/8WQl+tD/S6fRBEALyRPST/HQxvmKosovBt\n6dxbnkc3s90qhGVD07W74Cr5EBEgVTQZqYPod/1/DFmitWQIaSj4SSCUkA+4jYHZ\nBNVV8aSQbRQO77Hf+L3uvxmw8BlGokmNhXM+L5AblNEsmPAxtQPvHOGQz4HDS8E1\n2ZQDQ5Yoqj4vzft0q6AC36+3IU+smMKBQgQw/fB539NNvtEWM/2Pm5lZOoCfrGCS\n0sSK3TEJ67qUeUZWA9RKCMMgfxwmVUf5kQBIxQzx8D6FzmVf2dDGtLFzfra0PG32\njBWTv6HlbR1CJFAFOwtNtqzX2Wrokz04S+lSfKObVFDkfdB3SgM=\n=y5W9\n-----END PGP SIGNATURE-----",
        "payload": "tree f0873f60fb73770eff92c50d331549288db74470\nparent 28fd43b4c876717e2a4d9b9a9c06e0daed8ce11c\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1601466026 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1601528270 +0900\n\nrefactor: use UniValue::get() for default case\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28fd43b4c876717e2a4d9b9a9c06e0daed8ce11c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28fd43b4c876717e2a4d9b9a9c06e0daed8ce11c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28fd43b4c876717e2a4d9b9a9c06e0daed8ce11c"
      }
    ],
    "stats": {
      "total": 342,
      "additions": 93,
      "deletions": 249
    },
    "files": [
      {
        "sha": "aa0b2ca3c17cc8cb43d0477a163874f9aeb4d80d",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "patch": "@@ -395,8 +395,8 @@ class NetinfoRequestHandler : public BaseRequestHandler\n \n         for (const UniValue& peer : getpeerinfo.getValues()) {\n             const std::string addr{peer[\"addr\"].get_str()};\n-            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n-            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const std::string addr_local{peer[\"addrlocal\"].get(\"\")};\n+            const int mapped_as{peer[\"mapped_as\"].get((int)0)};\n             const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n             const bool is_inbound{peer[\"inbound\"].get_bool()};\n             NetType net_type{NetType::ipv4};\n@@ -433,8 +433,8 @@ class NetinfoRequestHandler : public BaseRequestHandler\n                 const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n                 const int64_t last_send{peer[\"lastsend\"].get_int64()};\n                 const int64_t last_trxn{peer[\"last_transaction\"].get_int64()};\n-                const double min_ping{peer[\"minping\"].isNull() ? -1 : peer[\"minping\"].get_real()};\n-                const double ping{peer[\"pingtime\"].isNull() ? -1 : peer[\"pingtime\"].get_real()};\n+                const double min_ping{peer[\"minping\"].get(-1.0)};\n+                const double ping{peer[\"pingtime\"].get(-1.0)};\n                 peers.push_back({peer_id, mapped_as, version, conn_time, last_blck, last_recv, last_send, last_trxn, min_ping, ping, addr, sub_version, net_type, is_block_relay, !is_inbound});\n                 max_peer_id_length = std::max(ToString(peer_id).length(), max_peer_id_length);\n                 max_addr_length = std::max(addr.length() + 1, max_addr_length);"
      },
      {
        "sha": "e849e55988439b23512cc2d90ec01c26390b18b2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 45,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "patch": "@@ -258,9 +258,7 @@ static RPCHelpMan waitfornewblock()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    int timeout = 0;\n-    if (!request.params[0].isNull())\n-        timeout = request.params[0].get_int();\n+    int timeout = request.params[0].get((int)0);\n \n     CUpdatedBlock block;\n     {\n@@ -301,13 +299,10 @@ static RPCHelpMan waitforblock()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    int timeout = 0;\n+    int timeout = request.params[1].get((int)0);\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n-    if (!request.params[1].isNull())\n-        timeout = request.params[1].get_int();\n-\n     CUpdatedBlock block;\n     {\n         WAIT_LOCK(cs_blockchange, lock);\n@@ -348,13 +343,10 @@ static RPCHelpMan waitforblockheight()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    int timeout = 0;\n+    int timeout = request.params[1].get((int)0);\n \n     int height = request.params[0].get_int();\n \n-    if (!request.params[1].isNull())\n-        timeout = request.params[1].get_int();\n-\n     CUpdatedBlock block;\n     {\n         WAIT_LOCK(cs_blockchange, lock);\n@@ -577,15 +569,8 @@ static RPCHelpMan getrawmempool()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    bool fVerbose = false;\n-    if (!request.params[0].isNull())\n-        fVerbose = request.params[0].get_bool();\n-\n-    bool include_mempool_sequence = false;\n-    if (!request.params[1].isNull()) {\n-        include_mempool_sequence = request.params[1].get_bool();\n-    }\n-\n+    bool fVerbose = request.params[0].get(false);\n+    bool include_mempool_sequence = request.params[1].get(false);\n     return MempoolToJSON(EnsureMemPool(request.context), fVerbose, include_mempool_sequence);\n },\n     };\n@@ -615,9 +600,7 @@ static RPCHelpMan getmempoolancestors()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    bool fVerbose = false;\n-    if (!request.params[1].isNull())\n-        fVerbose = request.params[1].get_bool();\n+    bool fVerbose = request.params[1].get(false);\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n@@ -679,9 +662,7 @@ static RPCHelpMan getmempooldescendants()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    bool fVerbose = false;\n-    if (!request.params[1].isNull())\n-        fVerbose = request.params[1].get_bool();\n+    bool fVerbose = request.params[1].get(false);\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n@@ -820,9 +801,7 @@ static RPCHelpMan getblockheader()\n {\n     uint256 hash(ParseHashV(request.params[0], \"hash\"));\n \n-    bool fVerbose = true;\n-    if (!request.params[1].isNull())\n-        fVerbose = request.params[1].get_bool();\n+    bool fVerbose = request.params[1].get(true);\n \n     const CBlockIndex* pblockindex;\n     const CBlockIndex* tip;\n@@ -939,13 +918,7 @@ static RPCHelpMan getblock()\n {\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n-    int verbosity = 1;\n-    if (!request.params[1].isNull()) {\n-        if(request.params[1].isNum())\n-            verbosity = request.params[1].get_int();\n-        else\n-            verbosity = request.params[1].get_bool() ? 1 : 0;\n-    }\n+    int verbosity = request.params[1].isNum() ? request.params[1].get_int() : request.params[1].get(true);\n \n     CBlock block;\n     const CBlockIndex* pblockindex;\n@@ -1129,9 +1102,7 @@ static RPCHelpMan gettxout()\n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n     int n = request.params[1].get_int();\n     COutPoint out(hash, n);\n-    bool fMempool = true;\n-    if (!request.params[2].isNull())\n-        fMempool = request.params[2].get_bool();\n+    bool fMempool = request.params[2].get(true);\n \n     Coin coin;\n     CCoinsViewCache* coins_view = &::ChainstateActive().CoinsTip();\n@@ -1184,8 +1155,8 @@ static RPCHelpMan verifychain()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    const int check_level(request.params[0].isNull() ? DEFAULT_CHECKLEVEL : request.params[0].get_int());\n-    const int check_depth{request.params[1].isNull() ? DEFAULT_CHECKBLOCKS : request.params[1].get_int()};\n+    const int check_level(request.params[0].get((int)DEFAULT_CHECKLEVEL));\n+    const int check_depth{request.params[1].get((int)DEFAULT_CHECKBLOCKS)};\n \n     LOCK(cs_main);\n \n@@ -2295,10 +2266,7 @@ static RPCHelpMan getblockfilter()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     uint256 block_hash = ParseHashV(request.params[0], \"blockhash\");\n-    std::string filtertype_name = \"basic\";\n-    if (!request.params[1].isNull()) {\n-        filtertype_name = request.params[1].get_str();\n-    }\n+    std::string filtertype_name = request.params[1].get(\"basic\");\n \n     BlockFilterType filtertype;\n     if (!BlockFilterTypeByName(filtertype_name, filtertype)) {"
      },
      {
        "sha": "ed82e19a33a5c23e51848673d8ae980bff917754",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 17,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "patch": "@@ -100,7 +100,7 @@ static RPCHelpMan getnetworkhashps()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n+    return GetNetworkHashPS(request.params[0].get((int)120), request.params[1].get((int)-1));\n },\n     };\n }\n@@ -223,7 +223,7 @@ static RPCHelpMan generatetodescriptor()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     const int num_blocks{request.params[0].get_int()};\n-    const uint64_t max_tries{request.params[2].isNull() ? DEFAULT_MAX_TRIES : request.params[2].get_int()};\n+    const uint64_t max_tries{request.params[2].get(DEFAULT_MAX_TRIES)};\n \n     CScript coinbase_script;\n     std::string error;\n@@ -274,7 +274,7 @@ static RPCHelpMan generatetoaddress()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     const int num_blocks{request.params[0].get_int()};\n-    const uint64_t max_tries{request.params[2].isNull() ? DEFAULT_MAX_TRIES : request.params[2].get_int()};\n+    const uint64_t max_tries{request.params[2].get(DEFAULT_MAX_TRIES)};\n \n     CTxDestination destination = DecodeDestination(request.params[1].get_str());\n     if (!IsValidDestination(destination)) {\n@@ -468,7 +468,7 @@ static RPCHelpMan prioritisetransaction()\n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n     CAmount nAmount = request.params[2].get_int64();\n \n-    if (!(request.params[1].isNull() || request.params[1].get_real() == 0)) {\n+    if (request.params[1].get(0.0) != 0) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is no longer supported, dummy argument to prioritisetransaction must be 0.\");\n     }\n \n@@ -601,15 +601,7 @@ static RPCHelpMan getblocktemplate()\n     if (!request.params[0].isNull())\n     {\n         const UniValue& oparam = request.params[0].get_obj();\n-        const UniValue& modeval = find_value(oparam, \"mode\");\n-        if (modeval.isStr())\n-            strMode = modeval.get_str();\n-        else if (modeval.isNull())\n-        {\n-            /* Do nothing */\n-        }\n-        else\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n+        strMode = find_value(oparam, \"mode\").get(strMode);\n         lpval = find_value(oparam, \"longpollid\");\n \n         if (strMode == \"proposal\")\n@@ -1151,10 +1143,7 @@ static RPCHelpMan estimaterawfee()\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);\n-    double threshold = 0.95;\n-    if (!request.params[1].isNull()) {\n-        threshold = request.params[1].get_real();\n-    }\n+    double threshold = request.params[1].get(0.95);\n     if (threshold < 0 || threshold > 1) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n     }"
      },
      {
        "sha": "94c8a8562251cf279156d346023e4fa8e132f8ff",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "patch": "@@ -496,7 +496,7 @@ static RPCHelpMan getmemoryinfo()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::string mode = request.params[0].isNull() ? \"stats\" : request.params[0].get_str();\n+    std::string mode = request.params[0].get(\"stats\");\n     if (mode == \"stats\") {\n         UniValue obj(UniValue::VOBJ);\n         obj.pushKV(\"locked\", RPCLockedMemoryInfo());\n@@ -677,7 +677,7 @@ static RPCHelpMan getindexinfo()\n                 [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     UniValue result(UniValue::VOBJ);\n-    const std::string index_name = request.params[0].isNull() ? \"\" : request.params[0].get_str();\n+    const std::string index_name = request.params[0].get(\"\");\n \n     if (g_txindex) {\n         result.pushKVs(SummaryToJSON(g_txindex->GetSummary(), index_name));"
      },
      {
        "sha": "97ae52f925894d395f8082c7721514215fd83d9b",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 18,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "patch": "@@ -265,9 +265,7 @@ static RPCHelpMan addnode()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::string strCommand;\n-    if (!request.params[1].isNull())\n-        strCommand = request.params[1].get_str();\n+    std::string strCommand = request.params[1].get(\"\");\n     if (request.fHelp || request.params.size() != 2 ||\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n@@ -607,9 +605,7 @@ static RPCHelpMan setban()\n                 },\n         [&](const RPCHelpMan& help, const JSONRPCRequest& request) -> UniValue\n {\n-    std::string strCommand;\n-    if (!request.params[1].isNull())\n-        strCommand = request.params[1].get_str();\n+    std::string strCommand = request.params[1].get(\"\");\n     if (request.fHelp || !help.IsValidNumArgs(request.params.size()) || (strCommand != \"add\" && strCommand != \"remove\")) {\n         throw std::runtime_error(help.ToString());\n     }\n@@ -642,13 +638,9 @@ static RPCHelpMan setban()\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n         }\n \n-        int64_t banTime = 0; //use standard bantime if not specified\n-        if (!request.params[2].isNull())\n-            banTime = request.params[2].get_int64();\n+        int64_t banTime = request.params[2].get((int64_t)0); //use standard bantime if not specified\n \n-        bool absolute = false;\n-        if (request.params[3].isTrue())\n-            absolute = true;\n+        bool absolute = request.params[3].get(false);\n \n         if (isSubnet) {\n             node.banman->Ban(subNet, banTime, absolute);\n@@ -795,12 +787,9 @@ static RPCHelpMan getnodeaddresses()\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n-    int count = 1;\n-    if (!request.params[0].isNull()) {\n-        count = request.params[0].get_int();\n-        if (count < 0) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Address count out of range\");\n-        }\n+    int count = request.params[0].get((int)1);\n+    if (count < 0) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Address count out of range\");\n     }\n     // returns a shuffled list of CAddress\n     std::vector<CAddress> vAddr = node.connman->GetAddresses(count, /* max_pct */ 0);"
      },
      {
        "sha": "a8e3536e722b5a30541f4ee08800b85d64d36684",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 16,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "patch": "@@ -169,10 +169,7 @@ static RPCHelpMan getrawtransaction()\n     }\n \n     // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n-    bool fVerbose = false;\n-    if (!request.params[1].isNull()) {\n-        fVerbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n-    }\n+    bool fVerbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get(false);\n \n     if (!request.params[2].isNull()) {\n         LOCK(cs_main);\n@@ -428,10 +425,7 @@ static RPCHelpMan createrawtransaction()\n         }, true\n     );\n \n-    bool rbf = false;\n-    if (!request.params[3].isNull()) {\n-        rbf = request.params[3].isTrue();\n-    }\n+    bool rbf = request.params[3].get(false);\n     CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n \n     return EncodeHexTx(CTransaction(rawTx));\n@@ -512,8 +506,8 @@ static RPCHelpMan decoderawtransaction()\n \n     CMutableTransaction mtx;\n \n-    bool try_witness = request.params[1].isNull() ? true : request.params[1].get_bool();\n-    bool try_no_witness = request.params[1].isNull() ? true : !request.params[1].get_bool();\n+    bool try_witness = request.params[1].get(true);\n+    bool try_no_witness = !request.params[1].get(false); // true if null, otherwise the opposite\n \n     if (!DecodeHexTx(mtx, request.params[0].get_str(), try_no_witness, try_witness)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n@@ -1375,7 +1369,7 @@ static RPCHelpMan finalizepsbt()\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n-    bool extract = request.params[1].isNull() || (!request.params[1].isNull() && request.params[1].get_bool());\n+    bool extract = request.params[1].get(true);\n \n     CMutableTransaction mtx;\n     bool complete = FinalizeAndExtractPSBT(psbtx, mtx);\n@@ -1455,10 +1449,7 @@ static RPCHelpMan createpsbt()\n         }, true\n     );\n \n-    bool rbf = false;\n-    if (!request.params[3].isNull()) {\n-        rbf = request.params[3].isTrue();\n-    }\n+    bool rbf = request.params[3].get(false);\n     CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n \n     // Make a blank psbt\n@@ -1512,7 +1503,7 @@ static RPCHelpMan converttopsbt()\n \n     // parse hex string from parameter\n     CMutableTransaction tx;\n-    bool permitsigdata = request.params[1].isNull() ? false : request.params[1].get_bool();\n+    bool permitsigdata = request.params[1].get(false);\n     bool witness_specified = !request.params[2].isNull();\n     bool iswitness = witness_specified ? request.params[2].get_bool() : false;\n     const bool try_witness = witness_specified ? iswitness : true;"
      },
      {
        "sha": "11da16cd38bcae6642ca35c4f927dfc374912608",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "patch": "@@ -25,12 +25,7 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, output argument must be non-null\");\n     }\n \n-    UniValue inputs;\n-    if (inputs_in.isNull()) {\n-        inputs = UniValue::VARR;\n-    } else {\n-        inputs = inputs_in.get_array();\n-    }\n+    UniValue inputs = inputs_in.get(UniValue(UniValue::VARR));\n \n     const bool outputs_is_obj = outputs_in.isObject();\n     UniValue outputs = outputs_is_obj ? outputs_in.get_obj() : outputs_in.get_array();"
      },
      {
        "sha": "dad15576bb3a82d4f29b04844a9d7381d447297f",
        "filename": "src/rpc/request.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/request.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/rpc/request.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.cpp?ref=c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "patch": "@@ -175,10 +175,8 @@ void JSONRPCRequest::parse(const UniValue& valRequest)\n \n     // Parse params\n     UniValue valParams = find_value(request, \"params\");\n-    if (valParams.isArray() || valParams.isObject())\n-        params = valParams;\n-    else if (valParams.isNull())\n-        params = UniValue(UniValue::VARR);\n+    if (valParams.isArray() || valParams.isObject() || valParams.isNull())\n+        params = valParams.get(UniValue(UniValue::VARR));\n     else\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array or object\");\n }"
      },
      {
        "sha": "c0556c150c4c5edc4fe05c5b7fdedbcfee013d18",
        "filename": "src/test/key_io_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/test/key_io_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/test/key_io_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_io_tests.cpp?ref=c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "patch": "@@ -39,7 +39,7 @@ BOOST_AUTO_TEST_CASE(key_io_valid_parse)\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         SelectParams(find_value(metadata, \"chain\").get_str());\n-        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n+        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").get(false);\n         if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             // Must be valid private key"
      },
      {
        "sha": "8ee8b1737d1047d89d2e4f722f64d208edbdfa78",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 29,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "patch": "@@ -136,13 +136,10 @@ RPCHelpMan importprivkey()\n         EnsureWalletIsUnlocked(pwallet);\n \n         std::string strSecret = request.params[0].get_str();\n-        std::string strLabel = \"\";\n-        if (!request.params[1].isNull())\n-            strLabel = request.params[1].get_str();\n+        std::string strLabel = request.params[1].get(\"\");\n \n         // Whether to perform rescan after import\n-        if (!request.params[2].isNull())\n-            fRescan = request.params[2].get_bool();\n+        fRescan = request.params[2].get(fRescan);\n \n         if (fRescan && pwallet->chain().havePruned()) {\n             // Exit early and print an error.\n@@ -255,14 +252,10 @@ RPCHelpMan importaddress()\n \n     EnsureLegacyScriptPubKeyMan(*pwallet, true);\n \n-    std::string strLabel;\n-    if (!request.params[1].isNull())\n-        strLabel = request.params[1].get_str();\n+    std::string strLabel = request.params[1].get(\"\");\n \n     // Whether to perform rescan after import\n-    bool fRescan = true;\n-    if (!request.params[2].isNull())\n-        fRescan = request.params[2].get_bool();\n+    bool fRescan = request.params[2].get(true);\n \n     if (fRescan && pwallet->chain().havePruned()) {\n         // Exit early and print an error.\n@@ -277,9 +270,7 @@ RPCHelpMan importaddress()\n     }\n \n     // Whether to import a p2sh version, too\n-    bool fP2SH = false;\n-    if (!request.params[3].isNull())\n-        fP2SH = request.params[3].get_bool();\n+    bool fP2SH = request.params[3].get(false);\n \n     {\n         LOCK(pwallet->cs_wallet);\n@@ -450,14 +441,10 @@ RPCHelpMan importpubkey()\n \n     EnsureLegacyScriptPubKeyMan(*wallet, true);\n \n-    std::string strLabel;\n-    if (!request.params[1].isNull())\n-        strLabel = request.params[1].get_str();\n+    std::string strLabel = request.params[1].get(\"\");\n \n     // Whether to perform rescan after import\n-    bool fRescan = true;\n-    if (!request.params[2].isNull())\n-        fRescan = request.params[2].get_bool();\n+    bool fRescan = request.params[2].get(true);\n \n     if (fRescan && pwallet->chain().havePruned()) {\n         // Exit early and print an error.\n@@ -1345,15 +1332,7 @@ RPCHelpMan importmulti()\n     const UniValue& requests = mainRequest.params[0];\n \n     //Default options\n-    bool fRescan = true;\n-\n-    if (!mainRequest.params[1].isNull()) {\n-        const UniValue& options = mainRequest.params[1];\n-\n-        if (options.exists(\"rescan\")) {\n-            fRescan = options[\"rescan\"].get_bool();\n-        }\n-    }\n+    bool fRescan = mainRequest.params[1].get(UniValue(UniValue::VOBJ))[\"rescan\"].get(true);\n \n     WalletRescanReserver reserver(*pwallet);\n     if (fRescan && !reserver.reserve()) {"
      },
      {
        "sha": "9495684f22362f433d4fcb062dbce2793ea997bd",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 107,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f7ee02df6cc2727a67fb6f36ab3c153f705260/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "patch": "@@ -51,7 +51,7 @@ static const uint32_t WALLET_BTC_KB_TO_SAT_B = COIN / 1000; // 1 sat / B = 0.000\n \n static inline bool GetAvoidReuseFlag(const CWallet* const pwallet, const UniValue& param) {\n     bool can_avoid_reuse = pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n-    bool avoid_reuse = param.isNull() ? can_avoid_reuse : param.get_bool();\n+    bool avoid_reuse = param.get(can_avoid_reuse);\n \n     if (avoid_reuse && !can_avoid_reuse) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"wallet does not have the \\\"avoid reuse\\\" feature enabled\");\n@@ -67,13 +67,7 @@ static inline bool GetAvoidReuseFlag(const CWallet* const pwallet, const UniValu\n  */\n static bool ParseIncludeWatchonly(const UniValue& include_watchonly, const CWallet& pwallet)\n {\n-    if (include_watchonly.isNull()) {\n-        // if include_watchonly isn't explicitly set, then check if we have a watchonly wallet\n-        return pwallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n-    }\n-\n-    // otherwise return whatever include_watchonly was set to\n-    return include_watchonly.get_bool();\n+    return include_watchonly.get(pwallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n }\n \n \n@@ -261,9 +255,7 @@ static RPCHelpMan getnewaddress()\n     }\n \n     // Parse the label first so we don't generate a key if there's an error\n-    std::string label;\n-    if (!request.params[0].isNull())\n-        label = LabelFromValue(request.params[0]);\n+    std::string label = request.params[0].get(\"\");\n \n     OutputType output_type = pwallet->m_default_address_type;\n     if (!request.params[1].isNull()) {\n@@ -469,10 +461,7 @@ static RPCHelpMan sendtoaddress()\n     if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n         mapValue[\"to\"] = request.params[3].get_str();\n \n-    bool fSubtractFeeFromAmount = false;\n-    if (!request.params[4].isNull()) {\n-        fSubtractFeeFromAmount = request.params[4].get_bool();\n-    }\n+    bool fSubtractFeeFromAmount = request.params[4].get(false);\n \n     CCoinControl coin_control;\n     if (!request.params[5].isNull()) {\n@@ -644,9 +633,7 @@ static CAmount GetReceived(const CWallet& wallet, const UniValue& params, bool b\n     }\n \n     // Minimum confirmations\n-    int min_depth = 1;\n-    if (!params[1].isNull())\n-        min_depth = params[1].get_int();\n+    int min_depth = params[1].get((int)1);\n \n     // Tally\n     CAmount amount = 0;\n@@ -782,14 +769,11 @@ static RPCHelpMan getbalance()\n     LOCK(pwallet->cs_wallet);\n \n     const UniValue& dummy_value = request.params[0];\n-    if (!dummy_value.isNull() && dummy_value.get_str() != \"*\") {\n+    if (dummy_value.get(\"*\") != \"*\") {\n         throw JSONRPCError(RPC_METHOD_DEPRECATED, \"dummy first argument must be excluded or set to \\\"*\\\".\");\n     }\n \n-    int min_depth = 0;\n-    if (!request.params[1].isNull()) {\n-        min_depth = request.params[1].get_int();\n-    }\n+    int min_depth = request.params[1].get((int)0);\n \n     bool include_watchonly = ParseIncludeWatchonly(request.params[2], *pwallet);\n \n@@ -880,18 +864,16 @@ static RPCHelpMan sendmany()\n \n     LOCK(pwallet->cs_wallet);\n \n-    if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n+    if (!request.params[0].get(\"\").empty()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"\\\"\");\n     }\n     UniValue sendTo = request.params[1].get_obj();\n \n     mapValue_t mapValue;\n-    if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n+    if (!request.params[3].get(\"\").empty())\n         mapValue[\"comment\"] = request.params[3].get_str();\n \n-    UniValue subtractFeeFromAmount(UniValue::VARR);\n-    if (!request.params[4].isNull())\n-        subtractFeeFromAmount = request.params[4].get_array();\n+    UniValue subtractFeeFromAmount = request.params[4].get(UniValue(UniValue::VARR));\n \n     CCoinControl coin_control;\n     if (!request.params[5].isNull()) {\n@@ -950,9 +932,7 @@ static RPCHelpMan addmultisigaddress()\n \n     LOCK2(pwallet->cs_wallet, spk_man.cs_KeyStore);\n \n-    std::string label;\n-    if (!request.params[2].isNull())\n-        label = LabelFromValue(request.params[2]);\n+    std::string label = request.params[2].get(\"\");\n \n     int required = request.params[0].get_int();\n \n@@ -1005,14 +985,10 @@ struct tallyitem\n static UniValue ListReceived(const CWallet* const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     // Minimum confirmations\n-    int nMinDepth = 1;\n-    if (!params[0].isNull())\n-        nMinDepth = params[0].get_int();\n+    int nMinDepth = params[0].get((int)1);\n \n     // Whether to include empty labels\n-    bool fIncludeEmpty = false;\n-    if (!params[1].isNull())\n-        fIncludeEmpty = params[1].get_bool();\n+    bool fIncludeEmpty = params[1].get(false);\n \n     isminefilter filter = ISMINE_SPENDABLE;\n \n@@ -1423,12 +1399,8 @@ static RPCHelpMan listtransactions()\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Label argument must be a valid label name or \\\"*\\\".\");\n         }\n     }\n-    int nCount = 10;\n-    if (!request.params[1].isNull())\n-        nCount = request.params[1].get_int();\n-    int nFrom = 0;\n-    if (!request.params[2].isNull())\n-        nFrom = request.params[2].get_int();\n+    int nCount = request.params[1].get((int)10);\n+    int nFrom = request.params[2].get((int)0);\n     isminefilter filter = ISMINE_SPENDABLE;\n \n     if (ParseIncludeWatchonly(request.params[3], *pwallet)) {\n@@ -1539,11 +1511,11 @@ static RPCHelpMan listsinceblock()\n     // The way the 'height' is initialized is just a workaround for the gcc bug #47679 since version 4.6.0.\n     Optional<int> height = MakeOptional(false, int()); // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n     Optional<int> altheight; // Height of the specified block, even if it's in a deactivated chain.\n-    int target_confirms = 1;\n+    int target_confirms = request.params[1].get((int)1);\n     isminefilter filter = ISMINE_SPENDABLE;\n \n     uint256 blockId;\n-    if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n+    if (!request.params[0].get(\"\").empty()) {\n         blockId = ParseHashV(request.params[0], \"blockhash\");\n         height = int{};\n         altheight = int{};\n@@ -1552,19 +1524,15 @@ static RPCHelpMan listsinceblock()\n         }\n     }\n \n-    if (!request.params[1].isNull()) {\n-        target_confirms = request.params[1].get_int();\n-\n-        if (target_confirms < 1) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n-        }\n+    if (target_confirms < 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n     }\n \n     if (ParseIncludeWatchonly(request.params[2], wallet)) {\n         filter |= ISMINE_WATCH_ONLY;\n     }\n \n-    bool include_removed = (request.params[3].isNull() || request.params[3].get_bool());\n+    bool include_removed = request.params[3].get(true);\n \n     int depth = height ? wallet.GetLastBlockHeight() + 1 - *height : -1;\n \n@@ -1686,7 +1654,7 @@ static RPCHelpMan gettransaction()\n         filter |= ISMINE_WATCH_ONLY;\n     }\n \n-    bool verbose = request.params[2].isNull() ? false : request.params[2].get_bool();\n+    bool verbose = request.params[2].get(false);\n \n     UniValue entry(UniValue::VOBJ);\n     auto it = pwallet->mapWallet.find(hash);\n@@ -1828,12 +1796,9 @@ static RPCHelpMan keypoolrefill()\n     LOCK(pwallet->cs_wallet);\n \n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n-    unsigned int kpSize = 0;\n-    if (!request.params[0].isNull()) {\n-        if (request.params[0].get_int() < 0)\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n-        kpSize = (unsigned int)request.params[0].get_int();\n-    }\n+    if (request.params[0].get((int)0) < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n+    unsigned int kpSize = (unsigned int)request.params[0].get((int)0);\n \n     EnsureWalletIsUnlocked(pwallet);\n     pwallet->TopUpKeyPool(kpSize);\n@@ -2622,7 +2587,7 @@ static RPCHelpMan setwalletflag()\n     CWallet* const pwallet = wallet.get();\n \n     std::string flag_str = request.params[0].get_str();\n-    bool value = request.params[1].isNull() || request.params[1].get_bool();\n+    bool value = request.params[1].get(true);\n \n     if (!WALLET_FLAG_MAP.count(flag_str)) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unknown wallet flag: %s\", flag_str));\n@@ -2687,11 +2652,11 @@ static RPCHelpMan createwallet()\n {\n     WalletContext& context = EnsureWalletContext(request.context);\n     uint64_t flags = 0;\n-    if (!request.params[1].isNull() && request.params[1].get_bool()) {\n+    if (request.params[1].get(false)) {\n         flags |= WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n     }\n \n-    if (!request.params[2].isNull() && request.params[2].get_bool()) {\n+    if (request.params[2].get(false)) {\n         flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n     SecureString passphrase;\n@@ -2705,10 +2670,10 @@ static RPCHelpMan createwallet()\n         }\n     }\n \n-    if (!request.params[4].isNull() && request.params[4].get_bool()) {\n+    if (request.params[4].get(false)) {\n         flags |= WALLET_FLAG_AVOID_REUSE;\n     }\n-    if (!request.params[5].isNull() && request.params[5].get_bool()) {\n+    if (request.params[5].get(false)) {\n         flags |= WALLET_FLAG_DESCRIPTORS;\n         warnings.emplace_back(Untranslated(\"Wallet is an experimental descriptor wallet\"));\n     }\n@@ -2848,22 +2813,11 @@ static RPCHelpMan listunspent()\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    int nMinDepth = 1;\n-    if (!request.params[0].isNull()) {\n-        RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-        nMinDepth = request.params[0].get_int();\n-    }\n-\n-    int nMaxDepth = 9999999;\n-    if (!request.params[1].isNull()) {\n-        RPCTypeCheckArgument(request.params[1], UniValue::VNUM);\n-        nMaxDepth = request.params[1].get_int();\n-    }\n+    int nMinDepth = request.params[0].get((int)1);\n+    int nMaxDepth = request.params[1].get((int)9999999);\n \n     std::set<CTxDestination> destinations;\n-    if (!request.params[2].isNull()) {\n-        RPCTypeCheckArgument(request.params[2], UniValue::VARR);\n-        UniValue inputs = request.params[2].get_array();\n+        UniValue inputs = request.params[2].get(UniValue(UniValue::VARR));\n         for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n             const UniValue& input = inputs[idx];\n             CTxDestination dest = DecodeDestination(input.get_str());\n@@ -2874,13 +2828,8 @@ static RPCHelpMan listunspent()\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated address: \") + input.get_str());\n             }\n         }\n-    }\n \n-    bool include_unsafe = true;\n-    if (!request.params[3].isNull()) {\n-        RPCTypeCheckArgument(request.params[3], UniValue::VBOOL);\n-        include_unsafe = request.params[3].get_bool();\n-    }\n+    bool include_unsafe = request.params[3].get(true);\n \n     CAmount nMinimumAmount = 0;\n     CAmount nMaximumAmount = MAX_MONEY;\n@@ -3215,8 +3164,8 @@ static RPCHelpMan fundrawtransaction()\n \n     // parse hex string from parameter\n     CMutableTransaction tx;\n-    bool try_witness = request.params[2].isNull() ? true : request.params[2].get_bool();\n-    bool try_no_witness = request.params[2].isNull() ? true : !request.params[2].get_bool();\n+    bool try_witness = request.params[2].get(true);\n+    bool try_no_witness = !request.params[2].get(false); // true if null, otherwise the opposite\n     if (!DecodeHexTx(tx, request.params[0].get_str(), try_no_witness, try_witness)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     }\n@@ -3932,10 +3881,7 @@ static RPCHelpMan listlabels()\n \n     LOCK(pwallet->cs_wallet);\n \n-    std::string purpose;\n-    if (!request.params[0].isNull()) {\n-        purpose = request.params[0].get_str();\n-    }\n+    std::string purpose = request.params[0].get(\"\");\n \n     // Add to a set to sort by label name, then insert into Univalue array\n     std::set<std::string> label_set;\n@@ -4177,10 +4123,7 @@ static RPCHelpMan sethdseed()\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    bool flush_key_pool = true;\n-    if (!request.params[0].isNull()) {\n-        flush_key_pool = request.params[0].get_bool();\n-    }\n+    bool flush_key_pool = request.params[0].get(true);\n \n     CPubKey master_pub_key;\n     if (request.params[1].isNull()) {\n@@ -4253,8 +4196,8 @@ static RPCHelpMan walletprocesspsbt()\n     int nHashType = ParseSighashString(request.params[2]);\n \n     // Fill transaction with our data and also sign\n-    bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n-    bool bip32derivs = request.params[3].isNull() ? true : request.params[3].get_bool();\n+    bool sign = request.params[1].get(true);\n+    bool bip32derivs = request.params[3].get(true);\n     bool complete = true;\n     const TransactionError err = pwallet->FillPSBT(psbtx, complete, nHashType, sign, bip32derivs);\n     if (err != TransactionError::OK) {\n@@ -4362,12 +4305,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n \n     CAmount fee;\n     int change_position;\n-    bool rbf = pwallet->m_signal_rbf;\n-    const UniValue &replaceable_arg = request.params[3][\"replaceable\"];\n-    if (!replaceable_arg.isNull()) {\n-        RPCTypeCheckArgument(replaceable_arg, UniValue::VBOOL);\n-        rbf = replaceable_arg.isTrue();\n-    }\n+    bool rbf = request.params[3].get(UniValue(UniValue::VOBJ))[\"replaceable\"].get(pwallet->m_signal_rbf);\n     CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n     CCoinControl coin_control;\n     // Automatically select coins, unless at least one is manually selected. Can\n@@ -4379,7 +4317,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n     PartiallySignedTransaction psbtx(rawTx);\n \n     // Fill transaction with out data but don't sign\n-    bool bip32derivs = request.params[4].isNull() ? true : request.params[4].get_bool();\n+    bool bip32derivs = request.params[4].get(true);\n     bool complete = true;\n     const TransactionError err = pwallet->FillPSBT(psbtx, complete, 1, false, bip32derivs);\n     if (err != TransactionError::OK) {\n@@ -4422,10 +4360,7 @@ static RPCHelpMan upgradewallet()\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    int version = 0;\n-    if (!request.params[0].isNull()) {\n-        version = request.params[0].get_int();\n-    }\n+    int version = request.params[0].get((int)0);\n \n     bilingual_str error;\n     std::vector<bilingual_str> warnings;"
      }
    ]
  },
  {
    "sha": "73fe905445b78b06d214e40fd86bc4909552d233",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2ZlOTA1NDQ1Yjc4YjA2ZDIxNGU0MGZkODZiYzQ5MDk1NTJkMjMz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-30T12:00:43Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-01T04:57:51Z"
      },
      "message": "NOMERGE: disable univalue subtree check",
      "tree": {
        "sha": "7d52b3b59ec8bdfcf4de40d04a5f8de2861cc177",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d52b3b59ec8bdfcf4de40d04a5f8de2861cc177"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73fe905445b78b06d214e40fd86bc4909552d233",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl91Yc8ACgkQV692LbM1\nMyL7gg/7BXkXrtJIvbMT3LjLCK3R0z8x2fMjazCBzKy1KaLtypT5drwrTJ6ERrDn\nHGWPiVOXdVK0zMlRa8raeo960S+owOskGkcGlkoOPp3kAR1yHebTHagzB9pgqxGx\nStK2rUtTebjf4UylM2ULPJmsWJQPi+4AZ4PhON2zijEnT7r/aEFrscBmhrxvytBA\naj0eF9Bw8R9/LZaTHqOj5FxgSVRResZ/0MoMrsQIOKhxS0yOn3bBgu0AM592Q3Ft\nnNNfSHIsmj8c4Wmq+WOySf41p4D1kdStpqC0RqJy4J8TRrpoSl3ahn5xrJZkv0Xz\nv1eV17cP+JOQ1EhJhw/ousW/PcCRzd2SQ0/PCQ74XFubbCeRwsE3MwOYQ4k76OqB\nAK2PlT6ir40HqLtnntcYWtJOR8cGPO6GkNw9bZWl4a1y9cvggdqsrjDE1MkJC0x9\noPaN7mG89KLkCurPHBYrFGm+kqMP+B3mcPSn5G/3mHfsmKDCo9CuS1tssd9y3Kvk\nzDI2y0HiSEIMgo557Rst8H/jLePz2PAj4lcE/Tc32EJj5pPCIBvIjZj4D9+820br\nhOHWAOnZlbb/CoAxzTmEzrvrFyuja1DrjMJai36zZeHIwuP4k0MMsddviLg0vmN7\nwcG1cj0Bqv6yEomIKBfURgxNsCVjL1vbKFv4gQ6a7yCxIEiTKZo=\n=bHGA\n-----END PGP SIGNATURE-----",
        "payload": "tree 7d52b3b59ec8bdfcf4de40d04a5f8de2861cc177\nparent c5f7ee02df6cc2727a67fb6f36ab3c153f705260\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1601467243 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1601528271 +0900\n\nNOMERGE: disable univalue subtree check\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fe905445b78b06d214e40fd86bc4909552d233",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73fe905445b78b06d214e40fd86bc4909552d233",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fe905445b78b06d214e40fd86bc4909552d233/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f7ee02df6cc2727a67fb6f36ab3c153f705260",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5f7ee02df6cc2727a67fb6f36ab3c153f705260"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e52e43446bb454dfdaf52308a280d39fff7f6aeb",
        "filename": "ci/lint/06_script.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73fe905445b78b06d214e40fd86bc4909552d233/ci/lint/06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73fe905445b78b06d214e40fd86bc4909552d233/ci/lint/06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/06_script.sh?ref=73fe905445b78b06d214e40fd86bc4909552d233",
        "patch": "@@ -12,7 +12,7 @@ fi\n \n test/lint/git-subtree-check.sh src/crypto/ctaes\n test/lint/git-subtree-check.sh src/secp256k1\n-test/lint/git-subtree-check.sh src/univalue\n+# test/lint/git-subtree-check.sh src/univalue # TEMP DISABLED FOR #20045\n test/lint/git-subtree-check.sh src/leveldb\n test/lint/git-subtree-check.sh src/crc32c\n test/lint/check-doc.py"
      }
    ]
  }
]