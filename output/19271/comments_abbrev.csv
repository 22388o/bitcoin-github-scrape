andrewtoth,2020-06-14 01:40:51,Big thanks to @JeremyRubin for [giving me this idea](https://github.com/bitcoin/bitcoin/pull/18941#issuecomment-638553680).,https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-643705576,643705576,
JeremyRubin,2020-06-14 02:20:15,"Concept ACK and lite CR-ACK, the approach seems to make sense.\n\nVery nice work! Did this help with the variance from before?\n\nI don't want to go overkill but I wonder if there's a nicer way to communicate the start warming/stop warming instructions (e.g. not just tweaking flags so there's some sort of interface). I also wonder if it makes sense to just always completely finish warming the ",https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-643708078,643708078,
DrahtBot,2020-06-14 04:15:11,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19604 (Pass mempool pointer to UnloadBlockIndex/GetCoinsCacheSizeState by MarcoFalke)\n* #19306 (refactor: Replace Recurs",https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-643716037,643716037,
naumenkogs,2020-06-14 08:23:19,"Concept ACK.\nI think speeding up connecting blocks is always a good idea.\n\nI see you introducing a new thread. That might be an issue. Last time I tried that it didn't work out well: see discussion [here](https://github.com/bitcoin/bitcoin/pull/18421) and an issue I created [here](https://github.com/bitcoin/bitcoin/issues/18488).\nMaybe you want to express your opinion there or during the I",https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-643735060,643735060,
andrewtoth,2020-06-14 13:43:42,">Did this help with the variance from before?\n\n@JeremyRubin my personal benchmarking bandwidth is rather limited. I'm trying to get another machine set up to do more extensive benchmarking on this. My numbers were done on a 12 virtual core CPU with internal SSD. I think this might have a wide variance of performance increase depending on CPU and disk types. However, the results I had were very",https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-643768536,643768536,
andrewtoth,2020-06-14 13:46:18,"@naumenkogs I don't think your issue applies here. The work this thread needs to do is on the order of milliseconds, but it also needs to be immediately available for there to be any benefit. If it had to wait some milliseconds for scheduling it would be useless.",https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-643768821,643768821,
luke-jr,2020-06-14 23:40:37,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-643838365,643838365,
jnewbery,2020-06-17 00:03:21,"This is the kind of change that immediately scares me. It's adding complexity in a consensus-critical area, without great benefit to the critical metrics:\n\n- IBD: 2.3% speedup for is nice, but not worth the complexity/risk\n- Block propagation: I doubt this will have any impact since we relay compact blocks before calling `ActivateBestChain()`, which is where the coins are needed.\n\nSo I'd",https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-645071074,645071074,
andrewtoth,2020-06-17 14:45:03,"@jnewbery I can definitely appreciate that perspective! However, I think concentrating on the 2.3% speedup is a pessimistic take on this patch. It has a 7.1% increase in speed for recent blocks, which are what we are likely to continue to experience in the future. While a user only has to perform IBD from genesis once, they will have to sync recent blocks every time they turn on the node. I think ",https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-645419395,645419395,
jnewbery,2020-06-17 15:23:23,">  think optimizing the common user flow of using the node, then turning off for days/weeks/months until it's used again will prove to be a big benefit.\n\nThis isn't a usage pattern that we should be optimizing for:\n\n- it happens very infrequently (at most once every few days/weeks/months if the user really does stop-start their node frequently)\n- I'd argue that for this scenario, a 7.1% ",https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-645442815,645442815,
andrewtoth,2020-06-17 16:18:27,">Meanwhile, the message handler thread or any other thread could also be accessing that same cache and reading/writing to it. Surely cs_main needs to be held for as long as you have the coins view cache?\n\n@jnewbery any other thread accessing `CoinsTip` requires `cs_main` to be held before accessing. Calling `CoinsTip` will cancel the current block warming and acquire the warming lock, and it c",https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-645473879,645473879,
JeremyRubin,2020-06-17 17:46:38,"I think the approach can be made clearly safe. While out of the propagation path for compact blocks, this is still in path for mining so there is a motivating factor IMO.\n\nRepeated uncontended locking is sufficiently cheap that I'd be curious to see the performance difference if the warming thread just tries to grab the lock before every read/write and receives an atomic flag from the main thr",https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-645523558,645523558,
andrewtoth,2020-06-22 00:49:47,"I had originally been benchmarking by connecting to a single peer in the local network, which processes the new block and connects each block serially. When connecting to multiple remote peers the node will process new blocks in parallel and then connect them all later. When benchmarking a true IBD with multiple remote peers, the node gets a *lot* more time to warm the blocks as they come in.\n\",https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-647207823,647207823,
JeremyRubin,2020-07-18 17:00:11,@andrewtoth I wanted to check in here and see how your progress is going? Anything in particular you feel stuck on?,https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-660511068,660511068,
andrewtoth,2020-07-18 22:17:44,"@JeremyRubin Thanks for checking in, as well as for all your help and encouragement!\n\nI've pushed my latest. I've taken your suggestion and moved the thread handling to a new class `BlockWarmer`, and added an instance of it as a member variable of `CChainState`. Also added locking annotations. I think it makes it a lot more clear what is being changed with the validation logic. I can also writ",https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-660550416,660550416,
andrewtoth,2020-07-18 23:06:27,Looks like I have to figure out some locking issues as well.,https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-660555155,660555155,
andrewtoth,2020-07-18 23:08:15,Converted to draft until I figure out all the issues.,https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-660555335,660555335,
andrewtoth,2020-08-07 02:30:49,Unfortunately I don't think I'll be able to keep working on this for the near future. Going to close for now.,https://github.com/bitcoin/bitcoin/pull/19271#issuecomment-670286843,670286843,
JeremyRubin,2020-06-14 17:11:00,"Are we always guaranteed to have checked the pow by this point? I *think* so, because of AcceptBlockHeader?\n\nWorth documenting that this is expected or putting the WarmBlock call inside CheckBlock after the PoW check.",https://github.com/bitcoin/bitcoin/pull/19271#discussion_r439849665,439849665,src/validation.cpp
andrewtoth,2020-07-18 22:28:11,Updated to explicitly check PoW here if we haven't already.,https://github.com/bitcoin/bitcoin/pull/19271#discussion_r456834062,456834062,src/validation.cpp
