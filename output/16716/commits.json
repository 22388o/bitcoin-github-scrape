[
  {
    "sha": "d9d8984270dbb004ec94f8dbb289be2bc9e4dbc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWQ4OTg0MjcwZGJiMDA0ZWM5NGY4ZGJiMjg5YmUyYmM5ZTRkYmMz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-08-25T01:07:04Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-08-25T01:07:04Z"
      },
      "message": "wallet: Use wallet name instead of pointer on unload/release",
      "tree": {
        "sha": "e78e88a11eee28ae261792d2240872db96cf17c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e78e88a11eee28ae261792d2240872db96cf17c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9d8984270dbb004ec94f8dbb289be2bc9e4dbc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d8984270dbb004ec94f8dbb289be2bc9e4dbc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9d8984270dbb004ec94f8dbb289be2bc9e4dbc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d8984270dbb004ec94f8dbb289be2bc9e4dbc3/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ca514ddb77253042877d1a72dfd3021c3de2812",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca514ddb77253042877d1a72dfd3021c3de2812",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ca514ddb77253042877d1a72dfd3021c3de2812"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "97b20f76bd3bdacbba11073fefa19b2ff16ec56b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d8984270dbb004ec94f8dbb289be2bc9e4dbc3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d8984270dbb004ec94f8dbb289be2bc9e4dbc3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d9d8984270dbb004ec94f8dbb289be2bc9e4dbc3",
        "patch": "@@ -93,13 +93,14 @@ std::shared_ptr<CWallet> GetWallet(const std::string& name)\n \n static Mutex g_wallet_release_mutex;\n static std::condition_variable g_wallet_release_cv;\n-static std::set<CWallet*> g_unloading_wallet_set;\n+static std::set<std::string> g_unloading_wallet_set;\n \n // Custom deleter for shared_ptr<CWallet>.\n static void ReleaseWallet(CWallet* wallet)\n {\n     // Unregister and delete the wallet right after BlockUntilSyncedToCurrentChain\n     // so that it's in sync with the current chainstate.\n+    const std::string name = wallet->GetName();\n     wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n     wallet->BlockUntilSyncedToCurrentChain();\n     wallet->Flush();\n@@ -108,7 +109,7 @@ static void ReleaseWallet(CWallet* wallet)\n     // Wallet is now released, notify UnloadWallet, if any.\n     {\n         LOCK(g_wallet_release_mutex);\n-        if (g_unloading_wallet_set.erase(wallet) == 0) {\n+        if (g_unloading_wallet_set.erase(name) == 0) {\n             // UnloadWallet was not called for this wallet, all done.\n             return;\n         }\n@@ -119,21 +120,21 @@ static void ReleaseWallet(CWallet* wallet)\n void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n {\n     // Mark wallet for unloading.\n-    CWallet* pwallet = wallet.get();\n+    const std::string name = wallet->GetName();\n     {\n         LOCK(g_wallet_release_mutex);\n-        auto it = g_unloading_wallet_set.insert(pwallet);\n+        auto it = g_unloading_wallet_set.insert(name);\n         assert(it.second);\n     }\n     // The wallet can be in use so it's not possible to explicitly unload here.\n     // Notify the unload intent so that all remaining shared pointers are\n     // released.\n-    pwallet->NotifyUnload();\n+    wallet->NotifyUnload();\n     // Time to ditch our shared_ptr and wait for ReleaseWallet call.\n     wallet.reset();\n     {\n         WAIT_LOCK(g_wallet_release_mutex, lock);\n-        while (g_unloading_wallet_set.count(pwallet) == 1) {\n+        while (g_unloading_wallet_set.count(name) == 1) {\n             g_wallet_release_cv.wait(lock);\n         }\n     }"
      }
    ]
  }
]