[
  {
    "sha": "935bd0a447834fa48c218ddae2a5d835a67979ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzViZDBhNDQ3ODM0ZmE0OGMyMThkZGFlMmE1ZDgzNWE2Nzk3OWVm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T14:03:11Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-15T14:12:30Z"
      },
      "message": "Chainparams: Refactor: Decouple main::GetBlockValue() from Params() [renamed GetBlockSubsidy]\n\nRemove redundant getter CChainParams::SubsidyHalvingInterval()",
      "tree": {
        "sha": "1d45c3edbc3208a22894a2e6bef1743550a5b81c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d45c3edbc3208a22894a2e6bef1743550a5b81c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/935bd0a447834fa48c218ddae2a5d835a67979ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935bd0a447834fa48c218ddae2a5d835a67979ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/935bd0a447834fa48c218ddae2a5d835a67979ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935bd0a447834fa48c218ddae2a5d835a67979ef/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac75bafafdc394f60f819ede18181682eb5aa662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac75bafafdc394f60f819ede18181682eb5aa662",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac75bafafdc394f60f819ede18181682eb5aa662"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 47,
      "deletions": 15
    },
    "files": [
      {
        "sha": "8044b553e19a29be2fbb39e8960b2f83daa214d3",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935bd0a447834fa48c218ddae2a5d835a67979ef/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935bd0a447834fa48c218ddae2a5d835a67979ef/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=935bd0a447834fa48c218ddae2a5d835a67979ef",
        "patch": "@@ -49,7 +49,6 @@ class CChainParams\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n-    int SubsidyHalvingInterval() const { return consensus.nSubsidyHalvingInterval; }\n \n     /** Used if GenerateBitcoins is called with a negative number of threads */\n     int DefaultMinerThreads() const { return nMinerThreads; }"
      },
      {
        "sha": "462b74b937e5a9193839566b10e387ccfc35e0bd",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935bd0a447834fa48c218ddae2a5d835a67979ef/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935bd0a447834fa48c218ddae2a5d835a67979ef/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=935bd0a447834fa48c218ddae2a5d835a67979ef",
        "patch": "@@ -1188,19 +1188,17 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     return true;\n }\n \n-CAmount GetBlockValue(int nHeight, const CAmount& nFees)\n+CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n {\n-    CAmount nSubsidy = 50 * COIN;\n-    int halvings = nHeight / Params().SubsidyHalvingInterval();\n-\n+    int halvings = nHeight / consensusParams.nSubsidyHalvingInterval;\n     // Force block reward to zero when right shift is undefined.\n     if (halvings >= 64)\n-        return nFees;\n+        return 0;\n \n+    CAmount nSubsidy = 50 * COIN;\n     // Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.\n     nSubsidy >>= halvings;\n-\n-    return nSubsidy + nFees;\n+    return nSubsidy;\n }\n \n bool IsInitialBlockDownload()\n@@ -1809,10 +1807,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     int64_t nTime1 = GetTimeMicros(); nTimeConnect += nTime1 - nTimeStart;\n     LogPrint(\"bench\", \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime1 - nTimeStart), 0.001 * (nTime1 - nTimeStart) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime1 - nTimeStart) / (nInputs-1), nTimeConnect * 0.000001);\n \n-    if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n+    CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus());\n+    if (block.vtx[0].GetValueOut() > blockReward)\n         return state.DoS(100,\n                          error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n-                               block.vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)),\n+                               block.vtx[0].GetValueOut(), blockReward),\n                                REJECT_INVALID, \"bad-cb-amount\");\n \n     if (!control.Wait())"
      },
      {
        "sha": "07a709b75c8d36d74db4479f784a2af816b7f2dd",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935bd0a447834fa48c218ddae2a5d835a67979ef/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935bd0a447834fa48c218ddae2a5d835a67979ef/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=935bd0a447834fa48c218ddae2a5d835a67979ef",
        "patch": "@@ -202,7 +202,7 @@ std::string GetWarnings(std::string strFor);\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n-CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n+CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**\n  * Prune block and undo files (blk???.dat and undo???.dat) so that the disk space used is less than a user-defined target."
      },
      {
        "sha": "804a688523c05297d2d4517f80ae291411a9854c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935bd0a447834fa48c218ddae2a5d835a67979ef/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935bd0a447834fa48c218ddae2a5d835a67979ef/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=935bd0a447834fa48c218ddae2a5d835a67979ef",
        "patch": "@@ -91,6 +91,7 @@ void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams,\n \n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n+    const CChainParams& chainparams = Params();\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n@@ -320,7 +321,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         LogPrintf(\"CreateNewBlock(): total size %u\\n\", nBlockSize);\n \n         // Compute final coinbase transaction.\n-        txNew.vout[0].nValue = GetBlockValue(nHeight, nFees);\n+        txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n         txNew.vin[0].scriptSig = CScript() << nHeight << OP_0;\n         pblock->vtx[0] = txNew;\n         pblocktemplate->vTxFees[0] = -nFees;"
      },
      {
        "sha": "21ae46d6e971d467de24e265960b501060bdf41b",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 3,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935bd0a447834fa48c218ddae2a5d835a67979ef/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935bd0a447834fa48c218ddae2a5d835a67979ef/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=935bd0a447834fa48c218ddae2a5d835a67979ef",
        "patch": "@@ -2,25 +2,58 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"primitives/transaction.h\"\n+#include \"chainparams.h\"\n #include \"main.h\"\n \n #include \"test/test_bitcoin.h\"\n \n+#include <boost/signals2/signal.hpp>\n #include <boost/test/unit_test.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(main_tests, TestingSetup)\n \n+static void TestBlockSubsidyHalvings(const Consensus::Params& consensusParams)\n+{\n+    int maxHalvings = 64;\n+    CAmount nInitialSubsidy = 50 * COIN;\n+\n+    CAmount nPreviousSubsidy = nInitialSubsidy * 2; // for height == 0\n+    BOOST_CHECK_EQUAL(nPreviousSubsidy, nInitialSubsidy * 2);\n+    for (int nHalvings = 0; nHalvings < maxHalvings; nHalvings++) {\n+        int nHeight = nHalvings * consensusParams.nSubsidyHalvingInterval;\n+        CAmount nSubsidy = GetBlockSubsidy(nHeight, consensusParams);\n+        BOOST_CHECK(nSubsidy <= nInitialSubsidy);\n+        BOOST_CHECK_EQUAL(nSubsidy, nPreviousSubsidy / 2);\n+        nPreviousSubsidy = nSubsidy;\n+    }\n+    BOOST_CHECK_EQUAL(GetBlockSubsidy(maxHalvings * consensusParams.nSubsidyHalvingInterval, consensusParams), 0);\n+}\n+\n+static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)\n+{\n+    Consensus::Params consensusParams;\n+    consensusParams.nSubsidyHalvingInterval = nSubsidyHalvingInterval;\n+    TestBlockSubsidyHalvings(consensusParams);\n+}\n+\n+BOOST_AUTO_TEST_CASE(block_subsidy_test)\n+{\n+    TestBlockSubsidyHalvings(Params(CBaseChainParams::MAIN).GetConsensus()); // As in main\n+    TestBlockSubsidyHalvings(150); // As in regtest\n+    TestBlockSubsidyHalvings(1000); // Just another interval\n+}\n+\n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n+    const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN).GetConsensus();\n     CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n-        CAmount nSubsidy = GetBlockValue(nHeight, 0);\n+        CAmount nSubsidy = GetBlockSubsidy(nHeight, consensusParams);\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));\n     }\n-    BOOST_CHECK(nSum == 2099999997690000ULL);\n+    BOOST_CHECK_EQUAL(nSum, 2099999997690000ULL);\n }\n \n bool ReturnFalse() { return false; }"
      }
    ]
  }
]