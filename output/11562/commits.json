[
  {
    "sha": "c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTE1ZDI2NmVjMDRkN2YwYjJiMWIzODE1YTc5M2MyN2RkY2Q0ZTFj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-25T20:38:24Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-11-07T22:15:58Z"
      },
      "message": "bench: switch to std::chrono for time measurements\n\nstd::chrono removes portability issues.\n\nRather than storing doubles, store the untouched time_points. Then\nconvert to nanoseconds for display. This allows for maximum precision, while\nkeeping results comparable between differing hardware/operating systems.\n\nAlso, display full nanosecond counts rather than sub-second floats.",
      "tree": {
        "sha": "57055da9437118e4220868fee4ce3853534cb7c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57055da9437118e4220868fee4ce3853534cb7c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57ee73990f1ce29916adfd99f93eae1ccea1a43b"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 31,
      "deletions": 29
    },
    "files": [
      {
        "sha": "dd4ba5ab0ee2389c8b5cd2d4feac850b7669b4a8",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c",
        "patch": "@@ -8,29 +8,22 @@\n #include <assert.h>\n #include <iostream>\n #include <iomanip>\n-#include <sys/time.h>\n \n benchmark::BenchRunner::BenchmarkMap &benchmark::BenchRunner::benchmarks() {\n     static std::map<std::string, benchmark::BenchFunction> benchmarks_map;\n     return benchmarks_map;\n }\n \n-static double gettimedouble(void) {\n-    struct timeval tv;\n-    gettimeofday(&tv, nullptr);\n-    return tv.tv_usec * 0.000001 + tv.tv_sec;\n-}\n-\n benchmark::BenchRunner::BenchRunner(std::string name, benchmark::BenchFunction func)\n {\n     benchmarks().insert(std::make_pair(name, func));\n }\n \n void\n-benchmark::BenchRunner::RunAll(double elapsedTimeForOne)\n+benchmark::BenchRunner::RunAll(benchmark::duration elapsedTimeForOne)\n {\n     perf_init();\n-    std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \",\"\n+    std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min(ns)\" << \",\" << \"max(ns)\" << \",\" << \"average(ns)\" << \",\"\n               << \"min_cycles\" << \",\" << \"max_cycles\" << \",\" << \"average_cycles\" << \"\\n\";\n \n     for (const auto &p: benchmarks()) {\n@@ -46,16 +39,17 @@ bool benchmark::State::KeepRunning()\n       ++count;\n       return true;\n     }\n-    double now;\n+    time_point now;\n+\n     uint64_t nowCycles;\n     if (count == 0) {\n-        lastTime = beginTime = now = gettimedouble();\n+        lastTime = beginTime = now = clock::now();\n         lastCycles = beginCycles = nowCycles = perf_cpucycles();\n     }\n     else {\n-        now = gettimedouble();\n-        double elapsed = now - lastTime;\n-        double elapsedOne = elapsed / (countMask + 1);\n+        now = clock::now();\n+        auto elapsed = now - lastTime;\n+        auto elapsedOne = elapsed / (countMask + 1);\n         if (elapsedOne < minTime) minTime = elapsedOne;\n         if (elapsedOne > maxTime) maxTime = elapsedOne;\n \n@@ -70,8 +64,8 @@ bool benchmark::State::KeepRunning()\n           // The restart avoids including the overhead of this code in the measurement.\n           countMask = ((countMask<<3)|7) & ((1LL<<60)-1);\n           count = 0;\n-          minTime = std::numeric_limits<double>::max();\n-          maxTime = std::numeric_limits<double>::min();\n+          minTime = duration::max();\n+          maxTime = duration::zero();\n           minCycles = std::numeric_limits<uint64_t>::max();\n           maxCycles = std::numeric_limits<uint64_t>::min();\n           return true;\n@@ -94,9 +88,13 @@ bool benchmark::State::KeepRunning()\n     assert(count != 0 && \"count == 0 => (now == 0 && beginTime == 0) => return above\");\n \n     // Output results\n-    double average = (now-beginTime)/count;\n+    // Duration casts are only necessary here because hardware with sub-nanosecond clocks\n+    // will lose precision.\n+    int64_t min_elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(minTime).count();\n+    int64_t max_elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(maxTime).count();\n+    int64_t avg_elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>((now-beginTime)/count).count();\n     int64_t averageCycles = (nowCycles-beginCycles)/count;\n-    std::cout << std::fixed << std::setprecision(15) << name << \",\" << count << \",\" << minTime << \",\" << maxTime << \",\" << average << \",\"\n+    std::cout << std::fixed << std::setprecision(15) << name << \",\" << count << \",\" << min_elapsed << \",\" << max_elapsed << \",\" << avg_elapsed << \",\"\n               << minCycles << \",\" << maxCycles << \",\" << averageCycles << \"\\n\";\n     std::cout.copyfmt(std::ios(nullptr));\n "
      },
      {
        "sha": "d7037e1f3356c753abf9df08319c502d0a062245",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c",
        "patch": "@@ -9,6 +9,7 @@\n #include <limits>\n #include <map>\n #include <string>\n+#include <chrono>\n \n #include <boost/preprocessor/cat.hpp>\n #include <boost/preprocessor/stringize.hpp>\n@@ -37,21 +38,25 @@ BENCHMARK(CODE_TO_TIME);\n  \n namespace benchmark {\n \n+    using clock = std::chrono::high_resolution_clock;\n+    using time_point = clock::time_point;\n+    using duration = clock::duration;\n+\n     class State {\n         std::string name;\n-        double maxElapsed;\n-        double beginTime;\n-        double lastTime, minTime, maxTime;\n+        duration maxElapsed;\n+        time_point beginTime, lastTime;\n+        duration minTime, maxTime;\n         uint64_t count;\n         uint64_t countMask;\n         uint64_t beginCycles;\n         uint64_t lastCycles;\n         uint64_t minCycles;\n         uint64_t maxCycles;\n     public:\n-        State(std::string _name, double _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n-            minTime = std::numeric_limits<double>::max();\n-            maxTime = std::numeric_limits<double>::min();\n+        State(std::string _name, duration _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n+            minTime = duration::max();\n+            maxTime = duration::zero();\n             minCycles = std::numeric_limits<uint64_t>::max();\n             maxCycles = std::numeric_limits<uint64_t>::min();\n             countMask = 1;\n@@ -69,7 +74,7 @@ namespace benchmark {\n     public:\n         BenchRunner(std::string name, BenchFunction func);\n \n-        static void RunAll(double elapsedTimeForOne=1.0);\n+        static void RunAll(duration elapsedTimeForOne = std::chrono::seconds(1));\n     };\n }\n "
      },
      {
        "sha": "a93d0fb0a58b5154a4781f558ae56e9b30fee5a1",
        "filename": "src/bench/rollingbloom.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c/src/bench/rollingbloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c/src/bench/rollingbloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rollingbloom.cpp?ref=c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c",
        "patch": "@@ -6,7 +6,6 @@\n \n #include \"bench.h\"\n #include \"bloom.h\"\n-#include \"utiltime.h\"\n \n static void RollingBloom(benchmark::State& state)\n {\n@@ -23,10 +22,10 @@ static void RollingBloom(benchmark::State& state)\n         data[2] = count >> 16;\n         data[3] = count >> 24;\n         if (countnow == nEntriesPerGeneration) {\n-            int64_t b = GetTimeMicros();\n+            auto b = benchmark::clock::now();\n             filter.insert(data);\n-            int64_t e = GetTimeMicros();\n-            std::cout << \"RollingBloom-refresh,1,\" << (e-b)*0.000001 << \",\" << (e-b)*0.000001 << \",\" << (e-b)*0.000001 << \"\\n\";\n+            auto total = std::chrono::duration_cast<std::chrono::nanoseconds>(benchmark::clock::now() - b).count();\n+            std::cout << \"RollingBloom-refresh,1,\" << total << \",\" << total << \",\" << total << \"\\n\";\n             countnow = 0;\n         } else {\n             filter.insert(data);"
      }
    ]
  },
  {
    "sha": "24a0bddf4ae13d8f1fa0436a547de67dcf6d4f2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGEwYmRkZjRhZTEzZDhmMWZhMDQzNmE1NDdkZTY3ZGNmNmQ0ZjJh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-25T21:54:05Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-11-07T22:17:34Z"
      },
      "message": "bench: prefer a steady clock if the resolution is no worse",
      "tree": {
        "sha": "750eb10d5a83e928c2afb9ad3e68623f1f4f8809",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/750eb10d5a83e928c2afb9ad3e68623f1f4f8809"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24a0bddf4ae13d8f1fa0436a547de67dcf6d4f2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24a0bddf4ae13d8f1fa0436a547de67dcf6d4f2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24a0bddf4ae13d8f1fa0436a547de67dcf6d4f2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24a0bddf4ae13d8f1fa0436a547de67dcf6d4f2a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c515d266ec04d7f0b2b1b3815a793c27ddcd4e1c"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d276f4ee91f4ec2b1edf2fa596cb34a6b95b91cc",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24a0bddf4ae13d8f1fa0436a547de67dcf6d4f2a/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24a0bddf4ae13d8f1fa0436a547de67dcf6d4f2a/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=24a0bddf4ae13d8f1fa0436a547de67dcf6d4f2a",
        "patch": "@@ -37,8 +37,15 @@ BENCHMARK(CODE_TO_TIME);\n  */\n  \n namespace benchmark {\n-\n-    using clock = std::chrono::high_resolution_clock;\n+    // On many systems, the high_resolution_clock offers no better resolution than the steady_clock.\n+    // If that's the case, prefer the steady_clock.\n+    struct best_clock {\n+        using hi_res_clock = std::chrono::high_resolution_clock;\n+        using steady_clock = std::chrono::steady_clock;\n+        static constexpr bool steady_is_high_res = std::ratio_less_equal<steady_clock::period, hi_res_clock::period>::value;\n+        using type = std::conditional<steady_is_high_res, steady_clock, hi_res_clock>::type;\n+    };\n+    using clock = best_clock::type;\n     using time_point = clock::time_point;\n     using duration = clock::duration;\n "
      }
    ]
  }
]