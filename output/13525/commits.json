[
  {
    "sha": "7758133557124a35bd62926e23f6803f36aa5cb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzU4MTMzNTU3MTI0YTM1YmQ2MjkyNmUyM2Y2ODAzZjM2YWE1Y2I3",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-06-28T14:29:13Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-06-22T18:01:38Z"
      },
      "message": "Propagate validation debug information from AreInputsStandard\n\nThis adds specific debug information including the input index and manner of\nfailure.",
      "tree": {
        "sha": "c77a50c9af540f9abeef47e7b28f20ab465d76a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c77a50c9af540f9abeef47e7b28f20ab465d76a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7758133557124a35bd62926e23f6803f36aa5cb7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAl7w8gMACgkQTYykuhgE\nCQb77hAAlUnBY6AqioasOOSTb3bqOXn75o1zX+N18CWsa2WJ16cTfz3MpBFjkjjE\nFClmj6ejVaq1/ffCbWL6wAtlxedu4AXzPs8SKYpuXNI3dkYsR7F3ADFulTD8ogUf\nQsJUv/tm7UJ4eATgOklKl9fbsdcEOwgw04Uw07gc4LY5Z2Y81MazK7g6InU+rglO\nIfNTOzN+qV3vyjM7dsWg7fS/SLkNqsmbh+7QxO/RqRug6iaHF6ZkUrJiY+j3Ywwp\nvYpNzAAz0PzKOy+1CzGghTPcw+NjFLZ/sB+fuja8G1ks03Z2hZLNzYwZb7DKMs0M\n9cFdHxsGRVrG1r3Wbb+KHMw0dS/fTrvQ/J70ZSqPtPfh6JZ6I50ilCvN6Ydan2bd\ncq5itmPEpjlE++ms8AZmnSmFqoRiH/KtiGbS/V2vRAC7oA6Xm/c/Vm5yeq14mP8I\nWCqxicxhAqX6ugga6Kr0l9hZxanPoSZyyzoJWnuXyYhKpzs3R+2+5OHgR7fWYhJD\nUsL1LrTnTjgpHzcJsLgFLDhO5MYdqTO0v92BK/ecv1u3gmyS90w68QOMiBHmWcmL\n4iM8BNxwH8Udmr2ugl84YvDfJOkTZ1ny55lFtWRBEPELDfj1TmH6GrZd8M+lSywI\nWBQa5J7lZrEAFNrwk95LHE2iO3u8o0vkXmJz2inwIBbv+Bks4Ik=\n=F/l+\n-----END PGP SIGNATURE-----",
        "payload": "tree c77a50c9af540f9abeef47e7b28f20ab465d76a7\nparent 5b24f6084ede92d0f493ff416b4726245140b2c1\nauthor Ben Woosley <ben.woosley@gmail.com> 1530196153 +0000\ncommitter Ben Woosley <ben.woosley@gmail.com> 1592848898 -0700\n\nPropagate validation debug information from AreInputsStandard\n\nThis adds specific debug information including the input index and manner of\nfailure.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7758133557124a35bd62926e23f6803f36aa5cb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7758133557124a35bd62926e23f6803f36aa5cb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7758133557124a35bd62926e23f6803f36aa5cb7/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b24f6084ede92d0f493ff416b4726245140b2c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b24f6084ede92d0f493ff416b4726245140b2c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b24f6084ede92d0f493ff416b4726245140b2c1"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 100,
      "deletions": 15
    },
    "files": [
      {
        "sha": "02d50be516091e99b62672ed920ca1067a2b1ed7",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7758133557124a35bd62926e23f6803f36aa5cb7/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7758133557124a35bd62926e23f6803f36aa5cb7/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=7758133557124a35bd62926e23f6803f36aa5cb7",
        "patch": "@@ -43,9 +43,10 @@ static void CCoinsCaching(benchmark::State& state)\n     t1.vout[0].scriptPubKey << OP_1;\n \n     // Benchmark.\n+    std::string reason, debug;\n     const CTransaction tx_1(t1);\n     while (state.KeepRunning()) {\n-        bool success = AreInputsStandard(tx_1, coins);\n+        bool success = AreInputsStandard(tx_1, coins, reason, debug);\n         assert(success);\n     }\n     ECC_Stop();"
      },
      {
        "sha": "c5475d43661acc929ccbf00f20baeb4d20ac2ba0",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7758133557124a35bd62926e23f6803f36aa5cb7/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7758133557124a35bd62926e23f6803f36aa5cb7/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=7758133557124a35bd62926e23f6803f36aa5cb7",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <consensus/validation.h>\n #include <coins.h>\n+#include <tinyformat.h>\n \n \n CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n@@ -153,7 +154,7 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n  * expensive-to-check-upon-redemption script like:\n  *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n  */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason, std::string& debug)\n {\n     if (tx.IsCoinBase())\n         return true; // Coinbases don't use vin normally\n@@ -165,16 +166,28 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         std::vector<std::vector<unsigned char> > vSolutions;\n         txnouttype whichType = Solver(prev.scriptPubKey, vSolutions);\n         if (whichType == TX_NONSTANDARD) {\n+            reason = \"bad-txns-input-script-nonstandard\";\n+            debug = strprintf(\"input %u\", i);\n             return false;\n         } else if (whichType == TX_SCRIPTHASH) {\n             std::vector<std::vector<unsigned char> > stack;\n             // convert the scriptSig into a stack, so we can inspect the redeemScript\n-            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SigVersion::BASE))\n+            ScriptError serror;\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SigVersion::BASE, &serror)) {\n+                reason = \"bad-txns-input-scriptsig-failure\";\n+                debug = strprintf(\"input %u: %s\", i, ScriptErrorString(serror));\n                 return false;\n-            if (stack.empty())\n+            }\n+            if (stack.empty()) {\n+                reason = \"bad-txns-input-scriptcheck-missing\";\n+                debug = strprintf(\"input %u\", i);\n                 return false;\n+            }\n             CScript subscript(stack.back().begin(), stack.back().end());\n-            if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n+            unsigned int sigop_count = subscript.GetSigOpCount(true);\n+            if (sigop_count > MAX_P2SH_SIGOPS) {\n+                reason = \"bad-txns-input-scriptcheck-sigops\";\n+                debug = strprintf(\"input %u: %u > %u\", i, sigop_count, MAX_P2SH_SIGOPS);\n                 return false;\n             }\n         }"
      },
      {
        "sha": "8df18bc4704ddd6ffb29a7f94f1c98020f5affa1",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7758133557124a35bd62926e23f6803f36aa5cb7/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7758133557124a35bd62926e23f6803f36aa5cb7/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=7758133557124a35bd62926e23f6803f36aa5cb7",
        "patch": "@@ -90,9 +90,11 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n     /**\n      * Check for standard transaction types\n      * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n+     * @param[out] reason      If return is false, contains the first non-standard input's reason for being judged non-standard\n+     * @param[out] debug       If return is false, contains additional debug info related to the invalid input, including its index\n      * @return True if all inputs (scriptSigs) use only standard transaction forms\n      */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason, std::string& debug);\n     /**\n      * Check if the transaction is over standard P2WSH resources limit:\n      * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements"
      },
      {
        "sha": "54e532d85fa6a042478bdce77291cf48438a6dc9",
        "filename": "src/test/fuzz/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7758133557124a35bd62926e23f6803f36aa5cb7/src/test/fuzz/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7758133557124a35bd62926e23f6803f36aa5cb7/src/test/fuzz/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/transaction.cpp?ref=7758133557124a35bd62926e23f6803f36aa5cb7",
        "patch": "@@ -95,7 +95,8 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n \n     CCoinsView coins_view;\n     const CCoinsViewCache coins_view_cache(&coins_view);\n-    (void)AreInputsStandard(tx, coins_view_cache);\n+    string debug;\n+    (void)AreInputsStandard(tx, coins_view_cache, reason, debug);\n     (void)IsWitnessStandard(tx, coins_view_cache);\n \n     UniValue u(UniValue::VOBJ);"
      },
      {
        "sha": "b7bd1f3a74b826aaa72d47dc20f6a8cd1ff06ae2",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 5,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7758133557124a35bd62926e23f6803f36aa5cb7/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7758133557124a35bd62926e23f6803f36aa5cb7/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=7758133557124a35bd62926e23f6803f36aa5cb7",
        "patch": "@@ -278,7 +278,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         keys.push_back(key[i].GetPubKey());\n \n     CMutableTransaction txFrom;\n-    txFrom.vout.resize(7);\n+    txFrom.vout.resize(9);\n \n     // First three are standard:\n     CScript pay1 = GetScriptForDestination(PKHash(key[0].GetPubKey()));\n@@ -320,7 +320,18 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     CScript twentySigops; twentySigops << OP_CHECKMULTISIG;\n     BOOST_CHECK(keystore.AddCScript(twentySigops));\n     txFrom.vout[6].scriptPubKey = GetScriptForDestination(ScriptHash(twentySigops));\n-    txFrom.vout[6].nValue = 6000;\n+    txFrom.vout[6].nValue = 4000;\n+\n+    // vout[7] is non-standard because it lacks sigops, therefore failing Solver\n+    CScript no_sigops;\n+    txFrom.vout[7].scriptPubKey = no_sigops;\n+    txFrom.vout[7].nValue = 1000;\n+\n+    // vout[8] is non-standard because it contains OP_RETURN in its scriptSig, therefore\n+    // failing EvalScript. Note the prevout scriptPubKey needs to be a valid TX_SCRIPTHASH\n+    // script to reach this test, hence the use of fifteenSigops.\n+    txFrom.vout[8].scriptPubKey = GetScriptForDestination(ScriptHash(fifteenSigops));\n+    txFrom.vout[8].nValue = 1000;\n \n     AddCoins(coins, CTransaction(txFrom), 0);\n \n@@ -343,7 +354,8 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txTo.vin[3].scriptSig << OP_11 << OP_11 << std::vector<unsigned char>(oneAndTwo.begin(), oneAndTwo.end());\n     txTo.vin[4].scriptSig << std::vector<unsigned char>(fifteenSigops.begin(), fifteenSigops.end());\n \n-    BOOST_CHECK(::AreInputsStandard(CTransaction(txTo), coins));\n+    std::string reason, debug;\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(txTo), coins, reason, debug));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txTo), coins), 22U);\n \n@@ -356,7 +368,11 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd1.vin[0].scriptSig << std::vector<unsigned char>(sixteenSigops.begin(), sixteenSigops.end());\n \n-    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd1), coins));\n+    std::vector<std::vector<unsigned char>> vSolutions;\n+    BOOST_CHECK_EQUAL(Solver(txFrom.vout[5].scriptPubKey, vSolutions), TX_SCRIPTHASH);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd1), coins, reason, debug));\n+    BOOST_CHECK_EQUAL(reason, \"bad-txns-input-scriptcheck-sigops\");\n+    BOOST_CHECK_EQUAL(debug, \"input 0: 16 > 15\");\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txToNonStd1), coins), 16U);\n \n     CMutableTransaction txToNonStd2;\n@@ -368,8 +384,47 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd2.vin[0].scriptSig << std::vector<unsigned char>(twentySigops.begin(), twentySigops.end());\n \n-    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd2), coins));\n+    BOOST_CHECK_EQUAL(Solver(txFrom.vout[6].scriptPubKey, vSolutions), TX_SCRIPTHASH);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd2), coins, reason, debug));\n+    BOOST_CHECK_EQUAL(reason, \"bad-txns-input-scriptcheck-sigops\");\n+    BOOST_CHECK_EQUAL(debug, \"input 0: 20 > 15\");\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txToNonStd2), coins), 20U);\n+\n+    CMutableTransaction txToNonStd3;\n+    txToNonStd3.vout.resize(1);\n+    txToNonStd3.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key[1].GetPubKey()));\n+    txToNonStd3.vout[0].nValue = 1000;\n+    txToNonStd3.vin.resize(1);\n+    txToNonStd3.vin[0].prevout.n = 7;\n+    txToNonStd3.vin[0].prevout.hash = txFrom.GetHash();\n+    txToNonStd3.vin[0].scriptSig << std::vector<unsigned char>(no_sigops.begin(), no_sigops.end());\n+\n+    BOOST_CHECK_EQUAL(Solver(txFrom.vout[7].scriptPubKey, vSolutions), TX_NONSTANDARD);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd3), coins, reason, debug));\n+    BOOST_CHECK_EQUAL(reason, \"bad-txns-input-script-nonstandard\");\n+    BOOST_CHECK_EQUAL(debug, \"input 0\");\n+\n+    static const unsigned char op_return[] = { OP_RETURN }; // SCRIPT_ERR_OP_RETURN\n+\n+    CMutableTransaction txToNonStd4;\n+    txToNonStd4.vout.resize(1);\n+    txToNonStd4.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key[1].GetPubKey()));\n+    txToNonStd4.vout[0].nValue = 1000;\n+    txToNonStd4.vin.resize(1);\n+    txToNonStd4.vin[0].prevout.n = 8;\n+    txToNonStd4.vin[0].prevout.hash = txFrom.GetHash();\n+    txToNonStd4.vin[0].scriptSig = CScript(op_return, op_return + sizeof(op_return));\n+\n+    // out args for EvalScript\n+    std::vector<std::vector<unsigned char>> stack;\n+    ScriptError serror;\n+\n+    BOOST_CHECK_EQUAL(Solver(txFrom.vout[8].scriptPubKey, vSolutions), TX_SCRIPTHASH);\n+    BOOST_CHECK(!EvalScript(stack, txToNonStd4.vin[0].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SigVersion::BASE, &serror));\n+    BOOST_CHECK_EQUAL(serror, SCRIPT_ERR_OP_RETURN);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd4), coins, reason, debug));\n+    BOOST_CHECK_EQUAL(reason, \"bad-txns-input-scriptsig-failure\");\n+    BOOST_CHECK_EQUAL(debug, \"input 0: OP_RETURN was encountered\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "07953786914da5091b196c710582f9568e6009ae",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7758133557124a35bd62926e23f6803f36aa5cb7/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7758133557124a35bd62926e23f6803f36aa5cb7/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=7758133557124a35bd62926e23f6803f36aa5cb7",
        "patch": "@@ -1022,6 +1022,16 @@ BOOST_AUTO_TEST_CASE(script_cltv_truncated)\n     BOOST_CHECK_EQUAL(err, SCRIPT_ERR_INVALID_STACK_OPERATION);\n }\n \n+BOOST_AUTO_TEST_CASE(script_EvalScript_error)\n+{\n+    static const unsigned char op_return[] = { OP_RETURN }; // SCRIPT_ERR_OP_RETURN\n+\n+    ScriptError err;\n+    std::vector<std::vector<unsigned char>> op_return_stack;\n+    BOOST_CHECK(!EvalScript(op_return_stack, CScript(op_return, op_return + sizeof(op_return)), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SigVersion::BASE, &err));\n+    BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OP_RETURN, ScriptErrorString(err));\n+}\n+\n static CScript\n sign_multisig(const CScript& scriptPubKey, const std::vector<CKey>& keys, const CTransaction& transaction)\n {"
      },
      {
        "sha": "da7cd271732fc95df972fa64a2e445aee288edc7",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7758133557124a35bd62926e23f6803f36aa5cb7/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7758133557124a35bd62926e23f6803f36aa5cb7/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=7758133557124a35bd62926e23f6803f36aa5cb7",
        "patch": "@@ -304,7 +304,8 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].nValue = 90*CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n-    BOOST_CHECK(AreInputsStandard(CTransaction(t1), coins));\n+    std::string reason, debug;\n+    BOOST_CHECK(AreInputsStandard(CTransaction(t1), coins, reason, debug));\n }\n \n static void CreateCreditAndSpend(const FillableSigningProvider& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)"
      },
      {
        "sha": "48f5d1138bea6a014db48a31d924842b928118a1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7758133557124a35bd62926e23f6803f36aa5cb7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7758133557124a35bd62926e23f6803f36aa5cb7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7758133557124a35bd62926e23f6803f36aa5cb7",
        "patch": "@@ -684,8 +684,10 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n-    if (fRequireStandard && !AreInputsStandard(tx, m_view))\n-        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n+    std::string debug;\n+    if (fRequireStandard && !AreInputsStandard(tx, m_view, reason, debug)) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, reason, debug);\n+    }\n \n     // Check for non-standard witness in P2WSH\n     if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, m_view))"
      }
    ]
  }
]