[
  {
    "sha": "dbe2d8b17e36c0a6f31f5329360a0de29aa08a00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmUyZDhiMTdlMzZjMGE2ZjMxZjUzMjkzNjBhMGRlMjlhYTA4YTAw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-04T17:11:45Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-04T17:11:45Z"
      },
      "message": "[WIP] Make arguments reconfigurable at runtime via RPC",
      "tree": {
        "sha": "429de9bf4ee3e0e8fdaa72a172af5b84f7e0ae06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/429de9bf4ee3e0e8fdaa72a172af5b84f7e0ae06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45d13abf4ea1170c49320ef3f5112edf3cf8ef6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d13abf4ea1170c49320ef3f5112edf3cf8ef6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45d13abf4ea1170c49320ef3f5112edf3cf8ef6d"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 74,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b77bd68236b4348ed5a86770f7524a59c346fae7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dbe2d8b17e36c0a6f31f5329360a0de29aa08a00",
        "patch": "@@ -750,10 +750,10 @@ void InitParameterInteraction()\n \n void InitLogging()\n {\n-    fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n-    fLogTimestamps = GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n-    fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n-    fLogIPs = GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n+    RegisterArg(fPrintToConsole, \"printtoconsole\", false);\n+    RegisterArg(fLogTimestamps, \"logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n+    RegisterArg(fLogTimeMicros, \"logtimemicros\", DEFAULT_LOGTIMEMICROS);\n+    RegisterArg(fLogIPs, \"logips\", DEFAULT_LOGIPS);\n \n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n@@ -976,17 +976,17 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n+    RegisterArg(bSpendZeroConfChange, \"spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    RegisterArg(fSendFreeTransactions, \"sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n \n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n \n-    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n-    fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n+    RegisterArg(fIsBareMultisigStd, \"permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n+    RegisterArg(fAcceptDatacarrier, \"datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n-    fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);\n+    RegisterArg(fAlerts, \"alerts\", DEFAULT_ALERTS);\n \n     // Option to startup with mocktime set (used for regression testing):\n     SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op"
      },
      {
        "sha": "63b27a7dd0734ef84e3dfe6c77ff974c2aa05bb8",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=dbe2d8b17e36c0a6f31f5329360a0de29aa08a00",
        "patch": "@@ -107,6 +107,35 @@ UniValue getinfo(const UniValue& params, bool fHelp)\n     return obj;\n }\n \n+UniValue setarg(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"setarg \\\"argumentname\\\" newvalue\\n\"\n+            \"Changes arguments at runtime. Not all arguments are supported.\\n\"\n+        );\n+\n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n+\n+    if (params[0].type() != UniValue::VSTR) {\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Argument name must be a String\");\n+    }\n+    RegisteredArgsType::iterator it = RegisteredArgs.find(params[0].get_str());\n+    if (it == RegisteredArgs.end()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMS, \"Argument unknown or cannot be changed at runtime\");\n+    }\n+    if (it->second.type() == typeid(bool)) {\n+        it->second.assign(params[1].get_bool());\n+    } else {\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Argument type is not supported\");\n+    }\n+    return NullUniValue;\n+}\n+\n #ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {"
      },
      {
        "sha": "427af76876c59ea8664dc72fa93754319c2548be",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=dbe2d8b17e36c0a6f31f5329360a0de29aa08a00",
        "patch": "@@ -258,6 +258,7 @@ static const CRPCCommand vRPCCommands[] =\n     /* Overall control/query calls */\n     { \"control\",            \"getinfo\",                &getinfo,                true  }, /* uses wallet if enabled */\n     { \"control\",            \"help\",                   &help,                   true  },\n+    { \"control\",            \"setarg\",                 &setarg,                 true  },\n     { \"control\",            \"stop\",                   &stop,                   true  },\n \n     /* P2P networking */"
      },
      {
        "sha": "f6ef5fd3d9d14e0ace60da3a654412bd2ce17730",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=dbe2d8b17e36c0a6f31f5329360a0de29aa08a00",
        "patch": "@@ -229,6 +229,7 @@ extern UniValue walletlock(const UniValue& params, bool fHelp);\n extern UniValue encryptwallet(const UniValue& params, bool fHelp);\n extern UniValue validateaddress(const UniValue& params, bool fHelp);\n extern UniValue getinfo(const UniValue& params, bool fHelp);\n+extern UniValue setarg(const UniValue& params, bool fHelp);\n extern UniValue getwalletinfo(const UniValue& params, bool fHelp);\n extern UniValue getblockchaininfo(const UniValue& params, bool fHelp);\n extern UniValue getnetworkinfo(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "30a5a6ccaa8247ab3fd4cd898609657a58bcbf9a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=dbe2d8b17e36c0a6f31f5329360a0de29aa08a00",
        "patch": "@@ -414,6 +414,14 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n         return SoftSetArg(strArg, std::string(\"0\"));\n }\n \n+RegisteredArgsType RegisteredArgs;\n+\n+void RegisterArg(bool& fArgVar, const std::string strArgName, const bool fDefaultValue)\n+{\n+    RegisteredArgs.insert(RegisteredArgsType::value_type(strArgName, CVarInfo(fArgVar)));\n+    fArgVar = GetBoolArg(\"-\" + strArgName, fDefaultValue);\n+}\n+\n static const int screenWidth = 79;\n static const int optIndent = 2;\n static const int msgIndent = 7;"
      },
      {
        "sha": "bb8a20d9357531c4a37c1a05dd537ac69dec27fd",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbe2d8b17e36c0a6f31f5329360a0de29aa08a00/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=dbe2d8b17e36c0a6f31f5329360a0de29aa08a00",
        "patch": "@@ -192,6 +192,32 @@ bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n  */\n bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n+class CVarInfo {\n+private:\n+    const std::type_info *ptype;\n+    void *pVar;\n+\n+public:\n+    template <typename T> CVarInfo(T& var) : ptype(&typeid(var)), pVar(&var) { }\n+    const std::type_info& type() { return *ptype; }\n+    template <typename T> void assign(const T newvalue) {\n+        assert(typeid(newvalue) == *ptype);\n+        *(T*)pVar = newvalue;\n+    }\n+};\n+\n+typedef std::map<std::string, CVarInfo> RegisteredArgsType;\n+extern RegisteredArgsType RegisteredArgs;\n+\n+/**\n+ * Initialise a boolean argument\n+ *\n+ * @param fArgVar Variable that will hold the value for this argument for the duration of the program\n+ * @param strArgName Argument to set (e.g. \"foo\")\n+ * @param fDefaultValue Default value if not set (e.g. false)\n+ */\n+void RegisterArg(bool& fArgVar, const std::string strArgName, const bool fDefaultValue);\n+\n /**\n  * Format a string to be used as group of options in help messages\n  *"
      }
    ]
  }
]