[
  {
    "sha": "90ca5e90b818c8371ce07643cae664bd80c7fddc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGNhNWU5MGI4MThjODM3MWNlMDc2NDNjYWU2NjRiZDgwYzdmZGRj",
    "commit": {
      "author": {
        "name": "Jon Layton",
        "email": "me@jonl.io",
        "date": "2019-09-17T23:21:59Z"
      },
      "committer": {
        "name": "Jon Layton",
        "email": "me@jonl.io",
        "date": "2019-09-24T05:32:23Z"
      },
      "message": "test: Add .markdownlint.yml rules for *.md",
      "tree": {
        "sha": "cdd165f54e1d2448191186cc196765aa61a0bc04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdd165f54e1d2448191186cc196765aa61a0bc04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90ca5e90b818c8371ce07643cae664bd80c7fddc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ca5e90b818c8371ce07643cae664bd80c7fddc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90ca5e90b818c8371ce07643cae664bd80c7fddc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ca5e90b818c8371ce07643cae664bd80c7fddc/comments",
    "author": {
      "login": "ch4ot1c",
      "id": 2287825,
      "node_id": "MDQ6VXNlcjIyODc4MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2287825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch4ot1c",
      "html_url": "https://github.com/ch4ot1c",
      "followers_url": "https://api.github.com/users/ch4ot1c/followers",
      "following_url": "https://api.github.com/users/ch4ot1c/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch4ot1c/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch4ot1c/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch4ot1c/subscriptions",
      "organizations_url": "https://api.github.com/users/ch4ot1c/orgs",
      "repos_url": "https://api.github.com/users/ch4ot1c/repos",
      "events_url": "https://api.github.com/users/ch4ot1c/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch4ot1c/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ch4ot1c",
      "id": 2287825,
      "node_id": "MDQ6VXNlcjIyODc4MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2287825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch4ot1c",
      "html_url": "https://github.com/ch4ot1c",
      "followers_url": "https://api.github.com/users/ch4ot1c/followers",
      "following_url": "https://api.github.com/users/ch4ot1c/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch4ot1c/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch4ot1c/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch4ot1c/subscriptions",
      "organizations_url": "https://api.github.com/users/ch4ot1c/orgs",
      "repos_url": "https://api.github.com/users/ch4ot1c/repos",
      "events_url": "https://api.github.com/users/ch4ot1c/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch4ot1c/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ce829888861a6dc6a29da669584ada961d965fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ce829888861a6dc6a29da669584ada961d965fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ce829888861a6dc6a29da669584ada961d965fa"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 44,
      "deletions": 0
    },
    "files": [
      {
        "sha": "50fbdf4c7bf676773b58f47cfb1a566b51a4d6c5",
        "filename": ".markdownlint.yml",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90ca5e90b818c8371ce07643cae664bd80c7fddc/.markdownlint.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90ca5e90b818c8371ce07643cae664bd80c7fddc/.markdownlint.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.markdownlint.yml?ref=90ca5e90b818c8371ce07643cae664bd80c7fddc",
        "patch": "@@ -0,0 +1,44 @@\n+# github.com/DavidAnson/markdownlint/blob/master/doc/Rules.md#rules\n+---\n+MD001: true\n+MD003: false\n+MD004:\n+  style: consistent\n+MD005: true\n+MD006: true\n+MD007: false\n+MD009: true\n+MD010: true\n+MD011: true\n+MD012: true\n+MD013: false\n+MD014: true\n+MD018: true\n+MD019: true\n+MD022: 0\n+MD023: true\n+MD024: false\n+MD025: true\n+MD026: false\n+MD027: true\n+MD028: true\n+MD029:\n+  style: ordered\n+MD030: true\n+MD031: false\n+MD032: false\n+MD033: false\n+MD034: false\n+MD035:\n+  style: \"---\"\n+MD036: true\n+MD037: true\n+MD038: true\n+MD039: true\n+MD040: false\n+MD041: true\n+MD042: true\n+MD045: true\n+MD046: false\n+MD047: true\n+"
      }
    ]
  },
  {
    "sha": "147dfb4294ea3d34114625b406f2777891ae3f52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDdkZmI0Mjk0ZWEzZDM0MTE0NjI1YjQwNmYyNzc3ODkxYWUzZjUy",
    "commit": {
      "author": {
        "name": "Jon Layton",
        "email": "me@jonl.io",
        "date": "2019-09-17T23:03:34Z"
      },
      "committer": {
        "name": "Jon Layton",
        "email": "me@jonl.io",
        "date": "2019-09-24T05:46:06Z"
      },
      "message": "doc: Format *.md according to .markdownlint.yml rules",
      "tree": {
        "sha": "7d15c438949cbfc9f18431bd4fbcbf6747e59440",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d15c438949cbfc9f18431bd4fbcbf6747e59440"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/147dfb4294ea3d34114625b406f2777891ae3f52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/147dfb4294ea3d34114625b406f2777891ae3f52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/147dfb4294ea3d34114625b406f2777891ae3f52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/147dfb4294ea3d34114625b406f2777891ae3f52/comments",
    "author": {
      "login": "ch4ot1c",
      "id": 2287825,
      "node_id": "MDQ6VXNlcjIyODc4MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2287825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch4ot1c",
      "html_url": "https://github.com/ch4ot1c",
      "followers_url": "https://api.github.com/users/ch4ot1c/followers",
      "following_url": "https://api.github.com/users/ch4ot1c/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch4ot1c/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch4ot1c/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch4ot1c/subscriptions",
      "organizations_url": "https://api.github.com/users/ch4ot1c/orgs",
      "repos_url": "https://api.github.com/users/ch4ot1c/repos",
      "events_url": "https://api.github.com/users/ch4ot1c/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch4ot1c/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ch4ot1c",
      "id": 2287825,
      "node_id": "MDQ6VXNlcjIyODc4MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2287825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch4ot1c",
      "html_url": "https://github.com/ch4ot1c",
      "followers_url": "https://api.github.com/users/ch4ot1c/followers",
      "following_url": "https://api.github.com/users/ch4ot1c/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch4ot1c/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch4ot1c/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch4ot1c/subscriptions",
      "organizations_url": "https://api.github.com/users/ch4ot1c/orgs",
      "repos_url": "https://api.github.com/users/ch4ot1c/repos",
      "events_url": "https://api.github.com/users/ch4ot1c/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch4ot1c/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90ca5e90b818c8371ce07643cae664bd80c7fddc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ca5e90b818c8371ce07643cae664bd80c7fddc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90ca5e90b818c8371ce07643cae664bd80c7fddc"
      }
    ],
    "stats": {
      "total": 906,
      "additions": 453,
      "deletions": 453
    },
    "files": [
      {
        "sha": "6c5e68ca150b24aaecabb71b902ea954104ee6bf",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 70,
        "deletions": 70,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -22,21 +22,20 @@ Communication Channels\n ----------------------\n \n Most communication about Bitcoin Core development happens on IRC, in the\n-#bitcoin-core-dev channel on Freenode. The easiest way to participate on IRC is\n+\\#bitcoin-core-dev channel on Freenode. The easiest way to participate on IRC is\n with the web client, [webchat.freenode.net](https://webchat.freenode.net/). Chat\n history logs can be found\n on [http://www.erisian.com.au/bitcoin-core-dev/](http://www.erisian.com.au/bitcoin-core-dev/)\n and [http://gnusha.org/bitcoin-core-dev/](http://gnusha.org/bitcoin-core-dev/).\n \n-Discussion about code base improvements happens in GitHub issues and on pull\n+Discussion about codebase improvements happens in GitHub issues and on pull\n requests.\n \n The developer\n [mailing list](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev)\n should be used to discuss complicated or controversial changes before working on\n a patch set.\n \n-\n Contributor Workflow\n --------------------\n \n@@ -46,9 +45,9 @@ facilitates social contribution, easy testing and peer review.\n \n To contribute a patch, the workflow is as follows:\n \n-  1. Fork repository\n-  1. Create topic branch\n-  1. Commit patches\n+1. Fork repository\n+2. Create topic branch\n+3. Commit patches\n \n The project coding conventions in the [developer notes](doc/developer-notes.md)\n must be adhered to.\n@@ -73,31 +72,34 @@ Commit messages should never contain any `@` mentions.\n Please refer to the [Git manual](https://git-scm.com/doc) for more information\n about Git.\n \n-  - Push changes to your fork\n-  - Create pull request\n+- Push changes to your fork\n+- Create pull request\n \n The title of the pull request should be prefixed by the component or area that\n-the pull request affects. Valid areas as:\n-\n-  - `consensus` for changes to consensus critical code\n-  - `doc` for changes to the documentation\n-  - `qt` or `gui` for changes to bitcoin-qt\n-  - `log` for changes to log messages\n-  - `mining` for changes to the mining code\n-  - `net` or `p2p` for changes to the peer-to-peer network code\n-  - `refactor` for structural changes that do not change behavior\n-  - `rpc`, `rest` or `zmq` for changes to the RPC, REST or ZMQ APIs\n-  - `script` for changes to the scripts and tools\n-  - `test` for changes to the bitcoin unit tests or QA tests\n-  - `util` or `lib` for changes to the utils or libraries\n-  - `wallet` for changes to the wallet code\n-  - `build` for changes to the GNU Autotools, reproducible builds or CI code\n+the pull request affects. Valid areas are:\n+\n+- `consensus` for changes to consensus critical code\n+- `doc` for changes to the documentation\n+- `qt` or `gui` for changes to bitcoin-qt\n+- `log` for changes to log messages\n+- `mining` for changes to the mining code\n+- `net` or `p2p` for changes to the peer-to-peer network code\n+- `refactor` for structural changes that do not change behavior\n+- `rpc`, `rest` or `zmq` for changes to the RPC, REST or ZMQ APIs\n+- `script` for changes to the scripts and tools\n+- `test` for changes to the bitcoin unit tests or QA tests\n+- `util` or `lib` for changes to the utils or libraries\n+- `wallet` for changes to the wallet code\n+- `build` for changes to the GNU Autotools, reproducible builds or CI code\n \n Examples:\n \n     consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n+\n     net: Automatically create hidden service, listen on Tor\n+\n     qt: Add feed bump button\n+\n     log: Fix typo in log message\n \n Note that translations should not be submitted as pull requests, please see\n@@ -149,7 +151,6 @@ the respective change set.\n The length of time required for peer review is unpredictable and will vary from\n pull request to pull request.\n \n-\n Pull Request Philosophy\n -----------------------\n \n@@ -158,7 +159,6 @@ feature, fix a bug, or refactor code; but not a mixture. Please also avoid super\n pull requests which attempt to do too much, are overly large, or overly complex\n as this makes review difficult.\n \n-\n ### Features\n \n When adding a new feature, thought must be given to the long term technical debt\n@@ -167,7 +167,6 @@ feature that will require maintenance, please consider if you are willing to\n maintain it (including bug fixing). If features get orphaned with no maintainer\n in the future, they may be removed by the Repository Maintainer.\n \n-\n ### Refactoring\n \n Refactoring is a necessary part of any software project's evolution. The\n@@ -190,7 +189,6 @@ Trivial pull requests or pull requests that refactor the code with no clear\n benefits may be immediately closed by the maintainers to reduce unnecessary\n workload on reviewing.\n \n-\n \"Decision Making\" Process\n -------------------------\n \n@@ -207,15 +205,15 @@ judge the general consensus of contributors.\n \n In general, all pull requests must:\n \n-  - Have a clear use case, fix a demonstrable bug or serve the greater good of\n-    the project (for example refactoring for modularisation);\n-  - Be well peer reviewed;\n-  - Have unit tests and functional tests where appropriate;\n-  - Follow code style guidelines ([C++](doc/developer-notes.md), [functional tests](test/functional/README.md));\n-  - Not break the existing test suite;\n-  - Where bugs are fixed, where possible, there should be unit tests\n-    demonstrating the bug and also proving the fix. This helps prevent regression.\n-  - Change relevant comments and documentation when behaviour of code changes.\n+- Have a clear use case, fix a demonstrable bug or serve the greater good of\n+  the project (for example refactoring for modularisation);\n+- Be well peer reviewed;\n+- Have unit tests and functional tests where appropriate;\n+- Follow code style guidelines ([C++](doc/developer-notes.md), [functional tests](test/functional/README.md));\n+- Not break the existing test suite;\n+- Where bugs are fixed, where possible, there should be unit tests\n+  demonstrating the bug and also proving the fix. This helps prevent regression.\n+- Change relevant comments and documentation when behaviour of code changes.\n \n Patches that change Bitcoin consensus rules are considerably more involved than\n normal because they affect the entire ecosystem and so must be preceded by\n@@ -224,7 +222,6 @@ be different, one should be prepared to expend more time and effort than for\n other kinds of patches because of increased peer review and consensus building\n requirements.\n \n-\n ### Peer Review\n \n Anyone may participate in peer review which is expressed by comments in the pull\n@@ -236,10 +233,11 @@ spread out over GitHub, mailing list and IRC discussions).\n \n #### Conceptual Review\n \n-A review can be a conceptual review, where the reviewer leaves a comment\n- * `Concept (N)ACK`, meaning \"I do (not) agree in the general goal of this pull\n+A review can be a conceptual review, where the reviewer leaves a comment:\n+\n+- `Concept (N)ACK`, meaning \"I do (not) agree in the general goal of this pull\n    request\",\n- * `Approach (N)ACK`, meaning `Concept ACK`, but \"I do (not) agree with the\n+- `Approach (N)ACK`, meaning `Concept ACK`, but \"I do (not) agree with the\n    approach of this change\".\n \n A `NACK` needs to include a rationale why the change is not worthwhile.\n@@ -253,13 +251,13 @@ topic branch. The review is followed by a description of how the reviewer did\n the review. The following\n language is used within pull-request comments:\n \n-  - \"I have tested the code\", involving\n-    change-specific manual testing in addition to running the unit and functional\n-    tests, and in case it is not obvious how the manual testing was done, it should\n-    be described;\n-  - \"I have not tested the code, but I have reviewed it and it looks\n-    OK, I agree it can be merged\";\n-  - Nit refers to trivial, often non-blocking issues.\n+- \"I have tested the code\", involving\n+  change-specific manual testing in addition to running the unit and functional\n+  tests, and in case it is not obvious how the manual testing was done, it should\n+  be described;\n+- \"I have not tested the code, but I have reviewed it and it looks\n+  OK, I agree it can be merged\";\n+- Nit refers to trivial, often non-blocking issues.\n \n Project maintainers reserve the right to weigh the opinions of peer reviewers\n using common sense judgement and also may weight based on meritocracy: Those\n@@ -285,29 +283,31 @@ that you've been waiting for a pull request to be given attention for several\n months, there may be a number of reasons for this, some of which you can do something\n about:\n \n-  - It may be because of a feature freeze due to an upcoming release. During this time,\n-    only bug fixes are taken into consideration. If your pull request is a new feature,\n-    it will not be prioritized until the release is over. Wait for release.\n-  - It may be because the changes you are suggesting do not appeal to people. Rather than\n-    nits and critique, which require effort and means they care enough to spend time on your\n-    contribution, thundering silence is a good sign of widespread (mild) dislike of a given change\n-    (because people don't assume *others* won't actually like the proposal). Don't take\n-    that personally, though! Instead, take another critical look at what you are suggesting\n-    and see if it: changes too much, is too broad, doesn't adhere to the\n-    [developer notes](doc/developer-notes.md), is dangerous or insecure, is messily written, etc.\n-    Identify and address any of the issues you find. Then ask e.g. on IRC if someone could give\n-    their opinion on the concept itself.\n-  - It may be because your code is too complex for all but a few people. And those people\n-    may not have realized your pull request even exists. A great way to find people who\n-    are qualified and care about the code you are touching is the\n-    [Git Blame feature](https://help.github.com/articles/tracing-changes-in-a-file/). Simply\n-    find the person touching the code you are touching before you and see if you can find\n-    them and give them a nudge. Don't be incessant about the nudging though.\n-  - Finally, if all else fails, ask on IRC or elsewhere for someone to give your pull request\n-    a look. If you think you've been waiting an unreasonably long amount of time (month+) for\n-    no particular reason (few lines changed, etc), this is totally fine. Try to return the favor\n-    when someone else is asking for feedback on their code, and universe balances out.\n-\n+- It may be because of a feature freeze due to an upcoming release. During this time,\n+  only bug fixes are taken into consideration. If your pull request is a new feature,\n+  it will not be prioritized until the release is over. Wait for release.\n+\n+- It may be because the changes you are suggesting do not appeal to people. Rather than\n+  nits and critique, which require effort and means they care enough to spend time on your\n+  contribution, thundering silence is a good sign of widespread (mild) dislike of a given change\n+  (because people don't assume *others* won't actually like the proposal). Don't take\n+  that personally, though! Instead, take another critical look at what you are suggesting\n+  and see if it: changes too much, is too broad, doesn't adhere to the\n+  [developer notes](doc/developer-notes.md), is dangerous or insecure, is messily written, etc.\n+  Identify and address any of the issues you find. Then ask e.g. on IRC if someone could give\n+  their opinion on the concept itself.\n+\n+- It may be because your code is too complex for all but a few people. And those people\n+  may not have realized your pull request even exists. A great way to find people who\n+  are qualified and care about the code you are touching is the\n+  [Git Blame feature](https://help.github.com/articles/tracing-changes-in-a-file/). Simply\n+  find the person touching the code you are touching before you and see if you can find\n+  them and give them a nudge. Don't be incessant about the nudging though.\n+\n+- Finally, if all else fails, ask on IRC or elsewhere for someone to give your pull request\n+  a look. If you think you've been waiting an unreasonably long amount of time (month+) for\n+  no particular reason (few lines changed, etc), this is totally fine. Try to return the favor\n+  when someone else is asking for feedback on their code, and universe balances out.\n \n Release Policy\n --------------"
      },
      {
        "sha": "9e13763bd844693c257c37aef33e056b3bfe73fc",
        "filename": "ci/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/ci/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/ci/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,12 +1,12 @@\n-## ci scripts\n+# CI Scripts\n \n This directory contains scripts for each build step in each build stage.\n \n Currently three stages `lint`, `extended_lint` and `test` are defined. Each stage has its own lifecycle, similar to the\n [Travis CI lifecycle](https://docs.travis-ci.com/user/job-lifecycle#the-job-lifecycle). Every script in here is named\n and numbered according to which stage and lifecycle step it belongs to.\n \n-### Running a stage locally\n+## Running a stage locally\n \n To allow for a wide range of tested environments, but also ensure reproducibility to some extent, the test stage\n requires `docker` to be installed. To install all requirements on Ubuntu, run"
      },
      {
        "sha": "9dbfbee3ae3b724c2130a1f70417901cd3196fba",
        "filename": "ci/retry/README.md",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/ci/retry/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/ci/retry/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/retry/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,9 +1,8 @@\n-retry - The command line retry tool\n-------------------------------------------\n+# retry - The command line retry tool\n \n Retry any shell command with exponential backoff or constant delay.\n \n-### Instructions\n+## Instructions\n \n Install:\n \n@@ -21,7 +20,7 @@ brew install retry\n ```\n Not popular enough for homebrew-core. Please star this project to help.\n \n-### Usage\n+## Usage\n \n Help:\n \n@@ -32,8 +31,8 @@ Help:\n         -v, --verbose                    Verbose output\n         -t, --tries=#                    Set max retries: Default 10\n         -s, --sleep=secs                 Constant sleep amount (seconds)\n-        -m, --min=secs                   Exponenetial Backoff: minimum sleep amount (seconds): Default 0.3\n-        -x, --max=secs                   Exponenetial Backoff: maximum sleep amount (seconds): Default 60\n+        -m, --min=secs                   Exponential Backoff: minimum sleep amount (seconds): Default 0.3\n+        -x, --max=secs                   Exponential Backoff: maximum sleep amount (seconds): Default 60\n         -f, --fail=\"script +cmds\"        Fail Script: run in case of final failure\n \n ### Examples"
      },
      {
        "sha": "64862af2ac5f8b7de397facadea9d25d8236e3d0",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,48 +1,48 @@\n Repository Tools\n----------------------\n+================\n \n-### [Developer tools](/contrib/devtools) ###\n+## [Developer tools](/contrib/devtools)\n Specific tools for developers working on this repository.\n Additional tools, including the `github-merge.py` script, are available in the [maintainer-tools](https://github.com/bitcoin-core/bitcoin-maintainer-tools) repository.\n \n-### [Verify-Commits](/contrib/verify-commits) ###\n+## [verify-commits](/contrib/verify-commits)\n Tool to verify that every merge commit was signed by a developer using the `github-merge.py` script.\n \n-### [Linearize](/contrib/linearize) ###\n+## [linearize](/contrib/linearize)\n Construct a linear, no-fork, best version of the blockchain.\n \n-### [Qos](/contrib/qos) ###\n+## [qos](/contrib/qos)\n \n A Linux bash script that will set up traffic control (tc) to limit the outgoing bandwidth for connections to the Bitcoin network. This means one can have an always-on bitcoind instance running, and another local bitcoind/bitcoin-qt instance which connects to this node and receives blocks from it.\n \n-### [Seeds](/contrib/seeds) ###\n+## [seeds](/contrib/seeds)\n Utility to generate the pnSeed[] array that is compiled into the client.\n \n Build Tools and Keys\n ---------------------\n \n-### Packaging ###\n+### Packaging\n The [Debian](/contrib/debian) subfolder contains the copyright file.\n \n-All other packaging related files can be found in the [bitcoin-core/packaging](https://github.com/bitcoin-core/packaging) repository.\n+All other packaging-related files can be found in the [bitcoin-core/packaging](https://github.com/bitcoin-core/packaging) repository.\n+\n+### [gitian-build.py](/contrib/gitian-build.py)\n+Script for running full Gitian builds.\n \n-### [Gitian-descriptors](/contrib/gitian-descriptors) ###\n+### [gitian-descriptors](/contrib/gitian-descriptors)\n Files used during the gitian build process. For more information about gitian, see the [the Bitcoin Core documentation repository](https://github.com/bitcoin-core/docs).\n \n-### [Gitian-keys](/contrib/gitian-keys)\n+### [gitian-keys](/contrib/gitian-keys)\n PGP keys used for signing Bitcoin Core [Gitian release](/doc/release-process.md) results.\n \n-### [MacDeploy](/contrib/macdeploy) ###\n+### [macdeploy](/contrib/macdeploy)\n Scripts and notes for Mac builds.\n \n-### [Gitian-build](/contrib/gitian-build.py) ###\n-Script for running full Gitian builds.\n-\n Test and Verify Tools\n ---------------------\n \n-### [TestGen](/contrib/testgen) ###\n+### [TestGen](/contrib/testgen)\n Utilities to generate test vectors for the data-driven Bitcoin tests.\n \n-### [Verify Binaries](/contrib/verifybinaries) ###\n+### [Verify Binaries](/contrib/verifybinaries)\n This script attempts to download and verify the signature file SHA256SUMS.asc from bitcoin.org."
      },
      {
        "sha": "1fb5dce8c9d5e950edbfc58e8165cd32d8f9e931",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 22,
        "deletions": 26,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,43 +1,44 @@\n-Contents\n-========\n+# Devtools\n+\n This directory contains tools for developers working on this repository.\n \n-clang-format-diff.py\n-===================\n+## clang-format-diff.py\n \n A script to format unified git diffs according to [.clang-format](../../src/.clang-format).\n \n Requires `clang-format`, installed e.g. via `brew install clang-format` on macOS.\n \n For instance, to format the last commit with 0 lines of context,\n-the script should be called from the git root folder as follows.\n+the script should be called from the git root folder as follows:\n \n ```\n git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v\n ```\n \n-copyright\\_header.py\n-====================\n+## copyright\\_header.py\n \n Provides utilities for managing copyright headers of `The Bitcoin Core\n developers` in repository source files. It has three subcommands:\n \n ```\n-$ ./copyright_header.py report <base_directory> [verbose]\n-$ ./copyright_header.py update <base_directory>\n-$ ./copyright_header.py insert <file>\n+./copyright_header.py report <base_directory> [verbose]\n+```\n+```\n+./copyright_header.py update <base_directory>\n+```\n+```\n+./copyright_header.py insert <file>\n ```\n Running these subcommands without arguments displays a usage string.\n \n-copyright\\_header.py report \\<base\\_directory\\> [verbose]\n----------------------------------------------------------\n+### copyright\\_header.py report \\<base\\_directory\\> [verbose]\n \n Produces a report of all copyright header notices found inside the source files\n of a repository. Useful to quickly visualize the state of the headers.\n Specifying `verbose` will list the full filenames of files of each category.\n \n-copyright\\_header.py update \\<base\\_directory\\> [verbose]\n----------------------------------------------------------\n+### copyright\\_header.py update \\<base\\_directory\\> [verbose]\n+\n Updates all the copyright headers of `The Bitcoin Core developers` which were\n changed in a year more recent than is listed. For example:\n ```\n@@ -60,8 +61,8 @@ will be updated to:\n ```\n where the update is appropriate.\n \n-copyright\\_header.py insert \\<file\\>\n-------------------------------------\n+### copyright\\_header.py insert \\<file\\>\n+\n Inserts a copyright header for `The Bitcoin Core developers` at the top of the\n file in either Python or C++ style as determined by the file extension. If the\n file is a Python file and it has  `#!` starting the first line, the header is\n@@ -75,8 +76,7 @@ year rather than two hyphenated years.\n If the file already has a copyright for `The Bitcoin Core developers`, the\n script will exit.\n \n-gen-manpages.sh\n-===============\n+## gen-manpages.sh\n \n A small script to automatically create manpages in ../../doc/man by running the release binaries with the -help option.\n This requires help2man which can be found at: https://www.gnu.org/software/help2man/\n@@ -89,19 +89,16 @@ example:\n BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n ```\n \n-optimize-pngs.py\n-================\n+## optimize-pngs.py\n \n A script to optimize png files in the bitcoin\n repository (requires pngcrush).\n \n-security-check.py and test-security-check.py\n-============================================\n+## security-check.py and test-security-check.py\n \n Perform basic ELF security checks on a series of executables.\n \n-symbol-check.py\n-===============\n+## symbol-check.py\n \n A script to check that the (Linux) executables produced by gitian only contain\n allowed gcc, glibc and libstdc++ version symbols. This makes sure they are\n@@ -120,8 +117,7 @@ If there are 'unsupported' symbols, the return value will be 1 a list like this\n     .../64/test_bitcoin: symbol std::out_of_range::~out_of_range() from unsupported version GLIBCXX_3.4.15\n     .../64/test_bitcoin: symbol _ZNSt8__detail15_List_nod from unsupported version GLIBCXX_3.4.15\n \n-circular-dependencies.py\n-========================\n+## circular-dependencies.py\n \n Run this script from the root of the source tree (`src/`) to find circular dependencies in the source code.\n This looks only at which files include other files, treating the `.cpp` and `.h` file as one unit."
      },
      {
        "sha": "b4d49615251fb93b77a4f9495b8f4d796385f1eb",
        "filename": "contrib/gitian-keys/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/gitian-keys/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/gitian-keys/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,4 +1,4 @@\n-## PGP keys of Gitian builders and Developers\n+# PGP keys of Gitian builders and Developers\n \n The file `keys.txt` contains fingerprints of the public keys of Gitian builders\n and active developers."
      },
      {
        "sha": "13d91cdd3fd1cd54d52221759045ceb438770e13",
        "filename": "contrib/guix/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/guix/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/guix/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -113,39 +113,39 @@ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n \n #### Recognized environment variables\n \n-* _**HOSTS**_\n+- _**HOSTS**_\n \n   Override the space-separated list of platform triples for which to perform a\n   bootstrappable build. _(defaults to \"i686-linux-gnu x86\\_64-linux-gnu\n   arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu\")_\n \n   > Windows and OS X platform triplet support are WIP.\n \n-* _**SOURCES_PATH**_\n+- _**SOURCES_PATH**_\n \n   Set the depends tree download cache for sources. This is passed through to the\n   depends tree. Setting this to the same directory across multiple builds of the\n   depends tree can eliminate unnecessary redownloading of package sources.\n \n-* _**MAX_JOBS**_\n+- _**MAX_JOBS**_\n \n   Override the maximum number of jobs to run simultaneously, you might want to\n   do so on a memory-limited machine. This may be passed to `make` as in `make\n   --jobs=\"$MAX_JOBS\"` or `xargs` as in `xargs -P\"$MAX_JOBS\"`. _(defaults to the\n   value of `nproc` outside the container)_\n \n-* _**SOURCE_DATE_EPOCH**_\n+- _**SOURCE_DATE_EPOCH**_\n \n   Override the reference UNIX timestamp used for bit-for-bit reproducibility,\n   the variable name conforms to [standard][r12e/source-date-epoch]. _(defaults\n   to the output of `$(git log --format=%at -1)`)_\n \n-* _**V**_\n+- _**V**_\n \n   If non-empty, will pass `V=1` to all `make` invocations, making `make` output\n   verbose.\n \n-* _**ADDITIONAL_GUIX_ENVIRONMENT_FLAGS**_\n+- _**ADDITIONAL_GUIX_ENVIRONMENT_FLAGS**_\n \n   Additional flags to be passed to `guix environment`. For a fully-bootstrapped\n   build, set this to `--bootstrap --no-substitutes` (refer to the [security"
      },
      {
        "sha": "bb78c67a2cd1f958e4d313df09ec6760ba731bfe",
        "filename": "contrib/init/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/init/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/init/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,3 +1,5 @@\n+# Init\n+\n Sample configuration files for:\n ```\n SystemD: bitcoind.service\n@@ -9,4 +11,4 @@ macOS:   org.bitcoin.bitcoind.plist\n ```\n have been made available to assist packagers in creating node packages here.\n \n-See doc/init.md for more information.\n+See [/doc/init.md](/doc/init.md) for more information."
      },
      {
        "sha": "fc6b8490e42887c8c44d875e4a75fdcd12ca3b8c",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -3,7 +3,7 @@ Construct a linear, no-fork, best version of the Bitcoin blockchain.\n \n ## Step 1: Download hash list\n \n-    $ ./linearize-hashes.py linearize.cfg > hashlist.txt\n+    ./linearize-hashes.py linearize.cfg > hashlist.txt\n \n Required configuration file settings for linearize-hashes:\n * RPC: `datadir` (Required if `rpcuser` and `rpcpassword` are not specified)\n@@ -24,7 +24,7 @@ JSON-RPC server. Running `bitcoind` or `bitcoin-qt -server` will be sufficient.\n \n ## Step 2: Copy local block data\n \n-    $ ./linearize-data.py linearize.cfg\n+    ./linearize-data.py linearize.cfg\n \n Required configuration file settings:\n * `output_file`: The file that will contain the final blockchain."
      },
      {
        "sha": "d01c3f773ddfc2211f9ad008859592ee276a06f1",
        "filename": "contrib/macdeploy/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/macdeploy/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/macdeploy/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,15 +1,14 @@\n-### MacDeploy ###\n+# MacDeploy\n \n For Snow Leopard (which uses [Python 2.6](http://www.python.org/download/releases/2.6/)), you will need the param_parser package:\n \n-\tsudo easy_install argparse\n+    sudo easy_install argparse\n \n This script should not be run manually, instead, after building as usual:\n \n-\tmake deploy\n+    make deploy\n \n During the process, the disk image window will pop up briefly where the fancy\n settings are applied. This is normal, please do not interfere.\n \n When finished, it will produce `Bitcoin-Core.dmg`.\n-"
      },
      {
        "sha": "c89f6c26dd5cc8bd56b3da8f2e3793547c0656e3",
        "filename": "contrib/qos/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/qos/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/qos/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,4 +1,4 @@\n-### QoS (Quality of service) ###\n+# QoS (Quality of Service)\n \n This is a Linux bash script that will set up tc to limit the outgoing bandwidth for connections to the Bitcoin network. It limits outbound TCP traffic with a source or destination port of 8333, but not if the destination IP is within a LAN.\n "
      },
      {
        "sha": "a7bfdb488e14e9daa4c0b761c47f77167c4584ab",
        "filename": "contrib/testgen/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/testgen/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/testgen/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,4 +1,4 @@\n-### TestGen ###\n+# TestGen\n \n Utilities to generate test vectors for the data-driven Bitcoin tests.\n "
      },
      {
        "sha": "b1a3472a5617cf3ff356a513670c7fd997e36574",
        "filename": "contrib/verify-commits/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/verify-commits/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/verify-commits/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,12 +1,11 @@\n Tooling for verification of PGP signed commits\n-----------------------------------------------\n+==============================================\n \n This is an incomplete work in progress, but currently includes a pre-push hook\n script (`pre-push-hook.sh`) for maintainers to ensure that their own commits\n are PGP signed (nearly always merge commits), as well as a Python 3 script to verify\n commits against a trusted keys list.\n \n-\n Using verify-commits.py safely\n ------------------------------\n "
      },
      {
        "sha": "a328bb157fdf98781f2ba51b25ae6ed28845db02",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,6 +1,6 @@\n-### Verify Binaries\n+# Verify Binaries\n \n-#### Preparation:\n+## Preparation:\n \n Make sure you obtain the proper release signing key and verify the fingerprint with several independent sources.\n \n@@ -11,15 +11,14 @@ pub   4096R/36C2E964 2015-06-24 [expires: YYYY-MM-DD]\n uid                  Wladimir J. van der Laan (Bitcoin Core binary release signing key) <laanwj@gmail.com>\n ```\n \n-#### Usage:\n+## Usage:\n \n This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n \n It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n \n The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n \n-\n ```sh\n ./verify.sh bitcoin-core-0.11.2\n ./verify.sh bitcoin-core-0.12.0"
      },
      {
        "sha": "985a199be0df0e6e74165e5dd17a6be0e9079a20",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,4 +1,6 @@\n-### Usage\n+# Dependencies\n+\n+## Usage\n \n To build dependencies for the current arch+OS:\n \n@@ -33,17 +35,17 @@ Common `host-platform-triplets` for cross compilation are:\n \n No other options are needed, the paths are automatically configured.\n \n-### Install the required dependencies: Ubuntu & Debian\n+## Install the required dependencies: Ubuntu & Debian\n \n-#### For macOS cross compilation\n+### For macOS cross compilation\n \n     sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python3-setuptools\n \n-#### For Win32/Win64 cross compilation\n+### For Win32/Win64 cross compilation\n \n-- see [build-windows.md](../doc/build-windows.md#cross-compilation-for-ubuntu-and-windows-subsystem-for-linux)\n+See [build-windows.md](../doc/build-windows.md#cross-compilation-for-ubuntu-and-windows-subsystem-for-linux)\n \n-#### For linux (including i386, ARM) cross compilation\n+### For linux (including i386, ARM) cross compilation\n \n Common linux dependencies:\n \n@@ -95,4 +97,3 @@ options will be passed to bitcoin's configure. In this case, `--disable-wallet`.\n \n - [description.md](description.md): General description of the depends system\n - [packages.md](packages.md): Steps for adding packages\n-"
      },
      {
        "sha": "73a665c514a17fe75d4162059c9cf1c1126cc1c2",
        "filename": "depends/description.md",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/depends/description.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/depends/description.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/description.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,26 +1,28 @@\n+# Dependencies - Overview\n+\n This is a system of building and caching dependencies necessary for building Bitcoin.\n There are several features that make it different from most similar systems:\n \n-### It is designed to be builder and host agnostic\n+## It is designed to be builder and host agnostic\n \n In theory, binaries for any target OS/architecture can be created, from a\n builder running any OS/architecture. In practice, build-side tools must be\n specified when the defaults don't fit, and packages must be amended to work\n on new hosts. For now, a build architecture of x86_64 is assumed, either on\n Linux or macOS.\n \n-### No reliance on timestamps\n+## No reliance on timestamps\n \n File presence is used to determine what needs to be built. This makes the\n results distributable and easily digestable by automated builders.\n \n-### Each build only has its specified dependencies available at build-time.\n+## Each build only has its specified dependencies available at build-time\n \n For each build, the sysroot is wiped and the (recursive) dependencies are\n installed. This makes each build deterministic, since there will never be any\n unknown files available to cause side-effects.\n \n-### Each package is cached and only rebuilt as needed.\n+## Each package is cached and only rebuilt as needed\n \n Before building, a unique build-id is generated for each package. This id\n consists of a hash of all files used to build the package (Makefiles, packages,\n@@ -30,7 +32,7 @@ any other package that depends on it. If any of the main makefiles (Makefile,\n funcs.mk, etc) are changed, all packages will be rebuilt. After building, the\n results are cached into a tarball that can be re-used and distributed.\n \n-### Package build results are (relatively) deterministic.\n+## Package build results are (relatively) deterministic\n \n Each package is configured and patched so that it will yield the same\n build-results with each consequent build, within a reasonable set of\n@@ -39,13 +41,13 @@ beyond the scope of this system. Additionally, the toolchain itself must be\n capable of deterministic results. When revisions are properly bumped, a cached\n build should represent an exact single payload.\n \n-### Sources are fetched and verified automatically\n+## Sources are fetched and verified automatically\n \n Each package must define its source location and checksum. The build will fail\n if the fetched source does not match. Sources may be pre-seeded and/or cached\n as desired.\n \n-### Self-cleaning\n+## Self-cleaning\n \n Build and staging dirs are wiped after use, and any previous version of a\n cached result is removed following a successful build. Automated builders"
      },
      {
        "sha": "dace740eb6fa5a829965fa995975dd8751fdd946",
        "filename": "depends/packages.md",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/depends/packages.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/depends/packages.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,3 +1,5 @@\n+# Dependencies - Packages\n+\n Each recipe consists of 3 main parts: defining identifiers, setting build\n variables, and defining build commands.\n \n@@ -48,7 +50,6 @@ These variables are optional:\n     Any extra files that will be fetched via $(package)_fetch_cmds. These are\n     specified so that they can be fetched and verified via 'make download'.\n \n-\n ## Build Variables:\n After defining the main identifiers, build variables may be added or customized\n before running the build commands. They should be added to a function called\n@@ -61,10 +62,10 @@ $(package)_set_vars. For example:\n Most variables can be prefixed with the host, architecture, or both, to make\n the modifications specific to that case. For example:\n \n-    Universal:     $(package)_cc=gcc\n-    Linux only:    $(package)_linux_cc=gcc\n-    x86_64 only:       $(package)_x86_64_cc = gcc\n-    x86_64 linux only: $(package)_x86_64_linux_cc = gcc\n+    Universal:         $(package)_cc=gcc\n+    Linux only:        $(package)_linux_cc=gcc\n+    x86_64 only:       $(package)_x86_64_cc=gcc\n+    x86_64 linux only: $(package)_x86_64_linux_cc=gcc\n \n These variables may be set to override or append their default values.\n \n@@ -159,9 +160,9 @@ possible.\n \n From the [Gentoo Wiki entry](https://wiki.gentoo.org/wiki/Project:Quality_Assurance/Handling_Libtool_Archives):\n \n->  Libtool pulls in all direct and indirect dependencies into the .la files it\n->  creates. This leads to massive overlinking, which is toxic to the Gentoo\n->  ecosystem, as it leads to a massive number of unnecessary rebuilds.\n+> Libtool pulls in all direct and indirect dependencies into the .la files it\n+> creates. This leads to massive overlinking, which is toxic to the Gentoo\n+> ecosystem, as it leads to a massive number of unnecessary rebuilds.\n \n ## Secondary dependencies:\n "
      },
      {
        "sha": "a85c6542ea2b99cc6a43edd167f4ee53d437fd75",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -28,10 +28,10 @@ Drag Bitcoin Core to your applications folder, and then run Bitcoin Core.\n \n ### Need Help?\n \n-* See the documentation at the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page)\n+- See the documentation at the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page)\n for help and more information.\n-* Ask for help on [#bitcoin](http://webchat.freenode.net?channels=bitcoin) on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net?channels=bitcoin).\n-* Ask for help on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Technical Support board](https://bitcointalk.org/index.php?board=4.0).\n+- Ask for help on [#bitcoin](http://webchat.freenode.net?channels=bitcoin) on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net?channels=bitcoin).\n+- Ask for help on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Technical Support board](https://bitcointalk.org/index.php?board=4.0).\n \n Building\n ---------------------\n@@ -65,9 +65,9 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [Benchmarking](benchmarking.md)\n \n ### Resources\n-* Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0).\n-* Discuss project-specific development on #bitcoin-core-dev on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net/?channels=bitcoin-core-dev).\n-* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net/?channels=bitcoin-dev).\n+- Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0).\n+- Discuss project-specific development on #bitcoin-core-dev on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net/?channels=bitcoin-core-dev).\n+- Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net/?channels=bitcoin-dev).\n \n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)"
      },
      {
        "sha": "9e3da72cfc99740480172272eb00e1f87a408710",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -15,15 +15,15 @@ apply.\n Supported API\n -------------\n \n-#### Transactions\n+### Transactions\n `GET /rest/tx/<TX-HASH>.<bin|hex|json>`\n \n Given a transaction hash: returns a transaction in binary, hex-encoded binary, or JSON formats.\n \n By default, this endpoint will only search the mempool.\n To query for a confirmed transaction, enable the transaction index via \"txindex=1\" command line / configuration option.\n \n-#### Blocks\n+### Blocks\n `GET /rest/block/<BLOCK-HASH>.<bin|hex|json>`\n `GET /rest/block/notxdetails/<BLOCK-HASH>.<bin|hex|json>`\n \n@@ -34,18 +34,18 @@ The HTTP request and response are both handled entirely in-memory, thus making m\n \n With the /notxdetails/ option JSON response will only contain the transaction hash instead of the complete transaction details. The option only affects the JSON response.\n \n-#### Blockheaders\n+### Blockheaders\n `GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`\n \n-Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n+Given a block hash: returns `<COUNT>` amount of blockheaders in upward direction.\n Returns empty if the block doesn't exist or it isn't in the active chain.\n \n-#### Blockhash by height\n+### Blockhash by height\n `GET /rest/blockhashbyheight/<HEIGHT>.<bin|hex|json>`\n \n Given a height: returns hash of block in best-block-chain at height provided.\n \n-#### Chaininfos\n+### Chaininfos\n `GET /rest/chaininfo.json`\n \n Returns various state info regarding block chain processing.\n@@ -63,7 +63,7 @@ Only supports JSON as output format.\n * softforks : (array) status of softforks in progress\n * bip9_softforks : (object) status of BIP9 softforks in progress\n \n-#### Query UTXO set\n+### Query UTXO set\n `GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`\n \n The getutxo command allows querying of the UTXO set given a set of outpoints.\n@@ -96,7 +96,7 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n }\n ```\n \n-#### Memory pool\n+### Memory pool\n `GET /rest/mempool/info.json`\n \n Returns various information about the TX mempool."
      },
      {
        "sha": "1f7cbf0ca39b53e3550f4a0bfded68e97c3bca66",
        "filename": "doc/assets-attribution.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/assets-attribution.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/assets-attribution.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1 +1,3 @@\n+# Assets Attribution\n+\n The list of assets used in the bitcoin source and their attribution can now be found in [contrib/debian/copyright](../contrib/debian/copyright)."
      },
      {
        "sha": "b98164eebbeac9c813eb1bdbbd2219037bc7df7d",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,3 +1,5 @@\n+# Implemented BIPs\n+\n BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.18.0**):\n \n * [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575))"
      },
      {
        "sha": "f4b364d1ef5af6ad35d61c4fb1f86ef0151fd69b",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -103,4 +103,3 @@ If your user is in the `staff` group the limit can be raised with:\n The change will only affect the current shell and processes spawned by it. To\n make the change system-wide, change `datasize-cur` and `datasize-max` in\n `/etc/login.conf`, and reboot.\n-"
      },
      {
        "sha": "c92302c07007d034f120d2e6864745baf26308d3",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,4 +1,4 @@\n-# macOS Build Instructions and Notes\n+# MacOS Build Guide and Notes\n \n The commands in this guide should be executed in a Terminal application.\n The built-in one is located in\n@@ -50,7 +50,7 @@ from the root of the repository.\n     cd bitcoin\n     ```\n \n-2.  Build Bitcoin Core:\n+2. Build Bitcoin Core:\n \n     Configure and build the headless Bitcoin Core binaries as well as the GUI (if Qt is found).\n \n@@ -61,12 +61,12 @@ from the root of the repository.\n     make\n     ```\n \n-3.  It is recommended to build and run the unit tests:\n+3. It is recommended to build and run the unit tests:\n     ```shell\n     make check\n     ```\n \n-4.  You can also create a  `.dmg` that contains the `.app` bundle (optional):\n+4. You can also create a  `.dmg` that contains the `.app` bundle (optional):\n     ```shell\n     make deploy\n     ```\n@@ -197,12 +197,11 @@ order to satisfy the new Gatekeeper requirements. Because this private key canno\n shared, we'll have to be a bit creative in order for the build process to remain somewhat\n deterministic. Here's how it works:\n \n-- Builders use Gitian to create an unsigned release. This outputs an unsigned DMG which\n+* Builders use Gitian to create an unsigned release. This outputs an unsigned DMG which\n   users may choose to bless and run. It also outputs an unsigned app structure in the form\n   of a tarball, which also contains all of the tools that have been previously (deterministically)\n   built in order to create a final DMG.\n-- The Apple keyholder uses this unsigned app to create a detached signature, using the\n+* The Apple keyholder uses this unsigned app to create a detached signature, using the\n   script that is also included there. Detached signatures are available from this [repository](https://github.com/bitcoin-core/bitcoin-detached-sigs).\n-- Builders feed the unsigned app + detached signature back into Gitian. It uses the\n+* Builders feed the unsigned app + detached signature back into Gitian. It uses the\n   pre-built tools to recombine the pieces into a deterministic DMG.\n-"
      },
      {
        "sha": "100214489e68c5b9364826e73f9bae39e8cb835d",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 15,
        "deletions": 24,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,4 +1,4 @@\n-UNIX BUILD NOTES\n+Unix Build Notes\n ====================\n Some notes on how to build Bitcoin Core in Unix.\n \n@@ -9,7 +9,7 @@ Note\n Always use absolute paths to configure and compile Bitcoin Core and the dependencies.\n For example, when specifying the path of the dependency:\n \n-\t../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n+    ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n \n Here BDB_PREFIX must be an absolute path - it is defined using $(pwd) which ensures\n the usage of the absolute path.\n@@ -58,7 +58,6 @@ C++ compilers are memory-hungry. It is recommended to have at least 1.5 GB of\n memory available when compiling Bitcoin Core. On systems with less, gcc can be\n tuned to conserve memory with additional CXXFLAGS:\n \n-\n     ./configure CXXFLAGS=\"--param ggc-min-expand=1 --param ggc-min-heapsize=32768\"\n \n Alternatively, or in addition, debugging information can be skipped for compilation. The default compile flags are\n@@ -95,8 +94,7 @@ Otherwise, you can build from self-compiled `depends` (see above).\n \n To build Bitcoin Core without wallet, see [*Disable-wallet mode*](/doc/build-unix.md#disable-wallet-mode)\n \n-\n-Optional (see `--with-miniupnpc` and `--enable-upnp-default`):\n+Optionally (see `--with-miniupnpc` and `--enable-upnp-default`):\n \n     sudo apt-get install libminiupnpc-dev\n \n@@ -125,7 +123,6 @@ protobuf (optional) can be installed with:\n Once these are installed, they will be found by configure and a bitcoin-qt executable will be\n built by default.\n \n-\n ### Fedora\n \n #### Dependency Build Instructions\n@@ -159,18 +156,16 @@ Notes\n The release is built with GCC and then \"strip bitcoind\" to strip the debug\n symbols, which reduces the executable size by about 90%.\n \n-\n miniupnpc\n ---------\n \n [miniupnpc](http://miniupnp.free.fr/) may be used for UPnP port mapping.  It can be downloaded from [here](\n http://miniupnp.tuxfamily.org/files/).  UPnP support is compiled in and\n turned off by default.  See the configure options for upnp behavior desired:\n \n-\t--without-miniupnpc      No UPnP support miniupnp not required\n-\t--disable-upnp-default   (the default) UPnP support turned off by default at runtime\n-\t--enable-upnp-default    UPnP support turned on by default at runtime\n-\n+    --without-miniupnpc      No UPnP support miniupnp not required\n+    --disable-upnp-default   (the default) UPnP support turned off by default at runtime\n+    --enable-upnp-default    UPnP support turned on by default at runtime\n \n Berkeley DB\n -----------\n@@ -190,10 +185,9 @@ Boost\n -----\n If you need to build Boost yourself:\n \n-\tsudo su\n-\t./bootstrap.sh\n-\t./bjam install\n-\n+    sudo su\n+    ./bootstrap.sh\n+    ./bjam install\n \n Security\n --------\n@@ -203,9 +197,8 @@ This can be disabled with:\n \n Hardening Flags:\n \n-\t./configure --enable-hardening\n-\t./configure --disable-hardening\n-\n+    ./configure --enable-hardening\n+    ./configure --disable-hardening\n \n Hardening enables the following features:\n * _Position Independent Executable_: Build position independent code to take advantage of Address Space Layout Randomization\n@@ -219,7 +212,7 @@ Hardening enables the following features:\n \n     To test that you have built PIE executable, install scanelf, part of paxutils, and use:\n \n-    \tscanelf -e ./bitcoin\n+        scanelf -e ./bitcoin\n \n     The output should contain:\n \n@@ -236,8 +229,9 @@ Hardening enables the following features:\n     `scanelf -e ./bitcoin`\n \n     The output should contain:\n-\tSTK/REL/PTL\n-\tRW- R-- RW-\n+\n+        STK/REL/PTL\n+        RW- R-- RW-\n \n     The STK RW- means that the stack is readable and writeable but not executable.\n \n@@ -258,7 +252,6 @@ A list of additional configure flags can be displayed with:\n \n     ./configure --help\n \n-\n Setup and Build Example: Arch Linux\n -----------------------------------\n This example lists the steps necessary to setup and build a command line only, non-wallet distribution of the latest changes on Arch Linux:\n@@ -277,7 +270,6 @@ or building and depending on a local version of Berkeley DB 4.8. The readily ava\n As mentioned above, when maintaining portability of the wallet between the standard Bitcoin Core distributions and independently built\n node software is desired, Berkeley DB 4.8 must be used.\n \n-\n ARM Cross-compilation\n -------------------\n These steps can be performed on, for example, an Ubuntu VM. The depends system\n@@ -298,5 +290,4 @@ To build executables for ARM:\n     ./configure --prefix=$PWD/depends/arm-linux-gnueabihf --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\n     make\n \n-\n For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory."
      },
      {
        "sha": "0c72a6b9f086e942d01a1d10720bb19b0bc42ce7",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,4 +1,4 @@\n-WINDOWS BUILD NOTES\n+Windows Build Notes\n ====================\n \n Below are some notes on how to build Bitcoin Core for Windows.\n@@ -34,18 +34,18 @@ Full instructions to install WSL are available on the above link.\n To install WSL on Windows 10 with Fall Creators Update installed (version >= 16215.0) do the following:\n \n 1. Enable the Windows Subsystem for Linux feature\n-  * Open the Windows Features dialog (`OptionalFeatures.exe`)\n-  * Enable 'Windows Subsystem for Linux'\n-  * Click 'OK' and restart if necessary\n+   * Open the Windows Features dialog (`OptionalFeatures.exe`)\n+   * Enable 'Windows Subsystem for Linux'\n+   * Click 'OK' and restart if necessary\n 2. Install Ubuntu\n-  * Open Microsoft Store and search for \"Ubuntu 18.04\" or use [this link](https://www.microsoft.com/store/productId/9N9TNGVNDL3Q)\n-  * Click Install\n+   * Open Microsoft Store and search for \"Ubuntu 18.04\" or use [this link](https://www.microsoft.com/store/productId/9N9TNGVNDL3Q)\n+   * Click Install\n 3. Complete Installation\n-  * Open a cmd prompt and type \"Ubuntu1804\"\n-  * Create a new UNIX user account (this is a separate account from your Windows account)\n+   * Open a cmd prompt and type `Ubuntu1804`\n+   * Create a new UNIX user account (this is a separate account from your Windows account)\n \n After the bash shell is active, you can follow the instructions below, starting\n-with the \"Cross-compilation\" section. Compiling the 64-bit version is\n+with the cross-compilation section. Compiling the 64-bit version is\n recommended, but it is possible to compile the 32-bit version.\n \n Cross-compilation for Ubuntu and Windows Subsystem for Linux"
      },
      {
        "sha": "5e2bb043cfe375387382199490f7fef062532b6c",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -32,13 +32,13 @@ Controlling dependencies\n ------------------------\n Some dependencies are not needed in all configurations. The following are some factors that affect the dependency list.\n \n-#### Options passed to `./configure`\n+### Options passed to `./configure`\n * MiniUPnPc is not needed with  `--with-miniupnpc=no`.\n * Berkeley DB is not needed with `--disable-wallet`.\n * protobuf is only needed with `--enable-bip70`.\n * Qt is not needed with `--without-gui`.\n * If the qrencode dependency is absent, QR support won't be added. To force an error when that happens, pass `--with-qrencode`.\n * ZeroMQ is needed only with the `--with-zmq` option.\n \n-#### Other\n+### Other\n * librsvg is only needed if you need to run `make deploy` on (cross-compilation to) macOS."
      },
      {
        "sha": "d97d9fd42d2a69cbd51275341576159eeb67df6c",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 78,
        "deletions": 71,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -2,41 +2,47 @@ Developer Notes\n ===============\n \n <!-- markdown-toc start -->\n+<!-- markdownlint-disable no-emphasis-as-header -->\n **Table of Contents**\n+<!-- markdownlint-enable no-emphasis-as-header -->\n \n - [Developer Notes](#developer-notes)\n-    - [Coding Style (General)](#coding-style-general)\n-    - [Coding Style (C++)](#coding-style-c)\n-    - [Coding Style (Python)](#coding-style-python)\n-    - [Coding Style (Doxygen-compatible comments)](#coding-style-doxygen-compatible-comments)\n-    - [Development tips and tricks](#development-tips-and-tricks)\n-        - [Compiling for debugging](#compiling-for-debugging)\n-        - [Compiling for gprof profiling](#compiling-for-gprof-profiling)\n-        - [debug.log](#debuglog)\n-        - [Testnet and Regtest modes](#testnet-and-regtest-modes)\n-        - [DEBUG_LOCKORDER](#debug_lockorder)\n-        - [Valgrind suppressions file](#valgrind-suppressions-file)\n-        - [Compiling for test coverage](#compiling-for-test-coverage)\n-        - [Performance profiling with perf](#performance-profiling-with-perf)\n-    - [Locking/mutex usage notes](#lockingmutex-usage-notes)\n-    - [Threads](#threads)\n-    - [Ignoring IDE/editor files](#ignoring-ideeditor-files)\n-- [Development guidelines](#development-guidelines)\n-    - [General Bitcoin Core](#general-bitcoin-core)\n-    - [Wallet](#wallet)\n-    - [General C++](#general-c)\n-    - [C++ data structures](#c-data-structures)\n-    - [Strings and formatting](#strings-and-formatting)\n-    - [Shadowing](#shadowing)\n-    - [Threads and synchronization](#threads-and-synchronization)\n-    - [Scripts](#scripts)\n-        - [Shebang](#shebang)\n-    - [Source code organization](#source-code-organization)\n-    - [GUI](#gui)\n-    - [Subtrees](#subtrees)\n-    - [Scripted diffs](#scripted-diffs)\n-    - [Release notes](#release-notes)\n-    - [RPC interface guidelines](#rpc-interface-guidelines)\n+  - [Coding Style (General)](#coding-style-general)\n+  - [Coding Style (C++)](#coding-style-c)\n+  - [Coding Style (Python)](#coding-style-python)\n+  - [Coding Style (Doxygen-compatible comments)](#coding-style-doxygen-compatible-comments)\n+  - [Development tips and tricks](#development-tips-and-tricks)\n+    - [Compiling for debugging](#compiling-for-debugging)\n+    - [Compiling for gprof profiling](#compiling-for-gprof-profiling)\n+    - [debug.log](#debuglog)\n+    - [Testnet and Regtest modes](#testnet-and-regtest-modes)\n+    - [DEBUG_LOCKORDER](#debuglockorder)\n+    - [Valgrind suppressions file](#valgrind-suppressions-file)\n+    - [Compiling for test coverage](#compiling-for-test-coverage)\n+    - [Performance profiling with perf](#performance-profiling-with-perf)\n+      - [Sanitizers](#sanitizers)\n+  - [Locking/mutex usage notes](#lockingmutex-usage-notes)\n+  - [Threads](#threads)\n+  - [Ignoring IDE/editor files](#ignoring-ideeditor-files)\n+- [Development Guidelines](#development-guidelines)\n+  - [General Bitcoin Core](#general-bitcoin-core)\n+  - [Wallet](#wallet)\n+  - [General C++](#general-c)\n+  - [C++ data structures](#c-data-structures)\n+  - [Strings and formatting](#strings-and-formatting)\n+  - [Shadowing](#shadowing)\n+  - [Threads and synchronization](#threads-and-synchronization)\n+  - [Scripts](#scripts)\n+    - [Shebang](#shebang)\n+  - [Source code organization](#source-code-organization)\n+  - [GUI](#gui)\n+  - [Subtrees](#subtrees)\n+  - [Upgrading LevelDB](#upgrading-leveldb)\n+    - [File Descriptor Counts](#file-descriptor-counts)\n+    - [Consensus Compatibility](#consensus-compatibility)\n+  - [Scripted diffs](#scripted-diffs)\n+  - [Release notes](#release-notes)\n+  - [RPC interface guidelines](#rpc-interface-guidelines)\n \n <!-- markdown-toc end -->\n \n@@ -284,8 +290,8 @@ Certain kernel parameters may need to be set for perf to be able to inspect the\n running process's stack.\n \n ```sh\n-$ sudo sysctl -w kernel.perf_event_paranoid=-1\n-$ sudo sysctl -w kernel.kptr_restrict=0\n+sudo sysctl -w kernel.perf_event_paranoid=-1\n+sudo sysctl -w kernel.kptr_restrict=0\n ```\n \n Make sure you [understand the security\n@@ -311,8 +317,7 @@ or using a graphical tool like [Hotspot](https://github.com/KDAB/hotspot).\n \n See the functional test documentation for how to invoke perf within tests.\n \n-\n-**Sanitizers**\n+#### Sanitizers\n \n Bitcoin Core can be compiled with various \"sanitizers\" enabled, which add\n instrumentation for issues regarding things like memory safety, thread race\n@@ -354,14 +359,14 @@ compiler.\n \n Additional resources:\n \n- * [AddressSanitizer](https://clang.llvm.org/docs/AddressSanitizer.html)\n- * [LeakSanitizer](https://clang.llvm.org/docs/LeakSanitizer.html)\n- * [MemorySanitizer](https://clang.llvm.org/docs/MemorySanitizer.html)\n- * [ThreadSanitizer](https://clang.llvm.org/docs/ThreadSanitizer.html)\n- * [UndefinedBehaviorSanitizer](https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html)\n- * [GCC Instrumentation Options](https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html)\n- * [Google Sanitizers Wiki](https://github.com/google/sanitizers/wiki)\n- * [Issue #12691: Enable -fsanitize flags in Travis](https://github.com/bitcoin/bitcoin/issues/12691)\n+- [AddressSanitizer](https://clang.llvm.org/docs/AddressSanitizer.html)\n+- [LeakSanitizer](https://clang.llvm.org/docs/LeakSanitizer.html)\n+- [MemorySanitizer](https://clang.llvm.org/docs/MemorySanitizer.html)\n+- [ThreadSanitizer](https://clang.llvm.org/docs/ThreadSanitizer.html)\n+- [UndefinedBehaviorSanitizer](https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html)\n+- [GCC Instrumentation Options](https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html)\n+- [Google Sanitizers Wiki](https://github.com/google/sanitizers/wiki)\n+- [Issue #12691: Enable -fsanitize flags in Travis](https://github.com/bitcoin/bitcoin/issues/12691)\n \n Locking/mutex usage notes\n -------------------------\n@@ -420,7 +425,7 @@ to do this is thus to create your local gitignore. Add this to `~/.gitconfig`:\n \n ```\n [core]\n-        excludesfile = /home/.../.gitignore_global\n+    excludesfile = /home/.../.gitignore_global\n ```\n \n (alternatively, type the command `git config --global core.excludesfile ~/.gitignore_global`\n@@ -439,8 +444,10 @@ If a set of tools is used by the build system or scripts the repository (for\n example, lcov) it is perfectly acceptable to add its files to `.gitignore`\n and commit them.\n \n-Development guidelines\n-============================\n+<!-- markdownlint-disable single-h1 -->\n+Development Guidelines\n+======================\n+<!-- markdownlint-enable single-h1 -->\n \n A few non-style-related recommendations for developers, as well as points to\n pay attention to for reviewers of Bitcoin Core code.\n@@ -539,12 +546,12 @@ C++ data structures\n     Initializing the members in the declaration makes it easy to\n     spot uninitialized ones.\n \n-```cpp\n-class A\n-{\n-    uint32_t m_count{0};\n-}\n-```\n+  ```cpp\n+  class A\n+  {\n+      uint32_t m_count{0};\n+  }\n+  ```\n \n - By default, declare single-argument constructors `explicit`.\n \n@@ -634,15 +641,15 @@ Threads and synchronization\n   the current scope, so surround the statement and the code that needs the lock\n   with braces.\n \n-  OK:\n+OK:\n ```c++\n {\n     TRY_LOCK(cs_vNodes, lockNodes);\n     ...\n }\n ```\n \n-  Wrong:\n+Wrong:\n ```c++\n TRY_LOCK(cs_vNodes, lockNodes);\n {\n@@ -663,12 +670,12 @@ Scripts\n \n     `#!/usr/bin/env bash` searches the user's PATH to find the bash binary.\n \n-  OK:\n+OK:\n ```bash\n #!/usr/bin/env bash\n ```\n \n-  Wrong:\n+Wrong:\n ```bash\n #!/bin/bash\n ```\n@@ -702,15 +709,15 @@ Source code organization\n - Terminate namespaces with a comment (`// namespace mynamespace`). The comment\n   should be placed on the same line as the brace closing the namespace, e.g.\n \n-```c++\n-namespace mynamespace {\n-...\n-} // namespace mynamespace\n+  ```c++\n+  namespace mynamespace {\n+  ...\n+  } // namespace mynamespace\n \n-namespace {\n-...\n-} // namespace\n-```\n+  namespace {\n+  ...\n+  } // namespace\n+  ```\n \n   - *Rationale*: Avoids confusion about the namespace context.\n \n@@ -725,12 +732,12 @@ namespace {\n - Use include guards to avoid the problem of double inclusion. The header file\n   `foo/bar.h` should use the include guard identifier `BITCOIN_FOO_BAR_H`, e.g.\n \n-```c++\n-#ifndef BITCOIN_FOO_BAR_H\n-#define BITCOIN_FOO_BAR_H\n-...\n-#endif // BITCOIN_FOO_BAR_H\n-```\n+  ```c++\n+  #ifndef BITCOIN_FOO_BAR_H\n+  #define BITCOIN_FOO_BAR_H\n+  ...\n+  #endif // BITCOIN_FOO_BAR_H\n+  ```\n \n GUI\n -----"
      },
      {
        "sha": "cdeb2664f8549928d9fc770786013584b522ad04",
        "filename": "doc/dnsseed-policy.md",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/dnsseed-policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/dnsseed-policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dnsseed-policy.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -10,35 +10,35 @@ Other implementations of Bitcoin software may also use the same\n seeds and may be more exposed. In light of this exposure, this\n document establishes some basic expectations for operating dnsseeds.\n \n-0. A DNS seed operating organization or person is expected to follow good\n+1. A DNS seed operating organization or person is expected to follow good\n host security practices, maintain control of applicable infrastructure,\n and not sell or transfer control of the DNS seed. Any hosting services\n contracted by the operator are equally expected to uphold these expectations.\n \n-1. The DNS seed results must consist exclusively of fairly selected and\n+2. The DNS seed results must consist exclusively of fairly selected and\n functioning Bitcoin nodes from the public network to the best of the\n operator's understanding and capability.\n \n-2. For the avoidance of doubt, the results may be randomized but must not\n+3. For the avoidance of doubt, the results may be randomized but must not\n single-out any group of hosts to receive different results unless due to an\n urgent technical necessity and disclosed.\n \n-3. The results may not be served with a DNS TTL of less than one minute.\n+4. The results may not be served with a DNS TTL of less than one minute.\n \n-4. Any logging of DNS queries should be only that which is necessary\n+5. Any logging of DNS queries should be only that which is necessary\n for the operation of the service or urgent health of the Bitcoin\n network and must not be retained longer than necessary nor disclosed\n to any third party.\n \n-5. Information gathered as a result of the operators node-spidering\n+6. Information gathered as a result of the operators node-spidering\n (not from DNS queries) may be freely published or retained, but only\n if this data was not made more complete by biasing node connectivity\n (a violation of expectation (1)).\n \n-6. Operators are encouraged, but not required, to publicly document the\n+7. Operators are encouraged, but not required, to publicly document the\n details of their operating practices.\n \n-7. A reachable email contact address must be published for inquiries\n+8. A reachable email contact address must be published for inquiries\n related to the DNS seed operation.\n \n If these expectations cannot be satisfied the operator should"
      },
      {
        "sha": "ec8cb5d0ef5717e669a9acbe63e5bddb2ae495af",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,3 +1,5 @@\n+# Bitcoin Data Files\n+\n Filename            | Description\n --------------------|----------------------------------------------------------------------------------------------------------------------------\n banlist.dat         | stores the IPs/Subnets of banned nodes"
      },
      {
        "sha": "aee60832ffbe85859185852b3d46aefe2d9fe939",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -30,13 +30,13 @@ file, however it is recommended that a strong and secure password be used\n as this password is security critical to securing the wallet should the\n wallet be enabled.\n \n-If bitcoind is run with the \"-server\" flag (set by default), and no rpcpassword is set,\n+If bitcoind is run with the `-server` flag (set by default), and no rpcpassword is set,\n it will use a special cookie file for authentication. The cookie is generated with random\n content when the daemon starts, and deleted when it exits. Read access to this file\n controls who can access it through RPC.\n \n By default the cookie is stored in the data directory, but it's location can be overridden\n-with the option '-rpccookiefile'.\n+with the option `-rpccookiefile`.\n \n This allows for running bitcoind without having to do any manual configuration.\n \n@@ -53,11 +53,11 @@ Paths\n \n All three configurations assume several paths that might need to be adjusted.\n \n-Binary:              `/usr/bin/bitcoind`\n-Configuration file:  `/etc/bitcoin/bitcoin.conf`\n-Data directory:      `/var/lib/bitcoind`\n-PID file:            `/var/run/bitcoind/bitcoind.pid` (OpenRC and Upstart) or `/run/bitcoind/bitcoind.pid` (systemd)\n-Lock file:           `/var/lock/subsys/bitcoind` (CentOS)\n+- Binary:              `/usr/bin/bitcoind`\n+- Configuration file:  `/etc/bitcoin/bitcoin.conf`\n+- Data directory:      `/var/lib/bitcoind`\n+- PID file:            `/var/run/bitcoind/bitcoind.pid` (OpenRC and Upstart) or `/run/bitcoind/bitcoind.pid` (systemd)\n+- Lock file:           `/var/lock/subsys/bitcoind` (CentOS)\n \n The PID directory (if applicable) and data directory should both be owned by the\n bitcoin user and group. It is advised for security reasons to make the\n@@ -81,12 +81,12 @@ configuration mechanisms that would allow for overriding the command line\n options specified in the init files (e.g. setting `BITCOIND_DATADIR` for\n OpenRC).\n \n-### macOS\n+### MacOS\n \n-Binary:              `/usr/local/bin/bitcoind`\n-Configuration file:  `~/Library/Application Support/Bitcoin/bitcoin.conf`\n-Data directory:      `~/Library/Application Support/Bitcoin`\n-Lock file:           `~/Library/Application Support/Bitcoin/.lock`\n+- Binary:              `/usr/local/bin/bitcoind`\n+- Configuration file:  `~/Library/Application Support/Bitcoin/bitcoin.conf`\n+- Data directory:      `~/Library/Application Support/Bitcoin`\n+- Lock file:           `~/Library/Application Support/Bitcoin/.lock`\n \n Installing Service Configuration\n -----------------------------------"
      },
      {
        "sha": "a0bd33210a7b86b166ced583248c5ce423f5dec5",
        "filename": "doc/productivity.md",
        "status": "modified",
        "additions": 22,
        "deletions": 20,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/productivity.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/productivity.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/productivity.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -4,25 +4,27 @@ Productivity Notes\n Table of Contents\n -----------------\n \n-* [General](#general)\n-   * [Cache compilations with `ccache`](#cache-compilations-with-ccache)\n-   * [Disable features with `./configure`](#disable-features-with-configure)\n-   * [Make use of your threads with `make -j`](#make-use-of-your-threads-with-make--j)\n-   * [Only build what you need](#only-build-what-you-need)\n-   * [Multiple working directories with `git worktrees`](#multiple-working-directories-with-git-worktrees)\n-   * [Interactive \"dummy rebases\" for fixups and execs with `git merge-base`](#interactive-dummy-rebases-for-fixups-and-execs-with-git-merge-base)\n-* [Writing code](#writing-code)\n-   * [Format C/C++/Protobuf diffs with `clang-format-diff.py`](#format-ccprotobuf-diffs-with-clang-format-diffpy)\n-   * [Format Python diffs with `yapf-diff.py`](#format-python-diffs-with-yapf-diffpy)\n-* [Rebasing/Merging code](#rebasingmerging-code)\n-   * [More conflict context with `merge.conflictstyle diff3`](#more-conflict-context-with-mergeconflictstyle-diff3)\n-* [Reviewing code](#reviewing-code)\n-   * [Reduce mental load with `git diff` options](#reduce-mental-load-with-git-diff-options)\n-   * [Reference PRs easily with `refspec`s](#reference-prs-easily-with-refspecs)\n-   * [Diff the diffs with `git range-diff`](#diff-the-diffs-with-git-range-diff)\n+- [Productivity Notes](#productivity-notes)\n+  - [Table of Contents](#table-of-contents)\n+  - [General](#general)\n+    - [Cache compilations with `ccache`](#cache-compilations-with-ccache)\n+    - [Disable features with `./configure`](#disable-features-with-configure)\n+    - [Make use of your threads with `make -j`](#make-use-of-your-threads-with-make--j)\n+    - [Only build what you need](#only-build-what-you-need)\n+    - [Multiple working directories with `git worktrees`](#multiple-working-directories-with-git-worktrees)\n+    - [Interactive \"dummy rebases\" for fixups and execs with `git merge-base`](#interactive-%22dummy-rebases%22-for-fixups-and-execs-with-git-merge-base)\n+  - [Writing code](#writing-code)\n+    - [Format C/C++/Protobuf diffs with `clang-format-diff.py`](#format-ccprotobuf-diffs-with-clang-format-diffpy)\n+    - [Format Python diffs with `yapf-diff.py`](#format-python-diffs-with-yapf-diffpy)\n+  - [Rebasing/Merging code](#rebasingmerging-code)\n+    - [More conflict context with `merge.conflictstyle diff3`](#more-conflict-context-with-mergeconflictstyle-diff3)\n+  - [Reviewing code](#reviewing-code)\n+    - [Reduce mental load with `git diff` options](#reduce-mental-load-with-git-diff-options)\n+    - [Reference PRs easily with `refspec`s](#reference-prs-easily-with-refspecs)\n+    - [Diff the diffs with `git range-diff`](#diff-the-diffs-with-git-range-diff)\n \n General\n-------\n+-------\n \n ### Cache compilations with `ccache`\n \n@@ -109,7 +111,7 @@ To execute `make check` on every commit since last diverged from master, but wit\n git rebase -i --exec \"make check\" \"$(git merge-base master HEAD)\"\n ```\n \n------\n+---\n \n This synergizes well with [`ccache`](#cache-compilations-with-ccache) as objects resulting from unchanged code will most likely hit the cache and won't need to be recompiled.\n \n@@ -127,7 +129,7 @@ See [contrib/devtools/README.md](/contrib/devtools/README.md#clang-format-diff.p\n Usage is exactly the same as [`clang-format-diff.py`](#format-ccprotobuf-diffs-with-clang-format-diffpy). You can get it [here](https://github.com/MarcoFalke/yapf-diff).\n \n Rebasing/Merging code\n--------------\n+---------------------\n \n ### More conflict context with `merge.conflictstyle diff3`\n \n@@ -210,7 +212,7 @@ PREV=P5 N=4 && git range-diff `git merge-base --all HEAD $PREV`...$PREV HEAD~$N.\n \n Where `P5` is the commit you last reviewed and `4` is the number of commits in the new version.\n \n------\n+---\n \n `git range-diff` also accepts normal `git diff` options, see [Reduce mental load with `git diff` options](#reduce-mental-load-with-git-diff-options) for useful `git diff` options.\n "
      },
      {
        "sha": "b6b44ff8a172e94f2ecd162317996e6ac2c6cc23",
        "filename": "doc/psbt.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/psbt.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/psbt.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/psbt.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -87,7 +87,6 @@ hardware implementations will typically implement multiple roles simultaneously.\n   possible, computes the fee of the resulting transaction and estimates the\n   final weight and feerate.\n \n-\n ### Workflows\n \n #### Multisig with multiple Bitcoin Core instances"
      },
      {
        "sha": "4f202d1eaa1363c0ad3fdc97dc0ce68e7fd1b81b",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -372,5 +372,4 @@ Credits\n \n Thanks to everyone who directly contributed to this release:\n \n-\n As well as everyone that helped translating on [Transifex](https://www.transifex.com/bitcoin/bitcoin/)."
      },
      {
        "sha": "95d3e739f15c6141ca31063b0735e81c4e61361c",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 13,
        "deletions": 14,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -5,32 +5,32 @@ Release Process\n \n ### Before every release candidate\n \n-* Update translations (ping wumpus on IRC) see [translation_process.md](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#synchronising-translations).\n-* Update manpages, see [gen-manpages.sh](https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/README.md#gen-manpagessh).\n-* Update release candidate version in `configure.ac` (`CLIENT_VERSION_RC`).\n+- Update translations (ping wumpus on IRC) see [translation_process.md](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#synchronising-translations).\n+- Update manpages, see [gen-manpages.sh](https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/README.md#gen-manpagessh).\n+- Update release candidate version in `configure.ac` (`CLIENT_VERSION_RC`).\n \n ### Before every major and minor release\n \n-* Update [bips.md](bips.md) to account for changes since the last release.\n-* Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_RC` to `0`).\n-* Write release notes (see \"Write the release notes\" below).\n-* Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n-* Update `src/chainparams.cpp` defaultAssumeValid with information from the getblockhash rpc.\n+- Update [bips.md](bips.md) to account for changes since the last release.\n+- Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_RC` to `0`).\n+- Write release notes (see \"Write the release notes\" below).\n+- Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n+- Update `src/chainparams.cpp` defaultAssumeValid with information from the getblockhash rpc.\n   - The selected value must not be orphaned so it may be useful to set the value two blocks back from the tip.\n   - Testnet should be set some tens of thousands back from the tip due to reorgs there.\n   - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect\n      that causes rejection of blocks in the past history.\n \n ### Before every major release\n \n-* Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n-* Update [`src/chainparams.cpp`](/src/chainparams.cpp) m_assumed_blockchain_size and m_assumed_chain_state_size with the current size plus some overhead.\n-* Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate. Use the output of the RPC `getchaintxstats`, see\n+- Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n+- Update [`src/chainparams.cpp`](/src/chainparams.cpp) m_assumed_blockchain_size and m_assumed_chain_state_size with the current size plus some overhead.\n+- Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate. Use the output of the RPC `getchaintxstats`, see\n   [this pull request](https://github.com/bitcoin/bitcoin/pull/12270) for an example. Reviewers can verify the results by running `getchaintxstats <window_block_count> <window_last_block_hash>` with the `window_block_count` and `window_last_block_hash` from your output.\n-* On both the master branch and the new release branch:\n+- On both the master branch and the new release branch:\n   - update `CLIENT_VERSION_MINOR` in [`configure.ac`](../configure.ac)\n   - update `CLIENT_VERSION_MINOR`, `PACKAGE_VERSION`, and `PACKAGE_STRING` in [`build_msvc/bitcoin_config.h`](/build_msvc/bitcoin_config.h)\n-* On the new release branch in [`configure.ac`](../configure.ac) and [`build_msvc/bitcoin_config.h`](/build_msvc/bitcoin_config.h) (see [this commit](https://github.com/bitcoin/bitcoin/commit/742f7dd)):\n+- On the new release branch in [`configure.ac`](../configure.ac) and [`build_msvc/bitcoin_config.h`](/build_msvc/bitcoin_config.h) (see [this commit](https://github.com/bitcoin/bitcoin/commit/742f7dd)):\n   - set `CLIENT_VERSION_REVISION` to `0`\n   - set `CLIENT_VERSION_IS_RELEASE` to `true`\n \n@@ -51,7 +51,6 @@ Release Process\n - Merge the release notes from the wiki into the branch.\n - Ensure the \"Needs release note\" label is removed from all relevant pull requests and issues.\n \n-\n ## Building\n \n ### First time / New builders"
      },
      {
        "sha": "aa56c47062a3ec2f5459d7641dc898a6d8cd0c40",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 40,
        "deletions": 42,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,41 +1,39 @@\n-# TOR SUPPORT IN BITCOIN\n+# Tor Support\n \n It is possible to run Bitcoin Core as a Tor hidden service, and connect to such services.\n \n The following directions assume you have a Tor proxy running on port 9050. Many distributions default to having a SOCKS proxy listening on port 9050, but others may not. In particular, the Tor Browser Bundle defaults to listening on port 9150. See [Tor Project FAQ:TBBSocksPort](https://www.torproject.org/docs/faq.html.en#TBBSocksPort) for how to properly\n configure Tor.\n \n-\n ## 1. Run Bitcoin Core behind a Tor proxy\n \n The first step is running Bitcoin Core behind a Tor proxy. This will already anonymize all\n outgoing connections, but more is possible.\n \n-\t-proxy=ip:port  Set the proxy server. If SOCKS5 is selected (default), this proxy\n-\t                server will be used to try to reach .onion addresses as well.\n+    -proxy=ip:port  Set the proxy server. If SOCKS5 is selected (default), this proxy\n+                    server will be used to try to reach .onion addresses as well.\n \n-\t-onion=ip:port  Set the proxy server to use for Tor hidden services. You do not\n-\t                need to set this if it's the same as -proxy. You can use -noonion\n-\t                to explicitly disable access to hidden services.\n+    -onion=ip:port  Set the proxy server to use for Tor hidden services. You do not\n+                    need to set this if it's the same as -proxy. You can use -noonion\n+                    to explicitly disable access to hidden services.\n \n-\t-listen         When using -proxy, listening is disabled by default. If you want\n-\t                to run a hidden service (see next section), you'll need to enable\n-\t                it explicitly.\n+    -listen         When using -proxy, listening is disabled by default. If you want\n+                    to run a hidden service (see next section), you'll need to enable\n+                    it explicitly.\n \n-\t-connect=X      When behind a Tor proxy, you can specify .onion addresses instead\n-\t-addnode=X      of IP addresses or hostnames in these parameters. It requires\n-\t-seednode=X     SOCKS5. In Tor mode, such addresses can also be exchanged with\n-\t                other P2P nodes.\n+    -connect=X      When behind a Tor proxy, you can specify .onion addresses instead\n+    -addnode=X      of IP addresses or hostnames in these parameters. It requires\n+    -seednode=X     SOCKS5. In Tor mode, such addresses can also be exchanged with\n+                    other P2P nodes.\n \n-\t-onlynet=onion  Make outgoing connections only to .onion addresses. Incoming\n-\t                connections are not affected by this option. This option can be\n-\t                specified multiple times to allow multiple network types, e.g.\n-\t                ipv4, ipv6, or onion.\n+    -onlynet=onion  Make outgoing connections only to .onion addresses. Incoming\n+                    connections are not affected by this option. This option can be\n+                    specified multiple times to allow multiple network types, e.g.\n+                    ipv4, ipv6, or onion.\n \n In a typical situation, this suffices to run behind a Tor proxy:\n \n-\t./bitcoind -proxy=127.0.0.1:9050\n-\n+    ./bitcoind -proxy=127.0.0.1:9050\n \n ## 2. Run a Bitcoin Core hidden server\n \n@@ -44,52 +42,52 @@ reachable from the Tor network. Add these lines to your /etc/tor/torrc (or equiv\n config file): *Needed for Tor version 0.2.7.0 and older versions of Tor only. For newer\n versions of Tor see [Section 3](#3-automatically-listen-on-tor).*\n \n-\tHiddenServiceDir /var/lib/tor/bitcoin-service/\n-\tHiddenServicePort 8333 127.0.0.1:8333\n-\tHiddenServicePort 18333 127.0.0.1:18333\n+    HiddenServiceDir /var/lib/tor/bitcoin-service/\n+    HiddenServicePort 8333 127.0.0.1:8333\n+    HiddenServicePort 18333 127.0.0.1:18333\n \n The directory can be different of course, but (both) port numbers should be equal to\n your bitcoind's P2P listen port (8333 by default).\n \n-\t-externalip=X   You can tell bitcoin about its publicly reachable address using\n-\t                this option, and this can be a .onion address. Given the above\n-\t                configuration, you can find your .onion address in\n-\t                /var/lib/tor/bitcoin-service/hostname. For connections\n-\t                coming from unroutable addresses (such as 127.0.0.1, where the\n-\t                Tor proxy typically runs), .onion addresses are given\n-\t                preference for your node to advertise itself with.\n+    -externalip=X   You can tell bitcoin about its publicly reachable address using\n+                    this option, and this can be a .onion address. Given the above\n+                    configuration, you can find your .onion address in\n+                    /var/lib/tor/bitcoin-service/hostname. For connections\n+                    coming from unroutable addresses (such as 127.0.0.1, where the\n+                    Tor proxy typically runs), .onion addresses are given\n+                    preference for your node to advertise itself with.\n \n-\t-listen         You'll need to enable listening for incoming connections, as this\n-\t                is off by default behind a proxy.\n+    -listen         You'll need to enable listening for incoming connections, as this\n+                    is off by default behind a proxy.\n \n-\t-discover       When -externalip is specified, no attempt is made to discover local\n-\t                IPv4 or IPv6 addresses. If you want to run a dual stack, reachable\n-\t                from both Tor and IPv4 (or IPv6), you'll need to either pass your\n-\t                other addresses using -externalip, or explicitly enable -discover.\n-\t                Note that both addresses of a dual-stack system may be easily\n-\t                linkable using traffic analysis.\n+    -discover       When -externalip is specified, no attempt is made to discover local\n+                    IPv4 or IPv6 addresses. If you want to run a dual stack, reachable\n+                    from both Tor and IPv4 (or IPv6), you'll need to either pass your\n+                    other addresses using -externalip, or explicitly enable -discover.\n+                    Note that both addresses of a dual-stack system may be easily\n+                    linkable using traffic analysis.\n \n In a typical situation, where you're only reachable via Tor, this should suffice:\n \n-\t./bitcoind -proxy=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -listen\n+    ./bitcoind -proxy=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -listen\n \n (obviously, replace the .onion address with your own). It should be noted that you still\n listen on all devices and another node could establish a clearnet connection, when knowing\n your address. To mitigate this, additionally bind the address of your Tor proxy:\n \n-\t./bitcoind ... -bind=127.0.0.1\n+    ./bitcoind ... -bind=127.0.0.1\n \n If you don't care too much about hiding your node, and want to be reachable on IPv4\n as well, use `discover` instead:\n \n-\t./bitcoind ... -discover\n+    ./bitcoind ... -discover\n \n and open port 8333 on your firewall (or use -upnp).\n \n If you only want to use Tor to reach .onion addresses, but not use it as a proxy\n for normal IPv4/IPv6 communication, use:\n \n-\t./bitcoind -onion=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -discover\n+    ./bitcoind -onion=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -discover\n \n ## 3. Automatically listen on Tor\n "
      },
      {
        "sha": "7651eec5cdf2aa54230948d2da03577cf74e6876",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -3,14 +3,14 @@ Translations\n \n The Bitcoin-Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Bitcoin-Core makes use of the Transifex online translation management tool.\n \n-### Helping to translate (using Transifex)\n+## Helping to translate (using Transifex)\n Transifex is setup to monitor the GitHub repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface.\n \n Multiple language support is critical in assisting Bitcoin\u2019s global adoption, and growth. One of Bitcoin\u2019s greatest strengths is cross-border money transfers, any help making that easier is greatly appreciated.\n \n See the [Transifex Bitcoin project](https://www.transifex.com/bitcoin/bitcoin/) to assist in translations. You should also join the translation mailing list for announcements - see details below.\n \n-### Writing code with translations\n+## Writing code with translations\n We use automated scripts to help extract translations in both Qt, and non-Qt source files. It is rarely necessary to manually edit the files in `src/qt/locale/`. The translation source files must adhere to the following format:\n `bitcoin_xx_YY.ts or bitcoin_xx.ts`\n \n@@ -24,12 +24,12 @@ make translate\n \n `contrib/bitcoin-qt.pro` takes care of generating `.qm` (binary compiled) files from `.ts` (source files) files. It\u2019s mostly automated, and you shouldn\u2019t need to worry about it.\n \n-**Example Qt translation**\n+### Example Qt translation\n ```cpp\n QToolBar *toolbar = addToolBar(tr(\"Tabs toolbar\"));\n ```\n \n-### Creating a pull-request\n+## Creating a pull-request\n For general PRs, you shouldn\u2019t include any updates to the translation source files. They will be updated periodically, primarily around pre-releases, allowing time for any new phrases to be translated before public releases. This is also important in avoiding translation related merge conflicts.\n \n When an updated source file is merged into the GitHub repo, Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n@@ -40,17 +40,17 @@ git add src/qt/bitcoinstrings.cpp src/qt/locale/bitcoin_en.ts\n git commit\n ```\n \n-### Creating a Transifex account\n+## Creating a Transifex account\n Visit the [Transifex Signup](https://www.transifex.com/signup/) page to create an account. Take note of your username and password, as they will be required to configure the command-line tool.\n \n You can find the Bitcoin translation project at [https://www.transifex.com/bitcoin/bitcoin/](https://www.transifex.com/bitcoin/bitcoin/).\n \n-### Installing the Transifex client command-line tool\n+## Installing the Transifex client command-line tool\n The client is used to fetch updated translations. If you are having problems, or need more details, see [https://docs.transifex.com/client/installing-the-client](https://docs.transifex.com/client/installing-the-client)\n \n `pip install transifex-client`\n \n-Setup your Transifex client config as follows. Please *ignore the token field*.\n+Setup your Transifex client config as follows (**ignore the token field**):\n \n ```ini\n nano ~/.transifexrc\n@@ -70,19 +70,19 @@ To assist in updating translations, a helper script is available in the [maintai\n 1. `python3 ../bitcoin-maintainer-tools/update-translations.py`\n 2. `git add` new translations from `src/qt/locale/`\n 3. Update `src/qt/bitcoin_locale.qrc` manually or via\n-```bash\n-git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/        <file alias=\"\\2\">locale\\/\\1.qm<\\/file>/'\n-```\n+   ```bash\n+   git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/        <file alias=\"\\2\">locale\\/\\1.qm<\\/file>/'\n+   ```\n 4. Update `src/Makefile.qt.include` manually or via\n-```bash\n-git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/  qt\\/locale\\/\\1.ts \\\\/'\n-```\n+   ```bash\n+   git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/  qt\\/locale\\/\\1.ts \\\\/'\n+   ```\n 5. Update `build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj` or via\n-```bash\n-git ls-files src/qt/locale/*ts|xargs -n1 basename |\n-  sed 's/@/%40/' |\n-  sed 's/\\(bitcoin_\\(.*\\)\\).ts/    <None Include=\"..\\\\..\\\\src\\\\qt\\\\locale\\\\\\1.ts\">\\n      <DeploymentContent>true<\\/DeploymentContent>\\n    <\\/None>/'\n-```\n+   ```bash\n+   git ls-files src/qt/locale/*ts|xargs -n1 basename |\n+     sed 's/@/%40/' |\n+     sed 's/\\(bitcoin_\\(.*\\)\\).ts/    <None Include=\"..\\\\..\\\\src\\\\qt\\\\locale\\\\\\1.ts\">\\n      <DeploymentContent>true<\\/DeploymentContent>\\n    <\\/None>/'\n+   ```\n \n **Do not directly download translations** one by one from the Transifex website, as we do a few post-processing steps before committing the translations.\n "
      },
      {
        "sha": "91c1ce504938df9ea57f9f67dc62536f744126c8",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -49,7 +49,7 @@ By default, the ZeroMQ feature is automatically compiled in if the\n necessary prerequisites are found.  To disable, use --disable-zmq\n during the *configure* step of building bitcoind:\n \n-    $ ./configure --disable-zmq (other options)\n+    ./configure --disable-zmq (other options)\n \n To actually enable operation, one must set the appropriate options on\n the command line or in the configuration file."
      },
      {
        "sha": "09eaaf26a700df670108c91815f6140b61458ad1",
        "filename": "share/rpcauth/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/share/rpcauth/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/share/rpcauth/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,12 +1,12 @@\n RPC Tools\n----------------------\n+=========\n \n-### [RPCAuth](/share/rpcauth) ###\n+## [RPCAuth](/share/rpcauth.py)\n \n ```\n-usage: rpcauth.py [-h] username [password]\n+Usage: rpcauth.py [-h] username [password]\n \n-Create login credentials for a JSON-RPC user\n+Create login credentials for a JSON-RPC user.\n \n positional arguments:\n   username    the username for authentication"
      },
      {
        "sha": "704131268b437b35bb1c7314defe54e5bcb52443",
        "filename": "src/qt/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/src/qt/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/src/qt/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,4 +1,6 @@\n-This directory contains the BitcoinQT graphical user interface (GUI). It uses the cross-platform framework [Qt](https://www1.qt.io/developers/).\n+# Qt\n+\n+This directory contains the Bitcoin-Qt graphical user interface (GUI). It uses the cross-platform framework [Qt](https://www1.qt.io/developers/).\n \n The current precise version for Qt 5 is specified in [qt.mk](/depends/packages/qt.mk).\n "
      },
      {
        "sha": "171ce0e01888df0ecb9b9163a834883a59adb867",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,4 +1,4 @@\n-### Compiling/running unit tests\n+# Compiling/running unit tests\n \n Unit tests will be automatically compiled if dependencies were met in `./configure`\n and tests weren't explicitly disabled.\n@@ -12,14 +12,14 @@ to run the bitcoind tests.\n \n To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n .cpp files in the `test/` directory or add new .cpp files that\n-implement new BOOST_AUTO_TEST_SUITE sections.\n+implement new `BOOST_AUTO_TEST_SUITE` sections.\n \n To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n \n To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n the `src/qt/test/test_main.cpp` file.\n \n-### Running individual tests\n+## Running individual tests\n \n test_bitcoin has some built-in command-line arguments; for\n example, to run just the getarg_tests verbosely:\n@@ -32,7 +32,7 @@ example, to run just the getarg_tests verbosely:\n \n Run `test_bitcoin --help` for the full list.\n \n-### Note on adding test cases\n+## Note on adding test cases\n \n The sources in this directory are unit test cases.  Boost includes a\n unit testing framework, and since bitcoin already uses boost, it makes"
      },
      {
        "sha": "14e528ce4d61d7648d44ef09f780b4dad8cbc59d",
        "filename": "src/test/data/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/src/test/data/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/src/test/data/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,5 +1,5 @@\n Description\n-------------\n+===========\n \n This directory contains data-driven tests for various aspects of Bitcoin.\n \n@@ -9,4 +9,3 @@ License\n The data files in this directory are distributed under the MIT software\n license, see the accompanying file COPYING or\n http://www.opensource.org/licenses/mit-license.php.\n-"
      },
      {
        "sha": "2e143ceaedc22b71a9ca3f67cff931a9852d9167",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,3 +1,5 @@\n+# Integration Tests\n+\n This directory contains integration tests that test bitcoind and its\n utilities in their entirety. It does not contain unit tests, which\n can be found in [/src/test](/src/test), [/src/wallet/test](/src/wallet/test),\n@@ -15,11 +17,10 @@ bitcoin-tx.\n The util tests are run as part of `make check` target. The functional\n tests and lint scripts can be run as explained in the sections below.\n \n-# Running tests locally\n+## Running tests locally\n \n Before tests can be run locally, Bitcoin Core must be built.  See the [building instructions](/doc#building) for help.\n \n-\n ### Functional tests\n \n #### Dependencies\n@@ -119,7 +120,6 @@ or\n pkill -9 bitcoind\n ```\n \n-\n ##### Data directory cache\n \n A pre-mined blockchain with 200 blocks is generated the first time a\n@@ -245,7 +245,7 @@ You can run all the shell-based lint tests by running:\n test/lint/lint-all.sh\n ```\n \n-# Writing functional tests\n+## Writing functional tests\n \n You are encouraged to write functional tests for new or existing features.\n Further information about the functional test framework and individual"
      },
      {
        "sha": "c6e21d2b3310b1a1d1c40955c194595c8a912eb2",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,21 +1,21 @@\n # Functional tests\n \n-### Writing Functional Tests\n+## Writing Functional Tests\n \n-#### Example test\n+### Example test\n \n The [example_test.py](example_test.py) is a heavily commented example of a test case that uses both\n the RPC and P2P interfaces. If you are writing your first test, copy that file\n and modify to fit your needs.\n \n-#### Coverage\n+### Coverage\n \n Running `test_runner.py` with the `--coverage` argument tracks which RPCs are\n called by the tests and prints a report of uncovered RPCs in the summary. This\n can be used (along with the `--extended` argument) to find out which RPCs we\n don't have test cases for.\n \n-#### Style guidelines\n+### Style guidelines\n \n - Where possible, try to adhere to [PEP-8 guidelines](https://www.python.org/dev/peps/pep-0008/)\n - Use a python linter like flake8 before submitting PRs to catch common style\n@@ -34,7 +34,7 @@ don't have test cases for.\n   the subclass, then locally-defined helper methods, then the `run_test()` method.\n - Use `'{}'.format(x)` for string formatting, not `'%s' % x`.\n \n-#### Naming guidelines\n+### Naming guidelines\n \n - Name the test `<area>_test.py`, where area can be one of the following:\n     - `feature` for tests for full features that aren't wallet/mining/mempool, eg `feature_rbf.py`\n@@ -49,7 +49,7 @@ don't have test cases for.\n     - exception: for tests for specific RPCs or command line options which don't include underscores, name the test after the exact RPC or argument name, eg `rpc_decodescript.py`, not `rpc_decode_script.py`\n - Don't use the redundant word `test` in the name, eg `interface_zmq.py`, not `interface_zmq_test.py`\n \n-#### General test-writing advice\n+### General test-writing advice\n \n - Set `self.num_nodes` to the minimum number of nodes necessary for the test.\n   Having additional unrequired nodes adds to the execution time of the test as\n@@ -71,7 +71,7 @@ don't have test cases for.\n   from typographical errors or usage of the objects outside of their intended\n   purpose.\n \n-#### RPC and P2P definitions\n+### RPC and P2P definitions\n \n Test writers may find it helpful to refer to the definitions for the RPC and\n P2P messages. These can be found in the following source files:\n@@ -80,7 +80,7 @@ P2P messages. These can be found in the following source files:\n - `/src/wallet/rpc*` for wallet RPCs\n - `ProcessMessage()` in `/src/net_processing.cpp` for parsing P2P messages\n \n-#### Using the P2P interface\n+### Using the P2P interface\n \n - `messages.py` contains all the definitions for objects that pass\n over the network (`CBlock`, `CTransaction`, etc, along with the network-level\n@@ -98,33 +98,33 @@ P2PInterface object and override the callback methods.\n - Can be used to write tests where specific P2P protocol behavior is tested.\n Examples tests are `p2p_unrequested_blocks.py`, `p2p_compactblocks.py`.\n \n-### test-framework modules\n+## test-framework modules\n \n-#### [test_framework/authproxy.py](test_framework/authproxy.py)\n+## [test_framework/authproxy.py](test_framework/authproxy.py)\n Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n \n-#### [test_framework/test_framework.py](test_framework/test_framework.py)\n+### [test_framework/test_framework.py](test_framework/test_framework.py)\n Base class for functional tests.\n \n-#### [test_framework/util.py](test_framework/util.py)\n+### [test_framework/util.py](test_framework/util.py)\n Generally useful functions.\n \n-#### [test_framework/mininode.py](test_framework/mininode.py)\n+### [test_framework/mininode.py](test_framework/mininode.py)\n Basic code to support P2P connectivity to a bitcoind.\n \n-#### [test_framework/script.py](test_framework/script.py)\n+### [test_framework/script.py](test_framework/script.py)\n Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n \n-#### [test_framework/key.py](test_framework/key.py)\n+### [test_framework/key.py](test_framework/key.py)\n Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n \n-#### [test_framework/bignum.py](test_framework/bignum.py)\n+### [test_framework/bignum.py](test_framework/bignum.py)\n Helpers for script.py\n \n-#### [test_framework/blocktools.py](test_framework/blocktools.py)\n+### [test_framework/blocktools.py](test_framework/blocktools.py)\n Helper functions for creating blocks and transactions.\n \n-### Benchmarking with perf\n+## Benchmarking with perf\n \n An easy way to profile node performance during functional tests is provided\n for Linux platforms using `perf`.\n@@ -151,7 +151,7 @@ To see useful textual output, run\n perf report -i /path/to/datadir/send-big-msgs.perf.data.xxxx --stdio | c++filt | less\n ```\n \n-#### See also:\n+### See also:\n \n - [Installing perf](https://askubuntu.com/q/50145)\n - [Perf examples](http://www.brendangregg.com/perf.html)"
      },
      {
        "sha": "ddc8a4e06f5776398ca3622613c595998fa6aa0b",
        "filename": "test/functional/data/wallets/high_minversion/generate.md",
        "status": "renamed",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/test/functional/data/wallets/high_minversion/generate.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/test/functional/data/wallets/high_minversion/generate.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/wallets/high_minversion/generate.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,3 +1,5 @@\n+# Generating the `high_minversion` wallet\n+\n The wallet has been created by starting Bitcoin Core with the options\n `-regtest -datadir=/tmp -nowallet -walletdir=$(pwd)/test/functional/data/wallets/`.\n ",
        "previous_filename": "test/functional/data/wallets/high_minversion/GENERATE.md"
      },
      {
        "sha": "1fac3d3dbd41fbe24cb89969db088a4307b79c08",
        "filename": "test/lint/README.md",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147dfb4294ea3d34114625b406f2777891ae3f52/test/lint/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147dfb4294ea3d34114625b406f2777891ae3f52/test/lint/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/README.md?ref=147dfb4294ea3d34114625b406f2777891ae3f52",
        "patch": "@@ -1,15 +1,15 @@\n-This folder contains lint scripts.\n+# Lint Scripts\n+\n+## check-doc.py\n \n-check-doc.py\n-============\n Check for missing documentation of command line options.\n \n-commit-script-check.sh\n-======================\n+## commit-script-check.sh\n+\n Verification of [scripted diffs](/doc/developer-notes.md#scripted-diffs).\n \n-git-subtree-check.sh\n-====================\n+## git-subtree-check.sh\n+\n Run this script from the root of the repository to verify that a subtree matches the contents of\n the commit it claims to have been updated to.\n \n@@ -24,6 +24,6 @@ Usage: `git-subtree-check.sh DIR (COMMIT)`\n \n `COMMIT` may be omitted, in which case `HEAD` is used.\n \n-lint-all.sh\n-===========\n+## lint-all.sh\n+\n Calls other scripts with the `lint-` prefix."
      }
    ]
  }
]