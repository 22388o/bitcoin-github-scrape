[
  {
    "sha": "70a01202cf3facdb251214ea12fae5a149f3b823",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGEwMTIwMmNmM2ZhY2RiMjUxMjE0ZWExMmZhZTVhMTQ5ZjNiODIz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-05-23T09:45:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-05-23T09:47:16Z"
      },
      "message": "detection of conflicts between wallet tx's and the blockchain\n\nChanges:\n* added mapWalletInputs to track wallet tx's that use a certain outpoint\n* added AddWalletTx to update mapWallet and keep mapWalletInputs up-to-date\n* CWalletTx's can be in a rejected state and optionally \"conflicting\", in\nwhich case they are ignored for balances and coin selection.\n* rejected tx's are stored separately in wallet.dat (as 'rejtx' key, and\nwith an additional 'rejected' field)\n* new function MarkConflicting() marks a tx conflicting, and all dependent\nwallet transactions rejected.\n* a new function SyncWithWallet will do both adding to the block chain and\ncheck for conflicts, and is called when connecting blocks, for incoming\ntransactions, and when rescanning\n* WalletUpdateSpend works now per-transaction, and is not called anymore\nfrom script, but from AddToWallet and SyncWithWallet\n* GUI is updated to show rejected transactions as \"rejected\" instead of\n\"0/unconfirmed\", with credit and debet 0 (like unmatured generations)\n\nRe-enabling of transactions after they would stop being conflicting after\na block chain reorganisation is not supported yet. The is no RPC call to\nretrieve information about rejected transactions.",
      "tree": {
        "sha": "cf77240b9f63ec0a13aad3fd0b0ae2a099dd71b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf77240b9f63ec0a13aad3fd0b0ae2a099dd71b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70a01202cf3facdb251214ea12fae5a149f3b823",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70a01202cf3facdb251214ea12fae5a149f3b823",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70a01202cf3facdb251214ea12fae5a149f3b823",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70a01202cf3facdb251214ea12fae5a149f3b823/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69a27a4ec68e7a2ea6e481b950d11f5aea42c814",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69a27a4ec68e7a2ea6e481b950d11f5aea42c814",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69a27a4ec68e7a2ea6e481b950d11f5aea42c814"
      }
    ],
    "stats": {
      "total": 312,
      "additions": 240,
      "deletions": 72
    },
    "files": [
      {
        "sha": "c186ad0813db057d3187b0744634b756b3b9d5a9",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a01202cf3facdb251214ea12fae5a149f3b823/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a01202cf3facdb251214ea12fae5a149f3b823/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=70a01202cf3facdb251214ea12fae5a149f3b823",
        "patch": "@@ -701,16 +701,18 @@ bool CWalletDB::LoadWallet()\n                 ssKey >> strAddress;\n                 ssValue >> mapAddressBook[strAddress];\n             }\n-            else if (strType == \"tx\")\n+            else if (strType == \"tx\" || strType == \"rejtx\")\n             {\n                 uint256 hash;\n                 ssKey >> hash;\n-                CWalletTx& wtx = mapWallet[hash];\n+                CWalletTx wtx;\n                 ssValue >> wtx;\n \n                 if (wtx.GetHash() != hash)\n                     printf(\"Error in wallet.dat, hash mismatch\\n\");\n \n+                AddWalletTx(hash, wtx);\n+\n                 // Undo serialize changes in 31600\n                 if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n                 {\n@@ -986,6 +988,18 @@ void CWalletDB::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n     }\n }\n \n+bool CWalletDB::WriteTx(uint256 hash, const CWalletTx& wtx)\n+{\n+    nWalletDBUpdated++;\n+    if (wtx.IsRejected())\n+    {\n+        Erase(make_pair(string(\"tx\"),hash));\n+        return Write(make_pair(string(\"rejtx\"), hash), wtx);\n+    }\n+    else\n+        return Write(make_pair(string(\"tx\"), hash), wtx);\n+}\n+\n void CWalletDB::KeepKey(int64 nIndex)\n {\n     // Remove from key pool"
      },
      {
        "sha": "de4ada86657d2d271c27a7a84ad13210e0fda1cf",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a01202cf3facdb251214ea12fae5a149f3b823/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a01202cf3facdb251214ea12fae5a149f3b823/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=70a01202cf3facdb251214ea12fae5a149f3b823",
        "patch": "@@ -392,16 +392,12 @@ class CWalletDB : public CDB\n         return Read(std::make_pair(std::string(\"tx\"), hash), wtx);\n     }\n \n-    bool WriteTx(uint256 hash, const CWalletTx& wtx)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"tx\"), hash), wtx);\n-    }\n+    bool WriteTx(uint256 hash, const CWalletTx& wtx);\n \n     bool EraseTx(uint256 hash)\n     {\n         nWalletDBUpdated++;\n-        return Erase(std::make_pair(std::string(\"tx\"), hash));\n+        return Erase(std::make_pair(std::string(\"tx\"), hash)) || Erase(std::make_pair(std::string(\"rejtx\"), hash));\n     }\n \n     bool ReadKey(const std::vector<unsigned char>& vchPubKey, CPrivKey& vchPrivKey)"
      },
      {
        "sha": "78aef403a3f1bb6b91ffaa8b9c94b0dcbe497c3f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a01202cf3facdb251214ea12fae5a149f3b823/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a01202cf3facdb251214ea12fae5a149f3b823/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=70a01202cf3facdb251214ea12fae5a149f3b823",
        "patch": "@@ -383,7 +383,7 @@ bool AppInit2(int argc, char* argv[])\n     {\n         printf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n         nStart = GetTimeMillis();\n-        ScanForWalletTransactions(pindexRescan);\n+        ScanForWalletTransactions(pindexRescan, true);\n         printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n     }\n \n@@ -395,6 +395,7 @@ bool AppInit2(int argc, char* argv[])\n         printf(\"mapKeys.size() = %d\\n\",         mapKeys.size());\n         printf(\"mapPubKeys.size() = %d\\n\",      mapPubKeys.size());\n         printf(\"mapWallet.size() = %d\\n\",       mapWallet.size());\n+        printf(\"mapWalletInputs.size() = %d\\n\", mapWalletInputs.size());\n         printf(\"mapAddressBook.size() = %d\\n\",  mapAddressBook.size());\n \n     if (!strErrors.empty())"
      },
      {
        "sha": "2b6decb8dd2303433cbc90f0e4f5a0d50120d5b2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 181,
        "deletions": 54,
        "changes": 235,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a01202cf3facdb251214ea12fae5a149f3b823/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a01202cf3facdb251214ea12fae5a149f3b823/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=70a01202cf3facdb251214ea12fae5a149f3b823",
        "patch": "@@ -37,7 +37,8 @@ multimap<uint256, CDataStream*> mapOrphanTransactionsByPrev;\n \n map<uint256, CWalletTx> mapWallet;\n vector<uint256> vWalletUpdated;\n-CCriticalSection cs_mapWallet;\n+CCriticalSection cs_mapWallet; // also used for mapWalletInputs\n+map<COutPoint, uint256> mapWalletInputs; // maps outpoints to the wallettx's that consume them\n \n map<vector<unsigned char>, CPrivKey> mapKeys;\n map<uint160, vector<unsigned char> > mapPubKeys;\n@@ -108,53 +109,89 @@ vector<unsigned char> GenerateNewKey()\n // mapWallet\n //\n \n+// all insertions into mapWallet should happen through this function,\n+// to keep mapWalletInputs up-to-date\n+bool AddWalletTx(uint256& hash, const CWalletTx& wtxIn)\n+{\n+    CRITICAL_BLOCK(cs_mapWallet)\n+    {\n+        mapWallet[hash] = wtxIn;\n+        mapWallet[hash].AddToWalletInputs();\n+    }\n+    return true;\n+}\n+\n+void WalletUpdateSpent(const CTransaction &tx, bool fActive = true)\n+{\n+    CRITICAL_BLOCK(cs_mapWallet)\n+    {\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        {\n+            map<uint256, CWalletTx>::iterator mi = mapWallet.find(txin.prevout.hash);\n+            if (mi != mapWallet.end())\n+            {\n+                CWalletTx& wtx = (*mi).second;\n+                if (wtx.IsSpent(txin.prevout.n) != fActive && wtx.vout[txin.prevout.n].IsMine())\n+                {\n+                    printf(\"WalletUpdateSpent found %sspent coin %sbc %s\\n\", fActive ? \"\" : \"un\", FormatMoney(wtx.GetCredit()).c_str(), wtx.GetHash().ToString().c_str());\n+                    wtx.MarkSpent(txin.prevout.n, fActive);\n+                    wtx.WriteToDisk();\n+                    vWalletUpdated.push_back(txin.prevout.hash);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n bool AddToWallet(const CWalletTx& wtxIn)\n {\n     uint256 hash = wtxIn.GetHash();\n     CRITICAL_BLOCK(cs_mapWallet)\n     {\n-        // Inserts only if not already there, returns tx inserted or tx found\n-        pair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n-        CWalletTx& wtx = (*ret.first).second;\n-        bool fInsertedNew = ret.second;\n-        if (fInsertedNew)\n-            wtx.nTimeReceived = GetAdjustedTime();\n-\n         bool fUpdated = false;\n-        if (!fInsertedNew)\n+        bool fInsertedNew = false;\n+        CWalletTx* pwtx;\n+        if (mapWallet.count(hash))\n         {\n+            pwtx = &mapWallet[hash];\n             // Merge\n-            if (wtxIn.hashBlock != 0 && wtxIn.hashBlock != wtx.hashBlock)\n+            if (wtxIn.hashBlock != 0 && wtxIn.hashBlock != pwtx->hashBlock)\n             {\n-                wtx.hashBlock = wtxIn.hashBlock;\n+                pwtx->hashBlock = wtxIn.hashBlock;\n                 fUpdated = true;\n             }\n-            if (wtxIn.nIndex != -1 && (wtxIn.vMerkleBranch != wtx.vMerkleBranch || wtxIn.nIndex != wtx.nIndex))\n+            if (wtxIn.nIndex != -1 && (wtxIn.vMerkleBranch != pwtx->vMerkleBranch || wtxIn.nIndex != pwtx->nIndex))\n             {\n-                wtx.vMerkleBranch = wtxIn.vMerkleBranch;\n-                wtx.nIndex = wtxIn.nIndex;\n+                pwtx->vMerkleBranch = wtxIn.vMerkleBranch;\n+                pwtx->nIndex = wtxIn.nIndex;\n                 fUpdated = true;\n             }\n-            if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n+            if (wtxIn.fFromMe && wtxIn.fFromMe != pwtx->fFromMe)\n             {\n-                wtx.fFromMe = wtxIn.fFromMe;\n+                pwtx->fFromMe = wtxIn.fFromMe;\n                 fUpdated = true;\n             }\n-            fUpdated |= wtx.UpdateSpent(wtxIn.vfSpent);\n+            fUpdated |= pwtx->UpdateSpent(wtxIn.vfSpent);\n+        }\n+        else\n+        {\n+            AddWalletTx(hash, wtxIn);\n+            pwtx = &mapWallet[hash];\n+            pwtx->nTimeReceived = GetAdjustedTime();\n+            fInsertedNew = true;\n         }\n-\n         //// debug print\n         printf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString().substr(0,10).c_str(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n \n         // Write to disk\n-        if (fInsertedNew || fUpdated)\n-            if (!wtx.WriteToDisk())\n+        if (fUpdated || fInsertedNew)\n+            if (!pwtx->WriteToDisk())\n                 return false;\n \n         // If default receiving address gets used, replace it with a new one\n         CScript scriptDefaultKey;\n         scriptDefaultKey.SetBitcoinAddress(vchDefaultKey);\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        BOOST_FOREACH(const CTxOut& txout, pwtx->vout)\n         {\n             if (txout.scriptPubKey == scriptDefaultKey)\n             {\n@@ -165,20 +202,43 @@ bool AddToWallet(const CWalletTx& wtxIn)\n             }\n         }\n \n+        // since AddToWallet is called directly for self-originating transactions, check for consumption of own coins\n+        WalletUpdateSpent(*pwtx);\n+\n         // Notify UI\n         vWalletUpdated.push_back(hash);\n     }\n \n+    \n     // Refresh UI\n     MainFrameRepaint();\n     return true;\n }\n \n-bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false)\n+// pblock must point to a block in the main chain, or be NULL\n+bool SyncWithWallet(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false)\n {\n     uint256 hash = tx.GetHash();\n     bool fExisted = mapWallet.count(hash);\n     if (fExisted && !fUpdate) return false;\n+    if (!fExisted && pblock && !tx.IsCoinBase())\n+    {\n+        // check for conflicts with wallet\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        {\n+            map<COutPoint, uint256>::iterator mi = mapWalletInputs.find(txin.prevout);\n+            if (mi != mapWalletInputs.end())\n+            {\n+                CWalletTx& wtx = mapWallet[(*mi).second]; // should always exist\n+                if (wtx.GetHash() != hash)\n+                {\n+                    printf(\"Scanned tx %s conflicts with wallet tx %s (both using %s:%i)\\n\",tx.GetHash().GetHex().c_str(), wtx.GetHash().GetHex().c_str(),txin.prevout.hash.GetHex().c_str(),txin.prevout.n);\n+                    wtx.MarkConflicting(true);\n+                    wtx.WriteToDisk();\n+                }\n+            }\n+        }\n+    }\n     if (fExisted || tx.IsMine() || tx.IsFromMe())\n     {\n         CWalletTx wtx(tx);\n@@ -187,48 +247,33 @@ bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool\n             wtx.SetMerkleBranch(pblock);\n         return AddToWallet(wtx);\n     }\n+    else\n+        WalletUpdateSpent(tx);\n     return false;\n }\n \n-bool EraseFromWallet(uint256 hash)\n+bool UnsyncWithWallet(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false)\n {\n-    CRITICAL_BLOCK(cs_mapWallet)\n-    {\n-        if (mapWallet.erase(hash))\n-            CWalletDB().EraseTx(hash);\n-    }\n-    return true;\n }\n \n-void WalletUpdateSpent(const COutPoint& prevout)\n+// unused, for now\n+bool EraseFromWallet(uint256 hash)\n {\n-    // Anytime a signature is successfully verified, it's proof the outpoint is spent.\n-    // Update the wallet spent flag if it doesn't know due to wallet.dat being\n-    // restored from backup or the user making copies of wallet.dat.\n     CRITICAL_BLOCK(cs_mapWallet)\n     {\n-        map<uint256, CWalletTx>::iterator mi = mapWallet.find(prevout.hash);\n-        if (mi != mapWallet.end())\n+        if (mapWallet.count(hash))\n         {\n-            CWalletTx& wtx = (*mi).second;\n-            if (!wtx.IsSpent(prevout.n) && wtx.vout[prevout.n].IsMine())\n-            {\n-                printf(\"WalletUpdateSpent found spent coin %sbc %s\\n\", FormatMoney(wtx.GetCredit()).c_str(), wtx.GetHash().ToString().c_str());\n-                wtx.MarkSpent(prevout.n);\n-                wtx.WriteToDisk();\n-                vWalletUpdated.push_back(prevout.hash);\n-            }\n+            CWalletTx& wtx = mapWallet[hash];\n+            wtx.RemoveFromWalletInputs();\n+\n+            if (mapWallet.erase(hash))\n+                CWalletDB().EraseTx(hash);\n         }\n     }\n+    return true;\n }\n \n \n-\n-\n-\n-\n-\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // mapOrphanTransactions\n@@ -340,6 +385,85 @@ int64 CTxIn::GetDebit() const\n     return 0;\n }\n \n+void CWalletTx::UpdateRejected(bool fCertainlyRejected = false)\n+{\n+    char fNewRejected = false;\n+    if (fConflicting || fCertainlyRejected)\n+        fNewRejected = true;\n+    else\n+    {\n+        // check whether dependencies are rejected\n+        BOOST_FOREACH(const CTxIn& txin, vin)\n+        {\n+            map<uint256, CWalletTx>::iterator mi = mapWallet.find(txin.prevout.hash);\n+            if (mi != mapWallet.end())\n+                if ((*mi).second.IsRejected())\n+                {\n+                    fNewRejected = true;\n+                    break;\n+                }\n+        }\n+    }\n+\n+    // exit if nothing changed\n+    if (fRejected == fNewRejected)\n+        return;\n+\n+    fRejected = fNewRejected;\n+\n+    // mark parent transaction outputs (un)spent\n+    WalletUpdateSpent(*this, !fRejected);\n+\n+    // recursively mark dependencies (un)rejected\n+    uint256 hash = GetHash();\n+    for (int n = 0; n < vout.size(); n++)\n+    {\n+        map<COutPoint, uint256>::iterator mi = mapWalletInputs.find(COutPoint(hash, n));\n+        if (mi != mapWalletInputs.end())\n+        {\n+            CWalletTx& wtx = mapWallet[(*mi).second]; // should always exist\n+            wtx.UpdateRejected(fNewRejected);\n+        }\n+    }\n+\n+    if (!fNewRejected)\n+        AddToWalletInputs();\n+\n+}\n+\n+void CWalletTx::MarkConflicting(bool fConflict)\n+{\n+    if (fConflict && GetDepthInMainChain() > 0)\n+        throw runtime_error(\"MarkConflicting() : transaction is already confirmed\");\n+    fConflicting = fConflict;\n+    UpdateRejected();\n+}\n+\n+void CWalletTx::RemoveFromWalletInputs()\n+{\n+    if (IsCoinBase())\n+        return;\n+\n+    uint256 hash = GetHash();\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        if (mapWalletInputs.count(txin.prevout))\n+            if (mapWalletInputs[txin.prevout] == hash)\n+                mapWalletInputs.erase(txin.prevout);\n+    }\n+}\n+\n+void CWalletTx::AddToWalletInputs()\n+{\n+    // coinbase transactions do not have any real inputs\n+    if (IsCoinBase())\n+        return;\n+\n+    uint256 hash = GetHash();\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+        mapWalletInputs[txin.prevout] = hash;\n+}\n+\n int64 CWalletTx::GetTxTime() const\n {\n     if (!fTimeReceivedIsTxTime && hashBlock != 0)\n@@ -405,6 +529,9 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n     listSent.clear();\n     strSentAccount = strFromAccount;\n \n+    if (IsRejected())\n+        return;\n+\n     if (IsCoinBase())\n     {\n         if (GetBlocksToMaturity() > 0)\n@@ -884,7 +1011,7 @@ bool CWalletTx::AcceptWalletTransaction(CTxDB& txdb, bool fCheckInputs)\n     return false;\n }\n \n-int ScanForWalletTransactions(CBlockIndex* pindexStart)\n+int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n {\n     int ret = 0;\n \n@@ -897,7 +1024,7 @@ int ScanForWalletTransactions(CBlockIndex* pindexStart)\n             block.ReadFromDisk(pindex, true);\n             BOOST_FOREACH(CTransaction& tx, block.vtx)\n             {\n-                if (AddToWalletIfInvolvingMe(tx, &block))\n+                if (SyncWithWallet(tx, &block, fUpdate))\n                     ret++;\n             }\n             pindex = pindex->pnext;\n@@ -1443,7 +1570,7 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n \n     // Watch for transactions paying to me\n     BOOST_FOREACH(CTransaction& tx, vtx)\n-        AddToWalletIfInvolvingMe(tx, this, true);\n+        SyncWithWallet(tx, this, true);\n \n     return true;\n }\n@@ -2686,7 +2813,7 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         bool fMissingInputs = false;\n         if (tx.AcceptToMemoryPool(true, &fMissingInputs))\n         {\n-            AddToWalletIfInvolvingMe(tx, NULL, true);\n+            SyncWithWallet(tx, NULL, true);\n             RelayMessage(inv, vMsg);\n             mapAlreadyAskedFor.erase(inv);\n             vWorkQueue.push_back(inv.hash);\n@@ -2707,7 +2834,7 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     if (tx.AcceptToMemoryPool(true))\n                     {\n                         printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n-                        AddToWalletIfInvolvingMe(tx, NULL, true);\n+                        SyncWithWallet(tx, NULL, true);\n                         RelayMessage(inv, vMsg);\n                         mapAlreadyAskedFor.erase(inv);\n                         vWorkQueue.push_back(inv.hash);"
      },
      {
        "sha": "b5c6a6a4196d8e8e8c1e42389b18a130a38f2ac7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 37,
        "deletions": 4,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a01202cf3facdb251214ea12fae5a149f3b823/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a01202cf3facdb251214ea12fae5a149f3b823/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=70a01202cf3facdb251214ea12fae5a149f3b823",
        "patch": "@@ -84,9 +84,10 @@ FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszM\n FILE* AppendBlockFile(unsigned int& nFileRet);\n bool AddKey(const CKey& key);\n std::vector<unsigned char> GenerateNewKey();\n+bool AddWalletTx(uint256& hash, const CWalletTx& wtxIn);\n bool AddToWallet(const CWalletTx& wtxIn);\n void WalletUpdateSpent(const COutPoint& prevout);\n-int ScanForWalletTransactions(CBlockIndex* pindexStart);\n+int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n void ReacceptWalletTransactions();\n bool LoadBlockIndex(bool fAllowNew=true);\n void PrintBlockTree();\n@@ -793,7 +794,11 @@ class CWalletTx : public CMerkleTx\n     unsigned int nTimeReceived;  // time received by this node\n     char fFromMe;\n     std::string strFromAccount;\n+\n+    // Any additions to CWalletTx must be added to mapValue so older versions don't throw away the new data.\n     std::vector<char> vfSpent;\n+    char fConflicting; // conflicts with block chain\n+    char fRejected;    // rejected: either conflicting, or depending on a rejected transaction\n \n     // memory only\n     mutable char fDebitCached;\n@@ -847,6 +852,8 @@ class CWalletTx : public CMerkleTx\n         nTimeDisplayed = 0;\n         nLinesDisplayed = 0;\n         fConfirmedDisplayed = false;\n+        fRejected = false;\n+        fConflicting = false;\n     }\n \n     IMPLEMENT_SERIALIZE\n@@ -859,6 +866,8 @@ class CWalletTx : public CMerkleTx\n         if (!fRead)\n         {\n             pthis->mapValue[\"fromaccount\"] = pthis->strFromAccount;\n+            if (pthis->fRejected)\n+                pthis->mapValue[\"rejected\"] = (pthis->fConflicting ? \"C\" : \"R\");\n \n             std::string str;\n             BOOST_FOREACH(char f, vfSpent)\n@@ -882,6 +891,8 @@ class CWalletTx : public CMerkleTx\n         if (fRead)\n         {\n             pthis->strFromAccount = pthis->mapValue[\"fromaccount\"];\n+            pthis->fConflicting = pthis->mapValue[\"rejected\"] == \"C\";\n+            pthis->fRejected = pthis->fConflicting || pthis->mapValue[\"rejected\"] == \"R\";\n \n             if (mapValue.count(\"spent\"))\n                 BOOST_FOREACH(char c, pthis->mapValue[\"spent\"])\n@@ -890,6 +901,7 @@ class CWalletTx : public CMerkleTx\n                 pthis->vfSpent.assign(vout.size(), fSpent);\n         }\n \n+        pthis->mapValue.erase(\"rejected\");\n         pthis->mapValue.erase(\"fromaccount\");\n         pthis->mapValue.erase(\"version\");\n         pthis->mapValue.erase(\"spent\");\n@@ -923,14 +935,14 @@ class CWalletTx : public CMerkleTx\n         fChangeCached = false;\n     }\n \n-    void MarkSpent(unsigned int nOut)\n+    void MarkSpent(unsigned int nOut, bool fSpent = true)\n     {\n         if (nOut >= vout.size())\n             throw std::runtime_error(\"CWalletTx::MarkSpent() : nOut out of range\");\n         vfSpent.resize(vout.size());\n-        if (!vfSpent[nOut])\n+        if (vfSpent[nOut] != fSpent)\n         {\n-            vfSpent[nOut] = true;\n+            vfSpent[nOut] = fSpent;\n             fAvailableCreditCached = false;\n         }\n     }\n@@ -946,6 +958,10 @@ class CWalletTx : public CMerkleTx\n \n     int64 GetDebit() const\n     {\n+        // rejected transactions do not consume\n+        if (IsRejected())\n+            return 0;\n+\n         if (vin.empty())\n             return 0;\n         if (fDebitCached)\n@@ -957,6 +973,10 @@ class CWalletTx : public CMerkleTx\n \n     int64 GetCredit(bool fUseCache=true) const\n     {\n+        // rejected transactions are considered worthless\n+        if (IsRejected())\n+            return 0;\n+\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n             return 0;\n@@ -1025,6 +1045,8 @@ class CWalletTx : public CMerkleTx\n             return true;\n         if (!IsFromMe()) // using wtx's cached debit\n             return false;\n+        if (IsRejected())\n+            return false;\n \n         // If no confirmations but it's from us, we can still\n         // consider it confirmed if all dependencies are confirmed\n@@ -1062,6 +1084,16 @@ class CWalletTx : public CMerkleTx\n         return CWalletDB().WriteTx(GetHash(), *this);\n     }\n \n+    bool IsRejected() const\n+    {\n+        return fRejected;\n+    }\n+\n+    void AddToWalletInputs();\n+    void RemoveFromWalletInputs();\n+    void MarkConflicting(bool fConflicting);\n+    void UpdateRejected(bool fCertainlyRejected);\n+    void UpdateSpents();\n \n     int64 GetTxTime() const;\n     int GetRequestCount() const;\n@@ -2053,6 +2085,7 @@ class CAlert : public CUnsignedAlert\n \n extern std::map<uint256, CTransaction> mapTransactions;\n extern std::map<uint256, CWalletTx> mapWallet;\n+extern std::map<COutPoint, uint256> mapWalletInputs;\n extern std::vector<uint256> vWalletUpdated;\n extern CCriticalSection cs_mapWallet;\n extern std::map<std::vector<unsigned char>, CPrivKey> mapKeys;"
      },
      {
        "sha": "f1dc06aa2ac5b1e5081c380a7338b2d67aa18d94",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a01202cf3facdb251214ea12fae5a149f3b823/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a01202cf3facdb251214ea12fae5a149f3b823/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=70a01202cf3facdb251214ea12fae5a149f3b823",
        "patch": "@@ -1199,10 +1199,5 @@ bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsig\n     if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, nHashType))\n         return false;\n \n-    // Anytime a signature is successfully verified, it's proof the outpoint is spent,\n-    // so lets update the wallet spent flag if it doesn't know due to wallet.dat being\n-    // restored from backup or the user making copies of wallet.dat.\n-    WalletUpdateSpent(txin.prevout);\n-\n     return true;\n }"
      },
      {
        "sha": "d77061b74c45b8d9fb63332b3952250fe2984b73",
        "filename": "src/ui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a01202cf3facdb251214ea12fae5a149f3b823/src/ui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a01202cf3facdb251214ea12fae5a149f3b823/src/ui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.cpp?ref=70a01202cf3facdb251214ea12fae5a149f3b823",
        "patch": "@@ -516,6 +516,8 @@ string FormatTxStatus(const CWalletTx& wtx)\n     }\n     else\n     {\n+        if (wtx.IsRejected())\n+            return \"rejected\";\n         int nDepth = wtx.GetDepthInMainChain();\n         if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n             return strprintf(_(\"%d/offline?\"), nDepth);"
      }
    ]
  }
]