[
  {
    "sha": "12a2f377185a413b740460db36812de22ee2e041",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmEyZjM3NzE4NWE0MTNiNzQwNDYwZGIzNjgxMmRlMjJlZTJlMDQx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-02-16T11:28:37Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-02-19T22:41:06Z"
      },
      "message": "util: Avoid potential uninitialized read in FormatISO8601DateTime(int64_t nTime) by checking gmtime_s/gmtime_r return value",
      "tree": {
        "sha": "f1eec49f16605e5cd0843278187578d087d7fb8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1eec49f16605e5cd0843278187578d087d7fb8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12a2f377185a413b740460db36812de22ee2e041",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a2f377185a413b740460db36812de22ee2e041",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12a2f377185a413b740460db36812de22ee2e041",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a2f377185a413b740460db36812de22ee2e041/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eddcbfb109e592fdf39ea2c38c4d7ba183de3e34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eddcbfb109e592fdf39ea2c38c4d7ba183de3e34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eddcbfb109e592fdf39ea2c38c4d7ba183de3e34"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "45b13a669d67c7fb724611050db0877e56e5c9c8",
        "filename": "ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12a2f377185a413b740460db36812de22ee2e041/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12a2f377185a413b740460db36812de22ee2e041/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz_with_valgrind.sh?ref=12a2f377185a413b740460db36812de22ee2e041",
        "patch": "@@ -12,7 +12,7 @@ export NO_DEPENDS=1\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export RUN_FUZZ_TESTS=true\n-export FUZZ_TESTS_CONFIG=\"--exclude integer,parse_iso8601 --valgrind\"\n+export FUZZ_TESTS_CONFIG=\"--valgrind\"\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer CC=clang-8 CXX=clang++-8\"\n # Use clang-8, instead of default clang on bionic, which is clang-6 and does not come with libfuzzer on aarch64"
      },
      {
        "sha": "f33966f1494d96cd753b83728d9a547c5566ec71",
        "filename": "src/util/time.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12a2f377185a413b740460db36812de22ee2e041/src/util/time.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12a2f377185a413b740460db36812de22ee2e041/src/util/time.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.cpp?ref=12a2f377185a413b740460db36812de22ee2e041",
        "patch": "@@ -94,21 +94,25 @@ std::string FormatISO8601DateTime(int64_t nTime) {\n     struct tm ts;\n     time_t time_val = nTime;\n #ifdef _MSC_VER\n-    gmtime_s(&ts, &time_val);\n+    if (gmtime_s(&ts, &time_val) != 0) {\n #else\n-    gmtime_r(&time_val, &ts);\n+    if (gmtime_r(&time_val, &ts) == nullptr) {\n #endif\n+        return {};\n+    }\n     return strprintf(\"%04i-%02i-%02iT%02i:%02i:%02iZ\", ts.tm_year + 1900, ts.tm_mon + 1, ts.tm_mday, ts.tm_hour, ts.tm_min, ts.tm_sec);\n }\n \n std::string FormatISO8601Date(int64_t nTime) {\n     struct tm ts;\n     time_t time_val = nTime;\n #ifdef _MSC_VER\n-    gmtime_s(&ts, &time_val);\n+    if (gmtime_s(&ts, &time_val) != 0) {\n #else\n-    gmtime_r(&time_val, &ts);\n+    if (gmtime_r(&time_val, &ts) == nullptr) {\n #endif\n+        return {};\n+    }\n     return strprintf(\"%04i-%02i-%02i\", ts.tm_year + 1900, ts.tm_mon + 1, ts.tm_mday);\n }\n \n@@ -124,4 +128,4 @@ int64_t ParseISO8601DateTime(const std::string& str)\n     if (ptime.is_not_a_date_time() || epoch > ptime)\n         return 0;\n     return (ptime - epoch).total_seconds();\n-}\n\\ No newline at end of file\n+}"
      }
    ]
  }
]