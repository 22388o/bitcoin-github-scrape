[
  {
    "sha": "1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTdiYTg0ZTExOTRhZWViM2MyZmM5ZDc5MzM3YTg0NTg2YjgzNGZk",
    "commit": {
      "author": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2019-02-04T03:53:19Z"
      },
      "committer": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2019-02-19T01:49:19Z"
      },
      "message": "Fix lack of warning of unrecognized section names\n\n1. Fix lack of warning by collecting all section names by moving\n   m_config_sections.clear() to ArgsManager::ReadConfigFiles().\n2. Add info(file name, line number) to warning message.\n3. Add a test code to confirm this situation.\n3. Do clear() in ReadConfigString().",
      "tree": {
        "sha": "806c355c4d3c01bfa2d6192007f221f206d3082a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/806c355c4d3c01bfa2d6192007f221f206d3082a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/comments",
    "author": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "904308dca3ff50afb704597c0a65d226dd40f635",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/904308dca3ff50afb704597c0a65d226dd40f635",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/904308dca3ff50afb704597c0a65d226dd40f635"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 36,
      "deletions": 24
    },
    "files": [
      {
        "sha": "f85a0da37e8e00685649d15d51cd5e87e504fe82",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
        "patch": "@@ -815,7 +815,7 @@ void InitParameterInteraction()\n \n     // Warn if unrecognized section name are present in the config file.\n     for (const auto& section : gArgs.GetUnrecognizedSections()) {\n-        InitWarning(strprintf(_(\"Section [%s] is not recognized.\"), section));\n+        InitWarning(strprintf(\"%s:%i \" + _(\"Section [%s] is not recognized.\"), section.m_file, section.m_line, section.m_name));\n     }\n }\n "
      },
      {
        "sha": "e17ae7103b3402591429a869d93eafa1a903dd4a",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
        "patch": "@@ -180,9 +180,10 @@ struct TestArgsManager : public ArgsManager\n         {\n             LOCK(cs_args);\n             m_config_args.clear();\n+            m_config_sections.clear();\n         }\n         std::string error;\n-        BOOST_REQUIRE(ReadConfigStream(streamConfig, error));\n+        BOOST_REQUIRE(ReadConfigStream(streamConfig, \"\", error));\n     }\n     void SetNetworkOnlyArg(const std::string arg)\n     {"
      },
      {
        "sha": "9e02a227cb1e41997cb5137ad1a97ee3e09b220f",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
        "patch": "@@ -354,23 +354,19 @@ const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n     return unsuitables;\n }\n \n-\n-const std::set<std::string> ArgsManager::GetUnrecognizedSections() const\n+const std::list<SectionInfo> ArgsManager::GetUnrecognizedSections() const\n {\n     // Section names to be recognized in the config file.\n     static const std::set<std::string> available_sections{\n         CBaseChainParams::REGTEST,\n         CBaseChainParams::TESTNET,\n         CBaseChainParams::MAIN\n     };\n-    std::set<std::string> diff;\n \n     LOCK(cs_args);\n-    std::set_difference(\n-        m_config_sections.begin(), m_config_sections.end(),\n-        available_sections.begin(), available_sections.end(),\n-        std::inserter(diff, diff.end()));\n-    return diff;\n+    std::list<SectionInfo> unrecognized = m_config_sections;\n+    unrecognized.remove_if([](const SectionInfo& appeared){ return available_sections.find(appeared.m_name) != available_sections.end(); });\n+    return unrecognized;\n }\n \n void ArgsManager::SelectConfigNetwork(const std::string& network)\n@@ -794,7 +790,7 @@ static std::string TrimString(const std::string& str, const std::string& pattern\n     return str.substr(front, end - front + 1);\n }\n \n-static bool GetConfigOptions(std::istream& stream, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::set<std::string>& sections)\n+static bool GetConfigOptions(std::istream& stream, const std::string& filepath, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::list<SectionInfo>& sections)\n {\n     std::string str, prefix;\n     std::string::size_type pos;\n@@ -810,7 +806,7 @@ static bool GetConfigOptions(std::istream& stream, std::string& error, std::vect\n         if (!str.empty()) {\n             if (*str.begin() == '[' && *str.rbegin() == ']') {\n                 const std::string section = str.substr(1, str.size() - 2);\n-                sections.insert(section);\n+                sections.emplace_back(SectionInfo{section, filepath, linenr});\n                 prefix = section + '.';\n             } else if (*str.begin() == '-') {\n                 error = strprintf(\"parse error on line %i: %s, options in configuration file must be specified without leading -\", linenr, str);\n@@ -823,8 +819,8 @@ static bool GetConfigOptions(std::istream& stream, std::string& error, std::vect\n                     return false;\n                 }\n                 options.emplace_back(name, value);\n-                if ((pos = name.rfind('.')) != std::string::npos) {\n-                    sections.insert(name.substr(0, pos));\n+                if ((pos = name.rfind('.')) != std::string::npos && prefix.length() <= pos) {\n+                    sections.emplace_back(SectionInfo{name.substr(0, pos), filepath, linenr});\n                 }\n             } else {\n                 error = strprintf(\"parse error on line %i: %s\", linenr, str);\n@@ -839,12 +835,11 @@ static bool GetConfigOptions(std::istream& stream, std::string& error, std::vect\n     return true;\n }\n \n-bool ArgsManager::ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys)\n+bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys)\n {\n     LOCK(cs_args);\n     std::vector<std::pair<std::string, std::string>> options;\n-    m_config_sections.clear();\n-    if (!GetConfigOptions(stream, error, options, m_config_sections)) {\n+    if (!GetConfigOptions(stream, filepath, error, options, m_config_sections)) {\n         return false;\n     }\n     for (const std::pair<std::string, std::string>& option : options) {\n@@ -875,14 +870,15 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n     {\n         LOCK(cs_args);\n         m_config_args.clear();\n+        m_config_sections.clear();\n     }\n \n     const std::string confPath = GetArg(\"-conf\", BITCOIN_CONF_FILENAME);\n     fsbridge::ifstream stream(GetConfigFile(confPath));\n \n     // ok to not have a config file\n     if (stream.good()) {\n-        if (!ReadConfigStream(stream, error, ignore_invalid_keys)) {\n+        if (!ReadConfigStream(stream, confPath, error, ignore_invalid_keys)) {\n             return false;\n         }\n         // if there is an -includeconf in the override args, but it is empty, that means the user\n@@ -913,7 +909,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             for (const std::string& to_include : includeconf) {\n                 fsbridge::ifstream include_config(GetConfigFile(to_include));\n                 if (include_config.good()) {\n-                    if (!ReadConfigStream(include_config, error, ignore_invalid_keys)) {\n+                    if (!ReadConfigStream(include_config, to_include, error, ignore_invalid_keys)) {\n                         return false;\n                     }\n                     LogPrintf(\"Included configuration file %s\\n\", to_include.c_str());"
      },
      {
        "sha": "cb66c470a659e29e0ea123aa3228647bede9d11a",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
        "patch": "@@ -132,6 +132,13 @@ enum class OptionsCategory {\n     HIDDEN // Always the last option to avoid printing these in the help\n };\n \n+struct SectionInfo\n+{\n+    std::string m_name;\n+    std::string m_file;\n+    int m_line;\n+};\n+\n class ArgsManager\n {\n protected:\n@@ -152,9 +159,9 @@ class ArgsManager\n     std::string m_network GUARDED_BY(cs_args);\n     std::set<std::string> m_network_only_args GUARDED_BY(cs_args);\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n-    std::set<std::string> m_config_sections GUARDED_BY(cs_args);\n+    std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n \n-    NODISCARD bool ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys = false);\n+    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n \n public:\n     ArgsManager();\n@@ -178,7 +185,7 @@ class ArgsManager\n     /**\n      * Log warnings for unrecognized section names in the config file.\n      */\n-    const std::set<std::string> GetUnrecognizedSections() const;\n+    const std::list<SectionInfo> GetUnrecognizedSections() const;\n \n     /**\n      * Return a vector of strings of the given argument"
      },
      {
        "sha": "460e664c48894ced3c8998b98c725767e33ee0fd",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
        "patch": "@@ -41,13 +41,21 @@ def test_config_file_parser(self):\n             conf.write('server=1\\nrpcuser=someuser\\n[main]\\nrpcpassword=some#pass')\n         self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 4, using # in rpcpassword can be ambiguous and should be avoided')\n \n+        inc_conf_file2_path = os.path.join(self.nodes[0].datadir, 'include2.conf')\n+        with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n+            conf.write('includeconf={}\\n'.format(inc_conf_file2_path))\n+\n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n-            conf.write('testnot.datadir=1\\n[testnet]\\n')\n+            conf.write('testnot.datadir=1\\n')\n+        with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n+            conf.write('[testnet]\\n')\n         self.restart_node(0)\n-        self.nodes[0].stop_node(expected_stderr='Warning: Section [testnet] is not recognized.' + os.linesep + 'Warning: Section [testnot] is not recognized.')\n+        self.nodes[0].stop_node(expected_stderr='Warning: ' + inc_conf_file_path + ':1 Section [testnot] is not recognized.' + os.linesep + 'Warning: ' + inc_conf_file2_path + ':1 Section [testnet] is not recognized.')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('')  # clear\n+        with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n+            conf.write('')  # clear\n \n     def run_test(self):\n         self.stop_node(0)"
      }
    ]
  }
]