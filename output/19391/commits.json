[
  {
    "sha": "7512bfe7cd67a49e7da028573a7a9b4a5eb8d700",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTEyYmZlN2NkNjdhNDllN2RhMDI4NTczYTdhOWI0YTVlYjhkNzAw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-26T21:22:18Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:43:26Z"
      },
      "message": "RPC/Mining: Clean out pre-Segwit miner compatibility code",
      "tree": {
        "sha": "13a776134b2dac6a1fbac8141c69d1cd47996ce4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13a776134b2dac6a1fbac8141c69d1cd47996ce4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7512bfe7cd67a49e7da028573a7a9b4a5eb8d700",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7512bfe7cd67a49e7da028573a7a9b4a5eb8d700",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7512bfe7cd67a49e7da028573a7a9b4a5eb8d700",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7512bfe7cd67a49e7da028573a7a9b4a5eb8d700/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088b348dbe82689ce1782653c8fdcebb3b636eb5"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 0,
      "deletions": 16
    },
    "files": [
      {
        "sha": "4df2e1cbbabd7176c3c03f0c7e420d427949da60",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7512bfe7cd67a49e7da028573a7a9b4a5eb8d700/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7512bfe7cd67a49e7da028573a7a9b4a5eb8d700/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=7512bfe7cd67a49e7da028573a7a9b4a5eb8d700",
        "patch": "@@ -606,7 +606,6 @@ static RPCHelpMan getblocktemplate()\n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n     std::set<std::string> setClientRules;\n-    int64_t nMaxVersionPreVB = -1;\n     CChainState& active_chainstate = chainman.ActiveChainstate();\n     CChain& active_chain = active_chainstate.m_chain;\n     if (!request.params[0].isNull())\n@@ -658,12 +657,6 @@ static RPCHelpMan getblocktemplate()\n                 const UniValue& v = aClientRules[i];\n                 setClientRules.insert(v.get_str());\n             }\n-        } else {\n-            // NOTE: It is important that this NOT be read if versionbits is supported\n-            const UniValue& uvMaxVersion = find_value(oparam, \"maxversion\");\n-            if (uvMaxVersion.isNum()) {\n-                nMaxVersionPreVB = uvMaxVersion.get_int64();\n-            }\n         }\n     }\n \n@@ -871,7 +864,6 @@ static RPCHelpMan getblocktemplate()\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     // Not supported by the client; make sure it's safe to proceed\n                     if (!vbinfo.gbt_force) {\n-                        // If we do anything other than throw an exception here, be sure version/force isn't sent to old clients\n                         throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Support for '%s' rule requires explicit client support\", vbinfo.name));\n                     }\n                 }\n@@ -884,14 +876,6 @@ static RPCHelpMan getblocktemplate()\n     result.pushKV(\"vbavailable\", vbavailable);\n     result.pushKV(\"vbrequired\", int(0));\n \n-    if (nMaxVersionPreVB >= 2) {\n-        // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here\n-        // Because BIP 34 changed how the generation transaction is serialized, we can only use version/force back to v2 blocks\n-        // This is safe to do [otherwise-]unconditionally only because we are throwing an exception above if a non-force deployment gets activated\n-        // Note that this can probably also be removed entirely after the first BIP9 non-force deployment (ie, probably segwit) gets activated\n-        aMutable.push_back(\"version/force\");\n-    }\n-\n     result.pushKV(\"previousblockhash\", pblock->hashPrevBlock.GetHex());\n     result.pushKV(\"transactions\", transactions);\n     result.pushKV(\"coinbaseaux\", aux);"
      }
    ]
  }
]