[
  {
    "sha": "fa795cf9c52b82cc3cccd21483360d6e03f767f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTc5NWNmOWM1MmI4MmNjM2NjY2QyMTQ4MzM2MGQ2ZTAzZjc2N2Yw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-27T22:45:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-06T14:54:31Z"
      },
      "message": "wallet: Disallow abandon of conflicted txes",
      "tree": {
        "sha": "d06ffc7091c67a6bbd0f9ddfa11d893f1b3afde6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d06ffc7091c67a6bbd0f9ddfa11d893f1b3afde6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa795cf9c52b82cc3cccd21483360d6e03f767f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJaecGnAAoJEM4rdWl+aaVISGcL/0vsns6qYvPqSyOOhyJNjkuZ\nqzwha56/8wyEGTlkRXiy5JUKpJsOQxM/wvrTolV2TclBx4ux5xwPY0QX3hUK/Slk\nOIQtekLNQj1s4hdPBE/xKdYqMIuBgStboPBY9K4m9kKykRYlO2X09PFzgWLnnd+b\nl3DWGMSdiAv0goFNgrpvDktjXu1RM74An0Fxq8RpsJctdHN4L/O2PBa4B2zl/gRb\nNuQc3AhocuPvD+gA3Syy5a1BVdaKXbz1kc0gboC6prWmfzHi//a286432BE2mUfp\nq1rpiMRNerY11pzW2+Euj3R1oJqCe/eFQik7J+sKH5ibFAuDm8EtPpglqnJ0B3TB\nirt1hclwc72qdUGmS8WYdV1Rgl5bWKV8wttH67VTylzqyhX+/TDfaNhJk26uZ3NT\n9RJ2geyFF+gc12wwVdVxKYx5MgOmAxfQrwvCYHFtCzpa7tza9iR7WMMg83vB4GVI\ngKp/K0e69rhfUd5PCwuDIt8OLOTiBspYWyb4RpNtwQ==\n=f2Pl\n-----END PGP SIGNATURE-----",
        "payload": "tree d06ffc7091c67a6bbd0f9ddfa11d893f1b3afde6\nparent 598a9c4e4dcd03c6d80fba005de729a6a3aeba7e\nauthor MarcoFalke <falke.marco@gmail.com> 1517093132 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1517928871 -0500\n\nwallet: Disallow abandon of conflicted txes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa795cf9c52b82cc3cccd21483360d6e03f767f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa795cf9c52b82cc3cccd21483360d6e03f767f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa795cf9c52b82cc3cccd21483360d6e03f767f0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "598a9c4e4dcd03c6d80fba005de729a6a3aeba7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/598a9c4e4dcd03c6d80fba005de729a6a3aeba7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/598a9c4e4dcd03c6d80fba005de729a6a3aeba7e"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 19,
      "deletions": 9
    },
    "files": [
      {
        "sha": "139c2bf2d5efd93e9087fcf445218ba9b3c69789",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa795cf9c52b82cc3cccd21483360d6e03f767f0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa795cf9c52b82cc3cccd21483360d6e03f767f0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa795cf9c52b82cc3cccd21483360d6e03f767f0",
        "patch": "@@ -2190,21 +2190,22 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n             \"abandontransaction \\\"txid\\\"\\n\"\n             \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n             \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n             \"for their inputs to be respent.  It can be used to replace \\\"stuck\\\" or evicted transactions.\\n\"\n             \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n-            \"It has no effect on transactions which are already conflicted or abandoned.\\n\"\n+            \"It has no effect on transactions which are already abandoned.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n             + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n+    }\n \n     ObserveSafeMode();\n "
      },
      {
        "sha": "258161cffc2000b30ea8c235394c799d09df6812",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa795cf9c52b82cc3cccd21483360d6e03f767f0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa795cf9c52b82cc3cccd21483360d6e03f767f0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa795cf9c52b82cc3cccd21483360d6e03f767f0",
        "patch": "@@ -1083,7 +1083,7 @@ bool CWallet::TransactionCanBeAbandoned(const uint256& hashTx) const\n {\n     LOCK2(cs_main, cs_wallet);\n     const CWalletTx* wtx = GetWalletTx(hashTx);\n-    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain() <= 0 && !wtx->InMempool();\n+    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain() == 0 && !wtx->InMempool();\n }\n \n bool CWallet::AbandonTransaction(const uint256& hashTx)\n@@ -1099,7 +1099,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n     auto it = mapWallet.find(hashTx);\n     assert(it != mapWallet.end());\n     CWalletTx& origtx = it->second;\n-    if (origtx.GetDepthInMainChain() > 0 || origtx.InMempool()) {\n+    if (origtx.GetDepthInMainChain() != 0 || origtx.InMempool()) {\n         return false;\n     }\n "
      },
      {
        "sha": "8fb860cd7e9cfa141ef13ece581ab88b87c1b5e4",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa795cf9c52b82cc3cccd21483360d6e03f767f0/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa795cf9c52b82cc3cccd21483360d6e03f767f0/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fa795cf9c52b82cc3cccd21483360d6e03f767f0",
        "patch": "@@ -8,11 +8,12 @@\n  descendants as abandoned which allows their inputs to be respent. It can be\n  used to replace \"stuck\" or evicted transactions. It only works on transactions\n  which are not included in a block and are not currently in the mempool. It has\n- no effect on transactions which are already conflicted or abandoned.\n+ no effect on transactions which are already abandoned.\n \"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n+\n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n@@ -28,6 +29,11 @@ def run_test(self):\n         sync_mempools(self.nodes)\n         self.nodes[1].generate(1)\n \n+        # Can not abandon non-wallet transaction\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', lambda: self.nodes[0].abandontransaction(txid='ff' * 32))\n+        # Can not abandon confirmed transaction\n+        assert_raises_rpc_error(-5, 'Transaction not eligible for abandonment', lambda: self.nodes[0].abandontransaction(txid=txA))\n+\n         sync_blocks(self.nodes)\n         newbalance = self.nodes[0].getbalance()\n         assert(balance - newbalance < Decimal(\"0.001\")) #no more than fees lost"
      },
      {
        "sha": "f621d41b4e521eb565e024924aeec1300758c9cc",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa795cf9c52b82cc3cccd21483360d6e03f767f0/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa795cf9c52b82cc3cccd21483360d6e03f767f0/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fa795cf9c52b82cc3cccd21483360d6e03f767f0",
        "patch": "@@ -231,13 +231,16 @@ def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n     assert_equal([t for t in rbf_node.listunspent(minconf=0, include_unsafe=False) if t[\"txid\"] == bumpid], [])\n \n     # submit a block with the rbf tx to clear the bump tx out of the mempool,\n-    # then call abandon to make sure the wallet doesn't attempt to resubmit the\n-    # bump tx, then invalidate the block so the rbf tx will be put back in the\n-    # mempool. this makes it possible to check whether the rbf tx outputs are\n+    # then invalidate the block so the rbf tx will be put back in the mempool.\n+    # This makes it possible to check whether the rbf tx outputs are\n     # spendable before the rbf tx is confirmed.\n     block = submit_block_with_tx(rbf_node, rbftx)\n-    rbf_node.abandontransaction(bumpid)\n+    # Can not abandon conflicted tx\n+    assert_raises_rpc_error(-5, 'Transaction not eligible for abandonment', lambda: rbf_node.abandontransaction(txid=bumpid))\n     rbf_node.invalidateblock(block.hash)\n+    # Call abandon to make sure the wallet doesn't attempt to resubmit\n+    # the bump tx and hope the wallet does not rebroadcast before we call.\n+    rbf_node.abandontransaction(bumpid)\n     assert bumpid not in rbf_node.getrawmempool()\n     assert rbfid in rbf_node.getrawmempool()\n "
      }
    ]
  }
]