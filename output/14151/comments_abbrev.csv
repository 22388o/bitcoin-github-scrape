sipsorcery,2018-09-08T20:26:23Z,"tACK https://github.com/bitcoin/bitcoin/pull/14151/commits/e99684c84094d5f04382d91eed00ec3ef911fd03\n\nPrior to this PR:\n\n```\nmsbuild /p:TrackFileAccess=false /p:CLToolExe=clcache.exe build_msvc\bitcoin.sln /m /v:q /nowarn:C4244;C4267;C4715 /nologo\nc:\projects\bitcoin-72c17\src\script\script.cpp(272): warning C4018: '>': signed/unsigned mismatch [C:\projects\bitcoin-72c17\build_msvc\libb",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-419670609,419670609,
practicalswift,2018-09-09T19:51:08Z,@sipsorcery @MarcoFalke Please re-review :-),https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-419740382,419740382,
practicalswift,2018-09-10T05:27:05Z,@ken2812221 Squashed. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-419790968,419790968,
NicolasDorier,2018-09-10T13:38:31Z,Adding `/warnaserror` is a bit too much?,https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-419915102,419915102,
NicolasDorier,2018-09-10T13:48:27Z,"For test, I tried running a dry compile with `/warnaserror`, it worked fine but two warning show up. (If I recompile a second time, without cleaning, it does not show)\n\n```powershell\n""C:\Sources\bitcoin\build_msvc\bitcoin.sln"" (default target) (1) ->\n""C:\Sources\bitcoin\build_msvc\libbitcoinconsensus\libbitcoinconsensus.vcxproj"" (default target) (2) ->\n(ClCompile target) ->\n  c:\progra",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-419918257,419918257,
practicalswift,2018-09-10T13:55:11Z,"@NicolasDorier Personally I'm all for `/warnaserror` assuming AppVeyor build failures don't block merge (and thus get in the way of the maintainers job). They don't right?\n\n",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-419920624,419920624,
NicolasDorier,2018-09-10T14:38:43Z,"The whole purpose of `/warnaserror` is to break the build. I tried `/warnaserror`, and there is the above error for the first build. I don't think it is worth fixing/fixable.",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-419936947,419936947,
practicalswift,2018-09-10T15:02:37Z,"@NicolasDorier Yes, I know but I thought the project was configured to block merge in case of Travis build failure but not in case of AppVeyor build failure. But I'm probably mistaken :-)",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-419945664,419945664,
NicolasDorier,2018-09-10T15:22:03Z,"ah yes I think you are right. Well, I think we can ignore `/warnaserror` for now, except if you find an obvious fix, even if it does not break, I feel uneasy with red failure. :p",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-419952469,419952469,
sipsorcery,2018-09-11T20:59:43Z,"For a C++ build to exclude specific warnings and set the ""treat warnings as error"" flag the following node can be added to the common.vcxproj file:\n\n```\n<Project>\n  <ItemDefinitionGroup>\n	<ClCompile>\n	  <DisableSpecificWarnings>4244;4267;4715;4805;</DisableSpecificWarnings>\n	  <TreatWarningAsError>true</TreatWarningAsError>\n	</ClCompile>\n  </ItemDefinitionGroup>\n</Project>\n``",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-420423629,420423629,
sipsorcery,2018-09-12T19:01:51Z,tACK https://github.com/bitcoin/bitcoin/pull/14151/commits/f14f4a68850947f04ab6f94ec6e52a07fb1cd61f.,https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-420761442,420761442,
DrahtBot,2018-09-14T23:24:16Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15045](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15045.html) ([test] Apply maximal flags to tx_valid test",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-421508998,421508998,
practicalswift,2018-09-25T21:34:52Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-424509599,424509599,
NicolasDorier,2018-09-26T04:23:47Z,tACK,https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-424580272,424580272,
practicalswift,2018-10-01T07:59:47Z,@sipsorcery @ken2812221 @MarcoFalke Thanks for reviewing. Would you mind re-reviewing? :-),https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-425820540,425820540,
sipsorcery,2018-10-01T11:24:35Z,tACK https://github.com/bitcoin/bitcoin/pull/14151/commits/26a9c9e4ab225cdb276ff8bfde4b09fd939a3bae.,https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-425873611,425873611,
NicolasDorier,2018-10-02T13:39:54Z,"ping @MarcoFalke, anything missing for merge?",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-426277376,426277376,
MarcoFalke,2018-10-03T05:04:30Z,"Generally we don't touch consensus code to silence compiler warnings of some specific compiler version, since there is (to the best of my knowledge) no method yet to review the changes for correctness. Reviewers well-versed with compiler internals and language specification could look for issues, but a formal method to prove correctness is currently not existing.",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-426512637,426512637,
practicalswift,2018-10-03T07:41:03Z,@MarcoFalke Now suppressing the warning in `src/script/script.cpp` instead. Would you mind re-reviewing? :-),https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-426541272,426541272,
practicalswift,2018-10-20T23:54:29Z,Rebased! :-),https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-431627085,431627085,
NicolasDorier,2018-10-21T10:44:16Z,"reACK, can it be merged? This has been ACK several time already.",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-431658195,431658195,
practicalswift,2018-11-07T08:47:15Z,Can I do anything to increase the likelihood of getting this PR merge? :-),https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-436548640,436548640,
NicolasDorier,2018-11-07T09:59:38Z,Dance on one foot clapping your hands singing praise to the genesis block.,https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-436569709,436569709,
ken2812221,2018-11-09T07:07:02Z,ACK 896eddb28aae304d8f380daba5abb38fe134e49e,https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-437270059,437270059,
Empact,2018-11-12T19:57:20Z,"nit: somewhat prefer `ull` postfix over `static_cast<uint64_t>(literal)`\n\nutACK 896eddb",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-438009194,438009194,
practicalswift,2019-01-05T15:07:56Z,@MarcoFalke Would you mind re-reviewing? Let me know if I can change anything in order to get  your ACK/utACK :-),https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-451663269,451663269,
practicalswift,2019-01-06T10:06:05Z,"@MarcoFalke Thanks for reviewing. Feedback addressed. Please re-review :-)\n\nNow only touching source files in `src/test/`.",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-451729728,451729728,
practicalswift,2019-01-07T14:26:17Z,@sipsorcery @NicolasDorier @ken2812221 Would you mind re-utACK after re-reviewing? :-),https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-451951177,451951177,
NicolasDorier,2019-01-07T14:32:58Z,re-utACK for me,https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-451953321,451953321,
sipsorcery,2019-01-08T07:20:23Z,tACK https://github.com/bitcoin/bitcoin/commit/bc7aff79fc0cfb10d25a7dd5928a1cb8c36a063b & https://github.com/bitcoin/bitcoin/pull/14151/commits/1423334fa0b45159c2304fda9e768d156e89f4a4.,https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-452199198,452199198,
ken2812221,2019-01-13T17:20:45Z,ACK bc7aff79fc0cfb10d25a7dd5928a1cb8c36a063b,https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-453848187,453848187,
Empact,2019-01-13T18:11:10Z,re-utACK https://github.com/bitcoin/bitcoin/pull/14151/commits/bc7aff79fc0cfb10d25a7dd5928a1cb8c36a063b,https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-453852392,453852392,
practicalswift,2019-01-15T15:57:21Z,@laanwj Added a commit. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-454444146,454444146,
laanwj,2019-01-15T16:27:39Z,"LGTM, please squash before merge though!\n(and please, don't tag me in commit messages, this gets me lots of mails)",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-454455839,454455839,
practicalswift,2019-01-15T19:14:11Z,"@laanwj Fixed! Sorry for the tag. Please re-review :-)\n\n@NicolasDorier @sipsorcery @ken2812221 @Empact Would you mind re-reviewing?",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-454514562,454514562,
sipsorcery,2019-01-15T19:39:05Z,"re-utACK b9dafe7d9ffcbe7928ffbfba816b54e196c57664.\n\nPersonally I would use an [integer-suffix](https://en.cppreference.com/w/cpp/language/integer_literal) instead of the static cast, e.g. `0x0x08000000ul` but it's purely a style thing and of no consequence here.",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-454523264,454523264,
practicalswift,2019-01-15T19:46:07Z,@sipsorcery I don't think there exists an integer-suffix in C++11 guaranteeing a width of exactly 64 bits on all supported platforms? :-),https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-454525604,454525604,
sipsorcery,2019-01-15T21:18:22Z,"> I don't think there exists an integer-suffix in C++11 guaranteeing a width of exactly 64 bits on all supported platforms? :-)\n\nThe C++17 specification states that `ul` can be represented by `unsigned long` or `unsigned long long` so no there is no guarantee of exactly 64 bits. It also indicates that `uint64_t`, `uint32_t` etc. are optional.\n\nI've no argument either way.\n",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-454555066,454555066,
laanwj,2019-01-16T12:36:34Z,"> Personally I would use an integer-suffix instead of the static cast, e.g. 0x0x08000000ul but it's purely a style thing and of no consequence here.\n\n> @sipsorcery I don't think there exists an integer-suffix in C++11 guaranteeing a width of exactly 64 bits on all supported platforms? :-)\n\nYeah, indeed, if only C++ had Rust's `u64` suffix it would be easy!",https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-454763987,454763987,
laanwj,2019-01-16T12:37:09Z,utACK b9dafe7d9ffcbe7928ffbfba816b54e196c57664,https://github.com/bitcoin/bitcoin/pull/14151#issuecomment-454764127,454764127,
MarcoFalke,2018-09-05T13:15:59Z,"`MAX_SCRIPT_ELEMENT_SIZE` is  of type `unsigned`, so I don't see why this change is here.",https://github.com/bitcoin/bitcoin/pull/14151#discussion_r215263765,215263765,src/script/script.cpp
practicalswift,2018-09-05T13:50:55Z,"Sorry, should have been `(unsigned int)opcode`. Now updated. Please re-review :-)",https://github.com/bitcoin/bitcoin/pull/14151#discussion_r215277854,215277854,src/script/script.cpp
scravy,2018-09-06T12:35:01Z,Nit: could be a `static_cast`,https://github.com/bitcoin/bitcoin/pull/14151#discussion_r215607546,215607546,src/script/script.cpp
scravy,2018-09-06T12:35:49Z,Nit: could be a `static_cast`,https://github.com/bitcoin/bitcoin/pull/14151#discussion_r215607742,215607742,src/test/crypto_tests.cpp
MarcoFalke,2018-09-09T18:14:26Z,Can't this be solved by `return reinterpret_cast<void*>(uint64_t{0x08000000 + (count<<24)});`?,https://github.com/bitcoin/bitcoin/pull/14151#discussion_r216164683,216164683,src/test/allocator_tests.cpp
NicolasDorier,2018-09-10T05:46:10Z,I think instead of bundling that in /nowarn we should include the nowarn inside the generated project file.,https://github.com/bitcoin/bitcoin/pull/14151#discussion_r216203387,216203387,appveyor.yml
NicolasDorier,2018-09-10T05:46:56Z,`<PropertyGroup><NoWarn>C4244;C4267;C4715;C4805</NoWarn></PropertyGroup>`,https://github.com/bitcoin/bitcoin/pull/14151#discussion_r216203474,216203474,appveyor.yml
practicalswift,2018-09-10T11:07:10Z,"@NicolasDorier I'll fix that! I'm not really familiar with the MSVC project files - in which of them should that be included?\n\nThese are the files with `PropertyGroup`:\n\n```\n$ git grep -l '<PropertyGroup'\nbuild_msvc/bench_bitcoin/bench_bitcoin.vcxproj\nbuild_msvc/bitcoin-cli/bitcoin-cli.vcxproj\nbuild_msvc/bitcoin-tx/bitcoin-tx.vcxproj\nbuild_msvc/bitcoind/bitcoind.vcxproj\nbuild_m",https://github.com/bitcoin/bitcoin/pull/14151#discussion_r216281497,216281497,appveyor.yml
practicalswift,2018-09-10T12:51:24Z,"Tried this but it didn't suppress the warnings:\n\n```diff\ndiff --git a/appveyor.yml b/appveyor.yml\nindex 147f458d9..ae6bd2f89 100644\n--- a/appveyor.yml\n+++ b/appveyor.yml\n@@ -35,7 +35,7 @@ before_build:\n        }\n - ps:  Start-Process clcache-server\n build_script:\n-- cmd: msbuild /p:TrackFileAccess=false /p:CLToolExe=clcache.exe build_msvc\bitcoin.sln /m /v:q /nowarn:C4244;C42",https://github.com/bitcoin/bitcoin/pull/14151#discussion_r216308384,216308384,appveyor.yml
NicolasDorier,2018-09-10T12:55:51Z,You normally did right. I take a look.,https://github.com/bitcoin/bitcoin/pull/14151#discussion_r216309777,216309777,appveyor.yml
NicolasDorier,2018-09-10T13:22:25Z,"Nevermind this is only a C# thing :/\nWe can level down the WarningLevel in the project file, but can't control individual warning... :/",https://github.com/bitcoin/bitcoin/pull/14151#discussion_r216318900,216318900,appveyor.yml
sipsorcery,2018-10-01T08:26:49Z,Bug? Should it be `int expectedSuccessCode == expect ? 1 : 0;`?,https://github.com/bitcoin/bitcoin/pull/14151#discussion_r221527064,221527064,src/test/script_tests.cpp
practicalswift,2018-10-01T08:33:07Z,"No, we want `expectedSuccessCode` to be `1` (if `expect`) or `0` (if `!expect`) :-)",https://github.com/bitcoin/bitcoin/pull/14151#discussion_r221528756,221528756,src/test/script_tests.cpp
ken2812221,2018-10-01T08:34:56Z,"This is correct, the integer value is assigned to expectedSuccessCode.",https://github.com/bitcoin/bitcoin/pull/14151#discussion_r221529260,221529260,src/test/script_tests.cpp
MarcoFalke,2019-01-06T09:17:55Z,NACK on adding these. It makes the code harder to parse as a human and they don't add any value.,https://github.com/bitcoin/bitcoin/pull/14151#discussion_r245500781,245500781,src/script/script.cpp
laanwj,2019-01-15T15:29:25Z,eeek; is this really the only way to write this?,https://github.com/bitcoin/bitcoin/pull/14151#discussion_r247938246,247938246,src/test/crypto_tests.cpp
practicalswift,2019-01-15T15:34:15Z,"@laanwj `static_cast<uint64_t>(1)` is in line with what the C++ Core Guidelines recommends: [ES.49: If you must use a cast, use a named cast](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es49-if-you-must-use-a-cast-use-a-named-cast), but `(uint64_t)1` is obviously an alternative (so is `UINT64_C(1)`, etc.). Really worth breaking four utACK:s for changing that? :-)",https://github.com/bitcoin/bitcoin/pull/14151#discussion_r247940330,247940330,src/test/crypto_tests.cpp
laanwj,2019-01-15T15:43:47Z,"@luke-jr suggested `uint64_t(1)`, that seems more C++ish without being verbose, and seems to work locally (I don't know if it avoids the warning)",https://github.com/bitcoin/bitcoin/pull/14151#discussion_r247945067,247945067,src/test/crypto_tests.cpp
sipa,2019-01-15T15:47:03Z,I generally prefer C-style casts for primitive types (due to syntactic overload).,https://github.com/bitcoin/bitcoin/pull/14151#discussion_r247946496,247946496,src/test/crypto_tests.cpp
laanwj,2019-01-15T15:51:39Z,"> Really worth breaking four utACK:s for changing that? :-)\n\nMaybe not, though I'd dread to see another PR which—for whatever reason—changes the syntax again later, so I'd rather have agreement on this on first go.",https://github.com/bitcoin/bitcoin/pull/14151#discussion_r247948523,247948523,src/test/crypto_tests.cpp
luke-jr,2019-01-15T15:58:59Z,"`j` is at most 256, so this should work:\n\n```C++\nfor (unsigned j = 1U << (i - 1); (j >> i) == 0; ++j) {\n```",https://github.com/bitcoin/bitcoin/pull/14151#discussion_r247952069,247952069,src/test/crypto_tests.cpp
