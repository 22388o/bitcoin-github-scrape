[
  {
    "sha": "b9dafe7d9ffcbe7928ffbfba816b54e196c57664",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWRhZmU3ZDlmZmNiZTc5MjhmZmJmYmE4MTZiNTRlMTk2YzU3NjY0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-05T13:08:58Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-01-15T19:15:26Z"
      },
      "message": "Fix remaining compiler warnings (MSVC). Move disabling of specific warnings from /nowarn to project file.",
      "tree": {
        "sha": "b2aa7f929c950e0434aebaae16a625afa0abcbfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2aa7f929c950e0434aebaae16a625afa0abcbfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9dafe7d9ffcbe7928ffbfba816b54e196c57664",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9dafe7d9ffcbe7928ffbfba816b54e196c57664",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9dafe7d9ffcbe7928ffbfba816b54e196c57664",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9dafe7d9ffcbe7928ffbfba816b54e196c57664/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c719987718d9fcc3a689e50f5212acc7ead7606",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c719987718d9fcc3a689e50f5212acc7ead7606",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c719987718d9fcc3a689e50f5212acc7ead7606"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "249d0b8df98a1df2c6b7b8dc4007a6e95f97c2df",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9dafe7d9ffcbe7928ffbfba816b54e196c57664/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9dafe7d9ffcbe7928ffbfba816b54e196c57664/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=b9dafe7d9ffcbe7928ffbfba816b54e196c57664",
        "patch": "@@ -33,7 +33,7 @@ before_build:\n - ps:  Start-Process clcache-server\n - ps:  fsutil behavior set disablelastaccess 0 # Enable Access time feature on Windows (for clcache)\n build_script:\n-- cmd: msbuild /p:TrackFileAccess=false /p:CLToolExe=clcache.exe build_msvc\\bitcoin.sln /m /v:q /nowarn:C4244;C4267;C4715 /nologo\n+- cmd: msbuild /p:TrackFileAccess=false /p:CLToolExe=clcache.exe build_msvc\\bitcoin.sln /m /v:q /nologo\n after_build:\n - ps:  fsutil behavior set disablelastaccess 1 # Disable Access time feature on Windows (better performance)\n - ps:  clcache -z"
      },
      {
        "sha": "c7c20622e43b8a91b673b58ea3089372e59d4d12",
        "filename": "build_msvc/common.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9dafe7d9ffcbe7928ffbfba816b54e196c57664/build_msvc/common.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9dafe7d9ffcbe7928ffbfba816b54e196c57664/build_msvc/common.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.vcxproj?ref=b9dafe7d9ffcbe7928ffbfba816b54e196c57664",
        "patch": "@@ -15,6 +15,8 @@\n   <ItemDefinitionGroup>\n     <ClCompile>\n       <AdditionalOptions>/utf-8 %(AdditionalOptions)</AdditionalOptions>\n+      <DisableSpecificWarnings>4018;4244;4267;4715;4805;</DisableSpecificWarnings>\n+      <TreatWarningAsError>true</TreatWarningAsError>\n     </ClCompile>\n   </ItemDefinitionGroup>\n-</Project>\n\\ No newline at end of file\n+</Project>"
      },
      {
        "sha": "582082f6a48289e2467abac484bad6332522f630",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9dafe7d9ffcbe7928ffbfba816b54e196c57664/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9dafe7d9ffcbe7928ffbfba816b54e196c57664/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=b9dafe7d9ffcbe7928ffbfba816b54e196c57664",
        "patch": "@@ -144,7 +144,7 @@ class TestLockedPageAllocator: public LockedPageAllocator\n                 *lockingSuccess = true;\n             }\n \n-            return reinterpret_cast<void*>(0x08000000 + (count<<24)); // Fake address, do not actually use this memory\n+            return reinterpret_cast<void*>(uint64_t{static_cast<uint64_t>(0x08000000) + (count << 24)}); // Fake address, do not actually use this memory\n         }\n         return 0;\n     }"
      },
      {
        "sha": "86cb00a78f0dca32908881b2f695658473a1acd3",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9dafe7d9ffcbe7928ffbfba816b54e196c57664/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9dafe7d9ffcbe7928ffbfba816b54e196c57664/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=b9dafe7d9ffcbe7928ffbfba816b54e196c57664",
        "patch": "@@ -532,7 +532,7 @@ BOOST_AUTO_TEST_CASE(countbits_tests)\n             // Check handling of zero.\n             BOOST_CHECK_EQUAL(CountBits(0), 0U);\n         } else if (i < 10) {\n-            for (uint64_t j = 1 << (i - 1); (j >> i) == 0; ++j) {\n+            for (uint64_t j = (uint64_t)1 << (i - 1); (j >> i) == 0; ++j) {\n                 // Exhaustively test up to 10 bits\n                 BOOST_CHECK_EQUAL(CountBits(j), i);\n             }"
      },
      {
        "sha": "87c3e74df0c205792f2b6c193f57056f4bdc64b9",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9dafe7d9ffcbe7928ffbfba816b54e196c57664/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9dafe7d9ffcbe7928ffbfba816b54e196c57664/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=b9dafe7d9ffcbe7928ffbfba816b54e196c57664",
        "patch": "@@ -184,11 +184,12 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n     stream << tx2;\n     int libconsensus_flags = flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL;\n     if (libconsensus_flags == flags) {\n+        int expectedSuccessCode = expect ? 1 : 0;\n         if (flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS) {\n-            BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(scriptPubKey.data(), scriptPubKey.size(), txCredit.vout[0].nValue, (const unsigned char*)&stream[0], stream.size(), 0, libconsensus_flags, nullptr) == expect, message);\n+            BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(scriptPubKey.data(), scriptPubKey.size(), txCredit.vout[0].nValue, (const unsigned char*)&stream[0], stream.size(), 0, libconsensus_flags, nullptr) == expectedSuccessCode, message);\n         } else {\n-            BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(scriptPubKey.data(), scriptPubKey.size(), 0, (const unsigned char*)&stream[0], stream.size(), 0, libconsensus_flags, nullptr) == expect, message);\n-            BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), 0, libconsensus_flags, nullptr) == expect,message);\n+            BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(scriptPubKey.data(), scriptPubKey.size(), 0, (const unsigned char*)&stream[0], stream.size(), 0, libconsensus_flags, nullptr) == expectedSuccessCode, message);\n+            BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), 0, libconsensus_flags, nullptr) == expectedSuccessCode, message);\n         }\n     }\n #endif"
      }
    ]
  }
]