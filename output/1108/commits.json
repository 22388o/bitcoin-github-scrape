[
  {
    "sha": "4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWY1ZDBhZGRjMjgyMGYxZTY1MTAzOTE0Y2VhN2FjZTBmM2U0ZWIx",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T21:39:49Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-15T21:39:49Z"
      },
      "message": "Move CWalletDB code to new walletdb module.\n\nIn addition to standard code separation, this change opens the door\nto fixing several include inter-dependencies.",
      "tree": {
        "sha": "a39a586f91097113cc31b383411962717736fbfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a39a586f91097113cc31b383411962717736fbfa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5a701eb7ea16b87b56263996ee8e98ec89e2a3d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a701eb7ea16b87b56263996ee8e98ec89e2a3d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a701eb7ea16b87b56263996ee8e98ec89e2a3d8"
      }
    ],
    "stats": {
      "total": 1194,
      "additions": 612,
      "deletions": 582
    },
    "files": [
      {
        "sha": "6dc0c7736b4211232aeb9f58e6d607f0ec8a6e8e",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 415,
        "changes": 418,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
        "patch": "@@ -15,18 +15,17 @@ using namespace boost;\n \n \n unsigned int nWalletDBUpdated;\n-uint64 nAccountingEntryNumber = 0;\n \n \n \n //\n // CDB\n //\n \n-static CCriticalSection cs_db;\n+CCriticalSection cs_db;\n static bool fDbEnvInit = false;\n DbEnv dbenv(0);\n-static map<string, int> mapFileUseCount;\n+map<string, int> mapFileUseCount;\n static map<string, Db*> mapDb;\n \n static void EnvShutdown()\n@@ -173,7 +172,7 @@ void CDB::Close()\n     }\n }\n \n-void static CloseDb(const string& strFile)\n+void CloseDb(const string& strFile)\n {\n     {\n         LOCK(cs_db);\n@@ -786,414 +785,3 @@ bool LoadAddresses()\n }\n \n \n-\n-\n-//\n-// CWalletDB\n-//\n-\n-bool CWalletDB::WriteName(const string& strAddress, const string& strName)\n-{\n-    nWalletDBUpdated++;\n-    return Write(make_pair(string(\"name\"), strAddress), strName);\n-}\n-\n-bool CWalletDB::EraseName(const string& strAddress)\n-{\n-    // This should only be used for sending addresses, never for receiving addresses,\n-    // receiving addresses must always have an address book entry if they're not change return.\n-    nWalletDBUpdated++;\n-    return Erase(make_pair(string(\"name\"), strAddress));\n-}\n-\n-bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)\n-{\n-    account.SetNull();\n-    return Read(make_pair(string(\"acc\"), strAccount), account);\n-}\n-\n-bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n-{\n-    return Write(make_pair(string(\"acc\"), strAccount), account);\n-}\n-\n-bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n-{\n-    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, ++nAccountingEntryNumber), acentry);\n-}\n-\n-int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)\n-{\n-    list<CAccountingEntry> entries;\n-    ListAccountCreditDebit(strAccount, entries);\n-\n-    int64 nCreditDebit = 0;\n-    BOOST_FOREACH (const CAccountingEntry& entry, entries)\n-        nCreditDebit += entry.nCreditDebit;\n-\n-    return nCreditDebit;\n-}\n-\n-void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)\n-{\n-    bool fAllAccounts = (strAccount == \"*\");\n-\n-    Dbc* pcursor = GetCursor();\n-    if (!pcursor)\n-        throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : cannot create DB cursor\");\n-    unsigned int fFlags = DB_SET_RANGE;\n-    loop\n-    {\n-        // Read next record\n-        CDataStream ssKey;\n-        if (fFlags == DB_SET_RANGE)\n-            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64(0));\n-        CDataStream ssValue;\n-        int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n-        fFlags = DB_NEXT;\n-        if (ret == DB_NOTFOUND)\n-            break;\n-        else if (ret != 0)\n-        {\n-            pcursor->close();\n-            throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : error scanning DB\");\n-        }\n-\n-        // Unserialize\n-        string strType;\n-        ssKey >> strType;\n-        if (strType != \"acentry\")\n-            break;\n-        CAccountingEntry acentry;\n-        ssKey >> acentry.strAccount;\n-        if (!fAllAccounts && acentry.strAccount != strAccount)\n-            break;\n-\n-        ssValue >> acentry;\n-        entries.push_back(acentry);\n-    }\n-\n-    pcursor->close();\n-}\n-\n-\n-int CWalletDB::LoadWallet(CWallet* pwallet)\n-{\n-    pwallet->vchDefaultKey.clear();\n-    int nFileVersion = 0;\n-    vector<uint256> vWalletUpgrade;\n-    bool fIsEncrypted = false;\n-\n-    //// todo: shouldn't we catch exceptions and try to recover and continue?\n-    {\n-        LOCK(pwallet->cs_wallet);\n-        int nMinVersion = 0;\n-        if (Read((string)\"minversion\", nMinVersion))\n-        {\n-            if (nMinVersion > CLIENT_VERSION)\n-                return DB_TOO_NEW;\n-            pwallet->LoadMinVersion(nMinVersion);\n-        }\n-\n-        // Get cursor\n-        Dbc* pcursor = GetCursor();\n-        if (!pcursor)\n-        {\n-            printf(\"Error getting wallet database cursor\\n\");\n-            return DB_CORRUPT;\n-        }\n-\n-        loop\n-        {\n-            // Read next record\n-            CDataStream ssKey;\n-            CDataStream ssValue;\n-            int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n-            if (ret == DB_NOTFOUND)\n-                break;\n-            else if (ret != 0)\n-            {\n-                printf(\"Error reading next record from wallet database\\n\");\n-                return DB_CORRUPT;\n-            }\n-\n-            // Unserialize\n-            // Taking advantage of the fact that pair serialization\n-            // is just the two items serialized one after the other\n-            string strType;\n-            ssKey >> strType;\n-            if (strType == \"name\")\n-            {\n-                string strAddress;\n-                ssKey >> strAddress;\n-                ssValue >> pwallet->mapAddressBook[strAddress];\n-            }\n-            else if (strType == \"tx\")\n-            {\n-                uint256 hash;\n-                ssKey >> hash;\n-                CWalletTx& wtx = pwallet->mapWallet[hash];\n-                ssValue >> wtx;\n-                wtx.BindWallet(pwallet);\n-\n-                if (wtx.GetHash() != hash)\n-                    printf(\"Error in wallet.dat, hash mismatch\\n\");\n-\n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        char fTmp;\n-                        char fUnused;\n-                        ssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n-                        printf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\\n\", wtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount.c_str(), hash.ToString().c_str());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        printf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString().c_str());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    vWalletUpgrade.push_back(hash);\n-                }\n-\n-                //// debug print\n-                //printf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString().c_str());\n-                //printf(\" %12I64d  %s  %s  %s\\n\",\n-                //    wtx.vout[0].nValue,\n-                //    DateTimeStrFormat(\"%x %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n-                //    wtx.hashBlock.ToString().substr(0,20).c_str(),\n-                //    wtx.mapValue[\"message\"].c_str());\n-            }\n-            else if (strType == \"acentry\")\n-            {\n-                string strAccount;\n-                ssKey >> strAccount;\n-                uint64 nNumber;\n-                ssKey >> nNumber;\n-                if (nNumber > nAccountingEntryNumber)\n-                    nAccountingEntryNumber = nNumber;\n-            }\n-            else if (strType == \"key\" || strType == \"wkey\")\n-            {\n-                vector<unsigned char> vchPubKey;\n-                ssKey >> vchPubKey;\n-                CKey key;\n-                if (strType == \"key\")\n-                {\n-                    CPrivKey pkey;\n-                    ssValue >> pkey;\n-                    key.SetPubKey(vchPubKey);\n-                    key.SetPrivKey(pkey);\n-                    if (key.GetPubKey() != vchPubKey)\n-                    {\n-                        printf(\"Error reading wallet database: CPrivKey pubkey inconsistency\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                    if (!key.IsValid())\n-                    {\n-                        printf(\"Error reading wallet database: invalid CPrivKey\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                }\n-                else\n-                {\n-                    CWalletKey wkey;\n-                    ssValue >> wkey;\n-                    key.SetPubKey(vchPubKey);\n-                    key.SetPrivKey(wkey.vchPrivKey);\n-                    if (key.GetPubKey() != vchPubKey)\n-                    {\n-                        printf(\"Error reading wallet database: CWalletKey pubkey inconsistency\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                    if (!key.IsValid())\n-                    {\n-                        printf(\"Error reading wallet database: invalid CWalletKey\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                }\n-                if (!pwallet->LoadKey(key))\n-                {\n-                    printf(\"Error reading wallet database: LoadKey failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-            }\n-            else if (strType == \"mkey\")\n-            {\n-                unsigned int nID;\n-                ssKey >> nID;\n-                CMasterKey kMasterKey;\n-                ssValue >> kMasterKey;\n-                if(pwallet->mapMasterKeys.count(nID) != 0)\n-                {\n-                    printf(\"Error reading wallet database: duplicate CMasterKey id %u\\n\", nID);\n-                    return DB_CORRUPT;\n-                }\n-                pwallet->mapMasterKeys[nID] = kMasterKey;\n-                if (pwallet->nMasterKeyMaxID < nID)\n-                    pwallet->nMasterKeyMaxID = nID;\n-            }\n-            else if (strType == \"ckey\")\n-            {\n-                vector<unsigned char> vchPubKey;\n-                ssKey >> vchPubKey;\n-                vector<unsigned char> vchPrivKey;\n-                ssValue >> vchPrivKey;\n-                if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n-                {\n-                    printf(\"Error reading wallet database: LoadCryptedKey failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-                fIsEncrypted = true;\n-            }\n-            else if (strType == \"defaultkey\")\n-            {\n-                ssValue >> pwallet->vchDefaultKey;\n-            }\n-            else if (strType == \"pool\")\n-            {\n-                int64 nIndex;\n-                ssKey >> nIndex;\n-                pwallet->setKeyPool.insert(nIndex);\n-            }\n-            else if (strType == \"version\")\n-            {\n-                ssValue >> nFileVersion;\n-                if (nFileVersion == 10300)\n-                    nFileVersion = 300;\n-            }\n-            else if (strType == \"cscript\")\n-            {\n-                uint160 hash;\n-                ssKey >> hash;\n-                CScript script;\n-                ssValue >> script;\n-                if (!pwallet->LoadCScript(script))\n-                {\n-                    printf(\"Error reading wallet database: LoadCScript failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-            }\n-        }\n-        pcursor->close();\n-    }\n-\n-    BOOST_FOREACH(uint256 hash, vWalletUpgrade)\n-        WriteTx(hash, pwallet->mapWallet[hash]);\n-\n-    printf(\"nFileVersion = %d\\n\", nFileVersion);\n-\n-\n-    // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n-    if (fIsEncrypted && (nFileVersion == 40000 || nFileVersion == 50000))\n-        return DB_NEED_REWRITE;\n-\n-    if (nFileVersion < CLIENT_VERSION) // Update\n-        WriteVersion(CLIENT_VERSION);\n-\n-    return DB_LOAD_OK;\n-}\n-\n-void ThreadFlushWalletDB(void* parg)\n-{\n-    const string& strFile = ((const string*)parg)[0];\n-    static bool fOneThread;\n-    if (fOneThread)\n-        return;\n-    fOneThread = true;\n-    if (!GetBoolArg(\"-flushwallet\", true))\n-        return;\n-\n-    unsigned int nLastSeen = nWalletDBUpdated;\n-    unsigned int nLastFlushed = nWalletDBUpdated;\n-    int64 nLastWalletUpdate = GetTime();\n-    while (!fShutdown)\n-    {\n-        Sleep(500);\n-\n-        if (nLastSeen != nWalletDBUpdated)\n-        {\n-            nLastSeen = nWalletDBUpdated;\n-            nLastWalletUpdate = GetTime();\n-        }\n-\n-        if (nLastFlushed != nWalletDBUpdated && GetTime() - nLastWalletUpdate >= 2)\n-        {\n-            TRY_LOCK(cs_db,lockDb);\n-            if (lockDb)\n-            {\n-                // Don't do this if any databases are in use\n-                int nRefCount = 0;\n-                map<string, int>::iterator mi = mapFileUseCount.begin();\n-                while (mi != mapFileUseCount.end())\n-                {\n-                    nRefCount += (*mi).second;\n-                    mi++;\n-                }\n-\n-                if (nRefCount == 0 && !fShutdown)\n-                {\n-                    map<string, int>::iterator mi = mapFileUseCount.find(strFile);\n-                    if (mi != mapFileUseCount.end())\n-                    {\n-                        printf(\"%s \", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());\n-                        printf(\"Flushing wallet.dat\\n\");\n-                        nLastFlushed = nWalletDBUpdated;\n-                        int64 nStart = GetTimeMillis();\n-\n-                        // Flush wallet.dat so it's self contained\n-                        CloseDb(strFile);\n-                        dbenv.txn_checkpoint(0, 0, 0);\n-                        dbenv.lsn_reset(strFile.c_str(), 0);\n-\n-                        mapFileUseCount.erase(mi++);\n-                        printf(\"Flushed wallet.dat %\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-bool BackupWallet(const CWallet& wallet, const string& strDest)\n-{\n-    if (!wallet.fFileBacked)\n-        return false;\n-    while (!fShutdown)\n-    {\n-        {\n-            LOCK(cs_db);\n-            if (!mapFileUseCount.count(wallet.strWalletFile) || mapFileUseCount[wallet.strWalletFile] == 0)\n-            {\n-                // Flush log data to the dat file\n-                CloseDb(wallet.strWalletFile);\n-                dbenv.txn_checkpoint(0, 0, 0);\n-                dbenv.lsn_reset(wallet.strWalletFile.c_str(), 0);\n-                mapFileUseCount.erase(wallet.strWalletFile);\n-\n-                // Copy wallet.dat\n-                filesystem::path pathSrc = GetDataDir() / wallet.strWalletFile;\n-                filesystem::path pathDest(strDest);\n-                if (filesystem::is_directory(pathDest))\n-                    pathDest /= wallet.strWalletFile;\n-\n-                try {\n-#if BOOST_VERSION >= 104000\n-                    filesystem::copy_file(pathSrc, pathDest, filesystem::copy_option::overwrite_if_exists);\n-#else\n-                    filesystem::copy_file(pathSrc, pathDest);\n-#endif\n-                    printf(\"copied wallet.dat to %s\\n\", pathDest.string().c_str());\n-                    return true;\n-                } catch(const filesystem::filesystem_error &e) {\n-                    printf(\"error copying wallet.dat to %s - %s\\n\", pathDest.string().c_str(), e.what());\n-                    return false;\n-                }\n-            }\n-        }\n-        Sleep(100);\n-    }\n-    return false;\n-}"
      },
      {
        "sha": "f971b38d165c739a2298799dcd486f28831fd990",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 167,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
        "patch": "@@ -341,170 +341,4 @@ class CKeyPool\n };\n \n \n-\n-/** Error statuses for the wallet database */\n-enum DBErrors\n-{\n-    DB_LOAD_OK,\n-    DB_CORRUPT,\n-    DB_TOO_NEW,\n-    DB_LOAD_FAIL,\n-    DB_NEED_REWRITE\n-};\n-\n-/** Access to the wallet database (wallet.dat) */\n-class CWalletDB : public CDB\n-{\n-public:\n-    CWalletDB(std::string strFilename, const char* pszMode=\"r+\") : CDB(strFilename.c_str(), pszMode)\n-    {\n-    }\n-private:\n-    CWalletDB(const CWalletDB&);\n-    void operator=(const CWalletDB&);\n-public:\n-    bool ReadName(const std::string& strAddress, std::string& strName)\n-    {\n-        strName = \"\";\n-        return Read(std::make_pair(std::string(\"name\"), strAddress), strName);\n-    }\n-\n-    bool WriteName(const std::string& strAddress, const std::string& strName);\n-\n-    bool EraseName(const std::string& strAddress);\n-\n-    bool ReadTx(uint256 hash, CWalletTx& wtx)\n-    {\n-        return Read(std::make_pair(std::string(\"tx\"), hash), wtx);\n-    }\n-\n-    bool WriteTx(uint256 hash, const CWalletTx& wtx)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"tx\"), hash), wtx);\n-    }\n-\n-    bool EraseTx(uint256 hash)\n-    {\n-        nWalletDBUpdated++;\n-        return Erase(std::make_pair(std::string(\"tx\"), hash));\n-    }\n-\n-    bool ReadKey(const std::vector<unsigned char>& vchPubKey, CPrivKey& vchPrivKey)\n-    {\n-        vchPrivKey.clear();\n-        return Read(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey);\n-    }\n-\n-    bool WriteKey(const std::vector<unsigned char>& vchPubKey, const CPrivKey& vchPrivKey)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey, false);\n-    }\n-\n-    bool WriteCryptedKey(const std::vector<unsigned char>& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)\n-    {\n-        nWalletDBUpdated++;\n-        if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n-            return false;\n-        if (fEraseUnencryptedKey)\n-        {\n-            Erase(std::make_pair(std::string(\"key\"), vchPubKey));\n-            Erase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n-        }\n-        return true;\n-    }\n-\n-    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n-    }\n-\n-    // Support for BIP 0013 : see https://en.bitcoin.it/wiki/BIP_0013\n-    bool ReadCScript(const uint160 &hash, CScript& redeemScript)\n-    {\n-        redeemScript.clear();\n-        return Read(std::make_pair(std::string(\"cscript\"), hash), redeemScript);\n-    }\n-\n-    bool WriteCScript(const uint160& hash, const CScript& redeemScript)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n-    }\n-\n-    bool WriteBestBlock(const CBlockLocator& locator)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::string(\"bestblock\"), locator);\n-    }\n-\n-    bool ReadBestBlock(CBlockLocator& locator)\n-    {\n-        return Read(std::string(\"bestblock\"), locator);\n-    }\n-\n-    bool ReadDefaultKey(std::vector<unsigned char>& vchPubKey)\n-    {\n-        vchPubKey.clear();\n-        return Read(std::string(\"defaultkey\"), vchPubKey);\n-    }\n-\n-    bool WriteDefaultKey(const std::vector<unsigned char>& vchPubKey)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::string(\"defaultkey\"), vchPubKey);\n-    }\n-\n-    bool ReadPool(int64 nPool, CKeyPool& keypool)\n-    {\n-        return Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n-    }\n-\n-    bool WritePool(int64 nPool, const CKeyPool& keypool)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n-    }\n-\n-    bool ErasePool(int64 nPool)\n-    {\n-        nWalletDBUpdated++;\n-        return Erase(std::make_pair(std::string(\"pool\"), nPool));\n-    }\n-\n-    // Settings are no longer stored in wallet.dat; these are\n-    // used only for backwards compatibility:\n-    template<typename T>\n-    bool ReadSetting(const std::string& strKey, T& value)\n-    {\n-        return Read(std::make_pair(std::string(\"setting\"), strKey), value);\n-    }\n-    template<typename T>\n-    bool WriteSetting(const std::string& strKey, const T& value)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"setting\"), strKey), value);\n-    }\n-    bool EraseSetting(const std::string& strKey)\n-    {\n-        nWalletDBUpdated++;\n-        return Erase(std::make_pair(std::string(\"setting\"), strKey));\n-    }\n-\n-    bool WriteMinVersion(int nVersion)\n-    {\n-        return Write(std::string(\"minversion\"), nVersion);\n-    }\n-\n-    bool ReadAccount(const std::string& strAccount, CAccount& account);\n-    bool WriteAccount(const std::string& strAccount, const CAccount& account);\n-    bool WriteAccountingEntry(const CAccountingEntry& acentry);\n-    int64 GetAccountCreditDebit(const std::string& strAccount);\n-    void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n-\n-    int LoadWallet(CWallet* pwallet);\n-};\n-\n-#endif\n+#endif // BITCOIN_DB_H"
      },
      {
        "sha": "1ea65cd2e54e6ba0a68ad998bb7123075946fbca",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
        "patch": "@@ -62,6 +62,7 @@ OBJS= \\\n     obj/script.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n+    obj/walletdb.o \\\n     obj/noui.o\n \n all: bitcoind.exe"
      },
      {
        "sha": "5584df560354756092eabc99b326d07666561df9",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
        "patch": "@@ -59,6 +59,7 @@ OBJS= \\\n     obj/script.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n+    obj/walletdb.o \\\n     obj/noui.o\n \n "
      },
      {
        "sha": "aaac6700bddb35b37f61c2b3aa6549ddcaf9a12c",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
        "patch": "@@ -84,6 +84,7 @@ OBJS= \\\n     obj/script.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n+    obj/walletdb.o \\\n     obj/noui.o\n \n ifdef USE_UPNP"
      },
      {
        "sha": "fc901ca02c12e253b135c5e520b4afb30ed6694a",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
        "patch": "@@ -103,6 +103,7 @@ OBJS= \\\n     obj/script.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n+    obj/walletdb.o \\\n     obj/noui.o\n \n "
      },
      {
        "sha": "8bc2cec40dd39191c6758cb25f2fcc689163c415",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
        "patch": "@@ -9,6 +9,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"script.h\"\n+#include \"walletdb.h\"\n \n class CWalletTx;\n class CReserveKey;"
      },
      {
        "sha": "6d21c2ccc6a73d97dbe371a37f76027412c8d1cc",
        "filename": "src/walletdb.cpp",
        "status": "added",
        "additions": 428,
        "deletions": 0,
        "changes": 428,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
        "patch": "@@ -0,0 +1,428 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"headers.h\"\n+#include \"db.h\"\n+#include <boost/filesystem.hpp>\n+\n+using namespace std;\n+using namespace boost;\n+\n+\n+static uint64 nAccountingEntryNumber = 0;\n+\n+extern CCriticalSection cs_db;\n+extern map<string, int> mapFileUseCount;\n+extern void CloseDb(const string& strFile);\n+\n+//\n+// CWalletDB\n+//\n+\n+bool CWalletDB::WriteName(const string& strAddress, const string& strName)\n+{\n+    nWalletDBUpdated++;\n+    return Write(make_pair(string(\"name\"), strAddress), strName);\n+}\n+\n+bool CWalletDB::EraseName(const string& strAddress)\n+{\n+    // This should only be used for sending addresses, never for receiving addresses,\n+    // receiving addresses must always have an address book entry if they're not change return.\n+    nWalletDBUpdated++;\n+    return Erase(make_pair(string(\"name\"), strAddress));\n+}\n+\n+bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)\n+{\n+    account.SetNull();\n+    return Read(make_pair(string(\"acc\"), strAccount), account);\n+}\n+\n+bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n+{\n+    return Write(make_pair(string(\"acc\"), strAccount), account);\n+}\n+\n+bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n+{\n+    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, ++nAccountingEntryNumber), acentry);\n+}\n+\n+int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)\n+{\n+    list<CAccountingEntry> entries;\n+    ListAccountCreditDebit(strAccount, entries);\n+\n+    int64 nCreditDebit = 0;\n+    BOOST_FOREACH (const CAccountingEntry& entry, entries)\n+        nCreditDebit += entry.nCreditDebit;\n+\n+    return nCreditDebit;\n+}\n+\n+void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)\n+{\n+    bool fAllAccounts = (strAccount == \"*\");\n+\n+    Dbc* pcursor = GetCursor();\n+    if (!pcursor)\n+        throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : cannot create DB cursor\");\n+    unsigned int fFlags = DB_SET_RANGE;\n+    loop\n+    {\n+        // Read next record\n+        CDataStream ssKey;\n+        if (fFlags == DB_SET_RANGE)\n+            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64(0));\n+        CDataStream ssValue;\n+        int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n+        fFlags = DB_NEXT;\n+        if (ret == DB_NOTFOUND)\n+            break;\n+        else if (ret != 0)\n+        {\n+            pcursor->close();\n+            throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : error scanning DB\");\n+        }\n+\n+        // Unserialize\n+        string strType;\n+        ssKey >> strType;\n+        if (strType != \"acentry\")\n+            break;\n+        CAccountingEntry acentry;\n+        ssKey >> acentry.strAccount;\n+        if (!fAllAccounts && acentry.strAccount != strAccount)\n+            break;\n+\n+        ssValue >> acentry;\n+        entries.push_back(acentry);\n+    }\n+\n+    pcursor->close();\n+}\n+\n+\n+int CWalletDB::LoadWallet(CWallet* pwallet)\n+{\n+    pwallet->vchDefaultKey.clear();\n+    int nFileVersion = 0;\n+    vector<uint256> vWalletUpgrade;\n+    bool fIsEncrypted = false;\n+\n+    //// todo: shouldn't we catch exceptions and try to recover and continue?\n+    {\n+        LOCK(pwallet->cs_wallet);\n+        int nMinVersion = 0;\n+        if (Read((string)\"minversion\", nMinVersion))\n+        {\n+            if (nMinVersion > CLIENT_VERSION)\n+                return DB_TOO_NEW;\n+            pwallet->LoadMinVersion(nMinVersion);\n+        }\n+\n+        // Get cursor\n+        Dbc* pcursor = GetCursor();\n+        if (!pcursor)\n+        {\n+            printf(\"Error getting wallet database cursor\\n\");\n+            return DB_CORRUPT;\n+        }\n+\n+        loop\n+        {\n+            // Read next record\n+            CDataStream ssKey;\n+            CDataStream ssValue;\n+            int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n+            if (ret == DB_NOTFOUND)\n+                break;\n+            else if (ret != 0)\n+            {\n+                printf(\"Error reading next record from wallet database\\n\");\n+                return DB_CORRUPT;\n+            }\n+\n+            // Unserialize\n+            // Taking advantage of the fact that pair serialization\n+            // is just the two items serialized one after the other\n+            string strType;\n+            ssKey >> strType;\n+            if (strType == \"name\")\n+            {\n+                string strAddress;\n+                ssKey >> strAddress;\n+                ssValue >> pwallet->mapAddressBook[strAddress];\n+            }\n+            else if (strType == \"tx\")\n+            {\n+                uint256 hash;\n+                ssKey >> hash;\n+                CWalletTx& wtx = pwallet->mapWallet[hash];\n+                ssValue >> wtx;\n+                wtx.BindWallet(pwallet);\n+\n+                if (wtx.GetHash() != hash)\n+                    printf(\"Error in wallet.dat, hash mismatch\\n\");\n+\n+                // Undo serialize changes in 31600\n+                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+                {\n+                    if (!ssValue.empty())\n+                    {\n+                        char fTmp;\n+                        char fUnused;\n+                        ssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n+                        printf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\\n\", wtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount.c_str(), hash.ToString().c_str());\n+                        wtx.fTimeReceivedIsTxTime = fTmp;\n+                    }\n+                    else\n+                    {\n+                        printf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString().c_str());\n+                        wtx.fTimeReceivedIsTxTime = 0;\n+                    }\n+                    vWalletUpgrade.push_back(hash);\n+                }\n+\n+                //// debug print\n+                //printf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString().c_str());\n+                //printf(\" %12I64d  %s  %s  %s\\n\",\n+                //    wtx.vout[0].nValue,\n+                //    DateTimeStrFormat(\"%x %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n+                //    wtx.hashBlock.ToString().substr(0,20).c_str(),\n+                //    wtx.mapValue[\"message\"].c_str());\n+            }\n+            else if (strType == \"acentry\")\n+            {\n+                string strAccount;\n+                ssKey >> strAccount;\n+                uint64 nNumber;\n+                ssKey >> nNumber;\n+                if (nNumber > nAccountingEntryNumber)\n+                    nAccountingEntryNumber = nNumber;\n+            }\n+            else if (strType == \"key\" || strType == \"wkey\")\n+            {\n+                vector<unsigned char> vchPubKey;\n+                ssKey >> vchPubKey;\n+                CKey key;\n+                if (strType == \"key\")\n+                {\n+                    CPrivKey pkey;\n+                    ssValue >> pkey;\n+                    key.SetPubKey(vchPubKey);\n+                    key.SetPrivKey(pkey);\n+                    if (key.GetPubKey() != vchPubKey)\n+                    {\n+                        printf(\"Error reading wallet database: CPrivKey pubkey inconsistency\\n\");\n+                        return DB_CORRUPT;\n+                    }\n+                    if (!key.IsValid())\n+                    {\n+                        printf(\"Error reading wallet database: invalid CPrivKey\\n\");\n+                        return DB_CORRUPT;\n+                    }\n+                }\n+                else\n+                {\n+                    CWalletKey wkey;\n+                    ssValue >> wkey;\n+                    key.SetPubKey(vchPubKey);\n+                    key.SetPrivKey(wkey.vchPrivKey);\n+                    if (key.GetPubKey() != vchPubKey)\n+                    {\n+                        printf(\"Error reading wallet database: CWalletKey pubkey inconsistency\\n\");\n+                        return DB_CORRUPT;\n+                    }\n+                    if (!key.IsValid())\n+                    {\n+                        printf(\"Error reading wallet database: invalid CWalletKey\\n\");\n+                        return DB_CORRUPT;\n+                    }\n+                }\n+                if (!pwallet->LoadKey(key))\n+                {\n+                    printf(\"Error reading wallet database: LoadKey failed\\n\");\n+                    return DB_CORRUPT;\n+                }\n+            }\n+            else if (strType == \"mkey\")\n+            {\n+                unsigned int nID;\n+                ssKey >> nID;\n+                CMasterKey kMasterKey;\n+                ssValue >> kMasterKey;\n+                if(pwallet->mapMasterKeys.count(nID) != 0)\n+                {\n+                    printf(\"Error reading wallet database: duplicate CMasterKey id %u\\n\", nID);\n+                    return DB_CORRUPT;\n+                }\n+                pwallet->mapMasterKeys[nID] = kMasterKey;\n+                if (pwallet->nMasterKeyMaxID < nID)\n+                    pwallet->nMasterKeyMaxID = nID;\n+            }\n+            else if (strType == \"ckey\")\n+            {\n+                vector<unsigned char> vchPubKey;\n+                ssKey >> vchPubKey;\n+                vector<unsigned char> vchPrivKey;\n+                ssValue >> vchPrivKey;\n+                if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n+                {\n+                    printf(\"Error reading wallet database: LoadCryptedKey failed\\n\");\n+                    return DB_CORRUPT;\n+                }\n+                fIsEncrypted = true;\n+            }\n+            else if (strType == \"defaultkey\")\n+            {\n+                ssValue >> pwallet->vchDefaultKey;\n+            }\n+            else if (strType == \"pool\")\n+            {\n+                int64 nIndex;\n+                ssKey >> nIndex;\n+                pwallet->setKeyPool.insert(nIndex);\n+            }\n+            else if (strType == \"version\")\n+            {\n+                ssValue >> nFileVersion;\n+                if (nFileVersion == 10300)\n+                    nFileVersion = 300;\n+            }\n+            else if (strType == \"cscript\")\n+            {\n+                uint160 hash;\n+                ssKey >> hash;\n+                CScript script;\n+                ssValue >> script;\n+                if (!pwallet->LoadCScript(script))\n+                {\n+                    printf(\"Error reading wallet database: LoadCScript failed\\n\");\n+                    return DB_CORRUPT;\n+                }\n+            }\n+        }\n+        pcursor->close();\n+    }\n+\n+    BOOST_FOREACH(uint256 hash, vWalletUpgrade)\n+        WriteTx(hash, pwallet->mapWallet[hash]);\n+\n+    printf(\"nFileVersion = %d\\n\", nFileVersion);\n+\n+\n+    // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+    if (fIsEncrypted && (nFileVersion == 40000 || nFileVersion == 50000))\n+        return DB_NEED_REWRITE;\n+\n+    if (nFileVersion < CLIENT_VERSION) // Update\n+        WriteVersion(CLIENT_VERSION);\n+\n+    return DB_LOAD_OK;\n+}\n+\n+void ThreadFlushWalletDB(void* parg)\n+{\n+    const string& strFile = ((const string*)parg)[0];\n+    static bool fOneThread;\n+    if (fOneThread)\n+        return;\n+    fOneThread = true;\n+    if (!GetBoolArg(\"-flushwallet\", true))\n+        return;\n+\n+    unsigned int nLastSeen = nWalletDBUpdated;\n+    unsigned int nLastFlushed = nWalletDBUpdated;\n+    int64 nLastWalletUpdate = GetTime();\n+    while (!fShutdown)\n+    {\n+        Sleep(500);\n+\n+        if (nLastSeen != nWalletDBUpdated)\n+        {\n+            nLastSeen = nWalletDBUpdated;\n+            nLastWalletUpdate = GetTime();\n+        }\n+\n+        if (nLastFlushed != nWalletDBUpdated && GetTime() - nLastWalletUpdate >= 2)\n+        {\n+            TRY_LOCK(cs_db,lockDb);\n+            if (lockDb)\n+            {\n+                // Don't do this if any databases are in use\n+                int nRefCount = 0;\n+                map<string, int>::iterator mi = mapFileUseCount.begin();\n+                while (mi != mapFileUseCount.end())\n+                {\n+                    nRefCount += (*mi).second;\n+                    mi++;\n+                }\n+\n+                if (nRefCount == 0 && !fShutdown)\n+                {\n+                    map<string, int>::iterator mi = mapFileUseCount.find(strFile);\n+                    if (mi != mapFileUseCount.end())\n+                    {\n+                        printf(\"%s \", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());\n+                        printf(\"Flushing wallet.dat\\n\");\n+                        nLastFlushed = nWalletDBUpdated;\n+                        int64 nStart = GetTimeMillis();\n+\n+                        // Flush wallet.dat so it's self contained\n+                        CloseDb(strFile);\n+                        dbenv.txn_checkpoint(0, 0, 0);\n+                        dbenv.lsn_reset(strFile.c_str(), 0);\n+\n+                        mapFileUseCount.erase(mi++);\n+                        printf(\"Flushed wallet.dat %\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+bool BackupWallet(const CWallet& wallet, const string& strDest)\n+{\n+    if (!wallet.fFileBacked)\n+        return false;\n+    while (!fShutdown)\n+    {\n+        {\n+            LOCK(cs_db);\n+            if (!mapFileUseCount.count(wallet.strWalletFile) || mapFileUseCount[wallet.strWalletFile] == 0)\n+            {\n+                // Flush log data to the dat file\n+                CloseDb(wallet.strWalletFile);\n+                dbenv.txn_checkpoint(0, 0, 0);\n+                dbenv.lsn_reset(wallet.strWalletFile.c_str(), 0);\n+                mapFileUseCount.erase(wallet.strWalletFile);\n+\n+                // Copy wallet.dat\n+                filesystem::path pathSrc = GetDataDir() / wallet.strWalletFile;\n+                filesystem::path pathDest(strDest);\n+                if (filesystem::is_directory(pathDest))\n+                    pathDest /= wallet.strWalletFile;\n+\n+                try {\n+#if BOOST_VERSION >= 104000\n+                    filesystem::copy_file(pathSrc, pathDest, filesystem::copy_option::overwrite_if_exists);\n+#else\n+                    filesystem::copy_file(pathSrc, pathDest);\n+#endif\n+                    printf(\"copied wallet.dat to %s\\n\", pathDest.string().c_str());\n+                    return true;\n+                } catch(const filesystem::filesystem_error &e) {\n+                    printf(\"error copying wallet.dat to %s - %s\\n\", pathDest.string().c_str(), e.what());\n+                    return false;\n+                }\n+            }\n+        }\n+        Sleep(100);\n+    }\n+    return false;\n+}"
      },
      {
        "sha": "02f8db6c357a0bd1a30e86801adaf9fbe087607c",
        "filename": "src/walletdb.h",
        "status": "added",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af5d0addc2820f1e65103914cea7ace0f3e4eb1/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
        "patch": "@@ -0,0 +1,175 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_WALLETDB_H\n+#define BITCOIN_WALLETDB_H\n+\n+#include \"db.h\"\n+\n+/** Error statuses for the wallet database */\n+enum DBErrors\n+{\n+    DB_LOAD_OK,\n+    DB_CORRUPT,\n+    DB_TOO_NEW,\n+    DB_LOAD_FAIL,\n+    DB_NEED_REWRITE\n+};\n+\n+/** Access to the wallet database (wallet.dat) */\n+class CWalletDB : public CDB\n+{\n+public:\n+    CWalletDB(std::string strFilename, const char* pszMode=\"r+\") : CDB(strFilename.c_str(), pszMode)\n+    {\n+    }\n+private:\n+    CWalletDB(const CWalletDB&);\n+    void operator=(const CWalletDB&);\n+public:\n+    bool ReadName(const std::string& strAddress, std::string& strName)\n+    {\n+        strName = \"\";\n+        return Read(std::make_pair(std::string(\"name\"), strAddress), strName);\n+    }\n+\n+    bool WriteName(const std::string& strAddress, const std::string& strName);\n+\n+    bool EraseName(const std::string& strAddress);\n+\n+    bool ReadTx(uint256 hash, CWalletTx& wtx)\n+    {\n+        return Read(std::make_pair(std::string(\"tx\"), hash), wtx);\n+    }\n+\n+    bool WriteTx(uint256 hash, const CWalletTx& wtx)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"tx\"), hash), wtx);\n+    }\n+\n+    bool EraseTx(uint256 hash)\n+    {\n+        nWalletDBUpdated++;\n+        return Erase(std::make_pair(std::string(\"tx\"), hash));\n+    }\n+\n+    bool ReadKey(const std::vector<unsigned char>& vchPubKey, CPrivKey& vchPrivKey)\n+    {\n+        vchPrivKey.clear();\n+        return Read(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey);\n+    }\n+\n+    bool WriteKey(const std::vector<unsigned char>& vchPubKey, const CPrivKey& vchPrivKey)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey, false);\n+    }\n+\n+    bool WriteCryptedKey(const std::vector<unsigned char>& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)\n+    {\n+        nWalletDBUpdated++;\n+        if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n+            return false;\n+        if (fEraseUnencryptedKey)\n+        {\n+            Erase(std::make_pair(std::string(\"key\"), vchPubKey));\n+            Erase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n+        }\n+        return true;\n+    }\n+\n+    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n+    }\n+\n+    // Support for BIP 0013 : see https://en.bitcoin.it/wiki/BIP_0013\n+    bool ReadCScript(const uint160 &hash, CScript& redeemScript)\n+    {\n+        redeemScript.clear();\n+        return Read(std::make_pair(std::string(\"cscript\"), hash), redeemScript);\n+    }\n+\n+    bool WriteCScript(const uint160& hash, const CScript& redeemScript)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n+    }\n+\n+    bool WriteBestBlock(const CBlockLocator& locator)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::string(\"bestblock\"), locator);\n+    }\n+\n+    bool ReadBestBlock(CBlockLocator& locator)\n+    {\n+        return Read(std::string(\"bestblock\"), locator);\n+    }\n+\n+    bool ReadDefaultKey(std::vector<unsigned char>& vchPubKey)\n+    {\n+        vchPubKey.clear();\n+        return Read(std::string(\"defaultkey\"), vchPubKey);\n+    }\n+\n+    bool WriteDefaultKey(const std::vector<unsigned char>& vchPubKey)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::string(\"defaultkey\"), vchPubKey);\n+    }\n+\n+    bool ReadPool(int64 nPool, CKeyPool& keypool)\n+    {\n+        return Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+    }\n+\n+    bool WritePool(int64 nPool, const CKeyPool& keypool)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+    }\n+\n+    bool ErasePool(int64 nPool)\n+    {\n+        nWalletDBUpdated++;\n+        return Erase(std::make_pair(std::string(\"pool\"), nPool));\n+    }\n+\n+    // Settings are no longer stored in wallet.dat; these are\n+    // used only for backwards compatibility:\n+    template<typename T>\n+    bool ReadSetting(const std::string& strKey, T& value)\n+    {\n+        return Read(std::make_pair(std::string(\"setting\"), strKey), value);\n+    }\n+    template<typename T>\n+    bool WriteSetting(const std::string& strKey, const T& value)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"setting\"), strKey), value);\n+    }\n+    bool EraseSetting(const std::string& strKey)\n+    {\n+        nWalletDBUpdated++;\n+        return Erase(std::make_pair(std::string(\"setting\"), strKey));\n+    }\n+\n+    bool WriteMinVersion(int nVersion)\n+    {\n+        return Write(std::string(\"minversion\"), nVersion);\n+    }\n+\n+    bool ReadAccount(const std::string& strAccount, CAccount& account);\n+    bool WriteAccount(const std::string& strAccount, const CAccount& account);\n+    bool WriteAccountingEntry(const CAccountingEntry& acentry);\n+    int64 GetAccountCreditDebit(const std::string& strAccount);\n+    void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n+\n+    int LoadWallet(CWallet* pwallet);\n+};\n+\n+#endif // BITCOIN_WALLETDB_H"
      }
    ]
  },
  {
    "sha": "ea97c507a6c650cf082ba41a97072f1103142047",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTk3YzUwN2E2YzY1MGNmMDgyYmE0MWE5NzA3MmYxMTAzMTQyMDQ3",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T21:57:25Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-15T21:57:25Z"
      },
      "message": "Greatly reduce use of headers.h.",
      "tree": {
        "sha": "9738ef064001cab27f11cbdb1e07eed80c21eab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9738ef064001cab27f11cbdb1e07eed80c21eab0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea97c507a6c650cf082ba41a97072f1103142047",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea97c507a6c650cf082ba41a97072f1103142047",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea97c507a6c650cf082ba41a97072f1103142047",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea97c507a6c650cf082ba41a97072f1103142047/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af5d0addc2820f1e65103914cea7ace0f3e4eb1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4af5d0addc2820f1e65103914cea7ace0f3e4eb1"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 26,
      "deletions": 12
    },
    "files": [
      {
        "sha": "efddf74c53d3782585990a8c069c291ed33089be",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea97c507a6c650cf082ba41a97072f1103142047/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea97c507a6c650cf082ba41a97072f1103142047/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=ea97c507a6c650cf082ba41a97072f1103142047",
        "patch": "@@ -5,7 +5,6 @@\n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/foreach.hpp>\n \n-#include \"headers.h\"\n #include \"checkpoints.h\"\n \n namespace Checkpoints"
      },
      {
        "sha": "a1ea7add9c9323d93afe91ba41ba71af7cbee8cd",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea97c507a6c650cf082ba41a97072f1103142047/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea97c507a6c650cf082ba41a97072f1103142047/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=ea97c507a6c650cf082ba41a97072f1103142047",
        "patch": "@@ -6,7 +6,6 @@\n #include <openssl/evp.h>\n #include <vector>\n #include <string>\n-#include \"headers.h\"\n #ifdef WIN32\n #include <windows.h>\n #endif"
      },
      {
        "sha": "235e3aa916b8defd80b9640ae304ff2c01f86c22",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea97c507a6c650cf082ba41a97072f1103142047/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea97c507a6c650cf082ba41a97072f1103142047/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=ea97c507a6c650cf082ba41a97072f1103142047",
        "patch": "@@ -3,7 +3,10 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <fcntl.h>\n+#include \"main.h\"\n #include \"db.h\"\n #include \"net.h\"\n #include <boost/version.hpp>"
      },
      {
        "sha": "ab4e9208a2ff6b35019b0a2bc1a921a92632b108",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea97c507a6c650cf082ba41a97072f1103142047/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea97c507a6c650cf082ba41a97072f1103142047/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=ea97c507a6c650cf082ba41a97072f1103142047",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n+#include \"base58.h\"\n #include \"irc.h\"\n #include \"net.h\"\n #include \"strlcpy.h\""
      },
      {
        "sha": "7ac5d4a44af45255c66117d32a44d9f42f781ade",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea97c507a6c650cf082ba41a97072f1103142047/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea97c507a6c650cf082ba41a97072f1103142047/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=ea97c507a6c650cf082ba41a97072f1103142047",
        "patch": "@@ -3,10 +3,11 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n+#include \"main.h\"\n #include \"crypter.h\"\n #include \"db.h\"\n #include \"script.h\"\n+#include \"keystore.h\"\n \n bool CKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char> &vchPubKeyOut) const\n {"
      },
      {
        "sha": "a382fa094220e667a7daf036c97b891df70e28cb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea97c507a6c650cf082ba41a97072f1103142047/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea97c507a6c650cf082ba41a97072f1103142047/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ea97c507a6c650cf082ba41a97072f1103142047",
        "patch": "@@ -3,13 +3,15 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n+#include <fcntl.h>\n+#include \"main.h\"\n #include \"irc.h\"\n #include \"db.h\"\n #include \"net.h\"\n #include \"init.h\"\n #include \"strlcpy.h\"\n #include \"addrman.h\"\n+#include \"ui_interface.h\"\n \n #ifdef WIN32\n #include <string.h>"
      },
      {
        "sha": "3483b74d7f426bb16c419adc8c9e8701ab140e49",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea97c507a6c650cf082ba41a97072f1103142047/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea97c507a6c650cf082ba41a97072f1103142047/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=ea97c507a6c650cf082ba41a97072f1103142047",
        "patch": "@@ -5,8 +5,10 @@\n #include \"ui_interface.h\"\n \n #include <string>\n-#include \"headers.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n #include \"init.h\"\n+#include \"ui_interface.h\"\n \n int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n {"
      },
      {
        "sha": "f613e39f6c99f753b6bb8f37f12b0c4bb685c106",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea97c507a6c650cf082ba41a97072f1103142047/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea97c507a6c650cf082ba41a97072f1103142047/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=ea97c507a6c650cf082ba41a97072f1103142047",
        "patch": "@@ -2,9 +2,11 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n #include \"init.h\" // for pwalletMain\n #include \"bitcoinrpc.h\"\n+#include \"ui_interface.h\"\n \n #include <boost/lexical_cast.hpp>\n "
      },
      {
        "sha": "ed5672b87ac2fb6fed506fa8a1965063ff34298f",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea97c507a6c650cf082ba41a97072f1103142047/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea97c507a6c650cf082ba41a97072f1103142047/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=ea97c507a6c650cf082ba41a97072f1103142047",
        "patch": "@@ -2,7 +2,9 @@\n // Copyright (c) 2009-2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-#include \"headers.h\"\n+\n+#include \"main.h\"\n+#include \"keystore.h\"\n \n using namespace std;\n using namespace boost;"
      },
      {
        "sha": "9b431ad1b439ab4b7db8d52adffe5b630de1b635",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea97c507a6c650cf082ba41a97072f1103142047/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea97c507a6c650cf082ba41a97072f1103142047/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ea97c507a6c650cf082ba41a97072f1103142047",
        "patch": "@@ -3,8 +3,9 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n+#include \"main.h\"\n #include \"strlcpy.h\"\n+#include \"ui_interface.h\"\n #include <boost/algorithm/string/join.hpp>\n \n // Work around clang compilation problem in Boost 1.46:"
      },
      {
        "sha": "ac30c0e467140740be3fdcb8867e18225232eef0",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea97c507a6c650cf082ba41a97072f1103142047/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea97c507a6c650cf082ba41a97072f1103142047/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ea97c507a6c650cf082ba41a97072f1103142047",
        "patch": "@@ -3,9 +3,11 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n #include \"db.h\"\n #include \"crypter.h\"\n+#include \"ui_interface.h\"\n \n using namespace std;\n "
      },
      {
        "sha": "42f30fb8a8341e8687054934bf1aa2861bb255c5",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea97c507a6c650cf082ba41a97072f1103142047/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea97c507a6c650cf082ba41a97072f1103142047/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=ea97c507a6c650cf082ba41a97072f1103142047",
        "patch": "@@ -3,8 +3,9 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n+#include \"main.h\"\n #include \"db.h\"\n+#include \"wallet.h\"\n #include <boost/filesystem.hpp>\n \n using namespace std;"
      }
    ]
  },
  {
    "sha": "0ff6ce4e2ad4cf6c38210c615df42dd17403080e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmY2Y2U0ZTJhZDRjZjZjMzgyMTBjNjE1ZGY0MmRkMTc0MDMwODBl",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T22:20:05Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-15T22:20:05Z"
      },
      "message": "Move proto version to version.h.  Reduce header deps a bit more.",
      "tree": {
        "sha": "dfc79257240c5a10086c2243be1318156b2e5ca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfc79257240c5a10086c2243be1318156b2e5ca2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ff6ce4e2ad4cf6c38210c615df42dd17403080e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff6ce4e2ad4cf6c38210c615df42dd17403080e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ff6ce4e2ad4cf6c38210c615df42dd17403080e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff6ce4e2ad4cf6c38210c615df42dd17403080e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ea97c507a6c650cf082ba41a97072f1103142047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea97c507a6c650cf082ba41a97072f1103142047",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea97c507a6c650cf082ba41a97072f1103142047"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 15,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0f657fae1eca9dc4681759f2a6a01324063456ff",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ff6ce4e2ad4cf6c38210c615df42dd17403080e/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ff6ce4e2ad4cf6c38210c615df42dd17403080e/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=0ff6ce4e2ad4cf6c38210c615df42dd17403080e",
        "patch": "@@ -12,7 +12,6 @@\n \n #include \"serialize.h\"\n #include \"netbase.h\"\n-#include \"util.h\"\n #include <string>\n #include \"uint256.h\"\n "
      },
      {
        "sha": "d34f3e557ceb5f8bed32aef8fc728abeb9785148",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ff6ce4e2ad4cf6c38210c615df42dd17403080e/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ff6ce4e2ad4cf6c38210c615df42dd17403080e/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=0ff6ce4e2ad4cf6c38210c615df42dd17403080e",
        "patch": "@@ -20,6 +20,7 @@\n #include <boost/tuple/tuple_io.hpp>\n \n #include \"allocators.h\"\n+#include \"version.h\"\n \n typedef long long  int64;\n typedef unsigned long long  uint64;\n@@ -29,8 +30,6 @@ class CDataStream;\n class CAutoFile;\n static const unsigned int MAX_SIZE = 0x02000000;\n \n-static const int PROTOCOL_VERSION = 60000;\n-\n // Used to bypass the rule against non-const reference to temporary\n // where it makes sense with wrappers such as CFlatData or CTxDB\n template<typename T>"
      },
      {
        "sha": "5db1c3d5a35c1efe5b558de182f5e24fc015ad88",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ff6ce4e2ad4cf6c38210c615df42dd17403080e/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ff6ce4e2ad4cf6c38210c615df42dd17403080e/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=0ff6ce4e2ad4cf6c38210c615df42dd17403080e",
        "patch": "@@ -5,12 +5,13 @@\n #ifndef BITCOIN_UINT256_H\n #define BITCOIN_UINT256_H\n \n-#include \"serialize.h\"\n-\n #include <limits.h>\n+#include <string.h>\n #include <string>\n #include <vector>\n \n+#include \"version.h\"\n+\n typedef long long  int64;\n typedef unsigned long long  uint64;\n "
      },
      {
        "sha": "fd1a320180b6f5eae4bb3b56c32d1c5c0c37a882",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ff6ce4e2ad4cf6c38210c615df42dd17403080e/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ff6ce4e2ad4cf6c38210c615df42dd17403080e/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=0ff6ce4e2ad4cf6c38210c615df42dd17403080e",
        "patch": "@@ -6,9 +6,20 @@\n \n #include <string>\n \n+//\n+// client versioning\n+//\n+\n extern const std::string CLIENT_NAME;\n extern const std::string CLIENT_BUILD;\n extern const std::string CLIENT_DATE;\n extern const int         CLIENT_VERSION;\n \n+\n+//\n+// network protocol versioning\n+//\n+\n+static const int PROTOCOL_VERSION = 60000;\n+\n #endif"
      }
    ]
  }
]