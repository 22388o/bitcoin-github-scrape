[
  {
    "sha": "dd718c8f54b2b3e205b1bfd9607011123e99da6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDcxOGM4ZjU0YjJiM2UyMDViMWJmZDk2MDcwMTExMjNlOTlkYTZi",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-12-29T17:21:08Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-12-29T17:21:08Z"
      },
      "message": "Do not use signals for communication between net and net_processing.\n\nThe code was previously using boost::signals2 for communication between\n net and net_processing.  Because there are no other participants and\n the relationship was completely static, this was providing no value.\n\nBoost signals are rather complex and expensive compared to a direct\n function call:  They involve locking and roughly a screen full of\n backtrace, an they make the control flow less clear. In places\n where there are multiple participants or wiring that changes,\n they can be worth their cost-- but none of that is being used in this\n case and I can't foresee it being used here.\n\nI also found that removing this indirection resulted in a ~4% IBD\n speedup on top of #9415.",
      "tree": {
        "sha": "e9f0d496243d8d892b1e5668163d61e21bf52518",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9f0d496243d8d892b1e5668163d61e21bf52518"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd718c8f54b2b3e205b1bfd9607011123e99da6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd718c8f54b2b3e205b1bfd9607011123e99da6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd718c8f54b2b3e205b1bfd9607011123e99da6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd718c8f54b2b3e205b1bfd9607011123e99da6b/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f921e6a0492c4e9f037a9ed91f474885032d68c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f921e6a0492c4e9f037a9ed91f474885032d68c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f921e6a0492c4e9f037a9ed91f474885032d68c"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 57,
      "deletions": 94
    },
    "files": [
      {
        "sha": "e5cd5ba7f04429f4edd9c6dbb3b423a137f14b0c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dd718c8f54b2b3e205b1bfd9607011123e99da6b",
        "patch": "@@ -208,7 +208,6 @@ void Shutdown()\n     g_connman.reset();\n \n     StopTorControl();\n-    UnregisterNodeSignals(GetNodeSignals());\n     DumpMempool();\n \n     if (fFeeEstimatesInitialized)\n@@ -1150,7 +1149,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     peerLogic.reset(new PeerLogicValidation(&connman));\n     RegisterValidationInterface(peerLogic.get());\n-    RegisterNodeSignals(GetNodeSignals());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<string> uacomments;"
      },
      {
        "sha": "5f7c18cad5bbdc084ad6d219c8451d0758134f73",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dd718c8f54b2b3e205b1bfd9607011123e99da6b",
        "patch": "@@ -21,6 +21,7 @@\n #include \"scheduler.h\"\n #include \"ui_interface.h\"\n #include \"utilstrencodings.h\"\n+#include \"net_processing.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -78,10 +79,6 @@ std::string strSubVersion;\n \n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n-// Signals for message handling\n-static CNodeSignals g_signals;\n-CNodeSignals& GetNodeSignals() { return g_signals; }\n-\n void CConnman::AddOneShot(const std::string& strDest)\n {\n     LOCK(cs_vOneShots);\n@@ -395,7 +392,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n         pnode->nTimeConnected = GetTime();\n         pnode->AddRef();\n-        GetNodeSignals().InitializeNode(pnode, *this);\n+        InitializeNode(pnode, *this);\n         {\n             LOCK(cs_vNodes);\n             vNodes.push_back(pnode);\n@@ -1029,7 +1026,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, \"\", true);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n-    GetNodeSignals().InitializeNode(pnode, *this);\n+    InitializeNode(pnode, *this);\n \n     LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n \n@@ -1848,7 +1845,7 @@ void CConnman::ThreadMessageHandler()\n                 TRY_LOCK(pnode->cs_vRecvMsg, lockRecv);\n                 if (lockRecv)\n                 {\n-                    if (!GetNodeSignals().ProcessMessages(pnode, *this))\n+                    if (!ProcessMessages(pnode, *this))\n                         pnode->CloseSocketDisconnect();\n \n                     if (pnode->nSendSize < GetSendBufferSize())\n@@ -1866,8 +1863,9 @@ void CConnman::ThreadMessageHandler()\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n-                    GetNodeSignals().SendMessages(pnode, *this);\n+                    SendMessages(pnode, *this);\n             }\n+\n             boost::this_thread::interruption_point();\n         }\n \n@@ -2224,7 +2222,7 @@ void CConnman::DeleteNode(CNode* pnode)\n {\n     assert(pnode);\n     bool fUpdateConnectionTime = false;\n-    GetNodeSignals().FinalizeNode(pnode->GetId(), fUpdateConnectionTime);\n+    FinalizeNode(pnode->GetId(), fUpdateConnectionTime);\n     if(fUpdateConnectionTime)\n         addrman.Connected(pnode->addr);\n     delete pnode;"
      },
      {
        "sha": "7473a45282b79275b3b61e8dd7395723a44c5f31",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=dd718c8f54b2b3e205b1bfd9607011123e99da6b",
        "patch": "@@ -31,7 +31,6 @@\n \n #include <boost/filesystem/path.hpp>\n #include <boost/foreach.hpp>\n-#include <boost/signals2/signal.hpp>\n \n class CAddrMan;\n class CScheduler;\n@@ -442,19 +441,6 @@ struct CombinerAll\n     }\n };\n \n-// Signals for message handling\n-struct CNodeSignals\n-{\n-    boost::signals2::signal<bool (CNode*, CConnman&), CombinerAll> ProcessMessages;\n-    boost::signals2::signal<bool (CNode*, CConnman&), CombinerAll> SendMessages;\n-    boost::signals2::signal<void (CNode*, CConnman&)> InitializeNode;\n-    boost::signals2::signal<void (NodeId, bool&)> FinalizeNode;\n-};\n-\n-\n-CNodeSignals& GetNodeSignals();\n-\n-\n enum\n {\n     LOCAL_NONE,   // unknown"
      },
      {
        "sha": "73b41a98dd7c88230eb258c6be0d0eca810e006e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 58,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=dd718c8f54b2b3e205b1bfd9607011123e99da6b",
        "patch": "@@ -261,48 +261,6 @@ void PushNodeVersion(CNode *pnode, CConnman& connman, int64_t nTime)\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, addrMe.ToString(), nodeid);\n }\n \n-void InitializeNode(CNode *pnode, CConnman& connman) {\n-    CAddress addr = pnode->addr;\n-    std::string addrName = pnode->addrName;\n-    NodeId nodeid = pnode->GetId();\n-    {\n-        LOCK(cs_main);\n-        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName)));\n-    }\n-    if(!pnode->fInbound)\n-        PushNodeVersion(pnode, connman, GetTime());\n-}\n-\n-void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n-    fUpdateConnectionTime = false;\n-    LOCK(cs_main);\n-    CNodeState *state = State(nodeid);\n-\n-    if (state->fSyncStarted)\n-        nSyncStarted--;\n-\n-    if (state->nMisbehavior == 0 && state->fCurrentlyConnected) {\n-        fUpdateConnectionTime = true;\n-    }\n-\n-    BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight) {\n-        mapBlocksInFlight.erase(entry.hash);\n-    }\n-    EraseOrphansFor(nodeid);\n-    nPreferredDownload -= state->fPreferredDownload;\n-    nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);\n-    assert(nPeersWithValidatedDownloads >= 0);\n-\n-    mapNodeState.erase(nodeid);\n-\n-    if (mapNodeState.empty()) {\n-        // Do a consistency check after the last peer is removed.\n-        assert(mapBlocksInFlight.empty());\n-        assert(nPreferredDownload == 0);\n-        assert(nPeersWithValidatedDownloads == 0);\n-    }\n-}\n-\n // Requires cs_main.\n // Returns a bool indicating whether we requested this block.\n // Also used if a block was /not/ received and timed out or started with another peer\n@@ -550,6 +508,48 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n \n } // anon namespace\n \n+void InitializeNode(CNode *pnode, CConnman& connman) {\n+    CAddress addr = pnode->addr;\n+    std::string addrName = pnode->addrName;\n+    NodeId nodeid = pnode->GetId();\n+    {\n+        LOCK(cs_main);\n+        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName)));\n+    }\n+    if(!pnode->fInbound)\n+        PushNodeVersion(pnode, connman, GetTime());\n+}\n+\n+void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n+    fUpdateConnectionTime = false;\n+    LOCK(cs_main);\n+    CNodeState *state = State(nodeid);\n+\n+    if (state->fSyncStarted)\n+        nSyncStarted--;\n+\n+    if (state->nMisbehavior == 0 && state->fCurrentlyConnected) {\n+        fUpdateConnectionTime = true;\n+    }\n+\n+    BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight) {\n+        mapBlocksInFlight.erase(entry.hash);\n+    }\n+    EraseOrphansFor(nodeid);\n+    nPreferredDownload -= state->fPreferredDownload;\n+    nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);\n+    assert(nPeersWithValidatedDownloads >= 0);\n+\n+    mapNodeState.erase(nodeid);\n+\n+    if (mapNodeState.empty()) {\n+        // Do a consistency check after the last peer is removed.\n+        assert(mapBlocksInFlight.empty());\n+        assert(nPreferredDownload == 0);\n+        assert(nPeersWithValidatedDownloads == 0);\n+    }\n+}\n+\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     LOCK(cs_main);\n     CNodeState *state = State(nodeid);\n@@ -565,22 +565,6 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     return true;\n }\n \n-void RegisterNodeSignals(CNodeSignals& nodeSignals)\n-{\n-    nodeSignals.ProcessMessages.connect(&ProcessMessages);\n-    nodeSignals.SendMessages.connect(&SendMessages);\n-    nodeSignals.InitializeNode.connect(&InitializeNode);\n-    nodeSignals.FinalizeNode.connect(&FinalizeNode);\n-}\n-\n-void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n-{\n-    nodeSignals.ProcessMessages.disconnect(&ProcessMessages);\n-    nodeSignals.SendMessages.disconnect(&SendMessages);\n-    nodeSignals.InitializeNode.disconnect(&InitializeNode);\n-    nodeSignals.FinalizeNode.disconnect(&FinalizeNode);\n-}\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // mapOrphanTransactions"
      },
      {
        "sha": "76a766c634cbe318beda3145c55631c879e1d0f9",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=dd718c8f54b2b3e205b1bfd9607011123e99da6b",
        "patch": "@@ -9,11 +9,6 @@\n #include \"net.h\"\n #include \"validationinterface.h\"\n \n-/** Register with a network node to receive its signals */\n-void RegisterNodeSignals(CNodeSignals& nodeSignals);\n-/** Unregister a network node */\n-void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n-\n class PeerLogicValidation : public CValidationInterface {\n private:\n     CConnman* connman;\n@@ -38,6 +33,10 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */\n void Misbehaving(NodeId nodeid, int howmuch);\n \n+void InitializeNode(CNode *pnode, CConnman& connman);\n+\n+void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime);\n+\n /** Process protocol messages received from a given node */\n bool ProcessMessages(CNode* pfrom, CConnman& connman);\n /**"
      },
      {
        "sha": "258ea6899b8cb21d9515a839dc50be967ca9dd12",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=dd718c8f54b2b3e205b1bfd9607011123e99da6b",
        "patch": "@@ -50,7 +50,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n+    InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     SendMessages(&dummyNode1, *connman);\n@@ -60,7 +60,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n     CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, \"\", true);\n     dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode2, *connman);\n+    InitializeNode(&dummyNode2, *connman);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n     SendMessages(&dummyNode2, *connman);\n@@ -78,7 +78,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n+    InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n     SendMessages(&dummyNode1, *connman);\n@@ -101,7 +101,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, \"\", true);\n     dummyNode.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode, *connman);\n+    InitializeNode(&dummyNode, *connman);\n     dummyNode.nVersion = 1;\n \n     Misbehaving(dummyNode.GetId(), 100);"
      },
      {
        "sha": "32ff4dd73727b2cf1ff4ab533824d086551a5efb",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd718c8f54b2b3e205b1bfd9607011123e99da6b/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=dd718c8f54b2b3e205b1bfd9607011123e99da6b",
        "patch": "@@ -80,12 +80,10 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n             threadGroup.create_thread(&ThreadScriptCheck);\n         g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n         connman = g_connman.get();\n-        RegisterNodeSignals(GetNodeSignals());\n }\n \n TestingSetup::~TestingSetup()\n {\n-        UnregisterNodeSignals(GetNodeSignals());\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n         UnloadBlockIndex();"
      }
    ]
  }
]