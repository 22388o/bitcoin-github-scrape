DrahtBot,2018-08-26T20:31:18Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14387](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14387.html) (Faster Input Deduplication Algorithm by Jer",https://github.com/bitcoin/bitcoin/pull/14074#issuecomment-416069568,416069568,
laanwj,2018-08-31T12:51:57Z,"utACK f4608359e4e643c6e197df822e03226146e37a49\nverified move-onlyness of extraction commit",https://github.com/bitcoin/bitcoin/pull/14074#issuecomment-417654217,417654217,
laanwj,2018-09-10T20:11:48Z,@ryanofsky can you take a look here please? according to @jimpo this was your suggestion,https://github.com/bitcoin/bitcoin/pull/14074#issuecomment-420044257,420044257,
etscrivner,2018-10-10T22:21:23Z,utACK cfabca8749a132220e649d4563fb876afc21ceec,https://github.com/bitcoin/bitcoin/pull/14074#issuecomment-428753444,428753444,
sipa,2018-10-11T09:38:36Z,"Just one not comment: I always imagined the things in 'support' as low level features that are independently usable, and find it a bit strange to put something there that depends on `random` and `crypto/siphash`. Perhaps others have a different understanding, as I don't think it was ever written down somewhere what it was for, but I would just put it in `src/`.",https://github.com/bitcoin/bitcoin/pull/14074#issuecomment-428889672,428889672,
jimpo,2018-10-11T19:37:04Z,@sipa I'd prefer to start creating more directory structure. How would you feel about a `util/` directory instead and we can put it in there?,https://github.com/bitcoin/bitcoin/pull/14074#issuecomment-429090584,429090584,
sipa,2018-10-12T20:01:22Z,"@jimpo Sounds great, but perhaps something to do independently? I'd prefer to not start a new convention, and then have it linger in a half finished state if there's unclarity about how to move forward.",https://github.com/bitcoin/bitcoin/pull/14074#issuecomment-429446143,429446143,
jimpo,2018-11-05T23:12:48Z,@sipa I moved bytevectorhash to util/ now.,https://github.com/bitcoin/bitcoin/pull/14074#issuecomment-436071113,436071113,
laanwj,2018-11-06T14:36:04Z,utACK fef5adcc331c4d7b92b71e03fc8a73343a865599,https://github.com/bitcoin/bitcoin/pull/14074#issuecomment-436273798,436273798,
laanwj,2018-08-27T18:41:15Z,"I don't think `util.h` is the best place for a generic utility data structure such as this, it's more for assorted operating system functions",https://github.com/bitcoin/bitcoin/pull/14074#discussion_r213073539,213073539,src/util.h
laanwj,2018-08-27T18:41:49Z,ACK on moving siphash to a separate unit,https://github.com/bitcoin/bitcoin/pull/14074#discussion_r213073683,213073683,src/crypto/siphash.h
jimpo,2018-08-27T21:47:53Z,"@laanwj What would be the right place? A new file `utiltypes.{h,cpp}`? Or `util/types.{h,cpp}`?",https://github.com/bitcoin/bitcoin/pull/14074#discussion_r213126730,213126730,src/util.h
laanwj,2018-08-28T10:32:54Z,"or maybe `support/bytevectorhash.h` ?\nunless there's a strong need to group this with other things",https://github.com/bitcoin/bitcoin/pull/14074#discussion_r213262193,213262193,src/util.h
practicalswift,2018-09-10T06:37:03Z,"```\nsrc/support/bytevectorhash.cpp:6:1: warning: #includes are not sorted properly [llvm-include-order]\n```",https://github.com/bitcoin/bitcoin/pull/14074#discussion_r216211283,216211283,src/support/bytevectorhash.cpp
practicalswift,2018-09-10T06:41:59Z,Initialize `count` and `tmp` using default member initializers or in the member initializer list of the constructor?,https://github.com/bitcoin/bitcoin/pull/14074#discussion_r216212094,216212094,src/crypto/siphash.cpp
jimpo,2018-09-10T18:39:31Z,This is a move-only commit. I'd rather not modify the contents of the code here.,https://github.com/bitcoin/bitcoin/pull/14074#discussion_r216430227,216430227,src/crypto/siphash.cpp
practicalswift,2018-09-10T19:55:48Z,Makes sense!,https://github.com/bitcoin/bitcoin/pull/14074#discussion_r216452114,216452114,src/crypto/siphash.cpp
promag,2018-10-08T21:37:37Z,This may be used **as** the hash.. ?,https://github.com/bitcoin/bitcoin/pull/14074#discussion_r223504332,223504332,src/support/bytevectorhash.h
promag,2018-10-08T21:41:28Z,Drop `private`.,https://github.com/bitcoin/bitcoin/pull/14074#discussion_r223505028,223505028,src/support/bytevectorhash.h
promag,2018-10-08T21:50:08Z,Can be removed?,https://github.com/bitcoin/bitcoin/pull/14074#discussion_r223506776,223506776,src/txmempool.h
promag,2018-10-08T21:56:32Z,Can be removed?,https://github.com/bitcoin/bitcoin/pull/14074#discussion_r223508179,223508179,src/util.cpp
promag,2018-10-08T21:57:02Z,Missing includes `<stdint.h>` and `<vector>`.,https://github.com/bitcoin/bitcoin/pull/14074#discussion_r223508274,223508274,src/support/bytevectorhash.h
promag,2018-10-08T21:58:28Z,"nit, final.",https://github.com/bitcoin/bitcoin/pull/14074#discussion_r223508567,223508567,src/support/bytevectorhash.h
ryanofsky,2018-10-09T00:58:08Z,"In commit ""blockfilter: Use unordered_set instead of set in blockfilter."" (f4608359e4e643c6e197df822e03226146e37a49)\n\nThe way this is written makes it seem like this whole class is tied to `std::vector<unsigned char>`, when actually only the call operator is. I guess my concern that if someone wants to reuse this hash function on a similar type like `Span<char>`, `prevector`, or `std::string`,",https://github.com/bitcoin/bitcoin/pull/14074#discussion_r223535380,223535380,src/support/bytevectorhash.h
jimpo,2018-10-09T01:34:56Z,I think it's more clear to leave it explicit even if the default for `class` is private.,https://github.com/bitcoin/bitcoin/pull/14074#discussion_r223539618,223539618,src/support/bytevectorhash.h
jimpo,2018-10-10T15:57:07Z,It's used in SaltedTxidHasher,https://github.com/bitcoin/bitcoin/pull/14074#discussion_r224139600,224139600,src/txmempool.h
jimpo,2018-10-10T16:07:37Z,"I updated the comment to say that it works for any types that internally store (or reference) a byte array, but decided not to change the class name.",https://github.com/bitcoin/bitcoin/pull/14074#discussion_r224143395,224143395,src/support/bytevectorhash.h
