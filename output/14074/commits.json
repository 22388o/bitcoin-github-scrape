[
  {
    "sha": "4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmI3ODllOWIyZmZkZjQ4ZmQ1MDI5M2IzOTgyYjNmY2U0ZDVmYmRm",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-24T21:48:23Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-11-05T17:25:15Z"
      },
      "message": "Extract CSipHasher to it's own file in crypto/ directory.\n\nThis is a move-only commit with the exception of changes to includes.",
      "tree": {
        "sha": "24f14fbfe6b2079e3dbc0952d72477431f679535",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24f14fbfe6b2079e3dbc0952d72477431f679535"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b8d0a2164b30eab76e7bccb1ffb056a10fba406",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8d0a2164b30eab76e7bccb1ffb056a10fba406",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b8d0a2164b30eab76e7bccb1ffb056a10fba406"
      }
    ],
    "stats": {
      "total": 440,
      "additions": 234,
      "deletions": 206
    },
    "files": [
      {
        "sha": "662c8bb4d8129b4331bf427015a5f6b11c35614b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -321,7 +321,9 @@ crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/sha256.cpp \\\n   crypto/sha256.h \\\n   crypto/sha512.cpp \\\n-  crypto/sha512.h\n+  crypto/sha512.h \\\n+  crypto/siphash.cpp \\\n+  crypto/siphash.h\n \n if USE_ASM\n crypto_libbitcoin_crypto_base_a_SOURCES += crypto/sha256_sse4.cpp"
      },
      {
        "sha": "2def0b23e2e83460d989861681bd834da26eb24b",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -7,6 +7,7 @@\n #include <coins.h>\n #include <consensus/merkle.h>\n #include <consensus/validation.h>\n+#include <crypto/sha256.h>\n #include <miner.h>\n #include <policy/policy.h>\n #include <pow.h>"
      },
      {
        "sha": "dc0b05442027921e1968ecc1775c24520f623172",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -14,6 +14,7 @@\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n #include <crypto/sha512.h>\n+#include <crypto/siphash.h>\n \n /* Number of bytes to hash per iteration */\n static const uint64_t BUFFER_SIZE = 1000*1000;"
      },
      {
        "sha": "10f51931f08ff6ebdc29138433baa7e17888cb07",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -6,7 +6,8 @@\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n #include <chainparams.h>\n-#include <hash.h>\n+#include <crypto/sha256.h>\n+#include <crypto/siphash.h>\n #include <random.h>\n #include <streams.h>\n #include <txmempool.h>"
      },
      {
        "sha": "163e2a52eff5f6779e76feb379fd420098d6be26",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <blockfilter.h>\n+#include <crypto/siphash.h>\n #include <hash.h>\n #include <primitives/transaction.h>\n #include <script/script.h>"
      },
      {
        "sha": "3ef9e0463c45de85727405233d6adb297efbda8b",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <consensus/consensus.h>\n #include <random.h>\n+#include <version.h>\n \n bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }"
      },
      {
        "sha": "94493453f0ddc97e25b8df5dc1ac0117b96c850d",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -9,7 +9,7 @@\n #include <primitives/transaction.h>\n #include <compressor.h>\n #include <core_memusage.h>\n-#include <hash.h>\n+#include <crypto/siphash.h>\n #include <memusage.h>\n #include <serialize.h>\n #include <uint256.h>"
      },
      {
        "sha": "e81957111ad26b85e3faf17edf0a1268cc5995c9",
        "filename": "src/crypto/siphash.cpp",
        "status": "added",
        "additions": 173,
        "deletions": 0,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/crypto/siphash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/crypto/siphash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/siphash.cpp?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -0,0 +1,173 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/siphash.h>\n+\n+#define ROTL(x, b) (uint64_t)(((x) << (b)) | ((x) >> (64 - (b))))\n+\n+#define SIPROUND do { \\\n+    v0 += v1; v1 = ROTL(v1, 13); v1 ^= v0; \\\n+    v0 = ROTL(v0, 32); \\\n+    v2 += v3; v3 = ROTL(v3, 16); v3 ^= v2; \\\n+    v0 += v3; v3 = ROTL(v3, 21); v3 ^= v0; \\\n+    v2 += v1; v1 = ROTL(v1, 17); v1 ^= v2; \\\n+    v2 = ROTL(v2, 32); \\\n+} while (0)\n+\n+CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)\n+{\n+    v[0] = 0x736f6d6570736575ULL ^ k0;\n+    v[1] = 0x646f72616e646f6dULL ^ k1;\n+    v[2] = 0x6c7967656e657261ULL ^ k0;\n+    v[3] = 0x7465646279746573ULL ^ k1;\n+    count = 0;\n+    tmp = 0;\n+}\n+\n+CSipHasher& CSipHasher::Write(uint64_t data)\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+\n+    assert(count % 8 == 0);\n+\n+    v3 ^= data;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= data;\n+\n+    v[0] = v0;\n+    v[1] = v1;\n+    v[2] = v2;\n+    v[3] = v3;\n+\n+    count += 8;\n+    return *this;\n+}\n+\n+CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+    uint64_t t = tmp;\n+    int c = count;\n+\n+    while (size--) {\n+        t |= ((uint64_t)(*(data++))) << (8 * (c % 8));\n+        c++;\n+        if ((c & 7) == 0) {\n+            v3 ^= t;\n+            SIPROUND;\n+            SIPROUND;\n+            v0 ^= t;\n+            t = 0;\n+        }\n+    }\n+\n+    v[0] = v0;\n+    v[1] = v1;\n+    v[2] = v2;\n+    v[3] = v3;\n+    count = c;\n+    tmp = t;\n+\n+    return *this;\n+}\n+\n+uint64_t CSipHasher::Finalize() const\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+\n+    uint64_t t = tmp | (((uint64_t)count) << 56);\n+\n+    v3 ^= t;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= t;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}\n+\n+uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)\n+{\n+    /* Specialized implementation for efficiency */\n+    uint64_t d = val.GetUint64(0);\n+\n+    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n+    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n+    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n+    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n+\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(1);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(2);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(3);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    v3 ^= ((uint64_t)4) << 59;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= ((uint64_t)4) << 59;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}\n+\n+uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra)\n+{\n+    /* Specialized implementation for efficiency */\n+    uint64_t d = val.GetUint64(0);\n+\n+    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n+    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n+    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n+    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n+\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(1);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(2);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(3);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = (((uint64_t)36) << 56) | extra;\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}"
      },
      {
        "sha": "b312f913f9360abe5295afcbc737489ff9ab4450",
        "filename": "src/crypto/siphash.h",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/crypto/siphash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/crypto/siphash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/siphash.h?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_SIPHASH_H\n+#define BITCOIN_CRYPTO_SIPHASH_H\n+\n+#include <stdint.h>\n+\n+#include <uint256.h>\n+\n+/** SipHash-2-4 */\n+class CSipHasher\n+{\n+private:\n+    uint64_t v[4];\n+    uint64_t tmp;\n+    int count;\n+\n+public:\n+    /** Construct a SipHash calculator initialized with 128-bit key (k0, k1) */\n+    CSipHasher(uint64_t k0, uint64_t k1);\n+    /** Hash a 64-bit integer worth of data\n+     *  It is treated as if this was the little-endian interpretation of 8 bytes.\n+     *  This function can only be used when a multiple of 8 bytes have been written so far.\n+     */\n+    CSipHasher& Write(uint64_t data);\n+    /** Hash arbitrary bytes. */\n+    CSipHasher& Write(const unsigned char* data, size_t size);\n+    /** Compute the 64-bit SipHash-2-4 of the data written so far. The object remains untouched. */\n+    uint64_t Finalize() const;\n+};\n+\n+/** Optimized SipHash-2-4 implementation for uint256.\n+ *\n+ *  It is identical to:\n+ *    SipHasher(k0, k1)\n+ *      .Write(val.GetUint64(0))\n+ *      .Write(val.GetUint64(1))\n+ *      .Write(val.GetUint64(2))\n+ *      .Write(val.GetUint64(3))\n+ *      .Finalize()\n+ */\n+uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val);\n+uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra);\n+\n+#endif // BITCOIN_CRYPTO_SIPHASH_H"
      },
      {
        "sha": "26150e5ca8aaa0f5f42b820a7d4e12f12617bacc",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 168,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -77,171 +77,3 @@ void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char he\n     num[3] = (nChild >>  0) & 0xFF;\n     CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n }\n-\n-#define ROTL(x, b) (uint64_t)(((x) << (b)) | ((x) >> (64 - (b))))\n-\n-#define SIPROUND do { \\\n-    v0 += v1; v1 = ROTL(v1, 13); v1 ^= v0; \\\n-    v0 = ROTL(v0, 32); \\\n-    v2 += v3; v3 = ROTL(v3, 16); v3 ^= v2; \\\n-    v0 += v3; v3 = ROTL(v3, 21); v3 ^= v0; \\\n-    v2 += v1; v1 = ROTL(v1, 17); v1 ^= v2; \\\n-    v2 = ROTL(v2, 32); \\\n-} while (0)\n-\n-CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)\n-{\n-    v[0] = 0x736f6d6570736575ULL ^ k0;\n-    v[1] = 0x646f72616e646f6dULL ^ k1;\n-    v[2] = 0x6c7967656e657261ULL ^ k0;\n-    v[3] = 0x7465646279746573ULL ^ k1;\n-    count = 0;\n-    tmp = 0;\n-}\n-\n-CSipHasher& CSipHasher::Write(uint64_t data)\n-{\n-    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n-\n-    assert(count % 8 == 0);\n-\n-    v3 ^= data;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= data;\n-\n-    v[0] = v0;\n-    v[1] = v1;\n-    v[2] = v2;\n-    v[3] = v3;\n-\n-    count += 8;\n-    return *this;\n-}\n-\n-CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)\n-{\n-    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n-    uint64_t t = tmp;\n-    int c = count;\n-\n-    while (size--) {\n-        t |= ((uint64_t)(*(data++))) << (8 * (c % 8));\n-        c++;\n-        if ((c & 7) == 0) {\n-            v3 ^= t;\n-            SIPROUND;\n-            SIPROUND;\n-            v0 ^= t;\n-            t = 0;\n-        }\n-    }\n-\n-    v[0] = v0;\n-    v[1] = v1;\n-    v[2] = v2;\n-    v[3] = v3;\n-    count = c;\n-    tmp = t;\n-\n-    return *this;\n-}\n-\n-uint64_t CSipHasher::Finalize() const\n-{\n-    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n-\n-    uint64_t t = tmp | (((uint64_t)count) << 56);\n-\n-    v3 ^= t;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= t;\n-    v2 ^= 0xFF;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    return v0 ^ v1 ^ v2 ^ v3;\n-}\n-\n-uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)\n-{\n-    /* Specialized implementation for efficiency */\n-    uint64_t d = val.GetUint64(0);\n-\n-    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n-    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n-    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n-    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n-\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(1);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(2);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(3);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    v3 ^= ((uint64_t)4) << 59;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= ((uint64_t)4) << 59;\n-    v2 ^= 0xFF;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    return v0 ^ v1 ^ v2 ^ v3;\n-}\n-\n-uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra)\n-{\n-    /* Specialized implementation for efficiency */\n-    uint64_t d = val.GetUint64(0);\n-\n-    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n-    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n-    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n-    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n-\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(1);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(2);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(3);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = (((uint64_t)36) << 56) | extra;\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    v2 ^= 0xFF;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    return v0 ^ v1 ^ v2 ^ v3;\n-}"
      },
      {
        "sha": "6acab0b1610dfae19e30905a5a40a7a7b7223f50",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -194,39 +194,4 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n \n-/** SipHash-2-4 */\n-class CSipHasher\n-{\n-private:\n-    uint64_t v[4];\n-    uint64_t tmp;\n-    int count;\n-\n-public:\n-    /** Construct a SipHash calculator initialized with 128-bit key (k0, k1) */\n-    CSipHasher(uint64_t k0, uint64_t k1);\n-    /** Hash a 64-bit integer worth of data\n-     *  It is treated as if this was the little-endian interpretation of 8 bytes.\n-     *  This function can only be used when a multiple of 8 bytes have been written so far.\n-     */\n-    CSipHasher& Write(uint64_t data);\n-    /** Hash arbitrary bytes. */\n-    CSipHasher& Write(const unsigned char* data, size_t size);\n-    /** Compute the 64-bit SipHash-2-4 of the data written so far. The object remains untouched. */\n-    uint64_t Finalize() const;\n-};\n-\n-/** Optimized SipHash-2-4 implementation for uint256.\n- *\n- *  It is identical to:\n- *    SipHasher(k0, k1)\n- *      .Write(val.GetUint64(0))\n- *      .Write(val.GetUint64(1))\n- *      .Write(val.GetUint64(2))\n- *      .Write(val.GetUint64(3))\n- *      .Finalize()\n- */\n-uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val);\n-uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra);\n-\n #endif // BITCOIN_HASH_H"
      },
      {
        "sha": "164ec9080c187a42e64439379f654994cba933e4",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -11,6 +11,7 @@\n #include <amount.h>\n #include <bloom.h>\n #include <compat.h>\n+#include <crypto/siphash.h>\n #include <hash.h>\n #include <limitedmap.h>\n #include <netaddress.h>"
      },
      {
        "sha": "e8e50408550bdc0d218e454ef6bb009070a8bc80",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <crypto/siphash.h>\n #include <hash.h>\n #include <util/strencodings.h>\n #include <test/test_bitcoin.h>"
      },
      {
        "sha": "fadb55472312bce42cbab840662e334cf600a251",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -15,6 +15,7 @@\n \n #include <amount.h>\n #include <coins.h>\n+#include <crypto/siphash.h>\n #include <indirectmap.h>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>"
      },
      {
        "sha": "3f50f4caad90e77cc3f362e65fc7bb399deeda1e",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "patch": "@@ -11,6 +11,7 @@\n #include <consensus/consensus.h>\n #include <primitives/transaction.h>\n #include <serialize.h>\n+#include <version.h>\n \n /** Undo information for a CTxIn\n  *"
      }
    ]
  },
  {
    "sha": "fef5adcc331c4d7b92b71e03fc8a73343a865599",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWY1YWRjYzMzMWM0ZDdiOTJiNzFlMDNmYzhhNzMzNDNhODY1NTk5",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-21T06:35:29Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-11-05T17:30:56Z"
      },
      "message": "blockfilter: Use unordered_set instead of set in blockfilter.",
      "tree": {
        "sha": "abb6fd12e94870fba2b0343c46d107bc63934e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abb6fd12e94870fba2b0343c46d107bc63934e75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fef5adcc331c4d7b92b71e03fc8a73343a865599",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef5adcc331c4d7b92b71e03fc8a73343a865599",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fef5adcc331c4d7b92b71e03fc8a73343a865599",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef5adcc331c4d7b92b71e03fc8a73343a865599/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fb789e9b2ffdf48fd50293b3982b3fce4d5fbdf"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 49,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6852ef408a2735a8393e464e49c70a632e2832e2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef5adcc331c4d7b92b71e03fc8a73343a865599/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef5adcc331c4d7b92b71e03fc8a73343a865599/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fef5adcc331c4d7b92b71e03fc8a73343a865599",
        "patch": "@@ -183,6 +183,7 @@ BITCOIN_CORE_H = \\\n   txmempool.h \\\n   ui_interface.h \\\n   undo.h \\\n+  util/bytevectorhash.h \\\n   util/system.h \\\n   util/memory.h \\\n   util/moneystr.h \\\n@@ -429,6 +430,7 @@ libbitcoin_util_a_SOURCES = \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n   threadinterrupt.cpp \\\n+  util/bytevectorhash.cpp \\\n   util/system.cpp \\\n   util/moneystr.cpp \\\n   util/strencodings.cpp \\"
      },
      {
        "sha": "871be11769afa56d52cf324c6b0aa8f71f85b827",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef5adcc331c4d7b92b71e03fc8a73343a865599/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef5adcc331c4d7b92b71e03fc8a73343a865599/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=fef5adcc331c4d7b92b71e03fc8a73343a865599",
        "patch": "@@ -5,14 +5,15 @@\n #ifndef BITCOIN_BLOCKFILTER_H\n #define BITCOIN_BLOCKFILTER_H\n \n-#include <set>\n #include <stdint.h>\n+#include <unordered_set>\n #include <vector>\n \n #include <primitives/block.h>\n #include <serialize.h>\n #include <uint256.h>\n #include <undo.h>\n+#include <util/bytevectorhash.h>\n \n /**\n  * This implements a Golomb-coded set as defined in BIP 158. It is a\n@@ -22,7 +23,7 @@ class GCSFilter\n {\n public:\n     typedef std::vector<unsigned char> Element;\n-    typedef std::set<Element> ElementSet;\n+    typedef std::unordered_set<Element, ByteVectorHash> ElementSet;\n \n private:\n     uint64_t m_siphash_k0;"
      },
      {
        "sha": "f87d0e04b32f21925fd2157ab509dfba715decf7",
        "filename": "src/util/bytevectorhash.cpp",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef5adcc331c4d7b92b71e03fc8a73343a865599/src/util/bytevectorhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef5adcc331c4d7b92b71e03fc8a73343a865599/src/util/bytevectorhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bytevectorhash.cpp?ref=fef5adcc331c4d7b92b71e03fc8a73343a865599",
        "patch": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/siphash.h>\n+#include <random.h>\n+#include <util/bytevectorhash.h>\n+\n+ByteVectorHash::ByteVectorHash()\n+{\n+    GetRandBytes(reinterpret_cast<unsigned char*>(&m_k0), sizeof(m_k0));\n+    GetRandBytes(reinterpret_cast<unsigned char*>(&m_k1), sizeof(m_k1));\n+}\n+\n+size_t ByteVectorHash::operator()(const std::vector<unsigned char>& input) const\n+{\n+    return CSipHasher(m_k0, m_k1).Write(input.data(), input.size()).Finalize();\n+}"
      },
      {
        "sha": "b88c17460b494e3d6a136ea61818b43e2bd1c0fe",
        "filename": "src/util/bytevectorhash.h",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef5adcc331c4d7b92b71e03fc8a73343a865599/src/util/bytevectorhash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef5adcc331c4d7b92b71e03fc8a73343a865599/src/util/bytevectorhash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bytevectorhash.h?ref=fef5adcc331c4d7b92b71e03fc8a73343a865599",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_BYTEVECTORHASH_H\n+#define BITCOIN_UTIL_BYTEVECTORHASH_H\n+\n+#include <stdint.h>\n+#include <vector>\n+\n+/**\n+ * Implementation of Hash named requirement for types that internally store a byte array. This may\n+ * be used as the hash function in std::unordered_set or std::unordered_map over such types.\n+ * Internally, this uses a random instance of SipHash-2-4.\n+ */\n+class ByteVectorHash final\n+{\n+private:\n+    uint64_t m_k0, m_k1;\n+\n+public:\n+    ByteVectorHash();\n+    size_t operator()(const std::vector<unsigned char>& input) const;\n+};\n+\n+#endif // BITCOIN_UTIL_BYTEVECTORHASH_H"
      }
    ]
  }
]