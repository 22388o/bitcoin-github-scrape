[
  {
    "sha": "0a4ea2f4589961868ab4d25e0277485c31938e20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTRlYTJmNDU4OTk2MTg2OGFiNGQyNWUwMjc3NDg1YzMxOTM4ZTIw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-20T12:12:22Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-06-06T06:08:44Z"
      },
      "message": "build: Add linter for checking accidental locale dependence",
      "tree": {
        "sha": "43cbd3b314e64b2a71e21234fd01cf771b5149c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43cbd3b314e64b2a71e21234fd01cf771b5149c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a4ea2f4589961868ab4d25e0277485c31938e20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a4ea2f4589961868ab4d25e0277485c31938e20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a4ea2f4589961868ab4d25e0277485c31938e20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a4ea2f4589961868ab4d25e0277485c31938e20/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a589f536b5e15daf3ac6ffcc137a146514c81967",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a589f536b5e15daf3ac6ffcc137a146514c81967",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a589f536b5e15daf3ac6ffcc137a146514c81967"
      }
    ],
    "stats": {
      "total": 229,
      "additions": 229,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3144f2c841cf657045a6806db9ed0c5bd24bcb68",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "added",
        "additions": 229,
        "deletions": 0,
        "changes": 229,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a4ea2f4589961868ab4d25e0277485c31938e20/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a4ea2f4589961868ab4d25e0277485c31938e20/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=0a4ea2f4589961868ab4d25e0277485c31938e20",
        "patch": "@@ -0,0 +1,229 @@\n+#!/bin/bash\n+\n+KNOWN_VIOLATIONS=(\n+    \"src/base58.cpp:.*isspace\"\n+    \"src/bitcoin-tx.cpp.*stoul\"\n+    \"src/bitcoin-tx.cpp.*trim_right\"\n+    \"src/bitcoin-tx.cpp:.*atoi\"\n+    \"src/core_read.cpp.*is_digit\"\n+    \"src/dbwrapper.cpp.*stoul\"\n+    \"src/dbwrapper.cpp:.*vsnprintf\"\n+    \"src/httprpc.cpp.*trim\"\n+    \"src/init.cpp:.*atoi\"\n+    \"src/netbase.cpp.*to_lower\"\n+    \"src/qt/rpcconsole.cpp:.*atoi\"\n+    \"src/qt/rpcconsole.cpp:.*isdigit\"\n+    \"src/rest.cpp:.*strtol\"\n+    \"src/rpc/server.cpp.*to_upper\"\n+    \"src/test/dbwrapper_tests.cpp:.*snprintf\"\n+    \"src/test/getarg_tests.cpp.*split\"\n+    \"src/torcontrol.cpp:.*atoi\"\n+    \"src/torcontrol.cpp:.*strtol\"\n+    \"src/uint256.cpp:.*isspace\"\n+    \"src/uint256.cpp:.*tolower\"\n+    \"src/util.cpp:.*atoi\"\n+    \"src/util.cpp:.*fprintf\"\n+    \"src/util.cpp:.*tolower\"\n+    \"src/utilmoneystr.cpp:.*isdigit\"\n+    \"src/utilmoneystr.cpp:.*isspace\"\n+    \"src/utilstrencodings.cpp:.*atoi\"\n+    \"src/utilstrencodings.cpp:.*isspace\"\n+    \"src/utilstrencodings.cpp:.*strtol\"\n+    \"src/utilstrencodings.cpp:.*strtoll\"\n+    \"src/utilstrencodings.cpp:.*strtoul\"\n+    \"src/utilstrencodings.cpp:.*strtoull\"\n+    \"src/utilstrencodings.h:.*atoi\"\n+)\n+\n+REGEXP_IGNORE_EXTERNAL_DEPENDENCIES=\"^src/(crypto/ctaes/|leveldb/|secp256k1/|tinyformat.h|univalue/)\"\n+\n+LOCALE_DEPENDENT_FUNCTIONS=(\n+    alphasort    # LC_COLLATE (via strcoll)\n+    asctime      # LC_TIME (directly)\n+    asprintf     # (via vasprintf)\n+    atof         # LC_NUMERIC (via strtod)\n+    atoi         # LC_NUMERIC (via strtol)\n+    atol         # LC_NUMERIC (via strtol)\n+    atoll        # (via strtoll)\n+    atoq\n+    btowc        # LC_CTYPE (directly)\n+    ctime        # (via asctime or localtime)\n+    dprintf      # (via vdprintf)\n+    fgetwc\n+    fgetws\n+    fold_case    # boost::locale::fold_case\n+    fprintf      # (via vfprintf)\n+    fputwc\n+    fputws\n+    fscanf       # (via __vfscanf)\n+    fwprintf     # (via __vfwprintf)\n+    getdate      # via __getdate_r => isspace // __localtime_r\n+    getwc\n+    getwchar\n+    is_digit     # boost::algorithm::is_digit\n+    is_space     # boost::algorithm::is_space\n+    isalnum      # LC_CTYPE\n+    isalpha      # LC_CTYPE\n+    isblank      # LC_CTYPE\n+    iscntrl      # LC_CTYPE\n+    isctype      # LC_CTYPE\n+    isdigit      # LC_CTYPE\n+    isgraph      # LC_CTYPE\n+    islower      # LC_CTYPE\n+    isprint      # LC_CTYPE\n+    ispunct      # LC_CTYPE\n+    isspace      # LC_CTYPE\n+    isupper      # LC_CTYPE\n+    iswalnum     # LC_CTYPE\n+    iswalpha     # LC_CTYPE\n+    iswblank     # LC_CTYPE\n+    iswcntrl     # LC_CTYPE\n+    iswctype     # LC_CTYPE\n+    iswdigit     # LC_CTYPE\n+    iswgraph     # LC_CTYPE\n+    iswlower     # LC_CTYPE\n+    iswprint     # LC_CTYPE\n+    iswpunct     # LC_CTYPE\n+    iswspace     # LC_CTYPE\n+    iswupper     # LC_CTYPE\n+    iswxdigit    # LC_CTYPE\n+    isxdigit     # LC_CTYPE\n+    localeconv   # LC_NUMERIC + LC_MONETARY\n+    mblen        # LC_CTYPE\n+    mbrlen\n+    mbrtowc\n+    mbsinit\n+    mbsnrtowcs\n+    mbsrtowcs\n+    mbstowcs     # LC_CTYPE\n+    mbtowc       # LC_CTYPE\n+    mktime\n+    normalize    # boost::locale::normalize\n+#   printf       # LC_NUMERIC\n+    putwc\n+    putwchar\n+    scanf        # LC_NUMERIC\n+    setlocale\n+    snprintf\n+    sprintf\n+    sscanf\n+    stod\n+    stof\n+    stoi\n+    stol\n+    stold\n+    stoll\n+    stoul\n+    stoull\n+    strcasecmp\n+    strcasestr\n+    strcoll      # LC_COLLATE\n+#   strerror\n+    strfmon\n+    strftime     # LC_TIME\n+    strncasecmp\n+    strptime\n+    strtod       # LC_NUMERIC\n+    strtof\n+    strtoimax\n+    strtol       # LC_NUMERIC\n+    strtold\n+    strtoll\n+    strtoq\n+    strtoul      # LC_NUMERIC\n+    strtoull\n+    strtoumax\n+    strtouq\n+    strxfrm      # LC_COLLATE\n+    swprintf\n+    to_lower     # boost::locale::to_lower\n+    to_title     # boost::locale::to_title\n+    to_upper     # boost::locale::to_upper\n+    tolower      # LC_CTYPE\n+    toupper      # LC_CTYPE\n+    towctrans\n+    towlower     # LC_CTYPE\n+    towupper     # LC_CTYPE\n+    trim         # boost::algorithm::trim\n+    trim_left    # boost::algorithm::trim_left\n+    trim_right   # boost::algorithm::trim_right\n+    ungetwc\n+    vasprintf\n+    vdprintf\n+    versionsort\n+    vfprintf\n+    vfscanf\n+    vfwprintf\n+    vprintf\n+    vscanf\n+    vsnprintf\n+    vsprintf\n+    vsscanf\n+    vswprintf\n+    vwprintf\n+    wcrtomb\n+    wcscasecmp\n+    wcscoll      # LC_COLLATE\n+    wcsftime     # LC_TIME\n+    wcsncasecmp\n+    wcsnrtombs\n+    wcsrtombs\n+    wcstod       # LC_NUMERIC\n+    wcstof\n+    wcstoimax\n+    wcstol       # LC_NUMERIC\n+    wcstold\n+    wcstoll\n+    wcstombs     # LC_CTYPE\n+    wcstoul      # LC_NUMERIC\n+    wcstoull\n+    wcstoumax\n+    wcswidth\n+    wcsxfrm      # LC_COLLATE\n+    wctob\n+    wctomb       # LC_CTYPE\n+    wctrans\n+    wctype\n+    wcwidth\n+    wprintf\n+)\n+\n+function join_array {\n+    local IFS=\"$1\"\n+    shift\n+    echo \"$*\"\n+}\n+\n+REGEXP_IGNORE_KNOWN_VIOLATIONS=$(join_array \"|\" \"${KNOWN_VIOLATIONS[@]}\")\n+\n+# Invoke \"git grep\" only once in order to minimize run-time\n+REGEXP_LOCALE_DEPENDENT_FUNCTIONS=$(join_array \"|\" \"${LOCALE_DEPENDENT_FUNCTIONS[@]}\")\n+GIT_GREP_OUTPUT=$(git grep -E \"[^a-zA-Z0-9_\\`'\\\"<>](${REGEXP_LOCALE_DEPENDENT_FUNCTIONS}(|_r|_s))[^a-zA-Z0-9_\\`'\\\"<>]\" -- \"*.cpp\" \"*.h\")\n+\n+EXIT_CODE=0\n+for LOCALE_DEPENDENT_FUNCTION in \"${LOCALE_DEPENDENT_FUNCTIONS[@]}\"; do\n+    MATCHES=$(grep -E \"[^a-zA-Z0-9_\\`'\\\"<>]${LOCALE_DEPENDENT_FUNCTION}(|_r|_s)[^a-zA-Z0-9_\\`'\\\"<>]\" <<< \"${GIT_GREP_OUTPUT}\" | \\\n+        grep -vE \"\\.(c|cpp|h):\\s*(//|\\*|/\\*|\\\").*${LOCALE_DEPENDENT_FUNCTION}\" | \\\n+        grep -vE 'fprintf\\(.*(stdout|stderr)')\n+    if [[ ${REGEXP_IGNORE_EXTERNAL_DEPENDENCIES} != \"\" ]]; then\n+        MATCHES=$(grep -vE \"${REGEXP_IGNORE_EXTERNAL_DEPENDENCIES}\" <<< \"${MATCHES}\")\n+    fi\n+    if [[ ${REGEXP_IGNORE_KNOWN_VIOLATIONS} != \"\" ]]; then\n+        MATCHES=$(grep -vE \"${REGEXP_IGNORE_KNOWN_VIOLATIONS}\" <<< \"${MATCHES}\")\n+    fi\n+    if [[ ${MATCHES} != \"\" ]]; then\n+        echo \"The locale dependent function ${LOCALE_DEPENDENT_FUNCTION}(...) appears to be used:\"\n+        echo \"${MATCHES}\"\n+        echo\n+        EXIT_CODE=1\n+    fi\n+done\n+if [[ ${EXIT_CODE} != 0 ]]; then\n+    echo \"Unnecessary locale dependence can cause bugs that are very\"\n+    echo \"tricky to isolate and fix. Please avoid using locale dependent\"\n+    echo \"functions if possible.\"\n+    echo\n+    echo \"Advice not applicable in this specific case? Add an exception\"\n+    echo \"by updating the ignore list in $0\"\n+fi\n+exit ${EXIT_CODE}"
      }
    ]
  },
  {
    "sha": "698cfd081144845f6246171b8a2a0cfa8daaecdb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OThjZmQwODExNDQ4NDVmNjI0NjE3MWI4YTJhMGNmYThkYWFlY2Ri",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-26T19:01:03Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-06-06T06:08:44Z"
      },
      "message": "docs: Mention lint-locale-dependence.sh in developer-notes.md",
      "tree": {
        "sha": "ae9b11158d87ec5f89059fc7fe8dafea93bb9caa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae9b11158d87ec5f89059fc7fe8dafea93bb9caa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/698cfd081144845f6246171b8a2a0cfa8daaecdb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/698cfd081144845f6246171b8a2a0cfa8daaecdb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/698cfd081144845f6246171b8a2a0cfa8daaecdb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/698cfd081144845f6246171b8a2a0cfa8daaecdb/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a4ea2f4589961868ab4d25e0277485c31938e20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a4ea2f4589961868ab4d25e0277485c31938e20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a4ea2f4589961868ab4d25e0277485c31938e20"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 29,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8f6c662f19278454d2180382a8c4ba1f87888780",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/698cfd081144845f6246171b8a2a0cfa8daaecdb/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/698cfd081144845f6246171b8a2a0cfa8daaecdb/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=698cfd081144845f6246171b8a2a0cfa8daaecdb",
        "patch": "@@ -499,7 +499,35 @@ Strings and formatting\n \n - Use `ParseInt32`, `ParseInt64`, `ParseUInt32`, `ParseUInt64`, `ParseDouble` from `utilstrencodings.h` for number parsing\n \n-  - *Rationale*: These functions do overflow checking, and avoid pesky locale issues\n+  - *Rationale*: These functions do overflow checking, and avoid pesky locale issues.\n+\n+- Avoid using locale dependent functions if possible. You can use the provided\n+  [`lint-locale-dependence.sh`](/contrib/devtools/lint-locale-dependence.sh)\n+  to check for accidental use of locale dependent functions.\n+\n+  - *Rationale*: Unnecessary locale dependence can cause bugs that are very tricky to isolate and fix.\n+\n+  - These functions are known to be locale dependent:\n+    `alphasort`, `asctime`, `asprintf`, `atof`, `atoi`, `atol`, `atoll`, `atoq`,\n+    `btowc`, `ctime`, `dprintf`, `fgetwc`, `fgetws`, `fprintf`, `fputwc`,\n+    `fputws`, `fscanf`, `fwprintf`, `getdate`, `getwc`, `getwchar`, `isalnum`,\n+    `isalpha`, `isblank`, `iscntrl`, `isdigit`, `isgraph`, `islower`, `isprint`,\n+    `ispunct`, `isspace`, `isupper`, `iswalnum`, `iswalpha`, `iswblank`,\n+    `iswcntrl`, `iswctype`, `iswdigit`, `iswgraph`, `iswlower`, `iswprint`,\n+    `iswpunct`, `iswspace`, `iswupper`, `iswxdigit`, `isxdigit`, `mblen`,\n+    `mbrlen`, `mbrtowc`, `mbsinit`, `mbsnrtowcs`, `mbsrtowcs`, `mbstowcs`,\n+    `mbtowc`, `mktime`, `putwc`, `putwchar`, `scanf`, `snprintf`, `sprintf`,\n+    `sscanf`, `stoi`, `stol`, `stoll`, `strcasecmp`, `strcasestr`, `strcoll`,\n+    `strfmon`, `strftime`, `strncasecmp`, `strptime`, `strtod`, `strtof`,\n+    `strtoimax`, `strtol`, `strtold`, `strtoll`, `strtoq`, `strtoul`,\n+    `strtoull`, `strtoumax`, `strtouq`, `strxfrm`, `swprintf`, `tolower`,\n+    `toupper`, `towctrans`, `towlower`, `towupper`, `ungetwc`, `vasprintf`,\n+    `vdprintf`, `versionsort`, `vfprintf`, `vfscanf`, `vfwprintf`, `vprintf`,\n+    `vscanf`, `vsnprintf`, `vsprintf`, `vsscanf`, `vswprintf`, `vwprintf`,\n+    `wcrtomb`, `wcscasecmp`, `wcscoll`, `wcsftime`, `wcsncasecmp`, `wcsnrtombs`,\n+    `wcsrtombs`, `wcstod`, `wcstof`, `wcstoimax`, `wcstol`, `wcstold`,\n+    `wcstoll`, `wcstombs`, `wcstoul`, `wcstoull`, `wcstoumax`, `wcswidth`,\n+    `wcsxfrm`, `wctob`, `wctomb`, `wctrans`, `wctype`, `wcwidth`, `wprintf`\n \n - For `strprintf`, `LogPrint`, `LogPrintf` formatting characters don't need size specifiers\n "
      }
    ]
  }
]