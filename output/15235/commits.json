[
  {
    "sha": "1f77f6754ce724493b0cb084ae0b35107d58605f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjc3ZjY3NTRjZTcyNDQ5M2IwY2IwODRhZTBiMzUxMDdkNTg2MDVm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-01-23T20:51:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-01-24T19:07:09Z"
      },
      "message": "tests: unify RPC argument to cli argument conversion and handle dicts and lists\n\nWhen running tests with --usecli, unify the conversion from argument objects to\nstrings using a new function arg_to_cli(). This fixes boolean arguments when\nusing named arguments.\n\nAlso use json.dumps() to get the string values for arguments that are dicts and\nlists so that bitcoind's JSON parser does not become confused.",
      "tree": {
        "sha": "b9c892e218df4636bfd1c99aadb53c27a857eb77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9c892e218df4636bfd1c99aadb53c27a857eb77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f77f6754ce724493b0cb084ae0b35107d58605f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f77f6754ce724493b0cb084ae0b35107d58605f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f77f6754ce724493b0cb084ae0b35107d58605f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f77f6754ce724493b0cb084ae0b35107d58605f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82cf6813a4ef1b4a5439eb6cddb1ab426f3c31a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82cf6813a4ef1b4a5439eb6cddb1ab426f3c31a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82cf6813a4ef1b4a5439eb6cddb1ab426f3c31a2"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6745409964a4f28bf5718b3c5940940b6d004708",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f77f6754ce724493b0cb084ae0b35107d58605f/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f77f6754ce724493b0cb084ae0b35107d58605f/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=1f77f6754ce724493b0cb084ae0b35107d58605f",
        "patch": "@@ -402,6 +402,14 @@ def __call__(self, *args, **kwargs):\n     def get_request(self, *args, **kwargs):\n         return lambda: self(*args, **kwargs)\n \n+def arg_to_cli(arg):\n+    if isinstance(arg, bool):\n+        return str(arg).lower()\n+    elif isinstance(arg, dict) or isinstance(arg, list):\n+        return json.dumps(arg)\n+    else:\n+        return str(arg)\n+\n class TestNodeCLI():\n     \"\"\"Interface to bitcoin-cli for an individual node\"\"\"\n \n@@ -433,8 +441,8 @@ def batch(self, requests):\n \n     def send_cli(self, command=None, *args, **kwargs):\n         \"\"\"Run bitcoin-cli command. Deserializes returned string as python object.\"\"\"\n-        pos_args = [str(arg).lower() if type(arg) is bool else str(arg) for arg in args]\n-        named_args = [str(key) + \"=\" + str(value) for (key, value) in kwargs.items()]\n+        pos_args = [arg_to_cli(arg) for arg in args]\n+        named_args = [str(key) + \"=\" + arg_to_cli(value) for (key, value) in kwargs.items()]\n         assert not (pos_args and named_args), \"Cannot use positional arguments and named arguments in the same bitcoin-cli call\"\n         p_args = [self.binary, \"-datadir=\" + self.datadir] + self.options\n         if named_args:"
      }
    ]
  },
  {
    "sha": "b5c5021b644731d14a6ef04961320a99466f035a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWM1MDIxYjY0NDczMWQxNGE2ZWYwNDk2MTMyMGE5OTQ2NmYwMzVh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-01-25T19:37:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-01-31T19:29:28Z"
      },
      "message": "Refactor importwallet to extract data from the file and then import\n\nInstead of importing keys and scripts as each line in the file is\nread, first extract the data then import them.",
      "tree": {
        "sha": "8086e75f66ee1415bd085b6c2144513367435bfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8086e75f66ee1415bd085b6c2144513367435bfb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5c5021b644731d14a6ef04961320a99466f035a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5c5021b644731d14a6ef04961320a99466f035a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5c5021b644731d14a6ef04961320a99466f035a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5c5021b644731d14a6ef04961320a99466f035a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f77f6754ce724493b0cb084ae0b35107d58605f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f77f6754ce724493b0cb084ae0b35107d58605f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f77f6754ce724493b0cb084ae0b35107d58605f"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 55,
      "deletions": 34
    },
    "files": [
      {
        "sha": "c65db8ac852454383e18b70e274b07a8d4d45581",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 34,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5c5021b644731d14a6ef04961320a99466f035a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5c5021b644731d14a6ef04961320a99466f035a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=b5c5021b644731d14a6ef04961320a99466f035a",
        "patch": "@@ -578,8 +578,10 @@ UniValue importwallet(const JSONRPCRequest& request)\n         // Use uiInterface.ShowProgress instead of pwallet.ShowProgress because pwallet.ShowProgress has a cancel button tied to AbortRescan which\n         // we don't want for this progress bar showing the import progress. uiInterface.ShowProgress does not have a cancel button.\n         uiInterface.ShowProgress(strprintf(\"%s \" + _(\"Importing...\"), pwallet->GetDisplayName()), 0, false); // show progress dialog in GUI\n+        std::vector<std::tuple<CKey, int64_t, bool, std::string>> keys;\n+        std::vector<std::pair<CScript, int64_t>> scripts;\n         while (file.good()) {\n-            uiInterface.ShowProgress(\"\", std::max(1, std::min(99, (int)(((double)file.tellg() / (double)nFilesize) * 100))), false);\n+            uiInterface.ShowProgress(\"\", std::max(1, std::min(50, (int)(((double)file.tellg() / (double)nFilesize) * 100))), false);\n             std::string line;\n             std::getline(file, line);\n             if (line.empty() || line[0] == '#')\n@@ -591,13 +593,6 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 continue;\n             CKey key = DecodeSecret(vstr[0]);\n             if (key.IsValid()) {\n-                CPubKey pubkey = key.GetPubKey();\n-                assert(key.VerifyPubKey(pubkey));\n-                CKeyID keyid = pubkey.GetID();\n-                if (pwallet->HaveKey(keyid)) {\n-                    pwallet->WalletLogPrintf(\"Skipping import of %s (key already present)\\n\", EncodeDestination(keyid));\n-                    continue;\n-                }\n                 int64_t nTime = DecodeDumpTime(vstr[1]);\n                 std::string strLabel;\n                 bool fLabel = true;\n@@ -613,36 +608,62 @@ UniValue importwallet(const JSONRPCRequest& request)\n                         fLabel = true;\n                     }\n                 }\n-                pwallet->WalletLogPrintf(\"Importing %s...\\n\", EncodeDestination(keyid));\n-                if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                    fGood = false;\n-                    continue;\n-                }\n-                pwallet->mapKeyMetadata[keyid].nCreateTime = nTime;\n-                if (fLabel)\n-                    pwallet->SetAddressBook(keyid, strLabel, \"receive\");\n-                nTimeBegin = std::min(nTimeBegin, nTime);\n+                keys.push_back(std::make_tuple(key, nTime, fLabel, strLabel));\n             } else if(IsHex(vstr[0])) {\n-               std::vector<unsigned char> vData(ParseHex(vstr[0]));\n-               CScript script = CScript(vData.begin(), vData.end());\n-               CScriptID id(script);\n-               if (pwallet->HaveCScript(id)) {\n-                   pwallet->WalletLogPrintf(\"Skipping import of %s (script already present)\\n\", vstr[0]);\n-                   continue;\n-               }\n-               if(!pwallet->AddCScript(script)) {\n-                   pwallet->WalletLogPrintf(\"Error importing script %s\\n\", vstr[0]);\n-                   fGood = false;\n-                   continue;\n-               }\n-               int64_t birth_time = DecodeDumpTime(vstr[1]);\n-               if (birth_time > 0) {\n-                   pwallet->m_script_metadata[id].nCreateTime = birth_time;\n-                   nTimeBegin = std::min(nTimeBegin, birth_time);\n-               }\n+                std::vector<unsigned char> vData(ParseHex(vstr[0]));\n+                CScript script = CScript(vData.begin(), vData.end());\n+                int64_t birth_time = DecodeDumpTime(vstr[1]);\n+                scripts.push_back(std::pair<CScript, int64_t>(script, birth_time));\n             }\n         }\n         file.close();\n+        double total = (double)(keys.size() + scripts.size());\n+        double progress = 0;\n+        for (const auto& key_tuple : keys) {\n+            uiInterface.ShowProgress(\"\", std::max(50, std::min(75, (int)((progress / total) * 100) + 50)), false);\n+            const CKey& key = std::get<0>(key_tuple);\n+            int64_t time = std::get<1>(key_tuple);\n+            bool has_label = std::get<2>(key_tuple);\n+            std::string label = std::get<3>(key_tuple);\n+\n+            CPubKey pubkey = key.GetPubKey();\n+            assert(key.VerifyPubKey(pubkey));\n+            CKeyID keyid = pubkey.GetID();\n+            if (pwallet->HaveKey(keyid)) {\n+                pwallet->WalletLogPrintf(\"Skipping import of %s (key already present)\\n\", EncodeDestination(keyid));\n+                continue;\n+            }\n+            pwallet->WalletLogPrintf(\"Importing %s...\\n\", EncodeDestination(keyid));\n+            if (!pwallet->AddKeyPubKey(key, pubkey)) {\n+                fGood = false;\n+                continue;\n+            }\n+            pwallet->mapKeyMetadata[keyid].nCreateTime = time;\n+            if (has_label)\n+                pwallet->SetAddressBook(keyid, label, \"receive\");\n+            nTimeBegin = std::min(nTimeBegin, time);\n+            progress++;\n+        }\n+        for (const auto& script_pair : scripts) {\n+            uiInterface.ShowProgress(\"\", std::max(50, std::min(75, (int)((progress / total) * 100) + 50)), false);\n+            const CScript& script = script_pair.first;\n+            int64_t time = script_pair.second;\n+            CScriptID id(script);\n+            if (pwallet->HaveCScript(id)) {\n+                pwallet->WalletLogPrintf(\"Skipping import of %s (script already present)\\n\", HexStr(script));\n+                continue;\n+            }\n+            if(!pwallet->AddCScript(script)) {\n+                pwallet->WalletLogPrintf(\"Error importing script %s\\n\", HexStr(script));\n+                fGood = false;\n+                continue;\n+            }\n+            if (time > 0) {\n+                pwallet->m_script_metadata[id].nCreateTime = time;\n+                nTimeBegin = std::min(nTimeBegin, time);\n+            }\n+            progress++;\n+        }\n         uiInterface.ShowProgress(\"\", 100, false); // hide progress dialog in GUI\n         pwallet->UpdateTimeFirstKey(nTimeBegin);\n     }"
      }
    ]
  },
  {
    "sha": "e6c58d3b014ab8ef5cca4be68764af4b79685fcb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmM1OGQzYjAxNGFiOGVmNWNjYTRiZTY4NzY0YWY0Yjc5Njg1ZmNi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-01-25T19:38:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-01-31T19:29:28Z"
      },
      "message": "Do not import private keys to wallets with private keys disabled",
      "tree": {
        "sha": "9039a4523e7f7f6035271a849c0385e2e3c18dfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9039a4523e7f7f6035271a849c0385e2e3c18dfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6c58d3b014ab8ef5cca4be68764af4b79685fcb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6c58d3b014ab8ef5cca4be68764af4b79685fcb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6c58d3b014ab8ef5cca4be68764af4b79685fcb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6c58d3b014ab8ef5cca4be68764af4b79685fcb/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5c5021b644731d14a6ef04961320a99466f035a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5c5021b644731d14a6ef04961320a99466f035a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5c5021b644731d14a6ef04961320a99466f035a"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "02cd0584dfd14e7271f8836e7c476248e0b9a950",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6c58d3b014ab8ef5cca4be68764af4b79685fcb/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6c58d3b014ab8ef5cca4be68764af4b79685fcb/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e6c58d3b014ab8ef5cca4be68764af4b79685fcb",
        "patch": "@@ -133,6 +133,9 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"importprivkey\", \"\\\"mykey\\\", \\\"testing\\\", false\")\n         );\n \n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+    }\n \n     WalletRescanReserver reserver(pwallet);\n     bool fRescan = true;\n@@ -617,6 +620,11 @@ UniValue importwallet(const JSONRPCRequest& request)\n             }\n         }\n         file.close();\n+        // We now know whether we are importing private keys, so we can error if private keys are disabled\n+        if (keys.size() > 0 && pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            uiInterface.ShowProgress(\"\", 100, false); // hide progress dialog in GUI\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled when private keys are disabled\");\n+        }\n         double total = (double)(keys.size() + scripts.size());\n         double progress = 0;\n         for (const auto& key_tuple : keys) {\n@@ -967,6 +975,11 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n         const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n \n+        // If private keys are disabled, abort if private keys are being imported\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.isNull()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n         // Generate the script and destination for the scriptPubKey provided\n         CScript script;\n         CTxDestination dest;"
      },
      {
        "sha": "859681d8291ab29a295e1cc04ea64ca2f8c276a8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6c58d3b014ab8ef5cca4be68764af4b79685fcb/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6c58d3b014ab8ef5cca4be68764af4b79685fcb/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e6c58d3b014ab8ef5cca4be68764af4b79685fcb",
        "patch": "@@ -3830,6 +3830,10 @@ UniValue sethdseed(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Cannot set a new HD seed while still in Initial Block Download\");\n     }\n \n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot set a HD seed to a wallet with private keys disabled\");\n+    }\n+\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n "
      },
      {
        "sha": "2b10f5a85fa1dddba5b5e22400f1ec9e54fd2120",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6c58d3b014ab8ef5cca4be68764af4b79685fcb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6c58d3b014ab8ef5cca4be68764af4b79685fcb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e6c58d3b014ab8ef5cca4be68764af4b79685fcb",
        "patch": "@@ -251,6 +251,9 @@ bool CWallet::AddKeyPubKeyWithDB(WalletBatch &batch, const CKey& secret, const C\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n \n+    // Make sure we aren't adding private keys to private key disabled wallets\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n     // CCryptoKeyStore has no concept of wallet databases, but calls AddCryptedKey\n     // which is overridden below.  To avoid flushes, the database handle is\n     // tunneled through to it."
      },
      {
        "sha": "e55bb82e76d6084b0b5bd11f9dc16f45954f98de",
        "filename": "test/functional/wallet_disableprivatekeys.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6c58d3b014ab8ef5cca4be68764af4b79685fcb/test/functional/wallet_disableprivatekeys.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6c58d3b014ab8ef5cca4be68764af4b79685fcb/test/functional/wallet_disableprivatekeys.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disableprivatekeys.py?ref=e6c58d3b014ab8ef5cca4be68764af4b79685fcb",
        "patch": "@@ -7,6 +7,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n+    assert_equal,\n     assert_raises_rpc_error,\n )\n \n@@ -31,5 +32,15 @@ def run_test(self):\n         assert_raises_rpc_error(-4,\"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n         w1.importpubkey(w2.getaddressinfo(w2.getnewaddress())['pubkey'])\n \n+        self.log.info('Test that private keys cannot be imported')\n+        addr = w2.getnewaddress('', 'legacy')\n+        privkey = w2.dumpprivkey(addr)\n+        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)\n+        result = w1.importmulti([{'scriptPubKey': {'address': addr}, 'timestamp': 'now', 'keys': [privkey]}])\n+        assert(not result[0]['success'])\n+        assert('warning' not in result[0])\n+        assert_equal(result[0]['error']['code'], -4)\n+        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')\n+\n if __name__ == '__main__':\n     DisablePrivateKeysTest().main()"
      }
    ]
  }
]