[
  {
    "sha": "0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWMwOGE2NzJkY2UzZjYxOWU0NmQwYzc0NTVlOTVhMTNkYzVjNGUy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T14:36:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-18T16:29:02Z"
      },
      "message": "[Tests] Move assert_start_raises_init_error method to TestNode",
      "tree": {
        "sha": "e14adca17c192046a2ca0ae6393254702f241124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e14adca17c192046a2ca0ae6393254702f241124"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af20f9b1d485582b8c8aa8294bac4f2c540246d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af20f9b1d485582b8c8aa8294bac4f2c540246d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af20f9b1d485582b8c8aa8294bac4f2c540246d2"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 44,
      "deletions": 37
    },
    "files": [
      {
        "sha": "eb62ffc6a9596299c12ffb9348146c4f35df1396",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
        "patch": "@@ -25,13 +25,13 @@ def run_test(self):\n \n         # Check that using -datadir argument on non-existent directory fails\n         self.nodes[0].datadir = new_data_dir\n-        self.assert_start_raises_init_error(0, ['-datadir='+new_data_dir], 'Error: Specified data directory \"' + new_data_dir + '\" does not exist.')\n+        self.nodes[0].assert_start_raises_init_error(['-datadir='+new_data_dir], 'Error: Specified data directory \"' + new_data_dir + '\" does not exist.')\n \n         # Check that using non-existent datadir in conf file fails\n         conf_file = os.path.join(default_data_dir, \"bitcoin.conf\")\n         with open(conf_file, 'a', encoding='utf8') as f:\n             f.write(\"datadir=\" + new_data_dir + \"\\n\")\n-        self.assert_start_raises_init_error(0, ['-conf='+conf_file], 'Error reading configuration file: specified data directory \"' + new_data_dir + '\" does not exist.')\n+        self.nodes[0].assert_start_raises_init_error(['-conf='+conf_file], 'Error reading configuration file: specified data directory \"' + new_data_dir + '\" does not exist.')\n \n         # Create the directory and ensure the config file now works\n         os.mkdir(new_data_dir)"
      },
      {
        "sha": "65a03e50ad060fe3f583a33fcf1c6b1cce9eff5f",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
        "patch": "@@ -30,7 +30,7 @@ def run_test(self):\n         invdir = os.path.join(self.nodes[0].datadir, \"regtest\", \"foo\")\n         invalidname = os.path.join(\"foo\", \"foo.log\")\n         self.stop_node(0)\n-        self.assert_start_raises_init_error(0, [\"-debuglogfile=%s\" % (invalidname)],\n+        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % (invalidname)],\n                                                 \"Error: Could not open debug log file\")\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n@@ -44,7 +44,7 @@ def run_test(self):\n         self.stop_node(0)\n         invdir = os.path.join(self.options.tmpdir, \"foo\")\n         invalidname = os.path.join(invdir, \"foo.log\")\n-        self.assert_start_raises_init_error(0, [\"-debuglogfile=%s\" % invalidname],\n+        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % invalidname],\n                                                \"Error: Could not open debug log file\")\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n "
      },
      {
        "sha": "5725b85b2c789bdb31d1400c9a16329f612d3b19",
        "filename": "test/functional/feature_uacomment.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/feature_uacomment.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/feature_uacomment.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_uacomment.py?ref=0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
        "patch": "@@ -24,12 +24,12 @@ def run_test(self):\n         self.log.info(\"test -uacomment max length\")\n         self.stop_node(0)\n         expected = \"exceeds maximum length (256). Reduce the number or size of uacomments.\"\n-        self.assert_start_raises_init_error(0, [\"-uacomment=\" + 'a' * 256], expected)\n+        self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + 'a' * 256], expected)\n \n         self.log.info(\"test -uacomment unsafe characters\")\n         for unsafe_char in ['/', ':', '(', ')']:\n             expected = \"User Agent comment (\" + unsafe_char + \") contains unsafe characters\"\n-            self.assert_start_raises_init_error(0, [\"-uacomment=\" + unsafe_char], expected)\n+            self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + unsafe_char], expected)\n \n if __name__ == '__main__':\n     UacommentTest().main()"
      },
      {
        "sha": "aeb335edb313896e2f12739c5fdcd277bd670160",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
        "patch": "@@ -281,27 +281,6 @@ def restart_node(self, i, extra_args=None):\n         self.stop_node(i)\n         self.start_node(i, extra_args)\n \n-    def assert_start_raises_init_error(self, i, extra_args=None, expected_msg=None, *args, **kwargs):\n-        with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n-            try:\n-                self.start_node(i, extra_args, stderr=log_stderr, *args, **kwargs)\n-                self.stop_node(i)\n-            except Exception as e:\n-                assert 'bitcoind exited' in str(e)  # node must have shutdown\n-                self.nodes[i].running = False\n-                self.nodes[i].process = None\n-                if expected_msg is not None:\n-                    log_stderr.seek(0)\n-                    stderr = log_stderr.read().decode('utf-8')\n-                    if expected_msg not in stderr:\n-                        raise AssertionError(\"Expected error \\\"\" + expected_msg + \"\\\" not found in:\\n\" + stderr)\n-            else:\n-                if expected_msg is None:\n-                    assert_msg = \"bitcoind should have exited with an error\"\n-                else:\n-                    assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n-                raise AssertionError(assert_msg)\n-\n     def wait_for_node_exit(self, i, timeout):\n         self.nodes[i].process.wait(timeout)\n "
      },
      {
        "sha": "dbdaf6720154b8cb0661603b13518cb18051092b",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
        "patch": "@@ -12,6 +12,7 @@\n import os\n import re\n import subprocess\n+import tempfile\n import time\n \n from .authproxy import JSONRPCException\n@@ -165,6 +166,33 @@ def is_node_stopped(self):\n     def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until(self.is_node_stopped, timeout=timeout)\n \n+    def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, *args, **kwargs):\n+        \"\"\"Attempt to start the node and expect it to raise an error.\n+\n+        Will throw if bitcoind starts without an error.\n+        Will throw if an expected_msg is provided and it does not appear in bitcoind's stdout.\"\"\"\n+        with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n+            try:\n+                self.start(extra_args, stderr=log_stderr, *args, **kwargs)\n+                self.wait_for_rpc_connection()\n+                self.stop_node()\n+                self.wait_util_stopped()\n+            except Exception as e:\n+                assert 'bitcoind exited' in str(e)  # node must have shutdown\n+                self.running = False\n+                self.process = None\n+                if expected_msg is not None:\n+                    log_stderr.seek(0)\n+                    stderr = log_stderr.read().decode('utf-8')\n+                    if expected_msg not in stderr:\n+                        raise AssertionError(\"Expected error \\\"\" + expected_msg + \"\\\" not found in:\\n\" + stderr)\n+            else:\n+                if expected_msg is None:\n+                    assert_msg = \"bitcoind should have exited with an error\"\n+                else:\n+                    assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n+                raise AssertionError(assert_msg)\n+\n     def node_encrypt_wallet(self, passphrase):\n         \"\"\"\"Encrypts the wallet.\n "
      },
      {
        "sha": "f37b4bf52b428f98e5c9ad1a67102d999d0d2fde",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
        "patch": "@@ -23,7 +23,7 @@ def run_test (self):\n \n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n-        self.assert_start_raises_init_error(1, ['-usehd=0'], 'already existing HD wallet')\n+        self.nodes[1].assert_start_raises_init_error(['-usehd=0'], 'already existing HD wallet')\n         self.start_node(1)\n         connect_nodes_bi(self.nodes, 0, 1)\n "
      },
      {
        "sha": "3a255238d4dc867a0ae1ef512829ee856a2f6b45",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
        "patch": "@@ -62,27 +62,27 @@ def run_test(self):\n         # should not initialize if wallet path can't be created\n         self.assert_start_raises_init_error(0, ['-wallet=wallet.dat/bad'], 'Not a directory')\n \n-        self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n-        self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n-        self.assert_start_raises_init_error(0, ['-walletdir=debug.log'], 'Error: Specified -walletdir \"debug.log\" is not a directory', cwd=data_dir())\n+        self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n+        self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n+        self.nodes[0].assert_start_raises_init_error(['-walletdir=debug.log'], 'Error: Specified -walletdir \"debug.log\" is not a directory', cwd=data_dir())\n \n         # should not initialize if there are duplicate wallets\n-        self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n         # should not initialize if one wallet is a copy of another\n         shutil.copyfile(wallet_dir('w8'), wallet_dir('w8_copy'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w8', '-wallet=w8_copy'], 'duplicates fileid')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], 'duplicates fileid')\n \n         # should not initialize if wallet file is a symlink\n         os.symlink('w8', wallet_dir('w8_symlink'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w8_symlink'], 'Invalid -wallet path')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], 'Invalid -wallet path')\n \n         # should not initialize if the specified walletdir does not exist\n-        self.assert_start_raises_init_error(0, ['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n+        self.nodes[0].assert_start_raises_init_error(['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n         # should not initialize if the specified walletdir is not a directory\n         not_a_dir = wallet_dir('notadir')\n         open(not_a_dir, 'a').close()\n-        self.assert_start_raises_init_error(0, ['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n+        self.nodes[0].assert_start_raises_init_error(['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n \n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n@@ -103,7 +103,7 @@ def run_test(self):\n         competing_wallet_dir = os.path.join(self.options.tmpdir, 'competing_walletdir')\n         os.mkdir(competing_wallet_dir)\n         self.restart_node(0, ['-walletdir='+competing_wallet_dir])\n-        self.assert_start_raises_init_error(1, ['-walletdir='+competing_wallet_dir], 'Error initializing wallet database environment')\n+        self.nodes[1].assert_start_raises_init_error(['-walletdir='+competing_wallet_dir], 'Error initializing wallet database environment')\n \n         self.restart_node(0, extra_args)\n "
      }
    ]
  },
  {
    "sha": "58122736b53390a2013630e95ff760800af160e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODEyMjczNmI1MzM5MGEyMDEzNjMwZTk1ZmY3NjA4MDBhZjE2MGU3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T15:38:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-18T17:32:50Z"
      },
      "message": "[Tests] Require exact match in assert_start_raises_init_eror()",
      "tree": {
        "sha": "386b714cff790ba9fae18135bb91c13455802e09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/386b714cff790ba9fae18135bb91c13455802e09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58122736b53390a2013630e95ff760800af160e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58122736b53390a2013630e95ff760800af160e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58122736b53390a2013630e95ff760800af160e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58122736b53390a2013630e95ff760800af160e7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec08a672dce3f619e46d0c7455e95a13dc5c4e2"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 35,
      "deletions": 18
    },
    "files": [
      {
        "sha": "0c365470542e8648d3b94cbf3029cf2530fd2ed8",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58122736b53390a2013630e95ff760800af160e7/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58122736b53390a2013630e95ff760800af160e7/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=58122736b53390a2013630e95ff760800af160e7",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test various command line arguments and configuration file parameters.\"\"\"\n \n import os\n+import re\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import get_datadir_path\n@@ -25,13 +26,13 @@ def run_test(self):\n \n         # Check that using -datadir argument on non-existent directory fails\n         self.nodes[0].datadir = new_data_dir\n-        self.nodes[0].assert_start_raises_init_error(['-datadir='+new_data_dir], 'Error: Specified data directory \"' + new_data_dir + '\" does not exist.')\n+        self.nodes[0].assert_start_raises_init_error(['-datadir=' + new_data_dir], 'Error: Specified data directory \"' + re.escape(new_data_dir) + '\" does not exist.')\n \n         # Check that using non-existent datadir in conf file fails\n         conf_file = os.path.join(default_data_dir, \"bitcoin.conf\")\n         with open(conf_file, 'a', encoding='utf8') as f:\n             f.write(\"datadir=\" + new_data_dir + \"\\n\")\n-        self.nodes[0].assert_start_raises_init_error(['-conf='+conf_file], 'Error reading configuration file: specified data directory \"' + new_data_dir + '\" does not exist.')\n+        self.nodes[0].assert_start_raises_init_error(['-conf=' + conf_file], 'Error reading configuration file: specified data directory \"' + re.escape(new_data_dir) + '\" does not exist.')\n \n         # Create the directory and ensure the config file now works\n         os.mkdir(new_data_dir)"
      },
      {
        "sha": "a4ebc7cca3fa343b95a7c8972c82de440b9054e7",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58122736b53390a2013630e95ff760800af160e7/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58122736b53390a2013630e95ff760800af160e7/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=58122736b53390a2013630e95ff760800af160e7",
        "patch": "@@ -30,8 +30,8 @@ def run_test(self):\n         invdir = os.path.join(self.nodes[0].datadir, \"regtest\", \"foo\")\n         invalidname = os.path.join(\"foo\", \"foo.log\")\n         self.stop_node(0)\n-        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % (invalidname)],\n-                                                \"Error: Could not open debug log file\")\n+        exp_stderr = \"Error: Could not open debug log file \\S+$\"\n+        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % (invalidname)], exp_stderr)\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n         # check that invalid log (relative) works after path exists\n@@ -44,8 +44,7 @@ def run_test(self):\n         self.stop_node(0)\n         invdir = os.path.join(self.options.tmpdir, \"foo\")\n         invalidname = os.path.join(invdir, \"foo.log\")\n-        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % invalidname],\n-                                               \"Error: Could not open debug log file\")\n+        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % invalidname], exp_stderr)\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n         # check that invalid log (absolute) works after path exists"
      },
      {
        "sha": "c73bdcfbb8516cf827d29b1eda3e2ebfdd214706",
        "filename": "test/functional/feature_uacomment.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58122736b53390a2013630e95ff760800af160e7/test/functional/feature_uacomment.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58122736b53390a2013630e95ff760800af160e7/test/functional/feature_uacomment.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_uacomment.py?ref=58122736b53390a2013630e95ff760800af160e7",
        "patch": "@@ -4,9 +4,12 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the -uacomment option.\"\"\"\n \n+import re\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n+\n class UacommentTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -23,13 +26,14 @@ def run_test(self):\n \n         self.log.info(\"test -uacomment max length\")\n         self.stop_node(0)\n-        expected = \"exceeds maximum length (256). Reduce the number or size of uacomments.\"\n+        expected = \"Error: Total length of network version string \\([0-9]+\\) exceeds maximum length \\(256\\). Reduce the number or size of uacomments.\"\n         self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + 'a' * 256], expected)\n \n         self.log.info(\"test -uacomment unsafe characters\")\n         for unsafe_char in ['/', ':', '(', ')']:\n-            expected = \"User Agent comment (\" + unsafe_char + \") contains unsafe characters\"\n+            expected = \"Error: User Agent comment \\(\" + re.escape(unsafe_char) + \"\\) contains unsafe characters.\"\n             self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + unsafe_char], expected)\n \n+\n if __name__ == '__main__':\n     UacommentTest().main()"
      },
      {
        "sha": "8d880691085b47e22f21998cf68474a21cafaef6",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58122736b53390a2013630e95ff760800af160e7/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58122736b53390a2013630e95ff760800af160e7/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=58122736b53390a2013630e95ff760800af160e7",
        "patch": "@@ -169,8 +169,11 @@ def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n     def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n \n+        extra_args: extra arguments to pass through to bitcoind\n+        expected_msg: regex that stderr should match when bitcoind fails\n+\n         Will throw if bitcoind starts without an error.\n-        Will throw if an expected_msg is provided and it does not appear in bitcoind's stdout.\"\"\"\n+        Will throw if an expected_msg is provided and it does not match bitcoind's stdout.\"\"\"\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n             try:\n                 self.start(extra_args, stderr=log_stderr, *args, **kwargs)\n@@ -181,11 +184,12 @@ def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, *ar\n                 assert 'bitcoind exited' in str(e)  # node must have shutdown\n                 self.running = False\n                 self.process = None\n+                # Check stderr for expected message\n                 if expected_msg is not None:\n                     log_stderr.seek(0)\n                     stderr = log_stderr.read().decode('utf-8')\n-                    if expected_msg not in stderr:\n-                        raise AssertionError(\"Expected error \\\"\" + expected_msg + \"\\\" not found in:\\n\" + stderr)\n+                    if re.fullmatch(expected_msg + '\\n', stderr) is None:\n+                        raise AssertionError('Expected message \"{}\" does not match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n             else:\n                 if expected_msg is None:\n                     assert_msg = \"bitcoind should have exited with an error\""
      },
      {
        "sha": "2f6e2852acc848d802efbd9d3388717d4d83df1d",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58122736b53390a2013630e95ff760800af160e7/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58122736b53390a2013630e95ff760800af160e7/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=58122736b53390a2013630e95ff760800af160e7",
        "patch": "@@ -23,7 +23,7 @@ def run_test (self):\n \n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n-        self.nodes[1].assert_start_raises_init_error(['-usehd=0'], 'already existing HD wallet')\n+        self.nodes[1].assert_start_raises_init_error(['-usehd=0'], \"Error: Error loading : You can't disable HD on an already existing HD wallet\")\n         self.start_node(1)\n         connect_nodes_bi(self.nodes, 0, 1)\n "
      },
      {
        "sha": "cc72f09c827cfbdd1537c39add9c76a9684faa64",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58122736b53390a2013630e95ff760800af160e7/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58122736b53390a2013630e95ff760800af160e7/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=58122736b53390a2013630e95ff760800af160e7",
        "patch": "@@ -60,22 +60,30 @@ def run_test(self):\n                 assert_equal(os.path.isfile(wallet_dir(wallet_name)), True)\n \n         # should not initialize if wallet path can't be created\n-        self.assert_start_raises_init_error(0, ['-wallet=wallet.dat/bad'], 'Not a directory')\n+        exp_stderr = \"\\n\\n\\*+\\n\" + \\\n+                     \"EXCEPTION: .*\\n\" + \\\n+                     \"boost::filesystem::create_directory: Not a directory:.*\\n\" + \\\n+                     \"bitcoin in .*\\n\"\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=wallet.dat/bad'], exp_stderr)\n \n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=debug.log'], 'Error: Specified -walletdir \"debug.log\" is not a directory', cwd=data_dir())\n \n         # should not initialize if there are duplicate wallets\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w1', '-wallet=w1'], 'Error: Error loading wallet w1. Duplicate -wallet filename specified.')\n \n         # should not initialize if one wallet is a copy of another\n         shutil.copyfile(wallet_dir('w8'), wallet_dir('w8_copy'))\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], 'duplicates fileid')\n+        exp_stderr = \"\\n\\n\\*+\\n\" + \\\n+                     \"EXCEPTION: .*\\n\" + \\\n+                     \"CDB: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\\s*\\n\" + \\\n+                     \"bitcoin in .*\\n\"\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr)\n \n         # should not initialize if wallet file is a symlink\n         os.symlink('w8', wallet_dir('w8_symlink'))\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], 'Invalid -wallet path')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], 'Error: Invalid -wallet path \\'w8_symlink\\'\\. .*')\n \n         # should not initialize if the specified walletdir does not exist\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n@@ -102,8 +110,9 @@ def run_test(self):\n \n         competing_wallet_dir = os.path.join(self.options.tmpdir, 'competing_walletdir')\n         os.mkdir(competing_wallet_dir)\n-        self.restart_node(0, ['-walletdir='+competing_wallet_dir])\n-        self.nodes[1].assert_start_raises_init_error(['-walletdir='+competing_wallet_dir], 'Error initializing wallet database environment')\n+        self.restart_node(0, ['-walletdir=' + competing_wallet_dir])\n+        exp_stderr = \"Error: Error initializing wallet database environment \\\"\\S+competing_walletdir\\\"!\"\n+        self.nodes[1].assert_start_raises_init_error(['-walletdir=' + competing_wallet_dir], exp_stderr)\n \n         self.restart_node(0, extra_args)\n "
      }
    ]
  },
  {
    "sha": "fae137454adc50a4e1d448ed7219a8f5344486c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWUxMzc0NTRhZGM1MGE0ZTFkNDQ4ZWQ3MjE5YThmNTM0NDQ4NmM5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-19T19:35:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-19T19:49:35Z"
      },
      "message": "qa: Allow for partial_match when checking init error\n\nThis allows the tests to pass on different platforms",
      "tree": {
        "sha": "ae5f891c71d820da5f57606b8380b9c2251d755d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae5f891c71d820da5f57606b8380b9c2251d755d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae137454adc50a4e1d448ed7219a8f5344486c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJasBRPAAoJEM4rdWl+aaVI2GEL/j13QFMBcY0hM4guDziAtkzR\nZfpwQz1pEzAApPYk1YmKE183pWQbcu1b03gxN0G9y+SJmgHfvsRTdE4q6rshP9m/\nQ4SujeuD5zlAHRdOMOSBwsYYHdc13X5SDGQesy3LhMvUp778EsG6RpyOylwpdevi\nTv97+N9U5D4HIvKCSX4luRtl2ODDtD151gCl/L9EdHwqMXLFdzc1TdSiSnoNzbdc\nIjVl4QyM76Oa08L1/t9zbmgzjTNda/7KwC9PAr6CIR9HTHZLol9dWfpk7/BNusyl\n/FuHKUUqD5mCVUmueE0j9i2hDA3EpXiImXlNqWZvlb74VEvU/If27hQvwG6ztfg6\nN4vgg7w9v1ZOBFIJNqOKAn93nP5xqfB+ljMJJAkFX/fJwyZaqmQlOpmI+tymgt+K\nxrTAYQ9C7v2ywo7JEcnVkFiAn2IjwlalRh3HPIaUVzDl7S13+pp0Twqe2MW86hD8\ngWtL/jX3pQfqgB2qvKKGt75hHpXcWixadWnmoSaBjA==\n=8WB6\n-----END PGP SIGNATURE-----",
        "payload": "tree ae5f891c71d820da5f57606b8380b9c2251d755d\nparent 58122736b53390a2013630e95ff760800af160e7\nauthor MarcoFalke <falke.marco@gmail.com> 1521488104 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1521488975 -0400\n\nqa: Allow for partial_match when checking init error\n\nThis allows the tests to pass on different platforms\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae137454adc50a4e1d448ed7219a8f5344486c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae137454adc50a4e1d448ed7219a8f5344486c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae137454adc50a4e1d448ed7219a8f5344486c9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58122736b53390a2013630e95ff760800af160e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58122736b53390a2013630e95ff760800af160e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58122736b53390a2013630e95ff760800af160e7"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 15,
      "deletions": 16
    },
    "files": [
      {
        "sha": "8d6ec618d55f61a76d22ff6bd6b5e4d3f38ee039",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae137454adc50a4e1d448ed7219a8f5344486c9/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae137454adc50a4e1d448ed7219a8f5344486c9/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fae137454adc50a4e1d448ed7219a8f5344486c9",
        "patch": "@@ -166,7 +166,7 @@ def is_node_stopped(self):\n     def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until(self.is_node_stopped, timeout=timeout)\n \n-    def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, *args, **kwargs):\n+    def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, partial_match=False, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n \n         extra_args: extra arguments to pass through to bitcoind\n@@ -187,9 +187,13 @@ def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, *ar\n                 # Check stderr for expected message\n                 if expected_msg is not None:\n                     log_stderr.seek(0)\n-                    stderr = log_stderr.read().decode('utf-8')\n-                    if re.fullmatch(expected_msg + '\\n', stderr) is None:\n-                        raise AssertionError('Expected message \"{}\" does not match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n+                    stderr = log_stderr.read().decode('utf-8').strip()\n+                    if partial_match:\n+                        if re.search(expected_msg, stderr, flags=re.MULTILINE) is None:\n+                            raise AssertionError('Expected message \"{}\" does not partially match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n+                    else:\n+                        if re.fullmatch(expected_msg, stderr) is None:\n+                            raise AssertionError('Expected message \"{}\" does not fully match stderr:\\n\"{}\"'.format(expected_msg, stderr))\n             else:\n                 if expected_msg is None:\n                     assert_msg = \"bitcoind should have exited with an error\""
      },
      {
        "sha": "cf6d1274b5497e691e3fcc1b5dd3231d643e8756",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae137454adc50a4e1d448ed7219a8f5344486c9/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae137454adc50a4e1d448ed7219a8f5344486c9/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=fae137454adc50a4e1d448ed7219a8f5344486c9",
        "patch": "@@ -7,6 +7,7 @@\n Verify that a bitcoind node can load multiple wallet files\n \"\"\"\n import os\n+import re\n import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -60,11 +61,8 @@ def run_test(self):\n                 assert_equal(os.path.isfile(wallet_dir(wallet_name)), True)\n \n         # should not initialize if wallet path can't be created\n-        exp_stderr = \"\\n\\n\\*+\\n\" + \\\n-                     \"EXCEPTION: .*\\n\" + \\\n-                     \"boost::filesystem::create_directory: Not a directory:.*\\n\" + \\\n-                     \"bitcoin in .*\\n\"\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=wallet.dat/bad'], exp_stderr)\n+        exp_stderr = \"boost::filesystem::create_directory: (The system cannot find the path specified|Not a directory):\"\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=wallet.dat/bad'], exp_stderr, partial_match=True)\n \n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n@@ -75,11 +73,8 @@ def run_test(self):\n \n         # should not initialize if one wallet is a copy of another\n         shutil.copyfile(wallet_dir('w8'), wallet_dir('w8_copy'))\n-        exp_stderr = \"\\n\\n\\*+\\n\" + \\\n-                     \"EXCEPTION: .*\\n\" + \\\n-                     \"CDB: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\\s*\\n\" + \\\n-                     \"bitcoin in .*\\n\"\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr)\n+        exp_stderr = \"CDB: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\"\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr, partial_match=True)\n \n         # should not initialize if wallet file is a symlink\n         os.symlink('w8', wallet_dir('w8_symlink'))\n@@ -90,7 +85,7 @@ def run_test(self):\n         # should not initialize if the specified walletdir is not a directory\n         not_a_dir = wallet_dir('notadir')\n         open(not_a_dir, 'a').close()\n-        self.nodes[0].assert_start_raises_init_error(['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n+        self.nodes[0].assert_start_raises_init_error(['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + re.escape(not_a_dir) + '\" is not a directory')\n \n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n@@ -112,7 +107,7 @@ def run_test(self):\n         os.mkdir(competing_wallet_dir)\n         self.restart_node(0, ['-walletdir=' + competing_wallet_dir])\n         exp_stderr = \"Error: Error initializing wallet database environment \\\"\\S+competing_walletdir\\\"!\"\n-        self.nodes[1].assert_start_raises_init_error(['-walletdir=' + competing_wallet_dir], exp_stderr)\n+        self.nodes[1].assert_start_raises_init_error(['-walletdir=' + competing_wallet_dir], exp_stderr, partial_match=True)\n \n         self.restart_node(0, extra_args)\n "
      }
    ]
  }
]