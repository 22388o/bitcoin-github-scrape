hebasto,2020-06-11 14:34:59,@ajtowns @practicalswift @ryanofsky Mind reviewing this PR?,https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642698927,642698927,
MarcoFalke,2020-06-11 14:40:35,"Concept ACK. Please adjust the minimum clang version to https://releases.llvm.org/3.6.0/tools/clang/docs/ThreadSafetyAnalysis.html#negative\n\nThis should be uncontroversial, because even debian oldoldstable comes with clang-4 https://packages.debian.org/jessie/clang-4.0",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642702615,642702615,
practicalswift,2020-06-11 15:07:41,"Concept ACK, but we'll have to opt-in to `-Wthread-safety-negative` (+ `-Werror=thread-safety-negative` in Travis) to get the benefit of those annotations? :)\n\nCan you add a temporary test case to verify that Travis catches an example incorrect lock?",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642722320,642722320,
hebasto,2020-06-11 15:22:43,"@MarcoFalke \n> Concept ACK. Please adjust the minimum clang version to https://releases.llvm.org/3.6.0/tools/clang/docs/ThreadSafetyAnalysis.html#negative\n> \n> This should be uncontroversial, because even debian oldoldstable comes with clang-4 https://packages.debian.org/jessie/clang-4.0\n\nThis feature lives since the Clang version 3.5.0: https://github.com/llvm/llvm-project/commit/3efd04",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642732970,642732970,
MarcoFalke,2020-06-11 15:30:11,"Yes, as I said this should be uncontroversial, as all supported operating systems come with at least clang-4.0 (oldoldstable debian)",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642737626,642737626,
hebasto,2020-06-11 15:43:57,"@practicalswift \n> Concept ACK, but we'll have to opt-in to `-Wthread-safety-negative` (+ `-Werror=thread-safety-negative` in Travis) to get the benefit of those annotations? :)\n\nNot exactly :)\n\n`-Wthread-safety-negative` warns about absent negative annotations. It will be quite noisy in the current state of the code base. But it is our goal.\n\nWithout `-Wthread-safety-negative` the a",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642752931,642752931,
hebasto,2020-06-11 15:57:24,"@practicalswift \nThe first error catch: https://travis-ci.org/github/bitcoin/bitcoin/jobs/697279768#L3640",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642767429,642767429,
hebasto,2020-06-11 16:38:49,"@MarcoFalke \n> Yes, as I said this should be uncontroversial, as all supported operating systems come with at least clang-4.0 (oldoldstable debian)\n\nhttps://packages.debian.org/jessie/clang:\n> Package: clang (1:3.5-25) ",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642797415,642797415,
MarcoFalke,2020-06-11 16:51:04,https://packages.debian.org/jessie/clang-4.0,https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642805267,642805267,
MarcoFalke,2020-06-11 17:01:04,"Also, I agree with @practicalswift that this should be added to the default flags. Otherwise it misses the whole point of helping developers write better code. There should not be a single negative annotation in our code, so there can't be any warnings. What am I missing?",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642810600,642810600,
hebasto,2020-06-11 17:14:43,"> Also, I agree with @practicalswift that this should be added to the default flags. Otherwise it misses the whole point of helping developers write better code. There should not be a single negative annotation in our code, so there can't be any warnings. What am I missing?\n\nAll classes and free functions that use mutexes are required to be modernized as it done with the `CAddrMan` class in #1",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642819030,642819030,
hebasto,2020-06-11 17:24:54,"@MarcoFalke @practicalswift \nOn the first stage, I see Negative Capabilities as a tool to refactor `RecursiveMutex`s into `Mutex`s with deadlock-free guaranties, and to verify the refactoring is done correctly.\n\nThe next stage is as @practicalswift said:\n\n> Concept ACK, but we'll have to opt-in to `-Wthread-safety-negative` (+ `-Werror=thread-safety-negative` in Travis) to get the benefi",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642823797,642823797,
vasild,2020-06-11 19:48:52,"Just to clarify with an example why `EXCLUSIVE_LOCKS_REQUIRED(!m)` makes sense without `-Wthread-safety-negative` (I added a buggy function `f()` which calls `size()` while holding the mutex):\n\n```c++\n556     size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n557     {\n558         LOCK(m_addrman_mutex); // TODO: Cache this in an atomic to avoid this overhead\n559         ret",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642893541,642893541,
MarcoFalke,2020-06-11 22:33:55,Does it warn even for recursive mutexes?,https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642964695,642964695,
MarcoFalke,2020-06-11 23:26:19,"Approach ACK f8213c05f087e5fbb5d92a291f766b0baebc798f\n\nThis simply adds a member function and doesn't need to bump the minimum compiler version. I don't see a reason to disallow this annotation for temporary testing by not having the member function.",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642979664,642979664,
ajtowns,2020-06-12 03:45:18,"If we're even slightly worried about supporting old compilers, why not add a new macro to threadsafety.h?\n\n```c++\n#if defined(__clang__) && __clang_major__ >= 4\n#define EXCLUSIVE_LOCKS_FORBIDDEN(a) __attribute__((exclusive_locks_required(!a)))\n#else\n#define EXCLUSIVE_LOCKS_FORBIDDEN(a)\n#endif // clang 4\n\nclass CAddrMan {\n    ...\n    size_t size() const EXCLUSIVE_LOCKS_FORBIDD",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-643048609,643048609,
hebasto,2020-06-12 07:33:54,"@MarcoFalke \n> Does it warn even for recursive mutexes?\n\nYes, it does. See:\n- https://travis-ci.org/github/bitcoin/bitcoin/jobs/697279768#L3640\n- https://travis-ci.org/github/bitcoin/bitcoin/jobs/697279769#L2114",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-643119899,643119899,
hebasto,2020-06-12 16:14:56,"@MarcoFalke \n> This simply adds a member function and doesn't need to bump the minimum compiler version.\n\nAgree to postpone the minimum compiler version bumping until C++17.\n\nIn any case, Clang just ignores unknown annotations.\n\nFWIW, I've made some retro tests:\n\n- Clang 3.3\n```\n$ cat /etc/system-release\nFedora release 20 (Heisenbug)\n\n$ clang++ --version\nclang version",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-643358163,643358163,
hebasto,2020-06-14 06:47:03,"@ajtowns \n> Based on the [google paper](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/42958.pdf) I think the what's happening is ""The analyzer assumes that it holds a negative capability for any object that is not defined within the current lexical scope"" -- so for mutexes that are private class members, it should be fine, I think; and also for module-specific g",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-643726686,643726686,
vasild,2020-06-15 16:02:11,"Currently all thread-safety macros map to attributes with identical names:\n```cpp\n#define FOO() __attribute__((foo))\n```\nThat is good because somebody who is familiar with the clang attributes, but not with bitcoin core specifics does not have to look up what a macro does in `src/threadsafety.h`. So, maybe refrain from adding `EXCLUSIVE_LOCKS_FORBIDDEN()`. Also, the current `EXCLUSIVE_LOCK",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-644223945,644223945,
MarcoFalke,2020-06-15 23:58:36,"This looks like an uncontroversial addition of a member function with no risk of breaking anything, so I am planning to merge this in the coming days. To ask more c++ experienced people, @ryanofsky do you think this could break anything?",https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-644451034,644451034,
