instagibbs,2018-02-16T20:29:47Z,"utACK\n\nI wouldn't mind argument checks for the other prevtx arguments, if none exist, but not a blocker.",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366349675,366349675,
Empact,2018-02-16T20:52:33Z,"@instagibbs Did you have any specific sort of testing in mind? Everything except `redeemScript` is tested, but `redeemScript` is not required in all cases.",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366354937,366354937,
Empact,2018-02-16T20:55:01Z,"Scratch that - `redeemScript` is tested here:\nhttps://github.com/bitcoin/bitcoin/pull/12458/files#diff-01aa7d1d32f1b9e5a836c9c411978918L839",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366355487,366355487,
instagibbs,2018-02-16T20:56:39Z,"I mean tested inside functional tests, sorry.",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366355846,366355846,
sipa,2018-02-17T03:26:51Z,"It should only be required when signing a segwit input, no?",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366412629,366412629,
jonasschnelli,2018-02-17T11:31:14Z,Agree with sipa. There is no need to enforce amounts for non SW inputs... ,https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366435263,366435263,
Empact,2018-02-19T01:45:02Z,Gotcha - I'll revise.,https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-366569841,366569841,
Empact,2018-05-18T18:48:03Z,"This is up for grabs, fyi.",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-390298661,390298661,
ajtowns,2018-06-27T16:19:15Z,Grabbed in #13547 ,https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-400737837,400737837,
Empact,2018-06-29T20:12:26Z,"Thanks @ajtowns for picking this up! Heavily inspired by your work, I updated this PR. Relatively minor differences:\n\n* ~~Use 0 rather than MAX_MONEY as the signifier. Seems that existing coins with 0 value are not any more valid than new ones.~~\n* throw before updating the input. No point in updating with the invalid signature data.",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-401461727,401461727,
sipa,2018-06-29T20:32:30Z,It is perfectly valid to spend UTXOs with value 0.,https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-401466393,401466393,
Empact,2018-06-29T20:58:52Z,"@sipa Maybe I'm confused or misspeaking then - if amount is required for segwit transactions to be signed properly, then amount of 0 would be invalid as not meeting that requirement when checking a segwit input, right?",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-401472446,401472446,
instagibbs,2018-06-29T21:01:20Z,@Empact 0-value outputs are completely legal and spendable.,https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-401472969,401472969,
sipa,2018-06-29T21:32:17Z,"@Empact I don't understand. The segwit sighashing scheme in BIP143 requires including the amount into the message being hashing. If the amount is zero, then it simply means the signature must be valid for a signature on a message that includes 0 in that position.",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-401479508,401479508,
Empact,2018-06-29T22:37:58Z,"Thanks guys, TIL. Updated to use `MAX_MONEY` as in #13547. The differences are now down to a few incidental tests and an earlier throw in this PR.",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-401490873,401490873,
sipa,2018-07-06T03:32:39Z,"utACK. Tested that it still works after merge with #13425.\n\nWe should probably do the same for `bitcoin-tx`, but that can be done elsewhere.",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-402915561,402915561,
Empact,2018-07-07T16:48:20Z,Updated tests as per @MarcoFalke's feedback https://github.com/bitcoin/bitcoin/pull/13547#discussion_r200805633,https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-403228595,403228595,
Empact,2018-07-09T04:27:44Z,"Fair enough, added `INVALID_MONEY` as an alternative magic value.",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-403356368,403356368,
l2a5b1,2018-07-10T08:27:14Z,"@Empact, please see https://github.com/bitcoin/bitcoin/pull/13547#pullrequestreview-135472612. I hope my review comments haven't sent you in the wrong direction. :/",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-403742334,403742334,
sipa,2018-07-10T08:31:12Z,"@251Labs 21000000.00000000 BTC (the MAX_MONEY constant) would be accepted as an amount if it were to occur inside a transaction. However, this can never happen for a valid transaction because there will never be that much in circulation.",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-403743474,403743474,
l2a5b1,2018-07-10T09:58:54Z,"Thanks @sipa, this confirmation is very valuable.\n\nI tried to set out in https://github.com/bitcoin/bitcoin/pull/13547#discussion_r201251981 why it was  confusing to me. Perhaps, for the avoidance of doubt, it would be good to add your clarification it to the `MAX_MONEY` documentation.\n\nApologies for the noise, I hope there was at least some value.",https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-403768675,403768675,
DrahtBot,2018-07-10T16:17:14Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-403881440,403881440,
Empact,2018-07-11T05:47:15Z,Closing since #13547 was merged,https://github.com/bitcoin/bitcoin/pull/12458#issuecomment-404052226,404052226,
l2a5b1,2018-07-08T12:10:32Z,"I was wondering if `MAX_MONEY` should be used, because `MAX_MONEY` (like the value `0` that it replaces) is a valid amount isn't it? ",https://github.com/bitcoin/bitcoin/pull/12458#discussion_r200838410,200838410,src/rpc/rawtransaction.cpp
l2a5b1,2018-07-08T12:28:32Z,"Please feel free to ignore this, but alternatively to express intent more directly,\n```c++\nnewcoin.out.nValue = MAX_MONEY;\nif (prevOut.exists(""amount"")) {\n    newcoin.out.nValue = AmountFromValue(find_value(prevOut, ""amount""));\n}\n```\ncan be replaced with a conditional expression:\n```c++\nnewcoin.out.nValue = prevOut.exists(""amount"") ? AmountFromValue(find_value(prevOut, ""amount""))",https://github.com/bitcoin/bitcoin/pull/12458#discussion_r200838937,200838937,src/rpc/rawtransaction.cpp
l2a5b1,2018-07-08T12:44:19Z,"Please do ignore this if comparing against `MAX_MONEY` is valid, but if it isn't and you will be using an amount outside of the range `[0,MAX_MONEY]` then the boolean expression needs to be addressed. I suspect something along these lines would work:\n```c++\nif (!MoneyRange(amount) && !sigdata.scriptWitness.IsNull()) {\n```",https://github.com/bitcoin/bitcoin/pull/12458#discussion_r200839361,200839361,src/rpc/rawtransaction.cpp
