[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939153782",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#issuecomment-939153782",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23233",
    "id": 939153782,
    "node_id": "IC_kwDOABII5843-ll2",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?u=65406da0f40524c00b8b647f916d31cbbb449edb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-08T22:45:38Z",
    "updated_at": "2021-10-08T22:45:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased and lint errors fixed. Ready for review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939153782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939346404",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#issuecomment-939346404",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23233",
    "id": 939346404,
    "node_id": "IC_kwDOABII5843_Unk",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-09T19:00:13Z",
    "updated_at": "2021-11-26T12:40:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23561](https://github.com/bitcoin/bitcoin/pull/23561) (BIP324: Handshake prerequisites by dhruv)\n* [#23443](https://github.com/bitcoin/bitcoin/pull/23443) (p2p: Erlay support signaling by naumenkogs)\n* [#23441](https://github.com/bitcoin/bitcoin/pull/23441) (fuzz: Differential fuzzing for ChaCha20Forward4064-Poly1305@bitcoin cipher suite by stratospher)\n* [#21515](https://github.com/bitcoin/bitcoin/pull/21515) (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n* [#20196](https://github.com/bitcoin/bitcoin/pull/20196) (net: fix GetListenPort() to derive the proper port by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939346404/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939406571",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#issuecomment-939406571",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23233",
    "id": 939406571,
    "node_id": "IC_kwDOABII5843_jTr",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?u=65406da0f40524c00b8b647f916d31cbbb449edb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-10T04:51:32Z",
    "updated_at": "2021-10-10T04:51:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Addressed https://github.com/bitcoin/bitcoin/pull/23233#discussion_r725442331 - ready for further review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939406571/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949867586",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#issuecomment-949867586",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23233",
    "id": 949867586,
    "node_id": "IC_kwDOABII5844ndRC",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?u=65406da0f40524c00b8b647f916d31cbbb449edb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-22T18:24:42Z",
    "updated_at": "2021-10-22T18:24:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased. Ready for further review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949867586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/963698675",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#issuecomment-963698675",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23233",
    "id": 963698675,
    "node_id": "IC_kwDOABII5845cN_z",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?u=65406da0f40524c00b8b647f916d31cbbb449edb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-09T00:28:41Z",
    "updated_at": "2021-11-09T01:53:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased to bring in changes from #22735, and addressed comments from @stratospher (Thank you!). Ready for further review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/963698675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/977279224",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#issuecomment-977279224",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23233",
    "id": 977279224,
    "node_id": "IC_kwDOABII5846QBj4",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?u=65406da0f40524c00b8b647f916d31cbbb449edb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T23:29:58Z",
    "updated_at": "2021-11-23T23:29:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Pushed changes to enforce connection termination upon finding an invalid mac tag. Ready for further review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/977279224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725442331",
    "pull_request_review_id": 775548796,
    "id": 725442331,
    "node_id": "PRRC_kwDOABII584rPV8b",
    "diff_hunk": "@@ -37,32 +34,11 @@ FUZZ_TARGET(crypto_chacha20_poly1305_aead)\n                 out = std::vector<uint8_t>(buffer_size + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n             },\n             [&] {\n-                (void)aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffer_size, is_encrypt);\n+                (void)aead.Crypt(out.data(), out.size(), in.data(), buffer_size, is_encrypt);\n             },\n             [&] {\n-                uint32_t len = 0;\n-                const bool ok = aead.GetLength(&len, seqnr_aad, aad_pos, in.data());\n-                assert(ok);\n-            },\n-            [&] {\n-                if (AdditionOverflow(seqnr_payload, static_cast<uint64_t>(1))) {\n-                    return;\n-                }\n-                seqnr_payload += 1;\n-                aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n-                if (aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n-                    aad_pos = 0;\n-                    if (AdditionOverflow(seqnr_aad, static_cast<uint64_t>(1))) {\n-                        return;\n-                    }\n-                    seqnr_aad += 1;\n-                }\n-            },\n-            [&] {\n-                seqnr_payload = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n-            },\n-            [&] {\n-                seqnr_aad = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                uint32_t len = aead.DecryptLength(in.data());\n+                len = 0; // addressing the [[nodiscard]] and otherwise unused variable",
    "path": "src/test/fuzz/crypto_chacha20_poly1305_aead.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "f81e8add760ea721e938c2dc7c3fb6c74c11f965",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n                (void)aead.DecryptLength(in.data());\r\n```\r\n\r\nDoes this not work?",
    "created_at": "2021-10-09T06:28:27Z",
    "updated_at": "2021-10-09T06:30:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r725442331",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725442331"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r725442331"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725442331/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 40,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 41,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725576786",
    "pull_request_review_id": 775628218,
    "id": 725576786,
    "node_id": "PRRC_kwDOABII584rP2xS",
    "diff_hunk": "@@ -37,32 +34,11 @@ FUZZ_TARGET(crypto_chacha20_poly1305_aead)\n                 out = std::vector<uint8_t>(buffer_size + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n             },\n             [&] {\n-                (void)aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffer_size, is_encrypt);\n+                (void)aead.Crypt(out.data(), out.size(), in.data(), buffer_size, is_encrypt);\n             },\n             [&] {\n-                uint32_t len = 0;\n-                const bool ok = aead.GetLength(&len, seqnr_aad, aad_pos, in.data());\n-                assert(ok);\n-            },\n-            [&] {\n-                if (AdditionOverflow(seqnr_payload, static_cast<uint64_t>(1))) {\n-                    return;\n-                }\n-                seqnr_payload += 1;\n-                aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n-                if (aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n-                    aad_pos = 0;\n-                    if (AdditionOverflow(seqnr_aad, static_cast<uint64_t>(1))) {\n-                        return;\n-                    }\n-                    seqnr_aad += 1;\n-                }\n-            },\n-            [&] {\n-                seqnr_payload = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n-            },\n-            [&] {\n-                seqnr_aad = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                uint32_t len = aead.DecryptLength(in.data());\n+                len = 0; // addressing the [[nodiscard]] and otherwise unused variable",
    "path": "src/test/fuzz/crypto_chacha20_poly1305_aead.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "f81e8add760ea721e938c2dc7c3fb6c74c11f965",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That does indeed work. Thank you.\r\n\r\nI've updated the commit in PR #20962 (where it originally belongs) and also here(this PR is based off that one).",
    "created_at": "2021-10-10T04:50:53Z",
    "updated_at": "2021-10-10T04:50:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r725576786",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725576786"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r725576786"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725576786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 40,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 41,
    "side": "RIGHT",
    "in_reply_to_id": 725442331
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743387596",
    "pull_request_review_id": 798495512,
    "id": 743387596,
    "node_id": "PRRC_kwDOABII584sTzHM",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 37,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n```\r\nThis comment can be removed since it's related to the AEAD cipher suite implementation and doesn't play a role here.",
    "created_at": "2021-11-05T04:44:41Z",
    "updated_at": "2021-11-05T06:38:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743387596",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743387596"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743387596"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743387596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 776,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743389384",
    "pull_request_review_id": 798495512,
    "id": 743389384,
    "node_id": "PRRC_kwDOABII584sTzjI",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 41,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This will need to be updated to be consistent with the BIP since [MAX_SIZE](https://github.com/bitcoin/bitcoin/blob/24abd8312ec1caa04f9b3bd92cd960e28ca91e17/src/serialize.h#L31) is 2^25 bytes.",
    "created_at": "2021-11-05T04:51:46Z",
    "updated_at": "2021-11-05T06:38:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743389384",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743389384"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743389384"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743389384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 780,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743399462",
    "pull_request_review_id": 798495512,
    "id": 743399462,
    "node_id": "PRRC_kwDOABII584sT2Am",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n+{\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+std::optional<CNetMessage> V2TransportDeserializer::GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 68,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This function can be modified to keep it's format consistent with the v1 GetMessage since [#22735](https://github.com/bitcoin/bitcoin/pull/22735) got merged.",
    "created_at": "2021-11-05T05:33:17Z",
    "updated_at": "2021-11-05T06:38:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743399462",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743399462"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743399462"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743399462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 807,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743399785",
    "pull_request_review_id": 798495512,
    "id": 743399785,
    "node_id": "PRRC_kwDOABII584sT2Fp",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n+{\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+std::optional<CNetMessage> V2TransportDeserializer::GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if decryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt((unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        valid_header = true;\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        } else {\n+            // try for short ID in case the first byte is a number larger than 12\n+            if (!GetMessageTypeFromShortID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                // results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    if (!valid_header) {\n+        LogPrint(BCLog::NET, \"PACKAGE FORMAT ERROR, peer=%d\\n\", m_node_id);\n+        Reset();\n+        return std::nullopt;\n+    } else if (!valid_checksum) {\n+        LogPrint(BCLog::NET, \"DECRYPTION INVALID MAC, peer=%d\\n\", m_node_id);\n+        Reset();\n+        return std::nullopt;\n+    }\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    std::optional<CNetMessage> msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg->m_command = command_name;\n+\n+    // if we could successfully decrypt the message, the message no longer contains the \"header\" (AAD & MAC)\n+    // if failed to decrypt \u2013 which we tolerate at this point \u2013 we need to reduce the message size by the length of the AAD & MAC\n+    // to conform to the abstract TransportDeserializer protocol\n+    msg->m_message_size = valid_checksum ? msg->m_recv.size() : (msg->m_recv.size() - CHACHA20_POLY1305_AEAD_AAD_LEN - CHACHA20_POLY1305_AEAD_TAG_LEN);\n+    msg->m_raw_message_size = CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n+\n+    // store receive time\n+    msg->m_time = time;\n+\n+    Reset();\n+    return msg;\n+}\n+\n+bool V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    std::optional<uint8_t> cmd_short_id = GetShortIDFromMessageType(msg.m_type);\n+    if (!cmd_short_id) {\n+        // message command without an assigned short-ID\n+        assert(msg.m_type.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.m_type, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 147,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "``` suggestion\r\n    // prepare the packet length that will later be encrypted and part of the MAC (AAD)\r\n```",
    "created_at": "2021-11-05T05:34:47Z",
    "updated_at": "2021-11-05T06:38:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743399785",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743399785"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743399785"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743399785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 886,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743400111",
    "pull_request_review_id": 798495512,
    "id": 743400111,
    "node_id": "PRRC_kwDOABII584sT2Kv",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n+{\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+std::optional<CNetMessage> V2TransportDeserializer::GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if decryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt((unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        valid_header = true;\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        } else {\n+            // try for short ID in case the first byte is a number larger than 12\n+            if (!GetMessageTypeFromShortID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                // results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    if (!valid_header) {\n+        LogPrint(BCLog::NET, \"PACKAGE FORMAT ERROR, peer=%d\\n\", m_node_id);\n+        Reset();\n+        return std::nullopt;\n+    } else if (!valid_checksum) {\n+        LogPrint(BCLog::NET, \"DECRYPTION INVALID MAC, peer=%d\\n\", m_node_id);\n+        Reset();\n+        return std::nullopt;\n+    }\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    std::optional<CNetMessage> msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg->m_command = command_name;\n+\n+    // if we could successfully decrypt the message, the message no longer contains the \"header\" (AAD & MAC)\n+    // if failed to decrypt \u2013 which we tolerate at this point \u2013 we need to reduce the message size by the length of the AAD & MAC\n+    // to conform to the abstract TransportDeserializer protocol\n+    msg->m_message_size = valid_checksum ? msg->m_recv.size() : (msg->m_recv.size() - CHACHA20_POLY1305_AEAD_AAD_LEN - CHACHA20_POLY1305_AEAD_TAG_LEN);\n+    msg->m_raw_message_size = CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n+\n+    // store receive time\n+    msg->m_time = time;\n+\n+    Reset();\n+    return msg;\n+}\n+\n+bool V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    std::optional<uint8_t> cmd_short_id = GetShortIDFromMessageType(msg.m_type);\n+    if (!cmd_short_id) {\n+        // message command without an assigned short-ID\n+        assert(msg.m_type.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.m_type, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AAD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id.value();\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.m_type;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 170,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "``` suggestion\r\n    //       the AAD, payload and MAC, we could avoid a insert and thus a potential reallocation\r\n```",
    "created_at": "2021-11-05T05:36:07Z",
    "updated_at": "2021-11-05T06:38:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743400111",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743400111"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743400111"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743400111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 909,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743402532",
    "pull_request_review_id": 798495512,
    "id": 743402532,
    "node_id": "PRRC_kwDOABII584sT2wk",
    "diff_hunk": "@@ -375,18 +377,86 @@ class V1TransportDeserializer final : public TransportDeserializer\n     std::optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size) override;\n };\n \n+/** V2TransportDeserializer is a transport deserializer after BIP324 */\n+class V2TransportDeserializer final : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    const NodeId m_node_id;      // Only for logging\n+    bool m_in_data = false;      // parsing header (false) or data (true)\n+    uint32_t m_message_size = 0; // expected message size\n+    CDataStream vRecv;           // received message data",
    "path": "src/net.h",
    "position": null,
    "original_position": 24,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "``` suggestion\r\n    CDataStream vRecv;           // received message header and data\r\n```",
    "created_at": "2021-11-05T05:46:17Z",
    "updated_at": "2021-11-05T06:38:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743402532",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743402532"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743402532"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743402532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 388,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743404596",
    "pull_request_review_id": 798495512,
    "id": 743404596,
    "node_id": "PRRC_kwDOABII584sT3Q0",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n+{\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+std::optional<CNetMessage> V2TransportDeserializer::GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if decryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt((unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        valid_header = true;\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        } else {\n+            // try for short ID in case the first byte is a number larger than 12\n+            if (!GetMessageTypeFromShortID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                // results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    if (!valid_header) {\n+        LogPrint(BCLog::NET, \"PACKAGE FORMAT ERROR, peer=%d\\n\", m_node_id);\n+        Reset();\n+        return std::nullopt;\n+    } else if (!valid_checksum) {\n+        LogPrint(BCLog::NET, \"DECRYPTION INVALID MAC, peer=%d\\n\", m_node_id);\n+        Reset();\n+        return std::nullopt;\n+    }\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    std::optional<CNetMessage> msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg->m_command = command_name;\n+\n+    // if we could successfully decrypt the message, the message no longer contains the \"header\" (AAD & MAC)\n+    // if failed to decrypt \u2013 which we tolerate at this point \u2013 we need to reduce the message size by the length of the AAD & MAC\n+    // to conform to the abstract TransportDeserializer protocol\n+    msg->m_message_size = valid_checksum ? msg->m_recv.size() : (msg->m_recv.size() - CHACHA20_POLY1305_AEAD_AAD_LEN - CHACHA20_POLY1305_AEAD_TAG_LEN);\n+    msg->m_raw_message_size = CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n+\n+    // store receive time\n+    msg->m_time = time;\n+\n+    Reset();\n+    return msg;\n+}\n+\n+bool V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    std::optional<uint8_t> cmd_short_id = GetShortIDFromMessageType(msg.m_type);\n+    if (!cmd_short_id) {\n+        // message command without an assigned short-ID\n+        assert(msg.m_type.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.m_type, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AAD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id.value();\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.m_type;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 169,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "``` suggestion\r\n    // TODO: if we refactor the ChaCha20Poly1305 crypt function to allow separate buffers for\r\n```",
    "created_at": "2021-11-05T05:54:07Z",
    "updated_at": "2021-11-05T06:38:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743404596",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743404596"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743404596"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743404596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 908,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743408559",
    "pull_request_review_id": 798495512,
    "id": 743408559,
    "node_id": "PRRC_kwDOABII584sT4Ov",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n+{\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+std::optional<CNetMessage> V2TransportDeserializer::GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 70,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    // In v2, vRecv contains the AAD, encrypted payload plus the MAC tag (3 byte AAD + 1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\r\n```",
    "created_at": "2021-11-05T06:08:56Z",
    "updated_at": "2021-11-05T06:38:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743408559",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743408559"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743408559"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743408559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 809,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743409108",
    "pull_request_review_id": 798495512,
    "id": 743409108,
    "node_id": "PRRC_kwDOABII584sT4XU",
    "diff_hunk": "@@ -704,4 +705,82 @@ BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)\n     BOOST_CHECK(!IsLocal(addr));\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs)\n+{\n+    // use 32 byte keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = std::make_unique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = std::make_unique<V2TransportDeserializer>(V2TransportDeserializer((NodeId)0, k1, k2));\n+    } else {\n+        serializer = std::make_unique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = std::make_unique<V1TransportDeserializer>(V1TransportDeserializer(Params(), (NodeId)0, SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i = 0; i < 100; i++) {\n+        for (const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.m_type = msg_orig.m_type;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            Span<const uint8_t> span_header(serialized_header.data(), serialized_header.size());\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read(span_header);\n+            //  second: read the encrypted payload (if required)\n+            Span<const uint8_t> span_msg(msg.data.data(), msg.data.size());\n+            if (msg.data.size() > 0) read_bytes += deserializer->Read(span_msg);\n+            if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) {",
    "path": "src/test/net_tests.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "1820cdfa18736ecaa6e053c50e667a17bcdd348c",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n            if (msg.data.size() > read_bytes) {\r\n```",
    "created_at": "2021-11-05T06:10:54Z",
    "updated_at": "2021-11-05T06:38:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743409108",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743409108"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743409108"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743409108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 745,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743411366",
    "pull_request_review_id": 798495512,
    "id": 743411366,
    "node_id": "PRRC_kwDOABII584sT46m",
    "diff_hunk": "@@ -704,4 +705,82 @@ BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)\n     BOOST_CHECK(!IsLocal(addr));\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs)\n+{\n+    // use 32 byte keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = std::make_unique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = std::make_unique<V2TransportDeserializer>(V2TransportDeserializer((NodeId)0, k1, k2));\n+    } else {\n+        serializer = std::make_unique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = std::make_unique<V1TransportDeserializer>(V1TransportDeserializer(Params(), (NodeId)0, SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i = 0; i < 100; i++) {\n+        for (const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.m_type = msg_orig.m_type;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            Span<const uint8_t> span_header(serialized_header.data(), serialized_header.size());\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read(span_header);\n+            //  second: read the encrypted payload (if required)\n+            Span<const uint8_t> span_msg(msg.data.data(), msg.data.size());\n+            if (msg.data.size() > 0) read_bytes += deserializer->Read(span_msg);\n+            if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) {\n+                Span<const uint8_t> span_msg(msg.data.data() + read_bytes, msg.data.size() - read_bytes);\n+                read_bytes += deserializer->Read(span_msg);\n+            }\n+            BOOST_CHECK(deserializer->Complete());\n+            BOOST_CHECK_EQUAL(read_bytes, msg.data.size() + serialized_header.size());\n+            // message must be complete\n+            uint32_t out_err_raw_size{0};\n+            std::optional<CNetMessage> result{deserializer->GetMessage(GetTime<std::chrono::microseconds>(), out_err_raw_size)};",
    "path": "src/test/net_tests.cpp",
    "position": null,
    "original_position": 57,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "1820cdfa18736ecaa6e053c50e667a17bcdd348c",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This can be updated to keep it consistent with [22735](https://github.com/bitcoin/bitcoin/pull/22735)'s change.\r\n```suggestion\r\n            bool reject_message{false};\r\n            CNetMessage result{deserializer->GetMessage(GetTime<std::chrono::microseconds>(), reject_message)};\r\n```",
    "created_at": "2021-11-05T06:18:50Z",
    "updated_at": "2021-11-05T06:38:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743411366",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743411366"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743411366"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743411366/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 752,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 753,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743412234",
    "pull_request_review_id": 798495512,
    "id": 743412234,
    "node_id": "PRRC_kwDOABII584sT5IK",
    "diff_hunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2019-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+#include <key.h>\n+#include <net.h>\n+#include <netmessagemaker.h>\n+#include <test/fuzz/fuzz.h>\n+\n+#include <cassert>\n+\n+FUZZ_TARGET(p2p_v2_transport_serialization)\n+{\n+    const CPrivKey k1(32, 0);\n+    const CPrivKey k2(32, 0);\n+\n+    // Construct deserializer, with a dummy NodeId\n+    V2TransportDeserializer deserializer{(NodeId)0, k1, k2};\n+    V2TransportSerializer serializer{k1, k2};\n+\n+    while (buffer.size() > 0) {\n+        const int handled = deserializer.Read(buffer);\n+        if (handled < 0) {\n+            break;\n+        }\n+        if (deserializer.Complete()) {\n+            const std::chrono::microseconds m_time{std::numeric_limits<int64_t>::max()};\n+            uint32_t out_err_raw_size{0};\n+            std::optional<CNetMessage> result{deserializer.GetMessage(m_time, out_err_raw_size)};",
    "path": "src/test/fuzz/p2p_v2_transport_serialization.cpp",
    "position": null,
    "original_position": 30,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "757d68c0f359b117e226c9c04ff6e4ec7b92a71a",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n            bool reject_message{false};\r\n            CNetMessage result{deserializer.GetMessage(m_time, reject_message)};\r\n```\r\nHere also.",
    "created_at": "2021-11-05T06:21:55Z",
    "updated_at": "2021-11-05T06:38:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743412234",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743412234"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r743412234"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743412234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 29,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 30,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745195684",
    "pull_request_review_id": 800736492,
    "id": 745195684,
    "node_id": "PRRC_kwDOABII584sasik",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 37,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good find. Removed.",
    "created_at": "2021-11-09T00:28:57Z",
    "updated_at": "2021-11-09T00:28:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745195684",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745195684"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745195684"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745195684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 776,
    "side": "RIGHT",
    "in_reply_to_id": 743387596
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745195888",
    "pull_request_review_id": 800736583,
    "id": 745195888,
    "node_id": "PRRC_kwDOABII584saslw",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 41,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for the catch. Fixed.",
    "created_at": "2021-11-09T00:29:08Z",
    "updated_at": "2021-11-09T00:29:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745195888",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745195888"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745195888"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745195888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 780,
    "side": "RIGHT",
    "in_reply_to_id": 743389384
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745196158",
    "pull_request_review_id": 800736675,
    "id": 745196158,
    "node_id": "PRRC_kwDOABII584sasp-",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n+{\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+std::optional<CNetMessage> V2TransportDeserializer::GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 68,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done. Rebased with master.",
    "created_at": "2021-11-09T00:29:23Z",
    "updated_at": "2021-11-09T00:29:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745196158",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745196158"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745196158"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745196158/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 807,
    "side": "RIGHT",
    "in_reply_to_id": 743399462
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745196283",
    "pull_request_review_id": 800736737,
    "id": 745196283,
    "node_id": "PRRC_kwDOABII584sasr7",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n+{\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+std::optional<CNetMessage> V2TransportDeserializer::GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if decryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt((unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        valid_header = true;\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        } else {\n+            // try for short ID in case the first byte is a number larger than 12\n+            if (!GetMessageTypeFromShortID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                // results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    if (!valid_header) {\n+        LogPrint(BCLog::NET, \"PACKAGE FORMAT ERROR, peer=%d\\n\", m_node_id);\n+        Reset();\n+        return std::nullopt;\n+    } else if (!valid_checksum) {\n+        LogPrint(BCLog::NET, \"DECRYPTION INVALID MAC, peer=%d\\n\", m_node_id);\n+        Reset();\n+        return std::nullopt;\n+    }\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    std::optional<CNetMessage> msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg->m_command = command_name;\n+\n+    // if we could successfully decrypt the message, the message no longer contains the \"header\" (AAD & MAC)\n+    // if failed to decrypt \u2013 which we tolerate at this point \u2013 we need to reduce the message size by the length of the AAD & MAC\n+    // to conform to the abstract TransportDeserializer protocol\n+    msg->m_message_size = valid_checksum ? msg->m_recv.size() : (msg->m_recv.size() - CHACHA20_POLY1305_AEAD_AAD_LEN - CHACHA20_POLY1305_AEAD_TAG_LEN);\n+    msg->m_raw_message_size = CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n+\n+    // store receive time\n+    msg->m_time = time;\n+\n+    Reset();\n+    return msg;\n+}\n+\n+bool V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    std::optional<uint8_t> cmd_short_id = GetShortIDFromMessageType(msg.m_type);\n+    if (!cmd_short_id) {\n+        // message command without an assigned short-ID\n+        assert(msg.m_type.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.m_type, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 147,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2021-11-09T00:29:30Z",
    "updated_at": "2021-11-09T00:29:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745196283",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745196283"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745196283"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745196283/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 886,
    "side": "RIGHT",
    "in_reply_to_id": 743399785
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745196411",
    "pull_request_review_id": 800736801,
    "id": 745196411,
    "node_id": "PRRC_kwDOABII584sast7",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n+{\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+std::optional<CNetMessage> V2TransportDeserializer::GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if decryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt((unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        valid_header = true;\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        } else {\n+            // try for short ID in case the first byte is a number larger than 12\n+            if (!GetMessageTypeFromShortID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                // results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    if (!valid_header) {\n+        LogPrint(BCLog::NET, \"PACKAGE FORMAT ERROR, peer=%d\\n\", m_node_id);\n+        Reset();\n+        return std::nullopt;\n+    } else if (!valid_checksum) {\n+        LogPrint(BCLog::NET, \"DECRYPTION INVALID MAC, peer=%d\\n\", m_node_id);\n+        Reset();\n+        return std::nullopt;\n+    }\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    std::optional<CNetMessage> msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg->m_command = command_name;\n+\n+    // if we could successfully decrypt the message, the message no longer contains the \"header\" (AAD & MAC)\n+    // if failed to decrypt \u2013 which we tolerate at this point \u2013 we need to reduce the message size by the length of the AAD & MAC\n+    // to conform to the abstract TransportDeserializer protocol\n+    msg->m_message_size = valid_checksum ? msg->m_recv.size() : (msg->m_recv.size() - CHACHA20_POLY1305_AEAD_AAD_LEN - CHACHA20_POLY1305_AEAD_TAG_LEN);\n+    msg->m_raw_message_size = CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n+\n+    // store receive time\n+    msg->m_time = time;\n+\n+    Reset();\n+    return msg;\n+}\n+\n+bool V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    std::optional<uint8_t> cmd_short_id = GetShortIDFromMessageType(msg.m_type);\n+    if (!cmd_short_id) {\n+        // message command without an assigned short-ID\n+        assert(msg.m_type.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.m_type, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AAD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id.value();\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.m_type;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 170,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2021-11-09T00:29:37Z",
    "updated_at": "2021-11-09T00:29:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745196411",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745196411"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745196411"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745196411/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 909,
    "side": "RIGHT",
    "in_reply_to_id": 743400111
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197474",
    "pull_request_review_id": 800737843,
    "id": 745197474,
    "node_id": "PRRC_kwDOABII584sas-i",
    "diff_hunk": "@@ -375,18 +377,86 @@ class V1TransportDeserializer final : public TransportDeserializer\n     std::optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size) override;\n };\n \n+/** V2TransportDeserializer is a transport deserializer after BIP324 */\n+class V2TransportDeserializer final : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    const NodeId m_node_id;      // Only for logging\n+    bool m_in_data = false;      // parsing header (false) or data (true)\n+    uint32_t m_message_size = 0; // expected message size\n+    CDataStream vRecv;           // received message data",
    "path": "src/net.h",
    "position": null,
    "original_position": 24,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Well, so, the term \"header\" doesn't really make sense without the context of which layer we are talking about. `net` covers both transport and p2p(application) layers to some degree. For the transport layer, perhaps the \"header\" is the encrypted length. For the application layer, the p2p message type is arguably part of the \"header\". I updated the comment to be clear in a different way though.",
    "created_at": "2021-11-09T00:31:56Z",
    "updated_at": "2021-11-09T00:31:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745197474",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197474"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745197474"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 388,
    "side": "RIGHT",
    "in_reply_to_id": 743402532
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197510",
    "pull_request_review_id": 800737884,
    "id": 745197510,
    "node_id": "PRRC_kwDOABII584sas_G",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n+{\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+std::optional<CNetMessage> V2TransportDeserializer::GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if decryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt((unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        valid_header = true;\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        } else {\n+            // try for short ID in case the first byte is a number larger than 12\n+            if (!GetMessageTypeFromShortID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                // results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    if (!valid_header) {\n+        LogPrint(BCLog::NET, \"PACKAGE FORMAT ERROR, peer=%d\\n\", m_node_id);\n+        Reset();\n+        return std::nullopt;\n+    } else if (!valid_checksum) {\n+        LogPrint(BCLog::NET, \"DECRYPTION INVALID MAC, peer=%d\\n\", m_node_id);\n+        Reset();\n+        return std::nullopt;\n+    }\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    std::optional<CNetMessage> msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg->m_command = command_name;\n+\n+    // if we could successfully decrypt the message, the message no longer contains the \"header\" (AAD & MAC)\n+    // if failed to decrypt \u2013 which we tolerate at this point \u2013 we need to reduce the message size by the length of the AAD & MAC\n+    // to conform to the abstract TransportDeserializer protocol\n+    msg->m_message_size = valid_checksum ? msg->m_recv.size() : (msg->m_recv.size() - CHACHA20_POLY1305_AEAD_AAD_LEN - CHACHA20_POLY1305_AEAD_TAG_LEN);\n+    msg->m_raw_message_size = CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n+\n+    // store receive time\n+    msg->m_time = time;\n+\n+    Reset();\n+    return msg;\n+}\n+\n+bool V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    std::optional<uint8_t> cmd_short_id = GetShortIDFromMessageType(msg.m_type);\n+    if (!cmd_short_id) {\n+        // message command without an assigned short-ID\n+        assert(msg.m_type.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.m_type, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AAD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id.value();\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.m_type;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 169,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2021-11-09T00:32:02Z",
    "updated_at": "2021-11-09T00:32:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745197510",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197510"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745197510"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197510/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 908,
    "side": "RIGHT",
    "in_reply_to_id": 743404596
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197555",
    "pull_request_review_id": 800737917,
    "id": 745197555,
    "node_id": "PRRC_kwDOABII584sas_z",
    "diff_hunk": "@@ -755,7 +758,170 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n+{\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+std::optional<CNetMessage> V2TransportDeserializer::GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 70,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "a53a06cc75a9f07e6211d5770ea8fcd0e7ecb2f7",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2021-11-09T00:32:08Z",
    "updated_at": "2021-11-09T00:32:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745197555",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197555"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745197555"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197555/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 809,
    "side": "RIGHT",
    "in_reply_to_id": 743408559
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197708",
    "pull_request_review_id": 800738074,
    "id": 745197708,
    "node_id": "PRRC_kwDOABII584satCM",
    "diff_hunk": "@@ -704,4 +705,82 @@ BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)\n     BOOST_CHECK(!IsLocal(addr));\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs)\n+{\n+    // use 32 byte keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = std::make_unique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = std::make_unique<V2TransportDeserializer>(V2TransportDeserializer((NodeId)0, k1, k2));\n+    } else {\n+        serializer = std::make_unique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = std::make_unique<V1TransportDeserializer>(V1TransportDeserializer(Params(), (NodeId)0, SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i = 0; i < 100; i++) {\n+        for (const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.m_type = msg_orig.m_type;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            Span<const uint8_t> span_header(serialized_header.data(), serialized_header.size());\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read(span_header);\n+            //  second: read the encrypted payload (if required)\n+            Span<const uint8_t> span_msg(msg.data.data(), msg.data.size());\n+            if (msg.data.size() > 0) read_bytes += deserializer->Read(span_msg);\n+            if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) {",
    "path": "src/test/net_tests.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "1820cdfa18736ecaa6e053c50e667a17bcdd348c",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, that was quite silly. Thanks for reviewing closely. Done.",
    "created_at": "2021-11-09T00:32:29Z",
    "updated_at": "2021-11-09T00:32:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745197708",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197708"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745197708"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 745,
    "side": "RIGHT",
    "in_reply_to_id": 743409108
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197760",
    "pull_request_review_id": 800738117,
    "id": 745197760,
    "node_id": "PRRC_kwDOABII584satDA",
    "diff_hunk": "@@ -704,4 +705,82 @@ BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)\n     BOOST_CHECK(!IsLocal(addr));\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs)\n+{\n+    // use 32 byte keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = std::make_unique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = std::make_unique<V2TransportDeserializer>(V2TransportDeserializer((NodeId)0, k1, k2));\n+    } else {\n+        serializer = std::make_unique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = std::make_unique<V1TransportDeserializer>(V1TransportDeserializer(Params(), (NodeId)0, SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i = 0; i < 100; i++) {\n+        for (const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.m_type = msg_orig.m_type;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            Span<const uint8_t> span_header(serialized_header.data(), serialized_header.size());\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read(span_header);\n+            //  second: read the encrypted payload (if required)\n+            Span<const uint8_t> span_msg(msg.data.data(), msg.data.size());\n+            if (msg.data.size() > 0) read_bytes += deserializer->Read(span_msg);\n+            if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) {\n+                Span<const uint8_t> span_msg(msg.data.data() + read_bytes, msg.data.size() - read_bytes);\n+                read_bytes += deserializer->Read(span_msg);\n+            }\n+            BOOST_CHECK(deserializer->Complete());\n+            BOOST_CHECK_EQUAL(read_bytes, msg.data.size() + serialized_header.size());\n+            // message must be complete\n+            uint32_t out_err_raw_size{0};\n+            std::optional<CNetMessage> result{deserializer->GetMessage(GetTime<std::chrono::microseconds>(), out_err_raw_size)};",
    "path": "src/test/net_tests.cpp",
    "position": null,
    "original_position": 57,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "1820cdfa18736ecaa6e053c50e667a17bcdd348c",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2021-11-09T00:32:36Z",
    "updated_at": "2021-11-09T00:32:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745197760",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197760"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745197760"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197760/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 752,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 753,
    "side": "RIGHT",
    "in_reply_to_id": 743411366
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197826",
    "pull_request_review_id": 800738173,
    "id": 745197826,
    "node_id": "PRRC_kwDOABII584satEC",
    "diff_hunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2019-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+#include <key.h>\n+#include <net.h>\n+#include <netmessagemaker.h>\n+#include <test/fuzz/fuzz.h>\n+\n+#include <cassert>\n+\n+FUZZ_TARGET(p2p_v2_transport_serialization)\n+{\n+    const CPrivKey k1(32, 0);\n+    const CPrivKey k2(32, 0);\n+\n+    // Construct deserializer, with a dummy NodeId\n+    V2TransportDeserializer deserializer{(NodeId)0, k1, k2};\n+    V2TransportSerializer serializer{k1, k2};\n+\n+    while (buffer.size() > 0) {\n+        const int handled = deserializer.Read(buffer);\n+        if (handled < 0) {\n+            break;\n+        }\n+        if (deserializer.Complete()) {\n+            const std::chrono::microseconds m_time{std::numeric_limits<int64_t>::max()};\n+            uint32_t out_err_raw_size{0};\n+            std::optional<CNetMessage> result{deserializer.GetMessage(m_time, out_err_raw_size)};",
    "path": "src/test/fuzz/p2p_v2_transport_serialization.cpp",
    "position": null,
    "original_position": 30,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "757d68c0f359b117e226c9c04ff6e4ec7b92a71a",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2021-11-09T00:32:44Z",
    "updated_at": "2021-11-09T00:32:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745197826",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197826"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r745197826"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745197826/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 29,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 743412234
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751429722",
    "pull_request_review_id": 808851626,
    "id": 751429722,
    "node_id": "PRRC_kwDOABII584syeha",
    "diff_hunk": "@@ -756,7 +761,174 @@ CNetMessage V1TransportDeserializer::GetMessage(const std::chrono::microseconds\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > V2_MAX_PAYLOAD_LENGTH) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n+{\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const std::chrono::microseconds time, bool& reject_message)\n+{\n+    // Initialize out parameter\n+    reject_message = false;\n+\n+    // In v2, vRecv contains the encrypted length (AAD), encrypted payload plus the MAC tag\n+    // (3 bytes AAD + 1-13 bytes serialized message command + ? bytes message payload + 16 byte MAC tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if decryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt((unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        valid_header = true;\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        } else {\n+            // try for short ID in case the first byte is a number larger than 12\n+            if (!GetMessageTypeFromShortID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                // results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    if (!valid_header) {\n+        LogPrint(BCLog::NET, \"PACKAGE FORMAT ERROR, peer=%d\\n\", m_node_id);\n+        Reset();\n+        reject_message = true;\n+    } else if (!valid_checksum) {\n+        LogPrint(BCLog::NET, \"DECRYPTION INVALID MAC, peer=%d\\n\", m_node_id);\n+        Reset();\n+        reject_message = true;",
    "path": "src/net.cpp",
    "position": 159,
    "original_position": 130,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "286c0b881f5354edd6e083a97c5c60ffe9c34693",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Note for myself: This should result in a dropped connection, not just a rejected message.",
    "created_at": "2021-11-17T16:45:03Z",
    "updated_at": "2021-11-17T16:45:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r751429722",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751429722"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r751429722"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751429722/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 864,
    "original_line": 864,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755584647",
    "pull_request_review_id": 814284286,
    "id": 755584647,
    "node_id": "PRRC_kwDOABII584tCU6H",
    "diff_hunk": "@@ -756,7 +761,174 @@ CNetMessage V1TransportDeserializer::GetMessage(const std::chrono::microseconds\n     return msg;\n }\n \n-void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    m_message_size = m_aead->DecryptLength((const uint8_t*)vRecv.data());\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > V2_MAX_PAYLOAD_LENGTH) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes)\n+{\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const std::chrono::microseconds time, bool& reject_message)\n+{\n+    // Initialize out parameter\n+    reject_message = false;\n+\n+    // In v2, vRecv contains the encrypted length (AAD), encrypted payload plus the MAC tag\n+    // (3 bytes AAD + 1-13 bytes serialized message command + ? bytes message payload + 16 byte MAC tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if decryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt((unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        valid_header = true;\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        } else {\n+            // try for short ID in case the first byte is a number larger than 12\n+            if (!GetMessageTypeFromShortID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                // results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    if (!valid_header) {\n+        LogPrint(BCLog::NET, \"PACKAGE FORMAT ERROR, peer=%d\\n\", m_node_id);\n+        Reset();\n+        reject_message = true;\n+    } else if (!valid_checksum) {\n+        LogPrint(BCLog::NET, \"DECRYPTION INVALID MAC, peer=%d\\n\", m_node_id);\n+        Reset();\n+        reject_message = true;",
    "path": "src/net.cpp",
    "position": 159,
    "original_position": 130,
    "commit_id": "0305c31cb447cd37272303dac0b01c911c4124a6",
    "original_commit_id": "286c0b881f5354edd6e083a97c5c60ffe9c34693",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2021-11-23T23:29:39Z",
    "updated_at": "2021-11-23T23:29:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r755584647",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755584647"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23233#discussion_r755584647"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23233"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755584647/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 864,
    "original_line": 864,
    "side": "RIGHT",
    "in_reply_to_id": 751429722
  }
]