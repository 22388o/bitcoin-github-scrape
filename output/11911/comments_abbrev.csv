sipa,2018-05-02T23:35:45Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11911#issuecomment-386153133,386153133,
promag,2018-07-08T22:01:34Z,@ryanofsky ping.,https://github.com/bitcoin/bitcoin/pull/11911#issuecomment-403320663,403320663,
DrahtBot,2018-07-22T23:50:56Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 65 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/11911#issuecomment-406906797,406906797,
PierreRochard,2018-09-15T13:43:31Z,One more thing: PR title and commit message should be updated to say BerkeleyEnvironment,https://github.com/bitcoin/bitcoin/pull/11911#issuecomment-421572625,421572625,
DrahtBot,2018-09-21T13:29:03Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/11911#issuecomment-423531114,423531114,
meshcollider,2018-11-15T03:56:32Z,"utACK https://github.com/bitcoin/bitcoin/pull/11911/commits/530efe9813fc1fc874c7b612cfd46cc00beb4bf3 modulo @promag's comments above, which need addressing ",https://github.com/bitcoin/bitcoin/pull/11911#issuecomment-438908661,438908661,
practicalswift,2018-11-28T07:00:27Z,@ryanofsky Can you try without `FUNCTIONAL_TESTS_CONFIG`? :-),https://github.com/bitcoin/bitcoin/pull/11911#issuecomment-442341065,442341065,
MarcoFalke,2019-01-15T16:55:30Z,@ryanofsky Are you still working on this?,https://github.com/bitcoin/bitcoin/pull/11911#issuecomment-454466517,454466517,
ryanofsky,2019-01-16T15:49:23Z,"> @ryanofsky Are you still working on this?\n\nYeah, I went back and implemented all the suggestions, but for some reason the assert in https://github.com/bitcoin/bitcoin/pull/11911#discussion_r185654925 is constantly triggering, so I need to debug.",https://github.com/bitcoin/bitcoin/pull/11911#issuecomment-454828484,454828484,
promag,2019-01-31T00:35:41Z,"Tested ACK 14bc2a17dd while implementing #15297. Also tested with\n```diff\n--- a/src/wallet/db.cpp\n+++ b/src/wallet/db.cpp\n@@ -97,8 +97,9 @@ std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, s\n     SplitWalletPath(wallet_path, env_directory, database_filename);\n     LOCK(cs_db);\n     auto inserted = g_dbenvs.emplace(env_directory.string(), std::weak_ptr<Be",https://github.com/bitcoin/bitcoin/pull/11911#issuecomment-459167833,459167833,
laanwj,2019-01-31T17:00:00Z,utACK 14bc2a17dd03ccd89f65a302328763ff22c710c2,https://github.com/bitcoin/bitcoin/pull/11911#issuecomment-459421928,459421928,
promag,2017-12-18T02:54:32Z,typedef `std::shared_ptr<CDBEnv>` something? CDBEnvRef for instance.,https://github.com/bitcoin/bitcoin/pull/11911#discussion_r157393226,157393226,src/wallet/db.h
ryanofsky,2017-12-18T16:31:15Z,"> typedef std::shared_ptr<CDBEnv> something? CDBEnvRef for instance\n\nI don't think this is a good idea. I'd be reluctant to introduce yet another wallet database type, especially one that obfuscates what it represents and how it relates to CDBEnv. Use of ref type aliases has been justified in other places on the basis that where types are widely used, having aliases makes it easier to switch i",https://github.com/bitcoin/bitcoin/pull/11911#discussion_r157533704,157533704,src/wallet/db.h
promag,2017-12-18T20:21:12Z,:+1:,https://github.com/bitcoin/bitcoin/pull/11911#discussion_r157590858,157590858,src/wallet/db.h
promag,2018-05-02T22:08:34Z,Missing `cs_db` lock?,https://github.com/bitcoin/bitcoin/pull/11911#discussion_r185653527,185653527,src/wallet/db.cpp
promag,2018-05-02T22:13:52Z,Could you change to `std::string const strPath;` in `BerkeleyEnvironment`?,https://github.com/bitcoin/bitcoin/pull/11911#discussion_r185654628,185654628,src/wallet/db.cpp
promag,2018-05-02T22:15:19Z,"Nit:\n```\nint count = g_dbenvs.erase(strPath);\nassert(count == 1);\n```",https://github.com/bitcoin/bitcoin/pull/11911#discussion_r185654925,185654925,src/wallet/db.cpp
sipa,2018-05-02T23:11:57Z,"I may be missing the logic here, but how is it guaranteed that the `shared_ptr` hasn't expired yet?",https://github.com/bitcoin/bitcoin/pull/11911#discussion_r185664719,185664719,src/wallet/db.cpp
promag,2018-05-02T23:17:31Z,"It's valid until `~BerkeleyEnvironment()` which means `shared_ptr` just expired, and in `~BerkeleyEnvironment()` the map is erased. In other words, when `shared_ptr` releases the instance the entry in `g_dbenvs` is removed.",https://github.com/bitcoin/bitcoin/pull/11911#discussion_r185665542,185665542,src/wallet/db.cpp
sipa,2018-05-02T23:29:38Z,"Ah, of course, makes sense.",https://github.com/bitcoin/bitcoin/pull/11911#discussion_r185667521,185667521,src/wallet/db.cpp
PierreRochard,2018-09-14T20:08:51Z,"Pre-dates this commit, but `env` variable name shadowing here threw me for a loop",https://github.com/bitcoin/bitcoin/pull/11911#discussion_r217828788,217828788,src/wallet/db.cpp
practicalswift,2018-10-15T07:58:55Z,Drop this redundant `else` and move the `return` the outer scope?,https://github.com/bitcoin/bitcoin/pull/11911#discussion_r225069024,225069024,src/wallet/db.cpp
promag,2018-10-24T10:02:04Z,"I think this condition should be replaced with:\n```\nauto env = inserted.first->second.lock();\nif (!env) {\n    // ...\n```\nwhich prevents returning null `std::shared_ptr<BerkeleyEnvironment>`.\n\nNote that `BerkeleyEnvironment` destructor could be called after the above `LOCK(cs_db)` which means it would returng an invalid env.",https://github.com/bitcoin/bitcoin/pull/11911#discussion_r227723624,227723624,src/wallet/db.cpp
practicalswift,2018-11-13T08:07:31Z,"This declaration hides the member `CWallet::database`. Is that intentional? If not, use another name? :-)",https://github.com/bitcoin/bitcoin/pull/11911#discussion_r232930179,232930179,src/wallet/wallet.cpp
