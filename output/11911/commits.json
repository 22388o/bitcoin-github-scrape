[
  {
    "sha": "f1f4bb7345b90853ec5037478173601035593d26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWY0YmI3MzQ1YjkwODUzZWM1MDM3NDc4MTczNjAxMDM1NTkzZDI2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-05-18T20:28:50Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-11-26T16:20:35Z"
      },
      "message": "Free BerkeleyEnvironment instances when not in use\n\nInstead of adding BerkeleyEnvironment objects permanently to the g_dbenvs map,\nuse reference counted shared pointers and remove map entries when the last\nBerkeleyEnvironment reference goes out of scope.\n\nThis change was requested by Matt Corallo <git@bluematt.me> and makes code that\nsets up mock databases cleaner. The mock database environment will now go out\nof scope and be reset on destruction so there is no need to call\nBerkeleyEnvironment::Reset() during wallet construction to clear out prior\nstate.\n\nThis change does affect bitcoin behavior slightly. On startup, instead of same\nwallet environments staying open throughout VerifyWallets() and OpenWallets()\ncalls, VerifyWallets() will open and close an environment once for each wallet,\nand OpenWallets() will create its own environment(s) later.",
      "tree": {
        "sha": "9cd781eb83f7bd2089bf590a31d11ee8d8eab7bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cd781eb83f7bd2089bf590a31d11ee8d8eab7bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1f4bb7345b90853ec5037478173601035593d26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1f4bb7345b90853ec5037478173601035593d26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1f4bb7345b90853ec5037478173601035593d26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1f4bb7345b90853ec5037478173601035593d26/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5c3d7affc9890f13dbd2d13967238f798d984a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5c3d7affc9890f13dbd2d13967238f798d984a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5c3d7affc9890f13dbd2d13967238f798d984a3"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 43,
      "deletions": 33
    },
    "files": [
      {
        "sha": "e75430dbecd1332404c56f2c7d761365a6c2e08b",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 18,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f4bb7345b90853ec5037478173601035593d26/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f4bb7345b90853ec5037478173601035593d26/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f1f4bb7345b90853ec5037478173601035593d26",
        "patch": "@@ -48,7 +48,7 @@ void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filena\n }\n \n CCriticalSection cs_db;\n-std::map<std::string, BerkeleyEnvironment> g_dbenvs GUARDED_BY(cs_db); //!< Map from directory name to open db environment.\n+std::map<std::string, std::weak_ptr<BerkeleyEnvironment>> g_dbenvs GUARDED_BY(cs_db); //!< Map from directory name to db environment.\n } // namespace\n \n bool WalletDatabaseFileId::operator==(const WalletDatabaseFileId& rhs) const\n@@ -80,19 +80,22 @@ bool IsWalletLoaded(const fs::path& wallet_path)\n     LOCK(cs_db);\n     auto env = g_dbenvs.find(env_directory.string());\n     if (env == g_dbenvs.end()) return false;\n-    return env->second.IsDatabaseLoaded(database_filename);\n+    auto database = env->second.lock();\n+    return database && database->IsDatabaseLoaded(database_filename);\n }\n \n-BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n+std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n {\n     fs::path env_directory;\n     SplitWalletPath(wallet_path, env_directory, database_filename);\n     LOCK(cs_db);\n-    // Note: An unused temporary BerkeleyEnvironment object may be created inside the\n-    // emplace function if the key already exists. This is a little inefficient,\n-    // but not a big concern since the map will be changed in the future to hold\n-    // pointers instead of objects, anyway.\n-    return &g_dbenvs.emplace(std::piecewise_construct, std::forward_as_tuple(env_directory.string()), std::forward_as_tuple(env_directory)).first->second;\n+    auto inserted = g_dbenvs.emplace(env_directory.string(), std::weak_ptr<BerkeleyEnvironment>());\n+    if (inserted.second) {\n+        auto env = std::make_shared<BerkeleyEnvironment>(env_directory.string());\n+        inserted.first->second = env;\n+        return env;\n+    }\n+    return inserted.first->second.lock();\n }\n \n //\n@@ -137,6 +140,7 @@ BerkeleyEnvironment::BerkeleyEnvironment(const fs::path& dir_path) : strPath(dir\n \n BerkeleyEnvironment::~BerkeleyEnvironment()\n {\n+    g_dbenvs.erase(strPath);\n     Close();\n }\n \n@@ -214,10 +218,9 @@ bool BerkeleyEnvironment::Open(bool retry)\n     return true;\n }\n \n-void BerkeleyEnvironment::MakeMock()\n+BerkeleyEnvironment::BerkeleyEnvironment()\n {\n-    if (fDbEnvInit)\n-        throw std::runtime_error(\"BerkeleyEnvironment::MakeMock: Already initialized\");\n+    Reset();\n \n     boost::this_thread::interruption_point();\n \n@@ -266,7 +269,7 @@ BerkeleyEnvironment::VerifyResult BerkeleyEnvironment::Verify(const std::string&\n bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n {\n     std::string filename;\n-    BerkeleyEnvironment* env = GetWalletEnv(file_path, filename);\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n \n     // Recovery procedure:\n     // move wallet file to walletfilename.timestamp.bak\n@@ -335,7 +338,7 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& errorStr)\n {\n     std::string walletFile;\n-    BerkeleyEnvironment* env = GetWalletEnv(file_path, walletFile);\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n     fs::path walletDir = env->Directory();\n \n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n@@ -359,7 +362,7 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& er\n bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n {\n     std::string walletFile;\n-    BerkeleyEnvironment* env = GetWalletEnv(file_path, walletFile);\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n     fs::path walletDir = env->Directory();\n \n     if (fs::exists(walletDir / walletFile))\n@@ -463,7 +466,7 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n {\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     fFlushOnClose = fFlushOnCloseIn;\n-    env = database.env;\n+    env = database.env.get();\n     if (database.IsDummy()) {\n         return;\n     }\n@@ -520,7 +523,7 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n             // versions of BDB have an set_lk_exclusive method for this\n             // purpose, but the older version we use does not.)\n             for (const auto& env : g_dbenvs) {\n-                CheckUniqueFileid(env.second, strFilename, *pdb_temp, this->env->m_fileids[strFilename]);\n+                CheckUniqueFileid(*env.second.lock().get(), strFilename, *pdb_temp, this->env->m_fileids[strFilename]);\n             }\n \n             pdb = pdb_temp.release();\n@@ -621,7 +624,7 @@ bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n     if (database.IsDummy()) {\n         return true;\n     }\n-    BerkeleyEnvironment *env = database.env;\n+    BerkeleyEnvironment *env = database.env.get();\n     const std::string& strFile = database.strFile;\n     while (true) {\n         {\n@@ -752,7 +755,7 @@ bool BerkeleyBatch::PeriodicFlush(BerkeleyDatabase& database)\n         return true;\n     }\n     bool ret = false;\n-    BerkeleyEnvironment *env = database.env;\n+    BerkeleyEnvironment *env = database.env.get();\n     const std::string& strFile = database.strFile;\n     TRY_LOCK(cs_db, lockDb);\n     if (lockDb)"
      },
      {
        "sha": "88de748c7a5713a233f01d322d8f336b2d1eb5f4",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 19,
        "deletions": 15,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f4bb7345b90853ec5037478173601035593d26/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f4bb7345b90853ec5037478173601035593d26/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=f1f4bb7345b90853ec5037478173601035593d26",
        "patch": "@@ -50,10 +50,10 @@ class BerkeleyEnvironment\n     std::condition_variable_any m_db_in_use;\n \n     BerkeleyEnvironment(const fs::path& env_directory);\n+    BerkeleyEnvironment();\n     ~BerkeleyEnvironment();\n     void Reset();\n \n-    void MakeMock();\n     bool IsMock() const { return fMockDb; }\n     bool IsInitialized() const { return fDbEnvInit; }\n     bool IsDatabaseLoaded(const std::string& db_filename) const { return m_databases.find(db_filename) != m_databases.end(); }\n@@ -102,7 +102,7 @@ class BerkeleyEnvironment\n bool IsWalletLoaded(const fs::path& wallet_path);\n \n /** Get BerkeleyEnvironment and database filename given a wallet path. */\n-BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename);\n+std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename);\n \n /** An instance of this class represents one database.\n  * For BerkeleyDB this is just a (env, strFile) tuple.\n@@ -117,17 +117,11 @@ class BerkeleyDatabase\n     }\n \n     /** Create DB handle to real database */\n-    BerkeleyDatabase(const fs::path& wallet_path, bool mock = false) :\n-        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0)\n+    BerkeleyDatabase(std::shared_ptr<BerkeleyEnvironment> env, std::string filename) :\n+        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(std::move(env)), strFile(std::move(filename))\n     {\n-        env = GetWalletEnv(wallet_path, strFile);\n-        auto inserted = env->m_databases.emplace(strFile, std::ref(*this));\n+        auto inserted = this->env->m_databases.emplace(strFile, std::ref(*this));\n         assert(inserted.second);\n-        if (mock) {\n-            env->Close();\n-            env->Reset();\n-            env->MakeMock();\n-        }\n     }\n \n     ~BerkeleyDatabase() {\n@@ -140,7 +134,8 @@ class BerkeleyDatabase\n     /** Return object for accessing database at specified path. */\n     static std::unique_ptr<BerkeleyDatabase> Create(const fs::path& path)\n     {\n-        return MakeUnique<BerkeleyDatabase>(path);\n+        std::string filename;\n+        return MakeUnique<BerkeleyDatabase>(GetWalletEnv(path, filename), std::move(filename));\n     }\n \n     /** Return object for accessing dummy database with no read/write capabilities. */\n@@ -152,7 +147,7 @@ class BerkeleyDatabase\n     /** Return object for accessing temporary in-memory database. */\n     static std::unique_ptr<BerkeleyDatabase> CreateMock()\n     {\n-        return MakeUnique<BerkeleyDatabase>(\"\", true /* mock */);\n+        return MakeUnique<BerkeleyDatabase>(std::make_shared<BerkeleyEnvironment>(), \"\");\n     }\n \n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n@@ -176,12 +171,21 @@ class BerkeleyDatabase\n     unsigned int nLastFlushed;\n     int64_t nLastWalletUpdate;\n \n+    /**\n+     * Pointer to shared database environment.\n+     *\n+     * Normally there is only one BerkeleyDatabase object per\n+     * BerkeleyEnvivonment, but in the special, backwards compatible case where\n+     * multiple wallet BDB data files are loaded from the same directory, this\n+     * will point to a shared instance that gets freed when the last data file\n+     * is closed.\n+     */\n+    std::shared_ptr<BerkeleyEnvironment> env;\n+\n     /** Database pointer. This is initialized lazily and reset during flushes, so it can be null. */\n     std::unique_ptr<Db> m_db;\n \n private:\n-    /** BerkeleyDB specific */\n-    BerkeleyEnvironment *env;\n     std::string strFile;\n \n     /** Return whether this database handle is a dummy for testing."
      },
      {
        "sha": "ea4145226fdcf0a388c9fd5433879b65850ba577",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f4bb7345b90853ec5037478173601035593d26/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f4bb7345b90853ec5037478173601035593d26/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f1f4bb7345b90853ec5037478173601035593d26",
        "patch": "@@ -3877,6 +3877,9 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n         return false;\n     }\n \n+    // Keep same database environment instance across Verify/Recover calls below.\n+    std::unique_ptr<WalletDatabase> database = WalletDatabase::Create(wallet_path);\n+\n     try {\n         if (!WalletBatch::VerifyEnvironment(wallet_path, error_string)) {\n             return false;"
      }
    ]
  },
  {
    "sha": "88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGIxZDk1NmZlM2UzOGYyZDJkZDgwNWZlZWU5ZGFkYjBiZTllOGE5",
    "commit": {
      "author": {
        "name": "Pierre Rochard",
        "email": "pierre@rochard.org",
        "date": "2018-09-15T01:10:20Z"
      },
      "committer": {
        "name": "Pierre Rochard",
        "email": "pierre@rochard.org",
        "date": "2018-11-26T16:20:35Z"
      },
      "message": "Tests: add unit tests for GetWalletEnv",
      "tree": {
        "sha": "9a8266fb59c3670afae8f45552df2ad356b520cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a8266fb59c3670afae8f45552df2ad356b520cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9/comments",
    "author": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1f4bb7345b90853ec5037478173601035593d26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1f4bb7345b90853ec5037478173601035593d26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1f4bb7345b90853ec5037478173601035593d26"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 73,
      "deletions": 0
    },
    "files": [
      {
        "sha": "084567b68c3b71501836129e727debf96b9dd6e0",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9",
        "patch": "@@ -108,6 +108,7 @@ endif\n \n if ENABLE_WALLET\n BITCOIN_TESTS += \\\n+  wallet/test/db_tests.cpp \\\n   wallet/test/psbt_wallet_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n   wallet/test/wallet_crypto_tests.cpp \\"
      },
      {
        "sha": "2a6474937933b9b873fed8a8abfe3554b0426f2e",
        "filename": "src/wallet/test/db_tests.cpp",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9/src/wallet/test/db_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9/src/wallet/test/db_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/db_tests.cpp?ref=88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9",
        "patch": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memory>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <fs.h>\n+#include <test/test_bitcoin.h>\n+#include <wallet/db.h>\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(db_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(getwalletenv_file)\n+{\n+    std::string test_name = \"test_name.dat\";\n+    fs::path datadir = SetDataDir(\"tempdir\");\n+    fs::path file_path = datadir / test_name;\n+    std::ofstream f(file_path.BOOST_FILESYSTEM_C_STR);\n+    f.close();\n+\n+    std::string filename;\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n+    BOOST_CHECK(filename == test_name);\n+    BOOST_CHECK(env->Directory() == datadir);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getwalletenv_directory)\n+{\n+    std::string expected_name = \"wallet.dat\";\n+    fs::path datadir = SetDataDir(\"tempdir\");\n+\n+    std::string filename;\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(datadir, filename);\n+    BOOST_CHECK(filename == expected_name);\n+    BOOST_CHECK(env->Directory() == datadir);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_multiple)\n+{\n+    fs::path datadir = SetDataDir(\"tempdir\");\n+    fs::path datadir_2 = SetDataDir(\"tempdir_2\");\n+    std::string filename;\n+\n+    std::shared_ptr<BerkeleyEnvironment> env_1 = GetWalletEnv(datadir, filename);\n+    std::shared_ptr<BerkeleyEnvironment> env_2 = GetWalletEnv(datadir, filename);\n+    std::shared_ptr<BerkeleyEnvironment> env_3 = GetWalletEnv(datadir_2, filename);\n+\n+    BOOST_CHECK(env_1 == env_2);\n+    BOOST_CHECK(env_2 != env_3);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n+{\n+    fs::path datadir = SetDataDir(\"tempdir\");\n+    fs::path datadir_2 = SetDataDir(\"tempdir_2\");\n+    std::string filename;\n+\n+    std::shared_ptr <BerkeleyEnvironment> env_1_a = GetWalletEnv(datadir, filename);\n+    std::shared_ptr <BerkeleyEnvironment> env_2_a = GetWalletEnv(datadir_2, filename);\n+    env_1_a.reset();\n+\n+    std::shared_ptr<BerkeleyEnvironment> env_1_b = GetWalletEnv(datadir, filename);\n+    std::shared_ptr<BerkeleyEnvironment> env_2_b = GetWalletEnv(datadir_2, filename);\n+\n+    BOOST_CHECK(env_1_a != env_1_b);\n+    BOOST_CHECK(env_2_a == env_2_b);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "14bc2a17dd03ccd89f65a302328763ff22c710c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGJjMmExN2RkMDNjY2Q4OWY2NWEzMDIzMjg3NjNmZjIyYzcxMGMy",
    "commit": {
      "author": {
        "name": "Pierre Rochard",
        "email": "pierre@rochard.org",
        "date": "2018-09-14T18:13:16Z"
      },
      "committer": {
        "name": "Pierre Rochard",
        "email": "pierre@rochard.org",
        "date": "2018-11-26T16:20:35Z"
      },
      "message": "Trivial: add doxygen-compatible comments relating to BerkeleyEnvironment",
      "tree": {
        "sha": "694050deb8f8a66aee81c3dc4b69ce6822f4c13c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/694050deb8f8a66aee81c3dc4b69ce6822f4c13c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14bc2a17dd03ccd89f65a302328763ff22c710c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14bc2a17dd03ccd89f65a302328763ff22c710c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14bc2a17dd03ccd89f65a302328763ff22c710c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14bc2a17dd03ccd89f65a302328763ff22c710c2/comments",
    "author": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88b1d956fe3e38f2d2dd805feee9dadb0be9e8a9"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f2e7b13df1a977914331fdb0d7eb4e3582a18f3d",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14bc2a17dd03ccd89f65a302328763ff22c710c2/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14bc2a17dd03ccd89f65a302328763ff22c710c2/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=14bc2a17dd03ccd89f65a302328763ff22c710c2",
        "patch": "@@ -84,6 +84,13 @@ bool IsWalletLoaded(const fs::path& wallet_path)\n     return database && database->IsDatabaseLoaded(database_filename);\n }\n \n+/**\n+ * @param[in] wallet_path Path to wallet directory. Or (for backwards compatibility only) a path to a berkeley btree data file inside a wallet directory.\n+ * @param[out] database_filename Filename of berkeley btree data file inside the wallet directory.\n+ * @return A shared pointer to the BerkeleyEnvironment object for the wallet directory, never empty because ~BerkeleyEnvironment\n+ * erases the weak pointer from the g_dbenvs map.\n+ * @post A new BerkeleyEnvironment weak pointer is inserted into g_dbenvs if the directory path key was not already in the map.\n+ */\n std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n {\n     fs::path env_directory;\n@@ -218,6 +225,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n     return true;\n }\n \n+//! Construct an in-memory mock Berkeley environment for testing and as a place-holder for g_dbenvs emplace\n BerkeleyEnvironment::BerkeleyEnvironment()\n {\n     Reset();"
      }
    ]
  }
]