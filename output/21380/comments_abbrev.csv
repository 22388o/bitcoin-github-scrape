ajtowns,2021-03-07 12:46:41,"~Because of the refactoring this will conflict heavily with other changes to versionbits. I've rebased #21377 on top of this and there's a height based variant at #21392.~ I think it should be possible to adapt to cover the rest of #19573, but haven't tried. It would require some refactoring of the bip8 code in order to be able to catch bugs in the MUST_SIGNAL handling, but maybe that's worthwhile",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-792273605,792273605,
DrahtBot,2021-03-07 17:25:58,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-792316498,792316498,
harding,2021-03-07 17:42:28,"> Particularly interested in additional checks that could be added\n\nMaybe some simple reorg testing, e.g. just invalidateblock around various thresholds to ensure we return to the previous state, then add a new block with a different timestamp to ensure we either advance or don't advance to the next state as is appropriate?",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-792321707,792321707,
practicalswift,2021-03-07 18:34:27,"Strong Concept ACK\n\nVery excited to see the versionbits implementation more thoroughly fuzzed :)\n\nThanks!",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-792330157,792330157,
ajtowns,2021-03-07 23:26:33,"> Maybe some simple reorg testing, e.g. just invalidateblock around various thresholds to ensure we return to the previous state, then add a new block with a different timestamp to ensure we either advance or don't advance to the next state as is appropriate?\n\nThat would make sense if versionbits knew about tips or cached blocks based on height, but it caches based on block hash and just relie",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-792373952,792373952,
achow101,2021-03-09 04:23:39,"Code Review ACK 9c08af24e77980673efa30b5101451c3c8b20b1b\n\nThe cleanups to versionbits handling are nice. Skimmed over the fuzzer part, but did run it. It did catch a possible corner case in #21392.",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-793365701,793365701,
Sjors,2021-03-09 12:21:33,"ACK 9c08af24e77980673efa30b5101451c3c8b20b1b\n\nI managed to run the fuzzer (on linux), but haven't studied it in much detail. We should probably improve it in followups, so the PR's that build on top of the refactoring commits here can continue without rebase headaches.",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-793807435,793807435,
MarcoFalke,2021-03-12 09:29:50,"I am not sure if it is good to hide validation code refactoring in a ""Add fuzzing harness"" pull",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-797361955,797361955,
ajtowns,2021-03-12 21:40:45,"> I am not sure if it is good to hide validation code refactoring in a ""Add fuzzing harness"" pull\n\nIt's not mean to be hidden; the commits aren't subtle, it's called out in the description, and the labels are all there... The reason it's a single PR is that (I don't think) the fuzzer works without the refactoring, and without the fuzzer, there's not a lot of other tests to ensure the refactori",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-797771240,797771240,
MarcoFalke,2021-03-13 07:44:20,"Maybe the title could be changed to ""Refactor versionbits to add fuzzing harness"" or so?",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-797884708,797884708,
jnewbery,2021-03-15 12:43:24,"Concept ACK.\n\nCan we remove `nRuleChangeActivationThreshold` from `Params` now that it's only used in the `WarningBitsConditionChecker`?",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-799388832,799388832,
DrahtBot,2021-03-15 16:49:05,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @sipa has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-799573869,799573869,
ajtowns,2021-03-16 03:31:25,"> Can we remove `nRuleChangeActivationThreshold` from `Params` now that it's only used in the `WarningBitsConditionChecker`?\n\nIt's still chain specific, so it could be moved from Consensus::Params to ChainParams (and renamed), but not removed entirely I think.",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-799917074,799917074,
ajtowns,2021-03-16 05:23:19,"> The reason it's a single PR is that (I don't think) the fuzzer works without the refactoring, [...]\n\nThis turns out not to be the case. I'm having a go at changing the approach to fuzzing approach, and if that works out will probably split the refactoring out of this PR.\n",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-799959690,799959690,
ajtowns,2021-03-16 11:31:21,"Rebased and updated to only add the fuzzing harness and not do any refactoring.\n\nThis also changes the approach used for fuzzing to only sanity check one period's worth of blocks, rather than every period -- relying instead on different fuzz inputs to check different periods. Seems to be no less thorough, and much faster for fuzzing. Also might be a bit easier to understand.",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-800181058,800181058,
ajtowns,2021-03-16 14:23:06,"Bunches of nits addressed.\n\n> This fuzz test is based on times, so I presume it will change again once activation is changed to be based on block heights?\n\nMy theory is having a fuzz test should make it easier to be confident a switch to heights isn't introducing new edge cases with bogus behaviour.",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-800302418,800302418,
amitiuttarwar,2021-03-16 20:25:09,concept ACK ,https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-800579714,800579714,
jnewbery,2021-03-17 10:04:51,Code review ACK cf81c6533fe26a64bb8c5a5baf5be21367f7eee5,https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-800956696,800956696,
ajtowns,2021-03-19 01:19:06,Changed to only calculate the start/end blocks if they're going to be used,https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-802438301,802438301,
sipa,2021-03-19 05:17:24,utACK 1639c3b76c3f2b74606f62ecd3ca725154e27f1b,https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-802564196,802564196,
jnewbery,2021-03-19 11:44:11,utACK 1639c3b76c,https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-802774729,802774729,
MarcoFalke,2021-03-19 11:56:00,@ajtowns Let me know if you want this merged or address the comments and wait for re-ACKs,https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-802781291,802781291,
ajtowns,2021-03-19 14:26:05,@MarcoFalke merge and followup sounds good to me,https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-802871811,802871811,
ajtowns,2021-03-21 01:31:52,"Followup in #21489 ; the ""use more than just two versions"" idea is still waiting for a consensus refactor so that it does something useful.",https://github.com/bitcoin/bitcoin/pull/21380#issuecomment-803496629,803496629,
jnewbery,2021-03-16 11:55:40,Would you consider adding a few line breaks to these function declarations?,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595099275,595099275,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 12:00:15,"```suggestion\n} // namespace\n\nFUZZ_TARGET(versionbits)\n```",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595102829,595102829,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 12:01:55,"```suggestion\n    constexpr int period{32};\n    constexpr int threshold{29};\n\n    static_assert(0 < threshold && threshold <= period - 2);  // must be able to not signal!\n```",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595103941,595103941,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-16 12:03:30,"style-nit: (add new line and clang-format to avoid excessive long lines)\n\n```suggestion\n    TestConditionChecker(int64_t begin, int64_t end, int period, int threshold, int bit)\n    : m_begin{begin}, m_end{end}, m_period{period}, m_threshold{threshold}, m_bit{bit}\n```",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595104935,595104935,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 12:03:43,Also consider s/period/PERIOD/ and s/threshold/THRESHOLD/,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595105060,595105060,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 12:06:11,"Any reason not to make `blocks` a `std::vector<std::unique_ptr<CBlockIndex>>`, and let the default destructor take care of this for you?",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595106496,595106496,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 12:06:23,"```suggestion\n    std::vector<CBlockIndex*> m_blocks;\n```",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595106608,595106608,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-16 12:06:24,"style-nit: Can be shorter\n\n```suggestion\nFUZZ_TARGET(versionbits)\n```\n",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595106617,595106617,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-16 12:08:46,"shouldn't this be a static assert? (With the constexpr symbols all uppercase)\n\nOr is the goal to have the fuzz engine pick the period length?",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595108166,595108166,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 12:10:39,"Maybe move this up next to the `n_blocks` declaration, make those constants `constexpr` and make this a static_assert.",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595109347,595109347,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-16 12:11:03,would it be possible to use params.genesis.nTime instead of the copied value?,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595109600,595109600,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-16 12:11:53,"Mind doing a clang-format, so that all files in `src/test/fuzz` are ""clean""?",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595110128,595110128,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-16 12:12:34,static_assert (with same comment from above),https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595110558,595110558,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-16 12:13:42,would it be possible to use params.consensus.nPowTargetSpacing instead of the hardcoded value?,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595111407,595111407,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-16 12:17:43,"Could replace with \n```suggestion\n    while (fuzzed_data_provider.ConsumeBool()) {\n```\n\nor mention that the provider is used up after this call and should not be accessed again?",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595114366,595114366,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 13:02:36,"```suggestion\n        if (blocks.size() > 2 * n_blocks) break;\n```",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595146970,595146970,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 13:03:09,s/n_blocks/max_blocks/,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595147323,595147323,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-16 13:04:19,"Wanted to leave it open for the threshold could be picked by the fuzzer at least. Changing the period makes the test take longer, so not sure how much sense it makes to fuzz that.",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595148151,595148151,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 13:08:28,Move this declaration down to where it's used first.,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595151368,595151368,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 13:19:55,Neither of these are used.,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595160435,595160435,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 13:21:12,Couldn't the subsequent `ConsumeBool()` fail if this is the last byte in the data provider?,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595161446,595161446,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-16 13:34:11,Seemed easier to do it this way than to have to manually extract the raw pointers everywhere,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595172488,595172488,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-16 13:35:46,I'm deliberately getting the mask beforehand so that adding bytes at the end of the fuzz data just adds blocks and doesn't change what gets interpreted as a mask and what gets interpreted as a bool,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595173844,595173844,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 14:02:17,"I think you'd only need to change the `tip()` and `mine_block()` member functions:\n\n```diff\ndiff --git a/src/test/fuzz/versionbits.cpp b/src/test/fuzz/versionbits.cpp\nindex ded18d8602..1613f65586 100644\n--- a/src/test/fuzz/versionbits.cpp\n+++ b/src/test/fuzz/versionbits.cpp\n@@ -13,6 +13,7 @@\n #include <test/fuzz/util.h>\n \n #include <cstdint>\n+#include <memory>\n #include <op",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595197898,595197898,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-16 14:19:27,Added the comment,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595213695,595213695,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-16 15:26:20,ah! Makes sense. Thanks.,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595279670,595279670,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-16 17:11:32,"FuzzedDataProvider itself doesn't fail if the last byte was consumed. It will simply return constant values. In the case of bool, `false`. So using `ConsumeBool()` would be identical to `remaining_bytes`, with the difference that the fuzz input is one more byte large (to encode the consumed bool) per iteration. Also, `ConsumeBool` would leave open the possibility to use the data provider afterward",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595376481,595376481,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-16 23:03:40,"Yeah, I think you're right -- was using `delete` prior to having made the `Blocks` class so there would have been more duplication then.",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595598929,595598929,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-17 01:46:48,Done,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595655261,595655261,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-17 09:26:00,Much better. I was going to have to look up what those funny `new` and `delete` keywords meant.,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595844551,595844551,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-17 09:57:42,"Ah, thanks Marco. I agree that this would be better as ConsumeBool (and then we could move the `signalling_mask` declaration down to where it's used).",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595868851,595868851,src/test/fuzz/versionbits.cpp
sipa,2021-03-19 00:25:49,Nit: you don't technically need `virtual` if you're already specifying `override`.,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597328399,597328399,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-19 00:36:16,"@JeremyRubin on #21377 wrote:\n\n> @MarcoFalke's comment is a slight misunderstanding I believe of how the fuzzer simulates time; I recall AJ saying (somewhere) that block times are steady interval in the fuzzing so that it doesn't matter (can't find that comment now tho). Is that correct?\n\nThe fuzzer picks the mtp parameters for the deployment by first picking a random block (`start_block` ",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597331653,597331653,src/test/fuzz/versionbits.cpp
sipa,2021-03-19 01:05:44,Nitnit: s/is fully consumed/may be fully consumed/,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597340647,597340647,src/test/fuzz/versionbits.cpp
sipa,2021-03-19 01:25:16,Any reason to not do that already (at least for the threshold)? It seems like an easy way of increasing potential edge cases.,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597346657,597346657,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-19 03:41:59,"Tried the `while (ConsumeBool()) { signal = ConsumeBool(); } mask = ConsumeIntegral();` alternative and it seems like the current approach gets more coverage more quickly (1896 cov 6382 ft after 20s and 1898 cov 7041 ft after ~3m; vs 1893 cov 6111 ft after 20s and 1895 cov 6960 ft after ~3m), so am leaving this as-is.",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597387047,597387047,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-19 05:06:18,"And most of the codebase doesn't specify virtual with override, so changed to do likewise",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597409540,597409540,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-19 05:06:41,Donedone(done...),https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597409638,597409638,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-19 05:07:06,"No, no reason not to. Doing it with the period slows things down unfortunately.",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597409759,597409759,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-19 08:09:15,"would be nice to not initialize const members, so that review is easier and the compiler can warn about missing initialization.\n```suggestion\n    const int m_bit;\n```",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597476634,597476634,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-19 08:09:40,"clang-format ;)\n\n```suggestion\n        if (blocks.size() + period * 2 > max_blocks) break;\n```",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597476866,597476866,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-19 08:41:48,"Would be nice to not use globals in tests, unless necessary.\n\n```diff\n-\n-void initialize()\n-{\n-    SelectParams(CBaseChainParams::MAIN);\n-}\n } // namespace\n \n constexpr uint32_t MAX_TIME = 4102444800; // 2100-01-01\n \n-FUZZ_TARGET_INIT(versionbits, initialize)\n+FUZZ_TARGET(versionbits)\n {\n-    const CChainParams& params = Params();\n+    const auto chainparams = Creat",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597495025,597495025,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-19 08:43:38,nit: Namespace can cover the whole file,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597496093,597496093,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-19 09:00:51,This is a slightly confusing constant name. `MAX_START_TIME` would be more precise. It could also be in the unnamed namespace.,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597507214,597507214,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-19 09:09:05,"I am trying to reproduce with `FUZZ=versionbits ./src/test/fuzz/fuzz -use_value_profile=1 -entropic=1 -max_total_time=10`.\nLooks like I am exhausting line coverage after 10 seconds with `ConsumeBool()`:\n\n```\n#68347	DONE   cov: 653 ft: 3266 corp: 557/16057b lim: 122 exec/s: 6213 rss: 46Mb\n```\n\n\nWhereas remaining_bytes gives lower line coverage after 10 seconds:\n\n```\n#58568	DON",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597512660,597512660,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-19 09:18:54,"I don't understand the factor of 2 here (or lower down in `if (blocks.size() + period*2 > max_blocks)`. What is it needed for?\n",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597518755,597518755,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-19 09:47:51,"style-nit: Can be const. Also any downside to assert the genesis block is always DEFINED (unless the non-BIP9 compliant special cases never active/always active)\n\n```diff\n-    int prev_next_height = (prev == nullptr ? 0 : prev->nHeight + 1);\n+    const int prev_next_height = (prev == nullptr ? 0 : prev->nHeight + 1);\n     assert(exp_since <= prev_next_height);\n \n+    if (prev == null",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597537592,597537592,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-19 10:12:12,"`max_blocks` is the max number of blocks ""mined""; there shouldn't be any point mining more than `period*max_period` worth -- things should just be stuck in ACTIVE/FAILED from that point on, but this lets some extra amount be checked just in case.\n\nIf `blocks.size() + period*2 > max_blocks` then an additional round of the loop and then the final period combined would end up mining more than `ma",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597553324,597553324,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-19 10:15:07,"`never_active_test` also starts in DEFINED with bip9 (though it wouldn't wth bip8)\n\nIf `prev == nullptr` then `prev_net_height == 0` and therefore `exp_since <= 0` (from the above code) and at the end there's `assert(exp_since > 0 || exp_state == ThresholdState::DEFINED)` so this case should be already covered.",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597555132,597555132,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-19 10:18:45,"Ah, thanks.",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597557529,597557529,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-19 10:22:20,"Any reason to only allow two different nVersion per test input? On the real network there is more noise. The following diff compiled for me, but feel free to ignore:\n\n```diff\ndiff --git a/src/test/fuzz/versionbits.cpp b/src/test/fuzz/versionbits.cpp\nindex a898e2782d..1724bde3dc 100644\n--- a/src/test/fuzz/versionbits.cpp\n+++ b/src/test/fuzz/versionbits.cpp\n@@ -64,11 +64,11 @@ private:",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597559803,597559803,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-19 10:31:41,nit: Could `assert(ver_signal > VERSIONBITS_LAST_OLD_BLOCK_VERSION);`?,https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597565791,597565791,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-19 11:16:07,"Oh, I like that!\n\nI don't think it's much benefit for now though -- without some refactoring, I think it's only checking how the `Condition()` function defined in the fuzzer behaves, not the one that's actually used for consensus.",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597598744,597598744,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-19 11:42:11,"Yeah, good point. The first thing I did when reviewing was to change the Condition function to something else. And the test still passed, turns out this is expected. Can be revisited later.",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597612911,597612911,src/test/fuzz/versionbits.cpp
jnewbery,2021-03-19 11:43:50,"Ah, got it. So `max_periods` is the max number of periods in the versionbits parameters and `max_blocks` is the max number of blocks in the test.",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597613758,597613758,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-19 14:25:39,"Well, you're getting about 150x the exec/s I am, so getting thorough coverage in 10s when it takes me 2m makes sense. I don't follow why your ""cov"" figures are 650 rather than the 1900 or so I get though?",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597720395,597720395,src/test/fuzz/versionbits.cpp
MarcoFalke,2021-03-19 17:43:19,"""cov"" and ""ft"" depend on the instrumentation (version of libFuzzer, sanitizers, run time flags, ...), they are not considered a ""stable interface"".\n\nEven if it took 2 minutes to saturate line coverage, I'd still consider it more than acceptable. We have many targets that are ground with hundreds of CPU hours and still aren't close to being saturated in line coverage.",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597866398,597866398,src/test/fuzz/versionbits.cpp
amitiuttarwar,2021-03-19 20:13:56,"I'm curious why you decided to right shift the version message instead of matching how `VersionBitsConditionChecker` left shifts the bit to compare to the block's version. \n\nAlso why the `version` param here is an `int64_t` when `CBlockHeader.nVersion` is `int32_t`. \n\nI don't think (?) any of these cause problems, but I think we want the test checker to match the version bits checker as cl",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r597949585,597949585,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-21 00:51:19,"~I don't think there's any good reason for either of those changes.~ Err, by that I mean: yes, there's no good reason for it to be the way it is rather than the way you suggest.\n",https://github.com/bitcoin/bitcoin/pull/21380#discussion_r598201322,598201322,src/test/fuzz/versionbits.cpp
