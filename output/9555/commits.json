[
  {
    "sha": "8455e367fe79ff53ea81d283f3435e74b1633c88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDU1ZTM2N2ZlNzlmZjUzZWE4MWQyODNmMzQzNWU3NGIxNjMzYzg4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-14T19:40:35Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-21T09:57:00Z"
      },
      "message": "[test] Avoid reading a potentially uninitialized variable in tx_invalid-test\n\nPrior to this commit the err variable was not guaranteed to be set before\nthe check ...\n\n    BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));",
      "tree": {
        "sha": "52ddf8ed1beeb7d53a6307acf42adb2f7ba0988f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52ddf8ed1beeb7d53a6307acf42adb2f7ba0988f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8455e367fe79ff53ea81d283f3435e74b1633c88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8455e367fe79ff53ea81d283f3435e74b1633c88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8455e367fe79ff53ea81d283f3435e74b1633c88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8455e367fe79ff53ea81d283f3435e74b1633c88/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "18decf72a0f2283fe6582b7a571a759af3be2b11",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8455e367fe79ff53ea81d283f3435e74b1633c88/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8455e367fe79ff53ea81d283f3435e74b1633c88/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=8455e367fe79ff53ea81d283f3435e74b1633c88",
        "patch": "@@ -189,7 +189,9 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n     UniValue tests = read_json(std::string(json_tests::tx_invalid, json_tests::tx_invalid + sizeof(json_tests::tx_invalid)));\n \n-    ScriptError err;\n+    // Initialize to SCRIPT_ERR_OK. The tests expect err to be changed to a\n+    // value other than SCRIPT_ERR_OK.\n+    ScriptError err = SCRIPT_ERR_OK;\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         std::string strTest = test.write();"
      }
    ]
  }
]