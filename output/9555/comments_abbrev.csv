MarcoFalke,2017-01-14T23:18:55Z,"It is set one line before use, no?\n\nOn Sat, Jan 14, 2017 at 8:45 PM, practicalswift <notifications@github.com>\nwrote:\n\n> Prior to this commit the err variable was not guaranteed to set prior to\n> the check ...\n>\n> BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));\n>\n> ... triggering UB.\n> ------------------------------\n> You can view, comment on, or merge this pull requ",https://github.com/bitcoin/bitcoin/pull/9555#issuecomment-272660752,272660752,
practicalswift,2017-01-14T23:48:27Z,"@MarcoFalke Not in the cases ...\n\n* `tx.vin.size() == 0`, or\n* `!(CheckTransaction(tx, state) && state.IsValid())`\n\n... right? :-)",https://github.com/bitcoin/bitcoin/pull/9555#issuecomment-272662288,272662288,
practicalswift,2017-01-15T21:33:54Z,@MarcoFalke After re-reading your comment I think that you might be referring to `err` in the context of [lines 172-175](https://github.com/practicalswift/bitcoin/blob/dbb285a9dcc6fcd71097831a0ddb70fc2d826082/src/test/transaction_tests.cpp#L172-L175) whereas my PR is referring to `err` on [lines 242-260](https://github.com/practicalswift/bitcoin/blob/dbb285a9dcc6fcd71097831a0ddb70fc2d826082/src/te,https://github.com/bitcoin/bitcoin/pull/9555#issuecomment-272725531,272725531,
luke-jr,2017-01-20T23:03:06Z,"It may be better to leave this be, so memory sanitizers and static analysis can detect cases where we fail to set it?",https://github.com/bitcoin/bitcoin/pull/9555#issuecomment-274203206,274203206,
practicalswift,2017-01-21T09:50:46Z,@luke-jr Good point about catching cases where we fail to set it. My suggestion is that we initialize to `SCRIPT_ERR_OK`. That will make sure that failures to set `err` are always detected since the test asserts that `err != SCRIPT_ERR_OK`. See updated version. Looks OK? :-),https://github.com/bitcoin/bitcoin/pull/9555#issuecomment-274251511,274251511,
MarcoFalke,2017-01-22T17:43:45Z,"Indeed, I was reading the wrong lines of the file.\n\nutACK 8455e367fe79ff53ea81d283f3435e74b1633c88\n",https://github.com/bitcoin/bitcoin/pull/9555#issuecomment-274345968,274345968,
luke-jr,2017-02-02T20:46:25Z,"That will still suppress compiler and analyser warnings of using unassigned values. Is there a way we can initialise it, yet tell the compiler/etc to treat the value as uninitialised still?",https://github.com/bitcoin/bitcoin/pull/9555#issuecomment-277078237,277078237,
practicalswift,2017-02-02T22:21:43Z,"@luke-jr I don't know if that is possible and/or how to do it, but if possible I'll add such an annotation :-)  Let me know if you find any info on how to achieve that",https://github.com/bitcoin/bitcoin/pull/9555#issuecomment-277103530,277103530,
MarcoFalke,2017-03-06T09:54:34Z,"As long as the tests fail when the variable is not assigned the correct value in the code, all is fine.",https://github.com/bitcoin/bitcoin/pull/9555#issuecomment-284350807,284350807,
practicalswift,2017-03-06T09:56:46Z,"@MarcoFalke Yes, that should be the case now :-)\n",https://github.com/bitcoin/bitcoin/pull/9555#issuecomment-284351291,284351291,
