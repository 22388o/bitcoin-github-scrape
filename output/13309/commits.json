[
  {
    "sha": "6b8b63af1461dc11ffd813401e2c36fa44656715",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjhiNjNhZjE0NjFkYzExZmZkODEzNDAxZTJjMzZmYTQ0NjU2NzE1",
    "commit": {
      "author": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2018-05-20T20:47:14Z"
      },
      "committer": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2018-05-30T14:01:36Z"
      },
      "message": "Generic TransactionSignatureCreator works with both CTransaction and CMutableTransaction\n\nTemplated version so that no copying of CMutableTransaction into a CTransaction is\nnecessary. This speeds up the test case transaction_tests/test_big_witness_transaction\nfrom 7.9 seconds to 3.1 seconds on my machine.",
      "tree": {
        "sha": "7a18974032bb6d1a67fbe78b0a7863f72603aa65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a18974032bb6d1a67fbe78b0a7863f72603aa65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b8b63af1461dc11ffd813401e2c36fa44656715",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8b63af1461dc11ffd813401e2c36fa44656715",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b8b63af1461dc11ffd813401e2c36fa44656715",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8b63af1461dc11ffd813401e2c36fa44656715/comments",
    "author": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d792e47421fcb9ce3b381c1e6d8902777ae3f9f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d792e47421fcb9ce3b381c1e6d8902777ae3f9f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d792e47421fcb9ce3b381c1e6d8902777ae3f9f3"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 55,
      "deletions": 46
    },
    "files": [
      {
        "sha": "4b982d647d8aab9b378fda985e190661cc033369",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 13,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8b63af1461dc11ffd813401e2c36fa44656715/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8b63af1461dc11ffd813401e2c36fa44656715/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=6b8b63af1461dc11ffd813401e2c36fa44656715",
        "patch": "@@ -1089,17 +1089,19 @@ namespace {\n  * Wrapper that serializes like CTransaction, but with the modifications\n  *  required for the signature hash done in-place\n  */\n-class CTransactionSignatureSerializer {\n+template <class T>\n+class CTransactionSignatureSerializer\n+{\n private:\n-    const CTransaction& txTo;  //!< reference to the spending transaction (the one being serialized)\n+    const T& txTo;             //!< reference to the spending transaction (the one being serialized)\n     const CScript& scriptCode; //!< output script being consumed\n     const unsigned int nIn;    //!< input index of txTo being signed\n     const bool fAnyoneCanPay;  //!< whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n     const bool fHashSingle;    //!< whether the hashtype is SIGHASH_SINGLE\n     const bool fHashNone;      //!< whether the hashtype is SIGHASH_NONE\n \n public:\n-    CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n+    CTransactionSignatureSerializer(const T& txToIn, const CScript& scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n         txTo(txToIn), scriptCode(scriptCodeIn), nIn(nInIn),\n         fAnyoneCanPay(!!(nHashTypeIn & SIGHASH_ANYONECANPAY)),\n         fHashSingle((nHashTypeIn & 0x1f) == SIGHASH_SINGLE),\n@@ -1180,23 +1182,29 @@ class CTransactionSignatureSerializer {\n     }\n };\n \n-uint256 GetPrevoutHash(const CTransaction& txTo) {\n+template <class T>\n+uint256 GetPrevoutHash(const T& txTo)\n+{\n     CHashWriter ss(SER_GETHASH, 0);\n     for (const auto& txin : txTo.vin) {\n         ss << txin.prevout;\n     }\n     return ss.GetHash();\n }\n \n-uint256 GetSequenceHash(const CTransaction& txTo) {\n+template <class T>\n+uint256 GetSequenceHash(const T& txTo)\n+{\n     CHashWriter ss(SER_GETHASH, 0);\n     for (const auto& txin : txTo.vin) {\n         ss << txin.nSequence;\n     }\n     return ss.GetHash();\n }\n \n-uint256 GetOutputsHash(const CTransaction& txTo) {\n+template <class T>\n+uint256 GetOutputsHash(const T& txTo)\n+{\n     CHashWriter ss(SER_GETHASH, 0);\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n@@ -1206,7 +1214,8 @@ uint256 GetOutputsHash(const CTransaction& txTo) {\n \n } // namespace\n \n-PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo)\n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n {\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n@@ -1217,7 +1226,12 @@ PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo)\n     }\n }\n \n-uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)\n+// explicit instantiation\n+template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n+template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n+\n+template <class T>\n+uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)\n {\n     assert(nIn < txTo.vin.size());\n \n@@ -1278,20 +1292,22 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     }\n \n     // Wrapper to serialize only the necessary parts of the transaction being signed\n-    CTransactionSignatureSerializer txTmp(txTo, scriptCode, nIn, nHashType);\n+    CTransactionSignatureSerializer<T> txTmp(txTo, scriptCode, nIn, nHashType);\n \n     // Serialize and hash\n     CHashWriter ss(SER_GETHASH, 0);\n     ss << txTmp << nHashType;\n     return ss.GetHash();\n }\n \n-bool TransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     return pubkey.Verify(sighash, vchSig);\n }\n \n-bool TransactionSignatureChecker::CheckSig(const std::vector<unsigned char>& vchSigIn, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckSig(const std::vector<unsigned char>& vchSigIn, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n {\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n@@ -1312,7 +1328,8 @@ bool TransactionSignatureChecker::CheckSig(const std::vector<unsigned char>& vch\n     return true;\n }\n \n-bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckLockTime(const CScriptNum& nLockTime) const\n {\n     // There are two kinds of nLockTime: lock-by-blockheight\n     // and lock-by-blocktime, distinguished by whether\n@@ -1348,7 +1365,8 @@ bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) con\n     return true;\n }\n \n-bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) const\n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSequence) const\n {\n     // Relative lock times are supported by comparing the passed\n     // in operand to the sequence number of the input.\n@@ -1394,6 +1412,10 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n     return true;\n }\n \n+// explicit instantiation\n+template class GenericTransactionSignatureChecker<CTransaction>;\n+template class GenericTransactionSignatureChecker<CMutableTransaction>;\n+\n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     std::vector<std::vector<unsigned char> > stack;"
      },
      {
        "sha": "2d21aa81df4c0135d6d848938819ab3cb529d633",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 11,
        "deletions": 14,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8b63af1461dc11ffd813401e2c36fa44656715/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8b63af1461dc11ffd813401e2c36fa44656715/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=6b8b63af1461dc11ffd813401e2c36fa44656715",
        "patch": "@@ -124,7 +124,8 @@ struct PrecomputedTransactionData\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n \n-    explicit PrecomputedTransactionData(const CTransaction& tx);\n+    template <class T>\n+    explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n@@ -137,7 +138,8 @@ enum class SigVersion\n static constexpr size_t WITNESS_V0_SCRIPTHASH_SIZE = 32;\n static constexpr size_t WITNESS_V0_KEYHASH_SIZE = 20;\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache = nullptr);\n+template <class T>\n+uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache = nullptr);\n \n class BaseSignatureChecker\n {\n@@ -160,10 +162,11 @@ class BaseSignatureChecker\n     virtual ~BaseSignatureChecker() {}\n };\n \n-class TransactionSignatureChecker : public BaseSignatureChecker\n+template <class T>\n+class GenericTransactionSignatureChecker : public BaseSignatureChecker\n {\n private:\n-    const CTransaction* txTo;\n+    const T* txTo;\n     unsigned int nIn;\n     const CAmount amount;\n     const PrecomputedTransactionData* txdata;\n@@ -172,21 +175,15 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(nullptr) {}\n-    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}\n+    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(nullptr) {}\n+    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n     bool CheckLockTime(const CScriptNum& nLockTime) const override;\n     bool CheckSequence(const CScriptNum& nSequence) const override;\n };\n \n-class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n-{\n-private:\n-    const CTransaction txTo;\n-\n-public:\n-    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : TransactionSignatureChecker(&txTo, nInIn, amountIn), txTo(*txToIn) {}\n-};\n+using TransactionSignatureChecker = GenericTransactionSignatureChecker<CTransaction>;\n+using MutableTransactionSignatureChecker = GenericTransactionSignatureChecker<CMutableTransaction>;\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = nullptr);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = nullptr);"
      },
      {
        "sha": "c5468f633b5af9b49d1ec9580602213c24be217d",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8b63af1461dc11ffd813401e2c36fa44656715/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8b63af1461dc11ffd813401e2c36fa44656715/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=6b8b63af1461dc11ffd813401e2c36fa44656715",
        "patch": "@@ -14,9 +14,9 @@\n \n typedef std::vector<unsigned char> valtype;\n \n-TransactionSignatureCreator::TransactionSignatureCreator(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n+MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n \n-bool TransactionSignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const\n+bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const\n {\n     CKey key;\n     if (!provider.GetKey(address, key))\n@@ -209,8 +209,7 @@ bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, C\n {\n     assert(nIn < txTo.vin.size());\n \n-    CTransaction txToConst(txTo);\n-    TransactionSignatureCreator creator(&txToConst, nIn, amount, nHashType);\n+    MutableTransactionSignatureCreator creator(&txTo, nIn, amount, nHashType);\n \n     SignatureData sigdata;\n     bool ret = ProduceSignature(provider, creator, fromPubKey, sigdata);"
      },
      {
        "sha": "a10366dcd1eadfcb0ac33d2d39f276ff785c4fbf",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 4,
        "deletions": 11,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8b63af1461dc11ffd813401e2c36fa44656715/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8b63af1461dc11ffd813401e2c36fa44656715/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=6b8b63af1461dc11ffd813401e2c36fa44656715",
        "patch": "@@ -37,26 +37,19 @@ class BaseSignatureCreator {\n };\n \n /** A signature creator for transactions. */\n-class TransactionSignatureCreator : public BaseSignatureCreator {\n-    const CTransaction* txTo;\n+class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n+    const CMutableTransaction* txTo;\n     unsigned int nIn;\n     int nHashType;\n     CAmount amount;\n-    const TransactionSignatureChecker checker;\n+    const MutableTransactionSignatureChecker checker;\n \n public:\n-    TransactionSignatureCreator(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n+    MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn = SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const override { return checker; }\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };\n \n-class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n-    CTransaction tx;\n-\n-public:\n-    MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : TransactionSignatureCreator(&tx, nInIn, amountIn, nHashTypeIn), tx(*txToIn) {}\n-};\n-\n /** A signature creator that just produces 72-byte empty signatures. */\n extern const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR;\n "
      },
      {
        "sha": "c2b1915b111be31e8570158b371624466dbcce76",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8b63af1461dc11ffd813401e2c36fa44656715/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8b63af1461dc11ffd813401e2c36fa44656715/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6b8b63af1461dc11ffd813401e2c36fa44656715",
        "patch": "@@ -2608,7 +2608,6 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n     AssertLockHeld(cs_wallet); // mapWallet\n \n     // sign the new tx\n-    CTransaction txNewConst(tx);\n     int nIn = 0;\n     for (const auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n@@ -2618,7 +2617,7 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n         const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n         const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n         SignatureData sigdata;\n-        if (!ProduceSignature(*this, TransactionSignatureCreator(&txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n+        if (!ProduceSignature(*this, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n             return false;\n         }\n         UpdateTransaction(tx, nIn, sigdata);\n@@ -3040,14 +3039,13 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n \n         if (sign)\n         {\n-            CTransaction txNewConst(txNew);\n             int nIn = 0;\n             for (const auto& coin : selected_coins)\n             {\n                 const CScript& scriptPubKey = coin.txout.scriptPubKey;\n                 SignatureData sigdata;\n \n-                if (!ProduceSignature(*this, TransactionSignatureCreator(&txNewConst, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n+                if (!ProduceSignature(*this, MutableTransactionSignatureCreator(&txNew, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n                 {\n                     strFailReason = _(\"Signing transaction failed\");\n                     return false;"
      }
    ]
  }
]