[
  {
    "sha": "36d326e8b0866df4e70f81c2aa0a2e19d544399c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmQzMjZlOGIwODY2ZGY0ZTcwZjgxYzJhYTBhMmUxOWQ1NDQzOTlj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-21T19:10:00Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-16T08:24:18Z"
      },
      "message": "Use nullptr instead of zero (0) as the null pointer constant",
      "tree": {
        "sha": "be4837f43af4a7fb2c48753849bb3e7a9b776387",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be4837f43af4a7fb2c48753849bb3e7a9b776387"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36d326e8b0866df4e70f81c2aa0a2e19d544399c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36d326e8b0866df4e70f81c2aa0a2e19d544399c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36d326e8b0866df4e70f81c2aa0a2e19d544399c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36d326e8b0866df4e70f81c2aa0a2e19d544399c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d451d0bcf15d8025c3e963df033f918d646aff6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d451d0bcf15d8025c3e963df033f918d646aff6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d451d0bcf15d8025c3e963df033f918d646aff6a"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 41,
      "deletions": 41
    },
    "files": [
      {
        "sha": "c6a05567be9c8fe0743434815a76a6c8e7d00c9d",
        "filename": "src/bench/lockedpool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/bench/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/bench/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/lockedpool.cpp?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -21,14 +21,14 @@ static void BenchLockedPool(benchmark::State& state)\n \n     std::vector<void*> addr;\n     for (int x=0; x<ASIZE; ++x)\n-        addr.push_back(0);\n+        addr.push_back(nullptr);\n     uint32_t s = 0x12345678;\n     while (state.KeepRunning()) {\n         for (int x=0; x<BITER; ++x) {\n             int idx = s & (addr.size()-1);\n             if (s & 0x80000000) {\n                 b.free(addr[idx]);\n-                addr[idx] = 0;\n+                addr[idx] = nullptr;\n             } else if(!addr[idx]) {\n                 addr[idx] = b.alloc((s >> 16) & (MSIZE-1));\n             }"
      },
      {
        "sha": "b45dfc33427a132aaf0eaa700e6a34ae9068fa53",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -14,7 +14,7 @@ bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return f\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n std::vector<uint256> CCoinsView::GetHeadBlocks() const { return std::vector<uint256>(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n-CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }\n+CCoinsViewCursor *CCoinsView::Cursor() const { return nullptr; }\n \n bool CCoinsView::HaveCoin(const COutPoint &outpoint) const\n {"
      },
      {
        "sha": "8c1a74677a1b28f3e09f68a0c528063d6ae25cdc",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -62,7 +62,7 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n /* Pre-base64-encoded authentication token */\n static std::string strRPCUserColonPass;\n /* Stored RPC timer interface (for unregistration) */\n-static HTTPRPCTimerInterface* httpRPCTimerInterface = 0;\n+static HTTPRPCTimerInterface* httpRPCTimerInterface = nullptr;\n \n static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)\n {\n@@ -255,6 +255,6 @@ void StopHTTPRPC()\n     if (httpRPCTimerInterface) {\n         RPCUnsetTimerInterface(httpRPCTimerInterface);\n         delete httpRPCTimerInterface;\n-        httpRPCTimerInterface = 0;\n+        httpRPCTimerInterface = nullptr;\n     }\n }"
      },
      {
        "sha": "815d6602884b30cdeea38b5902227abf8b8e09f0",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -164,13 +164,13 @@ struct HTTPPathHandler\n /** HTTP module state */\n \n //! libevent event loop\n-static struct event_base* eventBase = 0;\n+static struct event_base* eventBase = nullptr;\n //! HTTP server\n-struct evhttp* eventHTTP = 0;\n+struct evhttp* eventHTTP = nullptr;\n //! List of subnets to allow RPC connections from\n static std::vector<CSubNet> rpc_allow_subnets;\n //! Work queue for handling longer requests off the event loop thread\n-static WorkQueue<HTTPClosure>* workQueue = 0;\n+static WorkQueue<HTTPClosure>* workQueue = nullptr;\n //! Handlers for (sub)paths\n std::vector<HTTPPathHandler> pathHandlers;\n //! Bound listening sockets\n@@ -495,11 +495,11 @@ void StopHTTPServer()\n     }\n     if (eventHTTP) {\n         evhttp_free(eventHTTP);\n-        eventHTTP = 0;\n+        eventHTTP = nullptr;\n     }\n     if (eventBase) {\n         event_base_free(eventBase);\n-        eventBase = 0;\n+        eventBase = nullptr;\n     }\n     LogPrint(BCLog::HTTP, \"Stopped HTTP server\\n\");\n }\n@@ -601,9 +601,9 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     evbuffer_add(evb, strReply.data(), strReply.size());\n     HTTPEvent* ev = new HTTPEvent(eventBase, true,\n         std::bind(evhttp_send_reply, req, nStatus, (const char*)nullptr, (struct evbuffer *)nullptr));\n-    ev->trigger(0);\n+    ev->trigger(nullptr);\n     replySent = true;\n-    req = 0; // transferred back to main thread\n+    req = nullptr; // transferred back to main thread\n }\n \n CService HTTPRequest::GetPeer()"
      },
      {
        "sha": "1af317726a5ec3eedb07afdf2c6b3be225b9e85d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -1438,9 +1438,9 @@ void CConnman::WakeMessageHandler()\n void ThreadMapPort()\n {\n     std::string port = strprintf(\"%u\", GetListenPort());\n-    const char * multicastif = 0;\n-    const char * minissdpdpath = 0;\n-    struct UPNPDev * devlist = 0;\n+    const char * multicastif = nullptr;\n+    const char * minissdpdpath = nullptr;\n+    struct UPNPDev * devlist = nullptr;\n     char lanaddr[64];\n \n #ifndef UPNPDISCOVER_SUCCESS\n@@ -1510,13 +1510,13 @@ void ThreadMapPort()\n         {\n             r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n             LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n-            freeUPNPDevlist(devlist); devlist = 0;\n+            freeUPNPDevlist(devlist); devlist = nullptr;\n             FreeUPNPUrls(&urls);\n             throw;\n         }\n     } else {\n         LogPrintf(\"No valid UPnP IGDs found\\n\");\n-        freeUPNPDevlist(devlist); devlist = 0;\n+        freeUPNPDevlist(devlist); devlist = nullptr;\n         if (r != 0)\n             FreeUPNPUrls(&urls);\n     }"
      },
      {
        "sha": "f02c5e0b055fc1ac61bc9656cb5c64b70bcdba25",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -50,8 +50,8 @@ bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLoo\n bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n CService LookupNumeric(const char *pszName, int portDefault = 0);\n bool LookupSubNet(const char *pszName, CSubNet& subnet);\n-bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed = 0);\n-bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed = 0);\n+bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed = nullptr);\n+bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed = nullptr);\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);\n /** Close socket and set hSocket to INVALID_SOCKET */"
      },
      {
        "sha": "7641d8147133c266064be7f18dae58a78eb70683",
        "filename": "src/support/lockedpool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/support/lockedpool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/support/lockedpool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.h?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -150,7 +150,7 @@ class LockedPool\n      * If this callback is provided and returns false, the allocation fails (hard fail), if\n      * it returns true the allocation proceeds, but it could warn.\n      */\n-    LockedPool(std::unique_ptr<LockedPageAllocator> allocator, LockingFailed_Callback lf_cb_in = 0);\n+    LockedPool(std::unique_ptr<LockedPageAllocator> allocator, LockingFailed_Callback lf_cb_in = nullptr);\n     ~LockedPool();\n \n     /** Allocate size bytes from this arena."
      },
      {
        "sha": "9c351ea48790bc645f03e6eb29cb98ab4fc88997",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -162,7 +162,7 @@ void DeleteLock(void* cs)\n         return;\n     }\n     boost::unique_lock<boost::mutex> lock(lockdata.dd_mutex);\n-    std::pair<void*, void*> item = std::make_pair(cs, (void*)0);\n+    std::pair<void*, void*> item = std::make_pair(cs, nullptr);\n     LockOrders::iterator it = lockdata.lockorders.lower_bound(item);\n     while (it != lockdata.lockorders.end() && it->first.first == cs) {\n         std::pair<void*, void*> invitem = std::make_pair(it->first.second, it->first.first);"
      },
      {
        "sha": "6b96c24af27c924a34bc3d3e1ce8cd2f14a3c24d",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -121,7 +121,7 @@ class TorControlConnection\n };\n \n TorControlConnection::TorControlConnection(struct event_base *_base):\n-    base(_base), b_conn(0)\n+    base(_base), b_conn(nullptr)\n {\n }\n \n@@ -227,7 +227,7 @@ bool TorControlConnection::Disconnect()\n {\n     if (b_conn)\n         bufferevent_free(b_conn);\n-    b_conn = 0;\n+    b_conn = nullptr;\n     return true;\n }\n \n@@ -476,7 +476,7 @@ TorController::~TorController()\n {\n     if (reconnect_ev) {\n         event_free(reconnect_ev);\n-        reconnect_ev = 0;\n+        reconnect_ev = nullptr;\n     }\n     if (service.IsValid()) {\n         RemoveLocal(service);\n@@ -770,7 +770,7 @@ void StopTorControl()\n     if (gBase) {\n         torControlThread.join();\n         event_base_free(gBase);\n-        gBase = 0;\n+        gBase = nullptr;\n     }\n }\n "
      },
      {
        "sha": "d0f6cdc135e4ae18122193701f4d63df149203da",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -365,7 +365,7 @@ class CScriptCheck\n     PrecomputedTransactionData *txdata;\n \n public:\n-    CScriptCheck(): amount(0), ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n+    CScriptCheck(): amount(0), ptxTo(nullptr), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n     CScriptCheck(const CScript& scriptPubKeyIn, const CAmount amountIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :\n         scriptPubKey(scriptPubKeyIn), amount(amountIn),\n         ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR), txdata(txdataIn) { }"
      },
      {
        "sha": "094357639bccce5a2232414678f955a6cad1dc67",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -1644,10 +1644,10 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n-        if (pwtx != 0)\n+        if (pwtx != nullptr)\n             ListTransactions(pwallet, *pwtx, strAccount, 0, true, ret, filter);\n         CAccountingEntry *const pacentry = (*it).second.second;\n-        if (pacentry != 0)\n+        if (pacentry != nullptr)\n             AcentryToJSON(*pacentry, strAccount, ret);\n \n         if ((int)ret.size() >= (nCount+nFrom)) break;"
      },
      {
        "sha": "f8c6f9e87be040f5e931559baa2aa2340766dac8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -739,13 +739,13 @@ DBErrors CWallet::ReorderTransactions()\n     for (std::map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n     {\n         CWalletTx* wtx = &((*it).second);\n-        txByTime.insert(std::make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n+        txByTime.insert(std::make_pair(wtx->nTimeReceived, TxPair(wtx, nullptr)));\n     }\n     std::list<CAccountingEntry> acentries;\n     walletdb.ListAccountCreditDebit(\"\", acentries);\n     for (CAccountingEntry& entry : acentries)\n     {\n-        txByTime.insert(std::make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n+        txByTime.insert(std::make_pair(entry.nTime, TxPair(nullptr, &entry)));\n     }\n \n     nOrderPosNext = 0;\n@@ -754,7 +754,7 @@ DBErrors CWallet::ReorderTransactions()\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         CAccountingEntry *const pacentry = (*it).second.second;\n-        int64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n+        int64_t& nOrderPos = (pwtx != nullptr) ? pwtx->nOrderPos : pacentry->nOrderPos;\n \n         if (nOrderPos == -1)\n         {\n@@ -939,7 +939,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     {\n         wtx.nTimeReceived = GetAdjustedTime();\n         wtx.nOrderPos = IncOrderPosNext(&walletdb);\n-        wtxOrdered.insert(std::make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n+        wtxOrdered.insert(std::make_pair(wtx.nOrderPos, TxPair(&wtx, nullptr)));\n         wtx.nTimeSmart = ComputeTimeSmart(wtx);\n         AddToSpends(hash);\n     }\n@@ -1004,7 +1004,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n     mapWallet[hash] = wtxIn;\n     CWalletTx& wtx = mapWallet[hash];\n     wtx.BindWallet(this);\n-    wtxOrdered.insert(std::make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n+    wtxOrdered.insert(std::make_pair(wtx.nOrderPos, TxPair(&wtx, nullptr)));\n     AddToSpends(hash);\n     for (const CTxIn& txin : wtx.tx->vin) {\n         if (mapWallet.count(txin.prevout.hash)) {\n@@ -1794,7 +1794,7 @@ CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n \n CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n {\n-    if (pwallet == 0)\n+    if (pwallet == nullptr)\n         return 0;\n \n     // Must wait until coinbase is safely deep enough in the chain before valuing it\n@@ -1838,7 +1838,7 @@ CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n \n CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n {\n-    if (pwallet == 0)\n+    if (pwallet == nullptr)\n         return 0;\n \n     // Must wait until coinbase is safely deep enough in the chain before valuing it\n@@ -3026,7 +3026,7 @@ bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry, CWalletDB *pwa\n \n     laccentries.push_back(acentry);\n     CAccountingEntry & entry = laccentries.back();\n-    wtxOrdered.insert(std::make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n+    wtxOrdered.insert(std::make_pair(entry.nOrderPos, TxPair(nullptr, &entry)));\n \n     return true;\n }"
      },
      {
        "sha": "cd26d87fdbb0dde59e4f8785d50e27b4d117631a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -621,7 +621,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     pwallet->laccentries.clear();\n     ListAccountCreditDebit(\"*\", pwallet->laccentries);\n     for (CAccountingEntry& entry : pwallet->laccentries) {\n-        pwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n+        pwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair(nullptr, &entry)));\n     }\n \n     return result;"
      },
      {
        "sha": "78288221491814368247603d7fd55dbfbd4e3e07",
        "filename": "src/zmq/zmqabstractnotifier.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/zmq/zmqabstractnotifier.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/zmq/zmqabstractnotifier.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqabstractnotifier.h?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -15,7 +15,7 @@ typedef CZMQAbstractNotifier* (*CZMQNotifierFactory)();\n class CZMQAbstractNotifier\n {\n public:\n-    CZMQAbstractNotifier() : psocket(0) { }\n+    CZMQAbstractNotifier() : psocket(nullptr) { }\n     virtual ~CZMQAbstractNotifier();\n \n     template <typename T>"
      },
      {
        "sha": "9909395d8453ad4d44265a345c411bb66952d0e9",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -120,7 +120,7 @@ void CZMQNotificationInterface::Shutdown()\n         }\n         zmq_ctx_destroy(pcontext);\n \n-        pcontext = 0;\n+        pcontext = nullptr;\n     }\n }\n "
      },
      {
        "sha": "ab54e2bb8bc628ef5f94fedc2df8027317a8cdf2",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d326e8b0866df4e70f81c2aa0a2e19d544399c/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=36d326e8b0866df4e70f81c2aa0a2e19d544399c",
        "patch": "@@ -126,7 +126,7 @@ void CZMQAbstractPublishNotifier::Shutdown()\n         zmq_close(psocket);\n     }\n \n-    psocket = 0;\n+    psocket = nullptr;\n }\n \n bool CZMQAbstractPublishNotifier::SendMessage(const char *command, const void* data, size_t size)\n@@ -136,7 +136,7 @@ bool CZMQAbstractPublishNotifier::SendMessage(const char *command, const void* d\n     /* send three parts, command & data & a LE 4byte sequence number */\n     unsigned char msgseq[sizeof(uint32_t)];\n     WriteLE32(&msgseq[0], nSequence);\n-    int rc = zmq_send_multipart(psocket, command, strlen(command), data, size, msgseq, (size_t)sizeof(uint32_t), (void*)0);\n+    int rc = zmq_send_multipart(psocket, command, strlen(command), data, size, msgseq, (size_t)sizeof(uint32_t), nullptr);\n     if (rc == -1)\n         return false;\n "
      }
    ]
  }
]