DrahtBot,2019-04-18T15:13:24Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15931](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15931.html) (Remove GetDepthInMainChain dependency on lo",https://github.com/bitcoin/bitcoin/pull/15842#issuecomment-484550891,484550891,
ariard,2019-04-20T12:22:42Z,"Noted for the github trick, solved the nits on deb5f75",https://github.com/bitcoin/bitcoin/pull/15842#issuecomment-485107977,485107977,
jnewbery,2019-04-22T15:01:07Z,Doesn't build. Please build/test locally before pushing :slightly_smiling_face: ,https://github.com/bitcoin/bitcoin/pull/15842#issuecomment-485442305,485442305,
ariard,2019-04-23T13:02:48Z,"Sorry for that, working on dev scripts to avoid this kind of mistake even for nits updates!",https://github.com/bitcoin/bitcoin/pull/15842#issuecomment-485793197,485793197,
ariard,2019-04-23T18:13:57Z,"Updated at 4226779 with GUARDED_BY annotation addition.\n\n(btw @ryanofsky, I've started to work on removing bits of Chain::Lock interface, notably the GetDepthInMainChain by tracking last_block_processed_height in CWallet, hope to PR soon to get feedback)",https://github.com/bitcoin/bitcoin/pull/15842#issuecomment-485915777,485915777,
ariard,2019-04-24T17:35:15Z,"Maybe hold on a bit on this.\n\nWhile working on removing cs_main locking, it appears to me than, given wallet will be tracking chain height thanks to asynchronous updates and not direct chain state queries, it's needed to ```SyncWithValidationInterfaceQueue``` before each take of cs_wallet lock even if wallet is at the tip, because we may have ```BlockDisconnected``` in the callbacks validation",https://github.com/bitcoin/bitcoin/pull/15842#issuecomment-486346045,486346045,
ryanofsky,2019-04-24T18:19:42Z,"I don't think I understand the need to call `SyncWithValidationInterfaceQueue` unconditionally in the other PR, but even if there's no way around it, this PR doesn't prevent that because it's still possible to call `waitForNotificationsIfNewBlocksConnected({})`",https://github.com/bitcoin/bitcoin/pull/15842#issuecomment-486368470,486368470,
ariard,2019-04-24T19:21:52Z,"Ah get your point, I'm going to far in locking removing (at least for now), was trying to not rely at all on Chain locking, even without '''::chainActive.Tip()->GetBlockHash()''' call, but only on callbacks hinting chain state.\n",https://github.com/bitcoin/bitcoin/pull/15842#issuecomment-486390523,486390523,
jnewbery,2019-04-29T23:28:48Z,ACK 422677963a7b41e340b911b4cd53d29dd8d63f21,https://github.com/bitcoin/bitcoin/pull/15842#issuecomment-487778425,487778425,
jnewbery,2019-04-18T14:09:27Z,"Accessing `m_last_block_processed` requires the `cs_wallet` lock. I think to make this work you'll need to:\n- grab `cs_wallet`\n- access `m_last_block_processed`\n- release `cs_wallet`\n- call the `waitForNotificationsUpToTip` interface method\n\nAlternatively, we could make `m_last_block_processed` an atomic.\n\nThoughts, @ryanofsky ?",https://github.com/bitcoin/bitcoin/pull/15842#discussion_r276680164,276680164,src/wallet/wallet.cpp
ryanofsky,2019-04-18T15:31:13Z,"I think the ""wait up to"" name I suggested earlier in the todo comment is misleading, because this isn't really deciding what to wait for based on the argument, but deciding whether to wait based on the argument.\n\nI think a better name might be `waitForNotificationsIfNewBlocks(old_tip)` or `waitForNotificationsIfNewBlocksConnected(old_tip)`",https://github.com/bitcoin/bitcoin/pull/15842#discussion_r276717118,276717118,src/interfaces/chain.h
ryanofsky,2019-04-18T15:39:39Z,"Yes, John's right this needs to synchronize access to m_last_block_processed. Since I don't think there's a straightforward way to make uint256 atomic, maybe a clean way to do this would be to add a new `sync.h` macro:\n\n```diff\n-chain().waitForNotificationsUpToTip(m_last_block_processed);\n+chain().waitForNotificationsUpToTip(WITH_LOCK(cs_wallet, return m_last_block_processed));\n```\n\n",https://github.com/bitcoin/bitcoin/pull/15842#discussion_r276720731,276720731,src/wallet/wallet.cpp
jnewbery,2019-04-18T15:53:03Z,"I like the macro, but I don't like putting the complete expression in the `waitForNotificationsUpToTip()` function call. It's too easy for a casual observer to think that the lock is held for the entire call to `waitForNotificationsUpToTip()` (which of course would cause a deadlock). How about:\n\n```c++\nuint256 last_block_hash = WITH_LOCK(cs_wallet, m_last_block_processed);\nchain().waitForN",https://github.com/bitcoin/bitcoin/pull/15842#discussion_r276726392,276726392,src/wallet/wallet.cpp
ariard,2019-04-19T12:19:18Z,"Yes agree wasn't clear so I added `Tip` but even followed `waitForNotificationsIfNewBlocksConnected(old_tip)` suggestion, a little bit more verbose but far more insightful",https://github.com/bitcoin/bitcoin/pull/15842#discussion_r276973196,276973196,src/interfaces/chain.h
ariard,2019-04-19T12:21:54Z,"Ah yes, wasn't sure of cs_wallet lock covering. Added a WITH_LOCK commit and used to get back m_last_block_processed as showed in example.",https://github.com/bitcoin/bitcoin/pull/15842#discussion_r276973649,276973649,src/wallet/wallet.cpp
jnewbery,2019-04-19T14:48:52Z,nit: please rename the argument `old_tip` to be consistent with the function declaration.,https://github.com/bitcoin/bitcoin/pull/15842#discussion_r277005300,277005300,src/interfaces/chain.cpp
jnewbery,2019-04-19T14:50:22Z,nit: remove trailing comma,https://github.com/bitcoin/bitcoin/pull/15842#discussion_r277005771,277005771,src/interfaces/chain.h
