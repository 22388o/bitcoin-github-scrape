[
  {
    "sha": "edfe9438ca54274815f076fc21beb790df5aa0a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGZlOTQzOGNhNTQyNzQ4MTVmMDc2ZmMyMWJlYjc5MGRmNWFhMGEy",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-19T11:48:31Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-20T12:13:34Z"
      },
      "message": "Add WITH_LOCK macro: run code while locking a mutex\n\nResults from ryanofksy suggestion on isPotentialTip/\nwaitForNotifications refactoring",
      "tree": {
        "sha": "79201236fc1d8c452a4c3a0ffb6bfe912d6d41a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79201236fc1d8c452a4c3a0ffb6bfe912d6d41a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edfe9438ca54274815f076fc21beb790df5aa0a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edfe9438ca54274815f076fc21beb790df5aa0a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edfe9438ca54274815f076fc21beb790df5aa0a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edfe9438ca54274815f076fc21beb790df5aa0a2/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "dae72998e8576439254ee497e82e2b9ce4917977",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dae72998e8576439254ee497e82e2b9ce4917977",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dae72998e8576439254ee497e82e2b9ce4917977"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2667fb52f9dfd8bed085f9165123f9ffe55d0f50",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edfe9438ca54274815f076fc21beb790df5aa0a2/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edfe9438ca54274815f076fc21beb790df5aa0a2/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=edfe9438ca54274815f076fc21beb790df5aa0a2",
        "patch": "@@ -198,6 +198,16 @@ using DebugLock = UniqueLock<typename std::remove_reference<typename std::remove\n         LeaveCritical();           \\\n     }\n \n+//! Run code while locking a mutex.\n+//!\n+//! Examples:\n+//!\n+//!   WITH_LOCK(cs, shared_val = shared_val + 1);\n+//!\n+//!   int val = WITH_LOCK(cs, return shared_val);\n+//!\n+#define WITH_LOCK(cs, code) [&] { LOCK(cs); code; }()\n+\n class CSemaphore\n {\n private:"
      }
    ]
  },
  {
    "sha": "422677963a7b41e340b911b4cd53d29dd8d63f21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjI2Nzc5NjNhN2I0MWUzNDBiOTExYjRjZDUzZDI5ZGQ4ZDYzZjIx",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-18T12:21:35Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-23T17:53:46Z"
      },
      "message": "refactor: replace isPotentialtip/waitForNotifications by higher method\n\nAdd GUARDED_BY(cs_wallet) annotation to m_last_block_processed, given\nthat its now guarded by cs_wallet instead of cs_main",
      "tree": {
        "sha": "90de47147f475d9b879fd7d65bb2015dad032d0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90de47147f475d9b879fd7d65bb2015dad032d0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/422677963a7b41e340b911b4cd53d29dd8d63f21",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/422677963a7b41e340b911b4cd53d29dd8d63f21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/422677963a7b41e340b911b4cd53d29dd8d63f21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/422677963a7b41e340b911b4cd53d29dd8d63f21/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "edfe9438ca54274815f076fc21beb790df5aa0a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edfe9438ca54274815f076fc21beb790df5aa0a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edfe9438ca54274815f076fc21beb790df5aa0a2"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 19,
      "deletions": 37
    },
    "files": [
      {
        "sha": "ed0c3925f9ca99d0c0d54cd8417b911e00b9303b",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/422677963a7b41e340b911b4cd53d29dd8d63f21/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/422677963a7b41e340b911b4cd53d29dd8d63f21/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=422677963a7b41e340b911b4cd53d29dd8d63f21",
        "patch": "@@ -136,12 +136,6 @@ class LockImpl : public Chain::Lock\n         }\n         return nullopt;\n     }\n-    bool isPotentialTip(const uint256& hash) override\n-    {\n-        if (::chainActive.Tip()->GetBlockHash() == hash) return true;\n-        CBlockIndex* block = LookupBlockIndex(hash);\n-        return block && block->GetAncestor(::chainActive.Height()) == ::chainActive.Tip();\n-    }\n     CBlockLocator getTipLocator() override { return ::chainActive.GetLocator(); }\n     Optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n@@ -358,7 +352,16 @@ class ChainImpl : public Chain\n     {\n         return MakeUnique<NotificationsHandlerImpl>(*this, notifications);\n     }\n-    void waitForNotifications() override { SyncWithValidationInterfaceQueue(); }\n+    void waitForNotificationsIfNewBlocksConnected(const uint256& old_tip) override\n+    {\n+        if (!old_tip.IsNull()) {\n+            LOCK(::cs_main);\n+            if (old_tip == ::chainActive.Tip()->GetBlockHash()) return;\n+            CBlockIndex* block = LookupBlockIndex(old_tip);\n+            if (block && block->GetAncestor(::chainActive.Height()) == ::chainActive.Tip()) return;\n+        }\n+        SyncWithValidationInterfaceQueue();\n+    }\n     std::unique_ptr<Handler> handleRpc(const CRPCCommand& command) override\n     {\n         return MakeUnique<RpcHandlerImpl>(command);"
      },
      {
        "sha": "9f975cb92fde88a32f4664576ff862a57f1845cb",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/422677963a7b41e340b911b4cd53d29dd8d63f21/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/422677963a7b41e340b911b4cd53d29dd8d63f21/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=422677963a7b41e340b911b4cd53d29dd8d63f21",
        "patch": "@@ -43,12 +43,6 @@ class Wallet;\n //!   asynchronously\n //!   (https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380101269).\n //!\n-//! * The isPotentialTip() and waitForNotifications() methods are too low-level\n-//!   and should be replaced with a higher level\n-//!   waitForNotificationsUpTo(block_hash) method that the wallet can call\n-//!   instead\n-//!   (https://github.com/bitcoin/bitcoin/pull/10973#discussion_r266995234).\n-//!\n //! * The relayTransactions() and submitToMemoryPool() methods could be replaced\n //!   with a higher-level broadcastTransaction method\n //!   (https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459373984).\n@@ -132,11 +126,6 @@ class Chain\n         //! information is desired).\n         virtual Optional<int> findFork(const uint256& hash, Optional<int>* height) = 0;\n \n-        //! Return true if block hash points to the current chain tip, or to a\n-        //! possible descendant of the current chain tip that isn't currently\n-        //! connected.\n-        virtual bool isPotentialTip(const uint256& hash) = 0;\n-\n         //! Get locator for the current chain tip.\n         virtual CBlockLocator getTipLocator() = 0;\n \n@@ -271,8 +260,10 @@ class Chain\n     //! Register handler for notifications.\n     virtual std::unique_ptr<Handler> handleNotifications(Notifications& notifications) = 0;\n \n-    //! Wait for pending notifications to be handled.\n-    virtual void waitForNotifications() = 0;\n+    //! Wait for pending notifications to be processed unless block hash points to the current\n+    //! chain tip, or to a possible descendant of the current chain tip that isn't currently\n+    //! connected.\n+    virtual void waitForNotificationsIfNewBlocksConnected(const uint256& old_tip) = 0;\n \n     //! Register handler for RPC. Command is not copied, so reference\n     //! needs to remain valid until Handler is disconnected."
      },
      {
        "sha": "1ff02a129c1351e0ffc452b137f3ba50ba677032",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 16,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/422677963a7b41e340b911b4cd53d29dd8d63f21/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/422677963a7b41e340b911b4cd53d29dd8d63f21/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=422677963a7b41e340b911b4cd53d29dd8d63f21",
        "patch": "@@ -1288,24 +1288,12 @@ void CWallet::UpdatedBlockTip()\n \n void CWallet::BlockUntilSyncedToCurrentChain() {\n     AssertLockNotHeld(cs_wallet);\n-\n-    {\n-        // Skip the queue-draining stuff if we know we're caught up with\n-        // chainActive.Tip()...\n-        // We could also take cs_wallet here, and call m_last_block_processed\n-        // protected by cs_wallet instead of cs_main, but as long as we need\n-        // cs_main here anyway, it's easier to just call it cs_main-protected.\n-        auto locked_chain = chain().lock();\n-\n-        if (!m_last_block_processed.IsNull() && locked_chain->isPotentialTip(m_last_block_processed)) {\n-            return;\n-        }\n-    }\n-\n-    // ...otherwise put a callback in the validation interface queue and wait\n+    // Skip the queue-draining stuff if we know we're caught up with\n+    // chainActive.Tip(), otherwise put a callback in the validation interface queue and wait\n     // for the queue to drain enough to execute it (indicating we are caught up\n     // at least with the time we entered this function).\n-    chain().waitForNotifications();\n+    uint256 last_block_hash = WITH_LOCK(cs_wallet, return m_last_block_processed);\n+    chain().waitForNotificationsIfNewBlocksConnected(last_block_hash);\n }\n \n "
      },
      {
        "sha": "0d751a6d15b42ce142fab89bcad69aa5820ba5c6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/422677963a7b41e340b911b4cd53d29dd8d63f21/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/422677963a7b41e340b911b4cd53d29dd8d63f21/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=422677963a7b41e340b911b4cd53d29dd8d63f21",
        "patch": "@@ -720,7 +720,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n      * to have seen all transactions in the chain, but is only used to track\n      * live BlockConnected callbacks.\n      */\n-    uint256 m_last_block_processed;\n+    uint256 m_last_block_processed GUARDED_BY(cs_wallet);\n \n public:\n     /*"
      }
    ]
  }
]