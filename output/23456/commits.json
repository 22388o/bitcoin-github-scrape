[
  {
    "sha": "beb7c6fbeecd85426ce309344baf18db322ab5be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWI3YzZmYmVlY2Q4NTQyNmNlMzA5MzQ0YmFmMThkYjMyMmFiNWJl",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-25T07:02:41Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-25T07:08:40Z"
      },
      "message": "test: Reduce number of blocks generated in rpc_signrawtransaction\n\nReduce the number of blocks generated to make sure CSV is activated in\n`test_signing_with_cltv` from 1500 to 500. This makes it consistent with\nthe test above it, `test_signing_with_csv`.\n\nAlso, generating 1500 blocks in one go takes longer than the alotted 30\nseconds and times out consistently on Sifive Unmatched.",
      "tree": {
        "sha": "b89e9b7dad975307526912547c2012f5e93fc07a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b89e9b7dad975307526912547c2012f5e93fc07a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/beb7c6fbeecd85426ce309344baf18db322ab5be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beb7c6fbeecd85426ce309344baf18db322ab5be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/beb7c6fbeecd85426ce309344baf18db322ab5be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beb7c6fbeecd85426ce309344baf18db322ab5be/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd557ceb885ec55ac6865953e7325bcebc5a6972",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd557ceb885ec55ac6865953e7325bcebc5a6972",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd557ceb885ec55ac6865953e7325bcebc5a6972"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e456622f1712c15ff408ddd92f2f3353e906fac7",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beb7c6fbeecd85426ce309344baf18db322ab5be/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beb7c6fbeecd85426ce309344baf18db322ab5be/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=beb7c6fbeecd85426ce309344baf18db322ab5be",
        "patch": "@@ -305,7 +305,7 @@ def test_signing_with_cltv(self):\n         getcontext().prec = 8\n \n         # Make sure CSV is active\n-        self.nodes[0].generate(1500)\n+        self.nodes[0].generate(500)\n \n         # Create a P2WSH script with CLTV\n         script = CScript([1000, OP_CHECKLOCKTIMEVERIFY, OP_DROP])"
      }
    ]
  },
  {
    "sha": "2400deb4a7604d0c1b385d816e1c413617437815",
    "node_id": "C_kwDOABII59oAKDI0MDBkZWI0YTc2MDRkMGMxYjM4NWQ4MTZlMWM0MTM2MTc0Mzc4MTU",
    "commit": {
      "author": {
        "name": "Dontrell Henry",
        "email": "56090131+LamarisSmiley@users.noreply.github.com",
        "date": "2021-11-07T05:38:36Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-11-07T05:38:36Z"
      },
      "message": "Merge pull request #1 from laanwj/2021-07-rpc-signrawtransaction\n\n2021 07 rpc signrawtransaction",
      "tree": {
        "sha": "b89e9b7dad975307526912547c2012f5e93fc07a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b89e9b7dad975307526912547c2012f5e93fc07a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2400deb4a7604d0c1b385d816e1c413617437815",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhh2ZcCRBK7hj4Ov3rIwAAvKgIAF+S/NvfUNs3y0Y6xwJlYW7V\n0sEcT4vGOGV2mb8NQ3XocpIOiAN8ZxVkU38G66ZzwLfCJDAUjND6tpRmzACeY2Cz\n1NmcbngTTPo40SOmwkP5L58zCvD9/f+VaaV+xowmGSExeYEbwQwCHq036rjk0XMa\n+PdHoYM7gQWiQJhIplCMKhtoHCSxQNRphynmHriEHTTV8dEynWSuHVLAxGZ7h9xx\n70zLvA57FQ3rKVXphwaMrZCYVje3JXB117XndmiyM4JT3yCYTexwZLI43eTHpSYV\nwAmTOw/AJHjUGEs98PYM6lLBZJvhE6SF2i7RUM7Np+/R9WmxInfxsWrGNZaycdI=\n=COJd\n-----END PGP SIGNATURE-----\n",
        "payload": "tree b89e9b7dad975307526912547c2012f5e93fc07a\nparent f35e4d906fee907f28ac5d8f32d4948e6b7b14c3\nparent beb7c6fbeecd85426ce309344baf18db322ab5be\nauthor Dontrell Henry <56090131+LamarisSmiley@users.noreply.github.com> 1636263516 -0400\ncommitter GitHub <noreply@github.com> 1636263516 -0400\n\nMerge pull request #1 from laanwj/2021-07-rpc-signrawtransaction\n\n2021 07 rpc signrawtransaction"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2400deb4a7604d0c1b385d816e1c413617437815",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2400deb4a7604d0c1b385d816e1c413617437815",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2400deb4a7604d0c1b385d816e1c413617437815/comments",
    "author": {
      "login": "LamarisSmiley",
      "id": 56090131,
      "node_id": "MDQ6VXNlcjU2MDkwMTMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/56090131?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LamarisSmiley",
      "html_url": "https://github.com/LamarisSmiley",
      "followers_url": "https://api.github.com/users/LamarisSmiley/followers",
      "following_url": "https://api.github.com/users/LamarisSmiley/following{/other_user}",
      "gists_url": "https://api.github.com/users/LamarisSmiley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LamarisSmiley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LamarisSmiley/subscriptions",
      "organizations_url": "https://api.github.com/users/LamarisSmiley/orgs",
      "repos_url": "https://api.github.com/users/LamarisSmiley/repos",
      "events_url": "https://api.github.com/users/LamarisSmiley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LamarisSmiley/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3"
      },
      {
        "sha": "beb7c6fbeecd85426ce309344baf18db322ab5be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beb7c6fbeecd85426ce309344baf18db322ab5be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/beb7c6fbeecd85426ce309344baf18db322ab5be"
      }
    ],
    "stats": {
      "total": 100508,
      "additions": 68460,
      "deletions": 32048
    },
    "files": [
      {
        "sha": "3ca7818ecad24cdb4937763142a5ff746aa92605",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -7,10 +7,10 @@ clone_depth: 5\n environment:\n   PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n   PYTHONUTF8: 1\n-  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/qt598x64_vs2019_v1681/qt598_x64_vs2019_1681.zip'\n-  QT_DOWNLOAD_HASH: '00cf7327818c07d74e0b1a4464ffe987c2728b00d49d4bf333065892af0515c3'\n-  QT_LOCAL_PATH: 'C:\\Qt5.9.8_x64_static_vs2019'\n-  VCPKG_TAG: '2020.11-1'\n+  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/qt51211x64_static_vs2019_16101/Qt5.12.11_x64_static_vs2019_16101.zip'\n+  QT_DOWNLOAD_HASH: 'cf1b58107fadbf0d9a957d14dab16cde6b6eb6936a1908472da1f967dda34a3a'\n+  QT_LOCAL_PATH: 'C:\\Qt5.12.11_x64_static_vs2019_16101'\n+  VCPKG_TAG: '75522bb1f2e7d863078bcd06322348f053a9e33f'\n install:\n # Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n # - cmd: pip install zmq"
      },
      {
        "sha": "26bd27754f10eab3cc37e96aeacc54cd6c3e3bac",
        "filename": ".cirrus.yml",
        "status": "modified",
        "additions": 97,
        "deletions": 37,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.cirrus.yml?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,43 +1,58 @@\n ### Global defaults\n \n-timeout_in: 120m  # https://cirrus-ci.org/faq/#instance-timed-out\n-container:\n-  # https://cirrus-ci.org/faq/#are-there-any-limits\n-  # Each project has 16 CPU in total, assign 2 to each container, so that 8 tasks run in parallel\n-  cpu: 2\n-  memory: 8G  # Set to 8GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-containers\n-  kvm: true  # Use kvm to avoid spurious CI failures in the default virtualization cluster, see https://github.com/bitcoin/bitcoin/issues/20093\n env:\n   PACKAGE_MANAGER_INSTALL: \"apt-get update && apt-get install -y\"\n   MAKEJOBS: \"-j4\"\n-  DANGER_RUN_CI_ON_HOST: \"1\"  # Containers will be discarded after the run, so there is no risk that the ci scripts modify the system\n   TEST_RUNNER_PORT_MIN: \"14000\"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache\n   CCACHE_SIZE: \"200M\"\n   CCACHE_DIR: \"/tmp/ccache_dir\"\n+  CCACHE_NOHASHDIR: \"1\"  # Debug info might contain a stale path if the build dir changes, but this is fine\n+\n+cirrus_ephemeral_worker_template_env: &CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n+  DANGER_RUN_CI_ON_HOST: \"1\"  # Containers will be discarded after the run, so there is no risk that the ci scripts modify the system\n \n-### Global task template\n+persistent_worker_template_env: &PERSISTENT_WORKER_TEMPLATE_ENV\n+  RESTART_CI_DOCKER_BEFORE_RUN: \"1\"\n+\n+persistent_worker_template: &PERSISTENT_WORKER_TEMPLATE\n+  persistent_worker: {}  # https://cirrus-ci.org/guide/persistent-workers/\n \n # https://cirrus-ci.org/guide/tips-and-tricks/#sharing-configuration-between-tasks\n-global_task_template: &GLOBAL_TASK_TEMPLATE\n+base_template: &BASE_TEMPLATE\n   skip: $CIRRUS_REPO_FULL_NAME == \"bitcoin-core/gui\" && $CIRRUS_PR == \"\"  # No need to run on the read-only mirror, unless it is a PR. https://cirrus-ci.org/guide/writing-tasks/#conditional-task-execution\n-  ccache_cache:\n-    folder: \"/tmp/ccache_dir\"\n-  depends_built_cache:\n-    folder: \"/tmp/cirrus-ci-build/depends/built\"\n-  depends_sdk_cache:\n-    folder: \"/tmp/cirrus-ci-build/depends/sdk-sources\"\n-  depends_releases_cache:\n-    folder: \"/tmp/cirrus-ci-build/releases\"\n   merge_base_script:\n     - if [ \"$CIRRUS_PR\" = \"\" ]; then exit 0; fi\n     - bash -c \"$PACKAGE_MANAGER_INSTALL git\"\n     - git fetch $CIRRUS_REPO_CLONE_URL $CIRRUS_BASE_BRANCH\n     - git config --global user.email \"ci@ci.ci\"\n     - git config --global user.name \"ci\"\n     - git merge FETCH_HEAD  # Merge base to detect silent merge conflicts\n+  stateful: false  # https://cirrus-ci.org/guide/writing-tasks/#stateful-tasks\n+\n+global_task_template: &GLOBAL_TASK_TEMPLATE\n+  << : *BASE_TEMPLATE\n+  timeout_in: 120m  # https://cirrus-ci.org/faq/#instance-timed-out\n+  container:\n+    # https://cirrus-ci.org/faq/#are-there-any-limits\n+    # Each project has 16 CPU in total, assign 2 to each container, so that 8 tasks run in parallel\n+    cpu: 2\n+    memory: 8G  # Set to 8GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-containers\n+  ccache_cache:\n+    folder: \"/tmp/ccache_dir\"\n+  depends_built_cache:\n+    folder: \"depends/built\"\n   ci_script:\n     - ./ci/test_run_all.sh\n \n+depends_sdk_cache_template: &DEPENDS_SDK_CACHE_TEMPLATE\n+  depends_sdk_cache:\n+    folder: \"depends/sdk-sources\"\n+\n+compute_credits_template: &CREDITS_TEMPLATE\n+  # https://cirrus-ci.org/pricing/#compute-credits\n+  # Only use credits for pull requests to the main repo\n+  use_compute_credits: $CIRRUS_REPO_FULL_NAME == 'bitcoin/bitcoin' && $CIRRUS_PR != \"\"\n+\n #task:\n #  name: \"Windows\"\n #  windows_container:\n@@ -54,20 +69,36 @@ global_task_template: &GLOBAL_TASK_TEMPLATE\n #  install_script:\n #    - choco install python --version=3.7.7 -y\n \n+task:\n+  name: 'lint [bionic]'\n+  << : *BASE_TEMPLATE\n+  container:\n+    image: ubuntu:bionic  # For python 3.6, oldest supported version according to doc/dependencies.md\n+    cpu: 1\n+    memory: 1G\n+  # For faster CI feedback, immediately schedule the linters\n+  << : *CREDITS_TEMPLATE\n+  lint_script:\n+    - ./ci/lint_run_all.sh\n+  env:\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n+\n task:\n   name: 'ARM [unit tests, no functional tests] [buster]'\n   << : *GLOBAL_TASK_TEMPLATE\n   container:\n     image: debian:buster\n   env:\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n     FILE_ENV: \"./ci/test/00_setup_env_arm.sh\"\n \n task:\n-  name: 'Win64 [unit tests, no gui tests, no boost::process, no functional tests] [bionic]'\n+  name: 'Win64 [unit tests, no gui tests, no boost::process, no functional tests] [focal]'\n   << : *GLOBAL_TASK_TEMPLATE\n   container:\n-    image: ubuntu:bionic\n+    image: ubuntu:focal\n   env:\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n     FILE_ENV: \"./ci/test/00_setup_env_win64.sh\"\n \n task:\n@@ -76,25 +107,29 @@ task:\n   container:\n     image: centos:8\n   env:\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n     PACKAGE_MANAGER_INSTALL: \"yum install -y\"\n     FILE_ENV: \"./ci/test/00_setup_env_i686_centos.sh\"\n \n task:\n-  name: '[previous releases, uses qt5 dev package and some depends packages] [unsigned char] [bionic]'\n+  name: '[previous releases, uses qt5 dev package and some depends packages, DEBUG] [unsigned char] [bionic]'\n+  previous_releases_cache:\n+    folder: \"releases\"\n   << : *GLOBAL_TASK_TEMPLATE\n-  container:\n-    image: ubuntu:bionic\n+  << : *PERSISTENT_WORKER_TEMPLATE\n   env:\n+    << : *PERSISTENT_WORKER_TEMPLATE_ENV\n     FILE_ENV: \"./ci/test/00_setup_env_native_qt5.sh\"\n \n task:\n-  name: '[depends, sanitizers: thread (TSan), no gui] [focal]'\n+  name: '[depends, sanitizers: thread (TSan), no gui] [hirsute]'\n   << : *GLOBAL_TASK_TEMPLATE\n   container:\n-    image: ubuntu:focal\n-    cpu: 4  # Double CPU and increase Memory to avoid timeout\n+    image: ubuntu:hirsute\n+    cpu: 6  # Increase CPU and Memory to avoid timeout\n     memory: 24G\n   env:\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n     MAKEJOBS: \"-j8\"\n     FILE_ENV: \"./ci/test/00_setup_env_native_tsan.sh\"\n \n@@ -104,30 +139,40 @@ task:\n   container:\n     image: ubuntu:focal\n   env:\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n     FILE_ENV: \"./ci/test/00_setup_env_native_msan.sh\"\n \n task:\n-  name: '[no depends, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer] [focal]'\n+  name: '[no depends, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer] [hirsute]'\n   << : *GLOBAL_TASK_TEMPLATE\n   container:\n-    image: ubuntu:focal\n+    image: ubuntu:hirsute\n   env:\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n     FILE_ENV: \"./ci/test/00_setup_env_native_asan.sh\"\n \n task:\n-  name: '[no depends, sanitizers: fuzzer,address,undefined] [focal]'\n+  name: '[no depends, sanitizers: fuzzer,address,undefined,integer] [focal]'\n   << : *GLOBAL_TASK_TEMPLATE\n   container:\n     image: ubuntu:focal\n+    cpu: 4  # Increase CPU and memory to avoid timeout\n+    memory: 16G\n   env:\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n+    MAKEJOBS: \"-j8\"\n     FILE_ENV: \"./ci/test/00_setup_env_native_fuzz.sh\"\n \n task:\n-  name: '[multiprocess] [focal]'\n+  name: '[multiprocess, DEBUG] [focal]'\n   << : *GLOBAL_TASK_TEMPLATE\n   container:\n     image: ubuntu:focal\n+    cpu: 4\n+    memory: 16G  # The default memory is sometimes just a bit too small, so double everything\n   env:\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n+    MAKEJOBS: \"-j8\"\n     FILE_ENV: \"./ci/test/00_setup_env_native_multiprocess.sh\"\n \n task:\n@@ -136,26 +181,41 @@ task:\n   container:\n     image: ubuntu:bionic\n   env:\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n     FILE_ENV: \"./ci/test/00_setup_env_native_nowallet.sh\"\n \n task:\n-  name: 'macOS 10.14 [gui, no tests] [bionic]'\n+  name: 'macOS 10.14 [gui, no tests] [focal]'\n+  << : *DEPENDS_SDK_CACHE_TEMPLATE\n   << : *GLOBAL_TASK_TEMPLATE\n   container:\n-    image: ubuntu:bionic\n+    image: ubuntu:focal\n   env:\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n     FILE_ENV: \"./ci/test/00_setup_env_mac.sh\"\n \n task:\n-  name: 'macOS 10.15 native [gui] [no depends]'\n-  macos_brew_addon_script:\n-    - brew install boost libevent berkeley-db4 qt miniupnpc ccache zeromq qrencode sqlite libtool automake pkg-config gnu-getopt\n+  name: 'macOS 11 native [gui] [no depends]'\n+  brew_install_script:\n+    - brew install boost libevent berkeley-db4 qt@5 miniupnpc libnatpmp ccache zeromq qrencode sqlite libtool automake pkg-config gnu-getopt\n   << : *GLOBAL_TASK_TEMPLATE\n   osx_instance:\n     # Use latest image, but hardcode version to avoid silent upgrades (and breaks)\n-    image: catalina-xcode-12.1  # https://cirrus-ci.org/guide/macOS\n+    image: big-sur-xcode-12.5  # https://cirrus-ci.org/guide/macOS\n   env:\n-    DANGER_RUN_CI_ON_HOST: \"true\"\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n     CI_USE_APT_INSTALL: \"no\"\n     PACKAGE_MANAGER_INSTALL: \"echo\"  # Nothing to do\n     FILE_ENV: \"./ci/test/00_setup_env_mac_host.sh\"\n+\n+task:\n+  name: 'ARM64 Android APK [focal]'\n+  << : *DEPENDS_SDK_CACHE_TEMPLATE\n+  depends_sources_cache:\n+    folder: \"depends/sources\"\n+  << : *GLOBAL_TASK_TEMPLATE\n+  container:\n+    image: ubuntu:focal\n+  env:\n+    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n+    FILE_ENV: \"./ci/test/00_setup_env_android.sh\""
      },
      {
        "sha": "4967e675f642f9877f91a41e2635fc9424c58cda",
        "filename": ".editorconfig",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/.editorconfig",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/.editorconfig",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.editorconfig?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,26 @@\n+# This is the top-most EditorConfig file.\n+root = true\n+\n+# For all files.\n+[*]\n+charset = utf-8\n+end_of_line = lf\n+indent_style = space\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+\n+# Source code files\n+[*.{h,cpp,py,sh}]\n+indent_size = 4\n+\n+# .cirrus.yml, .appveyor.yml, .fuzzbuzz.yml, etc.\n+[*.yml]\n+indent_size = 2\n+\n+# Makefiles\n+[{*.am,Makefile.*.include}]\n+indent_style = tab\n+\n+# Autoconf scripts\n+[configure.ac]\n+indent_size = 2"
      },
      {
        "sha": "d44ac27eb9370e0b02b241ee28e67d0d71a947e8",
        "filename": ".fuzzbuzz.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/.fuzzbuzz.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/.fuzzbuzz.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.fuzzbuzz.yml?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,16 +0,0 @@\n-base: ubuntu:16.04\n-language: c++\n-engine: libFuzzer\n-environment:\n-  - CXXFLAGS=-fcoverage-mapping -fno-omit-frame-pointer -fprofile-instr-generate -gline-tables-only -O1\n-setup:\n-  - sudo apt-get update\n-  - sudo apt-get install -y autoconf bsdmainutils clang git libboost-all-dev libboost-program-options-dev libc++1 libc++abi1 libc++abi-dev libc++-dev libclang1 libclang-dev libdb5.3++ libevent-dev libllvm-ocaml-dev libomp5 libomp-dev libprotobuf-dev libqt5core5a libqt5dbus5 libqt5gui5 libssl-dev libtool llvm llvm-dev llvm-runtime pkg-config protobuf-compiler qttools5-dev qttools5-dev-tools software-properties-common\n-  - ./autogen.sh\n-  - CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n-  - make\n-  - git clone https://github.com/bitcoin-core/qa-assets\n-auto_targets:\n-  find_targets_command: find src/test/fuzz/ -executable -type f ! -name \"*.cpp\" ! -name \"*.h\"\n-  base_corpus_dir: qa-assets/fuzz_seed_corpus/\n-  memory_limit: none"
      },
      {
        "sha": "b76864cc381fae6e61f6b4e045f7ed3a2a7f094d",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -8,9 +8,9 @@ src/bitcoin-cli\n src/bitcoin-gui\n src/bitcoin-node\n src/bitcoin-tx\n+src/bitcoin-util\n src/bitcoin-wallet\n-src/test/fuzz/*\n-!src/test/fuzz/*.*\n+src/test/fuzz/fuzz\n src/test/test_bitcoin\n src/qt/test/test_bitcoin-qt\n \n@@ -61,7 +61,7 @@ src/qt/bitcoin-qt.includes\n .dirstamp\n .libs\n .*.swp\n-*.*~*\n+*~\n *.bak\n *.rej\n *.orig\n@@ -76,6 +76,7 @@ src/qt/bitcoin-qt.includes\n *.log\n *.trs\n *.dmg\n+*.iso\n \n *.json.h\n *.raw.h\n@@ -148,3 +149,5 @@ db4/\n osx_volname\n dist/\n *.background.tiff\n+\n+/guix-build-*"
      },
      {
        "sha": "dd76aaacaf2130ec90fcda07c9c093889e9f5759",
        "filename": ".travis.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 66,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,66 +0,0 @@\n-# Travis caches can be manually removed if necessary. This is one of the very\n-# few manual operations that is possible with Travis, and it can be done by a\n-# Bitcoin Core GitHub member via the Travis web interface [0].\n-#\n-# Travis CI uploads the cache after the script phase of the build [1].\n-# However, the build is terminated without saving the cache if it takes over\n-# 50 minutes [2]. Thus, if we spent too much time in early build stages, fail\n-# with an error and save the cache.\n-#\n-# [0] https://travis-ci.org/bitcoin/bitcoin/caches\n-# [1] https://docs.travis-ci.com/user/caching/#build-phases\n-# [2] https://docs.travis-ci.com/user/customizing-the-build#build-timeouts\n-\n-version: ~> 1.0\n-\n-dist: bionic\n-os: linux\n-language: minimal\n-arch: amd64\n-cache:\n-  directories:\n-    - $TRAVIS_BUILD_DIR/depends/built\n-    - $TRAVIS_BUILD_DIR/depends/sdk-sources\n-    - $TRAVIS_BUILD_DIR/ci/scratch/.ccache\n-    - $TRAVIS_BUILD_DIR/releases/$HOST\n-stages:\n-  - lint\n-  - test\n-env:\n-  global:\n-    - CI_RETRY_EXE=\"travis_retry\"\n-    - CACHE_ERR_MSG=\"Error! Initial build successful, but not enough time remains to run later build stages and tests. See https://docs.travis-ci.com/user/customizing-the-build#build-timeouts . Please manually re-run this job by using the travis restart button. The next run should not time out because the build cache has been saved.\"\n-before_install:\n-  - set -o errexit; source ./ci/test/00_setup_env.sh\n-  - set -o errexit; source ./ci/test/03_before_install.sh\n-install:\n-  - set -o errexit; source ./ci/test/04_install.sh\n-before_script:\n-  # Temporary workaround for https://github.com/bitcoin/bitcoin/issues/16368\n-  - for i in {1..4}; do echo \"$(sleep 500)\" ; done &\n-  - set -o errexit; source ./ci/test/05_before_script.sh &> \"/dev/null\"\n-script:\n-  - export CONTINUE=1\n-  - if [ $SECONDS -gt 1200 ]; then export CONTINUE=0; fi  # Likely the depends build took very long\n-  - if [ $TRAVIS_REPO_SLUG = \"bitcoin/bitcoin\" ]; then export CONTINUE=1; fi  # continue on repos with extended build time (90 minutes)\n-  - if [ $CONTINUE = \"1\" ]; then set -o errexit; source ./ci/test/06_script_a.sh; else set +o errexit; echo \"$CACHE_ERR_MSG\"; false; fi\n-  - if [[ $SECONDS -gt 50*60-$EXPECTED_TESTS_DURATION_IN_SECONDS ]]; then export CONTINUE=0; fi\n-  - if [ $TRAVIS_REPO_SLUG = \"bitcoin/bitcoin\" ]; then export CONTINUE=1; fi  # continue on repos with extended build time (90 minutes)\n-  - if [ $CONTINUE = \"1\" ]; then set -o errexit; source ./ci/test/06_script_b.sh; else set +o errexit; echo \"$CACHE_ERR_MSG\"; false; fi\n-after_script:\n-  - echo $TRAVIS_COMMIT_RANGE\n-jobs:\n-  include:\n-\n-    - stage: lint\n-      name: 'lint'\n-      env:\n-      cache: pip\n-      language: python\n-      python: '3.6' # Oldest supported version according to doc/dependencies.md\n-      install:\n-        - set -o errexit; source ./ci/lint/04_install.sh\n-      before_script:\n-        - set -o errexit; source ./ci/lint/05_before_script.sh\n-      script:\n-        - set -o errexit; source ./ci/lint/06_script.sh"
      },
      {
        "sha": "232d481e1879886ca913715d37b369164142f023",
        "filename": ".tx/config",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/.tx/config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/.tx/config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.tx/config?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,7 +1,7 @@\n [main]\n host = https://www.transifex.com\n \n-[bitcoin.qt-translation-021x]\n-file_filter = src/qt/locale/bitcoin_<lang>.ts\n-source_file = src/qt/locale/bitcoin_en.ts\n+[bitcoin.qt-translation-022x]\n+file_filter = src/qt/locale/bitcoin_<lang>.xlf\n+source_file = src/qt/locale/bitcoin_en.xlf\n source_lang = en"
      },
      {
        "sha": "5cd4715ef0e54a646e704fe15a56e963b27c3b63",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -57,8 +57,8 @@ Communication Channels\n ----------------------\n \n Most communication about Bitcoin Core development happens on IRC, in the\n-`#bitcoin-core-dev` channel on Freenode. The easiest way to participate on IRC is\n-with the web client, [webchat.freenode.net](https://webchat.freenode.net/). Chat\n+`#bitcoin-core-dev` channel on Libera Chat. The easiest way to participate on IRC is\n+with the web client, [web.libera.chat](https://web.libera.chat/#bitcoin-core-dev). Chat\n history logs can be found\n on [http://www.erisian.com.au/bitcoin-core-dev/](http://www.erisian.com.au/bitcoin-core-dev/)\n and [http://gnusha.org/bitcoin-core-dev/](http://gnusha.org/bitcoin-core-dev/).\n@@ -197,7 +197,7 @@ Note: Code review is a burdensome but important part of the development process,\n \n If your pull request contains fixup commits (commits that change the same line of code repeatedly) or too fine-grained\n commits, you may be asked to [squash](https://git-scm.com/docs/git-rebase#_interactive_mode) your commits\n-before it will be merged. The basic squashing workflow is shown below.\n+before it will be reviewed. The basic squashing workflow is shown below.\n \n     git checkout your_branch_name\n     git rebase -i HEAD~n"
      },
      {
        "sha": "c34f575b8c6c65530feec8cf82d9c503929950e9",
        "filename": "COPYING",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,7 +1,7 @@\n The MIT License (MIT)\n \n-Copyright (c) 2009-2020 The Bitcoin Core developers\n-Copyright (c) 2009-2020 Bitcoin Developers\n+Copyright (c) 2009-2021 The Bitcoin Core developers\n+Copyright (c) 2009-2021 Bitcoin Developers\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "sha": "79c294fd15859d25238ba5c3b52daeea35ce86ba",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 44,
        "deletions": 26,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -3,15 +3,16 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Pattern rule to print variables, e.g. make print-top_srcdir\n-print-%:\n-\t@echo $* = $($*)\n+print-%: FORCE\n+\t@echo '$*'='$($*)'\n \n ACLOCAL_AMFLAGS = -I build-aux/m4\n SUBDIRS = src\n if ENABLE_MAN\n SUBDIRS += doc/man\n endif\n .PHONY: deploy FORCE\n+.INTERMEDIATE: $(OSX_TEMP_ISO) $(COVERAGE_INFO)\n \n export PYTHONPATH\n \n@@ -24,7 +25,10 @@ BITCOIND_BIN=$(top_builddir)/src/$(BITCOIN_DAEMON_NAME)$(EXEEXT)\n BITCOIN_QT_BIN=$(top_builddir)/src/qt/$(BITCOIN_GUI_NAME)$(EXEEXT)\n BITCOIN_CLI_BIN=$(top_builddir)/src/$(BITCOIN_CLI_NAME)$(EXEEXT)\n BITCOIN_TX_BIN=$(top_builddir)/src/$(BITCOIN_TX_NAME)$(EXEEXT)\n+BITCOIN_UTIL_BIN=$(top_builddir)/src/$(BITCOIN_UTIL_NAME)$(EXEEXT)\n BITCOIN_WALLET_BIN=$(top_builddir)/src/$(BITCOIN_WALLET_TOOL_NAME)$(EXEEXT)\n+BITCOIN_NODE_BIN=$(top_builddir)/src/$(BITCOIN_MP_NODE_NAME)$(EXEEXT)\n+BITCOIN_GUI_BIN=$(top_builddir)/src/$(BITCOIN_MP_GUI_NAME)$(EXEEXT)\n BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win64-setup$(EXEEXT)\n \n empty :=\n@@ -33,17 +37,18 @@ space := $(empty) $(empty)\n OSX_APP=Bitcoin-Qt.app\n OSX_VOLNAME = $(subst $(space),-,$(PACKAGE_NAME))\n OSX_DMG = $(OSX_VOLNAME).dmg\n+OSX_TEMP_ISO = $(OSX_DMG:.dmg=).temp.iso\n OSX_BACKGROUND_SVG=background.svg\n OSX_BACKGROUND_IMAGE=background.tiff\n OSX_BACKGROUND_IMAGE_DPIS=36 72\n-OSX_DSSTORE_GEN=$(top_srcdir)/contrib/macdeploy/custom_dsstore.py\n OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n-OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n OSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\n-OSX_QT_TRANSLATIONS = ar,bg,ca,cs,da,de,es,fa,fi,fr,gd,gl,he,hu,it,ja,ko,lt,lv,pl,pt,ru,sk,sl,sv,uk,zh_CN,zh_TW\n \n DIST_CONTRIB = \\\n+\t       $(top_srcdir)/test/sanitizer_suppressions/lsan \\\n+\t       $(top_srcdir)/test/sanitizer_suppressions/tsan \\\n+\t       $(top_srcdir)/test/sanitizer_suppressions/ubsan \\\n \t       $(top_srcdir)/contrib/linearize/linearize-data.py \\\n \t       $(top_srcdir)/contrib/linearize/linearize-hashes.py\n \n@@ -52,16 +57,17 @@ DIST_SHARE = \\\n   $(top_srcdir)/share/rpcauth\n \n BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n-           $(top_srcdir)/contrib/devtools/security-check.py\n+           $(top_srcdir)/contrib/devtools/security-check.py \\\n+           $(top_srcdir)/contrib/devtools/utils.py \\\n+           $(top_srcdir)/contrib/devtools/pixie.py\n \n WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n   $(top_srcdir)/share/pixmaps/nsis-header.bmp \\\n   $(top_srcdir)/share/pixmaps/nsis-wizard.bmp \\\n   $(top_srcdir)/doc/README_windows.txt\n \n-OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n+OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_INSTALLER_ICONS) \\\n   $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_SVG) \\\n-  $(OSX_DSSTORE_GEN) \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n \n@@ -73,17 +79,23 @@ COVERAGE_INFO = $(COV_TOOL_WRAPPER) baseline.info \\\n dist-hook:\n \t-$(GIT) archive --format=tar HEAD -- src/clientversion.cpp | $(AMTAR) -C $(top_distdir) -xf -\n \n+if TARGET_WINDOWS\n $(BITCOIN_WIN_INSTALLER): all-recursive\n \t$(MKDIR_P) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIND_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_QT_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_TX_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_WALLET_BIN) $(top_builddir)/release\n+\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_UTIL_BIN) $(top_builddir)/release\n \t@test -f $(MAKENSIS) && echo 'OutFile \"$@\"' | cat $(top_builddir)/share/setup.nsi - | $(MAKENSIS) -V2 - || \\\n \t  echo error: could not build $@\n \t@echo built $@\n \n+deploy: $(BITCOIN_WIN_INSTALLER)\n+endif\n+\n+if TARGET_DARWIN\n $(OSX_APP)/Contents/PkgInfo:\n \t$(MKDIR_P) $(@D)\n \t@echo \"APPL????\" > $@\n@@ -117,7 +129,7 @@ osx_volname:\n \n if BUILD_DARWIN\n $(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING) $(OSX_BACKGROUND_IMAGE)\n-\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -add-qt-tr $(OSX_QT_TRANSLATIONS) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2 -volname $(OSX_VOLNAME)\n+\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) $(OSX_VOLNAME) -translations-dir=$(QT_TRANSLATION_DIR) -dmg\n \n $(OSX_BACKGROUND_IMAGE).png: contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n \tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d 36 -p 36 -o $@\n@@ -127,7 +139,7 @@ $(OSX_BACKGROUND_IMAGE): $(OSX_BACKGROUND_IMAGE).png $(OSX_BACKGROUND_IMAGE)@2x.\n \ttiffutil -cathidpicheck $^ -out $@\n \n deploydir: $(OSX_DMG)\n-else\n+else !BUILD_DARWIN\n APP_DIST_DIR=$(top_builddir)/dist\n APP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE) $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications\n \n@@ -137,8 +149,11 @@ $(APP_DIST_DIR)/Applications:\n \n $(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n \n-$(OSX_DMG): $(APP_DIST_EXTRAS)\n-\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"$(OSX_VOLNAME)\" -no-pad -r -dir-mode 0755 -apple -o $@ dist\n+$(OSX_TEMP_ISO): $(APP_DIST_EXTRAS)\n+\t$(XORRISOFS) -D -l -V \"$(OSX_VOLNAME)\" -no-pad -r -dir-mode 0755 -o $@ $(APP_DIST_DIR) -- $(if $(SOURCE_DATE_EPOCH),-volume_date all_file_dates =$(SOURCE_DATE_EPOCH))\n+\n+$(OSX_DMG): $(OSX_TEMP_ISO)\n+\t$(DMG) dmg \"$<\" \"$@\"\n \n dpi%.$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n \tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d $* -p $* | $(IMAGEMAGICK_CONVERT) - $@\n@@ -147,22 +162,15 @@ $(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): $(OSX_BACKGROUND_IMAGE_DPIF\n \t$(MKDIR_P) $(@D)\n \t$(TIFFCP) -c none $(OSX_BACKGROUND_IMAGE_DPIFILES) $@\n \n-$(APP_DIST_DIR)/.DS_Store: $(OSX_DSSTORE_GEN)\n-\t$(PYTHON) $< \"$@\" \"$(OSX_VOLNAME)\"\n-\n $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n-\tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2\n+\tINSTALLNAMETOOL=$(INSTALLNAMETOOL) OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) $(OSX_VOLNAME) -translations-dir=$(QT_TRANSLATION_DIR)\n \n deploydir: $(APP_DIST_EXTRAS)\n-endif\n+endif !BUILD_DARWIN\n \n-if TARGET_DARWIN\n appbundle: $(OSX_APP_BUILT)\n deploy: $(OSX_DMG)\n endif\n-if TARGET_WINDOWS\n-deploy: $(BITCOIN_WIN_INSTALLER)\n-endif\n \n $(BITCOIN_QT_BIN): FORCE\n \t$(MAKE) -C src qt/$(@F)\n@@ -176,9 +184,18 @@ $(BITCOIN_CLI_BIN): FORCE\n $(BITCOIN_TX_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n+$(BITCOIN_UTIL_BIN): FORCE\n+\t$(MAKE) -C src $(@F)\n+\n $(BITCOIN_WALLET_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n+$(BITCOIN_NODE_BIN): FORCE\n+\t$(MAKE) -C src $(@F)\n+\n+$(BITCOIN_GUI_BIN): FORCE\n+\t$(MAKE) -C src $(@F)\n+\n if USE_LCOV\n LCOV_FILTER_PATTERN = \\\n \t-p \"/usr/local/\" \\\n@@ -326,8 +343,6 @@ EXTRA_DIST += \\\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n-.INTERMEDIATE: $(COVERAGE_INFO)\n-\n DISTCHECK_CONFIGURE_FLAGS = --enable-man\n \n doc/doxygen/.stamp: doc/Doxyfile FORCE\n@@ -352,11 +367,14 @@ clean-local: clean-docs\n \n test-security-check:\n if TARGET_DARWIN\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO\n endif\n if TARGET_WINDOWS\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_PE\n endif\n if TARGET_LINUX\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n+\t$(AM_V_at) CC='$(CC)' CPPFILT='$(CPPFILT)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF\n endif"
      },
      {
        "sha": "56132d7496d425993a2cbe6350e7bab404893f12",
        "filename": "README.md",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -3,6 +3,11 @@ Bitcoin Core integration/staging tree\n \n https://bitcoincore.org\n \n+For an immediately usable, binary version of the Bitcoin Core software, see\n+https://bitcoincore.org/en/download/.\n+\n+Further information about Bitcoin Core is available in the [doc folder](/doc).\n+\n What is Bitcoin?\n ----------------\n \n@@ -12,9 +17,7 @@ with no central authority: managing transactions and issuing money are carried\n out collectively by the network. Bitcoin Core is the name of open source\n software which enables the use of this currency.\n \n-For more information, as well as an immediately usable, binary version of\n-the Bitcoin Core software, see https://bitcoincore.org/en/download/, or read the\n-[original whitepaper](https://bitcoincore.org/bitcoin.pdf).\n+For more information read the original Bitcoin whitepaper.\n \n License\n -------\n@@ -53,10 +56,11 @@ submit new unit tests for old code. Unit tests can be compiled and run\n and extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n \n There are also [regression and integration tests](/test), written\n-in Python, that are run automatically on the build server.\n+in Python.\n These tests can be run (if the [test dependencies](/test) are installed) with: `test/functional/test_runner.py`\n \n-The Travis CI system makes sure that every pull request is built for Windows, Linux, and macOS, and that unit/sanity tests are run automatically.\n+The CI (Continuous Integration) systems make sure that every pull request is built for Windows, Linux, and macOS,\n+and that unit/sanity tests are run automatically.\n \n ### Manual Quality Assurance (QA) Testing\n \n@@ -76,5 +80,3 @@ Translations are periodically pulled from Transifex and merged into the git repo\n \n **Important**: We do not accept translation changes as GitHub pull requests because the next\n pull from Transifex would automatically overwrite them again.\n-\n-Translators should also subscribe to the [mailing list](https://groups.google.com/forum/#!forum/bitcoin-translators)."
      },
      {
        "sha": "e048036e4236d8f7f321eea8501fd12af3ed78ce",
        "filename": "REVIEWERS",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/REVIEWERS",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/REVIEWERS",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/REVIEWERS?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -19,6 +19,7 @@\n \n # Maintainers\n #   @fanquake\n+#   @hebasto\n #   @jonasschnelli\n #   @laanwj\n #   @marcofalke\n@@ -56,14 +57,17 @@\n /src/util/settings.*                        @ryanofsky\n \n # Fuzzing\n-/src/test/fuzz/                             @practicalswift\n-/doc/fuzzing.md                             @practicalswift\n \n-# Test framework\n+# Tests\n+/src/test/net_peer_eviction_tests.cpp       @jonatack\n /test/functional/mempool_updatefromblock.py @hebasto\n /test/functional/feature_asmap.py           @jonatack\n /test/functional/interface_bitcoin_cli.py   @jonatack\n-/test/functional/tool_wallet.py             @jonatack\n+\n+# Backwards compatibility tests\n+*_compatibility.py                          @sjors\n+/test/functional/wallet_upgradewallet.py    @sjors @achow101\n+/test/get_previous_releases.py              @sjors\n \n # Translations\n /src/util/translation.h                     @hebasto\n@@ -98,16 +102,19 @@\n # Descriptors\n *descriptor*                                @achow101 @sipa\n \n+# External signer\n+*external_signer*                           @sjors\n+/doc/external-signer.md                     @sjors\n+*signer.py                                  @sjors\n+\n # Interfaces\n /src/interfaces/                            @ryanofsky\n \n # DB\n /src/txdb.*                                 @jamesob\n /src/dbwrapper.*                            @jamesob\n \n-# Scripts/Linter\n-*.sh                                        @practicalswift\n-/test/lint/                                 @practicalswift\n+# Linter\n /test/lint/lint-shell.sh                    @hebasto\n \n # Bech32"
      },
      {
        "sha": "7aac53c8155f1938a6bbed5fb407b573f85f81b8",
        "filename": "build-aux/m4/ax_boost_base.m4",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build-aux/m4/ax_boost_base.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build-aux/m4/ax_boost_base.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_base.m4?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -11,7 +11,7 @@\n #   Test for the Boost C++ libraries of a particular version (or newer)\n #\n #   If no path to the installed boost library is given the macro searchs\n-#   under /usr, /usr/local, /opt and /opt/local and evaluates the\n+#   under /usr, /usr/local, /opt, /opt/local and /opt/homebrew and evaluates the\n #   $BOOST_ROOT environment variable. Further documentation is available at\n #   <http://randspringer.de/boost/index.html>.\n #\n@@ -151,7 +151,7 @@ AC_DEFUN([_AX_BOOST_BASE_RUNDETECT],[\n         else\n             search_libsubdirs=\"$multiarch_libsubdir $libsubdirs\"\n         fi\n-        for _AX_BOOST_BASE_boost_path_tmp in /usr /usr/local /opt /opt/local ; do\n+        for _AX_BOOST_BASE_boost_path_tmp in /usr /usr/local /opt /opt/local /opt/homebrew/; do\n             if test -d \"$_AX_BOOST_BASE_boost_path_tmp/include/boost\" && test -r \"$_AX_BOOST_BASE_boost_path_tmp/include/boost\" ; then\n                 for libsubdir in $search_libsubdirs ; do\n                     if ls \"$_AX_BOOST_BASE_boost_path_tmp/$libsubdir/libboost_\"* >/dev/null 2>&1 ; then break; fi\n@@ -227,7 +227,7 @@ AC_DEFUN([_AX_BOOST_BASE_RUNDETECT],[\n             fi\n         else\n             if test \"x$cross_compiling\" != \"xyes\" ; then\n-                for _AX_BOOST_BASE_boost_path in /usr /usr/local /opt /opt/local ; do\n+                for _AX_BOOST_BASE_boost_path in /usr /usr/local /opt /opt/local /opt/homebrew ; do\n                     if test -d \"$_AX_BOOST_BASE_boost_path\" && test -r \"$_AX_BOOST_BASE_boost_path\" ; then\n                         for i in `ls -d $_AX_BOOST_BASE_boost_path/include/boost-* 2>/dev/null`; do\n                             _version_tmp=`echo $i | sed \"s#$_AX_BOOST_BASE_boost_path##\" | sed 's/\\/include\\/boost-//' | sed 's/_/./'`"
      },
      {
        "sha": "5d20e67464fcde6ee00f2582607e59f0759115b8",
        "filename": "build-aux/m4/ax_boost_process.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 121,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/build-aux/m4/ax_boost_process.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/build-aux/m4/ax_boost_process.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_process.m4?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,121 +0,0 @@\n-# ===========================================================================\n-#     https://www.gnu.org/software/autoconf-archive/ax_boost_process.html\n-# ===========================================================================\n-#\n-# SYNOPSIS\n-#\n-#   AX_BOOST_PROCESS\n-#\n-# DESCRIPTION\n-#\n-#   Test for Process library from the Boost C++ libraries. The macro\n-#   requires a preceding call to AX_BOOST_BASE. Further documentation is\n-#   available at <http://randspringer.de/boost/index.html>.\n-#\n-#   This macro calls:\n-#\n-#     AC_SUBST(BOOST_PROCESS_LIB)\n-#\n-#   And sets:\n-#\n-#     HAVE_BOOST_PROCESS\n-#\n-# LICENSE\n-#\n-#   Copyright (c) 2008 Thomas Porschberg <thomas@randspringer.de>\n-#   Copyright (c) 2008 Michael Tindal\n-#   Copyright (c) 2008 Daniel Casimiro <dan.casimiro@gmail.com>\n-#\n-#   Copying and distribution of this file, with or without modification, are\n-#   permitted in any medium without royalty provided the copyright notice\n-#   and this notice are preserved. This file is offered as-is, without any\n-#   warranty.\n-\n-#serial 2\n-\n-AC_DEFUN([AX_BOOST_PROCESS],\n-[\n-\tAC_ARG_WITH([boost-process],\n-\tAS_HELP_STRING([--with-boost-process@<:@=special-lib@:>@],\n-                   [use the Process library from boost - it is possible to specify a certain library for the linker\n-                        e.g. --with-boost-process=boost_process-gcc-mt ]),\n-        [\n-        if test \"$withval\" = \"no\"; then\n-\t\t\twant_boost_process=\"no\"\n-        elif test \"$withval\" = \"yes\"; then\n-            want_boost_process=\"yes\"\n-            ax_boost_user_process_lib=\"\"\n-        else\n-\t\t    want_boost_process=\"yes\"\n-\t\tax_boost_user_process_lib=\"$withval\"\n-\t\tfi\n-        ],\n-        [want_boost_process=\"yes\"]\n-\t)\n-\n-\tif test \"x$want_boost_process\" = \"xyes\"; then\n-        AC_REQUIRE([AC_PROG_CC])\n-        AC_REQUIRE([AC_CANONICAL_BUILD])\n-\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n-\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-\t\texport CPPFLAGS\n-\n-\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n-\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n-\t\texport LDFLAGS\n-\n-        AC_CACHE_CHECK(whether the Boost::Process library is available,\n-\t\t\t\t\t   ax_cv_boost_process,\n-        [AC_LANG_PUSH([C++])\n-\t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n-\t\t\t CXXFLAGS=\n-\n-             AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/process.hpp>]],\n-                [[boost::process::child* child = new boost::process::child; delete child;]])],\n-                ax_cv_boost_process=yes, ax_cv_boost_process=no)\n-\t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n-             AC_LANG_POP([C++])\n-\t\t])\n-\t\tif test \"x$ax_cv_boost_process\" = \"xyes\"; then\n-\t\t\tAC_SUBST(BOOST_CPPFLAGS)\n-\n-\t\t\tAC_DEFINE(HAVE_BOOST_PROCESS,,[define if the Boost::Process library is available])\n-            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n-\n-\t\t\tLDFLAGS_SAVE=$LDFLAGS\n-            if test \"x$ax_boost_user_process_lib\" = \"x\"; then\n-                for libextension in `ls -r $BOOSTLIBDIR/libboost_process* 2>/dev/null | sed 's,.*/lib,,' | sed 's,\\..*,,'` ; do\n-                     ax_lib=${libextension}\n-\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n-                                 [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n-                                 [link_process=\"no\"])\n-\t\t\t\tdone\n-                if test \"x$link_process\" != \"xyes\"; then\n-                for libextension in `ls -r $BOOSTLIBDIR/boost_process* 2>/dev/null | sed 's,.*/,,' | sed -e 's,\\..*,,'` ; do\n-                     ax_lib=${libextension}\n-\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n-                                 [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n-                                 [link_process=\"no\"])\n-\t\t\t\tdone\n-                fi\n-\n-            else\n-               for ax_lib in $ax_boost_user_process_lib boost_process-$ax_boost_user_process_lib; do\n-\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n-                                   [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n-                                   [link_process=\"no\"])\n-                  done\n-\n-            fi\n-            if test \"x$ax_lib\" = \"x\"; then\n-                AC_MSG_ERROR(Could not find a version of the Boost::Process library!)\n-            fi\n-\t\t\tif test \"x$link_process\" = \"xno\"; then\n-\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n-\t\t\tfi\n-\t\tfi\n-\n-\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n-\tLDFLAGS=\"$LDFLAGS_SAVED\"\n-\tfi\n-])"
      },
      {
        "sha": "75e80e6e75aa9f6c22387d0dabce11e5fce9526b",
        "filename": "build-aux/m4/ax_boost_thread.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 187,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/build-aux/m4/ax_boost_thread.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/build-aux/m4/ax_boost_thread.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_thread.m4?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,187 +0,0 @@\n-# ===========================================================================\n-#     https://www.gnu.org/software/autoconf-archive/ax_boost_thread.html\n-# ===========================================================================\n-#\n-# SYNOPSIS\n-#\n-#   AX_BOOST_THREAD\n-#\n-# DESCRIPTION\n-#\n-#   Test for Thread library from the Boost C++ libraries. The macro requires\n-#   a preceding call to AX_BOOST_BASE. Further documentation is available at\n-#   <http://randspringer.de/boost/index.html>.\n-#\n-#   This macro calls:\n-#\n-#     AC_SUBST(BOOST_THREAD_LIB)\n-#\n-#   And sets:\n-#\n-#     HAVE_BOOST_THREAD\n-#\n-# LICENSE\n-#\n-#   Copyright (c) 2009 Thomas Porschberg <thomas@randspringer.de>\n-#   Copyright (c) 2009 Michael Tindal\n-#\n-#   Copying and distribution of this file, with or without modification, are\n-#   permitted in any medium without royalty provided the copyright notice\n-#   and this notice are preserved. This file is offered as-is, without any\n-#   warranty.\n-\n-#serial 33\n-\n-AC_DEFUN([AX_BOOST_THREAD],\n-[\n-    AC_ARG_WITH([boost-thread],\n-    AS_HELP_STRING([--with-boost-thread@<:@=special-lib@:>@],\n-                   [use the Thread library from boost -\n-                    it is possible to specify a certain library for the linker\n-                    e.g. --with-boost-thread=boost_thread-gcc-mt ]),\n-        [\n-        if test \"$withval\" = \"yes\"; then\n-            want_boost=\"yes\"\n-            ax_boost_user_thread_lib=\"\"\n-        else\n-            want_boost=\"yes\"\n-            ax_boost_user_thread_lib=\"$withval\"\n-        fi\n-        ],\n-        [want_boost=\"yes\"]\n-    )\n-\n-    if test \"x$want_boost\" = \"xyes\"; then\n-        AC_REQUIRE([AC_PROG_CC])\n-        AC_REQUIRE([AC_CANONICAL_BUILD])\n-        CPPFLAGS_SAVED=\"$CPPFLAGS\"\n-        CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-        export CPPFLAGS\n-\n-        LDFLAGS_SAVED=\"$LDFLAGS\"\n-        LDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n-        export LDFLAGS\n-\n-        AC_CACHE_CHECK(whether the Boost::Thread library is available,\n-                       ax_cv_boost_thread,\n-        [AC_LANG_PUSH([C++])\n-             CXXFLAGS_SAVE=$CXXFLAGS\n-\n-             case \"x$host_os\" in\n-                 xsolaris )\n-                     CXXFLAGS=\"-pthreads $CXXFLAGS\"\n-                     break;\n-                     ;;\n-                 xmingw32 )\n-                     CXXFLAGS=\"-mthreads $CXXFLAGS\"\n-                     break;\n-                     ;;\n-                 *android* )\n-                     break;\n-                     ;;\n-                 * )\n-                     CXXFLAGS=\"-pthread $CXXFLAGS\"\n-                     break;\n-                     ;;\n-             esac\n-\n-             AC_COMPILE_IFELSE([\n-                 AC_LANG_PROGRAM(\n-                     [[@%:@include <boost/thread/thread.hpp>]],\n-                     [[boost::thread_group thrds;\n-                       return 0;]])],\n-                 ax_cv_boost_thread=yes, ax_cv_boost_thread=no)\n-             CXXFLAGS=$CXXFLAGS_SAVE\n-             AC_LANG_POP([C++])\n-        ])\n-        if test \"x$ax_cv_boost_thread\" = \"xyes\"; then\n-            case \"x$host_os\" in\n-                xsolaris )\n-                    BOOST_CPPFLAGS=\"-pthreads $BOOST_CPPFLAGS\"\n-                    break;\n-                    ;;\n-                xmingw32 )\n-                    BOOST_CPPFLAGS=\"-mthreads $BOOST_CPPFLAGS\"\n-                    break;\n-                    ;;\n-                *android* )\n-                    break;\n-                    ;;\n-                * )\n-                    BOOST_CPPFLAGS=\"-pthread $BOOST_CPPFLAGS\"\n-                    break;\n-                    ;;\n-            esac\n-\n-            AC_SUBST(BOOST_CPPFLAGS)\n-\n-            AC_DEFINE(HAVE_BOOST_THREAD,,\n-                      [define if the Boost::Thread library is available])\n-            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n-\n-            LDFLAGS_SAVE=$LDFLAGS\n-                        case \"x$host_os\" in\n-                          *bsd* )\n-                               LDFLAGS=\"-pthread $LDFLAGS\"\n-                          break;\n-                          ;;\n-                        esac\n-            if test \"x$ax_boost_user_thread_lib\" = \"x\"; then\n-                for libextension in `ls -r $BOOSTLIBDIR/libboost_thread* 2>/dev/null | sed 's,.*/lib,,' | sed 's,\\..*,,'`; do\n-                     ax_lib=${libextension}\n-                    AC_CHECK_LIB($ax_lib, exit,\n-                                 [link_thread=\"yes\"; break],\n-                                 [link_thread=\"no\"])\n-                done\n-                if test \"x$link_thread\" != \"xyes\"; then\n-                for libextension in `ls -r $BOOSTLIBDIR/boost_thread* 2>/dev/null | sed 's,.*/,,' | sed 's,\\..*,,'`; do\n-                     ax_lib=${libextension}\n-                    AC_CHECK_LIB($ax_lib, exit,\n-                                 [link_thread=\"yes\"; break],\n-                                 [link_thread=\"no\"])\n-                done\n-                fi\n-\n-            else\n-               for ax_lib in $ax_boost_user_thread_lib boost_thread-$ax_boost_user_thread_lib; do\n-                      AC_CHECK_LIB($ax_lib, exit,\n-                                   [link_thread=\"yes\"; break],\n-                                   [link_thread=\"no\"])\n-                  done\n-\n-            fi\n-            if test \"x$ax_lib\" = \"x\"; then\n-                AC_MSG_ERROR(Could not find a version of the Boost::Thread library!)\n-            fi\n-            if test \"x$link_thread\" = \"xno\"; then\n-                AC_MSG_ERROR(Could not link against $ax_lib !)\n-            else\n-                BOOST_THREAD_LIB=\"-l$ax_lib\"\n-                case \"x$host_os\" in\n-                    *bsd* )\n-                        BOOST_LDFLAGS=\"-pthread $BOOST_LDFLAGS\"\n-                        break;\n-                        ;;\n-                    xsolaris )\n-                        BOOST_THREAD_LIB=\"$BOOST_THREAD_LIB -lpthread\"\n-                        break;\n-                        ;;\n-                    xmingw32 )\n-                        break;\n-                        ;;\n-                    *android* )\n-                        break;\n-                        ;;\n-                    * )\n-                        BOOST_THREAD_LIB=\"$BOOST_THREAD_LIB -lpthread\"\n-                        break;\n-                        ;;\n-                esac\n-                AC_SUBST(BOOST_THREAD_LIB)\n-            fi\n-        fi\n-\n-        CPPFLAGS=\"$CPPFLAGS_SAVED\"\n-        LDFLAGS=\"$LDFLAGS_SAVED\"\n-    fi\n-])"
      },
      {
        "sha": "c788ca9bd435fbfe4e1642281aabd7f9492786ff",
        "filename": "build-aux/m4/ax_gcc_func_attribute.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 223,
        "changes": 223,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/build-aux/m4/ax_gcc_func_attribute.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/build-aux/m4/ax_gcc_func_attribute.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_gcc_func_attribute.m4?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,223 +0,0 @@\n-# ===========================================================================\n-#   http://www.gnu.org/software/autoconf-archive/ax_gcc_func_attribute.html\n-# ===========================================================================\n-#\n-# SYNOPSIS\n-#\n-#   AX_GCC_FUNC_ATTRIBUTE(ATTRIBUTE)\n-#\n-# DESCRIPTION\n-#\n-#   This macro checks if the compiler supports one of GCC's function\n-#   attributes; many other compilers also provide function attributes with\n-#   the same syntax. Compiler warnings are used to detect supported\n-#   attributes as unsupported ones are ignored by default so quieting\n-#   warnings when using this macro will yield false positives.\n-#\n-#   The ATTRIBUTE parameter holds the name of the attribute to be checked.\n-#\n-#   If ATTRIBUTE is supported define HAVE_FUNC_ATTRIBUTE_<ATTRIBUTE>.\n-#\n-#   The macro caches its result in the ax_cv_have_func_attribute_<attribute>\n-#   variable.\n-#\n-#   The macro currently supports the following function attributes:\n-#\n-#    alias\n-#    aligned\n-#    alloc_size\n-#    always_inline\n-#    artificial\n-#    cold\n-#    const\n-#    constructor\n-#    constructor_priority for constructor attribute with priority\n-#    deprecated\n-#    destructor\n-#    dllexport\n-#    dllimport\n-#    error\n-#    externally_visible\n-#    flatten\n-#    format\n-#    format_arg\n-#    gnu_inline\n-#    hot\n-#    ifunc\n-#    leaf\n-#    malloc\n-#    noclone\n-#    noinline\n-#    nonnull\n-#    noreturn\n-#    nothrow\n-#    optimize\n-#    pure\n-#    unused\n-#    used\n-#    visibility\n-#    warning\n-#    warn_unused_result\n-#    weak\n-#    weakref\n-#\n-#   Unsuppored function attributes will be tested with a prototype returning\n-#   an int and not accepting any arguments and the result of the check might\n-#   be wrong or meaningless so use with care.\n-#\n-# LICENSE\n-#\n-#   Copyright (c) 2013 Gabriele Svelto <gabriele.svelto@gmail.com>\n-#\n-#   Copying and distribution of this file, with or without modification, are\n-#   permitted in any medium without royalty provided the copyright notice\n-#   and this notice are preserved.  This file is offered as-is, without any\n-#   warranty.\n-\n-#serial 3\n-\n-AC_DEFUN([AX_GCC_FUNC_ATTRIBUTE], [\n-    AS_VAR_PUSHDEF([ac_var], [ax_cv_have_func_attribute_$1])\n-\n-    AC_CACHE_CHECK([for __attribute__(($1))], [ac_var], [\n-        AC_LINK_IFELSE([AC_LANG_PROGRAM([\n-            m4_case([$1],\n-                [alias], [\n-                    int foo( void ) { return 0; }\n-                    int bar( void ) __attribute__(($1(\"foo\")));\n-                ],\n-                [aligned], [\n-                    int foo( void ) __attribute__(($1(32)));\n-                ],\n-                [alloc_size], [\n-                    void *foo(int a) __attribute__(($1(1)));\n-                ],\n-                [always_inline], [\n-                    inline __attribute__(($1)) int foo( void ) { return 0; }\n-                ],\n-                [artificial], [\n-                    inline __attribute__(($1)) int foo( void ) { return 0; }\n-                ],\n-                [cold], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [const], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [constructor_priority], [\n-                    int foo( void ) __attribute__((__constructor__(65535/2)));\n-                ],\n-                [constructor], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [deprecated], [\n-                    int foo( void ) __attribute__(($1(\"\")));\n-                ],\n-                [destructor], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [dllexport], [\n-                    __attribute__(($1)) int foo( void ) { return 0; }\n-                ],\n-                [dllimport], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [error], [\n-                    int foo( void ) __attribute__(($1(\"\")));\n-                ],\n-                [externally_visible], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [flatten], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [format], [\n-                    int foo(const char *p, ...) __attribute__(($1(printf, 1, 2)));\n-                ],\n-                [format_arg], [\n-                    char *foo(const char *p) __attribute__(($1(1)));\n-                ],\n-                [gnu_inline], [\n-                    inline __attribute__(($1)) int foo( void ) { return 0; }\n-                ],\n-                [hot], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [ifunc], [\n-                    int my_foo( void ) { return 0; }\n-                    static int (*resolve_foo(void))(void) { return my_foo; }\n-                    int foo( void ) __attribute__(($1(\"resolve_foo\")));\n-                ],\n-                [leaf], [\n-                    __attribute__(($1)) int foo( void ) { return 0; }\n-                ],\n-                [malloc], [\n-                    void *foo( void ) __attribute__(($1));\n-                ],\n-                [noclone], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [noinline], [\n-                    __attribute__(($1)) int foo( void ) { return 0; }\n-                ],\n-                [nonnull], [\n-                    int foo(char *p) __attribute__(($1(1)));\n-                ],\n-                [noreturn], [\n-                    void foo( void ) __attribute__(($1));\n-                ],\n-                [nothrow], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [optimize], [\n-                    __attribute__(($1(3))) int foo( void ) { return 0; }\n-                ],\n-                [pure], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [unused], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [used], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [visibility], [\n-                    int foo_def( void ) __attribute__(($1(\"default\")));\n-                    int foo_hid( void ) __attribute__(($1(\"hidden\")));\n-                    int foo_int( void ) __attribute__(($1(\"internal\")));\n-                    int foo_pro( void ) __attribute__(($1(\"protected\")));\n-                ],\n-                [warning], [\n-                    int foo( void ) __attribute__(($1(\"\")));\n-                ],\n-                [warn_unused_result], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [weak], [\n-                    int foo( void ) __attribute__(($1));\n-                ],\n-                [weakref], [\n-                    static int foo( void ) { return 0; }\n-                    static int bar( void ) __attribute__(($1(\"foo\")));\n-                ],\n-                [\n-                 m4_warn([syntax], [Unsupported attribute $1, the test may fail])\n-                 int foo( void ) __attribute__(($1));\n-                ]\n-            )], [])\n-            ],\n-            dnl GCC doesn't exit with an error if an unknown attribute is\n-            dnl provided but only outputs a warning, so accept the attribute\n-            dnl only if no warning were issued.\n-            [AS_IF([test -s conftest.err],\n-                [AS_VAR_SET([ac_var], [no])],\n-                [AS_VAR_SET([ac_var], [yes])])],\n-            [AS_VAR_SET([ac_var], [no])])\n-    ])\n-\n-    AS_IF([test yes = AS_VAR_GET([ac_var])],\n-        [AC_DEFINE_UNQUOTED(AS_TR_CPP(HAVE_FUNC_ATTRIBUTE_$1), 1,\n-            [Define to 1 if the system has the `$1' function attribute])], [])\n-\n-    AS_VAR_POPDEF([ac_var])\n-])"
      },
      {
        "sha": "5b5a8ed16e252844d88785da1ab26facc8e3b27f",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 110,
        "deletions": 68,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -64,6 +64,13 @@ AC_DEFUN([BITCOIN_QT_INIT],[\n     ],\n     [bitcoin_qt_want_version=auto])\n \n+  AS_IF([test \"x$with_gui\" = xqt5_debug],\n+        [AS_CASE([$host],\n+                 [*darwin*], [qt_lib_suffix=_debug],\n+                 [*mingw*], [qt_lib_suffix=d],\n+                 [qt_lib_suffix= ]); bitcoin_qt_want_version=qt5],\n+        [qt_lib_suffix= ])\n+\n   AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [])\n   AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [])\n   AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [])\n@@ -101,37 +108,61 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   BITCOIN_QT_CHECK([_BITCOIN_QT_FIND_LIBS])\n \n   dnl This is ugly and complicated. Yuck. Works as follows:\n-  dnl For Qt5, we can check a header to find out whether Qt is build\n-  dnl statically. When Qt is built statically, some plugins must be linked into\n-  dnl the final binary as well.\n-  dnl With Qt5, languages moved into core and the WindowsIntegration plugin was\n-  dnl added.\n-  dnl _BITCOIN_QT_CHECK_STATIC_PLUGINS does a quick link-check and appends the\n-  dnl results to QT_LIBS.\n+  dnl We check a header to find out whether Qt is built statically.\n+  dnl When Qt is built statically, some plugins must be linked into\n+  dnl the final binary as well. _BITCOIN_QT_CHECK_STATIC_PLUGIN does\n+  dnl a quick link-check and appends the results to QT_LIBS.\n   BITCOIN_QT_CHECK([\n   TEMP_CPPFLAGS=$CPPFLAGS\n   TEMP_CXXFLAGS=$CXXFLAGS\n   CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n   CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n   _BITCOIN_QT_IS_STATIC\n   if test \"x$bitcoin_cv_static_qt\" = xyes; then\n-    _BITCOIN_QT_FIND_STATIC_PLUGINS\n+    _BITCOIN_QT_CHECK_STATIC_LIBS\n+\n+    if test \"x$qt_plugin_path\" != x; then\n+      if test -d \"$qt_plugin_path/platforms\"; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n+      fi\n+      if test -d \"$qt_plugin_path/styles\"; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/styles\"\n+      fi\n+      if test -d \"$qt_plugin_path/accessible\"; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+      fi\n+      if test -d \"$qt_plugin_path/platforms/android\"; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms/android -lqtfreetype -lEGL\"\n+      fi\n+    fi\n+\n     AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n     if test \"x$TARGET_OS\" != xandroid; then\n-      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin)],[-lqminimal])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMinimalIntegrationPlugin], [-lqminimal])\n       AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n     fi\n     if test \"x$TARGET_OS\" = xwindows; then\n-      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n+      dnl Linking against wtsapi32 is required. See #17749 and\n+      dnl https://bugreports.qt.io/browse/QTBUG-27097.\n+      AX_CHECK_LINK_FLAG([-lwtsapi32], [QT_LIBS=\"$QT_LIBS -lwtsapi32\"], [AC_MSG_ERROR([could not link against -lwtsapi32])])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsIntegrationPlugin], [-lqwindows])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsVistaStylePlugin], [-lqwindowsvistastyle])\n       AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n     elif test \"x$TARGET_OS\" = xlinux; then\n-      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n+      dnl workaround for https://bugreports.qt.io/browse/QTBUG-74874\n+      AX_CHECK_LINK_FLAG([-lxcb-shm], [QT_LIBS=\"$QT_LIBS -lxcb-shm\"], [AC_MSG_ERROR([could not link against -lxcb-shm])])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QXcbIntegrationPlugin], [-lqxcb])\n       AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n     elif test \"x$TARGET_OS\" = xdarwin; then\n-      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin)],[-lqcocoa])\n+      AX_CHECK_LINK_FLAG([[-framework Carbon]],[QT_LIBS=\"$QT_LIBS -framework Carbon\"],[AC_MSG_ERROR(could not link against Carbon framework)])\n+      AX_CHECK_LINK_FLAG([[-framework IOSurface]],[QT_LIBS=\"$QT_LIBS -framework IOSurface\"],[AC_MSG_ERROR(could not link against IOSurface framework)])\n+      AX_CHECK_LINK_FLAG([[-framework Metal]],[QT_LIBS=\"$QT_LIBS -framework Metal\"],[AC_MSG_ERROR(could not link against Metal framework)])\n+      AX_CHECK_LINK_FLAG([[-framework QuartzCore]],[QT_LIBS=\"$QT_LIBS -framework QuartzCore\"],[AC_MSG_ERROR(could not link against QuartzCore framework)])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QCocoaIntegrationPlugin], [-lqcocoa])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMacStylePlugin], [-lqmacstyle])\n       AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n     elif test \"x$TARGET_OS\" = xandroid; then\n-      QT_LIBS=\"-Wl,--export-dynamic,--undefined=JNI_OnLoad -lqtforandroid -ljnigraphics -landroid -lqtfreetype -lQt5EglSupport $QT_LIBS\"\n+      QT_LIBS=\"-Wl,--export-dynamic,--undefined=JNI_OnLoad -lqtforandroid -ljnigraphics -landroid -lqtfreetype $QT_LIBS\"\n       AC_DEFINE(QT_QPA_PLATFORM_ANDROID, 1, [Define this symbol if the qt platform is android])\n     fi\n   fi\n@@ -140,7 +171,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   ])\n \n   if test \"x$qt_bin_path\" = x; then\n-    qt_bin_path=\"`$PKG_CONFIG --variable=host_bins Qt5Core 2>/dev/null`\"\n+    qt_bin_path=\"`$PKG_CONFIG --variable=host_bins ${qt_lib_prefix}Core 2>/dev/null`\"\n   fi\n \n   if test \"x$use_hardening\" != xno; then\n@@ -195,6 +226,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   BITCOIN_QT_PATH_PROGS([RCC], [rcc-qt5 rcc5 rcc], $qt_bin_path)\n   BITCOIN_QT_PATH_PROGS([LRELEASE], [lrelease-qt5 lrelease5 lrelease], $qt_bin_path)\n   BITCOIN_QT_PATH_PROGS([LUPDATE], [lupdate-qt5 lupdate5 lupdate],$qt_bin_path, yes)\n+  BITCOIN_QT_PATH_PROGS([LCONVERT], [lconvert-qt5 lconvert5 lconvert], $qt_bin_path, yes)\n \n   MOC_DEFS='-DHAVE_CONFIG_H -I$(srcdir)'\n   case $host in\n@@ -228,7 +260,10 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n       AC_MSG_ERROR([libQtDBus not found. Install libQtDBus or remove --with-qtdbus.])\n     fi\n     if test \"x$LUPDATE\" = x; then\n-      AC_MSG_WARN([lupdate is required to update qt translations])\n+      AC_MSG_WARN([lupdate tool is required to update Qt translations.])\n+    fi\n+    if test \"x$LCONVERT\" = x; then\n+      AC_MSG_WARN([lconvert tool is required to update Qt translations.])\n     fi\n   ],[\n     bitcoin_enable_qt=no\n@@ -251,12 +286,13 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   AC_SUBST(MOC_DEFS)\n ])\n \n-dnl All macros below are internal and should _not_ be used from the main\n-dnl configure.ac.\n-dnl ----\n+dnl All macros below are internal and should _not_ be used from configure.ac.\n \n-dnl Internal. Check if the linked version of Qt was built as static libs.\n-dnl Requires: Qt5.\n+dnl Internal. Check if the linked version of Qt was built statically.\n+dnl\n+dnl _BITCOIN_QT_IS_STATIC\n+dnl ---------------------\n+dnl\n dnl Requires: INCLUDES and LIBS must be populated as necessary.\n dnl Output: bitcoin_cv_static_qt=yes|no\n AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n@@ -277,78 +313,84 @@ AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n     ])\n ])\n \n-dnl Internal. Check if the link-requirements for static plugins are met.\n+dnl Internal. Check if the link-requirements for a static plugin are met.\n+dnl\n+dnl _BITCOIN_QT_CHECK_STATIC_PLUGIN(PLUGIN, LIBRARIES)\n+dnl --------------------------------------------------\n+dnl\n dnl Requires: INCLUDES and LIBS must be populated as necessary.\n-dnl Inputs: $1: A series of Q_IMPORT_PLUGIN().\n+dnl Inputs: $1: A static plugin name.\n dnl Inputs: $2: The libraries that resolve $1.\n dnl Output: QT_LIBS is prepended or configure exits.\n-AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_PLUGINS],[\n-  AC_MSG_CHECKING(for static Qt plugins: $2)\n+AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_PLUGIN], [\n+  AC_MSG_CHECKING([for $1 ($2)])\n   CHECK_STATIC_PLUGINS_TEMP_LIBS=\"$LIBS\"\n-  LIBS=\"$2 $QT_LIBS $LIBS\"\n+  LIBS=\"$2${qt_lib_suffix} $QT_LIBS $LIBS\"\n   AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-    #define QT_STATICPLUGIN\n-    #include <QtPlugin>\n-    $1]],\n-    [[return 0;]])],\n-    [AC_MSG_RESULT(yes); QT_LIBS=\"$2 $QT_LIBS\"],\n-    [AC_MSG_RESULT(no); BITCOIN_QT_FAIL(Could not resolve: $2)])\n+      #include <QtPlugin>\n+      Q_IMPORT_PLUGIN($1)\n+    ]])],\n+    [AC_MSG_RESULT([yes]); QT_LIBS=\"$2${qt_lib_suffix} $QT_LIBS\"],\n+    [AC_MSG_RESULT([no]); BITCOIN_QT_FAIL([$1 not found.])])\n   LIBS=\"$CHECK_STATIC_PLUGINS_TEMP_LIBS\"\n ])\n \n-dnl Internal. Find paths necessary for linking qt static plugins\n-dnl Inputs: qt_plugin_path. optional.\n-dnl Outputs: QT_LIBS is appended\n-AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n-    if test \"x$qt_plugin_path\" != x; then\n-      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n-      if test -d \"$qt_plugin_path/accessible\"; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n-      fi\n-      if test -d \"$qt_plugin_path/platforms/android\"; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms/android -lqtfreetype -lEGL\"\n-      fi\n-      PKG_CHECK_MODULES([QTFONTDATABASE], [Qt5FontDatabaseSupport], [QT_LIBS=\"-lQt5FontDatabaseSupport $QT_LIBS\"])\n-      PKG_CHECK_MODULES([QTEVENTDISPATCHER], [Qt5EventDispatcherSupport], [QT_LIBS=\"-lQt5EventDispatcherSupport $QT_LIBS\"])\n-      PKG_CHECK_MODULES([QTTHEME], [Qt5ThemeSupport], [QT_LIBS=\"-lQt5ThemeSupport $QT_LIBS\"])\n-      PKG_CHECK_MODULES([QTDEVICEDISCOVERY], [Qt5DeviceDiscoverySupport], [QT_LIBS=\"-lQt5DeviceDiscoverySupport $QT_LIBS\"])\n-      PKG_CHECK_MODULES([QTACCESSIBILITY], [Qt5AccessibilitySupport], [QT_LIBS=\"-lQt5AccessibilitySupport $QT_LIBS\"])\n-      PKG_CHECK_MODULES([QTFB], [Qt5FbSupport], [QT_LIBS=\"-lQt5FbSupport $QT_LIBS\"])\n-      if test \"x$TARGET_OS\" = xlinux; then\n-        PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n-      elif test \"x$TARGET_OS\" = xdarwin; then\n-        PKG_CHECK_MODULES([QTCLIPBOARD], [Qt5ClipboardSupport], [QT_LIBS=\"-lQt5ClipboardSupport $QT_LIBS\"])\n-        PKG_CHECK_MODULES([QTGRAPHICS], [Qt5GraphicsSupport], [QT_LIBS=\"-lQt5GraphicsSupport $QT_LIBS\"])\n-        PKG_CHECK_MODULES([QTCGL], [Qt5CglSupport], [QT_LIBS=\"-lQt5CglSupport $QT_LIBS\"])\n-      fi\n-    fi\n+dnl Internal. Check Qt static libs with PKG_CHECK_MODULES.\n+dnl\n+dnl _BITCOIN_QT_CHECK_STATIC_LIBS\n+dnl -----------------------------\n+dnl\n+dnl Outputs: QT_LIBS is prepended.\n+AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_LIBS], [\n+  PKG_CHECK_MODULES([QT_ACCESSIBILITY], [${qt_lib_prefix}AccessibilitySupport${qt_lib_suffix}], [QT_LIBS=\"$QT_ACCESSIBILITY_LIBS $QT_LIBS\"])\n+  PKG_CHECK_MODULES([QT_DEVICEDISCOVERY], [${qt_lib_prefix}DeviceDiscoverySupport${qt_lib_suffix}], [QT_LIBS=\"$QT_DEVICEDISCOVERY_LIBS $QT_LIBS\"])\n+  PKG_CHECK_MODULES([QT_EDID], [${qt_lib_prefix}EdidSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_EDID_LIBS $QT_LIBS\"])\n+  PKG_CHECK_MODULES([QT_EVENTDISPATCHER], [${qt_lib_prefix}EventDispatcherSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_EVENTDISPATCHER_LIBS $QT_LIBS\"])\n+  PKG_CHECK_MODULES([QT_FB], [${qt_lib_prefix}FbSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_FB_LIBS $QT_LIBS\"])\n+  PKG_CHECK_MODULES([QT_FONTDATABASE], [${qt_lib_prefix}FontDatabaseSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_FONTDATABASE_LIBS $QT_LIBS\"])\n+  PKG_CHECK_MODULES([QT_THEME], [${qt_lib_prefix}ThemeSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_THEME_LIBS $QT_LIBS\"])\n+  if test \"x$TARGET_OS\" = xlinux; then\n+    PKG_CHECK_MODULES([QT_INPUT], [${qt_lib_prefix}XcbQpa], [QT_LIBS=\"$QT_INPUT_LIBS $QT_LIBS\"])\n+    PKG_CHECK_MODULES([QT_SERVICE], [${qt_lib_prefix}ServiceSupport], [QT_LIBS=\"$QT_SERVICE_LIBS $QT_LIBS\"])\n+    PKG_CHECK_MODULES([QT_XCBQPA], [${qt_lib_prefix}XcbQpa], [QT_LIBS=\"$QT_XCBQPA_LIBS $QT_LIBS\"])\n+  elif test \"x$TARGET_OS\" = xdarwin; then\n+    PKG_CHECK_MODULES([QT_CLIPBOARD], [${qt_lib_prefix}ClipboardSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_CLIPBOARD_LIBS $QT_LIBS\"])\n+    PKG_CHECK_MODULES([QT_GRAPHICS], [${qt_lib_prefix}GraphicsSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_GRAPHICS_LIBS $QT_LIBS\"])\n+    PKG_CHECK_MODULES([QT_SERVICE], [${qt_lib_prefix}ServiceSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_SERVICE_LIBS $QT_LIBS\"])\n+  elif test \"x$TARGET_OS\" = xwindows; then\n+    PKG_CHECK_MODULES([QT_WINDOWSUIAUTOMATION], [${qt_lib_prefix}WindowsUIAutomationSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_WINDOWSUIAUTOMATION_LIBS $QT_LIBS\"])\n+  elif test \"x$TARGET_OS\" = xandroid; then\n+    PKG_CHECK_MODULES([QT_EGL], [${qt_lib_prefix}EglSupport], [QT_LIBS=\"$QT_EGL_LIBS $QT_LIBS\"])\n+  fi\n ])\n \n dnl Internal. Find Qt libraries using pkg-config.\n+dnl\n+dnl _BITCOIN_QT_FIND_LIBS\n+dnl ---------------------\n+dnl\n dnl Outputs: All necessary QT_* variables are set.\n dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n AC_DEFUN([_BITCOIN_QT_FIND_LIBS],[\n   BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_CORE], [${qt_lib_prefix}Core $qt_version], [],\n-                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Core $qt_version not found])])\n+    PKG_CHECK_MODULES([QT_CORE], [${qt_lib_prefix}Core${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_CORE_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_CORE_LIBS $QT_LIBS\"],\n+                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Core${qt_lib_suffix} $qt_version not found])])\n   ])\n   BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_GUI], [${qt_lib_prefix}Gui $qt_version], [],\n-                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Gui $qt_version not found])])\n+    PKG_CHECK_MODULES([QT_GUI], [${qt_lib_prefix}Gui${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_GUI_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_GUI_LIBS $QT_LIBS\"],\n+                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Gui${qt_lib_suffix} $qt_version not found])])\n   ])\n   BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_WIDGETS], [${qt_lib_prefix}Widgets $qt_version], [],\n-                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Widgets $qt_version not found])])\n+    PKG_CHECK_MODULES([QT_WIDGETS], [${qt_lib_prefix}Widgets${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_WIDGETS_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_WIDGETS_LIBS $QT_LIBS\"],\n+                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Widgets${qt_lib_suffix} $qt_version not found])])\n   ])\n   BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_NETWORK], [${qt_lib_prefix}Network $qt_version], [],\n-                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Network $qt_version not found])])\n+    PKG_CHECK_MODULES([QT_NETWORK], [${qt_lib_prefix}Network${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_NETWORK_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_NETWORK_LIBS $QT_LIBS\"],\n+                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Network${qt_lib_suffix} $qt_version not found])])\n   ])\n-  QT_INCLUDES=\"$QT_CORE_CFLAGS $QT_GUI_CFLAGS $QT_WIDGETS_CFLAGS $QT_NETWORK_CFLAGS\"\n-  QT_LIBS=\"$QT_CORE_LIBS $QT_GUI_LIBS $QT_WIDGETS_LIBS $QT_NETWORK_LIBS\"\n \n   BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_TEST], [${qt_lib_prefix}Test $qt_version], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n+    PKG_CHECK_MODULES([QT_TEST], [${qt_lib_prefix}Test${qt_lib_suffix} $qt_version], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n     if test \"x$use_dbus\" != xno; then\n       PKG_CHECK_MODULES([QT_DBUS], [${qt_lib_prefix}DBus $qt_version], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n     fi"
      },
      {
        "sha": "40639dfe618e585ca81bab1e387c8c44280a62e4",
        "filename": "build-aux/m4/l_atomic.m4",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build-aux/m4/l_atomic.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build-aux/m4/l_atomic.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/l_atomic.m4?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -12,8 +12,17 @@ dnl warranty.\n m4_define([_CHECK_ATOMIC_testbody], [[\n   #include <atomic>\n   #include <cstdint>\n+  #include <chrono>\n+\n+  using namespace std::chrono_literals;\n \n   int main() {\n+    std::atomic<bool> lock{true};\n+    std::atomic_exchange(&lock, false);\n+\n+    std::atomic<std::chrono::seconds> t{0s};\n+    t.store(2s);\n+\n     std::atomic<int64_t> a{};\n \n     int64_t v = 5;"
      },
      {
        "sha": "38923a98fc966a932118c550e05ad3de91bf2cb2",
        "filename": "build-aux/m4/l_socket.m4",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build-aux/m4/l_socket.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build-aux/m4/l_socket.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/l_socket.m4?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,36 @@\n+# Illumos/SmartOS requires linking with -lsocket if\n+# using getifaddrs & freeifaddrs\n+\n+m4_define([_CHECK_SOCKET_testbody], [[\n+  #include <sys/types.h>\n+  #include <ifaddrs.h>\n+\n+  int main() {\n+    struct ifaddrs *ifaddr;\n+    getifaddrs(&ifaddr);\n+    freeifaddrs(ifaddr);\n+  }\n+]])\n+\n+AC_DEFUN([CHECK_SOCKET], [\n+\n+  AC_LANG_PUSH(C++)\n+\n+  AC_MSG_CHECKING([whether ifaddrs funcs can be used without link library])\n+\n+  AC_LINK_IFELSE([AC_LANG_SOURCE([_CHECK_SOCKET_testbody])],[\n+      AC_MSG_RESULT([yes])\n+    ],[\n+      AC_MSG_RESULT([no])\n+      LIBS=\"$LIBS -lsocket\"\n+      AC_MSG_CHECKING([whether getifaddrs needs -lsocket])\n+      AC_LINK_IFELSE([AC_LANG_SOURCE([_CHECK_SOCKET_testbody])],[\n+          AC_MSG_RESULT([yes])\n+        ],[\n+          AC_MSG_RESULT([no])\n+          AC_MSG_FAILURE([cannot figure out how to use getifaddrs])\n+        ])\n+    ])\n+\n+  AC_LANG_POP\n+])"
      },
      {
        "sha": "88a05644a73a71ed0ade296ff19dfcb0fe6967d9",
        "filename": "build_msvc/README.md",
        "status": "modified",
        "additions": 30,
        "deletions": 10,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -3,7 +3,7 @@ Building Bitcoin Core with Visual Studio\n \n Introduction\n ---------------------\n-Solution and project files to build the Bitcoin Core applications `msbuild` or Visual Studio can be found in the `build_msvc` directory. The build has been tested with Visual Studio 2017 and 2019.\n+Solution and project files to build the Bitcoin Core applications `msbuild` or Visual Studio can be found in the `build_msvc` directory. The build has been tested with Visual Studio 2019 (building with earlier versions of Visual Studio should not be expected to work).\n \n Building with Visual Studio is an alternative to the Linux based [cross-compiler build](https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md).\n \n@@ -27,11 +27,15 @@ Options for installing the dependencies in a Visual Studio compatible manner are\n - Download the source code, build each dependency, add the required include paths, link libraries and binary tools to the Visual Studio project files.\n - Use [nuget](https://www.nuget.org/) packages with the understanding that any binary files have been compiled by an untrusted third party.\n \n-The [external dependencies](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) required for building are listed in the `build_msvc/vcpkg.json` file. The `msbuild` project files are configured to automatically install the `vcpkg` dependencies.\n+The [external dependencies](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) required for building are listed in the `build_msvc/vcpkg.json` file. To ensure `msbuild` project files automatically install the `vcpkg` dependencies use:\n+\n+```\n+vcpkg integrate install\n+```\n \n Qt\n ---------------------\n-In order to build the Bitcoin Core a static build of Qt is required. The runtime library version (e.g. v141, v142) and platform type (x86 or x64) must also match.\n+In order to build Bitcoin Core a static build of Qt is required. The runtime library version (e.g. v142) and platform type (x86 or x64) must also match.\n \n Some prebuilt x64 versions of Qt can be downloaded from [here](https://github.com/sipsorcery/qt_win_binary/releases). Please be aware these downloads are NOT officially sanctioned by Bitcoin Core and are provided for developer convenience only. They should NOT be used for builds that will be used in a production environment or with real funds.\n \n@@ -53,19 +57,13 @@ PS >py -3 msvc-autogen.py\n \n - An optional step is to adjust the settings in the `build_msvc` directory and the `common.init.vcxproj` file. This project file contains settings that are common to all projects such as the runtime library version and target Windows SDK version. The Qt directories can also be set.\n \n-- To build from the command line with the Visual Studio 2017 toolchain use:\n-\n-```\n-msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /p:PlatformToolset=v141 /t:build\n-```\n-\n - To build from the command line with the Visual Studio 2019 toolchain use:\n \n ```\n msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n ```\n \n-- Alternatively open the `build_msvc/bitcoin.sln` file in Visual Studio.\n+- Alternatively, open the `build_msvc/bitcoin.sln` file in Visual Studio 2019.\n \n AppVeyor\n ---------------------\n@@ -77,3 +75,25 @@ For safety reasons the Bitcoin Core .appveyor.yml file has the artifact options\n     #- 7z a bitcoin-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\\build_msvc\\%platform%\\%configuration%\\*.exe\n     #- path: bitcoin-%APPVEYOR_BUILD_VERSION%.zip\n ```\n+\n+Security\n+---------------------\n+[Base address randomization](https://docs.microsoft.com/en-us/cpp/build/reference/dynamicbase-use-address-space-layout-randomization?view=msvc-160) is used to make Bitcoin Core more secure. When building Bitcoin using the `build_msvc` process base address randomization can be disabled by editing `common.init.vcproj` to change `RandomizedBaseAddress` from `true` to `false` and then rebuilding the project.\n+\n+To check if `bitcoind` has `RandomizedBaseAddress` enabled or disabled run\n+\n+```\n+.\\dumpbin.exe /headers src/bitcoind.exe\n+```\n+\n+If is it enabled then in the output `Dynamic base` will be listed in the `DLL characteristics` under `OPTIONAL HEADER VALUES` as shown below\n+\n+```\n+            8160 DLL characteristics\n+                   High Entropy Virtual Addresses\n+                   Dynamic base\n+                   NX compatible\n+                   Terminal Server Aware\n+```\n+\n+This may not disable all stack randomization as versions of windows employ additional stack randomization protections. These protections must be turned off in the OS configuration.\n\\ No newline at end of file"
      },
      {
        "sha": "a697c1dfb68cd0921f5e85e92e773692193eb34e",
        "filename": "build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -55,6 +55,7 @@\n       <AdditionalIncludeDirectories>$(QtIncludes);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n     <Link>\n+      <SubSystem>Windows</SubSystem>\n       <AdditionalDependencies>$(QtReleaseLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n       <AdditionalOptions>/ignore:4206 /LTCG:OFF</AdditionalOptions>\n     </Link>"
      },
      {
        "sha": "3a6aa4a83715081a1a5cbad193a3460f39182cea",
        "filename": "build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-util/bitcoin-util.vcxproj?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Project=\"..\\common.init.vcxproj\" />\n+  <PropertyGroup Label=\"Globals\">\n+    <ProjectGuid>{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}</ProjectGuid>\n+  </PropertyGroup>\n+  <PropertyGroup Label=\"Configuration\">\n+    <ConfigurationType>Application</ConfigurationType>\n+    <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\</OutDir>\n+  </PropertyGroup>\n+  <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\bitcoin-util.cpp\" />\n+  </ItemGroup>\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n+      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_common\\libbitcoin_common.vcxproj\">\n+      <Project>{7c87e378-df58-482e-aa2f-1bc129bc19ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n+      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n+      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n+      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n+      <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n+    </ProjectReference>\n+  </ItemGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n+</Project>"
      },
      {
        "sha": "7d8591c10bd02b7feeac9bf4b6c67aec8ea5a05b",
        "filename": "build_msvc/bitcoin.sln",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/bitcoin.sln",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/bitcoin.sln",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin.sln?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -32,6 +32,8 @@ Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bench_bitcoin\", \"bench_bitc\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-tx\", \"bitcoin-tx\\bitcoin-tx.vcxproj\", \"{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}\"\n EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-util\", \"bitcoin-util\\bitcoin-util.vcxproj\", \"{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}\"\n+EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-wallet\", \"bitcoin-wallet\\bitcoin-wallet.vcxproj\", \"{84DE8790-EDE3-4483-81AC-C32F15E861F4}\"\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_wallet_tool\", \"libbitcoin_wallet_tool\\libbitcoin_wallet_tool.vcxproj\", \"{F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}\""
      },
      {
        "sha": "e987aa64cb29f92ef5e551d86496340e4f74ce1d",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -15,7 +15,7 @@\n #define CLIENT_VERSION_IS_RELEASE false\n \n /* Major version */\n-#define CLIENT_VERSION_MAJOR 21\n+#define CLIENT_VERSION_MAJOR 22\n \n /* Minor version */\n #define CLIENT_VERSION_MINOR 99\n@@ -30,7 +30,7 @@\n #define COPYRIGHT_HOLDERS_SUBSTITUTION \"Bitcoin Core\"\n \n /* Copyright year */\n-#define COPYRIGHT_YEAR 2019\n+#define COPYRIGHT_YEAR 2021\n \n /* Define to 1 to enable wallet functions */\n #define ENABLE_WALLET 1\n@@ -50,15 +50,12 @@\n /* define if the Boost::Filesystem library is available */\n #define HAVE_BOOST_FILESYSTEM /**/\n \n-/* define if the Boost::Process library is available */\n-#define HAVE_BOOST_PROCESS /**/\n+/* define if external signer support is enabled (requires Boost::Process) */\n+#define ENABLE_EXTERNAL_SIGNER /**/\n \n /* define if the Boost::System library is available */\n #define HAVE_BOOST_SYSTEM /**/\n \n-/* define if the Boost::Thread library is available */\n-#define HAVE_BOOST_THREAD /**/\n-\n /* define if the Boost::Unit_Test_Framework library is available */\n #define HAVE_BOOST_UNIT_TEST_FRAMEWORK /**/\n \n@@ -95,9 +92,9 @@\n    don't. */\n #define HAVE_DECL_BSWAP_64 0\n \n-/* Define to 1 if you have the declaration of `daemon', and to 0 if you don't.\n+/* Define to 1 if you have the declaration of `fork', and to 0 if you don't.\n    */\n-#define HAVE_DECL_DAEMON 0\n+#define HAVE_DECL_FORK 0\n \n /* Define to 1 if you have the declaration of `htobe16', and to 0 if you\n    don't. */\n@@ -135,6 +132,10 @@\n    don't. */\n #define HAVE_DECL_LE64TOH 0\n \n+/* Define to 1 if you have the declaration of `setsid', and to 0 if you don't.\n+   */\n+#define HAVE_DECL_SETSID 0\n+\n /* Define to 1 if you have the declaration of `strerror_r', and to 0 if you\n    don't. */\n #define HAVE_DECL_STRERROR_R 0\n@@ -180,9 +181,6 @@\n /* Define to 1 if you have the <miniupnpc/miniupnpc.h> header file. */\n #define HAVE_MINIUPNPC_MINIUPNPC_H 1\n \n-/* Define to 1 if you have the <miniupnpc/miniwget.h> header file. */\n-#define HAVE_MINIUPNPC_MINIWGET_H 1\n-\n /* Define to 1 if you have the <miniupnpc/upnpcommands.h> header file. */\n #define HAVE_MINIUPNPC_UPNPCOMMANDS_H 1\n \n@@ -256,7 +254,7 @@\n #define PACKAGE_NAME \"Bitcoin Core\"\n \n /* Define to the full name and version of this package. */\n-#define PACKAGE_STRING \"Bitcoin Core 21.99.0\"\n+#define PACKAGE_STRING \"Bitcoin Core 22.99.0\"\n \n /* Define to the one symbol short name of this package. */\n #define PACKAGE_TARNAME \"bitcoin\"\n@@ -265,7 +263,7 @@\n #define PACKAGE_URL \"https://bitcoincore.org/\"\n \n /* Define to the version of this package. */\n-#define PACKAGE_VERSION \"21.99.0\"\n+#define PACKAGE_VERSION \"22.99.0\"\n \n /* Define to necessary symbol if this constant uses a non-standard name on\n    your system. */"
      },
      {
        "sha": "c2c32af8380801513340bc9b154ad9e4862cb4f1",
        "filename": "build_msvc/bitcoind/bitcoind.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/bitcoind/bitcoind.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/bitcoind/bitcoind.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoind/bitcoind.vcxproj?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -10,6 +10,9 @@\n   </PropertyGroup>\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\bitcoind.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\init\\bitcoind.cpp\">\n+      <ObjectFileName>$(IntDir)init_bitcoind.obj</ObjectFileName>\n+    </ClCompile>\n   </ItemGroup>\n   <ItemGroup>\n     <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">"
      },
      {
        "sha": "6ea018d8463dca3e38c5205f8d6357004078033a",
        "filename": "build_msvc/common.init.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/common.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/common.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.init.vcxproj?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -96,15 +96,16 @@\n     <ClCompile>\n       <WarningLevel>Level3</WarningLevel>\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <AdditionalOptions>/utf-8 /std:c++17 %(AdditionalOptions)</AdditionalOptions>\n-      <DisableSpecificWarnings>4018;4221;4244;4267;4334;4715;4805;4834</DisableSpecificWarnings>\n+      <AdditionalOptions>/utf-8 /Zc:__cplusplus /std:c++17 %(AdditionalOptions)</AdditionalOptions>\n+      <DisableSpecificWarnings>4018;4244;4267;4334;4715;4805;4834</DisableSpecificWarnings>\n       <TreatWarningAsError>true</TreatWarningAsError>\n       <PreprocessorDefinitions>_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING;_SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING;ZMQ_STATIC;NOMINMAX;WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;_WIN32_WINNT=0x0601;_WIN32_IE=0x0501;WIN32_LEAN_AND_MEAN;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n     <Link>\n       <SubSystem>Console</SubSystem>\n       <AdditionalDependencies>Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n+      <RandomizedBaseAddress>true</RandomizedBaseAddress>\n     </Link>\n     <Lib>\n       <AdditionalOptions>/ignore:4221</AdditionalOptions>"
      },
      {
        "sha": "ce66a7ab34b95fc6e5692fecb568090a2122fa72",
        "filename": "build_msvc/common.qt.init.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/common.qt.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/common.qt.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.qt.init.vcxproj?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -2,15 +2,15 @@\n <Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n \n   <PropertyGroup Label=\"QtGlobals\">\n-    <QtBaseDir>C:\\Qt5.9.8_x64_static_vs2019</QtBaseDir>\n+    <QtBaseDir>C:\\Qt5.12.11_x64_static_vs2019_16101</QtBaseDir>\n     <QtPluginsLibraryDir>$(QtBaseDir)\\plugins</QtPluginsLibraryDir>\n     <QtLibraryDir>$(QtBaseDir)\\lib</QtLibraryDir>\n     <QtIncludeDir>$(QtBaseDir)\\include</QtIncludeDir>\n     <QtIncludes>$(QtIncludeDir);$(QtIncludeDir)\\QtNetwork;$(QtIncludeDir)\\QtCore;$(QtIncludeDir)\\QtWidgets;$(QtIncludeDir)\\QtGui;</QtIncludes>\n     <GeneratedFilesOutDir>.\\QtGeneratedFiles\\qt</GeneratedFilesOutDir>\n     <QtToolsDir>$(QtBaseDir)\\bin</QtToolsDir>\n-    <QtReleaseLibraries>$(QtPluginsLibraryDir)\\platforms\\qminimal.lib;$(QtPluginsLibraryDir)\\platforms\\qwindows.lib;$(QtLibraryDir)\\qtfreetype.lib;$(QtLibraryDir)\\qtharfbuzz.lib;$(QtLibraryDir)\\qtlibpng.lib;$(QtLibraryDir)\\qtpcre2.lib;$(QtLibraryDir)\\Qt5AccessibilitySupport.lib;$(QtLibraryDir)\\Qt5Core.lib;$(QtLibraryDir)\\Qt5Concurrent.lib;$(QtLibraryDir)\\Qt5EventDispatcherSupport.lib;$(QtLibraryDir)\\Qt5FontDatabaseSupport.lib;$(QtLibraryDir)\\Qt5Gui.lib;$(QtLibraryDir)\\Qt5Network.lib;$(QtLibraryDir)\\Qt5PlatformCompositorSupport.lib;$(QtLibraryDir)\\Qt5ThemeSupport.lib;$(QtLibraryDir)\\Qt5Widgets.lib;$(QtLibraryDir)\\Qt5WinExtras.lib;$(QtLibraryDir)\\qtmain.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtReleaseLibraries>\n-    <QtDebugLibraries>$(QtPluginsLibraryDir)\\platforms\\qwindowsd.lib;$(QtPluginsLibraryDir)\\platforms\\qminimald.lib;$(QtLibraryDir)\\*d.lib;crypt32.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtDebugLibraries>\n+    <QtReleaseLibraries>$(QtPluginsLibraryDir)\\platforms\\qminimal.lib;$(QtPluginsLibraryDir)\\platforms\\qwindows.lib;$(QtPluginsLibraryDir)\\styles\\qwindowsvistastyle.lib;$(QtLibraryDir)\\Qt5WindowsUIAutomationSupport.lib;$(QtLibraryDir)\\qtfreetype.lib;$(QtLibraryDir)\\qtharfbuzz.lib;$(QtLibraryDir)\\qtlibpng.lib;$(QtLibraryDir)\\qtpcre2.lib;$(QtLibraryDir)\\Qt5AccessibilitySupport.lib;$(QtLibraryDir)\\Qt5Core.lib;$(QtLibraryDir)\\Qt5Concurrent.lib;$(QtLibraryDir)\\Qt5EventDispatcherSupport.lib;$(QtLibraryDir)\\Qt5FontDatabaseSupport.lib;$(QtLibraryDir)\\Qt5Gui.lib;$(QtLibraryDir)\\Qt5Network.lib;$(QtLibraryDir)\\Qt5PlatformCompositorSupport.lib;$(QtLibraryDir)\\Qt5ThemeSupport.lib;$(QtLibraryDir)\\Qt5Widgets.lib;$(QtLibraryDir)\\Qt5WinExtras.lib;$(QtLibraryDir)\\qtmain.lib;Wtsapi32.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtReleaseLibraries>\n+    <QtDebugLibraries>$(QtPluginsLibraryDir)\\platforms\\qwindowsd.lib;$(QtPluginsLibraryDir)\\platforms\\qminimald.lib;$(QtPluginsLibraryDir)\\styles\\qwindowsvistastyled.lib;$(QtLibraryDir)\\*d.lib;Wtsapi32.lib;crypt32.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtDebugLibraries>\n   </PropertyGroup>\n \n </Project>"
      },
      {
        "sha": "6c45d4dbd8a0f194c847196a4ad0740bf5ef4705",
        "filename": "build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -24,6 +24,7 @@\n     <ClCompile Include=\"..\\..\\src\\qt\\csvmodelwriter.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\editaddressdialog.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\guiutil.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\initexecutor.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\intro.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\modaloverlay.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\networkstyle.cpp\" />\n@@ -34,6 +35,7 @@\n     <ClCompile Include=\"..\\..\\src\\qt\\overviewpage.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\paymentserver.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\peertablemodel.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\peertablesortproxy.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\platformstyle.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\psbtoperationsdialog.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\qrimagewidget.cpp\" />\n@@ -77,6 +79,7 @@\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_csvmodelwriter.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_editaddressdialog.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_guiutil.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_initexecutor.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_intro.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_modaloverlay.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_networkstyle.cpp\" />\n@@ -87,6 +90,7 @@\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_overviewpage.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_paymentserver.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_peertablemodel.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_peertablesortproxy.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_platformstyle.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_psbtoperationsdialog.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_qrimagewidget.cpp\" />\n@@ -104,6 +108,7 @@\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiondesc.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiondescdialog.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionfilterproxy.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionoverviewwidget.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionrecord.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiontablemodel.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionview.cpp\" />"
      },
      {
        "sha": "009be30decbf11fb95aafbcc935809706b6cd186",
        "filename": "build_msvc/libleveldb/libleveldb.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/libleveldb/libleveldb.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/libleveldb/libleveldb.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libleveldb/libleveldb.vcxproj?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -51,7 +51,7 @@\n   <ItemDefinitionGroup>\n      <ClCompile>\n        <PreprocessorDefinitions>HAVE_CRC32C=0;HAVE_SNAPPY=0;__STDC_LIMIT_MACROS;LEVELDB_IS_BIG_ENDIAN=0;_UNICODE;UNICODE;_CRT_NONSTDC_NO_DEPRECATE;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-       <DisableSpecificWarnings>4244;4267;4312;4722;</DisableSpecificWarnings>\n+       <DisableSpecificWarnings>4244;4267</DisableSpecificWarnings>\n        <AdditionalIncludeDirectories>..\\..\\src\\leveldb;..\\..\\src\\leveldb\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n      </ClCompile>\n   </ItemDefinitionGroup>"
      },
      {
        "sha": "f9b0a7975cb9198dc0a1b6375b5fffd46663ac76",
        "filename": "build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libsecp256k1/libsecp256k1.vcxproj?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -10,13 +10,14 @@\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\secp256k1\\src\\secp256k1.c\" />\n   </ItemGroup>\n-    <ItemDefinitionGroup>\n+  <ItemDefinitionGroup>\n     <ClCompile>\n       <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;ENABLE_MODULE_EXTRAKEYS;ENABLE_MODULE_SCHNORRSIG;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-       <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n-     </ClCompile>\n+      <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n+      <DisableSpecificWarnings>4146;4244;4267;4334</DisableSpecificWarnings>\n+    </ClCompile>\n   </ItemDefinitionGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n   <Import Project=\"..\\common.vcxproj\" />\n-</Project>\n\\ No newline at end of file\n+</Project>"
      },
      {
        "sha": null,
        "filename": "build_msvc/msvc-autogen.py",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/msvc-autogen.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/msvc-autogen.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msvc-autogen.py?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "1d2c86b7ace65877b5cfa70e3c73df570f67dd2b",
        "filename": "build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -11,7 +11,6 @@\n     <ClCompile Include=\"..\\..\\src\\test\\util\\setup_common.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\addressbooktests.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\apptests.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\qt\\test\\compattests.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\rpcnestedtests.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\test_main.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\uritests.cpp\" />\n@@ -20,7 +19,6 @@\n     <ClCompile Include=\"..\\..\\src\\wallet\\test\\wallet_test_fixture.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_addressbooktests.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_apptests.cpp\" />\n-    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_compattests.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_rpcnestedtests.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_uritests.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_wallettests.cpp\" />\n@@ -89,7 +87,6 @@\n   <ItemGroup>\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\addressbooktests.h\" />\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\apptests.h\" />\n-    <MocTestFiles Include=\"..\\..\\src\\qt\\test\\compattests.h\" />\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\rpcnestedtests.h\" />\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\uritests.h\" />\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\wallettests.h\" />"
      },
      {
        "sha": "f3c8517130b34b0d25af88724b77e178faf0e768",
        "filename": "build_msvc/testconsensus/testconsensus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/testconsensus/testconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/testconsensus/testconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/testconsensus/testconsensus.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Copyright (c) 2018-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -45,7 +45,7 @@ int main()\n     stream << vanillaSpendTx;\n \n     bitcoinconsensus_error err;\n-    auto op0Result = bitcoinconsensus_verify_script_with_amount(pubKeyScript.data(), pubKeyScript.size(), amount, (const unsigned char*)&stream[0], stream.size(), 0, bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL, &err);\n+    auto op0Result = bitcoinconsensus_verify_script_with_amount(pubKeyScript.data(), pubKeyScript.size(), amount, stream.data(), stream.size(), 0, bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL, &err);\n     std::cout << \"Op0 result: \" << op0Result << \", error code \" << err << std::endl;\n \n     getchar();"
      },
      {
        "sha": "42b9a5d16fc0f91956fe0bdbb50cd3a6603e5d73",
        "filename": "build_msvc/vcpkg.json",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/vcpkg.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/build_msvc/vcpkg.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/vcpkg.json?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -8,7 +8,6 @@\n     \"boost-process\",\n     \"boost-signals2\",\n     \"boost-test\",\n-    \"boost-thread\",\n     \"sqlite3\",\n     \"double-conversion\",\n     {"
      },
      {
        "sha": "2c63a9efac8acfb828d408b08505d60426c0ed20",
        "filename": "ci/lint/04_install.sh",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/lint/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/lint/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/04_install.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,20 +1,22 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C\n \n-travis_retry sudo apt update && sudo apt install -y clang-format-9\n-sudo update-alternatives --install /usr/bin/clang-format      clang-format      $(which clang-format-9     ) 100\n-sudo update-alternatives --install /usr/bin/clang-format-diff clang-format-diff $(which clang-format-diff-9) 100\n+${CI_RETRY_EXE} apt-get update\n+${CI_RETRY_EXE} apt-get install -y clang-format-9 python3-pip curl git gawk jq\n+update-alternatives --install /usr/bin/clang-format      clang-format      $(which clang-format-9     ) 100\n+update-alternatives --install /usr/bin/clang-format-diff clang-format-diff $(which clang-format-diff-9) 100\n \n-travis_retry pip3 install codespell==1.17.1\n-travis_retry pip3 install flake8==3.8.3\n-travis_retry pip3 install yq\n-travis_retry pip3 install mypy==0.781\n+${CI_RETRY_EXE} pip3 install codespell==2.0.0\n+${CI_RETRY_EXE} pip3 install flake8==3.8.3\n+${CI_RETRY_EXE} pip3 install yq\n+${CI_RETRY_EXE} pip3 install mypy==0.781\n+${CI_RETRY_EXE} pip3 install vulture==2.3\n \n-SHELLCHECK_VERSION=v0.7.1\n+SHELLCHECK_VERSION=v0.7.2\n curl -sL \"https://github.com/koalaman/shellcheck/releases/download/${SHELLCHECK_VERSION}/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz\" | tar --xz -xf - --directory /tmp/\n export PATH=\"/tmp/shellcheck-${SHELLCHECK_VERSION}:${PATH}\""
      },
      {
        "sha": "2987812c8e64bab1648a3dc04492b1d338cdf047",
        "filename": "ci/lint/05_before_script.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/ci/lint/05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/ci/lint/05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/05_before_script.sh?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,9 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C\n-\n-git fetch --unshallow"
      },
      {
        "sha": "e38cfe8eefd21e8426368d30c1da6de1c67f4840",
        "filename": "ci/lint/06_script.sh",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/lint/06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/lint/06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/06_script.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,30 +1,33 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C\n \n-if [ \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then\n-  # TRAVIS_BRANCH will be present in a Travis environment. For builds triggered\n-  # by a pull request this is the name of the branch targeted by the pull request.\n-  # https://docs.travis-ci.com/user/environment-variables/\n-  COMMIT_RANGE=\"$TRAVIS_BRANCH..HEAD\"\n+GIT_HEAD=$(git rev-parse HEAD)\n+if [ -n \"$CIRRUS_PR\" ]; then\n+  COMMIT_RANGE=\"$CIRRUS_BASE_SHA..$GIT_HEAD\"\n   test/lint/commit-script-check.sh $COMMIT_RANGE\n fi\n+export COMMIT_RANGE\n \n+# This only checks that the trees are pure subtrees, it is not doing a full\n+# check with -r to not have to fetch all the remotes.\n test/lint/git-subtree-check.sh src/crypto/ctaes\n test/lint/git-subtree-check.sh src/secp256k1\n test/lint/git-subtree-check.sh src/univalue\n test/lint/git-subtree-check.sh src/leveldb\n test/lint/git-subtree-check.sh src/crc32c\n test/lint/check-doc.py\n-test/lint/check-rpc-mappings.py .\n test/lint/lint-all.sh\n \n-if [ \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" ] && [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then\n+if [ \"$CIRRUS_REPO_FULL_NAME\" = \"bitcoin/bitcoin\" ] && [ -n \"$CIRRUS_CRON\" ]; then\n     git log --merges --before=\"2 days ago\" -1 --format='%H' > ./contrib/verify-commits/trusted-sha512-root-commit\n-    travis_retry gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $(<contrib/verify-commits/trusted-keys) &&\n+    ${CI_RETRY_EXE}  gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $(<contrib/verify-commits/trusted-keys) &&\n     ./contrib/verify-commits/verify-commits.py --clean-merge=2;\n fi\n+\n+echo\n+git log --no-merges --oneline $COMMIT_RANGE"
      },
      {
        "sha": "7adfe71674149d0215c08beabb45ba0bbc9cf1fc",
        "filename": "ci/lint_run_all.sh",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/lint_run_all.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/lint_run_all.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint_run_all.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,11 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+set -o errexit; source ./ci/test/00_setup_env.sh\n+set -o errexit; source ./ci/lint/04_install.sh\n+set -o errexit; source ./ci/lint/06_script.sh"
      },
      {
        "sha": "8a9d808f5de9aa9471d99e205ececc278d42ef7d",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -11,6 +11,12 @@ export LC_ALL=C.UTF-8\n # This is where the depends build is done.\n BASE_ROOT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\"/../../ >/dev/null 2>&1 && pwd )\n export BASE_ROOT_DIR\n+# The depends dir.\n+# This folder exists on the ci host and ci guest. Changes are propagated back and forth.\n+export DEPENDS_DIR=${DEPENDS_DIR:-$BASE_ROOT_DIR/depends}\n+# A folder for the ci system to put temporary files (ccache, datadirs for tests, ...)\n+# This folder only exists on the ci host.\n+export BASE_SCRATCH_DIR=${BASE_SCRATCH_DIR:-$BASE_ROOT_DIR/ci/scratch}\n \n echo \"Setting specific values in env\"\n if [ -n \"${FILE_ENV}\" ]; then\n@@ -22,9 +28,6 @@ fi\n echo \"Fallback to default values in env (if not yet set)\"\n # The number of parallel jobs to pass down to make and test_runner.py\n export MAKEJOBS=${MAKEJOBS:--j4}\n-# A folder for the ci system to put temporary files (ccache, datadirs for tests, ...)\n-# This folder only exists on the ci host.\n-export BASE_SCRATCH_DIR=${BASE_SCRATCH_DIR:-$BASE_ROOT_DIR/ci/scratch}\n # What host to compile for. See also ./depends/README.md\n # Tests that need cross-compilation export the appropriate HOST.\n # Tests that run natively guess the host\n@@ -44,7 +47,7 @@ export RUN_FUZZ_TESTS=${RUN_FUZZ_TESTS:-false}\n export EXPECTED_TESTS_DURATION_IN_SECONDS=${EXPECTED_TESTS_DURATION_IN_SECONDS:-1000}\n \n export CONTAINER_NAME=${CONTAINER_NAME:-ci_unnamed}\n-export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:18.04}\n+export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:20.04}\n # Randomize test order.\n # See https://www.boost.org/doc/libs/1_71_0/libs/test/doc/html/boost_test/utf_reference/rt_param_reference/random.html\n export BOOST_TEST_RANDOM=${BOOST_TEST_RANDOM:-1}\n@@ -56,16 +59,13 @@ export CCACHE_COMPRESS=${CCACHE_COMPRESS:-1}\n # The cache dir.\n # This folder exists on the ci host and ci guest. Changes are propagated back and forth.\n export CCACHE_DIR=${CCACHE_DIR:-$BASE_SCRATCH_DIR/.ccache}\n-# The depends dir.\n-# This folder exists on the ci host and ci guest. Changes are propagated back and forth.\n-export DEPENDS_DIR=${DEPENDS_DIR:-$BASE_ROOT_DIR/depends}\n # Folder where the build result is put (bin and lib).\n export BASE_OUTDIR=${BASE_OUTDIR:-$BASE_SCRATCH_DIR/out/$HOST}\n # Folder where the build is done (dist and out-of-tree build).\n export BASE_BUILD_DIR=${BASE_BUILD_DIR:-$BASE_SCRATCH_DIR/build}\n export PREVIOUS_RELEASES_DIR=${PREVIOUS_RELEASES_DIR:-$BASE_ROOT_DIR/releases/$HOST}\n export SDK_URL=${SDK_URL:-https://bitcoincore.org/depends-sources/sdks}\n-export DOCKER_PACKAGES=${DOCKER_PACKAGES:-build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3 rsync git procps}\n+export DOCKER_PACKAGES=${DOCKER_PACKAGES:-build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3 rsync git procps bison}\n export GOAL=${GOAL:-install}\n export DIR_QA_ASSETS=${DIR_QA_ASSETS:-${BASE_SCRATCH_DIR}/qa-assets}\n export PATH=${BASE_ROOT_DIR}/ci/retry:$PATH"
      },
      {
        "sha": "4ef3ae1ceb97dd8eae5dcb80cf239fe3cb06b302",
        "filename": "ci/test/00_setup_env_android.sh",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_android.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_android.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_android.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,25 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=aarch64-linux-android\n+export PACKAGES=\"clang llvm unzip openjdk-8-jdk gradle\"\n+export CONTAINER_NAME=ci_android\n+export DOCKER_NAME_TAG=\"ubuntu:focal\"\n+\n+export RUN_UNIT_TESTS=false\n+export RUN_FUNCTIONAL_TESTS=false\n+\n+export ANDROID_API_LEVEL=28\n+export ANDROID_BUILD_TOOLS_VERSION=28.0.3\n+export ANDROID_NDK_VERSION=22.1.7171670\n+export ANDROID_TOOLS_URL=https://dl.google.com/android/repository/commandlinetools-linux-6609375_latest.zip\n+export ANDROID_HOME=\"${DEPENDS_DIR}/SDKs/android\"\n+export ANDROID_NDK_HOME=\"${ANDROID_HOME}/ndk/${ANDROID_NDK_VERSION}\"\n+export DEP_OPTS=\"ANDROID_SDK=${ANDROID_HOME} ANDROID_NDK=${ANDROID_NDK_HOME} ANDROID_API_LEVEL=${ANDROID_API_LEVEL} ANDROID_TOOLCHAIN_BIN=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/\"\n+\n+export BITCOIN_CONFIG=\"--disable-ccache\""
      },
      {
        "sha": "8d2b70e549c9af0435891eff2b2f7ed19d2684d9",
        "filename": "ci/test/00_setup_env_arm.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_arm.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_arm.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_arm.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -25,4 +25,4 @@ export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"install\"\n # -Wno-psabi is to disable ABI warnings: \"note: parameter passing for argument of type ... changed in GCC 7.1\"\n # This could be removed once the ABI change warning does not show up by default\n-export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi --with-boost-process\"\n+export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi\""
      },
      {
        "sha": "2ddb93290706e0aa52503dbcc4bbb29108016e5c",
        "filename": "ci/test/00_setup_env_i686_centos.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_i686_centos.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_i686_centos.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_i686_centos.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -9,8 +9,8 @@ export LC_ALL=C.UTF-8\n export HOST=i686-pc-linux-gnu\n export CONTAINER_NAME=ci_i686_centos_8\n export DOCKER_NAME_TAG=centos:8\n-export DOCKER_PACKAGES=\"gcc-c++ glibc-devel.x86_64 libstdc++-devel.x86_64 glibc-devel.i686 libstdc++-devel.i686 ccache libtool make git python3 python3-zmq which patch lbzip2 dash rsync coreutils\"\n+export DOCKER_PACKAGES=\"gcc-c++ glibc-devel.x86_64 libstdc++-devel.x86_64 glibc-devel.i686 libstdc++-devel.i686 ccache libtool make git python3 python3-zmq which patch lbzip2 dash rsync coreutils bison\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-reduce-exports --with-boost-process\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-reduce-exports\"\n export CONFIG_SHELL=\"/bin/dash\"\n export TEST_RUNNER_ENV=\"LC_ALL=en_US.UTF-8\""
      },
      {
        "sha": "73ac09c1de1c6199e5f90cefd969db15b49dce96",
        "filename": "ci/test/00_setup_env_mac.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_mac.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_mac.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -7,12 +7,12 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_macos_cross\n-export DOCKER_NAME_TAG=ubuntu:18.04  # Check that bionic can cross-compile to macos (bionic is used in the gitian build as well)\n+export DOCKER_NAME_TAG=ubuntu:20.04  # Check that Focal can cross-compile to macos (Focal is used in the gitian build as well)\n export HOST=x86_64-apple-darwin18\n-export PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools\"\n-export XCODE_VERSION=11.3.1\n-export XCODE_BUILD_ID=11C505\n+export PACKAGES=\"cmake imagemagick librsvg2-bin libz-dev libtiff-tools libtinfo5 python3-setuptools xorriso\"\n+export XCODE_VERSION=12.1\n+export XCODE_BUILD_ID=12A7403\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"deploy\"\n-export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports --with-boost-process\"\n+export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports\""
      },
      {
        "sha": "c0d951a04171535372a71cda362d8c3427fd9d24",
        "filename": "ci/test/00_setup_env_mac_host.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_mac_host.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_mac_host.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac_host.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -7,12 +7,11 @@\n export LC_ALL=C.UTF-8\n \n export HOST=x86_64-apple-darwin18\n-export PIP_PACKAGES=\"zmq\"\n+export PIP_PACKAGES=\"zmq lief\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports --with-boost-process\"\n+export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports\"\n export CI_OS_NAME=\"macos\"\n export NO_DEPENDS=1\n export OSX_SDK=\"\"\n export CCACHE_SIZE=300M\n-\n export RUN_SECURITY_TESTS=\"true\""
      },
      {
        "sha": "ab185b6e7142f98fa44792677d5e6aa9760db532",
        "filename": "ci/test/00_setup_env_native_asan.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_asan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_asan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_asan.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -7,8 +7,8 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_asan\n-export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev libsqlite3-dev\"\n-export DOCKER_NAME_TAG=ubuntu:20.04\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libqrencode-dev libsqlite3-dev\"\n+export DOCKER_NAME_TAG=ubuntu:hirsute\n export NO_DEPENDS=1\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=address,integer,undefined CC=clang CXX=clang++ --with-boost-process\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\""
      },
      {
        "sha": "58388fa92882193ffc8559009bf660d0392acd4a",
        "filename": "ci/test/00_setup_env_native_fuzz.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_fuzz.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_fuzz.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -8,11 +8,11 @@ export LC_ALL=C.UTF-8\n \n export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_fuzz\n-export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev\"\n+export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev\"\n export NO_DEPENDS=1\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export RUN_FUZZ_TESTS=true\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=clang CXX=clang++ --with-boost-process\"\n+export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address,undefined,integer CC=clang CXX=clang++\"\n export CCACHE_SIZE=200M"
      },
      {
        "sha": "d5b28ca5cf02b50723eb83fae386980a9c282ef6",
        "filename": "ci/test/00_setup_env_native_fuzz_with_msan.sh",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_fuzz_with_msan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_fuzz_with_msan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz_with_msan.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,24 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n+LIBCXX_DIR=\"${BASE_SCRATCH_DIR}/msan/build/\"\n+export MSAN_FLAGS=\"-fsanitize=memory -fsanitize-memory-track-origins=2 -fno-omit-frame-pointer -g -O1 -fno-optimize-sibling-calls\"\n+LIBCXX_FLAGS=\"-nostdinc++ -stdlib=libc++ -L${LIBCXX_DIR}lib -lc++abi -I${LIBCXX_DIR}include -I${LIBCXX_DIR}include/c++/v1 -lpthread -Wl,-rpath,${LIBCXX_DIR}lib -Wno-unused-command-line-argument\"\n+export MSAN_AND_LIBCXX_FLAGS=\"${MSAN_FLAGS} ${LIBCXX_FLAGS}\"\n+\n+export CONTAINER_NAME=\"ci_native_msan\"\n+export PACKAGES=\"clang-9 llvm-9 cmake\"\n+export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++17 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' libevent_cflags='${MSAN_FLAGS}' zeromq_cxxflags='-std=c++17 ${MSAN_AND_LIBCXX_FLAGS}'\"\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,memory --with-asm=no --prefix=${DEPENDS_DIR}/x86_64-pc-linux-gnu/ CC=clang CXX=clang++ CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}'\"\n+export USE_MEMORY_SANITIZER=\"true\"\n+export RUN_UNIT_TESTS=\"false\"\n+export RUN_FUNCTIONAL_TESTS=\"false\"\n+export RUN_FUZZ_TESTS=true\n+export CCACHE_SIZE=250M"
      },
      {
        "sha": "2cf672b91ee894975ba0c274a786d29bab42eabb",
        "filename": "ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz_with_valgrind.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -8,7 +8,7 @@ export LC_ALL=C.UTF-8\n \n export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_fuzz_valgrind\n-export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev valgrind\"\n+export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev valgrind\"\n export NO_DEPENDS=1\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false"
      },
      {
        "sha": "7bcf9f23a2b96622157d459a3613d6db381120fb",
        "filename": "ci/test/00_setup_env_native_msan.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_msan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_msan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_msan.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -7,17 +7,17 @@\n export LC_ALL=C.UTF-8\n \n export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n-LIBCXX_DIR=\"${BASE_ROOT_DIR}/ci/scratch/msan/build/\"\n+LIBCXX_DIR=\"${BASE_SCRATCH_DIR}/msan/build/\"\n export MSAN_FLAGS=\"-fsanitize=memory -fsanitize-memory-track-origins=2 -fno-omit-frame-pointer -g -O1 -fno-optimize-sibling-calls\"\n LIBCXX_FLAGS=\"-nostdinc++ -stdlib=libc++ -L${LIBCXX_DIR}lib -lc++abi -I${LIBCXX_DIR}include -I${LIBCXX_DIR}include/c++/v1 -lpthread -Wl,-rpath,${LIBCXX_DIR}lib -Wno-unused-command-line-argument\"\n export MSAN_AND_LIBCXX_FLAGS=\"${MSAN_FLAGS} ${LIBCXX_FLAGS}\"\n export BDB_PREFIX=\"${BASE_ROOT_DIR}/db4\"\n \n export CONTAINER_NAME=\"ci_native_msan\"\n export PACKAGES=\"clang-9 llvm-9 cmake\"\n-export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++17 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++17 ${MSAN_AND_LIBCXX_FLAGS}'\"\n+export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++17 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' libevent_cflags='${MSAN_FLAGS}' sqlite_cflags='${MSAN_FLAGS}' zeromq_cxxflags='-std=c++17 ${MSAN_AND_LIBCXX_FLAGS}'\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-wallet --with-sanitizers=memory --with-asm=no --prefix=${BASE_ROOT_DIR}/depends/x86_64-pc-linux-gnu/ CC=clang CXX=clang++ CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' BDB_LIBS='-L${BDB_PREFIX}/lib -ldb_cxx-4.8' BDB_CFLAGS='-I${BDB_PREFIX}/include'\"\n+export BITCOIN_CONFIG=\"--enable-wallet --with-sanitizers=memory --with-asm=no --prefix=${DEPENDS_DIR}/x86_64-pc-linux-gnu/ CC=clang CXX=clang++ CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' BDB_LIBS='-L${BDB_PREFIX}/lib -ldb_cxx-4.8' BDB_CFLAGS='-I${BDB_PREFIX}/include'\"\n export USE_MEMORY_SANITIZER=\"true\"\n export RUN_FUNCTIONAL_TESTS=\"false\"\n export CCACHE_SIZE=250M"
      },
      {
        "sha": "8869b2a08396a24be4f67b1397cb7a8973f057c0",
        "filename": "ci/test/00_setup_env_native_multiprocess.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_multiprocess.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_multiprocess.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_multiprocess.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -8,8 +8,9 @@ export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_multiprocess\n export DOCKER_NAME_TAG=ubuntu:20.04\n-export PACKAGES=\"cmake python3\"\n-export DEP_OPTS=\"MULTIPROCESS=1\"\n+export PACKAGES=\"cmake python3 python3-pip llvm clang\"\n+export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--with-boost-process\"\n+export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n export TEST_RUNNER_ENV=\"BITCOIND=bitcoin-node\"\n+export PIP_PACKAGES=\"lief\""
      },
      {
        "sha": "d167c9198ad29d96bf97dda37c5efdaeeecbddd5",
        "filename": "ci/test/00_setup_env_native_nowallet.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_nowallet.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_nowallet.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_nowallet.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -11,4 +11,4 @@ export DOCKER_NAME_TAG=ubuntu:18.04  # Use bionic to have one config run the tes\n export PACKAGES=\"python3-zmq clang-5.0 llvm-5.0\"  # Use clang-5 to test C++17 compatibility, see doc/dependencies.md\n export DEP_OPTS=\"NO_WALLET=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CC=clang-5.0 CXX=clang++-5.0 --with-boost-process\"\n+export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CC=clang-5.0 CXX=clang++-5.0\""
      },
      {
        "sha": "b3e967c89866eb44809b1da6f236eca98795b772",
        "filename": "ci/test/00_setup_env_native_qt5.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_qt5.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_qt5.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_qt5.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -9,11 +9,11 @@ export LC_ALL=C.UTF-8\n export CONTAINER_NAME=ci_native_qt5\n export DOCKER_NAME_TAG=ubuntu:18.04  # Check that bionic gcc-7 can compile our c++17 and run our functional tests in python3, see doc/dependencies.md\n export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libdbus-1-dev libharfbuzz-dev\"\n-export DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n+export DEP_OPTS=\"NO_QT=1 NO_UPNP=1 NO_NATPMP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n export TEST_RUNNER_EXTRA=\"--previous-releases --coverage --extended --exclude feature_dbcrash\"  # Run extended tests so that coverage does not fail, but exclude the very slow dbcrash\n-export RUN_SECURITY_TESTS=\"true\"\n export RUN_UNIT_TESTS_SEQUENTIAL=\"true\"\n export RUN_UNIT_TESTS=\"false\"\n export GOAL=\"install\"\n-export PREVIOUS_RELEASES_TO_DOWNLOAD=\"v0.15.2 v0.16.3 v0.17.2 v0.18.1 v0.19.1\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-libs=no --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\" --with-boost-process\"\n+export PREVIOUS_RELEASES_TO_DOWNLOAD=\"v0.15.2 v0.16.3 v0.17.2 v0.18.1 v0.19.1 v0.20.1\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-libs=no --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports\n+--enable-debug --disable-fuzz-binary  CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\"\""
      },
      {
        "sha": "a5082bdaab37c2c5ece085944fb873dbba6c2e51",
        "filename": "ci/test/00_setup_env_native_tsan.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_tsan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_tsan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_tsan.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -7,8 +7,8 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_tsan\n-export DOCKER_NAME_TAG=ubuntu:20.04\n+export DOCKER_NAME_TAG=ubuntu:hirsute\n export PACKAGES=\"clang llvm libc++abi-dev libc++-dev python3-zmq\"\n export DEP_OPTS=\"CC=clang CXX='clang++ -stdlib=libc++'\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-gui=no CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' CXXFLAGS='-g' --with-sanitizers=thread CC=clang CXX='clang++ -stdlib=libc++' --with-boost-process\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=no CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' CXXFLAGS='-g' --with-sanitizers=thread CC=clang CXX='clang++ -stdlib=libc++'\""
      },
      {
        "sha": "e079a7057c87e0cbdefc6aaf5df5a246cbb30d5f",
        "filename": "ci/test/00_setup_env_native_valgrind.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_native_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_valgrind.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -7,7 +7,7 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_valgrind\n-export PACKAGES=\"valgrind clang llvm python3-zmq libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libsqlite3-dev\"\n+export PACKAGES=\"valgrind clang llvm python3-zmq libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libsqlite3-dev\"\n export USE_VALGRIND=1\n export NO_DEPENDS=1\n export TEST_RUNNER_EXTRA=\"--exclude rpc_bind\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547"
      },
      {
        "sha": "51a0fd9117d865d57a3ae6f369d804125f5aeb9f",
        "filename": "ci/test/00_setup_env_s390x.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_s390x.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_s390x.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_s390x.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -23,4 +23,4 @@ export RUN_UNIT_TESTS=true\n export TEST_RUNNER_ENV=\"LC_ALL=C\"\n export RUN_FUNCTIONAL_TESTS=true\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-reduce-exports --with-incompatible-bdb --with-boost-process\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports --with-incompatible-bdb\""
      },
      {
        "sha": "4d5bde13fddac6ec8a4756dd6d70c5bfc48052cd",
        "filename": "ci/test/00_setup_env_win64.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_win64.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/00_setup_env_win64.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_win64.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -7,13 +7,13 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_win64\n-export DOCKER_NAME_TAG=ubuntu:18.04  # Check that bionic can cross-compile to win64 (bionic is used in the gitian build as well)\n+export DOCKER_NAME_TAG=ubuntu:20.04  # Check that Focal can cross-compile to win64 (Focal is used in the gitian build as well)\n export HOST=x86_64-w64-mingw32\n-export PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64 file\"\n+export DPKG_ADD_ARCH=\"i386\"\n+export PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64 wine32 file\"\n export RUN_FUNCTIONAL_TESTS=false\n-export RUN_SECURITY_TESTS=\"true\"\n export GOAL=\"deploy\"\n-export BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests --without-boost-process\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests --disable-external-signer\"\n \n # Compiler for MinGW-w64 causes false -Wreturn-type warning.\n # See https://sourceforge.net/p/mingw-w64/bugs/306/"
      },
      {
        "sha": "80806aab75ba6819b8d77a6857bdc40350eeffc9",
        "filename": "ci/test/03_before_install.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/ci/test/03_before_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/ci/test/03_before_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/03_before_install.sh?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,22 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-BEGIN_FOLD () {\n-  echo \"\"\n-  CURRENT_FOLD_NAME=$1\n-  echo \"travis_fold:start:${CURRENT_FOLD_NAME}\"\n-}\n-\n-END_FOLD () {\n-  RET=$?\n-  echo \"travis_fold:end:${CURRENT_FOLD_NAME}\"\n-  if [ $RET != 0 ]; then\n-    echo \"${CURRENT_FOLD_NAME} failed with status code ${RET}\"\n-  fi\n-}\n-"
      },
      {
        "sha": "2079d2ed2be7d6f409d55b3d925e08633fb86d55",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -11,6 +11,7 @@ if [[ $QEMU_USER_CMD == qemu-s390* ]]; then\n fi\n \n if [ \"$CI_OS_NAME\" == \"macos\" ]; then\n+  sudo -H pip3 install --upgrade pip\n   IN_GETOPT_BIN=\"/usr/local/opt/gnu-getopt/bin/getopt\" ${CI_RETRY_EXE} pip3 install --user $PIP_PACKAGES\n fi\n \n@@ -33,7 +34,12 @@ if [ -z \"$DANGER_RUN_CI_ON_HOST\" ]; then\n   echo \"Creating $DOCKER_NAME_TAG container to run in\"\n   ${CI_RETRY_EXE} docker pull \"$DOCKER_NAME_TAG\"\n \n-  DOCKER_ID=$(docker run $DOCKER_ADMIN -idt \\\n+  if [ -n \"${RESTART_CI_DOCKER_BEFORE_RUN}\" ] ; then\n+    echo \"Restart docker before run to stop and clear all containers started with --rm\"\n+    systemctl restart docker\n+  fi\n+\n+  DOCKER_ID=$(docker run $DOCKER_ADMIN --rm --interactive --detach --tty \\\n                   --mount type=bind,src=$BASE_ROOT_DIR,dst=/ro_base,readonly \\\n                   --mount type=bind,src=$CCACHE_DIR,dst=$CCACHE_DIR \\\n                   --mount type=bind,src=$DEPENDS_DIR,dst=$DEPENDS_DIR \\\n@@ -62,6 +68,9 @@ if [[ $DOCKER_NAME_TAG == centos* ]]; then\n elif [ \"$CI_USE_APT_INSTALL\" != \"no\" ]; then\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get update\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -y $PACKAGES $DOCKER_PACKAGES\n+  if [ -n \"$PIP_PACKAGES\" ]; then\n+    ${CI_RETRY_EXE} pip3 install --user $PIP_PACKAGES\n+  fi\n fi\n \n if [ \"$CI_OS_NAME\" == \"macos\" ]; then\n@@ -75,19 +84,22 @@ fi\n DOCKER_EXEC echo \"Free disk space:\"\n DOCKER_EXEC df -h\n \n-if [ ! -d ${DIR_QA_ASSETS} ]; then\n-  DOCKER_EXEC git clone --depth=1 https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n+if [ \"$RUN_FUZZ_TESTS\" = \"true\" ] || [ \"$RUN_UNIT_TESTS\" = \"true\" ] || [ \"$RUN_UNIT_TESTS_SEQUENTIAL\" = \"true\" ]; then\n+  if [ ! -d ${DIR_QA_ASSETS} ]; then\n+    DOCKER_EXEC git clone --depth=1 https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n+  fi\n+\n+  export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n+  export DIR_UNIT_TEST_DATA=${DIR_QA_ASSETS}/unit_test_data/\n fi\n-export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n-export DIR_UNIT_TEST_DATA=${DIR_QA_ASSETS}/unit_test_data/\n \n DOCKER_EXEC mkdir -p \"${BASE_SCRATCH_DIR}/sanitizer-output/\"\n \n if [[ ${USE_MEMORY_SANITIZER} == \"true\" ]]; then\n   DOCKER_EXEC \"update-alternatives --install /usr/bin/clang++ clang++ \\$(which clang++-9) 100\"\n   DOCKER_EXEC \"update-alternatives --install /usr/bin/clang clang \\$(which clang-9) 100\"\n   DOCKER_EXEC \"mkdir -p ${BASE_SCRATCH_DIR}/msan/build/\"\n-  DOCKER_EXEC \"git clone --depth=1 https://github.com/llvm/llvm-project -b llvmorg-10.0.0 ${BASE_SCRATCH_DIR}/msan/llvm-project\"\n+  DOCKER_EXEC \"git clone --depth=1 https://github.com/llvm/llvm-project -b llvmorg-12.0.0 ${BASE_SCRATCH_DIR}/msan/llvm-project\"\n   DOCKER_EXEC \"cd ${BASE_SCRATCH_DIR}/msan/build/ && cmake -DLLVM_ENABLE_PROJECTS='libcxx;libcxxabi' -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_TARGETS_TO_BUILD=X86 ../llvm-project/llvm/\"\n   DOCKER_EXEC \"cd ${BASE_SCRATCH_DIR}/msan/build/ && make $MAKEJOBS cxx\"\n fi"
      },
      {
        "sha": "8dd489d7f8fec6b2142b561a3d1507230a96e3f6",
        "filename": "ci/test/05_before_script.sh",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/05_before_script.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -19,7 +19,16 @@ OSX_SDK_BASENAME=\"Xcode-${XCODE_VERSION}-${XCODE_BUILD_ID}-extracted-SDK-with-li\n OSX_SDK_PATH=\"${DEPENDS_DIR}/sdk-sources/${OSX_SDK_BASENAME}\"\n \n if [ -n \"$XCODE_VERSION\" ] && [ ! -f \"$OSX_SDK_PATH\" ]; then\n-  curl --location --fail \"${SDK_URL}/${OSX_SDK_BASENAME}\" -o \"$OSX_SDK_PATH\"\n+  DOCKER_EXEC curl --location --fail \"${SDK_URL}/${OSX_SDK_BASENAME}\" -o \"$OSX_SDK_PATH\"\n+fi\n+\n+if [ -n \"$ANDROID_TOOLS_URL\" ]; then\n+  ANDROID_TOOLS_PATH=$DEPENDS_DIR/sdk-sources/android-tools.zip\n+\n+  DOCKER_EXEC curl --location --fail \"${ANDROID_TOOLS_URL}\" -o \"$ANDROID_TOOLS_PATH\"\n+  DOCKER_EXEC mkdir -p \"${ANDROID_HOME}/cmdline-tools\"\n+  DOCKER_EXEC unzip -o \"$ANDROID_TOOLS_PATH\" -d \"${ANDROID_HOME}/cmdline-tools\"\n+  DOCKER_EXEC \"yes | ${ANDROID_HOME}/cmdline-tools/tools/bin/sdkmanager --install \\\"build-tools;${ANDROID_BUILD_TOOLS_VERSION}\\\" \\\"platform-tools\\\" \\\"platforms;android-${ANDROID_API_LEVEL}\\\" \\\"ndk;${ANDROID_NDK_VERSION}\\\"\"\n fi\n \n if [[ ${USE_MEMORY_SANITIZER} == \"true\" ]]; then\n@@ -47,7 +56,5 @@ if [ -z \"$NO_DEPENDS\" ]; then\n   DOCKER_EXEC $SHELL_OPTS make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n fi\n if [ -n \"$PREVIOUS_RELEASES_TO_DOWNLOAD\" ]; then\n-  BEGIN_FOLD previous-versions\n   DOCKER_EXEC test/get_previous_releases.py -b -t \"$PREVIOUS_RELEASES_DIR\" \"${PREVIOUS_RELEASES_TO_DOWNLOAD}\"\n-  END_FOLD\n fi"
      },
      {
        "sha": "a42cd6cee1430ae5f13ec9162d06c2b15f6c9606",
        "filename": "ci/test/06_script_a.sh",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/06_script_a.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/06_script_a.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_a.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -6,36 +6,36 @@\n \n export LC_ALL=C.UTF-8\n \n+if [ -n \"$ANDROID_TOOLS_URL\" ]; then\n+  DOCKER_EXEC make distclean || true\n+  DOCKER_EXEC ./autogen.sh\n+  DOCKER_EXEC ./configure $BITCOIN_CONFIG --prefix=$DEPENDS_DIR/aarch64-linux-android || ( (DOCKER_EXEC cat config.log) && false)\n+  DOCKER_EXEC \"cd src/qt && make $MAKEJOBS && ANDROID_HOME=${ANDROID_HOME} ANDROID_NDK_HOME=${ANDROID_NDK_HOME} make apk\"\n+  exit 0\n+fi\n+\n BITCOIN_CONFIG_ALL=\"--enable-suppress-external-warnings --disable-dependency-tracking --prefix=$DEPENDS_DIR/$HOST --bindir=$BASE_OUTDIR/bin --libdir=$BASE_OUTDIR/lib\"\n if [ -z \"$NO_WERROR\" ]; then\n   BITCOIN_CONFIG_ALL=\"${BITCOIN_CONFIG_ALL} --enable-werror\"\n fi\n DOCKER_EXEC \"ccache --zero-stats --max-size=$CCACHE_SIZE\"\n \n-BEGIN_FOLD autogen\n if [ -n \"$CONFIG_SHELL\" ]; then\n   DOCKER_EXEC \"$CONFIG_SHELL\" -c \"./autogen.sh\"\n else\n   DOCKER_EXEC ./autogen.sh\n fi\n-END_FOLD\n \n DOCKER_EXEC mkdir -p \"${BASE_BUILD_DIR}\"\n export P_CI_DIR=\"${BASE_BUILD_DIR}\"\n \n-BEGIN_FOLD configure\n DOCKER_EXEC \"${BASE_ROOT_DIR}/configure\" --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n-END_FOLD\n \n-BEGIN_FOLD distdir\n DOCKER_EXEC make distdir VERSION=$HOST\n-END_FOLD\n \n export P_CI_DIR=\"${BASE_BUILD_DIR}/bitcoin-$HOST\"\n \n-BEGIN_FOLD configure\n DOCKER_EXEC ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n-END_FOLD\n \n set -o errtrace\n trap 'DOCKER_EXEC \"cat ${BASE_SCRATCH_DIR}/sanitizer-output/* 2> /dev/null\"' ERR\n@@ -48,12 +48,8 @@ if [[ ${USE_MEMORY_SANITIZER} == \"true\" ]]; then\n   DOCKER_EXEC 'grep -v HAVE_SYS_GETRANDOM src/config/bitcoin-config.h > src/config/bitcoin-config.h.tmp && mv src/config/bitcoin-config.h.tmp src/config/bitcoin-config.h'\n fi\n \n-BEGIN_FOLD build\n DOCKER_EXEC make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && DOCKER_EXEC make $GOAL V=1 ; false )\n-END_FOLD\n \n-BEGIN_FOLD cache_stats\n DOCKER_EXEC \"ccache --version | head -n 1 && ccache --show-stats\"\n DOCKER_EXEC du -sh \"${DEPENDS_DIR}\"/*/\n DOCKER_EXEC du -sh \"${PREVIOUS_RELEASES_DIR}\"\n-END_FOLD"
      },
      {
        "sha": "194b14beabac0aadc1d80dab9ea59349392c514c",
        "filename": "ci/test/06_script_b.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_b.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -7,55 +7,39 @@\n export LC_ALL=C.UTF-8\n \n if [[ $HOST = *-mingw32 ]]; then\n-  BEGIN_FOLD wrap-wine\n   # Generate all binaries, so that they can be wrapped\n   DOCKER_EXEC make $MAKEJOBS -C src/secp256k1 VERBOSE=1\n   DOCKER_EXEC make $MAKEJOBS -C src/univalue VERBOSE=1\n   DOCKER_EXEC \"${BASE_ROOT_DIR}/ci/test/wrap-wine.sh\"\n-  END_FOLD\n fi\n \n if [ -n \"$QEMU_USER_CMD\" ]; then\n-  BEGIN_FOLD wrap-qemu\n   # Generate all binaries, so that they can be wrapped\n   DOCKER_EXEC make $MAKEJOBS -C src/secp256k1 VERBOSE=1\n   DOCKER_EXEC make $MAKEJOBS -C src/univalue VERBOSE=1\n   DOCKER_EXEC \"${BASE_ROOT_DIR}/ci/test/wrap-qemu.sh\"\n-  END_FOLD\n fi\n \n if [ -n \"$USE_VALGRIND\" ]; then\n-  BEGIN_FOLD wrap-valgrind\n   DOCKER_EXEC \"${BASE_ROOT_DIR}/ci/test/wrap-valgrind.sh\"\n-  END_FOLD\n fi\n \n if [ \"$RUN_UNIT_TESTS\" = \"true\" ]; then\n-  BEGIN_FOLD unit-tests\n   DOCKER_EXEC ${TEST_RUNNER_ENV} DIR_UNIT_TEST_DATA=${DIR_UNIT_TEST_DATA} LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib make $MAKEJOBS check VERBOSE=1\n-  END_FOLD\n fi\n \n if [ \"$RUN_UNIT_TESTS_SEQUENTIAL\" = \"true\" ]; then\n-  BEGIN_FOLD unit-tests-seq\n   DOCKER_EXEC ${TEST_RUNNER_ENV} DIR_UNIT_TEST_DATA=${DIR_UNIT_TEST_DATA} LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib \"${BASE_BUILD_DIR}/bitcoin-*/src/test/test_bitcoin*\" --catch_system_errors=no -l test_suite\n-  END_FOLD\n fi\n \n if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n-  BEGIN_FOLD functional-tests\n   DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib ${TEST_RUNNER_ENV} test/functional/test_runner.py --ci $MAKEJOBS --tmpdirprefix \"${BASE_SCRATCH_DIR}/test_runner/\" --ansi --combinedlogslen=4000 --timeout-factor=${TEST_RUNNER_TIMEOUT_FACTOR} ${TEST_RUNNER_EXTRA} --quiet --failfast\n-  END_FOLD\n fi\n \n if [ \"$RUN_SECURITY_TESTS\" = \"true\" ]; then\n-  BEGIN_FOLD security-tests\n   DOCKER_EXEC make test-security-check\n-  END_FOLD\n fi\n \n if [ \"$RUN_FUZZ_TESTS\" = \"true\" ]; then\n-  BEGIN_FOLD fuzz-tests\n   DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib test/fuzz/test_runner.py ${FUZZ_TESTS_CONFIG} $MAKEJOBS -l DEBUG ${DIR_FUZZ_IN}\n-  END_FOLD\n fi"
      },
      {
        "sha": "2cd7c8cec290eaf22768d3b9c565df64ac873982",
        "filename": "ci/test/wrap-qemu.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/wrap-qemu.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/wrap-qemu.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/wrap-qemu.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "82964897e133f4e6459665382983ea88319c930a",
        "filename": "ci/test/wrap-wine.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/wrap-wine.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test/wrap-wine.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/wrap-wine.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -13,7 +13,7 @@ for b_name in {\"${BASE_OUTDIR}/bin\"/*,src/secp256k1/*tests,src/univalue/{no_nul,\n         echo \"Wrap $b ...\"\n         mv \"$b\" \"${b}_orig\"\n         echo '#!/usr/bin/env bash' > \"$b\"\n-        echo \"wine64 \\\"${b}_orig\\\" \\\"\\$@\\\"\" >> \"$b\"\n+        echo \"( wine \\\"${b}_orig\\\" \\\"\\$@\\\" ) || ( sleep 1 && wine \\\"${b}_orig\\\" \\\"\\$@\\\" )\" >> \"$b\"\n         chmod +x \"$b\"\n       fi\n     done"
      },
      {
        "sha": "93b07aab1ec48ff89151f914f5481feb7b8f0784",
        "filename": "ci/test_run_all.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/ci/test_run_all.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/ci/test_run_all.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test_run_all.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,13 +1,12 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n set -o errexit; source ./ci/test/00_setup_env.sh\n-set -o errexit; source ./ci/test/03_before_install.sh\n set -o errexit; source ./ci/test/04_install.sh\n set -o errexit; source ./ci/test/05_before_script.sh\n set -o errexit; source ./ci/test/06_script_a.sh"
      },
      {
        "sha": "85d213213b9e6c7fc9fc652dc4ea32075ac9ae74",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 302,
        "deletions": 135,
        "changes": 437,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,10 +1,10 @@\n AC_PREREQ([2.69])\n-define(_CLIENT_VERSION_MAJOR, 21)\n+define(_CLIENT_VERSION_MAJOR, 22)\n define(_CLIENT_VERSION_MINOR, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_RC, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)\n-define(_COPYRIGHT_YEAR, 2020)\n+define(_COPYRIGHT_YEAR, 2021)\n define(_COPYRIGHT_HOLDERS,[The %s developers])\n define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])\n AC_INIT([Bitcoin Core],m4_join([.], _CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MINOR, _CLIENT_VERSION_BUILD)m4_if(_CLIENT_VERSION_RC, [0], [], [rc]_CLIENT_VERSION_RC),[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])\n@@ -23,7 +23,11 @@ BITCOIN_DAEMON_NAME=bitcoind\n BITCOIN_GUI_NAME=bitcoin-qt\n BITCOIN_CLI_NAME=bitcoin-cli\n BITCOIN_TX_NAME=bitcoin-tx\n+BITCOIN_UTIL_NAME=bitcoin-util\n BITCOIN_WALLET_TOOL_NAME=bitcoin-wallet\n+dnl Multi Process\n+BITCOIN_MP_NODE_NAME=bitcoin-node\n+BITCOIN_MP_GUI_NAME=bitcoin-gui\n \n dnl Unless the user specified ARFLAGS, force it to be cr\n AC_ARG_VAR(ARFLAGS, [Flags for the archiver, defaults to <cr> if not set])\n@@ -103,7 +107,6 @@ AC_PATH_PROG([GIT], [git])\n AC_PATH_PROG(CCACHE,ccache)\n AC_PATH_PROG(XGETTEXT,xgettext)\n AC_PATH_PROG(HEXDUMP,hexdump)\n-AC_PATH_TOOL(READELF, readelf)\n AC_PATH_TOOL(CPPFILT, c++filt)\n AC_PATH_TOOL(OBJCOPY, objcopy)\n AC_PATH_PROG(DOXYGEN, doxygen)\n@@ -129,6 +132,12 @@ AC_ARG_WITH([bdb],\n   [use_bdb=$withval],\n   [use_bdb=auto])\n \n+AC_ARG_ENABLE([ebpf],\n+  [AS_HELP_STRING([--enable-ebpf],\n+  [enable eBPF tracing (default is yes if sys/sdt.h is found)])],\n+  [use_ebpf=$enableval],\n+  [use_ebpf=yes])\n+\n AC_ARG_WITH([miniupnpc],\n   [AS_HELP_STRING([--with-miniupnpc],\n   [enable UPNP (default is yes if libminiupnpc is found)])],\n@@ -141,6 +150,18 @@ AC_ARG_ENABLE([upnp-default],\n   [use_upnp_default=$enableval],\n   [use_upnp_default=no])\n \n+AC_ARG_WITH([natpmp],\n+            [AS_HELP_STRING([--with-natpmp],\n+                            [enable NAT-PMP (default is yes if libnatpmp is found)])],\n+            [use_natpmp=$withval],\n+            [use_natpmp=auto])\n+\n+AC_ARG_ENABLE([natpmp-default],\n+              [AS_HELP_STRING([--enable-natpmp-default],\n+                              [if NAT-PMP is enabled, turn it on at startup (default is no)])],\n+              [use_natpmp_default=$enableval],\n+              [use_natpmp_default=no])\n+\n AC_ARG_ENABLE(tests,\n     AS_HELP_STRING([--disable-tests],[do not compile tests (default is to compile)]),\n     [use_tests=$enableval],\n@@ -163,10 +184,16 @@ AC_ARG_ENABLE([extended-functional-tests],\n \n AC_ARG_ENABLE([fuzz],\n     AS_HELP_STRING([--enable-fuzz],\n-    [enable building of fuzz targets (default no). enabling this will disable all other targets]),\n+    [build for fuzzing (default no). enabling this will disable all other targets and override --{enable,disable}-fuzz-binary]),\n     [enable_fuzz=$enableval],\n     [enable_fuzz=no])\n \n+AC_ARG_ENABLE([fuzz-binary],\n+    AS_HELP_STRING([--enable-fuzz-binary],\n+    [enable building of fuzz binary (default yes).]),\n+    [enable_fuzz_binary=$enableval],\n+    [enable_fuzz_binary=yes])\n+\n AC_ARG_WITH([qrencode],\n   [AS_HELP_STRING([--with-qrencode],\n   [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n@@ -291,20 +318,18 @@ AC_ARG_ENABLE([gprof],\n     [enable_gprof=$enableval],\n     [enable_gprof=no])\n \n-dnl Pass compiler & linker flags that make builds deterministic\n-AC_ARG_ENABLE([determinism],\n-    [AS_HELP_STRING([--enable-determinism],\n-                    [Enable compilation flags that make builds deterministic (default is no)])],\n-    [enable_determinism=$enableval],\n-    [enable_determinism=no])\n-\n dnl Turn warnings into errors\n AC_ARG_ENABLE([werror],\n     [AS_HELP_STRING([--enable-werror],\n                     [Treat certain compiler warnings as errors (default is no)])],\n     [enable_werror=$enableval],\n     [enable_werror=no])\n \n+AC_ARG_ENABLE([external-signer],\n+    [AS_HELP_STRING([--enable-external-signer],[compile external signer support (default is yes, requires Boost::Process)])],\n+    [use_external_signer=$enableval],\n+    [use_external_signer=yes])\n+\n AC_LANG_PUSH([C++])\n \n dnl Check for a flag to turn compiler warnings into errors. This is helpful for checks which may\n@@ -400,6 +425,12 @@ if test \"x$enable_werror\" = \"xyes\"; then\n   AX_CHECK_COMPILE_FLAG([-Werror=suggest-override],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=suggest-override\"],,[[$CXXFLAG_WERROR]],\n                         [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n   AX_CHECK_COMPILE_FLAG([-Werror=unreachable-code-loop-increment],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=mismatched-tags], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=mismatched-tags\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Werror=implicit-fallthrough], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=implicit-fallthrough\"], [], [$CXXFLAG_WERROR])\n+\n+  if test x$suppress_external_warnings != xno ; then\n+    AX_CHECK_COMPILE_FLAG([-Werror=documentation],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=documentation\"],,[[$CXXFLAG_WERROR]])\n+  fi\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n@@ -415,6 +446,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wrange-loop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wrange-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-variable],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-variable\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wunused-member-function],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-member-function\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wdate-time],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdate-time\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wconditional-uninitialized],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wconditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wsign-compare],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsign-compare\"],,[[$CXXFLAG_WERROR]])\n@@ -425,16 +457,21 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wsuggest-override],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"],,[[$CXXFLAG_WERROR]],\n                         [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n   AX_CHECK_COMPILE_FLAG([-Wunreachable-code-loop-increment],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wimplicit-fallthrough\"], [], [$CXXFLAG_WERROR])\n+\n+  if test x$suppress_external_warnings != xno ; then\n+    AX_CHECK_COMPILE_FLAG([-Wdocumentation],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdocumentation\"],,[[$CXXFLAG_WERROR]])\n+  fi\n \n   dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   dnl unknown options if any other warning is produced. Test the -Wfoo case, and\n   dnl set the -Wno-foo case if it works.\n   AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wself-assign],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n+  if test x$suppress_external_warnings != xyes ; then\n+    AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n+  fi\n fi\n \n dnl Don't allow extended (non-ASCII) symbols in identifiers. This is easier for code review.\n@@ -550,7 +587,7 @@ CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n   [AS_HELP_STRING([--with-utils],\n-  [build bitcoin-cli bitcoin-tx bitcoin-wallet (default=yes)])],\n+  [build bitcoin-cli bitcoin-tx bitcoin-util bitcoin-wallet (default=yes)])],\n   [build_bitcoin_utils=$withval],\n   [build_bitcoin_utils=yes])\n \n@@ -572,6 +609,12 @@ AC_ARG_ENABLE([util-wallet],\n   [build_bitcoin_wallet=$enableval],\n   [build_bitcoin_wallet=$build_bitcoin_utils])\n \n+AC_ARG_ENABLE([util-util],\n+  [AS_HELP_STRING([--enable-util-util],\n+  [build bitcoin-util])],\n+  [build_bitcoin_util=$enableval],\n+  [build_bitcoin_util=$build_bitcoin_utils])\n+\n AC_ARG_WITH([libs],\n   [AS_HELP_STRING([--with-libs],\n   [build libraries (default=yes)])],\n@@ -616,7 +659,7 @@ case $host in\n        AC_MSG_ERROR(\"windres not found\")\n      fi\n \n-     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN\"\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN\"\n \n      dnl libtool insists upon adding -nostdlib and a list of objects/libs to link against.\n      dnl That breaks our ability to build dll's with static libgcc/libstdc++/libssp. Override\n@@ -642,16 +685,19 @@ case $host in\n          dnl It's safe to add these paths even if the functionality is disabled by\n          dnl the user (--without-wallet or --without-gui for example).\n \n-         qt5_prefix=$($BREW --prefix qt5 2>/dev/null)\n-         if $BREW list --versions berkeley-db4 >/dev/null && test \"x$BDB_CFLAGS\" = \"x\" && test \"x$BDB_LIBS\" = \"x\" && test \"$use_bdb\" != \"no\"; then\n+         if test \"x$use_bdb\" != xno && $BREW list --versions berkeley-db4 >/dev/null && test \"x$BDB_CFLAGS\" = \"x\" && test \"x$BDB_LIBS\" = \"x\"; then\n            bdb_prefix=$($BREW --prefix berkeley-db4 2>/dev/null)\n            dnl This must precede the call to BITCOIN_FIND_BDB48 below.\n            BDB_CFLAGS=\"-I$bdb_prefix/include\"\n            BDB_LIBS=\"-L$bdb_prefix/lib -ldb_cxx-4.8\"\n          fi\n-         if test x$qt5_prefix != x; then\n-           PKG_CONFIG_PATH=\"$qt5_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n-           export PKG_CONFIG_PATH\n+\n+         if test \"x$use_sqlite\" != xno && $BREW list --versions sqlite3 >/dev/null; then\n+           export PKG_CONFIG_PATH=\"$($BREW --prefix sqlite3 2>/dev/null)/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+         fi\n+\n+         if $BREW list --versions qt5 >/dev/null; then\n+           export PKG_CONFIG_PATH=\"$($BREW --prefix qt5 2>/dev/null)/lib/pkgconfig:$PKG_CONFIG_PATH\"\n          fi\n        fi\n      else\n@@ -663,7 +709,8 @@ case $host in\n            AC_PATH_TOOL([DSYMUTIL], [dsymutil], dsymutil)\n            AC_PATH_TOOL([INSTALLNAMETOOL], [install_name_tool], install_name_tool)\n            AC_PATH_TOOL([OTOOL], [otool], otool)\n-           AC_PATH_PROGS([GENISOIMAGE], [genisoimage mkisofs],genisoimage)\n+           AC_PATH_PROGS([XORRISOFS], [xorrisofs], xorrisofs)\n+           AC_PATH_PROGS([DMG], [dmg], dmg)\n            AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)\n            AC_PATH_PROGS([IMAGEMAGICK_CONVERT], [convert],convert)\n            AC_PATH_PROGS([TIFFCP], [tiffcp],tiffcp)\n@@ -684,6 +731,21 @@ case $host in\n    *android*)\n      dnl make sure android stays above linux for hosts like *linux-android*\n      TARGET_OS=android\n+     case $host in\n+       *x86_64*)\n+          ANDROID_ARCH=x86_64\n+          ;;\n+        *aarch64*)\n+          ANDROID_ARCH=arm64-v8a\n+          ;;\n+        *armv7a*)\n+          ANDROID_ARCH=armeabi-v7a\n+          ;;\n+        *i686*)\n+          ANDROID_ARCH=i686\n+          ;;\n+        *) AC_MSG_ERROR(\"Could not determine Android arch\") ;;\n+      esac\n      ;;\n    *linux*)\n      TARGET_OS=linux\n@@ -740,6 +802,9 @@ if test x$use_lcov_branch != xno; then\n   AC_SUBST(LCOV_OPTS, \"$LCOV_OPTS --rc lcov_branch_coverage=1\")\n fi\n \n+dnl Check for __int128\n+AC_CHECK_TYPES([__int128])\n+\n dnl Check for endianness\n AC_C_BIGENDIAN\n \n@@ -765,13 +830,14 @@ if test x$ac_cv_sys_large_files != x &&\n   CPPFLAGS=\"$CPPFLAGS -D_LARGE_FILES=$ac_cv_sys_large_files\"\n fi\n \n-AX_GCC_FUNC_ATTRIBUTE([visibility])\n-AX_GCC_FUNC_ATTRIBUTE([dllexport])\n-AX_GCC_FUNC_ATTRIBUTE([dllimport])\n-\n if test x$use_glibc_compat != xno; then\n   AX_CHECK_LINK_FLAG([[-Wl,--wrap=__divmoddi4]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=__divmoddi4\"])\n   AX_CHECK_LINK_FLAG([[-Wl,--wrap=log2f]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=log2f\"])\n+  case $host in\n+    powerpc64* | ppc64*)\n+      AX_CHECK_LINK_FLAG([[-Wl,--no-tls-get-addr-optimize]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--no-tls-get-addr-optimize\"])\n+    ;;\n+  esac\n else\n   AC_SEARCH_LIBS([clock_gettime],[rt])\n fi\n@@ -807,13 +873,21 @@ if test x$use_hardening != xno; then\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n   AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n \n-  AX_CHECK_COMPILE_FLAG([-fcf-protection=full],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fcf-protection=full\"])\n+  dnl -fcf-protection used with Clang 7 causes ld to emit warnings:\n+  dnl ld: error: ... <corrupt x86 feature size: 0x8>\n+  dnl Use CHECK_LINK_FLAG & --fatal-warnings to ensure we won't use the flag in this case.\n+  AX_CHECK_LINK_FLAG([-fcf-protection=full],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fcf-protection=full\"],, [[$LDFLAG_WERROR]])\n+\n+  case $host in\n+    *mingw*)\n+      dnl stack-clash-protection doesn't currently work, and likely should just be skipped for Windows.\n+      dnl See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90458 for more details.\n+      ;;\n+    *)\n+      AX_CHECK_COMPILE_FLAG([-fstack-clash-protection], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-clash-protection\"], [], [$CXXFLAG_WERROR])\n+      ;;\n+  esac\n \n-  dnl stack-clash-protection does not work properly when building for Windows.\n-  dnl We use the test case from https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90458\n-  dnl to determine if it can be enabled.\n-  AX_CHECK_COMPILE_FLAG([-fstack-clash-protection],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-clash-protection\"],[],[\"-O0\"],\n-    [AC_LANG_SOURCE([[class D {public: unsigned char buf[32768];}; int main() {D d; return 0;}]])])\n \n   dnl When enable_debug is yes, all optimizations are disabled.\n   dnl However, FORTIFY_SOURCE requires that there is some level of optimization, otherwise it does nothing and just creates a compiler warning.\n@@ -827,6 +901,7 @@ if test x$use_hardening != xno; then\n     ])\n   fi\n \n+  AX_CHECK_LINK_FLAG([[-Wl,--enable-reloc-section]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--enable-reloc-section\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"],, [[$LDFLAG_WERROR]])\n@@ -851,22 +926,19 @@ if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-bind_at_load]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"],, [[$LDFLAG_WERROR]])\n fi\n \n-if test x$enable_determinism = xyes; then\n-  if test x$TARGET_OS = xwindows; then\n-    AX_CHECK_LINK_FLAG([[-Wl,--no-insert-timestamp]], [LDFLAGS=\"$LDFLAGS -Wl,--no-insert-timestamp\"],, [[$LDFLAG_WERROR]])\n-  fi\n-fi\n-\n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n-AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n+AC_CHECK_DECLS([getifaddrs, freeifaddrs],[CHECK_SOCKET],,\n     [#include <sys/types.h>\n     #include <ifaddrs.h>]\n )\n AC_CHECK_DECLS([strnlen])\n \n-dnl Check for daemon(3), unrelated to --with-daemon (although used by it)\n-AC_CHECK_DECLS([daemon])\n+dnl These are used for daemonization in bitcoind\n+AC_CHECK_DECLS([fork])\n+AC_CHECK_DECLS([setsid])\n+\n+AC_CHECK_DECLS([pipe2])\n \n AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n \t\t[#if HAVE_ENDIAN_H\n@@ -928,13 +1000,13 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n  [ AC_MSG_RESULT(no)]\n )\n \n-AC_MSG_CHECKING([for visibility attribute])\n-AC_LINK_IFELSE([AC_LANG_SOURCE([\n-  int foo_def( void ) __attribute__((visibility(\"default\")));\n+AC_MSG_CHECKING([for default visibility attribute])\n+AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n+  int foo(void) __attribute__((visibility(\"default\")));\n   int main(){}\n   ])],\n   [\n-    AC_DEFINE(HAVE_VISIBILITY_ATTRIBUTE,1,[Define if the visibility attribute is supported.])\n+    AC_DEFINE(HAVE_DEFAULT_VISIBILITY_ATTRIBUTE,1,[Define if the visibility attribute is supported.])\n     AC_MSG_RESULT(yes)\n   ],\n   [\n@@ -945,6 +1017,18 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   ]\n )\n \n+AC_MSG_CHECKING([for dllexport attribute])\n+AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n+  __declspec(dllexport) int foo(void);\n+  int main(){}\n+  ])],\n+  [\n+    AC_DEFINE(HAVE_DLLEXPORT_ATTRIBUTE,1,[Define if the dllexport attribute is supported.])\n+    AC_MSG_RESULT(yes)\n+  ],\n+  [AC_MSG_RESULT(no)]\n+)\n+\n dnl thread_local is currently disabled when building with glibc back compat.\n dnl Our minimum supported glibc is 2.17, however support for thread_local\n dnl did not arrive in glibc until 2.18.\n@@ -1080,6 +1164,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <fcntl.h>]],\n  [ AC_MSG_RESULT(yes); HAVE_O_CLOEXEC=1 ],\n  [ AC_MSG_RESULT(no); HAVE_O_CLOEXEC=0 ]\n )\n+AC_DEFINE_UNQUOTED([HAVE_O_CLOEXEC], [$HAVE_O_CLOEXEC], [Define to 1 if O_CLOEXEC flag is available.])\n \n dnl crc32c platform checks\n AC_MSG_CHECKING(for __builtin_prefetch)\n@@ -1110,27 +1195,23 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n   ]], [[\n     getauxval(AT_HWCAP);\n   ]])],\n- [ AC_MSG_RESULT(yes); HAVE_STRONG_GETAUXVAL=1 ],\n+ [ AC_MSG_RESULT(yes); HAVE_STRONG_GETAUXVAL=1; AC_DEFINE(HAVE_STRONG_GETAUXVAL, 1, [Define this symbol to build code that uses getauxval)]) ],\n  [ AC_MSG_RESULT(no); HAVE_STRONG_GETAUXVAL=0 ]\n )\n \n AC_MSG_CHECKING(for weak getauxval support in the compiler)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    #ifdef __linux__\n     unsigned long getauxval(unsigned long type) __attribute__((weak));\n     #define AT_HWCAP 16\n+    #endif\n   ]], [[\n     getauxval(AT_HWCAP);\n   ]])],\n- [ AC_MSG_RESULT(yes); HAVE_WEAK_GETAUXVAL=1 ],\n+ [ AC_MSG_RESULT(yes); HAVE_WEAK_GETAUXVAL=1; AC_DEFINE(HAVE_WEAK_GETAUXVAL, 1, [Define this symbol to build code that uses getauxval (weak linking)]) ],\n  [ AC_MSG_RESULT(no); HAVE_WEAK_GETAUXVAL=0 ]\n )\n \n-dnl Check for reduced exports\n-if test x$use_reduce_exports = xyes; then\n-  AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n-  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])\n-fi\n-\n AC_MSG_CHECKING([for std::system])\n AC_LINK_IFELSE(\n     [ AC_LANG_PROGRAM(\n@@ -1175,10 +1256,11 @@ AC_DEFUN([SUPPRESS_WARNINGS],\n \n dnl enable-fuzz should disable all other targets\n if test \"x$enable_fuzz\" = \"xyes\"; then\n-  AC_MSG_WARN(enable-fuzz will disable all other targets)\n+  AC_MSG_WARN(enable-fuzz will disable all other targets and force --enable-fuzz-binary=yes)\n   build_bitcoin_utils=no\n   build_bitcoin_cli=no\n   build_bitcoin_tx=no\n+  build_bitcoin_util=no\n   build_bitcoin_wallet=no\n   build_bitcoind=no\n   build_bitcoin_libs=no\n@@ -1187,29 +1269,34 @@ if test \"x$enable_fuzz\" = \"xyes\"; then\n   bitcoin_enable_qt_dbus=no\n   enable_wallet=no\n   use_bench=no\n+  use_external_signer=no\n   use_upnp=no\n+  use_natpmp=no\n   use_zmq=no\n+  enable_fuzz_binary=yes\n \n   AX_CHECK_PREPROC_FLAG([-DABORT_ON_FAILED_ASSUME],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DABORT_ON_FAILED_ASSUME\"]],,[[$CXXFLAG_WERROR]])\n \n-  AC_MSG_CHECKING([whether main function is needed])\n+  AC_MSG_CHECKING([whether main function is needed for fuzz binary])\n   AX_CHECK_LINK_FLAG(\n     [[-fsanitize=$use_sanitizers]],\n     [AC_MSG_RESULT([no])],\n     [AC_MSG_RESULT([yes])\n-     CPPFLAGS=\"$CPPFLAGS -DPROVIDE_MAIN_FUNCTION\"],\n+     CPPFLAGS=\"$CPPFLAGS -DPROVIDE_FUZZ_MAIN_FUNCTION\"],\n     [],\n     [AC_LANG_PROGRAM([[\n       #include <cstdint>\n       #include <cstddef>\n       extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) { return 0; }\n-      /* unterminated comment to remove the main function ...\n-    ]],[[]])])\n+      /* comment to remove the main function ...\n+     ]],[[\n+      */ int not_main() {\n+     ]])])\n else\n   BITCOIN_QT_INIT\n \n   dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n-  BITCOIN_QT_CONFIGURE([5.5.1])\n+  BITCOIN_QT_CONFIGURE([5.9.5])\n \n   dnl Keep a copy of the original $QT_INCLUDES and use it when invoking qt's moc\n   QT_INCLUDES_UNSUPPRESSED=$QT_INCLUDES\n@@ -1218,13 +1305,17 @@ else\n     QT_DBUS_INCLUDES=SUPPRESS_WARNINGS($QT_DBUS_INCLUDES)\n     QT_TEST_INCLUDES=SUPPRESS_WARNINGS($QT_TEST_INCLUDES)\n   fi\n+\n+  CPPFLAGS=\"$CPPFLAGS -DPROVIDE_FUZZ_MAIN_FUNCTION\"\n fi\n \n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n-    BITCOIN_FIND_BDB48\n-    if test x$suppress_external_warnings != xno ; then\n+    if test \"x$use_bdb\" != \"xno\"; then\n+      BITCOIN_FIND_BDB48\n+      if test x$suppress_external_warnings != xno ; then\n         BDB_CPPFLAGS=SUPPRESS_WARNINGS($BDB_CPPFLAGS)\n+      fi\n     fi\n \n     dnl Check for sqlite3\n@@ -1256,10 +1347,22 @@ if test x$enable_wallet != xno; then\n     fi\n fi\n \n+if test x$use_ebpf != xno; then\n+  AC_MSG_CHECKING([whether eBPF tracepoints are supported])\n+  AC_COMPILE_IFELSE([\n+    AC_LANG_PROGRAM(\n+      [#include <sys/sdt.h>],\n+      [DTRACE_PROBE(\"context\", \"event\");]\n+    )],\n+    [AC_MSG_RESULT(yes); have_sdt=yes; AC_DEFINE([ENABLE_TRACING], [1], [Define to 1 to enable eBPF user static defined tracepoints])],\n+    [AC_MSG_RESULT(no); have_sdt=no;]\n+  )\n+fi\n+\n dnl Check for libminiupnpc (optional)\n if test x$use_upnp != xno; then\n   AC_CHECK_HEADERS(\n-    [miniupnpc/miniwget.h miniupnpc/miniupnpc.h miniupnpc/upnpcommands.h miniupnpc/upnperrors.h],\n+    [miniupnpc/miniupnpc.h miniupnpc/upnpcommands.h miniupnpc/upnperrors.h],\n     [AC_CHECK_LIB([miniupnpc], [upnpDiscover], [MINIUPNPC_LIBS=-lminiupnpc], [have_miniupnpc=no])],\n     [have_miniupnpc=no]\n   )\n@@ -1285,44 +1388,46 @@ if test x$have_miniupnpc != xno; then\n fi\n fi\n \n+dnl Check for libnatpmp (optional).\n+if test \"x$use_natpmp\" != xno; then\n+  AC_CHECK_HEADERS([natpmp.h],\n+                   [AC_CHECK_LIB([natpmp], [initnatpmp], [NATPMP_LIBS=-lnatpmp], [have_natpmp=no])],\n+                   [have_natpmp=no])\n+fi\n+\n if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononononono; then\n-    use_boost=no\n+  use_boost=no\n else\n-    use_boost=yes\n+  use_boost=yes\n fi\n \n if test x$use_boost = xyes; then\n \n-dnl Minimum required Boost version\n-define(MINIMUM_REQUIRED_BOOST, 1.58.0)\n-\n-dnl Check for Boost libs\n-AX_BOOST_BASE([MINIMUM_REQUIRED_BOOST])\n-if test x$want_boost = xno; then\n+  dnl Check for Boost headers\n+  AX_BOOST_BASE([1.64.0],[],[AC_MSG_ERROR([Boost is not available!])])\n+  if test x$want_boost = xno; then\n     AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\n-fi\n-AX_BOOST_SYSTEM\n-AX_BOOST_FILESYSTEM\n-AX_BOOST_THREAD\n-\n-dnl Opt-in to boost-process\n-AS_IF([ test x$with_boost_process != x ], [ AX_BOOST_PROCESS ], [ ax_cv_boost_process=no ] )\n+  fi\n+  AX_BOOST_SYSTEM\n+  AX_BOOST_FILESYSTEM\n \n-if test x$suppress_external_warnings != xno; then\n+  if test x$suppress_external_warnings != xno; then\n     BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n-fi\n+  fi\n \n-dnl Boost 1.56 through 1.62 allow using std::atomic instead of its own atomic\n-dnl counter implementations. In 1.63 and later the std::atomic approach is default.\n-m4_pattern_allow(DBOOST_AC_USE_STD_ATOMIC) dnl otherwise it's treated like a macro\n-BOOST_CPPFLAGS=\"-DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC $BOOST_CPPFLAGS\"\n+  BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB\"\n+fi\n \n-BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_THREAD_LIB\"\n+if test \"x$use_external_signer\" != xno; then\n+  AC_DEFINE([ENABLE_EXTERNAL_SIGNER],,[define if external signer support is enabled])\n fi\n+AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n+dnl Check for reduced exports\n if test x$use_reduce_exports = xyes; then\n-    CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n-    AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[CXXFLAGS=\"$CXXFLAGS -fvisibility=hidden\"],\n+  [AC_MSG_ERROR([Cannot set hidden symbol visibility. Use --disable-reduce-exports.])],[[$CXXFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]],[RELDFLAGS=\"-Wl,--exclude-libs,ALL\"],,[[$LDFLAG_WERROR]])\n fi\n \n if test x$use_tests = xyes; then\n@@ -1333,25 +1438,25 @@ if test x$use_tests = xyes; then\n \n   if test x$use_boost = xyes; then\n \n-  AX_BOOST_UNIT_TEST_FRAMEWORK\n-\n-  dnl Determine if -DBOOST_TEST_DYN_LINK is needed\n-  AC_MSG_CHECKING([for dynamic linked boost test])\n-  TEMP_LIBS=\"$LIBS\"\n-  LIBS=\"$LIBS $BOOST_LDFLAGS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"\n-  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-  CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-  AC_LINK_IFELSE([AC_LANG_SOURCE([\n-       #define BOOST_TEST_DYN_LINK\n-       #define BOOST_TEST_MAIN\n-        #include <boost/test/unit_test.hpp>\n-\n-       ])],\n-    [AC_MSG_RESULT(yes)]\n-    [TESTDEFS=\"$TESTDEFS -DBOOST_TEST_DYN_LINK\"],\n-    [AC_MSG_RESULT(no)])\n-  LIBS=\"$TEMP_LIBS\"\n-  CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+    AX_BOOST_UNIT_TEST_FRAMEWORK\n+\n+    dnl Determine if -DBOOST_TEST_DYN_LINK is needed\n+    AC_MSG_CHECKING([for dynamic linked boost test])\n+    TEMP_LIBS=\"$LIBS\"\n+    LIBS=\"$LIBS $BOOST_LDFLAGS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"\n+    TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+    CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+    AC_LINK_IFELSE([AC_LANG_SOURCE([\n+         #define BOOST_TEST_DYN_LINK\n+         #define BOOST_TEST_MAIN\n+          #include <boost/test/unit_test.hpp>\n+\n+         ])],\n+      [AC_MSG_RESULT(yes)]\n+      [TESTDEFS=\"$TESTDEFS -DBOOST_TEST_DYN_LINK\"],\n+      [AC_MSG_RESULT(no)])\n+    LIBS=\"$TEMP_LIBS\"\n+    CPPFLAGS=\"$TEMP_CPPFLAGS\"\n \n   fi\n fi\n@@ -1363,6 +1468,10 @@ if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench\n   if test x$TARGET_OS != xwindows; then\n     PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads >= 2.0.21],, [AC_MSG_ERROR([libevent_pthreads version 2.0.21 or greater not found.])])\n   fi\n+\n+  if test x$suppress_external_warnings != xno; then\n+    EVENT_CFLAGS=SUPPRESS_WARNINGS($EVENT_CFLAGS)\n+  fi\n fi\n \n dnl QR Code encoding library check\n@@ -1395,7 +1504,7 @@ fi\n dnl univalue check\n \n need_bundled_univalue=yes\n-if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononononono; then\n+if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoin_util$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnononononononono; then\n   need_bundled_univalue=no\n else\n   if test x$system_univalue != xno; then\n@@ -1478,6 +1587,10 @@ AC_MSG_CHECKING([whether to build bitcoin-wallet])\n AM_CONDITIONAL([BUILD_BITCOIN_WALLET], [test x$build_bitcoin_wallet = xyes])\n AC_MSG_RESULT($build_bitcoin_wallet)\n \n+AC_MSG_CHECKING([whether to build bitcoin-util])\n+AM_CONDITIONAL([BUILD_BITCOIN_UTIL], [test x$build_bitcoin_util = xyes])\n+AC_MSG_RESULT($build_bitcoin_util)\n+\n AC_MSG_CHECKING([whether to build libraries])\n AM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])\n if test x$build_bitcoin_libs = xyes; then\n@@ -1502,6 +1615,10 @@ if test \"x$use_ccache\" != \"xno\"; then\n     CXX=\"$ac_cv_path_CCACHE $CXX\"\n   fi\n   AC_MSG_RESULT($use_ccache)\n+  if test \"x$use_ccache\" = \"xyes\"; then\n+    AX_CHECK_COMPILE_FLAG([-fdebug-prefix-map=A=B],[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -fdebug-prefix-map=\\$(abs_srcdir)=.\"],,[[$CXXFLAG_WERROR]])\n+    AX_CHECK_PREPROC_FLAG([-fmacro-prefix-map=A=B],[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -fmacro-prefix-map=\\$(abs_srcdir)=.\"],,[[$CXXFLAG_WERROR]])\n+  fi\n fi\n \n dnl enable wallet\n@@ -1543,6 +1660,34 @@ else\n   fi\n fi\n \n+dnl Enable NAT-PMP support.\n+AC_MSG_CHECKING([whether to build with support for NAT-PMP])\n+if test \"x$have_natpmp\" = xno; then\n+  if test \"x$use_natpmp\" = xyes; then\n+     AC_MSG_ERROR([NAT-PMP requested but cannot be built. Use --without-natpmp])\n+  fi\n+  AC_MSG_RESULT([no])\n+  use_natpmp=no\n+else\n+  if test \"x$use_natpmp\" != xno; then\n+    AC_MSG_RESULT([yes])\n+    AC_MSG_CHECKING([whether to build with NAT-PMP enabled by default])\n+    use_natpmp=yes\n+    natpmp_setting=0\n+    if test \"x$use_natpmp_default\" != xno; then\n+      use_natpmp_default=yes\n+      natpmp_setting=1\n+    fi\n+    AC_MSG_RESULT($use_natpmp_default)\n+    AC_DEFINE_UNQUOTED([USE_NATPMP], [$natpmp_setting], [NAT-PMP support not compiled if undefined, otherwise value (0 or 1) determines default state])\n+    if test x$TARGET_OS = xwindows; then\n+      NATPMP_CPPFLAGS=\"-DSTATICLIB -DNATPMP_STATICLIB\"\n+    fi\n+  else\n+    AC_MSG_RESULT([no])\n+  fi\n+fi\n+\n dnl these are only used when qt is enabled\n BUILD_TEST_QT=\"\"\n if test x$bitcoin_enable_qt != xno; then\n@@ -1585,7 +1730,11 @@ AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n \n AC_MSG_CHECKING([whether to build test_bitcoin])\n if test x$use_tests = xyes; then\n-  AC_MSG_RESULT([yes])\n+  if test \"x$enable_fuzz\" = \"xyes\"; then\n+    AC_MSG_RESULT([no, because fuzzing is enabled])\n+  else\n+    AC_MSG_RESULT([yes])\n+  fi\n   BUILD_TEST=\"yes\"\n else\n   AC_MSG_RESULT([no])\n@@ -1610,8 +1759,10 @@ AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n AM_CONDITIONAL([USE_SQLITE], [test \"x$use_sqlite\" = \"xyes\"])\n AM_CONDITIONAL([USE_BDB], [test \"x$use_bdb\" = \"xyes\"])\n+AM_CONDITIONAL([ENABLE_TRACING],[test x$have_sdt = xyes])\n AM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\n AM_CONDITIONAL([ENABLE_FUZZ],[test x$enable_fuzz = xyes])\n+AM_CONDITIONAL([ENABLE_FUZZ_BINARY],[test x$enable_fuzz_binary = xyes])\n AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\n AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n@@ -1627,6 +1778,8 @@ AM_CONDITIONAL([ENABLE_SHANI],[test x$enable_shani = xyes])\n AM_CONDITIONAL([ENABLE_ARM_CRC],[test x$enable_arm_crc = xyes])\n AM_CONDITIONAL([USE_ASM],[test x$use_asm = xyes])\n AM_CONDITIONAL([WORDS_BIGENDIAN],[test x$ac_cv_c_bigendian = xyes])\n+AM_CONDITIONAL([USE_NATPMP],[test x$use_natpmp = xyes])\n+AM_CONDITIONAL([USE_UPNP],[test x$use_upnp = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])\n@@ -1649,7 +1802,10 @@ AC_SUBST(BITCOIN_DAEMON_NAME)\n AC_SUBST(BITCOIN_GUI_NAME)\n AC_SUBST(BITCOIN_CLI_NAME)\n AC_SUBST(BITCOIN_TX_NAME)\n+AC_SUBST(BITCOIN_UTIL_NAME)\n AC_SUBST(BITCOIN_WALLET_TOOL_NAME)\n+AC_SUBST(BITCOIN_MP_NODE_NAME)\n+AC_SUBST(BITCOIN_MP_GUI_NAME)\n \n AC_SUBST(RELDFLAGS)\n AC_SUBST(DEBUG_CPPFLAGS)\n@@ -1675,13 +1831,16 @@ AC_SUBST(ARM_CRC_CXXFLAGS)\n AC_SUBST(LIBTOOL_APP_LDFLAGS)\n AC_SUBST(USE_SQLITE)\n AC_SUBST(USE_BDB)\n+AC_SUBST(ENABLE_EXTERNAL_SIGNER)\n AC_SUBST(USE_UPNP)\n AC_SUBST(USE_QRCODE)\n AC_SUBST(BOOST_LIBS)\n AC_SUBST(SQLITE_LIBS)\n AC_SUBST(TESTDEFS)\n AC_SUBST(MINIUPNPC_CPPFLAGS)\n AC_SUBST(MINIUPNPC_LIBS)\n+AC_SUBST(NATPMP_CPPFLAGS)\n+AC_SUBST(NATPMP_LIBS)\n AC_SUBST(EVENT_LIBS)\n AC_SUBST(EVENT_PTHREADS_LIBS)\n AC_SUBST(ZMQ_LIBS)\n@@ -1694,11 +1853,14 @@ AC_SUBST(HAVE_BUILTIN_PREFETCH)\n AC_SUBST(HAVE_MM_PREFETCH)\n AC_SUBST(HAVE_STRONG_GETAUXVAL)\n AC_SUBST(HAVE_WEAK_GETAUXVAL)\n+AC_SUBST(ANDROID_ARCH)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])\n AC_CONFIG_LINKS([contrib/devtools/security-check.py:contrib/devtools/security-check.py])\n+AC_CONFIG_LINKS([contrib/devtools/symbol-check.py:contrib/devtools/symbol-check.py])\n AC_CONFIG_LINKS([contrib/devtools/test-security-check.py:contrib/devtools/test-security-check.py])\n+AC_CONFIG_LINKS([contrib/devtools/test-symbol-check.py:contrib/devtools/test-symbol-check.py])\n AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/fuzz/test_runner.py:test/fuzz/test_runner.py])\n@@ -1732,7 +1894,7 @@ if test x$need_bundled_univalue = xyes; then\n   AC_CONFIG_SUBDIRS([src/univalue])\n fi\n \n-ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --with-bignum=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental\"\n+ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental\"\n AC_CONFIG_SUBDIRS([src/secp256k1])\n \n AC_OUTPUT\n@@ -1747,38 +1909,43 @@ esac\n \n echo\n echo \"Options used to compile and link:\"\n-echo \"  boost process = $ax_cv_boost_process\"\n-echo \"  multiprocess  = $build_multiprocess\"\n-echo \"  with wallet   = $enable_wallet\"\n+echo \"  external signer = $use_external_signer\"\n+echo \"  multiprocess    = $build_multiprocess\"\n+echo \"  with libs       = $build_bitcoin_libs\"\n+echo \"  with wallet     = $enable_wallet\"\n if test \"x$enable_wallet\" != \"xno\"; then\n-    echo \"    with sqlite = $use_sqlite\"\n-    echo \"    with bdb    = $use_bdb\"\n+    echo \"    with sqlite   = $use_sqlite\"\n+    echo \"    with bdb      = $use_bdb\"\n fi\n-echo \"  with gui / qt = $bitcoin_enable_qt\"\n+echo \"  with gui / qt   = $bitcoin_enable_qt\"\n if test x$bitcoin_enable_qt != xno; then\n-    echo \"    with qr     = $use_qr\"\n+    echo \"    with qr       = $use_qr\"\n fi\n-echo \"  with zmq      = $use_zmq\"\n-echo \"  with test     = $use_tests\"\n-if test x$use_tests != xno; then\n-    echo \"    with fuzz   = $enable_fuzz\"\n+echo \"  with zmq        = $use_zmq\"\n+if test x$enable_fuzz == xno; then\n+    echo \"  with test       = $use_tests\"\n+else\n+    echo \"  with test       = not building test_bitcoin because fuzzing is enabled\"\n+    echo \"    with fuzz     = $enable_fuzz\"\n fi\n-echo \"  with bench    = $use_bench\"\n-echo \"  with upnp     = $use_upnp\"\n-echo \"  use asm       = $use_asm\"\n-echo \"  sanitizers    = $use_sanitizers\"\n-echo \"  debug enabled = $enable_debug\"\n-echo \"  gprof enabled = $enable_gprof\"\n-echo \"  werror        = $enable_werror\"\n+echo \"  with bench      = $use_bench\"\n+echo \"  with upnp       = $use_upnp\"\n+echo \"  with natpmp     = $use_natpmp\"\n+echo \"  use asm         = $use_asm\"\n+echo \"  ebpf tracing    = $have_sdt\"\n+echo \"  sanitizers      = $use_sanitizers\"\n+echo \"  debug enabled   = $enable_debug\"\n+echo \"  gprof enabled   = $enable_gprof\"\n+echo \"  werror          = $enable_werror\"\n echo\n-echo \"  target os     = $TARGET_OS\"\n-echo \"  build os      = $build_os\"\n+echo \"  target os       = $TARGET_OS\"\n+echo \"  build os        = $build_os\"\n echo\n-echo \"  CC            = $CC\"\n-echo \"  CFLAGS        = $PTHREAD_CFLAGS $CFLAGS\"\n-echo \"  CPPFLAGS      = $DEBUG_CPPFLAGS $HARDENED_CPPFLAGS $CPPFLAGS\"\n-echo \"  CXX           = $CXX\"\n-echo \"  CXXFLAGS      = $DEBUG_CXXFLAGS $HARDENED_CXXFLAGS $WARN_CXXFLAGS $NOWARN_CXXFLAGS $ERROR_CXXFLAGS $GPROF_CXXFLAGS $CXXFLAGS\"\n-echo \"  LDFLAGS       = $PTHREAD_LIBS $HARDENED_LDFLAGS $GPROF_LDFLAGS $LDFLAGS\"\n-echo \"  ARFLAGS       = $ARFLAGS\"\n+echo \"  CC              = $CC\"\n+echo \"  CFLAGS          = $PTHREAD_CFLAGS $CFLAGS\"\n+echo \"  CPPFLAGS        = $DEBUG_CPPFLAGS $HARDENED_CPPFLAGS $CPPFLAGS\"\n+echo \"  CXX             = $CXX\"\n+echo \"  CXXFLAGS        = $DEBUG_CXXFLAGS $HARDENED_CXXFLAGS $WARN_CXXFLAGS $NOWARN_CXXFLAGS $ERROR_CXXFLAGS $GPROF_CXXFLAGS $CXXFLAGS\"\n+echo \"  LDFLAGS         = $PTHREAD_LIBS $HARDENED_LDFLAGS $GPROF_LDFLAGS $LDFLAGS\"\n+echo \"  ARFLAGS         = $ARFLAGS\"\n echo"
      },
      {
        "sha": "a2612ab958458a312294b599ac88d802382d25b4",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -29,8 +29,8 @@ All other packaging related files can be found in the [bitcoin-core/packaging](h\n ### [Gitian-descriptors](/contrib/gitian-descriptors) ###\n Files used during the gitian build process. For more information about gitian, see the [the Bitcoin Core documentation repository](https://github.com/bitcoin-core/docs).\n \n-### [Gitian-keys](/contrib/gitian-keys)\n-PGP keys used for signing Bitcoin Core [Gitian release](/doc/release-process.md) results.\n+### [Builder keys](/contrib/builder-keys)\n+PGP keys used for signing Bitcoin Core [release](/doc/release-process.md) results.\n \n ### [MacDeploy](/contrib/macdeploy) ###\n Scripts and notes for Mac builds."
      },
      {
        "sha": "0e4eeee0a7ad9ebc49c30d30c285ccd41a752771",
        "filename": "contrib/bitcoin-qt.pro",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-qt.pro?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,22 +0,0 @@\n-FORMS += \\\n-    ../src/qt/forms/aboutdialog.ui \\\n-    ../src/qt/forms/addressbookpage.ui \\\n-    ../src/qt/forms/askpassphrasedialog.ui \\\n-    ../src/qt/forms/coincontroldialog.ui \\\n-    ../src/qt/forms/editaddressdialog.ui \\\n-    ../src/qt/forms/helpmessagedialog.ui \\\n-    ../src/qt/forms/intro.ui \\\n-    ../src/qt/forms/openuridialog.ui \\\n-    ../src/qt/forms/optionsdialog.ui \\\n-    ../src/qt/forms/overviewpage.ui \\\n-    ../src/qt/forms/receivecoinsdialog.ui \\\n-    ../src/qt/forms/receiverequestdialog.ui \\\n-    ../src/qt/forms/debugwindow.ui \\\n-    ../src/qt/forms/sendcoinsdialog.ui \\\n-    ../src/qt/forms/sendcoinsentry.ui \\\n-    ../src/qt/forms/signverifymessagedialog.ui \\\n-    ../src/qt/forms/transactiondescdialog.ui \\\n-    ../src/qt/forms/createwalletdialog.ui\n-\n-RESOURCES += \\\n-    ../src/qt/bitcoin.qrc"
      },
      {
        "sha": "a7c1d5ae0a75dd105416539a6ac0e985680057a8",
        "filename": "contrib/builder-keys/README.md",
        "status": "renamed",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/builder-keys/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/builder-keys/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/builder-keys/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,10 +1,10 @@\n-## PGP keys of Gitian builders and Developers\n+## PGP keys of builders and Developers\n \n-The file `keys.txt` contains fingerprints of the public keys of Gitian builders\n-and active developers.\n+The file `keys.txt` contains fingerprints of the public keys of builders and\n+active developers.\n \n The associated keys are mainly used to sign git commits or the build results\n-of Gitian builds.\n+of Guix builds.\n \n The most recent version of each pgp key can be found on most pgp key servers.\n \n@@ -16,12 +16,12 @@ To fetch the latest version of all pgp keys in your gpg homedir,\n gpg --refresh-keys\n ```\n \n-To fetch keys of Gitian builders and active developers, feed the list of\n-fingerprints of the primary keys into gpg:\n+To fetch keys of builders and active developers, feed the list of fingerprints\n+of the primary keys into gpg:\n \n ```sh\n while read fingerprint keyholder_name; do gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys ${fingerprint}; done < ./keys.txt\n ```\n \n-Add your key to the list if you provided Gitian signatures for two major or\n+Add your key to the list if you provided Guix attestations for two major or\n minor releases of Bitcoin Core.",
        "previous_filename": "contrib/gitian-keys/README.md"
      },
      {
        "sha": "db28cd07a0b02828a0caa2a6041563631caa02e0",
        "filename": "contrib/builder-keys/keys.txt",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/builder-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/builder-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/builder-keys/keys.txt?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,51 @@\n+9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C Aaron Clauson (sipsorcery)\n+617C90010B3BD370B0AC7D424BB42E31C79111B8 Akira Takizawa (akx20000)\n+E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach (aschildbach)\n+152812300785C96444D3334D17565732E08E5E41 Andrew Chow (achow101)\n+590B7292695AFFA5B672CBB2E13FC145CD3F4304 Antoine Poinsot (darosior)\n+0AD83877C1F0CD1EE9BD660AD7CC770B81FD22A8 Ben Carman (benthecarman)\n+912FD3228387123DC97E0E57D5566241A0295FA9 BtcDrak (btcdrak)\n+C519EBCF3B926298946783EFF6430754120EC2F4 Christian Decker (cdecker)\n+18AE2F798E0D239755DA4FD24B79F986CBDF8736 Chun Kuan Le (ken2812221)\n+101598DC823C1B5F9A6624ABA5E0907A0380E6C3 CoinForensics (CoinForensics)\n+F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur (centaur)\n+C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields (cfields)\n+BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random (devrandom)\n+6D3170C1DC2C6FD0AEEBCA6743811D1A26623924 Douglas Roark (droark)\n+1C6621605EC50319C463D56C7F81D87985D61612 Emanuele Cisbani (cisba)\n+9A1689B60D1B3CCE9262307A2F40A9BF167FBA47 Erik Mossberg (erkmos)\n+D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece (fivepiece)\n+6F993B250557E7B016ADE5713BDCDA2D87A881D9 Fuzzbawls (Fuzzbawls)\n+01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen (gavinandresen)\n+D1DBF2C4B96F2DEBF4C16654410108112E7EA81F Hennadii Stepanov (hebasto)\n+A2FD494D0021AA9B4FA58F759102B7AE654A4A5A Ilyas Ridhuan (IlyasRidhuan)\n+D3F22A3A4C366C2DCB66D3722DA9C5A7FA81EA35 Jarol Rodriguez (jarolrod)\n+7480909378D544EA6B6DCEB7535B12980BB8A4D3 Jeffri H Frontz (jhfrontz)\n+D3CC177286005BB8FF673294C5242A1AB3936517 jl2012 (jl2012)\n+82921A4B88FD454B7EB8CE3C796C4109063D4EAF Jon Atack (jonatack)\n+32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli (jonasschnelli)\n+4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon (jtimon)\n+C42AFF7C61B3E44A1454CD3557AF762DB3353322 Karl-Johan Alm (kallewoof)\n+30DE693AE0DE9E37B3E7EB6BBFF0F67810C1EED1 Lisa Neigut (niftynei)\n+E463A93F5F3117EEDE6C7316BD02942421F4889F Luke Dashjr (luke-jr)\n+B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B Marco Falke (marco)\n+07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)\n+CA03882CB1FC067B5D3ACFE4D300116E1C875A3D MeshCollider (meshcollider)\n+E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford (fanquake)\n+AD5764F4ADCE1B99BDFD179E12335A271D4D62EC Michael Tidwell (miketwenty1)\n+9692B91BBF0E8D34DFD33B1882C5C009628ECF0C Michagogo (michagogo)\n+C57E4B42223FDE851D4F69DD28DF2724F241D8EE midnightmagic (midnightmagic)\n+F4FC70F07310028424EFC20A8E4256593F177720 Oliver Gugger (guggero, Oliver Gugger)\n+D62A803E27E7F43486035ADBBCD04D8E9CCCAC2A Paul Rabahy (prab)\n+37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04 Peter Todd (petertodd)\n+D762373D24904A3E42F33B08B9A408E71DAAC974 Pieter Wuille [Location: Leuven, Belgium] (sipa)\n+133EAC179436F14A5CF1B794860FEB804E669320 Pieter Wuille (sipa)\n+6A8F9C266528E25AEB1D7731C2371D91CB716EA7 Sebastian Falbesoner (theStack)\n+A8FC55F3B04BA3146F3492E79303B33A305224CB Sebastian Kung (TheCharlatan)\n+ED9BDF7AD6A55E232E84524257FF9BDBCC301009 Sjors Provoost (sjors)\n+867345026B6763E8B07EE73AB6737117397F5C4F Stephan Oeste (Emzy)\n+9EDAFF80E080659604F4A76B2EBB056FD847F8A7 Stephan Oeste (Emzy)\n+6DEEF79B050C4072509B743F8C275BC595448867 Tomas Kanocz (KanoczTomas)\n+AEC1884398647C47413C1C3FB1179EB7347DC10D Warren Togami (wtogami)\n+79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko (willyko)\n+71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan (laanwj)"
      },
      {
        "sha": "6d23f600c39b7b8082606fa2d6bbab8a78a45049",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,11 +1,11 @@\n Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/\n Upstream-Name: Bitcoin\n Upstream-Contact: Satoshi Nakamoto <satoshin@gmx.com>\n- irc://#bitcoin@freenode.net\n+ irc://#bitcoin-core-dev@libera.chat\n Source: https://github.com/bitcoin/bitcoin\n \n Files: *\n-Copyright: 2009-2020, Bitcoin Core Developers\n+Copyright: 2009-2021, Bitcoin Core Developers\n License: Expat\n Comment: The Bitcoin Core Developers encompasses the current developers listed on bitcoin.org,\n          as well as the numerous contributors to the project.\n@@ -87,6 +87,10 @@ Files: src/qt/res/icons/proxy.png\n Copyright: Cristian Mircea Messel\n License: public-domain\n \n+Files: src/qt/res/fonts/RobotoMono-Bold.ttf\n+License: Apache-2.0\n+Comment: Site: https://fonts.google.com/specimen/Roboto+Mono\n+\n \n License: Expat\n  Permission is hereby granted, free of charge, to any person obtaining a\n@@ -144,3 +148,14 @@ Comment:\n \n License: public-domain\n  This work is in the public domain.\n+\n+License: Apache-2.0\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+ http://www.apache.org/licenses/LICENSE-2.0\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License."
      },
      {
        "sha": "1fa850af1a7cf5902bc1993334d3f56b7be59dcf",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -7,7 +7,8 @@ clang-format-diff.py\n \n A script to format unified git diffs according to [.clang-format](../../src/.clang-format).\n \n-Requires `clang-format`, installed e.g. via `brew install clang-format` on macOS.\n+Requires `clang-format`, installed e.g. via `brew install clang-format` on macOS,\n+or `sudo apt install clang-format` on Debian/Ubuntu.\n \n For instance, to format the last commit with 0 lines of context,\n the script should be called from the git root folder as follows."
      },
      {
        "sha": "b1d9f2b7db23b06928d5afd3af3b7b3115822fe0",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,10 +1,11 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n import sys\n import re\n+from typing import Dict, List, Set\n \n MAPPING = {\n     'core_read.cpp': 'core_io.cpp',\n@@ -32,7 +33,7 @@ def module_name(path):\n     return None\n \n files = dict()\n-deps = dict()\n+deps: Dict[str, Set[str]] = dict()\n \n RE = re.compile(\"^#include <(.*)>\")\n \n@@ -59,12 +60,12 @@ def module_name(path):\n                     deps[module].add(included_module)\n \n # Loop to find the shortest (remaining) circular dependency\n-have_cycle = False\n+have_cycle: bool = False\n while True:\n     shortest_cycle = None\n     for module in sorted(deps.keys()):\n         # Build the transitive closure of dependencies of module\n-        closure = dict()\n+        closure: Dict[str, List[str]] = dict()\n         for dep in deps[module]:\n             closure[dep] = []\n         while True:"
      },
      {
        "sha": "b7bf76ce77e01c4ccf38965ad9d91f62d2e7bae1",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env bash\n-# Copyright (c) 2016-2019 The Bitcoin Core developers\n+# Copyright (c) 2016-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,10 +14,27 @@ BITCOIND=${BITCOIND:-$BINDIR/bitcoind}\n BITCOINCLI=${BITCOINCLI:-$BINDIR/bitcoin-cli}\n BITCOINTX=${BITCOINTX:-$BINDIR/bitcoin-tx}\n WALLET_TOOL=${WALLET_TOOL:-$BINDIR/bitcoin-wallet}\n+BITCOINUTIL=${BITCOINQT:-$BINDIR/bitcoin-util}\n BITCOINQT=${BITCOINQT:-$BINDIR/qt/bitcoin-qt}\n \n [ ! -x $BITCOIND ] && echo \"$BITCOIND not found or not executable.\" && exit 1\n \n+# Don't allow man pages to be generated for binaries built from a dirty tree\n+DIRTY=\"\"\n+for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $WALLET_TOOL $BITCOINUTIL $BITCOINQT; do\n+  VERSION_OUTPUT=$($cmd --version)\n+  if [[ $VERSION_OUTPUT == *\"dirty\"* ]]; then\n+    DIRTY=\"${DIRTY}${cmd}\\n\"\n+  fi\n+done\n+if [ -n \"$DIRTY\" ]\n+then\n+  echo -e \"WARNING: the following binaries were built from a dirty tree:\\n\"\n+  echo -e $DIRTY\n+  echo \"man pages generated from dirty binaries should NOT be committed.\"\n+  echo \"To properly generate man pages, please commit your changes to the above binaries, rebuild them, then run this script again.\"\n+fi\n+\n # The autodetected version git tag can screw up manpage output a little bit\n read -r -a BTCVER <<< \"$($BITCOINCLI --version | head -n1 | awk -F'[ -]' '{ print $6, $7 }')\"\n \n@@ -27,7 +44,7 @@ read -r -a BTCVER <<< \"$($BITCOINCLI --version | head -n1 | awk -F'[ -]' '{ prin\n echo \"[COPYRIGHT]\" > footer.h2m\n $BITCOIND --version | sed -n '1!p' >> footer.h2m\n \n-for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $WALLET_TOOL $BITCOINQT; do\n+for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $WALLET_TOOL $BITCOINUTIL $BITCOINQT; do\n   cmdname=\"${cmd##*/}\"\n   help2man -N --version-string=${BTCVER[0]} --include=footer.h2m -o ${MANDIR}/${cmdname}.1 ${cmd}\n   sed -i \"s/\\\\\\-${BTCVER[1]}//g\" ${MANDIR}/${cmdname}.1"
      },
      {
        "sha": "64660968ad255886df97501115de636ae8873a73",
        "filename": "contrib/devtools/pixie.py",
        "status": "added",
        "additions": 323,
        "deletions": 0,
        "changes": 323,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/pixie.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/pixie.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/pixie.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,323 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 Wladimir J. van der Laan\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Compact, self-contained ELF implementation for bitcoin-core security checks.\n+'''\n+import struct\n+import types\n+from typing import Dict, List, Optional, Union, Tuple\n+\n+# you can find all these values in elf.h\n+EI_NIDENT = 16\n+\n+# Byte indices in e_ident\n+EI_CLASS = 4 # ELFCLASSxx\n+EI_DATA = 5  # ELFDATAxxxx\n+\n+ELFCLASS32 = 1 # 32-bit\n+ELFCLASS64 = 2 # 64-bit\n+\n+ELFDATA2LSB = 1 # little endian\n+ELFDATA2MSB = 2 # big endian\n+\n+# relevant values for e_machine\n+EM_386 = 3\n+EM_PPC64 = 21\n+EM_ARM = 40\n+EM_AARCH64 = 183\n+EM_X86_64 = 62\n+EM_RISCV = 243\n+\n+# relevant values for e_type\n+ET_DYN = 3\n+\n+# relevant values for sh_type\n+SHT_PROGBITS = 1\n+SHT_STRTAB = 3\n+SHT_DYNAMIC = 6\n+SHT_DYNSYM = 11\n+SHT_GNU_verneed = 0x6ffffffe\n+SHT_GNU_versym = 0x6fffffff\n+\n+# relevant values for p_type\n+PT_LOAD = 1\n+PT_GNU_STACK = 0x6474e551\n+PT_GNU_RELRO = 0x6474e552\n+\n+# relevant values for p_flags\n+PF_X = (1 << 0)\n+PF_W = (1 << 1)\n+PF_R = (1 << 2)\n+\n+# relevant values for d_tag\n+DT_NEEDED = 1\n+DT_FLAGS = 30\n+\n+# relevant values of `d_un.d_val' in the DT_FLAGS entry\n+DF_BIND_NOW = 0x00000008\n+\n+# relevant d_tags with string payload\n+STRING_TAGS = {DT_NEEDED}\n+\n+# rrlevant values for ST_BIND subfield of st_info (symbol binding)\n+STB_LOCAL = 0\n+\n+class ELFRecord(types.SimpleNamespace):\n+    '''Unified parsing for ELF records.'''\n+    def __init__(self, data: bytes, offset: int, eh: 'ELFHeader', total_size: Optional[int]) -> None:\n+        hdr_struct = self.STRUCT[eh.ei_class][0][eh.ei_data]\n+        if total_size is not None and hdr_struct.size > total_size:\n+            raise ValueError(f'{self.__class__.__name__} header size too small ({total_size} < {hdr_struct.size})')\n+        for field, value in zip(self.STRUCT[eh.ei_class][1], hdr_struct.unpack(data[offset:offset + hdr_struct.size])):\n+            setattr(self, field, value)\n+\n+def BiStruct(chars: str) -> Dict[int, struct.Struct]:\n+    '''Compile a struct parser for both endians.'''\n+    return {\n+        ELFDATA2LSB: struct.Struct('<' + chars),\n+        ELFDATA2MSB: struct.Struct('>' + chars),\n+    }\n+\n+class ELFHeader(ELFRecord):\n+    FIELDS = ['e_type', 'e_machine', 'e_version', 'e_entry', 'e_phoff', 'e_shoff', 'e_flags', 'e_ehsize', 'e_phentsize', 'e_phnum', 'e_shentsize', 'e_shnum', 'e_shstrndx']\n+    STRUCT = {\n+        ELFCLASS32: (BiStruct('HHIIIIIHHHHHH'), FIELDS),\n+        ELFCLASS64: (BiStruct('HHIQQQIHHHHHH'), FIELDS),\n+    }\n+\n+    def __init__(self, data: bytes, offset: int) -> None:\n+        self.e_ident = data[offset:offset + EI_NIDENT]\n+        if self.e_ident[0:4] != b'\\x7fELF':\n+            raise ValueError('invalid ELF magic')\n+        self.ei_class = self.e_ident[EI_CLASS]\n+        self.ei_data = self.e_ident[EI_DATA]\n+\n+        super().__init__(data, offset + EI_NIDENT, self, None)\n+\n+    def __repr__(self) -> str:\n+        return f'Header(e_ident={self.e_ident!r}, e_type={self.e_type}, e_machine={self.e_machine}, e_version={self.e_version}, e_entry={self.e_entry}, e_phoff={self.e_phoff}, e_shoff={self.e_shoff}, e_flags={self.e_flags}, e_ehsize={self.e_ehsize}, e_phentsize={self.e_phentsize}, e_phnum={self.e_phnum}, e_shentsize={self.e_shentsize}, e_shnum={self.e_shnum}, e_shstrndx={self.e_shstrndx})'\n+\n+class Section(ELFRecord):\n+    name: Optional[bytes] = None\n+    FIELDS = ['sh_name', 'sh_type', 'sh_flags', 'sh_addr', 'sh_offset', 'sh_size', 'sh_link', 'sh_info', 'sh_addralign', 'sh_entsize']\n+    STRUCT = {\n+        ELFCLASS32: (BiStruct('IIIIIIIIII'), FIELDS),\n+        ELFCLASS64: (BiStruct('IIQQQQIIQQ'), FIELDS),\n+    }\n+\n+    def __init__(self, data: bytes, offset: int, eh: ELFHeader) -> None:\n+        super().__init__(data, offset, eh, eh.e_shentsize)\n+        self._data = data\n+\n+    def __repr__(self) -> str:\n+        return f'Section(sh_name={self.sh_name}({self.name!r}), sh_type=0x{self.sh_type:x}, sh_flags={self.sh_flags}, sh_addr=0x{self.sh_addr:x}, sh_offset=0x{self.sh_offset:x}, sh_size={self.sh_size}, sh_link={self.sh_link}, sh_info={self.sh_info}, sh_addralign={self.sh_addralign}, sh_entsize={self.sh_entsize})'\n+\n+    def contents(self) -> bytes:\n+        '''Return section contents.'''\n+        return self._data[self.sh_offset:self.sh_offset + self.sh_size]\n+\n+class ProgramHeader(ELFRecord):\n+    STRUCT = {\n+        # different ELF classes have the same fields, but in a different order to optimize space versus alignment\n+        ELFCLASS32: (BiStruct('IIIIIIII'), ['p_type', 'p_offset', 'p_vaddr', 'p_paddr', 'p_filesz', 'p_memsz', 'p_flags', 'p_align']),\n+        ELFCLASS64: (BiStruct('IIQQQQQQ'), ['p_type', 'p_flags', 'p_offset', 'p_vaddr', 'p_paddr', 'p_filesz', 'p_memsz', 'p_align']),\n+    }\n+\n+    def __init__(self, data: bytes, offset: int, eh: ELFHeader) -> None:\n+        super().__init__(data, offset, eh, eh.e_phentsize)\n+\n+    def __repr__(self) -> str:\n+        return f'ProgramHeader(p_type={self.p_type}, p_offset={self.p_offset}, p_vaddr={self.p_vaddr}, p_paddr={self.p_paddr}, p_filesz={self.p_filesz}, p_memsz={self.p_memsz}, p_flags={self.p_flags}, p_align={self.p_align})'\n+\n+class Symbol(ELFRecord):\n+    STRUCT = {\n+        # different ELF classes have the same fields, but in a different order to optimize space versus alignment\n+        ELFCLASS32: (BiStruct('IIIBBH'), ['st_name', 'st_value', 'st_size', 'st_info', 'st_other', 'st_shndx']),\n+        ELFCLASS64: (BiStruct('IBBHQQ'), ['st_name', 'st_info', 'st_other', 'st_shndx', 'st_value', 'st_size']),\n+    }\n+\n+    def __init__(self, data: bytes, offset: int, eh: ELFHeader, symtab: Section, strings: bytes, version: Optional[bytes]) -> None:\n+        super().__init__(data, offset, eh, symtab.sh_entsize)\n+        self.name = _lookup_string(strings, self.st_name)\n+        self.version = version\n+\n+    def __repr__(self) -> str:\n+        return f'Symbol(st_name={self.st_name}({self.name!r}), st_value={self.st_value}, st_size={self.st_size}, st_info={self.st_info}, st_other={self.st_other}, st_shndx={self.st_shndx}, version={self.version!r})'\n+\n+    @property\n+    def is_import(self) -> bool:\n+        '''Returns whether the symbol is an imported symbol.'''\n+        return self.st_bind != STB_LOCAL and self.st_shndx == 0\n+\n+    @property\n+    def is_export(self) -> bool:\n+        '''Returns whether the symbol is an exported symbol.'''\n+        return self.st_bind != STB_LOCAL and self.st_shndx != 0\n+\n+    @property\n+    def st_bind(self) -> int:\n+        '''Returns STB_*.'''\n+        return self.st_info >> 4\n+\n+class Verneed(ELFRecord):\n+    DEF = (BiStruct('HHIII'), ['vn_version', 'vn_cnt', 'vn_file', 'vn_aux', 'vn_next'])\n+    STRUCT = { ELFCLASS32: DEF, ELFCLASS64: DEF }\n+\n+    def __init__(self, data: bytes, offset: int, eh: ELFHeader) -> None:\n+        super().__init__(data, offset, eh, None)\n+\n+    def __repr__(self) -> str:\n+        return f'Verneed(vn_version={self.vn_version}, vn_cnt={self.vn_cnt}, vn_file={self.vn_file}, vn_aux={self.vn_aux}, vn_next={self.vn_next})'\n+\n+class Vernaux(ELFRecord):\n+    DEF = (BiStruct('IHHII'), ['vna_hash', 'vna_flags', 'vna_other', 'vna_name', 'vna_next'])\n+    STRUCT = { ELFCLASS32: DEF, ELFCLASS64: DEF }\n+\n+    def __init__(self, data: bytes, offset: int, eh: ELFHeader, strings: bytes) -> None:\n+        super().__init__(data, offset, eh, None)\n+        self.name = _lookup_string(strings, self.vna_name)\n+\n+    def __repr__(self) -> str:\n+        return f'Veraux(vna_hash={self.vna_hash}, vna_flags={self.vna_flags}, vna_other={self.vna_other}, vna_name={self.vna_name}({self.name!r}), vna_next={self.vna_next})'\n+\n+class DynTag(ELFRecord):\n+    STRUCT = {\n+        ELFCLASS32: (BiStruct('II'), ['d_tag', 'd_val']),\n+        ELFCLASS64: (BiStruct('QQ'), ['d_tag', 'd_val']),\n+    }\n+\n+    def __init__(self, data: bytes, offset: int, eh: ELFHeader, section: Section) -> None:\n+        super().__init__(data, offset, eh, section.sh_entsize)\n+\n+    def __repr__(self) -> str:\n+        return f'DynTag(d_tag={self.d_tag}, d_val={self.d_val})'\n+\n+def _lookup_string(data: bytes, index: int) -> bytes:\n+    '''Look up string by offset in ELF string table.'''\n+    endx = data.find(b'\\x00', index)\n+    assert endx != -1\n+    return data[index:endx]\n+\n+VERSYM_S = BiStruct('H') # .gnu_version section has a single 16-bit integer per symbol in the linked section\n+def _parse_symbol_table(section: Section, strings: bytes, eh: ELFHeader, versym: bytes, verneed: Dict[int, bytes]) -> List[Symbol]:\n+    '''Parse symbol table, return a list of symbols.'''\n+    data = section.contents()\n+    symbols = []\n+    versym_iter = (verneed.get(v[0]) for v in VERSYM_S[eh.ei_data].iter_unpack(versym))\n+    for ofs, version in zip(range(0, len(data), section.sh_entsize), versym_iter):\n+        symbols.append(Symbol(data, ofs, eh, section, strings, version))\n+    return symbols\n+\n+def _parse_verneed(section: Section, strings: bytes, eh: ELFHeader) -> Dict[int, bytes]:\n+    '''Parse .gnu.version_r section, return a dictionary of {versym: 'GLIBC_...'}.'''\n+    data = section.contents()\n+    ofs = 0\n+    result = {}\n+    while True:\n+        verneed = Verneed(data, ofs, eh)\n+        aofs = ofs + verneed.vn_aux\n+        while True:\n+            vernaux = Vernaux(data, aofs, eh, strings)\n+            result[vernaux.vna_other] = vernaux.name\n+            if not vernaux.vna_next:\n+                break\n+            aofs += vernaux.vna_next\n+\n+        if not verneed.vn_next:\n+            break\n+        ofs += verneed.vn_next\n+\n+    return result\n+\n+def _parse_dyn_tags(section: Section, strings: bytes, eh: ELFHeader) -> List[Tuple[int, Union[bytes, int]]]:\n+    '''Parse dynamic tags. Return array of tuples.'''\n+    data = section.contents()\n+    ofs = 0\n+    result = []\n+    for ofs in range(0, len(data), section.sh_entsize):\n+        tag = DynTag(data, ofs, eh, section)\n+        val = _lookup_string(strings, tag.d_val) if tag.d_tag in STRING_TAGS else tag.d_val\n+        result.append((tag.d_tag, val))\n+\n+    return result\n+\n+class ELFFile:\n+    sections: List[Section]\n+    program_headers: List[ProgramHeader]\n+    dyn_symbols: List[Symbol]\n+    dyn_tags: List[Tuple[int, Union[bytes, int]]]\n+\n+    def __init__(self, data: bytes) -> None:\n+        self.data = data\n+        self.hdr = ELFHeader(self.data, 0)\n+        self._load_sections()\n+        self._load_program_headers()\n+        self._load_dyn_symbols()\n+        self._load_dyn_tags()\n+        self._section_to_segment_mapping()\n+\n+    def _load_sections(self) -> None:\n+        self.sections = []\n+        for idx in range(self.hdr.e_shnum):\n+            offset = self.hdr.e_shoff + idx * self.hdr.e_shentsize\n+            self.sections.append(Section(self.data, offset, self.hdr))\n+\n+        shstr = self.sections[self.hdr.e_shstrndx].contents()\n+        for section in self.sections:\n+            section.name = _lookup_string(shstr, section.sh_name)\n+\n+    def _load_program_headers(self) -> None:\n+        self.program_headers = []\n+        for idx in range(self.hdr.e_phnum):\n+            offset = self.hdr.e_phoff + idx * self.hdr.e_phentsize\n+            self.program_headers.append(ProgramHeader(self.data, offset, self.hdr))\n+\n+    def _load_dyn_symbols(self) -> None:\n+        # first, load 'verneed' section\n+        verneed = None\n+        for section in self.sections:\n+            if section.sh_type == SHT_GNU_verneed:\n+                strtab = self.sections[section.sh_link].contents() # associated string table\n+                assert verneed is None # only one section of this kind please\n+                verneed = _parse_verneed(section, strtab, self.hdr)\n+        assert verneed is not None\n+\n+        # then, correlate GNU versym sections with dynamic symbol sections\n+        versym = {}\n+        for section in self.sections:\n+            if section.sh_type == SHT_GNU_versym:\n+                versym[section.sh_link] = section\n+\n+        # finally, load dynsym sections\n+        self.dyn_symbols = []\n+        for idx, section in enumerate(self.sections):\n+            if section.sh_type == SHT_DYNSYM: # find dynamic symbol tables\n+                strtab_data = self.sections[section.sh_link].contents() # associated string table\n+                versym_data = versym[idx].contents() # associated symbol version table\n+                self.dyn_symbols += _parse_symbol_table(section, strtab_data, self.hdr, versym_data, verneed)\n+\n+    def _load_dyn_tags(self) -> None:\n+        self.dyn_tags = []\n+        for idx, section in enumerate(self.sections):\n+            if section.sh_type == SHT_DYNAMIC: # find dynamic tag tables\n+                strtab = self.sections[section.sh_link].contents() # associated string table\n+                self.dyn_tags += _parse_dyn_tags(section, strtab, self.hdr)\n+\n+    def _section_to_segment_mapping(self) -> None:\n+        for ph in self.program_headers:\n+            ph.sections = []\n+            for section in self.sections:\n+                if ph.p_vaddr <= section.sh_addr < (ph.p_vaddr + ph.p_memsz):\n+                    ph.sections.append(section)\n+\n+    def query_dyn_tags(self, tag_in: int) -> List[Union[int, bytes]]:\n+        '''Return the values of all dyn tags with the specified tag.'''\n+        return [val for (tag, val) in self.dyn_tags if tag == tag_in]\n+\n+\n+def load(filename: str) -> ELFFile:\n+    with open(filename, 'rb') as f:\n+        data = f.read()\n+    return ELFFile(data)"
      },
      {
        "sha": "0b59d8eada682c7d84313cfdb110ef9b85892f33",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 109,
        "deletions": 205,
        "changes": 314,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -6,95 +6,31 @@\n Perform basic security checks on a series of executables.\n Exit status will be 0 if successful, and the program will be silent.\n Otherwise the exit status will be 1 and it will log which executables failed which checks.\n-Needs `readelf` (for ELF), `objdump` (for PE) and `otool` (for MACHO).\n '''\n-import subprocess\n import sys\n-import os\n-\n from typing import List, Optional\n \n-READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n-OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n-OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n-\n-def run_command(command) -> str:\n-    p = subprocess.run(command, stdout=subprocess.PIPE, check=True, universal_newlines=True)\n-    return p.stdout\n+import lief\n+import pixie\n \n def check_ELF_PIE(executable) -> bool:\n     '''\n     Check for position independent executable (PIE), allowing for address space randomization.\n     '''\n-    stdout = run_command([READELF_CMD, '-h', '-W', executable])\n-\n-    ok = False\n-    for line in stdout.splitlines():\n-        tokens = line.split()\n-        if len(line)>=2 and tokens[0] == 'Type:' and tokens[1] == 'DYN':\n-            ok = True\n-    return ok\n-\n-def get_ELF_program_headers(executable):\n-    '''Return type and flags for ELF program headers'''\n-    stdout = run_command([READELF_CMD, '-l', '-W', executable])\n-\n-    in_headers = False\n-    headers = []\n-    for line in stdout.splitlines():\n-        if line.startswith('Program Headers:'):\n-            in_headers = True\n-            count = 0\n-        if line == '':\n-            in_headers = False\n-        if in_headers:\n-            if count == 1: # header line\n-                header = [x.strip() for x in line.split()]\n-                ofs_typ = header.index('Type')\n-                ofs_flags = header.index('Flg')\n-                # assert readelf output is what we expect\n-                if ofs_typ == -1 or ofs_flags == -1:\n-                    raise ValueError('Cannot parse elfread -lW output')\n-            elif count > 1:\n-                splitline = [x.strip() for x in line.split()]\n-                typ = splitline[ofs_typ]\n-                if not typ.startswith('[R'): # skip [Requesting ...]\n-                    splitline = [x.strip() for x in line.split()]\n-                    flags = splitline[ofs_flags]\n-                    # check for 'R', ' E'\n-                    if splitline[ofs_flags + 1] == 'E':\n-                        flags += ' E'\n-                    headers.append((typ, flags, []))\n-            count += 1\n-\n-        if line.startswith(' Section to Segment mapping:'):\n-            in_mapping = True\n-            count = 0\n-        if line == '':\n-            in_mapping = False\n-        if in_mapping:\n-            if count == 1: # header line\n-                ofs_segment = line.find('Segment')\n-                ofs_sections = line.find('Sections...')\n-                if ofs_segment == -1 or ofs_sections == -1:\n-                    raise ValueError('Cannot parse elfread -lW output')\n-            elif count > 1:\n-                segment = int(line[ofs_segment:ofs_sections].strip())\n-                sections = line[ofs_sections:].strip().split()\n-                headers[segment][2].extend(sections)\n-            count += 1\n-    return headers\n+    elf = pixie.load(executable)\n+    return elf.hdr.e_type == pixie.ET_DYN\n \n def check_ELF_NX(executable) -> bool:\n     '''\n     Check that no sections are writable and executable (including the stack)\n     '''\n+    elf = pixie.load(executable)\n     have_wx = False\n     have_gnu_stack = False\n-    for (typ, flags, _) in get_ELF_program_headers(executable):\n-        if typ == 'GNU_STACK':\n+    for ph in elf.program_headers:\n+        if ph.p_type == pixie.PT_GNU_STACK:\n             have_gnu_stack = True\n-        if 'W' in flags and 'E' in flags: # section is both writable and executable\n+        if (ph.p_flags & pixie.PF_W) != 0 and (ph.p_flags & pixie.PF_X) != 0: # section is both writable and executable\n             have_wx = True\n     return have_gnu_stack and not have_wx\n \n@@ -104,35 +40,34 @@ def check_ELF_RELRO(executable) -> bool:\n     GNU_RELRO program header must exist\n     Dynamic section must have BIND_NOW flag\n     '''\n+    elf = pixie.load(executable)\n     have_gnu_relro = False\n-    for (typ, flags, _) in get_ELF_program_headers(executable):\n-        # Note: not checking flags == 'R': here as linkers set the permission differently\n+    for ph in elf.program_headers:\n+        # Note: not checking p_flags == PF_R: here as linkers set the permission differently\n         # This does not affect security: the permission flags of the GNU_RELRO program\n         # header are ignored, the PT_LOAD header determines the effective permissions.\n         # However, the dynamic linker need to write to this area so these are RW.\n         # Glibc itself takes care of mprotecting this area R after relocations are finished.\n         # See also https://marc.info/?l=binutils&m=1498883354122353\n-        if typ == 'GNU_RELRO':\n+        if ph.p_type == pixie.PT_GNU_RELRO:\n             have_gnu_relro = True\n \n     have_bindnow = False\n-    stdout = run_command([READELF_CMD, '-d', '-W', executable])\n-\n-    for line in stdout.splitlines():\n-        tokens = line.split()\n-        if len(tokens)>1 and tokens[1] == '(BIND_NOW)' or (len(tokens)>2 and tokens[1] == '(FLAGS)' and 'BIND_NOW' in tokens[2:]):\n+    for flags in elf.query_dyn_tags(pixie.DT_FLAGS):\n+        assert isinstance(flags, int)\n+        if flags & pixie.DF_BIND_NOW:\n             have_bindnow = True\n+\n     return have_gnu_relro and have_bindnow\n \n def check_ELF_Canary(executable) -> bool:\n     '''\n     Check for use of stack canary\n     '''\n-    stdout = run_command([READELF_CMD, '--dyn-syms', '-W', executable])\n-\n+    elf = pixie.load(executable)\n     ok = False\n-    for line in stdout.splitlines():\n-        if '__stack_chk_fail' in line:\n+    for symbol in elf.dyn_symbols:\n+        if symbol.name == b'__stack_chk_fail':\n             ok = True\n     return ok\n \n@@ -142,48 +77,55 @@ def check_ELF_separate_code(executable):\n     based on their permissions. This checks for missing -Wl,-z,separate-code\n     and potentially other problems.\n     '''\n+    elf = pixie.load(executable)\n+    R = pixie.PF_R\n+    W = pixie.PF_W\n+    E = pixie.PF_X\n     EXPECTED_FLAGS = {\n         # Read + execute\n-        '.init': 'R E',\n-        '.plt': 'R E',\n-        '.plt.got': 'R E',\n-        '.plt.sec': 'R E',\n-        '.text': 'R E',\n-        '.fini': 'R E',\n+        b'.init': R | E,\n+        b'.plt': R | E,\n+        b'.plt.got': R | E,\n+        b'.plt.sec': R | E,\n+        b'.text': R | E,\n+        b'.fini': R | E,\n         # Read-only data\n-        '.interp': 'R',\n-        '.note.gnu.property': 'R',\n-        '.note.gnu.build-id': 'R',\n-        '.note.ABI-tag': 'R',\n-        '.gnu.hash': 'R',\n-        '.dynsym': 'R',\n-        '.dynstr': 'R',\n-        '.gnu.version': 'R',\n-        '.gnu.version_r': 'R',\n-        '.rela.dyn': 'R',\n-        '.rela.plt': 'R',\n-        '.rodata': 'R',\n-        '.eh_frame_hdr': 'R',\n-        '.eh_frame': 'R',\n-        '.qtmetadata': 'R',\n-        '.gcc_except_table': 'R',\n-        '.stapsdt.base': 'R',\n+        b'.interp': R,\n+        b'.note.gnu.property': R,\n+        b'.note.gnu.build-id': R,\n+        b'.note.ABI-tag': R,\n+        b'.gnu.hash': R,\n+        b'.dynsym': R,\n+        b'.dynstr': R,\n+        b'.gnu.version': R,\n+        b'.gnu.version_r': R,\n+        b'.rela.dyn': R,\n+        b'.rela.plt': R,\n+        b'.rodata': R,\n+        b'.eh_frame_hdr': R,\n+        b'.eh_frame': R,\n+        b'.qtmetadata': R,\n+        b'.gcc_except_table': R,\n+        b'.stapsdt.base': R,\n         # Writable data\n-        '.init_array': 'RW',\n-        '.fini_array': 'RW',\n-        '.dynamic': 'RW',\n-        '.got': 'RW',\n-        '.data': 'RW',\n-        '.bss': 'RW',\n+        b'.init_array': R | W,\n+        b'.fini_array': R | W,\n+        b'.dynamic': R | W,\n+        b'.got': R | W,\n+        b'.data': R | W,\n+        b'.bss': R | W,\n     }\n+    if elf.hdr.e_machine == pixie.EM_PPC64:\n+        # .plt is RW on ppc64 even with separate-code\n+        EXPECTED_FLAGS[b'.plt'] = R | W\n     # For all LOAD program headers get mapping to the list of sections,\n     # and for each section, remember the flags of the associated program header.\n     flags_per_section = {}\n-    for (typ, flags, sections) in get_ELF_program_headers(executable):\n-        if typ == 'LOAD':\n-            for section in sections:\n-                assert(section not in flags_per_section)\n-                flags_per_section[section] = flags\n+    for ph in elf.program_headers:\n+        if ph.p_type == pixie.PT_LOAD:\n+            for section in ph.sections:\n+                assert(section.name not in flags_per_section)\n+                flags_per_section[section.name] = ph.p_flags\n     # Spot-check ELF LOAD program header flags per section\n     # If these sections exist, check them against the expected R/W/E flags\n     for (section, flags) in flags_per_section.items():\n@@ -192,112 +134,72 @@ def check_ELF_separate_code(executable):\n                 return False\n     return True\n \n-def get_PE_dll_characteristics(executable) -> int:\n-    '''Get PE DllCharacteristics bits'''\n-    stdout = run_command([OBJDUMP_CMD, '-x',  executable])\n-\n-    bits = 0\n-    for line in stdout.splitlines():\n-        tokens = line.split()\n-        if len(tokens)>=2 and tokens[0] == 'DllCharacteristics':\n-            bits = int(tokens[1],16)\n-    return bits\n-\n-IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA = 0x0020\n-IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE    = 0x0040\n-IMAGE_DLL_CHARACTERISTICS_NX_COMPAT       = 0x0100\n-\n def check_PE_DYNAMIC_BASE(executable) -> bool:\n     '''PIE: DllCharacteristics bit 0x40 signifies dynamicbase (ASLR)'''\n-    bits = get_PE_dll_characteristics(executable)\n-    return (bits & IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE) == IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE\n+    binary = lief.parse(executable)\n+    return lief.PE.DLL_CHARACTERISTICS.DYNAMIC_BASE in binary.optional_header.dll_characteristics_lists\n \n # Must support high-entropy 64-bit address space layout randomization\n # in addition to DYNAMIC_BASE to have secure ASLR.\n def check_PE_HIGH_ENTROPY_VA(executable) -> bool:\n     '''PIE: DllCharacteristics bit 0x20 signifies high-entropy ASLR'''\n-    bits = get_PE_dll_characteristics(executable)\n-    return (bits & IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA) == IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA\n+    binary = lief.parse(executable)\n+    return lief.PE.DLL_CHARACTERISTICS.HIGH_ENTROPY_VA in binary.optional_header.dll_characteristics_lists\n \n def check_PE_RELOC_SECTION(executable) -> bool:\n     '''Check for a reloc section. This is required for functional ASLR.'''\n-    stdout = run_command([OBJDUMP_CMD, '-h',  executable])\n-\n-    for line in stdout.splitlines():\n-        if '.reloc' in line:\n-            return True\n-    return False\n+    binary = lief.parse(executable)\n+    return binary.has_relocations\n \n-def check_PE_NX(executable) -> bool:\n-    '''NX: DllCharacteristics bit 0x100 signifies nxcompat (DEP)'''\n-    bits = get_PE_dll_characteristics(executable)\n-    return (bits & IMAGE_DLL_CHARACTERISTICS_NX_COMPAT) == IMAGE_DLL_CHARACTERISTICS_NX_COMPAT\n-\n-def get_MACHO_executable_flags(executable) -> List[str]:\n-    stdout = run_command([OTOOL_CMD, '-vh', executable])\n+def check_MACHO_NOUNDEFS(executable) -> bool:\n+    '''\n+    Check for no undefined references.\n+    '''\n+    binary = lief.parse(executable)\n+    return binary.header.has(lief.MachO.HEADER_FLAGS.NOUNDEFS)\n \n-    flags = []\n-    for line in stdout.splitlines():\n-        tokens = line.split()\n-        # filter first two header lines\n-        if 'magic' in tokens or 'Mach' in tokens:\n-            continue\n-        # filter ncmds and sizeofcmds values\n-        flags += [t for t in tokens if not t.isdigit()]\n-    return flags\n+def check_MACHO_LAZY_BINDINGS(executable) -> bool:\n+    '''\n+    Check for no lazy bindings.\n+    We don't use or check for MH_BINDATLOAD. See #18295.\n+    '''\n+    binary = lief.parse(executable)\n+    return binary.dyld_info.lazy_bind == (0,0)\n \n-def check_MACHO_PIE(executable) -> bool:\n+def check_MACHO_Canary(executable) -> bool:\n     '''\n-    Check for position independent executable (PIE), allowing for address space randomization.\n+    Check for use of stack canary\n     '''\n-    flags = get_MACHO_executable_flags(executable)\n-    if 'PIE' in flags:\n-        return True\n-    return False\n+    binary = lief.parse(executable)\n+    return binary.has_symbol('___stack_chk_fail')\n \n-def check_MACHO_NOUNDEFS(executable) -> bool:\n+def check_PIE(executable) -> bool:\n     '''\n-    Check for no undefined references.\n+    Check for position independent executable (PIE),\n+    allowing for address space randomization.\n     '''\n-    flags = get_MACHO_executable_flags(executable)\n-    if 'NOUNDEFS' in flags:\n-        return True\n-    return False\n+    binary = lief.parse(executable)\n+    return binary.is_pie\n \n-def check_MACHO_NX(executable) -> bool:\n+def check_NX(executable) -> bool:\n     '''\n     Check for no stack execution\n     '''\n-    flags = get_MACHO_executable_flags(executable)\n-    if 'ALLOW_STACK_EXECUTION' in flags:\n-        return False\n-    return True\n+    binary = lief.parse(executable)\n+    return binary.has_nx\n \n-def check_MACHO_LAZY_BINDINGS(executable) -> bool:\n+def check_control_flow(executable) -> bool:\n     '''\n-    Check for no lazy bindings.\n-    We don't use or check for MH_BINDATLOAD. See #18295.\n+    Check for control flow instrumentation\n     '''\n-    stdout = run_command([OTOOL_CMD, '-l', executable])\n+    binary = lief.parse(executable)\n \n-    for line in stdout.splitlines():\n-        tokens = line.split()\n-        if 'lazy_bind_off' in tokens or 'lazy_bind_size' in tokens:\n-            if tokens[1] != '0':\n-                return False\n-    return True\n+    content = binary.get_content_from_virtual_address(binary.entrypoint, 4, lief.Binary.VA_TYPES.AUTO)\n \n-def check_MACHO_Canary(executable) -> bool:\n-    '''\n-    Check for use of stack canary\n-    '''\n-    stdout = run_command([OTOOL_CMD, '-Iv', executable])\n+    if content == [243, 15, 30, 250]: # endbr64\n+        return True\n+    return False\n \n-    ok = False\n-    for line in stdout.splitlines():\n-        if '___stack_chk_fail' in line:\n-            ok = True\n-    return ok\n \n CHECKS = {\n 'ELF': [\n@@ -308,17 +210,19 @@ def check_MACHO_Canary(executable) -> bool:\n     ('separate_code', check_ELF_separate_code),\n ],\n 'PE': [\n+    ('PIE', check_PIE),\n     ('DYNAMIC_BASE', check_PE_DYNAMIC_BASE),\n     ('HIGH_ENTROPY_VA', check_PE_HIGH_ENTROPY_VA),\n-    ('NX', check_PE_NX),\n+    ('NX', check_NX),\n     ('RELOC_SECTION', check_PE_RELOC_SECTION)\n ],\n 'MACHO': [\n-    ('PIE', check_MACHO_PIE),\n+    ('PIE', check_PIE),\n     ('NOUNDEFS', check_MACHO_NOUNDEFS),\n-    ('NX', check_MACHO_NX),\n+    ('NX', check_NX),\n     ('LAZY_BINDINGS', check_MACHO_LAZY_BINDINGS),\n-    ('Canary', check_MACHO_Canary)\n+    ('Canary', check_MACHO_Canary),\n+    ('CONTROL_FLOW', check_control_flow),\n ]\n }\n \n@@ -334,24 +238,24 @@ def identify_executable(executable) -> Optional[str]:\n     return None\n \n if __name__ == '__main__':\n-    retval = 0\n+    retval: int = 0\n     for filename in sys.argv[1:]:\n         try:\n             etype = identify_executable(filename)\n             if etype is None:\n-                print('%s: unknown format' % filename)\n+                print(f'{filename}: unknown format')\n                 retval = 1\n                 continue\n \n-            failed = []\n+            failed: List[str] = []\n             for (name, func) in CHECKS[etype]:\n                 if not func(filename):\n                     failed.append(name)\n             if failed:\n-                print('%s: failed %s' % (filename, ' '.join(failed)))\n+                print(f'{filename}: failed {\" \".join(failed)}')\n                 retval = 1\n         except IOError:\n-            print('%s: cannot open' % filename)\n+            print(f'{filename}: cannot open')\n             retval = 1\n     sys.exit(retval)\n "
      },
      {
        "sha": "61f727fa6342689775e2301c2d5736b59d906cce",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 97,
        "deletions": 108,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -3,18 +3,21 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n-A script to check that the executables produced by gitian only contain\n-certain symbols and are only linked against allowed libraries.\n+A script to check that release executables only contain certain symbols\n+and are only linked against allowed libraries.\n \n Example usage:\n \n-    find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n+    find ../path/to/binaries -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n '''\n import subprocess\n-import re\n import sys\n-import os\n-from typing import List, Optional, Tuple\n+from typing import List, Optional\n+\n+import lief\n+import pixie\n+\n+from utils import determine_wellknown_cmd\n \n # Debian 8 (Jessie) EOL: 2020. https://wiki.debian.org/DebianReleases#Production_Releases\n #\n@@ -39,8 +42,16 @@\n #\n MAX_VERSIONS = {\n 'GCC':       (4,8,0),\n-'GLIBC':     (2,17),\n-'LIBATOMIC': (1,0)\n+'GLIBC': {\n+    pixie.EM_386:    (2,17),\n+    pixie.EM_X86_64: (2,17),\n+    pixie.EM_ARM:    (2,17),\n+    pixie.EM_AARCH64:(2,17),\n+    pixie.EM_PPC64:  (2,17),\n+    pixie.EM_RISCV:  (2,27),\n+},\n+'LIBATOMIC': (1,0),\n+'V':         (0,5,0),  # xkb (bitcoin-qt only)\n }\n # See here for a description of _IO_stdin_used:\n # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=634261#109\n@@ -50,10 +61,6 @@\n '_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr',\n 'environ', '_environ', '__environ',\n }\n-READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n-CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n-OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n-OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n \n # Allowed NEEDED libraries\n ELF_ALLOWED_LIBRARIES = {\n@@ -68,20 +75,17 @@\n 'ld-linux.so.2', # 32-bit dynamic linker\n 'ld-linux-aarch64.so.1', # 64-bit ARM dynamic linker\n 'ld-linux-armhf.so.3', # 32-bit ARM dynamic linker\n+'ld64.so.1', # POWER64 ABIv1 dynamic linker\n+'ld64.so.2', # POWER64 ABIv2 dynamic linker\n 'ld-linux-riscv64-lp64d.so.1', # 64-bit RISC-V dynamic linker\n # bitcoin-qt only\n 'libxcb.so.1', # part of X11\n+'libxkbcommon.so.0', # keyboard keymapping\n+'libxkbcommon-x11.so.0', # keyboard keymapping\n 'libfontconfig.so.1', # font support\n 'libfreetype.so.6', # font parsing\n 'libdl.so.2' # programming interface to dynamic linker\n }\n-ARCH_MIN_GLIBC_VER = {\n-'80386':  (2,1),\n-'X86-64': (2,2,5),\n-'ARM':    (2,4),\n-'AArch64':(2,17),\n-'RISC-V': (2,27)\n-}\n \n MACHO_ALLOWED_LIBRARIES = {\n # bitcoind and bitcoin-qt\n@@ -95,10 +99,15 @@\n 'CoreGraphics', # 2D rendering\n 'CoreServices', # operating system services\n 'CoreText', # interface for laying out text and handling fonts.\n+'CoreVideo', # video processing\n 'Foundation', # base layer functionality for apps/frameworks\n 'ImageIO', # read and write image file formats.\n 'IOKit', # user-space access to hardware devices and drivers.\n+'IOSurface', # cross process image/drawing buffers\n 'libobjc.A.dylib', # Objective-C runtime library\n+'Metal', # 3D graphics\n+'Security', # access control and authentication\n+'QuartzCore', # animation\n }\n \n PE_ALLOWED_LIBRARIES = {\n@@ -113,12 +122,15 @@\n 'dwmapi.dll', # desktop window manager\n 'GDI32.dll', # graphics device interface\n 'IMM32.dll', # input method editor\n+'NETAPI32.dll',\n 'ole32.dll', # component object model\n 'OLEAUT32.dll', # OLE Automation API\n 'SHLWAPI.dll', # light weight shell API\n+'USERENV.dll',\n 'UxTheme.dll',\n 'VERSION.dll', # version checking\n 'WINMM.dll', # WinMM audio API\n+'WTSAPI32.dll',\n }\n \n class CPPFilt(object):\n@@ -128,7 +140,7 @@ class CPPFilt(object):\n     Use a pipe to the 'c++filt' command.\n     '''\n     def __init__(self):\n-        self.proc = subprocess.Popen(CPPFILT_CMD, stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)\n+        self.proc = subprocess.Popen(determine_wellknown_cmd('CPPFILT', 'c++filt'), stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)\n \n     def __call__(self, mangled):\n         self.proc.stdin.write(mangled + '\\n')\n@@ -140,29 +152,6 @@ def close(self):\n         self.proc.stdout.close()\n         self.proc.wait()\n \n-def read_symbols(executable, imports=True) -> List[Tuple[str, str, str]]:\n-    '''\n-    Parse an ELF executable and return a list of (symbol,version, arch) tuples\n-    for dynamic, imported symbols.\n-    '''\n-    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', '-h', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Could not read symbols for {}: {}'.format(executable, stderr.strip()))\n-    syms = []\n-    for line in stdout.splitlines():\n-        line = line.split()\n-        if 'Machine:' in line:\n-            arch = line[-1]\n-        if len(line)>7 and re.match('[0-9]+:$', line[0]):\n-            (sym, _, version) = line[7].partition('@')\n-            is_import = line[6] == 'UND'\n-            if version.startswith('@'):\n-                version = version[1:]\n-            if is_import == imports:\n-                syms.append((sym, version, arch))\n-    return syms\n-\n def check_version(max_versions, version, arch) -> bool:\n     if '_' in version:\n         (lib, _, ver) = version.rpartition('_')\n@@ -172,103 +161,103 @@ def check_version(max_versions, version, arch) -> bool:\n     ver = tuple([int(x) for x in ver.split('.')])\n     if not lib in max_versions:\n         return False\n-    return ver <= max_versions[lib] or lib == 'GLIBC' and ver <= ARCH_MIN_GLIBC_VER[arch]\n-\n-def elf_read_libraries(filename) -> List[str]:\n-    p = subprocess.Popen([READELF_CMD, '-d', '-W', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n-    libraries = []\n-    for line in stdout.splitlines():\n-        tokens = line.split()\n-        if len(tokens)>2 and tokens[1] == '(NEEDED)':\n-            match = re.match(r'^Shared library: \\[(.*)\\]$', ' '.join(tokens[2:]))\n-            if match:\n-                libraries.append(match.group(1))\n-            else:\n-                raise ValueError('Unparseable (NEEDED) specification')\n-    return libraries\n+    if isinstance(max_versions[lib], tuple):\n+        return ver <= max_versions[lib]\n+    else:\n+        return ver <= max_versions[lib][arch]\n \n def check_imported_symbols(filename) -> bool:\n+    elf = pixie.load(filename)\n     cppfilt = CPPFilt()\n-    ok = True\n-    for sym, version, arch in read_symbols(filename, True):\n-        if version and not check_version(MAX_VERSIONS, version, arch):\n+    ok: bool = True\n+\n+    for symbol in elf.dyn_symbols:\n+        if not symbol.is_import:\n+            continue\n+        sym = symbol.name.decode()\n+        version = symbol.version.decode() if symbol.version is not None else None\n+        if version and not check_version(MAX_VERSIONS, version, elf.hdr.e_machine):\n             print('{}: symbol {} from unsupported version {}'.format(filename, cppfilt(sym), version))\n             ok = False\n     return ok\n \n def check_exported_symbols(filename) -> bool:\n+    elf = pixie.load(filename)\n     cppfilt = CPPFilt()\n-    ok = True\n-    for sym,version,arch in read_symbols(filename, False):\n-        if arch == 'RISC-V' or sym in IGNORE_EXPORTS:\n+    ok: bool = True\n+    for symbol in elf.dyn_symbols:\n+        if not symbol.is_export:\n+            continue\n+        sym = symbol.name.decode()\n+        if elf.hdr.e_machine == pixie.EM_RISCV or sym in IGNORE_EXPORTS:\n             continue\n         print('{}: export of symbol {} not allowed'.format(filename, cppfilt(sym)))\n         ok = False\n     return ok\n \n def check_ELF_libraries(filename) -> bool:\n-    ok = True\n-    for library_name in elf_read_libraries(filename):\n-        if library_name not in ELF_ALLOWED_LIBRARIES:\n-            print('{}: NEEDED library {} is not allowed'.format(filename, library_name))\n+    ok: bool = True\n+    elf = pixie.load(filename)\n+    for library_name in elf.query_dyn_tags(pixie.DT_NEEDED):\n+        assert(isinstance(library_name, bytes))\n+        if library_name.decode() not in ELF_ALLOWED_LIBRARIES:\n+            print('{}: NEEDED library {} is not allowed'.format(filename, library_name.decode()))\n             ok = False\n     return ok\n \n-def macho_read_libraries(filename) -> List[str]:\n-    p = subprocess.Popen([OTOOL_CMD, '-L', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n-    libraries = []\n-    for line in stdout.splitlines():\n-        tokens = line.split()\n-        if len(tokens) == 1: # skip executable name\n-            continue\n-        libraries.append(tokens[0].split('/')[-1])\n-    return libraries\n-\n def check_MACHO_libraries(filename) -> bool:\n-    ok = True\n-    for dylib in macho_read_libraries(filename):\n-        if dylib not in MACHO_ALLOWED_LIBRARIES:\n-            print('{} is not in ALLOWED_LIBRARIES!'.format(dylib))\n+    ok: bool = True\n+    binary = lief.parse(filename)\n+    for dylib in binary.libraries:\n+        split = dylib.name.split('/')\n+        if split[-1] not in MACHO_ALLOWED_LIBRARIES:\n+            print(f'{split[-1]} is not in ALLOWED_LIBRARIES!')\n             ok = False\n     return ok\n \n-def pe_read_libraries(filename) -> List[str]:\n-    p = subprocess.Popen([OBJDUMP_CMD, '-x', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n-    libraries = []\n-    for line in stdout.splitlines():\n-        if 'DLL Name:' in line:\n-            tokens = line.split(': ')\n-            libraries.append(tokens[1])\n-    return libraries\n+def check_MACHO_min_os(filename) -> bool:\n+    binary = lief.parse(filename)\n+    if binary.build_version.minos == [10,14,0]:\n+        return True\n+    return False\n+\n+def check_MACHO_sdk(filename) -> bool:\n+    binary = lief.parse(filename)\n+    if binary.build_version.sdk == [10, 15, 6]:\n+        return True\n+    return False\n \n def check_PE_libraries(filename) -> bool:\n-    ok = True\n-    for dylib in pe_read_libraries(filename):\n+    ok: bool = True\n+    binary = lief.parse(filename)\n+    for dylib in binary.libraries:\n         if dylib not in PE_ALLOWED_LIBRARIES:\n-            print('{} is not in ALLOWED_LIBRARIES!'.format(dylib))\n+            print(f'{dylib} is not in ALLOWED_LIBRARIES!')\n             ok = False\n     return ok\n \n+def check_PE_subsystem_version(filename) -> bool:\n+    binary = lief.parse(filename)\n+    major: int = binary.optional_header.major_subsystem_version\n+    minor: int = binary.optional_header.minor_subsystem_version\n+    if major == 6 and minor == 1:\n+        return True\n+    return False\n+\n CHECKS = {\n 'ELF': [\n     ('IMPORTED_SYMBOLS', check_imported_symbols),\n     ('EXPORTED_SYMBOLS', check_exported_symbols),\n     ('LIBRARY_DEPENDENCIES', check_ELF_libraries)\n ],\n 'MACHO': [\n-    ('DYNAMIC_LIBRARIES', check_MACHO_libraries)\n+    ('DYNAMIC_LIBRARIES', check_MACHO_libraries),\n+    ('MIN_OS', check_MACHO_min_os),\n+    ('SDK', check_MACHO_sdk),\n ],\n 'PE' : [\n-    ('DYNAMIC_LIBRARIES', check_PE_libraries)\n+    ('DYNAMIC_LIBRARIES', check_PE_libraries),\n+    ('SUBSYSTEM_VERSION', check_PE_subsystem_version),\n ]\n }\n \n@@ -284,23 +273,23 @@ def identify_executable(executable) -> Optional[str]:\n     return None\n \n if __name__ == '__main__':\n-    retval = 0\n+    retval: int = 0\n     for filename in sys.argv[1:]:\n         try:\n             etype = identify_executable(filename)\n             if etype is None:\n-                print('{}: unknown format'.format(filename))\n+                print(f'{filename}: unknown format')\n                 retval = 1\n                 continue\n \n-            failed = []\n+            failed: List[str] = []\n             for (name, func) in CHECKS[etype]:\n                 if not func(filename):\n                     failed.append(name)\n             if failed:\n-                print('{}: failed {}'.format(filename, ' '.join(failed)))\n+                print(f'{filename}: failed {\" \".join(failed)}')\n                 retval = 1\n         except IOError:\n-            print('{}: cannot open'.format(filename))\n+            print(f'{filename}: cannot open')\n             retval = 1\n     sys.exit(retval)"
      },
      {
        "sha": "14058e2cc8d5295ebcaa6007ac681d87e6b53a98",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 35,
        "deletions": 19,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -5,9 +5,12 @@\n '''\n Test script for security-check.py\n '''\n+import os\n import subprocess\n import unittest\n \n+from utils import determine_wellknown_cmd\n+\n def write_testcode(filename):\n     with open(filename, 'w', encoding=\"utf8\") as f:\n         f.write('''\n@@ -19,16 +22,20 @@ def write_testcode(filename):\n     }\n     ''')\n \n+def clean_files(source, executable):\n+    os.remove(source)\n+    os.remove(executable)\n+\n def call_security_check(cc, source, executable, options):\n-    subprocess.run([cc,source,'-o',executable] + options, check=True)\n+    subprocess.run([*cc,source,'-o',executable] + options, check=True)\n     p = subprocess.run(['./contrib/devtools/security-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n     return (p.returncode, p.stdout.rstrip())\n \n class TestSecurityChecks(unittest.TestCase):\n     def test_ELF(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'gcc'\n+        cc = determine_wellknown_cmd('CC', 'gcc')\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n@@ -44,42 +51,51 @@ def test_ELF(self):\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,separate-code']),\n                 (0, ''))\n \n+        clean_files(source, executable)\n+\n     def test_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n-        cc = 'x86_64-w64-mingw32-gcc'\n+        cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--disable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--disable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-pie','-fPIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA'))  # -pie -fPIE does nothing unless --dynamicbase is also supplied\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-pie','-fPIE']),\n+            (1, executable+': failed HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n             (0, ''))\n \n+        clean_files(source, executable)\n+\n     def test_MACHO(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'clang'\n+        cc = determine_wellknown_cmd('CC', 'clang')\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-Wl,-allow_stack_execute','-fno-stack-protector']),\n-            (1, executable+': failed PIE NOUNDEFS NX LAZY_BINDINGS Canary'))\n+            (1, executable+': failed PIE NOUNDEFS NX LAZY_BINDINGS Canary CONTROL_FLOW'))\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-Wl,-allow_stack_execute','-fstack-protector-all']),\n-            (1, executable+': failed PIE NOUNDEFS NX LAZY_BINDINGS'))\n+            (1, executable+': failed PIE NOUNDEFS NX LAZY_BINDINGS CONTROL_FLOW'))\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-fstack-protector-all']),\n-            (1, executable+': failed PIE NOUNDEFS LAZY_BINDINGS'))\n+            (1, executable+': failed PIE NOUNDEFS LAZY_BINDINGS CONTROL_FLOW'))\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-fstack-protector-all']),\n-            (1, executable+': failed PIE LAZY_BINDINGS'))\n+            (1, executable+': failed PIE LAZY_BINDINGS CONTROL_FLOW'))\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-bind_at_load','-fstack-protector-all']),\n+            (1, executable+': failed PIE CONTROL_FLOW'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-bind_at_load','-fstack-protector-all', '-fcf-protection=full']),\n             (1, executable+': failed PIE'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-pie','-Wl,-bind_at_load','-fstack-protector-all']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-pie','-Wl,-bind_at_load','-fstack-protector-all', '-fcf-protection=full']),\n             (0, ''))\n \n+        clean_files(source, executable)\n+\n if __name__ == '__main__':\n     unittest.main()\n-"
      },
      {
        "sha": "7d83c5f751f0f901cd8cdc953bfa6435a7238aeb",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "added",
        "additions": 194,
        "deletions": 0,
        "changes": 194,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,194 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Test script for symbol-check.py\n+'''\n+import os\n+import subprocess\n+from typing import List\n+import unittest\n+\n+from utils import determine_wellknown_cmd\n+\n+def call_symbol_check(cc: List[str], source, executable, options):\n+    subprocess.run([*cc,source,'-o',executable] + options, check=True)\n+    p = subprocess.run(['./contrib/devtools/symbol-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n+    os.remove(source)\n+    os.remove(executable)\n+    return (p.returncode, p.stdout.rstrip())\n+\n+def get_machine(cc: List[str]):\n+    p = subprocess.run([*cc,'-dumpmachine'], stdout=subprocess.PIPE, universal_newlines=True)\n+    return p.stdout.rstrip()\n+\n+class TestSymbolChecks(unittest.TestCase):\n+    def test_ELF(self):\n+        source = 'test1.c'\n+        executable = 'test1'\n+        cc = determine_wellknown_cmd('CC', 'gcc')\n+\n+        # there's no way to do this test for RISC-V at the moment; we build for\n+        # RISC-V in a glibc 2.27 envinonment and we allow all symbols from 2.27.\n+        if 'riscv' in get_machine(cc):\n+            self.skipTest(\"test not available for RISC-V\")\n+\n+        # nextup was introduced in GLIBC 2.24, so is newer than our supported\n+        # glibc (2.17), and available in our release build environment (2.24).\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #define _GNU_SOURCE\n+                #include <math.h>\n+\n+                double nextup(double x);\n+\n+                int main()\n+                {\n+                    nextup(3.14);\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lm']),\n+                (1, executable + ': symbol nextup from unsupported version GLIBC_2.24\\n' +\n+                    executable + ': failed IMPORTED_SYMBOLS'))\n+\n+        # -lutil is part of the libc6 package so a safe bet that it's installed\n+        # it's also out of context enough that it's unlikely to ever become a real dependency\n+        source = 'test2.c'\n+        executable = 'test2'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <utmp.h>\n+\n+                int main()\n+                {\n+                    login(0);\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lutil']),\n+                (1, executable + ': NEEDED library libutil.so.1 is not allowed\\n' +\n+                    executable + ': failed LIBRARY_DEPENDENCIES'))\n+\n+        # finally, check a conforming file that simply uses a math function\n+        source = 'test3.c'\n+        executable = 'test3'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <math.h>\n+\n+                int main()\n+                {\n+                    return (int)pow(2.0, 4.0);\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lm']),\n+                (0, ''))\n+\n+    def test_MACHO(self):\n+        source = 'test1.c'\n+        executable = 'test1'\n+        cc = determine_wellknown_cmd('CC', 'clang')\n+\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <expat.h>\n+\n+                int main()\n+                {\n+                    XML_ExpatVersion();\n+                    return 0;\n+                }\n+\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lexpat', '-Wl,-platform_version','-Wl,macos', '-Wl,11.4', '-Wl,11.4']),\n+            (1, 'libexpat.1.dylib is not in ALLOWED_LIBRARIES!\\n' +\n+                f'{executable}: failed DYNAMIC_LIBRARIES MIN_OS SDK'))\n+\n+        source = 'test2.c'\n+        executable = 'test2'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <CoreGraphics/CoreGraphics.h>\n+\n+                int main()\n+                {\n+                    CGMainDisplayID();\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-framework', 'CoreGraphics', '-Wl,-platform_version','-Wl,macos', '-Wl,11.4', '-Wl,11.4']),\n+                (1, f'{executable}: failed MIN_OS SDK'))\n+\n+        source = 'test3.c'\n+        executable = 'test3'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                int main()\n+                {\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-Wl,-platform_version','-Wl,macos', '-Wl,10.14', '-Wl,11.4']),\n+                (1, f'{executable}: failed SDK'))\n+\n+    def test_PE(self):\n+        source = 'test1.c'\n+        executable = 'test1.exe'\n+        cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n+\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <pdh.h>\n+\n+                int main()\n+                {\n+                    PdhConnectMachineA(NULL);\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lpdh', '-Wl,--major-subsystem-version', '-Wl,6', '-Wl,--minor-subsystem-version', '-Wl,1']),\n+            (1, 'pdh.dll is not in ALLOWED_LIBRARIES!\\n' +\n+                 executable + ': failed DYNAMIC_LIBRARIES'))\n+\n+        source = 'test2.c'\n+        executable = 'test2.exe'\n+\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                int main()\n+                {\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-Wl,--major-subsystem-version', '-Wl,9', '-Wl,--minor-subsystem-version', '-Wl,9']),\n+            (1, executable + ': failed SUBSYSTEM_VERSION'))\n+\n+        source = 'test3.c'\n+        executable = 'test3.exe'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <windows.h>\n+\n+                int main()\n+                {\n+                    CoFreeUnusedLibrariesEx(0,0);\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lole32', '-Wl,--major-subsystem-version', '-Wl,6', '-Wl,--minor-subsystem-version', '-Wl,1']),\n+                (0, ''))\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()"
      },
      {
        "sha": "68ad1c3aba1915fe44309f802a16e74be4f54e42",
        "filename": "contrib/devtools/utils.py",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/utils.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/devtools/utils.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/utils.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,22 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Common utility functions\n+'''\n+import shutil\n+import sys\n+import os\n+from typing import List\n+\n+\n+def determine_wellknown_cmd(envvar, progname) -> List[str]:\n+    maybe_env = os.getenv(envvar)\n+    maybe_which = shutil.which(progname)\n+    if maybe_env:\n+        return maybe_env.split(' ')  # Well-known vars are often meant to be word-split\n+    elif maybe_which:\n+        return [ maybe_which ]\n+    else:\n+        sys.exit(f\"{progname} not found\")"
      },
      {
        "sha": "db780ad53bd39d894a7851974846016a4e61bca4",
        "filename": "contrib/filter-lcov.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/filter-lcov.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/filter-lcov.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/filter-lcov.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "5df87d9e70cb79ae65f4d13a492a95fac71980cf",
        "filename": "contrib/gitian-build.py",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-build.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-build.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -13,15 +13,16 @@ def setup():\n     programs = ['ruby', 'git', 'make', 'wget', 'curl']\n     if args.kvm:\n         programs += ['apt-cacher-ng', 'python-vm-builder', 'qemu-kvm', 'qemu-utils']\n-    elif args.docker and not os.path.isfile('/lib/systemd/system/docker.service'):\n-        dockers = ['docker.io', 'docker-ce']\n-        for i in dockers:\n-            return_code = subprocess.call(['sudo', 'apt-get', 'install', '-qq', i])\n-            if return_code == 0:\n-                break\n-        if return_code != 0:\n-            print('Cannot find any way to install Docker.', file=sys.stderr)\n-            sys.exit(1)\n+    elif args.docker:\n+        if not os.path.isfile('/lib/systemd/system/docker.service'):\n+            dockers = ['docker.io', 'docker-ce']\n+            for i in dockers:\n+                return_code = subprocess.call(['sudo', 'apt-get', 'install', '-qq', i])\n+                if return_code == 0:\n+                    break\n+            if return_code != 0:\n+                print('Cannot find any way to install Docker.', file=sys.stderr)\n+                sys.exit(1)\n     else:\n         programs += ['apt-cacher-ng', 'lxc', 'debootstrap']\n     subprocess.check_call(['sudo', 'apt-get', 'install', '-qq'] + programs)\n@@ -34,14 +35,14 @@ def setup():\n     if not os.path.isdir('bitcoin'):\n         subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin/bitcoin.git'])\n     os.chdir('gitian-builder')\n-    make_image_prog = ['bin/make-base-vm', '--suite', 'bionic', '--arch', 'amd64']\n+    make_image_prog = ['bin/make-base-vm', '--suite', 'focal', '--arch', 'amd64']\n     if args.docker:\n         make_image_prog += ['--docker']\n     elif not args.kvm:\n-        make_image_prog += ['--lxc']\n+        make_image_prog += ['--lxc', '--disksize', '13000']\n     subprocess.check_call(make_image_prog)\n     os.chdir(workdir)\n-    if args.is_bionic and not args.kvm and not args.docker:\n+    if args.is_focal and not args.kvm and not args.docker:\n         subprocess.check_call(['sudo', 'sed', '-i', 's/lxcbr0/br0/', '/etc/default/lxc-net'])\n         print('Reboot is required')\n         sys.exit(0)\n@@ -175,7 +176,7 @@ def main():\n     args = parser.parse_args()\n     workdir = os.getcwd()\n \n-    args.is_bionic = b'bionic' in subprocess.check_output(['lsb_release', '-cs'])\n+    args.is_focal = b'focal' in subprocess.check_output(['lsb_release', '-cs'])\n \n     if args.kvm and args.docker:\n         raise Exception('Error: cannot have both kvm and docker')\n@@ -209,7 +210,7 @@ def main():\n     args.macos = 'm' in args.os\n \n     # Disable for MacOS if no SDK found\n-    if args.macos and not os.path.isfile('gitian-builder/inputs/Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz'):\n+    if args.macos and not os.path.isfile('gitian-builder/inputs/Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz'):\n         print('Cannot build for MacOS, SDK does not exist. Will build for other OSes')\n         args.macos = False\n "
      },
      {
        "sha": "330fbc041b31ac8f1a828f7eccca76f866cc51b7",
        "filename": "contrib/gitian-descriptors/assign_DISTNAME",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-descriptors/assign_DISTNAME",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-descriptors/assign_DISTNAME",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/assign_DISTNAME?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -4,7 +4,7 @@\n #\n # A helper script to be sourced into the gitian descriptors\n \n-if RECENT_TAG=\"$(git describe --exact-match HEAD)\"; then\n+if RECENT_TAG=\"$(git describe --exact-match HEAD 2> /dev/null)\"; then\n     VERSION=\"${RECENT_TAG#v}\"\n else\n     VERSION=\"$(git rev-parse --short=12 HEAD)\""
      },
      {
        "sha": "e6dce7a8c664fc102b06f281eb1fc33a75670992",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 26,
        "deletions": 10,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -3,30 +3,40 @@ name: \"bitcoin-core-linux-22\"\n enable_cache: true\n distro: \"ubuntu\"\n suites:\n-- \"bionic\"\n+- \"focal\"\n architectures:\n - \"amd64\"\n packages:\n # Common dependencies.\n - \"autoconf\"\n - \"automake\"\n - \"binutils\"\n+- \"bison\"\n - \"bsdmainutils\"\n - \"ca-certificates\"\n - \"curl\"\n - \"faketime\"\n+- \"g++-8\"\n+- \"gcc-8\"\n - \"git\"\n - \"libtool\"\n - \"patch\"\n - \"pkg-config\"\n - \"python3\"\n+- \"python3-pip\"\n # Cross compilation HOSTS:\n #  - arm-linux-gnueabihf\n - \"binutils-arm-linux-gnueabihf\"\n - \"g++-8-arm-linux-gnueabihf\"\n #  - aarch64-linux-gnu\n - \"binutils-aarch64-linux-gnu\"\n - \"g++-8-aarch64-linux-gnu\"\n+#  - powerpc64-linux-gnu\n+- \"binutils-powerpc64-linux-gnu\"\n+- \"g++-8-powerpc64-linux-gnu\"\n+#  - powerpc64le-linux-gnu\n+- \"binutils-powerpc64le-linux-gnu\"\n+- \"g++-8-powerpc64le-linux-gnu\"\n #  - riscv64-linux-gnu\n - \"binutils-riscv64-linux-gnu\"\n - \"g++-8-riscv64-linux-gnu\"\n@@ -38,16 +48,14 @@ script: |\n   set -e -o pipefail\n \n   WRAP_DIR=$HOME/wrapped\n-  HOSTS=\"x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu\"\n-  CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests\"\n+  HOSTS=\"x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu riscv64-linux-gnu\"\n+  CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary\"\n   FAKETIME_HOST_PROGS=\"gcc g++\"\n   FAKETIME_PROGS=\"date ar ranlib nm\"\n   HOST_CFLAGS=\"-O2 -g\"\n   HOST_CXXFLAGS=\"-O2 -g\"\n   HOST_LDFLAGS_BASE=\"-static-libstdc++ -Wl,-O2\"\n \n-  export QT_RCC_TEST=1\n-  export QT_RCC_SOURCE_DATE_OVERRIDE=1\n   export TZ=\"UTC\"\n   export BUILD_DIR=\"$PWD\"\n   mkdir -p ${WRAP_DIR}\n@@ -64,7 +72,7 @@ script: |\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n-    echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n+    echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n   }\n@@ -78,13 +86,21 @@ script: |\n             echo \"REAL=\\`which -a ${i}-${prog}-8 | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n             echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n             echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-            echo \"\\$REAL \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n+            if [ \"${i:0:11}\" = \"powerpc64le\" ]; then\n+                echo \"exec \\\"\\$REAL\\\" -mcpu=power8 -mtune=power9 \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n+            elif [ \"${i:0:9}\" = \"powerpc64\" ]; then\n+                echo \"exec \\\"\\$REAL\\\" -mcpu=970 -mtune=power9 \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n+            else\n+                echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n+            fi\n             chmod +x ${WRAP_DIR}/${i}-${prog}\n         fi\n     done\n   done\n   }\n \n+  pip3 install lief==0.11.5\n+\n   # Faketime for depends so intermediate results are comparable\n   export PATH_orig=${PATH}\n   create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n@@ -95,7 +111,7 @@ script: |\n   BASEPREFIX=\"${PWD}/depends\"\n   # Build dependencies for each host\n   for i in $HOSTS; do\n-    make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n+    make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\" CC=${i}-gcc-8 CXX=${i}-g++-8\n   done\n \n   # Faketime for binaries\n@@ -118,7 +134,7 @@ script: |\n   # Extract the git archive into a dir for each host and build\n   for i in ${HOSTS}; do\n     export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n-    if [ \"${i}\" = \"riscv64-linux-gnu\" ]; then\n+    if [ \"${i}\" = \"powerpc64-linux-gnu\" ]; then\n       # Workaround for https://bugs.launchpad.net/ubuntu/+source/gcc-8-cross-ports/+bug/1853740\n       # TODO: remove this when no longer needed\n       HOST_LDFLAGS=\"${HOST_LDFLAGS_BASE} -Wl,-z,noexecstack\"\n@@ -132,7 +148,7 @@ script: |\n     tar --strip-components=1 -xf \"${GIT_ARCHIVE}\"\n \n     ./autogen.sh\n-    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\" LDFLAGS=\"${HOST_LDFLAGS}\"\n+    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\" LDFLAGS=\"${HOST_LDFLAGS}\" CC=${i}-gcc-8 CXX=${i}-g++-8\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security\n     make ${MAKEOPTS} -C src check-symbols"
      },
      {
        "sha": "addad0a5d27a0320a5384894e9a7f09aa97c8e1c",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -2,14 +2,19 @@\n name: \"bitcoin-dmg-signer\"\n distro: \"ubuntu\"\n suites:\n-- \"bionic\"\n+- \"focal\"\n architectures:\n - \"amd64\"\n packages:\n - \"faketime\"\n+- \"xorriso\"\n+- \"python3-pip\"\n remotes:\n - \"url\": \"https://github.com/bitcoin-core/bitcoin-detached-sigs.git\"\n   \"dir\": \"signature\"\n+- \"url\": \"https://github.com/achow101/signapple.git\"\n+  \"dir\": \"signapple\"\n+  \"commit\": \"b084cbbf44d5330448ffce0c7d118f75781b64bd\"\n files:\n - \"bitcoin-osx-unsigned.tar.gz\"\n script: |\n@@ -18,23 +23,31 @@ script: |\n   WRAP_DIR=$HOME/wrapped\n   mkdir -p ${WRAP_DIR}\n   export PATH=\"$PWD\":$PATH\n-  FAKETIME_PROGS=\"dmg genisoimage\"\n+  FAKETIME_PROGS=\"dmg xorrisofs\"\n \n   # Create global faketime wrappers\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n-    echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n+    echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n \n-  UNSIGNED=bitcoin-osx-unsigned.tar.gz\n+  # Install signapple\n+  cd signapple\n+  python3 -m pip install -U pip setuptools\n+  python3 -m pip install .\n+  export PATH=\"$HOME/.local/bin\":$PATH\n+  cd ..\n+\n+  UNSIGNED_TARBALL=bitcoin-osx-unsigned.tar.gz\n+  UNSIGNED_APP=dist/Bitcoin-Qt.app\n   SIGNED=bitcoin-osx-signed.dmg\n \n-  tar -xf ${UNSIGNED}\n+  tar -xf ${UNSIGNED_TARBALL}\n   OSX_VOLNAME=\"$(cat osx_volname)\"\n-  ./detached-sig-apply.sh ${UNSIGNED} signature/osx\n-  ${WRAP_DIR}/genisoimage -no-cache-inodes -D -l -probe -V \"${OSX_VOLNAME}\" -no-pad -r -dir-mode 0755 -apple -o uncompressed.dmg signed-app\n+  ./detached-sig-apply.sh ${UNSIGNED_APP} signature/osx/dist\n+  ${WRAP_DIR}/xorrisofs -D -l -V \"${OSX_VOLNAME}\" -no-pad -r -dir-mode 0755 -o uncompressed.dmg signed-app\n   ${WRAP_DIR}/dmg dmg uncompressed.dmg ${OUTDIR}/${SIGNED}"
      },
      {
        "sha": "a39618adb78d5c3403c9f47e0b58111a6811bbec",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 14,
        "deletions": 18,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -3,7 +3,7 @@ name: \"bitcoin-core-osx-22\"\n enable_cache: true\n distro: \"ubuntu\"\n suites:\n-- \"bionic\"\n+- \"focal\"\n architectures:\n - \"amd64\"\n packages:\n@@ -21,29 +21,27 @@ packages:\n - \"bsdmainutils\"\n - \"cmake\"\n - \"imagemagick\"\n-- \"libcap-dev\"\n - \"libz-dev\"\n-- \"libbz2-dev\"\n - \"python3\"\n-- \"python3-dev\"\n+- \"python3-pip\"\n - \"python3-setuptools\"\n - \"fonts-tuffy\"\n+- \"xorriso\"\n+- \"libtinfo5\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n-- \"Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz\"\n+- \"Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz\"\n script: |\n   set -e -o pipefail\n \n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin18\"\n-  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests GENISOIMAGE=$WRAP_DIR/genisoimage\"\n+  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary XORRISOFS=${WRAP_DIR}/xorrisofs DMG=${WRAP_DIR}/dmg\"\n   FAKETIME_HOST_PROGS=\"\"\n-  FAKETIME_PROGS=\"ar ranlib date dmg genisoimage\"\n+  FAKETIME_PROGS=\"ar ranlib date dmg xorrisofs\"\n \n-  export QT_RCC_TEST=1\n-  export QT_RCC_SOURCE_DATE_OVERRIDE=1\n   export TZ=\"UTC\"\n   export BUILD_DIR=\"$PWD\"\n   mkdir -p ${WRAP_DIR}\n@@ -62,7 +60,7 @@ script: |\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n-    echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n+    echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n   }\n@@ -74,12 +72,14 @@ script: |\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+        echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n   }\n \n+  pip3 install lief==0.11.5\n+\n   # Faketime for depends so intermediate results are comparable\n   export PATH_orig=${PATH}\n   create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n@@ -90,7 +90,7 @@ script: |\n   BASEPREFIX=\"${PWD}/depends\"\n \n   mkdir -p ${BASEPREFIX}/SDKs\n-  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz\n+  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz\n \n   # Build dependencies for each host\n   for i in $HOSTS; do\n@@ -132,21 +132,17 @@ script: |\n \n     make osx_volname\n     make deploydir\n-    OSX_VOLNAME=\"$(cat osx_volname)\"\n     mkdir -p unsigned-app-${i}\n     cp osx_volname unsigned-app-${i}/\n     cp contrib/macdeploy/detached-sig-apply.sh unsigned-app-${i}\n     cp contrib/macdeploy/detached-sig-create.sh unsigned-app-${i}\n-    cp ${BASEPREFIX}/${i}/native/bin/dmg ${BASEPREFIX}/${i}/native/bin/genisoimage unsigned-app-${i}\n-    cp ${BASEPREFIX}/${i}/native/bin/${i}-codesign_allocate unsigned-app-${i}/codesign_allocate\n-    cp ${BASEPREFIX}/${i}/native/bin/${i}-pagestuff unsigned-app-${i}/pagestuff\n+    cp ${BASEPREFIX}/${i}/native/bin/dmg unsigned-app-${i}\n     mv dist unsigned-app-${i}\n     pushd unsigned-app-${i}\n     find . | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-osx-unsigned.tar.gz\n     popd\n \n-    make deploy\n-    ${WRAP_DIR}/dmg dmg \"${OSX_VOLNAME}.dmg\" ${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\n+    make deploy OSX_DMG=\"${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\"\n \n     cd installed\n     find . -name \"lib*.la\" -delete"
      },
      {
        "sha": "c13c24c3cc332316c044fcf3a1a41227894fa1b2",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -2,7 +2,7 @@\n name: \"bitcoin-win-signer\"\n distro: \"ubuntu\"\n suites:\n-- \"bionic\"\n+- \"focal\"\n architectures:\n - \"amd64\"\n packages:"
      },
      {
        "sha": "ffe228a032e6dd72af86ea2187c3737f3783e1f8",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -3,7 +3,7 @@ name: \"bitcoin-core-win-22\"\n enable_cache: true\n distro: \"ubuntu\"\n suites:\n-- \"bionic\"\n+- \"focal\"\n architectures:\n - \"amd64\"\n packages:\n@@ -22,6 +22,7 @@ packages:\n - \"zip\"\n - \"ca-certificates\"\n - \"python3\"\n+- \"python3-pip\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n@@ -31,14 +32,12 @@ script: |\n \n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-w64-mingw32\"\n-  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests\"\n+  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary\"\n   FAKETIME_HOST_PROGS=\"ar ranlib nm windres strip objcopy\"\n   FAKETIME_PROGS=\"date makensis zip\"\n   HOST_CFLAGS=\"-O2 -g -fno-ident\"\n   HOST_CXXFLAGS=\"-O2 -g -fno-ident\"\n \n-  export QT_RCC_TEST=1\n-  export QT_RCC_SOURCE_DATE_OVERRIDE=1\n   export TZ=\"UTC\"\n   export BUILD_DIR=\"$PWD\"\n   mkdir -p ${WRAP_DIR}\n@@ -55,7 +54,7 @@ script: |\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n-    echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n+    echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n   }\n@@ -67,7 +66,7 @@ script: |\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+        echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n@@ -81,12 +80,14 @@ script: |\n         echo \"REAL=\\`which -a ${i}-${prog}-posix | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"\\$REAL \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n+        echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n   }\n \n+  pip3 install lief==0.11.5\n+\n   # Faketime for depends so intermediate results are comparable\n   export PATH_orig=${PATH}\n   create_global_faketime_wrappers \"2000-01-01 12:00:00\""
      },
      {
        "sha": "0a2c1302c82f8e13cfe48ec36ff5bd0c9e07f3e6",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,36 +0,0 @@\n-9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C Aaron Clauson (sipsorcery)\n-617C90010B3BD370B0AC7D424BB42E31C79111B8 Akira Takizawa\n-E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach\n-152812300785C96444D3334D17565732E08E5E41 Andrew Chow\n-912FD3228387123DC97E0E57D5566241A0295FA9 BtcDrak\n-C519EBCF3B926298946783EFF6430754120EC2F4 Christian Decker (cdecker)\n-F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur\n-C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields\n-BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random\n-6D3170C1DC2C6FD0AEEBCA6743811D1A26623924 Douglas Roark\n-9A1689B60D1B3CCE9262307A2F40A9BF167FBA47 Erik Mossberg (erkmos)\n-D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece\n-01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen\n-D1DBF2C4B96F2DEBF4C16654410108112E7EA81F Hennadii Stepanov (hebasto)\n-D3CC177286005BB8FF673294C5242A1AB3936517 jl2012\n-82921A4B88FD454B7EB8CE3C796C4109063D4EAF Jon Atack\n-32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli\n-4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon\n-C42AFF7C61B3E44A1454CD3557AF762DB3353322 Karl-Johan Alm (kallewoof)\n-E463A93F5F3117EEDE6C7316BD02942421F4889F Luke Dashjr\n-B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B Marco Falke\n-07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)\n-CA03882CB1FC067B5D3ACFE4D300116E1C875A3D MeshCollider\n-E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford\n-9692B91BBF0E8D34DFD33B1882C5C009628ECF0C Michagogo\n-77E72E69DA7EE0A148C06B21B34821D4944DE5F7 Nils Schneider\n-D62A803E27E7F43486035ADBBCD04D8E9CCCAC2A Paul Rabahy\n-37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04 Peter Todd\n-D762373D24904A3E42F33B08B9A408E71DAAC974 Pieter Wuille (Location: Leuven, Belgium)\n-133EAC179436F14A5CF1B794860FEB804E669320 Pieter Wuille\n-A8FC55F3B04BA3146F3492E79303B33A305224CB Sebastian Kung (TheCharlatan)\n-ED9BDF7AD6A55E232E84524257FF9BDBCC301009 Sjors Provoost\n-9EDAFF80E080659604F4A76B2EBB056FD847F8A7 Stephan Oeste (Emzy)\n-AEC1884398647C47413C1C3FB1179EB7347DC10D Warren Togami\n-79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko\n-71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan"
      },
      {
        "sha": "63aa3e02b2cc0f00d30f648812587899894bd6dd",
        "filename": "contrib/guix/INSTALL.md",
        "status": "added",
        "additions": 801,
        "deletions": 0,
        "changes": 801,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/INSTALL.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/INSTALL.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/INSTALL.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,801 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [\u2913 skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [\u2913 skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [\u2197\ufe0e external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works wherever Docker images work\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [\u2913 skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, see: https://repology.org/project/guix/versions\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [\u2913 skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both the official shell installer script and\n+the binary tarballs can be found in the GNU Guix Manual's [Binary Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+Note that this section is based on the distro packaging situation at the time of\n+writing (July 2021). Guix is expected to be more widely packaged over time. For\n+an up-to-date view on Guix's package status/version across distros, please see:\n+https://repology.org/project/guix/versions\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problem when building GnuTLS\n+from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unnecessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![bootstrap map](https://user-images.githubusercontent.com/6399679/125064185-a9a59880-e0b0-11eb-82c1-9b8e5dc9950d.png)\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](#choosing-a-guile-version-and-sticking-to-it), install\n+it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for Debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+#### Building and installing source-built packages\n+\n+***IMPORTANT**: A few dependencies have non-obvious quirks/errata which are\n+documented in the sub-sections immediately below. Please read these sections\n+before proceeding to build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with the following:\n+\n+Clone the repository and check out the latest release:\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+For autoconf-based build systems (if `./autogen.sh` or `configure.ac` exists at\n+the root of the repository):\n+\n+```sh\n+./autogen.sh || autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+For CMake-based build systems (if `CMakeLists.txt` exists at the root of the\n+repository):\n+\n+```sh\n+mkdir build && cd build\n+cmake .. -DCMAKE_INSTALL_PREFIX=<prefix>\n+sudo cmake --build . --target install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` on Debian-derived\n+distributions requires that `zlib1g-dev` is installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+### Post-\"build from source\" Setup\n+\n+#### Creating and starting a `guix-daemon-original` service with a fixed `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed (in `${libdir}`) to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after [`root` performs their first\n+`guix pull`](#guix-pull-as-root).\n+\n+We need to create a `-original` version of these init scripts that's pointed to\n+the binaries we just built and `make install`'ed in `${bindir}` (normally,\n+`/usr/local/bin`).\n+\n+Example for `systemd`, run as `root`:\n+\n+```sh\n+# Create guix-daemon-original.service by modifying guix-daemon.service\n+libdir=# set according to your PREFIX (default is /usr/local/lib)\n+bindir=\"$(dirname $(command -v guix-daemon))\"\n+sed -E -e \"s|/\\S*/guix/profiles/per-user/root/current-guix/bin/guix-daemon|${bindir}/guix-daemon|\" \"${libdir}\"/systemd/system/guix-daemon.service > /etc/systemd/system/guix-daemon-original.service\n+chmod 664 /etc/systemd/system/guix-daemon-original.service\n+\n+# Make systemd recognize the new service\n+systemctl daemon-reload\n+\n+# Make sure that the non-working guix-daemon.service is stopped and disabled\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+# Make sure that the working guix-daemon-original.service is started and enabled\n+systemctl enable guix-daemon-original\n+systemctl start guix-daemon-original\n+```\n+\n+#### Creating `guix-daemon` users / groups\n+\n+Please see the [relevant\n+section](https://guix.gnu.org/manual/en/html_node/Build-Environment-Setup.html)\n+in the Guix Reference Manual for more details.\n+\n+## Optional setup\n+\n+At this point, you are set up to [use Guix to build Bitcoin\n+Core](./README.md#usage). However, if you want to polish your setup a bit and\n+make it \"what Guix intended\", then read the next few subsections.\n+\n+### Add an `/etc/profile.d` entry\n+\n+This section definitely does not apply to you if you installed Guix using:\n+1. The shell installer script\n+2. fanquake's Docker image\n+3. Debian's `guix` package\n+\n+#### Background\n+\n+Although Guix knows how to update itself and its packages, it does so in a\n+non-invasive way (it does not modify `/usr/local/bin/guix`).\n+\n+Instead, it does the following:\n+\n+- After a `guix pull`, it updates\n+  `/var/guix/profiles/per-user/$USER/current-guix`, and creates a symlink\n+  targeting this directory at `$HOME/.config/guix/current`\n+\n+- After a `guix install`, it updates\n+  `/var/guix/profiles/per-user/$USER/guix-profile`, and creates a symlink\n+  targeting this directory at `$HOME/.guix-profile`\n+\n+Therefore, in order for these operations to affect your shell/desktop sessions\n+(and for the principle of least astonishment to hold), their corresponding\n+directories have to be added to well-known environment variables like `$PATH`,\n+`$INFOPATH`, `$XDG_DATA_DIRS`, etc.\n+\n+In other words, if `$HOME/.config/guix/current/bin` does not exist in your\n+`$PATH`, a `guix pull` will have no effect on what `guix` you are using. Same\n+goes for `$HOME/.guix-profile/bin`, `guix install`, and installed packages.\n+\n+Helpfully, after a `guix pull` or `guix install`, a message will be printed like\n+so:\n+\n+```\n+hint: Consider setting the necessary environment variables by running:\n+\n+     GUIX_PROFILE=\"$HOME/.guix-profile\"\n+     . \"$GUIX_PROFILE/etc/profile\"\n+\n+Alternately, see `guix package --search-paths -p \"$HOME/.guix-profile\"'.\n+```\n+\n+However, this is somewhat tedious to do for both `guix pull` and `guix install`\n+for each user on the system that wants to properly use `guix`. I recommend that\n+you instead add an entry to `/etc/profile.d` instead. This is done by default\n+when installing the Debian package later than 1.2.0-4 and when using the shell\n+script installer.\n+\n+#### Instructions\n+\n+Create `/etc/profile.d/guix.sh` with the following content:\n+```sh\n+# _GUIX_PROFILE: `guix pull` profile\n+_GUIX_PROFILE=\"$HOME/.config/guix/current\"\n+if [ -L $_GUIX_PROFILE ]; then\n+  export PATH=\"$_GUIX_PROFILE/bin${PATH:+:}$PATH\"\n+  # Export INFOPATH so that the updated info pages can be found\n+  # and read by both /usr/bin/info and/or $GUIX_PROFILE/bin/info\n+  # When INFOPATH is unset, add a trailing colon so that Emacs\n+  # searches 'Info-default-directory-list'.\n+  export INFOPATH=\"$_GUIX_PROFILE/share/info:$INFOPATH\"\n+fi\n+\n+# GUIX_PROFILE: User's default profile\n+GUIX_PROFILE=\"$HOME/.guix-profile\"\n+[ -L $GUIX_PROFILE ] || return\n+GUIX_LOCPATH=\"$GUIX_PROFILE/lib/locale\"\n+export GUIX_PROFILE GUIX_LOCPATH\n+\n+[ -f \"$GUIX_PROFILE/etc/profile\" ] && . \"$GUIX_PROFILE/etc/profile\"\n+\n+# set XDG_DATA_DIRS to include Guix installations\n+export XDG_DATA_DIRS=\"$GUIX_PROFILE/share:${XDG_DATA_DIRS:-/usr/local/share/:/usr/share/}\"\n+```\n+\n+Please note that this will not take effect until the next shell or desktop\n+session (log out and log back in).\n+\n+### `guix pull` as root\n+\n+Before you do this, you need to read the section on [choosing your security\n+model][security-model] and adjust `guix` and `guix-daemon` flags according to\n+your choice, as invoking `guix pull` may pull substitutes from substitute\n+servers (which you may not want).\n+\n+As mentioned in a previous section, Guix expects\n+`${localstatedir}/guix/profiles/per-user/root/current-guix` to be populated with\n+`root`'s Guix profile, `guix pull`-ed and built by some former version of Guix.\n+However, this is not the case when we build from source. Therefore, we need to\n+perform a `guix pull` as `root`:\n+\n+```sh\n+sudo --login guix pull --branch=version-<latest-release-version>\n+# or\n+sudo --login guix pull --commit=<particular-commit>\n+```\n+\n+`guix pull` is quite a long process (especially if you're using\n+`--no-substitute`). If you encounter build problems, please refer to the\n+[troubleshooting section](#troubleshooting).\n+\n+Note that running a bare `guix pull` with no commit or branch specified will\n+pull the latest commit on Guix's master branch, which is likely fine, but not\n+recommended.\n+\n+If you installed Guix from source, you may get an error like the following:\n+```sh\n+error: while creating symlink '/root/.config/guix/current' No such file or directory\n+```\n+To resolve this, simply:\n+```\n+sudo mkdir -p /root/.config/guix\n+```\n+Then try the `guix pull` command again.\n+\n+After the `guix pull` finishes successfully,\n+`${localstatedir}/guix/profiles/per-user/root/current-guix` should be populated.\n+\n+#### Using the newly-pulled `guix` by restarting the daemon\n+\n+Depending on how you installed Guix, you should now make sure that your init\n+scripts and service configurations point to the newly-pulled `guix-daemon`.\n+\n+##### If you built Guix from source\n+\n+If you followed the instructions for [fixing argv\\[0\\]][fix-argv0], you can now\n+do the following:\n+\n+```sh\n+systemctl stop guix-daemon-original\n+systemctl disable guix-daemon-original\n+\n+systemctl enable guix-daemon\n+systemctl start guix-daemon\n+```\n+\n+##### If you installed Guix via the Debian/Ubuntu distribution packages\n+\n+You will need to create a `guix-daemon-latest` service which points to the new\n+`guix` rather than a pinned one.\n+\n+```sh\n+# Create guix-daemon-latest.service by modifying guix-daemon.service\n+sed -E -e \"s|/usr/bin/guix-daemon|/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon|\" /etc/systemd/system/guix-daemon.service > /lib/systemd/system/guix-daemon-latest.service\n+chmod 664 /lib/systemd/system/guix-daemon-latest.service\n+\n+# Make systemd recognize the new service\n+systemctl daemon-reload\n+\n+# Make sure that the old guix-daemon.service is stopped and disabled\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+# Make sure that the new guix-daemon-latest.service is started and enabled\n+systemctl enable guix-daemon-latest\n+systemctl start guix-daemon-latest\n+```\n+\n+##### If you installed Guix via lantw44's Arch Linux AUR package\n+\n+At the time of writing (July 5th, 2021) the systemd unit for \"updated Guix\" is\n+`guix-daemon-latest.service`, therefore, you should do the following:\n+\n+```sh\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+systemctl enable guix-daemon-latest\n+systemctl start guix-daemon-latest\n+```\n+\n+##### Otherwise...\n+\n+Simply do:\n+\n+```sh\n+systemctl restart guix-daemon\n+```\n+\n+### Checking everything\n+\n+If you followed all the steps above to make your Guix setup \"prim and proper,\"\n+you can check that you did everything properly by running through this\n+checklist.\n+\n+1. `/etc/profile.d/guix.sh` should exist and be sourced at each shell login\n+\n+2. `guix describe` should not print `guix describe: error: failed to determine\n+   origin`, but rather something like:\n+\n+   ```\n+   Generation 38   Feb 22 2021 16:39:31    (current)\n+     guix f350df4\n+       repository URL: https://git.savannah.gnu.org/git/guix.git\n+       branch: version-1.2.0\n+       commit: f350df405fbcd5b9e27e6b6aa500da7f101f41e7\n+   ```\n+\n+3. `guix-daemon` should be running from `${localstatedir}/guix/profiles/per-user/root/current-guix`\n+\n+# Troubleshooting\n+\n+## Derivation failed to build\n+\n+When you see a build failure like below:\n+\n+```\n+building /gnu/store/...-foo-3.6.12.drv...\n+/ 'check' phasenote: keeping build directory `/tmp/guix-build-foo-3.6.12.drv-0'\n+builder for `/gnu/store/...-foo-3.6.12.drv' failed with exit code 1\n+build of /gnu/store/...-foo-3.6.12.drv failed\n+View build log at '/var/log/guix/drvs/../...-foo-3.6.12.drv.bz2'.\n+cannot build derivation `/gnu/store/...-qux-7.69.1.drv': 1 dependencies couldn't be built\n+cannot build derivation `/gnu/store/...-bar-3.16.5.drv': 1 dependencies couldn't be built\n+cannot build derivation `/gnu/store/...-baz-2.0.5.drv': 1 dependencies couldn't be built\n+guix time-machine: error: build of `/gnu/store/...-baz-2.0.5.drv' failed\n+```\n+\n+It means that `guix` failed to build a package named `foo`, which was a\n+dependency of `qux`, `bar`, and `baz`. Importantly, note that the last \"failed\"\n+line is not necessarily the root cause, the first \"failed\" line is.\n+\n+Most of the time, the build failure is due to a spurious test failure or the\n+package's build system/test suite breaking when running multi-threaded. To\n+rebuild _just_ this derivation in a single-threaded fashion (please don't forget\n+to add other `guix` flags like `--no-substitutes` as appropriate):\n+\n+```sh\n+$ guix build --cores=1 /gnu/store/...-foo-3.6.12.drv\n+```\n+\n+If the single-threaded rebuild did not succeed, you may need to dig deeper.\n+You may view `foo`'s build logs in `less` like so (please replace paths with the\n+path you see in the build failure output):\n+\n+```sh\n+$ bzcat /var/log/guix/drvs/../...-foo-3.6.12.drv.bz2 | less\n+```\n+\n+`foo`'s build directory is also preserved and available at\n+`/tmp/guix-build-foo-3.6.12.drv-0`. However, if you fail to build `foo` multiple\n+times, it may be `/tmp/...drv-1` or `/tmp/...drv-2`. Always consult the build\n+failure output for the most accurate, up-to-date information.\n+\n+### python(-minimal): [Errno 84] Invalid or incomplete multibyte or wide character\n+\n+This error occurs when your `$TMPDIR` (default: /tmp) exists on a filesystem\n+which rejects characters not present in the UTF-8 character code set. An example\n+is ZFS with the utf8only=on option set.\n+\n+More information: https://bugs.python.org/issue37584\n+\n+### GnuTLS: test-suite FAIL: status-request-revoked\n+\n+*The derivation is likely identified by: `/gnu/store/vhphki5sg9xkdhh2pbc8gi6vhpfzryf0-gnutls-3.6.12.drv`*\n+\n+This unfortunate error is most common for non-substitute builders who installed\n+Guix v1.2.0. The problem stems from the fact that one of GnuTLS's tests uses a\n+hardcoded certificate which expired on 2020-10-24.\n+\n+What's more unfortunate is that this GnuTLS derivation is somewhat special in\n+Guix's dependency graph and is not affected by the package transformation flags\n+like `--without-tests=`.\n+\n+The easiest solution for those encountering this problem is to install a newer\n+version of Guix. However, there are ways to work around this issue:\n+\n+#### Workaround 1: Using substitutes for this single derivation\n+\n+If you've authorized the official Guix build farm's key (more info\n+[here](./README.md#step-1-authorize-the-signing-keys)), then you can use\n+substitutes just for this single derivation by invoking the following:\n+\n+```sh\n+guix build --substitute-urls=\"https://ci.guix.gnu.org\" /gnu/store/vhphki5sg9xkdhh2pbc8gi6vhpfzryf0-gnutls-3.6.12.drv\n+```\n+\n+See [this section](./README.md#removing-authorized-keys) for instructions on how\n+to remove authorized keys if you don't want to keep the build farm's key\n+authorized.\n+\n+#### Workaround 2: Temporarily setting the system clock back\n+\n+This workaround was described [here](https://issues.guix.gnu.org/44559#5).\n+\n+Basically:\n+1. Turn off networking\n+2. Turn off NTP\n+3. Set system time to 2020-10-01\n+4. guix build --no-substitutes /gnu/store/vhphki5sg9xkdhh2pbc8gi6vhpfzryf0-gnutls-3.6.12.drv\n+5. Set system time back to accurate current time\n+6. Turn NTP back on\n+7. Turn networking back on\n+\n+### coreutils: FAIL: tests/tail-2/inotify-dir-recreate\n+\n+The inotify-dir-create test fails on \"remote\" filesystems such as overlayfs\n+(Docker's default filesystem) due to the filesystem being mistakenly recognized\n+as non-remote.\n+\n+A relatively easy workaround to this is to make sure that a somewhat traditional\n+filesystem is mounted at `/tmp` (where `guix-daemon` performs its builds). For\n+Docker users, this might mean [using a volume][docker/volumes], [binding\n+mounting][docker/bind-mnt] from host, or (for those with enough RAM and swap)\n+[mounting a tmpfs][docker/tmpfs] using the `--tmpfs` flag.\n+\n+Please see the following links for more details:\n+\n+- An upstream coreutils bug has been filed: [debbugs#47940](https://debbugs.gnu.org/cgi/bugreport.cgi?bug=47940)\n+- A Guix bug detailing the underlying problem has been filed: [guix-issues#47935](https://issues.guix.gnu.org/47935)\n+- A commit to skip this test in Guix has been merged into the core-updates branch:\n+[savannah/guix@6ba1058](https://git.savannah.gnu.org/cgit/guix.git/commit/?id=6ba1058df0c4ce5611c2367531ae5c3cdc729ab4)\n+\n+\n+[install-script]: #options-1-and-2-using-the-official-shell-installer-script-or-binary-tarball\n+[install-bin-tarball]: #options-1-and-2-using-the-official-shell-installer-script-or-binary-tarball\n+[install-fanquake-docker]: #option-3-using-fanquakes-docker-image\n+[install-distro-pkg]: #option-4-using-a-distribution-maintained-package\n+[install-source]: #option-5-building-from-source\n+\n+[fix-argv0]: #creating-and-starting-a-guix-daemon-original-service-with-a-fixed-argv0\n+[security-model]: ./README.md#choosing-your-security-model\n+\n+[docker/volumes]: https://docs.docker.com/storage/volumes/\n+[docker/bind-mnt]: https://docs.docker.com/storage/bind-mounts/\n+[docker/tmpfs]: https://docs.docker.com/storage/tmpfs/"
      },
      {
        "sha": "4680368a6f876d7406ae3d6d7acc120df1505e38",
        "filename": "contrib/guix/README.md",
        "status": "modified",
        "additions": 359,
        "deletions": 104,
        "changes": 463,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -9,133 +9,271 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n-- 4GB of free disk space on the partition that /gnu/store will reside in\n-- 24GB of free disk space on the partition that the Bitcoin Core git repository\n-  resides in\n+- 16GB of free disk space on the partition that /gnu/store will reside in\n+- 8GB of free disk space **per platform triple** you're planning on building\n+  (see the `HOSTS` [environment variable description][env-vars-list])\n \n-> Note: these requirements are slightly less onerous than those of Gitian builds\n+# Installation and Setup\n \n-## Setup\n+If you don't have Guix installed and set up, please follow the instructions in\n+[INSTALL.md](./INSTALL.md)\n \n-### Installing Guix\n+# Usage\n \n-If you're just testing this out, you can use the\n-[Dockerfile][fanquake/guix-docker] for convenience. It automatically speeds up\n-your builds by [using substitutes](#speeding-up-builds-with-substitute-servers).\n-If you don't want this behaviour, refer to the [next\n-section](#choosing-your-security-model).\n+If you haven't considered your security model yet, please read [the relevant\n+section](#choosing-your-security-model) before proceeding to perform a build.\n \n-Otherwise, follow the [Guix installation guide][guix/bin-install].\n+## Making the Xcode SDK available for macOS cross-compilation\n \n-> Note: For those who like to keep their filesystems clean, Guix is designed to\n-> be very standalone and _will not_ conflict with your system's package\n-> manager/existing setup. It _only_ touches `/var/guix`, `/gnu`, and\n-> `~/.config/guix`.\n+In order to perform a build for macOS (which is included in the default set of\n+platform triples to build), you'll need to extract the macOS SDK tarball using\n+tools found in the [`macdeploy` directory](../macdeploy/README.md).\n \n-### Choosing your security model\n+You can then either point to the SDK using the `SDK_PATH` environment variable:\n \n-Guix allows us to achieve better binary security by using our CPU time to build\n-everything from scratch. However, it doesn't sacrifice user choice in pursuit of\n-this: users can decide whether or not to bootstrap and to use substitutes.\n+```sh\n+# Extract the SDK tarball to /path/to/parent/dir/of/extracted/SDK/Xcode-<foo>-<bar>-extracted-SDK-with-libcxx-headers\n+tar -C /path/to/parent/dir/of/extracted/SDK -xaf /path/to/Xcode-<foo>-<bar>-extracted-SDK-with-libcxx-headers.tar.gz\n \n-After installation, you may want to consider [adding substitute\n-servers](#speeding-up-builds-with-substitute-servers) to speed up your build if\n-that fits your security model (say, if you're just testing that this works).\n-This is skippable if you're using the [Dockerfile][fanquake/guix-docker].\n+# Indicate where to locate the SDK tarball\n+export SDK_PATH=/path/to/parent/dir/of/extracted/SDK\n+```\n \n-If you prefer not to use any substitutes, make sure to set\n-`ADDITIONAL_GUIX_ENVIRONMENT_FLAGS` like the following snippet. The first build\n-will take a while, but the resulting packages will be cached for future builds.\n+or extract it into `depends/SDKs`:\n \n ```sh\n-export ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--no-substitutes'\n+mkdir -p depends/SDKs\n+tar -C depends/SDKs -xaf /path/to/SDK/tarball\n ```\n \n-Likewise, to perform a bootstrapped build (takes even longer):\n+## Building\n+\n+*The author highly recommends at least reading over the [common usage patterns\n+and examples](#common-guix-build-invocation-patterns-and-examples) section below\n+before starting a build. For a full list of customization options, see the\n+[recognized environment variables][env-vars-list] section.*\n+\n+To build Bitcoin Core reproducibly with all default options, invoke the\n+following from the top of a clean repository:\n \n ```sh\n-export ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--bootstrap --no-substitutes'\n+./contrib/guix/guix-build\n ```\n \n-### Using a version of Guix with `guix time-machine` capabilities\n+## Codesigning build outputs\n \n-> Note: This entire section can be skipped if you are already using a version of\n-> Guix that has [the `guix time-machine` command][guix/time-machine].\n+The `guix-codesign` command attaches codesignatures (produced by codesigners) to\n+existing non-codesigned outputs. Please see the [release process\n+documentation](/doc/release-process.md) for more context.\n \n-Once Guix is installed, if it doesn't have the `guix time-machine` command, pull\n-the latest `guix`.\n+It respects many of the same environment variable flags as `guix-build`, with 2\n+crucial differences:\n \n-```sh\n-guix pull --max-jobs=4 # change number of jobs accordingly\n+1. Since only Windows and macOS build outputs require codesigning, the `HOSTS`\n+   environment variable will have a sane default value of `x86_64-w64-mingw32\n+   x86_64-apple-darwin18` instead of all the platforms.\n+2. The `guix-codesign` command ***requires*** a `DETACHED_SIGS_REPO` flag.\n+    * _**DETACHED_SIGS_REPO**_\n+\n+      Set the directory where detached codesignatures can be found for the current\n+      Bitcoin Core version being built.\n+\n+      _REQUIRED environment variable_\n+\n+An invocation with all default options would look like:\n+\n+```\n+env DETACHED_SIGS_REPO=<path/to/bitcoin-detached-sigs> ./contrib/guix-codesign\n+```\n+\n+## Cleaning intermediate work directories\n+\n+By default, `guix-build` leaves all intermediate files or \"work directories\"\n+(e.g. `depends/work`, `guix-build-*/distsrc-*`) intact at the end of a build so\n+that they are available to the user (to aid in debugging, etc.). However, these\n+directories usually take up a large amount of disk space. Therefore, a\n+`guix-clean` convenience script is provided which cleans the current `git`\n+worktree to save disk space:\n+\n+```\n+./contrib/guix/guix-clean\n+```\n+\n+\n+## Attesting to build outputs\n+\n+Much like how Gitian build outputs are attested to in a `gitian.sigs`\n+repository, Guix build outputs are attested to in the [`guix.sigs`\n+repository](https://github.com/bitcoin-core/guix.sigs).\n+\n+After you've cloned the `guix.sigs` repository, to attest to the current\n+worktree's commit/tag:\n+\n+```\n+env GUIX_SIGS_REPO=<path/to/guix.sigs> SIGNER=<gpg-key-name> ./contrib/guix/guix-attest\n ```\n \n-Make sure that you are using your current profile. (You are prompted to do this\n-at the end of the `guix pull`)\n+See `./contrib/guix/guix-attest --help` for more information on the various ways\n+`guix-attest` can be invoked.\n \n-```bash\n-export PATH=\"${HOME}/.config/guix/current/bin${PATH:+:}$PATH\"\n+## Verifying build output attestations\n+\n+After at least one other signer has uploaded their signatures to the `guix.sigs`\n+repository:\n+\n+```\n+git -C <path/to/guix.sigs> pull\n+env GUIX_SIGS_REPO=<path/to/guix.sigs> ./contrib/guix/guix-verify\n+```\n+\n+\n+## Common `guix-build` invocation patterns and examples\n+\n+### Keeping caches and SDKs outside of the worktree\n+\n+If you perform a lot of builds and have a bunch of worktrees, you may find it\n+more efficient to keep the depends tree's download cache, build cache, and SDKs\n+outside of the worktrees to avoid duplicate downloads and unnecessary builds. To\n+help with this situation, the `guix-build` script honours the `SOURCES_PATH`,\n+`BASE_CACHE`, and `SDK_PATH` environment variables and will pass them on to the\n+depends tree so that you can do something like:\n+\n+```sh\n+env SOURCES_PATH=\"$HOME/depends-SOURCES_PATH\" BASE_CACHE=\"$HOME/depends-BASE_CACHE\" SDK_PATH=\"$HOME/macOS-SDKs\" ./contrib/guix/guix-build\n ```\n \n-## Usage\n+Note that the paths that these environment variables point to **must be\n+directories**, and **NOT symlinks to directories**.\n+\n+See the [recognized environment variables][env-vars-list] section for more\n+details.\n \n-### As a Development Environment\n+### Building a subset of platform triples\n \n-For a Bitcoin Core depends development environment, simply invoke\n+Sometimes you only want to build a subset of the supported platform triples, in\n+which case you can override the default list by setting the space-separated\n+`HOSTS` environment variable:\n \n ```sh\n-guix environment --manifest=contrib/guix/manifest.scm\n+env HOSTS='x86_64-w64-mingw32 x86_64-apple-darwin18' ./contrib/guix/guix-build\n ```\n \n-And you'll land back in your shell with all the build dependencies required for\n-a `depends` build injected into your environment.\n+See the [recognized environment variables][env-vars-list] section for more\n+details.\n+\n+### Controlling the number of threads used by `guix` build commands\n \n-### As a Tool for Deterministic Builds\n+Depending on your system's RAM capacity, you may want to decrease the number of\n+threads used to decrease RAM usage or vice versa.\n \n-From the top of a clean Bitcoin Core repository:\n+By default, the scripts under `./contrib/guix` will invoke all `guix` build\n+commands with `--cores=\"$JOBS\"`. Note that `$JOBS` defaults to `$(nproc)` if not\n+specified. However, astute manual readers will also notice that `guix` build\n+commands also accept a `--max-jobs=` flag (which defaults to 1 if unspecified).\n+\n+Here is the difference between `--cores=` and `--max-jobs=`:\n+\n+> Note: When I say \"derivation,\" think \"package\"\n+\n+`--cores=`\n+\n+  - controls the number of CPU cores to build each derivation. This is the value\n+    passed to `make`'s `--jobs=` flag.\n+\n+`--max-jobs=`\n+\n+  - controls how many derivations can be built in parallel\n+  - defaults to 1\n+\n+Therefore, the default is for `guix` build commands to build one derivation at a\n+time, utilizing `$JOBS` threads.\n+\n+Specifying the `$JOBS` environment variable will only modify `--cores=`, but you\n+can also modify the value for `--max-jobs=` by specifying\n+`$ADDITIONAL_GUIX_COMMON_FLAGS`. For example, if you have a LOT of memory, you\n+may want to set:\n \n ```sh\n-./contrib/guix/guix-build.sh\n+export ADDITIONAL_GUIX_COMMON_FLAGS='--max-jobs=8'\n ```\n \n-After the build finishes successfully (check the status code please), compare\n-hashes:\n+Which allows for a maximum of 8 derivations to be built at the same time, each\n+utilizing `$JOBS` threads.\n+\n+Or, if you'd like to avoid spurious build failures caused by issues with\n+parallelism within a single package, but would still like to build multiple\n+packages when the dependency graph allows for it, you may want to try:\n \n ```sh\n-find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n+export JOBS=1 ADDITIONAL_GUIX_COMMON_FLAGS='--max-jobs=8'\n ```\n \n-#### Recognized environment variables\n+See the [recognized environment variables][env-vars-list] section for more\n+details.\n+\n+## Recognized environment variables\n \n * _**HOSTS**_\n \n   Override the space-separated list of platform triples for which to perform a\n-  bootstrappable build. _(defaults to \"x86\\_64-linux-gnu\n-  arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu\")_\n+  bootstrappable build.\n \n-  > Windows and OS X platform triplet support are WIP.\n+  _(defaults to \"x86\\_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu\n+  riscv64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu\n+  x86\\_64-w64-mingw32 x86\\_64-apple-darwin18\")_\n \n * _**SOURCES_PATH**_\n \n   Set the depends tree download cache for sources. This is passed through to the\n   depends tree. Setting this to the same directory across multiple builds of the\n   depends tree can eliminate unnecessary redownloading of package sources.\n \n-* _**MAX_JOBS**_\n+  The path that this environment variable points to **must be a directory**, and\n+  **NOT a symlink to a directory**.\n+\n+* _**BASE_CACHE**_\n \n-  Override the maximum number of jobs to run simultaneously, you might want to\n-  do so on a memory-limited machine. This may be passed to `make` as in `make\n-  --jobs=\"$MAX_JOBS\"` or `xargs` as in `xargs -P\"$MAX_JOBS\"`. _(defaults to the\n-  value of `nproc` outside the container)_\n+  Set the depends tree cache for built packages. This is passed through to the\n+  depends tree. Setting this to the same directory across multiple builds of the\n+  depends tree can eliminate unnecessary building of packages.\n+\n+  The path that this environment variable points to **must be a directory**, and\n+  **NOT a symlink to a directory**.\n+\n+* _**SDK_PATH**_\n+\n+  Set the path where _extracted_ SDKs can be found. This is passed through to\n+  the depends tree. Note that this is should be set to the _parent_ directory of\n+  the actual SDK (e.g. `SDK_PATH=$HOME/Downloads/macOS-SDKs` instead of\n+  `$HOME/Downloads/macOS-SDKs/Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers`).\n+\n+  The path that this environment variable points to **must be a directory**, and\n+  **NOT a symlink to a directory**.\n+\n+* _**JOBS**_\n+\n+  Override the number of jobs to run simultaneously, you might want to do so on\n+  a memory-limited machine. This may be passed to:\n+\n+  - `guix` build commands as in `guix environment --cores=\"$JOBS\"`\n+  - `make` as in `make --jobs=\"$JOBS\"`\n+  - `xargs` as in `xargs -P\"$JOBS\"`\n+\n+  See [here](#controlling-the-number-of-threads-used-by-guix-build-commands) for\n+  more details.\n+\n+  _(defaults to the value of `nproc` outside the container)_\n \n * _**SOURCE_DATE_EPOCH**_\n \n   Override the reference UNIX timestamp used for bit-for-bit reproducibility,\n-  the variable name conforms to [standard][r12e/source-date-epoch]. _(defaults\n-  to the output of `$(git log --format=%at -1)`)_\n+  the variable name conforms to [standard][r12e/source-date-epoch].\n+\n+  _(defaults to the output of `$(git log --format=%at -1)`)_\n \n * _**V**_\n \n@@ -147,74 +285,188 @@ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n   string) is interpreted the same way as not setting `V` at all, and that `V=0`\n   has the same effect as `V=1`.\n \n-* _**ADDITIONAL_GUIX_ENVIRONMENT_FLAGS**_\n+* _**SUBSTITUTE_URLS**_\n+\n+  A whitespace-delimited list of URLs from which to download pre-built packages.\n+  A URL is only used if its signing key is authorized (refer to the [substitute\n+  servers section](#option-1-building-with-substitutes) for more details).\n \n-  Additional flags to be passed to `guix environment`. For a fully-bootstrapped\n-  build, set this to `--bootstrap --no-substitutes` (refer to the [security\n-  model section](#choosing-your-security-model) for more details). Note that a\n-  fully-bootstrapped build will take quite a long time on the first run.\n+* _**ADDITIONAL_GUIX_COMMON_FLAGS**_\n \n-## Tips and Tricks\n+  Additional flags to be passed to all `guix` commands.\n \n-### Speeding up builds with substitute servers\n+* _**ADDITIONAL_GUIX_TIMEMACHINE_FLAGS**_\n \n-_This whole section is automatically done in the convenience\n-[Dockerfiles][fanquake/guix-docker]_\n+  Additional flags to be passed to `guix time-machine`.\n \n-For those who are used to life in the fast _(and trustful)_ lane, you can use\n-[substitute servers][guix/substitutes] to enable binary downloads of packages.\n+* _**ADDITIONAL_GUIX_ENVIRONMENT_FLAGS**_\n+\n+  Additional flags to be passed to the invocation of `guix environment` inside\n+  `guix time-machine`.\n+\n+# Choosing your security model\n \n-> For those who only want to use substitutes from the official Guix build farm\n-> and have authorized the build farm's signing key during Guix's installation,\n-> you don't need to do anything.\n+No matter how you installed Guix, you need to decide on your security model for\n+building packages with Guix.\n \n-#### Authorize the signing keys\n+Guix allows us to achieve better binary security by using our CPU time to build\n+everything from scratch. However, it doesn't sacrifice user choice in pursuit of\n+this: users can decide whether or not to use **substitutes** (pre-built\n+packages).\n+\n+## Option 1: Building with substitutes\n+\n+### Step 1: Authorize the signing keys\n+\n+Depending on the installation procedure you followed, you may have already\n+authorized the Guix build farm key. In particular, the official shell installer\n+script asks you if you want the key installed, and the debian distribution\n+package authorized the key during installation.\n+\n+You can check the current list of authorized keys at `/etc/guix/acl`.\n+\n+At the time of writing, a `/etc/guix/acl` with just the Guix build farm key\n+authorized looks something like:\n+\n+```lisp\n+(acl\n+ (entry\n+  (public-key\n+   (ecc\n+    (curve Ed25519)\n+    (q #8D156F295D24B0D9A86FA5741A840FF2D24F60F7B6C4134814AD55625971B394#)\n+    )\n+   )\n+  (tag\n+   (guix import)\n+   )\n+  )\n+ )\n+```\n \n-For the official Guix build farm at https://ci.guix.gnu.org, run as root:\n+If you've determined that the official Guix build farm key hasn't been\n+authorized, and you would like to authorize it, run the following as root:\n \n ```\n-guix archive --authorize < ~root/.config/guix/current/share/guix/ci.guix.gnu.org.pub\n+guix archive --authorize < /var/guix/profiles/per-user/root/current-guix/share/guix/ci.guix.gnu.org.pub\n ```\n \n+If\n+`/var/guix/profiles/per-user/root/current-guix/share/guix/ci.guix.gnu.org.pub`\n+doesn't exist, try:\n+\n+```sh\n+guix archive --authorize < <PREFIX>/share/guix/ci.guix.gnu.org.pub\n+```\n+\n+Where `<PREFIX>` is likely:\n+- `/usr` if you installed from a distribution package\n+- `/usr/local` if you installed Guix from source and didn't supply any\n+  prefix-modifying flags to Guix's `./configure`\n+\n For dongcarl's substitute server at https://guix.carldong.io, run as root:\n \n ```sh\n wget -qO- 'https://guix.carldong.io/signing-key.pub' | guix archive --authorize\n ```\n \n-#### Use the substitute servers\n+#### Removing authorized keys\n+\n+To remove previously authorized keys, simply edit `/etc/guix/acl` and remove the\n+`(entry (public-key ...))` entry.\n \n-The official Guix build farm at https://ci.guix.gnu.org is automatically used\n-unless the `--no-substitutes` flag is supplied.\n+### Step 2: Specify the substitute servers\n \n-This can be overridden for all `guix` invocations by passing the\n-`--substitute-urls` option to your invocation of `guix-daemon`. This can also be\n-overridden on a call-by-call basis by passing the same `--substitute-urls`\n-option to client tools such at `guix environment`.\n+Once its key is authorized, the official Guix build farm at\n+https://ci.guix.gnu.org is automatically used unless the `--no-substitutes` flag\n+is supplied. This default list of substitute servers is overridable both on a\n+`guix-daemon` level and when you invoke `guix` commands. See examples below for\n+the various ways of adding dongcarl's substitute server after having [authorized\n+his signing key](#authorize-the-signing-keys).\n \n-To use dongcarl's substitute server for Bitcoin Core builds after having\n-[authorized his signing key](#authorize-the-signing-keys):\n+Change the **default list** of substitute servers by starting `guix-daemon` with\n+the `--substitute-urls` option (you will likely need to edit your init script):\n \n+```sh\n+guix-daemon <cmd> --substitute-urls='https://guix.carldong.io https://ci.guix.gnu.org'\n+```\n+\n+Override the default list of substitute servers by passing the\n+`--substitute-urls` option for invocations of `guix` commands:\n+\n+```sh\n+guix <cmd> --substitute-urls='https://guix.carldong.io https://ci.guix.gnu.org'\n ```\n-export ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--substitute-urls=\"https://guix.carldong.io https://ci.guix.gnu.org\"'\n+\n+For scripts under `./contrib/guix`, set the `SUBSTITUTE_URLS` environment\n+variable:\n+\n+```sh\n+export SUBSTITUTE_URLS='https://guix.carldong.io https://ci.guix.gnu.org'\n ```\n \n-## FAQ\n+## Option 2: Disabling substitutes on an ad-hoc basis\n \n-### How can I trust the binary installation?\n+If you prefer not to use any substitutes, make sure to supply `--no-substitutes`\n+like in the following snippet. The first build will take a while, but the\n+resulting packages will be cached for future builds.\n \n-As mentioned at the bottom of [this manual page][guix/bin-install]:\n+For direct invocations of `guix`:\n+```sh\n+guix <cmd> --no-substitutes\n+```\n \n-> The binary installation tarballs can be (re)produced and verified simply by\n-> running the following command in the Guix source tree:\n->\n->     make guix-binary.x86_64-linux.tar.xz\n+For the scripts under `./contrib/guix/`:\n+```sh\n+export ADDITIONAL_GUIX_COMMON_FLAGS='--no-substitutes'\n+```\n \n-### When will Guix be packaged in debian?\n+## Option 3: Disabling substitutes by default\n \n-Vagrant Cascadian has been making good progress on this\n-[here][debian/guix-package]. We have all the pieces needed to put up an APT\n-repository and will likely put one up soon.\n+`guix-daemon` accepts a `--no-substitutes` flag, which will make sure that,\n+unless otherwise overridden by a command line invocation, no substitutes will be\n+used.\n+\n+If you start `guix-daemon` using an init script, you can edit said script to\n+supply this flag.\n+\n+\n+# Purging/Uninstalling Guix\n+\n+In the extraordinarily rare case where you messed up your Guix installation in\n+an irreversible way, you may want to completely purge Guix from your system and\n+start over.\n+\n+1. Uninstall Guix itself according to the way you installed it. (e.g. `sudo apt\n+   purge guix` for Ubuntu packaging, `sudo make uninstall` for\n+   built-from-source).\n+2. Remove all build users and groups\n+\n+   You may check for relevant users and groups using:\n+\n+   ```\n+   getent passwd | grep guix\n+   getent group | grep guix\n+   ```\n+\n+   Then, you may remove users and groups using:\n+\n+   ```\n+   sudo userdel <user>\n+   sudo groupdel <group>\n+   ```\n+\n+3. Remove all possible Guix-related directories\n+    - `/var/guix/`\n+    - `/var/log/guix/`\n+    - `/gnu/`\n+    - `/etc/guix/`\n+    - `/home/*/.config/guix/`\n+    - `/home/*/.cache/guix/`\n+    - `/home/*/.guix-profile/`\n+    - `/root/.config/guix/`\n+    - `/root/.cache/guix/`\n+    - `/root/.guix-profile/`\n \n [b17e]: http://bootstrappable.org/\n [r12e/source-date-epoch]: https://reproducible-builds.org/docs/source-date-epoch/\n@@ -226,5 +478,8 @@ repository and will likely put one up soon.\n [guix/substitute-server-auth]: https://www.gnu.org/software/guix/manual/en/html_node/Substitute-Server-Authorization.html\n [guix/time-machine]: https://guix.gnu.org/manual/en/html_node/Invoking-guix-time_002dmachine.html\n \n-[debian/guix-package]: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=850644\n+[debian/guix-bullseye]: https://packages.debian.org/bullseye/guix\n+[ubuntu/guix-hirsute]: https://packages.ubuntu.com/hirsute/guix\n [fanquake/guix-docker]: https://github.com/fanquake/core-review/tree/master/guix\n+\n+[env-vars-list]: #recognized-environment-variables"
      },
      {
        "sha": "51d589c1dee393e8688632ead36e68bf054c1ab1",
        "filename": "contrib/guix/guix-attest",
        "status": "added",
        "additions": 258,
        "deletions": 0,
        "changes": 258,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/guix-attest",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/guix-attest",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-attest?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,258 @@\n+#!/usr/bin/env bash\n+export LC_ALL=C\n+set -e -o pipefail\n+\n+# Source the common prelude, which:\n+#   1. Checks if we're at the top directory of the Bitcoin Core repository\n+#   2. Defines a few common functions and variables\n+#\n+# shellcheck source=libexec/prelude.bash\n+source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n+\n+\n+###################\n+## Sanity Checks ##\n+###################\n+\n+################\n+# Required non-builtin commands should be invokable\n+################\n+\n+check_tools cat env basename mkdir diff sort\n+if [ -z \"$NO_SIGN\" ]; then\n+    check_tools gpg\n+fi\n+\n+################\n+# Required env vars should be non-empty\n+################\n+\n+cmd_usage() {\n+cat <<EOF\n+Synopsis:\n+\n+    env GUIX_SIGS_REPO=<path/to/guix.sigs> \\\\\n+        SIGNER=GPG_KEY_NAME[=SIGNER_NAME] \\\\\n+        [ NO_SIGN=1 ]\n+      ./contrib/guix/guix-attest\n+\n+Example w/o overriding signing name:\n+\n+    env GUIX_SIGS_REPO=/home/achow101/guix.sigs \\\\\n+        SIGNER=achow101 \\\\\n+      ./contrib/guix/guix-attest\n+\n+Example overriding signing name:\n+\n+    env GUIX_SIGS_REPO=/home/dongcarl/guix.sigs \\\\\n+        SIGNER=0x96AB007F1A7ED999=dongcarl \\\\\n+      ./contrib/guix/guix-attest\n+\n+Example w/o signing, just creating SHA256SUMS:\n+\n+    env GUIX_SIGS_REPO=/home/achow101/guix.sigs \\\\\n+        SIGNER=achow101 \\\\\n+        NO_SIGN=1 \\\\\n+      ./contrib/guix/guix-attest\n+\n+EOF\n+}\n+\n+if [ -z \"$GUIX_SIGS_REPO\" ] || [ -z \"$SIGNER\" ]; then\n+    cmd_usage\n+    exit 1\n+fi\n+\n+################\n+# GUIX_SIGS_REPO should exist as a directory\n+################\n+\n+if [ ! -d \"$GUIX_SIGS_REPO\" ]; then\n+cat << EOF\n+ERR: The specified GUIX_SIGS_REPO is not an existent directory:\n+\n+    '$GUIX_SIGS_REPO'\n+\n+Hint: Please clone the guix.sigs repository and point to it with the\n+      GUIX_SIGS_REPO environment variable.\n+\n+EOF\n+cmd_usage\n+exit 1\n+fi\n+\n+################\n+# The key specified in SIGNER should be usable\n+################\n+\n+IFS='=' read -r gpg_key_name signer_name <<< \"$SIGNER\"\n+if [ -z \"${signer_name}\" ]; then\n+    signer_name=\"$gpg_key_name\"\n+fi\n+\n+if [ -z \"$NO_SIGN\" ] && ! gpg --dry-run --list-secret-keys \"${gpg_key_name}\" >/dev/null 2>&1; then\n+    echo \"ERR: GPG can't seem to find any key named '${gpg_key_name}'\"\n+    exit 1\n+fi\n+\n+################\n+# We should be able to find at least one output\n+################\n+\n+echo \"Looking for build output SHA256SUMS fragments in ${OUTDIR_BASE}\"\n+\n+shopt -s nullglob\n+sha256sum_fragments=( \"$OUTDIR_BASE\"/*/SHA256SUMS.part ) # This expands to an array of directories...\n+shopt -u nullglob\n+\n+noncodesigned_fragments=()\n+codesigned_fragments=()\n+\n+if (( ${#sha256sum_fragments[@]} )); then\n+    echo \"Found build output SHA256SUMS fragments:\"\n+    for outdir in \"${sha256sum_fragments[@]}\"; do\n+        echo \"    '$outdir'\"\n+        case \"$outdir\" in\n+            \"$OUTDIR_BASE\"/*-codesigned/SHA256SUMS.part)\n+                codesigned_fragments+=(\"$outdir\")\n+                ;;\n+            *)\n+                noncodesigned_fragments+=(\"$outdir\")\n+                ;;\n+        esac\n+    done\n+    echo\n+else\n+    echo \"ERR: Could not find any build output SHA256SUMS fragments in ${OUTDIR_BASE}\"\n+    exit 1\n+fi\n+\n+##############\n+##  Attest  ##\n+##############\n+\n+# Usage: out_name $outdir\n+#\n+#   HOST: The output directory being attested\n+#\n+out_name() {\n+    basename \"$(dirname \"$1\")\"\n+}\n+\n+shasum_already_exists() {\n+cat <<EOF\n+--\n+\n+ERR: An ${1} file already exists for '${VERSION}' and attests\n+     differently. You likely previously attested to a partial build (e.g. one\n+     where you specified the HOST environment variable).\n+\n+     See the diff above for more context.\n+\n+Hint: You may wish to remove the existing attestations and their signatures by\n+      invoking:\n+\n+          rm '${PWD}/${1}'{,.asc}\n+\n+      Then try running this script again.\n+\n+EOF\n+}\n+\n+# Given a document with unix line endings (just <LF>) in stdin, make all lines\n+# end in <CR><LF> and make sure there's no trailing <LF> at the end of the file.\n+#\n+# This is necessary as cleartext signatures are calculated on text after their\n+# line endings are canonicalized.\n+#\n+# For more information:\n+#     1. https://security.stackexchange.com/a/104261\n+#     2. https://datatracker.ietf.org/doc/html/rfc4880#section-7.1\n+#\n+rfc4880_normalize_document() {\n+    sed 's/$/\\r/' | head -c -2\n+}\n+\n+echo \"Attesting to build outputs for version: '${VERSION}'\"\n+echo \"\"\n+\n+outsigdir=\"$GUIX_SIGS_REPO/$VERSION/$signer_name\"\n+mkdir -p \"$outsigdir\"\n+(\n+    cd \"$outsigdir\"\n+\n+    temp_noncodesigned=\"$(mktemp)\"\n+    trap 'rm -rf -- \"$temp_noncodesigned\"' EXIT\n+\n+    if (( ${#noncodesigned_fragments[@]} )); then\n+        cat \"${noncodesigned_fragments[@]}\" \\\n+            | sort -u \\\n+            | sort -k2 \\\n+            | rfc4880_normalize_document \\\n+                > \"$temp_noncodesigned\"\n+        if [ -e noncodesigned.SHA256SUMS ]; then\n+            # The SHA256SUMS already exists, make sure it's exactly what we\n+            # expect, error out if not\n+            if diff -u noncodesigned.SHA256SUMS \"$temp_noncodesigned\"; then\n+                echo \"A noncodesigned.SHA256SUMS file already exists for '${VERSION}' and is up-to-date.\"\n+            else\n+                shasum_already_exists noncodesigned.SHA256SUMS\n+                exit 1\n+            fi\n+        else\n+            mv \"$temp_noncodesigned\" noncodesigned.SHA256SUMS\n+        fi\n+    else\n+        echo \"ERR: No noncodesigned outputs found for '${VERSION}', exiting...\"\n+        exit 1\n+    fi\n+\n+    temp_codesigned=\"$(mktemp)\"\n+    trap 'rm -rf -- \"$temp_codesigned\"' EXIT\n+\n+    if (( ${#codesigned_fragments[@]} )); then\n+        # Note: all.SHA256SUMS attests to all of $sha256sum_fragments, but is\n+        #       not needed if there are no $codesigned_fragments\n+        cat \"${sha256sum_fragments[@]}\" \\\n+            | sort -u \\\n+            | sort -k2 \\\n+            | sed 's/$/\\r/' \\\n+            | rfc4880_normalize_document \\\n+                > \"$temp_codesigned\"\n+        if [ -e codesigned.SHA256SUMS ]; then\n+            # The SHA256SUMS already exists, make sure it's exactly what we\n+            # expect, error out if not\n+            if diff -u all.SHA256SUMS \"$temp_codesigned\"; then\n+                echo \"An all.SHA256SUMS file already exists for '${VERSION}' and is up-to-date.\"\n+            else\n+                shasum_already_exists all.SHA256SUMS\n+                exit 1\n+            fi\n+        else\n+            mv \"$temp_codesigned\" codesigned.SHA256SUMS\n+        fi\n+    else\n+        # It is fine to have the codesigned outputs be missing (perhaps the\n+        # detached codesigs have not been published yet), just print a log\n+        # message instead of erroring out\n+        echo \"INFO: No codesigned outputs found for '${VERSION}', skipping...\"\n+    fi\n+\n+    if [ -z \"$NO_SIGN\" ]; then\n+        echo \"Signing SHA256SUMS to produce SHA256SUMS.asc\"\n+        for i in *.SHA256SUMS; do\n+            if [ ! -e \"$i\".asc ]; then\n+                gpg --detach-sign \\\n+                    --digest-algo sha256 \\\n+                    --local-user \"$gpg_key_name\" \\\n+                    --armor \\\n+                    --output \"$i\".asc \"$i\"\n+            else\n+                echo \"Signature already there\"\n+            fi\n+        done\n+    else\n+        echo \"Not signing SHA256SUMS as \\$NO_SIGN is not empty\"\n+    fi\n+    echo \"\"\n+)"
      },
      {
        "sha": "5a908a507d068650a6121d666f2539fc156b8e2d",
        "filename": "contrib/guix/guix-build",
        "status": "added",
        "additions": 477,
        "deletions": 0,
        "changes": 477,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/guix-build",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/guix-build",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-build?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,477 @@\n+#!/usr/bin/env bash\n+export LC_ALL=C\n+set -e -o pipefail\n+\n+# Source the common prelude, which:\n+#   1. Checks if we're at the top directory of the Bitcoin Core repository\n+#   2. Defines a few common functions and variables\n+#\n+# shellcheck source=libexec/prelude.bash\n+source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n+\n+\n+###################\n+## SANITY CHECKS ##\n+###################\n+\n+################\n+# Required non-builtin commands should be invocable\n+################\n+\n+check_tools cat mkdir make getent curl git guix\n+\n+################\n+# GUIX_BUILD_OPTIONS should be empty\n+################\n+#\n+# GUIX_BUILD_OPTIONS is an environment variable recognized by guix commands that\n+# can perform builds. This seems like what we want instead of\n+# ADDITIONAL_GUIX_COMMON_FLAGS, but the value of GUIX_BUILD_OPTIONS is actually\n+# _appended_ to normal command-line options. Meaning that they will take\n+# precedence over the command-specific ADDITIONAL_GUIX_<CMD>_FLAGS.\n+#\n+# This seems like a poor user experience. Thus we check for GUIX_BUILD_OPTIONS's\n+# existence here and direct users of this script to use our (more flexible)\n+# custom environment variables.\n+if [ -n \"$GUIX_BUILD_OPTIONS\" ]; then\n+cat << EOF\n+Error: Environment variable GUIX_BUILD_OPTIONS is not empty:\n+  '$GUIX_BUILD_OPTIONS'\n+\n+Unfortunately this script is incompatible with GUIX_BUILD_OPTIONS, please unset\n+GUIX_BUILD_OPTIONS and use ADDITIONAL_GUIX_COMMON_FLAGS to set build options\n+across guix commands or ADDITIONAL_GUIX_<CMD>_FLAGS to set build options for a\n+specific guix command.\n+\n+See contrib/guix/README.md for more details.\n+EOF\n+exit 1\n+fi\n+\n+################\n+# The git worktree should not be dirty\n+################\n+\n+if ! git diff-index --quiet HEAD -- && [ -z \"$FORCE_DIRTY_WORKTREE\" ]; then\n+cat << EOF\n+ERR: The current git worktree is dirty, which may lead to broken builds.\n+\n+     Aborting...\n+\n+Hint: To make your git worktree clean, You may want to:\n+      1. Commit your changes,\n+      2. Stash your changes, or\n+      3. Set the 'FORCE_DIRTY_WORKTREE' environment variable if you insist on\n+         using a dirty worktree\n+EOF\n+exit 1\n+fi\n+\n+mkdir -p \"$VERSION_BASE\"\n+\n+################\n+# Build directories should not exist\n+################\n+\n+# Default to building for all supported HOSTs (overridable by environment)\n+export HOSTS=\"${HOSTS:-x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu\n+                       x86_64-w64-mingw32\n+                       x86_64-apple-darwin18}\"\n+\n+# Usage: distsrc_for_host HOST\n+#\n+#   HOST: The current platform triple we're building for\n+#\n+distsrc_for_host() {\n+    echo \"${DISTSRC_BASE}/distsrc-${VERSION}-${1}\"\n+}\n+\n+# Accumulate a list of build directories that already exist...\n+hosts_distsrc_exists=\"\"\n+for host in $HOSTS; do\n+    if [ -e \"$(distsrc_for_host \"$host\")\" ]; then\n+        hosts_distsrc_exists+=\" ${host}\"\n+    fi\n+done\n+\n+if [ -n \"$hosts_distsrc_exists\" ]; then\n+# ...so that we can print them out nicely in an error message\n+cat << EOF\n+ERR: Build directories for this commit already exist for the following platform\n+     triples you're attempting to build, probably because of previous builds.\n+     Please remove, or otherwise deal with them prior to starting another build.\n+\n+     Aborting...\n+\n+Hint: To blow everything away, you may want to use:\n+\n+  $ ./contrib/guix/guix-clean\n+\n+Specifically, this will remove all files without an entry in the index,\n+excluding the SDK directory, the depends download cache, the depends built\n+packages cache, the garbage collector roots for Guix environments, and the\n+output directory.\n+EOF\n+for host in $hosts_distsrc_exists; do\n+    echo \"     ${host} '$(distsrc_for_host \"$host\")'\"\n+done\n+exit 1\n+else\n+    mkdir -p \"$DISTSRC_BASE\"\n+fi\n+\n+################\n+# When building for darwin, the macOS SDK should exists\n+################\n+\n+for host in $HOSTS; do\n+    case \"$host\" in\n+        *darwin*)\n+            OSX_SDK=\"$(make -C \"${PWD}/depends\" --no-print-directory HOST=\"$host\" print-OSX_SDK | sed 's@^[^=]\\+=@@g')\"\n+            if [ -e \"$OSX_SDK\" ]; then\n+                echo \"Found macOS SDK at '${OSX_SDK}', using...\"\n+            else\n+                echo \"macOS SDK does not exist at '${OSX_SDK}', please place the extracted, untarred SDK there to perform darwin builds, exiting...\"\n+                exit 1\n+            fi\n+            ;;\n+    esac\n+done\n+\n+################\n+# VERSION_BASE should have enough space\n+################\n+\n+avail_KiB=\"$(df -Pk \"$VERSION_BASE\" | sed 1d | tr -s ' ' | cut -d' ' -f4)\"\n+total_required_KiB=0\n+for host in $HOSTS; do\n+    case \"$host\" in\n+        *darwin*) required_KiB=440000 ;;\n+        *mingw*)  required_KiB=7600000 ;;\n+        *)        required_KiB=6400000 ;;\n+    esac\n+    total_required_KiB=$((total_required_KiB+required_KiB))\n+done\n+\n+if (( total_required_KiB > avail_KiB )); then\n+    total_required_GiB=$((total_required_KiB / 1048576))\n+    avail_GiB=$((avail_KiB / 1048576))\n+    echo \"Performing a Bitcoin Core Guix build for the selected HOSTS requires ${total_required_GiB} GiB, however, only ${avail_GiB} GiB is available. Please free up some disk space before performing the build.\"\n+    exit 1\n+fi\n+\n+################\n+# Check that we can connect to the guix-daemon\n+################\n+\n+cat << EOF\n+Checking that we can connect to the guix-daemon...\n+\n+Hint: If this hangs, you may want to try turning your guix-daemon off and on\n+      again.\n+\n+EOF\n+if ! guix gc --list-failures > /dev/null; then\n+cat << EOF\n+\n+ERR: Failed to connect to the guix-daemon, please ensure that one is running and\n+     reachable.\n+EOF\n+exit 1\n+fi\n+\n+# Developer note: we could use `guix repl` for this check and run:\n+#\n+#     (import (guix store)) (close-connection (open-connection))\n+#\n+# However, the internal API is likely to change more than the CLI invocation\n+\n+################\n+# Services database must have basic entries\n+################\n+\n+if ! getent services http https ftp > /dev/null 2>&1; then\n+cat << EOF\n+ERR: Your system's C library can not find service database entries for at least\n+     one of the following services: http, https, ftp.\n+\n+Hint: Most likely, /etc/services does not exist yet (common for docker images\n+      and minimal distros), or you don't have permissions to access it.\n+\n+      If /etc/services does not exist yet, you may want to install the\n+      appropriate package for your distro which provides it.\n+\n+          On Debian/Ubuntu: netbase\n+          On Arch Linux: iana-etc\n+\n+      For more information, see: getent(1), services(5)\n+\n+EOF\n+\n+fi\n+\n+#########\n+# SETUP #\n+#########\n+\n+# Determine the maximum number of jobs to run simultaneously (overridable by\n+# environment)\n+JOBS=\"${JOBS:-$(nproc)}\"\n+\n+# Usage: host_to_commonname HOST\n+#\n+#   HOST: The current platform triple we're building for\n+#\n+host_to_commonname() {\n+    case \"$1\" in\n+        *darwin*) echo osx ;;\n+        *mingw*)  echo win ;;\n+        *linux*)  echo linux ;;\n+        *)        exit 1 ;;\n+    esac\n+}\n+\n+# Determine the reference time used for determinism (overridable by environment)\n+SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:-$(git log --format=%at -1)}\"\n+\n+# Execute \"$@\" in a pinned, possibly older version of Guix, for reproducibility\n+# across time.\n+time-machine() {\n+    # shellcheck disable=SC2086\n+    guix time-machine --url=https://git.savannah.gnu.org/git/guix.git \\\n+                      --commit=aa34d4d28dfe25ba47d5800d05000fb7221788c0 \\\n+                      --cores=\"$JOBS\" \\\n+                      --keep-failed \\\n+                      --fallback \\\n+                      ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"} \\\n+                      ${ADDITIONAL_GUIX_COMMON_FLAGS} ${ADDITIONAL_GUIX_TIMEMACHINE_FLAGS} \\\n+                      -- \"$@\"\n+}\n+\n+\n+# Precious directories are those which should not be cleaned between successive\n+# guix builds\n+depends_precious_dir_names='SOURCES_PATH BASE_CACHE SDK_PATH'\n+precious_dir_names=\"${depends_precious_dir_names} OUTDIR_BASE PROFILES_BASE\"\n+\n+# Usage: contains IFS-SEPARATED-LIST ITEM\n+contains() {\n+    for i in ${1}; do\n+        if [ \"$i\" = \"${2}\" ]; then\n+            return 0  # Found!\n+        fi\n+    done\n+    return 1\n+}\n+\n+# If the user explicitly specified a precious directory, create it so we\n+# can map it into the container\n+for precious_dir_name in $precious_dir_names; do\n+    precious_dir_path=\"${!precious_dir_name}\"\n+    if [ -n \"$precious_dir_path\" ]; then\n+        if [ ! -e \"$precious_dir_path\" ]; then\n+            mkdir -p \"$precious_dir_path\"\n+        elif [ -L \"$precious_dir_path\" ]; then\n+            echo \"ERR: ${precious_dir_name} cannot be a symbolic link\"\n+            exit 1\n+        elif [ ! -d \"$precious_dir_path\" ]; then\n+            echo \"ERR: ${precious_dir_name} must be a directory\"\n+            exit 1\n+        fi\n+    fi\n+done\n+\n+mkdir -p \"$VAR_BASE\"\n+\n+# Record the _effective_ values of precious directories such that guix-clean can\n+# avoid clobbering them if appropriate.\n+#\n+# shellcheck disable=SC2046,SC2086\n+{\n+    # Get depends precious dir definitions from depends\n+    make -C \"${PWD}/depends\" \\\n+         --no-print-directory \\\n+         -- $(printf \"print-%s\\n\" $depends_precious_dir_names)\n+\n+    # Get remaining precious dir definitions from the environment\n+    for precious_dir_name in $precious_dir_names; do\n+        precious_dir_path=\"${!precious_dir_name}\"\n+        if ! contains \"$depends_precious_dir_names\" \"$precious_dir_name\"; then\n+            echo \"${precious_dir_name}=${precious_dir_path}\"\n+        fi\n+    done\n+} > \"${VAR_BASE}/precious_dirs\"\n+\n+# Make sure an output directory exists for our builds\n+OUTDIR_BASE=\"${OUTDIR_BASE:-${VERSION_BASE}/output}\"\n+mkdir -p \"$OUTDIR_BASE\"\n+\n+# Download the depends sources now as we won't have internet access in the build\n+# container\n+for host in $HOSTS; do\n+    make -C \"${PWD}/depends\" -j\"$JOBS\" download-\"$(host_to_commonname \"$host\")\" ${V:+V=1} ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"}\n+done\n+\n+# Usage: outdir_for_host HOST SUFFIX\n+#\n+#   HOST: The current platform triple we're building for\n+#\n+outdir_for_host() {\n+    echo \"${OUTDIR_BASE}/${1}${2:+-${2}}\"\n+}\n+\n+# Usage: profiledir_for_host HOST SUFFIX\n+#\n+#   HOST: The current platform triple we're building for\n+#\n+profiledir_for_host() {\n+    echo \"${PROFILES_BASE}/${1}${2:+-${2}}\"\n+}\n+\n+\n+#########\n+# BUILD #\n+#########\n+\n+# Function to be called when building for host ${1} and the user interrupts the\n+# build\n+int_trap() {\n+cat << EOF\n+** INT received while building ${1}, you may want to clean up the relevant\n+   work directories (e.g. distsrc-*) before rebuilding\n+\n+Hint: To blow everything away, you may want to use:\n+\n+  $ ./contrib/guix/guix-clean\n+\n+Specifically, this will remove all files without an entry in the index,\n+excluding the SDK directory, the depends download cache, the depends built\n+packages cache, the garbage collector roots for Guix environments, and the\n+output directory.\n+EOF\n+}\n+\n+# Deterministically build Bitcoin Core\n+# shellcheck disable=SC2153\n+for host in $HOSTS; do\n+\n+    # Display proper warning when the user interrupts the build\n+    trap 'int_trap ${host}' INT\n+\n+    (\n+        # Required for 'contrib/guix/manifest.scm' to output the right manifest\n+        # for the particular $HOST we're building for\n+        export HOST=\"$host\"\n+\n+        # shellcheck disable=SC2030\n+cat << EOF\n+INFO: Building ${VERSION:?not set} for platform triple ${HOST:?not set}:\n+      ...using reference timestamp: ${SOURCE_DATE_EPOCH:?not set}\n+      ...running at most ${JOBS:?not set} jobs\n+      ...from worktree directory: '${PWD}'\n+          ...bind-mounted in container to: '/bitcoin'\n+      ...in build directory: '$(distsrc_for_host \"$HOST\")'\n+          ...bind-mounted in container to: '$(DISTSRC_BASE=/distsrc-base && distsrc_for_host \"$HOST\")'\n+      ...outputting in: '$(outdir_for_host \"$HOST\")'\n+          ...bind-mounted in container to: '$(OUTDIR_BASE=/outdir-base && outdir_for_host \"$HOST\")'\n+EOF\n+\n+        # Run the build script 'contrib/guix/libexec/build.sh' in the build\n+        # container specified by 'contrib/guix/manifest.scm'.\n+        #\n+        # Explanation of `guix environment` flags:\n+        #\n+        #   --container        run command within an isolated container\n+        #\n+        #     Running in an isolated container minimizes build-time differences\n+        #     between machines and improves reproducibility\n+        #\n+        #   --pure             unset existing environment variables\n+        #\n+        #     Same rationale as --container\n+        #\n+        #   --no-cwd           do not share current working directory with an\n+        #                      isolated container\n+        #\n+        #     When --container is specified, the default behavior is to share\n+        #     the current working directory with the isolated container at the\n+        #     same exact path (e.g. mapping '/home/satoshi/bitcoin/' to\n+        #     '/home/satoshi/bitcoin/'). This means that the $PWD inside the\n+        #     container becomes a source of irreproducibility. --no-cwd disables\n+        #     this behaviour.\n+        #\n+        #   --share=SPEC       for containers, share writable host file system\n+        #                      according to SPEC\n+        #\n+        #   --share=\"$PWD\"=/bitcoin\n+        #\n+        #                     maps our current working directory to /bitcoin\n+        #                     inside the isolated container, which we later cd\n+        #                     into.\n+        #\n+        #     While we don't want to map our current working directory to the\n+        #     same exact path (as this introduces irreproducibility), we do want\n+        #     it to be at a _fixed_ path _somewhere_ inside the isolated\n+        #     container so that we have something to build. '/bitcoin' was\n+        #     chosen arbitrarily.\n+        #\n+        #   ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"}\n+        #\n+        #                     make the downloaded depends sources path available\n+        #                     inside the isolated container\n+        #\n+        #     The isolated container has no network access as it's in a\n+        #     different network namespace from the main machine, so we have to\n+        #     make the downloaded depends sources available to it. The sources\n+        #     should have been downloaded prior to this invocation.\n+        #\n+        #   --keep-failed     keep build tree of failed builds\n+        #\n+        #     When builds of the Guix environment itself (not Bitcoin Core)\n+        #     fail, it is useful for the build tree to be kept for debugging\n+        #     purposes.\n+        #\n+        #  ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"}\n+        #\n+        #                     fetch substitute from SUBSTITUTE_URLS if they are\n+        #                     authorized\n+        #\n+        #    Depending on the user's security model, it may be desirable to use\n+        #    substitutes (pre-built packages) from servers that the user trusts.\n+        #    Please read the README.md in the same directory as this file for\n+        #    more information.\n+        #\n+        # shellcheck disable=SC2086,SC2031\n+        time-machine environment --manifest=\"${PWD}/contrib/guix/manifest.scm\" \\\n+                                 --container \\\n+                                 --pure \\\n+                                 --no-cwd \\\n+                                 --share=\"$PWD\"=/bitcoin \\\n+                                 --share=\"$DISTSRC_BASE\"=/distsrc-base \\\n+                                 --share=\"$OUTDIR_BASE\"=/outdir-base \\\n+                                 --expose=\"$(git rev-parse --git-common-dir)\" \\\n+                                 ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"} \\\n+                                 ${BASE_CACHE:+--share=\"$BASE_CACHE\"} \\\n+                                 ${SDK_PATH:+--share=\"$SDK_PATH\"} \\\n+                                 --cores=\"$JOBS\" \\\n+                                 --keep-failed \\\n+                                 --fallback \\\n+                                 --link-profile \\\n+                                 --root=\"$(profiledir_for_host \"${HOST}\")\" \\\n+                                 ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"} \\\n+                                 ${ADDITIONAL_GUIX_COMMON_FLAGS} ${ADDITIONAL_GUIX_ENVIRONMENT_FLAGS} \\\n+                                 -- env HOST=\"$host\" \\\n+                                        DISTNAME=\"$DISTNAME\" \\\n+                                        JOBS=\"$JOBS\" \\\n+                                        SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:?unable to determine value}\" \\\n+                                        ${V:+V=1} \\\n+                                        ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n+                                        ${BASE_CACHE:+BASE_CACHE=\"$BASE_CACHE\"} \\\n+                                        ${SDK_PATH:+SDK_PATH=\"$SDK_PATH\"} \\\n+                                        DISTSRC=\"$(DISTSRC_BASE=/distsrc-base && distsrc_for_host \"$HOST\")\" \\\n+                                        OUTDIR=\"$(OUTDIR_BASE=/outdir-base && outdir_for_host \"$HOST\")\" \\\n+                                        DIST_ARCHIVE_BASE=/outdir-base/dist-archive \\\n+                                      bash -c \"cd /bitcoin && bash contrib/guix/libexec/build.sh\"\n+    )\n+\n+done"
      },
      {
        "sha": "11d2c8b86727eb2a757bc94e532a0d4cc83c45c6",
        "filename": "contrib/guix/guix-build.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 119,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/guix/guix-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/guix/guix-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-build.sh?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,119 +0,0 @@\n-#!/usr/bin/env bash\n-export LC_ALL=C\n-set -e -o pipefail\n-\n-# Determine the maximum number of jobs to run simultaneously (overridable by\n-# environment)\n-MAX_JOBS=\"${MAX_JOBS:-$(nproc)}\"\n-\n-# Download the depends sources now as we won't have internet access in the build\n-# container\n-make -C \"${PWD}/depends\" -j\"$MAX_JOBS\" download ${V:+V=1} ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"}\n-\n-# Determine the reference time used for determinism (overridable by environment)\n-SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:-$(git log --format=%at -1)}\"\n-\n-# Execute \"$@\" in a pinned, possibly older version of Guix, for reproducibility\n-# across time.\n-time-machine() {\n-    guix time-machine --url=https://github.com/dongcarl/guix.git \\\n-                      --commit=b066c25026f21fb57677aa34692a5034338e7ee3 \\\n-                      -- \"$@\"\n-}\n-\n-# Function to be called when building for host ${1} and the user interrupts the\n-# build\n-int_trap() {\n-cat << EOF\n-** INT received while building ${1}, you may want to clean up the relevant\n-   output, deploy, and distsrc-* directories before rebuilding\n-\n-Hint: To blow everything away, you may want to use:\n-\n-  $ git clean -xdff --exclude='/depends/SDKs/*'\n-\n-Specifically, this will remove all files without an entry in the index,\n-excluding the SDK directory. Practically speaking, this means that all ignored\n-and untracked files and directories will be wiped, allowing you to start anew.\n-EOF\n-}\n-\n-# Deterministically build Bitcoin Core for HOSTs (overridable by environment)\n-# shellcheck disable=SC2153\n-for host in ${HOSTS=x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu x86_64-w64-mingw32}; do\n-\n-    # Display proper warning when the user interrupts the build\n-    trap 'int_trap ${host}' INT\n-\n-    (\n-        # Required for 'contrib/guix/manifest.scm' to output the right manifest\n-        # for the particular $HOST we're building for\n-        export HOST=\"$host\"\n-\n-        # Run the build script 'contrib/guix/libexec/build.sh' in the build\n-        # container specified by 'contrib/guix/manifest.scm'.\n-        #\n-        # Explanation of `guix environment` flags:\n-        #\n-        #   --container        run command within an isolated container\n-        #\n-        #     Running in an isolated container minimizes build-time differences\n-        #     between machines and improves reproducibility\n-        #\n-        #   --pure             unset existing environment variables\n-        #\n-        #     Same rationale as --container\n-        #\n-        #   --no-cwd           do not share current working directory with an\n-        #                      isolated container\n-        #\n-        #     When --container is specified, the default behavior is to share\n-        #     the current working directory with the isolated container at the\n-        #     same exact path (e.g. mapping '/home/satoshi/bitcoin/' to\n-        #     '/home/satoshi/bitcoin/'). This means that the $PWD inside the\n-        #     container becomes a source of irreproducibility. --no-cwd disables\n-        #     this behaviour.\n-        #\n-        #   --share=SPEC       for containers, share writable host file system\n-        #                      according to SPEC\n-        #\n-        #   --share=\"$PWD\"=/bitcoin\n-        #\n-        #                     maps our current working directory to /bitcoin\n-        #                     inside the isolated container, which we later cd\n-        #                     into.\n-        #\n-        #     While we don't want to map our current working directory to the\n-        #     same exact path (as this introduces irreproducibility), we do want\n-        #     it to be at a _fixed_ path _somewhere_ inside the isolated\n-        #     container so that we have something to build. '/bitcoin' was\n-        #     chosen arbitrarily.\n-        #\n-        #   ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"}\n-        #\n-        #                     make the downloaded depends sources path available\n-        #                     inside the isolated container\n-        #\n-        #     The isolated container has no network access as it's in a\n-        #     different network namespace from the main machine, so we have to\n-        #     make the downloaded depends sources available to it. The sources\n-        #     should have been downloaded prior to this invocation.\n-        #\n-        # shellcheck disable=SC2086\n-        time-machine environment --manifest=\"${PWD}/contrib/guix/manifest.scm\" \\\n-                                 --container \\\n-                                 --pure \\\n-                                 --no-cwd \\\n-                                 --share=\"$PWD\"=/bitcoin \\\n-                                 --expose=\"$(git rev-parse --git-common-dir)\" \\\n-                                 ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"} \\\n-                                 ${ADDITIONAL_GUIX_ENVIRONMENT_FLAGS} \\\n-                                 -- env HOST=\"$host\" \\\n-                                        MAX_JOBS=\"$MAX_JOBS\" \\\n-                                        SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:?unable to determine value}\" \\\n-                                        ${V:+V=1} \\\n-                                        ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n-                                      bash -c \"cd /bitcoin && bash contrib/guix/libexec/build.sh\"\n-    )\n-\n-done"
      },
      {
        "sha": "9fa17191e80888902f52b30dcca16fd37adbf0cd",
        "filename": "contrib/guix/guix-clean",
        "status": "added",
        "additions": 83,
        "deletions": 0,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/guix-clean",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/guix-clean",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-clean?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,83 @@\n+#!/usr/bin/env bash\n+export LC_ALL=C\n+set -e -o pipefail\n+\n+# Source the common prelude, which:\n+#   1. Checks if we're at the top directory of the Bitcoin Core repository\n+#   2. Defines a few common functions and variables\n+#\n+# shellcheck source=libexec/prelude.bash\n+source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n+\n+\n+###################\n+## Sanity Checks ##\n+###################\n+\n+################\n+# Required non-builtin commands should be invokable\n+################\n+\n+check_tools cat mkdir make git guix\n+\n+\n+#############\n+##  Clean  ##\n+#############\n+\n+# Usage: under_dir MAYBE_PARENT MAYBE_CHILD\n+#\n+# If MAYBE_CHILD is a subdirectory of MAYBE_PARENT, print the relative path\n+# from MAYBE_PARENT to MAYBE_CHILD. Otherwise, return 1 as the error code.\n+#\n+# NOTE: This does not perform any symlink-resolving or path canonicalization.\n+#\n+under_dir() {\n+    local path_residue\n+    path_residue=\"${2##${1}}\"\n+    if [ -z \"$path_residue\" ] || [ \"$path_residue\" = \"$2\" ]; then\n+        return 1\n+    else\n+        echo \"$path_residue\"\n+    fi\n+}\n+\n+# Usage: dir_under_git_root MAYBE_CHILD\n+#\n+# If MAYBE_CHILD is under the current git repository and exists, print the\n+# relative path from the git repository's top-level directory to MAYBE_CHILD,\n+# otherwise, exit with an error code.\n+#\n+dir_under_git_root() {\n+    local rv\n+    rv=\"$(under_dir \"$(git_root)\" \"$1\")\"\n+    [ -n \"$rv\" ] && echo \"$rv\"\n+}\n+\n+shopt -s nullglob\n+found_precious_dirs_files=( \"${version_base_prefix}\"*/\"${var_base_basename}/precious_dirs\" ) # This expands to an array of directories...\n+shopt -u nullglob\n+\n+exclude_flags=()\n+\n+for precious_dirs_file in \"${found_precious_dirs_files[@]}\"; do\n+    # Make sure the precious directories (e.g. SOURCES_PATH, BASE_CACHE, SDK_PATH)\n+    # are excluded from git-clean\n+    echo \"Found precious_dirs file: '${precious_dirs_file}'\"\n+\n+    # Exclude the precious_dirs file itself\n+    if dirs_file_exclude_fragment=$(dir_under_git_root \"$(dirname \"$precious_dirs_file\")\"); then\n+        exclude_flags+=( --exclude=\"${dirs_file_exclude_fragment}/precious_dirs\" )\n+    fi\n+\n+    # Read each 'name=dir' pair from the precious_dirs file\n+    while IFS='=' read -r name dir; do\n+        # Add an exclusion flag if the precious directory is under the git root.\n+        if under=$(dir_under_git_root \"$dir\"); then\n+            echo \"Avoiding ${name}: ${under}\"\n+            exclude_flags+=( --exclude=\"$under\" )\n+        fi\n+    done < \"$precious_dirs_file\"\n+done\n+\n+git clean -xdff \"${exclude_flags[@]}\""
      },
      {
        "sha": "11610a92e1181d3fe8df1c4d1bb0f7072f66368a",
        "filename": "contrib/guix/guix-codesign",
        "status": "added",
        "additions": 392,
        "deletions": 0,
        "changes": 392,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/guix-codesign",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/guix-codesign",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-codesign?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,392 @@\n+#!/usr/bin/env bash\n+export LC_ALL=C\n+set -e -o pipefail\n+\n+# Source the common prelude, which:\n+#   1. Checks if we're at the top directory of the Bitcoin Core repository\n+#   2. Defines a few common functions and variables\n+#\n+# shellcheck source=libexec/prelude.bash\n+source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n+\n+\n+###################\n+## SANITY CHECKS ##\n+###################\n+\n+################\n+# Required non-builtin commands should be invocable\n+################\n+\n+check_tools cat mkdir git guix\n+\n+################\n+# Required env vars should be non-empty\n+################\n+\n+cmd_usage() {\n+    cat <<EOF\n+Synopsis:\n+\n+    env DETACHED_SIGS_REPO=<path/to/bitcoin-detached-sigs> \\\\\n+      ./contrib/guix/guix-codesign\n+\n+EOF\n+}\n+\n+if [ -z \"$DETACHED_SIGS_REPO\" ]; then\n+    cmd_usage\n+    exit 1\n+fi\n+\n+################\n+# GUIX_BUILD_OPTIONS should be empty\n+################\n+#\n+# GUIX_BUILD_OPTIONS is an environment variable recognized by guix commands that\n+# can perform builds. This seems like what we want instead of\n+# ADDITIONAL_GUIX_COMMON_FLAGS, but the value of GUIX_BUILD_OPTIONS is actually\n+# _appended_ to normal command-line options. Meaning that they will take\n+# precedence over the command-specific ADDITIONAL_GUIX_<CMD>_FLAGS.\n+#\n+# This seems like a poor user experience. Thus we check for GUIX_BUILD_OPTIONS's\n+# existence here and direct users of this script to use our (more flexible)\n+# custom environment variables.\n+if [ -n \"$GUIX_BUILD_OPTIONS\" ]; then\n+cat << EOF\n+Error: Environment variable GUIX_BUILD_OPTIONS is not empty:\n+  '$GUIX_BUILD_OPTIONS'\n+\n+Unfortunately this script is incompatible with GUIX_BUILD_OPTIONS, please unset\n+GUIX_BUILD_OPTIONS and use ADDITIONAL_GUIX_COMMON_FLAGS to set build options\n+across guix commands or ADDITIONAL_GUIX_<CMD>_FLAGS to set build options for a\n+specific guix command.\n+\n+See contrib/guix/README.md for more details.\n+EOF\n+exit 1\n+fi\n+\n+################\n+# The codesignature git worktree should not be dirty\n+################\n+\n+if ! git -C \"$DETACHED_SIGS_REPO\" diff-index --quiet HEAD -- && [ -z \"$FORCE_DIRTY_WORKTREE\" ]; then\n+    cat << EOF\n+ERR: The DETACHED CODESIGNATURE git worktree is dirty, which may lead to broken builds.\n+\n+     Aborting...\n+\n+Hint: To make your git worktree clean, You may want to:\n+      1. Commit your changes,\n+      2. Stash your changes, or\n+      3. Set the 'FORCE_DIRTY_WORKTREE' environment variable if you insist on\n+         using a dirty worktree\n+EOF\n+    exit 1\n+fi\n+\n+################\n+# Build directories should not exist\n+################\n+\n+# Default to building for all supported HOSTs (overridable by environment)\n+export HOSTS=\"${HOSTS:-x86_64-w64-mingw32 x86_64-apple-darwin18}\"\n+\n+# Usage: distsrc_for_host HOST\n+#\n+#   HOST: The current platform triple we're building for\n+#\n+distsrc_for_host() {\n+    echo \"${DISTSRC_BASE}/distsrc-${VERSION}-${1}-codesigned\"\n+}\n+\n+# Accumulate a list of build directories that already exist...\n+hosts_distsrc_exists=\"\"\n+for host in $HOSTS; do\n+    if [ -e \"$(distsrc_for_host \"$host\")\" ]; then\n+        hosts_distsrc_exists+=\" ${host}\"\n+    fi\n+done\n+\n+if [ -n \"$hosts_distsrc_exists\" ]; then\n+# ...so that we can print them out nicely in an error message\n+cat << EOF\n+ERR: Build directories for this commit already exist for the following platform\n+     triples you're attempting to build, probably because of previous builds.\n+     Please remove, or otherwise deal with them prior to starting another build.\n+\n+     Aborting...\n+\n+Hint: To blow everything away, you may want to use:\n+\n+  $ ./contrib/guix/guix-clean\n+\n+Specifically, this will remove all files without an entry in the index,\n+excluding the SDK directory, the depends download cache, the depends built\n+packages cache, the garbage collector roots for Guix environments, and the\n+output directory.\n+EOF\n+for host in $hosts_distsrc_exists; do\n+    echo \"     ${host} '$(distsrc_for_host \"$host\")'\"\n+done\n+exit 1\n+else\n+    mkdir -p \"$DISTSRC_BASE\"\n+fi\n+\n+\n+################\n+# Unsigned tarballs SHOULD exist\n+################\n+\n+# Usage: outdir_for_host HOST SUFFIX\n+#\n+#   HOST: The current platform triple we're building for\n+#\n+outdir_for_host() {\n+    echo \"${OUTDIR_BASE}/${1}${2:+-${2}}\"\n+}\n+\n+\n+unsigned_tarball_for_host() {\n+    case \"$1\" in\n+        *mingw*)\n+            echo \"$(outdir_for_host \"$1\")/${DISTNAME}-win-unsigned.tar.gz\"\n+            ;;\n+        *darwin*)\n+            echo \"$(outdir_for_host \"$1\")/${DISTNAME}-osx-unsigned.tar.gz\"\n+            ;;\n+        *)\n+            exit 1\n+            ;;\n+    esac\n+}\n+\n+# Accumulate a list of build directories that already exist...\n+hosts_unsigned_tarball_missing=\"\"\n+for host in $HOSTS; do\n+    if [ ! -e \"$(unsigned_tarball_for_host \"$host\")\" ]; then\n+        hosts_unsigned_tarball_missing+=\" ${host}\"\n+    fi\n+done\n+\n+if [ -n \"$hosts_unsigned_tarball_missing\" ]; then\n+    # ...so that we can print them out nicely in an error message\n+    cat << EOF\n+ERR: Unsigned tarballs do not exist\n+...\n+\n+EOF\n+for host in $hosts_unsigned_tarball_missing; do\n+    echo \"     ${host} '$(unsigned_tarball_for_host \"$host\")'\"\n+done\n+exit 1\n+fi\n+\n+################\n+# Check that we can connect to the guix-daemon\n+################\n+\n+cat << EOF\n+Checking that we can connect to the guix-daemon...\n+\n+Hint: If this hangs, you may want to try turning your guix-daemon off and on\n+      again.\n+\n+EOF\n+if ! guix gc --list-failures > /dev/null; then\n+    cat << EOF\n+\n+ERR: Failed to connect to the guix-daemon, please ensure that one is running and\n+     reachable.\n+EOF\n+    exit 1\n+fi\n+\n+# Developer note: we could use `guix repl` for this check and run:\n+#\n+#     (import (guix store)) (close-connection (open-connection))\n+#\n+# However, the internal API is likely to change more than the CLI invocation\n+\n+\n+#########\n+# SETUP #\n+#########\n+\n+# Determine the maximum number of jobs to run simultaneously (overridable by\n+# environment)\n+JOBS=\"${JOBS:-$(nproc)}\"\n+\n+# Determine the reference time used for determinism (overridable by environment)\n+SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:-$(git log --format=%at -1)}\"\n+\n+# Execute \"$@\" in a pinned, possibly older version of Guix, for reproducibility\n+# across time.\n+time-machine() {\n+    # shellcheck disable=SC2086\n+    guix time-machine --url=https://git.savannah.gnu.org/git/guix.git \\\n+                      --commit=aa34d4d28dfe25ba47d5800d05000fb7221788c0 \\\n+                      --cores=\"$JOBS\" \\\n+                      --keep-failed \\\n+                      --fallback \\\n+                      ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"} \\\n+                      ${ADDITIONAL_GUIX_COMMON_FLAGS} ${ADDITIONAL_GUIX_TIMEMACHINE_FLAGS} \\\n+                      -- \"$@\"\n+}\n+\n+# Make sure an output directory exists for our builds\n+OUTDIR_BASE=\"${OUTDIR_BASE:-${VERSION_BASE}/output}\"\n+mkdir -p \"$OUTDIR_BASE\"\n+\n+# Usage: profiledir_for_host HOST SUFFIX\n+#\n+#   HOST: The current platform triple we're building for\n+#\n+profiledir_for_host() {\n+    echo \"${PROFILES_BASE}/${1}${2:+-${2}}\"\n+}\n+\n+#########\n+# BUILD #\n+#########\n+\n+# Function to be called when codesigning for host ${1} and the user interrupts\n+# the codesign\n+int_trap() {\n+cat << EOF\n+** INT received while codesigning ${1}, you may want to clean up the relevant\n+   work directories (e.g. distsrc-*) before recodesigning\n+\n+Hint: To blow everything away, you may want to use:\n+\n+  $ ./contrib/guix/guix-clean\n+\n+Specifically, this will remove all files without an entry in the index,\n+excluding the SDK directory, the depends download cache, the depends built\n+packages cache, the garbage collector roots for Guix environments, and the\n+output directory.\n+EOF\n+}\n+\n+# Deterministically build Bitcoin Core\n+# shellcheck disable=SC2153\n+for host in $HOSTS; do\n+\n+    # Display proper warning when the user interrupts the build\n+    trap 'int_trap ${host}' INT\n+\n+    (\n+        # Required for 'contrib/guix/manifest.scm' to output the right manifest\n+        # for the particular $HOST we're building for\n+        export HOST=\"$host\"\n+\n+        # shellcheck disable=SC2030\n+cat << EOF\n+INFO: Codesigning ${VERSION:?not set} for platform triple ${HOST:?not set}:\n+      ...using reference timestamp: ${SOURCE_DATE_EPOCH:?not set}\n+      ...from worktree directory: '${PWD}'\n+          ...bind-mounted in container to: '/bitcoin'\n+      ...in build directory: '$(distsrc_for_host \"$HOST\")'\n+          ...bind-mounted in container to: '$(DISTSRC_BASE=/distsrc-base && distsrc_for_host \"$HOST\")'\n+      ...outputting in: '$(outdir_for_host \"$HOST\" codesigned)'\n+          ...bind-mounted in container to: '$(OUTDIR_BASE=/outdir-base && outdir_for_host \"$HOST\" codesigned)'\n+      ...using detached signatures in: '${DETACHED_SIGS_REPO:?not set}'\n+          ...bind-mounted in container to: '/detached-sigs'\n+EOF\n+\n+\n+        # Run the build script 'contrib/guix/libexec/build.sh' in the build\n+        # container specified by 'contrib/guix/manifest.scm'.\n+        #\n+        # Explanation of `guix environment` flags:\n+        #\n+        #   --container        run command within an isolated container\n+        #\n+        #     Running in an isolated container minimizes build-time differences\n+        #     between machines and improves reproducibility\n+        #\n+        #   --pure             unset existing environment variables\n+        #\n+        #     Same rationale as --container\n+        #\n+        #   --no-cwd           do not share current working directory with an\n+        #                      isolated container\n+        #\n+        #     When --container is specified, the default behavior is to share\n+        #     the current working directory with the isolated container at the\n+        #     same exact path (e.g. mapping '/home/satoshi/bitcoin/' to\n+        #     '/home/satoshi/bitcoin/'). This means that the $PWD inside the\n+        #     container becomes a source of irreproducibility. --no-cwd disables\n+        #     this behaviour.\n+        #\n+        #   --share=SPEC       for containers, share writable host file system\n+        #                      according to SPEC\n+        #\n+        #   --share=\"$PWD\"=/bitcoin\n+        #\n+        #                     maps our current working directory to /bitcoin\n+        #                     inside the isolated container, which we later cd\n+        #                     into.\n+        #\n+        #     While we don't want to map our current working directory to the\n+        #     same exact path (as this introduces irreproducibility), we do want\n+        #     it to be at a _fixed_ path _somewhere_ inside the isolated\n+        #     container so that we have something to build. '/bitcoin' was\n+        #     chosen arbitrarily.\n+        #\n+        #   ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"}\n+        #\n+        #                     make the downloaded depends sources path available\n+        #                     inside the isolated container\n+        #\n+        #     The isolated container has no network access as it's in a\n+        #     different network namespace from the main machine, so we have to\n+        #     make the downloaded depends sources available to it. The sources\n+        #     should have been downloaded prior to this invocation.\n+        #\n+        #  ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"}\n+        #\n+        #                     fetch substitute from SUBSTITUTE_URLS if they are\n+        #                     authorized\n+        #\n+        #    Depending on the user's security model, it may be desirable to use\n+        #    substitutes (pre-built packages) from servers that the user trusts.\n+        #    Please read the README.md in the same directory as this file for\n+        #    more information.\n+        #\n+        # shellcheck disable=SC2086,SC2031\n+        time-machine environment --manifest=\"${PWD}/contrib/guix/manifest.scm\" \\\n+                                 --container \\\n+                                 --pure \\\n+                                 --no-cwd \\\n+                                 --share=\"$PWD\"=/bitcoin \\\n+                                 --share=\"$DISTSRC_BASE\"=/distsrc-base \\\n+                                 --share=\"$OUTDIR_BASE\"=/outdir-base \\\n+                                 --share=\"$DETACHED_SIGS_REPO\"=/detached-sigs \\\n+                                 --expose=\"$(git rev-parse --git-common-dir)\" \\\n+                                 --expose=\"$(git -C \"$DETACHED_SIGS_REPO\" rev-parse --git-common-dir)\" \\\n+                                 ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"} \\\n+                                 --cores=\"$JOBS\" \\\n+                                 --keep-failed \\\n+                                 --fallback \\\n+                                 --link-profile \\\n+                                 --root=\"$(profiledir_for_host \"${HOST}\" codesigned)\" \\\n+                                 ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"} \\\n+                                 ${ADDITIONAL_GUIX_COMMON_FLAGS} ${ADDITIONAL_GUIX_ENVIRONMENT_FLAGS} \\\n+                                 -- env HOST=\"$host\" \\\n+                                        DISTNAME=\"$DISTNAME\" \\\n+                                        JOBS=\"$JOBS\" \\\n+                                        SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:?unable to determine value}\" \\\n+                                        ${V:+V=1} \\\n+                                        ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n+                                        DISTSRC=\"$(DISTSRC_BASE=/distsrc-base && distsrc_for_host \"$HOST\")\" \\\n+                                        OUTDIR=\"$(OUTDIR_BASE=/outdir-base && outdir_for_host \"$HOST\" codesigned)\" \\\n+                                        DIST_ARCHIVE_BASE=/outdir-base/dist-archive \\\n+                                        DETACHED_SIGS_REPO=/detached-sigs \\\n+                                        UNSIGNED_TARBALL=\"$(OUTDIR_BASE=/outdir-base && unsigned_tarball_for_host \"$HOST\")\" \\\n+                                      bash -c \"cd /bitcoin && bash contrib/guix/libexec/codesign.sh\"\n+    )\n+\n+done"
      },
      {
        "sha": "a6e2c4065ecc4c6d154dc768b3af403169898061",
        "filename": "contrib/guix/guix-verify",
        "status": "added",
        "additions": 142,
        "deletions": 0,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/guix-verify",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/guix-verify",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-verify?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,142 @@\n+#!/usr/bin/env bash\n+export LC_ALL=C\n+set -e -o pipefail\n+\n+# Source the common prelude, which:\n+#   1. Checks if we're at the top directory of the Bitcoin Core repository\n+#   2. Defines a few common functions and variables\n+#\n+# shellcheck source=libexec/prelude.bash\n+source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n+\n+\n+###################\n+## Sanity Checks ##\n+###################\n+\n+################\n+# Required non-builtin commands should be invokable\n+################\n+\n+check_tools cat diff gpg\n+\n+################\n+# Required env vars should be non-empty\n+################\n+\n+cmd_usage() {\n+cat <<EOF\n+Synopsis:\n+\n+    env GUIX_SIGS_REPO=<path/to/guix.sigs> ./contrib/guix/guix-verify\n+\n+EOF\n+}\n+\n+if [ -z \"$GUIX_SIGS_REPO\" ]; then\n+    cmd_usage\n+    exit 1\n+fi\n+\n+################\n+# GUIX_SIGS_REPO should exist as a directory\n+################\n+\n+if [ ! -d \"$GUIX_SIGS_REPO\" ]; then\n+cat << EOF\n+ERR: The specified GUIX_SIGS_REPO is not an existent directory:\n+\n+    '$GUIX_SIGS_REPO'\n+\n+Hint: Please clone the guix.sigs repository and point to it with the\n+      GUIX_SIGS_REPO environment variable.\n+\n+EOF\n+cmd_usage\n+exit 1\n+fi\n+\n+##############\n+##  Verify  ##\n+##############\n+\n+OUTSIGDIR_BASE=\"${GUIX_SIGS_REPO}/${VERSION}\"\n+echo \"Looking for signature directories in '${OUTSIGDIR_BASE}'\"\n+echo \"\"\n+\n+# Usage: verify compare_manifest current_manifest\n+verify() {\n+    local compare_manifest=\"$1\"\n+    local current_manifest=\"$2\"\n+    if ! gpg --quiet --batch --verify \"$current_manifest\".asc \"$current_manifest\" 1>&2; then\n+        echo \"ERR: Failed to verify GPG signature in '${current_manifest}'\"\n+        echo \"\"\n+        echo \"Hint: Either the signature is invalid or the public key is missing\"\n+        echo \"\"\n+    elif ! diff --report-identical \"$compare_manifest\" \"$current_manifest\" 1>&2; then\n+        echo \"ERR: The SHA256SUMS attestation in these two directories differ:\"\n+        echo \"    '${compare_manifest}'\"\n+        echo \"    '${current_manifest}'\"\n+        echo \"\"\n+    else\n+        echo \"Verified: '${current_manifest}'\"\n+        echo \"\"\n+    fi\n+}\n+\n+shopt -s nullglob\n+all_noncodesigned=( \"$OUTSIGDIR_BASE\"/*/noncodesigned.SHA256SUMS )\n+shopt -u nullglob\n+\n+echo \"--------------------\"\n+echo \"\"\n+if (( ${#all_noncodesigned[@]} )); then\n+    compare_noncodesigned=\"${all_noncodesigned[0]}\"\n+\n+    for current_manifest in \"${all_noncodesigned[@]}\"; do\n+        verify \"$compare_noncodesigned\" \"$current_manifest\"\n+    done\n+\n+    echo \"DONE: Checking output signatures for noncodesigned.SHA256SUMS\"\n+    echo \"\"\n+else\n+    echo \"WARN: No signature directories with noncodesigned.SHA256SUMS found\"\n+    echo \"\"\n+fi\n+\n+shopt -s nullglob\n+all_all=( \"$OUTSIGDIR_BASE\"/*/all.SHA256SUMS )\n+shopt -u nullglob\n+\n+echo \"--------------------\"\n+echo \"\"\n+if (( ${#all_all[@]} )); then\n+    compare_all=\"${all_all[0]}\"\n+\n+    for current_manifest in \"${all_all[@]}\"; do\n+        verify \"$compare_all\" \"$current_manifest\"\n+    done\n+\n+    # Sanity check: there should be no entries that exist in\n+    # noncodesigned.SHA256SUMS that doesn't exist in all.SHA256SUMS\n+    if [[ \"$(comm -23 <(sort \"$compare_noncodesigned\") <(sort \"$compare_all\") | wc -c)\" -ne 0 ]]; then\n+        echo \"ERR: There are unique lines in noncodesigned.SHA256SUMS which\"\n+        echo \"     do not exist in all.SHA256SUMS, something went very wrong.\"\n+        exit 1\n+    fi\n+\n+    echo \"DONE: Checking output signatures for all.SHA256SUMS\"\n+    echo \"\"\n+else\n+    echo \"WARN: No signature directories with all.SHA256SUMS found\"\n+    echo \"\"\n+fi\n+\n+echo \"====================\"\n+echo \"\"\n+if (( ${#all_noncodesigned[@]} + ${#all_all[@]} == 0 )); then\n+    echo \"ERR: Unable to perform any verifications as no signature directories\"\n+    echo \"     were found\"\n+    echo \"\"\n+    exit 1\n+fi"
      },
      {
        "sha": "356bd700701ed4f22d69cf66fb2749cad9645eb0",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 223,
        "deletions": 82,
        "changes": 305,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -3,6 +3,16 @@ export LC_ALL=C\n set -e -o pipefail\n export TZ=UTC\n \n+# Although Guix _does_ set umask when building its own packages (in our case,\n+# this is all packages in manifest.scm), it does not set it for `guix\n+# environment`. It does make sense for at least `guix environment --container`\n+# to set umask, so if that change gets merged upstream and we bump the\n+# time-machine to a commit which includes the aforementioned change, we can\n+# remove this line.\n+#\n+# This line should be placed before any commands which creates files.\n+umask 0022\n+\n if [ -n \"$V\" ]; then\n     # Print both unexpanded (-v) and expanded (-x) forms of commands as they are\n     # read from this file.\n@@ -11,9 +21,20 @@ if [ -n \"$V\" ]; then\n     export VERBOSE=\"$V\"\n fi\n \n-# Check that environment variables assumed to be set by the environment are set\n-echo \"Building for platform triple ${HOST:?not set} with reference timestamp ${SOURCE_DATE_EPOCH:?not set}...\"\n-echo \"At most ${MAX_JOBS:?not set} jobs will run at once...\"\n+# Check that required environment variables are set\n+cat << EOF\n+Required environment variables as seen inside the container:\n+    DIST_ARCHIVE_BASE: ${DIST_ARCHIVE_BASE:?not set}\n+    DISTNAME: ${DISTNAME:?not set}\n+    HOST: ${HOST:?not set}\n+    SOURCE_DATE_EPOCH: ${SOURCE_DATE_EPOCH:?not set}\n+    JOBS: ${JOBS:?not set}\n+    DISTSRC: ${DISTSRC:?not set}\n+    OUTDIR: ${OUTDIR:?not set}\n+EOF\n+\n+ACTUAL_OUTDIR=\"${OUTDIR}\"\n+OUTDIR=\"${DISTSRC}/output\"\n \n #####################\n # Environment Setup #\n@@ -23,19 +44,6 @@ echo \"At most ${MAX_JOBS:?not set} jobs will run at once...\"\n # $HOSTs after successfully building.\n BASEPREFIX=\"${PWD}/depends\"\n \n-# Setup an output directory for our build\n-OUTDIR=\"${OUTDIR:-${PWD}/output}\"\n-[ -e \"$OUTDIR\" ] || mkdir -p \"$OUTDIR\"\n-\n-# Setup the directory where our Bitcoin Core build for HOST will occur\n-DISTSRC=\"${DISTSRC:-${PWD}/distsrc-${HOST}}\"\n-if [ -e \"$DISTSRC\" ]; then\n-    echo \"DISTSRC directory '${DISTSRC}' exists, probably because of previous builds... Aborting...\"\n-    exit 1\n-else\n-    mkdir -p \"$DISTSRC\"\n-fi\n-\n # Given a package name and an output name, return the path of that output in our\n # current guix environment\n store_path() {\n@@ -45,37 +53,77 @@ store_path() {\n               --expression='s|\"[[:space:]]*$||'\n }\n \n-# Set environment variables to point Guix's cross-toolchain to the right\n+\n+# Set environment variables to point the NATIVE toolchain to the right\n+# includes/libs\n+NATIVE_GCC=\"$(store_path gcc-toolchain)\"\n+NATIVE_GCC_STATIC=\"$(store_path gcc-toolchain static)\"\n+\n+unset LIBRARY_PATH\n+unset CPATH\n+unset C_INCLUDE_PATH\n+unset CPLUS_INCLUDE_PATH\n+unset OBJC_INCLUDE_PATH\n+unset OBJCPLUS_INCLUDE_PATH\n+\n+export LIBRARY_PATH=\"${NATIVE_GCC}/lib:${NATIVE_GCC}/lib64:${NATIVE_GCC_STATIC}/lib:${NATIVE_GCC_STATIC}/lib64\"\n+export C_INCLUDE_PATH=\"${NATIVE_GCC}/include\"\n+export CPLUS_INCLUDE_PATH=\"${NATIVE_GCC}/include/c++:${NATIVE_GCC}/include\"\n+export OBJC_INCLUDE_PATH=\"${NATIVE_GCC}/include\"\n+export OBJCPLUS_INCLUDE_PATH=\"${NATIVE_GCC}/include/c++:${NATIVE_GCC}/include\"\n+\n+prepend_to_search_env_var() {\n+    export \"${1}=${2}${!1:+:}${!1}\"\n+}\n+\n+case \"$HOST\" in\n+    *darwin*)\n+        # When targeting darwin, zlib is required by native_libdmg-hfsplus.\n+        zlib_store_path=$(store_path \"zlib\")\n+        zlib_static_store_path=$(store_path \"zlib\" static)\n+\n+        prepend_to_search_env_var LIBRARY_PATH \"${zlib_static_store_path}/lib:${zlib_store_path}/lib\"\n+        prepend_to_search_env_var C_INCLUDE_PATH \"${zlib_store_path}/include\"\n+        prepend_to_search_env_var CPLUS_INCLUDE_PATH \"${zlib_store_path}/include\"\n+        prepend_to_search_env_var OBJC_INCLUDE_PATH \"${zlib_store_path}/include\"\n+        prepend_to_search_env_var OBJCPLUS_INCLUDE_PATH \"${zlib_store_path}/include\"\n+esac\n+\n+# Set environment variables to point the CROSS toolchain to the right\n # includes/libs for $HOST\n case \"$HOST\" in\n     *mingw*)\n         # Determine output paths to use in CROSS_* environment variables\n         CROSS_GLIBC=\"$(store_path \"mingw-w64-x86_64-winpthreads\")\"\n         CROSS_GCC=\"$(store_path \"gcc-cross-${HOST}\")\"\n-        CROSS_GCC_LIBS=( \"${CROSS_GCC}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n+        CROSS_GCC_LIB_STORE=\"$(store_path \"gcc-cross-${HOST}\" lib)\"\n+        CROSS_GCC_LIBS=( \"${CROSS_GCC_LIB_STORE}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n         CROSS_GCC_LIB=\"${CROSS_GCC_LIBS[0]}\" # ...we just want the first one (there should only be one)\n \n-        NATIVE_GCC=\"$(store_path gcc-glibc-2.27-toolchain)\"\n-        export LIBRARY_PATH=\"${NATIVE_GCC}/lib:${NATIVE_GCC}/lib64\"\n-        export CPATH=\"${NATIVE_GCC}/include\"\n-\n+        # The search path ordering is generally:\n+        #    1. gcc-related search paths\n+        #    2. libc-related search paths\n+        #    2. kernel-header-related search paths (not applicable to mingw-w64 hosts)\n         export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GCC_LIB}/include-fixed:${CROSS_GLIBC}/include\"\n         export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GCC}/include/c++/${HOST}:${CROSS_GCC}/include/c++/backward:${CROSS_C_INCLUDE_PATH}\"\n-        export CROSS_LIBRARY_PATH=\"${CROSS_GCC}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib\"\n+        export CROSS_LIBRARY_PATH=\"${CROSS_GCC_LIB_STORE}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib\"\n+        ;;\n+    *darwin*)\n+        # The CROSS toolchain for darwin uses the SDK and ignores environment variables.\n+        # See depends/hosts/darwin.mk for more details.\n         ;;\n     *linux*)\n         CROSS_GLIBC=\"$(store_path \"glibc-cross-${HOST}\")\"\n         CROSS_GLIBC_STATIC=\"$(store_path \"glibc-cross-${HOST}\" static)\"\n         CROSS_KERNEL=\"$(store_path \"linux-libre-headers-cross-${HOST}\")\"\n         CROSS_GCC=\"$(store_path \"gcc-cross-${HOST}\")\"\n-        CROSS_GCC_LIBS=( \"${CROSS_GCC}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n+        CROSS_GCC_LIB_STORE=\"$(store_path \"gcc-cross-${HOST}\" lib)\"\n+        CROSS_GCC_LIBS=( \"${CROSS_GCC_LIB_STORE}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n         CROSS_GCC_LIB=\"${CROSS_GCC_LIBS[0]}\" # ...we just want the first one (there should only be one)\n \n-        # NOTE: CROSS_C_INCLUDE_PATH is missing ${CROSS_GCC_LIB}/include-fixed, because\n-        # the limits.h in it is missing a '#include_next <limits.h>'\n-        export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n+        export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GCC_LIB}/include-fixed:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n         export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GCC}/include/c++/${HOST}:${CROSS_GCC}/include/c++/backward:${CROSS_C_INCLUDE_PATH}\"\n-        export CROSS_LIBRARY_PATH=\"${CROSS_GCC}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib:${CROSS_GLIBC_STATIC}/lib\"\n+        export CROSS_LIBRARY_PATH=\"${CROSS_GCC_LIB_STORE}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib:${CROSS_GLIBC_STATIC}/lib\"\n         ;;\n     *)\n         exit 1 ;;\n@@ -84,14 +132,25 @@ esac\n # Sanity check CROSS_*_PATH directories\n IFS=':' read -ra PATHS <<< \"${CROSS_C_INCLUDE_PATH}:${CROSS_CPLUS_INCLUDE_PATH}:${CROSS_LIBRARY_PATH}\"\n for p in \"${PATHS[@]}\"; do\n-    if [ ! -d \"$p\" ]; then\n+    if [ -n \"$p\" ] && [ ! -d \"$p\" ]; then\n         echo \"'$p' doesn't exist or isn't a directory... Aborting...\"\n         exit 1\n     fi\n done\n \n # Disable Guix ld auto-rpath behavior\n-export GUIX_LD_WRAPPER_DISABLE_RPATH=yes\n+case \"$HOST\" in\n+    *darwin*)\n+        # The auto-rpath behavior is necessary for darwin builds as some native\n+        # tools built by depends refer to and depend on Guix-built native\n+        # libraries\n+        #\n+        # After the native packages in depends are built, the ld wrapper should\n+        # no longer affect our build, as clang would instead reach for\n+        # x86_64-apple-darwin18-ld from cctools\n+        ;;\n+    *) export GUIX_LD_WRAPPER_DISABLE_RPATH=yes ;;\n+esac\n \n # Make /usr/bin if it doesn't exist\n [ -e /usr/bin ] || mkdir -p /usr/bin\n@@ -105,31 +164,43 @@ case \"$HOST\" in\n     *linux*)\n         glibc_dynamic_linker=$(\n             case \"$HOST\" in\n-                i686-linux-gnu)      echo /lib/ld-linux.so.2 ;;\n-                x86_64-linux-gnu)    echo /lib64/ld-linux-x86-64.so.2 ;;\n-                arm-linux-gnueabihf) echo /lib/ld-linux-armhf.so.3 ;;\n-                aarch64-linux-gnu)   echo /lib/ld-linux-aarch64.so.1 ;;\n-                riscv64-linux-gnu)   echo /lib/ld-linux-riscv64-lp64d.so.1 ;;\n-                *)                   exit 1 ;;\n+                i686-linux-gnu)        echo /lib/ld-linux.so.2 ;;\n+                x86_64-linux-gnu)      echo /lib64/ld-linux-x86-64.so.2 ;;\n+                arm-linux-gnueabihf)   echo /lib/ld-linux-armhf.so.3 ;;\n+                aarch64-linux-gnu)     echo /lib/ld-linux-aarch64.so.1 ;;\n+                riscv64-linux-gnu)     echo /lib/ld-linux-riscv64-lp64d.so.1 ;;\n+                powerpc64-linux-gnu)   echo /lib/ld64.so.1;;\n+                powerpc64le-linux-gnu) echo /lib/ld64.so.2;;\n+                *)                     exit 1 ;;\n             esac\n         )\n         ;;\n esac\n \n # Environment variables for determinism\n-export QT_RCC_TEST=1\n-export QT_RCC_SOURCE_DATE_OVERRIDE=1\n export TAR_OPTIONS=\"--owner=0 --group=0 --numeric-owner --mtime='@${SOURCE_DATE_EPOCH}' --sort=name\"\n export TZ=\"UTC\"\n+case \"$HOST\" in\n+    *darwin*)\n+        # cctools AR, unlike GNU binutils AR, does not have a deterministic mode\n+        # or a configure flag to enable determinism by default, it only\n+        # understands if this env-var is set or not. See:\n+        #\n+        # https://github.com/tpoechtrager/cctools-port/blob/55562e4073dea0fbfd0b20e0bf69ffe6390c7f97/cctools/ar/archive.c#L334\n+        export ZERO_AR_DATE=yes\n+        ;;\n+esac\n \n ####################\n # Depends Building #\n ####################\n \n # Build the depends tree, overriding variables that assume multilib gcc\n-make -C depends --jobs=\"$MAX_JOBS\" HOST=\"$HOST\" \\\n+make -C depends --jobs=\"$JOBS\" HOST=\"$HOST\" \\\n                                    ${V:+V=1} \\\n                                    ${SOURCES_PATH+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n+                                   ${BASE_CACHE+BASE_CACHE=\"$BASE_CACHE\"} \\\n+                                   ${SDK_PATH+SDK_PATH=\"$SDK_PATH\"} \\\n                                    i686_linux_CC=i686-linux-gnu-gcc \\\n                                    i686_linux_CXX=i686-linux-gnu-g++ \\\n                                    i686_linux_AR=i686-linux-gnu-ar \\\n@@ -142,53 +213,70 @@ make -C depends --jobs=\"$MAX_JOBS\" HOST=\"$HOST\" \\\n                                    x86_64_linux_RANLIB=x86_64-linux-gnu-ranlib \\\n                                    x86_64_linux_NM=x86_64-linux-gnu-nm \\\n                                    x86_64_linux_STRIP=x86_64-linux-gnu-strip \\\n-                                   qt_config_opts_i686_linux='-platform linux-g++ -xplatform bitcoin-linux-g++'\n+                                   qt_config_opts_i686_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n+                                   qt_config_opts_x86_64_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n+                                   FORCE_USE_SYSTEM_CLANG=1\n \n \n ###########################\n # Source Tarball Building #\n ###########################\n \n-# Define DISTNAME variable.\n-# shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n-source contrib/gitian-descriptors/assign_DISTNAME\n-\n-GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n+GIT_ARCHIVE=\"${DIST_ARCHIVE_BASE}/${DISTNAME}.tar.gz\"\n \n # Create the source tarball if not already there\n if [ ! -e \"$GIT_ARCHIVE\" ]; then\n     mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n     git archive --prefix=\"${DISTNAME}/\" --output=\"$GIT_ARCHIVE\" HEAD\n fi\n \n+mkdir -p \"$OUTDIR\"\n+\n ###########################\n # Binary Tarball Building #\n ###########################\n \n # CONFIGFLAGS\n-CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests\"\n+CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary\"\n case \"$HOST\" in\n-    *linux*) CONFIGFLAGS+=\" --enable-glibc-back-compat\" ;;\n+    *linux*) CONFIGFLAGS+=\" --disable-threadlocal\" ;;\n esac\n \n # CFLAGS\n HOST_CFLAGS=\"-O2 -g\"\n case \"$HOST\" in\n     *linux*)  HOST_CFLAGS+=\" -ffile-prefix-map=${PWD}=.\" ;;\n     *mingw*)  HOST_CFLAGS+=\" -fno-ident\" ;;\n+    *darwin*) unset HOST_CFLAGS ;;\n esac\n \n # CXXFLAGS\n HOST_CXXFLAGS=\"$HOST_CFLAGS\"\n \n+case \"$HOST\" in\n+    arm-linux-gnueabihf) HOST_CXXFLAGS=\"${HOST_CXXFLAGS} -Wno-psabi\" ;;\n+esac\n+\n # LDFLAGS\n case \"$HOST\" in\n     *linux*)  HOST_LDFLAGS=\"-Wl,--as-needed -Wl,--dynamic-linker=$glibc_dynamic_linker -static-libstdc++ -Wl,-O2\" ;;\n     *mingw*)  HOST_LDFLAGS=\"-Wl,--no-insert-timestamp\" ;;\n esac\n \n+# Using --no-tls-get-addr-optimize retains compatibility with glibc 2.17, by\n+# avoiding a PowerPC64 optimisation available in glibc 2.22 and later.\n+# https://sourceware.org/binutils/docs-2.35/ld/PowerPC64-ELF64.html\n+case \"$HOST\" in\n+    *powerpc64*) HOST_LDFLAGS=\"${HOST_LDFLAGS} -Wl,--no-tls-get-addr-optimize\" ;;\n+esac\n+\n+case \"$HOST\" in\n+    powerpc64-linux-*|riscv64-linux-*) HOST_LDFLAGS=\"${HOST_LDFLAGS} -Wl,-z,noexecstack\" ;;\n+esac\n+\n # Make $HOST-specific native binaries from depends available in $PATH\n export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n+mkdir -p \"$DISTSRC\"\n (\n     cd \"$DISTSRC\"\n \n@@ -205,25 +293,23 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n                     --disable-maintainer-mode \\\n                     --disable-dependency-tracking \\\n                     ${CONFIGFLAGS} \\\n-                    CFLAGS=\"${HOST_CFLAGS}\" \\\n-                    CXXFLAGS=\"${HOST_CXXFLAGS}\" \\\n+                    ${HOST_CFLAGS:+CFLAGS=\"${HOST_CFLAGS}\"} \\\n+                    ${HOST_CXXFLAGS:+CXXFLAGS=\"${HOST_CXXFLAGS}\"} \\\n                     ${HOST_LDFLAGS:+LDFLAGS=\"${HOST_LDFLAGS}\"}\n \n     sed -i.old 's/-lstdc++ //g' config.status libtool src/univalue/config.status src/univalue/libtool\n \n     # Build Bitcoin Core\n-    make --jobs=\"$MAX_JOBS\" ${V:+V=1}\n+    make --jobs=\"$JOBS\" ${V:+V=1}\n \n-    # Perform basic ELF security checks on a series of executables.\n+    # Check that symbol/security checks tools are sane.\n+    make test-security-check ${V:+V=1}\n+    # Perform basic security checks on a series of executables.\n     make -C src --jobs=1 check-security ${V:+V=1}\n+    # Check that executables only contain allowed version symbols.\n+    make -C src --jobs=1 check-symbols  ${V:+V=1}\n \n-    case \"$HOST\" in\n-        *linux*|*mingw*)\n-            # Check that executables only contain allowed gcc, glibc and libstdc++\n-            # version symbols for Linux distro back-compatibility.\n-            make -C src --jobs=1 check-symbols  ${V:+V=1}\n-            ;;\n-    esac\n+    mkdir -p \"$OUTDIR\"\n \n     # Make the os-specific installers\n     case \"$HOST\" in\n@@ -238,8 +324,36 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n     INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p \"${INSTALLPATH}\"\n     # Install built Bitcoin Core to $INSTALLPATH\n-    make install DESTDIR=\"${INSTALLPATH}\" ${V:+V=1}\n+    case \"$HOST\" in\n+        *darwin*)\n+            make install-strip DESTDIR=\"${INSTALLPATH}\" ${V:+V=1}\n+            ;;\n+        *)\n+            make install DESTDIR=\"${INSTALLPATH}\" ${V:+V=1}\n+            ;;\n+    esac\n \n+    case \"$HOST\" in\n+        *darwin*)\n+            make osx_volname ${V:+V=1}\n+            make deploydir ${V:+V=1}\n+            mkdir -p \"unsigned-app-${HOST}\"\n+            cp  --target-directory=\"unsigned-app-${HOST}\" \\\n+                osx_volname \\\n+                contrib/macdeploy/detached-sig-{apply,create}.sh \\\n+                \"${BASEPREFIX}/${HOST}\"/native/bin/dmg\n+            mv --target-directory=\"unsigned-app-${HOST}\" dist\n+            (\n+                cd \"unsigned-app-${HOST}\"\n+                find . -print0 \\\n+                    | sort --zero-terminated \\\n+                    | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n+                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-osx-unsigned.tar.gz\" \\\n+                    || ( rm -f \"${OUTDIR}/${DISTNAME}-osx-unsigned.tar.gz\" && exit 1 )\n+            )\n+            make deploy ${V:+V=1} OSX_DMG=\"${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\"\n+            ;;\n+    esac\n     (\n         cd installed\n \n@@ -254,13 +368,18 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n         find . -name \"lib*.a\" -delete\n \n         # Prune pkg-config files\n-        rm -r \"${DISTNAME}/lib/pkgconfig\"\n+        rm -rf \"${DISTNAME}/lib/pkgconfig\"\n \n-        # Split binaries and libraries from their debug symbols\n-        {\n-            find \"${DISTNAME}/bin\" -type f -executable -print0\n-            find \"${DISTNAME}/lib\" -type f -print0\n-        } | xargs -0 -n1 -P\"$MAX_JOBS\" -I{} \"${DISTSRC}/contrib/devtools/split-debug.sh\" {} {} {}.dbg\n+        case \"$HOST\" in\n+            *darwin*) ;;\n+            *)\n+                # Split binaries and libraries from their debug symbols\n+                {\n+                    find \"${DISTNAME}/bin\" -type f -executable -print0\n+                    find \"${DISTNAME}/lib\" -type f -print0\n+                } | xargs -0 -n1 -P\"$JOBS\" -I{} \"${DISTSRC}/contrib/devtools/split-debug.sh\" {} {} {}.dbg\n+                ;;\n+        esac\n \n         case \"$HOST\" in\n             *mingw*)\n@@ -300,22 +419,44 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n                     | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" \\\n                     || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" && exit 1 )\n                 ;;\n+            *darwin*)\n+                find \"${DISTNAME}\" -print0 \\\n+                    | sort --zero-terminated \\\n+                    | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n+                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-apple-darwin18/osx64}.tar.gz\" \\\n+                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-apple-darwin18/osx64}.tar.gz\" && exit 1 )\n+                ;;\n         esac\n-    )\n-)\n+    )  # $DISTSRC/installed\n \n-case \"$HOST\" in\n-    *mingw*)\n-        cp -rf --target-directory=. contrib/windeploy\n-        (\n-            cd ./windeploy\n-            mkdir unsigned\n-            cp --target-directory=unsigned/ \"${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe\"\n-            find . -print0 \\\n-                | sort --zero-terminated \\\n-                | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n-                | gzip -9n > \"${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\" \\\n-                || ( rm -f \"${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\" && exit 1 )\n-        )\n-        ;;\n-esac\n+    case \"$HOST\" in\n+        *mingw*)\n+            cp -rf --target-directory=. contrib/windeploy\n+            (\n+                cd ./windeploy\n+                mkdir -p unsigned\n+                cp --target-directory=unsigned/ \"${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe\"\n+                find . -print0 \\\n+                    | sort --zero-terminated \\\n+                    | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n+                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\" \\\n+                    || ( rm -f \"${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\" && exit 1 )\n+            )\n+            ;;\n+    esac\n+)  # $DISTSRC\n+\n+rm -rf \"$ACTUAL_OUTDIR\"\n+mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n+    || ( rm -rf \"$ACTUAL_OUTDIR\" && exit 1 )\n+\n+(\n+    cd /outdir-base\n+    {\n+        echo \"$GIT_ARCHIVE\"\n+        find \"$ACTUAL_OUTDIR\" -type f\n+    } | xargs realpath --relative-base=\"$PWD\" \\\n+      | xargs sha256sum \\\n+      | sort -k2 \\\n+      | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n+)"
      },
      {
        "sha": "f484ac5774c7e9a29f8b8884863559f27692e19a",
        "filename": "contrib/guix/libexec/codesign.sh",
        "status": "added",
        "additions": 113,
        "deletions": 0,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/libexec/codesign.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/libexec/codesign.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/codesign.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,113 @@\n+#!/usr/bin/env bash\n+export LC_ALL=C\n+set -e -o pipefail\n+export TZ=UTC\n+\n+# Although Guix _does_ set umask when building its own packages (in our case,\n+# this is all packages in manifest.scm), it does not set it for `guix\n+# environment`. It does make sense for at least `guix environment --container`\n+# to set umask, so if that change gets merged upstream and we bump the\n+# time-machine to a commit which includes the aforementioned change, we can\n+# remove this line.\n+#\n+# This line should be placed before any commands which creates files.\n+umask 0022\n+\n+if [ -n \"$V\" ]; then\n+    # Print both unexpanded (-v) and expanded (-x) forms of commands as they are\n+    # read from this file.\n+    set -vx\n+    # Set VERBOSE for CMake-based builds\n+    export VERBOSE=\"$V\"\n+fi\n+\n+# Check that required environment variables are set\n+cat << EOF\n+Required environment variables as seen inside the container:\n+    UNSIGNED_TARBALL: ${UNSIGNED_TARBALL:?not set}\n+    DETACHED_SIGS_REPO: ${DETACHED_SIGS_REPO:?not set}\n+    DIST_ARCHIVE_BASE: ${DIST_ARCHIVE_BASE:?not set}\n+    DISTNAME: ${DISTNAME:?not set}\n+    HOST: ${HOST:?not set}\n+    SOURCE_DATE_EPOCH: ${SOURCE_DATE_EPOCH:?not set}\n+    DISTSRC: ${DISTSRC:?not set}\n+    OUTDIR: ${OUTDIR:?not set}\n+EOF\n+\n+ACTUAL_OUTDIR=\"${OUTDIR}\"\n+OUTDIR=\"${DISTSRC}/output\"\n+\n+git_head_version() {\n+    local recent_tag\n+    if recent_tag=\"$(git -C \"$1\" describe --exact-match HEAD 2> /dev/null)\"; then\n+        echo \"${recent_tag#v}\"\n+    else\n+        git -C \"$1\" rev-parse --short=12 HEAD\n+    fi\n+}\n+\n+CODESIGNATURE_GIT_ARCHIVE=\"${DIST_ARCHIVE_BASE}/${DISTNAME}-codesignatures-$(git_head_version \"$DETACHED_SIGS_REPO\").tar.gz\"\n+\n+# Create the codesignature tarball if not already there\n+if [ ! -e \"$CODESIGNATURE_GIT_ARCHIVE\" ]; then\n+    mkdir -p \"$(dirname \"$CODESIGNATURE_GIT_ARCHIVE\")\"\n+    git -C \"$DETACHED_SIGS_REPO\" archive --output=\"$CODESIGNATURE_GIT_ARCHIVE\" HEAD\n+fi\n+\n+mkdir -p \"$OUTDIR\"\n+\n+mkdir -p \"$DISTSRC\"\n+(\n+    cd \"$DISTSRC\"\n+\n+    tar -xf \"$UNSIGNED_TARBALL\"\n+\n+    mkdir -p codesignatures\n+    tar -C codesignatures -xf \"$CODESIGNATURE_GIT_ARCHIVE\"\n+\n+    case \"$HOST\" in\n+        *mingw*)\n+            find \"$PWD\" -name \"*-unsigned.exe\" | while read -r infile; do\n+                infile_base=\"$(basename \"$infile\")\"\n+\n+                # Codesigned *-unsigned.exe and output to OUTDIR\n+                osslsigncode attach-signature \\\n+                                 -in \"$infile\" \\\n+                                 -out \"${OUTDIR}/${infile_base/-unsigned}\" \\\n+                                 -sigin codesignatures/win/\"$infile_base\".pem\n+            done\n+            ;;\n+        *darwin*)\n+            # Apply detached codesignatures to dist/ (in-place)\n+            signapple apply dist/Bitcoin-Qt.app codesignatures/osx/dist\n+\n+            # Make an uncompressed DMG from dist/\n+            xorrisofs -D -l -V \"$(< osx_volname)\" -no-pad -r -dir-mode 0755 \\\n+                      -o uncompressed.dmg \\\n+                      dist \\\n+                      -- -volume_date all_file_dates =\"$SOURCE_DATE_EPOCH\"\n+\n+            # Compress uncompressed.dmg and output to OUTDIR\n+            ./dmg dmg uncompressed.dmg \"${OUTDIR}/${DISTNAME}-osx-signed.dmg\"\n+            ;;\n+        *)\n+            exit 1\n+            ;;\n+    esac\n+)  # $DISTSRC\n+\n+rm -rf \"$ACTUAL_OUTDIR\"\n+mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n+    || ( rm -rf \"$ACTUAL_OUTDIR\" && exit 1 )\n+\n+(\n+    cd /outdir-base\n+    {\n+        echo \"$UNSIGNED_TARBALL\"\n+        echo \"$CODESIGNATURE_GIT_ARCHIVE\"\n+        find \"$ACTUAL_OUTDIR\" -type f\n+    } | xargs realpath --relative-base=\"$PWD\" \\\n+        | xargs sha256sum \\\n+        | sort -k2 \\\n+        | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n+)"
      },
      {
        "sha": "9705607119fb5ebd180c77c162cf09e77826053f",
        "filename": "contrib/guix/libexec/prelude.bash",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/libexec/prelude.bash",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/libexec/prelude.bash",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/prelude.bash?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,66 @@\n+#!/usr/bin/env bash\n+export LC_ALL=C\n+set -e -o pipefail\n+\n+# shellcheck source=../../shell/realpath.bash\n+source contrib/shell/realpath.bash\n+\n+# shellcheck source=../../shell/git-utils.bash\n+source contrib/shell/git-utils.bash\n+\n+################\n+# Required non-builtin commands should be invocable\n+################\n+\n+check_tools() {\n+    for cmd in \"$@\"; do\n+        if ! command -v \"$cmd\" > /dev/null 2>&1; then\n+            echo \"ERR: This script requires that '$cmd' is installed and available in your \\$PATH\"\n+            exit 1\n+        fi\n+    done\n+}\n+\n+check_tools cat env readlink dirname basename git\n+\n+################\n+# We should be at the top directory of the repository\n+################\n+\n+same_dir() {\n+    local resolved1 resolved2\n+    resolved1=\"$(bash_realpath \"${1}\")\"\n+    resolved2=\"$(bash_realpath \"${2}\")\"\n+    [ \"$resolved1\" = \"$resolved2\" ]\n+}\n+\n+if ! same_dir \"${PWD}\" \"$(git_root)\"; then\n+cat << EOF\n+ERR: This script must be invoked from the top level of the git repository\n+\n+Hint: This may look something like:\n+    env FOO=BAR ./contrib/guix/guix-<blah>\n+\n+EOF\n+exit 1\n+fi\n+\n+################\n+# Set common variables\n+################\n+\n+VERSION=\"${VERSION:-$(git_head_version)}\"\n+DISTNAME=\"${DISTNAME:-bitcoin-${VERSION}}\"\n+\n+version_base_prefix=\"${PWD}/guix-build-\"\n+VERSION_BASE=\"${version_base_prefix}${VERSION}\"  # TOP\n+\n+DISTSRC_BASE=\"${DISTSRC_BASE:-${VERSION_BASE}}\"\n+\n+OUTDIR_BASE=\"${OUTDIR_BASE:-${VERSION_BASE}/output}\"\n+\n+var_base_basename=\"var\"\n+VAR_BASE=\"${VAR_BASE:-${VERSION_BASE}/${var_base_basename}}\"\n+\n+profiles_base_basename=\"profiles\"\n+PROFILES_BASE=\"${PROFILES_BASE:-${VAR_BASE}/${profiles_base_basename}}\""
      },
      {
        "sha": "5805006053706a47c6b36e4e41b8494eabece7b0",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 498,
        "deletions": 39,
        "changes": 537,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -3,28 +3,52 @@\n              (gnu packages autotools)\n              (gnu packages base)\n              (gnu packages bash)\n+             (gnu packages bison)\n+             (gnu packages certs)\n+             (gnu packages cdrom)\n              (gnu packages check)\n+             (gnu packages cmake)\n              (gnu packages commencement)\n              (gnu packages compression)\n              (gnu packages cross-base)\n+             (gnu packages curl)\n              (gnu packages file)\n              (gnu packages gawk)\n              (gnu packages gcc)\n+             (gnu packages gnome)\n+             (gnu packages image)\n+             (gnu packages imagemagick)\n              (gnu packages installers)\n              (gnu packages linux)\n+             (gnu packages llvm)\n              (gnu packages mingw)\n+             (gnu packages moreutils)\n              (gnu packages perl)\n              (gnu packages pkg-config)\n              (gnu packages python)\n+             (gnu packages python-web)\n              (gnu packages shells)\n+             (gnu packages tls)\n              (gnu packages version-control)\n+             (guix build-system font)\n              (guix build-system gnu)\n+             (guix build-system python)\n              (guix build-system trivial)\n+             (guix download)\n              (guix gexp)\n+             (guix git-download)\n+             ((guix licenses) #:prefix license:)\n              (guix packages)\n              (guix profiles)\n              (guix utils))\n \n+(define-syntax-rule (search-our-patches file-name ...)\n+  \"Return the list of absolute file names corresponding to each\n+FILE-NAME found in ./patches relative to the current file.\"\n+  (parameterize\n+      ((%patch-path (list (string-append (dirname (current-filename)) \"/patches\"))))\n+    (list (search-patch file-name) ...)))\n+\n (define (make-ssp-fixed-gcc xgcc)\n   \"Given a XGCC package, return a modified package that uses the SSP function\n from glibc instead of from libssp.so. Our `symbol-check' script will complain if\n@@ -33,28 +57,32 @@ we link against libssp.so, and thus will ensure that this works properly.\n Taken from:\n http://www.linuxfromscratch.org/hlfs/view/development/chapter05/gcc-pass1.html\"\n   (package\n-   (inherit xgcc)\n-   (arguments\n-    (substitute-keyword-arguments (package-arguments xgcc)\n-      ((#:make-flags flags)\n-       `(cons \"gcc_cv_libc_provides_ssp=yes\" ,flags))))))\n+    (inherit xgcc)\n+    (arguments\n+     (substitute-keyword-arguments (package-arguments xgcc)\n+       ((#:make-flags flags)\n+        `(cons \"gcc_cv_libc_provides_ssp=yes\" ,flags))))))\n \n (define (make-gcc-rpath-link xgcc)\n   \"Given a XGCC package, return a modified package that replace each instance of\n -rpath in the default system spec that's inserted by Guix with -rpath-link\"\n   (package\n-   (inherit xgcc)\n-   (arguments\n-    (substitute-keyword-arguments (package-arguments xgcc)\n-      ((#:phases phases)\n-       `(modify-phases ,phases\n-          (add-after 'pre-configure 'replace-rpath-with-rpath-link\n-            (lambda _\n-              (substitute* (cons \"gcc/config/rs6000/sysv4.h\"\n-                                 (find-files \"gcc/config\"\n-                                             \"^gnu-user.*\\\\.h$\"))\n-                ((\"-rpath=\") \"-rpath-link=\"))\n-              #t))))))))\n+    (inherit xgcc)\n+    (arguments\n+     (substitute-keyword-arguments (package-arguments xgcc)\n+       ((#:phases phases)\n+        `(modify-phases ,phases\n+           (add-after 'pre-configure 'replace-rpath-with-rpath-link\n+             (lambda _\n+               (substitute* (cons \"gcc/config/rs6000/sysv4.h\"\n+                                  (find-files \"gcc/config\"\n+                                              \"^gnu-user.*\\\\.h$\"))\n+                 ((\"-rpath=\") \"-rpath-link=\"))\n+               #t))))))))\n+\n+(define (make-binutils-with-mingw-w64-disable-flags xbinutils)\n+  (package-with-extra-patches xbinutils\n+    (search-our-patches \"binutils-mingw-w64-disable-flags.patch\")))\n \n (define (make-cross-toolchain target\n                               base-gcc-for-libc\n@@ -99,37 +127,56 @@ http://www.linuxfromscratch.org/hlfs/view/development/chapter05/gcc-pass1.html\"\n        `((\"binutils\" ,xbinutils)\n          (\"libc\" ,xlibc)\n          (\"libc:static\" ,xlibc \"static\")\n-         (\"gcc\" ,xgcc)))\n+         (\"gcc\" ,xgcc)\n+         (\"gcc-lib\" ,xgcc \"lib\")))\n       (synopsis (string-append \"Complete GCC tool chain for \" target))\n       (description (string-append \"This package provides a complete GCC tool\n chain for \" target \" development.\"))\n       (home-page (package-home-page xgcc))\n       (license (package-license xgcc)))))\n \n+(define base-gcc\n+  (package-with-extra-patches gcc-8\n+    (search-our-patches \"gcc-8-sort-libtool-find-output.patch\")))\n+\n+;; Building glibc with stack smashing protector first landed in glibc 2.25, use\n+;; this function to disable for older glibcs\n+;;\n+;; From glibc 2.25 changelog:\n+;;\n+;;   * Most of glibc can now be built with the stack smashing protector enabled.\n+;;     It is recommended to build glibc with --enable-stack-protector=strong.\n+;;     Implemented by Nick Alcock (Oracle).\n+(define (make-glibc-without-ssp xglibc)\n+  (package-with-extra-configure-variable\n+   (package-with-extra-configure-variable\n+    xglibc \"libc_cv_ssp\" \"no\")\n+   \"libc_cv_ssp_strong\" \"no\"))\n+\n (define* (make-bitcoin-cross-toolchain target\n-                                  #:key\n-                                  (base-gcc-for-libc gcc-5)\n-                                  (base-kernel-headers linux-libre-headers-4.19)\n-                                  (base-libc glibc-2.27)\n-                                  (base-gcc (make-gcc-rpath-link gcc-9)))\n+                                       #:key\n+                                       (base-gcc-for-libc gcc-7)\n+                                       (base-kernel-headers linux-libre-headers-4.9)\n+                                       (base-libc (make-glibc-without-ssp glibc-2.24))\n+                                       (base-gcc (make-gcc-rpath-link base-gcc)))\n   \"Convenience wrapper around MAKE-CROSS-TOOLCHAIN with default values\n desirable for building Bitcoin Core release binaries.\"\n   (make-cross-toolchain target\n-                   base-gcc-for-libc\n-                   base-kernel-headers\n-                   base-libc\n-                   base-gcc))\n+                        base-gcc-for-libc\n+                        base-kernel-headers\n+                        base-libc\n+                        base-gcc))\n \n (define (make-gcc-with-pthreads gcc)\n   (package-with-extra-configure-variable gcc \"--enable-threads\" \"posix\"))\n \n (define (make-mingw-pthreads-cross-toolchain target)\n   \"Create a cross-compilation toolchain package for TARGET\"\n-  (let* ((xbinutils (cross-binutils target))\n+  (let* ((xbinutils (make-binutils-with-mingw-w64-disable-flags (cross-binutils target)))\n          (pthreads-xlibc mingw-w64-x86_64-winpthreads)\n          (pthreads-xgcc (make-gcc-with-pthreads\n                          (cross-gcc target\n-                                    #:xgcc (make-ssp-fixed-gcc gcc-9)\n+                                    #:xgcc (make-ssp-fixed-gcc base-gcc)\n                                     #:xbinutils xbinutils\n                                     #:libc pthreads-xlibc))))\n     ;; Define a meta-package that propagates the resulting XBINUTILS, XLIBC, and\n@@ -143,18 +190,417 @@ desirable for building Bitcoin Core release binaries.\"\n       (propagated-inputs\n        `((\"binutils\" ,xbinutils)\n          (\"libc\" ,pthreads-xlibc)\n-         (\"gcc\" ,pthreads-xgcc)))\n+         (\"gcc\" ,pthreads-xgcc)\n+         (\"gcc-lib\" ,pthreads-xgcc \"lib\")))\n       (synopsis (string-append \"Complete GCC tool chain for \" target))\n       (description (string-append \"This package provides a complete GCC tool\n chain for \" target \" development.\"))\n       (home-page (package-home-page pthreads-xgcc))\n       (license (package-license pthreads-xgcc)))))\n \n+(define (make-nsis-with-sde-support base-nsis)\n+  (package-with-extra-patches base-nsis\n+    (search-our-patches \"nsis-SConstruct-sde-support.patch\")))\n+\n+(define-public font-tuffy\n+  (package\n+    (name \"font-tuffy\")\n+    (version \"20120614\")\n+    (source\n+     (origin\n+       (method url-fetch)\n+       (uri (string-append \"http://tulrich.com/fonts/tuffy-\" version \".tar.gz\"))\n+       (file-name (string-append name \"-\" version \".tar.gz\"))\n+       (sha256\n+        (base32\n+         \"02vf72bgrp30vrbfhxjw82s115z27dwfgnmmzfb0n9wfhxxfpyf6\"))))\n+    (build-system font-build-system)\n+    (home-page \"http://tulrich.com/fonts/\")\n+    (synopsis \"The Tuffy Truetype Font Family\")\n+    (description\n+     \"Thatcher Ulrich's first outline font design. He started with the goal of producing a neutral, readable sans-serif text font. There are lots of \\\"expressive\\\" fonts out there, but he wanted to start with something very plain and clean, something he might want to actually use. \")\n+    (license license:public-domain)))\n+\n+(define-public lief\n+  (package\n+   (name \"python-lief\")\n+   (version \"0.11.5\")\n+   (source\n+    (origin\n+     (method git-fetch)\n+     (uri (git-reference\n+           (url \"https://github.com/lief-project/LIEF.git\")\n+           (commit version)))\n+     (file-name (git-file-name name version))\n+     (sha256\n+      (base32\n+       \"0qahjfg1n0x76ps2mbyljvws1l3qhkqvmxqbahps4qgywl2hbdkj\"))))\n+   (build-system python-build-system)\n+   (native-inputs\n+    `((\"cmake\" ,cmake)))\n+   (home-page \"https://github.com/lief-project/LIEF\")\n+   (synopsis \"Library to Instrument Executable Formats\")\n+   (description \"Python library to to provide a cross platform library which can\n+parse, modify and abstract ELF, PE and MachO formats.\")\n+   (license license:asl2.0)))\n+\n+(define osslsigncode\n+  (package\n+    (name \"osslsigncode\")\n+    (version \"2.0\")\n+    (source (origin\n+              (method url-fetch)\n+              (uri (string-append \"https://github.com/mtrojnar/\"\n+                                  name \"/archive/\" version \".tar.gz\"))\n+              (sha256\n+               (base32\n+                \"0byri6xny770wwb2nciq44j5071122l14bvv65axdd70nfjf0q2s\"))))\n+    (build-system gnu-build-system)\n+    (native-inputs\n+     `((\"pkg-config\" ,pkg-config)\n+       (\"autoconf\" ,autoconf)\n+       (\"automake\" ,automake)\n+       (\"libtool\" ,libtool)))\n+    (inputs\n+     `((\"openssl\" ,openssl)))\n+    (arguments\n+     `(#:configure-flags\n+       `(\"--without-gsf\"\n+         \"--without-curl\"\n+         \"--disable-dependency-tracking\")))\n+    (home-page \"https://github.com/mtrojnar/osslsigncode\")\n+    (synopsis \"Authenticode signing and timestamping tool\")\n+    (description \"osslsigncode is a small tool that implements part of the\n+functionality of the Microsoft tool signtool.exe - more exactly the Authenticode\n+signing and timestamping. But osslsigncode is based on OpenSSL and cURL, and\n+thus should be able to compile on most platforms where these exist.\")\n+    (license license:gpl3+))) ; license is with openssl exception\n+\n+(define-public python-asn1crypto\n+  (package\n+    (name \"python-asn1crypto\")\n+    (version \"1.4.0\")\n+    (source\n+     (origin\n+       (method git-fetch)\n+       (uri (git-reference\n+             (url \"https://github.com/wbond/asn1crypto\")\n+             (commit version)))\n+       (file-name (git-file-name name version))\n+       (sha256\n+        (base32\n+         \"19abibn6jw20mzi1ln4n9jjvpdka8ygm4m439hplyrdfqbvgm01r\"))))\n+    (build-system python-build-system)\n+    (arguments\n+     '(#:phases\n+       (modify-phases %standard-phases\n+         (replace 'check\n+           (lambda _\n+             (invoke \"python\" \"run.py\" \"tests\"))))))\n+    (home-page \"https://github.com/wbond/asn1crypto\")\n+    (synopsis \"ASN.1 parser and serializer in Python\")\n+    (description \"asn1crypto is an ASN.1 parser and serializer with definitions\n+for private keys, public keys, certificates, CRL, OCSP, CMS, PKCS#3, PKCS#7,\n+PKCS#8, PKCS#12, PKCS#5, X.509 and TSP.\")\n+    (license license:expat)))\n+\n+(define-public python-elfesteem\n+  (let ((commit \"87bbd79ab7e361004c98cc8601d4e5f029fd8bd5\"))\n+    (package\n+      (name \"python-elfesteem\")\n+      (version (git-version \"0.1\" \"1\" commit))\n+      (source\n+       (origin\n+         (method git-fetch)\n+         (uri (git-reference\n+               (url \"https://github.com/LRGH/elfesteem\")\n+               (commit commit)))\n+         (file-name (git-file-name name commit))\n+         (sha256\n+          (base32\n+           \"1nyvjisvyxyxnd0023xjf5846xd03lwawp5pfzr8vrky7wwm5maz\"))))\n+      (build-system python-build-system)\n+      ;; There are no tests, but attempting to run python setup.py test leads to\n+      ;; PYTHONPATH problems, just disable the test\n+      (arguments '(#:tests? #f))\n+      (home-page \"https://github.com/LRGH/elfesteem\")\n+      (synopsis \"ELF/PE/Mach-O parsing library\")\n+      (description \"elfesteem parses ELF, PE and Mach-O files.\")\n+      (license license:lgpl2.1))))\n+\n+(define-public python-oscrypto\n+  (package\n+    (name \"python-oscrypto\")\n+    (version \"1.2.1\")\n+    (source\n+     (origin\n+       (method git-fetch)\n+       (uri (git-reference\n+             (url \"https://github.com/wbond/oscrypto\")\n+             (commit version)))\n+       (file-name (git-file-name name version))\n+       (sha256\n+        (base32\n+         \"1d4d8s4z340qhvb3g5m5v3436y3a71yc26wk4749q64m09kxqc3l\"))\n+       (patches (search-our-patches \"oscrypto-hard-code-openssl.patch\"))))\n+    (build-system python-build-system)\n+    (native-search-paths\n+     (list (search-path-specification\n+            (variable \"SSL_CERT_FILE\")\n+            (file-type 'regular)\n+            (separator #f)                ;single entry\n+            (files '(\"etc/ssl/certs/ca-certificates.crt\")))))\n+\n+    (propagated-inputs\n+     `((\"python-asn1crypto\" ,python-asn1crypto)\n+       (\"openssl\" ,openssl)))\n+    (arguments\n+     `(#:phases\n+       (modify-phases %standard-phases\n+         (add-after 'unpack 'hard-code-path-to-libscrypt\n+           (lambda* (#:key inputs #:allow-other-keys)\n+             (let ((openssl (assoc-ref inputs \"openssl\")))\n+               (substitute* \"oscrypto/__init__.py\"\n+                 ((\"@GUIX_OSCRYPTO_USE_OPENSSL@\")\n+                  (string-append openssl \"/lib/libcrypto.so\" \",\" openssl \"/lib/libssl.so\")))\n+               #t)))\n+         (add-after 'unpack 'disable-broken-tests\n+           (lambda _\n+             ;; This test is broken as there is no keyboard interrupt.\n+             (substitute* \"tests/test_trust_list.py\"\n+               ((\"^(.*)class TrustListTests\" line indent)\n+                (string-append indent\n+                               \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n+                               line)))\n+             (substitute* \"tests/test_tls.py\"\n+               ((\"^(.*)class TLSTests\" line indent)\n+                (string-append indent\n+                               \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n+                               line)))\n+             #t))\n+         (replace 'check\n+           (lambda _\n+             (invoke \"python\" \"run.py\" \"tests\")\n+             #t)))))\n+    (home-page \"https://github.com/wbond/oscrypto\")\n+    (synopsis \"Compiler-free Python crypto library backed by the OS\")\n+    (description \"oscrypto is a compilation-free, always up-to-date encryption library for Python.\")\n+    (license license:expat)))\n+\n+(define-public python-oscryptotests\n+  (package (inherit python-oscrypto)\n+    (name \"python-oscryptotests\")\n+    (arguments\n+     `(#:tests? #f\n+       #:phases\n+       (modify-phases %standard-phases\n+         (add-after 'unpack 'hard-code-path-to-libscrypt\n+           (lambda* (#:key inputs #:allow-other-keys)\n+             (chdir \"tests\")\n+             #t)))))))\n+\n+(define-public python-certvalidator\n+  (let ((commit \"e5bdb4bfcaa09fa0af355eb8867d00dfeecba08c\"))\n+    (package\n+      (name \"python-certvalidator\")\n+      (version (git-version \"0.1\" \"1\" commit))\n+      (source\n+       (origin\n+         (method git-fetch)\n+         (uri (git-reference\n+               (url \"https://github.com/achow101/certvalidator\")\n+               (commit commit)))\n+         (file-name (git-file-name name commit))\n+         (sha256\n+          (base32\n+           \"18pvxkvpkfkzgvfylv0kx65pmxfcv1hpsg03cip93krfvrrl4c75\"))))\n+      (build-system python-build-system)\n+      (propagated-inputs\n+       `((\"python-asn1crypto\" ,python-asn1crypto)\n+         (\"python-oscrypto\" ,python-oscrypto)\n+         (\"python-oscryptotests\", python-oscryptotests))) ;; certvalidator tests import oscryptotests\n+      (arguments\n+       `(#:phases\n+         (modify-phases %standard-phases\n+           (add-after 'unpack 'disable-broken-tests\n+             (lambda _\n+               (substitute* \"tests/test_certificate_validator.py\"\n+                 ((\"^(.*)class CertificateValidatorTests\" line indent)\n+                  (string-append indent\n+                                 \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n+                                 line)))\n+               (substitute* \"tests/test_crl_client.py\"\n+                 ((\"^(.*)def test_fetch_crl\" line indent)\n+                  (string-append indent\n+                                 \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n+                                 line)))\n+               (substitute* \"tests/test_ocsp_client.py\"\n+                 ((\"^(.*)def test_fetch_ocsp\" line indent)\n+                  (string-append indent\n+                                 \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n+                                 line)))\n+               (substitute* \"tests/test_registry.py\"\n+                 ((\"^(.*)def test_build_paths\" line indent)\n+                  (string-append indent\n+                                 \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n+                                 line)))\n+               (substitute* \"tests/test_validate.py\"\n+                 ((\"^(.*)def test_revocation_mode_hard\" line indent)\n+                  (string-append indent\n+                                 \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n+                                 line)))\n+               #t))\n+           (replace 'check\n+             (lambda _\n+               (invoke \"python\" \"run.py\" \"tests\")\n+               #t)))))\n+      (home-page \"https://github.com/wbond/certvalidator\")\n+      (synopsis \"Python library for validating X.509 certificates and paths\")\n+      (description \"certvalidator is a Python library for validating X.509\n+certificates or paths. Supports various options, including: validation at a\n+specific moment in time, whitelisting and revocation checks.\")\n+      (license license:expat))))\n+\n+(define-public python-requests-2.25.1\n+  (package (inherit python-requests)\n+    (version \"2.25.1\")\n+    (source (origin\n+              (method url-fetch)\n+              (uri (pypi-uri \"requests\" version))\n+              (sha256\n+               (base32\n+                \"015qflyqsgsz09gnar69s6ga74ivq5kch69s4qxz3904m7a3v5r7\"))))))\n+\n+(define-public python-altgraph\n+  (package\n+    (name \"python-altgraph\")\n+    (version \"0.17\")\n+    (source\n+     (origin\n+       (method git-fetch)\n+       (uri (git-reference\n+             (url \"https://github.com/ronaldoussoren/altgraph\")\n+             (commit (string-append \"v\" version))))\n+       (file-name (git-file-name name version))\n+       (sha256\n+        (base32\n+         \"09sm4srvvkw458pn48ga9q7ykr4xlz7q8gh1h9w7nxpf001qgpwb\"))))\n+    (build-system python-build-system)\n+    (home-page \"https://github.com/ronaldoussoren/altgraph\")\n+    (synopsis \"Python graph (network) package\")\n+    (description \"altgraph is a fork of graphlib: a graph (network) package for\n+constructing graphs, BFS and DFS traversals, topological sort, shortest paths,\n+etc. with graphviz output.\")\n+    (license license:expat)))\n+\n+\n+(define-public python-macholib\n+  (package\n+    (name \"python-macholib\")\n+    (version \"1.14\")\n+    (source\n+     (origin\n+       (method git-fetch)\n+       (uri (git-reference\n+             (url \"https://github.com/ronaldoussoren/macholib\")\n+             (commit (string-append \"v\" version))))\n+       (file-name (git-file-name name version))\n+       (sha256\n+        (base32\n+         \"0aislnnfsza9wl4f0vp45ivzlc0pzhp9d4r08700slrypn5flg42\"))))\n+    (build-system python-build-system)\n+    (propagated-inputs\n+     `((\"python-altgraph\" ,python-altgraph)))\n+    (arguments\n+     '(#:phases\n+       (modify-phases %standard-phases\n+         (add-after 'unpack 'disable-broken-tests\n+           (lambda _\n+             ;; This test is broken as there is no keyboard interrupt.\n+             (substitute* \"macholib_tests/test_command_line.py\"\n+               ((\"^(.*)class TestCmdLine\" line indent)\n+                (string-append indent\n+                               \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n+                               line)))\n+             (substitute* \"macholib_tests/test_dyld.py\"\n+               ((\"^(.*)def test_\\\\S+_find\" line indent)\n+                (string-append indent\n+                               \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n+                               line))\n+               ((\"^(.*)def testBasic\" line indent)\n+                (string-append indent\n+                               \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n+                               line))\n+               )\n+             #t)))))\n+    (home-page \"https://github.com/ronaldoussoren/macholib\")\n+    (synopsis \"Python library for analyzing and editing Mach-O headers\")\n+    (description \"macholib is a Macho-O header analyzer and editor. It's\n+typically used as a dependency analysis tool, and also to rewrite dylib\n+references in Mach-O headers to be @executable_path relative. Though this tool\n+targets a platform specific file format, it is pure python code that is platform\n+and endian independent.\")\n+    (license license:expat)))\n+\n+(define-public python-signapple\n+  (let ((commit \"b084cbbf44d5330448ffce0c7d118f75781b64bd\"))\n+    (package\n+      (name \"python-signapple\")\n+      (version (git-version \"0.1\" \"1\" commit))\n+      (source\n+       (origin\n+         (method git-fetch)\n+         (uri (git-reference\n+               (url \"https://github.com/achow101/signapple\")\n+               (commit commit)))\n+         (file-name (git-file-name name commit))\n+         (sha256\n+          (base32\n+           \"0k7inccl2mzac3wq4asbr0kl8s4cghm8982z54kfascqg45shv01\"))))\n+      (build-system python-build-system)\n+      (propagated-inputs\n+       `((\"python-asn1crypto\" ,python-asn1crypto)\n+         (\"python-oscrypto\" ,python-oscrypto)\n+         (\"python-certvalidator\" ,python-certvalidator)\n+         (\"python-elfesteem\" ,python-elfesteem)\n+         (\"python-requests\" ,python-requests-2.25.1)\n+         (\"python-macholib\" ,python-macholib)\n+         (\"libcrypto\" ,openssl)))\n+      ;; There are no tests, but attempting to run python setup.py test leads to\n+      ;; problems, just disable the test\n+      (arguments '(#:tests? #f))\n+      (home-page \"https://github.com/achow101/signapple\")\n+      (synopsis \"Mach-O binary signature tool\")\n+      (description \"signapple is a Python tool for creating, verifying, and\n+inspecting signatures in Mach-O binaries.\")\n+      (license license:expat))))\n+\n+(define-public glibc-2.24\n+  (package\n+    (inherit glibc)\n+    (version \"2.24\")\n+    (source (origin\n+              (method git-fetch)\n+              (uri (git-reference\n+                    (url \"https://sourceware.org/git/glibc.git\")\n+                    (commit \"0d7f1ed30969886c8dde62fbf7d2c79967d4bace\")))\n+              (file-name (git-file-name \"glibc\" \"0d7f1ed30969886c8dde62fbf7d2c79967d4bace\"))\n+              (sha256\n+               (base32\n+                \"0g5hryia5v1k0qx97qffgwzrz4lr4jw3s5kj04yllhswsxyjbic3\"))\n+              (patches (search-our-patches \"glibc-ldd-x86_64.patch\"\n+                                           \"glibc-versioned-locpath.patch\"\n+                                           \"glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch\"\n+                                           \"glibc-2.24-no-build-time-cxx-header-run.patch\"))))))\n+\n+(define glibc-2.27/bitcoin-patched\n+  (package-with-extra-patches glibc-2.27\n+    (search-our-patches \"glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch\")))\n \n (packages->manifest\n  (append\n   (list ;; The Basics\n-        bash-minimal\n+        bash\n         which\n         coreutils\n         util-linux\n@@ -167,32 +613,45 @@ chain for \" target \" development.\"))\n         patch\n         gawk\n         sed\n+        moreutils\n         ;; Compression and archiving\n         tar\n         bzip2\n         gzip\n         xz\n         zlib\n+        (list zlib \"static\")\n         ;; Build tools\n         gnu-make\n         libtool\n         autoconf\n         automake\n         pkg-config\n+        bison\n         ;; Scripting\n         perl\n-        python-3.7\n+        python-3\n         ;; Git\n         git\n-        ;; Native gcc 9 toolchain targeting glibc 2.27\n-        (make-gcc-toolchain gcc-9 glibc-2.27))\n+        ;; Tests\n+        lief\n+        ;; Native gcc 7 toolchain\n+        gcc-toolchain-7\n+        (list gcc-toolchain-7 \"static\"))\n   (let ((target (getenv \"HOST\")))\n     (cond ((string-suffix? \"-mingw32\" target)\n            ;; Windows\n-           (list zip (make-mingw-pthreads-cross-toolchain \"x86_64-w64-mingw32\") nsis-x86_64))\n-          ((string-contains target \"riscv64-linux-\")\n-           (list (make-bitcoin-cross-toolchain \"riscv64-linux-gnu\"\n-                                               #:base-gcc-for-libc gcc-7)))\n+           (list zip\n+                 (make-mingw-pthreads-cross-toolchain \"x86_64-w64-mingw32\")\n+                 (make-nsis-with-sde-support nsis-x86_64)\n+                 osslsigncode))\n           ((string-contains target \"-linux-\")\n-           (list (make-bitcoin-cross-toolchain target)))\n+           (list (cond ((string-contains target \"riscv64-\")\n+                        (make-bitcoin-cross-toolchain target\n+                                                      #:base-libc glibc-2.27/bitcoin-patched\n+                                                      #:base-kernel-headers linux-libre-headers-4.19))\n+                       (else\n+                        (make-bitcoin-cross-toolchain target)))))\n+          ((string-contains target \"darwin\")\n+           (list clang-toolchain-10 binutils imagemagick libtiff librsvg font-tuffy cmake xorriso python-signapple))\n           (else '())))))"
      },
      {
        "sha": "8f88eb9dfd5926e6ef83066ccb8ca51a12a5e980",
        "filename": "contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "status": "added",
        "additions": 171,
        "deletions": 0,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,171 @@\n+Description: Add disable opposites to the security-related flags\n+Author: Stephen Kitt <skitt@debian.org>\n+\n+This patch adds \"no-\" variants to disable the various security flags:\n+\"no-dynamicbase\", \"no-nxcompat\", \"no-high-entropy-va\", \"disable-reloc-section\".\n+\n+--- a/ld/emultempl/pe.em\n++++ b/ld/emultempl/pe.em\n+@@ -259,9 +261,11 @@\n+ \t\t\t\t\t(OPTION_ENABLE_LONG_SECTION_NAMES + 1)\n+ /* DLLCharacteristics flags.  */\n+ #define OPTION_DYNAMIC_BASE\t\t(OPTION_DISABLE_LONG_SECTION_NAMES + 1)\n+-#define OPTION_FORCE_INTEGRITY\t\t(OPTION_DYNAMIC_BASE + 1)\n++#define OPTION_NO_DYNAMIC_BASE\t\t(OPTION_DYNAMIC_BASE + 1)\n++#define OPTION_FORCE_INTEGRITY\t\t(OPTION_NO_DYNAMIC_BASE + 1)\n+ #define OPTION_NX_COMPAT\t\t(OPTION_FORCE_INTEGRITY + 1)\n+-#define OPTION_NO_ISOLATION\t\t(OPTION_NX_COMPAT + 1)\n++#define OPTION_NO_NX_COMPAT\t\t(OPTION_NX_COMPAT + 1)\n++#define OPTION_NO_ISOLATION\t\t(OPTION_NO_NX_COMPAT + 1)\n+ #define OPTION_NO_SEH\t\t\t(OPTION_NO_ISOLATION + 1)\n+ #define OPTION_NO_BIND\t\t\t(OPTION_NO_SEH + 1)\n+ #define OPTION_WDM_DRIVER\t\t(OPTION_NO_BIND + 1)\n+@@ -271,6 +275,7 @@\n+ #define OPTION_NO_INSERT_TIMESTAMP\t(OPTION_INSERT_TIMESTAMP + 1)\n+ #define OPTION_BUILD_ID\t\t\t(OPTION_NO_INSERT_TIMESTAMP + 1)\n+ #define OPTION_ENABLE_RELOC_SECTION\t(OPTION_BUILD_ID + 1)\n++#define OPTION_DISABLE_RELOC_SECTION\t(OPTION_ENABLE_RELOC_SECTION + 1)\n+ \n+ static void\n+ gld${EMULATION_NAME}_add_options\n+@@ -342,8 +347,10 @@\n+     {\"enable-long-section-names\", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},\n+     {\"disable-long-section-names\", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},\n+     {\"dynamicbase\",no_argument, NULL, OPTION_DYNAMIC_BASE},\n++    {\"no-dynamicbase\", no_argument, NULL, OPTION_NO_DYNAMIC_BASE},\n+     {\"forceinteg\", no_argument, NULL, OPTION_FORCE_INTEGRITY},\n+     {\"nxcompat\", no_argument, NULL, OPTION_NX_COMPAT},\n++    {\"no-nxcompat\", no_argument, NULL, OPTION_NO_NX_COMPAT},\n+     {\"no-isolation\", no_argument, NULL, OPTION_NO_ISOLATION},\n+     {\"no-seh\", no_argument, NULL, OPTION_NO_SEH},\n+     {\"no-bind\", no_argument, NULL, OPTION_NO_BIND},\n+@@ -351,6 +358,7 @@\n+     {\"tsaware\", no_argument, NULL, OPTION_TERMINAL_SERVER_AWARE},\n+     {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\n+     {\"enable-reloc-section\", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},\n++    {\"disable-reloc-section\", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},\n+     {NULL, no_argument, NULL, 0}\n+   };\n+ \n+@@ -485,9 +494,12 @@\n+                                        in object files\\n\"));\n+   fprintf (file, _(\"  --dynamicbase                      Image base address may be relocated using\\n\\\n+                                        address space layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-dynamicbase                   Image base address may not be relocated\\n\"));\n+   fprintf (file, _(\"  --enable-reloc-section             Create the base relocation table\\n\"));\n++  fprintf (file, _(\"  --disable-reloc-section            Disable the base relocation table\\n\"));\n+   fprintf (file, _(\"  --forceinteg               Code integrity checks are enforced\\n\"));\n+   fprintf (file, _(\"  --nxcompat                 Image is compatible with data execution prevention\\n\"));\n++  fprintf (file, _(\"  --no-nxcompat              Image is not compatible with data execution prevention\\n\"));\n+   fprintf (file, _(\"  --no-isolation             Image understands isolation but do not isolate the image\\n\"));\n+   fprintf (file, _(\"  --no-seh                   Image does not use SEH. No SE handler may\\n\\\n+                                        be called in this image\\n\"));\n+@@ -862,12 +874,21 @@\n+     case OPTION_ENABLE_RELOC_SECTION:\n+       pe_dll_enable_reloc_section = 1;\n+       break;\n++    case OPTION_DISABLE_RELOC_SECTION:\n++      pe_dll_enable_reloc_section = 0;\n++      /* fall through */\n++    case OPTION_NO_DYNAMIC_BASE:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;\n++      break;\n+     case OPTION_FORCE_INTEGRITY:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;\n+       break;\n+     case OPTION_NX_COMPAT:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n+       break;\n++    case OPTION_NO_NX_COMPAT:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n++      break;\n+     case OPTION_NO_ISOLATION:\n+       pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;\n+       break;\n+--- a/ld/emultempl/pep.em\n++++ b/ld/emultempl/pep.em\n+@@ -237,9 +240,12 @@\n+   OPTION_ENABLE_LONG_SECTION_NAMES,\n+   OPTION_DISABLE_LONG_SECTION_NAMES,\n+   OPTION_HIGH_ENTROPY_VA,\n++  OPTION_NO_HIGH_ENTROPY_VA,\n+   OPTION_DYNAMIC_BASE,\n++  OPTION_NO_DYNAMIC_BASE,\n+   OPTION_FORCE_INTEGRITY,\n+   OPTION_NX_COMPAT,\n++  OPTION_NO_NX_COMPAT,\n+   OPTION_NO_ISOLATION,\n+   OPTION_NO_SEH,\n+   OPTION_NO_BIND,\n+@@ -248,7 +254,8 @@\n+   OPTION_NO_INSERT_TIMESTAMP,\n+   OPTION_TERMINAL_SERVER_AWARE,\n+   OPTION_BUILD_ID,\n+-  OPTION_ENABLE_RELOC_SECTION\n++  OPTION_ENABLE_RELOC_SECTION,\n++  OPTION_DISABLE_RELOC_SECTION\n+ };\n+ \n+ static void\n+@@ -315,9 +322,12 @@\n+     {\"enable-long-section-names\", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},\n+     {\"disable-long-section-names\", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},\n+     {\"high-entropy-va\", no_argument, NULL, OPTION_HIGH_ENTROPY_VA},\n++    {\"no-high-entropy-va\", no_argument, NULL, OPTION_NO_HIGH_ENTROPY_VA},\n+     {\"dynamicbase\",no_argument, NULL, OPTION_DYNAMIC_BASE},\n++    {\"no-dynamicbase\", no_argument, NULL, OPTION_NO_DYNAMIC_BASE},\n+     {\"forceinteg\", no_argument, NULL, OPTION_FORCE_INTEGRITY},\n+     {\"nxcompat\", no_argument, NULL, OPTION_NX_COMPAT},\n++    {\"no-nxcompat\", no_argument, NULL, OPTION_NO_NX_COMPAT},\n+     {\"no-isolation\", no_argument, NULL, OPTION_NO_ISOLATION},\n+     {\"no-seh\", no_argument, NULL, OPTION_NO_SEH},\n+     {\"no-bind\", no_argument, NULL, OPTION_NO_BIND},\n+@@ -327,6 +337,7 @@\n+     {\"no-insert-timestamp\", no_argument, NULL, OPTION_NO_INSERT_TIMESTAMP},\n+     {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\n+     {\"enable-reloc-section\", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},\n++    {\"disable-reloc-section\", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},\n+     {NULL, no_argument, NULL, 0}\n+   };\n+ \n+@@ -448,11 +461,15 @@\n+                                        in object files\\n\"));\n+   fprintf (file, _(\"  --high-entropy-va                  Image is compatible with 64-bit address space\\n\\\n+                                        layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-high-entropy-va               Image is not compatible with 64-bit ASLR\\n\"));\n+   fprintf (file, _(\"  --dynamicbase                      Image base address may be relocated using\\n\\\n+                                        address space layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-dynamicbase                   Image base address may not be relocated\\n\"));\n+   fprintf (file, _(\"  --enable-reloc-section             Create the base relocation table\\n\"));\n++  fprintf (file, _(\"  --disable-reloc-section            Disable the base relocation table\\n\"));\n+   fprintf (file, _(\"  --forceinteg               Code integrity checks are enforced\\n\"));\n+   fprintf (file, _(\"  --nxcompat                 Image is compatible with data execution prevention\\n\"));\n++  fprintf (file, _(\"  --no-nxcompat              Image is not compatible with data execution prevention\\n\"));\n+   fprintf (file, _(\"  --no-isolation             Image understands isolation but do not isolate the image\\n\"));\n+   fprintf (file, _(\"  --no-seh                   Image does not use SEH; no SE handler may\\n\\\n+                                        be called in this image\\n\"));\n+@@ -809,12 +826,24 @@\n+     case OPTION_ENABLE_RELOC_SECTION:\n+       pep_dll_enable_reloc_section = 1;\n+       break;\n++    case OPTION_DISABLE_RELOC_SECTION:\n++      pep_dll_enable_reloc_section = 0;\n++      /* fall through */\n++    case OPTION_NO_DYNAMIC_BASE:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;\n++      /* fall through */\n++    case OPTION_NO_HIGH_ENTROPY_VA:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA;\n++      break;\n+     case OPTION_FORCE_INTEGRITY:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;\n+       break;\n+     case OPTION_NX_COMPAT:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n+       break;\n++    case OPTION_NO_NX_COMPAT:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n++      break;\n+     case OPTION_NO_ISOLATION:\n+       pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;\n+       break;"
      },
      {
        "sha": "f327c464f3ec3ca38140300e7e099bbe20afd6d3",
        "filename": "contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "status": "added",
        "additions": 400,
        "deletions": 0,
        "changes": 400,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,400 @@\n+guix: repro: Sort find output in libtool for gcc-8\n+\n+Otherwise the resulting .a static libraries (e.g. libstdc++.a) will not\n+be reproducible and end up making the Bitcoin binaries non-reproducible\n+as well.\n+\n+See: https://reproducible-builds.org/docs/archives/#gnu-libtool\n+\n+diff --git a/gcc/configure b/gcc/configure\n+index 97ba7d7d69c..e37a96f0c0c 100755\n+--- a/gcc/configure\n++++ b/gcc/configure\n+@@ -19720,20 +19720,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n+ \t      prelink_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n+-\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n++\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n+ \t      old_archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n+-\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n++\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n+ \t\t$RANLIB $oldlib'\n+ \t      archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+ \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n+ \t      ;;\n+ \t    *) # Version 6 and above use weak symbols\n+ \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+diff --git a/libcc1/configure b/libcc1/configure\n+index f53a121611c..5740ca90cab 100755\n+--- a/libcc1/configure\n++++ b/libcc1/configure\n+@@ -12221,20 +12221,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n+ \t      prelink_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n+-\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n++\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n+ \t      old_archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n+-\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n++\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n+ \t\t$RANLIB $oldlib'\n+ \t      archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+ \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n+ \t      ;;\n+ \t    *) # Version 6 and above use weak symbols\n+ \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+diff --git a/libffi/configure b/libffi/configure\n+index 790a291011f..54b1ac18306 100755\n+--- a/libffi/configure\n++++ b/libffi/configure\n+@@ -12661,20 +12661,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n+ \t      prelink_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n+-\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n++\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n+ \t      old_archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n+-\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n++\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n+ \t\t$RANLIB $oldlib'\n+ \t      archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+ \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n+ \t      ;;\n+ \t    *) # Version 6 and above use weak symbols\n+ \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+diff --git a/libgo/config/libtool.m4 b/libgo/config/libtool.m4\n+index f7005947454..8a84417b828 100644\n+--- a/libgo/config/libtool.m4\n++++ b/libgo/config/libtool.m4\n+@@ -6010,20 +6010,20 @@ if test \"$_lt_caught_CXX_error\" != yes; then\n+ \t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n+-\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n++\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n+ \t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n+-\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n++\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n+ \t\t$RANLIB $oldlib'\n+ \t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+ \t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n+ \t      ;;\n+ \t    *) # Version 6 and above use weak symbols\n+ \t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+diff --git a/libgo/config/ltmain.sh b/libgo/config/ltmain.sh\n+index ce66b44906a..0f81c401407 100644\n+--- a/libgo/config/ltmain.sh\n++++ b/libgo/config/ltmain.sh\n+@@ -2917,7 +2917,7 @@ func_extract_archives ()\n+ \t    darwin_file=\n+ \t    darwin_files=\n+ \t    for darwin_file in $darwin_filelist; do\n+-\t      darwin_files=`find unfat-$$ -name $darwin_file -print | $NL2SP`\n++\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n+ \t      $LIPO -create -output \"$darwin_file\" $darwin_files\n+ \t    done # $darwin_filelist\n+ \t    $RM -rf unfat-$$\n+@@ -2932,7 +2932,7 @@ func_extract_archives ()\n+         func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n+ \t;;\n+       esac\n+-      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | $NL2SP`\n++      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n+     done\n+ \n+     func_extract_archives_result=\"$my_oldobjs\"\n+diff --git a/libhsail-rt/configure b/libhsail-rt/configure\n+index a4fcc10c1f9..8e671229fcd 100755\n+--- a/libhsail-rt/configure\n++++ b/libhsail-rt/configure\n+@@ -12244,20 +12244,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n+ \t      prelink_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n+-\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n++\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n+ \t      old_archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n+-\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n++\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n+ \t\t$RANLIB $oldlib'\n+ \t      archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+ \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n+ \t      ;;\n+ \t    *) # Version 6 and above use weak symbols\n+ \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+diff --git a/libitm/configure b/libitm/configure\n+index dbf386db434..29d4f10611f 100644\n+--- a/libitm/configure\n++++ b/libitm/configure\n+@@ -13067,20 +13067,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n+ \t      prelink_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n+-\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n++\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n+ \t      old_archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n+-\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n++\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n+ \t\t$RANLIB $oldlib'\n+ \t      archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+ \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n+ \t      ;;\n+ \t    *) # Version 6 and above use weak symbols\n+ \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+diff --git a/liboffloadmic/configure b/liboffloadmic/configure\n+index f873716991b..7aa9186b10e 100644\n+--- a/liboffloadmic/configure\n++++ b/liboffloadmic/configure\n+@@ -12379,20 +12379,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n+ \t      prelink_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n+-\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n++\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n+ \t      old_archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n+-\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n++\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n+ \t\t$RANLIB $oldlib'\n+ \t      archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+ \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n+ \t      ;;\n+ \t    *) # Version 6 and above use weak symbols\n+ \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+diff --git a/liboffloadmic/plugin/configure b/liboffloadmic/plugin/configure\n+index c031eb3e7fa..67fc7368f21 100644\n+--- a/liboffloadmic/plugin/configure\n++++ b/liboffloadmic/plugin/configure\n+@@ -12086,20 +12086,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n+ \t      prelink_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n+-\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n++\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n+ \t      old_archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n+-\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n++\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n+ \t\t$RANLIB $oldlib'\n+ \t      archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+ \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n+ \t      ;;\n+ \t    *) # Version 6 and above use weak symbols\n+ \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+diff --git a/libsanitizer/configure b/libsanitizer/configure\n+index 4695bc7d4f7..cb7d25c07e6 100755\n+--- a/libsanitizer/configure\n++++ b/libsanitizer/configure\n+@@ -13308,20 +13308,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n+ \t      prelink_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n+-\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n++\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n+ \t      old_archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n+-\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n++\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n+ \t\t$RANLIB $oldlib'\n+ \t      archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+ \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n+ \t      ;;\n+ \t    *) # Version 6 and above use weak symbols\n+ \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+diff --git a/libstdc++-v3/configure b/libstdc++-v3/configure\n+index 61457e940ec..21ef1f61e41 100755\n+--- a/libstdc++-v3/configure\n++++ b/libstdc++-v3/configure\n+@@ -13087,20 +13087,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n+ \t      prelink_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n+-\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n++\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n+ \t      old_archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n+-\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n++\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n+ \t\t$RANLIB $oldlib'\n+ \t      archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+ \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n+ \t      ;;\n+ \t    *) # Version 6 and above use weak symbols\n+ \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+diff --git a/libtool.m4 b/libtool.m4\n+index 24d13f34409..940faaa161d 100644\n+--- a/libtool.m4\n++++ b/libtool.m4\n+@@ -6005,20 +6005,20 @@ if test \"$_lt_caught_CXX_error\" != yes; then\n+ \t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n+-\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n++\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n+ \t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n+-\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n++\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n+ \t\t$RANLIB $oldlib'\n+ \t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+ \t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n+ \t      ;;\n+ \t    *) # Version 6 and above use weak symbols\n+ \t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+diff --git a/libvtv/configure b/libvtv/configure\n+index a197f750453..31ab3a0637b 100755\n+--- a/libvtv/configure\n++++ b/libvtv/configure\n+@@ -13339,20 +13339,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n+ \t      prelink_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n+-\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n++\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n+ \t      old_archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n+-\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n++\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n+ \t\t$RANLIB $oldlib'\n+ \t      archive_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+ \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n+ \t\trm -rf $tpldir~\n+ \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n+-\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n++\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n+ \t      ;;\n+ \t    *) # Version 6 and above use weak symbols\n+ \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n+diff --git a/ltmain.sh b/ltmain.sh\n+index 9503ec85d70..79f9ba89af5 100644\n+--- a/ltmain.sh\n++++ b/ltmain.sh\n+@@ -2917,7 +2917,7 @@ func_extract_archives ()\n+ \t    darwin_file=\n+ \t    darwin_files=\n+ \t    for darwin_file in $darwin_filelist; do\n+-\t      darwin_files=`find unfat-$$ -name $darwin_file -print | $NL2SP`\n++\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n+ \t      $LIPO -create -output \"$darwin_file\" $darwin_files\n+ \t    done # $darwin_filelist\n+ \t    $RM -rf unfat-$$\n+@@ -2932,7 +2932,7 @@ func_extract_archives ()\n+         func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n+ \t;;\n+       esac\n+-      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | $NL2SP`\n++      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n+     done\n+ \n+     func_extract_archives_result=\"$my_oldobjs\""
      },
      {
        "sha": "5c4d0c6ebe19699444a222e7fc0ec8bdd175ea3a",
        "filename": "contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,62 @@\n+https://sourceware.org/git/?p=glibc.git;a=commit;h=a68ba2f3cd3cbe32c1f31e13c20ed13487727b32\n+\n+commit 6b02af31e9a721bb15a11380cd22d53b621711f8\n+Author: Szabolcs Nagy <szabolcs.nagy@arm.com>\n+Date:   Wed Oct 18 17:26:23 2017 +0100\n+\n+    [AARCH64] Rewrite elf_machine_load_address using _DYNAMIC symbol\n+    \n+    This patch rewrites aarch64 elf_machine_load_address to use special _DYNAMIC\n+    symbol instead of _dl_start.\n+    \n+    The static address of _DYNAMIC symbol is stored in the first GOT entry.\n+    Here is the change which makes this solution work (part of binutils 2.24):\n+    https://sourceware.org/ml/binutils/2013-06/msg00248.html\n+    \n+    i386, x86_64 targets use the same method to do this as well.\n+    \n+    The original implementation relies on a trick that R_AARCH64_ABS32 relocation\n+    being resolved at link time and the static address fits in the 32bits.\n+    However, in LP64, normally, the address is defined to be 64 bit.\n+    \n+    Here is the C version one which should be portable in all cases.\n+    \n+            * sysdeps/aarch64/dl-machine.h (elf_machine_load_address): Use\n+            _DYNAMIC symbol to calculate load address.\n+\n+diff --git a/sysdeps/aarch64/dl-machine.h b/sysdeps/aarch64/dl-machine.h\n+index e86d8b5b63..5a5b8a5de5 100644\n+--- a/sysdeps/aarch64/dl-machine.h\n++++ b/sysdeps/aarch64/dl-machine.h\n+@@ -49,26 +49,11 @@ elf_machine_load_address (void)\n+   /* To figure out the load address we use the definition that for any symbol:\n+      dynamic_addr(symbol) = static_addr(symbol) + load_addr\n+ \n+-     The choice of symbol is arbitrary. The static address we obtain\n+-     by constructing a non GOT reference to the symbol, the dynamic\n+-     address of the symbol we compute using adrp/add to compute the\n+-     symbol's address relative to the PC.\n+-     This depends on 32bit relocations being resolved at link time\n+-     and that the static address fits in the 32bits.  */\n+-\n+-  ElfW(Addr) static_addr;\n+-  ElfW(Addr) dynamic_addr;\n+-\n+-  asm (\"\t\t\t\t\t\\n\"\n+-\"\tadrp\t%1, _dl_start;\t\t\t\\n\"\n+-\"\tadd\t%1, %1, #:lo12:_dl_start\t\\n\"\n+-\"\tldr\t%w0, 1f\t\t\t\t\\n\"\n+-\"\tb\t2f\t\t\t\t\\n\"\n+-\"1:\t\t\t\t\t\t\\n\"\n+-\"\t.word\t_dl_start\t\t\t\\n\"\n+-\"2:\t\t\t\t\t\t\\n\"\n+-    : \"=r\" (static_addr),  \"=r\" (dynamic_addr));\n+-  return dynamic_addr - static_addr;\n++    _DYNAMIC sysmbol is used here as its link-time address stored in\n++    the special unrelocated first GOT entry.  */\n++\n++    extern ElfW(Dyn) _DYNAMIC[] attribute_hidden;\n++    return (ElfW(Addr)) &_DYNAMIC - elf_machine_dynamic ();\n+ }\n+ \n+ /* Set up the loaded object described by L so its unrelocated PLT"
      },
      {
        "sha": "11fe7fdc99c05c89c01ca7d2278be2d17f109aef",
        "filename": "contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,100 @@\n+https://sourceware.org/git/?p=glibc.git;a=commit;h=fc3e1337be1c6935ab58bd13520f97a535cf70cc\n+\n+commit dc23a45db566095e83ff0b7a57afc87fb5ca89a1\n+Author: Florian Weimer <fweimer@redhat.com>\n+Date:   Wed Sep 21 10:45:32 2016 +0200\n+\n+    Avoid running $(CXX) during build to obtain header file paths\n+    \n+    This reduces the build time somewhat and is particularly noticeable\n+    during rebuilds with few code changes.\n+\n+diff --git a/Makerules b/Makerules\n+index 7e4077ee50..c338850de5 100644\n+--- a/Makerules\n++++ b/Makerules\n+@@ -121,14 +121,10 @@ ifneq (,$(CXX))\n+ # will be used instead of /usr/include/stdlib.h and /usr/include/math.h.\n+ before-compile := $(common-objpfx)cstdlib $(common-objpfx)cmath \\\n+ \t          $(before-compile)\n+-cstdlib=$(shell echo \"\\#include <cstdlib>\" | $(CXX) -M -MP -x c++ - \\\n+-\t\t| sed -n \"/cstdlib:/{s/:$$//;p}\")\n+-$(common-objpfx)cstdlib: $(cstdlib)\n++$(common-objpfx)cstdlib: $(c++-cstdlib-header)\n+ \t$(INSTALL_DATA) $< $@T\n+ \t$(move-if-change) $@T $@\n+-cmath=$(shell echo \"\\#include <cmath>\" | $(CXX) -M -MP -x c++ - \\\n+-\t\t| sed -n \"/cmath:/{s/:$$//;p}\")\n+-$(common-objpfx)cmath: $(cmath)\n++$(common-objpfx)cmath: $(c++-cmath-header)\n+ \t$(INSTALL_DATA) $< $@T\n+ \t$(move-if-change) $@T $@\n+ endif\n+diff --git a/config.make.in b/config.make.in\n+index 95c6f36876..04a8b3ed7f 100644\n+--- a/config.make.in\n++++ b/config.make.in\n+@@ -45,6 +45,8 @@ defines = @DEFINES@\n+ sysheaders = @sysheaders@\n+ sysincludes = @SYSINCLUDES@\n+ c++-sysincludes = @CXX_SYSINCLUDES@\n++c++-cstdlib-header = @CXX_CSTDLIB_HEADER@\n++c++-cmath-header = @CXX_CMATH_HEADER@\n+ all-warnings = @all_warnings@\n+ enable-werror = @enable_werror@\n+ \n+diff --git a/configure b/configure\n+index 17625e1041..6ff252744b 100755\n+--- a/configure\n++++ b/configure\n+@@ -635,6 +635,8 @@ BISON\n+ INSTALL_INFO\n+ PERL\n+ BASH_SHELL\n++CXX_CMATH_HEADER\n++CXX_CSTDLIB_HEADER\n+ CXX_SYSINCLUDES\n+ SYSINCLUDES\n+ AUTOCONF\n+@@ -5054,6 +5056,18 @@ fi\n+ \n+ \n+ \n++# Obtain some C++ header file paths.  This is used to make a local\n++# copy of those headers in Makerules.\n++if test -n \"$CXX\"; then\n++  find_cxx_header () {\n++    echo \"#include <$1>\" | $CXX -M -MP -x c++ - | sed -n \"/$1:/{s/:\\$//;p}\"\n++  }\n++  CXX_CSTDLIB_HEADER=\"$(find_cxx_header cstdlib)\"\n++  CXX_CMATH_HEADER=\"$(find_cxx_header cmath)\"\n++fi\n++\n++\n++\n+ # Test if LD_LIBRARY_PATH contains the notation for the current directory\n+ # since this would lead to problems installing/building glibc.\n+ # LD_LIBRARY_PATH contains the current directory if one of the following\n+diff --git a/configure.ac b/configure.ac\n+index 33bcd62180..9938ab0dc2 100644\n+--- a/configure.ac\n++++ b/configure.ac\n+@@ -1039,6 +1039,18 @@ fi\n+ AC_SUBST(SYSINCLUDES)\n+ AC_SUBST(CXX_SYSINCLUDES)\n+ \n++# Obtain some C++ header file paths.  This is used to make a local\n++# copy of those headers in Makerules.\n++if test -n \"$CXX\"; then\n++  find_cxx_header () {\n++    echo \"#include <$1>\" | $CXX -M -MP -x c++ - | sed -n \"/$1:/{s/:\\$//;p}\"\n++  }\n++  CXX_CSTDLIB_HEADER=\"$(find_cxx_header cstdlib)\"\n++  CXX_CMATH_HEADER=\"$(find_cxx_header cmath)\"\n++fi\n++AC_SUBST(CXX_CSTDLIB_HEADER)\n++AC_SUBST(CXX_CMATH_HEADER)\n++\n+ # Test if LD_LIBRARY_PATH contains the notation for the current directory\n+ # since this would lead to problems installing/building glibc.\n+ # LD_LIBRARY_PATH contains the current directory if one of the following"
      },
      {
        "sha": "d6217157ee57e9b67af70db0fe22964caa34afb4",
        "filename": "contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,72 @@\n+https://sourceware.org/git/?p=glibc.git;a=commit;h=0b9c84906f653978fb8768c7ebd0ee14a47e662e\n+\n+From 562c52cc81a4e456a62e6455feb32732049e9070 Mon Sep 17 00:00:00 2001\n+From: \"H.J. Lu\" <hjl.tools@gmail.com>\n+Date: Mon, 31 Dec 2018 09:26:42 -0800\n+Subject: [PATCH] riscv: Use __has_include__ to include <asm/syscalls.h> [BZ\n+ #24022]\n+\n+<asm/syscalls.h> has been removed by\n+\n+commit 27f8899d6002e11a6e2d995e29b8deab5aa9cc25\n+Author: David Abdurachmanov <david.abdurachmanov@gmail.com>\n+Date:   Thu Nov 8 20:02:39 2018 +0100\n+\n+    riscv: add asm/unistd.h UAPI header\n+\n+    Marcin Juszkiewicz reported issues while generating syscall table for riscv\n+    using 4.20-rc1. The patch refactors our unistd.h files to match some other\n+    architectures.\n+\n+    - Add asm/unistd.h UAPI header, which has __ARCH_WANT_NEW_STAT only for 64-bit\n+    - Remove asm/syscalls.h UAPI header and merge to asm/unistd.h\n+    - Adjust kernel asm/unistd.h\n+\n+    So now asm/unistd.h UAPI header should show all syscalls for riscv.\n+\n+<asm/syscalls.h> may be restored by\n+\n+Subject: [PATCH] riscv: restore asm/syscalls.h UAPI header\n+Date: Tue, 11 Dec 2018 09:09:35 +0100\n+\n+UAPI header asm/syscalls.h was merged into UAPI asm/unistd.h header,\n+which did resolve issue with missing syscalls macros resulting in\n+glibc (2.28) build failure. It also broke glibc in a different way:\n+asm/syscalls.h is being used by glibc. I noticed this while doing\n+Fedora 30/Rawhide mass rebuild.\n+\n+The patch returns asm/syscalls.h header and incl. it into asm/unistd.h.\n+I plan to send a patch to glibc to use asm/unistd.h instead of\n+asm/syscalls.h\n+\n+In the meantime, we use __has_include__, which was added to GCC 5, to\n+check if <asm/syscalls.h> exists before including it.  Tested with\n+build-many-glibcs.py for riscv against kernel 4.19.12 and 4.20-rc7.\n+\n+\t[BZ #24022]\n+\t* sysdeps/unix/sysv/linux/riscv/flush-icache.c: Check if\n+\t<asm/syscalls.h> exists with __has_include__ before including it.\n+---\n+ sysdeps/unix/sysv/linux/riscv/flush-icache.c | 6 +++++-\n+ 1 file changed, 5 insertions(+), 1 deletion(-)\n+\n+diff --git a/sysdeps/unix/sysv/linux/riscv/flush-icache.c b/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n+index d612ef4c6c..0b2042620b 100644\n+--- a/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n++++ b/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n+@@ -21,7 +21,11 @@\n+ #include <stdlib.h>\n+ #include <atomic.h>\n+ #include <sys/cachectl.h>\n+-#include <asm/syscalls.h>\n++#if __has_include__ (<asm/syscalls.h>)\n++# include <asm/syscalls.h>\n++#else\n++# include <asm/unistd.h>\n++#endif\n+ \n+ typedef int (*func_type) (void *, void *, unsigned long int);\n+ \n+-- \n+2.31.1\n+"
      },
      {
        "sha": "b1b6d5a54863cbcb6a2d92e3bdb9127defbb4d99",
        "filename": "contrib/guix/patches/glibc-ldd-x86_64.patch",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/glibc-ldd-x86_64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/glibc-ldd-x86_64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-ldd-x86_64.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,10 @@\n+By default, 'RTDLLIST' in 'ldd' refers to 'lib64/ld-linux-x86-64.so', whereas\n+it's in 'lib/' for us.  This patch fixes that.\n+\n+--- glibc-2.17/sysdeps/unix/sysv/linux/x86_64/ldd-rewrite.sed\t2012-12-25 04:02:13.000000000 +0100\n++++ glibc-2.17/sysdeps/unix/sysv/linux/x86_64/ldd-rewrite.sed\t2013-09-15 23:08:03.000000000 +0200\n+@@ -1,3 +1,3 @@\n+ /LD_TRACE_LOADED_OBJECTS=1/a\\\n+ add_env=\"$add_env LD_LIBRARY_VERSION=\\\\$verify_out\"\n+-s_^\\(RTLDLIST=\\)\\(.*lib\\)\\(\\|64\\|x32\\)\\(/[^/]*\\)\\(-x86-64\\|-x32\\)\\(\\.so\\.[0-9.]*\\)[ \t]*$_\\1\"\\2\\4\\6 \\264\\4-x86-64\\6 \\2x32\\4-x32\\6\"_\n++s_^\\(RTLDLIST=\\)\\(.*lib\\)\\(\\|64\\|x32\\)\\(/[^/]*\\)\\(-x86-64\\|-x32\\)\\(\\.so\\.[0-9.]*\\)[ \t]*$_\\1\"\\2\\4\\6 \\2\\4-x86-64\\6 \\2x32\\4-x32\\6\"_"
      },
      {
        "sha": "bc7652127fa5a2aca5e7cea1793b5679ac17aa06",
        "filename": "contrib/guix/patches/glibc-versioned-locpath.patch",
        "status": "added",
        "additions": 240,
        "deletions": 0,
        "changes": 240,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/glibc-versioned-locpath.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/glibc-versioned-locpath.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-versioned-locpath.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,240 @@\n+The format of locale data can be incompatible between libc versions, and\n+loading incompatible data can lead to 'setlocale' returning EINVAL at best\n+or triggering an assertion failure at worst.  See\n+https://lists.gnu.org/archive/html/guix-devel/2015-09/msg00717.html\n+for background information.\n+\n+To address that, this patch changes libc to honor a new 'GUIX_LOCPATH'\n+variable, and to look for locale data in version-specific sub-directories of\n+that variable.  So, if GUIX_LOCPATH=/foo:/bar, locale data is searched for in\n+/foo/X.Y and /bar/X.Y, where X.Y is the libc version number.\n+\n+That way, a single 'GUIX_LOCPATH' setting can work even if different libc\n+versions coexist on the system.\n+\n+--- a/locale/newlocale.c\n++++ b/locale/newlocale.c\n+@@ -30,6 +30,7 @@\n+ /* Lock for protecting global data.  */\n+ __libc_rwlock_define (extern , __libc_setlocale_lock attribute_hidden)\n+ \n++extern error_t compute_locale_search_path (char **, size_t *);\n+ \n+ /* Use this when we come along an error.  */\n+ #define ERROR_RETURN\t\t\t\t\t\t\t      \\\n+@@ -48,7 +49,6 @@ __newlocale (int category_mask, const char *locale, __locale_t base)\n+   __locale_t result_ptr;\n+   char *locale_path;\n+   size_t locale_path_len;\n+-  const char *locpath_var;\n+   int cnt;\n+   size_t names_len;\n+ \n+@@ -102,17 +102,8 @@ __newlocale (int category_mask, const char *locale, __locale_t base)\n+   locale_path = NULL;\n+   locale_path_len = 0;\n+ \n+-  locpath_var = getenv (\"LOCPATH\");\n+-  if (locpath_var != NULL && locpath_var[0] != '\\0')\n+-    {\n+-      if (__argz_create_sep (locpath_var, ':',\n+-\t\t\t     &locale_path, &locale_path_len) != 0)\n+-\treturn NULL;\n+-\n+-      if (__argz_add_sep (&locale_path, &locale_path_len,\n+-\t\t\t  _nl_default_locale_path, ':') != 0)\n+-\treturn NULL;\n+-    }\n++  if (compute_locale_search_path (&locale_path, &locale_path_len) != 0)\n++    return NULL;\n+ \n+   /* Get the names for the locales we are interested in.  We either\n+      allow a composite name or a single name.  */\n+diff --git a/locale/setlocale.c b/locale/setlocale.c\n+index ead030d..0c0e314 100644\n+--- a/locale/setlocale.c\n++++ b/locale/setlocale.c\n+@@ -215,12 +215,65 @@ setdata (int category, struct __locale_data *data)\n+     }\n+ }\n+ \n++/* Return in *LOCALE_PATH and *LOCALE_PATH_LEN the locale data search path as\n++   a colon-separated list.  Return ENOMEN on error, zero otherwise.  */\n++error_t\n++compute_locale_search_path (char **locale_path, size_t *locale_path_len)\n++{\n++  char* guix_locpath_var = getenv (\"GUIX_LOCPATH\");\n++  char *locpath_var = getenv (\"LOCPATH\");\n++\n++  if (guix_locpath_var != NULL && guix_locpath_var[0] != '\\0')\n++    {\n++      /* Entries in 'GUIX_LOCPATH' take precedence over 'LOCPATH'.  These\n++\t entries are systematically prefixed with \"/X.Y\" where \"X.Y\" is the\n++\t libc version.  */\n++      if (__argz_create_sep (guix_locpath_var, ':',\n++\t\t\t     locale_path, locale_path_len) != 0\n++\t  || __argz_suffix_entries (locale_path, locale_path_len,\n++\t\t\t\t    \"/\" VERSION) != 0)\n++\tgoto bail_out;\n++    }\n++\n++  if (locpath_var != NULL && locpath_var[0] != '\\0')\n++    {\n++      char *reg_locale_path = NULL;\n++      size_t reg_locale_path_len = 0;\n++\n++      if (__argz_create_sep (locpath_var, ':',\n++\t\t\t     &reg_locale_path, &reg_locale_path_len) != 0)\n++\tgoto bail_out;\n++\n++      if (__argz_append (locale_path, locale_path_len,\n++\t\t\t reg_locale_path, reg_locale_path_len) != 0)\n++\tgoto bail_out;\n++\n++      free (reg_locale_path);\n++    }\n++\n++  if (*locale_path != NULL)\n++    {\n++      /* Append the system default locale directory.  */\n++      if (__argz_add_sep (locale_path, locale_path_len,\n++\t\t\t  _nl_default_locale_path, ':') != 0)\n++\tgoto bail_out;\n++    }\n++\n++  return 0;\n++\n++ bail_out:\n++  free (*locale_path);\n++  *locale_path = NULL;\n++  *locale_path_len = 0;\n++\n++  return ENOMEM;\n++}\n++\n+ char *\n+ setlocale (int category, const char *locale)\n+ {\n+   char *locale_path;\n+   size_t locale_path_len;\n+-  const char *locpath_var;\n+   char *composite;\n+ \n+   /* Sanity check for CATEGORY argument.  */\n+@@ -251,17 +304,10 @@ setlocale (int category, const char *locale)\n+   locale_path = NULL;\n+   locale_path_len = 0;\n+ \n+-  locpath_var = getenv (\"LOCPATH\");\n+-  if (locpath_var != NULL && locpath_var[0] != '\\0')\n++  if (compute_locale_search_path (&locale_path, &locale_path_len) != 0)\n+     {\n+-      if (__argz_create_sep (locpath_var, ':',\n+-\t\t\t     &locale_path, &locale_path_len) != 0\n+-\t  || __argz_add_sep (&locale_path, &locale_path_len,\n+-\t\t\t     _nl_default_locale_path, ':') != 0)\n+-\t{\n+-\t  __libc_rwlock_unlock (__libc_setlocale_lock);\n+-\t  return NULL;\n+-\t}\n++      __libc_rwlock_unlock (__libc_setlocale_lock);\n++      return NULL;\n+     }\n+ \n+   if (category == LC_ALL)\n+diff --git a/string/Makefile b/string/Makefile\n+index 8424a61..f925503 100644\n+--- a/string/Makefile\n++++ b/string/Makefile\n+@@ -38,7 +38,7 @@ routines\t:= strcat strchr strcmp strcoll strcpy strcspn\t\t\\\n+ \t\t   swab strfry memfrob memmem rawmemchr strchrnul\t\\\n+ \t\t   $(addprefix argz-,append count create ctsep next\t\\\n+ \t\t\t\t     delete extract insert stringify\t\\\n+-\t\t\t\t     addsep replace)\t\t\t\\\n++\t\t\t\t     addsep replace suffix)\t\t\\\n+ \t\t   envz basename\t\t\t\t\t\\\n+ \t\t   strcoll_l strxfrm_l string-inlines memrchr\t\t\\\n+ \t\t   xpg-strerror strerror_l\n+diff --git a/string/argz-suffix.c b/string/argz-suffix.c\n+new file mode 100644\n+index 0000000..505b0f2\n+--- /dev/null\n++++ b/string/argz-suffix.c\n+@@ -0,0 +1,56 @@\n++/* Copyright (C) 2015 Free Software Foundation, Inc.\n++   This file is part of the GNU C Library.\n++   Contributed by Ludovic Court\u00e8s <ludo@gnu.org>.\n++\n++   The GNU C Library is free software; you can redistribute it and/or\n++   modify it under the terms of the GNU Lesser General Public\n++   License as published by the Free Software Foundation; either\n++   version 2.1 of the License, or (at your option) any later version.\n++\n++   The GNU C Library is distributed in the hope that it will be useful,\n++   but WITHOUT ANY WARRANTY; without even the implied warranty of\n++   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n++   Lesser General Public License for more details.\n++\n++   You should have received a copy of the GNU Lesser General Public\n++   License along with the GNU C Library; if not, see\n++   <http://www.gnu.org/licenses/>.  */\n++\n++#include <argz.h>\n++#include <errno.h>\n++#include <stdlib.h>\n++#include <string.h>\n++\n++\n++error_t\n++__argz_suffix_entries (char **argz, size_t *argz_len, const char *suffix)\n++\n++{\n++  size_t suffix_len = strlen (suffix);\n++  size_t count = __argz_count (*argz, *argz_len);\n++  size_t new_argz_len = *argz_len + count * suffix_len;\n++  char *new_argz = malloc (new_argz_len);\n++\n++  if (new_argz)\n++    {\n++      char *p = new_argz, *entry;\n++\n++      for (entry = *argz;\n++\t   entry != NULL;\n++\t   entry = argz_next (*argz, *argz_len, entry))\n++\t{\n++\t  p = stpcpy (p, entry);\n++\t  p = stpcpy (p, suffix);\n++\t  p++;\n++\t}\n++\n++      free (*argz);\n++      *argz = new_argz;\n++      *argz_len = new_argz_len;\n++\n++      return 0;\n++    }\n++  else\n++    return ENOMEM;\n++}\n++weak_alias (__argz_suffix_entries, argz_suffix_entries)\n+diff --git a/string/argz.h b/string/argz.h\n+index bb62a31..d276a35 100644\n+--- a/string/argz.h\n++++ b/string/argz.h\n+@@ -134,6 +134,16 @@ extern error_t argz_replace (char **__restrict __argz,\n+ \t\t\t     const char *__restrict __str,\n+ \t\t\t     const char *__restrict __with,\n+ \t\t\t     unsigned int *__restrict __replace_count);\n++\n++/* Suffix each entry of ARGZ & ARGZ_LEN with SUFFIX.  Return 0 on success,\n++   and ENOMEN if memory cannot be allocated.  */\n++extern error_t __argz_suffix_entries (char **__restrict __argz,\n++\t\t\t\t      size_t *__restrict __argz_len,\n++\t\t\t\t      const char *__restrict __suffix);\n++extern error_t argz_suffix_entries (char **__restrict __argz,\n++\t\t\t\t    size_t *__restrict __argz_len,\n++\t\t\t\t    const char *__restrict __suffix);\n++\n+ \f\n+ /* Returns the next entry in ARGZ & ARGZ_LEN after ENTRY, or NULL if there\n+    are no more.  If entry is NULL, then the first entry is returned.  This"
      },
      {
        "sha": "f58406a7a08901a413dec1223f1f881e04de956d",
        "filename": "contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/nsis-SConstruct-sde-support.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,18 @@\n+https://github.com/kichik/nsis/pull/13\n+https://sourceforge.net/p/nsis/code/7248/\n+\n+diff --git a/SConstruct b/SConstruct\n+index e8252c9..41786f2 100755\n+--- a/SConstruct\n++++ b/SConstruct\n+@@ -95,8 +95,8 @@ default_doctype = 'html'\n+ if defenv.WhereIs('hhc', os.environ['PATH']):\n+ \tdefault_doctype = 'chm'\n+ \n+-from time import strftime, gmtime\n+-cvs_version = strftime('%d-%b-%Y.cvs', gmtime())\n++import time\n++cvs_version = time.strftime('%d-%b-%Y.cvs', time.gmtime(int(os.environ.get('SOURCE_DATE_EPOCH', time.time()))))\n+ \n+ opts = Variables()\n+ "
      },
      {
        "sha": "32027f2d09af17199011cd04a6db62e0a92cdcfc",
        "filename": "contrib/guix/patches/oscrypto-hard-code-openssl.patch",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/oscrypto-hard-code-openssl.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/guix/patches/oscrypto-hard-code-openssl.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/oscrypto-hard-code-openssl.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,13 @@\n+diff --git a/oscrypto/__init__.py b/oscrypto/__init__.py\n+index eb27313..371ab24 100644\n+--- a/oscrypto/__init__.py\n++++ b/oscrypto/__init__.py\n+@@ -302,3 +302,8 @@ def load_order():\n+         'oscrypto._win.tls',\n+         'oscrypto.tls',\n+     ]\n++\n++\n++paths = '@GUIX_OSCRYPTO_USE_OPENSSL@'.split(',')\n++assert len(paths) == 2, 'Value for OSCRYPTO_USE_OPENSSL env var must be two paths separated by a comma'\n++use_openssl(*paths)"
      },
      {
        "sha": "affc7c2e7506382b4b60a243bd0711abcb7f5884",
        "filename": "contrib/init/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/init/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/init/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,6 +1,6 @@\n Sample configuration files for:\n ```\n-SystemD: bitcoind.service\n+systemd: bitcoind.service\n Upstart: bitcoind.conf\n OpenRC:  bitcoind.openrc\n          bitcoind.openrcconf\n@@ -9,4 +9,4 @@ macOS:   org.bitcoin.bitcoind.plist\n ```\n have been made available to assist packagers in creating node packages here.\n \n-See doc/init.md for more information.\n+See [doc/init.md](../../doc/init.md) for more information."
      },
      {
        "sha": "013a1a607027cd715043b7f13fe5580e044adb18",
        "filename": "contrib/init/bitcoind.openrc",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/init/bitcoind.openrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/init/bitcoind.openrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrc?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -60,16 +60,17 @@ start_pre() {\n \t\"${BITCOIND_PIDDIR}\"\n \n \tcheckpath -f \\\n-\t-o ${BITCOIND_USER}:${BITCOIND_GROUP} \\\n+\t-o \"${BITCOIND_USER}:${BITCOIND_GROUP}\" \\\n \t-m 0660 \\\n-\t${BITCOIND_CONFIGFILE}\n+\t\"${BITCOIND_CONFIGFILE}\"\n \n \tcheckconfig || return 1\n }\n \n checkconfig()\n {\n-\tif ! grep -qs '^rpcpassword=' \"${BITCOIND_CONFIGFILE}\" ; then\n+\tif grep -qs '^rpcuser=' \"${BITCOIND_CONFIGFILE}\" && \\\n+\t\t! grep -qs '^rpcpassword=' \"${BITCOIND_CONFIGFILE}\" ; then\n \t\teerror \"\"\n \t\teerror \"ERROR: You must set a secure rpcpassword to run bitcoind.\"\n \t\teerror \"The setting must appear in ${BITCOIND_CONFIGFILE}\""
      },
      {
        "sha": "93de353bb4eb0dac87ca6c83106fb64e71ab3df6",
        "filename": "contrib/init/bitcoind.service",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/init/bitcoind.service",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/init/bitcoind.service",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.service?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -11,10 +11,14 @@\n \n [Unit]\n Description=Bitcoin daemon\n-After=network.target\n+Documentation=https://github.com/bitcoin/bitcoin/blob/master/doc/init.md\n+\n+# https://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/\n+After=network-online.target\n+Wants=network-online.target\n \n [Service]\n-ExecStart=/usr/bin/bitcoind -daemon \\\n+ExecStart=/usr/bin/bitcoind -daemonwait \\\n                             -pid=/run/bitcoind/bitcoind.pid \\\n                             -conf=/etc/bitcoin/bitcoin.conf \\\n                             -datadir=/var/lib/bitcoind\n@@ -29,6 +33,7 @@ ExecStartPre=/bin/chgrp bitcoin /etc/bitcoin\n Type=forking\n PIDFile=/run/bitcoind/bitcoind.pid\n Restart=on-failure\n+TimeoutStartSec=infinity\n TimeoutStopSec=600\n \n # Directory creation and permissions"
      },
      {
        "sha": "dd4d862dee504057659f82da9e2a19218b22df7d",
        "filename": "contrib/install_db4.sh",
        "status": "modified",
        "additions": 153,
        "deletions": 8,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/install_db4.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/install_db4.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/install_db4.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -68,18 +68,163 @@ tar -xzvf ${BDB_VERSION}.tar.gz -C \"$BDB_PREFIX\"\n cd \"${BDB_PREFIX}/${BDB_VERSION}/\"\n \n # Apply a patch necessary when building with clang and c++11 (see https://community.oracle.com/thread/3952592)\n-CLANG_CXX11_PATCH_URL='https://gist.githubusercontent.com/LnL7/5153b251fd525fe15de69b67e63a6075/raw/7778e9364679093a32dec2908656738e16b6bdcb/clang.patch'\n-CLANG_CXX11_PATCH_HASH='7a9a47b03fd5fb93a16ef42235fa9512db9b0829cfc3bdf90edd3ec1f44d637c'\n-http_get \"${CLANG_CXX11_PATCH_URL}\" clang.patch \"${CLANG_CXX11_PATCH_HASH}\"\n-patch -p2 < clang.patch\n+patch --ignore-whitespace -p1 << 'EOF'\n+commit 3311d68f11d1697565401eee6efc85c34f022ea7\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Mon Aug 17 20:03:56 2020 +0800\n+\n+    Fix C++11 compatibility\n+\n+diff --git a/dbinc/atomic.h b/dbinc/atomic.h\n+index 0034dcc..7c11d4a 100644\n+--- a/dbinc/atomic.h\n++++ b/dbinc/atomic.h\n+@@ -70,7 +70,7 @@ typedef struct {\n+  * These have no memory barriers; the caller must include them when necessary.\n+  */\n+ #define\tatomic_read(p)\t\t((p)->value)\n+-#define\tatomic_init(p, val)\t((p)->value = (val))\n++#define\tatomic_init_db(p, val)\t((p)->value = (val))\n+\n+ #ifdef HAVE_ATOMIC_SUPPORT\n+\n+@@ -144,7 +144,7 @@ typedef LONG volatile *interlocked_val;\n+ #define\tatomic_inc(env, p)\t__atomic_inc(p)\n+ #define\tatomic_dec(env, p)\t__atomic_dec(p)\n+ #define\tatomic_compare_exchange(env, p, o, n)\t\\\n+-\t__atomic_compare_exchange((p), (o), (n))\n++\t__atomic_compare_exchange_db((p), (o), (n))\n+ static inline int __atomic_inc(db_atomic_t *p)\n+ {\n+ \tint\ttemp;\n+@@ -176,7 +176,7 @@ static inline int __atomic_dec(db_atomic_t *p)\n+  * http://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Atomic-Builtins.html\n+  * which configure could be changed to use.\n+  */\n+-static inline int __atomic_compare_exchange(\n++static inline int __atomic_compare_exchange_db(\n+ \tdb_atomic_t *p, atomic_value_t oldval, atomic_value_t newval)\n+ {\n+ \tatomic_value_t was;\n+@@ -206,7 +206,7 @@ static inline int __atomic_compare_exchange(\n+ #define\tatomic_dec(env, p)\t(--(p)->value)\n+ #define\tatomic_compare_exchange(env, p, oldval, newval)\t\t\\\n+ \t(DB_ASSERT(env, atomic_read(p) == (oldval)),\t\t\\\n+-\tatomic_init(p, (newval)), 1)\n++\tatomic_init_db(p, (newval)), 1)\n+ #else\n+ #define atomic_inc(env, p)\t__atomic_inc(env, p)\n+ #define atomic_dec(env, p)\t__atomic_dec(env, p)\n+diff --git a/mp/mp_fget.c b/mp/mp_fget.c\n+index 5fdee5a..0b75f57 100644\n+--- a/mp/mp_fget.c\n++++ b/mp/mp_fget.c\n+@@ -617,7 +617,7 @@ alloc:\t\t/* Allocate a new buffer header and data space. */\n+\n+ \t\t/* Initialize enough so we can call __memp_bhfree. */\n+ \t\talloc_bhp->flags = 0;\n+-\t\tatomic_init(&alloc_bhp->ref, 1);\n++\t\tatomic_init_db(&alloc_bhp->ref, 1);\n+ #ifdef DIAGNOSTIC\n+ \t\tif ((uintptr_t)alloc_bhp->buf & (sizeof(size_t) - 1)) {\n+ \t\t\t__db_errx(env,\n+@@ -911,7 +911,7 @@ alloc:\t\t/* Allocate a new buffer header and data space. */\n+ \t\t\tMVCC_MPROTECT(bhp->buf, mfp->stat.st_pagesize,\n+ \t\t\t    PROT_READ);\n+\n+-\t\tatomic_init(&alloc_bhp->ref, 1);\n++\t\tatomic_init_db(&alloc_bhp->ref, 1);\n+ \t\tMUTEX_LOCK(env, alloc_bhp->mtx_buf);\n+ \t\talloc_bhp->priority = bhp->priority;\n+ \t\talloc_bhp->pgno = bhp->pgno;\n+diff --git a/mp/mp_mvcc.c b/mp/mp_mvcc.c\n+index 34467d2..f05aa0c 100644\n+--- a/mp/mp_mvcc.c\n++++ b/mp/mp_mvcc.c\n+@@ -276,7 +276,7 @@ __memp_bh_freeze(dbmp, infop, hp, bhp, need_frozenp)\n+ #else\n+ \tmemcpy(frozen_bhp, bhp, SSZA(BH, buf));\n+ #endif\n+-\tatomic_init(&frozen_bhp->ref, 0);\n++\tatomic_init_db(&frozen_bhp->ref, 0);\n+ \tif (mutex != MUTEX_INVALID)\n+ \t\tfrozen_bhp->mtx_buf = mutex;\n+ \telse if ((ret = __mutex_alloc(env, MTX_MPOOL_BH,\n+@@ -428,7 +428,7 @@ __memp_bh_thaw(dbmp, infop, hp, frozen_bhp, alloc_bhp)\n+ #endif\n+ \t\talloc_bhp->mtx_buf = mutex;\n+ \t\tMUTEX_LOCK(env, alloc_bhp->mtx_buf);\n+-\t\tatomic_init(&alloc_bhp->ref, 1);\n++\t\tatomic_init_db(&alloc_bhp->ref, 1);\n+ \t\tF_CLR(alloc_bhp, BH_FROZEN);\n+ \t}\n+\n+diff --git a/mp/mp_region.c b/mp/mp_region.c\n+index e6cece9..ddbe906 100644\n+--- a/mp/mp_region.c\n++++ b/mp/mp_region.c\n+@@ -224,7 +224,7 @@ __memp_init(env, dbmp, reginfo_off, htab_buckets, max_nreg)\n+ \t\t\t     MTX_MPOOL_FILE_BUCKET, 0, &htab[i].mtx_hash)) != 0)\n+ \t\t\t\treturn (ret);\n+ \t\t\tSH_TAILQ_INIT(&htab[i].hash_bucket);\n+-\t\t\tatomic_init(&htab[i].hash_page_dirty, 0);\n++\t\t\tatomic_init_db(&htab[i].hash_page_dirty, 0);\n+ \t\t}\n+\n+ \t\t/*\n+@@ -269,7 +269,7 @@ __memp_init(env, dbmp, reginfo_off, htab_buckets, max_nreg)\n+ \t\thp->mtx_hash = (mtx_base == MUTEX_INVALID) ? MUTEX_INVALID :\n+ \t\t    mtx_base + i;\n+ \t\tSH_TAILQ_INIT(&hp->hash_bucket);\n+-\t\tatomic_init(&hp->hash_page_dirty, 0);\n++\t\tatomic_init_db(&hp->hash_page_dirty, 0);\n+ #ifdef HAVE_STATISTICS\n+ \t\thp->hash_io_wait = 0;\n+ \t\thp->hash_frozen = hp->hash_thawed = hp->hash_frozen_freed = 0;\n+diff --git a/mutex/mut_method.c b/mutex/mut_method.c\n+index 2588763..5c6d516 100644\n+--- a/mutex/mut_method.c\n++++ b/mutex/mut_method.c\n+@@ -426,7 +426,7 @@ atomic_compare_exchange(env, v, oldval, newval)\n+ \tMUTEX_LOCK(env, mtx);\n+ \tret = atomic_read(v) == oldval;\n+ \tif (ret)\n+-\t\tatomic_init(v, newval);\n++\t\tatomic_init_db(v, newval);\n+ \tMUTEX_UNLOCK(env, mtx);\n+\n+ \treturn (ret);\n+diff --git a/mutex/mut_tas.c b/mutex/mut_tas.c\n+index f3922e0..e40fcdf 100644\n+--- a/mutex/mut_tas.c\n++++ b/mutex/mut_tas.c\n+@@ -46,7 +46,7 @@ __db_tas_mutex_init(env, mutex, flags)\n+\n+ #ifdef HAVE_SHARED_LATCHES\n+ \tif (F_ISSET(mutexp, DB_MUTEX_SHARED))\n+-\t\tatomic_init(&mutexp->sharecount, 0);\n++\t\tatomic_init_db(&mutexp->sharecount, 0);\n+ \telse\n+ #endif\n+ \tif (MUTEX_INIT(&mutexp->tas)) {\n+@@ -486,7 +486,7 @@ __db_tas_mutex_unlock(env, mutex)\n+ \t\t\tF_CLR(mutexp, DB_MUTEX_LOCKED);\n+ \t\t\t/* Flush flag update before zeroing count */\n+ \t\t\tMEMBAR_EXIT();\n+-\t\t\tatomic_init(&mutexp->sharecount, 0);\n++\t\t\tatomic_init_db(&mutexp->sharecount, 0);\n+ \t\t} else {\n+ \t\t\tDB_ASSERT(env, sharecount > 0);\n+ \t\t\tMEMBAR_EXIT();\n+EOF\n \n # The packaged config.guess and config.sub are ancient (2009) and can cause build issues.\n # Replace them with modern versions.\n # See https://github.com/bitcoin/bitcoin/issues/16064\n-CONFIG_GUESS_URL='https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=55eaf3e779455c4e5cc9f82efb5278be8f8f900b'\n-CONFIG_GUESS_HASH='2d1ff7bca773d2ec3c6217118129220fa72d8adda67c7d2bf79994b3129232c1'\n-CONFIG_SUB_URL='https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=55eaf3e779455c4e5cc9f82efb5278be8f8f900b'\n-CONFIG_SUB_HASH='3a4befde9bcdf0fdb2763fc1bfa74e8696df94e1ad7aac8042d133c8ff1d2e32'\n+CONFIG_GUESS_URL='https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=4550d2f15b3a7ce2451c1f29500b9339430c877f'\n+CONFIG_GUESS_HASH='c8f530e01840719871748a8071113435bdfdf75b74c57e78e47898edea8754ae'\n+CONFIG_SUB_URL='https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=4550d2f15b3a7ce2451c1f29500b9339430c877f'\n+CONFIG_SUB_HASH='3969f7d5f6967ccc6f792401b8ef3916a1d1b1d0f0de5a4e354c95addb8b800e'\n \n rm -f \"dist/config.guess\"\n rm -f \"dist/config.sub\""
      },
      {
        "sha": "21f6ba2eb3b721a9a7f28276c9c9ae76ed0fdbc7",
        "filename": "contrib/macdeploy/README.md",
        "status": "modified",
        "additions": 16,
        "deletions": 24,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/macdeploy/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/macdeploy/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -6,20 +6,16 @@ The `macdeployqtplus` script should not be run manually. Instead, after building\n make deploy\n ```\n \n-During the deployment process, the disk image window will pop up briefly\n-when the fancy settings are applied. This is normal, please do not interfere,\n-the process will unmount the DMG and cleanup before finishing.\n-\n-When complete, it will have produced `Bitcoin-Qt.dmg`.\n+When complete, it will have produced `Bitcoin-Core.dmg`.\n \n ## SDK Extraction\n \n ### Step 1: Obtaining `Xcode.app`\n \n Our current macOS SDK\n-(`Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz`) can be\n+(`Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz`) can be\n extracted from\n-[Xcode_11.3.1.xip](https://download.developer.apple.com/Developer_Tools/Xcode_11.3.1/Xcode_11.3.1.xip).\n+[Xcode_12.1.xip](https://download.developer.apple.com/Developer_Tools/Xcode_12.1/Xcode_12.1.xip).\n An Apple ID is needed to download this.\n \n After Xcode version 7.x, Apple started shipping the `Xcode.app` in a `.xip`\n@@ -31,25 +27,25 @@ approach (tested on Debian Buster) is outlined below:\n apt install cpio\n git clone https://github.com/bitcoin-core/apple-sdk-tools.git\n \n-# Unpack Xcode_11.3.1.xip and place the resulting Xcode.app in your current\n+# Unpack Xcode_12.1.xip and place the resulting Xcode.app in your current\n # working directory\n-python3 apple-sdk-tools/extract_xcode.py -f Xcode_11.3.1.xip | cpio -d -i\n+python3 apple-sdk-tools/extract_xcode.py -f Xcode_12.1.xip | cpio -d -i\n ```\n \n On macOS the process is more straightforward:\n \n ```bash\n-xip -x Xcode_11.3.1.xip\n+xip -x Xcode_12.1.xip\n ```\n \n-### Step 2: Generating `Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz` from `Xcode.app`\n+### Step 2: Generating `Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz` from `Xcode.app`\n \n-To generate `Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz`, run\n+To generate `Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz`, run\n the script [`gen-sdk`](./gen-sdk) with the path to `Xcode.app` (extracted in the\n previous stage) as the first argument.\n \n ```bash\n-# Generate a Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz from\n+# Generate a Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz from\n # the supplied Xcode.app\n ./contrib/macdeploy/gen-sdk '/path/to/Xcode.app'\n ```\n@@ -60,7 +56,7 @@ Working macOS DMGs are created in Linux by combining a recent `clang`, the Apple\n \n Apple uses `clang` extensively for development and has upstreamed the necessary\n functionality so that a vanilla clang can take advantage. It supports the use of `-F`,\n-`-target`, `-mmacosx-version-min`, and `--sysroot`, which are all necessary when\n+`-target`, `-mmacosx-version-min`, and `-isysroot`, which are all necessary when\n building for macOS.\n \n Apple's version of `binutils` (called `cctools`) contains lots of functionality missing in the\n@@ -96,22 +92,18 @@ created using these tools. The build process has been designed to avoid includin\n SDK's files in Gitian's outputs. All interim tarballs are fully deterministic and may be freely\n redistributed.\n \n-`genisoimage` is used to create the initial DMG. It is not deterministic as-is, so it has been\n-patched. A system `genisoimage` will work fine, but it will not be deterministic because\n-the file-order will change between invocations. The patch can be seen here: [cdrkit-deterministic.patch](https://github.com/bitcoin/bitcoin/blob/master/depends/patches/native_cdrkit/cdrkit-deterministic.patch).\n-No effort was made to fix this cleanly, so it likely leaks memory badly, however it's only used for\n-a single invocation, so that's no real concern.\n+[`xorrisofs`](https://www.gnu.org/software/xorriso/) is used to create the DMG.\n \n-`genisoimage` cannot compress DMGs, so afterwards, the DMG tool from the\n-`libdmg-hfsplus` project is used to compress it. There are several bugs in this tool and its\n-maintainer has seemingly abandoned the project.\n+`xorrisofs` cannot compress DMGs, so afterwards, the DMG tool from the\n+`libdmg-hfsplus` project is used to compress it. There are several bugs in this\n+tool and its maintainer has seemingly abandoned the project.\n \n The DMG tool has the ability to create DMGs from scratch as well, but this functionality is\n broken. Only the compression feature is currently used. Ideally, the creation could be fixed\n-and `genisoimage` would no longer be necessary.\n+and `xorrisofs` would no longer be necessary.\n \n Background images and other features can be added to DMG files by inserting a\n-`.DS_Store` before creation. This is generated by the script `contrib/macdeploy/custom_dsstore.py`.\n+`.DS_Store` during creation.\n \n As of OS X 10.9 Mavericks, using an Apple-blessed key to sign binaries is a requirement in\n order to satisfy the new Gatekeeper requirements. Because this private key cannot be"
      },
      {
        "sha": "7ab42ea5d4de6c53c0eb9cbb8a41fc712e03b671",
        "filename": "contrib/macdeploy/custom_dsstore.py",
        "status": "removed",
        "additions": 0,
        "deletions": 58,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/macdeploy/custom_dsstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/macdeploy/custom_dsstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/custom_dsstore.py?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,58 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2013-2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-from ds_store import DSStore\n-from mac_alias import Alias\n-import sys\n-\n-output_file = sys.argv[1]\n-package_name_ns = sys.argv[2]\n-\n-ds = DSStore.open(output_file, 'w+')\n-ds['.']['bwsp'] = {\n-    'ShowStatusBar': False,\n-    'WindowBounds': '{{300, 280}, {500, 343}}',\n-    'ContainerShowSidebar': False,\n-    'SidebarWidth': 0,\n-    'ShowTabView': False,\n-    'PreviewPaneVisibility': False,\n-    'ShowToolbar': False,\n-    'ShowSidebar': False,\n-    'ShowPathbar': True\n-}\n-\n-icvp = {\n-    'gridOffsetX': 0.0,\n-    'textSize': 12.0,\n-    'viewOptionsVersion': 1,\n-    'backgroundImageAlias': b'\\x00\\x00\\x00\\x00\\x02\\x1e\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd1\\x94\\\\\\xb0H+\\x00\\x05\\x00\\x00\\x00\\x98\\x0fbackground.tiff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\r\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b.background\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x98\\x00\\x0e\\x00 \\x00\\x0f\\x00b\\x00a\\x00c\\x00k\\x00g\\x00r\\x00o\\x00u\\x00n\\x00d\\x00.\\x00t\\x00i\\x00f\\x00f\\x00\\x0f\\x00\\x02\\x00\\x00\\x00\\x12\\x00\\x1c/.background/background.tiff\\x00\\x14\\x01\\x06\\x00\\x00\\x00\\x00\\x01\\x06\\x00\\x02\\x00\\x00\\x0cMacintosh HD\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xce\\x97\\xab\\xc3H+\\x00\\x00\\x01\\x88[\\x88\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02u\\xab\\x8d\\xd1\\x94\\\\\\xb0devrddsk\\xff\\xff\\xff\\xff\\x00\\x00\\t \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07bitcoin\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xce\\x97\\xab\\xc3\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x01\\x00\\x14\\x01\\x88[\\x88\\x00\\x16\\xa9\\t\\x00\\x08\\xfaR\\x00\\x08\\xfaQ\\x00\\x02d\\x8e\\x00\\x0e\\x00\\x02\\x00\\x00\\x00\\x0f\\x00\\x1a\\x00\\x0c\\x00M\\x00a\\x00c\\x00i\\x00n\\x00t\\x00o\\x00s\\x00h\\x00 \\x00H\\x00D\\x00\\x13\\x00\\x01/\\x00\\x00\\x15\\x00\\x02\\x00\\x14\\xff\\xff\\x00\\x00\\xff\\xff\\x00\\x00',\n-    'backgroundColorBlue': 1.0,\n-    'iconSize': 96.0,\n-    'backgroundColorGreen': 1.0,\n-    'arrangeBy': 'none',\n-    'showIconPreview': True,\n-    'gridSpacing': 100.0,\n-    'gridOffsetY': 0.0,\n-    'showItemInfo': False,\n-    'labelOnBottom': True,\n-    'backgroundType': 2,\n-    'backgroundColorRed': 1.0\n-}\n-alias = Alias.from_bytes(icvp['backgroundImageAlias'])\n-alias.volume.name = package_name_ns\n-alias.volume.posix_path = '/Volumes/' + package_name_ns\n-alias.volume.disk_image_alias.target.filename = package_name_ns + '.temp.dmg'\n-alias.volume.disk_image_alias.target.carbon_path = 'Macintosh HD:Users:\\x00bitcoinuser:\\x00Documents:\\x00bitcoin:\\x00bitcoin:\\x00' + package_name_ns + '.temp.dmg'\n-alias.volume.disk_image_alias.target.posix_path = 'Users/bitcoinuser/Documents/bitcoin/bitcoin/' + package_name_ns + '.temp.dmg'\n-alias.target.carbon_path = package_name_ns + ':.background:\\x00background.tiff'\n-icvp['backgroundImageAlias'] = alias.to_bytes()\n-ds['.']['icvp'] = icvp\n-\n-ds['.']['vSrn'] = ('long', 1)\n-\n-ds['Applications']['Iloc'] = (370, 156)\n-ds['Bitcoin-Qt.app']['Iloc'] = (128, 156)\n-\n-ds.flush()\n-ds.close()"
      },
      {
        "sha": "d481413cc382abb07b351867f2a767c5d005e58e",
        "filename": "contrib/macdeploy/detached-sig-apply.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 33,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/macdeploy/detached-sig-apply.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/macdeploy/detached-sig-apply.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-apply.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -8,10 +8,9 @@ set -e\n \n UNSIGNED=\"$1\"\n SIGNATURE=\"$2\"\n-ARCH=x86_64\n ROOTDIR=dist\n-TEMPDIR=signed.temp\n OUTDIR=signed-app\n+SIGNAPPLE=signapple\n \n if [ -z \"$UNSIGNED\" ]; then\n   echo \"usage: $0 <unsigned app> <signature>\"\n@@ -23,35 +22,6 @@ if [ -z \"$SIGNATURE\" ]; then\n   exit 1\n fi\n \n-rm -rf ${TEMPDIR} && mkdir -p ${TEMPDIR}\n-tar -C ${TEMPDIR} -xf ${UNSIGNED}\n-cp -rf \"${SIGNATURE}\"/* ${TEMPDIR}\n-\n-if [ -z \"${PAGESTUFF}\" ]; then\n-  PAGESTUFF=${TEMPDIR}/pagestuff\n-fi\n-\n-if [ -z \"${CODESIGN_ALLOCATE}\" ]; then\n-  CODESIGN_ALLOCATE=${TEMPDIR}/codesign_allocate\n-fi\n-\n-find ${TEMPDIR} -name \"*.sign\" | while read i; do\n-  SIZE=$(stat -c %s \"${i}\")\n-  TARGET_FILE=\"$(echo \"${i}\" | sed 's/\\.sign$//')\"\n-\n-  echo \"Allocating space for the signature of size ${SIZE} in ${TARGET_FILE}\"\n-  ${CODESIGN_ALLOCATE} -i \"${TARGET_FILE}\" -a ${ARCH} ${SIZE} -o \"${i}.tmp\"\n-\n-  OFFSET=$(${PAGESTUFF} \"${i}.tmp\" -p | tail -2 | grep offset | sed 's/[^0-9]*//g')\n-  if [ -z ${QUIET} ]; then\n-    echo \"Attaching signature at offset ${OFFSET}\"\n-  fi\n-\n-  dd if=\"$i\" of=\"${i}.tmp\" bs=1 seek=${OFFSET} count=${SIZE} 2>/dev/null\n-  mv \"${i}.tmp\" \"${TARGET_FILE}\"\n-  rm \"${i}\"\n-  echo \"Success.\"\n-done\n-mv ${TEMPDIR}/${ROOTDIR} ${OUTDIR}\n-rm -rf ${TEMPDIR}\n+${SIGNAPPLE} apply ${UNSIGNED} ${SIGNATURE}\n+mv ${ROOTDIR} ${OUTDIR}\n echo \"Signed: ${OUTDIR}\""
      },
      {
        "sha": "4f246cbb3fe4a8045dbc39bc6683101afc190423",
        "filename": "contrib/macdeploy/detached-sig-create.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 29,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/macdeploy/detached-sig-create.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/macdeploy/detached-sig-create.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-create.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -8,44 +8,21 @@ set -e\n \n ROOTDIR=dist\n BUNDLE=\"${ROOTDIR}/Bitcoin-Qt.app\"\n-CODESIGN=codesign\n+SIGNAPPLE=signapple\n TEMPDIR=sign.temp\n-TEMPLIST=${TEMPDIR}/signatures.txt\n OUT=signature-osx.tar.gz\n-OUTROOT=osx\n+OUTROOT=osx/dist\n \n if [ -z \"$1\" ]; then\n-  echo \"usage: $0 <codesign args>\"\n-  echo \"example: $0 -s MyIdentity\"\n+  echo \"usage: $0 <signapple args>\"\n+  echo \"example: $0 <path to key>\"\n   exit 1\n fi\n \n-rm -rf ${TEMPDIR} ${TEMPLIST}\n+rm -rf ${TEMPDIR}\n mkdir -p ${TEMPDIR}\n \n-${CODESIGN} -f --file-list ${TEMPLIST} \"$@\" \"${BUNDLE}\"\n-\n-grep -v CodeResources < \"${TEMPLIST}\" | while read i; do\n-  TARGETFILE=\"${BUNDLE}/$(echo \"${i}\" | sed \"s|.*${BUNDLE}/||\")\"\n-  SIZE=$(pagestuff \"$i\" -p | tail -2 | grep size | sed 's/[^0-9]*//g')\n-  OFFSET=$(pagestuff \"$i\" -p | tail -2 | grep offset | sed 's/[^0-9]*//g')\n-  SIGNFILE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}.sign\"\n-  DIRNAME=\"$(dirname \"${SIGNFILE}\")\"\n-  mkdir -p \"${DIRNAME}\"\n-  echo \"Adding detached signature for: ${TARGETFILE}. Size: ${SIZE}. Offset: ${OFFSET}\"\n-  dd if=\"$i\" of=\"${SIGNFILE}\" bs=1 skip=${OFFSET} count=${SIZE} 2>/dev/null\n-done\n-\n-grep CodeResources < \"${TEMPLIST}\" | while read i; do\n-  TARGETFILE=\"${BUNDLE}/$(echo \"${i}\" | sed \"s|.*${BUNDLE}/||\")\"\n-  RESOURCE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}\"\n-  DIRNAME=\"$(dirname \"${RESOURCE}\")\"\n-  mkdir -p \"${DIRNAME}\"\n-  echo \"Adding resource for: \\\"${TARGETFILE}\\\"\"\n-  cp \"${i}\" \"${RESOURCE}\"\n-done\n-\n-rm ${TEMPLIST}\n+${SIGNAPPLE} sign -f --detach \"${TEMPDIR}/${OUTROOT}\"  \"$@\" \"${BUNDLE}\"\n \n tar -C \"${TEMPDIR}\" -czf \"${OUT}\" .\n rm -rf \"${TEMPDIR}\""
      },
      {
        "sha": "3c7bdf4217c5c9ae13aa9dd3cff55cdb9f0e4577",
        "filename": "contrib/macdeploy/extract-osx-sdk.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/macdeploy/extract-osx-sdk.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/macdeploy/extract-osx-sdk.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/extract-osx-sdk.sh?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,34 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C\n-set -e\n-\n-INPUTFILE=\"Xcode_7.3.1.dmg\"\n-HFSFILENAME=\"5.hfs\"\n-SDKDIR=\"Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\"\n-\n-7z x \"${INPUTFILE}\" \"${HFSFILENAME}\"\n-SDKNAME=\"$(basename \"${SDKDIR}\")\"\n-SDKDIRINODE=$(ifind -n \"${SDKDIR}\" \"${HFSFILENAME}\")\n-fls \"${HFSFILENAME}\" -rpF ${SDKDIRINODE} |\n- while read type inode filename; do\n-\tinode=\"${inode::-1}\"\n-\tif [ \"${filename:0:14}\" = \"usr/share/man/\" ]; then\n-\t\tcontinue\n-\tfi\n-\tfilename=\"${SDKNAME}/$filename\"\n-\techo \"Extracting $filename ...\"\n-\tmkdir -p \"$(dirname \"$filename\")\"\n-\tif [ \"$type\" = \"l/l\" ]; then\n-\t\tln -s \"$(icat \"${HFSFILENAME}\" $inode)\" \"$filename\"\n-\telse\n-\t\ticat \"${HFSFILENAME}\" $inode >\"$filename\"\n-\tfi\n-done\n-echo \"Building ${SDKNAME}.tar.gz ...\"\n-MTIME=\"$(istat \"${HFSFILENAME}\" \"${SDKDIRINODE}\" | perl -nle 'm/Content Modified:\\s+(.*?)\\s\\(/ && print $1')\"\n-find \"${SDKNAME}\" | sort | tar --no-recursion --mtime=\"${MTIME}\" --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > \"${SDKNAME}.tar.gz\"\n-echo 'All done!'"
      },
      {
        "sha": "ef277a7f14ad66ecdb8597a865a54b9506fd0ff9",
        "filename": "contrib/macdeploy/fancy.plist",
        "status": "removed",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/macdeploy/fancy.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/macdeploy/fancy.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/fancy.plist?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,32 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n-<plist version=\"1.0\">\n-<dict>\n-\t<key>window_bounds</key>\n-\t<array>\n-\t\t<integer>300</integer>\n-\t\t<integer>300</integer>\n-\t\t<integer>800</integer>\n-\t\t<integer>620</integer>\n-\t</array>\n-\t<key>background_picture</key>\n-\t<string>background.tiff</string>\n-\t<key>icon_size</key>\n-\t<integer>96</integer>\n-\t<key>applications_symlink</key>\n-\t<true/>\n-\t<key>items_position</key>\n-\t<dict>\n-\t\t<key>Applications</key>\n-\t\t<array>\n-\t\t\t<integer>370</integer>\n-\t\t\t<integer>156</integer>\n-\t\t</array>\n-\t\t<key>Bitcoin-Qt.app</key>\n-\t\t<array>\n-\t\t\t<integer>128</integer>\n-\t\t\t<integer>156</integer>\n-\t\t</array>\n-\t</dict>\n-</dict>\n-</plist>"
      },
      {
        "sha": "055a932eee4939595a76527774cbd2422f094fc5",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 180,
        "deletions": 495,
        "changes": 675,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -16,9 +16,12 @@\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n #\n \n-import subprocess, sys, re, os, shutil, stat, os.path, time\n-from string import Template\n+import sys, re, os, shutil, stat, os.path\n from argparse import ArgumentParser\n+from ds_store import DSStore\n+from mac_alias import Alias\n+from pathlib import Path\n+from subprocess import PIPE, run\n from typing import List, Optional\n \n # This is ported from the original macdeployqt with modifications\n@@ -49,28 +52,18 @@ class FrameworkInfo(object):\n             return False\n     \n     def __str__(self):\n-        return \"\"\" Framework name: {}\n- Framework directory: {}\n- Framework path: {}\n- Binary name: {}\n- Binary directory: {}\n- Binary path: {}\n- Version: {}\n- Install name: {}\n- Deployed install name: {}\n- Source file Path: {}\n- Deployed Directory (relative to bundle): {}\n-\"\"\".format(self.frameworkName,\n-       self.frameworkDirectory,\n-       self.frameworkPath,\n-       self.binaryName,\n-       self.binaryDirectory,\n-       self.binaryPath,\n-       self.version,\n-       self.installName,\n-       self.deployedInstallName,\n-       self.sourceFilePath,\n-       self.destinationDirectory)\n+        return f\"\"\" Framework name: {self.frameworkName}\n+ Framework directory: {self.frameworkDirectory}\n+ Framework path: {self.frameworkPath}\n+ Binary name: {self.binaryName}\n+ Binary directory: {self.binaryDirectory}\n+ Binary path: {self.binaryPath}\n+ Version: {self.version}\n+ Install name: {self.installName}\n+ Deployed install name: {self.deployedInstallName}\n+ Source file Path: {self.sourceFilePath}\n+ Deployed Directory (relative to bundle): {self.destinationDirectory}\n+\"\"\"\n     \n     def isDylib(self):\n         return self.frameworkName.endswith(\".dylib\")\n@@ -91,13 +84,13 @@ class FrameworkInfo(object):\n         if line == \"\":\n             return None\n         \n-        # Don't deploy system libraries (exception for libQtuitools and libQtlucene).\n-        if line.startswith(\"/System/Library/\") or line.startswith(\"@executable_path\") or (line.startswith(\"/usr/lib/\") and \"libQt\" not in line):\n+        # Don't deploy system libraries\n+        if line.startswith(\"/System/Library/\") or line.startswith(\"@executable_path\") or line.startswith(\"/usr/lib/\"):\n             return None\n         \n         m = cls.reOLine.match(line)\n         if m is None:\n-            raise RuntimeError(\"otool line could not be parsed: \" + line)\n+            raise RuntimeError(f\"otool line could not be parsed: {line}\")\n         \n         path = m.group(1)\n         \n@@ -117,7 +110,7 @@ class FrameworkInfo(object):\n             info.version = \"-\"\n             \n             info.installName = path\n-            info.deployedInstallName = \"@executable_path/../Frameworks/\" + info.binaryName\n+            info.deployedInstallName = f\"@executable_path/../Frameworks/{info.binaryName}\"\n             info.sourceFilePath = path\n             info.destinationDirectory = cls.bundleFrameworkDirectory\n         else:\n@@ -129,7 +122,7 @@ class FrameworkInfo(object):\n                     break\n                 i += 1\n             if i == len(parts):\n-                raise RuntimeError(\"Could not find .framework or .dylib in otool line: \" + line)\n+                raise RuntimeError(f\"Could not find .framework or .dylib in otool line: {line}\")\n             \n             info.frameworkName = parts[i]\n             info.frameworkDirectory = \"/\".join(parts[:i])\n@@ -140,7 +133,7 @@ class FrameworkInfo(object):\n             info.binaryPath = os.path.join(info.binaryDirectory, info.binaryName)\n             info.version = parts[i+2]\n             \n-            info.deployedInstallName = \"@executable_path/../Frameworks/\" + os.path.join(info.frameworkName, info.binaryPath)\n+            info.deployedInstallName = f\"@executable_path/../Frameworks/{os.path.join(info.frameworkName, info.binaryPath)}\"\n             info.destinationDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, info.binaryDirectory)\n             \n             info.sourceResourcesDirectory = os.path.join(info.frameworkPath, \"Resources\")\n@@ -154,10 +147,10 @@ class FrameworkInfo(object):\n class ApplicationBundleInfo(object):\n     def __init__(self, path: str):\n         self.path = path\n-        appName = \"Bitcoin-Qt\"\n-        self.binaryPath = os.path.join(path, \"Contents\", \"MacOS\", appName)\n+        # for backwards compatibility reasons, this must remain as Bitcoin-Qt\n+        self.binaryPath = os.path.join(path, \"Contents\", \"MacOS\", \"Bitcoin-Qt\")\n         if not os.path.exists(self.binaryPath):\n-            raise RuntimeError(\"Could not find bundle binary for \" + path)\n+            raise RuntimeError(f\"Could not find bundle binary for {path}\")\n         self.resourcesPath = os.path.join(path, \"Contents\", \"Resources\")\n         self.pluginPath = os.path.join(path, \"Contents\", \"PlugIns\")\n \n@@ -181,30 +174,26 @@ class DeploymentInfo(object):\n                 self.pluginPath = pluginPath\n     \n     def usesFramework(self, name: str) -> bool:\n-        nameDot = \"{}.\".format(name)\n-        libNameDot = \"lib{}.\".format(name)\n         for framework in self.deployedFrameworks:\n             if framework.endswith(\".framework\"):\n-                if framework.startswith(nameDot):\n+                if framework.startswith(f\"{name}.\"):\n                     return True\n             elif framework.endswith(\".dylib\"):\n-                if framework.startswith(libNameDot):\n+                if framework.startswith(f\"lib{name}.\"):\n                     return True\n         return False\n \n def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n-    if verbose >= 3:\n-        print(\"Inspecting with otool: \" + binaryPath)\n+    if verbose:\n+        print(f\"Inspecting with otool: {binaryPath}\")\n     otoolbin=os.getenv(\"OTOOL\", \"otool\")\n-    otool = subprocess.Popen([otoolbin, \"-L\", binaryPath], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n-    o_stdout, o_stderr = otool.communicate()\n+    otool = run([otoolbin, \"-L\", binaryPath], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n     if otool.returncode != 0:\n-        if verbose >= 1:\n-            sys.stderr.write(o_stderr)\n-            sys.stderr.flush()\n-            raise RuntimeError(\"otool failed with return code {}\".format(otool.returncode))\n+        sys.stderr.write(otool.stderr)\n+        sys.stderr.flush()\n+        raise RuntimeError(f\"otool failed with return code {otool.returncode}\")\n \n-    otoolLines = o_stdout.split(\"\\n\")\n+    otoolLines = otool.stdout.split(\"\\n\")\n     otoolLines.pop(0) # First line is the inspected binary\n     if \".framework\" in binaryPath or binaryPath.endswith(\".dylib\"):\n         otoolLines.pop(0) # Frameworks and dylibs list themselves as a dependency.\n@@ -214,7 +203,7 @@ def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n         line = line.replace(\"@loader_path\", os.path.dirname(binaryPath))\n         info = FrameworkInfo.fromOtoolLibraryLine(line.strip())\n         if info is not None:\n-            if verbose >= 3:\n+            if verbose:\n                 print(\"Found framework:\")\n                 print(info)\n             libraries.append(info)\n@@ -223,41 +212,41 @@ def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n \n def runInstallNameTool(action: str, *args):\n     installnametoolbin=os.getenv(\"INSTALLNAMETOOL\", \"install_name_tool\")\n-    subprocess.check_call([installnametoolbin, \"-\"+action] + list(args))\n+    run([installnametoolbin, \"-\"+action] + list(args), check=True)\n \n def changeInstallName(oldName: str, newName: str, binaryPath: str, verbose: int):\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Using install_name_tool:\")\n         print(\" in\", binaryPath)\n         print(\" change reference\", oldName)\n         print(\" to\", newName)\n     runInstallNameTool(\"change\", oldName, newName, binaryPath)\n \n def changeIdentification(id: str, binaryPath: str, verbose: int):\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Using install_name_tool:\")\n         print(\" change identification in\", binaryPath)\n         print(\" to\", id)\n     runInstallNameTool(\"id\", id, binaryPath)\n \n def runStrip(binaryPath: str, verbose: int):\n     stripbin=os.getenv(\"STRIP\", \"strip\")\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Using strip:\")\n         print(\" stripped\", binaryPath)\n-    subprocess.check_call([stripbin, \"-x\", binaryPath])\n+    run([stripbin, \"-x\", binaryPath], check=True)\n \n def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional[str]:\n     if framework.sourceFilePath.startswith(\"Qt\"):\n         #standard place for Nokia Qt installer's frameworks\n-        fromPath = \"/Library/Frameworks/\" + framework.sourceFilePath\n+        fromPath = f\"/Library/Frameworks/{framework.sourceFilePath}\"\n     else:\n         fromPath = framework.sourceFilePath\n     toDir = os.path.join(path, framework.destinationDirectory)\n     toPath = os.path.join(toDir, framework.binaryName)\n     \n     if not os.path.exists(fromPath):\n-        raise RuntimeError(\"No file at \" + fromPath)\n+        raise RuntimeError(f\"No file at {fromPath}\")\n     \n     if os.path.exists(toPath):\n         return None # Already there\n@@ -266,7 +255,7 @@ def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional\n         os.makedirs(toDir)\n     \n     shutil.copy2(fromPath, toPath)\n-    if verbose >= 3:\n+    if verbose:\n         print(\"Copied:\", fromPath)\n         print(\" to:\", toPath)\n \n@@ -280,13 +269,12 @@ def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional\n         linkto = framework.version\n         if not os.path.exists(linkfrom):\n             os.symlink(linkto, linkfrom)\n-            if verbose >= 2:\n-                print(\"Linked:\", linkfrom, \"->\", linkto)\n+            print(\"Linked:\", linkfrom, \"->\", linkto)\n         fromResourcesDir = framework.sourceResourcesDirectory\n         if os.path.exists(fromResourcesDir):\n             toResourcesDir = os.path.join(path, framework.destinationResourcesDirectory)\n             shutil.copytree(fromResourcesDir, toResourcesDir, symlinks=True)\n-            if verbose >= 3:\n+            if verbose:\n                 print(\"Copied resources:\", fromResourcesDir)\n                 print(\" to:\", toResourcesDir)\n         fromContentsDir = framework.sourceVersionContentsDirectory\n@@ -295,17 +283,9 @@ def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional\n         if os.path.exists(fromContentsDir):\n             toContentsDir = os.path.join(path, framework.destinationVersionContentsDirectory)\n             shutil.copytree(fromContentsDir, toContentsDir, symlinks=True)\n-            if verbose >= 3:\n+            if verbose:\n                 print(\"Copied Contents:\", fromContentsDir)\n                 print(\" to:\", toContentsDir)\n-    elif framework.frameworkName.startswith(\"libQtGui\"): # Copy qt_menu.nib (applies to non-framework layout)\n-        qtMenuNibSourcePath = os.path.join(framework.frameworkDirectory, \"Resources\", \"qt_menu.nib\")\n-        qtMenuNibDestinationPath = os.path.join(path, \"Contents\", \"Resources\", \"qt_menu.nib\")\n-        if os.path.exists(qtMenuNibSourcePath) and not os.path.exists(qtMenuNibDestinationPath):\n-            shutil.copytree(qtMenuNibSourcePath, qtMenuNibDestinationPath, symlinks=True)\n-            if verbose >= 3:\n-                print(\"Copied for libQtGui:\", qtMenuNibSourcePath)\n-                print(\" to:\", qtMenuNibDestinationPath)\n     \n     return toPath\n \n@@ -317,16 +297,14 @@ def deployFrameworks(frameworks: List[FrameworkInfo], bundlePath: str, binaryPat\n         framework = frameworks.pop(0)\n         deploymentInfo.deployedFrameworks.append(framework.frameworkName)\n         \n-        if verbose >= 2:\n-            print(\"Processing\", framework.frameworkName, \"...\")\n+        print(\"Processing\", framework.frameworkName, \"...\")\n         \n         # Get the Qt path from one of the Qt frameworks\n         if deploymentInfo.qtPath is None and framework.isQtFramework():\n             deploymentInfo.detectQtPath(framework.frameworkDirectory)\n         \n         if framework.installName.startswith(\"@executable_path\") or framework.installName.startswith(bundlePath):\n-            if verbose >= 2:\n-                print(framework.frameworkName, \"already deployed, skipping.\")\n+            print(framework.frameworkName, \"already deployed, skipping.\")\n             continue\n         \n         # install_name_tool the new id into the binary\n@@ -357,128 +335,32 @@ def deployFrameworks(frameworks: List[FrameworkInfo], bundlePath: str, binaryPat\n \n def deployFrameworksForAppBundle(applicationBundle: ApplicationBundleInfo, strip: bool, verbose: int) -> DeploymentInfo:\n     frameworks = getFrameworks(applicationBundle.binaryPath, verbose)\n-    if len(frameworks) == 0 and verbose >= 1:\n-        print(\"Warning: Could not find any external frameworks to deploy in {}.\".format(applicationBundle.path))\n+    if len(frameworks) == 0:\n+        print(f\"Warning: Could not find any external frameworks to deploy in {applicationBundle.path}.\")\n         return DeploymentInfo()\n     else:\n         return deployFrameworks(frameworks, applicationBundle.path, applicationBundle.binaryPath, strip, verbose)\n \n def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: DeploymentInfo, strip: bool, verbose: int):\n-    # Lookup available plugins, exclude unneeded\n     plugins = []\n     if deploymentInfo.pluginPath is None:\n         return\n     for dirpath, dirnames, filenames in os.walk(deploymentInfo.pluginPath):\n         pluginDirectory = os.path.relpath(dirpath, deploymentInfo.pluginPath)\n-        if pluginDirectory == \"designer\":\n-            # Skip designer plugins\n-            continue\n-        elif pluginDirectory == \"printsupport\":\n-            # Skip printsupport plugins\n-            continue\n-        elif pluginDirectory == \"imageformats\":\n-            # Skip imageformats plugins\n+\n+        if pluginDirectory not in ['styles', 'platforms']:\n             continue\n-        elif pluginDirectory == \"sqldrivers\":\n-            # Deploy the sql plugins only if QtSql is in use\n-            if not deploymentInfo.usesFramework(\"QtSql\"):\n-                continue\n-        elif pluginDirectory == \"script\":\n-            # Deploy the script plugins only if QtScript is in use\n-            if not deploymentInfo.usesFramework(\"QtScript\"):\n-                continue\n-        elif pluginDirectory == \"qmltooling\" or pluginDirectory == \"qml1tooling\":\n-            # Deploy the qml plugins only if QtDeclarative is in use\n-            if not deploymentInfo.usesFramework(\"QtDeclarative\"):\n-                continue\n-        elif pluginDirectory == \"bearer\":\n-            # Deploy the bearer plugins only if QtNetwork is in use\n-            if not deploymentInfo.usesFramework(\"QtNetwork\"):\n-                continue\n-        elif pluginDirectory == \"position\":\n-            # Deploy the position plugins only if QtPositioning is in use\n-            if not deploymentInfo.usesFramework(\"QtPositioning\"):\n-                continue\n-        elif pluginDirectory == \"sensors\" or pluginDirectory == \"sensorgestures\":\n-            # Deploy the sensor plugins only if QtSensors is in use\n-            if not deploymentInfo.usesFramework(\"QtSensors\"):\n-                continue\n-        elif pluginDirectory == \"audio\" or pluginDirectory == \"playlistformats\":\n-            # Deploy the audio plugins only if QtMultimedia is in use\n-            if not deploymentInfo.usesFramework(\"QtMultimedia\"):\n-                continue\n-        elif pluginDirectory == \"mediaservice\":\n-            # Deploy the mediaservice plugins only if QtMultimediaWidgets is in use\n-            if not deploymentInfo.usesFramework(\"QtMultimediaWidgets\"):\n-                continue\n-        elif pluginDirectory == \"canbus\":\n-            # Deploy the canbus plugins only if QtSerialBus is in use\n-            if not deploymentInfo.usesFramework(\"QtSerialBus\"):\n-                continue\n-        elif pluginDirectory == \"webview\":\n-            # Deploy the webview plugins only if QtWebView is in use\n-            if not deploymentInfo.usesFramework(\"QtWebView\"):\n-                continue\n-        elif pluginDirectory == \"gamepads\":\n-            # Deploy the webview plugins only if QtGamepad is in use\n-            if not deploymentInfo.usesFramework(\"QtGamepad\"):\n-                continue\n-        elif pluginDirectory == \"geoservices\":\n-            # Deploy the webview plugins only if QtLocation is in use\n-            if not deploymentInfo.usesFramework(\"QtLocation\"):\n-                continue\n-        elif pluginDirectory == \"texttospeech\":\n-            # Deploy the texttospeech plugins only if QtTextToSpeech is in use\n-            if not deploymentInfo.usesFramework(\"QtTextToSpeech\"):\n-                continue\n-        elif pluginDirectory == \"virtualkeyboard\":\n-            # Deploy the virtualkeyboard plugins only if QtVirtualKeyboard is in use\n-            if not deploymentInfo.usesFramework(\"QtVirtualKeyboard\"):\n-                continue\n-        elif pluginDirectory == \"sceneparsers\":\n-            # Deploy the virtualkeyboard plugins only if Qt3DCore is in use\n-            if not deploymentInfo.usesFramework(\"Qt3DCore\"):\n-                continue\n-        elif pluginDirectory == \"renderplugins\":\n-            # Deploy the renderplugins plugins only if Qt3DCore is in use\n-            if not deploymentInfo.usesFramework(\"Qt3DCore\"):\n-                continue\n-        elif pluginDirectory == \"geometryloaders\":\n-            # Deploy the geometryloaders plugins only if Qt3DCore is in use\n-            if not deploymentInfo.usesFramework(\"Qt3DCore\"):\n-                continue\n \n         for pluginName in filenames:\n             pluginPath = os.path.join(pluginDirectory, pluginName)\n-            if pluginName.endswith(\"_debug.dylib\"):\n-                # Skip debug plugins\n+\n+            if pluginName.split('.')[0] not in ['libqminimal', 'libqcocoa', 'libqmacstyle']:\n                 continue\n-            elif pluginPath == \"imageformats/libqsvg.dylib\" or pluginPath == \"iconengines/libqsvgicon.dylib\":\n-                # Deploy the svg plugins only if QtSvg is in use\n-                if not deploymentInfo.usesFramework(\"QtSvg\"):\n-                    continue\n-            elif pluginPath == \"accessible/libqtaccessiblecompatwidgets.dylib\":\n-                # Deploy accessibility for Qt3Support only if the Qt3Support is in use\n-                if not deploymentInfo.usesFramework(\"Qt3Support\"):\n-                    continue\n-            elif pluginPath == \"graphicssystems/libqglgraphicssystem.dylib\":\n-                # Deploy the opengl graphicssystem plugin only if QtOpenGL is in use\n-                if not deploymentInfo.usesFramework(\"QtOpenGL\"):\n-                    continue\n-            elif pluginPath == \"accessible/libqtaccessiblequick.dylib\":\n-                # Deploy the accessible qtquick plugin only if QtQuick is in use\n-                if not deploymentInfo.usesFramework(\"QtQuick\"):\n-                    continue\n-            elif pluginPath == \"platforminputcontexts/libqtvirtualkeyboardplugin.dylib\":\n-                # Deploy the virtualkeyboardplugin plugin only if QtVirtualKeyboard is in use\n-                if not deploymentInfo.usesFramework(\"QtVirtualKeyboard\"):\n-                    continue\n \n             plugins.append((pluginDirectory, pluginName))\n     \n     for pluginDirectory, pluginName in plugins:\n-        if verbose >= 2:\n-            print(\"Processing plugin\", os.path.join(pluginDirectory, pluginName), \"...\")\n+        print(\"Processing plugin\", os.path.join(pluginDirectory, pluginName), \"...\")\n         \n         sourcePath = os.path.join(deploymentInfo.pluginPath, pluginDirectory, pluginName)\n         destinationDirectory = os.path.join(appBundleInfo.pluginPath, pluginDirectory)\n@@ -487,7 +369,7 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n         \n         destinationPath = os.path.join(destinationDirectory, pluginName)\n         shutil.copy2(sourcePath, destinationPath)\n-        if verbose >= 3:\n+        if verbose:\n             print(\"Copied:\", sourcePath)\n             print(\" to:\", destinationPath)\n         \n@@ -503,147 +385,53 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n             if dependency.frameworkName not in deploymentInfo.deployedFrameworks:\n                 deployFrameworks([dependency], appBundleInfo.path, destinationPath, strip, verbose, deploymentInfo)\n \n-qt_conf=\"\"\"[Paths]\n-Translations=Resources\n-Plugins=PlugIns\n-\"\"\"\n-\n ap = ArgumentParser(description=\"\"\"Improved version of macdeployqt.\n \n Outputs a ready-to-deploy app in a folder \"dist\" and optionally wraps it in a .dmg file.\n Note, that the \"dist\" folder will be deleted before deploying on each run.\n \n-Optionally, Qt translation files (.qm) and additional resources can be added to the bundle.\n-\n-Also optionally signs the .app bundle; set the CODESIGNARGS environment variable to pass arguments\n-to the codesign tool.\n-E.g. CODESIGNARGS='--sign \"Developer ID Application: ...\" --keychain /encrypted/foo.keychain'\"\"\")\n+Optionally, Qt translation files (.qm) can be added to the bundle.\"\"\")\n \n ap.add_argument(\"app_bundle\", nargs=1, metavar=\"app-bundle\", help=\"application bundle to be deployed\")\n-ap.add_argument(\"-verbose\", type=int, nargs=1, default=[1], metavar=\"<0-3>\", help=\"0 = no output, 1 = error/warning (default), 2 = normal, 3 = debug\")\n+ap.add_argument(\"appname\", nargs=1, metavar=\"appname\", help=\"name of the app being deployed\")\n+ap.add_argument(\"-verbose\", nargs=\"?\", const=True, help=\"Output additional debugging information\")\n ap.add_argument(\"-no-plugins\", dest=\"plugins\", action=\"store_false\", default=True, help=\"skip plugin deployment\")\n ap.add_argument(\"-no-strip\", dest=\"strip\", action=\"store_false\", default=True, help=\"don't run 'strip' on the binaries\")\n-ap.add_argument(\"-sign\", dest=\"sign\", action=\"store_true\", default=False, help=\"sign .app bundle with codesign tool\")\n-ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image; if basename is not specified, a camel-cased version of the app name is used\")\n-ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fancy looking disk image using the given plist file with instructions; requires -dmg to work\")\n-ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's resources; the language list must be separated with commas, not with whitespace\")\n-ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translation files\")\n-ap.add_argument(\"-add-resources\", nargs=\"+\", metavar=\"path\", default=[], help=\"list of additional files or folders to be copied into the bundle's resources; must be the last argument\")\n-ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom volume name for dmg\")\n+ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image\")\n+ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translations. Base translations will automatically be added to the bundle's resources.\")\n \n config = ap.parse_args()\n \n-verbose = config.verbose[0]\n+verbose = config.verbose\n \n # ------------------------------------------------\n \n app_bundle = config.app_bundle[0]\n+appname = config.appname[0]\n \n if not os.path.exists(app_bundle):\n-    if verbose >= 1:\n-        sys.stderr.write(\"Error: Could not find app bundle \\\"{}\\\"\\n\".format(app_bundle))\n+    sys.stderr.write(f\"Error: Could not find app bundle \\\"{app_bundle}\\\"\\n\")\n     sys.exit(1)\n \n-app_bundle_name = os.path.splitext(os.path.basename(app_bundle))[0]\n-\n-# ------------------------------------------------\n-translations_dir = None\n-if config.translations_dir and config.translations_dir[0]:\n-    if os.path.exists(config.translations_dir[0]):\n-        translations_dir = config.translations_dir[0]\n-    else:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find translation dir \\\"{}\\\"\\n\".format(translations_dir))\n-        sys.exit(1)\n-# ------------------------------------------------\n-\n-for p in config.add_resources:\n-    if verbose >= 3:\n-        print(\"Checking for \\\"%s\\\"...\" % p)\n-    if not os.path.exists(p):\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find additional resource file \\\"{}\\\"\\n\".format(p))\n-        sys.exit(1)\n-\n-# ------------------------------------------------\n-\n-if len(config.fancy) == 1:\n-    if verbose >= 3:\n-        print(\"Fancy: Importing plistlib...\")\n-    try:\n-        import plistlib\n-    except ImportError:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not import plistlib which is required for fancy disk images.\\n\")\n-        sys.exit(1)\n-    \n-    p = config.fancy[0]\n-    if verbose >= 3:\n-        print(\"Fancy: Loading \\\"{}\\\"...\".format(p))\n-    if not os.path.exists(p):\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n-        sys.exit(1)\n-    \n-    try:\n-        with open(p, 'rb') as fp:\n-            fancy = plistlib.load(fp, fmt=plistlib.FMT_XML)\n-    except:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not parse fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n-        sys.exit(1)\n-    \n-    try:\n-        assert \"window_bounds\" not in fancy or (isinstance(fancy[\"window_bounds\"], list) and len(fancy[\"window_bounds\"]) == 4)\n-        assert \"background_picture\" not in fancy or isinstance(fancy[\"background_picture\"], str)\n-        assert \"icon_size\" not in fancy or isinstance(fancy[\"icon_size\"], int)\n-        assert \"applications_symlink\" not in fancy or isinstance(fancy[\"applications_symlink\"], bool)\n-        if \"items_position\" in fancy:\n-            assert isinstance(fancy[\"items_position\"], dict)\n-            for key, value in fancy[\"items_position\"].items():\n-                assert isinstance(value, list) and len(value) == 2 and isinstance(value[0], int) and isinstance(value[1], int)\n-    except:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: Bad format of fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n-        sys.exit(1)\n-    \n-    if \"background_picture\" in fancy:\n-        bp = fancy[\"background_picture\"]\n-        if verbose >= 3:\n-            print(\"Fancy: Resolving background picture \\\"{}\\\"...\".format(bp))\n-        if not os.path.exists(bp):\n-            bp = os.path.join(os.path.dirname(p), bp)\n-            if not os.path.exists(bp):\n-                if verbose >= 1:\n-                    sys.stderr.write(\"Error: Could not find background picture at \\\"{}\\\" or \\\"{}\\\"\\n\".format(fancy[\"background_picture\"], bp))\n-                sys.exit(1)\n-            else:\n-                fancy[\"background_picture\"] = bp\n-else:\n-    fancy = None\n-\n # ------------------------------------------------\n \n if os.path.exists(\"dist\"):\n-    if verbose >= 2:\n-        print(\"+ Removing old dist folder +\")\n-    \n+    print(\"+ Removing existing dist folder +\")\n     shutil.rmtree(\"dist\")\n \n-# ------------------------------------------------\n+if os.path.exists(appname + \".dmg\"):\n+    print(\"+ Removing existing DMG +\")\n+    os.unlink(appname + \".dmg\")\n \n-if len(config.volname) == 1:\n-    volname = config.volname[0]\n-else:\n-    volname = app_bundle_name\n+if os.path.exists(appname + \".temp.dmg\"):\n+    os.unlink(appname + \".temp.dmg\")\n \n # ------------------------------------------------\n \n target = os.path.join(\"dist\", \"Bitcoin-Qt.app\")\n \n-if verbose >= 2:\n-    print(\"+ Copying source bundle +\")\n-if verbose >= 3:\n+print(\"+ Copying source bundle +\")\n+if verbose:\n     print(app_bundle, \"->\", target)\n \n os.mkdir(\"dist\")\n@@ -653,257 +441,154 @@ applicationBundle = ApplicationBundleInfo(target)\n \n # ------------------------------------------------\n \n-if verbose >= 2:\n-    print(\"+ Deploying frameworks +\")\n+print(\"+ Deploying frameworks +\")\n \n try:\n     deploymentInfo = deployFrameworksForAppBundle(applicationBundle, config.strip, verbose)\n     if deploymentInfo.qtPath is None:\n         deploymentInfo.qtPath = os.getenv(\"QTDIR\", None)\n         if deploymentInfo.qtPath is None:\n-            if verbose >= 1:\n-                sys.stderr.write(\"Warning: Could not detect Qt's path, skipping plugin deployment!\\n\")\n+            sys.stderr.write(\"Warning: Could not detect Qt's path, skipping plugin deployment!\\n\")\n             config.plugins = False\n except RuntimeError as e:\n-    if verbose >= 1:\n-        sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n+    sys.stderr.write(f\"Error: {str(e)}\\n\")\n     sys.exit(1)\n \n # ------------------------------------------------\n \n if config.plugins:\n-    if verbose >= 2:\n-        print(\"+ Deploying plugins +\")\n+    print(\"+ Deploying plugins +\")\n     \n     try:\n         deployPlugins(applicationBundle, deploymentInfo, config.strip, verbose)\n     except RuntimeError as e:\n-        if verbose >= 1:\n-            sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n+        sys.stderr.write(f\"Error: {str(e)}\\n\")\n         sys.exit(1)\n \n # ------------------------------------------------\n \n-if len(config.add_qt_tr) == 0:\n-    add_qt_tr = []\n-else:\n-    if translations_dir is not None:\n-        qt_tr_dir = translations_dir\n-    else:\n-        if deploymentInfo.qtPath is not None:\n-            qt_tr_dir = os.path.join(deploymentInfo.qtPath, \"translations\")\n-        else:\n-            sys.stderr.write(\"Error: Could not find Qt translation path\\n\")\n-            sys.exit(1)\n-    add_qt_tr = [\"qt_{}.qm\".format(lng) for lng in config.add_qt_tr[0].split(\",\")]\n-    for lng_file in add_qt_tr:\n-        p = os.path.join(qt_tr_dir, lng_file)\n-        if verbose >= 3:\n-            print(\"Checking for \\\"{}\\\"...\".format(p))\n-        if not os.path.exists(p):\n-            if verbose >= 1:\n-                sys.stderr.write(\"Error: Could not find Qt translation file \\\"{}\\\"\\n\".format(lng_file))\n-                sys.exit(1)\n+if config.translations_dir:\n+    if not Path(config.translations_dir[0]).exists():\n+        sys.stderr.write(f\"Error: Could not find translation dir \\\"{config.translations_dir[0]}\\\"\\n\")\n+        sys.exit(1)\n+\n+print(\"+ Adding Qt translations +\")\n+\n+translations = Path(config.translations_dir[0])\n+\n+regex = re.compile('qt_[a-z]*(.qm|_[A-Z]*.qm)')\n+\n+lang_files = [x for x in translations.iterdir() if regex.match(x.name)]\n+\n+for file in lang_files:\n+    if verbose:\n+        print(file.as_posix(), \"->\", os.path.join(applicationBundle.resourcesPath, file.name))\n+    shutil.copy2(file.as_posix(), os.path.join(applicationBundle.resourcesPath, file.name))\n \n # ------------------------------------------------\n \n-if verbose >= 2:\n-    print(\"+ Installing qt.conf +\")\n+print(\"+ Installing qt.conf +\")\n+\n+qt_conf=\"\"\"[Paths]\n+Translations=Resources\n+Plugins=PlugIns\n+\"\"\"\n \n with open(os.path.join(applicationBundle.resourcesPath, \"qt.conf\"), \"wb\") as f:\n     f.write(qt_conf.encode())\n \n # ------------------------------------------------\n \n-if len(add_qt_tr) > 0 and verbose >= 2:\n-    print(\"+ Adding Qt translations +\")\n-\n-for lng_file in add_qt_tr:\n-    if verbose >= 3:\n-        print(os.path.join(qt_tr_dir, lng_file), \"->\", os.path.join(applicationBundle.resourcesPath, lng_file))\n-    shutil.copy2(os.path.join(qt_tr_dir, lng_file), os.path.join(applicationBundle.resourcesPath, lng_file))\n+print(\"+ Generating .DS_Store +\")\n+\n+output_file = os.path.join(\"dist\", \".DS_Store\")\n+\n+ds = DSStore.open(output_file, 'w+')\n+\n+ds['.']['bwsp'] = {\n+    'WindowBounds': '{{300, 280}, {500, 343}}',\n+    'PreviewPaneVisibility': False,\n+}\n+\n+icvp = {\n+    'gridOffsetX': 0.0,\n+    'textSize': 12.0,\n+    'viewOptionsVersion': 1,\n+    'backgroundImageAlias': b'\\x00\\x00\\x00\\x00\\x02\\x1e\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd1\\x94\\\\\\xb0H+\\x00\\x05\\x00\\x00\\x00\\x98\\x0fbackground.tiff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\r\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b.background\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x98\\x00\\x0e\\x00 \\x00\\x0f\\x00b\\x00a\\x00c\\x00k\\x00g\\x00r\\x00o\\x00u\\x00n\\x00d\\x00.\\x00t\\x00i\\x00f\\x00f\\x00\\x0f\\x00\\x02\\x00\\x00\\x00\\x12\\x00\\x1c/.background/background.tiff\\x00\\x14\\x01\\x06\\x00\\x00\\x00\\x00\\x01\\x06\\x00\\x02\\x00\\x00\\x0cMacintosh HD\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xce\\x97\\xab\\xc3H+\\x00\\x00\\x01\\x88[\\x88\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02u\\xab\\x8d\\xd1\\x94\\\\\\xb0devrddsk\\xff\\xff\\xff\\xff\\x00\\x00\\t \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07bitcoin\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xce\\x97\\xab\\xc3\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x01\\x00\\x14\\x01\\x88[\\x88\\x00\\x16\\xa9\\t\\x00\\x08\\xfaR\\x00\\x08\\xfaQ\\x00\\x02d\\x8e\\x00\\x0e\\x00\\x02\\x00\\x00\\x00\\x0f\\x00\\x1a\\x00\\x0c\\x00M\\x00a\\x00c\\x00i\\x00n\\x00t\\x00o\\x00s\\x00h\\x00 \\x00H\\x00D\\x00\\x13\\x00\\x01/\\x00\\x00\\x15\\x00\\x02\\x00\\x14\\xff\\xff\\x00\\x00\\xff\\xff\\x00\\x00',\n+    'backgroundColorBlue': 1.0,\n+    'iconSize': 96.0,\n+    'backgroundColorGreen': 1.0,\n+    'arrangeBy': 'none',\n+    'showIconPreview': True,\n+    'gridSpacing': 100.0,\n+    'gridOffsetY': 0.0,\n+    'showItemInfo': False,\n+    'labelOnBottom': True,\n+    'backgroundType': 2,\n+    'backgroundColorRed': 1.0\n+}\n+alias = Alias().from_bytes(icvp['backgroundImageAlias'])\n+alias.volume.name = appname\n+alias.volume.posix_path = '/Volumes/' + appname\n+icvp['backgroundImageAlias'] = alias.to_bytes()\n+ds['.']['icvp'] = icvp\n+\n+ds['.']['vSrn'] = ('long', 1)\n+\n+ds['Applications']['Iloc'] = (370, 156)\n+ds['Bitcoin-Qt.app']['Iloc'] = (128, 156)\n+\n+ds.flush()\n+ds.close()\n \n # ------------------------------------------------\n \n-if len(config.add_resources) > 0 and verbose >= 2:\n-    print(\"+ Adding additional resources +\")\n+if config.dmg is not None:\n \n-for p in config.add_resources:\n-    t = os.path.join(applicationBundle.resourcesPath, os.path.basename(p))\n-    if verbose >= 3:\n-        print(p, \"->\", t)\n-    if os.path.isdir(p):\n-        shutil.copytree(p, t, symlinks=True)\n-    else:\n-        shutil.copy2(p, t)\n+    print(\"+ Preparing .dmg disk image +\")\n \n-# ------------------------------------------------\n+    if verbose:\n+        print(\"Determining size of \\\"dist\\\"...\")\n+    size = 0\n+    for path, dirs, files in os.walk(\"dist\"):\n+        for file in files:\n+            size += os.path.getsize(os.path.join(path, file))\n+    size += int(size * 0.15)\n \n-if config.sign and 'CODESIGNARGS' not in os.environ:\n-    print(\"You must set the CODESIGNARGS environment variable. Skipping signing.\")\n-elif config.sign:\n-    if verbose >= 1:\n-        print(\"Code-signing app bundle {}\".format(target))\n-    subprocess.check_call(\"codesign --force {} {}\".format(os.environ['CODESIGNARGS'], target), shell=True)\n+    if verbose:\n+        print(\"Creating temp image for modification...\")\n \n-# ------------------------------------------------\n+    tempname: str = appname + \".temp.dmg\"\n \n-if config.dmg is not None:\n+    run([\"hdiutil\", \"create\", tempname, \"-srcfolder\", \"dist\", \"-format\", \"UDRW\", \"-size\", str(size), \"-volname\", appname], check=True, universal_newlines=True)\n \n-    def runHDIUtil(verb: str, image_basename: str, **kwargs) -> int:\n-        hdiutil_args = [\"hdiutil\", verb, image_basename + \".dmg\"]\n-        if \"capture_stdout\" in kwargs:\n-            del kwargs[\"capture_stdout\"]\n-            run = subprocess.check_output\n-        else:\n-            if verbose < 2:\n-                hdiutil_args.append(\"-quiet\")\n-            elif verbose >= 3:\n-                hdiutil_args.append(\"-verbose\")\n-            run = subprocess.check_call\n-        \n-        for key, value in kwargs.items():\n-            hdiutil_args.append(\"-\" + key)\n-            if value is not True:\n-                hdiutil_args.append(str(value))\n-        \n-        return run(hdiutil_args, universal_newlines=True)\n-    \n-    if verbose >= 2:\n-        if fancy is None:\n-            print(\"+ Creating .dmg disk image +\")\n-        else:\n-            print(\"+ Preparing .dmg disk image +\")\n-    \n-    if config.dmg != \"\":\n-        dmg_name = config.dmg\n-    else:\n-        spl = app_bundle_name.split(\" \")\n-        dmg_name = spl[0] + \"\".join(p.capitalize() for p in spl[1:])\n-    \n-    if fancy is None:\n-        try:\n-            runHDIUtil(\"create\", dmg_name, srcfolder=\"dist\", format=\"UDBZ\", volname=volname, ov=True)\n-        except subprocess.CalledProcessError as e:\n-            sys.exit(e.returncode)\n-    else:\n-        if verbose >= 3:\n-            print(\"Determining size of \\\"dist\\\"...\")\n-        size = 0\n-        for path, dirs, files in os.walk(\"dist\"):\n-            for file in files:\n-                size += os.path.getsize(os.path.join(path, file))\n-        size += int(size * 0.15)\n-        \n-        if verbose >= 3:\n-            print(\"Creating temp image for modification...\")\n-        try:\n-            runHDIUtil(\"create\", dmg_name + \".temp\", srcfolder=\"dist\", format=\"UDRW\", size=size, volname=volname, ov=True)\n-        except subprocess.CalledProcessError as e:\n-            sys.exit(e.returncode)\n-        \n-        if verbose >= 3:\n-            print(\"Attaching temp image...\")\n-        try:\n-            output = runHDIUtil(\"attach\", dmg_name + \".temp\", readwrite=True, noverify=True, noautoopen=True, capture_stdout=True)\n-        except subprocess.CalledProcessError as e:\n-            sys.exit(e.returncode)\n-\n-        m = re.search(r\"/Volumes/(.+$)\", output)\n-        disk_root = m.group(0)\n-        disk_name = m.group(1)\n-        \n-        if verbose >= 2:\n-            print(\"+ Applying fancy settings +\")\n-        \n-        if \"background_picture\" in fancy:\n-            bg_path = os.path.join(disk_root, \".background\", os.path.basename(fancy[\"background_picture\"]))\n-            os.mkdir(os.path.dirname(bg_path))\n-            if verbose >= 3:\n-                print(fancy[\"background_picture\"], \"->\", bg_path)\n-            shutil.copy2(fancy[\"background_picture\"], bg_path)\n-        else:\n-            bg_path = None\n-        \n-        if fancy.get(\"applications_symlink\", False):\n-            os.symlink(\"/Applications\", os.path.join(disk_root, \"Applications\"))\n-        \n-        # The Python appscript package broke with OSX 10.8 and isn't being fixed.\n-        # So we now build up an AppleScript string and use the osascript command\n-        # to make the .dmg file pretty:\n-        appscript = Template( \"\"\"\n-        on run argv\n-           tell application \"Finder\"\n-             tell disk \"$disk\"\n-                   open\n-                   set current view of container window to icon view\n-                   set toolbar visible of container window to false\n-                   set statusbar visible of container window to false\n-                   set the bounds of container window to {$window_bounds}\n-                   set theViewOptions to the icon view options of container window\n-                   set arrangement of theViewOptions to not arranged\n-                   set icon size of theViewOptions to $icon_size\n-                   $background_commands\n-                   $items_positions\n-                   close -- close/reopen works around a bug...\n-                   open\n-                   update without registering applications\n-                   delay 5\n-                   eject\n-             end tell\n-           end tell\n-        end run\n-        \"\"\")\n-\n-        itemscript = Template('set position of item \"${item}\" of container window to {${position}}')\n-        items_positions = []\n-        if \"items_position\" in fancy:\n-            for name, position in fancy[\"items_position\"].items():\n-                params = { \"item\" : name, \"position\" : \",\".join([str(p) for p in position]) }\n-                items_positions.append(itemscript.substitute(params))\n-\n-        params = {\n-            \"disk\" : volname,\n-            \"window_bounds\" : \"300,300,800,620\",\n-            \"icon_size\" : \"96\",\n-            \"background_commands\" : \"\",\n-            \"items_positions\" : \"\\n                   \".join(items_positions)\n-            }\n-        if \"window_bounds\" in fancy:\n-            params[\"window_bounds\"] = \",\".join([str(p) for p in fancy[\"window_bounds\"]])\n-        if \"icon_size\" in fancy:\n-            params[\"icon_size\"] = str(fancy[\"icon_size\"])\n-        if bg_path is not None:\n-            # Set background file, then call SetFile to make it invisible.\n-            # (note: making it invisible first makes set background picture fail)\n-            bgscript = Template(\"\"\"set background picture of theViewOptions to file \".background:$bgpic\"\n-                   do shell script \"SetFile -a V /Volumes/$disk/.background/$bgpic\" \"\"\")\n-            params[\"background_commands\"] = bgscript.substitute({\"bgpic\" : os.path.basename(bg_path), \"disk\" : params[\"disk\"]})\n-\n-        s = appscript.substitute(params)\n-        if verbose >= 2:\n-            print(\"Running AppleScript:\")\n-            print(s)\n-\n-        p = subprocess.Popen(['osascript', '-'], stdin=subprocess.PIPE)\n-        p.communicate(input=s.encode('utf-8'))\n-        if p.returncode:\n-            print(\"Error running osascript.\")\n-\n-        if verbose >= 2:\n-            print(\"+ Finalizing .dmg disk image +\")\n-            time.sleep(5)\n-        \n-        try:\n-            runHDIUtil(\"convert\", dmg_name + \".temp\", format=\"UDBZ\", o=dmg_name + \".dmg\", ov=True)\n-        except subprocess.CalledProcessError as e:\n-            sys.exit(e.returncode)\n-        \n-        os.unlink(dmg_name + \".temp.dmg\")\n+    if verbose:\n+        print(\"Attaching temp image...\")\n+    output = run([\"hdiutil\", \"attach\", tempname, \"-readwrite\"], check=True, universal_newlines=True, stdout=PIPE).stdout\n+\n+    m = re.search(r\"/Volumes/(.+$)\", output)\n+    disk_root = m.group(0)\n+\n+    print(\"+ Applying fancy settings +\")\n+\n+    bg_path = os.path.join(disk_root, \".background\", os.path.basename('background.tiff'))\n+    os.mkdir(os.path.dirname(bg_path))\n+    if verbose:\n+        print('background.tiff', \"->\", bg_path)\n+    shutil.copy2('background.tiff', bg_path)\n+\n+    os.symlink(\"/Applications\", os.path.join(disk_root, \"Applications\"))\n+\n+    print(\"+ Finalizing .dmg disk image +\")\n+\n+    run([\"hdiutil\", \"detach\", f\"/Volumes/{appname}\"], universal_newlines=True)\n+\n+    run([\"hdiutil\", \"convert\", tempname, \"-format\", \"UDZO\", \"-o\", appname, \"-imagekey\", \"zlib-level=9\"], check=True, universal_newlines=True)\n+\n+    os.unlink(tempname)\n \n # ------------------------------------------------\n \n-if verbose >= 2:\n-    print(\"+ Done +\")\n+print(\"+ Done +\")\n \n sys.exit(0)"
      },
      {
        "sha": "730196846134f627761feb559c8a847fcf202ae9",
        "filename": "contrib/message-capture/message-capture-docs.md",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/message-capture/message-capture-docs.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/message-capture/message-capture-docs.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/message-capture/message-capture-docs.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,25 @@\n+# Per-Peer Message Capture\n+\n+## Purpose\n+\n+This feature allows for message capture on a per-peer basis.  It answers the simple question: \"Can I see what messages my node is sending and receiving?\"\n+\n+## Usage and Functionality\n+\n+* Run `bitcoind` with the `-capturemessages` option.\n+* Look in the `message_capture` folder in your datadir.\n+  * Typically this will be `~/.bitcoin/message_capture`.\n+  * See that there are many folders inside, one for each peer names with its IP address and port.\n+  * Inside each peer's folder there are two `.dat` files: one is for received messages (`msgs_recv.dat`) and the other is for sent messages (`msgs_sent.dat`).\n+* Run `contrib/message-capture/message-capture-parser.py` with the proper arguments.\n+  * See the `-h` option for help.\n+  * To see all messages, both sent and received, for all peers use:\n+    ```\n+    ./contrib/message-capture/message-capture-parser.py -o out.json \\\n+    ~/.bitcoin/message_capture/**/*.dat\n+    ```\n+  * Note:  The messages in the given `.dat` files will be interleaved in chronological order.  So, giving both received and sent `.dat` files (as above with `*.dat`) will result in all messages being interleaved in chronological order.\n+  * If an output file is not provided (i.e. the `-o` option is not used), then the output prints to `stdout`.\n+* View the resulting output.\n+  * The output file is `JSON` formatted.\n+  * Suggestion: use `jq` to view the output, with `jq . out.json`"
      },
      {
        "sha": "9988478f1b90c4215a89c8899d321971c0830be0",
        "filename": "contrib/message-capture/message-capture-parser.py",
        "status": "added",
        "additions": 214,
        "deletions": 0,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/message-capture/message-capture-parser.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/message-capture/message-capture-parser.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/message-capture/message-capture-parser.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,214 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks * progress)\n+        print('\\r[ {}{} ] {:3.0f}%'\n+              .format('#' * num_blocks,\n+                      ' ' * (max_blocks - num_blocks),\n+                      progress * 100),\n+              end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+\n+            # Read the Header\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+\n+            # Start converting the message to a dictionary\n+            msg_dict = {}\n+            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\n+\n+            msg_ser = BytesIO(f_in.read(length))\n+\n+            # Determine message type\n+            if msgtype not in MESSAGEMAP:\n+                # Unrecognized message type\n+                try:\n+                    msgtype_tmp = msgtype.decode()\n+                    if not msgtype_tmp.isprintable():\n+                        raise UnicodeDecodeError\n+                    msg_dict[\"msgtype\"] = msgtype_tmp\n+                except UnicodeDecodeError:\n+                    msg_dict[\"msgtype\"] = \"UNREADABLE\"\n+                msg_dict[\"body\"] = msg_ser.read().hex()\n+                msg_dict[\"error\"] = \"Unrecognized message type.\"\n+                messages.append(msg_dict)\n+                print(f\"WARNING - Unrecognized message type {msgtype} in {path}\", file=sys.stderr)\n+                continue\n+\n+            # Deserialize the message\n+            msg = MESSAGEMAP[msgtype]()\n+            msg_dict[\"msgtype\"] = msgtype.decode()\n+\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Unable to deserialize message body\n+                msg_ser.seek(0, os.SEEK_SET)\n+                msg_dict[\"body\"] = msg_ser.read().hex()\n+                msg_dict[\"error\"] = \"Unable to deserialize message.\"\n+                messages.append(msg_dict)\n+                print(f\"WARNING - Unable to deserialize message in {path}\", file=sys.stderr)\n+                continue\n+\n+            # Convert body of message into a jsonable object\n+            if length:\n+                msg_dict[\"body\"] = to_jsonable(msg)\n+            messages.append(msg_dict)\n+\n+        if progress_bar:\n+            # Update the progress bar to the end of the current file\n+            # in case we exited the loop early\n+            f_in.seek(0, os.SEEK_END)   # Go to end of file\n+            diff = f_in.tell() - bytes_read - 1\n+            progress_bar.update(diff)\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\t{0} -o out.json <data-dir>/message_capture/**/*.dat\".format(sys.argv[0]),\n+        formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument(\n+        \"capturepaths\",\n+        nargs='+',\n+        help=\"binary message capture files to parse.\")\n+    parser.add_argument(\n+        \"-o\", \"--output\",\n+        help=\"output file.  If unset print to stdout\")\n+    parser.add_argument(\n+        \"-n\", \"--no-progress-bar\",\n+        action='store_true',\n+        help=\"disable the progress bar.  Automatically set if the output is not a terminal\")\n+    args = parser.parse_args()\n+    capturepaths = [Path.cwd() / Path(capturepath) for capturepath in args.capturepaths]\n+    output = Path.cwd() / Path(args.output) if args.output else False\n+    use_progress_bar = (not args.no_progress_bar) and sys.stdout.isatty()\n+\n+    messages = []   # type: List[Any]\n+    if use_progress_bar:\n+        total_size = sum(capture.stat().st_size for capture in capturepaths)\n+        progress_bar = ProgressBar(total_size)\n+    else:\n+        progress_bar = None\n+\n+    for capture in capturepaths:\n+        process_file(str(capture), messages, \"recv\" in capture.stem, progress_bar)\n+\n+    messages.sort(key=lambda msg: msg['time'])\n+\n+    if use_progress_bar:\n+        progress_bar.set_progress(1)\n+\n+    jsonrep = json.dumps(messages)\n+    if output:\n+        with open(str(output), 'w+', encoding=\"utf8\") as f_out:\n+            f_out.write(jsonrep)\n+    else:\n+        print(jsonrep)\n+\n+if __name__ == \"__main__\":\n+    main()"
      },
      {
        "sha": "1cde19efd1a49bd1aae5ae819632821ff0eb0854",
        "filename": "contrib/qos/tc.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/qos/tc.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/qos/tc.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/tc.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -16,7 +16,7 @@ LOCALNET_V4=\"192.168.0.0/16\"\n #defines the IPv6 address space for which you wish to disable rate limiting\n LOCALNET_V6=\"fe80::/10\"\n \n-#delete existing rules\n+#delete existing rules ('Error: Cannot delete qdisc with handle of zero.' means there weren't any.)\n tc qdisc del dev ${IF} root\n \n #add root class"
      },
      {
        "sha": "dbecba7d1db77154a2225306ca60cf2244a7bd50",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 75,
        "deletions": 42,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2017 Wladimir J. van der Laan\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n@@ -13,44 +13,54 @@\n \n These files must consist of lines in the format\n \n-    <ip>\n     <ip>:<port>\n-    [<ipv6>]\n     [<ipv6>]:<port>\n-    <onion>.onion\n-    0xDDBBCCAA (IPv4 little-endian old pnSeeds format)\n+    <onion>.onion:<port>\n+    <i2p>.b32.i2p:<port>\n \n The output will be two data structures with the peers in binary format:\n \n-   static SeedSpec6 pnSeed6_main[]={\n-   ...\n-   }\n-   static SeedSpec6 pnSeed6_test[]={\n+   static const uint8_t chainparams_seed_{main,test}[]={\n    ...\n    }\n \n These should be pasted into `src/chainparamsseeds.h`.\n '''\n \n from base64 import b32decode\n-from binascii import a2b_hex\n+from enum import Enum\n+import struct\n import sys\n import os\n import re\n \n-# ipv4 in ipv6 prefix\n-pchIPv4 = bytearray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff])\n-# tor-specific ipv6 prefix\n-pchOnionCat = bytearray([0xFD,0x87,0xD8,0x7E,0xEB,0x43])\n-\n-def name_to_ipv6(addr):\n-    if len(addr)>6 and addr.endswith('.onion'):\n+class BIP155Network(Enum):\n+    IPV4 = 1\n+    IPV6 = 2\n+    TORV2 = 3  # no longer supported\n+    TORV3 = 4\n+    I2P = 5\n+    CJDNS = 6\n+\n+def name_to_bip155(addr):\n+    '''Convert address string to BIP155 (networkID, addr) tuple.'''\n+    if addr.endswith('.onion'):\n         vchAddr = b32decode(addr[0:-6], True)\n-        if len(vchAddr) != 16-len(pchOnionCat):\n+        if len(vchAddr) == 35:\n+            assert vchAddr[34] == 3\n+            return (BIP155Network.TORV3, vchAddr[:32])\n+        elif len(vchAddr) == 10:\n+            return (BIP155Network.TORV2, vchAddr)\n+        else:\n             raise ValueError('Invalid onion %s' % vchAddr)\n-        return pchOnionCat + vchAddr\n+    elif addr.endswith('.b32.i2p'):\n+        vchAddr = b32decode(addr[0:-8] + '====', True)\n+        if len(vchAddr) == 32:\n+            return (BIP155Network.I2P, vchAddr)\n+        else:\n+            raise ValueError(f'Invalid I2P {vchAddr}')\n     elif '.' in addr: # IPv4\n-        return pchIPv4 + bytearray((int(x) for x in addr.split('.')))\n+        return (BIP155Network.IPV4, bytes((int(x) for x in addr.split('.'))))\n     elif ':' in addr: # IPv6\n         sub = [[], []] # prefix, suffix\n         x = 0\n@@ -67,13 +77,12 @@ def name_to_ipv6(addr):\n                 sub[x].append(val & 0xff)\n         nullbytes = 16 - len(sub[0]) - len(sub[1])\n         assert((x == 0 and nullbytes == 0) or (x == 1 and nullbytes > 0))\n-        return bytearray(sub[0] + ([0] * nullbytes) + sub[1])\n-    elif addr.startswith('0x'): # IPv4-in-little-endian\n-        return pchIPv4 + bytearray(reversed(a2b_hex(addr[2:])))\n+        return (BIP155Network.IPV6, bytes(sub[0] + ([0] * nullbytes) + sub[1]))\n     else:\n         raise ValueError('Could not parse address %s' % addr)\n \n-def parse_spec(s, defaultport):\n+def parse_spec(s):\n+    '''Convert endpoint string to BIP155 (networkID, addr, port) tuple.'''\n     match = re.match(r'\\[([0-9a-fA-F:]+)\\](?::([0-9]+))?$', s)\n     if match: # ipv6\n         host = match.group(1)\n@@ -85,32 +94,57 @@ def parse_spec(s, defaultport):\n         (host,_,port) = s.partition(':')\n \n     if not port:\n-        port = defaultport\n+        port = 0\n     else:\n         port = int(port)\n \n-    host = name_to_ipv6(host)\n-\n-    return (host,port)\n+    host = name_to_bip155(host)\n \n-def process_nodes(g, f, structname, defaultport):\n-    g.write('static SeedSpec6 %s[] = {\\n' % structname)\n-    first = True\n+    if host[0] == BIP155Network.TORV2:\n+        return None  # TORV2 is no longer supported, so we ignore it\n+    else:\n+        return host + (port, )\n+\n+def ser_compact_size(l):\n+    r = b\"\"\n+    if l < 253:\n+        r = struct.pack(\"B\", l)\n+    elif l < 0x10000:\n+        r = struct.pack(\"<BH\", 253, l)\n+    elif l < 0x100000000:\n+        r = struct.pack(\"<BI\", 254, l)\n+    else:\n+        r = struct.pack(\"<BQ\", 255, l)\n+    return r\n+\n+def bip155_serialize(spec):\n+    '''\n+    Serialize (networkID, addr, port) tuple to BIP155 binary format.\n+    '''\n+    r = b\"\"\n+    r += struct.pack('B', spec[0].value)\n+    r += ser_compact_size(len(spec[1]))\n+    r += spec[1]\n+    r += struct.pack('>H', spec[2])\n+    return r\n+\n+def process_nodes(g, f, structname):\n+    g.write('static const uint8_t %s[] = {\\n' % structname)\n     for line in f:\n         comment = line.find('#')\n         if comment != -1:\n             line = line[0:comment]\n         line = line.strip()\n         if not line:\n             continue\n-        if not first:\n-            g.write(',\\n')\n-        first = False\n \n-        (host,port) = parse_spec(line, defaultport)\n-        hoststr = ','.join(('0x%02x' % b) for b in host)\n-        g.write('    {{%s}, %i}' % (hoststr, port))\n-    g.write('\\n};\\n')\n+        spec = parse_spec(line)\n+        if spec is None:  # ignore this entry (e.g. no longer supported addresses like TORV2)\n+            continue\n+        blob = bip155_serialize(spec)\n+        hoststr = ','.join(('0x%02x' % b) for b in blob)\n+        g.write(f'    {hoststr},\\n')\n+    g.write('};\\n')\n \n def main():\n     if len(sys.argv)<2:\n@@ -124,14 +158,13 @@ def main():\n     g.write(' * List of fixed seed nodes for the bitcoin network\\n')\n     g.write(' * AUTOGENERATED by contrib/seeds/generate-seeds.py\\n')\n     g.write(' *\\n')\n-    g.write(' * Each line contains a 16-byte IPv6 address and a port.\\n')\n-    g.write(' * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\\n')\n+    g.write(' * Each line contains a BIP155 serialized (networkID, addr, port) tuple.\\n')\n     g.write(' */\\n')\n     with open(os.path.join(indir,'nodes_main.txt'), 'r', encoding=\"utf8\") as f:\n-        process_nodes(g, f, 'pnSeed6_main', 8333)\n+        process_nodes(g, f, 'chainparams_seed_main')\n     g.write('\\n')\n     with open(os.path.join(indir,'nodes_test.txt'), 'r', encoding=\"utf8\") as f:\n-        process_nodes(g, f, 'pnSeed6_test', 18333)\n+        process_nodes(g, f, 'chainparams_seed_test')\n     g.write('#endif // BITCOIN_CHAINPARAMSSEEDS_H\\n')\n \n if __name__ == '__main__':"
      },
      {
        "sha": "f7bfb6eb0a239ba17ff2aa8579a4ba85217cc498",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 36,
        "deletions": 512,
        "changes": 548,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -650,515 +650,39 @@\n [2a0f:df00:0:254::46]:8333\n [2c0f:f598:5:1:1001::1]:8333\n [2c0f:fce8:0:400:b7c::1]:8333\n-226eupdnaouu4h2v.onion:8333\n-22h7b6f3caabqqsu.onion:8333\n-23wdfqkzttmenvki.onion:8333\n-23yi3frxymtwdgre.onion:8333\n-2ajon3moyf4i2hbb.onion:8333\n-2bfmlpk55hffpl6e.onion:8333\n-2ckmbf6sglwydeth.onion:8333\n-2hkusi5gcaautwqf.onion:8333\n-2ivhmlbxbgnkcykl.onion:8333\n-2mmxouhv6nebowkq.onion:8333\n-2qsnv6exnuuiar7z.onion:8333\n-2qudbhlnvqpli3sz.onion:8333\n-2ujxdfovfyjpmdto.onion:8333\n-2xdgeufrek3eumkw.onion:8333\n-2xdzsruhsej4tsiw.onion:8333\n-34ran2woq4easmss.onion:8333\n-36q7khhej2lxd3wf.onion:8333\n-373wjdspuo52utzq.onion:8333\n-376klet5xqbrg2jv.onion:8333\n-37kwd7fxop766l5k.onion:8333\n-3e5t7hq4alt5tovx.onion:8333\n-3gbxhebfhouuwgc3.onion:8333\n-3hgbjze2nbwyuewf.onion:8333\n-3iuuvrd2waha2cxo.onion:8333\n-3jtxujdaiwh6iltu.onion:8333\n-3l5eq2du7mvscj4a.onion:8333\n-3nofngnqlqeehn7o.onion:8333\n-3r44ddzjitznyahw.onion:8333\n-3vtbuwmton7vq5qz.onion:8333\n-46ohzttz4peki43g.onion:8333\n-47fl3ivl4v56jstr.onion:8333\n-47i6qrl2ijqcwlg6.onion:8333\n-47uupgzcnrwahoto.onion:8333\n-4c5cki37evofds6d.onion:8333\n-4eq36jrx7xuytfpc.onion:8333\n-4ewkdxvcg57adrni.onion:8333\n-4flvgibnm2nld3na.onion:8333\n-4iaontym47imawe4.onion:8333\n-4jxz37oou5ag763c.onion:8333\n-4mnkvj6ha73eqnbk.onion:8333\n-4nnuyxm5k5tlyjq3.onion:8333\n-4nz2yg4cnote3ej7.onion:8333\n-4pozwh6564ygzddk.onion:8333\n-4qgfb56rvpbmesx7.onion:8333\n-4rsax23taqzwmimj.onion:8333\n-4u5j5ay6rasowt4m.onion:8333\n-4vorvtoyegh4zbvr.onion:8333\n-52s4j5pldwlpzhtw.onion:8333\n-5abpiiqfvekoejro.onion:8333\n-5aydzxx6jyoz3nez.onion:8333\n-5cxzdsrtok5dgo4a.onion:8333\n-5eduikpudie3jyrf.onion:8333\n-5epeafkmya4fv5d5.onion:8333\n-5fyxlztic3t6notz.onion:8333\n-5hd6eyew5ybnq6gb.onion:8333\n-5jyfzhwksb6urrp2.onion:8333\n-5nooqgct567ig57v.onion:8333\n-5nsfm4nqqzzprjrp.onion:8333\n-5oqstxspzhlgjef6.onion:8333\n-5pzzmd4tfonrqzb2.onion:8333\n-5sckmx4yucbnp4io.onion:8333\n-5ue7worzbn6hon3e.onion:8333\n-5wxhx2tozpovf6z3.onion:8333\n-5xk3yun36e32e34i.onion:8333\n-5zght2g7vcsapi65.onion:8333\n-62dcdpvdolfzkdzl.onion:8333\n-63bko2mhixnn2b7d.onion:8333\n-67hjvfv6wictalm5.onion:8333\n-6g6ko4klkf5atldi.onion:8333\n-6k5zreexw4cadxi5.onion:8333\n-6kf5ayhlpenywgas.onion:8333\n-6maigxjvcet4pite.onion:8333\n-6ressv4dvplb5ihh.onion:8333\n-6rjex6gyuaui3c5e.onion:8333\n-6skgnf43pphdvjua.onion:8333\n-6stxaoduwisg5sqh.onion:8333\n-6xqy4ts6bo6u5dgm.onion:8333\n-7avnl3dqpgu23jva.onion:8333\n-7ff4wk266no23txn.onion:8333\n-7hipbuzfdcyzqkkg.onion:8333\n-7sjmlzrthjlpfydk.onion:8333\n-7tut3zt2akwrmw6x.onion:8333\n-7uhsjzj6nx3dfnxt.onion:8333\n-7wm4wso3wvatxnbt.onion:8333\n-7ykmzuybwd2ptzg4.onion:8333\n-a27bvhina4y23jxo.onion:8333\n-a53vtdm7uiet5vdl.onion:8333\n-a56572xjuofnt2dp.onion:8333\n-abp25knifdsnc2rv.onion:8333\n-aefx7ubzpal7clak.onion:8333\n-ai5r2diozoe7rrdz.onion:8333\n-aipupphit3enggpj.onion:8333\n-algpjjygd3gtnmpp.onion:8333\n-alihua7rhyc452hr.onion:8333\n-am3gyyfynxzwyxhx.onion:8333\n-ankozzfhl2r3uc6u.onion:8333\n-at3twjlbtc2lqnq5.onion:8333\n-avqobl72pmc64dyi.onion:8333\n-awmdz2fs3b5h5ut5.onion:8333\n-ayywpiy77butdjrj.onion:8333\n-b2i3pj7c24cvprs7.onion:8333\n-b4ilebyxcu6nttio.onion:8333\n-b4vvkbqipcmkwp4v.onion:8333\n-bddfqxps5ibd3ftw.onion:8333\n-be5bgcpo4ooux5qy.onion:8333\n-bgla4m6zetvtv7ls.onion:8333\n-bh32gzw3nyckzqut.onion:8333\n-bho4kodpehn7xr3x.onion:8333\n-bitcoin4rlfa4wqx.onion:8333\n-biw7s6jf6r2mf3cu.onion:8333\n-bk7yp6epnmcllq72.onion:8333\n-blcktrgve5vetjsk.onion:8333\n-blwbp7gfdffdsx4g.onion:8333\n-bnxn6qqc55gvn5op.onion:8333\n-bp7o22lvcjawelvv.onion:8333\n-bqqyqucgj4tchn64.onion:8333\n-bvdzmutcqf7gzzn5.onion:8333\n-c36zmegjkinftmtf.onion:8333\n-c4fn62gnltlgrptv.onion:8333\n-caael5yedviooqzk.onion:8333\n-caq54ablfbrnumdd.onion:8333\n-cernrmrk5zomzozn.onion:8333\n-chri6itgjaagof4t.onion:8333\n-cncwik3tnd2ejm5z.onion:8333\n-cuyjqoziemcmwaxl.onion:8333\n-cx7qa2gpqyp7pld5.onion:8333\n-czp7wgaus4gvio72.onion:8333\n-d2fn54rfyjdangi4.onion:8333\n-d2sk45u6ca64yeqh.onion:8333\n-d3aowmngvktsziae.onion:8333\n-d5iu4aiz3y2kgcgj.onion:8333\n-d6zbw2sxnxgj5sv3.onion:8333\n-db5rd5e46t7mgini.onion:8333\n-dci2gulorl44yj55.onion:8333\n-ddpth2mwt3rsvoog.onion:8333\n-dfrwza7fcecknnms.onion:8333\n-djwhjfj4rh3oz3yj.onion:8333\n-dkk5mmpe5jtjodk5.onion:8333\n-doj3zgmsbzurmqgp.onion:8333\n-dpce4f3rcqddzbx5.onion:8333\n-drwo3vnxch5ozfbo.onion:8333\n-duikkidxip3lyexn.onion:8333\n-duqdliptc22i6hf5.onion:8333\n-duyp4coh5d7nh3ud.onion:8333\n-duz5two3z7c55lxj.onion:8333\n-dvu6dlar6ezc6xen.onion:8333\n-dy6zqs46ycleayyp.onion:8333\n-dz2ydmj3yqrcm4r7.onion:8333\n-e2b2a5suvdawzxud.onion:8333\n-e33h57j2ewkkqsn5.onion:8333\n-e5kjiay7pzj5qpzv.onion:8333\n-e7iko42d2wzcmvy4.onion:8333\n-ea6boh4kotq56ws5.onion:8333\n-efdx6gc4s5ezyqeg.onion:8333\n-efrpuuic6ukeyqcs.onion:8333\n-egruc3bi3itru6gq.onion:8333\n-erc6tjs2ucyadl23.onion:8333\n-eue2n5sk5tktg5bv.onion:8333\n-ezkr7stq4w7ohjrt.onion:8333\n-f3nyyjba6kpxznhk.onion:8333\n-faq73vj4pcs73thu.onion:8333\n-fdvtlj3pscbxuh75.onion:8333\n-fgdpxov4nzxvhcpv.onion:8333\n-fisqq6vzk3m6t225.onion:8333\n-fkgp3qwegacrd2bj.onion:8333\n-fo3tdfwx27takqq5.onion:8333\n-fqkxtchwypispkpv.onion:8333\n-fqunuhlwvd7rq6d5.onion:8333\n-frwt5mscpyhiuwpe.onion:8333\n-fta4gfjiuv6f2le2.onion:8333\n-fuoy2ipuqrqwe5cf.onion:8333\n-fz6nsij6jiyuwlsc.onion:8333\n-g3vlnaaaog5sgui5.onion:8333\n-g44i6jwsutkwmspz.onion:8333\n-g55t65d5ckjixcnw.onion:8333\n-gajd6eyrl2qwkfmg.onion:8333\n-gblue3hr53p4grx7.onion:8333\n-gbpro5tzduiuff4v.onion:8333\n-gc4l3tql32qhfgmi.onion:8333\n-gcnlorvtpycuajc6.onion:8333\n-gdsib2nk2eeoidgc.onion:8333\n-ge5gm7c6w7yahpz7.onion:8333\n-gegcteeep4cwftl5.onion:8333\n-gfoyraudgv5qjdku.onion:8333\n-ggpbuypmxgi26lc6.onion:8333\n-ghqivye7cfckisnt.onion:8333\n-girakxomne5fby64.onion:8333\n-glz5gfk33tuug5ne.onion:8333\n-gplatxoyg5nxl5rj.onion:8333\n-gripl5xjwy2dcr6c.onion:8333\n-gthhzlmqci22nxru.onion:8333\n-gto2d64swosfmk6c.onion:8333\n-guaciney52mgcbp2.onion:8333\n-gwktgrmtwk6nv5sc.onion:8333\n-gwoxnokdcwc7hy4p.onion:8333\n-h333f4qnwe7mrymn.onion:8333\n-h6a32n4blbwwyn4d.onion:8333\n-hafwtrbooszoembm.onion:8333\n-hbwhgsb3eeinnr6t.onion:8333\n-hcv6foxh5mk7fhb5.onion:8333\n-hd6hktcl6wamzlzm.onion:8333\n-hda6msa4v4rt77gx.onion:8333\n-hdgnxkuqsd6wjwwx.onion:8333\n-hgh3azn3eesddvcg.onion:8333\n-hhyxu6bwkjefejoz.onion:8333\n-hizn6rmofsg3upmn.onion:8333\n-hjqxxsy2osemfvev.onion:8333\n-hkbp7mbgw6klls4s.onion:8333\n-hlojuwiwbkoj4kdz.onion:8333\n-hlzxsjr7ob3qzzqq.onion:8333\n-hniuzplezebyhv7a.onion:8333\n-hondewkj4s4rdcwf.onion:8333\n-hql5nv6vhceid3bn.onion:8333\n-hspjo7mqrre5gyxr.onion:8333\n-hu64s2mdr3x7yxka.onion:8333\n-hvwvq2swkqw3qvyo.onion:8333\n-hwo2biyndrrvpl6f.onion:8333\n-hzxj3dth3y2xt45o.onion:8333\n-i3ufxuw3t7cxfdpq.onion:8333\n-ia3n3q5u45gvpx7a.onion:8333\n-icfgs3fctckd4yeo.onion:8333\n-icpz6thqvdjcwlvb.onion:8333\n-if32zo5u4mhdunfd.onion:8333\n-ig4lguql6vxkbmmr.onion:8333\n-ihhcr7fhczqdac4y.onion:8333\n-ijm2tyxob7vkvazz.onion:8333\n-ip3puuqghumfz5ww.onion:8333\n-iq3ket72f3y2frpg.onion:8333\n-iqagt5co4dt7h6hf.onion:8333\n-iugw42ih6hprqr26.onion:8333\n-ivf774v4t7k63i6d.onion:8333\n-ivfacdf7cig2z2y2.onion:8333\n-ivsxdwku5og2zj4l.onion:8333\n-ixwgrhaklvu4g6o7.onion:8333\n-iz56moo6mkp3g7xo.onion:8333\n-j2cp5muw5j3lumcx.onion:8333\n-j2lrkrwugldwewws.onion:8333\n-j2qtmkd2dablssz4.onion:8333\n-j5e2yuan57v2h5el.onion:8333\n-j5jfrdthqt5g25xz.onion:8333\n-j5lk2uv2bspfqxfk.onion:8333\n-janvvzsmzcsj3fil.onion:8333\n-jenn2tmyl3xxarmq.onion:8333\n-jfoe5f2sczojfp32.onion:8333\n-jgcgi6k2pxooi5q3.onion:8333\n-jhana24s3dzkitzp.onion:8333\n-jitgulb24mvfqrdg.onion:8333\n-jjuvwbjfzljmn7t3.onion:8333\n-jlcfomgr5xfexaif.onion:8333\n-jlehs6ybb26qlnna.onion:8333\n-jljzz4tmbqrxq3q5.onion:8333\n-joc4oqceedkg77vf.onion:8333\n-jr5y6njubcbv6g37.onion:8333\n-jroaos6la4vieho4.onion:8333\n-jsmphgkay7iihbkr.onion:8333\n-jtksnokusbzms7wl.onion:8333\n-ju5duo3r6p6diznc.onion:8333\n-jw6zymxcnebahuuj.onion:8333\n-jxalvhf7w7wevqzw.onion:8333\n-jyzhe3ig44ickysb.onion:8333\n-jze6ukn4idrh44eo.onion:8333\n-k4glotlxnmttb6ct.onion:8333\n-k7uy3iwmvguzygd2.onion:8333\n-kl23ofag3ukb6hxl.onion:8333\n-kokt2qr6d4pmyb2d.onion:8333\n-kpalu3h5ydkoaivs.onion:8333\n-krdpbdvtqw5c5lee.onion:8333\n-kriw6kzjzarzgb3g.onion:8333\n-krp2thcmwrpsoue6.onion:8333\n-kvyvdwjwtae5mo77.onion:8333\n-kyrxri5rbr6ipurs.onion:8333\n-kz3oxg7745dxt62q.onion:8333\n-l3w5fcki2wbro2qb.onion:8333\n-l44bisuxhh7reb5q.onion:8333\n-l565g523emjebusj.onion:8333\n-l6w5kdeigwsgnf5t.onion:8333\n-l7a4emryfxkjgmmb.onion:8333\n-l7sloscjqqbifcsw.onion:8333\n-laafjqvtog7djfl2.onion:8333\n-lah676kxbgbgw3u2.onion:8333\n-lbq2a7pnpmviw2qo.onion:8333\n-lc4wnpql27vymi35.onion:8333\n-ldoffbfpk3j6c7y7.onion:8333\n-lehpmglkivobq2qo.onion:8333\n-lgewpjz7ie7daqqr.onion:8333\n-lgkvbvro67jomosw.onion:8333\n-liw5z4ngic6b7vnv.onion:8333\n-ljs7gwrmmza6q6ga.onion:8333\n-lmvax3e6awaxvhqi.onion:8333\n-lrz77dwf7yq4cgnt.onion:8333\n-lva54pnbq2nsmjyr.onion:8333\n-lxc2uphxyyxflhnf.onion:8333\n-lyjybdr4hmj3bqab.onion:8333\n-lz2zlnmyynwtgwf2.onion:8333\n-m6hcnpikimyh37yp.onion:8333\n-md635omjnrgheed3.onion:8333\n-mdb3oupwf4f2qyjb.onion:8333\n-me6d4esx7ohdnxne.onion:8333\n-mecfkik5ci47wckj.onion:8333\n-mfrvevn7w6rwsp4r.onion:8333\n-mimuutlew5srtduk.onion:8333\n-mnysk3izxvra3huv.onion:8333\n-mqu6gqtrhm6xzwwh.onion:8333\n-mwuc6vom4ngijtb3.onion:8333\n-mxdtrjhe2yfsx3pg.onion:8333\n-n4ibet4piscv22nj.onion:8333\n-n6d46vbzx43bevlb.onion:8333\n-n6t6kfgzlvozxhfm.onion:8333\n-n7rrochwerf2qxze.onion:8333\n-ncsdiqmnxhnnjbsz.onion:8333\n-nitxw3ilffngpumv.onion:8333\n-njlsvubildehluwr.onion:8333\n-njslfsivyyhixbsp.onion:8333\n-nkf5e6b7pl4jfd4a.onion:8333\n-nkppsb3t3ducje6m.onion:8333\n-nlfwyqksmeqe45zz.onion:8333\n-nlyjmpcmpaz5b4aa.onion:8333\n-nnmv7z65k65mcesr.onion:8333\n-nrrfwdmrm3imuebn.onion:8333\n-nrrmkgmulpgsbwlt.onion:8333\n-nw4h7leckut7eapv.onion:8333\n-nwky3wd3ihoidvb5.onion:8333\n-ny4kkemmmqv4lptm.onion:8333\n-o25wkcw7eorg2toi.onion:8333\n-o2gumvbkw6pm45cf.onion:8333\n-o4yjshdwlbshylqw.onion:8333\n-ofx4qgw6lppnvtgv.onion:8333\n-oketipl4gndqcaus.onion:8333\n-oq5q4qrqijr2kpun.onion:8333\n-oqw3mfoiobqcklxh.onion:8333\n-orsy2v63ecrmdj55.onion:8333\n-ot4tzmznyimmlszk.onion:8333\n-owk6c2jfthwkyahe.onion:8333\n-oy7ss3hm2okx4tun.onion:8333\n-p2pc6wbaepvdi6ce.onion:8333\n-p2x24gdhasmgcl5j.onion:8333\n-p6couujr2ndhllv3.onion:8333\n-pa7dw5bln5lqmu53.onion:8333\n-pasmchtoooj2kchd.onion:8333\n-pdapkkhk6pbcy2tj.onion:8333\n-peh5ajouuw6mw4sr.onion:8333\n-pkuuc5pwl5xygwhr.onion:8333\n-pq4wjl7vg7tsfycc.onion:8333\n-ptbwqhusps5qieql.onion:8333\n-ptwpbwyj5lnyew2f.onion:8333\n-pu7w3jfyrzp7sxsi.onion:8333\n-pwylbyvfuc62hhvx.onion:8333\n-q2fhnnyt5b2ayvce.onion:8333\n-q3i3apuionbazmfe.onion:8333\n-qd6fcpu3pvbf2y3x.onion:8333\n-qfewv3y7a3p4i3bd.onion:8333\n-qhytdttflhbc4rsh.onion:8333\n-qkn35rb3x2gxbwq4.onion:8333\n-qlvlexs7pwac2f4b.onion:8333\n-qogcqirtuta6rlxg.onion:8333\n-qrzqfxkhrmu5v5ro.onion:8333\n-qsyjasq46b2syiys.onion:8333\n-quu4b2zjbnr2ue4y.onion:8333\n-quycfj2wenz6bfyd.onion:8333\n-qvdy3cmocnlv5v7c.onion:8333\n-qvwhpqygan2xky5h.onion:8333\n-qyutwc26ullujafb.onion:8333\n-r45qg2d6iwfdhqwl.onion:8333\n-r4xudr6u4r5nyga4.onion:8333\n-r6apa5ssujxbwd34.onion:8333\n-r6z2gcsu37k3gaah.onion:8333\n-rbrjgfcca6v5b7yo.onion:8333\n-rcifxibawqt6rxzz.onion:8333\n-rdo3xctk3zkzjvln.onion:8333\n-rdvlepy6ghgpapzo.onion:8333\n-recs3a27chv2lg65.onion:8333\n-rfmbiy5vztvn6hyn.onion:8333\n-rli5lbje4k77inzw.onion:8333\n-roqwnmepcj453vfh.onion:8333\n-rpbnx54qniivrmh3.onion:8333\n-rsvvogqdlijp77hv.onion:8333\n-rwm5d4hg3hc77kdt.onion:8333\n-s3yelkvc5f5xeysw.onion:8333\n-s6rx52hitmpp4lge.onion:8333\n-sa6m3rvycipgemky.onion:8333\n-savebeesmkivmfbo.onion:8333\n-sbyjr5npk2mlmfw7.onion:8333\n-serwj42jme5xhhmw.onion:8333\n-sg4vmubv3djrzvuh.onion:8333\n-shsgksluz6jkgp6g.onion:8333\n-sjyzmwwu6diiit3r.onion:8333\n-sk3en3reudg3sdg5.onion:8333\n-skoifp4oj7l4osu5.onion:8333\n-sle2caplkln33e7y.onion:8333\n-smdd7q7gonajdmjq.onion:8333\n-spmhuxjb2cd7leun.onion:8333\n-srkgyv5edn2pa7il.onion:8333\n-sslnjjhnmwllysv4.onion:8333\n-su66ygras6rkdtnl.onion:8333\n-sundvmbjrtgdfahx.onion:8333\n-svd65k5jpal2p3lt.onion:8333\n-svua5hiqluw7o2sw.onion:8333\n-sxqjubmum4rmfgpu.onion:8333\n-t245vi742ti3tnka.onion:8333\n-t4fbovvgzpnimd2p.onion:8333\n-t4l4wv3erkhpde2p.onion:8333\n-t5qchwbr6u5v2agk.onion:8333\n-t7jlaj6ggyx7s5vy.onion:8333\n-ta6sjeqyb27f4n4a.onion:8333\n-tav7utpw4pfy7j6k.onion:8333\n-taxg5z2sxfm5c4d6.onion:8333\n-tekwvnbodbzrlufs.onion:8333\n-tg4uwrjmtr2jlbjy.onion:8333\n-th4cjvffjtw6vomu.onion:8333\n-th6fxymtwnfifqeu.onion:8333\n-thtchhl25u26nglq.onion:8333\n-tiiah7csuoklcvi6.onion:8333\n-tk63x5fk3337z3ud.onion:8333\n-tkgootat6cqn7vyy.onion:8333\n-tnj565wwqz5wpjvs.onion:8333\n-ts6qx37mmpu6nj5y.onion:8333\n-ttjisvxydgbtp56f.onion:8333\n-twn54v7ra2xjgd55.onion:8333\n-txem5meug24g2ezd.onion:8333\n-tyiunn36lmfcq5lr.onion:8333\n-tyv56xs6g6ndzqux.onion:8333\n-u47f3hxwq65sgs4o.onion:8333\n-u4r7fnholrdwwlni.onion:8333\n-u556ofb3myarafwn.onion:8333\n-u5q3gbz4qpz4wvlr.onion:8333\n-uakly3ydrevvpxwi.onion:8333\n-ug6hapi4qtekzc7v.onion:8333\n-ui553qotd6ron3rf.onion:8333\n-uir7f3wltoka6bbb.onion:8333\n-ukrjjhwodl44wmof.onion:8333\n-ul5gm2ixy7kqdfwg.onion:8333\n-undd7rsj4pen3wo4.onion:8333\n-uorwpzfehtykrg43.onion:8333\n-uovsp2yltnaojq6l.onion:8333\n-usazmdcs32ny24dy.onion:8333\n-usazs7glm7geyxkl.onion:8333\n-uss2kedg7qkwgdr5.onion:8333\n-utgyrvw75wv2nymi.onion:8333\n-uzwacms7kyzhehbl.onion:8333\n-v2kdcetvslmdfcwr.onion:8333\n-v5lhnzzv6nngfg5d.onion:8333\n-vc44gb4veppobrt3.onion:8333\n-vfwyhju43wxhzvux.onion:8333\n-vgujufk53lqyolio.onion:8333\n-vheejqq2v5dkb4xr.onion:8333\n-vj64edev4jnqfdsb.onion:8333\n-vmai5uigezr2khkj.onion:8333\n-vmuykd7sxbmi7w57.onion:8333\n-vomeacttinx3mpml.onion:8333\n-vpow2xofg3fwzsdq.onion:8333\n-vsawli4l5ifxdzaw.onion:8333\n-vunubqkfms7sifok.onion:8333\n-vuombnevwul4bqsb.onion:8333\n-vxcpvdng65aefz6t.onion:8333\n-vyxoizdzavp3obau.onion:8333\n-wbeon2ci7lfio6ay.onion:8333\n-wbwevew62mgsrrdz.onion:8333\n-wfaydlg6zyfzjcu5.onion:8333\n-wfz56s5lyn5dysez.onion:8333\n-wg3mq4ugyy2gx32b.onion:8333\n-whky54bctkf2n4p3.onion:8333\n-whmjanqoyzizzc4t.onion:8333\n-wlhou2wxgqyi3x3f.onion:8333\n-wlvkfrplfiioz22o.onion:8333\n-x3ngb3va7dovuenw.onion:8333\n-x57x62bmmnylvo7r.onion:8333\n-xgvm57mhgv564dka.onion:8333\n-xhs3glfwnwiumivn.onion:8333\n-xje5fwvyfdue2u6k.onion:8333\n-xlgubgyly2blvsg5.onion:8333\n-xnlu3tvakngy7tkp.onion:8333\n-xo5marilhuyo7but.onion:8333\n-xsaaxihdygnwxrix.onion:8333\n-xu5mlugdsmzfkvzh.onion:8333\n-xvrxqcptqvieedb2.onion:8333\n-xwzhrrygftq3q4w4.onion:8333\n-y4swmsaxdcos2bnu.onion:8333\n-y5tl4lqi365pplud.onion:8333\n-y5wzeqyaets5na6t.onion:8333\n-y73qk2mzkjkhoky7.onion:8333\n-y7oz3ydnvib4xhbb.onion:8333\n-yah7qgfqqrteoche.onion:8333\n-yba4brm555denlt7.onion:8333\n-ygeqkg4inplsace3.onion:8333\n-yjhnfu75lazbi34h.onion:8333\n-yjw7kqapxx5vggoj.onion:8333\n-ym7inmovbrna4gco.onion:8333\n-yq5cusnuokscy64z.onion:8333\n-yrcaioqrqrdwokqt.onion:8333\n-yrcr7pgjuazad254.onion:8333\n-yrksvon3tmvoohdv.onion:8333\n-ytpus4vx5w7j6wp2.onion:8333\n-ytqcigk2hhdl45ho.onion:8333\n-yxojl3xmjus3dik2.onion:8333\n-yzdqdsqx4fdung6w.onion:8333\n-z33nukt7ngik3cpe.onion:8333\n-z3ywbadw46ndnxgh.onion:8333\n-z6mbqq7llxlrn4kq.onion:8333\n-zb3lrcksn4rzhzje.onion:8333\n-ze7odp7pzarjplsr.onion:8333\n-zgbmhtbja4fy2373.onion:8333\n-zh7hvalcgvjpoaqm.onion:8333\n-ziztvxehmj5mehpg.onion:8333\n-zjii3yecdrmq73y3.onion:8333\n-zkrwmgjuvsza6ye2.onion:8333\n-zoz2aopwi3wfuqwg.onion:8333\n-ztdcfnh46773bivu.onion:8333\n-zuxhc6d3nwpgc4af.onion:8333\n-zuytrfevzjcpizli.onion:8333\n-zvq6dpt3i2ofdp3g.onion:8333\n-zwwm6ga7u2hqe2sd.onion:8333\n-zyqb4lenfspntj5m.onion:8333\n+\n+# manually added 2021-03 for minimal torv3 bootstrap support\n+2g5qfdkn2vvcbqhzcyvyiitg4ceukybxklraxjnu7atlhd22gdwywaid.onion:8333\n+2jmtxvyup3ijr7u6uvu7ijtnojx4g5wodvaedivbv74w4vzntxbrhvad.onion:8333\n+37m62wn7dz3uqpathpc4qfmgrbupachj52nt3jbtbjugpbu54kbud7yd.onion:8333\n+5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion:8333\n+7cgwjuwi5ehvcay4tazy7ya6463bndjk6xzrttw5t3xbpq4p22q6fyid.onion:8333\n+7pyrpvqdhmayxggpcyqn5l3m5vqkw3qubnmgwlpya2mdo6x7pih7r7id.onion:8333\n+b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion:8333\n+ejxefzf5fpst4mg2rib7grksvscl7p6fvjp6agzgfc2yglxnjtxc3aid.onion:8333\n+fjdyxicpm4o42xmedlwl3uvk5gmqdfs5j37wir52327vncjzvtpfv7yd.onion:8333\n+fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion:8333\n+fzhn4uoxfbfss7h7d6ffbn266ca432ekbbzvqtsdd55ylgxn4jucm5qd.onion:8333\n+gxo5anvfnffnftfy5frkgvplq3rpga2ie3tcblo2vl754fvnhgorn5yd.onion:8333\n+ifdu5qvbofrt4ekui2iyb3kbcyzcsglazhx2hn4wfskkrx2v24qxriid.onion:8333\n+itz3oxsihs62muvknc237xabl5f6w6rfznfhbpayrslv2j2ubels47yd.onion:8333\n+lrjh6fywjqttmlifuemq3puhvmshxzzyhoqx7uoufali57eypuenzzid.onion:8333\n+m7cbpjolo662uel7rpaid46as2otcj44vvwg3gccodnvaeuwbm3anbyd.onion:8333\n+opnyfyeiibe5qo5a3wbxzbb4xdiagc32bbce46owmertdknta5mi7uyd.onion:8333\n+owjsdxmzla6d7lrwkbmetywqym5cyswpihciesfl5qdv2vrmwsgy4uqd.onion:8333\n+q7kgmd7n7h27ds4fg7wocgniuqb3oe2zxp4nfe4skd5da6wyipibqzqd.onion:8333\n+rp7k2go3s5lyj3fnj6zn62ktarlrsft2ohlsxkyd7v3e3idqyptvread.onion:8333\n+sys54sv4xv3hn3sdiv3oadmzqpgyhd4u4xphv4xqk64ckvaxzm57a7yd.onion:8333\n+tddeij4qigtjr6jfnrmq6btnirmq5msgwcsdpcdjr7atftm7cxlqztid.onion:8333\n+vi5bnbxkleeqi6hfccjochnn65lcxlfqs4uwgmhudph554zibiusqnad.onion:8333\n+xqt25cobm5zqucac3634zfght72he6u3eagfyej5ellbhcdgos7t2had.onion:8333\n+\n+# manually added 2021-05 for minimal i2p bootstrap support\n+72l3ucjkuscrbiiepoehuwqgknyzgo7zuix5ty4puwrkyhtmnsga.b32.i2p:0\n+c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p:0\n+gehtac45oaghz54ypyopim64mql7oad2bqclla74l6tfeolzmodq.b32.i2p:0\n+h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p:0\n+hnbbyjpxx54623l555sta7pocy3se4sdgmuebi5k6reesz5rjp6q.b32.i2p:0\n+pjs7or2ctvteeo5tu4bwyrtydeuhqhvdprtujn4daxr75jpebjxa.b32.i2p:0\n+wwbw7nqr3ahkqv62cuqfwgtneekvvpnuc4i4f6yo7tpoqjswvcwa.b32.i2p:0\n+zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtya4snkoka.b32.i2p:0"
      },
      {
        "sha": "118bec280e218a77d0d05cc047151ee95895be1c",
        "filename": "contrib/seeds/nodes_test.txt",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/seeds/nodes_test.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/seeds/nodes_test.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_test.txt?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,11 +1,16 @@\n # List of fixed seed nodes for testnet\n \n # Onion nodes\n-thfsmmn2jbitcoin.onion\n-it2pj4f7657g3rhi.onion\n-nkf5e6b7pl4jfd4a.onion\n-4zhkir2ofl7orfom.onion\n-t6xj6wilh4ytvcs7.onion\n-i6y6ivorwakd7nw3.onion\n-ubqj4rsu3nqtxmtp.onion\n+35k2va6vyw4oo5ly2quvcszgdqr56kcnfgcqpnpcffut4jn3mhhwgbid.onion:18333\n+blo2esfvk2rr7sr4jspmu3vt2vpgr5rigflsj645fnku7v4qmljurtid.onion:18333\n+fuckcswupr5rmlvx2kqqrrosxvjyong4hatmuvxsvtcwe4dsh5rus7qd.onion:18333\n+gblylyacjlitd2ywdmo2qqylwtdky7kgeqfvlhiw4zdag4x62tx54hyd.onion:18333\n+gzwpduv33l7yze3bcdzj3inebiyjwddjnwvnjhh5wvnv4me76mjt2kad.onion:18333\n+h3rphzofxzq52tb63mg5f6kc4my3fkcrgh3m5qryeatts43iljbawiid.onion:18333\n+kf4qlhek34b3kgyxyodlmvgm4bxfrjsbjtgayyaiuyhr2eoyfgtm3bad.onion:18333\n+mc7k47ndjvvhcgs54wmjzxvate4rtuybbjoryikdssjhcxlx27psbyqd.onion:18333\n+mrhiniicugfo7mgrwv3wtolk3tptlcw2uq7ih6sq43fa4k4zbilut3yd.onion:18333\n+uiudyws3qizgmepfoh7wwjmsoxoxut4qrmotjjhrn247xnjopr7sfcid.onion:18333\n+zc2wvoqcezcrf64trji6jmhtss34a5ds5ntzdhqegzvex3ynrd7nxcad.onion:18333\n+zd5m3dgdn46naj36pxvvcalfw2paecle6sdxq64ptwxtxjomkywpklqd.onion:18333\n "
      },
      {
        "sha": "37bac1f38d8f087b4b0e073141bdd29a6a33f8ac",
        "filename": "contrib/shell/git-utils.bash",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/shell/git-utils.bash",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/shell/git-utils.bash",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/shell/git-utils.bash?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+\n+git_root() {\n+    git rev-parse --show-toplevel 2> /dev/null\n+}\n+\n+git_head_version() {\n+    local recent_tag\n+    if recent_tag=\"$(git describe --exact-match HEAD 2> /dev/null)\"; then\n+        echo \"${recent_tag#v}\"\n+    else\n+        git rev-parse --short=12 HEAD\n+    fi\n+}"
      },
      {
        "sha": "389b77b56266d3e753598d5aa90d9642b2e7c30f",
        "filename": "contrib/shell/realpath.bash",
        "status": "added",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/shell/realpath.bash",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/shell/realpath.bash",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/shell/realpath.bash?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,71 @@\n+#!/usr/bin/env bash\n+\n+# Based on realpath.sh written by Michael Kropat\n+# Found at: https://github.com/mkropat/sh-realpath/blob/65512368b8155b176b67122aa395ac580d9acc5b/realpath.sh\n+\n+bash_realpath() {\n+    canonicalize_path \"$(resolve_symlinks \"$1\")\"\n+}\n+\n+resolve_symlinks() {\n+    _resolve_symlinks \"$1\"\n+}\n+\n+_resolve_symlinks() {\n+    _assert_no_path_cycles \"$@\" || return\n+\n+    local dir_context path\n+    if path=$(readlink -- \"$1\"); then\n+        dir_context=$(dirname -- \"$1\")\n+        _resolve_symlinks \"$(_prepend_dir_context_if_necessary \"$dir_context\" \"$path\")\" \"$@\"\n+    else\n+        printf '%s\\n' \"$1\"\n+    fi\n+}\n+\n+_prepend_dir_context_if_necessary() {\n+    if [ \"$1\" = . ]; then\n+        printf '%s\\n' \"$2\"\n+    else\n+        _prepend_path_if_relative \"$1\" \"$2\"\n+    fi\n+}\n+\n+_prepend_path_if_relative() {\n+    case \"$2\" in\n+        /* ) printf '%s\\n' \"$2\" ;;\n+         * ) printf '%s\\n' \"$1/$2\" ;;\n+    esac\n+}\n+\n+_assert_no_path_cycles() {\n+    local target path\n+\n+    target=$1\n+    shift\n+\n+    for path in \"$@\"; do\n+        if [ \"$path\" = \"$target\" ]; then\n+            return 1\n+        fi\n+    done\n+}\n+\n+canonicalize_path() {\n+    if [ -d \"$1\" ]; then\n+        _canonicalize_dir_path \"$1\"\n+    else\n+        _canonicalize_file_path \"$1\"\n+    fi\n+}\n+\n+_canonicalize_dir_path() {\n+    (cd \"$1\" 2>/dev/null && pwd -P)\n+}\n+\n+_canonicalize_file_path() {\n+    local dir file\n+    dir=$(dirname -- \"$1\")\n+    file=$(basename -- \"$1\")\n+    (cd \"$dir\" 2>/dev/null && printf '%s/%s\\n' \"$(pwd -P)\" \"$file\")\n+}"
      },
      {
        "sha": "706b296c54942848642ed7fe8cec18a548235b8a",
        "filename": "contrib/signet/README.md",
        "status": "modified",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/signet/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/signet/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -17,3 +17,67 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+You will first need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target appropriate for your hardware, eg:\n+\n+    cd src/\n+    MINER=\"../contrib/signet/miner\"\n+    GRIND=\"./bitcoin-util grind\"\n+    $MINER calibrate --grind-cmd=\"$GRIND\"\n+    nbits=1e00f403 for 25s average mining time\n+\n+It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n+\n+To mine the first block in your custom chain, you can run:\n+\n+    CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+    ADDR=$($CLI -signet getnewaddress)\n+    NBITS=1e00f403\n+    $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=$NBITS\n+\n+This will mine a single block with a backdated timestamp designed to allow 100 blocks to be mined as quickly as possible, so that it is possible to do transactions.\n+\n+Adding the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+    $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=$NBITS --ongoing\n+\n+Other options\n+-------------\n+\n+The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n+\n+Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n+\n+The --set-block-time option is available to manually move timestamps forward or backward (subject to the rules that blocktime must be greater than mediantime, and dates can't be more than two hours in the future). It can only be used when mining a single block (ie, not when using --ongoing or --max-blocks greater than 1).\n+\n+Instead of using a single address, a ranged descriptor may be provided via the --descriptor parameter, with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the minimum signet difficulty will be targeted. Signet's minimum difficulty corresponds to --nbits=1e0377ae.\n+\n+By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.\n+\n+Using the --multiminer parameter allows mining to be distributed amongst multiple miners. For example, if you have 3 miners and want to share blocks between them, specify --multiminer=1/3 on one, --multiminer=2/3 on another, and --multiminer=3/3 on the last one. If you want one to do 10% of blocks and two others to do 45% each, --multiminer=1-10/100 on the first, and --multiminer=11-55 and --multiminer=56-100 on the others. Note that which miner mines which block is determined by the previous block hash, so occasional runs of one miner doing many blocks in a row is to be expected.\n+\n+When --multiminer is used, if a miner is down and does not mine a block within five minutes of when it is due, the other miners will automatically act as redundant backups ensuring the chain does not halt. The --backup-delay parameter can be used to change how long a given miner waits, allowing one to be the primary backup (after five minutes) and another to be the secondary backup (after six minutes, eg).\n+\n+The --standby-delay parameter can be used to make a backup miner that only mines if a block doesn't arrive on time. This can be combined with --multiminer if desired. Setting --standby-delay also prevents the first block from being mined immediately.\n+\n+Advanced usage\n+--------------\n+\n+The process generate follows internally is to get a block template, convert that into a PSBT, sign the PSBT, move the signature from the signed PSBT into the block template's coinbase, grind proof of work for the block, and then submit the block to the network.\n+\n+These steps can instead be done explicitly:\n+\n+    $CLI -signet getblocktemplate '{\"rules\": [\"signet\",\"segwit\"]}' |\n+      $MINER --cli=\"$CLI\" genpsbt --address=\"$ADDR\" |\n+      $CLI -signet -stdin walletprocesspsbt |\n+      jq -r .psbt |\n+      $MINER --cli=\"$CLI\" solvepsbt --grind-cmd=\"$GRIND\" |\n+      $CLI -signet -stdin submitblock\n+\n+This is intended to allow you to replace part of the pipeline for further experimentation (eg, to sign the block with a hardware wallet).\n+"
      },
      {
        "sha": "78e1fa5ecd2663a2fbd37ef575fd6850fba5f424",
        "filename": "contrib/signet/miner",
        "status": "added",
        "additions": 631,
        "deletions": 0,
        "changes": 631,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/signet/miner",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/signet/miner",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/miner?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,631 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import math\n+import os.path\n+import re\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+PATH_BASE_CONTRIB_SIGNET = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))\n+PATH_BASE_TEST_FUNCTIONAL = os.path.abspath(os.path.join(PATH_BASE_CONTRIB_SIGNET, \"..\", \"..\", \"test\", \"functional\"))\n+sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)\n+\n+from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, from_hex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, tx_from_hex, uint256_from_str # noqa: E402\n+from test_framework.script import CScriptOp # noqa: E402\n+\n+logging.basicConfig(\n+    format='%(asctime)s %(levelname)s %(message)s',\n+    level=logging.INFO,\n+    datefmt='%Y-%m-%d %H:%M:%S')\n+\n+SIGNET_HEADER = b\"\\xec\\xc7\\xda\\xa2\"\n+PSBT_SIGNET_BLOCK = b\"\\xfc\\x06signetb\"    # proprietary PSBT global field holding the block being signed\n+RE_MULTIMINER = re.compile(\"^(\\d+)(-(\\d+))?/(\\d+)$\")\n+\n+# #### some helpers that could go into test_framework\n+\n+# like from_hex, but without the hex part\n+def FromBinary(cls, stream):\n+    \"\"\"deserialize a binary stream (or bytes object) into an object\"\"\"\n+    # handle bytes object by turning it into a stream\n+    was_bytes = isinstance(stream, bytes)\n+    if was_bytes:\n+        stream = BytesIO(stream)\n+    obj = cls()\n+    obj.deserialize(stream)\n+    if was_bytes:\n+        assert len(stream.read()) == 0\n+    return obj\n+\n+class PSBTMap:\n+    \"\"\"Class for serializing and deserializing PSBT maps\"\"\"\n+\n+    def __init__(self, map=None):\n+        self.map = map if map is not None else {}\n+\n+    def deserialize(self, f):\n+        m = {}\n+        while True:\n+            k = deser_string(f)\n+            if len(k) == 0:\n+                break\n+            v = deser_string(f)\n+            if len(k) == 1:\n+                k = k[0]\n+            assert k not in m\n+            m[k] = v\n+        self.map = m\n+\n+    def serialize(self):\n+        m = b\"\"\n+        for k,v in self.map.items():\n+            if isinstance(k, int) and 0 <= k and k <= 255:\n+                k = bytes([k])\n+            m += ser_compact_size(len(k)) + k\n+            m += ser_compact_size(len(v)) + v\n+        m += b\"\\x00\"\n+        return m\n+\n+class PSBT:\n+    \"\"\"Class for serializing and deserializing PSBTs\"\"\"\n+\n+    def __init__(self):\n+        self.g = PSBTMap()\n+        self.i = []\n+        self.o = []\n+        self.tx = None\n+\n+    def deserialize(self, f):\n+        assert f.read(5) == b\"psbt\\xff\"\n+        self.g = FromBinary(PSBTMap, f)\n+        assert 0 in self.g.map\n+        self.tx = FromBinary(CTransaction, self.g.map[0])\n+        self.i = [FromBinary(PSBTMap, f) for _ in self.tx.vin]\n+        self.o = [FromBinary(PSBTMap, f) for _ in self.tx.vout]\n+        return self\n+\n+    def serialize(self):\n+        assert isinstance(self.g, PSBTMap)\n+        assert isinstance(self.i, list) and all(isinstance(x, PSBTMap) for x in self.i)\n+        assert isinstance(self.o, list) and all(isinstance(x, PSBTMap) for x in self.o)\n+        assert 0 in self.g.map\n+        tx = FromBinary(CTransaction, self.g.map[0])\n+        assert len(tx.vin) == len(self.i)\n+        assert len(tx.vout) == len(self.o)\n+\n+        psbt = [x.serialize() for x in [self.g] + self.i + self.o]\n+        return b\"psbt\\xff\" + b\"\".join(psbt)\n+\n+    def to_base64(self):\n+        return base64.b64encode(self.serialize()).decode(\"utf8\")\n+\n+    @classmethod\n+    def from_base64(cls, b64psbt):\n+        return FromBinary(cls, base64.b64decode(b64psbt))\n+\n+# #####\n+\n+def create_coinbase(height, value, spk):\n+    cb = CTransaction()\n+    cb.vin = [CTxIn(COutPoint(0, 0xffffffff), script_BIP34_coinbase_height(height), 0xffffffff)]\n+    cb.vout = [CTxOut(value, spk)]\n+    return cb\n+\n+def get_witness_script(witness_root, witness_nonce):\n+    commitment = uint256_from_str(hash256(ser_uint256(witness_root) + ser_uint256(witness_nonce)))\n+    return b\"\\x6a\" + CScriptOp.encode_op_pushdata(WITNESS_COMMITMENT_HEADER + ser_uint256(commitment))\n+\n+def signet_txs(block, challenge):\n+    # assumes signet solution has not been added yet so does not need\n+    # to be removed\n+\n+    txs = block.vtx[:]\n+    txs[0] = CTransaction(txs[0])\n+    txs[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER)\n+    hashes = []\n+    for tx in txs:\n+        tx.rehash()\n+        hashes.append(ser_uint256(tx.sha256))\n+    mroot = block.get_merkle_root(hashes)\n+\n+    sd = b\"\"\n+    sd += struct.pack(\"<i\", block.nVersion)\n+    sd += ser_uint256(block.hashPrevBlock)\n+    sd += ser_uint256(mroot)\n+    sd += struct.pack(\"<I\", block.nTime)\n+\n+    to_spend = CTransaction()\n+    to_spend.nVersion = 0\n+    to_spend.nLockTime = 0\n+    to_spend.vin = [CTxIn(COutPoint(0, 0xFFFFFFFF), b\"\\x00\" + CScriptOp.encode_op_pushdata(sd), 0)]\n+    to_spend.vout = [CTxOut(0, challenge)]\n+    to_spend.rehash()\n+\n+    spend = CTransaction()\n+    spend.nVersion = 0\n+    spend.nLockTime = 0\n+    spend.vin = [CTxIn(COutPoint(to_spend.sha256, 0), b\"\", 0)]\n+    spend.vout = [CTxOut(0, b\"\\x6a\")]\n+\n+    return spend, to_spend\n+\n+def do_createpsbt(block, signme, spendme):\n+    psbt = PSBT()\n+    psbt.g = PSBTMap( {0: signme.serialize(),\n+                       PSBT_SIGNET_BLOCK: block.serialize()\n+                     } )\n+    psbt.i = [ PSBTMap( {0: spendme.serialize(),\n+                         3: bytes([1,0,0,0])})\n+             ]\n+    psbt.o = [ PSBTMap() ]\n+    return psbt.to_base64()\n+\n+def do_decode_psbt(b64psbt):\n+    psbt = PSBT.from_base64(b64psbt)\n+\n+    assert len(psbt.tx.vin) == 1\n+    assert len(psbt.tx.vout) == 1\n+    assert PSBT_SIGNET_BLOCK in psbt.g.map\n+\n+    scriptSig = psbt.i[0].map.get(7, b\"\")\n+    scriptWitness = psbt.i[0].map.get(8, b\"\\x00\")\n+\n+    return FromBinary(CBlock, psbt.g.map[PSBT_SIGNET_BLOCK]), ser_string(scriptSig) + scriptWitness\n+\n+def finish_block(block, signet_solution, grind_cmd):\n+    block.vtx[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER + signet_solution)\n+    block.vtx[0].rehash()\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    if grind_cmd is None:\n+        block.solve()\n+    else:\n+        headhex = CBlockHeader.serialize(block).hex()\n+        cmd = grind_cmd.split(\" \") + [headhex]\n+        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n+        newhead = from_hex(CBlockHeader(), newheadhex.decode('utf8'))\n+        block.nNonce = newhead.nNonce\n+        block.rehash()\n+    return block\n+\n+def generate_psbt(tmpl, reward_spk, *, blocktime=None):\n+    signet_spk = tmpl[\"signet_challenge\"]\n+    signet_spk_bin = unhexlify(signet_spk)\n+\n+    cbtx = create_coinbase(height=tmpl[\"height\"], value=tmpl[\"coinbasevalue\"], spk=reward_spk)\n+    cbtx.vin[0].nSequence = 2**32-2\n+    cbtx.rehash()\n+\n+    block = CBlock()\n+    block.nVersion = tmpl[\"version\"]\n+    block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n+    block.nTime = tmpl[\"curtime\"] if blocktime is None else blocktime\n+    if block.nTime < tmpl[\"mintime\"]:\n+        block.nTime = tmpl[\"mintime\"]\n+    block.nBits = int(tmpl[\"bits\"], 16)\n+    block.nNonce = 0\n+    block.vtx = [cbtx] + [tx_from_hex(t[\"data\"]) for t in tmpl[\"transactions\"]]\n+\n+    witnonce = 0\n+    witroot = block.calc_witness_merkle_root()\n+    cbwit = CTxInWitness()\n+    cbwit.scriptWitness.stack = [ser_uint256(witnonce)]\n+    block.vtx[0].wit.vtxinwit = [cbwit]\n+    block.vtx[0].vout.append(CTxOut(0, get_witness_script(witroot, witnonce)))\n+\n+    signme, spendme = signet_txs(block, signet_spk_bin)\n+\n+    return do_createpsbt(block, signme, spendme)\n+\n+def get_reward_address(args, height):\n+    if args.address is not None:\n+        return args.address\n+\n+    if '*' not in args.descriptor:\n+        addr = json.loads(args.bcli(\"deriveaddresses\", args.descriptor))[0]\n+        args.address = addr\n+        return addr\n+\n+    remove = [k for k in args.derived_addresses.keys() if k+20 <= height]\n+    for k in remove:\n+        del args.derived_addresses[k]\n+\n+    addr = args.derived_addresses.get(height, None)\n+    if addr is None:\n+        addrs = json.loads(args.bcli(\"deriveaddresses\", args.descriptor, \"[%d,%d]\" % (height, height+20)))\n+        addr = addrs[0]\n+        for k, a in enumerate(addrs):\n+            args.derived_addresses[height+k] = a\n+\n+    return addr\n+\n+def get_reward_addr_spk(args, height):\n+    assert args.address is not None or args.descriptor is not None\n+\n+    if hasattr(args, \"reward_spk\"):\n+        return args.address, args.reward_spk\n+\n+    reward_addr = get_reward_address(args, height)\n+    reward_spk = unhexlify(json.loads(args.bcli(\"getaddressinfo\", reward_addr))[\"scriptPubKey\"])\n+    if args.address is not None:\n+        # will always be the same, so cache\n+        args.reward_spk = reward_spk\n+\n+    return reward_addr, reward_spk\n+\n+def do_genpsbt(args):\n+    tmpl = json.load(sys.stdin)\n+    _, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+    psbt = generate_psbt(tmpl, reward_spk)\n+    print(psbt)\n+\n+def do_solvepsbt(args):\n+    block, signet_solution = do_decode_psbt(sys.stdin.read())\n+    block = finish_block(block, signet_solution, args.grind_cmd)\n+    print(block.serialize().hex())\n+\n+def nbits_to_target(nbits):\n+    shift = (nbits >> 24) & 0xff\n+    return (nbits & 0x00ffffff) * 2**(8*(shift - 3))\n+\n+def target_to_nbits(target):\n+    tstr = \"{0:x}\".format(target)\n+    if len(tstr) < 6:\n+        tstr = (\"000000\"+tstr)[-6:]\n+    if len(tstr) % 2 != 0:\n+        tstr = \"0\" + tstr\n+    if int(tstr[0],16) >= 0x8:\n+        # avoid \"negative\"\n+        tstr = \"00\" + tstr\n+    fix = int(tstr[:6], 16)\n+    sz = len(tstr)//2\n+    if tstr[6:] != \"0\"*(sz*2-6):\n+        fix += 1\n+\n+    return int(\"%02x%06x\" % (sz,fix), 16)\n+\n+def seconds_to_hms(s):\n+    if s == 0:\n+        return \"0s\"\n+    neg = (s < 0)\n+    if neg:\n+        s = -s\n+    out = \"\"\n+    if s % 60 > 0:\n+        out = \"%ds\" % (s % 60)\n+    s //= 60\n+    if s % 60 > 0:\n+        out = \"%dm%s\" % (s % 60, out)\n+    s //= 60\n+    if s > 0:\n+        out = \"%dh%s\" % (s, out)\n+    if neg:\n+        out = \"-\" + out\n+    return out\n+\n+def next_block_delta(last_nbits, last_hash, ultimate_target, do_poisson):\n+    # strategy:\n+    #  1) work out how far off our desired target we are\n+    #  2) cap it to a factor of 4 since that's the best we can do in a single retarget period\n+    #  3) use that to work out the desired average interval in this retarget period\n+    #  4) if doing poisson, use the last hash to pick a uniformly random number in [0,1), and work out a random multiplier to vary the average by\n+    #  5) cap the resulting interval between 1 second and 1 hour to avoid extremes\n+\n+    INTERVAL = 600.0*2016/2015 # 10 minutes, adjusted for the off-by-one bug\n+\n+    current_target = nbits_to_target(last_nbits)\n+    retarget_factor = ultimate_target / current_target\n+    retarget_factor = max(0.25, min(retarget_factor, 4.0))\n+\n+    avg_interval = INTERVAL * retarget_factor\n+\n+    if do_poisson:\n+        det_rand = int(last_hash[-8:], 16) * 2**-32\n+        this_interval_variance = -math.log1p(-det_rand)\n+    else:\n+        this_interval_variance = 1\n+\n+    this_interval = avg_interval * this_interval_variance\n+    this_interval = max(1, min(this_interval, 3600))\n+\n+    return this_interval\n+\n+def next_block_is_mine(last_hash, my_blocks):\n+    det_rand = int(last_hash[-16:-8], 16)\n+    return my_blocks[0] <= (det_rand % my_blocks[2]) < my_blocks[1]\n+\n+def do_generate(args):\n+    if args.max_blocks is not None:\n+        if args.ongoing:\n+            logging.error(\"Cannot specify both --ongoing and --max-blocks\")\n+            return 1\n+        if args.max_blocks < 1:\n+            logging.error(\"N must be a positive integer\")\n+            return 1\n+        max_blocks = args.max_blocks\n+    elif args.ongoing:\n+        max_blocks = None\n+    else:\n+        max_blocks = 1\n+\n+    if args.set_block_time is not None and max_blocks != 1:\n+        logging.error(\"Cannot specify --ongoing or --max-blocks > 1 when using --set-block-time\")\n+        return 1\n+    if args.set_block_time is not None and args.set_block_time < 0:\n+        args.set_block_time = time.time()\n+        logging.info(\"Treating negative block time as current time (%d)\" % (args.set_block_time))\n+\n+    if args.min_nbits:\n+        if args.nbits is not None:\n+            logging.error(\"Cannot specify --nbits and --min-nbits\")\n+            return 1\n+        args.nbits = \"1e0377ae\"\n+        logging.info(\"Using nbits=%s\" % (args.nbits))\n+\n+    if args.set_block_time is None:\n+        if args.nbits is None or len(args.nbits) != 8:\n+            logging.error(\"Must specify --nbits (use calibrate command to determine value)\")\n+            return 1\n+\n+    if args.multiminer is None:\n+       my_blocks = (0,1,1)\n+    else:\n+        if not args.ongoing:\n+            logging.error(\"Cannot specify --multiminer without --ongoing\")\n+            return 1\n+        m = RE_MULTIMINER.match(args.multiminer)\n+        if m is None:\n+            logging.error(\"--multiminer argument must be k/m or j-k/m\")\n+            return 1\n+        start,_,stop,total = m.groups()\n+        if stop is None:\n+            stop = start\n+        start, stop, total = map(int, (start, stop, total))\n+        if stop < start or start <= 0 or total < stop or total == 0:\n+            logging.error(\"Inconsistent values for --multiminer\")\n+            return 1\n+        my_blocks = (start-1, stop, total)\n+\n+    ultimate_target = nbits_to_target(int(args.nbits,16))\n+\n+    mined_blocks = 0\n+    bestheader = {\"hash\": None}\n+    lastheader = None\n+    while max_blocks is None or mined_blocks < max_blocks:\n+\n+        # current status?\n+        bci = json.loads(args.bcli(\"getblockchaininfo\"))\n+\n+        if bestheader[\"hash\"] != bci[\"bestblockhash\"]:\n+            bestheader = json.loads(args.bcli(\"getblockheader\", bci[\"bestblockhash\"]))\n+\n+        if lastheader is None:\n+            lastheader = bestheader[\"hash\"]\n+        elif bestheader[\"hash\"] != lastheader:\n+            next_delta = next_block_delta(int(bestheader[\"bits\"], 16), bestheader[\"hash\"], ultimate_target, args.poisson)\n+            next_delta += bestheader[\"time\"] - time.time()\n+            next_is_mine = next_block_is_mine(bestheader[\"hash\"], my_blocks)\n+            logging.info(\"Received new block at height %d; next in %s (%s)\", bestheader[\"height\"], seconds_to_hms(next_delta), (\"mine\" if next_is_mine else \"backup\"))\n+            lastheader = bestheader[\"hash\"]\n+\n+        # when is the next block due to be mined?\n+        now = time.time()\n+        if args.set_block_time is not None:\n+            logging.debug(\"Setting start time to %d\", args.set_block_time)\n+            mine_time = args.set_block_time\n+            action_time = now\n+            is_mine = True\n+        elif bestheader[\"height\"] == 0:\n+            time_delta = next_block_delta(int(bestheader[\"bits\"], 16), bci[\"bestblockhash\"], ultimate_target, args.poisson)\n+            time_delta *= 100 # 100 blocks\n+            logging.info(\"Backdating time for first block to %d minutes ago\" % (time_delta/60))\n+            mine_time = now - time_delta\n+            action_time = now\n+            is_mine = True\n+        else:\n+            time_delta = next_block_delta(int(bestheader[\"bits\"], 16), bci[\"bestblockhash\"], ultimate_target, args.poisson)\n+            mine_time = bestheader[\"time\"] + time_delta\n+\n+            is_mine = next_block_is_mine(bci[\"bestblockhash\"], my_blocks)\n+\n+            action_time = mine_time\n+            if not is_mine:\n+                action_time += args.backup_delay\n+\n+            if args.standby_delay > 0:\n+                action_time += args.standby_delay\n+            elif mined_blocks == 0:\n+                # for non-standby, always mine immediately on startup,\n+                # even if the next block shouldn't be ours\n+                action_time = now\n+\n+        # don't want fractional times so round down\n+        mine_time = int(mine_time)\n+        action_time = int(action_time)\n+\n+        # can't mine a block 2h in the future; 1h55m for some safety\n+        action_time = max(action_time, mine_time - 6900)\n+\n+        # ready to go? otherwise sleep and check for new block\n+        if now < action_time:\n+            sleep_for = min(action_time - now, 60)\n+            if mine_time < now:\n+                # someone else might have mined the block,\n+                # so check frequently, so we don't end up late\n+                # mining the next block if it's ours\n+                sleep_for = min(20, sleep_for)\n+            minestr = \"mine\" if is_mine else \"backup\"\n+            logging.debug(\"Sleeping for %s, next block due in %s (%s)\" % (seconds_to_hms(sleep_for), seconds_to_hms(mine_time - now), minestr))\n+            time.sleep(sleep_for)\n+            continue\n+\n+        # gbt\n+        tmpl = json.loads(args.bcli(\"getblocktemplate\", '{\"rules\":[\"signet\",\"segwit\"]}'))\n+        if tmpl[\"previousblockhash\"] != bci[\"bestblockhash\"]:\n+            logging.warning(\"GBT based off unexpected block (%s not %s), retrying\", tmpl[\"previousblockhash\"], bci[\"bestblockhash\"])\n+            time.sleep(1)\n+            continue\n+\n+        logging.debug(\"GBT template: %s\", tmpl)\n+\n+        if tmpl[\"mintime\"] > mine_time:\n+            logging.info(\"Updating block time from %d to %d\", mine_time, tmpl[\"mintime\"])\n+            mine_time = tmpl[\"mintime\"]\n+            if mine_time > now:\n+                logging.error(\"GBT mintime is in the future: %d is %d seconds later than %d\", mine_time, (mine_time-now), now)\n+                return 1\n+\n+        # address for reward\n+        reward_addr, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+\n+        # mine block\n+        logging.debug(\"Mining block delta=%s start=%s mine=%s\", seconds_to_hms(mine_time-bestheader[\"time\"]), mine_time, is_mine)\n+        mined_blocks += 1\n+        psbt = generate_psbt(tmpl, reward_spk, blocktime=mine_time)\n+        psbt_signed = json.loads(args.bcli(\"-stdin\", \"walletprocesspsbt\", input=psbt.encode('utf8')))\n+        if not psbt_signed.get(\"complete\",False):\n+            logging.debug(\"Generated PSBT: %s\" % (psbt,))\n+            sys.stderr.write(\"PSBT signing failed\")\n+            return 1\n+        block, signet_solution = do_decode_psbt(psbt_signed[\"psbt\"])\n+        block = finish_block(block, signet_solution, args.grind_cmd)\n+\n+        # submit block\n+        r = args.bcli(\"-stdin\", \"submitblock\", input=block.serialize().hex().encode('utf8'))\n+\n+        # report\n+        bstr = \"block\" if is_mine else \"backup block\"\n+\n+        next_delta = next_block_delta(block.nBits, block.hash, ultimate_target, args.poisson)\n+        next_delta += block.nTime - time.time()\n+        next_is_mine = next_block_is_mine(block.hash, my_blocks)\n+\n+        logging.debug(\"Block hash %s payout to %s\", block.hash, reward_addr)\n+        logging.info(\"Mined %s at height %d; next in %s (%s)\", bstr, tmpl[\"height\"], seconds_to_hms(next_delta), (\"mine\" if next_is_mine else \"backup\"))\n+        if r != \"\":\n+            logging.warning(\"submitblock returned %s for height %d hash %s\", r, tmpl[\"height\"], block.hash)\n+        lastheader = block.hash\n+\n+def do_calibrate(args):\n+    if args.nbits is not None and args.seconds is not None:\n+        sys.stderr.write(\"Can only specify one of --nbits or --seconds\\n\")\n+        return 1\n+    if args.nbits is not None and len(args.nbits) != 8:\n+        sys.stderr.write(\"Must specify 8 hex digits for --nbits\\n\")\n+        return 1\n+\n+    TRIALS = 600 # gets variance down pretty low\n+    TRIAL_BITS = 0x1e3ea75f # takes about 5m to do 600 trials\n+\n+    header = CBlockHeader()\n+    header.nBits = TRIAL_BITS\n+    targ = nbits_to_target(header.nBits)\n+\n+    start = time.time()\n+    count = 0\n+    for i in range(TRIALS):\n+        header.nTime = i\n+        header.nNonce = 0\n+        headhex = header.serialize().hex()\n+        cmd = args.grind_cmd.split(\" \") + [headhex]\n+        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n+\n+    avg = (time.time() - start) * 1.0 / TRIALS\n+\n+    if args.nbits is not None:\n+        want_targ = nbits_to_target(int(args.nbits,16))\n+        want_time = avg*targ/want_targ\n+    else:\n+        want_time = args.seconds if args.seconds is not None else 25\n+        want_targ = int(targ*(avg/want_time))\n+\n+    print(\"nbits=%08x for %ds average mining time\" % (target_to_nbits(want_targ), want_time))\n+    return 0\n+\n+def bitcoin_cli(basecmd, args, **kwargs):\n+    cmd = basecmd + [\"-signet\"] + args\n+    logging.debug(\"Calling bitcoin-cli: %r\", cmd)\n+    out = subprocess.run(cmd, stdout=subprocess.PIPE, **kwargs, check=True).stdout\n+    if isinstance(out, bytes):\n+        out = out.decode('utf8')\n+    return out.strip()\n+\n+def main():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument(\"--cli\", default=\"bitcoin-cli\", type=str, help=\"bitcoin-cli command\")\n+    parser.add_argument(\"--debug\", action=\"store_true\", help=\"Print debugging info\")\n+    parser.add_argument(\"--quiet\", action=\"store_true\", help=\"Only print warnings/errors\")\n+\n+    cmds = parser.add_subparsers(help=\"sub-commands\")\n+    genpsbt = cmds.add_parser(\"genpsbt\", help=\"Generate a block PSBT for signing\")\n+    genpsbt.set_defaults(fn=do_genpsbt)\n+\n+    solvepsbt = cmds.add_parser(\"solvepsbt\", help=\"Solve a signed block PSBT\")\n+    solvepsbt.set_defaults(fn=do_solvepsbt)\n+\n+    generate = cmds.add_parser(\"generate\", help=\"Mine blocks\")\n+    generate.set_defaults(fn=do_generate)\n+    generate.add_argument(\"--ongoing\", action=\"store_true\", help=\"Keep mining blocks\")\n+    generate.add_argument(\"--max-blocks\", default=None, type=int, help=\"Max blocks to mine (default=1)\")\n+    generate.add_argument(\"--set-block-time\", default=None, type=int, help=\"Set block time (unix timestamp)\")\n+    generate.add_argument(\"--nbits\", default=None, type=str, help=\"Target nBits (specify difficulty)\")\n+    generate.add_argument(\"--min-nbits\", action=\"store_true\", help=\"Target minimum nBits (use min difficulty)\")\n+    generate.add_argument(\"--poisson\", action=\"store_true\", help=\"Simulate randomised block times\")\n+    generate.add_argument(\"--multiminer\", default=None, type=str, help=\"Specify which set of blocks to mine (eg: 1-40/100 for the first 40%%, 2/3 for the second 3rd)\")\n+    generate.add_argument(\"--backup-delay\", default=300, type=int, help=\"Seconds to delay before mining blocks reserved for other miners (default=300)\")\n+    generate.add_argument(\"--standby-delay\", default=0, type=int, help=\"Seconds to delay before mining blocks (default=0)\")\n+\n+    calibrate = cmds.add_parser(\"calibrate\", help=\"Calibrate difficulty\")\n+    calibrate.set_defaults(fn=do_calibrate)\n+    calibrate.add_argument(\"--nbits\", type=str, default=None)\n+    calibrate.add_argument(\"--seconds\", type=int, default=None)\n+\n+    for sp in [genpsbt, generate]:\n+        sp.add_argument(\"--address\", default=None, type=str, help=\"Address for block reward payment\")\n+        sp.add_argument(\"--descriptor\", default=None, type=str, help=\"Descriptor for block reward payment\")\n+\n+    for sp in [solvepsbt, generate, calibrate]:\n+        sp.add_argument(\"--grind-cmd\", default=None, type=str, required=(sp==calibrate), help=\"Command to grind a block header for proof-of-work\")\n+\n+    args = parser.parse_args(sys.argv[1:])\n+\n+    args.bcli = lambda *a, input=b\"\", **kwargs: bitcoin_cli(args.cli.split(\" \"), list(a), input=input, **kwargs)\n+\n+    if hasattr(args, \"address\") and hasattr(args, \"descriptor\"):\n+        if args.address is None and args.descriptor is None:\n+            sys.stderr.write(\"Must specify --address or --descriptor\\n\")\n+            return 1\n+        elif args.address is not None and args.descriptor is not None:\n+            sys.stderr.write(\"Only specify one of --address or --descriptor\\n\")\n+            return 1\n+        args.derived_addresses = {}\n+\n+    if args.debug:\n+        logging.getLogger().setLevel(logging.DEBUG)\n+    elif args.quiet:\n+        logging.getLogger().setLevel(logging.WARNING)\n+    else:\n+        logging.getLogger().setLevel(logging.INFO)\n+\n+    if hasattr(args, \"fn\"):\n+        return args.fn(args)\n+    else:\n+        logging.error(\"Must specify command\")\n+        return 1\n+\n+if __name__ == \"__main__\":\n+    main()\n+\n+"
      },
      {
        "sha": "fcc5a378e2cc8f5dba2b627e531234d77992b621",
        "filename": "contrib/testgen/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/testgen/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/testgen/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -4,5 +4,5 @@ Utilities to generate test vectors for the data-driven Bitcoin tests.\n \n Usage:\n \n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 50 > ../../src/test/data/key_io_valid.json\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 50 > ../../src/test/data/key_io_invalid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 70 > ../../src/test/data/key_io_valid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 70 > ../../src/test/data/key_io_invalid.json"
      },
      {
        "sha": "87341ccf96dcdf64ee5b609ba8b743d0d4a06d60",
        "filename": "contrib/testgen/base58.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/testgen/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/testgen/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/base58.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,4 +1,4 @@\n-# Copyright (c) 2012-2018 The Bitcoin Core developers\n+# Copyright (c) 2012-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''"
      },
      {
        "sha": "74918cfb048ad85c55dd049285960f8009369c1b",
        "filename": "contrib/testgen/gen_key_io_test_vectors.py",
        "status": "modified",
        "additions": 54,
        "deletions": 32,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/testgen/gen_key_io_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/testgen/gen_key_io_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_key_io_test_vectors.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,21 +1,21 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2012-2018 The Bitcoin Core developers\n+# Copyright (c) 2012-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n-Generate valid and invalid base58 address and private key test vectors.\n+Generate valid and invalid base58/bech32(m) address and private key test vectors.\n \n Usage:\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 50 > ../../src/test/data/key_io_valid.json\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 50 > ../../src/test/data/key_io_invalid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 70 > ../../src/test/data/key_io_valid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 70 > ../../src/test/data/key_io_invalid.json\n '''\n # 2012 Wladimir J. van der Laan\n # Released under MIT License\n import os\n from itertools import islice\n from base58 import b58encode_chk, b58decode_chk, b58chars\n import random\n-from segwit_addr import bech32_encode, decode_segwit_address, convertbits, CHARSET\n+from segwit_addr import bech32_encode, decode_segwit_address, convertbits, CHARSET, Encoding\n \n # key types\n PUBKEY_ADDRESS = 0\n@@ -32,6 +32,7 @@\n OP_0 = 0x00\n OP_1 = 0x51\n OP_2 = 0x52\n+OP_3 = 0x53\n OP_16 = 0x60\n OP_DUP = 0x76\n OP_EQUAL = 0x87\n@@ -44,6 +45,7 @@\n script_suffix = (OP_EQUAL,)\n p2wpkh_prefix = (OP_0, 20)\n p2wsh_prefix = (OP_0, 32)\n+p2tr_prefix = (OP_1, 32)\n \n metadata_keys = ['isPrivkey', 'chain', 'isCompressed', 'tryCaseFlip']\n # templates for valid sequences\n@@ -54,40 +56,58 @@\n   ((SCRIPT_ADDRESS,),         20, (),   (False, 'main',    None,  None), script_prefix, script_suffix),\n   ((PUBKEY_ADDRESS_TEST,),    20, (),   (False, 'test',    None,  None), pubkey_prefix, pubkey_suffix),\n   ((SCRIPT_ADDRESS_TEST,),    20, (),   (False, 'test',    None,  None), script_prefix, script_suffix),\n+  ((PUBKEY_ADDRESS_TEST,),    20, (),   (False, 'signet',  None,  None), pubkey_prefix, pubkey_suffix),\n+  ((SCRIPT_ADDRESS_TEST,),    20, (),   (False, 'signet',  None,  None), script_prefix, script_suffix),\n   ((PUBKEY_ADDRESS_REGTEST,), 20, (),   (False, 'regtest', None,  None), pubkey_prefix, pubkey_suffix),\n   ((SCRIPT_ADDRESS_REGTEST,), 20, (),   (False, 'regtest', None,  None), script_prefix, script_suffix),\n   ((PRIVKEY,),                32, (),   (True,  'main',    False, None), (),            ()),\n   ((PRIVKEY,),                32, (1,), (True,  'main',    True,  None), (),            ()),\n   ((PRIVKEY_TEST,),           32, (),   (True,  'test',    False, None), (),            ()),\n   ((PRIVKEY_TEST,),           32, (1,), (True,  'test',    True,  None), (),            ()),\n+  ((PRIVKEY_TEST,),           32, (),   (True,  'signet',  False, None), (),            ()),\n+  ((PRIVKEY_TEST,),           32, (1,), (True,  'signet',  True,  None), (),            ()),\n   ((PRIVKEY_REGTEST,),        32, (),   (True,  'regtest', False, None), (),            ()),\n   ((PRIVKEY_REGTEST,),        32, (1,), (True,  'regtest', True,  None), (),            ())\n ]\n # templates for valid bech32 sequences\n bech32_templates = [\n-  # hrp, version, witprog_size, metadata, output_prefix\n-  ('bc',    0, 20, (False, 'main',    None, True), p2wpkh_prefix),\n-  ('bc',    0, 32, (False, 'main',    None, True), p2wsh_prefix),\n-  ('bc',    1,  2, (False, 'main',    None, True), (OP_1, 2)),\n-  ('tb',    0, 20, (False, 'test',    None, True), p2wpkh_prefix),\n-  ('tb',    0, 32, (False, 'test',    None, True), p2wsh_prefix),\n-  ('tb',    2, 16, (False, 'test',    None, True), (OP_2, 16)),\n-  ('bcrt',  0, 20, (False, 'regtest', None, True), p2wpkh_prefix),\n-  ('bcrt',  0, 32, (False, 'regtest', None, True), p2wsh_prefix),\n-  ('bcrt', 16, 40, (False, 'regtest', None, True), (OP_16, 40))\n+  # hrp, version, witprog_size, metadata, encoding, output_prefix\n+  ('bc',    0, 20, (False, 'main',    None, True), Encoding.BECH32,  p2wpkh_prefix),\n+  ('bc',    0, 32, (False, 'main',    None, True), Encoding.BECH32,  p2wsh_prefix),\n+  ('bc',    1, 32, (False, 'main',    None, True), Encoding.BECH32M, p2tr_prefix),\n+  ('bc',    2,  2, (False, 'main',    None, True), Encoding.BECH32M, (OP_2, 2)),\n+  ('tb',    0, 20, (False, 'test',    None, True), Encoding.BECH32,  p2wpkh_prefix),\n+  ('tb',    0, 32, (False, 'test',    None, True), Encoding.BECH32,  p2wsh_prefix),\n+  ('tb',    1, 32, (False, 'test',    None, True), Encoding.BECH32M, p2tr_prefix),\n+  ('tb',    3, 16, (False, 'test',    None, True), Encoding.BECH32M, (OP_3, 16)),\n+  ('tb',    0, 20, (False, 'signet',  None, True), Encoding.BECH32,  p2wpkh_prefix),\n+  ('tb',    0, 32, (False, 'signet',  None, True), Encoding.BECH32,  p2wsh_prefix),\n+  ('tb',    1, 32, (False, 'signet',  None, True), Encoding.BECH32M, p2tr_prefix),\n+  ('tb',    3, 32, (False, 'signet',  None, True), Encoding.BECH32M, (OP_3, 32)),\n+  ('bcrt',  0, 20, (False, 'regtest', None, True), Encoding.BECH32,  p2wpkh_prefix),\n+  ('bcrt',  0, 32, (False, 'regtest', None, True), Encoding.BECH32,  p2wsh_prefix),\n+  ('bcrt',  1, 32, (False, 'regtest', None, True), Encoding.BECH32M, p2tr_prefix),\n+  ('bcrt', 16, 40, (False, 'regtest', None, True), Encoding.BECH32M, (OP_16, 40))\n ]\n # templates for invalid bech32 sequences\n bech32_ng_templates = [\n-  # hrp, version, witprog_size, invalid_bech32, invalid_checksum, invalid_char\n-  ('tc',    0, 20, False, False, False),\n-  ('tb',   17, 32, False, False, False),\n-  ('bcrt',  3,  1, False, False, False),\n-  ('bc',   15, 41, False, False, False),\n-  ('tb',    0, 16, False, False, False),\n-  ('bcrt',  0, 32, True,  False, False),\n-  ('bc',    0, 16, True,  False, False),\n-  ('tb',    0, 32, False, True,  False),\n-  ('bcrt',  0, 20, False, False, True)\n+  # hrp, version, witprog_size, encoding, invalid_bech32, invalid_checksum, invalid_char\n+  ('tc',    0, 20, Encoding.BECH32,  False, False, False),\n+  ('bt',    1, 32, Encoding.BECH32M, False, False, False),\n+  ('tb',   17, 32, Encoding.BECH32M, False, False, False),\n+  ('bcrt',  3,  1, Encoding.BECH32M, False, False, False),\n+  ('bc',   15, 41, Encoding.BECH32M, False, False, False),\n+  ('tb',    0, 16, Encoding.BECH32,  False, False, False),\n+  ('bcrt',  0, 32, Encoding.BECH32,  True,  False, False),\n+  ('bc',    0, 16, Encoding.BECH32,  True,  False, False),\n+  ('tb',    0, 32, Encoding.BECH32,  False, True,  False),\n+  ('bcrt',  0, 20, Encoding.BECH32,  False, False, True),\n+  ('bc',    0, 20, Encoding.BECH32M, False, False, False),\n+  ('tb',    0, 32, Encoding.BECH32M, False, False, False),\n+  ('bcrt',  0, 20, Encoding.BECH32M, False, False, False),\n+  ('bc',    1, 32, Encoding.BECH32,  False, False, False),\n+  ('tb',    2, 16, Encoding.BECH32,  False, False, False),\n+  ('bcrt', 16, 20, Encoding.BECH32,  False, False, False),\n ]\n \n def is_valid(v):\n@@ -127,8 +147,9 @@ def gen_valid_bech32_vector(template):\n     hrp = template[0]\n     witver = template[1]\n     witprog = bytearray(os.urandom(template[2]))\n-    dst_prefix = bytearray(template[4])\n-    rv = bech32_encode(hrp, [witver] + convertbits(witprog, 8, 5))\n+    encoding = template[4]\n+    dst_prefix = bytearray(template[5])\n+    rv = bech32_encode(encoding, hrp, [witver] + convertbits(witprog, 8, 5))\n     return rv, dst_prefix + witprog\n \n def gen_valid_vectors():\n@@ -186,22 +207,23 @@ def gen_invalid_bech32_vector(template):\n     hrp = template[0]\n     witver = template[1]\n     witprog = bytearray(os.urandom(template[2]))\n+    encoding = template[3]\n \n     if no_data:\n-        rv = bech32_encode(hrp, [])\n+        rv = bech32_encode(encoding, hrp, [])\n     else:\n         data = [witver] + convertbits(witprog, 8, 5)\n-        if template[3] and not no_data:\n+        if template[4] and not no_data:\n             if template[2] % 5 in {2, 4}:\n                 data[-1] |= 1\n             else:\n                 data.append(0)\n-        rv = bech32_encode(hrp, data)\n+        rv = bech32_encode(encoding, hrp, data)\n \n-    if template[4]:\n+    if template[5]:\n         i = len(rv) - random.randrange(1, 7)\n         rv = rv[:i] + random.choice(CHARSET.replace(rv[i], '')) + rv[i + 1:]\n-    if template[5]:\n+    if template[6]:\n         i = len(hrp) + 1 + random.randrange(0, len(rv) - len(hrp) - 4)\n         rv = rv[:i] + rv[i:i + 4].upper() + rv[i + 4:]\n "
      },
      {
        "sha": "c14f90b04b716326df73bf7eba513d4623db2f69",
        "filename": "contrib/verify-commits/trusted-keys",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/verify-commits/trusted-keys",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/verify-commits/trusted-keys",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-keys?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -4,3 +4,4 @@\n B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B\n CA03882CB1FC067B5D3ACFE4D300116E1C875A3D\n E777299FC265DD04793070EB944D35F9AC3DB76A\n+D1DBF2C4B96F2DEBF4C16654410108112E7EA81F"
      },
      {
        "sha": "c50d4bef7151c4d3b0a56f57d8dc2418c1ee34ca",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -21,21 +21,21 @@ The script returns 0 if everything passes the checks. It returns 1 if either the\n \n \n ```sh\n-./verify.sh bitcoin-core-0.11.2\n-./verify.sh bitcoin-core-0.12.0\n-./verify.sh bitcoin-core-0.13.0-rc3\n+./verify.py bitcoin-core-0.11.2\n+./verify.py bitcoin-core-0.12.0\n+./verify.py bitcoin-core-0.13.0-rc3\n ```\n \n If you only want to download the binaries of certain platform, add the corresponding suffix, e.g.:\n \n ```sh\n-./verify.sh bitcoin-core-0.11.2-osx\n-./verify.sh 0.12.0-linux\n-./verify.sh bitcoin-core-0.13.0-rc3-win64\n+./verify.py bitcoin-core-0.11.2-osx\n+./verify.py 0.12.0-linux\n+./verify.py bitcoin-core-0.13.0-rc3-win64\n ```\n \n If you do not want to keep the downloaded binaries, specify anything as the second parameter.\n \n ```sh\n-./verify.sh bitcoin-core-0.13.0 delete\n+./verify.py bitcoin-core-0.13.0 delete\n ```"
      },
      {
        "sha": "6cbaf2dc0c7c08c4f0a1a28a248162e88a8fee8f",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "added",
        "additions": 183,
        "deletions": 0,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,183 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+from hashlib import sha256\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-O', local_file, remote_file]\n+    else:\n+        # use timestamping mechanism if local filename is not explicitly set\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def files_are_equal(filename1, filename2):\n+    with open(filename1, 'rb') as file1:\n+        contents1 = file1.read()\n+    with open(filename2, 'rb') as file2:\n+        contents2 = file2.read()\n+    return contents1 == contents2\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n+                             output_filename, signature_filename],\n+                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+def main(args):\n+    # sanity check\n+    if len(args) < 1:\n+        print(\"Error: need to specify a version on the command line\")\n+        return 3\n+\n+    # determine remote dir dependent on provided version string\n+    version_base, version_rc, os_filter = parse_version_string(args[0])\n+    remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n+    if version_rc:\n+        remote_dir += f\"test.{version_rc}/\"\n+    remote_sigfile = remote_dir + SIGNATUREFILENAME\n+\n+    # create working directory\n+    os.makedirs(WORKINGDIR, exist_ok=True)\n+    os.chdir(WORKINGDIR)\n+\n+    # fetch first signature file\n+    sigfile1 = SIGNATUREFILENAME\n+    success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n+    if not success:\n+        print(\"Error: couldn't fetch signature file. \"\n+              \"Have you specified the version number in the following format?\")\n+        print(f\"[{VERSIONPREFIX}]<version>[-rc[0-9]][-platform] \"\n+              f\"(example: {VERSIONPREFIX}0.21.0-rc3-osx)\")\n+        print(\"wget output:\")\n+        print(indent(output, '\\t'))\n+        return 4\n+\n+    # fetch second signature file\n+    sigfile2 = SIGNATUREFILENAME + \".2\"\n+    success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n+    if not success:\n+        print(\"bitcoin.org failed to provide signature file, \"\n+              \"but bitcoincore.org did?\")\n+        print(\"wget output:\")\n+        print(indent(output, '\\t'))\n+        remove_files([sigfile1])\n+        return 5\n+\n+    # ensure that both signature files are equal\n+    if not files_are_equal(sigfile1, sigfile2):\n+        print(\"bitcoin.org and bitcoincore.org signature files were not equal?\")\n+        print(f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n+        return 6\n+\n+    # check signature and extract data into file\n+    retval, output = verify_with_gpg(sigfile1, HASHFILE)\n+    if retval != 0:\n+        if retval == 1:\n+            print(\"Bad signature.\")\n+        elif retval == 2:\n+            print(\"gpg error. Do you have the Bitcoin Core binary release \"\n+                  \"signing key installed?\")\n+        print(\"gpg output:\")\n+        print(indent(output, '\\t'))\n+        remove_files([sigfile1, sigfile2, HASHFILE])\n+        return 1\n+\n+    # extract hashes/filenames of binaries to verify from hash file;\n+    # each line has the following format: \"<hash> <binary_filename>\"\n+    with open(HASHFILE, 'r', encoding='utf8') as hash_file:\n+        hashes_to_verify = [\n+            line.split()[:2] for line in hash_file if os_filter in line]\n+    remove_files([HASHFILE])\n+    if not hashes_to_verify:\n+        print(\"error: no files matched the platform specified\")\n+        return 7\n+\n+    # download binaries\n+    for _, binary_filename in hashes_to_verify:\n+        print(f\"Downloading {binary_filename}\")\n+        download_with_wget(HOST1 + remote_dir + binary_filename)\n+\n+    # verify hashes\n+    offending_files = []\n+    for hash_expected, binary_filename in hashes_to_verify:\n+        with open(binary_filename, 'rb') as binary_file:\n+            hash_calculated = sha256(binary_file.read()).hexdigest()\n+        if hash_calculated != hash_expected:\n+            offending_files.append(binary_filename)\n+    if offending_files:\n+        print(\"Hashes don't match.\")\n+        print(\"Offending files:\")\n+        print('\\n'.join(offending_files))\n+        return 1\n+    verified_binaries = [entry[1] for entry in hashes_to_verify]\n+\n+    # clean up files if desired\n+    if len(args) >= 2:\n+        print(\"Clean up the binaries\")\n+        remove_files([sigfile1, sigfile2] + verified_binaries)\n+    else:\n+        print(f\"Keep the binaries in {WORKINGDIR}\")\n+\n+    print(\"Verified hashes of\")\n+    print('\\n'.join(verified_binaries))\n+    return 0\n+\n+\n+if __name__ == '__main__':\n+    sys.exit(main(sys.argv[1:]))"
      },
      {
        "sha": "4296998631cff715d429c5b203c41b53f8e722e0",
        "filename": "contrib/verifybinaries/verify.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 177,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/verifybinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/contrib/verifybinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.sh?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,177 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2016-2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-###   This script attempts to download the signature file SHA256SUMS.asc from\n-###   bitcoincore.org and bitcoin.org and compares them.\n-###   It first checks if the signature passes, and then downloads the files specified in\n-###   the file, and checks if the hashes of these files match those that are specified\n-###   in the signature file.\n-###   The script returns 0 if everything passes the checks. It returns 1 if either the\n-###   signature check or the hash check doesn't pass. If an error occurs the return value is 2\n-\n-export LC_ALL=C\n-function clean_up {\n-   for file in \"$@\"\n-   do\n-      rm \"$file\" 2> /dev/null\n-   done\n-}\n-\n-WORKINGDIR=\"/tmp/bitcoin_verify_binaries\"\n-TMPFILE=\"hashes.tmp\"\n-\n-SIGNATUREFILENAME=\"SHA256SUMS.asc\"\n-RCSUBDIR=\"test\"\n-HOST1=\"https://bitcoincore.org\"\n-HOST2=\"https://bitcoin.org\"\n-BASEDIR=\"/bin/\"\n-VERSIONPREFIX=\"bitcoin-core-\"\n-RCVERSIONSTRING=\"rc\"\n-\n-if [ ! -d \"$WORKINGDIR\" ]; then\n-   mkdir \"$WORKINGDIR\"\n-fi\n-\n-cd \"$WORKINGDIR\" || exit 1\n-\n-#test if a version number has been passed as an argument\n-if [ -n \"$1\" ]; then\n-   #let's also check if the version number includes the prefix 'bitcoin-',\n-   #  and add this prefix if it doesn't\n-   if [[ $1 == \"$VERSIONPREFIX\"* ]]; then\n-      VERSION=\"$1\"\n-   else\n-      VERSION=\"$VERSIONPREFIX$1\"\n-   fi\n-\n-   STRIPPEDLAST=\"${VERSION%-*}\"\n-\n-   #now let's see if the version string contains \"rc\" or a platform name (e.g. \"osx\")\n-   if [[ \"$STRIPPEDLAST-\" == \"$VERSIONPREFIX\" ]]; then\n-      BASEDIR=\"$BASEDIR$VERSION/\"\n-   else\n-      # let's examine the last part to see if it's rc and/or platform name\n-      STRIPPEDNEXTTOLAST=\"${STRIPPEDLAST%-*}\"\n-      if [[ \"$STRIPPEDNEXTTOLAST-\" == \"$VERSIONPREFIX\" ]]; then\n-\n-         LASTSUFFIX=\"${VERSION##*-}\"\n-         VERSION=\"$STRIPPEDLAST\"\n-\n-         if [[ $LASTSUFFIX == *\"$RCVERSIONSTRING\"* ]]; then\n-            RCVERSION=\"$LASTSUFFIX\"\n-         else\n-            PLATFORM=\"$LASTSUFFIX\"\n-         fi\n-\n-      else\n-         RCVERSION=\"${STRIPPEDLAST##*-}\"\n-         PLATFORM=\"${VERSION##*-}\"\n-\n-         VERSION=\"$STRIPPEDNEXTTOLAST\"\n-      fi\n-\n-      BASEDIR=\"$BASEDIR$VERSION/\"\n-      if [[ $RCVERSION == *\"$RCVERSIONSTRING\"* ]]; then\n-         BASEDIR=\"$BASEDIR$RCSUBDIR.$RCVERSION/\"\n-      fi\n-   fi\n-else\n-   echo \"Error: need to specify a version on the command line\"\n-   exit 2\n-fi\n-\n-if ! WGETOUT=$(wget -N \"$HOST1$BASEDIR$SIGNATUREFILENAME\" 2>&1); then\n-   echo \"Error: couldn't fetch signature file. Have you specified the version number in the following format?\"\n-   # shellcheck disable=SC1087\n-   echo \"[$VERSIONPREFIX]<version>-[$RCVERSIONSTRING[0-9]] (example: ${VERSIONPREFIX}0.10.4-${RCVERSIONSTRING}1)\"\n-   echo \"wget output:\"\n-   # shellcheck disable=SC2001\n-   echo \"$WGETOUT\"|sed 's/^/\\t/g'\n-   exit 2\n-fi\n-\n-if ! WGETOUT=$(wget -N -O \"$SIGNATUREFILENAME.2\" \"$HOST2$BASEDIR$SIGNATUREFILENAME\" 2>&1); then\n-   echo \"bitcoin.org failed to provide signature file, but bitcoincore.org did?\"\n-   echo \"wget output:\"\n-   # shellcheck disable=SC2001\n-   echo \"$WGETOUT\"|sed 's/^/\\t/g'\n-   clean_up $SIGNATUREFILENAME\n-   exit 3\n-fi\n-\n-SIGFILEDIFFS=\"$(diff $SIGNATUREFILENAME $SIGNATUREFILENAME.2)\"\n-if [ \"$SIGFILEDIFFS\" != \"\" ]; then\n-   echo \"bitcoin.org and bitcoincore.org signature files were not equal?\"\n-   clean_up $SIGNATUREFILENAME $SIGNATUREFILENAME.2\n-   exit 4\n-fi\n-\n-#then we check it\n-GPGOUT=$(gpg --yes --decrypt --output \"$TMPFILE\" \"$SIGNATUREFILENAME\" 2>&1)\n-\n-#return value 0: good signature\n-#return value 1: bad signature\n-#return value 2: gpg error\n-\n-RET=\"$?\"\n-if [ $RET -ne 0 ]; then\n-   if [ $RET -eq 1 ]; then\n-      #and notify the user if it's bad\n-      echo \"Bad signature.\"\n-   elif [ $RET -eq 2 ]; then\n-      #or if a gpg error has occurred\n-      echo \"gpg error. Do you have the Bitcoin Core binary release signing key installed?\"\n-   fi\n-\n-   echo \"gpg output:\"\n-   # shellcheck disable=SC2001\n-   echo \"$GPGOUT\"|sed 's/^/\\t/g'\n-   clean_up $SIGNATUREFILENAME $SIGNATUREFILENAME.2 $TMPFILE\n-   exit \"$RET\"\n-fi\n-\n-if [ -n \"$PLATFORM\" ]; then\n-   grep $PLATFORM $TMPFILE > \"$TMPFILE-plat\"\n-   TMPFILESIZE=$(stat -c%s \"$TMPFILE-plat\")\n-   if [ $TMPFILESIZE -eq 0 ]; then\n-      echo \"error: no files matched the platform specified\" && exit 3\n-   fi\n-   mv \"$TMPFILE-plat\" $TMPFILE\n-fi\n-\n-#here we extract the filenames from the signature file\n-FILES=$(awk '{print $2}' \"$TMPFILE\")\n-\n-#and download these one by one\n-for file in $FILES\n-do\n-   echo \"Downloading $file\"\n-   wget --quiet -N \"$HOST1$BASEDIR$file\"\n-done\n-\n-#check hashes\n-DIFF=$(diff <(sha256sum $FILES) \"$TMPFILE\")\n-\n-if [ $? -eq 1 ]; then\n-   echo \"Hashes don't match.\"\n-   echo \"Offending files:\"\n-   echo \"$DIFF\"|grep \"^<\"|awk '{print \"\\t\"$3}'\n-   exit 1\n-elif [ $? -gt 1 ]; then\n-   echo \"Error executing 'diff'\"\n-   exit 2\n-fi\n-\n-if [ -n \"$2\" ]; then\n-   echo \"Clean up the binaries\"\n-   clean_up $FILES $SIGNATUREFILENAME $SIGNATUREFILENAME.2 $TMPFILE\n-else\n-   echo \"Keep the binaries in $WORKINGDIR\"\n-   clean_up $TMPFILE\n-fi\n-\n-echo -e \"Verified hashes of \\n$FILES\"\n-\n-exit 0"
      },
      {
        "sha": "29802e622ed12908cc38404f9e675b50cb3837e2",
        "filename": "contrib/windeploy/detached-sig-create.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/windeploy/detached-sig-create.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/windeploy/detached-sig-create.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/windeploy/detached-sig-create.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -25,7 +25,7 @@ CERTFILE=\"win-codesign.cert\"\n mkdir -p \"${OUTSUBDIR}\"\n basename -a $(ls -1 \"${SRCDIR}\"/*-unsigned.exe) | while read UNSIGNED; do\n   echo Signing \"${UNSIGNED}\"\n-  \"${OSSLSIGNCODE}\" sign -certs \"${CERTFILE}\" -t \"${TIMESERVER}\" -in \"${SRCDIR}/${UNSIGNED}\" -out \"${WORKDIR}/${UNSIGNED}\" \"$@\"\n+  \"${OSSLSIGNCODE}\" sign -certs \"${CERTFILE}\" -t \"${TIMESERVER}\" -h sha256 -in \"${SRCDIR}/${UNSIGNED}\" -out \"${WORKDIR}/${UNSIGNED}\" \"$@\"\n   \"${OSSLSIGNCODE}\" extract-signature -pem -in \"${WORKDIR}/${UNSIGNED}\" -out \"${OUTSUBDIR}/${UNSIGNED}.pem\" && rm \"${WORKDIR}/${UNSIGNED}\"\n done\n "
      },
      {
        "sha": "e763df5847875b54e45e5c3b126136782b0145f6",
        "filename": "contrib/windeploy/win-codesign.cert",
        "status": "modified",
        "additions": 83,
        "deletions": 94,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/windeploy/win-codesign.cert",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/windeploy/win-codesign.cert",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/windeploy/win-codesign.cert?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,100 +1,89 @@\n -----BEGIN CERTIFICATE-----\n-MIIFdDCCBFygAwIBAgIRAL98pqZb/N9LuNaNxKsHNGQwDQYJKoZIhvcNAQELBQAw\n-fDELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n-A1UEBxMHU2FsZm9yZDEYMBYGA1UEChMPU2VjdGlnbyBMaW1pdGVkMSQwIgYDVQQD\n-ExtTZWN0aWdvIFJTQSBDb2RlIFNpZ25pbmcgQ0EwHhcNMjAwMzI0MDAwMDAwWhcN\n-MjEwMzI0MjM1OTU5WjCBtzELMAkGA1UEBhMCQ0gxDTALBgNVBBEMBDgwMDUxDjAM\n-BgNVBAgMBVN0YXRlMRAwDgYDVQQHDAdaw7xyaWNoMRcwFQYDVQQJDA5NYXR0ZW5n\n-YXNzZSAyNzEuMCwGA1UECgwlQml0Y29pbiBDb3JlIENvZGUgU2lnbmluZyBBc3Nv\n-Y2lhdGlvbjEuMCwGA1UEAwwlQml0Y29pbiBDb3JlIENvZGUgU2lnbmluZyBBc3Nv\n-Y2lhdGlvbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMtxC8N4r/jE\n-OGOdFy/0UtiUvEczPZf9WYZz/7paAkc75XopHIE5/ssmoEX27gG9K00tf3Q62QAx\n-inZUPWkNTh8X0l+6uSGiIBFIV7dDgztIxnPcxaqw0k7Q2TEqKJvb5qm16zX6WfXJ\n-R2r6O5utUdQ3AarHnQq9fwdM1j5+ywS5u52te74ENgDMTMKUuB2J3KH1ASg5PAtO\n-CjPqPL+ZXJ7eT3M0Z+Lbu5ISZSqZB48BcCwOo/fOO0dAiLT9FE1iVtaCpBKHqGmd\n-glRjPzZdgDv8g28etRmk8wQ5pQmfL2gBjt/LtIgMPTdHHETKLxJO5H3y0CNx1vzL\n-ql7xNMxELxkCAwEAAaOCAbMwggGvMB8GA1UdIwQYMBaAFA7hOqhTOjHVir7Bu61n\n-GgOFrTQOMB0GA1UdDgQWBBSHBbl82FUJiUkXyyYJog1awYRsxjAOBgNVHQ8BAf8E\n-BAMCB4AwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDAzARBglghkgB\n-hvhCAQEEBAMCBBAwQAYDVR0gBDkwNzA1BgwrBgEEAbIxAQIBAwIwJTAjBggrBgEF\n-BQcCARYXaHR0cHM6Ly9zZWN0aWdvLmNvbS9DUFMwQwYDVR0fBDwwOjA4oDagNIYy\n-aHR0cDovL2NybC5zZWN0aWdvLmNvbS9TZWN0aWdvUlNBQ29kZVNpZ25pbmdDQS5j\n-cmwwcwYIKwYBBQUHAQEEZzBlMD4GCCsGAQUFBzAChjJodHRwOi8vY3J0LnNlY3Rp\n-Z28uY29tL1NlY3RpZ29SU0FDb2RlU2lnbmluZ0NBLmNydDAjBggrBgEFBQcwAYYX\n-aHR0cDovL29jc3Auc2VjdGlnby5jb20wKwYDVR0RBCQwIoEgam9uYXNAYml0Y29p\n-bmNvcmVjb2Rlc2lnbmluZy5vcmcwDQYJKoZIhvcNAQELBQADggEBAAU59qJzQ2ED\n-aTMIQTsU01zIhZJ/xwQh78i0v2Mnr46RvzYrZOev+btF3SyUYD8veNnbYlY6yEYq\n-Vb+/PQnE3t1xlqR80qiTZCk/Wmxx/qKvQuWeRL5QQgvsCmWBpycQ7PNfwzOWxbPE\n-b0Hb2/VFFZfR9iltkfeInRUrzS96CJGYtm7dMf2JtnXYBcwpn1N8BSMH4nXVyN8g\n-VEE5KyjE7+/awYiSST7+e6Y7FE5AJ4f3FjqnRm+2XetTVqITwMLKZMoV283nSEeH\n-fA4FNAMGz9QeV38ol65NNqFP2vSSgVoPK79orqH9OOW2LSobt2qun+euddJIQeYV\n-CMP90b/2WPc=\n+MIIGQzCCBSugAwIBAgIQBSN7Cm16Z0UT9p7lA2jiKDANBgkqhkiG9w0BAQsFADBy\n+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\n+d3cuZGlnaWNlcnQuY29tMTEwLwYDVQQDEyhEaWdpQ2VydCBTSEEyIEFzc3VyZWQg\n+SUQgQ29kZSBTaWduaW5nIENBMB4XDTIxMDUyMTAwMDAwMFoXDTIyMDUyNjIzNTk1\n+OVowgYAxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhEZWxhd2FyZTEOMAwGA1UEBxMF\n+TGV3ZXMxJjAkBgNVBAoTHUJpdGNvaW4gQ29yZSBDb2RlIFNpZ25pbmcgTExDMSYw\n+JAYDVQQDEx1CaXRjb2luIENvcmUgQ29kZSBTaWduaW5nIExMQzCCAiIwDQYJKoZI\n+hvcNAQEBBQADggIPADCCAgoCggIBAKe6xtFgKAQ68MvxwCjNtpgPobfDQCLKvCAN\n+uBKGYuub6ufQB5dhCLN9fjMgfg33AyauvU3PcEUDUWD3/k925bPqgxHC3E7YqoB+\n+11b/2Y7a86okqUgcGgvKhaKoHmXxElpM9EjQHjJ0yL4QAR1Lp+9CMMW3wIulBYKt\n+wLIArFvbuQhMO/6rxL8frpK049v//WfQzB16GXuFnzN/6fDK7oOt5IrKTg4H6EY2\n+fj4+QaUj0lNX7aHnZ6Ki45h2RUPDgN1ipRIuhM67npyZ/tdzPPjI3PUgfXCccN6D\n++qWWnbbbvPuOht4ziPciVnPd57PqJmAOnLI86gisDfd7VKlcpOSEaagdUGvMbU6f\n+uAps818GwnJzwCGllxlKASCgXDAckLLvMuit4RfYAhhdhw5R0AsaWK0HW88oHOqi\n+U7eWlMCbSGk34x9hBrxYl7tvcNcLPWIPYrrhFWNFpkV8bVVIoV5rUNRgWvBcdOq1\n+CCPTfsJp3nEH2WCoBghZquDZLSW12wMw2UsQyEojBeGhrR1inn8uK93wSnVCC8F4\n+21yWNRMNe/LQVhmZDgFOen9r/WijBsBdQw1bL8N4zGdYv8+soqkrWzW417FfSx81\n+pj4j5FEXYXXV5k/4/eBpIARXVRR8xya0nGkhNJmBk0jjDGD8fPW2gFQbqnUwAQ34\n+vOr8NUqHAgMBAAGjggHEMIIBwDAfBgNVHSMEGDAWgBRaxLl7KgqjpepxA8Bg+S32\n+ZXUOWDAdBgNVHQ4EFgQUVSLtZnifEHvd8z3E7AyLYNuDiaMwDgYDVR0PAQH/BAQD\n+AgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMHcGA1UdHwRwMG4wNaAzoDGGL2h0dHA6\n+Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9zaGEyLWFzc3VyZWQtY3MtZzEuY3JsMDWgM6Ax\n+hi9odHRwOi8vY3JsNC5kaWdpY2VydC5jb20vc2hhMi1hc3N1cmVkLWNzLWcxLmNy\n+bDBLBgNVHSAERDBCMDYGCWCGSAGG/WwDATApMCcGCCsGAQUFBwIBFhtodHRwOi8v\n+d3d3LmRpZ2ljZXJ0LmNvbS9DUFMwCAYGZ4EMAQQBMIGEBggrBgEFBQcBAQR4MHYw\n+JAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBOBggrBgEFBQcw\n+AoZCaHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0U0hBMkFzc3Vy\n+ZWRJRENvZGVTaWduaW5nQ0EuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL\n+BQADggEBAOaJneI91NJgqghUxgc0AWQ01SAJTgN4z7xMQ3W0ZAtwGbA0byT7YRlj\n+j7h+j+hMX/JYkRJETTh8Nalq2tPWJBiMMEPOGFVttFER1pwouHkK9pSKyp4xRvNU\n+L0LPh7fE4EYMJoynys6ZTpMCHLku+X3jFat1+1moh9TJRvK5+ETZYGl0seFNU3mJ\n+dZzusObm4scffIGgi40kmmISKd5ZRuooRTu9FFR/3vpfbA+7Vg4RSH3CcQPo9bfk\n++h/qRQhSfQInTBn7obRpIlvEcK782qivqseJGdtnTmcdVRShD5ckTVza1yv25uQz\n+l/yTqmG2LXlYjl5iMSdF0C1xYq6IsOA=\n -----END CERTIFICATE-----\n -----BEGIN CERTIFICATE-----\n-MIIF3jCCA8agAwIBAgIQAf1tMPyjylGoG7xkDjUDLTANBgkqhkiG9w0BAQwFADCB\n-iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0pl\n-cnNleSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNV\n-BAMTJVVTRVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAw\n-MjAxMDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBiDELMAkGA1UEBhMCVVMxEzARBgNV\n-BAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNleSBDaXR5MR4wHAYDVQQKExVU\n-aGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMTJVVTRVJUcnVzdCBSU0EgQ2Vy\n-dGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK\n-AoICAQCAEmUXNg7D2wiz0KxXDXbtzSfTTK1Qg2HiqiBNCS1kCdzOiZ/MPans9s/B\n-3PHTsdZ7NygRK0faOca8Ohm0X6a9fZ2jY0K2dvKpOyuR+OJv0OwWIJAJPuLodMkY\n-tJHUYmTbf6MG8YgYapAiPLz+E/CHFHv25B+O1ORRxhFnRghRy4YUVD+8M/5+bJz/\n-Fp0YvVGONaanZshyZ9shZrHUm3gDwFA66Mzw3LyeTP6vBZY1H1dat//O+T23LLb2\n-VN3I5xI6Ta5MirdcmrS3ID3KfyI0rn47aGYBROcBTkZTmzNg95S+UzeQc0PzMsNT\n-79uq/nROacdrjGCT3sTHDN/hMq7MkztReJVni+49Vv4M0GkPGw/zJSZrM233bkf6\n-c0Plfg6lZrEpfDKEY1WJxA3Bk1QwGROs0303p+tdOmw1XNtB1xLaqUkL39iAigmT\n-Yo61Zs8liM2EuLE/pDkP2QKe6xJMlXzzawWpXhaDzLhn4ugTncxbgtNMs+1b/97l\n-c6wjOy0AvzVVdAlJ2ElYGn+SNuZRkg7zJn0cTRe8yexDJtC/QV9AqURE9JnnV4ee\n-UB9XVKg+/XRjL7FQZQnmWEIuQxpMtPAlR1n6BB6T1CZGSlCBst6+eLf8ZxXhyVeE\n-Hg9j1uliutZfVS7qXMYoCAQlObgOK6nyTJccBz8NUvXt7y+CDwIDAQABo0IwQDAd\n-BgNVHQ4EFgQUU3m/WqorSs9UgOHYm8Cd8rIDZsswDgYDVR0PAQH/BAQDAgEGMA8G\n-A1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAFzUfA3P9wF9QZllDHPF\n-Up/L+M+ZBn8b2kMVn54CVVeWFPFSPCeHlCjtHzoBN6J2/FNQwISbxmtOuowhT6KO\n-VWKR82kV2LyI48SqC/3vqOlLVSoGIG1VeCkZ7l8wXEskEVX/JJpuXior7gtNn3/3\n-ATiUFJVDBwn7YKnuHKsSjKCaXqeYalltiz8I+8jRRa8YFWSQEg9zKC7F4iRO/Fjs\n-8PRF/iKz6y+O0tlFYQXBl2+odnKPi4w2r78NBc5xjeambx9spnFixdjQg3IM8WcR\n-iQycE0xyNN+81XHfqnHd4blsjDwSXWXavVcStkNr/+XeTWYRUc+ZruwXtuhxkYze\n-Sf7dNXGiFSeUHM9h4ya7b6NnJSFd5t0dCy5oGzuCr+yDZ4XUmFF0sbmZgIn/f3gZ\n-XHlKYC6SQK5MNyosycdiyA5d9zZbyuAlJQG03RoHnHcAP9Dc1ew91Pq7P8yF1m9/\n-qS3fuQL39ZeatTXaw2ewh0qpKJ4jjv9cJ2vhsE/zB+4ALtRZh8tSQZXq9EfX7mRB\n-VXyNWQKV3WKdwrnuWih0hKWbt5DHDAff9Yk2dDLWKMGwsAvgnEzDHNb842m1R0aB\n-L6KCq9NjRHDEjf8tM7qtj3u1cIiuPhnPQCjY/MiQu12ZIvVS5ljFH4gxQ+6IHdfG\n-jjxDah2nGN59PRbxYvnKkKj9\n+MIIFMDCCBBigAwIBAgIQBAkYG1/Vu2Z1U0O1b5VQCDANBgkqhkiG9w0BAQsFADBl\n+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\n+d3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJv\n+b3QgQ0EwHhcNMTMxMDIyMTIwMDAwWhcNMjgxMDIyMTIwMDAwWjByMQswCQYDVQQG\n+EwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNl\n+cnQuY29tMTEwLwYDVQQDEyhEaWdpQ2VydCBTSEEyIEFzc3VyZWQgSUQgQ29kZSBT\n+aWduaW5nIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA+NOzHH8O\n+Ea9ndwfTCzFJGc/Q+0WZsTrbRPV/5aid2zLXcep2nQUut4/6kkPApfmJ1DcZ17aq\n+8JyGpdglrA55KDp+6dFn08b7KSfH03sjlOSRI5aQd4L5oYQjZhJUM1B0sSgmuyRp\n+wsJS8hRniolF1C2ho+mILCCVrhxKhwjfDPXiTWAYvqrEsq5wMWYzcT6scKKrzn/p\n+fMuSoeU7MRzP6vIK5Fe7SrXpdOYr/mzLfnQ5Ng2Q7+S1TqSp6moKq4TzrGdOtcT3\n+jNEgJSPrCGQ+UpbB8g8S9MWOD8Gi6CxR93O8vYWxYoNzQYIH5DiLanMg0A9kczye\n+n6Yzqf0Z3yWT0QIDAQABo4IBzTCCAckwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNV\n+HQ8BAf8EBAMCAYYwEwYDVR0lBAwwCgYIKwYBBQUHAwMweQYIKwYBBQUHAQEEbTBr\n+MCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wQwYIKwYBBQUH\n+MAKGN2h0dHA6Ly9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEFzc3VyZWRJ\n+RFJvb3RDQS5jcnQwgYEGA1UdHwR6MHgwOqA4oDaGNGh0dHA6Ly9jcmw0LmRpZ2lj\n+ZXJ0LmNvbS9EaWdpQ2VydEFzc3VyZWRJRFJvb3RDQS5jcmwwOqA4oDaGNGh0dHA6\n+Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEFzc3VyZWRJRFJvb3RDQS5jcmww\n+TwYDVR0gBEgwRjA4BgpghkgBhv1sAAIEMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8v\n+d3d3LmRpZ2ljZXJ0LmNvbS9DUFMwCgYIYIZIAYb9bAMwHQYDVR0OBBYEFFrEuXsq\n+CqOl6nEDwGD5LfZldQ5YMB8GA1UdIwQYMBaAFEXroq/0ksuCMS1Ri6enIZ3zbcgP\n+MA0GCSqGSIb3DQEBCwUAA4IBAQA+7A1aJLPzItEVyCx8JSl2qB1dHC06GsTvMGHX\n+fgtg/cM9D8Svi/3vKt8gVTew4fbRknUPUbRupY5a4l4kgU4QpO4/cY5jDhNLrddf\n+RHnzNhQGivecRk5c/5CxGwcOkRX7uq+1UcKNJK4kxscnKqEpKBo6cSgCPC6Ro8Al\n+EeKcFEehemhor5unXCBc2XGxDI+7qPjFEmifz0DLQESlE/DmZAwlCEIysjaKJAL+\n+L3J+HNdJRZboWR3p+nRka7LrZkPas7CM1ekN3fYBIM6ZMWM9CBoYs4GbT8aTEAb8\n+B4H6i9r5gkn3Ym6hU/oSlBiFLpKR6mhsRDKyZqHnGKSaZFHv\n -----END CERTIFICATE-----\n -----BEGIN CERTIFICATE-----\n-MIIF9TCCA92gAwIBAgIQHaJIMG+bJhjQguCWfTPTajANBgkqhkiG9w0BAQwFADCB\n-iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0pl\n-cnNleSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNV\n-BAMTJVVTRVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTgx\n-MTAyMDAwMDAwWhcNMzAxMjMxMjM1OTU5WjB8MQswCQYDVQQGEwJHQjEbMBkGA1UE\n-CBMSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRgwFgYDVQQK\n-Ew9TZWN0aWdvIExpbWl0ZWQxJDAiBgNVBAMTG1NlY3RpZ28gUlNBIENvZGUgU2ln\n-bmluZyBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIYijTKFehif\n-SfCWL2MIHi3cfJ8Uz+MmtiVmKUCGVEZ0MWLFEO2yhyemmcuVMMBW9aR1xqkOUGKl\n-UZEQauBLYq798PgYrKf/7i4zIPoMGYmobHutAMNhodxpZW0fbieW15dRhqb0J+V8\n-aouVHltg1X7XFpKcAC9o95ftanK+ODtj3o+/bkxBXRIgCFnoOc2P0tbPBrRXBbZO\n-oT5Xax+YvMRi1hsLjcdmG0qfnYHEckC14l/vC0X/o84Xpi1VsLewvFRqnbyNVlPG\n-8Lp5UEks9wO5/i9lNfIi6iwHr0bZ+UYc3Ix8cSjz/qfGFN1VkW6KEQ3fBiSVfQ+n\n-oXw62oY1YdMCAwEAAaOCAWQwggFgMB8GA1UdIwQYMBaAFFN5v1qqK0rPVIDh2JvA\n-nfKyA2bLMB0GA1UdDgQWBBQO4TqoUzox1Yq+wbutZxoDha00DjAOBgNVHQ8BAf8E\n-BAMCAYYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHSUEFjAUBggrBgEFBQcDAwYI\n-KwYBBQUHAwgwEQYDVR0gBAowCDAGBgRVHSAAMFAGA1UdHwRJMEcwRaBDoEGGP2h0\n-dHA6Ly9jcmwudXNlcnRydXN0LmNvbS9VU0VSVHJ1c3RSU0FDZXJ0aWZpY2F0aW9u\n-QXV0aG9yaXR5LmNybDB2BggrBgEFBQcBAQRqMGgwPwYIKwYBBQUHMAKGM2h0dHA6\n-Ly9jcnQudXNlcnRydXN0LmNvbS9VU0VSVHJ1c3RSU0FBZGRUcnVzdENBLmNydDAl\n-BggrBgEFBQcwAYYZaHR0cDovL29jc3AudXNlcnRydXN0LmNvbTANBgkqhkiG9w0B\n-AQwFAAOCAgEATWNQ7Uc0SmGk295qKoyb8QAAHh1iezrXMsL2s+Bjs/thAIiaG20Q\n-BwRPvrjqiXgi6w9G7PNGXkBGiRL0C3danCpBOvzW9Ovn9xWVM8Ohgyi33i/klPeF\n-M4MtSkBIv5rCT0qxjyT0s4E307dksKYjalloUkJf/wTr4XRleQj1qZPea3FAmZa6\n-ePG5yOLDCBaxq2NayBWAbXReSnV+pbjDbLXP30p5h1zHQE1jNfYw08+1Cg4LBH+g\n-S667o6XQhACTPlNdNKUANWlsvp8gJRANGftQkGG+OY96jk32nw4e/gdREmaDJhlI\n-lc5KycF/8zoFm/lv34h/wCOe0h5DekUxwZxNqfBZslkZ6GqNKQQCd3xLS81wvjqy\n-VVp4Pry7bwMQJXcVNIr5NsxDkuS6T/FikyglVyn7URnHoSVAaoRXxrKdsbwcCtp8\n-Z359LukoTBh+xHsxQXGaSynsCz1XUNLK3f2eBVHlRHjdAd6xdZgNVCT98E7j4viD\n-vXK6yz067vBeF5Jobchh+abxKgoLpbn0nu6YMgWFnuv5gynTxix9vTp3Los3QqBq\n-gu07SqqUEKThDfgXxbZaeTMYkuO1dfih6Y4KJR7kHvGfWocj/5+kUZ77OYARzdu1\n-xKeogG/lU9Tg46LC0lsa+jImLWpXcBw8pFguo/NbSwfcMlnzh6cabVg=\n+MIIDtzCCAp+gAwIBAgIQDOfg5RfYRv6P5WD8G/AwOTANBgkqhkiG9w0BAQUFADBl\n+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\n+d3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJv\n+b3QgQ0EwHhcNMDYxMTEwMDAwMDAwWhcNMzExMTEwMDAwMDAwWjBlMQswCQYDVQQG\n+EwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNl\n+cnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgQ0EwggEi\n+MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtDhXO5EOAXLGH87dg+XESpa7c\n+JpSIqvTO9SA5KFhgDPiA2qkVlTJhPLWxKISKityfCgyDF3qPkKyK53lTXDGEKvYP\n+mDI2dsze3Tyoou9q+yHyUmHfnyDXH+Kx2f4YZNISW1/5WBg1vEfNoTb5a3/UsDg+\n+wRvDjDPZ2C8Y/igPs6eD1sNuRMBhNZYW/lmci3Zt1/GiSw0r/wty2p5g0I6QNcZ4\n+VYcgoc/lbQrISXwxmDNsIumH0DJaoroTghHtORedmTpyoeb6pNnVFzF1roV9Iq4/\n+AUaG9ih5yLHa5FcXxH4cDrC0kqZWs72yl+2qp/C3xag/lRbQ/6GW6whfGHdPAgMB\n+AAGjYzBhMA4GA1UdDwEB/wQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW\n+BBRF66Kv9JLLgjEtUYunpyGd823IDzAfBgNVHSMEGDAWgBRF66Kv9JLLgjEtUYun\n+pyGd823IDzANBgkqhkiG9w0BAQUFAAOCAQEAog683+Lt8ONyc3pklL/3cmbYMuRC\n+dWKuh+vy1dneVrOfzM4UKLkNl2BcEkxY5NM9g0lFWJc1aRqoR+pWxnmrEthngYTf\n+fwk8lOa4JiwgvT2zKIn3X/8i4peEH+ll74fg38FnSbNd67IJKusm7Xi+fT8r87cm\n+NW1fiQG2SVufAQWbqz0lwcy2f8Lxb4bG+mRo64EtlOtCt/qMHt1i8b5QZ7dsvfPx\n+H2sMNgcWfzd8qVttevESRmCD1ycEvkvOl77DZypoEd+A5wwzZr8TDRRu838fYxAe\n++o0bJW1sj6W3YQGx0qMmoRBxna3iw/nDmVG3KwcIzi7mULKn+gpFL6Lw8g==\n -----END CERTIFICATE-----\n+"
      },
      {
        "sha": "9cb887e2dc74cb51103f45e2d5ca392fa81cf113",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "a3b9cd20991180dc760ee964b6403600be577658",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 68,
        "deletions": 34,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,8 +1,8 @@\n .NOTPARALLEL :\n \n # Pattern rule to print variables, e.g. make print-top_srcdir\n-print-%:\n-\t@echo $* = $($*)\n+print-%: FORCE\n+\t@echo '$*'='$($*)'\n \n # When invoking a sub-make, keep only the command line variable definitions\n # matching the pattern in the filter function.\n@@ -34,9 +34,12 @@ BASE_CACHE ?= $(BASEDIR)/built\n SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n NO_QR ?=\n+NO_BDB ?=\n+NO_SQLITE ?=\n NO_WALLET ?=\n NO_ZMQ ?=\n NO_UPNP ?=\n+NO_NATPMP ?=\n MULTIPROCESS ?=\n FALLBACK_DOWNLOAD_PATH ?= https://bitcoincore.org/depends-sources\n \n@@ -111,24 +114,31 @@ include builders/$(build_os).mk\n include builders/default.mk\n include packages/packages.mk\n \n-build_id_string:=$(BUILD_ID_SALT)\n-build_id_string+=$(shell $(build_CC) --version 2>/dev/null)\n-build_id_string+=$(shell $(build_AR) --version 2>/dev/null)\n-build_id_string+=$(shell $(build_CXX) --version 2>/dev/null)\n-build_id_string+=$(shell $(build_RANLIB) --version 2>/dev/null)\n-build_id_string+=$(shell $(build_STRIP) --version 2>/dev/null)\n-\n-$(host_arch)_$(host_os)_id_string:=$(HOST_ID_SALT)\n-$(host_arch)_$(host_os)_id_string+=$(shell $(host_CC) --version 2>/dev/null)\n-$(host_arch)_$(host_os)_id_string+=$(shell $(host_AR) --version 2>/dev/null)\n-$(host_arch)_$(host_os)_id_string+=$(shell $(host_CXX) --version 2>/dev/null)\n-$(host_arch)_$(host_os)_id_string+=$(shell $(host_RANLIB) --version 2>/dev/null)\n-$(host_arch)_$(host_os)_id_string+=$(shell $(host_STRIP) --version 2>/dev/null)\n-\n-ifneq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n-build_id_string+=system_clang\n-$(host_arch)_$(host_os)_id_string+=system_clang\n-endif\n+# Previously, we directly invoked the well-known programs using $(shell ...)\n+# to contruct build_id_string. However, that was problematic because:\n+#\n+# 1. When invoking a shell, GNU Make special-cases exit code 127 (command not\n+#    found) by not capturing the output but instead passing it through. This is\n+#    not done for any other exit code.\n+#\n+# 2. Characters like '#' (from these programs' output) would end up in make\n+#    variables like build_id_string, which would be wrongly interpreted by make\n+#    when these variables were used.\n+#\n+# Therefore, we should avoid having arbitrary strings in make variables where\n+# possible. The gen_id script used here hashes the output to construct a\n+# \"make-safe\" id.\n+#\n+# Also note that these lines need to be:\n+#\n+#     1. After including {hosts,builders}/*.mk, since they rely on the tool\n+#        variables (e.g. build_CC, host_STRIP, etc.) to be set.\n+#\n+#     2. Before including packages/*.mk (excluding packages/packages.mk), since\n+#        they rely on the build_id variables\n+#\n+build_id:=$(shell env CC='$(build_CC)' CXX='$(build_CXX)' AR='$(build_AR)' RANLIB='$(build_RANLIB)' STRIP='$(build_STRIP)' SHA256SUM='$(build_SHA256SUM)' DEBUG='$(DEBUG)' ./gen_id '$(BUILD_ID_SALT)' 'GUIX_ENVIRONMENT=$(realpath $(GUIX_ENVIRONMENT))')\n+$(host_arch)_$(host_os)_id:=$(shell env CC='$(host_CC)' CXX='$(host_CXX)' AR='$(host_AR)' RANLIB='$(host_RANLIB)' STRIP='$(host_STRIP)' SHA256SUM='$(build_SHA256SUM)' DEBUG='$(DEBUG)' ./gen_id '$(HOST_ID_SALT)' 'GUIX_ENVIRONMENT=$(realpath $(GUIX_ENVIRONMENT))')\n \n qrencode_packages_$(NO_QR) = $(qrencode_packages)\n \n@@ -139,10 +149,12 @@ sqlite_packages_$(NO_SQLITE) = $(sqlite_packages)\n wallet_packages_$(NO_WALLET) = $(bdb_packages_) $(sqlite_packages_)\n \n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n+natpmp_packages_$(NO_NATPMP) = $(natpmp_packages)\n+\n zmq_packages_$(NO_ZMQ) = $(zmq_packages)\n multiprocess_packages_$(MULTIPROCESS) = $(multiprocess_packages)\n \n-packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_)\n+packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_) $(natpmp_packages_)\n native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages)\n \n ifneq ($(zmq_packages_),)\n@@ -163,12 +175,6 @@ $(host_arch)_$(host_os)_native_toolchain?=$($(host_os)_native_toolchain)\n \n include funcs.mk\n \n-binutils_path=$($($(host_arch)_$(host_os)_native_binutils)_prefixbin)\n-ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n-toolchain_path=$($($(host_arch)_$(host_os)_native_toolchain)_prefixbin)\n-else\n-toolchain_path=\n-endif\n final_build_id_long+=$(shell $(build_SHA256SUM) config.site.in)\n final_build_id+=$(shell echo -n \"$(final_build_id_long)\" | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH))\n $(host_prefix)/.stamp_$(final_build_id): $(native_packages) $(packages)\n@@ -179,15 +185,39 @@ $(host_prefix)/.stamp_$(final_build_id): $(native_packages) $(packages)\n \t$(AT)cd $(@D); $(foreach package,$^, tar xf $($(package)_cached); )\n \t$(AT)touch $@\n \n+# $PATH is not preserved between ./configure and make by convention. Its\n+# modification and overriding at ./configure time is (as I understand it)\n+# supposed to be captured by the AC_{PROG_{,OBJ}CXX,PATH_{PROG,TOOL}} macros,\n+# which will expand the program names to their full absolute paths. The notable\n+# exception is command line overriding: ./configure CC=clang, which skips the\n+# program name expansion step, and works because the user implicitly indicates\n+# with CC=clang that clang will be available in $PATH at all times, and is most\n+# likely part of the user's system.\n+#\n+# Therefore, when we \"seed the autoconf cache\"/\"override well-known program\n+# vars\" by setting AR=<blah> in our config.site, either one of two things needs\n+# to be true for the build system to work correctly:\n+#\n+#   1. If we refer to the program by name (e.g. AR=riscv64-gnu-linux-ar), the\n+#      tool needs to be available in $PATH at all times.\n+#\n+#   2. If the tool is _**not**_ expected to be available in $PATH at all times\n+#      (such as is the case for our native_cctools binutils tools), it needs to\n+#      be referred to by its absolute path, such as would be output by the\n+#      AC_PATH_{PROG,TOOL} macros.\n+#\n+# Minor note: it is also okay to refer to tools by their absolute path even if\n+# we expect them to be available in $PATH at all times, more specificity does\n+# not hurt.\n $(host_prefix)/share/config.site : config.site.in $(host_prefix)/.stamp_$(final_build_id)\n \t$(AT)@mkdir -p $(@D)\n \t$(AT)sed -e 's|@HOST@|$(host)|' \\\n-            -e 's|@CC@|$(toolchain_path)$(host_CC)|' \\\n-            -e 's|@CXX@|$(toolchain_path)$(host_CXX)|' \\\n-            -e 's|@AR@|$(binutils_path)$(host_AR)|' \\\n-            -e 's|@RANLIB@|$(binutils_path)$(host_RANLIB)|' \\\n-            -e 's|@NM@|$(binutils_path)$(host_NM)|' \\\n-            -e 's|@STRIP@|$(binutils_path)$(host_STRIP)|' \\\n+            -e 's|@CC@|$(host_CC)|' \\\n+            -e 's|@CXX@|$(host_CXX)|' \\\n+            -e 's|@AR@|$(host_AR)|' \\\n+            -e 's|@RANLIB@|$(host_RANLIB)|' \\\n+            -e 's|@NM@|$(host_NM)|' \\\n+            -e 's|@STRIP@|$(host_STRIP)|' \\\n             -e 's|@build_os@|$(build_os)|' \\\n             -e 's|@host_os@|$(host_os)|' \\\n             -e 's|@CFLAGS@|$(strip $(host_CFLAGS) $(host_$(release_type)_CFLAGS))|' \\\n@@ -199,7 +229,10 @@ $(host_prefix)/share/config.site : config.site.in $(host_prefix)/.stamp_$(final_\n             -e 's|@no_qr@|$(NO_QR)|' \\\n             -e 's|@no_zmq@|$(NO_ZMQ)|' \\\n             -e 's|@no_wallet@|$(NO_WALLET)|' \\\n+            -e 's|@no_bdb@|$(NO_BDB)|' \\\n+            -e 's|@no_sqlite@|$(NO_SQLITE)|' \\\n             -e 's|@no_upnp@|$(NO_UPNP)|' \\\n+            -e 's|@no_natpmp@|$(NO_NATPMP)|' \\\n             -e 's|@multiprocess@|$(MULTIPROCESS)|' \\\n             -e 's|@debug@|$(DEBUG)|' \\\n             $< > $@\n@@ -241,7 +274,7 @@ install: check-packages $(host_prefix)/share/config.site\n download-one: check-sources $(all_sources)\n \n download-osx:\n-\t@$(MAKE) -s HOST=x86_64-apple-darwin14 download-one\n+\t@$(MAKE) -s HOST=x86_64-apple-darwin download-one\n download-linux:\n \t@$(MAKE) -s HOST=x86_64-unknown-linux-gnu download-one\n download-win:\n@@ -251,3 +284,4 @@ download: download-osx download-linux download-win\n $(foreach package,$(all_packages),$(eval $(call ext_add_stages,$(package))))\n \n .PHONY: install cached clean clean-all download-one download-osx download-linux download-win download check-packages check-sources\n+.PHONY: FORCE"
      },
      {
        "sha": "4f3b6df4871a340f6c3816a759bb2f285770c76b",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 47,
        "deletions": 49,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -12,15 +12,18 @@ For example:\n \n     make HOST=x86_64-w64-mingw32 -j4\n \n-**Bitcoin Core's configure script by default will ignore the depends output.** In\n+**Bitcoin Core's `configure` script by default will ignore the depends output.** In\n order for it to pick up libraries, tools, and settings from the depends build,\n-you must point it at the appropriate `--prefix` directory generated by the\n-build. In the above example, a prefix dir named x86_64-w64-mingw32 will be\n-created. To use it for Bitcoin:\n+you must set the `CONFIG_SITE` environment variable to point to a `config.site` settings file.\n+In the above example, a file named `depends/x86_64-w64-mingw32/share/config.site` will be\n+created. To use it during compilation:\n \n-    ./configure --prefix=$PWD/depends/x86_64-w64-mingw32\n+    CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure\n \n-Common `host-platform-triplets` for cross compilation are:\n+The default install prefix when using `config.site` is `--prefix=depends/<host-platform-triplet>`,\n+so depends build outputs will be installed in that location.\n+\n+Common `host-platform-triplet`s for cross compilation are:\n \n - `i686-pc-linux-gnu` for Linux 32 bit\n - `x86_64-pc-linux-gnu` for x86 Linux\n@@ -44,7 +47,12 @@ The paths are automatically configured and no other options are needed unless ta\n \n #### For macOS cross compilation\n \n-    sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python3-setuptools libtinfo5\n+    sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libz-dev python3-setuptools libtinfo5 xorriso\n+\n+Note: You must obtain the macOS SDK before proceeding with a cross-compile.\n+Under the depends directory, create a subdirectory named `SDKs`.\n+Then, place the extracted SDK under this new directory.\n+For more information, see [SDK Extraction](../contrib/macdeploy/README.md#sdk-extraction).\n \n #### For Win64 cross compilation\n \n@@ -54,7 +62,7 @@ The paths are automatically configured and no other options are needed unless ta\n \n Common linux dependencies:\n \n-    sudo apt-get install make automake cmake curl g++-multilib libtool binutils-gold bsdmainutils pkg-config python3 patch\n+    sudo apt-get install make automake cmake curl g++-multilib libtool binutils-gold bsdmainutils pkg-config python3 patch bison\n \n For linux ARM cross compilation:\n \n@@ -79,49 +87,40 @@ For linux S390X cross compilation:\n \n     sudo apt-get install g++-s390x-linux-gnu binutils-s390x-linux-gnu\n \n+### Install the required dependencies: M1-based macOS\n+\n+To be able to build the `qt` package, ensure that Rosetta 2 is installed:\n+\n+```\n+softwareupdate --install-rosetta\n+```\n+\n ### Dependency Options\n+\n The following can be set when running make: `make FOO=bar`\n \n-<dl>\n-<dt>SOURCES_PATH</dt>\n-<dd>downloaded sources will be placed here</dd>\n-<dt>BASE_CACHE</dt>\n-<dd>built packages will be placed here</dd>\n-<dt>SDK_PATH</dt>\n-<dd>Path where sdk's can be found (used by macOS)</dd>\n-<dt>FALLBACK_DOWNLOAD_PATH</dt>\n-<dd>If a source file can't be fetched, try here before giving up</dd>\n-<dt>NO_QT</dt>\n-<dd>Don't download/build/cache qt and its dependencies</dd>\n-<dt>NO_QR</dt>\n-<dd>Don't download/build/cache packages needed for enabling qrencode</dd>\n-<dt>NO_ZMQ</dt>\n-<dd>Don't download/build/cache packages needed for enabling zeromq</dd>\n-<dt>NO_WALLET</dt>\n-<dd>Don't download/build/cache libs needed to enable the wallet</dd>\n-<dt>NO_BDB</dt>\n-<dd>Don't download/build/cache BerkeleyDB</dd>\n-<dt>NO_SQLITE</dt>\n-<dd>Don't download/build/cache SQLite</dd>\n-<dt>NO_UPNP</dt>\n-<dd>Don't download/build/cache packages needed for enabling upnp</dd>\n-<dt>ALLOW_HOST_PACKAGES</dt>\n-<dd>Packages that are missed in dependencies (due to `NO_*` option or\n-build script logic) are searched for among the host system packages using\n-`pkg-config`. It allows building with packages of other (newer) versions</dd>\n-<dt>MULTIPROCESS</dt>\n-<dd>build libmultiprocess (experimental, requires cmake)</dd>\n-<dt>DEBUG</dt>\n-<dd>disable some optimizations and enable more runtime checking</dd>\n-<dt>HOST_ID_SALT</dt>\n-<dd>Optional salt to use when generating host package ids</dd>\n-<dt>BUILD_ID_SALT</dt>\n-<dd>Optional salt to use when generating build package ids</dd>\n-<dt>FORCE_USE_SYSTEM_CLANG</dt>\n-<dd>(EXPERTS ONLY) When cross-compiling for macOS, use Clang found in the\n-system's <code>$PATH</code> rather than the default prebuilt release of Clang\n-from llvm.org. Clang 8 or later is required.</dd>\n-</dl>\n+- `SOURCES_PATH`: Downloaded sources will be placed here\n+- `BASE_CACHE`: Built packages will be placed here\n+- `SDK_PATH`: Path where SDKs can be found (used by macOS)\n+- `FALLBACK_DOWNLOAD_PATH`: If a source file can't be fetched, try here before giving up\n+- `NO_QT`: Don't download/build/cache Qt and its dependencies\n+- `NO_QR`: Don't download/build/cache packages needed for enabling qrencode\n+- `NO_ZMQ`: Don't download/build/cache packages needed for enabling ZeroMQ\n+- `NO_WALLET`: Don't download/build/cache libs needed to enable the wallet\n+- `NO_BDB`: Don't download/build/cache BerkeleyDB\n+- `NO_SQLITE`: Don't download/build/cache SQLite\n+- `NO_UPNP`: Don't download/build/cache packages needed for enabling UPnP\n+- `NO_NATPMP`: Don't download/build/cache packages needed for enabling NAT-PMP</dd>\n+- `ALLOW_HOST_PACKAGES`: Packages that are missed in dependencies (due to `NO_*` option or\n+  build script logic) are searched for among the host system packages using\n+  `pkg-config`. It allows building with packages of other (newer) versions\n+- `MULTIPROCESS`: Build libmultiprocess (experimental, requires CMake)\n+- `DEBUG`: Disable some optimizations and enable more runtime checking\n+- `HOST_ID_SALT`: Optional salt to use when generating host package ids\n+- `BUILD_ID_SALT`: Optional salt to use when generating build package ids\n+- `FORCE_USE_SYSTEM_CLANG`: (EXPERTS ONLY) When cross-compiling for macOS, use Clang found in the\n+  system's `$PATH` rather than the default prebuilt release of Clang\n+  from llvm.org. Clang 8 or later is required.\n \n If some packages are not built, for example `make NO_WALLET=1`, the appropriate\n options will be passed to bitcoin's configure. In this case, `--disable-wallet`.\n@@ -150,4 +149,3 @@ This is an example command for a default build with no disabled dependencies:\n \n - [description.md](description.md): General description of the depends system\n - [packages.md](packages.md): Steps for adding packages\n-"
      },
      {
        "sha": "001c92842425178768c4cb64cb94c88a4b15f123",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,5 +1,5 @@\n-build_darwin_CC:=$(shell xcrun -f clang) --sysroot $(shell xcrun --show-sdk-path)\n-build_darwin_CXX:=$(shell xcrun -f clang++) --sysroot $(shell xcrun --show-sdk-path)\n+build_darwin_CC:=$(shell xcrun -f clang) -isysroot$(shell xcrun --show-sdk-path)\n+build_darwin_CXX:=$(shell xcrun -f clang++) -isysroot$(shell xcrun --show-sdk-path)\n build_darwin_AR:=$(shell xcrun -f ar)\n build_darwin_RANLIB:=$(shell xcrun -f ranlib)\n build_darwin_STRIP:=$(shell xcrun -f strip)\n@@ -10,8 +10,8 @@ build_darwin_SHA256SUM=shasum -a 256\n build_darwin_DOWNLOAD=curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o\n \n #darwin host on darwin builder. overrides darwin host preferences.\n-darwin_CC=$(shell xcrun -f clang) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(shell xcrun --show-sdk-path)\n-darwin_CXX:=$(shell xcrun -f clang++) -mmacosx-version-min=$(OSX_MIN_VERSION) -stdlib=libc++ --sysroot $(shell xcrun --show-sdk-path)\n+darwin_CC=$(shell xcrun -f clang) -mmacosx-version-min=$(OSX_MIN_VERSION) -isysroot$(shell xcrun --show-sdk-path)\n+darwin_CXX:=$(shell xcrun -f clang++) -mmacosx-version-min=$(OSX_MIN_VERSION) -stdlib=libc++ -isysroot$(shell xcrun --show-sdk-path)\n darwin_AR:=$(shell xcrun -f ar)\n darwin_RANLIB:=$(shell xcrun -f ranlib)\n darwin_STRIP:=$(shell xcrun -f strip)"
      },
      {
        "sha": "dc0a6b29976a9990ef412d3c5fd696ac2641ae0b",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 183,
        "deletions": 146,
        "changes": 329,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright 1992-2019 Free Software Foundation, Inc.\n+#   Copyright 1992-2021 Free Software Foundation, Inc.\n \n-timestamp='2019-09-10'\n+timestamp='2021-05-24'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -27,12 +27,12 @@ timestamp='2019-09-10'\n # Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n #\n # You can get the latest version of this script from:\n-# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n+# https://git.savannah.gnu.org/cgit/config.git/plain/config.guess\n #\n # Please send patches to <config-patches@gnu.org>.\n \n \n-me=`echo \"$0\" | sed -e 's,.*/,,'`\n+me=$(echo \"$0\" | sed -e 's,.*/,,')\n \n usage=\"\\\n Usage: $0 [OPTION]\n@@ -50,7 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright 1992-2019 Free Software Foundation, Inc.\n+Copyright 1992-2021 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -99,9 +99,11 @@ tmp=\n trap 'test -z \"$tmp\" || rm -fr \"$tmp\"' 0 1 2 13 15\n \n set_cc_for_build() {\n+    # prevent multiple calls if $tmp is already set\n+    test \"$tmp\" && return 0\n     : \"${TMPDIR=/tmp}\"\n     # shellcheck disable=SC2039\n-    { tmp=`(umask 077 && mktemp -d \"$TMPDIR/cgXXXXXX\") 2>/dev/null` && test -n \"$tmp\" && test -d \"$tmp\" ; } ||\n+    { tmp=$( (umask 077 && mktemp -d \"$TMPDIR/cgXXXXXX\") 2>/dev/null) && test -n \"$tmp\" && test -d \"$tmp\" ; } ||\n \t{ test -n \"$RANDOM\" && tmp=$TMPDIR/cg$$-$RANDOM && (umask 077 && mkdir \"$tmp\" 2>/dev/null) ; } ||\n \t{ tmp=$TMPDIR/cg-$$ && (umask 077 && mkdir \"$tmp\" 2>/dev/null) && echo \"Warning: creating insecure temp directory\" >&2 ; } ||\n \t{ echo \"$me: cannot create a temporary directory in $TMPDIR\" >&2 ; exit 1 ; }\n@@ -129,16 +131,14 @@ if test -f /.attbin/uname ; then\n \tPATH=$PATH:/.attbin ; export PATH\n fi\n \n-UNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown\n-UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown\n-UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown\n-UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown\n+UNAME_MACHINE=$( (uname -m) 2>/dev/null) || UNAME_MACHINE=unknown\n+UNAME_RELEASE=$( (uname -r) 2>/dev/null) || UNAME_RELEASE=unknown\n+UNAME_SYSTEM=$( (uname -s) 2>/dev/null) || UNAME_SYSTEM=unknown\n+UNAME_VERSION=$( (uname -v) 2>/dev/null) || UNAME_VERSION=unknown\n \n-case \"$UNAME_SYSTEM\" in\n+case $UNAME_SYSTEM in\n Linux|GNU|GNU/*)\n-\t# If the system lacks a compiler, then just pick glibc.\n-\t# We could probably try harder.\n-\tLIBC=gnu\n+\tLIBC=unknown\n \n \tset_cc_for_build\n \tcat <<-EOF > \"$dummy.c\"\n@@ -147,24 +147,36 @@ Linux|GNU|GNU/*)\n \tLIBC=uclibc\n \t#elif defined(__dietlibc__)\n \tLIBC=dietlibc\n-\t#else\n+\t#elif defined(__GLIBC__)\n \tLIBC=gnu\n+\t#else\n+\t#include <stdarg.h>\n+\t/* First heuristic to detect musl libc.  */\n+\t#ifdef __DEFINED_va_list\n+\tLIBC=musl\n+\t#endif\n \t#endif\n \tEOF\n-\teval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\"\n+\teval \"$($CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g')\"\n \n-\t# If ldd exists, use it to detect musl libc.\n-\tif command -v ldd >/dev/null && \\\n-\t\tldd --version 2>&1 | grep -q ^musl\n-\tthen\n-\t    LIBC=musl\n+\t# Second heuristic to detect musl libc.\n+\tif [ \"$LIBC\" = unknown ] &&\n+\t   command -v ldd >/dev/null &&\n+\t   ldd --version 2>&1 | grep -q ^musl; then\n+\t\tLIBC=musl\n+\tfi\n+\n+\t# If the system lacks a compiler, then just pick glibc.\n+\t# We could probably try harder.\n+\tif [ \"$LIBC\" = unknown ]; then\n+\t\tLIBC=gnu\n \tfi\n \t;;\n esac\n \n # Note: order is significant - the case branches are not exclusive.\n \n-case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n+case $UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION in\n     *:NetBSD:*:*)\n \t# NetBSD (nbsd) targets should (where applicable) match one or\n \t# more of the tuples: *-*-netbsdelf*, *-*-netbsdaout*,\n@@ -176,27 +188,27 @@ case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n \t#\n \t# Note: NetBSD doesn't particularly care about the vendor\n \t# portion of the name.  We always set it to \"unknown\".\n-\tsysctl=\"sysctl -n hw.machine_arch\"\n-\tUNAME_MACHINE_ARCH=`(uname -p 2>/dev/null || \\\n-\t    \"/sbin/$sysctl\" 2>/dev/null || \\\n-\t    \"/usr/sbin/$sysctl\" 2>/dev/null || \\\n-\t    echo unknown)`\n-\tcase \"$UNAME_MACHINE_ARCH\" in\n+\tUNAME_MACHINE_ARCH=$( (uname -p 2>/dev/null || \\\n+\t    /sbin/sysctl -n hw.machine_arch 2>/dev/null || \\\n+\t    /usr/sbin/sysctl -n hw.machine_arch 2>/dev/null || \\\n+\t    echo unknown))\n+\tcase $UNAME_MACHINE_ARCH in\n+\t    aarch64eb) machine=aarch64_be-unknown ;;\n \t    armeb) machine=armeb-unknown ;;\n \t    arm*) machine=arm-unknown ;;\n \t    sh3el) machine=shl-unknown ;;\n \t    sh3eb) machine=sh-unknown ;;\n \t    sh5el) machine=sh5le-unknown ;;\n \t    earmv*)\n-\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n-\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n+\t\tarch=$(echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,')\n+\t\tendian=$(echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p')\n \t\tmachine=\"${arch}${endian}\"-unknown\n \t\t;;\n \t    *) machine=\"$UNAME_MACHINE_ARCH\"-unknown ;;\n \tesac\n \t# The Operating System including object format, if it has switched\n \t# to ELF recently (or will in the future) and ABI.\n-\tcase \"$UNAME_MACHINE_ARCH\" in\n+\tcase $UNAME_MACHINE_ARCH in\n \t    earm*)\n \t\tos=netbsdelf\n \t\t;;\n@@ -217,23 +229,23 @@ case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n \t\t;;\n \tesac\n \t# Determine ABI tags.\n-\tcase \"$UNAME_MACHINE_ARCH\" in\n+\tcase $UNAME_MACHINE_ARCH in\n \t    earm*)\n \t\texpr='s/^earmv[0-9]/-eabi/;s/eb$//'\n-\t\tabi=`echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\"`\n+\t\tabi=$(echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\")\n \t\t;;\n \tesac\n \t# The OS release\n \t# Debian GNU/NetBSD machines have a different userland, and\n \t# thus, need a distinct triplet. However, they do not need\n \t# kernel version information, so it can be replaced with a\n \t# suitable tag, in the style of linux-gnu.\n-\tcase \"$UNAME_VERSION\" in\n+\tcase $UNAME_VERSION in\n \t    Debian*)\n \t\trelease='-gnu'\n \t\t;;\n \t    *)\n-\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n+\t\trelease=$(echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2)\n \t\t;;\n \tesac\n \t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n@@ -242,15 +254,19 @@ case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n \techo \"$machine-${os}${release}${abi-}\"\n \texit ;;\n     *:Bitrig:*:*)\n-\tUNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`\n+\tUNAME_MACHINE_ARCH=$(arch | sed 's/Bitrig.//')\n \techo \"$UNAME_MACHINE_ARCH\"-unknown-bitrig\"$UNAME_RELEASE\"\n \texit ;;\n     *:OpenBSD:*:*)\n-\tUNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`\n+\tUNAME_MACHINE_ARCH=$(arch | sed 's/OpenBSD.//')\n \techo \"$UNAME_MACHINE_ARCH\"-unknown-openbsd\"$UNAME_RELEASE\"\n \texit ;;\n+    *:SecBSD:*:*)\n+\tUNAME_MACHINE_ARCH=$(arch | sed 's/SecBSD.//')\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-secbsd\"$UNAME_RELEASE\"\n+\texit ;;\n     *:LibertyBSD:*:*)\n-\tUNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`\n+\tUNAME_MACHINE_ARCH=$(arch | sed 's/^.*BSD\\.//')\n \techo \"$UNAME_MACHINE_ARCH\"-unknown-libertybsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:MidnightBSD:*:*)\n@@ -284,20 +300,22 @@ case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n \techo mips-dec-osf1\n \texit ;;\n     alpha:OSF1:*:*)\n+\t# Reset EXIT trap before exiting to avoid spurious non-zero exit code.\n+\ttrap '' 0\n \tcase $UNAME_RELEASE in\n \t*4.0)\n-\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`\n+\t\tUNAME_RELEASE=$(/usr/sbin/sizer -v | awk '{print $3}')\n \t\t;;\n \t*5.*)\n-\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`\n+\t\tUNAME_RELEASE=$(/usr/sbin/sizer -v | awk '{print $4}')\n \t\t;;\n \tesac\n \t# According to Compaq, /usr/sbin/psrinfo has been available on\n \t# OSF/1 and Tru64 systems produced since 1995.  I hope that\n \t# covers most systems running today.  This code pipes the CPU\n \t# types through head -n 1, so we only detect the type of CPU 0.\n-\tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n-\tcase \"$ALPHA_CPU_TYPE\" in\n+\tALPHA_CPU_TYPE=$(/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1)\n+\tcase $ALPHA_CPU_TYPE in\n \t    \"EV4 (21064)\")\n \t\tUNAME_MACHINE=alpha ;;\n \t    \"EV4.5 (21064)\")\n@@ -334,11 +352,8 @@ case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n \t# A Tn.n version is a released field test version.\n \t# A Xn.n version is an unreleased experimental baselevel.\n \t# 1.2 uses \"1.2\" for uname -r.\n-\techo \"$UNAME_MACHINE\"-dec-osf\"`echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\"\n-\t# Reset EXIT trap before exiting to avoid spurious non-zero exit code.\n-\texitcode=$?\n-\ttrap '' 0\n-\texit $exitcode ;;\n+\techo \"$UNAME_MACHINE\"-dec-osf\"$(echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz)\"\n+\texit ;;\n     Amiga*:UNIX_System_V:4.0:*)\n \techo m68k-unknown-sysv4\n \texit ;;\n@@ -368,7 +383,7 @@ case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n \texit ;;\n     Pyramid*:OSx*:*:* | MIS*:OSx*:*:* | MIS*:SMP_DC-OSx*:*:*)\n \t# akee@wpdis03.wpafb.af.mil (Earle F. Ake) contributed MIS and NILE.\n-\tif test \"`(/bin/universe) 2>/dev/null`\" = att ; then\n+\tif test \"$( (/bin/universe) 2>/dev/null)\" = att ; then\n \t\techo pyramid-pyramid-sysv3\n \telse\n \t\techo pyramid-pyramid-bsd\n@@ -381,17 +396,17 @@ case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n \techo sparc-icl-nx6\n \texit ;;\n     DRS?6000:UNIX_SV:4.2*:7* | DRS?6000:isis:4.2*:7*)\n-\tcase `/usr/bin/uname -p` in\n+\tcase $(/usr/bin/uname -p) in\n \t    sparc) echo sparc-icl-nx7; exit ;;\n \tesac ;;\n     s390x:SunOS:*:*)\n-\techo \"$UNAME_MACHINE\"-ibm-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"\n+\techo \"$UNAME_MACHINE\"-ibm-solaris2\"$(echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//')\"\n \texit ;;\n     sun4H:SunOS:5.*:*)\n-\techo sparc-hal-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n+\techo sparc-hal-solaris2\"$(echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//')\"\n \texit ;;\n     sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n-\techo sparc-sun-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"\n+\techo sparc-sun-solaris2\"$(echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//')\"\n \texit ;;\n     i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)\n \techo i386-pc-auroraux\"$UNAME_RELEASE\"\n@@ -402,38 +417,38 @@ case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n \t# If there is a compiler, see if it is configured for 64-bit objects.\n \t# Note that the Sun cc does not turn __LP64__ into 1 like gcc does.\n \t# This test works for both compilers.\n-\tif [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then\n+\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n \t    if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\\n \t\t(CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n \t\tgrep IS_64BIT_ARCH >/dev/null\n \t    then\n \t\tSUN_ARCH=x86_64\n \t    fi\n \tfi\n-\techo \"$SUN_ARCH\"-pc-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n+\techo \"$SUN_ARCH\"-pc-solaris2\"$(echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//')\"\n \texit ;;\n     sun4*:SunOS:6*:*)\n \t# According to config.sub, this is the proper way to canonicalize\n \t# SunOS6.  Hard to guess exactly what SunOS6 will be like, but\n \t# it's likely to be more like Solaris than SunOS4.\n-\techo sparc-sun-solaris3\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n+\techo sparc-sun-solaris3\"$(echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//')\"\n \texit ;;\n     sun4*:SunOS:*:*)\n-\tcase \"`/usr/bin/arch -k`\" in\n+\tcase $(/usr/bin/arch -k) in\n \t    Series*|S4*)\n-\t\tUNAME_RELEASE=`uname -v`\n+\t\tUNAME_RELEASE=$(uname -v)\n \t\t;;\n \tesac\n \t# Japanese Language versions have a version number like `4.1.3-JL'.\n-\techo sparc-sun-sunos\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/'`\"\n+\techo sparc-sun-sunos\"$(echo \"$UNAME_RELEASE\"|sed -e 's/-/_/')\"\n \texit ;;\n     sun3*:SunOS:*:*)\n \techo m68k-sun-sunos\"$UNAME_RELEASE\"\n \texit ;;\n     sun*:*:4.2BSD:*)\n-\tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n+\tUNAME_RELEASE=$( (sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null)\n \ttest \"x$UNAME_RELEASE\" = x && UNAME_RELEASE=3\n-\tcase \"`/bin/arch`\" in\n+\tcase $(/bin/arch) in\n \t    sun3)\n \t\techo m68k-sun-sunos\"$UNAME_RELEASE\"\n \t\t;;\n@@ -513,8 +528,8 @@ case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n \t}\n EOF\n \t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" &&\n-\t  dummyarg=`echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n-\t  SYSTEM_NAME=`\"$dummy\" \"$dummyarg\"` &&\n+\t  dummyarg=$(echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p') &&\n+\t  SYSTEM_NAME=$(\"$dummy\" \"$dummyarg\") &&\n \t    { echo \"$SYSTEM_NAME\"; exit; }\n \techo mips-mips-riscos\"$UNAME_RELEASE\"\n \texit ;;\n@@ -541,11 +556,11 @@ EOF\n \texit ;;\n     AViiON:dgux:*:*)\n \t# DG/UX returns AViiON for all architectures\n-\tUNAME_PROCESSOR=`/usr/bin/uname -p`\n-\tif [ \"$UNAME_PROCESSOR\" = mc88100 ] || [ \"$UNAME_PROCESSOR\" = mc88110 ]\n+\tUNAME_PROCESSOR=$(/usr/bin/uname -p)\n+\tif test \"$UNAME_PROCESSOR\" = mc88100 || test \"$UNAME_PROCESSOR\" = mc88110\n \tthen\n-\t    if [ \"$TARGET_BINARY_INTERFACE\"x = m88kdguxelfx ] || \\\n-\t       [ \"$TARGET_BINARY_INTERFACE\"x = x ]\n+\t    if test \"$TARGET_BINARY_INTERFACE\"x = m88kdguxelfx || \\\n+\t       test \"$TARGET_BINARY_INTERFACE\"x = x\n \t    then\n \t\techo m88k-dg-dgux\"$UNAME_RELEASE\"\n \t    else\n@@ -569,17 +584,17 @@ EOF\n \techo m68k-tektronix-bsd\n \texit ;;\n     *:IRIX*:*:*)\n-\techo mips-sgi-irix\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/g'`\"\n+\techo mips-sgi-irix\"$(echo \"$UNAME_RELEASE\"|sed -e 's/-/_/g')\"\n \texit ;;\n     ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.\n \techo romp-ibm-aix     # uname -m gives an 8 hex-code CPU id\n-\texit ;;               # Note that: echo \"'`uname -s`'\" gives 'AIX '\n+\texit ;;               # Note that: echo \"'$(uname -s)'\" gives 'AIX '\n     i*86:AIX:*:*)\n \techo i386-ibm-aix\n \texit ;;\n     ia64:AIX:*:*)\n-\tif [ -x /usr/bin/oslevel ] ; then\n-\t\tIBM_REV=`/usr/bin/oslevel`\n+\tif test -x /usr/bin/oslevel ; then\n+\t\tIBM_REV=$(/usr/bin/oslevel)\n \telse\n \t\tIBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"\n \tfi\n@@ -599,7 +614,7 @@ EOF\n \t\t\texit(0);\n \t\t\t}\n EOF\n-\t\tif $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"`\n+\t\tif $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=$(\"$dummy\")\n \t\tthen\n \t\t\techo \"$SYSTEM_NAME\"\n \t\telse\n@@ -612,15 +627,15 @@ EOF\n \tfi\n \texit ;;\n     *:AIX:*:[4567])\n-\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n+\tIBM_CPU_ID=$(/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }')\n \tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n \t\tIBM_ARCH=rs6000\n \telse\n \t\tIBM_ARCH=powerpc\n \tfi\n-\tif [ -x /usr/bin/lslpp ] ; then\n-\t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc |\n-\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n+\tif test -x /usr/bin/lslpp ; then\n+\t\tIBM_REV=$(/usr/bin/lslpp -Lqc bos.rte.libc |\n+\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/)\n \telse\n \t\tIBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"\n \tfi\n@@ -648,26 +663,26 @@ EOF\n \techo m68k-hp-bsd4.4\n \texit ;;\n     9000/[34678]??:HP-UX:*:*)\n-\tHPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`\n-\tcase \"$UNAME_MACHINE\" in\n+\tHPUX_REV=$(echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//')\n+\tcase $UNAME_MACHINE in\n \t    9000/31?)            HP_ARCH=m68000 ;;\n \t    9000/[34]??)         HP_ARCH=m68k ;;\n \t    9000/[678][0-9][0-9])\n-\t\tif [ -x /usr/bin/getconf ]; then\n-\t\t    sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`\n-\t\t    sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`\n-\t\t    case \"$sc_cpu_version\" in\n+\t\tif test -x /usr/bin/getconf; then\n+\t\t    sc_cpu_version=$(/usr/bin/getconf SC_CPU_VERSION 2>/dev/null)\n+\t\t    sc_kernel_bits=$(/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null)\n+\t\t    case $sc_cpu_version in\n \t\t      523) HP_ARCH=hppa1.0 ;; # CPU_PA_RISC1_0\n \t\t      528) HP_ARCH=hppa1.1 ;; # CPU_PA_RISC1_1\n \t\t      532)                      # CPU_PA_RISC2_0\n-\t\t\tcase \"$sc_kernel_bits\" in\n+\t\t\tcase $sc_kernel_bits in\n \t\t\t  32) HP_ARCH=hppa2.0n ;;\n \t\t\t  64) HP_ARCH=hppa2.0w ;;\n \t\t\t  '') HP_ARCH=hppa2.0 ;;   # HP-UX 10.20\n \t\t\tesac ;;\n \t\t    esac\n \t\tfi\n-\t\tif [ \"$HP_ARCH\" = \"\" ]; then\n+\t\tif test \"$HP_ARCH\" = \"\"; then\n \t\t    set_cc_for_build\n \t\t    sed 's/^\t\t//' << EOF > \"$dummy.c\"\n \n@@ -702,11 +717,11 @@ EOF\n \t\t    exit (0);\n \t\t}\n EOF\n-\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null) && HP_ARCH=`\"$dummy\"`\n+\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null) && HP_ARCH=$(\"$dummy\")\n \t\t    test -z \"$HP_ARCH\" && HP_ARCH=hppa\n \t\tfi ;;\n \tesac\n-\tif [ \"$HP_ARCH\" = hppa2.0w ]\n+\tif test \"$HP_ARCH\" = hppa2.0w\n \tthen\n \t    set_cc_for_build\n \n@@ -730,7 +745,7 @@ EOF\n \techo \"$HP_ARCH\"-hp-hpux\"$HPUX_REV\"\n \texit ;;\n     ia64:HP-UX:*:*)\n-\tHPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`\n+\tHPUX_REV=$(echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//')\n \techo ia64-hp-hpux\"$HPUX_REV\"\n \texit ;;\n     3050*:HI-UX:*:*)\n@@ -760,7 +775,7 @@ EOF\n \t  exit (0);\n \t}\n EOF\n-\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"` &&\n+\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=$(\"$dummy\") &&\n \t\t{ echo \"$SYSTEM_NAME\"; exit; }\n \techo unknown-hitachi-hiuxwe2\n \texit ;;\n@@ -780,7 +795,7 @@ EOF\n \techo hppa1.0-hp-osf\n \texit ;;\n     i*86:OSF1:*:*)\n-\tif [ -x /usr/sbin/sysversion ] ; then\n+\tif test -x /usr/sbin/sysversion ; then\n \t    echo \"$UNAME_MACHINE\"-unknown-osf1mk\n \telse\n \t    echo \"$UNAME_MACHINE\"-unknown-osf1\n@@ -829,14 +844,14 @@ EOF\n \techo craynv-cray-unicosmp\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n-\tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n-\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n+\tFUJITSU_PROC=$(uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz)\n+\tFUJITSU_SYS=$(uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///')\n+\tFUJITSU_REL=$(echo \"$UNAME_RELEASE\" | sed -e 's/ /_/')\n \techo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     5000:UNIX_System_V:4.*:*)\n-\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n+\tFUJITSU_SYS=$(uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///')\n+\tFUJITSU_REL=$(echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/')\n \techo \"sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n@@ -849,25 +864,25 @@ EOF\n \techo \"$UNAME_MACHINE\"-unknown-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     arm:FreeBSD:*:*)\n-\tUNAME_PROCESSOR=`uname -p`\n+\tUNAME_PROCESSOR=$(uname -p)\n \tset_cc_for_build\n \tif echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t    | grep -q __ARM_PCS_VFP\n \tthen\n-\t    echo \"${UNAME_PROCESSOR}\"-unknown-freebsd\"`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\"-gnueabi\n+\t    echo \"${UNAME_PROCESSOR}\"-unknown-freebsd\"$(echo ${UNAME_RELEASE}|sed -e 's/[-(].*//')\"-gnueabi\n \telse\n-\t    echo \"${UNAME_PROCESSOR}\"-unknown-freebsd\"`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\"-gnueabihf\n+\t    echo \"${UNAME_PROCESSOR}\"-unknown-freebsd\"$(echo ${UNAME_RELEASE}|sed -e 's/[-(].*//')\"-gnueabihf\n \tfi\n \texit ;;\n     *:FreeBSD:*:*)\n-\tUNAME_PROCESSOR=`/usr/bin/uname -p`\n-\tcase \"$UNAME_PROCESSOR\" in\n+\tUNAME_PROCESSOR=$(/usr/bin/uname -p)\n+\tcase $UNAME_PROCESSOR in\n \t    amd64)\n \t\tUNAME_PROCESSOR=x86_64 ;;\n \t    i386)\n \t\tUNAME_PROCESSOR=i586 ;;\n \tesac\n-\techo \"$UNAME_PROCESSOR\"-unknown-freebsd\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"\n+\techo \"$UNAME_PROCESSOR\"-unknown-freebsd\"$(echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//')\"\n \texit ;;\n     i*:CYGWIN*:*)\n \techo \"$UNAME_MACHINE\"-pc-cygwin\n@@ -885,7 +900,7 @@ EOF\n \techo \"$UNAME_MACHINE\"-pc-pw32\n \texit ;;\n     *:Interix*:*)\n-\tcase \"$UNAME_MACHINE\" in\n+\tcase $UNAME_MACHINE in\n \t    x86)\n \t\techo i586-pc-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n@@ -903,15 +918,15 @@ EOF\n \techo x86_64-pc-cygwin\n \texit ;;\n     prep*:SunOS:5.*:*)\n-\techo powerpcle-unknown-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n+\techo powerpcle-unknown-solaris2\"$(echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//')\"\n \texit ;;\n     *:GNU:*:*)\n \t# the GNU system\n-\techo \"`echo \"$UNAME_MACHINE\"|sed -e 's,[-/].*$,,'`-unknown-$LIBC`echo \"$UNAME_RELEASE\"|sed -e 's,/.*$,,'`\"\n+\techo \"$(echo \"$UNAME_MACHINE\"|sed -e 's,[-/].*$,,')-unknown-$LIBC$(echo \"$UNAME_RELEASE\"|sed -e 's,/.*$,,')\"\n \texit ;;\n     *:GNU/*:*:*)\n \t# other systems with GNU libc and userland\n-\techo \"$UNAME_MACHINE-unknown-`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`-$LIBC\"\n+\techo \"$UNAME_MACHINE-unknown-$(echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\")$(echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//')-$LIBC\"\n \texit ;;\n     *:Minix:*:*)\n \techo \"$UNAME_MACHINE\"-unknown-minix\n@@ -924,7 +939,7 @@ EOF\n \techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     alpha:Linux:*:*)\n-\tcase `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in\n+\tcase $(sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' /proc/cpuinfo 2>/dev/null) in\n \t  EV5)   UNAME_MACHINE=alphaev5 ;;\n \t  EV56)  UNAME_MACHINE=alphaev56 ;;\n \t  PCA56) UNAME_MACHINE=alphapca56 ;;\n@@ -937,7 +952,7 @@ EOF\n \tif test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi\n \techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n-    arc:Linux:*:* | arceb:Linux:*:*)\n+    arc:Linux:*:* | arceb:Linux:*:* | arc64:Linux:*:*)\n \techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     arm*:Linux:*:*)\n@@ -983,6 +998,9 @@ EOF\n     k1om:Linux:*:*)\n \techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n+    loongarch32:Linux:*:* | loongarch64:Linux:*:* | loongarchx32:Linux:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n+\texit ;;\n     m32r*:Linux:*:*)\n \techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n@@ -1033,7 +1051,7 @@ EOF\n \t#endif\n \t#endif\n EOF\n-\teval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU\\|^MIPS_ENDIAN\\|^LIBCABI'`\"\n+\teval \"$($CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU\\|^MIPS_ENDIAN\\|^LIBCABI')\"\n \ttest \"x$CPU\" != x && { echo \"$CPU${MIPS_ENDIAN}-unknown-linux-$LIBCABI\"; exit; }\n \t;;\n     mips64el:Linux:*:*)\n@@ -1053,7 +1071,7 @@ EOF\n \texit ;;\n     parisc:Linux:*:* | hppa:Linux:*:*)\n \t# Look for CPU level\n-\tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n+\tcase $(grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2) in\n \t  PA7*) echo hppa1.1-unknown-linux-\"$LIBC\" ;;\n \t  PA8*) echo hppa2.0-unknown-linux-\"$LIBC\" ;;\n \t  *)    echo hppa-unknown-linux-\"$LIBC\" ;;\n@@ -1071,7 +1089,7 @@ EOF\n     ppcle:Linux:*:*)\n \techo powerpcle-unknown-linux-\"$LIBC\"\n \texit ;;\n-    riscv32:Linux:*:* | riscv64:Linux:*:*)\n+    riscv32:Linux:*:* | riscv32be:Linux:*:* | riscv64:Linux:*:* | riscv64be:Linux:*:*)\n \techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     s390:Linux:*:* | s390x:Linux:*:*)\n@@ -1093,7 +1111,17 @@ EOF\n \techo \"$UNAME_MACHINE\"-dec-linux-\"$LIBC\"\n \texit ;;\n     x86_64:Linux:*:*)\n-\techo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"\n+\tset_cc_for_build\n+\tLIBCABI=$LIBC\n+\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n+\t    if (echo '#ifdef __ILP32__'; echo IS_X32; echo '#endif') | \\\n+\t\t(CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\tgrep IS_X32 >/dev/null\n+\t    then\n+\t\tLIBCABI=\"$LIBC\"x32\n+\t    fi\n+\tfi\n+\techo \"$UNAME_MACHINE\"-pc-linux-\"$LIBCABI\"\n \texit ;;\n     xtensa*:Linux:*:*)\n \techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n@@ -1133,7 +1161,7 @@ EOF\n \techo \"$UNAME_MACHINE\"-pc-msdosdjgpp\n \texit ;;\n     i*86:*:4.*:*)\n-\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n+\tUNAME_REL=$(echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//')\n \tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n \t\techo \"$UNAME_MACHINE\"-univel-sysv\"$UNAME_REL\"\n \telse\n@@ -1142,7 +1170,7 @@ EOF\n \texit ;;\n     i*86:*:5:[678]*)\n \t# UnixWare 7.x, OpenUNIX and OpenServer 6.\n-\tcase `/bin/uname -X | grep \"^Machine\"` in\n+\tcase $(/bin/uname -X | grep \"^Machine\") in\n \t    *486*)\t     UNAME_MACHINE=i486 ;;\n \t    *Pentium)\t     UNAME_MACHINE=i586 ;;\n \t    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;\n@@ -1151,10 +1179,10 @@ EOF\n \texit ;;\n     i*86:*:3.2:*)\n \tif test -f /usr/options/cb.name; then\n-\t\tUNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`\n+\t\tUNAME_REL=$(sed -n 's/.*Version //p' </usr/options/cb.name)\n \t\techo \"$UNAME_MACHINE\"-pc-isc\"$UNAME_REL\"\n \telif /bin/uname -X 2>/dev/null >/dev/null ; then\n-\t\tUNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`\n+\t\tUNAME_REL=$( (/bin/uname -X|grep Release|sed -e 's/.*= //'))\n \t\t(/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486\n \t\t(/bin/uname -X|grep '^Machine.*Pentium' >/dev/null) \\\n \t\t\t&& UNAME_MACHINE=i586\n@@ -1204,7 +1232,7 @@ EOF\n     3[345]??:*:4.0:3.0 | 3[34]??A:*:4.0:3.0 | 3[34]??,*:*:4.0:3.0 | 3[34]??/*:*:4.0:3.0 | 4400:*:4.0:3.0 | 4850:*:4.0:3.0 | SKA40:*:4.0:3.0 | SDS2:*:4.0:3.0 | SHG2:*:4.0:3.0 | S7501*:*:4.0:3.0)\n \tOS_REL=''\n \ttest -r /etc/.relid \\\n-\t&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n+\t&& OS_REL=.$(sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid)\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n \t  && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n@@ -1215,7 +1243,7 @@ EOF\n     NCR*:*:4.2:* | MPRAS*:*:4.2:*)\n \tOS_REL='.3'\n \ttest -r /etc/.relid \\\n-\t    && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n+\t    && OS_REL=.$(sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid)\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n \t    && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n@@ -1248,7 +1276,7 @@ EOF\n \texit ;;\n     *:SINIX-*:*:*)\n \tif uname -p 2>/dev/null >/dev/null ; then\n-\t\tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n+\t\tUNAME_MACHINE=$( (uname -p) 2>/dev/null)\n \t\techo \"$UNAME_MACHINE\"-sni-sysv4\n \telse\n \t\techo ns32k-sni-sysv\n@@ -1282,7 +1310,7 @@ EOF\n \techo mips-sony-newsos6\n \texit ;;\n     R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)\n-\tif [ -d /usr/nec ]; then\n+\tif test -d /usr/nec; then\n \t\techo mips-nec-sysv\"$UNAME_RELEASE\"\n \telse\n \t\techo mips-unknown-sysv\"$UNAME_RELEASE\"\n@@ -1330,8 +1358,11 @@ EOF\n     *:Rhapsody:*:*)\n \techo \"$UNAME_MACHINE\"-apple-rhapsody\"$UNAME_RELEASE\"\n \texit ;;\n+    arm64:Darwin:*:*)\n+\techo aarch64-apple-darwin\"$UNAME_RELEASE\"\n+\texit ;;\n     *:Darwin:*:*)\n-\tUNAME_PROCESSOR=`uname -p`\n+\tUNAME_PROCESSOR=$(uname -p)\n \tcase $UNAME_PROCESSOR in\n \t    unknown) UNAME_PROCESSOR=powerpc ;;\n \tesac\n@@ -1344,7 +1375,7 @@ EOF\n \telse\n \t    set_cc_for_build\n \tfi\n-\tif [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then\n+\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n \t    if (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n \t\t   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n \t\t   grep IS_64BIT_ARCH >/dev/null\n@@ -1368,7 +1399,7 @@ EOF\n \techo \"$UNAME_PROCESSOR\"-apple-darwin\"$UNAME_RELEASE\"\n \texit ;;\n     *:procnto*:*:* | *:QNX:[0123456789]*:*)\n-\tUNAME_PROCESSOR=`uname -p`\n+\tUNAME_PROCESSOR=$(uname -p)\n \tif test \"$UNAME_PROCESSOR\" = x86; then\n \t\tUNAME_PROCESSOR=i386\n \t\tUNAME_MACHINE=pc\n@@ -1406,10 +1437,9 @@ EOF\n \t# \"uname -m\" is not consistent, so use $cputype instead. 386\n \t# is converted to i386 for consistency with other x86\n \t# operating systems.\n-\t# shellcheck disable=SC2154\n-\tif test \"$cputype\" = 386; then\n+\tif test \"${cputype-}\" = 386; then\n \t    UNAME_MACHINE=i386\n-\telse\n+\telif test \"x${cputype-}\" != x; then\n \t    UNAME_MACHINE=\"$cputype\"\n \tfi\n \techo \"$UNAME_MACHINE\"-unknown-plan9\n@@ -1436,11 +1466,11 @@ EOF\n \techo mips-sei-seiux\"$UNAME_RELEASE\"\n \texit ;;\n     *:DragonFly:*:*)\n-\techo \"$UNAME_MACHINE\"-unknown-dragonfly\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"\n+\techo \"$UNAME_MACHINE\"-unknown-dragonfly\"$(echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//')\"\n \texit ;;\n     *:*VMS:*:*)\n-\tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n-\tcase \"$UNAME_MACHINE\" in\n+\tUNAME_MACHINE=$( (uname -p) 2>/dev/null)\n+\tcase $UNAME_MACHINE in\n \t    A*) echo alpha-dec-vms ; exit ;;\n \t    I*) echo ia64-dec-vms ; exit ;;\n \t    V*) echo vax-dec-vms ; exit ;;\n@@ -1449,13 +1479,13 @@ EOF\n \techo i386-pc-xenix\n \texit ;;\n     i*86:skyos:*:*)\n-\techo \"$UNAME_MACHINE\"-pc-skyos\"`echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//'`\"\n+\techo \"$UNAME_MACHINE\"-pc-skyos\"$(echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//')\"\n \texit ;;\n     i*86:rdos:*:*)\n \techo \"$UNAME_MACHINE\"-pc-rdos\n \texit ;;\n-    i*86:AROS:*:*)\n-\techo \"$UNAME_MACHINE\"-pc-aros\n+    *:AROS:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-aros\n \texit ;;\n     x86_64:VMkernel:*:*)\n \techo \"$UNAME_MACHINE\"-unknown-esx\n@@ -1507,7 +1537,7 @@ main ()\n #define __ARCHITECTURE__ \"m68k\"\n #endif\n   int version;\n-  version=`(hostinfo | sed -n 's/.*NeXT Mach \\([0-9]*\\).*/\\1/p') 2>/dev/null`;\n+  version=$( (hostinfo | sed -n 's/.*NeXT Mach \\([0-9]*\\).*/\\1/p') 2>/dev/null);\n   if (version < 4)\n     printf (\"%s-next-nextstep%d\\n\", __ARCHITECTURE__, version);\n   else\n@@ -1599,15 +1629,15 @@ main ()\n }\n EOF\n \n-$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null && SYSTEM_NAME=`$dummy` &&\n+$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null && SYSTEM_NAME=$($dummy) &&\n \t{ echo \"$SYSTEM_NAME\"; exit; }\n \n # Apollos put the system type in the environment.\n test -d /usr/apollo && { echo \"$ISP-apollo-$SYSTYPE\"; exit; }\n \n echo \"$0: unable to guess system type\" >&2\n \n-case \"$UNAME_MACHINE:$UNAME_SYSTEM\" in\n+case $UNAME_MACHINE:$UNAME_SYSTEM in\n     mips:Linux | mips64:Linux)\n \t# If we got here on MIPS GNU/Linux, output extra information.\n \tcat >&2 <<EOF\n@@ -1624,36 +1654,43 @@ This script (version $timestamp), has failed to recognize the\n operating system you are using. If your script is old, overwrite *all*\n copies of config.guess and config.sub with the latest versions from:\n \n-  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n+  https://git.savannah.gnu.org/cgit/config.git/plain/config.guess\n and\n-  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n+  https://git.savannah.gnu.org/cgit/config.git/plain/config.sub\n+EOF\n+\n+year=$(echo $timestamp | sed 's,-.*,,')\n+# shellcheck disable=SC2003\n+if test \"$(expr \"$(date +%Y)\" - \"$year\")\" -lt 3 ; then\n+   cat >&2 <<EOF\n \n If $0 has already been updated, send the following data and any\n information you think might be pertinent to config-patches@gnu.org to\n provide the necessary information to handle your system.\n \n config.guess timestamp = $timestamp\n \n-uname -m = `(uname -m) 2>/dev/null || echo unknown`\n-uname -r = `(uname -r) 2>/dev/null || echo unknown`\n-uname -s = `(uname -s) 2>/dev/null || echo unknown`\n-uname -v = `(uname -v) 2>/dev/null || echo unknown`\n+uname -m = $( (uname -m) 2>/dev/null || echo unknown)\n+uname -r = $( (uname -r) 2>/dev/null || echo unknown)\n+uname -s = $( (uname -s) 2>/dev/null || echo unknown)\n+uname -v = $( (uname -v) 2>/dev/null || echo unknown)\n \n-/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null`\n-/bin/uname -X     = `(/bin/uname -X) 2>/dev/null`\n+/usr/bin/uname -p = $( (/usr/bin/uname -p) 2>/dev/null)\n+/bin/uname -X     = $( (/bin/uname -X) 2>/dev/null)\n \n-hostinfo               = `(hostinfo) 2>/dev/null`\n-/bin/universe          = `(/bin/universe) 2>/dev/null`\n-/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null`\n-/bin/arch              = `(/bin/arch) 2>/dev/null`\n-/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`\n-/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`\n+hostinfo               = $( (hostinfo) 2>/dev/null)\n+/bin/universe          = $( (/bin/universe) 2>/dev/null)\n+/usr/bin/arch -k       = $( (/usr/bin/arch -k) 2>/dev/null)\n+/bin/arch              = $( (/bin/arch) 2>/dev/null)\n+/usr/bin/oslevel       = $( (/usr/bin/oslevel) 2>/dev/null)\n+/usr/convex/getsysinfo = $( (/usr/convex/getsysinfo) 2>/dev/null)\n \n UNAME_MACHINE = \"$UNAME_MACHINE\"\n UNAME_RELEASE = \"$UNAME_RELEASE\"\n UNAME_SYSTEM  = \"$UNAME_SYSTEM\"\n UNAME_VERSION = \"$UNAME_VERSION\"\n EOF\n+fi\n \n exit 1\n "
      },
      {
        "sha": "5cf107f19b7cdec87640bd1759743988054c0e8e",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 51,
        "deletions": 35,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -8,70 +8,86 @@ true  # Dummy command because shellcheck treats all directives before first\n       # See: https://github.com/koalaman/shellcheck/wiki/Directive\n \n # shellcheck disable=SC2154\n-depends_prefix=\"$(cd \"$(dirname ${ac_site_file})/..\" && pwd)\"\n+depends_prefix=\"$(cd \"$(dirname \"$ac_site_file\")/..\" && pwd)\"\n \n cross_compiling=maybe\n-host_alias=@HOST@\n-ac_tool_prefix=${host_alias}-\n+host_alias=\"@HOST@\"\n+ac_tool_prefix=\"${host_alias}-\"\n \n-if test -z $with_boost; then\n-  with_boost=$depends_prefix\n+if test -z \"$with_boost\"; then\n+  with_boost=\"$depends_prefix\"\n fi\n-if test -z $with_qt_plugindir; then\n-  with_qt_plugindir=$depends_prefix/plugins\n+if test -z \"$with_qt_plugindir\"; then\n+  with_qt_plugindir=\"${depends_prefix}/plugins\"\n fi\n-if test -z $with_qt_translationdir; then\n-  with_qt_translationdir=$depends_prefix/translations\n+if test -z \"$with_qt_translationdir\"; then\n+  with_qt_translationdir=\"${depends_prefix}/translations\"\n fi\n-if test -z $with_qt_bindir && test -z \"@no_qt@\"; then\n-  with_qt_bindir=$depends_prefix/native/bin\n+if test -z \"$with_qt_bindir\" && test -z \"@no_qt@\"; then\n+  with_qt_bindir=\"${depends_prefix}/native/bin\"\n fi\n-if test -z $with_mpgen && test -n \"@multiprocess@\"; then\n-  with_mpgen=$depends_prefix/native\n+if test -z \"$with_mpgen\" && test -n \"@multiprocess@\"; then\n+  with_mpgen=\"${depends_prefix}/native\"\n fi\n \n-if test -z $with_qrencode && test -n \"@no_qr@\"; then\n+if test -z \"$with_qrencode\" && test -n \"@no_qr@\"; then\n   with_qrencode=no\n fi\n \n-if test -z $enable_wallet && test -n \"@no_wallet@\"; then\n+if test -z \"$enable_wallet\" && test -n \"@no_wallet@\"; then\n   enable_wallet=no\n fi\n \n-if test -z $enable_multiprocess && test -n \"@multiprocess@\"; then\n+if test -z \"$with_bdb\" && test -n \"@no_bdb@\"; then\n+  with_bdb=no\n+fi\n+\n+if test -z \"$with_sqlite\" && test -n \"@no_sqlite@\"; then\n+  with_sqlite=no\n+fi\n+\n+if test -z \"$enable_multiprocess\" && test -n \"@multiprocess@\"; then\n   enable_multiprocess=yes\n fi\n \n-if test -z $with_miniupnpc && test -n \"@no_upnp@\"; then\n+if test -z \"$with_miniupnpc\" && test -n \"@no_upnp@\"; then\n   with_miniupnpc=no\n fi\n \n-if test -z $with_gui && test -n \"@no_qt@\"; then\n+if test -z \"$with_natpmp\" && test -n \"@no_natpmp@\"; then\n+  with_natpmp=no\n+fi\n+\n+if test -z \"$with_gui\" && test -n \"@no_qt@\"; then\n   with_gui=no\n fi\n \n-if test -z $enable_zmq && test -n \"@no_zmq@\"; then\n+if test -n \"@debug@\" && test -z \"@no_qt@\" && test \"x$with_gui\" != xno; then\n+  with_gui=qt5_debug\n+fi\n+\n+if test -z \"$enable_zmq\" && test -n \"@no_zmq@\"; then\n   enable_zmq=no\n fi\n \n-if test x@host_os@ = xdarwin; then\n+if test \"@host_os@\" = darwin; then\n   BREW=no\n   PORT=no\n fi\n \n-PATH=$depends_prefix/native/bin:$PATH\n+PATH=\"${depends_prefix}/native/bin:${PATH}\"\n PKG_CONFIG=\"$(which pkg-config) --static\"\n \n # These two need to remain exported because pkg-config does not see them\n # otherwise. That means they must be unexported at the end of configure.ac to\n # avoid ruining the cache. Sigh.\n-export PKG_CONFIG_PATH=$depends_prefix/share/pkgconfig:$depends_prefix/lib/pkgconfig\n+export PKG_CONFIG_PATH=\"${depends_prefix}/share/pkgconfig:${depends_prefix}/lib/pkgconfig\"\n if test -z \"@allow_host_packages@\"; then\n-  export PKG_CONFIG_LIBDIR=$depends_prefix/lib/pkgconfig\n+  export PKG_CONFIG_LIBDIR=\"${depends_prefix}/lib/pkgconfig\"\n fi\n \n-CPPFLAGS=\"-I$depends_prefix/include/ $CPPFLAGS\"\n-LDFLAGS=\"-L$depends_prefix/lib $LDFLAGS\"\n+CPPFLAGS=\"-I${depends_prefix}/include/ ${CPPFLAGS}\"\n+LDFLAGS=\"-L${depends_prefix}/lib ${LDFLAGS}\"\n \n if test -n \"@CC@\" -a -z \"${CC}\"; then\n   CC=\"@CC@\"\n@@ -82,33 +98,33 @@ fi\n PYTHONPATH=\"${depends_prefix}/native/lib/python3/dist-packages${PYTHONPATH:+${PATH_SEPARATOR}}${PYTHONPATH}\"\n \n if test -n \"@AR@\"; then\n-  AR=@AR@\n-  ac_cv_path_ac_pt_AR=${AR}\n+  AR=\"@AR@\"\n+  ac_cv_path_ac_pt_AR=\"${AR}\"\n fi\n \n if test -n \"@RANLIB@\"; then\n-  RANLIB=@RANLIB@\n-  ac_cv_path_ac_pt_RANLIB=${RANLIB}\n+  RANLIB=\"@RANLIB@\"\n+  ac_cv_path_ac_pt_RANLIB=\"${RANLIB}\"\n fi\n \n if test -n \"@NM@\"; then\n-  NM=@NM@\n-  ac_cv_path_ac_pt_NM=${NM}\n+  NM=\"@NM@\"\n+  ac_cv_path_ac_pt_NM=\"${NM}\"\n fi\n \n if test -n \"@debug@\"; then\n   enable_reduce_exports=no\n fi\n \n if test -n \"@CFLAGS@\"; then\n-  CFLAGS=\"@CFLAGS@ $CFLAGS\"\n+  CFLAGS=\"@CFLAGS@ ${CFLAGS}\"\n fi\n if test -n \"@CXXFLAGS@\"; then\n-  CXXFLAGS=\"@CXXFLAGS@ $CXXFLAGS\"\n+  CXXFLAGS=\"@CXXFLAGS@ ${CXXFLAGS}\"\n fi\n if test -n \"@CPPFLAGS@\"; then\n-  CPPFLAGS=\"@CPPFLAGS@ $CPPFLAGS\"\n+  CPPFLAGS=\"@CPPFLAGS@ ${CPPFLAGS}\"\n fi\n if test -n \"@LDFLAGS@\"; then\n-  LDFLAGS=\"@LDFLAGS@ $LDFLAGS\"\n+  LDFLAGS=\"@LDFLAGS@ ${LDFLAGS}\"\n fi"
      },
      {
        "sha": "7384e9198b4051ce9e3e079d50d8adb5060b1771",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 360,
        "deletions": 289,
        "changes": 649,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2019 Free Software Foundation, Inc.\n+#   Copyright 1992-2021 Free Software Foundation, Inc.\n \n-timestamp='2019-06-30'\n+timestamp='2021-04-30'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -33,7 +33,7 @@ timestamp='2019-06-30'\n # Otherwise, we print the canonical config type on stdout and succeed.\n \n # You can get the latest version of this script from:\n-# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n+# https://git.savannah.gnu.org/cgit/config.git/plain/config.sub\n \n # This file is supposed to be the same for all GNU packages\n # and recognize all the CPU types, system types and aliases\n@@ -50,7 +50,7 @@ timestamp='2019-06-30'\n #\tCPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM\n # It is wrong to echo any other type of specification.\n \n-me=`echo \"$0\" | sed -e 's,.*/,,'`\n+me=$(echo \"$0\" | sed -e 's,.*/,,')\n \n usage=\"\\\n Usage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS\n@@ -67,7 +67,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2019 Free Software Foundation, Inc.\n+Copyright 1992-2021 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -124,28 +124,27 @@ case $1 in\n \t\t;;\n \t*-*-*-*)\n \t\tbasic_machine=$field1-$field2\n-\t\tos=$field3-$field4\n+\t\tbasic_os=$field3-$field4\n \t\t;;\n \t*-*-*)\n \t\t# Ambiguous whether COMPANY is present, or skipped and KERNEL-OS is two\n \t\t# parts\n \t\tmaybe_os=$field2-$field3\n \t\tcase $maybe_os in\n-\t\t\tnto-qnx* | linux-gnu* | linux-android* | linux-dietlibc \\\n-\t\t\t| linux-newlib* | linux-musl* | linux-uclibc* | uclinux-uclibc* \\\n+\t\t\tnto-qnx* | linux-* | uclinux-uclibc* \\\n \t\t\t| uclinux-gnu* | kfreebsd*-gnu* | knetbsd*-gnu* | netbsd*-gnu* \\\n \t\t\t| netbsd*-eabi* | kopensolaris*-gnu* | cloudabi*-eabi* \\\n \t\t\t| storm-chaos* | os2-emx* | rtmk-nova*)\n \t\t\t\tbasic_machine=$field1\n-\t\t\t\tos=$maybe_os\n+\t\t\t\tbasic_os=$maybe_os\n \t\t\t\t;;\n \t\t\tandroid-linux)\n \t\t\t\tbasic_machine=$field1-unknown\n-\t\t\t\tos=linux-android\n+\t\t\t\tbasic_os=linux-android\n \t\t\t\t;;\n \t\t\t*)\n \t\t\t\tbasic_machine=$field1-$field2\n-\t\t\t\tos=$field3\n+\t\t\t\tbasic_os=$field3\n \t\t\t\t;;\n \t\tesac\n \t\t;;\n@@ -154,15 +153,15 @@ case $1 in\n \t\tcase $field1-$field2 in\n \t\t\tdecstation-3100)\n \t\t\t\tbasic_machine=mips-dec\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\t*-*)\n \t\t\t\t# Second component is usually, but not always the OS\n \t\t\t\tcase $field2 in\n \t\t\t\t\t# Prevent following clause from handling this valid os\n \t\t\t\t\tsun*os*)\n \t\t\t\t\t\tbasic_machine=$field1\n-\t\t\t\t\t\tos=$field2\n+\t\t\t\t\t\tbasic_os=$field2\n \t\t\t\t\t\t;;\n \t\t\t\t\t# Manufacturers\n \t\t\t\t\tdec* | mips* | sequent* | encore* | pc533* | sgi* | sony* \\\n@@ -175,11 +174,11 @@ case $1 in\n \t\t\t\t\t| microblaze* | sim | cisco \\\n \t\t\t\t\t| oki | wec | wrs | winbond)\n \t\t\t\t\t\tbasic_machine=$field1-$field2\n-\t\t\t\t\t\tos=\n+\t\t\t\t\t\tbasic_os=\n \t\t\t\t\t\t;;\n \t\t\t\t\t*)\n \t\t\t\t\t\tbasic_machine=$field1\n-\t\t\t\t\t\tos=$field2\n+\t\t\t\t\t\tbasic_os=$field2\n \t\t\t\t\t\t;;\n \t\t\t\tesac\n \t\t\t;;\n@@ -191,447 +190,451 @@ case $1 in\n \t\tcase $field1 in\n \t\t\t386bsd)\n \t\t\t\tbasic_machine=i386-pc\n-\t\t\t\tos=bsd\n+\t\t\t\tbasic_os=bsd\n \t\t\t\t;;\n \t\t\ta29khif)\n \t\t\t\tbasic_machine=a29k-amd\n-\t\t\t\tos=udi\n+\t\t\t\tbasic_os=udi\n \t\t\t\t;;\n \t\t\tadobe68k)\n \t\t\t\tbasic_machine=m68010-adobe\n-\t\t\t\tos=scout\n+\t\t\t\tbasic_os=scout\n \t\t\t\t;;\n \t\t\talliant)\n \t\t\t\tbasic_machine=fx80-alliant\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\taltos | altos3068)\n \t\t\t\tbasic_machine=m68k-altos\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\tam29k)\n \t\t\t\tbasic_machine=a29k-none\n-\t\t\t\tos=bsd\n+\t\t\t\tbasic_os=bsd\n \t\t\t\t;;\n \t\t\tamdahl)\n \t\t\t\tbasic_machine=580-amdahl\n-\t\t\t\tos=sysv\n+\t\t\t\tbasic_os=sysv\n \t\t\t\t;;\n \t\t\tamiga)\n \t\t\t\tbasic_machine=m68k-unknown\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\tamigaos | amigados)\n \t\t\t\tbasic_machine=m68k-unknown\n-\t\t\t\tos=amigaos\n+\t\t\t\tbasic_os=amigaos\n \t\t\t\t;;\n \t\t\tamigaunix | amix)\n \t\t\t\tbasic_machine=m68k-unknown\n-\t\t\t\tos=sysv4\n+\t\t\t\tbasic_os=sysv4\n \t\t\t\t;;\n \t\t\tapollo68)\n \t\t\t\tbasic_machine=m68k-apollo\n-\t\t\t\tos=sysv\n+\t\t\t\tbasic_os=sysv\n \t\t\t\t;;\n \t\t\tapollo68bsd)\n \t\t\t\tbasic_machine=m68k-apollo\n-\t\t\t\tos=bsd\n+\t\t\t\tbasic_os=bsd\n \t\t\t\t;;\n \t\t\taros)\n \t\t\t\tbasic_machine=i386-pc\n-\t\t\t\tos=aros\n+\t\t\t\tbasic_os=aros\n \t\t\t\t;;\n \t\t\taux)\n \t\t\t\tbasic_machine=m68k-apple\n-\t\t\t\tos=aux\n+\t\t\t\tbasic_os=aux\n \t\t\t\t;;\n \t\t\tbalance)\n \t\t\t\tbasic_machine=ns32k-sequent\n-\t\t\t\tos=dynix\n+\t\t\t\tbasic_os=dynix\n \t\t\t\t;;\n \t\t\tblackfin)\n \t\t\t\tbasic_machine=bfin-unknown\n-\t\t\t\tos=linux\n+\t\t\t\tbasic_os=linux\n \t\t\t\t;;\n \t\t\tcegcc)\n \t\t\t\tbasic_machine=arm-unknown\n-\t\t\t\tos=cegcc\n+\t\t\t\tbasic_os=cegcc\n \t\t\t\t;;\n \t\t\tconvex-c1)\n \t\t\t\tbasic_machine=c1-convex\n-\t\t\t\tos=bsd\n+\t\t\t\tbasic_os=bsd\n \t\t\t\t;;\n \t\t\tconvex-c2)\n \t\t\t\tbasic_machine=c2-convex\n-\t\t\t\tos=bsd\n+\t\t\t\tbasic_os=bsd\n \t\t\t\t;;\n \t\t\tconvex-c32)\n \t\t\t\tbasic_machine=c32-convex\n-\t\t\t\tos=bsd\n+\t\t\t\tbasic_os=bsd\n \t\t\t\t;;\n \t\t\tconvex-c34)\n \t\t\t\tbasic_machine=c34-convex\n-\t\t\t\tos=bsd\n+\t\t\t\tbasic_os=bsd\n \t\t\t\t;;\n \t\t\tconvex-c38)\n \t\t\t\tbasic_machine=c38-convex\n-\t\t\t\tos=bsd\n+\t\t\t\tbasic_os=bsd\n \t\t\t\t;;\n \t\t\tcray)\n \t\t\t\tbasic_machine=j90-cray\n-\t\t\t\tos=unicos\n+\t\t\t\tbasic_os=unicos\n \t\t\t\t;;\n \t\t\tcrds | unos)\n \t\t\t\tbasic_machine=m68k-crds\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\tda30)\n \t\t\t\tbasic_machine=m68k-da30\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\tdecstation | pmax | pmin | dec3100 | decstatn)\n \t\t\t\tbasic_machine=mips-dec\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\tdelta88)\n \t\t\t\tbasic_machine=m88k-motorola\n-\t\t\t\tos=sysv3\n+\t\t\t\tbasic_os=sysv3\n \t\t\t\t;;\n \t\t\tdicos)\n \t\t\t\tbasic_machine=i686-pc\n-\t\t\t\tos=dicos\n+\t\t\t\tbasic_os=dicos\n \t\t\t\t;;\n \t\t\tdjgpp)\n \t\t\t\tbasic_machine=i586-pc\n-\t\t\t\tos=msdosdjgpp\n+\t\t\t\tbasic_os=msdosdjgpp\n \t\t\t\t;;\n \t\t\tebmon29k)\n \t\t\t\tbasic_machine=a29k-amd\n-\t\t\t\tos=ebmon\n+\t\t\t\tbasic_os=ebmon\n \t\t\t\t;;\n \t\t\tes1800 | OSE68k | ose68k | ose | OSE)\n \t\t\t\tbasic_machine=m68k-ericsson\n-\t\t\t\tos=ose\n+\t\t\t\tbasic_os=ose\n \t\t\t\t;;\n \t\t\tgmicro)\n \t\t\t\tbasic_machine=tron-gmicro\n-\t\t\t\tos=sysv\n+\t\t\t\tbasic_os=sysv\n \t\t\t\t;;\n \t\t\tgo32)\n \t\t\t\tbasic_machine=i386-pc\n-\t\t\t\tos=go32\n+\t\t\t\tbasic_os=go32\n \t\t\t\t;;\n \t\t\th8300hms)\n \t\t\t\tbasic_machine=h8300-hitachi\n-\t\t\t\tos=hms\n+\t\t\t\tbasic_os=hms\n \t\t\t\t;;\n \t\t\th8300xray)\n \t\t\t\tbasic_machine=h8300-hitachi\n-\t\t\t\tos=xray\n+\t\t\t\tbasic_os=xray\n \t\t\t\t;;\n \t\t\th8500hms)\n \t\t\t\tbasic_machine=h8500-hitachi\n-\t\t\t\tos=hms\n+\t\t\t\tbasic_os=hms\n \t\t\t\t;;\n \t\t\tharris)\n \t\t\t\tbasic_machine=m88k-harris\n-\t\t\t\tos=sysv3\n+\t\t\t\tbasic_os=sysv3\n \t\t\t\t;;\n \t\t\thp300 | hp300hpux)\n \t\t\t\tbasic_machine=m68k-hp\n-\t\t\t\tos=hpux\n+\t\t\t\tbasic_os=hpux\n \t\t\t\t;;\n \t\t\thp300bsd)\n \t\t\t\tbasic_machine=m68k-hp\n-\t\t\t\tos=bsd\n+\t\t\t\tbasic_os=bsd\n \t\t\t\t;;\n \t\t\thppaosf)\n \t\t\t\tbasic_machine=hppa1.1-hp\n-\t\t\t\tos=osf\n+\t\t\t\tbasic_os=osf\n \t\t\t\t;;\n \t\t\thppro)\n \t\t\t\tbasic_machine=hppa1.1-hp\n-\t\t\t\tos=proelf\n+\t\t\t\tbasic_os=proelf\n \t\t\t\t;;\n \t\t\ti386mach)\n \t\t\t\tbasic_machine=i386-mach\n-\t\t\t\tos=mach\n+\t\t\t\tbasic_os=mach\n \t\t\t\t;;\n \t\t\tisi68 | isi)\n \t\t\t\tbasic_machine=m68k-isi\n-\t\t\t\tos=sysv\n+\t\t\t\tbasic_os=sysv\n \t\t\t\t;;\n \t\t\tm68knommu)\n \t\t\t\tbasic_machine=m68k-unknown\n-\t\t\t\tos=linux\n+\t\t\t\tbasic_os=linux\n \t\t\t\t;;\n \t\t\tmagnum | m3230)\n \t\t\t\tbasic_machine=mips-mips\n-\t\t\t\tos=sysv\n+\t\t\t\tbasic_os=sysv\n \t\t\t\t;;\n \t\t\tmerlin)\n \t\t\t\tbasic_machine=ns32k-utek\n-\t\t\t\tos=sysv\n+\t\t\t\tbasic_os=sysv\n \t\t\t\t;;\n \t\t\tmingw64)\n \t\t\t\tbasic_machine=x86_64-pc\n-\t\t\t\tos=mingw64\n+\t\t\t\tbasic_os=mingw64\n \t\t\t\t;;\n \t\t\tmingw32)\n \t\t\t\tbasic_machine=i686-pc\n-\t\t\t\tos=mingw32\n+\t\t\t\tbasic_os=mingw32\n \t\t\t\t;;\n \t\t\tmingw32ce)\n \t\t\t\tbasic_machine=arm-unknown\n-\t\t\t\tos=mingw32ce\n+\t\t\t\tbasic_os=mingw32ce\n \t\t\t\t;;\n \t\t\tmonitor)\n \t\t\t\tbasic_machine=m68k-rom68k\n-\t\t\t\tos=coff\n+\t\t\t\tbasic_os=coff\n \t\t\t\t;;\n \t\t\tmorphos)\n \t\t\t\tbasic_machine=powerpc-unknown\n-\t\t\t\tos=morphos\n+\t\t\t\tbasic_os=morphos\n \t\t\t\t;;\n \t\t\tmoxiebox)\n \t\t\t\tbasic_machine=moxie-unknown\n-\t\t\t\tos=moxiebox\n+\t\t\t\tbasic_os=moxiebox\n \t\t\t\t;;\n \t\t\tmsdos)\n \t\t\t\tbasic_machine=i386-pc\n-\t\t\t\tos=msdos\n+\t\t\t\tbasic_os=msdos\n \t\t\t\t;;\n \t\t\tmsys)\n \t\t\t\tbasic_machine=i686-pc\n-\t\t\t\tos=msys\n+\t\t\t\tbasic_os=msys\n \t\t\t\t;;\n \t\t\tmvs)\n \t\t\t\tbasic_machine=i370-ibm\n-\t\t\t\tos=mvs\n+\t\t\t\tbasic_os=mvs\n \t\t\t\t;;\n \t\t\tnacl)\n \t\t\t\tbasic_machine=le32-unknown\n-\t\t\t\tos=nacl\n+\t\t\t\tbasic_os=nacl\n \t\t\t\t;;\n \t\t\tncr3000)\n \t\t\t\tbasic_machine=i486-ncr\n-\t\t\t\tos=sysv4\n+\t\t\t\tbasic_os=sysv4\n \t\t\t\t;;\n \t\t\tnetbsd386)\n \t\t\t\tbasic_machine=i386-pc\n-\t\t\t\tos=netbsd\n+\t\t\t\tbasic_os=netbsd\n \t\t\t\t;;\n \t\t\tnetwinder)\n \t\t\t\tbasic_machine=armv4l-rebel\n-\t\t\t\tos=linux\n+\t\t\t\tbasic_os=linux\n \t\t\t\t;;\n \t\t\tnews | news700 | news800 | news900)\n \t\t\t\tbasic_machine=m68k-sony\n-\t\t\t\tos=newsos\n+\t\t\t\tbasic_os=newsos\n \t\t\t\t;;\n \t\t\tnews1000)\n \t\t\t\tbasic_machine=m68030-sony\n-\t\t\t\tos=newsos\n+\t\t\t\tbasic_os=newsos\n \t\t\t\t;;\n \t\t\tnecv70)\n \t\t\t\tbasic_machine=v70-nec\n-\t\t\t\tos=sysv\n+\t\t\t\tbasic_os=sysv\n \t\t\t\t;;\n \t\t\tnh3000)\n \t\t\t\tbasic_machine=m68k-harris\n-\t\t\t\tos=cxux\n+\t\t\t\tbasic_os=cxux\n \t\t\t\t;;\n \t\t\tnh[45]000)\n \t\t\t\tbasic_machine=m88k-harris\n-\t\t\t\tos=cxux\n+\t\t\t\tbasic_os=cxux\n \t\t\t\t;;\n \t\t\tnindy960)\n \t\t\t\tbasic_machine=i960-intel\n-\t\t\t\tos=nindy\n+\t\t\t\tbasic_os=nindy\n \t\t\t\t;;\n \t\t\tmon960)\n \t\t\t\tbasic_machine=i960-intel\n-\t\t\t\tos=mon960\n+\t\t\t\tbasic_os=mon960\n \t\t\t\t;;\n \t\t\tnonstopux)\n \t\t\t\tbasic_machine=mips-compaq\n-\t\t\t\tos=nonstopux\n+\t\t\t\tbasic_os=nonstopux\n \t\t\t\t;;\n \t\t\tos400)\n \t\t\t\tbasic_machine=powerpc-ibm\n-\t\t\t\tos=os400\n+\t\t\t\tbasic_os=os400\n \t\t\t\t;;\n \t\t\tOSE68000 | ose68000)\n \t\t\t\tbasic_machine=m68000-ericsson\n-\t\t\t\tos=ose\n+\t\t\t\tbasic_os=ose\n \t\t\t\t;;\n \t\t\tos68k)\n \t\t\t\tbasic_machine=m68k-none\n-\t\t\t\tos=os68k\n+\t\t\t\tbasic_os=os68k\n \t\t\t\t;;\n \t\t\tparagon)\n \t\t\t\tbasic_machine=i860-intel\n-\t\t\t\tos=osf\n+\t\t\t\tbasic_os=osf\n \t\t\t\t;;\n \t\t\tparisc)\n \t\t\t\tbasic_machine=hppa-unknown\n-\t\t\t\tos=linux\n+\t\t\t\tbasic_os=linux\n+\t\t\t\t;;\n+\t\t\tpsp)\n+\t\t\t\tbasic_machine=mipsallegrexel-sony\n+\t\t\t\tbasic_os=psp\n \t\t\t\t;;\n \t\t\tpw32)\n \t\t\t\tbasic_machine=i586-unknown\n-\t\t\t\tos=pw32\n+\t\t\t\tbasic_os=pw32\n \t\t\t\t;;\n \t\t\trdos | rdos64)\n \t\t\t\tbasic_machine=x86_64-pc\n-\t\t\t\tos=rdos\n+\t\t\t\tbasic_os=rdos\n \t\t\t\t;;\n \t\t\trdos32)\n \t\t\t\tbasic_machine=i386-pc\n-\t\t\t\tos=rdos\n+\t\t\t\tbasic_os=rdos\n \t\t\t\t;;\n \t\t\trom68k)\n \t\t\t\tbasic_machine=m68k-rom68k\n-\t\t\t\tos=coff\n+\t\t\t\tbasic_os=coff\n \t\t\t\t;;\n \t\t\tsa29200)\n \t\t\t\tbasic_machine=a29k-amd\n-\t\t\t\tos=udi\n+\t\t\t\tbasic_os=udi\n \t\t\t\t;;\n \t\t\tsei)\n \t\t\t\tbasic_machine=mips-sei\n-\t\t\t\tos=seiux\n+\t\t\t\tbasic_os=seiux\n \t\t\t\t;;\n \t\t\tsequent)\n \t\t\t\tbasic_machine=i386-sequent\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\tsps7)\n \t\t\t\tbasic_machine=m68k-bull\n-\t\t\t\tos=sysv2\n+\t\t\t\tbasic_os=sysv2\n \t\t\t\t;;\n \t\t\tst2000)\n \t\t\t\tbasic_machine=m68k-tandem\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\tstratus)\n \t\t\t\tbasic_machine=i860-stratus\n-\t\t\t\tos=sysv4\n+\t\t\t\tbasic_os=sysv4\n \t\t\t\t;;\n \t\t\tsun2)\n \t\t\t\tbasic_machine=m68000-sun\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\tsun2os3)\n \t\t\t\tbasic_machine=m68000-sun\n-\t\t\t\tos=sunos3\n+\t\t\t\tbasic_os=sunos3\n \t\t\t\t;;\n \t\t\tsun2os4)\n \t\t\t\tbasic_machine=m68000-sun\n-\t\t\t\tos=sunos4\n+\t\t\t\tbasic_os=sunos4\n \t\t\t\t;;\n \t\t\tsun3)\n \t\t\t\tbasic_machine=m68k-sun\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\tsun3os3)\n \t\t\t\tbasic_machine=m68k-sun\n-\t\t\t\tos=sunos3\n+\t\t\t\tbasic_os=sunos3\n \t\t\t\t;;\n \t\t\tsun3os4)\n \t\t\t\tbasic_machine=m68k-sun\n-\t\t\t\tos=sunos4\n+\t\t\t\tbasic_os=sunos4\n \t\t\t\t;;\n \t\t\tsun4)\n \t\t\t\tbasic_machine=sparc-sun\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\tsun4os3)\n \t\t\t\tbasic_machine=sparc-sun\n-\t\t\t\tos=sunos3\n+\t\t\t\tbasic_os=sunos3\n \t\t\t\t;;\n \t\t\tsun4os4)\n \t\t\t\tbasic_machine=sparc-sun\n-\t\t\t\tos=sunos4\n+\t\t\t\tbasic_os=sunos4\n \t\t\t\t;;\n \t\t\tsun4sol2)\n \t\t\t\tbasic_machine=sparc-sun\n-\t\t\t\tos=solaris2\n+\t\t\t\tbasic_os=solaris2\n \t\t\t\t;;\n \t\t\tsun386 | sun386i | roadrunner)\n \t\t\t\tbasic_machine=i386-sun\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\t\tsv1)\n \t\t\t\tbasic_machine=sv1-cray\n-\t\t\t\tos=unicos\n+\t\t\t\tbasic_os=unicos\n \t\t\t\t;;\n \t\t\tsymmetry)\n \t\t\t\tbasic_machine=i386-sequent\n-\t\t\t\tos=dynix\n+\t\t\t\tbasic_os=dynix\n \t\t\t\t;;\n \t\t\tt3e)\n \t\t\t\tbasic_machine=alphaev5-cray\n-\t\t\t\tos=unicos\n+\t\t\t\tbasic_os=unicos\n \t\t\t\t;;\n \t\t\tt90)\n \t\t\t\tbasic_machine=t90-cray\n-\t\t\t\tos=unicos\n+\t\t\t\tbasic_os=unicos\n \t\t\t\t;;\n \t\t\ttoad1)\n \t\t\t\tbasic_machine=pdp10-xkl\n-\t\t\t\tos=tops20\n+\t\t\t\tbasic_os=tops20\n \t\t\t\t;;\n \t\t\ttpf)\n \t\t\t\tbasic_machine=s390x-ibm\n-\t\t\t\tos=tpf\n+\t\t\t\tbasic_os=tpf\n \t\t\t\t;;\n \t\t\tudi29k)\n \t\t\t\tbasic_machine=a29k-amd\n-\t\t\t\tos=udi\n+\t\t\t\tbasic_os=udi\n \t\t\t\t;;\n \t\t\tultra3)\n \t\t\t\tbasic_machine=a29k-nyu\n-\t\t\t\tos=sym1\n+\t\t\t\tbasic_os=sym1\n \t\t\t\t;;\n \t\t\tv810 | necv810)\n \t\t\t\tbasic_machine=v810-nec\n-\t\t\t\tos=none\n+\t\t\t\tbasic_os=none\n \t\t\t\t;;\n \t\t\tvaxv)\n \t\t\t\tbasic_machine=vax-dec\n-\t\t\t\tos=sysv\n+\t\t\t\tbasic_os=sysv\n \t\t\t\t;;\n \t\t\tvms)\n \t\t\t\tbasic_machine=vax-dec\n-\t\t\t\tos=vms\n+\t\t\t\tbasic_os=vms\n \t\t\t\t;;\n \t\t\tvsta)\n \t\t\t\tbasic_machine=i386-pc\n-\t\t\t\tos=vsta\n+\t\t\t\tbasic_os=vsta\n \t\t\t\t;;\n \t\t\tvxworks960)\n \t\t\t\tbasic_machine=i960-wrs\n-\t\t\t\tos=vxworks\n+\t\t\t\tbasic_os=vxworks\n \t\t\t\t;;\n \t\t\tvxworks68)\n \t\t\t\tbasic_machine=m68k-wrs\n-\t\t\t\tos=vxworks\n+\t\t\t\tbasic_os=vxworks\n \t\t\t\t;;\n \t\t\tvxworks29k)\n \t\t\t\tbasic_machine=a29k-wrs\n-\t\t\t\tos=vxworks\n+\t\t\t\tbasic_os=vxworks\n \t\t\t\t;;\n \t\t\txbox)\n \t\t\t\tbasic_machine=i686-pc\n-\t\t\t\tos=mingw32\n+\t\t\t\tbasic_os=mingw32\n \t\t\t\t;;\n \t\t\tymp)\n \t\t\t\tbasic_machine=ymp-cray\n-\t\t\t\tos=unicos\n+\t\t\t\tbasic_os=unicos\n \t\t\t\t;;\n \t\t\t*)\n \t\t\t\tbasic_machine=$1\n-\t\t\t\tos=\n+\t\t\t\tbasic_os=\n \t\t\t\t;;\n \t\tesac\n \t\t;;\n@@ -683,17 +686,17 @@ case $basic_machine in\n \tbluegene*)\n \t\tcpu=powerpc\n \t\tvendor=ibm\n-\t\tos=cnk\n+\t\tbasic_os=cnk\n \t\t;;\n \tdecsystem10* | dec10*)\n \t\tcpu=pdp10\n \t\tvendor=dec\n-\t\tos=tops10\n+\t\tbasic_os=tops10\n \t\t;;\n \tdecsystem20* | dec20*)\n \t\tcpu=pdp10\n \t\tvendor=dec\n-\t\tos=tops20\n+\t\tbasic_os=tops20\n \t\t;;\n \tdelta | 3300 | motorola-3300 | motorola-delta \\\n \t      | 3300-motorola | delta-motorola)\n@@ -703,7 +706,7 @@ case $basic_machine in\n \tdpx2*)\n \t\tcpu=m68k\n \t\tvendor=bull\n-\t\tos=sysv3\n+\t\tbasic_os=sysv3\n \t\t;;\n \tencore | umax | mmax)\n \t\tcpu=ns32k\n@@ -712,7 +715,7 @@ case $basic_machine in\n \telxsi)\n \t\tcpu=elxsi\n \t\tvendor=elxsi\n-\t\tos=${os:-bsd}\n+\t\tbasic_os=${basic_os:-bsd}\n \t\t;;\n \tfx2800)\n \t\tcpu=i860\n@@ -725,7 +728,7 @@ case $basic_machine in\n \th3050r* | hiux*)\n \t\tcpu=hppa1.1\n \t\tvendor=hitachi\n-\t\tos=hiuxwe2\n+\t\tbasic_os=hiuxwe2\n \t\t;;\n \thp3k9[0-9][0-9] | hp9[0-9][0-9])\n \t\tcpu=hppa1.0\n@@ -766,38 +769,38 @@ case $basic_machine in\n \t\tvendor=hp\n \t\t;;\n \ti*86v32)\n-\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n+\t\tcpu=$(echo \"$1\" | sed -e 's/86.*/86/')\n \t\tvendor=pc\n-\t\tos=sysv32\n+\t\tbasic_os=sysv32\n \t\t;;\n \ti*86v4*)\n-\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n+\t\tcpu=$(echo \"$1\" | sed -e 's/86.*/86/')\n \t\tvendor=pc\n-\t\tos=sysv4\n+\t\tbasic_os=sysv4\n \t\t;;\n \ti*86v)\n-\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n+\t\tcpu=$(echo \"$1\" | sed -e 's/86.*/86/')\n \t\tvendor=pc\n-\t\tos=sysv\n+\t\tbasic_os=sysv\n \t\t;;\n \ti*86sol2)\n-\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n+\t\tcpu=$(echo \"$1\" | sed -e 's/86.*/86/')\n \t\tvendor=pc\n-\t\tos=solaris2\n+\t\tbasic_os=solaris2\n \t\t;;\n \tj90 | j90-cray)\n \t\tcpu=j90\n \t\tvendor=cray\n-\t\tos=${os:-unicos}\n+\t\tbasic_os=${basic_os:-unicos}\n \t\t;;\n \tiris | iris4d)\n \t\tcpu=mips\n \t\tvendor=sgi\n-\t\tcase $os in\n+\t\tcase $basic_os in\n \t\t    irix*)\n \t\t\t;;\n \t\t    *)\n-\t\t\tos=irix4\n+\t\t\tbasic_os=irix4\n \t\t\t;;\n \t\tesac\n \t\t;;\n@@ -808,26 +811,26 @@ case $basic_machine in\n \t*mint | mint[0-9]* | *MiNT | *MiNT[0-9]*)\n \t\tcpu=m68k\n \t\tvendor=atari\n-\t\tos=mint\n+\t\tbasic_os=mint\n \t\t;;\n \tnews-3600 | risc-news)\n \t\tcpu=mips\n \t\tvendor=sony\n-\t\tos=newsos\n+\t\tbasic_os=newsos\n \t\t;;\n \tnext | m*-next)\n \t\tcpu=m68k\n \t\tvendor=next\n-\t\tcase $os in\n+\t\tcase $basic_os in\n \t\t    openstep*)\n \t\t        ;;\n \t\t    nextstep*)\n \t\t\t;;\n \t\t    ns2*)\n-\t\t      os=nextstep2\n+\t\t      basic_os=nextstep2\n \t\t\t;;\n \t\t    *)\n-\t\t      os=nextstep3\n+\t\t      basic_os=nextstep3\n \t\t\t;;\n \t\tesac\n \t\t;;\n@@ -838,12 +841,12 @@ case $basic_machine in\n \top50n-* | op60c-*)\n \t\tcpu=hppa1.1\n \t\tvendor=oki\n-\t\tos=proelf\n+\t\tbasic_os=proelf\n \t\t;;\n \tpa-hitachi)\n \t\tcpu=hppa1.1\n \t\tvendor=hitachi\n-\t\tos=hiuxwe2\n+\t\tbasic_os=hiuxwe2\n \t\t;;\n \tpbd)\n \t\tcpu=sparc\n@@ -880,12 +883,12 @@ case $basic_machine in\n \tsde)\n \t\tcpu=mipsisa32\n \t\tvendor=sde\n-\t\tos=${os:-elf}\n+\t\tbasic_os=${basic_os:-elf}\n \t\t;;\n \tsimso-wrs)\n \t\tcpu=sparclite\n \t\tvendor=wrs\n-\t\tos=vxworks\n+\t\tbasic_os=vxworks\n \t\t;;\n \ttower | tower-32)\n \t\tcpu=m68k\n@@ -902,7 +905,7 @@ case $basic_machine in\n \tw89k-*)\n \t\tcpu=hppa1.1\n \t\tvendor=winbond\n-\t\tos=proelf\n+\t\tbasic_os=proelf\n \t\t;;\n \tnone)\n \t\tcpu=none\n@@ -914,7 +917,7 @@ case $basic_machine in\n \t\t;;\n \tleon-*|leon[3-9]-*)\n \t\tcpu=sparc\n-\t\tvendor=`echo \"$basic_machine\" | sed 's/-.*//'`\n+\t\tvendor=$(echo \"$basic_machine\" | sed 's/-.*//')\n \t\t;;\n \n \t*-*)\n@@ -955,11 +958,11 @@ case $cpu-$vendor in\n \t# some cases the only manufacturer, in others, it is the most popular.\n \tcraynv-unknown)\n \t\tvendor=cray\n-\t\tos=${os:-unicosmp}\n+\t\tbasic_os=${basic_os:-unicosmp}\n \t\t;;\n \tc90-unknown | c90-cray)\n \t\tvendor=cray\n-\t\tos=${os:-unicos}\n+\t\tbasic_os=${Basic_os:-unicos}\n \t\t;;\n \tfx80-unknown)\n \t\tvendor=alliant\n@@ -1003,7 +1006,7 @@ case $cpu-$vendor in\n \tdpx20-unknown | dpx20-bull)\n \t\tcpu=rs6000\n \t\tvendor=bull\n-\t\tos=${os:-bosx}\n+\t\tbasic_os=${basic_os:-bosx}\n \t\t;;\n \n \t# Here we normalize CPU types irrespective of the vendor\n@@ -1012,7 +1015,7 @@ case $cpu-$vendor in\n \t\t;;\n \tblackfin-*)\n \t\tcpu=bfin\n-\t\tos=linux\n+\t\tbasic_os=linux\n \t\t;;\n \tc54x-*)\n \t\tcpu=tic54x\n@@ -1025,7 +1028,7 @@ case $cpu-$vendor in\n \t\t;;\n \te500v[12]-*)\n \t\tcpu=powerpc\n-\t\tos=$os\"spe\"\n+\t\tbasic_os=${basic_os}\"spe\"\n \t\t;;\n \tmips3*-*)\n \t\tcpu=mips64\n@@ -1035,7 +1038,7 @@ case $cpu-$vendor in\n \t\t;;\n \tm68knommu-*)\n \t\tcpu=m68k\n-\t\tos=linux\n+\t\tbasic_os=linux\n \t\t;;\n \tm9s12z-* | m68hcs12z-* | hcs12z-* | s12z-*)\n \t\tcpu=s12z\n@@ -1045,7 +1048,7 @@ case $cpu-$vendor in\n \t\t;;\n \tparisc-*)\n \t\tcpu=hppa\n-\t\tos=linux\n+\t\tbasic_os=linux\n \t\t;;\n \tpentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)\n \t\tcpu=i586\n@@ -1081,7 +1084,7 @@ case $cpu-$vendor in\n \t\tcpu=mipsisa64sb1el\n \t\t;;\n \tsh5e[lb]-*)\n-\t\tcpu=`echo \"$cpu\" | sed 's/^\\(sh.\\)e\\(.\\)$/\\1\\2e/'`\n+\t\tcpu=$(echo \"$cpu\" | sed 's/^\\(sh.\\)e\\(.\\)$/\\1\\2e/')\n \t\t;;\n \tspur-*)\n \t\tcpu=spur\n@@ -1099,13 +1102,16 @@ case $cpu-$vendor in\n \t\tcpu=x86_64\n \t\t;;\n \txscale-* | xscalee[bl]-*)\n-\t\tcpu=`echo \"$cpu\" | sed 's/^xscale/arm/'`\n+\t\tcpu=$(echo \"$cpu\" | sed 's/^xscale/arm/')\n+\t\t;;\n+\tarm64-*)\n+\t\tcpu=aarch64\n \t\t;;\n \n \t# Recognize the canonical CPU Types that limit and/or modify the\n \t# company names they are paired with.\n \tcr16-*)\n-\t\tos=${os:-elf}\n+\t\tbasic_os=${basic_os:-elf}\n \t\t;;\n \tcrisv32-* | etraxfs*-*)\n \t\tcpu=crisv32\n@@ -1116,7 +1122,7 @@ case $cpu-$vendor in\n \t\tvendor=axis\n \t\t;;\n \tcrx-*)\n-\t\tos=${os:-elf}\n+\t\tbasic_os=${basic_os:-elf}\n \t\t;;\n \tneo-tandem)\n \t\tcpu=neo\n@@ -1138,16 +1144,12 @@ case $cpu-$vendor in\n \t\tcpu=nsx\n \t\tvendor=tandem\n \t\t;;\n-\ts390-*)\n-\t\tcpu=s390\n-\t\tvendor=ibm\n-\t\t;;\n-\ts390x-*)\n-\t\tcpu=s390x\n-\t\tvendor=ibm\n+\tmipsallegrexel-sony)\n+\t\tcpu=mipsallegrexel\n+\t\tvendor=sony\n \t\t;;\n \ttile*-*)\n-\t\tos=${os:-linux-gnu}\n+\t\tbasic_os=${basic_os:-linux-gnu}\n \t\t;;\n \n \t*)\n@@ -1163,8 +1165,8 @@ case $cpu-$vendor in\n \t\t\t| alphapca5[67] | alpha64pca5[67] \\\n \t\t\t| am33_2.0 \\\n \t\t\t| amdgcn \\\n-\t\t\t| arc | arceb \\\n-\t\t\t| arm  | arm[lb]e | arme[lb] | armv* \\\n+\t\t\t| arc | arceb | arc64 \\\n+\t\t\t| arm | arm[lb]e | arme[lb] | armv* \\\n \t\t\t| avr | avr32 \\\n \t\t\t| asmjs \\\n \t\t\t| ba \\\n@@ -1183,6 +1185,7 @@ case $cpu-$vendor in\n \t\t\t| k1om \\\n \t\t\t| le32 | le64 \\\n \t\t\t| lm32 \\\n+\t\t\t| loongarch32 | loongarch64 | loongarchx32 \\\n \t\t\t| m32c | m32r | m32rle \\\n \t\t\t| m5200 | m68000 | m680[012346]0 | m68360 | m683?2 | m68k \\\n \t\t\t| m6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x \\\n@@ -1201,9 +1204,13 @@ case $cpu-$vendor in\n \t\t\t| mips64vr5900 | mips64vr5900el \\\n \t\t\t| mipsisa32 | mipsisa32el \\\n \t\t\t| mipsisa32r2 | mipsisa32r2el \\\n+\t\t\t| mipsisa32r3 | mipsisa32r3el \\\n+\t\t\t| mipsisa32r5 | mipsisa32r5el \\\n \t\t\t| mipsisa32r6 | mipsisa32r6el \\\n \t\t\t| mipsisa64 | mipsisa64el \\\n \t\t\t| mipsisa64r2 | mipsisa64r2el \\\n+\t\t\t| mipsisa64r3 | mipsisa64r3el \\\n+\t\t\t| mipsisa64r5 | mipsisa64r5el \\\n \t\t\t| mipsisa64r6 | mipsisa64r6el \\\n \t\t\t| mipsisa64sb1 | mipsisa64sb1el \\\n \t\t\t| mipsisa64sr71k | mipsisa64sr71kel \\\n@@ -1227,8 +1234,9 @@ case $cpu-$vendor in\n \t\t\t| powerpc | powerpc64 | powerpc64le | powerpcle | powerpcspe \\\n \t\t\t| pru \\\n \t\t\t| pyramid \\\n-\t\t\t| riscv | riscv32 | riscv64 \\\n+\t\t\t| riscv | riscv32 | riscv32be | riscv64 | riscv64be \\\n \t\t\t| rl78 | romp | rs6000 | rx \\\n+\t\t\t| s390 | s390x \\\n \t\t\t| score \\\n \t\t\t| sh | shl \\\n \t\t\t| sh[1234] | sh[24]a | sh[24]ae[lb] | sh[23]e | she[lb] | sh[lb]e \\\n@@ -1238,6 +1246,7 @@ case $cpu-$vendor in\n \t\t\t| sparcv8 | sparcv9 | sparcv9b | sparcv9v | sv1 | sx* \\\n \t\t\t| spu \\\n \t\t\t| tahoe \\\n+\t\t\t| thumbv7* \\\n \t\t\t| tic30 | tic4x | tic54x | tic55x | tic6x | tic80 \\\n \t\t\t| tron \\\n \t\t\t| ubicom32 \\\n@@ -1275,8 +1284,47 @@ esac\n \n # Decode manufacturer-specific aliases for certain operating systems.\n \n-if [ x$os != x ]\n+if test x$basic_os != x\n then\n+\n+# First recognize some ad-hoc caes, or perhaps split kernel-os, or else just\n+# set os.\n+case $basic_os in\n+\tgnu/linux*)\n+\t\tkernel=linux\n+\t\tos=$(echo $basic_os | sed -e 's|gnu/linux|gnu|')\n+\t\t;;\n+\tos2-emx)\n+\t\tkernel=os2\n+\t\tos=$(echo $basic_os | sed -e 's|os2-emx|emx|')\n+\t\t;;\n+\tnto-qnx*)\n+\t\tkernel=nto\n+\t\tos=$(echo $basic_os | sed -e 's|nto-qnx|qnx|')\n+\t\t;;\n+\t*-*)\n+\t\t# shellcheck disable=SC2162\n+\t\tIFS=\"-\" read kernel os <<EOF\n+$basic_os\n+EOF\n+\t\t;;\n+\t# Default OS when just kernel was specified\n+\tnto*)\n+\t\tkernel=nto\n+\t\tos=$(echo $basic_os | sed -e 's|nto|qnx|')\n+\t\t;;\n+\tlinux*)\n+\t\tkernel=linux\n+\t\tos=$(echo $basic_os | sed -e 's|linux|gnu|')\n+\t\t;;\n+\t*)\n+\t\tkernel=\n+\t\tos=$basic_os\n+\t\t;;\n+esac\n+\n+# Now, normalize the OS (knowing we just have one component, it's not a kernel,\n+# etc.)\n case $os in\n \t# First match some system type aliases that might get confused\n \t# with valid system types.\n@@ -1288,17 +1336,14 @@ case $os in\n \t\tos=cnk\n \t\t;;\n \tsolaris1 | solaris1.*)\n-\t\tos=`echo $os | sed -e 's|solaris1|sunos4|'`\n+\t\tos=$(echo $os | sed -e 's|solaris1|sunos4|')\n \t\t;;\n \tsolaris)\n \t\tos=solaris2\n \t\t;;\n \tunixware*)\n \t\tos=sysv4.2uw\n \t\t;;\n-\tgnu/linux*)\n-\t\tos=`echo $os | sed -e 's|gnu/linux|linux-gnu|'`\n-\t\t;;\n \t# es1800 is here to avoid being matched by es* (a different OS)\n \tes1800*)\n \t\tos=ose\n@@ -1320,12 +1365,9 @@ case $os in\n \t\tos=sco3.2v4\n \t\t;;\n \tsco3.2.[4-9]*)\n-\t\tos=`echo $os | sed -e 's/sco3.2./sco3.2v/'`\n+\t\tos=$(echo $os | sed -e 's/sco3.2./sco3.2v/')\n \t\t;;\n-\tsco3.2v[4-9]* | sco5v6*)\n-\t\t# Don't forget version if it is 3.2v4 or newer.\n-\t\t;;\n-\tscout)\n+\tsco*v* | scout)\n \t\t# Don't match below\n \t\t;;\n \tsco*)\n@@ -1334,79 +1376,26 @@ case $os in\n \tpsos*)\n \t\tos=psos\n \t\t;;\n-\t# Now accept the basic system types.\n-\t# The portable systems comes first.\n-\t# Each alternative MUST end in a * to match a version number.\n-\t# sysv* is not here because it comes later, after sysvr4.\n-\tgnu* | bsd* | mach* | minix* | genix* | ultrix* | irix* \\\n-\t     | *vms* | esix* | aix* | cnk* | sunos | sunos[34]*\\\n-\t     | hpux* | unos* | osf* | luna* | dgux* | auroraux* | solaris* \\\n-\t     | sym* | kopensolaris* | plan9* \\\n-\t     | amigaos* | amigados* | msdos* | newsos* | unicos* | aof* \\\n-\t     | aos* | aros* | cloudabi* | sortix* \\\n-\t     | nindy* | vxsim* | vxworks* | ebmon* | hms* | mvs* \\\n-\t     | clix* | riscos* | uniplus* | iris* | isc* | rtu* | xenix* \\\n-\t     | knetbsd* | mirbsd* | netbsd* \\\n-\t     | bitrig* | openbsd* | solidbsd* | libertybsd* | os108* \\\n-\t     | ekkobsd* | kfreebsd* | freebsd* | riscix* | lynxos* \\\n-\t     | bosx* | nextstep* | cxux* | aout* | elf* | oabi* \\\n-\t     | ptx* | coff* | ecoff* | winnt* | domain* | vsta* \\\n-\t     | udi* | eabi* | lites* | ieee* | go32* | aux* | hcos* \\\n-\t     | chorusrdb* | cegcc* | glidix* \\\n-\t     | cygwin* | msys* | pe* | moss* | proelf* | rtems* \\\n-\t     | midipix* | mingw32* | mingw64* | linux-gnu* | linux-android* \\\n-\t     | linux-newlib* | linux-musl* | linux-uclibc* \\\n-\t     | uxpv* | beos* | mpeix* | udk* | moxiebox* \\\n-\t     | interix* | uwin* | mks* | rhapsody* | darwin* \\\n-\t     | openstep* | oskit* | conix* | pw32* | nonstopux* \\\n-\t     | storm-chaos* | tops10* | tenex* | tops20* | its* \\\n-\t     | os2* | vos* | palmos* | uclinux* | nucleus* \\\n-\t     | morphos* | superux* | rtmk* | windiss* \\\n-\t     | powermax* | dnix* | nx6 | nx7 | sei* | dragonfly* \\\n-\t     | skyos* | haiku* | rdos* | toppers* | drops* | es* \\\n-\t     | onefs* | tirtos* | phoenix* | fuchsia* | redox* | bme* \\\n-\t     | midnightbsd* | amdhsa* | unleashed* | emscripten* | wasi* \\\n-\t     | nsk* | powerunix)\n-\t# Remember, each alternative MUST END IN *, to match a version number.\n-\t\t;;\n \tqnx*)\n-\t\tcase $cpu in\n-\t\t    x86 | i*86)\n-\t\t\t;;\n-\t\t    *)\n-\t\t\tos=nto-$os\n-\t\t\t;;\n-\t\tesac\n+\t\tos=qnx\n \t\t;;\n \thiux*)\n \t\tos=hiuxwe2\n \t\t;;\n-\tnto-qnx*)\n-\t\t;;\n-\tnto*)\n-\t\tos=`echo $os | sed -e 's|nto|nto-qnx|'`\n-\t\t;;\n-\tsim | xray | os68k* | v88r* \\\n-\t    | windows* | osx | abug | netware* | os9* \\\n-\t    | macos* | mpw* | magic* | mmixware* | mon960* | lnews*)\n-\t\t;;\n-\tlinux-dietlibc)\n-\t\tos=linux-dietlibc\n-\t\t;;\n-\tlinux*)\n-\t\tos=`echo $os | sed -e 's|linux|linux-gnu|'`\n-\t\t;;\n \tlynx*178)\n \t\tos=lynxos178\n \t\t;;\n \tlynx*5)\n \t\tos=lynxos5\n \t\t;;\n+\tlynxos*)\n+\t\t# don't get caught up in next wildcard\n+\t\t;;\n \tlynx*)\n \t\tos=lynxos\n \t\t;;\n-\tmac*)\n-\t\tos=`echo \"$os\" | sed -e 's|mac|macos|'`\n+\tmac[0-9]*)\n+\t\tos=$(echo \"$os\" | sed -e 's|mac|macos|')\n \t\t;;\n \topened*)\n \t\tos=openedition\n@@ -1415,10 +1404,10 @@ case $os in\n \t\tos=os400\n \t\t;;\n \tsunos5*)\n-\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n+\t\tos=$(echo \"$os\" | sed -e 's|sunos5|solaris2|')\n \t\t;;\n \tsunos6*)\n-\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n+\t\tos=$(echo \"$os\" | sed -e 's|sunos6|solaris3|')\n \t\t;;\n \twince*)\n \t\tos=wince\n@@ -1452,7 +1441,7 @@ case $os in\n \t\t;;\n \t# Preserve the version number of sinix5.\n \tsinix5.*)\n-\t\tos=`echo $os | sed -e 's|sinix|sysv|'`\n+\t\tos=$(echo $os | sed -e 's|sinix|sysv|')\n \t\t;;\n \tsinix*)\n \t\tos=sysv4\n@@ -1475,18 +1464,12 @@ case $os in\n \tsysvr4)\n \t\tos=sysv4\n \t\t;;\n-\t# This must come after sysvr4.\n-\tsysv*)\n-\t\t;;\n \tose*)\n \t\tos=ose\n \t\t;;\n \t*mint | mint[0-9]* | *MiNT | MiNT[0-9]*)\n \t\tos=mint\n \t\t;;\n-\tzvmoe)\n-\t\tos=zvmoe\n-\t\t;;\n \tdicos*)\n \t\tos=dicos\n \t\t;;\n@@ -1503,19 +1486,11 @@ case $os in\n \t\t\t;;\n \t\tesac\n \t\t;;\n-\tnacl*)\n-\t\t;;\n-\tios)\n-\t\t;;\n-\tnone)\n-\t\t;;\n-\t*-eabi)\n-\t\t;;\n \t*)\n-\t\techo Invalid configuration \\`\"$1\"\\': system \\`\"$os\"\\' not recognized 1>&2\n-\t\texit 1\n+\t\t# No normalization, but not necessarily accepted, that comes below.\n \t\t;;\n esac\n+\n else\n \n # Here we handle the default operating systems that come with various machines.\n@@ -1528,6 +1503,7 @@ else\n # will signal an error saying that MANUFACTURER isn't an operating\n # system, and we'll never get to this point.\n \n+kernel=\n case $cpu-$vendor in\n \tscore-*)\n \t\tos=elf\n@@ -1539,7 +1515,8 @@ case $cpu-$vendor in\n \t\tos=riscix1.2\n \t\t;;\n \tarm*-rebel)\n-\t\tos=linux\n+\t\tkernel=linux\n+\t\tos=gnu\n \t\t;;\n \tarm*-semi)\n \t\tos=aout\n@@ -1705,84 +1682,178 @@ case $cpu-$vendor in\n \t\tos=none\n \t\t;;\n esac\n+\n fi\n \n+# Now, validate our (potentially fixed-up) OS.\n+case $os in\n+\t# Sometimes we do \"kernel-libc\", so those need to count as OSes.\n+\tmusl* | newlib* | uclibc*)\n+\t\t;;\n+\t# Likewise for \"kernel-abi\"\n+\teabi* | gnueabi*)\n+\t\t;;\n+\t# VxWorks passes extra cpu info in the 4th filed.\n+\tsimlinux | simwindows | spe)\n+\t\t;;\n+\t# Now accept the basic system types.\n+\t# The portable systems comes first.\n+\t# Each alternative MUST end in a * to match a version number.\n+\tgnu* | android* | bsd* | mach* | minix* | genix* | ultrix* | irix* \\\n+\t     | *vms* | esix* | aix* | cnk* | sunos | sunos[34]* \\\n+\t     | hpux* | unos* | osf* | luna* | dgux* | auroraux* | solaris* \\\n+\t     | sym* |  plan9* | psp* | sim* | xray* | os68k* | v88r* \\\n+\t     | hiux* | abug | nacl* | netware* | windows* \\\n+\t     | os9* | macos* | osx* | ios* \\\n+\t     | mpw* | magic* | mmixware* | mon960* | lnews* \\\n+\t     | amigaos* | amigados* | msdos* | newsos* | unicos* | aof* \\\n+\t     | aos* | aros* | cloudabi* | sortix* | twizzler* \\\n+\t     | nindy* | vxsim* | vxworks* | ebmon* | hms* | mvs* \\\n+\t     | clix* | riscos* | uniplus* | iris* | isc* | rtu* | xenix* \\\n+\t     | mirbsd* | netbsd* | dicos* | openedition* | ose* \\\n+\t     | bitrig* | openbsd* | secbsd* | solidbsd* | libertybsd* | os108* \\\n+\t     | ekkobsd* | freebsd* | riscix* | lynxos* | os400* \\\n+\t     | bosx* | nextstep* | cxux* | aout* | elf* | oabi* \\\n+\t     | ptx* | coff* | ecoff* | winnt* | domain* | vsta* \\\n+\t     | udi* | lites* | ieee* | go32* | aux* | hcos* \\\n+\t     | chorusrdb* | cegcc* | glidix* | serenity* \\\n+\t     | cygwin* | msys* | pe* | moss* | proelf* | rtems* \\\n+\t     | midipix* | mingw32* | mingw64* | mint* \\\n+\t     | uxpv* | beos* | mpeix* | udk* | moxiebox* \\\n+\t     | interix* | uwin* | mks* | rhapsody* | darwin* \\\n+\t     | openstep* | oskit* | conix* | pw32* | nonstopux* \\\n+\t     | storm-chaos* | tops10* | tenex* | tops20* | its* \\\n+\t     | os2* | vos* | palmos* | uclinux* | nucleus* | morphos* \\\n+\t     | scout* | superux* | sysv* | rtmk* | tpf* | windiss* \\\n+\t     | powermax* | dnix* | nx6 | nx7 | sei* | dragonfly* \\\n+\t     | skyos* | haiku* | rdos* | toppers* | drops* | es* \\\n+\t     | onefs* | tirtos* | phoenix* | fuchsia* | redox* | bme* \\\n+\t     | midnightbsd* | amdhsa* | unleashed* | emscripten* | wasi* \\\n+\t     | nsk* | powerunix* | genode* | zvmoe* | qnx* | emx*)\n+\t\t;;\n+\t# This one is extra strict with allowed versions\n+\tsco3.2v2 | sco3.2v[4-9]* | sco5v6*)\n+\t\t# Don't forget version if it is 3.2v4 or newer.\n+\t\t;;\n+\tnone)\n+\t\t;;\n+\t*)\n+\t\techo Invalid configuration \\`\"$1\"\\': OS \\`\"$os\"\\' not recognized 1>&2\n+\t\texit 1\n+\t\t;;\n+esac\n+\n+# As a final step for OS-related things, validate the OS-kernel combination\n+# (given a valid OS), if there is a kernel.\n+case $kernel-$os in\n+\tlinux-gnu* | linux-dietlibc* | linux-android* | linux-newlib* | linux-musl* | linux-uclibc* )\n+\t\t;;\n+\tuclinux-uclibc* )\n+\t\t;;\n+\t-dietlibc* | -newlib* | -musl* | -uclibc* )\n+\t\t# These are just libc implementations, not actual OSes, and thus\n+\t\t# require a kernel.\n+\t\techo \"Invalid configuration \\`$1': libc \\`$os' needs explicit kernel.\" 1>&2\n+\t\texit 1\n+\t\t;;\n+\tkfreebsd*-gnu* | kopensolaris*-gnu*)\n+\t\t;;\n+\tvxworks-simlinux | vxworks-simwindows | vxworks-spe)\n+\t\t;;\n+\tnto-qnx*)\n+\t\t;;\n+\tos2-emx)\n+\t\t;;\n+\t*-eabi* | *-gnueabi*)\n+\t\t;;\n+\t-*)\n+\t\t# Blank kernel with real OS is always fine.\n+\t\t;;\n+\t*-*)\n+\t\techo \"Invalid configuration \\`$1': Kernel \\`$kernel' not known to work with OS \\`$os'.\" 1>&2\n+\t\texit 1\n+\t\t;;\n+esac\n+\n # Here we handle the case where we know the os, and the CPU type, but not the\n # manufacturer.  We pick the logical manufacturer.\n case $vendor in\n \tunknown)\n-\t\tcase $os in\n-\t\t\triscix*)\n+\t\tcase $cpu-$os in\n+\t\t\t*-riscix*)\n \t\t\t\tvendor=acorn\n \t\t\t\t;;\n-\t\t\tsunos*)\n+\t\t\t*-sunos*)\n \t\t\t\tvendor=sun\n \t\t\t\t;;\n-\t\t\tcnk*|-aix*)\n+\t\t\t*-cnk* | *-aix*)\n \t\t\t\tvendor=ibm\n \t\t\t\t;;\n-\t\t\tbeos*)\n+\t\t\t*-beos*)\n \t\t\t\tvendor=be\n \t\t\t\t;;\n-\t\t\thpux*)\n+\t\t\t*-hpux*)\n \t\t\t\tvendor=hp\n \t\t\t\t;;\n-\t\t\tmpeix*)\n+\t\t\t*-mpeix*)\n \t\t\t\tvendor=hp\n \t\t\t\t;;\n-\t\t\thiux*)\n+\t\t\t*-hiux*)\n \t\t\t\tvendor=hitachi\n \t\t\t\t;;\n-\t\t\tunos*)\n+\t\t\t*-unos*)\n \t\t\t\tvendor=crds\n \t\t\t\t;;\n-\t\t\tdgux*)\n+\t\t\t*-dgux*)\n \t\t\t\tvendor=dg\n \t\t\t\t;;\n-\t\t\tluna*)\n+\t\t\t*-luna*)\n \t\t\t\tvendor=omron\n \t\t\t\t;;\n-\t\t\tgenix*)\n+\t\t\t*-genix*)\n \t\t\t\tvendor=ns\n \t\t\t\t;;\n-\t\t\tclix*)\n+\t\t\t*-clix*)\n \t\t\t\tvendor=intergraph\n \t\t\t\t;;\n-\t\t\tmvs* | opened*)\n+\t\t\t*-mvs* | *-opened*)\n+\t\t\t\tvendor=ibm\n+\t\t\t\t;;\n+\t\t\t*-os400*)\n \t\t\t\tvendor=ibm\n \t\t\t\t;;\n-\t\t\tos400*)\n+\t\t\ts390-* | s390x-*)\n \t\t\t\tvendor=ibm\n \t\t\t\t;;\n-\t\t\tptx*)\n+\t\t\t*-ptx*)\n \t\t\t\tvendor=sequent\n \t\t\t\t;;\n-\t\t\ttpf*)\n+\t\t\t*-tpf*)\n \t\t\t\tvendor=ibm\n \t\t\t\t;;\n-\t\t\tvxsim* | vxworks* | windiss*)\n+\t\t\t*-vxsim* | *-vxworks* | *-windiss*)\n \t\t\t\tvendor=wrs\n \t\t\t\t;;\n-\t\t\taux*)\n+\t\t\t*-aux*)\n \t\t\t\tvendor=apple\n \t\t\t\t;;\n-\t\t\thms*)\n+\t\t\t*-hms*)\n \t\t\t\tvendor=hitachi\n \t\t\t\t;;\n-\t\t\tmpw* | macos*)\n+\t\t\t*-mpw* | *-macos*)\n \t\t\t\tvendor=apple\n \t\t\t\t;;\n-\t\t\t*mint | mint[0-9]* | *MiNT | MiNT[0-9]*)\n+\t\t\t*-*mint | *-mint[0-9]* | *-*MiNT | *-MiNT[0-9]*)\n \t\t\t\tvendor=atari\n \t\t\t\t;;\n-\t\t\tvos*)\n+\t\t\t*-vos*)\n \t\t\t\tvendor=stratus\n \t\t\t\t;;\n \t\tesac\n \t\t;;\n esac\n \n-echo \"$cpu-$vendor-$os\"\n+echo \"$cpu-$vendor-${kernel:+$kernel-}$os\"\n exit\n \n # Local variables:"
      },
      {
        "sha": "34a030fab7d1f3b9ba4b177bf175bbfd06b9360a",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 29,
        "deletions": 15,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,17 +1,23 @@\n define int_vars\n #Set defaults for vars which may be overridden per-package\n-$(1)_cc=$($($(1)_type)_CC)\n-$(1)_cxx=$($($(1)_type)_CXX)\n-$(1)_objc=$($($(1)_type)_OBJC)\n-$(1)_objcxx=$($($(1)_type)_OBJCXX)\n-$(1)_ar=$($($(1)_type)_AR)\n-$(1)_ranlib=$($($(1)_type)_RANLIB)\n-$(1)_libtool=$($($(1)_type)_LIBTOOL)\n-$(1)_nm=$($($(1)_type)_NM)\n-$(1)_cflags=$($($(1)_type)_CFLAGS) $($($(1)_type)_$(release_type)_CFLAGS)\n-$(1)_cxxflags=$($($(1)_type)_CXXFLAGS) $($($(1)_type)_$(release_type)_CXXFLAGS)\n-$(1)_ldflags=$($($(1)_type)_LDFLAGS) $($($(1)_type)_$(release_type)_LDFLAGS) -L$($($(1)_type)_prefix)/lib\n-$(1)_cppflags=$($($(1)_type)_CPPFLAGS) $($($(1)_type)_$(release_type)_CPPFLAGS) -I$($($(1)_type)_prefix)/include\n+$(1)_cc=$$($$($(1)_type)_CC)\n+$(1)_cxx=$$($$($(1)_type)_CXX)\n+$(1)_objc=$$($$($(1)_type)_OBJC)\n+$(1)_objcxx=$$($$($(1)_type)_OBJCXX)\n+$(1)_ar=$$($$($(1)_type)_AR)\n+$(1)_ranlib=$$($$($(1)_type)_RANLIB)\n+$(1)_libtool=$$($$($(1)_type)_LIBTOOL)\n+$(1)_nm=$$($$($(1)_type)_NM)\n+$(1)_cflags=$$($$($(1)_type)_CFLAGS) \\\n+            $$($$($(1)_type)_$$(release_type)_CFLAGS)\n+$(1)_cxxflags=$$($$($(1)_type)_CXXFLAGS) \\\n+              $$($$($(1)_type)_$$(release_type)_CXXFLAGS)\n+$(1)_ldflags=$$($$($(1)_type)_LDFLAGS) \\\n+             $$($$($(1)_type)_$$(release_type)_LDFLAGS) \\\n+             -L$$($($(1)_type)_prefix)/lib\n+$(1)_cppflags=$$($$($(1)_type)_CPPFLAGS) \\\n+              $$($$($(1)_type)_$$(release_type)_CPPFLAGS) \\\n+              -I$$($$($(1)_type)_prefix)/include\n $(1)_recipe_hash:=\n endef\n \n@@ -43,7 +49,7 @@ define int_get_build_id\n $(eval $(1)_dependencies += $($(1)_$(host_arch)_$(host_os)_dependencies) $($(1)_$(host_os)_dependencies))\n $(eval $(1)_all_dependencies:=$(call int_get_all_dependencies,$(1),$($($(1)_type)_native_toolchain) $($($(1)_type)_native_binutils) $($(1)_dependencies)))\n $(foreach dep,$($(1)_all_dependencies),$(eval $(1)_build_id_deps+=$(dep)-$($(dep)_version)-$($(dep)_recipe_hash)))\n-$(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash)-$(release_type) $($(1)_build_id_deps) $($($(1)_type)_id_string))\n+$(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash)-$(release_type) $($(1)_build_id_deps) $($($(1)_type)_id))\n $(eval $(1)_build_id:=$(shell echo -n \"$($(1)_build_id_long)\" | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH)))\n final_build_id_long+=$($(package)_build_id_long)\n \n@@ -134,7 +140,13 @@ $(1)_config_env+=CMAKE_MODULE_PATH=$($($(1)_type)_prefix)/lib/cmake\n $(1)_config_env+=PATH=$(build_prefix)/bin:$(PATH)\n $(1)_build_env+=PATH=$(build_prefix)/bin:$(PATH)\n $(1)_stage_env+=PATH=$(build_prefix)/bin:$(PATH)\n-$(1)_autoconf=./configure --host=$($($(1)_type)_host) --prefix=$($($(1)_type)_prefix) $$($(1)_config_opts) CC=\"$$($(1)_cc)\" CXX=\"$$($(1)_cxx)\"\n+\n+# Setting a --build type that differs from --host will explicitly enable\n+# cross-compilation mode. Note that --build defaults to the output of\n+# config.guess, which is what we set it too here. This also quells autoconf\n+# warnings, \"If you wanted to set the --build type, don't use --host.\",\n+# when using versions older than 2.70.\n+$(1)_autoconf=./configure --build=$(BUILD) --host=$($($(1)_type)_host) --prefix=$($($(1)_type)_prefix) $$($(1)_config_opts) CC=\"$$($(1)_cc)\" CXX=\"$$($(1)_cxx)\"\n ifneq ($($(1)_nm),)\n $(1)_autoconf += NM=\"$$($(1)_nm)\"\n endif\n@@ -163,7 +175,9 @@ $(1)_cmake=env CC=\"$$($(1)_cc)\" \\\n                CXXFLAGS=\"$$($(1)_cppflags) $$($(1)_cxxflags)\" \\\n                LDFLAGS=\"$$($(1)_ldflags)\" \\\n              cmake -DCMAKE_INSTALL_PREFIX:PATH=\"$$($($(1)_type)_prefix)\"\n-ifneq ($($(1)_type),build)\n+ifeq ($($(1)_type),build)\n+$(1)_cmake += -DCMAKE_INSTALL_RPATH:PATH=\"$$($($(1)_type)_prefix)/lib\"\n+else\n ifneq ($(host),$(build))\n $(1)_cmake += -DCMAKE_SYSTEM_NAME=$($(host_os)_cmake_system)\n $(1)_cmake += -DCMAKE_C_COMPILER_TARGET=$(host)"
      },
      {
        "sha": "ac69ca7ee1fa2c0aa19dfd01ea76201caa70203a",
        "filename": "depends/gen_id",
        "status": "added",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/gen_id",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/gen_id",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/gen_id?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,74 @@\n+#!/usr/bin/env bash\n+\n+# Usage: env [ CC=... ] [ CXX=... ] [ AR=... ] [ RANLIB=... ] [ STRIP=... ] \\\n+#            [ DEBUG=... ] ./build-id [ID_SALT]...\n+#\n+# Prints to stdout a SHA256 hash representing the current toolset, used by\n+# depends/Makefile as a build id for caching purposes (detecting when the\n+# toolset has changed and the cache needs to be invalidated).\n+#\n+# If the DEBUG environment variable is non-empty and the system has `tee`\n+# available in its $PATH, the pre-image to the SHA256 hash will be printed to\n+# stderr. This is to help developers debug caching issues in depends.\n+\n+# This script explicitly does not `set -e` because id determination is mostly\n+# opportunistic: it is fine that things fail, as long as they fail consistently.\n+\n+# Command variables (CC/CXX/AR) which can be blank are invoked with `bash -c`,\n+# because the \"command not found\" error message printed by shells often include\n+# the line number, like so:\n+#\n+#     ./depends/gen_id: line 43: --version: command not found\n+#\n+# By invoking with `bash -c`, we ensure that the line number is always 1\n+\n+(\n+    # Redirect stderr to stdout\n+    exec 2>&1\n+\n+    echo \"BEGIN ALL\"\n+\n+    # Include any ID salts supplied via command line\n+    echo \"BEGIN ID SALT\"\n+    echo \"$@\"\n+    echo \"END ID SALT\"\n+\n+    # GCC only prints COLLECT_LTO_WRAPPER when invoked with just \"-v\", but we want\n+    # the information from \"-v -E -\" as well, so just include both.\n+    echo \"BEGIN CC\"\n+    bash -c \"${CC} -v\"\n+    bash -c \"${CC} -v -E -xc -o /dev/null - < /dev/null\"\n+    bash -c \"${CC} -v -E -xobjective-c -o /dev/null - < /dev/null\"\n+    echo \"END CC\"\n+\n+    echo \"BEGIN CXX\"\n+    bash -c \"${CXX} -v\"\n+    bash -c \"${CXX} -v -E -xc++ -o /dev/null - < /dev/null\"\n+    bash -c \"${CXX} -v -E -xobjective-c++ -o /dev/null - < /dev/null\"\n+    echo \"END CXX\"\n+\n+    echo \"BEGIN AR\"\n+    bash -c \"${AR} --version\"\n+    env | grep '^AR_'\n+    echo \"ZERO_AR_DATE=${ZERO_AR_DATE}\"\n+    echo \"END AR\"\n+\n+    echo \"BEGIN RANLIB\"\n+    bash -c \"${RANLIB} --version\"\n+    env | grep '^RANLIB_'\n+    echo \"END RANLIB\"\n+\n+    echo \"BEGIN STRIP\"\n+    bash -c \"${STRIP} --version\"\n+    env | grep '^STRIP_'\n+    echo \"END STRIP\"\n+\n+    echo \"END ALL\"\n+) | if [ -n \"$DEBUG\" ] && command -v tee > /dev/null 2>&1; then\n+        # When debugging and `tee` is available, output the preimage to stderr\n+        # in addition to passing through stdin to stdout\n+        tee >(cat 1>&2)\n+    else\n+        # Otherwise, passthrough stdin to stdout\n+        cat\n+    fi | ${SHA256SUM} - | cut -d' ' -f1"
      },
      {
        "sha": "5a7ae2df9a346d4e9bc474825d5c259e3f4c3867",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 89,
        "deletions": 18,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,11 +1,53 @@\n OSX_MIN_VERSION=10.14\n-OSX_SDK_VERSION=10.15.1\n-XCODE_VERSION=11.3.1\n-XCODE_BUILD_ID=11C505\n-LD64_VERSION=530\n+OSX_SDK_VERSION=10.15.6\n+XCODE_VERSION=12.1\n+XCODE_BUILD_ID=12A7403\n+LD64_VERSION=609\n \n OSX_SDK=$(SDK_PATH)/Xcode-$(XCODE_VERSION)-$(XCODE_BUILD_ID)-extracted-SDK-with-libcxx-headers\n \n+darwin_native_binutils=native_cctools\n+\n+ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n+# FORCE_USE_SYSTEM_CLANG is empty, so we use our depends-managed, pinned clang\n+# from llvm.org\n+\n+# Clang is a dependency of native_cctools when FORCE_USE_SYSTEM_CLANG is empty\n+darwin_native_toolchain=native_cctools\n+\n+clang_prog=$(build_prefix)/bin/clang\n+clangxx_prog=$(clang_prog)++\n+\n+clang_resource_dir=$(build_prefix)/lib/clang/$(native_clang_version)\n+else\n+# FORCE_USE_SYSTEM_CLANG is non-empty, so we use the clang from the user's\n+# system\n+\n+darwin_native_toolchain=\n+\n+# We can't just use $(shell command -v clang) because GNU Make handles builtins\n+# in a special way and doesn't know that `command` is a POSIX-standard builtin\n+# prior to 1af314465e5dfe3e8baa839a32a72e83c04f26ef, first released in v4.2.90.\n+# At the time of writing, GNU Make v4.2.1 is still being used in supported\n+# distro releases.\n+#\n+# Source: https://lists.gnu.org/archive/html/bug-make/2017-11/msg00017.html\n+clang_prog=$(shell $(SHELL) $(.SHELLFLAGS) \"command -v clang\")\n+clangxx_prog=$(shell $(SHELL) $(.SHELLFLAGS) \"command -v clang++\")\n+\n+clang_resource_dir=$(shell clang -print-resource-dir)\n+endif\n+\n+cctools_TOOLS=AR RANLIB STRIP NM LIBTOOL OTOOL INSTALL_NAME_TOOL\n+\n+# Make-only lowercase function\n+lc = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))\n+\n+# For well-known tools provided by cctools, make sure that their well-known\n+# variable is set to the full path of the tool, just like how AC_PATH_{TOO,PROG}\n+# would.\n+$(foreach TOOL,$(cctools_TOOLS),$(eval darwin_$(TOOL) = $$(build_prefix)/bin/$$(host)-$(call lc,$(TOOL))))\n+\n # Flag explanations:\n #\n #     -mlinker-version\n@@ -18,18 +60,54 @@ OSX_SDK=$(SDK_PATH)/Xcode-$(XCODE_VERSION)-$(XCODE_BUILD_ID)-extracted-SDK-with-\n #         Explicitly point to our binaries (e.g. cctools) so that they are\n #         ensured to be found and preferred over other possibilities.\n #\n-#     -nostdinc++ -isystem $(OSX_SDK)/usr/include/c++/v1\n+#     -stdlib=libc++ -stdlib++-isystem$(OSX_SDK)/usr/include/c++/v1\n #\n #         Forces clang to use the libc++ headers from our SDK and completely\n #         forget about the libc++ headers from the standard directories\n #\n-#         TODO: Once we start requiring a clang version that has the\n-#         -stdlib++-isystem<directory> flag first introduced here:\n-#         https://reviews.llvm.org/D64089, we should use that instead. Read the\n-#         differential summary there for more details.\n+#     -Xclang -*system<path_a> \\\n+#     -Xclang -*system<path_b> \\\n+#     -Xclang -*system<path_c> ...\n+#\n+#         Adds path_a, path_b, and path_c to the bottom of clang's list of\n+#         include search paths. This is used to explicitly specify the list of\n+#         system include search paths and its ordering, rather than rely on\n+#         clang's autodetection routine. This routine has been shown to:\n+#             1. Fail to pickup libc++ headers in $SYSROOT/usr/include/c++/v1\n+#                when clang was built manually (see: https://github.com/bitcoin/bitcoin/pull/17919#issuecomment-656785034)\n+#             2. Fail to pickup C headers in $SYSROOT/usr/include when\n+#                C_INCLUDE_DIRS was specified at configure time (see: https://gist.github.com/dongcarl/5cdc6990b7599e8a5bf6d2a9c70e82f9)\n+#\n+#         Talking directly to cc1 with -Xclang here grants us access to specify\n+#         more granular categories for these system include search paths, and we\n+#         can use the correct categories that these search paths would have been\n+#         placed in if the autodetection routine had worked correctly. (see:\n+#         https://gist.github.com/dongcarl/5cdc6990b7599e8a5bf6d2a9c70e82f9#the-treatment)\n+#\n+#         Furthermore, it places these search paths after any \"non-Xclang\"\n+#         specified search paths. This prevents any additional clang options or\n+#         environment variables from coming after or in between these system\n+#         include search paths, as that would be wrong in general but would also\n+#         break #include_next's.\n #\n-darwin_CC=clang -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION) -B$(build_prefix)/bin\n-darwin_CXX=clang++ -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -stdlib=libc++ -mlinker-version=$(LD64_VERSION) -B$(build_prefix)/bin -nostdinc++ -isystem $(OSX_SDK)/usr/include/c++/v1\n+darwin_CC=env -u C_INCLUDE_PATH -u CPLUS_INCLUDE_PATH \\\n+              -u OBJC_INCLUDE_PATH -u OBJCPLUS_INCLUDE_PATH -u CPATH \\\n+              -u LIBRARY_PATH \\\n+            $(clang_prog) --target=$(host) -mmacosx-version-min=$(OSX_MIN_VERSION) \\\n+              -B$(build_prefix)/bin -mlinker-version=$(LD64_VERSION) \\\n+              -isysroot$(OSX_SDK) \\\n+              -Xclang -internal-externc-isystem$(clang_resource_dir)/include \\\n+              -Xclang -internal-externc-isystem$(OSX_SDK)/usr/include\n+darwin_CXX=env -u C_INCLUDE_PATH -u CPLUS_INCLUDE_PATH \\\n+               -u OBJC_INCLUDE_PATH -u OBJCPLUS_INCLUDE_PATH -u CPATH \\\n+               -u LIBRARY_PATH \\\n+             $(clangxx_prog) --target=$(host) -mmacosx-version-min=$(OSX_MIN_VERSION) \\\n+               -B$(build_prefix)/bin -mlinker-version=$(LD64_VERSION) \\\n+               -isysroot$(OSX_SDK) \\\n+               -stdlib=libc++ \\\n+               -stdlib++-isystem$(OSX_SDK)/usr/include/c++/v1 \\\n+               -Xclang -internal-externc-isystem$(clang_resource_dir)/include \\\n+               -Xclang -internal-externc-isystem$(OSX_SDK)/usr/include\n \n darwin_CFLAGS=-pipe\n darwin_CXXFLAGS=$(darwin_CFLAGS)\n@@ -40,11 +118,4 @@ darwin_release_CXXFLAGS=$(darwin_release_CFLAGS)\n darwin_debug_CFLAGS=-O1\n darwin_debug_CXXFLAGS=$(darwin_debug_CFLAGS)\n \n-darwin_native_binutils=native_cctools\n-ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n-darwin_native_toolchain=native_cctools\n-else\n-darwin_native_toolchain=\n-endif\n-\n darwin_cmake_system=Darwin"
      },
      {
        "sha": "07da752492c8b8346b8d4d7c000abb8a252946da",
        "filename": "depends/hosts/linux.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/hosts/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/hosts/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/linux.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -7,7 +7,7 @@ linux_release_CXXFLAGS=$(linux_release_CFLAGS)\n linux_debug_CFLAGS=-O1\n linux_debug_CXXFLAGS=$(linux_debug_CFLAGS)\n \n-linux_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC\n+linux_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -D_LIBCPP_DEBUG=1\n \n ifeq (86,$(findstring 86,$(build_arch)))\n i686_linux_CC=gcc -m32"
      },
      {
        "sha": "f879d176f5079764ed2bad9aaa1de24e45535754",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,6 +1,6 @@\n package=boost\n $(package)_version=1_71_0\n-$(package)_download_path=https://dl.bintray.com/boostorg/release/$(subst _,.,$($(package)_version))/source/\n+$(package)_download_path=https://boostorg.jfrog.io/artifactory/main/release/$(subst _,.,$($(package)_version))/source/\n $(package)_file_name=boost_$($(package)_version).tar.bz2\n $(package)_sha256_hash=d73a8da01e8bf8c7eda40b4c84915071a8c8a0df4a6734537ddde4a8580524ee\n $(package)_dependencies=native_b2\n@@ -22,10 +22,11 @@ $(package)_toolset_$(host_os)=clang\n else\n $(package)_toolset_$(host_os)=gcc\n endif\n-$(package)_config_libraries=filesystem,system,thread,test\n+$(package)_config_libraries=filesystem,system,test\n $(package)_cxxflags=-std=c++17 -fvisibility=hidden\n $(package)_cxxflags_linux=-fPIC\n $(package)_cxxflags_android=-fPIC\n+$(package)_cxxflags_x86_64_darwin=-fcf-protection=full\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "0af5412d94c4e5bcef516b209a2f0b30ce05fa92",
        "filename": "depends/packages/libevent.mk",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/libevent.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/libevent.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libevent.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,14 +1,8 @@\n package=libevent\n-$(package)_version=2.1.11-stable\n-$(package)_download_path=https://github.com/libevent/libevent/archive/\n-$(package)_file_name=release-$($(package)_version).tar.gz\n-$(package)_sha256_hash=229393ab2bf0dc94694f21836846b424f3532585bac3468738b7bf752c03901e\n-$(package)_patches=0001-fix-windows-getaddrinfo.patch\n-\n-define $(package)_preprocess_cmds\n-   patch -p1 < $($(package)_patch_dir)/0001-fix-windows-getaddrinfo.patch && \\\n-  ./autogen.sh\n-endef\n+$(package)_version=2.1.12-stable\n+$(package)_download_path=https://github.com/libevent/libevent/releases/download/release-$($(package)_version)/\n+$(package)_file_name=$(package)-$($(package)_version).tar.gz\n+$(package)_sha256_hash=92e6de1be9ec176428fd2367677e61ceffc2ee1cb119035037a27d346b0403bb\n \n # When building for Windows, we set _WIN32_WINNT to target the same Windows\n # version as we do in configure. Due to quirks in libevents build system, this\n@@ -22,6 +16,10 @@ define $(package)_set_vars\n   $(package)_cppflags_mingw32=-D_WIN32_WINNT=0x0601\n endef\n \n+define $(package)_preprocess_cmds\n+  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub build-aux\n+endef\n+\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      },
      {
        "sha": "cdcf8c0bf2c188005272bdec1a107b4a3e94f0c4",
        "filename": "depends/packages/libnatpmp.mk",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/libnatpmp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/libnatpmp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libnatpmp.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,22 @@\n+package=libnatpmp\n+$(package)_version=4536032ae32268a45c073a4d5e91bbab4534773a\n+$(package)_download_path=https://github.com/miniupnp/libnatpmp/archive\n+$(package)_file_name=$($(package)_version).tar.gz\n+$(package)_sha256_hash=543b460aab26acf91e11d15e17d8798f845304199eea2d76c2f444ec749c5383\n+\n+define $(package)_set_vars\n+  $(package)_build_opts=CC=\"$($(package)_cc)\"\n+  $(package)_build_opts_mingw32=CPPFLAGS=-DNATPMP_STATICLIB\n+  $(package)_build_opts_darwin=LIBTOOL=\"$($(package)_libtool)\"\n+  $(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$($(package)_ar)\"\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) libnatpmp.a $($(package)_build_opts)\n+endef\n+\n+define $(package)_stage_cmds\n+  mkdir -p $($(package)_staging_prefix_dir)/include $($(package)_staging_prefix_dir)/lib &&\\\n+  install *.h $($(package)_staging_prefix_dir)/include &&\\\n+  install libnatpmp.a $($(package)_staging_prefix_dir)/lib\n+endef"
      },
      {
        "sha": "710f43959c07f4d72b13d1c0bbb3846a0266bf06",
        "filename": "depends/packages/libxcb.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 10,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/libxcb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/libxcb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxcb.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -15,25 +15,20 @@ $(package)_config_opts += --disable-composite --disable-damage --disable-dpms\n $(package)_config_opts += --disable-dri2 --disable-dri3 --disable-glx\n $(package)_config_opts += --disable-present --disable-randr --disable-record\n $(package)_config_opts += --disable-render --disable-resource --disable-screensaver\n-$(package)_config_opts += --disable-shape --disable-shm --disable-sync\n+$(package)_config_opts += --disable-shape --disable-sync\n $(package)_config_opts += --disable-xevie --disable-xfixes --disable-xfree86-dri\n-$(package)_config_opts += --disable-xinerama --disable-xinput --disable-xkb\n+$(package)_config_opts += --disable-xinerama --disable-xinput\n $(package)_config_opts += --disable-xprint --disable-selinux --disable-xtest\n $(package)_config_opts += --disable-xv --disable-xvmc\n endef\n \n define $(package)_preprocess_cmds\n-  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub build-aux &&\\\n+  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub build-aux && \\\n   sed \"s/pthread-stubs//\" -i configure\n endef\n \n-# Don't install xcb headers to the default path in order to work around a qt\n-# build issue: https://bugreports.qt.io/browse/QTBUG-34748\n-# When using qt's internal libxcb, it may end up finding the real headers in\n-# depends staging. Use a non-default path to avoid that.\n-\n define $(package)_config_cmds\n-  $($(package)_autoconf) --includedir=$(host_prefix)/include/xcb-shared\n+  $($(package)_autoconf)\n endef\n \n define $(package)_build_cmds\n@@ -45,5 +40,5 @@ define $(package)_stage_cmds\n endef\n \n define $(package)_postprocess_cmds\n-  rm -rf share/man share/doc lib/*.la\n+  rm -rf share lib/*.la\n endef"
      },
      {
        "sha": "8c6c56545f0758b4cf7f8a1ecff82388e724ee82",
        "filename": "depends/packages/libxkbcommon.mk",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/libxkbcommon.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/libxkbcommon.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxkbcommon.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,32 @@\n+package=libxkbcommon\n+$(package)_version=0.8.4\n+$(package)_download_path=https://xkbcommon.org/download/\n+$(package)_file_name=$(package)-$($(package)_version).tar.xz\n+$(package)_sha256_hash=60ddcff932b7fd352752d51a5c4f04f3d0403230a584df9a2e0d5ed87c486c8b\n+$(package)_dependencies=libxcb\n+\n+define $(package)_set_vars\n+$(package)_config_opts = --enable-option-checking --disable-dependency-tracking\n+$(package)_config_opts += --disable-static --disable-docs\n+endef\n+\n+define $(package)_preprocess_cmds\n+  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub build-aux\n+endef\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef\n+\n+define $(package)_postprocess_cmds\n+  rm lib/*.la\n+endef\n+"
      },
      {
        "sha": "99f5b0a8dbcf2c903e1c3d07e78221912d572d02",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,9 +1,9 @@\n package=miniupnpc\n-$(package)_version=2.0.20180203\n+$(package)_version=2.2.2\n $(package)_download_path=https://miniupnp.tuxfamily.org/files/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=90dda8c7563ca6cd4a83e23b3c66dbbea89603a1675bfdb852897c2c9cc220b7\n-$(package)_patches=dont_use_wingen.patch\n+$(package)_sha256_hash=888fb0976ba61518276fe1eda988589c700a3f2a69d71089260d75562afd3687\n+$(package)_patches=dont_leak_info.patch\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\"\n@@ -13,9 +13,7 @@ $(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$\n endef\n \n define $(package)_preprocess_cmds\n-  mkdir dll && \\\n-  sed -e 's|MINIUPNPC_VERSION_STRING \\\"version\\\"|MINIUPNPC_VERSION_STRING \\\"$($(package)_version)\\\"|' -e 's|OS/version|$(host)|' miniupnpcstrings.h.in > miniupnpcstrings.h && \\\n-  patch -p1 < $($(package)_patch_dir)/dont_use_wingen.patch\n+  patch -p1 < $($(package)_patch_dir)/dont_leak_info.patch\n endef\n \n define $(package)_build_cmds"
      },
      {
        "sha": "d169eb6723184e51ef7f512b0afeefb02e242194",
        "filename": "depends/packages/native_cctools.mk",
        "status": "modified",
        "additions": 12,
        "deletions": 91,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/native_cctools.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/native_cctools.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_cctools.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,86 +1,23 @@\n package=native_cctools\n-$(package)_version=55562e4073dea0fbfd0b20e0bf69ffe6390c7f97\n+$(package)_version=2ef2e931cf641547eb8a68cfebde61003587c9fd\n $(package)_download_path=https://github.com/tpoechtrager/cctools-port/archive\n $(package)_file_name=$($(package)_version).tar.gz\n-$(package)_sha256_hash=e51995a843533a3dac155dd0c71362dd471597a2d23f13dff194c6285362f875\n+$(package)_sha256_hash=6b73269efdf5c58a070e7357b66ee760501388549d6a12b423723f45888b074b\n $(package)_build_subdir=cctools\n-$(package)_patches=ld64_disable_threading.patch\n-\n-ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n-$(package)_clang_version=8.0.0\n-$(package)_clang_download_path=https://releases.llvm.org/$($(package)_clang_version)\n-$(package)_clang_download_file=clang+llvm-$($(package)_clang_version)-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n-$(package)_clang_file_name=clang-llvm-$($(package)_clang_version)-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n-$(package)_clang_sha256_hash=9ef854b71949f825362a119bf2597f744836cb571131ae6b721cd102ffea8cd0\n-endif\n-\n-$(package)_libtapi_version=3efb201881e7a76a21e0554906cf306432539cef\n-$(package)_libtapi_download_path=https://github.com/tpoechtrager/apple-libtapi/archive\n-$(package)_libtapi_download_file=$($(package)_libtapi_version).tar.gz\n-$(package)_libtapi_file_name=$($(package)_libtapi_version).tar.gz\n-$(package)_libtapi_sha256_hash=380c1ca37cfa04a8699d0887a8d3ee1ad27f3d08baba78887c73b09485c0fbd3\n-\n-$(package)_extra_sources=$($(package)_libtapi_file_name)\n-ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n-$(package)_extra_sources += $($(package)_clang_file_name)\n-endif\n-\n-ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n-define $(package)_fetch_cmds\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_download_file),$($(package)_file_name),$($(package)_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_clang_download_path),$($(package)_clang_download_file),$($(package)_clang_file_name),$($(package)_clang_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_libtapi_download_path),$($(package)_libtapi_download_file),$($(package)_libtapi_file_name),$($(package)_libtapi_sha256_hash))\n-endef\n-else\n-define $(package)_fetch_cmds\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_download_file),$($(package)_file_name),$($(package)_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_libtapi_download_path),$($(package)_libtapi_download_file),$($(package)_libtapi_file_name),$($(package)_libtapi_sha256_hash))\n-endef\n-endif\n-\n-ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n-define $(package)_extract_cmds\n-  mkdir -p $($(package)_extract_dir) && \\\n-  echo \"$($(package)_sha256_hash)  $($(package)_source)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n-  echo \"$($(package)_clang_sha256_hash)  $($(package)_source_dir)/$($(package)_clang_file_name)\" >> $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n-  echo \"$($(package)_libtapi_sha256_hash)  $($(package)_source_dir)/$($(package)_libtapi_file_name)\" >> $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n-  $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n-  mkdir -p toolchain/bin toolchain/lib/clang/$($(package)_clang_version)/include && \\\n-  mkdir -p libtapi && \\\n-  tar --no-same-owner --strip-components=1 -C libtapi -xf $($(package)_source_dir)/$($(package)_libtapi_file_name) && \\\n-  tar --no-same-owner --strip-components=1 -C toolchain -xf $($(package)_source_dir)/$($(package)_clang_file_name) && \\\n-  rm -f toolchain/lib/libc++abi.so* && \\\n-  tar --no-same-owner --strip-components=1 -xf $($(package)_source)\n-endef\n-else\n-define $(package)_extract_cmds\n-  mkdir -p $($(package)_extract_dir) && \\\n-  echo \"$($(package)_sha256_hash)  $($(package)_source)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n-  echo \"$($(package)_libtapi_sha256_hash)  $($(package)_source_dir)/$($(package)_libtapi_file_name)\" >> $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n-  $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n-  mkdir -p libtapi && \\\n-  tar --no-same-owner --strip-components=1 -C libtapi -xf $($(package)_source_dir)/$($(package)_libtapi_file_name) && \\\n-  tar --no-same-owner --strip-components=1 -xf $($(package)_source)\n-endef\n-endif\n+$(package)_dependencies=native_libtapi\n \n define $(package)_set_vars\n-  $(package)_config_opts=--target=$(host) --with-libtapi=$($(package)_extract_dir)\n+  $(package)_config_opts=--target=$(host)\n   $(package)_ldflags+=-Wl,-rpath=\\\\$$$$$$$$\\$$$$$$$$ORIGIN/../lib\n   ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n-  $(package)_config_opts+=--enable-lto-support --with-llvm-config=$($(package)_extract_dir)/toolchain/bin/llvm-config\n-  $(package)_cc=$($(package)_extract_dir)/toolchain/bin/clang\n-  $(package)_cxx=$($(package)_extract_dir)/toolchain/bin/clang++\n-  else\n-  $(package)_cc=clang\n-  $(package)_cxx=clang++\n+  $(package)_config_opts+=--enable-lto-support --with-llvm-config=$(build_prefix)/bin/llvm-config\n   endif\n+  $(package)_cc=$(clang_prog)\n+  $(package)_cxx=$(clangxx_prog)\n endef\n \n define $(package)_preprocess_cmds\n-  CC=$($(package)_cc) CXX=$($(package)_cxx) INSTALLPREFIX=$($(package)_extract_dir) ./libtapi/build.sh && \\\n-  CC=$($(package)_cc) CXX=$($(package)_cxx) INSTALLPREFIX=$($(package)_extract_dir) ./libtapi/install.sh && \\\n-  patch -p1 < $($(package)_patch_dir)/ld64_disable_threading.patch\n+  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub cctools\n endef\n \n define $(package)_config_cmds\n@@ -91,26 +28,10 @@ define $(package)_build_cmds\n   $(MAKE)\n endef\n \n-ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install && \\\n-  mkdir -p $($(package)_staging_prefix_dir)/lib/ && \\\n-  cd $($(package)_extract_dir) && \\\n-  cp lib/libtapi.so.6 $($(package)_staging_prefix_dir)/lib/ && \\\n-  cd $($(package)_extract_dir)/toolchain && \\\n-  mkdir -p $($(package)_staging_prefix_dir)/lib/clang/$($(package)_clang_version)/include && \\\n-  mkdir -p $($(package)_staging_prefix_dir)/bin $($(package)_staging_prefix_dir)/include && \\\n-  cp bin/clang $($(package)_staging_prefix_dir)/bin/ &&\\\n-  cp -P bin/clang++ $($(package)_staging_prefix_dir)/bin/ &&\\\n-  cp lib/libLTO.so $($(package)_staging_prefix_dir)/lib/ && \\\n-  cp -rf lib/clang/$($(package)_clang_version)/include/* $($(package)_staging_prefix_dir)/lib/clang/$($(package)_clang_version)/include/ && \\\n-  cp bin/dsymutil $($(package)_staging_prefix_dir)/bin/$(host)-dsymutil\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n endef\n-else\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install && \\\n-  mkdir -p $($(package)_staging_prefix_dir)/lib/ && \\\n-  cd $($(package)_extract_dir) && \\\n-  cp lib/libtapi.so.6 $($(package)_staging_prefix_dir)/lib/\n+\n+define $(package)_postprocess_cmds\n+  rm -rf share\n endef\n-endif"
      },
      {
        "sha": "7bdf2d7dfda9a221ff75e842ea887f35ca153f42",
        "filename": "depends/packages/native_cdrkit.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 28,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/packages/native_cdrkit.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/packages/native_cdrkit.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_cdrkit.mk?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,28 +0,0 @@\n-package=native_cdrkit\n-$(package)_version=1.1.11\n-$(package)_download_path=https://distro.ibiblio.org/fatdog/source/600/c\n-$(package)_file_name=cdrkit-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=b50d64c214a65b1a79afe3a964c691931a4233e2ba605d793eb85d0ac3652564\n-$(package)_patches=cdrkit-deterministic.patch\n-\n-define $(package)_preprocess_cmds\n-  patch -p1 < $($(package)_patch_dir)/cdrkit-deterministic.patch\n-endef\n-\n-# Starting with 10.1, GCC defaults to -fno-common, resulting in linking errors.\n-# Pass -fcommon to retain the legacy behaviour.\n-define $(package)_config_cmds\n-  $($(package)_cmake) -DCMAKE_C_FLAGS=\"$$($(1)_cflags) -fcommon\"\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE) genisoimage\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) -C genisoimage install\n-endef\n-\n-define $(package)_postprocess_cmds\n-  rm bin/isovfy bin/isoinfo bin/isodump bin/isodebug bin/devdump\n-endef"
      },
      {
        "sha": "25ac77c1a34ad8350050a3563a205f950a5c13ae",
        "filename": "depends/packages/native_clang.mk",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/native_clang.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/native_clang.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_clang.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,32 @@\n+package=native_clang\n+$(package)_version=10.0.1\n+$(package)_download_path=https://github.com/llvm/llvm-project/releases/download/llvmorg-$($(package)_version)\n+ifneq (,$(findstring aarch64,$(BUILD)))\n+$(package)_download_file=clang+llvm-$($(package)_version)-aarch64-linux-gnu.tar.xz\n+$(package)_file_name=clang+llvm-$($(package)_version)-aarch64-linux-gnu.tar.xz\n+$(package)_sha256_hash=90dc69a4758ca15cd0ffa45d07fbf5bf4309d47d2c7745a9f0735ecffde9c31f\n+else\n+$(package)_download_file=clang+llvm-$($(package)_version)-x86_64-linux-gnu-ubuntu-16.04.tar.xz\n+$(package)_file_name=clang+llvm-$($(package)_version)-x86_64-linux-gnu-ubuntu-16.04.tar.xz\n+$(package)_sha256_hash=48b83ef827ac2c213d5b64f5ad7ed082c8bcb712b46644e0dc5045c6f462c231\n+endif\n+\n+define $(package)_preprocess_cmds\n+  rm -f $($(package)_extract_dir)/lib/libc++abi.so*\n+endef\n+\n+define $(package)_stage_cmds\n+  mkdir -p $($(package)_staging_prefix_dir)/lib/clang/$($(package)_version)/include && \\\n+  mkdir -p $($(package)_staging_prefix_dir)/bin && \\\n+  mkdir -p $($(package)_staging_prefix_dir)/include && \\\n+  cp bin/clang $($(package)_staging_prefix_dir)/bin/ && \\\n+  cp -P bin/clang++ $($(package)_staging_prefix_dir)/bin/ && \\\n+  cp bin/dsymutil $($(package)_staging_prefix_dir)/bin/$(host)-dsymutil && \\\n+  cp bin/llvm-config $($(package)_staging_prefix_dir)/bin/ && \\\n+  cp lib/libLTO.so $($(package)_staging_prefix_dir)/lib/ && \\\n+  cp -rf lib/clang/$($(package)_version)/include/* $($(package)_staging_prefix_dir)/lib/clang/$($(package)_version)/include/\n+endef\n+\n+define $(package)_postprocess_cmds\n+  rmdir include\n+endef"
      },
      {
        "sha": "c7c8adef41580324169ac5be802beafa9860759f",
        "filename": "depends/packages/native_libdmg-hfsplus.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/native_libdmg-hfsplus.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/native_libdmg-hfsplus.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libdmg-hfsplus.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -12,7 +12,7 @@ define $(package)_preprocess_cmds\n endef\n \n define $(package)_config_cmds\n-  $($(package)_cmake) -DCMAKE_C_FLAGS=\"$$($(1)_cflags) -Wl,--build-id=none\" ..\n+  $($(package)_cmake) -DCMAKE_C_FLAGS=\"$$($(1)_cflags) -Wl,--build-id=none\" -DCMAKE_SKIP_RPATH=\"ON\" -DCMAKE_EXE_LINKER_FLAGS=\"-static\" -DCMAKE_FIND_LIBRARY_SUFFIXES=\".a\" ..\n endef\n \n define $(package)_build_cmds"
      },
      {
        "sha": "14653ce9fb0b70a110ee8d80c743a6833f60c21b",
        "filename": "depends/packages/native_libmultiprocess.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/native_libmultiprocess.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/native_libmultiprocess.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libmultiprocess.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,8 +1,8 @@\n package=native_libmultiprocess\n-$(package)_version=5741d750a04e644a03336090d8979c6d033e32c0\n+$(package)_version=d576d975debdc9090bd2582f83f49c76c0061698\n $(package)_download_path=https://github.com/chaincodelabs/libmultiprocess/archive\n $(package)_file_name=$($(package)_version).tar.gz\n-$(package)_sha256_hash=ac848db49a6ed53e423c62d54bd87f1f08cbb0326254a8667e10bbfe5bf032a4\n+$(package)_sha256_hash=9f8b055c8bba755dc32fe799b67c20b91e7b13e67cadafbc54c0f1def057a370\n $(package)_dependencies=native_capnp\n \n define $(package)_config_cmds"
      },
      {
        "sha": "60b898da5f2fd4d923f8171a0980ef22158454b1",
        "filename": "depends/packages/native_libtapi.mk",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/native_libtapi.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/native_libtapi.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libtapi.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,20 @@\n+package=native_libtapi\n+$(package)_version=664b8414f89612f2dfd35a9b679c345aa5389026\n+$(package)_download_path=https://github.com/tpoechtrager/apple-libtapi/archive\n+$(package)_download_file=$($(package)_version).tar.gz\n+$(package)_file_name=$($(package)_version).tar.gz\n+$(package)_sha256_hash=62e419c12d1c9fad67cc1cd523132bc00db050998337c734c15bc8d73cc02b61\n+\n+ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n+$(package)_dependencies=native_clang\n+endif\n+\n+define $(package)_build_cmds\n+  CC=$(clang_prog) CXX=$(clangxx_prog) INSTALLPREFIX=$($(package)_staging_prefix_dir) ./build.sh\n+endef\n+\n+define $(package)_stage_cmds\n+  ./install.sh && \\\n+  mkdir -p $($(package)_staging_prefix_dir)/include/llvm-c && \\\n+  cp src/llvm/include/llvm-c/lto.h $($(package)_staging_prefix_dir)/include/llvm-c\n+endef"
      },
      {
        "sha": "783f87ca7c0438f1c84b7354b352d74bbc8b1a37",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,8 +1,8 @@\n package=native_mac_alias\n-$(package)_version=2.0.7\n+$(package)_version=2.2.0\n $(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n $(package)_file_name=v$($(package)_version).tar.gz\n-$(package)_sha256_hash=6f606d3b6bccd2112aeabf1a063f5b5ece87005a5d7e97c8faca23b916e88838\n+$(package)_sha256_hash=421e6d7586d1f155c7db3e7da01ca0dacc9649a509a253ad7077b70174426499\n $(package)_install_libdir=$(build_prefix)/lib/python3/dist-packages\n \n define $(package)_build_cmds"
      },
      {
        "sha": "9094e327ef5b0103c370916b7ee0cb074f950a03",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,10 +1,8 @@\n packages:=boost libevent\n \n-qt_packages = zlib\n-\n qrencode_packages = qrencode\n \n-qt_linux_packages:=qt expat libxcb xcb_proto libXau xproto freetype fontconfig\n+qt_linux_packages:=qt expat libxcb xcb_proto libXau xproto freetype fontconfig libxkbcommon\n qt_android_packages=qt\n \n qt_darwin_packages=qt\n@@ -16,6 +14,7 @@ sqlite_packages=sqlite\n zmq_packages=zeromq\n \n upnp_packages=miniupnpc\n+natpmp_packages=libnatpmp\n \n multiprocess_packages = libmultiprocess capnp\n multiprocess_native_packages = native_libmultiprocess native_capnp\n@@ -25,5 +24,10 @@ darwin_native_packages = native_ds_store native_mac_alias\n $(host_arch)_$(host_os)_native_packages += native_b2\n \n ifneq ($(build_os),darwin)\n-darwin_native_packages += native_cctools native_cdrkit native_libdmg-hfsplus\n+darwin_native_packages += native_cctools native_libtapi native_libdmg-hfsplus\n+\n+ifeq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n+darwin_native_packages+= native_clang\n+endif\n+\n endif"
      },
      {
        "sha": "9004b064d6e9e71141e4339d5208dc6b4dacd959",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 53,
        "deletions": 72,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,25 +1,24 @@\n PACKAGE=qt\n-$(package)_version=5.9.8\n-$(package)_download_path=https://download.qt.io/official_releases/qt/5.9/$($(package)_version)/submodules\n-$(package)_suffix=opensource-src-$($(package)_version).tar.xz\n+$(package)_version=5.12.11\n+$(package)_download_path=https://download.qt.io/official_releases/qt/5.12/$($(package)_version)/submodules\n+$(package)_suffix=everywhere-src-$($(package)_version).tar.xz\n $(package)_file_name=qtbase-$($(package)_suffix)\n-$(package)_sha256_hash=9b9dec1f67df1f94bce2955c5604de992d529dde72050239154c56352da0907d\n-$(package)_dependencies=zlib\n-$(package)_linux_dependencies=freetype fontconfig libxcb\n-$(package)_build_subdir=qtbase\n+$(package)_sha256_hash=1c1b4e33137ca77881074c140d54c3c9747e845a31338cfe8680f171f0bc3a39\n+$(package)_linux_dependencies=freetype fontconfig libxcb libxkbcommon\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch\n-$(package)_patches+= fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch no-xlib.patch\n-$(package)_patches+= fix_android_qmake_conf.patch fix_android_jni_static.patch dont_hardcode_pwd.patch\n-$(package)_patches+= freetype_back_compat.patch drop_lrelease_dependency.patch fix_powerpc_libpng.patch\n-$(package)_patches+= fix_mingw_cross_compile.patch fix_qpainter_non_determinism.patch\n+$(package)_linguist_tools = lrelease lupdate lconvert\n+$(package)_patches = qt.pro qttools_src.pro\n+$(package)_patches += fix_qt_pkgconfig.patch mac-qmake.conf fix_no_printer.patch no-xlib.patch\n+$(package)_patches += support_new_android_ndks.patch fix_android_jni_static.patch dont_hardcode_pwd.patch\n+$(package)_patches+= no_sdk_version_check.patch\n+$(package)_patches+= fix_lib_paths.patch fix_android_pch.patch\n+$(package)_patches+= qtbase-moc-ignore-gcc-macro.patch fix_limits_header.patch\n \n-# Update OSX_QT_TRANSLATIONS when this is updated\n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n-$(package)_qttranslations_sha256_hash=fb5a47799754af73d3bf501fe513342cfe2fc37f64e80df5533f6110e804220c\n+$(package)_qttranslations_sha256_hash=577b0668a777eb2b451c61e8d026d79285371597ce9df06b6dee6c814164b7c3\n \n $(package)_qttools_file_name=qttools-$($(package)_suffix)\n-$(package)_qttools_sha256_hash=a97556eb7b2f30252cdd8a598c396cfce2b2f79d2bae883af6d3b26a2cdcc63c\n+$(package)_qttools_sha256_hash=98b2aaca230458f65996f3534fd471d2ffd038dd58ac997c0589c06dc2385b4f\n \n $(package)_extra_sources  = $($(package)_qttranslations_file_name)\n $(package)_extra_sources += $($(package)_qttools_file_name)\n@@ -28,6 +27,7 @@ define $(package)_set_vars\n $(package)_config_opts_release = -release\n $(package)_config_opts_release += -silent\n $(package)_config_opts_debug = -debug\n+$(package)_config_opts_debug += -optimized-tools\n $(package)_config_opts += -bindir $(build_prefix)/bin\n $(package)_config_opts += -c++std c++1z\n $(package)_config_opts += -confirm-license\n@@ -51,7 +51,6 @@ $(package)_config_opts += -no-mtdev\n $(package)_config_opts += -no-openssl\n $(package)_config_opts += -no-openvg\n $(package)_config_opts += -no-reduce-relocations\n-$(package)_config_opts += -no-qml-debug\n $(package)_config_opts += -no-sctp\n $(package)_config_opts += -no-securetransport\n $(package)_config_opts += -no-sql-db2\n@@ -65,17 +64,16 @@ $(package)_config_opts += -no-sql-sqlite\n $(package)_config_opts += -no-sql-sqlite2\n $(package)_config_opts += -no-system-proxies\n $(package)_config_opts += -no-use-gold-linker\n-$(package)_config_opts += -no-xinput2\n $(package)_config_opts += -nomake examples\n $(package)_config_opts += -nomake tests\n+$(package)_config_opts += -nomake tools\n $(package)_config_opts += -opensource\n-$(package)_config_opts += -optimized-tools\n $(package)_config_opts += -pkg-config\n $(package)_config_opts += -prefix $(host_prefix)\n $(package)_config_opts += -qt-libpng\n $(package)_config_opts += -qt-pcre\n $(package)_config_opts += -qt-harfbuzz\n-$(package)_config_opts += -system-zlib\n+$(package)_config_opts += -qt-zlib\n $(package)_config_opts += -static\n $(package)_config_opts += -v\n $(package)_config_opts += -no-feature-bearermanagement\n@@ -96,10 +94,10 @@ $(package)_config_opts += -no-feature-printdialog\n $(package)_config_opts += -no-feature-printer\n $(package)_config_opts += -no-feature-printpreviewdialog\n $(package)_config_opts += -no-feature-printpreviewwidget\n-$(package)_config_opts += -no-feature-regularexpression\n $(package)_config_opts += -no-feature-sessionmanager\n $(package)_config_opts += -no-feature-socks5\n $(package)_config_opts += -no-feature-sql\n+$(package)_config_opts += -no-feature-sqlmodel\n $(package)_config_opts += -no-feature-statemachine\n $(package)_config_opts += -no-feature-syntaxhighlighter\n $(package)_config_opts += -no-feature-textbrowser\n@@ -117,24 +115,28 @@ $(package)_config_opts += -no-feature-xml\n $(package)_config_opts_darwin = -no-dbus\n $(package)_config_opts_darwin += -no-opengl\n $(package)_config_opts_darwin += -pch\n+$(package)_config_opts_darwin += -no-feature-corewlan\n+$(package)_config_opts_darwin += QMAKE_MACOSX_DEPLOYMENT_TARGET=$(OSX_MIN_VERSION)\n \n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin += -xplatform macx-clang-linux\n $(package)_config_opts_darwin += -device-option MAC_SDK_PATH=$(OSX_SDK)\n $(package)_config_opts_darwin += -device-option MAC_SDK_VERSION=$(OSX_SDK_VERSION)\n $(package)_config_opts_darwin += -device-option CROSS_COMPILE=\"$(host)-\"\n-$(package)_config_opts_darwin += -device-option MAC_MIN_VERSION=$(OSX_MIN_VERSION)\n $(package)_config_opts_darwin += -device-option MAC_TARGET=$(host)\n $(package)_config_opts_darwin += -device-option XCODE_VERSION=$(XCODE_VERSION)\n endif\n \n-$(package)_config_opts_linux  = -qt-xkbcommon-x11\n-$(package)_config_opts_linux += -qt-xcb\n+# for macOS on Apple Silicon (ARM) see https://bugreports.qt.io/browse/QTBUG-85279\n+$(package)_config_opts_aarch64_darwin += -device-option QMAKE_APPLE_DEVICE_ARCHS=arm64\n+\n+$(package)_config_opts_linux = -qt-xcb\n $(package)_config_opts_linux += -no-xcb-xlib\n $(package)_config_opts_linux += -no-feature-xlib\n $(package)_config_opts_linux += -system-freetype\n $(package)_config_opts_linux += -fontconfig\n $(package)_config_opts_linux += -no-opengl\n+$(package)_config_opts_linux += -no-feature-vulkan\n $(package)_config_opts_linux += -dbus-runtime\n $(package)_config_opts_arm_linux += -platform linux-g++ -xplatform bitcoin-linux-g++\n $(package)_config_opts_i686_linux  = -xplatform linux-g++-32\n@@ -148,6 +150,9 @@ $(package)_config_opts_s390x_linux = -platform linux-g++ -xplatform bitcoin-linu\n $(package)_config_opts_mingw32 = -no-opengl\n $(package)_config_opts_mingw32 += -no-dbus\n $(package)_config_opts_mingw32 += -xplatform win32-g++\n+$(package)_config_opts_mingw32 += \"QMAKE_CFLAGS = '$($(package)_cflags) $($(package)_cppflags)'\"\n+$(package)_config_opts_mingw32 += \"QMAKE_CXXFLAGS = '$($(package)_cflags) $($(package)_cppflags)'\"\n+$(package)_config_opts_mingw32 += \"QMAKE_LFLAGS = '$($(package)_ldflags)'\"\n $(package)_config_opts_mingw32 += -device-option CROSS_COMPILE=\"$(host)-\"\n $(package)_config_opts_mingw32 += -pch\n \n@@ -166,14 +171,12 @@ $(package)_config_opts_android += -no-fontconfig\n $(package)_config_opts_android += -L $(host_prefix)/lib\n $(package)_config_opts_android += -I $(host_prefix)/include\n $(package)_config_opts_android += -pch\n+$(package)_config_opts_android += -no-feature-vulkan\n \n $(package)_config_opts_aarch64_android += -android-arch arm64-v8a\n $(package)_config_opts_armv7a_android += -android-arch armeabi-v7a\n $(package)_config_opts_x86_64_android += -android-arch x86_64\n $(package)_config_opts_i686_android += -android-arch i686\n-\n-$(package)_build_env  = QT_RCC_TEST=1\n-$(package)_build_env += QT_RCC_SOURCE_DATE_OVERRIDE=1\n endef\n \n define $(package)_fetch_cmds\n@@ -200,41 +203,35 @@ endef\n #\n # 1. Apply our patches to the extracted source. See each patch for more info.\n #\n-# 2. Point to lrelease in qttools/bin/lrelease; otherwise Qt will look for it in\n-# $(host)/native/bin/lrelease and not find it.\n-#\n-# 3. Create a macOS-Clang-Linux mkspec using our mac-qmake.conf.\n+# 2. Create a macOS-Clang-Linux mkspec using our mac-qmake.conf.\n #\n-# 4. After making a copy of the mkspec for the linux-arm-gnueabi host, named\n+# 3. After making a copy of the mkspec for the linux-arm-gnueabi host, named\n # bitcoin-linux-g++, replace instances of linux-arm-gnueabi with $(host). This\n # way we can generically support hosts like riscv64-linux-gnu, which Qt doesn't\n # ship a mkspec for. See it's usage in config_opts_* above.\n #\n-# 5. Put our C, CXX and LD FLAGS into gcc-base.conf. Only used for non-host builds.\n+# 4. Put our C, CXX and LD FLAGS into gcc-base.conf. Only used for non-host builds.\n #\n-# 6. Do similar for the win32-g++ mkspec.\n+# 5. Do similar for the win32-g++ mkspec.\n #\n-# 7. In clang.conf, swap out clang & clang++, for our compiler + flags. See #17466.\n+# 6. In clang.conf, swap out clang & clang++, for our compiler + flags. See #17466.\n #\n-# 8. Adjust a regex in toolchain.prf, to accomodate Guix's usage of\n+# 7. Adjust a regex in toolchain.prf, to accommodate Guix's usage of\n # CROSS_LIBRARY_PATH. See #15277.\n define $(package)_preprocess_cmds\n-  patch -p1 -i $($(package)_patch_dir)/freetype_back_compat.patch && \\\n-  patch -p1 -i $($(package)_patch_dir)/fix_powerpc_libpng.patch && \\\n-  patch -p1 -i $($(package)_patch_dir)/drop_lrelease_dependency.patch && \\\n+  cp $($(package)_patch_dir)/qt.pro qt.pro && \\\n+  cp $($(package)_patch_dir)/qttools_src.pro qttools/src/src.pro && \\\n   patch -p1 -i $($(package)_patch_dir)/dont_hardcode_pwd.patch && \\\n   patch -p1 -i $($(package)_patch_dir)/fix_qt_pkgconfig.patch && \\\n-  patch -p1 -i $($(package)_patch_dir)/fix_configure_mac.patch && \\\n   patch -p1 -i $($(package)_patch_dir)/fix_no_printer.patch && \\\n-  patch -p1 -i $($(package)_patch_dir)/fix_rcc_determinism.patch && \\\n-  patch -p1 -i $($(package)_patch_dir)/xkb-default.patch && \\\n-  patch -p1 -i $($(package)_patch_dir)/fix_android_qmake_conf.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/support_new_android_ndks.patch && \\\n   patch -p1 -i $($(package)_patch_dir)/fix_android_jni_static.patch && \\\n-  patch -p1 -i $($(package)_patch_dir)/fix_riscv64_arch.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_android_pch.patch && \\\n   patch -p1 -i $($(package)_patch_dir)/no-xlib.patch && \\\n-  patch -p1 -i $($(package)_patch_dir)/fix_mingw_cross_compile.patch && \\\n-  patch -p1 -i $($(package)_patch_dir)/fix_qpainter_non_determinism.patch &&\\\n-  sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n+  patch -p1 -i $($(package)_patch_dir)/no_sdk_version_check.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_lib_paths.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/qtbase-moc-ignore-gcc-macro.patch && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_limits_header.patch && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n   cp -f qtbase/mkspecs/macx-clang/qplatformdefs.h qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n@@ -243,46 +240,30 @@ define $(package)_preprocess_cmds\n   echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  sed -i.old \"s|QMAKE_CFLAGS           += |!host_build: QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n-  sed -i.old \"s|QMAKE_CXXFLAGS         += |!host_build: QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n-  sed -i.old \"0,/^QMAKE_LFLAGS_/s|^QMAKE_LFLAGS_|!host_build: QMAKE_LFLAGS            = $($(package)_ldflags)\\n&|\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n-  sed -i.old \"s|QMAKE_CC                = clang|QMAKE_CC                = $($(package)_cc)|\" qtbase/mkspecs/common/clang.conf && \\\n-  sed -i.old \"s|QMAKE_CXX               = clang++|QMAKE_CXX               = $($(package)_cxx)|\" qtbase/mkspecs/common/clang.conf && \\\n+  sed -i.old \"s|QMAKE_CC                = \\$$$$\\$$$${CROSS_COMPILE}clang|QMAKE_CC                = $($(package)_cc)|\" qtbase/mkspecs/common/clang.conf && \\\n+  sed -i.old \"s|QMAKE_CXX               = \\$$$$\\$$$${CROSS_COMPILE}clang++|QMAKE_CXX               = $($(package)_cxx)|\" qtbase/mkspecs/common/clang.conf && \\\n   sed -i.old \"s/LIBRARY_PATH/(CROSS_)?\\0/g\" qtbase/mkspecs/features/toolchain.prf\n endef\n \n define $(package)_config_cmds\n   export PKG_CONFIG_SYSROOT_DIR=/ && \\\n   export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n-  export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n-  ./configure $($(package)_config_opts) && \\\n-  echo \"host_build: QT_CONFIG ~= s/system-zlib/zlib\" >> mkspecs/qconfig.pri && \\\n-  echo \"CONFIG += force_bootstrap\" >> mkspecs/qconfig.pri && \\\n-  $(MAKE) sub-src-clean && \\\n-  cd ../qttranslations && ../qtbase/bin/qmake qttranslations.pro -o Makefile && \\\n-  cd translations && ../../qtbase/bin/qmake translations.pro -o Makefile && cd ../.. && \\\n-  cd qttools/src/linguist/lrelease/ && ../../../../qtbase/bin/qmake lrelease.pro -o Makefile && \\\n-  cd ../lupdate/ && ../../../../qtbase/bin/qmake lupdate.pro -o Makefile && cd ../../../..\n+  export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig && \\\n+  cd qtbase && \\\n+  ./configure -top-level $($(package)_config_opts)\n endef\n \n define $(package)_build_cmds\n-  $(MAKE) -C src $(addprefix sub-,$($(package)_qt_libs)) && \\\n-  $(MAKE) -C ../qttools/src/linguist/lrelease && \\\n-  $(MAKE) -C ../qttools/src/linguist/lupdate && \\\n-  $(MAKE) -C ../qttranslations\n+  $(MAKE)\n endef\n \n define $(package)_stage_cmds\n-  $(MAKE) -C src INSTALL_ROOT=$($(package)_staging_dir) $(addsuffix -install_subtargets,$(addprefix sub-,$($(package)_qt_libs))) && cd .. && \\\n-  $(MAKE) -C qttools/src/linguist/lrelease INSTALL_ROOT=$($(package)_staging_dir) install_target && \\\n-  $(MAKE) -C qttools/src/linguist/lupdate INSTALL_ROOT=$($(package)_staging_dir) install_target && \\\n-  $(MAKE) -C qttranslations INSTALL_ROOT=$($(package)_staging_dir) install_subtargets && \\\n-  if `test -f qtbase/src/plugins/platforms/xcb/xcb-static/libxcb-static.a`; then \\\n-    cp qtbase/src/plugins/platforms/xcb/xcb-static/libxcb-static.a $($(package)_staging_prefix_dir)/lib; \\\n-  fi\n+  $(MAKE) -C qtbase/src INSTALL_ROOT=$($(package)_staging_dir) $(addsuffix -install_subtargets,$(addprefix sub-,$($(package)_qt_libs))) && \\\n+  $(MAKE) -C qttools/src/linguist INSTALL_ROOT=$($(package)_staging_dir) $(addsuffix -install_subtargets,$(addprefix sub-,$($(package)_linguist_tools))) && \\\n+  $(MAKE) -C qttranslations INSTALL_ROOT=$($(package)_staging_dir) install_subtargets\n endef\n \n define $(package)_postprocess_cmds\n   rm -rf native/mkspecs/ native/lib/ lib/cmake/ && \\\n-  rm -f lib/lib*.la lib/*.prl plugins/*/*.prl\n+  rm -f lib/lib*.la\n endef"
      },
      {
        "sha": "af5e0d09c9dc8600908639df7a7da581b1d0bd77",
        "filename": "depends/packages/sqlite.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/sqlite.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/packages/sqlite.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/sqlite.mk?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -9,6 +9,10 @@ $(package)_config_opts=--disable-shared --disable-readline --disable-dynamic-ext\n $(package)_config_opts_linux=--with-pic\n endef\n \n+define $(package)_preprocess_cmds\n+  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub .\n+endef\n+\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      },
      {
        "sha": "acb02020a80b2424fe6080a0b64b8ac54d33df62",
        "filename": "depends/packages/zlib.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 31,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/packages/zlib.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/packages/zlib.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zlib.mk?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,31 +0,0 @@\n-package=zlib\n-$(package)_version=1.2.11\n-$(package)_download_path=https://www.zlib.net\n-$(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1\n-\n-define $(package)_set_vars\n-$(package)_config_opts= CC=\"$($(package)_cc)\"\n-$(package)_config_opts+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags) -fPIC\"\n-$(package)_config_opts+=RANLIB=\"$($(package)_ranlib)\"\n-$(package)_config_opts+=AR=\"$($(package)_ar)\"\n-$(package)_config_opts_darwin+=AR=\"$($(package)_libtool)\"\n-$(package)_config_opts_darwin+=ARFLAGS=\"-o\"\n-$(package)_config_opts_android+=CHOST=$(host)\n-endef\n-\n-# zlib has its own custom configure script that takes in options like CC,\n-# CFLAGS, RANLIB, AR, and ARFLAGS from the environment rather than from\n-# command-line arguments.\n-define $(package)_config_cmds\n-  env $($(package)_config_opts) ./configure --static --prefix=$(host_prefix)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE) libz.a\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n-endef\n-"
      },
      {
        "sha": "3ffd1674e03bcf0da2995aa465908679bc5840e1",
        "filename": "depends/patches/fontconfig/gperf_header_regen.patch",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/fontconfig/gperf_header_regen.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/fontconfig/gperf_header_regen.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/fontconfig/gperf_header_regen.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -2,7 +2,7 @@ commit 7b6eb33ecd88768b28c67ce5d2d68a7eed5936b6\n Author: fanquake <fanquake@gmail.com>\n Date:   Tue Aug 25 14:34:53 2020 +0800\n \n-    Remove rule that causes inadvertant header regeneration\n+    Remove rule that causes inadvertent header regeneration\n \n     Otherwise the makefile will needlessly attempt to re-generate the\n     headers with gperf. This can be dropped once the upstream build is fixed."
      },
      {
        "sha": "a98cd90bd58a20072443a11a9c412b447e8e98a1",
        "filename": "depends/patches/libevent/0001-fix-windows-getaddrinfo.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/libevent/0001-fix-windows-getaddrinfo.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/libevent/0001-fix-windows-getaddrinfo.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/libevent/0001-fix-windows-getaddrinfo.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,15 +0,0 @@\n-diff -ur libevent-2.1.8-stable.orig/configure.ac libevent-2.1.8-stable/configure.ac\n---- libevent-2.1.8-stable.orig/configure.ac\t2017-01-29 17:51:00.000000000 +0000\n-+++ libevent-2.1.8-stable/configure.ac\t2020-03-07 01:11:16.311335005 +0000\n-@@ -389,6 +389,10 @@\n- \t\t#ifdef HAVE_NETDB_H\n- \t\t#include <netdb.h>\n- \t\t#endif\n-+#ifdef _WIN32\n-+#include <winsock2.h>\n-+#include <ws2tcpip.h>\n-+#endif\n- \t    ]],\n- \t    [[\n- \t\tgetaddrinfo;\n-Only in libevent-2.1.8-stable: configure.ac~"
      },
      {
        "sha": "512f9c50ea8d7fbca35004e92756236721e0919c",
        "filename": "depends/patches/miniupnpc/dont_leak_info.patch",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/miniupnpc/dont_leak_info.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/miniupnpc/dont_leak_info.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/miniupnpc/dont_leak_info.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,32 @@\n+commit 8815452257437ba36607d0e2381c01142d1c7bb0\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Thu Nov 19 10:51:19 2020 +0800\n+\n+    Don't leak OS and miniupnpc version info in User-Agent\n+\n+diff --git a//minisoap.c b/minisoap.c\n+index 7860667..775580b 100644\n+--- a/minisoap.c\n++++ b/minisoap.c\n+@@ -90,7 +90,7 @@ int soapPostSubmit(SOCKET fd,\n+ \theaderssize = snprintf(headerbuf, sizeof(headerbuf),\n+                        \"POST %s HTTP/%s\\r\\n\"\n+ \t                   \"Host: %s%s\\r\\n\"\n+-\t\t\t\t\t   \"User-Agent: \" OS_STRING \", \" UPNP_VERSION_STRING \", MiniUPnPc/\" MINIUPNPC_VERSION_STRING \"\\r\\n\"\n++\t\t\t\t\t   \"User-Agent: \" UPNP_VERSION_STRING \"\\r\\n\"\n+ \t                   \"Content-Length: %d\\r\\n\"\n+ \t\t\t\t\t   \"Content-Type: text/xml\\r\\n\"\n+ \t\t\t\t\t   \"SOAPAction: \\\"%s\\\"\\r\\n\"\n+diff --git a/miniwget.c b/miniwget.c\n+index d5b7970..05aeb9c 100644\n+--- a/miniwget.c\n++++ b/miniwget.c\n+@@ -444,7 +444,7 @@ miniwget3(const char * host,\n+                  \"GET %s HTTP/%s\\r\\n\"\n+ \t\t\t     \"Host: %s:%d\\r\\n\"\n+ \t\t\t\t \"Connection: Close\\r\\n\"\n+-\t\t\t\t \"User-Agent: \" OS_STRING \", \" UPNP_VERSION_STRING \", MiniUPnPc/\" MINIUPNPC_VERSION_STRING \"\\r\\n\"\n++\t\t\t\t \"User-Agent: \" UPNP_VERSION_STRING \"\\r\\n\"\n+ \n+ \t\t\t\t \"\\r\\n\",\n+ \t\t\t   path, httpversion, host, port);"
      },
      {
        "sha": "a1cc9b50d1509379b121ba3f228821cced0485f9",
        "filename": "depends/patches/miniupnpc/dont_use_wingen.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/miniupnpc/dont_use_wingen.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/miniupnpc/dont_use_wingen.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/miniupnpc/dont_use_wingen.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,26 +0,0 @@\n-commit e8077044df239bcf0d9e9980b0e1afb9f1f5c446\n-Author: fanquake <fanquake@gmail.com>\n-Date:   Tue Aug 18 20:50:19 2020 +0800\n-\n-    Don't use wingenminiupnpcstrings when generating miniupnpcstrings.h\n-\n-    The wingenminiupnpcstrings tool is used on Windows to generate version\n-    information. This information is irrelevant for us, and trying to use\n-    wingenminiupnpcstrings would cause builds to fail, so just don't use it.\n-\n-    We should be able to drop this once we are using 2.1 or later. See\n-    upstream commit: 9663c55c61408fdcc39a82987d2243f816b22932.\n-\n-diff --git a/Makefile.mingw b/Makefile.mingw\n-index 574720e..fcc17bb 100644\n---- a/Makefile.mingw\n-+++ b/Makefile.mingw\n-@@ -74,7 +74,7 @@ wingenminiupnpcstrings:\twingenminiupnpcstrings.o\n-\n- wingenminiupnpcstrings.o:\twingenminiupnpcstrings.c\n-\n--miniupnpcstrings.h: miniupnpcstrings.h.in wingenminiupnpcstrings\n-+miniupnpcstrings.h: miniupnpcstrings.h.in\n- \twingenminiupnpcstrings $< $@\n-\n- minixml.o:\tminixml.c minixml.h"
      },
      {
        "sha": "d6c58c102fb321794eeca68b85afd4207d9bdeca",
        "filename": "depends/patches/native_cctools/ld64_disable_threading.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/native_cctools/ld64_disable_threading.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/native_cctools/ld64_disable_threading.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_cctools/ld64_disable_threading.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,26 +0,0 @@\n-commit 584668415039adeed073decee7e04de28248afd3\n-Author: fanquake <fanquake@gmail.com>\n-Date:   Tue Aug 18 01:20:24 2020 +0000\n-\n-    Disable threading to fix non-determinism\n-\n-    A bug in the file parser can cause dependencies to be calculated\n-    differently based on which files have already been parsed. This is more\n-    likely to occur on systems with more CPUs.\n-\n-    Just disable threading for now. There is no noticable slowdown.\n-\n-    See #9891.\n-\n-diff --git a/cctools/ld64/src/ld/InputFiles.h b/cctools/ld64/src/ld/InputFiles.h\n-index ef9c756..90a70b6 100644\n---- a/cctools/ld64/src/ld/InputFiles.h\n-+++ b/cctools/ld64/src/ld/InputFiles.h\n-@@ -25,7 +25,6 @@\n- #ifndef __INPUT_FILES_H__\n- #define __INPUT_FILES_H__\n-\n--#define HAVE_PTHREADS 1\n-\n- #include <stdlib.h>\n- #include <sys/types.h>"
      },
      {
        "sha": "8ab0993dc4de142ab7766a500640be92540fe80f",
        "filename": "depends/patches/native_cdrkit/cdrkit-deterministic.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 86,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/native_cdrkit/cdrkit-deterministic.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/native_cdrkit/cdrkit-deterministic.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_cdrkit/cdrkit-deterministic.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,86 +0,0 @@\n---- cdrkit-1.1.11.old/genisoimage/tree.c\t2008-10-21 19:57:47.000000000 -0400\n-+++ cdrkit-1.1.11/genisoimage/tree.c\t2013-12-06 00:23:18.489622668 -0500\n-@@ -1139,8 +1139,9 @@\n- scan_directory_tree(struct directory *this_dir, char *path, \n- \t\t\t\t\t\t  struct directory_entry *de)\n- {\n--\tDIR\t\t*current_dir;\n-+        int             current_file;\n- \tchar\t\twhole_path[PATH_MAX];\n-+        struct dirent  **d_list;\n- \tstruct dirent\t*d_entry;\n- \tstruct directory *parent;\n- \tint\t\tdflag;\n-@@ -1164,7 +1165,8 @@\n- \tthis_dir->dir_flags |= DIR_WAS_SCANNED;\n- \n- \terrno = 0;\t/* Paranoia */\n--\tcurrent_dir = opendir(path);\n-+\t//current_dir = opendir(path);\n-+        current_file = scandir(path, &d_list, NULL, alphasort);\n- \td_entry = NULL;\n- \n- \t/*\n-@@ -1173,12 +1175,12 @@\n- \t */\n- \told_path = path;\n- \n--\tif (current_dir) {\n-+\tif (current_file >= 0) {\n- \t\terrno = 0;\n--\t\td_entry = readdir(current_dir);\n-+\t\td_entry = d_list[0];\n- \t}\n- \n--\tif (!current_dir || !d_entry) {\n-+\tif (current_file < 0 || !d_entry) {\n- \t\tint\tret = 1;\n- \n- #ifdef\tUSE_LIBSCHILY\n-@@ -1191,8 +1193,8 @@\n- \t\t\tde->isorec.flags[0] &= ~ISO_DIRECTORY;\n- \t\t\tret = 0;\n- \t\t}\n--\t\tif (current_dir)\n--\t\t\tclosedir(current_dir);\n-+\t\tif(d_list)\n-+\t\t\tfree(d_list);\n- \t\treturn (ret);\n- \t}\n- #ifdef\tABORT_DEEP_ISO_ONLY\n-@@ -1208,7 +1210,7 @@\n- \t\t\terrmsgno(EX_BAD, \"use Rock Ridge extensions via -R or -r,\\n\");\n- \t\t\terrmsgno(EX_BAD, \"or allow deep ISO9660 directory nesting via -D.\\n\");\n- \t\t}\n--\t\tclosedir(current_dir);\n-+\t\tfree(d_list);\n- \t\treturn (1);\n- \t}\n- #endif\n-@@ -1250,13 +1252,13 @@\n- \t\t * The first time through, skip this, since we already asked\n- \t\t * for the first entry when we opened the directory.\n- \t\t */\n--\t\tif (dflag)\n--\t\t\td_entry = readdir(current_dir);\n-+\t\tif (dflag && current_file >= 0)\n-+\t\t\td_entry = d_list[current_file];\n- \t\tdflag++;\n- \n--\t\tif (!d_entry)\n-+\t\tif (current_file < 0)\n- \t\t\tbreak;\n--\n-+                current_file--;\n- \t\t/* OK, got a valid entry */\n- \n- \t\t/* If we do not want all files, then pitch the backups. */\n-@@ -1348,7 +1350,7 @@\n- \t\tinsert_file_entry(this_dir, whole_path, d_entry->d_name);\n- #endif\t/* APPLE_HYB */\n- \t}\n--\tclosedir(current_dir);\n-+\tfree(d_list);\n- \n- #ifdef APPLE_HYB\n- \t/*"
      },
      {
        "sha": "f6b2c9fc8015a0eef744bda87ede8e230aa6b3a8",
        "filename": "depends/patches/qt/drop_lrelease_dependency.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/drop_lrelease_dependency.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/drop_lrelease_dependency.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/drop_lrelease_dependency.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,20 +0,0 @@\n-commit 67b3ed7406e1d0762188dbad2c44a06824ba0778\n-Author: fanquake <fanquake@gmail.com>\n-Date:   Tue Aug 18 15:24:01 2020 +0800\n-\n-    Drop dependency on lrelease\n-\n-    Qts buildsystem insists on using the installed lrelease, but gets\n-    confused about how to find it. Since we manually control the build\n-    order, just drop the dependency.\n-\n-    See #9469\n-\n-diff --git a/qttranslations/translations/translations.pro b/qttranslations/translations/translations.pro\n-index 694544c..eff339d 100644\n---- a/qttranslations/translations/translations.pro\n-+++ b/qttranslations/translations/translations.pro\n-@@ -109,3 +109,2 @@ updateqm.commands = $$LRELEASE ${QMAKE_FILE_IN} -qm ${QMAKE_FILE_OUT}\n- silent:updateqm.commands = @echo lrelease ${QMAKE_FILE_IN} && $$updateqm.commands\n--updateqm.depends = $$LRELEASE_EXE\n- updateqm.name = LRELEASE ${QMAKE_FILE_IN}"
      },
      {
        "sha": "a186aeb8f6cfeb8f174866374686c9b516954195",
        "filename": "depends/patches/qt/fix_android_jni_static.patch",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/fix_android_jni_static.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/fix_android_jni_static.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_android_jni_static.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,6 +1,6 @@\n --- old/qtbase/src/plugins/platforms/android/androidjnimain.cpp\n +++ new/qtbase/src/plugins/platforms/android/androidjnimain.cpp\n-@@ -890,6 +890,14 @@\n+@@ -898,6 +898,14 @@\n          __android_log_print(ANDROID_LOG_FATAL, \"Qt\", \"registerNatives failed\");\n          return -1;\n      }"
      },
      {
        "sha": "195e1c5e592a15eeb20688a241aec245ea33e2f1",
        "filename": "depends/patches/qt/fix_android_pch.patch",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/fix_android_pch.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/fix_android_pch.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_android_pch.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,10 @@\n+--- old/qtbase/mkspecs/common/android-base-head.conf\n++++ new/qtbase/mkspecs/common/android-base-head.conf\n+@@ -72,6 +72,6 @@ CROSS_COMPILE = $$NDK_TOOLCHAIN_PATH/bin/$$NDK_TOOLS_PREFIX-\n+ QMAKE_PCH_OUTPUT_EXT    = .gch\n+\n+ QMAKE_CFLAGS_PRECOMPILE       = -x c-header -c ${QMAKE_PCH_INPUT} -o ${QMAKE_PCH_OUTPUT}\n+-QMAKE_CFLAGS_USE_PRECOMPILE   = -include ${QMAKE_PCH_OUTPUT_BASE}\n++QMAKE_CFLAGS_USE_PRECOMPILE   = -include-pch ${QMAKE_PCH_OUTPUT}\n+ QMAKE_CXXFLAGS_PRECOMPILE     = -x c++-header -c ${QMAKE_PCH_INPUT} -o ${QMAKE_PCH_OUTPUT}\n+ QMAKE_CXXFLAGS_USE_PRECOMPILE = $$QMAKE_CFLAGS_USE_PRECOMPILE"
      },
      {
        "sha": "13bfff9776474028c5165f9e3d5e64bee3d576e5",
        "filename": "depends/patches/qt/fix_android_qmake_conf.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_android_qmake_conf.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_android_qmake_conf.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_android_qmake_conf.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,20 +0,0 @@\n---- old/qtbase/mkspecs/android-clang/qmake.conf\n-+++ new/qtbase/mkspecs/android-clang/qmake.conf\n-@@ -30,7 +30,7 @@\n-     QMAKE_CFLAGS += -target mips64el-none-linux-android\n- \n- QMAKE_CFLAGS += -gcc-toolchain $$NDK_TOOLCHAIN_PATH\n--QMAKE_LINK    = $$QMAKE_CXX $$QMAKE_CFLAGS -Wl,--exclude-libs,libgcc.a\n-+QMAKE_LINK    = $$QMAKE_CXX $$QMAKE_CFLAGS -Wl,--exclude-libs,libgcc.a -nostdlib++\n- QMAKE_CFLAGS += -DANDROID_HAS_WSTRING --sysroot=$$NDK_ROOT/sysroot \\\n-                 -isystem $$NDK_ROOT/sysroot/usr/include/$$NDK_TOOLS_PREFIX \\\n-                 -isystem $$NDK_ROOT/sources/cxx-stl/llvm-libc++/include \\\n-@@ -40,7 +40,7 @@\n- ANDROID_SOURCES_CXX_STL_LIBDIR = $$NDK_ROOT/sources/cxx-stl/llvm-libc++/libs/$$ANDROID_TARGET_ARCH\n- \n- ANDROID_STDCPP_PATH = $$ANDROID_SOURCES_CXX_STL_LIBDIR/libc++_shared.so\n--ANDROID_CXX_STL_LIBS = -lc++\n-+ANDROID_CXX_STL_LIBS = -lc++_shared\n- \n- QMAKE_ARM_CFLAGS_RELEASE                   = -Oz\n- QMAKE_ARM_CFLAGS_RELEASE_WITH_DEBUGINFO    = -g -Oz"
      },
      {
        "sha": "0d7dd647debca93eb5383ee72f6d4db573dabaac",
        "filename": "depends/patches/qt/fix_configure_mac.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 50,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_configure_mac.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_configure_mac.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_configure_mac.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,50 +0,0 @@\n---- old/qtbase/mkspecs/features/mac/sdk.prf\t2018-02-08 10:24:48.000000000 -0800\n-+++ new/qtbase/mkspecs/features/mac/sdk.prf\t2018-03-23 10:38:56.000000000 -0700\n-@@ -8,21 +8,21 @@\n- defineReplace(xcodeSDKInfo) {\n-     info = $$1\n-     equals(info, \"Path\"): \\\n--        info = --show-sdk-path\n-+        infoarg = --show-sdk-path\n-     equals(info, \"PlatformPath\"): \\\n--        info = --show-sdk-platform-path\n-+        infoarg = --show-sdk-platform-path\n-     equals(info, \"SDKVersion\"): \\\n--        info = --show-sdk-version\n-+        infoarg = --show-sdk-version\n-     sdk = $$2\n-     isEmpty(sdk): \\\n-         sdk = $$QMAKE_MAC_SDK\n- \n-     isEmpty(QMAKE_MAC_SDK.$${sdk}.$${info}) {\n--        QMAKE_MAC_SDK.$${sdk}.$${info} = $$system(\"/usr/bin/xcrun --sdk $$sdk $$info 2>/dev/null\")\n-+        QMAKE_MAC_SDK.$${sdk}.$${info} = $$system(\"/usr/bin/xcrun --sdk $$sdk $$infoarg 2>/dev/null\")\n-         # --show-sdk-platform-path won't work for Command Line Tools; this is fine\n-         # only used by the XCTest backend to testlib\n--        isEmpty(QMAKE_MAC_SDK.$${sdk}.$${info}):if(!isEmpty(QMAKE_XCODEBUILD_PATH)|!equals(info, \"--show-sdk-platform-path\")): \\\n--            error(\"Could not resolve SDK $$info for \\'$$sdk\\'\")\n-+        isEmpty(QMAKE_MAC_SDK.$${sdk}.$${info}):if(!isEmpty(QMAKE_XCODEBUILD_PATH)|!equals(infoarg, \"--show-sdk-platform-path\")): \\\n-+            error(\"Could not resolve SDK $$info for \\'$$sdk\\' using $$infoarg\")\n-         cache(QMAKE_MAC_SDK.$${sdk}.$${info}, set stash, QMAKE_MAC_SDK.$${sdk}.$${info})\n-     }\n-\n---- old/qtbase/configure\t2018-02-08 10:24:48.000000000 -0800\n-+++ new/qtbase/configure\t2018-03-23 05:42:29.000000000 -0700\n-@@ -232,8 +232,13 @@\n- \n-     sdk=$(getSingleQMakeVariable \"QMAKE_MAC_SDK\" \"$1\")\n-     if [ -z \"$sdk\" ]; then echo \"QMAKE_MAC_SDK must be set when building on Mac\" >&2; exit 1; fi\n--    sysroot=$(/usr/bin/xcrun --sdk $sdk --show-sdk-path 2>/dev/null)\n--    if [ -z \"$sysroot\" ]; then echo \"Failed to resolve SDK path for '$sdk'\" >&2; exit 1; fi\n-+    sysroot=$(getSingleQMakeVariable \"QMAKE_MAC_SDK_PATH\" \"$1\")\n-+\n-+    echo \"sysroot pre-configured as $sysroot\";\n-+    if [ -z \"$sysroot\" ]; then\n-+       sysroot=$(/usr/bin/xcrun --sdk $sdk --show-sdk-path 2>/dev/null)\n-+       if [ -z \"$sysroot\" ]; then echo \"Failed to resolve SDK path for '$sdk'\" >&2; exit 1; fi\n-+    fi\n- \n-     case \"$sdk\" in\n-         macosx*)\n-\n-"
      },
      {
        "sha": "d1a15373f44d9fd9028f578ed658ddb1582dcbd8",
        "filename": "depends/patches/qt/fix_lib_paths.patch",
        "status": "added",
        "additions": 193,
        "deletions": 0,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/fix_lib_paths.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/fix_lib_paths.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_lib_paths.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,193 @@\n+--- old/qtbase/mkspecs/common/mac.conf\n++++ new/qtbase/mkspecs/common/mac.conf\n+@@ -14,7 +14,6 @@\n+ \n+ QMAKE_RESOURCE          = /Developer/Tools/Rez\n+ QMAKE_EXTENSION_SHLIB   = dylib\n+-QMAKE_EXTENSIONS_AUX_SHLIB = tbd\n+ QMAKE_LIBDIR            =\n+ \n+ # sdk.prf will prefix the proper SDK sysroot\n+\n+--- old/qtbase/mkspecs/features/qmake_use.prf\n++++ new/qtbase/mkspecs/features/qmake_use.prf\n+@@ -22,6 +22,8 @@\n+         !defined(QMAKE_LIBS_$$nu, var): \\\n+             error(\"Library '$$lower($$replace(nu, _, -))' is not defined.\")\n+ \n++        QMAKE_LIBDIR += $$eval(QMAKE_LIBDIR_$$nu)\n++\n+         debug: \\\n+             LIBS$${suffix} += $$eval(QMAKE_LIBS_$${nu}_DEBUG) $$eval(QMAKE_LIBS_$$nu)\n+         else: \\\n+\n+--- old/qtbase/mkspecs/features/qt_configure.prf\n++++ new/qtbase/mkspecs/features/qt_configure.prf\n+@@ -526,98 +526,23 @@\n+     return($$sysrootified)\n+ }\n+ \n+-# libs-var, libs, in-paths, out-paths-var\n++# libs-var, libs, in-paths\n+ defineTest(qtConfResolveLibs) {\n+-    ret = true\n+-    paths = $$3\n+-    out =\n+-    copy = false\n+-    for (l, 2) {\n+-        $$copy {\n+-            copy = false\n+-            out += $$l\n+-        } else: equals(l, \"-s\") {\n+-            # em++ flag to link libraries from emscripten-ports; passed on literally.\n+-            copy = true\n+-            out += $$l\n+-        } else: contains(l, \"^-L.*\") {\n+-            lp = $$replace(l, \"^-L\", )\n+-            gcc: lp = $$qtGccSysrootifiedPath($$lp)\n+-            !exists($$lp/.) {\n+-                qtLog(\"Library path $$val_escape(lp) is invalid.\")\n+-                ret = false\n+-            } else {\n+-                paths += $$lp\n+-            }\n+-        } else: contains(l, \"^-l.*\") {\n+-            lib = $$replace(l, \"^-l\", )\n+-            lcan =\n+-            integrity:contains(lib, \"^.*\\\\.a\") {\n+-                # INTEGRITY compiler searches for exact filename\n+-                # if -l argument has .a suffix\n+-                lcan += $${lib}\n+-            } else: contains(lib, \"^:.*\") {\n+-                # Use exact filename when -l:filename syntax is used.\n+-                lib ~= s/^://\n+-                lcan += $${lib}\n+-            } else: unix {\n+-                # Under UNIX, we look for actual shared libraries, in addition\n+-                # to static ones.\n+-                shexts = $$QMAKE_EXTENSION_SHLIB $$QMAKE_EXTENSIONS_AUX_SHLIB\n+-                for (ext, shexts) {\n+-                    lcan += $${QMAKE_PREFIX_SHLIB}$${lib}.$${ext}\n+-                }\n+-                lcan += \\\n+-                    $${QMAKE_PREFIX_STATICLIB}$${lib}.$${QMAKE_EXTENSION_STATICLIB}\n+-            } else {\n+-                # Under Windows, we look only for static libraries, as even for DLLs\n+-                # one actually links against a static import library.\n+-                mingw {\n+-                    lcan += \\\n+-                        # MinGW supports UNIX-style library naming in addition to\n+-                        # the MSVC style.\n+-                        lib$${lib}.dll.a lib$${lib}.a \\\n+-                        # Fun fact: prefix-less libraries are also supported.\n+-                        $${lib}.dll.a $${lib}.a\n+-                }\n+-                lcan += $${lib}.lib\n+-            }\n+-            l = $$qtConfFindInPathList($$lcan, $$paths $$EXTRA_LIBDIR $$QMAKE_DEFAULT_LIBDIRS)\n+-            isEmpty(l) {\n+-                qtLog(\"None of [$$val_escape(lcan)] found in [$$val_escape(paths)] and global paths.\")\n+-                ret = false\n+-            } else {\n+-                out += $$l\n+-            }\n+-        } else {\n+-            out += $$l\n+-        }\n+-    }\n+-    $$1 = $$out\n++    for (path, 3): \\\n++        pre_lflags += -L$$path\n++    $$1 = $$pre_lflags $$2\n+     export($$1)\n+-    !isEmpty(4) {\n+-        $$4 = $$paths\n+-        export($$4)\n+-    }\n+-    return($$ret)\n+-}\n+-\n+-# source-var\n+-defineTest(qtConfResolveAllLibs) {\n+-    ret = true\n+-    !qtConfResolveLibs($${1}.libs, $$eval($${1}.libs), , $${1}.libdirs): \\\n+-        ret = false\n+-    for (b, $${1}.builds._KEYS_): \\\n+-        !qtConfResolveLibs($${1}.builds.$${b}, $$eval($${1}.builds.$${b}), $$eval($${1}.libdirs), ): \\\n+-            ret = false\n+-    return($$ret)\n++    return(true)\n+ }\n+ \n+ # libs-var, in-paths, libs\n+ defineTest(qtConfResolvePathLibs) {\n+     ret = true\n+-    gcc: 2 = $$qtGccSysrootifiedPaths($$2)\n+-    for (libdir, 2) {\n++    gcc: \\\n++        local_paths = $$qtGccSysrootifiedPaths($$2)\n++    else: \\\n++        local_paths = $$2\n++    for (libdir, local_paths) {\n+         !exists($$libdir/.) {\n+             qtLog(\"Library path $$val_escape(libdir) is invalid.\")\n+             ret = false\n+@@ -667,8 +592,11 @@\n+ # includes-var, in-paths, test-object-var\n+ defineTest(qtConfResolvePathIncs) {\n+     ret = true\n+-    gcc: 2 = $$qtGccSysrootifiedPaths($$2)\n+-    for (incdir, 2) {\n++    gcc: \\\n++        local_paths = $$qtGccSysrootifiedPaths($$2)\n++    else: \\\n++        local_paths = $$2\n++    for (incdir, local_paths) {\n+         !exists($$incdir/.) {\n+             qtLog(\"Include path $$val_escape(incdir) is invalid.\")\n+             ret = false\n+@@ -727,6 +655,7 @@\n+         vars += $$eval(config.commandline.rev_assignments.$${iv})\n+         defined(config.input.$${iv}, var) {\n+             eval($${1}.builds.$${b} = $$eval(config.input.$${iv}))\n++            export($${1}.builds.$${b})\n+             $${1}.builds._KEYS_ *= $${b}\n+             any = true\n+         } else {\n+@@ -741,11 +670,14 @@\n+         export($${1}.builds._KEYS_)\n+         # we also reset the generic libs, to avoid surprises.\n+         $${1}.libs =\n++        export($${1}.libs)\n+     }\n+ \n+     # direct libs. overwrites inline libs.\n+-    defined(config.input.$${input}.libs, var): \\\n++    defined(config.input.$${input}.libs, var) {\n+         eval($${1}.libs = $$eval(config.input.$${input}.libs))\n++        export($${1}.libs)\n++    }\n+ \n+     includes = $$eval(config.input.$${input}.incdir)\n+ \n+@@ -754,6 +686,7 @@\n+     !isEmpty(prefix) {\n+         includes += $$prefix/include\n+         $${1}.libs = -L$$prefix/lib $$eval($${1}.libs)\n++        export($${1}.libs)\n+     }\n+ \n+     libdir = $$eval(config.input.$${input}.libdir)\n+@@ -762,11 +695,9 @@\n+         for (ld, libdir): \\\n+             libs += -L$$ld\n+         $${1}.libs = $$libs $$eval($${1}.libs)\n++        export($${1}.libs)\n+     }\n+ \n+-    !qtConfResolveAllLibs($$1): \\\n+-        return(false)\n+-\n+     !qtConfResolvePathIncs($${1}.includedir, $$includes, $$2): \\\n+         return(false)\n+ "
      },
      {
        "sha": "e4313770e5a8b9c12bbebbc8bb75b8a7585a1992",
        "filename": "depends/patches/qt/fix_limits_header.patch",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/fix_limits_header.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/fix_limits_header.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_limits_header.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,44 @@\n+Fix compiling with GCC 11\n+\n+See: https://bugreports.qt.io/browse/QTBUG-90395.\n+\n+Upstream commits:\n+ - Qt 5.15 -- unavailable as open source\n+ - Qt 6.0: b2af6332ea37e45ab230a7a5d2d278f86d961b83\n+ - Qt 6.1: 9c56d4da2ff631a8c1c30475bd792f6c86bda53c\n+\n+--- old/qtbase/src/corelib/global/qendian.h\n++++ new/qtbase/src/corelib/global/qendian.h\n+@@ -44,6 +44,8 @@\n+ #include <QtCore/qfloat16.h>\n+ #include <QtCore/qglobal.h>\n+ \n++#include <limits>\n++\n+ // include stdlib.h and hope that it defines __GLIBC__ for glibc-based systems\n+ #include <stdlib.h>\n+ #include <string.h>\n+\n+--- old/qtbase/src/corelib/tools/qbytearraymatcher.h\n++++ new/qtbase/src/corelib/tools/qbytearraymatcher.h\n+@@ -42,6 +42,8 @@\n+ \n+ #include <QtCore/qbytearray.h>\n+ \n++#include <limits>\n++\n+ QT_BEGIN_NAMESPACE\n+ \n+ \n+\n+--- old/qtbase/src/tools/moc/generator.cpp\n++++ new/qtbase/src/tools/moc/generator.cpp\n+@@ -40,6 +40,8 @@\n+ #include <QtCore/qplugin.h>\n+ #include <QtCore/qstringview.h>\n+ \n++#include <limits>\n++\n+ #include <math.h>\n+ #include <stdio.h>\n+ "
      },
      {
        "sha": "67f76f1d856ef9256fe31bd1db54f1c04f5eee63",
        "filename": "depends/patches/qt/fix_mingw_cross_compile.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_mingw_cross_compile.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_mingw_cross_compile.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_mingw_cross_compile.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,25 +0,0 @@\n-commit 5a992a549adfe5a587bbcd6cd2b2cee47d236e27\n-Author: fanquake <fanquake@gmail.com>\n-Date:   Fri Sep 4 08:13:44 2020 +0800\n-\n-    Work around broken mingw cross-compilation\n-\n-    See upstream issues:\n-    https://bugreports.qt.io/browse/QTBUG-63637\n-    https://bugreports.qt.io/browse/QTBUG-63659\n-    https://codereview.qt-project.org/q/8bebded9\n-\n-    We should be able to drop this once we are building qt 5.10.1 or later.\n-\n-    Added in #12971.\n-\n-diff --git a/qtbase/mkspecs/win32-g++/qmake.conf b/qtbase/mkspecs/win32-g++/qmake.conf\n-index e071a0d1..ad229b10 100644\n---- a/qtbase/mkspecs/win32-g++/qmake.conf\n-+++ b/qtbase/mkspecs/win32-g++/qmake.conf\n-@@ -87,3 +87,5 @@ QMAKE_NM                = $${CROSS_COMPILE}nm -P\n- include(../common/angle.conf)\n-\n- load(qt_config)\n-+QMAKE_LINK_OBJECT_MAX = 10\n-+QMAKE_LINK_OBJECT_SCRIPT = object_script"
      },
      {
        "sha": "13723561384d8b7e80fc9e3879559d195ce5f098",
        "filename": "depends/patches/qt/fix_no_printer.patch",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/fix_no_printer.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/fix_no_printer.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_no_printer.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -10,10 +10,10 @@\n \n --- x/qtbase/src/plugins/plugins.pro\n +++ y/qtbase/src/plugins/plugins.pro\n-@@ -8,6 +8,3 @@ qtHaveModule(gui) {\n-     qtConfig(imageformatplugin): SUBDIRS *= imageformats\n+@@ -9,6 +9,3 @@ qtHaveModule(gui) {\n      !android:qtConfig(library): SUBDIRS *= generic\n  }\n+ qtHaveModule(widgets): SUBDIRS += styles\n -\n -!winrt:qtHaveModule(printsupport): \\\n -    SUBDIRS += printsupport"
      },
      {
        "sha": "d37b6c777646c39bd09b4ee63e8c98047b49bab4",
        "filename": "depends/patches/qt/fix_powerpc_libpng.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_powerpc_libpng.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_powerpc_libpng.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_powerpc_libpng.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,23 +0,0 @@\n-commit 6f9feb773a43c5abfa3455da2e324180e789285b\n-Author: fanquake <fanquake@gmail.com>\n-Date:   Tue Sep 15 21:44:31 2020 +0800\n-\n-    Fix PowerPC build of libpng\n-\n-    See https://bugreports.qt.io/browse/QTBUG-66388.\n-\n-    Can be dropped when we are building qt 5.12.0 or later.\n-\n-diff --git a/qtbase/src/3rdparty/libpng/libpng.pro b/qtbase/src/3rdparty/libpng/libpng.pro\n-index 577b61d8..a2f56669 100644\n---- a/qtbase/src/3rdparty/libpng/libpng.pro\n-+++ b/qtbase/src/3rdparty/libpng/libpng.pro\n-@@ -10,7 +10,7 @@ MODULE_INCLUDEPATH = $$PWD\n- \n- load(qt_helper_lib)\n- \n--DEFINES += PNG_ARM_NEON_OPT=0\n-+DEFINES += PNG_ARM_NEON_OPT=0 PNG_POWERPC_VSX_OPT=0\n- SOURCES += \\\n-     png.c \\\n-     pngerror.c \\"
      },
      {
        "sha": "3cfcc22f03a0030af501d01ce74bbb9d39eafe66",
        "filename": "depends/patches/qt/fix_qpainter_non_determinism.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 63,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_qpainter_non_determinism.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_qpainter_non_determinism.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_qpainter_non_determinism.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,63 +0,0 @@\n-commit 2a8f7dc6ddfc414a66491522501c1574a1343ee1\n-Author: Andrew Chow <achow101-github@achow101.com>\n-Date:   Sat Nov 21 01:11:04 2020 -0500\n-\n-    build: Fix determinism issue when building with Clang 8\n-\n-    When building Qt with LLVM/Clang 8 under -O3 (the default), we run into\n-    a determinism issue in `qt_interset_spans`. The issue has been fixed for\n-    LLVM/Clang 9, see\n-    https://github.com/llvm/llvm-project/commit/db101864bdc938deb1d63fe4f7da761bd38e5cae\n-    and https://reviews.llvm.org/D64601, however this fix was not backported\n-    to 8.x. Once LLVM/Clang 9 is used, this patch can be dropped.\n-\n-    The particular issue appears to be an optimization done by -O3 which\n-    adds a temporary variable for `spans->y` in `qt_intersect_spans`. When\n-    it does this, sometimes it chooses to use a 32-bit movs instruction\n-    (movswl), and other times it chooses a 64-bit movs instruction (movswq).\n-    By patching `qt_intersect_spans` to always make a temporary variable for\n-    `spans->y`, we are able to sidestep this problem.\n-\n-diff --git a/qtbase/src/gui/painting/qpaintengine_raster.cpp b/qtbase/src/gui/painting/qpaintengine_raster.cpp\n-index 92ab6e8375..f018009e0b 100644\n---- a/qtbase/src/gui/painting/qpaintengine_raster.cpp\n-+++ b/qtbase/src/gui/painting/qpaintengine_raster.cpp\n-@@ -3971,22 +3971,23 @@ static const QSpan *qt_intersect_spans(const QClipData *clip, int *currentClip,\n-     const QSpan *clipEnd = clip->m_spans + clip->count;\n- \n-     while (available && spans < end ) {\n-+        const short spans_y = spans->y;\n-         if (clipSpans >= clipEnd) {\n-             spans = end;\n-             break;\n-         }\n--        if (clipSpans->y > spans->y) {\n-+        if (clipSpans->y > spans_y) {\n-             ++spans;\n-             continue;\n-         }\n--        if (spans->y != clipSpans->y) {\n--            if (spans->y < clip->count && clip->m_clipLines[spans->y].spans)\n--                clipSpans = clip->m_clipLines[spans->y].spans;\n-+        if (spans_y != clipSpans->y) {\n-+            if (spans_y < clip->count && clip->m_clipLines[spans_y].spans)\n-+                clipSpans = clip->m_clipLines[spans_y].spans;\n-             else\n-                 ++clipSpans;\n-             continue;\n-         }\n--        Q_ASSERT(spans->y == clipSpans->y);\n-+        Q_ASSERT(spans_y == clipSpans->y);\n- \n-         int sx1 = spans->x;\n-         int sx2 = sx1 + spans->len;\n-@@ -4005,7 +4006,7 @@ static const QSpan *qt_intersect_spans(const QClipData *clip, int *currentClip,\n-         if (len) {\n-             out->x = qMax(sx1, cx1);\n-             out->len = qMin(sx2, cx2) - out->x;\n--            out->y = spans->y;\n-+            out->y = spans_y;\n-             out->coverage = qt_div_255(spans->coverage * clipSpans->coverage);\n-             ++out;\n-             --available;\n-"
      },
      {
        "sha": "a5de2b4b9ee34301b0be760bedb173d5ab157f5d",
        "filename": "depends/patches/qt/fix_qt_pkgconfig.patch",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/fix_qt_pkgconfig.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/fix_qt_pkgconfig.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_qt_pkgconfig.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -1,17 +1,17 @@\n --- old/qtbase/mkspecs/features/qt_module.prf\n +++ new/qtbase/mkspecs/features/qt_module.prf\n-@@ -264,7 +264,7 @@\n+@@ -269,7 +269,7 @@ load(qt_installs)\n  load(qt_targets)\n  \n  # this builds on top of qt_common\n--!internal_module:!lib_bundle:if(unix|mingw) {\n+-!internal_module:if(unix|mingw) {\n +if(unix|mingw):!if(darwin:debug_and_release:CONFIG(debug, debug|release)) {\n      CONFIG += create_pc\n      QMAKE_PKGCONFIG_DESTDIR = pkgconfig\n      host_build: \\\n-@@ -274,9 +274,9 @@\n-     QMAKE_PKGCONFIG_INCDIR = $$[QT_INSTALL_HEADERS/raw]\n-     QMAKE_PKGCONFIG_CFLAGS = -I${includedir}/$$MODULE_INCNAME\n+@@ -284,9 +284,9 @@ load(qt_targets)\n+         QMAKE_PKGCONFIG_CFLAGS = -D$$MODULE_DEFINE -I${includedir}/$$MODULE_INCNAME\n+     }\n      QMAKE_PKGCONFIG_NAME = $$replace(TARGET, ^Qt, \"Qt$$QT_MAJOR_VERSION \")\n -    QMAKE_PKGCONFIG_FILE = $$replace(TARGET, ^Qt, Qt$$QT_MAJOR_VERSION)\n +    QMAKE_PKGCONFIG_FILE = $$replace(TARGET, ^Qt, Qt$$QT_MAJOR_VERSION)$$qtPlatformTargetSuffix()\n@@ -20,4 +20,4 @@\n +        QMAKE_PKGCONFIG_REQUIRES += $$replace(QT.$${i}.name, ^Qt, Qt$$section(QT.$${i}.VERSION, ., 0, 0))$$qtPlatformTargetSuffix()\n      isEmpty(QMAKE_PKGCONFIG_DESCRIPTION): \\\n          QMAKE_PKGCONFIG_DESCRIPTION = $$replace(TARGET, ^Qt, \"Qt \") module\n-     pclib_replace.match = $$lib_replace.match\n+     !isEmpty(lib_replace0.match) {"
      },
      {
        "sha": "c1b07fe23afdbd7a2f204811e2aad132bd2d9dff",
        "filename": "depends/patches/qt/fix_rcc_determinism.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_rcc_determinism.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_rcc_determinism.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_rcc_determinism.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,15 +0,0 @@\n---- old/qtbase/src/tools/rcc/rcc.cpp\n-+++ new/qtbase/src/tools/rcc/rcc.cpp\n-@@ -207,7 +207,11 @@ void RCCFileInfo::writeDataInfo(RCCResourceLibrary &lib)\n-     if (lib.formatVersion() >= 2) {\n-         // last modified time stamp\n-         const QDateTime lastModified = m_fileInfo.lastModified();\n--        lib.writeNumber8(quint64(lastModified.isValid() ? lastModified.toMSecsSinceEpoch() : 0));\n-+        quint64 lastmod = quint64(lastModified.isValid() ? lastModified.toMSecsSinceEpoch() : 0);\n-+        static const quint64 sourceDate = 1000 * qgetenv(\"QT_RCC_SOURCE_DATE_OVERRIDE\").toULongLong();\n-+        if (sourceDate != 0)\n-+            lastmod = sourceDate;\n-+        lib.writeNumber8(lastmod);\n-         if (text || pass1)\n-             lib.writeChar('\\n');\n-     }"
      },
      {
        "sha": "e7f29f01f9cd7f250b86bbd038175aa6a0fb35b0",
        "filename": "depends/patches/qt/fix_riscv64_arch.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_riscv64_arch.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/fix_riscv64_arch.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_riscv64_arch.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,14 +0,0 @@\n-diff --git a/qtbase/src/3rdparty/double-conversion/include/double-conversion/utils.h b/qtbase/src/3rdparty/double-conversion/include/double-conversion/utils.h\n-index 20bfd36..93729fa 100644\n---- a/qtbase/src/3rdparty/double-conversion/include/double-conversion/utils.h\n-+++ b/qtbase/src/3rdparty/double-conversion/include/double-conversion/utils.h\n-@@ -65,7 +65,8 @@\n-     defined(__sparc__) || defined(__sparc) || defined(__s390__) || \\\n-     defined(__SH4__) || defined(__alpha__) || \\\n-     defined(_MIPS_ARCH_MIPS32R2) || \\\n--    defined(__AARCH64EL__)\n-+    defined(__AARCH64EL__) || defined(__aarch64__) || \\\n-+    defined(__riscv)\n- #define DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS 1\n- #elif defined(_M_IX86) || defined(__i386__) || defined(__i386)\n- #if defined(_WIN32)"
      },
      {
        "sha": "b0f1c98aa60c9d3442d7c596cd0fd39892a68176",
        "filename": "depends/patches/qt/freetype_back_compat.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 28,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/freetype_back_compat.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/freetype_back_compat.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/freetype_back_compat.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,28 +0,0 @@\n-commit 14bc77db61bf9d56f9b6c8b84aa02573605c19c6\n-Author: fanquake <fanquake@gmail.com>\n-Date:   Tue Aug 18 15:15:08 2020 +0800\n-\n-    Fix backwards compatibility with older Freetype versions at runtime\n-\n-    A few years ago, libfreetype introduced FT_Get_Font_Format() as an alias\n-    for FT_Get_X11_Font_Format(), but FT_Get_X11_Font_Format() was kept for abi\n-    backwards-compatibility.\n-\n-    Qt 5.9 introduced a call to FT_Get_Font_Format(). Replace it with FT_Get_X11_Font_Format()\n-    in order to remain compatibile with older freetype, which is still used by e.g. Ubuntu Trusty.\n-\n-    See #14348.\n-\n-diff --git a/qtbase/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp b/qtbase/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp\n-index 3f543755..8ecc1c8c 100644\n---- a/qtbase/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp\n-+++ b/qtbase/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp\n-@@ -898,7 +898,7 @@ bool QFontEngineFT::init(FaceId faceId, bool antialias, GlyphFormat format,\n-         }\n-     }\n- #if defined(FT_FONT_FORMATS_H)\n--    const char *fmt = FT_Get_Font_Format(face);\n-+    const char *fmt = FT_Get_X11_Font_Format(face);\n-     if (fmt && qstrncmp(fmt, \"CFF\", 4) == 0) {\n-         FT_Bool no_stem_darkening = true;\n-         FT_Error err = FT_Property_Get(qt_getFreetype(), \"cff\", \"no-stem-darkening\", &no_stem_darkening);"
      },
      {
        "sha": "190ab7a160e49bf135c6991e84edc4c27f6d15de",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -8,7 +8,6 @@ include(../common/clang-mac.conf)\n QMAKE_MAC_SDK_PATH=$${MAC_SDK_PATH}\n QMAKE_XCODE_VERSION = $${XCODE_VERSION}\n QMAKE_XCODE_DEVELOPER_PATH=/Developer\n-QMAKE_MACOSX_DEPLOYMENT_TARGET = $${MAC_MIN_VERSION}\n QMAKE_MAC_SDK=macosx\n QMAKE_MAC_SDK.macosx.Path = $${MAC_SDK_PATH}\n QMAKE_MAC_SDK.macosx.platform_name = macosx"
      },
      {
        "sha": "f4a6f09ee49b8caee40f13acbbbe2e72ff74b799",
        "filename": "depends/patches/qt/no-xlib.patch",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/no-xlib.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/no-xlib.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/no-xlib.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -22,23 +22,23 @@ index 7c62c2e2b3..c05c6c0a07 100644\n  #include <xcb/xfixes.h>\n  #include <xcb/xcb_image.h>\n  \n-@@ -384,6 +386,7 @@ void QXcbCursor::changeCursor(QCursor *cursor, QWindow *widget)\n-     w->setCursor(c, isBitmapCursor);\n+@@ -391,6 +393,7 @@ void QXcbCursor::changeCursor(QCursor *cursor, QWindow *window)\n+     xcb_flush(xcb_connection());\n  }\n  \n +#if QT_CONFIG(xcb_xlib) && QT_CONFIG(library)\n  static int cursorIdForShape(int cshape)\n  {\n      int cursorId = 0;\n-@@ -437,6 +440,7 @@ static int cursorIdForShape(int cshape)\n+@@ -444,6 +447,7 @@ static int cursorIdForShape(int cshape)\n      }\n      return cursorId;\n  }\n +#endif\n  \n  xcb_cursor_t QXcbCursor::createNonStandardCursor(int cshape)\n  {\n-@@ -558,7 +562,9 @@ static xcb_cursor_t loadCursor(void *dpy, int cshape)\n+@@ -556,7 +560,9 @@ static xcb_cursor_t loadCursor(void *dpy, int cshape)\n  xcb_cursor_t QXcbCursor::createFontCursor(int cshape)\n  {\n      xcb_connection_t *conn = xcb_connection();\n@@ -48,22 +48,23 @@ index 7c62c2e2b3..c05c6c0a07 100644\n      xcb_cursor_t cursor = XCB_NONE;\n  \n      // Try Xcursor first\n-@@ -589,6 +595,7 @@ xcb_cursor_t QXcbCursor::createFontCursor(int cshape)\n+@@ -585,7 +591,7 @@ xcb_cursor_t QXcbCursor::createFontCursor(int cshape)\n+ \n      // Non-standard X11 cursors are created from bitmaps\n      cursor = createNonStandardCursor(cshape);\n- \n+-\n +#if QT_CONFIG(xcb_xlib) && QT_CONFIG(library)\n      // Create a glpyh cursor if everything else failed\n      if (!cursor && cursorId) {\n          cursor = xcb_generate_id(conn);\n-@@ -596,6 +603,7 @@ xcb_cursor_t QXcbCursor::createFontCursor(int cshape)\n+@@ -593,6 +599,7 @@ xcb_cursor_t QXcbCursor::createFontCursor(int cshape)\n                                  cursorId, cursorId + 1,\n                                  0xFFFF, 0xFFFF, 0xFFFF, 0, 0, 0);\n      }\n +#endif\n  \n      if (cursor && cshape >= 0 && cshape < Qt::LastCursor && connection()->hasXFixes()) {\n-         const char *name = cursorNames[cshape];\n+         const char *name = cursorNames[cshape].front();\n -- \n 2.22.0\n "
      },
      {
        "sha": "b16635b572025b70996f22f8d44d8e4ebed11a3b",
        "filename": "depends/patches/qt/no_sdk_version_check.patch",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/no_sdk_version_check.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/no_sdk_version_check.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/no_sdk_version_check.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,20 @@\n+commit f5eb142cd04be2bc4ca610ed3b5b7e8ce3520ee3\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Tue Jan 5 16:08:49 2021 +0800\n+\n+    Don't invoke macOS SDK version checking\n+    \n+    This tries to use xcrun which is not available when cross-compiling.\n+\n+diff --git a/qtbase/mkspecs/features/mac/default_post.prf b/qtbase/mkspecs/features/mac/default_post.prf\n+index 92a9112bca6..447e186eb26 100644\n+--- a/qtbase/mkspecs/features/mac/default_post.prf\n++++ b/qtbase/mkspecs/features/mac/default_post.prf\n+@@ -8,7 +8,6 @@ contains(TEMPLATE, .*app) {\n+     !macx-xcode:if(isEmpty(BUILDS)|build_pass) {\n+         # Detect changes to the platform SDK\n+         QMAKE_EXTRA_VARIABLES += QMAKE_MAC_SDK QMAKE_MAC_SDK_VERSION QMAKE_XCODE_DEVELOPER_PATH\n+-        QMAKE_EXTRA_INCLUDES += $$shell_quote($$PWD/sdk.mk)\n+     }\n+ \n+     # Detect incompatible SDK versions"
      },
      {
        "sha": "8f2e900a840fbd3f19dd77772d1157cdefbe1527",
        "filename": "depends/patches/qt/qt.pro",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qt.pro?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,16 @@\n+# Create the super cache so modules will add themselves to it.\n+cache(, super)\n+\n+!QTDIR_build: cache(CONFIG, add, $$list(QTDIR_build))\n+\n+prl = no_install_prl\n+CONFIG += $$prl\n+cache(CONFIG, add stash, prl)\n+\n+TEMPLATE = subdirs\n+SUBDIRS = qtbase qttools qttranslations\n+\n+qttools.depends = qtbase\n+qttranslations.depends = qttools\n+\n+load(qt_configure)"
      },
      {
        "sha": "0358bea6e940384ada32e83fa8ed5bf987b90a14",
        "filename": "depends/patches/qt/qtbase-moc-ignore-gcc-macro.patch",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/qtbase-moc-ignore-gcc-macro.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/qtbase-moc-ignore-gcc-macro.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qtbase-moc-ignore-gcc-macro.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,17 @@\n+The moc executable loops through headers on CPLUS_INCLUDE_PATH and stumbles\n+on the GCC internal _GLIBCXX_VISIBILITY macro.  Tell it to ignore it as it is\n+not supposed to be looking there to begin with.\n+\n+Upstream report: https://bugreports.qt.io/browse/QTBUG-83160\n+\n+diff --git a/qtbase/src/tools/moc/main.cpp b/qtbase/src/tools/moc/main.cpp\n+--- a/qtbase/src/tools/moc/main.cpp\n++++ b/qtbase/src/tools/moc/main.cpp\n+@@ -188,6 +188,7 @@ int runMoc(int argc, char **argv)\n+     dummyVariadicFunctionMacro.arguments += Symbol(0, PP_IDENTIFIER, \"__VA_ARGS__\");\n+     pp.macros[\"__attribute__\"] = dummyVariadicFunctionMacro;\n+     pp.macros[\"__declspec\"] = dummyVariadicFunctionMacro;\n++    pp.macros[\"_GLIBCXX_VISIBILITY\"] = dummyVariadicFunctionMacro;\n+ \n+     QString filename;\n+     QString output;"
      },
      {
        "sha": "6ef71a094273503f3cdac2618e3877e428bfb52b",
        "filename": "depends/patches/qt/qttools_src.pro",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/qttools_src.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/qttools_src.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qttools_src.pro?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,6 @@\n+TEMPLATE = subdirs\n+SUBDIRS = linguist\n+\n+fb = force_bootstrap\n+CONFIG += $$fb\n+cache(CONFIG, add, fb)"
      },
      {
        "sha": "85c8ae2132af5ffc84c2269b9201d37389a14014",
        "filename": "depends/patches/qt/support_new_android_ndks.patch",
        "status": "added",
        "additions": 122,
        "deletions": 0,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/support_new_android_ndks.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/depends/patches/qt/support_new_android_ndks.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/support_new_android_ndks.patch?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -0,0 +1,122 @@\n+Follow Google's BuildSystemMaintainers doc to support future NDK releases.\n+\n+Upstream commit:\n+ - Qt 5.14: 9b14950ff600a4ce5a8698b67ab38907c50417f1\n+\n+--- old/qtbase/mkspecs/android-clang/qmake.conf\n++++ new/qtbase/mkspecs/android-clang/qmake.conf\n+@@ -14,43 +14,29 @@\n+ QMAKE_CC      = $$NDK_LLVM_PATH/bin/clang\n+ QMAKE_CXX     = $$NDK_LLVM_PATH/bin/clang++\n+ \n++# Follow https://android.googlesource.com/platform/ndk/+/ndk-release-r20/docs/BuildSystemMaintainers.md\n++\n+ equals(ANDROID_TARGET_ARCH, armeabi-v7a): \\\n+-    QMAKE_CFLAGS += -target armv7-none-linux-androideabi\n+-else: equals(ANDROID_TARGET_ARCH, armeabi): \\\n+-    QMAKE_CFLAGS += -target armv5te-none-linux-androideabi\n++    QMAKE_CFLAGS = -target armv7a-linux-androideabi$$replace(ANDROID_PLATFORM, \"android-\", \"\")\n+ else: equals(ANDROID_TARGET_ARCH, arm64-v8a): \\\n+-    QMAKE_CFLAGS += -target aarch64-none-linux-android\n++    QMAKE_CFLAGS = -target aarch64-linux-android$$replace(ANDROID_PLATFORM, \"android-\", \"\")\n+ else: equals(ANDROID_TARGET_ARCH, x86): \\\n+-    QMAKE_CFLAGS += -target i686-none-linux-android -mstackrealign\n++    QMAKE_CFLAGS = -target i686-linux-android$$replace(ANDROID_PLATFORM, \"android-\", \"\") -mstackrealign\n+ else: equals(ANDROID_TARGET_ARCH, x86_64): \\\n+-    QMAKE_CFLAGS += -target x86_64-none-linux-android\n+-else: equals(ANDROID_TARGET_ARCH, mips): \\\n+-    QMAKE_CFLAGS += -target mipsel-none-linux-android\n+-else: equals(ANDROID_TARGET_ARCH, mips64): \\\n+-    QMAKE_CFLAGS += -target mips64el-none-linux-android\n+-\n+-QMAKE_CFLAGS += -gcc-toolchain $$NDK_TOOLCHAIN_PATH -fno-limit-debug-info\n+-\n+-QMAKE_LINK    = $$QMAKE_CXX $$QMAKE_CFLAGS -Wl,--exclude-libs,libgcc.a -Wl,--exclude-libs,libatomic.a -nostdlib++\n+-equals(ANDROID_TARGET_ARCH, armeabi-v7a): QMAKE_LINK += -Wl,--exclude-libs,libunwind.a\n+-\n+-QMAKE_CFLAGS += -DANDROID_HAS_WSTRING --sysroot=$$NDK_ROOT/sysroot \\\n+-                -isystem $$NDK_ROOT/sysroot/usr/include/$$NDK_TOOLS_PREFIX \\\n+-                -isystem $$NDK_ROOT/sources/cxx-stl/llvm-libc++/include \\\n+-                -isystem $$NDK_ROOT/sources/android/support/include \\\n+-                -isystem $$NDK_ROOT/sources/cxx-stl/llvm-libc++abi/include\n++    QMAKE_CFLAGS = -target x86_64-linux-android$$replace(ANDROID_PLATFORM, \"android-\", \"\")\n+ \n+-ANDROID_SOURCES_CXX_STL_LIBDIR = $$NDK_ROOT/sources/cxx-stl/llvm-libc++/libs/$$ANDROID_TARGET_ARCH\n++QMAKE_CFLAGS += -fno-limit-debug-info\n+ \n+-ANDROID_STDCPP_PATH = $$ANDROID_SOURCES_CXX_STL_LIBDIR/libc++_shared.so\n++QMAKE_LINK    = $$QMAKE_CXX $$QMAKE_CFLAGS\n+ \n+-ANDROID_USE_LLVM = true\n++ANDROID_STDCPP_PATH = $$NDK_LLVM_PATH/sysroot/usr/lib/$$NDK_TOOLS_PREFIX/libc++_shared.so\n+ \n+-exists($$ANDROID_SOURCES_CXX_STL_LIBDIR/libc++.so): \\\n+-    ANDROID_CXX_STL_LIBS = -lc++\n+-else: \\\n+-    ANDROID_CXX_STL_LIBS = $$ANDROID_SOURCES_CXX_STL_LIBDIR/libc++.so.$$replace(ANDROID_PLATFORM, \"android-\", \"\")\n++ANDROID_USE_LLVM = true\n+ \n+-QMAKE_CFLAGS_OPTIMIZE_SIZE = -Oz\n++QMAKE_CFLAGS_OPTIMIZE_SIZE  = -Oz\n++QMAKE_LIBDIR_POST           =\n++QMAKE_LFLAGS                =\n++QMAKE_LIBS_PRIVATE          =\n++ANDROID_CXX_STL_LIBS        =\n+ \n+ include(../common/android-base-tail.conf)\n+\n+--- old/qtbase/mkspecs/common/android-base-head.conf\n++++ new/qtbase/mkspecs/common/android-base-head.conf\n+@@ -64,7 +58,6 @@\n+ }\n+ \n+ CONFIG += $$ANDROID_PLATFORM\n+-QMAKE_CFLAGS = -D__ANDROID_API__=$$replace(ANDROID_PLATFORM, \"android-\", \"\")\n+ \n+ ANDROID_PLATFORM_ROOT_PATH  = $$NDK_ROOT/platforms/$$ANDROID_PLATFORM/arch-$$ANDROID_ARCHITECTURE/\n+ \n+--- old/qtbase/mkspecs/common/android-base-tail.conf\n++++ new/qtbase/mkspecs/common/android-base-tail.conf\n+@@ -6,22 +6,17 @@\n+ QMAKE_CFLAGS += -fstack-protector-strong -DANDROID\n+ \n+ equals(ANDROID_TARGET_ARCH, armeabi-v7a): \\\n+-    QMAKE_CFLAGS += -march=armv7-a -mfloat-abi=softfp -mfpu=vfp -fno-builtin-memmove\n++    QMAKE_CFLAGS += -march=armv7-a -mfloat-abi=softfp -mfpu=vfp\n+ else: equals(ANDROID_TARGET_ARCH, armeabi): \\\n+-    QMAKE_CFLAGS += -march=armv5te -mtune=xscale -msoft-float -fno-builtin-memmove\n+-# -fno-builtin-memmove is used to workaround https://code.google.com/p/android/issues/detail?id=81692\n++    QMAKE_CFLAGS += -march=armv5te -mtune=xscale -msoft-float\n+ \n+ QMAKE_CFLAGS_WARN_ON    = -Wall -W\n+ QMAKE_CFLAGS_WARN_OFF   =\n+ equals(ANDROID_TARGET_ARCH, armeabi-v7a) | equals(ANDROID_TARGET_ARCH, armeabi) {\n+     CONFIG += optimize_size\n+     QMAKE_CFLAGS_DEBUG                     = -g -marm -O0\n+-    equals(ANDROID_TARGET_ARCH, armeabi):if(equals(NDK_TOOLCHAIN_VERSION, 4.8)|equals(NDK_TOOLCHAIN_VERSION, 4.9)) {\n+-        DEFINES += QT_OS_ANDROID_GCC_48_WORKAROUND\n+-    } else {\n+-        QMAKE_CFLAGS_RELEASE += -mthumb\n+-        QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += -mthumb\n+-    }\n++    QMAKE_CFLAGS_RELEASE += -mthumb\n++    QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += -mthumb\n+ }\n+ \n+ QMAKE_CFLAGS_SHLIB      = -fPIC\n+@@ -61,15 +56,12 @@\n+ QMAKE_RANLIB            = $${CROSS_COMPILE}ranlib\n+ \n+ QMAKE_INCDIR_POST       =\n+-QMAKE_LIBDIR_POST       = $$ANDROID_SOURCES_CXX_STL_LIBDIR\n+ QMAKE_INCDIR_X11        =\n+ QMAKE_LIBDIR_X11        =\n+ QMAKE_INCDIR_OPENGL     =\n+ QMAKE_LIBDIR_OPENGL     =\n+ \n+ QMAKE_LINK_SHLIB        = $$QMAKE_LINK\n+-QMAKE_LFLAGS            = --sysroot=$$ANDROID_PLATFORM_ROOT_PATH\n+-equals(ANDROID_TARGET_ARCH, x86_64) QMAKE_LFLAGS += -L$$ANDROID_PLATFORM_ROOT_PATH/usr/lib64\n+ QMAKE_LFLAGS_APP        = -Wl,--no-undefined -Wl,-z,noexecstack -shared\n+ QMAKE_LFLAGS_SHLIB      = -Wl,--no-undefined -Wl,-z,noexecstack -shared\n+ QMAKE_LFLAGS_PLUGIN     = $$QMAKE_LFLAGS_SHLIB"
      },
      {
        "sha": "165abf3e2e7a6d7cdbe7b960ec15dbcfaf0a9dfd",
        "filename": "depends/patches/qt/xkb-default.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/xkb-default.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3/depends/patches/qt/xkb-default.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/xkb-default.patch?ref=f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "patch": "@@ -1,26 +0,0 @@\n---- old/qtbase/src/gui/configure.pri\t2018-06-06 17:28:10.000000000 -0400\n-+++ new/qtbase/src/gui/configure.pri\t2018-08-17 18:43:01.589384567 -0400\n-@@ -43,18 +43,11 @@\n- }\n-\n- defineTest(qtConfTest_xkbConfigRoot) {\n--    qtConfTest_getPkgConfigVariable($${1}): return(true)\n--\n--    for (dir, $$list(\"/usr/share/X11/xkb\", \"/usr/local/share/X11/xkb\")) {\n--        exists($$dir) {\n--            $${1}.value = $$dir\n--            export($${1}.value)\n--            $${1}.cache += value\n--            export($${1}.cache)\n--            return(true)\n--        }\n--    }\n--    return(false)\n-+    $${1}.value = \"/usr/share/X11/xkb\"\n-+    export($${1}.value)\n-+    $${1}.cache += value\n-+    export($${1}.cache)\n-+    return(true)\n- }\n-\n- defineTest(qtConfTest_qpaDefaultPlatform) {"
      },
      {
        "sha": "21bf587eaf31072b158120bf3b3238fbd7d5de74",
        "filename": "doc/Doxyfile.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/Doxyfile.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/Doxyfile.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile.in?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -2073,7 +2073,7 @@ INCLUDE_FILE_PATTERNS  =\n # recursively expanded use the := operator instead of the = operator.\n # This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n \n-PREDEFINED             = HAVE_BOOST_PROCESS\n+PREDEFINED             = ENABLE_EXTERNAL_SIGNER\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n # tag can be used to specify a list of macro names that should be expanded. The"
      },
      {
        "sha": "12807bfb8650e31a491044df9144b373e517c64b",
        "filename": "doc/JSON-RPC-interface.md",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/JSON-RPC-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/JSON-RPC-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/JSON-RPC-interface.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -88,13 +88,14 @@ RPC interface will be abused.\n - **Secure string handling:** The RPC interface does not guarantee any\n   escaping of data beyond what's necessary to encode it as JSON,\n   although it does usually provide serialized data using a hex\n-  representation of the bytes.  If you use RPC data in your programs or\n-  provide its data to other programs, you must ensure any problem\n-  strings are properly escaped.  For example, multiple websites have\n-  been manipulated because they displayed decoded hex strings that\n-  included HTML `<script>` tags.  For this reason, and other\n-  non-security reasons, it is recommended to display all serialized data\n-  in hex form only.\n+  representation of the bytes. If you use RPC data in your programs or\n+  provide its data to other programs, you must ensure any problem strings\n+  are properly escaped. For example, the `createwallet` RPC accepts\n+  arguments such as `wallet_name` which is a string and could be used\n+  for a path traversal attack without application level checks. Multiple\n+  websites have been manipulated because they displayed decoded hex strings\n+  that included HTML `<script>` tags. For this reason, and others, it is\n+  recommended to display all serialized data in hex form only.\n \n ## RPC consistency guarantees\n \n@@ -127,3 +128,14 @@ However, the wallet may not be up-to-date with the current state of the mempool\n or the state of the mempool by an RPC that returned before this RPC. For\n example, a wallet transaction that was BIP-125-replaced in the mempool prior to\n this RPC may not yet be reflected as such in this RPC response.\n+\n+## Limitations\n+\n+There is a known issue in the JSON-RPC interface that can cause a node to crash if\n+too many http connections are being opened at the same time because the system runs\n+out of available file descriptors. To prevent this from happening you might\n+want to increase the number of maximum allowed file descriptors in your system\n+and try to prevent opening too many connections to your JSON-RPC interface at the\n+same time if this is under your control. It is hard to give general advice\n+since this depends on your system but if you make several hundred requests at\n+once you are definitely at risk of encountering this issue."
      },
      {
        "sha": "38f6b1d3275c8516d961a4c2500aa5a8f52ddf84",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=2400deb4a7604d0c1b385d816e1c413617437815",
        "patch": "@@ -30,7 +30,8 @@ Drag Bitcoin Core to your applications folder, and then run Bitcoin Core.\n \n * See the documentation at the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page)\n for help and more information.\n-* Ask for help on [#bitcoin](https://webchat.freenode.net/#bitcoin) on Freenode. If you don't have an IRC client, use [webchat here](https://webchat.freenode.net/#bitcoin).\n+* Ask for help on [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n+* Ask for help on #bitcoin on Libera Chat. If you don't have an IRC client, you can use [web.libera.chat](https://web.libera.chat/#bitcoin).\n * Ask for help on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Technical Support board](https://bitcointalk.org/index.php?board=4.0).\n \n Building\n@@ -44,6 +45,7 @@ The following are developer notes on how to build Bitcoin Core on your native pl\n - [FreeBSD Build Notes](build-freebsd.md)\n - [OpenBSD Build Notes](build-openbsd.md)\n - [NetBSD Build Notes](build-netbsd.md)\n+- [Android Build Notes](build-android.md)\n - [Gitian Building Guide (External Link)](https://github.com/bitcoin-core/docs/blob/master/gitian-building.md)\n \n Development\n@@ -66,20 +68,20 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n \n ### Resources\n * Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0).\n-* Discuss project-specific development on #bitcoin-core-dev on Freenode. If you don't have an IRC client, use [webchat here](https://webchat.freenode.net/#bitcoin-core-dev).\n-* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client, use [webchat here](https://webchat.freenode.net/#bitcoin-dev).\n+* Discuss project-specific development on #bitcoin-core-dev on Libera Chat. If you don't have an IRC client, you can use [web.libera.chat](https://web.libera.chat/#bitcoin-core-dev).\n \n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)\n - [bitcoin.conf Configuration File](bitcoin-conf.md)\n - [Files](files.md)\n - [Fuzz-testing](fuzzing.md)\n+- [I2P Support](i2p.md)\n+- [Init Scripts (systemd/upstart/openrc)](init.md)\n+- [PSBT support](psbt.md)\n - [Reduce Memory](reduce-memory.md)\n - [Reduce Traffic](reduce-traffic.md)\n - [Tor Support](tor.md)\n-- [Init Scripts (systemd/upstart/openrc)](init.md)\n - [ZMQ](zmq.md)\n-- [PSBT support](psbt.md)\n \n License\n ---------------------"
      },
      {
        "sha": "8b281acca773274eb6089598f20ffa8165bdd967",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "84d5f2c444ba3e5f37b81c8cdb35223c48f538e1",
        "filename": "doc/benchmarking.md",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/benchmarking.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/benchmarking.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/benchmarking.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "45954bcfd8f05daf5597616613640f4ccbbacdd5",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "8c9035c45b6fc258bd12d4c1b11a925b00f5942a",
        "filename": "doc/bitcoin-conf.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/bitcoin-conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/bitcoin-conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin-conf.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "7a8a9e6a653e403003126d6800707394f20bf879",
        "filename": "doc/build-android.md",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-android.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-android.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-android.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "da2ab61c2a72a8684489929d7f3e67573515335c",
        "filename": "doc/build-freebsd.md",
        "status": "modified",
        "additions": 91,
        "deletions": 23,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-freebsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-freebsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-freebsd.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "edabd716117884510dbc99f34e1acc932cb17489",
        "filename": "doc/build-netbsd.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-netbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-netbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-netbsd.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "89fd506f1399a7d4b8d4b64918cd54fea7303cc0",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "467feff4106fe63b760f52e524d8641af62d5dfc",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 275,
        "deletions": 61,
        "changes": 336,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "73c0bf877950e1604c3bd47079ff2805c258fd98",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 69,
        "deletions": 32,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "f88b9739deb840afb3261e418e58453345f0a0ec",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "66c5a76b3b8b2127560c3cf0809fcccdd041ceea",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "e27ff8754684561ad115131c6ecf2e2a7e422e2e",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "583c50a76363fa4d0eee3aba7c7b0e00dc9cb6d9",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 26,
        "deletions": 27,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "de44cdd88013cd33a23c2d2be41009e5525fc624",
        "filename": "doc/external-signer.md",
        "status": "added",
        "additions": 171,
        "deletions": 0,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/external-signer.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/external-signer.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/external-signer.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "e670d77ae5d24ca10c40182fc759ea18b9fbc50f",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "6fc9077e4c3b91eea828b57b8e8916b13f67980d",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 118,
        "deletions": 15,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "fa9c74f4860f5374c8c707de48c17afa1a56a9b7",
        "filename": "doc/guix.md",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/guix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/guix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/guix.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "27ef4d9d9f0d995bbebff7af816bc0f55b655693",
        "filename": "doc/i2p.md",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/i2p.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/i2p.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/i2p.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "399b819bf4141859b1b359fa689cd214ad56007b",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "8f890da5327b129a61aeab29fe402a2f7454aaf7",
        "filename": "doc/man/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/Makefile.am?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "6bcad7006b08c537e4b9e0654af16a71a48c3949",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "ff4d1d2c7ac2e5f893932d286f9f0ab4ae5e18a5",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "776bb462342a6f39cb60a1664f03de4a7b581ef1",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "5c733c6e21dcc6e785a051dd0cf7ef099adddc87",
        "filename": "doc/man/bitcoin-util.1",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/bitcoin-util.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/bitcoin-util.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-util.1?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "2da43dec663982b7ae1c52eff159e4280ca541fd",
        "filename": "doc/man/bitcoin-wallet.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/bitcoin-wallet.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/bitcoin-wallet.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-wallet.1?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "2c88f745205bc00db0cfa26797af00a2d8bf1865",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "e3f389a6d3f89481b33e0dd9f1f398f699f96339",
        "filename": "doc/multiprocess.md",
        "status": "modified",
        "additions": 39,
        "deletions": 2,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/multiprocess.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/multiprocess.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiprocess.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "a01c6f545db82f1c42bc40a201cc10ac9d5fac36",
        "filename": "doc/productivity.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/productivity.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/productivity.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/productivity.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "296b172bdeaf74a239c69dd39af4483f1ca4b040",
        "filename": "doc/reduce-memory.md",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/reduce-memory.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/reduce-memory.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reduce-memory.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "cf9edd9b0865a5c8fb7e98849ff6dadcaeeb2450",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "3baba3d49bd082cd5d11341b2c09b26e56a9c3c4",
        "filename": "doc/release-notes/release-notes-0.21.0.md",
        "status": "added",
        "additions": 1336,
        "deletions": 0,
        "changes": 1336,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/release-notes/release-notes-0.21.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/release-notes/release-notes-0.21.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.21.0.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "d032fa8429263c4fd9ed5274808864230af4b9a2",
        "filename": "doc/release-notes/release-notes-0.21.1.md",
        "status": "added",
        "additions": 203,
        "deletions": 0,
        "changes": 203,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/release-notes/release-notes-0.21.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/release-notes/release-notes-0.21.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.21.1.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "e375ae976a405a50b0b038aad07a3b3b25675da1",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 129,
        "deletions": 191,
        "changes": 320,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "147e2237115ec7911ef57019925462adbbb5f642",
        "filename": "doc/shared-libraries.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/shared-libraries.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/shared-libraries.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/shared-libraries.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "7d134b64e0e2a455976fd3306de76e1a4c13a73c",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 175,
        "deletions": 85,
        "changes": 260,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "97a8fbfff21970a7c26c5ab29d1b0f597d221251",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "4a947001fa2d9a27d2abae7c8f06d13eeb1db988",
        "filename": "share/examples/bitcoin.conf",
        "status": "modified",
        "additions": 26,
        "deletions": 6,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/share/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/share/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/examples/bitcoin.conf?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "fe89ae1fdefcfa4195d3e20f65eeeef4f0f051a3",
        "filename": "share/genbuild.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/share/genbuild.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/share/genbuild.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/genbuild.sh?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "da10dbb3be1b28aef0b129cc336a8199838ae670",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "e4d438fdb0075a14a796c6520b545e5dc2829a45",
        "filename": "share/qt/extract_strings_qt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/share/qt/extract_strings_qt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/share/qt/extract_strings_qt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/extract_strings_qt.py?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "85ae7c57af26b96b5fcb6927081f2decfb20ddf3",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "a69c57f3e0dea633ae856190f732de0a66dc5f66",
        "filename": "src/.clang-format",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/.clang-format",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/.clang-format",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/.clang-format?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "a8d6591e98b541718ebbdcdcf3459f0c4e0bbada",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 137,
        "deletions": 18,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "2a8e4a0aaca0b6f83487290e3b47f1b1f138142f",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "113272e65e89efff5d271ca1ba5567f39de6588f",
        "filename": "src/Makefile.crc32c.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.crc32c.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.crc32c.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.crc32c.include?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "ce1f93f11f3b50d1e30f439b56767e7199205ff8",
        "filename": "src/Makefile.leveldb.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "6f450bbc74ee2185f559e6c87569c2a51677d270",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 39,
        "deletions": 15,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "91a5e9fd9b440a59d6983ff6328ec01397e3d2b8",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "fc2fd801660325d9a12787c5882bc460d1732479",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 139,
        "deletions": 1096,
        "changes": 1235,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "2d772f2fca1676a2a1a4a7a7db6b594063e4bea8",
        "filename": "src/Makefile.test_fuzz.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.test_fuzz.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.test_fuzz.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_fuzz.include?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "85e50ebf7058bfb9ed8084f371df1ca8ea25e29d",
        "filename": "src/Makefile.test_util.include",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.test_util.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/Makefile.test_util.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_util.include?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "b8fd019bab9c335410a50e21ba4abff8a16dceeb",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 117,
        "deletions": 22,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "399103c99199d661c12e6c21de20cfd563a2085b",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 33,
        "deletions": 4,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "8192b4eba666c6d20eff9de1ce1f1ffd0dd4b0ff",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 88,
        "deletions": 11,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "1fc64ac07fdc2c6b593d3396b6c55361053a546e",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 259,
        "deletions": 216,
        "changes": 475,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "9957bcd84b70751a0478c01a6bba039b7872b78b",
        "filename": "src/attributes.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/attributes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/attributes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/attributes.h?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "d2437e67338cee2f592d85ea92fe2c7786992144",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 23,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "8c75d4037e5fbd17b9174849a190798b0c4710e9",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "fb04673c5c8bdb50f5d1213f5db6f050da7a7260",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "9ba5af73e0596274eb5c2b5771c746634600a7c7",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "288b14e02389d870cd9c34544dca45750a83561b",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 22,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "e9450ccc2b35dc3650905a50418756a3a08af58e",
        "filename": "src/bech32.h",
        "status": "modified",
        "additions": 29,
        "deletions": 10,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bech32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bech32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.h?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "b7bd8a32612b6481e5b7f51dea5de25ea7a6112b",
        "filename": "src/bench/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/addrman.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "6f6b4e3bfa9c41d69ff533909bc3e603d043f879",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "8e10862a37c9cce350733c39ec498d6913acb74b",
        "filename": "src/bench/bech32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bech32.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "c4fcd80e33b0987221eb9a5d2797529ba48d81fa",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "aab777cac15259675ea06f6de1958eef933113c2",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "b4b33d115f314ef706f3864e8260cdf0f5345ec0",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 22,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "a6f4eec4ca9e0b2201378329651fdfa059b6132d",
        "filename": "src/bench/chacha20.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/chacha20.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/chacha20.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/chacha20.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "e994279a4d8b1bb7c1452f0ac7f942d3deea91f1",
        "filename": "src/bench/chacha_poly_aead.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/chacha_poly_aead.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/chacha_poly_aead.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/chacha_poly_aead.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "d7b8c1badc66ee8b8d2a1c837a778d01b2c977c3",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "5beb833b48bf8b313065fb9227e33ebb58b11d2b",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "30fe11be6b3032a2ff7eec3eaa4fb6e43621a952",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "481e3721057ea133c6229fc0a607786651b97a4c",
        "filename": "src/bench/data.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/data.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/data.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/data.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "8703a1cf942b6b91d5e4dbf39fa34fd7cf0772ba",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "607e4392b7a1ac3099ac01399efa5dd589312309",
        "filename": "src/bench/gcs_filter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/gcs_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/gcs_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/gcs_filter.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "753c8c288119a7d9cd6479ee97f8c08bfd35628a",
        "filename": "src/bench/hashpadding.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/hashpadding.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/hashpadding.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/hashpadding.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "b6d8824abae5e37bcc1717ff2d0bf946f5d4b42a",
        "filename": "src/bench/lockedpool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/lockedpool.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "4f49fba7b755b76d2983fd43e9e69e1661504f8f",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "f28768efc8599488d6c6d1cf19a1d08b8ff3ff99",
        "filename": "src/bench/mempool_stress.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/mempool_stress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/mempool_stress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_stress.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "030d6ebf6ac2eff303d1324eb7b589670016e67f",
        "filename": "src/bench/nanobench.h",
        "status": "modified",
        "additions": 187,
        "deletions": 52,
        "changes": 239,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/nanobench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/nanobench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/nanobench.h?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "46fd9d999e120bb3e904b5705d5dd99b79ad1272",
        "filename": "src/bench/peer_eviction.cpp",
        "status": "added",
        "additions": 157,
        "deletions": 0,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/peer_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/peer_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/peer_eviction.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "cdef97c0ea3984c396b952e47110cb9ff6cd7ec3",
        "filename": "src/bench/poly1305.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/poly1305.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/poly1305.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/poly1305.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "f4fabedab6b70f84e1ae3ff8327f26e7d7614bf8",
        "filename": "src/bench/prevector.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "997ab56549cf38f02f3d118ec963359b612b3e48",
        "filename": "src/bench/rollingbloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/rollingbloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/rollingbloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rollingbloom.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "c8886a4c237ae46e2d376f4cf061612f56253693",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 12,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "f1eeef88850495e51599f1db85e7c24c48e1bf64",
        "filename": "src/bench/rpc_mempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/rpc_mempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/rpc_mempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_mempool.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "afc733482e8ac6bcc2a232882dd8bca43cf74829",
        "filename": "src/bench/util_time.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/util_time.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/util_time.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/util_time.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "928aa7573c7403d09c9cb9fe4e832dfaefc1d587",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "362b7c1e15d560dc0243e0547ed0f19982fb72f9",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 17,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "1ec6411e32cd31b7459965d5299af5d7c1e5b761",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 308,
        "deletions": 41,
        "changes": 349,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "3fc87ae1ff325c61b23262b206dad9f1c1668808",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "3f0fa8ab6d61481b27d5a3160cfd9f214328cb5b",
        "filename": "src/bitcoin-util-res.rc",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bitcoin-util-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bitcoin-util-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-util-res.rc?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "f534aecc199f996ead26fc563f29805be4d4670f",
        "filename": "src/bitcoin-util.cpp",
        "status": "added",
        "additions": 195,
        "deletions": 0,
        "changes": 195,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bitcoin-util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bitcoin-util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-util.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "765954c92e401f34be3a07854f92debde4f3128b",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 39,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "654679af27e2d029d937dd0da3c011313032dd91",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 132,
        "deletions": 35,
        "changes": 167,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "aa111b5939fa8b6c45c791dd77a0628b7d5055af",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "41fa0b6fa04cf8fd7a28f12ffbd7f1723e0826c4",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "d0128a26d73f55918cbc19a3b365a55bb3ac5bfe",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      },
      {
        "sha": "fdaa8abfb23d9bf10e155c231966056d15765407",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2400deb4a7604d0c1b385d816e1c413617437815/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2400deb4a7604d0c1b385d816e1c413617437815/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=2400deb4a7604d0c1b385d816e1c413617437815"
      }
    ]
  },
  {
    "sha": "fe83db659484106d66aaf5ec4a48b7a0e5ba93ba",
    "node_id": "C_kwDOABII59oAKGZlODNkYjY1OTQ4NDEwNmQ2NmFhZjVlYzRhNDhiN2EwZTViYTkzYmE",
    "commit": {
      "author": {
        "name": "Dontrell Henry",
        "email": "56090131+LamarisSmiley@users.noreply.github.com",
        "date": "2021-11-07T07:02:25Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-11-07T07:02:25Z"
      },
      "message": "Create docker-image.yml",
      "tree": {
        "sha": "f09510350610d9f4812e6928adbb601757086214",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f09510350610d9f4812e6928adbb601757086214"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe83db659484106d66aaf5ec4a48b7a0e5ba93ba",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhh3oBCRBK7hj4Ov3rIwAA38cIAFGCl/gF2DaWPkVlV3L0Nd4E\n8sb/ur2Cz+FxpgIEkWgBel3cAm0OvHWOCXPCZjxFu8ZEG6578wlfn3hBpTrNg/AA\nRFlKnv6JEUiBRSfoj8z7+PHEgzFaLp1dsE7Ms6b6CTBIBx3bMYUVK4SGzsLuy0Cq\nM0huhpbOTvJrCqHqf+rC6kgdSi7ha0L//vZd+bDe8AmXFIv3tZN+mUoRQwA/9iVZ\nSDdwzx64smocBuw9BGowHgsqLIV+ZpojtxXyRRO/r8ddHED7OweaoMHAVnyht/ml\nH9Cglmta+Ln0ideKz/lecXHhwiZ3cTTpsq5wFax5E5BKczM+u2zPXpClOWC/V5I=\n=3R/E\n-----END PGP SIGNATURE-----\n",
        "payload": "tree f09510350610d9f4812e6928adbb601757086214\nparent 2400deb4a7604d0c1b385d816e1c413617437815\nauthor Dontrell Henry <56090131+LamarisSmiley@users.noreply.github.com> 1636268545 -0500\ncommitter GitHub <noreply@github.com> 1636268545 -0500\n\nCreate docker-image.yml"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe83db659484106d66aaf5ec4a48b7a0e5ba93ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe83db659484106d66aaf5ec4a48b7a0e5ba93ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe83db659484106d66aaf5ec4a48b7a0e5ba93ba/comments",
    "author": {
      "login": "LamarisSmiley",
      "id": 56090131,
      "node_id": "MDQ6VXNlcjU2MDkwMTMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/56090131?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LamarisSmiley",
      "html_url": "https://github.com/LamarisSmiley",
      "followers_url": "https://api.github.com/users/LamarisSmiley/followers",
      "following_url": "https://api.github.com/users/LamarisSmiley/following{/other_user}",
      "gists_url": "https://api.github.com/users/LamarisSmiley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LamarisSmiley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LamarisSmiley/subscriptions",
      "organizations_url": "https://api.github.com/users/LamarisSmiley/orgs",
      "repos_url": "https://api.github.com/users/LamarisSmiley/repos",
      "events_url": "https://api.github.com/users/LamarisSmiley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LamarisSmiley/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2400deb4a7604d0c1b385d816e1c413617437815",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2400deb4a7604d0c1b385d816e1c413617437815",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2400deb4a7604d0c1b385d816e1c413617437815"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e57d42a7c905b88ef769ac0df5a6d033f285faf9",
        "filename": ".github/workflows/docker-image.yml",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe83db659484106d66aaf5ec4a48b7a0e5ba93ba/.github/workflows/docker-image.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe83db659484106d66aaf5ec4a48b7a0e5ba93ba/.github/workflows/docker-image.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/workflows/docker-image.yml?ref=fe83db659484106d66aaf5ec4a48b7a0e5ba93ba",
        "patch": "@@ -0,0 +1,18 @@\n+name: Docker Image CI\n+\n+on:\n+  push:\n+    branches: [ master ]\n+  pull_request:\n+    branches: [ master ]\n+\n+jobs:\n+\n+  build:\n+\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+    - name: Build the Docker image\n+      run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)"
      }
    ]
  }
]