Diapolo,2012-10-03T17:15:26Z,"I know you will for sure dislike the following comment, but I'll try for the last time (you won't get any further comments on strings in your pulls, if you want) as the brave knight for unified string usage ^^. Can you change your Warning messages to the following format:\n\n""Warning: First sentence! Second sentence.""\n- start with `Warning:`\n- First sentence (if a sentence) finished with a `!`\n",https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9114236,9114236,
gavinandresen,2012-10-04T14:36:40Z,"@Diapolo : good idea on the Verifying message.  And ok, I'll change the first period to an exclamation mark.\n\nI'm finding serious bugs doing more testing; writing here so I don't lose track of them:\n\n1) Getting a crash on my main wallet, bdb complaining about out of memory (out of mutexes).\n\n2) Getting this weirdness switching from newer bitcoind to older:\n 10/04/12 14:16:00 nFileVersion = ",https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9143425,9143425,
gavinandresen,2012-10-04T19:45:19Z,"Updated to not ""pre-verify"" blkindex.dat which fixes the 'out of mutexes' problem (looks like bdb does not clean up after a ->verify() ?), pick up some changes from @jgarzik version of DBEnv::RemoveDB (kept RemoveDB as the name, though, since it removes a database not a dbenv), and tweaked Warning! messages.\n\nI'll investigate the downgrade weirdness separately, I'm afraid that might be another b",https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9154474,9154474,
sipa,2012-10-07T13:16:27Z,@gavinandresen Do you consider this pull ready now? \n,https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9207890,9207890,
gavinandresen,2012-10-07T16:27:35Z,"Yes, this is pull-ready now.\n\nI'd like some help with more thorough testing.\n",https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9209597,9209597,
gmaxwell,2012-10-07T17:23:08Z,"So, this can just cause your balance to go to zero with no notice if you're not watching the logs/console output carefully. Perhaps get getinfo error field should get something?\n\nHere is what I tested: \n\nUsing gavin's testnet-in-a-box wallet.\nzzuf -I 'wallet.dat' -s 0:1000 ./bitcoind -daemon=0\n\nSeed 0 fails with Db::open: Invalid argument.  In log I see Salvage(aggressive) found 2372 record",https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9210115,9210115,
luke-jr,2012-10-07T17:26:58Z,How does this handle encrypted wallets?\n,https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9210153,9210153,
gavinandresen,2012-10-08T21:28:11Z,"@luke-jr it handles encrypted wallets as well as might be expected. It works on the bdb level, salvaging as many key/value pairs as it can from the backed-up wallet.dat.  If it encounters a database-level error reading keys (private keys, encrypted or not, or master keys) it tells the user to try to recover from a backup.\n",https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9240885,9240885,
gavinandresen,2012-10-08T23:59:36Z,Rebased on top of #1917; changed error handling from bdb methods from exceptions to returned error codes.\n,https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9244733,9244733,
laanwj,2012-10-02T06:34:32Z,"The result stays DB_LOAD_OK here, so in case of corruptions in non-key/tx records, it silently continues also with the upgrading below at line 458.\nIs this desired behavior? \n\nOr should we set some flag, log a message and show a popup to the user (`uiInterface.ThreadSafeMessageBox`) at the end of the function that recovery has taken place and that some wallet data (such as address book entries,",https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1735939,1735939,src/walletdb.cpp
gavinandresen,2012-10-02T13:45:13Z,"An earlier version of this code extended DBErrors to have different levels of error, but the code started getting complicated and confusing (e.g. you could have a wallet that had a key error, a non-key error, AND needed upgrading... maybe DBErrors should be a bitmask, etc).\n\nBut telling the user that there is something wrong is definitely a good idea, I'll make that so.\n",https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1738639,1738639,src/walletdb.cpp
Diapolo,2012-10-02T17:01:52Z,I like the idea to have bitmasks to handle error codes btw.\n,https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1740914,1740914,src/walletdb.cpp
Diapolo,2012-10-03T17:07:55Z,"If this process takes a few seconds (or more), it's IMO worth adding a `uiInterface.InitMessage(_(""Verifying database integrity...""));` message here.\n",https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1752512,1752512,src/init.cpp
sipa,2012-10-04T21:08:59Z,My god... is that was is necessary to recover from BDB? Manually parse the hex dump created by a library?\n\nI want to get rid of BDB yesterday.\n,https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1767049,1767049,src/db.cpp
laanwj,2012-10-05T05:51:29Z,"Recovery is never a nice process, if things are broken enough you always get to a level where you have to look at hexdumps of the raw file to salvage anything. At least you still get delimited keys/values here. \n\nIs it any prettier for leveldb, for example?\n",https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1769967,1769967,src/db.cpp
sipa,2012-10-05T08:45:06Z,"There are no leveldb tools; I think 'recovery' is the same as 'opening', and 'crashing' is the same as 'closing' in LevelDB. There are a few flags to set the degree of checksum verification or paranoidness when opening, though.\n",https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1770805,1770805,src/db.cpp
