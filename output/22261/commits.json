[
  {
    "sha": "2837a9f1eaa2c6bf402d1d9891d9aa84c4a56033",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODM3YTlmMWVhYTJjNmJmNDAyZDFkOTg5MWQ5YWE4NGM0YTU2MDMz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-06-16T09:47:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-09T16:24:08Z"
      },
      "message": "[mempool] Only add a transaction to the unbroadcast set when it's added to the mempool\n\nCurrently, if BroadcastTransaction() is called to rebroadcast a\ntransaction (e.g. by ResendWalletTransactions()), then we add the\ntransaction to the unbroadcast set. That transaction has already been\nbroadcast in the past, so peers are unlikely to request it again,\nmeaning RemoveUnbroadcastTx() won't be called and it won't be removed\nfrom m_unbroadcast_txids.\n\nNet processing will therefore continue to attempt rebroadcast for the\ntransaction every 10-15 minutes. This will most likely continue until\nthe node connects to a new peer which hasn't yet seen the transaction\n(or perhaps indefinitely).\n\nFix by only adding the transaction to the broadcast set when it's added\nto the mempool.",
      "tree": {
        "sha": "5e9afdc056a180a8c83377b2d6be52cb5b847e25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e9afdc056a180a8c83377b2d6be52cb5b847e25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2837a9f1eaa2c6bf402d1d9891d9aa84c4a56033",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2837a9f1eaa2c6bf402d1d9891d9aa84c4a56033",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2837a9f1eaa2c6bf402d1d9891d9aa84c4a56033",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2837a9f1eaa2c6bf402d1d9891d9aa84c4a56033/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "926dd0e31d18eecef389b80cc406d91f3e98fad7",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2837a9f1eaa2c6bf402d1d9891d9aa84c4a56033/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2837a9f1eaa2c6bf402d1d9891d9aa84c4a56033/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=2837a9f1eaa2c6bf402d1d9891d9aa84c4a56033",
        "patch": "@@ -71,6 +71,12 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n \n         // Transaction was accepted to the mempool.\n \n+        if (relay) {\n+            // the mempool tracks locally submitted transactions to make a\n+            // best-effort of initial broadcast\n+            node.mempool->AddUnbroadcastTx(hashTx);\n+        }\n+\n         if (wait_callback) {\n             // For transactions broadcast from outside the wallet, make sure\n             // that the wallet has been notified of the transaction before\n@@ -96,9 +102,6 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n-        // the mempool tracks locally submitted transactions to make a\n-        // best-effort of initial broadcast\n-        node.mempool->AddUnbroadcastTx(hashTx);\n         node.peerman->RelayTransaction(hashTx, tx->GetWitnessHash());\n     }\n "
      }
    ]
  },
  {
    "sha": "847b6ed48d7bacec9024618922e9b339d2d97676",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDdiNmVkNDhkN2JhY2VjOTAyNDYxODkyMmU5YjMzOWQyZDk3Njc2",
    "commit": {
      "author": {
        "name": "Duncan Dean",
        "email": "duncangleeddean@gmail.com",
        "date": "2021-07-07T09:06:27Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-09T16:24:08Z"
      },
      "message": "[test] Test transactions are not re-added to unbroadcast set",
      "tree": {
        "sha": "37e799200882df94ebef0139d001bd60e1efacba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37e799200882df94ebef0139d001bd60e1efacba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/847b6ed48d7bacec9024618922e9b339d2d97676",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/847b6ed48d7bacec9024618922e9b339d2d97676",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/847b6ed48d7bacec9024618922e9b339d2d97676",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/847b6ed48d7bacec9024618922e9b339d2d97676/comments",
    "author": {
      "login": "dunxen",
      "id": 3072149,
      "node_id": "MDQ6VXNlcjMwNzIxNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3072149?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dunxen",
      "html_url": "https://github.com/dunxen",
      "followers_url": "https://api.github.com/users/dunxen/followers",
      "following_url": "https://api.github.com/users/dunxen/following{/other_user}",
      "gists_url": "https://api.github.com/users/dunxen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dunxen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dunxen/subscriptions",
      "organizations_url": "https://api.github.com/users/dunxen/orgs",
      "repos_url": "https://api.github.com/users/dunxen/repos",
      "events_url": "https://api.github.com/users/dunxen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dunxen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2837a9f1eaa2c6bf402d1d9891d9aa84c4a56033",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2837a9f1eaa2c6bf402d1d9891d9aa84c4a56033",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2837a9f1eaa2c6bf402d1d9891d9aa84c4a56033"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7d9e6c306d8ac18f958e04a250e4ac7d74d96d68",
        "filename": "test/functional/mempool_unbroadcast.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/847b6ed48d7bacec9024618922e9b339d2d97676/test/functional/mempool_unbroadcast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/847b6ed48d7bacec9024618922e9b339d2d97676/test/functional/mempool_unbroadcast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_unbroadcast.py?ref=847b6ed48d7bacec9024618922e9b339d2d97676",
        "patch": "@@ -92,6 +92,12 @@ def test_broadcast(self):\n         self.disconnect_nodes(0, 1)\n         node.disconnect_p2ps()\n \n+        self.log.info(\"Rebroadcast transaction and ensure it is not added to unbroadcast set when already in mempool\")\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+        mempool = node.getrawmempool(True)\n+        assert rpc_tx_hsh in mempool\n+        assert not mempool[rpc_tx_hsh]['unbroadcast']\n+\n     def test_txn_removal(self):\n         self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n         node = self.nodes[0]"
      }
    ]
  },
  {
    "sha": "cd48372b67d961fe661990a2c6d3cc3d91478924",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDQ4MzcyYjY3ZDk2MWZlNjYxOTkwYTJjNmQzY2MzZDkxNDc4OTI0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-06-16T09:56:07Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-09T16:24:08Z"
      },
      "message": "[mempool] Allow rebroadcast for same-txid-different-wtxid transactions\n\nThis commit fixes some slightly unexpected behaviour when:\n\n- there is already transaction in the mempool (the \"mempool tx\")\n- BroadcastTransaction() is called for a transaction with the same txid\n  as the mempool transaction but a different witness (the \"new tx\")\n\nPrior to this commit, if BroadcastTransaction() is called with\nrelay=true, then it'll call RelayTransaction() using the txid/wtxid of\nthe new tx, not the txid/wtxid of the mempool tx. For wtxid relay peers,\nin SendMessages(), the wtxid of the new tx will be taken from\nsetInventoryTxToSend, but will then be filtered out from the vector of\nwtxids to announce, since m_mempool.info() won't find the transaction\n(the mempool contains the mempool tx, which has a different wtxid from\nthe new tx).\n\nFix this by calling RelayTransaction() with the wtxid of the mempool\ntransaction in this case.",
      "tree": {
        "sha": "b59c707f859bb7f4ae995b3b6221d21156d14902",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b59c707f859bb7f4ae995b3b6221d21156d14902"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd48372b67d961fe661990a2c6d3cc3d91478924",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd48372b67d961fe661990a2c6d3cc3d91478924",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd48372b67d961fe661990a2c6d3cc3d91478924",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd48372b67d961fe661990a2c6d3cc3d91478924/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "847b6ed48d7bacec9024618922e9b339d2d97676",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/847b6ed48d7bacec9024618922e9b339d2d97676",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/847b6ed48d7bacec9024618922e9b339d2d97676"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 15,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0c1295c0b5624b59f979bacb9e9385b77792db83",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd48372b67d961fe661990a2c6d3cc3d91478924/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd48372b67d961fe661990a2c6d3cc3d91478924/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=cd48372b67d961fe661990a2c6d3cc3d91478924",
        "patch": "@@ -34,7 +34,8 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     assert(node.peerman);\n     assert(node.mempool);\n     std::promise<void> promise;\n-    uint256 hashTx = tx->GetHash();\n+    uint256 txid = tx->GetHash();\n+    uint256 wtxid = tx->GetWitnessHash();\n     bool callback_set = false;\n \n     { // cs_main scope\n@@ -44,12 +45,21 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     // and return early.\n     CCoinsViewCache &view = node.chainman->ActiveChainstate().CoinsTip();\n     for (size_t o = 0; o < tx->vout.size(); o++) {\n-        const Coin& existingCoin = view.AccessCoin(COutPoint(hashTx, o));\n+        const Coin& existingCoin = view.AccessCoin(COutPoint(txid, o));\n         // IsSpent doesn't mean the coin is spent, it means the output doesn't exist.\n         // So if the output does exist, then this transaction exists in the chain.\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n-    if (!node.mempool->exists(hashTx)) {\n+    if (auto mempool_tx = node.mempool->get(txid); mempool_tx) {\n+        // There's already a transaction in the mempool with this txid. Don't\n+        // try to submit this transaction to the mempool (since it'll be\n+        // rejected as a TX_CONFLICT), but do attempt to reannounce the mempool\n+        // transaction if relay=true.\n+        //\n+        // The mempool transaction may have the same or different witness (and\n+        // wtxid) as this transaction. Use the mempool's wtxid for reannouncement.\n+        wtxid = mempool_tx->GetWitnessHash();\n+    } else {\n         // Transaction is not already in the mempool.\n         if (max_tx_fee > 0) {\n             // First, call ATMP with test_accept and check the fee. If ATMP\n@@ -74,7 +84,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (relay) {\n             // the mempool tracks locally submitted transactions to make a\n             // best-effort of initial broadcast\n-            node.mempool->AddUnbroadcastTx(hashTx);\n+            node.mempool->AddUnbroadcastTx(txid);\n         }\n \n         if (wait_callback) {\n@@ -102,7 +112,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n-        node.peerman->RelayTransaction(hashTx, tx->GetWitnessHash());\n+        node.peerman->RelayTransaction(txid, wtxid);\n     }\n \n     return TransactionError::OK;"
      }
    ]
  },
  {
    "sha": "7282d4c0363ab5152baa34af626cb49afbfddc32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjgyZDRjMDM2M2FiNTE1MmJhYTM0YWY2MjZjYjQ5YWZiZmRkYzMy",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-11T13:49:19Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-09T17:21:34Z"
      },
      "message": "[test] Allow rebroadcast for same-txid-different-wtxid transactions\n\nCo-authored-by: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "39b5194063a24e608c5bd7a817957aac7045a3f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39b5194063a24e608c5bd7a817957aac7045a3f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7282d4c0363ab5152baa34af626cb49afbfddc32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7282d4c0363ab5152baa34af626cb49afbfddc32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7282d4c0363ab5152baa34af626cb49afbfddc32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7282d4c0363ab5152baa34af626cb49afbfddc32/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd48372b67d961fe661990a2c6d3cc3d91478924",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd48372b67d961fe661990a2c6d3cc3d91478924",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd48372b67d961fe661990a2c6d3cc3d91478924"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 16,
      "deletions": 1
    },
    "files": [
      {
        "sha": "63ecc8ee2a2edf8802a02b162b9787f7ec5c10ae",
        "filename": "test/functional/mempool_accept_wtxid.py",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7282d4c0363ab5152baa34af626cb49afbfddc32/test/functional/mempool_accept_wtxid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7282d4c0363ab5152baa34af626cb49afbfddc32/test/functional/mempool_accept_wtxid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept_wtxid.py?ref=7282d4c0363ab5152baa34af626cb49afbfddc32",
        "patch": "@@ -16,6 +16,7 @@\n     CTxOut,\n     sha256,\n )\n+from test_framework.p2p import P2PTxInvStore\n from test_framework.script import (\n     CScript,\n     OP_0,\n@@ -62,6 +63,8 @@ def run_test(self):\n         parent_txid = node.sendrawtransaction(hexstring=raw_parent, maxfeerate=0)\n         node.generate(1)\n \n+        peer_wtxid_relay = node.add_p2p_connection(P2PTxInvStore())\n+\n         # Create a new transaction with witness solving first branch\n         child_witness_script = CScript([OP_TRUE])\n         child_witness_program = sha256(child_witness_script)\n@@ -87,10 +90,13 @@ def run_test(self):\n         assert_equal(child_one_txid, child_two_txid)\n         assert child_one_wtxid != child_two_wtxid\n \n-        self.log.info(\"Submit one child to the mempool\")\n+        self.log.info(\"Submit child_one to the mempool\")\n         txid_submitted = node.sendrawtransaction(child_one.serialize().hex())\n         assert_equal(node.getrawmempool(True)[txid_submitted]['wtxid'], child_one_wtxid)\n \n+        peer_wtxid_relay.wait_for_broadcast([child_one_wtxid])\n+        assert_equal(node.getmempoolinfo()[\"unbroadcastcount\"], 0)\n+\n         # testmempoolaccept reports the \"already in mempool\" error\n         assert_equal(node.testmempoolaccept([child_one.serialize().hex()]), [{\n             \"txid\": child_one_txid,\n@@ -108,9 +114,18 @@ def run_test(self):\n \n         # sendrawtransaction will not throw but quits early when the exact same transaction is already in mempool\n         node.sendrawtransaction(child_one.serialize().hex())\n+\n+        self.log.info(\"Connect another peer that hasn't seen child_one before\")\n+        peer_wtxid_relay_2 = node.add_p2p_connection(P2PTxInvStore())\n+\n+        self.log.info(\"Submit child_two to the mempool\")\n         # sendrawtransaction will not throw but quits early when a transaction with the same non-witness data is already in mempool\n         node.sendrawtransaction(child_two.serialize().hex())\n \n+        # The node should rebroadcast the transaction using the wtxid of the correct transaction\n+        # (child_one, which is in its mempool).\n+        peer_wtxid_relay_2.wait_for_broadcast([child_one_wtxid])\n+        assert_equal(node.getmempoolinfo()[\"unbroadcastcount\"], 0)\n \n if __name__ == '__main__':\n     MempoolWtxidTest().main()"
      }
    ]
  },
  {
    "sha": "5a77abd4e657458852875a07692898982f4b1db5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTc3YWJkNGU2NTc0NTg4NTI4NzVhMDc2OTI4OTg5ODJmNGIxZGI1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-06-16T11:02:00Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-09T17:21:36Z"
      },
      "message": "[style] Clean up BroadcastTransaction()",
      "tree": {
        "sha": "b8b971916fb2b7eeacf8d74b4fc4e054269eb7fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8b971916fb2b7eeacf8d74b4fc4e054269eb7fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a77abd4e657458852875a07692898982f4b1db5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a77abd4e657458852875a07692898982f4b1db5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a77abd4e657458852875a07692898982f4b1db5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a77abd4e657458852875a07692898982f4b1db5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7282d4c0363ab5152baa34af626cb49afbfddc32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7282d4c0363ab5152baa34af626cb49afbfddc32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7282d4c0363ab5152baa34af626cb49afbfddc32"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 63,
      "deletions": 61
    },
    "files": [
      {
        "sha": "d3bce069b0527bfb937ed8cba461f4caef580b4d",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 61,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a77abd4e657458852875a07692898982f4b1db5/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a77abd4e657458852875a07692898982f4b1db5/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=5a77abd4e657458852875a07692898982f4b1db5",
        "patch": "@@ -28,81 +28,83 @@ static TransactionError HandleATMPError(const TxValidationState& state, std::str\n \n TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n {\n-    // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.\n-    // node.peerman is assigned both before chain clients and before RPC server is accepting calls,\n-    // and reset after chain clients and RPC sever are stopped. node.peerman should never be null here.\n-    assert(node.peerman);\n+    // BroadcastTransaction can be called by either sendrawtransaction RPC or the wallet.\n+    // chainman, mempool and peerman are initialized before the RPC server and wallet are started\n+    // and reset after the RPC sever and wallet are stopped.\n+    assert(node.chainman);\n     assert(node.mempool);\n+    assert(node.peerman);\n+\n     std::promise<void> promise;\n     uint256 txid = tx->GetHash();\n     uint256 wtxid = tx->GetWitnessHash();\n     bool callback_set = false;\n \n-    { // cs_main scope\n-    assert(node.chainman);\n-    LOCK(cs_main);\n-    // If the transaction is already confirmed in the chain, don't do anything\n-    // and return early.\n-    CCoinsViewCache &view = node.chainman->ActiveChainstate().CoinsTip();\n-    for (size_t o = 0; o < tx->vout.size(); o++) {\n-        const Coin& existingCoin = view.AccessCoin(COutPoint(txid, o));\n-        // IsSpent doesn't mean the coin is spent, it means the output doesn't exist.\n-        // So if the output does exist, then this transaction exists in the chain.\n-        if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n-    }\n-    if (auto mempool_tx = node.mempool->get(txid); mempool_tx) {\n-        // There's already a transaction in the mempool with this txid. Don't\n-        // try to submit this transaction to the mempool (since it'll be\n-        // rejected as a TX_CONFLICT), but do attempt to reannounce the mempool\n-        // transaction if relay=true.\n-        //\n-        // The mempool transaction may have the same or different witness (and\n-        // wtxid) as this transaction. Use the mempool's wtxid for reannouncement.\n-        wtxid = mempool_tx->GetWitnessHash();\n-    } else {\n-        // Transaction is not already in the mempool.\n-        if (max_tx_fee > 0) {\n-            // First, call ATMP with test_accept and check the fee. If ATMP\n-            // fails here, return error immediately.\n+    {\n+        LOCK(cs_main);\n+\n+        // If the transaction is already confirmed in the chain, don't do anything\n+        // and return early.\n+        CCoinsViewCache &view = node.chainman->ActiveChainstate().CoinsTip();\n+        for (size_t o = 0; o < tx->vout.size(); o++) {\n+            const Coin& existingCoin = view.AccessCoin(COutPoint(txid, o));\n+            // IsSpent doesn't mean the coin is spent, it means the output doesn't exist.\n+            // So if the output does exist, then this transaction exists in the chain.\n+            if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n+        }\n+\n+        if (auto mempool_tx = node.mempool->get(txid); mempool_tx) {\n+            // There's already a transaction in the mempool with this txid. Don't\n+            // try to submit this transaction to the mempool (since it'll be\n+            // rejected as a TX_CONFLICT), but do attempt to reannounce the mempool\n+            // transaction if relay=true.\n+            //\n+            // The mempool transaction may have the same or different witness (and\n+            // wtxid) as this transaction. Use the mempool's wtxid for reannouncement.\n+            wtxid = mempool_tx->GetWitnessHash();\n+        } else {\n+            // Transaction is not already in the mempool.\n+            if (max_tx_fee > 0) {\n+                // First, call ATMP with test_accept and check the fee. If ATMP\n+                // fails here, return error immediately.\n+                const MempoolAcceptResult result = AcceptToMemoryPool(node.chainman->ActiveChainstate(), *node.mempool, tx, false /* bypass_limits */,\n+                                                                      true /* test_accept */);\n+                if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+                    return HandleATMPError(result.m_state, err_string);\n+                } else if (result.m_base_fees.value() > max_tx_fee) {\n+                    return TransactionError::MAX_FEE_EXCEEDED;\n+                }\n+            }\n+            // Try to submit the transaction to the mempool.\n             const MempoolAcceptResult result = AcceptToMemoryPool(node.chainman->ActiveChainstate(), *node.mempool, tx, false /* bypass_limits */,\n-                                                                  true /* test_accept */);\n+                                                                  false /* test_accept */);\n             if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n                 return HandleATMPError(result.m_state, err_string);\n-            } else if (result.m_base_fees.value() > max_tx_fee) {\n-                return TransactionError::MAX_FEE_EXCEEDED;\n             }\n-        }\n-        // Try to submit the transaction to the mempool.\n-        const MempoolAcceptResult result = AcceptToMemoryPool(node.chainman->ActiveChainstate(), *node.mempool, tx, false /* bypass_limits */,\n-                                                              false /* test_accept */);\n-        if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n-            return HandleATMPError(result.m_state, err_string);\n-        }\n \n-        // Transaction was accepted to the mempool.\n+            // Transaction was accepted to the mempool.\n \n-        if (relay) {\n-            // the mempool tracks locally submitted transactions to make a\n-            // best-effort of initial broadcast\n-            node.mempool->AddUnbroadcastTx(txid);\n-        }\n+            if (relay) {\n+                // the mempool tracks locally submitted transactions to make a\n+                // best-effort of initial broadcast\n+                node.mempool->AddUnbroadcastTx(txid);\n+            }\n \n-        if (wait_callback) {\n-            // For transactions broadcast from outside the wallet, make sure\n-            // that the wallet has been notified of the transaction before\n-            // continuing.\n-            //\n-            // This prevents a race where a user might call sendrawtransaction\n-            // with a transaction to/from their wallet, immediately call some\n-            // wallet RPC, and get a stale result because callbacks have not\n-            // yet been processed.\n-            CallFunctionInValidationInterfaceQueue([&promise] {\n-                promise.set_value();\n-            });\n-            callback_set = true;\n+            if (wait_callback) {\n+                // For transactions broadcast from outside the wallet, make sure\n+                // that the wallet has been notified of the transaction before\n+                // continuing.\n+                //\n+                // This prevents a race where a user might call sendrawtransaction\n+                // with a transaction to/from their wallet, immediately call some\n+                // wallet RPC, and get a stale result because callbacks have not\n+                // yet been processed.\n+                CallFunctionInValidationInterfaceQueue([&promise] {\n+                    promise.set_value();\n+                });\n+                callback_set = true;\n+            }\n         }\n-    }\n-\n     } // cs_main\n \n     if (callback_set) {"
      }
    ]
  }
]