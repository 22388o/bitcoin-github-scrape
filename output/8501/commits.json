[
  {
    "sha": "8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTdjYWU4YjhlOGFjZDYzNzg1YzI0NWNlMzkzZTVlMTAwNTFhZTFk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-08-12T11:04:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-05T04:38:20Z"
      },
      "message": "Add mempool statistics collector",
      "tree": {
        "sha": "1896e6b39d0bea73e5273370998c1247d594439b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1896e6b39d0bea73e5273370998c1247d594439b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnVtz0ACgkQHrd2uwPH\nki0E1RAAo4ToHk+jXNMHZ40W7lzTjqUsATdB3Cybd80L61dOc8btuep0/k/MIrDK\nObRO6NQ3EqVJhO9MB4GAjZXd4db2Ea8/52CUONe44RkJOU9wQU6rCH4h8kRPEinB\n0LkgDSqVqtH+PavxPFv4ZUW+DFR84FcE7utj92GHqkGX1dmuZQh0XkOygptZgrzz\n3aKb6b3HWVtXKqk7DSgTPHLXD2fklOH60t1QYYHHYE3t7ILdlilkurbH40edhRD2\nY06Mcip+itpeVMW88p8TdSYMiK/ErrO7rsgvfVnPc9+E+YefH0uuo+QKU5KvzxXu\nIiyRqRsECzavQp9IbHe0wPodSzmWt4Pj0XapzLOXA8s5w0uyKqg+nhEnj71g2hGF\neIR0V0noHCbQ3UEZGuo0oC1i6oNrcP6UFUfpu0nLPYKKLOgJ1V7BuzmN6HUTMKYQ\nLbzlRxW7/iSzdJZ9RTAIA6fVdS1hIJ9MG/4s1vowZsTC/FFnd/wVLQu16p6XjoBF\nckg0/D8np3TQExq2zp0SVEFdhMnvQxgp6FWEkTqxsTyl8ogTTLqnF5E77ygt2kLA\n3ZAji79Q3vLafZI+ZNfxbKAOZMgx/t5jG0VHB1YJzbVMxN24q8DurfMpyAd95U5k\nhs3tEl8brAjggKwIKHJjQOrDyGsl4Yk/dryNxr6ZEzOURi4Gkb8=\n=Ialg\n-----END PGP SIGNATURE-----",
        "payload": "tree 1896e6b39d0bea73e5273370998c1247d594439b\nparent 167cef8082e25e3ebbcd602814f3012772d49d16\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1470999884 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1507178300 -0700\n\nAdd mempool statistics collector\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "167cef8082e25e3ebbcd602814f3012772d49d16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/167cef8082e25e3ebbcd602814f3012772d49d16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/167cef8082e25e3ebbcd602814f3012772d49d16"
      }
    ],
    "stats": {
      "total": 459,
      "additions": 458,
      "deletions": 1
    },
    "files": [
      {
        "sha": "32ce510428ee682ce59f4ea1d6bd9550c6140667",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
        "patch": "@@ -138,6 +138,8 @@ BITCOIN_CORE_H = \\\n   script/sign.h \\\n   script/standard.h \\\n   script/ismine.h \\\n+  stats/stats.h \\\n+  stats/stats_mempool.h \\\n   streams.h \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n@@ -215,6 +217,9 @@ libbitcoin_server_a_SOURCES = \\\n   rpc/server.cpp \\\n   script/sigcache.cpp \\\n   script/ismine.cpp \\\n+  stats/rpc_stats.cpp \\\n+  stats/stats.cpp \\\n+  stats/stats_mempool.cpp \\\n   timedata.cpp \\\n   torcontrol.cpp \\\n   txdb.cpp \\"
      },
      {
        "sha": "81ade275f4b8fe2f8404b334a04e5d2ae551a4f8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
        "patch": "@@ -35,6 +35,7 @@\n #include \"script/standard.h\"\n #include \"script/sigcache.h\"\n #include \"scheduler.h\"\n+#include \"stats/stats.h\"\n #include \"timedata.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n@@ -506,6 +507,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     }\n \n+    strUsage += CStats::getHelpString(showDebug);\n     return strUsage;\n }\n \n@@ -1145,6 +1147,10 @@ bool AppInitParameterInteraction()\n             }\n         }\n     }\n+\n+    if (!CStats::parameterInteraction())\n+        return false;\n+\n     return true;\n }\n \n@@ -1720,5 +1726,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     StartWallets(scheduler);\n #endif\n \n+    CStats::DefaultStats()->startCollecting(scheduler);\n+\n     return !fRequestShutdown;\n }"
      },
      {
        "sha": "3ac907a8321dad6f318301694b6c1ebd739ec0a9",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_MEMUSAGE_H\n \n #include \"indirectmap.h\"\n+#include \"prevector.h\"\n \n #include <stdlib.h>\n "
      },
      {
        "sha": "55b0eed9dbcd615df294a7a4f035dcb28d635458",
        "filename": "src/rpc/register.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/rpc/register.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/rpc/register.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/register.h?ref=8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
        "patch": "@@ -19,6 +19,8 @@ void RegisterMiscRPCCommands(CRPCTable &tableRPC);\n void RegisterMiningRPCCommands(CRPCTable &tableRPC);\n /** Register raw transaction RPC commands */\n void RegisterRawTransactionRPCCommands(CRPCTable &tableRPC);\n+/** Register stats RPC commands */\n+void RegisterStatsRPCCommands(CRPCTable &tableRPC);\n \n static inline void RegisterAllCoreRPCCommands(CRPCTable &t)\n {\n@@ -27,6 +29,7 @@ static inline void RegisterAllCoreRPCCommands(CRPCTable &t)\n     RegisterMiscRPCCommands(t);\n     RegisterMiningRPCCommands(t);\n     RegisterRawTransactionRPCCommands(t);\n+    RegisterStatsRPCCommands(t);\n }\n \n #endif"
      },
      {
        "sha": "e061a79d203e749f861b259958e3a8c75b0d981e",
        "filename": "src/stats/rpc_stats.cpp",
        "status": "added",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/stats/rpc_stats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/stats/rpc_stats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/stats/rpc_stats.cpp?ref=8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
        "patch": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"rpc/server.h\"\n+#include \"stats/stats.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <stdint.h>\n+\n+#include <univalue.h>\n+\n+UniValue getmempoolstats(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 0)\n+        throw std::runtime_error(\n+            \"getmempoolstats\\n\"\n+            \"\\nReturns the collected mempool statistics.\\n\"\n+            \"\\nThe samples are segregated in multiple precision groups.\\n\"\n+            \"\\nSamples time interval is not guaranteed to be constant, hence there\\n\"\n+            \"is a time delta in each sample relative to the last sample.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  [\\n\"\n+            \"    {\\n\"\n+            \"      \\\"sample_interval\\\"    : \\\"interval\\\",      (numeric) Interval target in seconds\\n\"\n+            \"      \\\"time_from\\\"          : \\\"timestamp\\\",     (numeric) Timestamp, first sample\\n\"\n+            \"      \\\"samples\\\"            : [\\n\"\n+            \"                                 [<delta_in_secs>,<tx_count>,<dynamic_mem_usage>,<min_fee_per_k>],\\n\"\n+            \"                                 [<delta_in_secs>,<tx_count>,<dynamic_mem_usage>,<min_fee_per_k>],\\n\"\n+            \"                                 ...\\n\"\n+            \"                             ]\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"getmempoolstats\", \"\") + HelpExampleRpc(\"getmempoolstats\", \"\"));\n+\n+    // get stats from the core stats model\n+    uint64_t timeFrom = 0;\n+    std::vector<unsigned int> groups = CStats::DefaultStats()->mempoolCollector->getPrecisionGroupsAndIntervals();\n+\n+    UniValue groupsUni(UniValue::VARR);\n+    for (unsigned int i = 0; i < groups.size(); i++) {\n+\n+        MempoolSamplesVector samples = CStats::DefaultStats()->mempoolCollector->getSamplesForPrecision(i, timeFrom);\n+\n+        // use \"flat\" json encoding for performance reasons\n+        UniValue samplesObj(UniValue::VARR);\n+        for (const struct CStatsMempoolSample& sample : samples) {\n+            UniValue singleSample(UniValue::VARR);\n+            singleSample.push_back(UniValue((uint64_t)sample.timeDelta));\n+            singleSample.push_back(UniValue((uint64_t)sample.txCount));\n+            singleSample.push_back(UniValue((uint64_t)sample.dynMemUsage));\n+            singleSample.push_back(UniValue(sample.minFeePerK));\n+            samplesObj.push_back(singleSample);\n+        }\n+\n+        UniValue sampleGroup(UniValue::VOBJ);\n+        sampleGroup.push_back(Pair(\"sample_interval\", (int)groups[i]));\n+        sampleGroup.push_back(Pair(\"time_from\", timeFrom));\n+        sampleGroup.push_back(Pair(\"samples\", samplesObj));\n+\n+        groupsUni.push_back(sampleGroup);\n+    }\n+\n+    return groupsUni;\n+}\n+\n+static const CRPCCommand commands[] =\n+{\n+    //  category              name                      actor (function)         argNames\n+    //  --------------------- ------------------------  -----------------------  ----------\n+        {\"stats\",             \"getmempoolstats\",        &getmempoolstats,        {}},\n+\n+};\n+\n+void RegisterStatsRPCCommands(CRPCTable &t)\n+{\n+    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n+        t.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+}"
      },
      {
        "sha": "dbb4ef6604fd502fdfec8c5ef4da6cab347d2a2f",
        "filename": "src/stats/stats.cpp",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/stats/stats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/stats/stats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/stats/stats.cpp?ref=8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
        "patch": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"stats/stats.h\"\n+\n+#include \"memusage.h\"\n+#include \"utiltime.h\"\n+\n+#include \"util.h\"\n+\n+\n+const size_t DEFAULT_MAX_STATS_MEMORY = 10 * 1024 * 1024; // 10 MB\n+const bool DEFAULT_STATISTICS_ENABLED = false;\n+const static unsigned int STATS_COLLECT_INTERVAL = 2000; // 2 secs\n+\n+CStats* CStats::sharedInstance = NULL;\n+\n+CStats* CStats::DefaultStats()\n+{\n+    if (!sharedInstance)\n+        sharedInstance = new CStats();\n+\n+    return sharedInstance;\n+}\n+\n+CStats::CStats() : statsEnabled(false), maxStatsMemory(0)\n+{\n+    /* initialize the mempool stats collector */\n+    mempoolCollector = std::unique_ptr<CStatsMempool>(new CStatsMempool(STATS_COLLECT_INTERVAL));\n+}\n+\n+CStats::~CStats()\n+{\n+\n+}\n+\n+std::string CStats::getHelpString(bool showDebug)\n+{\n+    std::string strUsage = HelpMessageGroup(_(\"Statistic options:\"));\n+    strUsage += HelpMessageOpt(\"-statsenable=\", strprintf(\"Enable statistics (default: %u)\", DEFAULT_STATISTICS_ENABLED));\n+    strUsage += HelpMessageOpt(\"-statsmaxmemorytarget=<n>\", strprintf(_(\"Set the memory limit target for statistics in bytes (default: %u)\"), DEFAULT_MAX_STATS_MEMORY));\n+\n+    return strUsage;\n+}\n+\n+bool CStats::parameterInteraction()\n+{\n+    if (gArgs.GetBoolArg(\"-statsenable\", DEFAULT_STATISTICS_ENABLED))\n+        DefaultStats()->setMaxMemoryUsageTarget(gArgs.GetArg(\"-statsmaxmemorytarget\", DEFAULT_MAX_STATS_MEMORY));\n+\n+    return true;\n+}\n+\n+void CStats::startCollecting(CScheduler& scheduler)\n+{\n+    if (statsEnabled) {\n+        // dispatch the scheduler task\n+        scheduler.scheduleEvery(std::bind(&CStats::collectCallback, this), STATS_COLLECT_INTERVAL);\n+    }\n+}\n+\n+void CStats::collectCallback()\n+{\n+    if (!statsEnabled)\n+        return;\n+\n+    if (mempoolCollector->addMempoolSamples(maxStatsMemory)) {\n+        // fire the signal if the stats did change\n+        MempoolStatsDidChange();\n+    }\n+}\n+\n+void CStats::setMaxMemoryUsageTarget(size_t maxMem)\n+{\n+    statsEnabled = (maxMem > 0);\n+    maxStatsMemory = maxMem;\n+\n+    // for now: give 100% to mempool stats\n+    mempoolCollector->setMaxMemoryUsageTarget(maxMem);\n+}"
      },
      {
        "sha": "390f3d5eedea4b5322f53ce0955d6f2fc6a832f3",
        "filename": "src/stats/stats.h",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/stats/stats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/stats/stats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/stats/stats.h?ref=8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
        "patch": "@@ -0,0 +1,61 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STATS_H\n+#define BITCOIN_STATS_H\n+\n+#include \"amount.h\"\n+#include \"scheduler.h\"\n+#include \"stats/stats_mempool.h\"\n+\n+#include <atomic>\n+#include <stdlib.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+// Class that manages various types of statistics and its memory consumption\n+class CStats\n+{\n+private:\n+    static CStats* sharedInstance; //!< singleton instance\n+    std::atomic<bool> statsEnabled;\n+\n+    //maximum amount of memory to use for the stats\n+    std::atomic<size_t> maxStatsMemory;\n+\n+    /* collect callback through the scheduler task */\n+    void collectCallback();\n+\n+public:\n+\n+    static CStats* DefaultStats(); //shared instance\n+\n+    CStats();\n+    ~CStats();\n+\n+    /* get the statistics module help strings */\n+    static std::string getHelpString(bool showDebug);\n+\n+    /* access the parameters and map it to the internal model */\n+    static bool parameterInteraction();\n+\n+    /* dispatch the stats collector repetitive scheduler task */\n+    void startCollecting(CScheduler& scheduler);\n+\n+    /* set the target for the maximum memory consumption (in bytes) */\n+    void setMaxMemoryUsageTarget(size_t maxMem);\n+\n+\n+\n+    /* COLLECTOR INSTANCES\n+     * =================== */\n+    std::unique_ptr<CStatsMempool> mempoolCollector;\n+\n+\n+    /* SIGNALS\n+     * ======= */\n+    boost::signals2::signal<void(void)> MempoolStatsDidChange; //mempool signal\n+};\n+\n+#endif // BITCOIN_STATS_H"
      },
      {
        "sha": "0d5c51681d8f1fe37f41d5374b79809b0a0d7cc8",
        "filename": "src/stats/stats_mempool.cpp",
        "status": "added",
        "additions": 130,
        "deletions": 0,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/stats/stats_mempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/stats/stats_mempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/stats/stats_mempool.cpp?ref=8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
        "patch": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"stats/stats_mempool.h\"\n+\n+#include \"memusage.h\"\n+#include \"utiltime.h\"\n+\n+#include \"util.h\"\n+\n+\n+const static unsigned int precisionIntervals[] = {\n+    2, // == every 2 secs == 1800 samples per hour\n+    60, // == every minute = 1440 samples per day\n+    1800 // == every half-hour = ~2'160 per Month\n+};\n+\n+const static unsigned int MIN_SAMPLES = 5;\n+const static unsigned int MAX_SAMPLES = 5000;\n+\n+\n+const static unsigned int fallbackMaxSamplesPerPrecision = 1000;\n+\n+std::atomic<size_t> CStatsMempool::cacheMempoolSize;\n+std::atomic<size_t> CStatsMempool::cacheMempoolDynamicMemoryUsage;\n+std::atomic<CAmount> CStatsMempool::cacheMempoolMinRelayFee;\n+\n+CStatsMempool::CStatsMempool(unsigned int collectIntervalIn) : collectInterval(collectIntervalIn)\n+{\n+    startTime = 0;\n+    intervalCounter = 0;\n+\n+    // setup the samples per precision vector\n+    for (unsigned int interval : precisionIntervals) {\n+        (void)(interval);\n+        vSamplesPerPrecision.emplace_back();\n+\n+        // use the fallback max in case max memory will not be set\n+        vMaxSamplesPerPrecision.push_back(fallbackMaxSamplesPerPrecision);\n+\n+        // add starttime 0 to each level\n+        vTimeLastSample.push_back(0);\n+    }\n+}\n+\n+std::vector<unsigned int> CStatsMempool::getPrecisionGroupsAndIntervals() {\n+    return {std::begin(precisionIntervals), std::end(precisionIntervals)};\n+}\n+\n+bool CStatsMempool::addMempoolSamples(const size_t maxStatsMemory)\n+{\n+    bool statsChanged = false;\n+    uint64_t now = GetTime();\n+    {\n+        LOCK(cs_mempool_stats);\n+\n+        // set the mempool stats start time if this is the first sample\n+        if (startTime == 0)\n+            startTime = now;\n+\n+        unsigned int biggestInterval = 0;\n+        for (unsigned int i = 0; i < sizeof(precisionIntervals) / sizeof(precisionIntervals[0]); i++) {\n+            // check if it's time to collect a samples for the given precision level\n+            uint16_t timeDelta = 0;\n+            if (intervalCounter % (precisionIntervals[i] / (collectInterval / 1000)) == 0) {\n+                if (vTimeLastSample[i] == 0) {\n+                    // first sample, calc delta to starttime\n+                    timeDelta = now - startTime;\n+                } else {\n+                    timeDelta = now - vTimeLastSample[i];\n+                }\n+                vSamplesPerPrecision[i].push_back({timeDelta, CStatsMempool::cacheMempoolSize, CStatsMempool::cacheMempoolDynamicMemoryUsage, CStatsMempool::cacheMempoolMinRelayFee});\n+                statsChanged = true;\n+\n+                // check if we need to remove items at the beginning\n+                if (vSamplesPerPrecision[i].size() > vMaxSamplesPerPrecision[i]) {\n+                    // increase starttime by the removed deltas\n+                    for (unsigned int j = (vSamplesPerPrecision[i].size() - vMaxSamplesPerPrecision[i]); j > 0; j--) {\n+                        startTime += vSamplesPerPrecision[i][j].timeDelta;\n+                    }\n+                    // remove element(s) at vector front\n+                    vSamplesPerPrecision[i].erase(vSamplesPerPrecision[i].begin(), vSamplesPerPrecision[i].begin() + (vSamplesPerPrecision[i].size() - vMaxSamplesPerPrecision[i]));\n+\n+                    // release memory\n+                    vSamplesPerPrecision[i].shrink_to_fit();\n+                }\n+\n+                vTimeLastSample[i] = now;\n+            }\n+            biggestInterval = precisionIntervals[i];\n+        }\n+\n+        intervalCounter++;\n+\n+        if (intervalCounter > biggestInterval) {\n+            intervalCounter = 1;\n+        }\n+    }\n+    return statsChanged;\n+}\n+\n+void CStatsMempool::setMaxMemoryUsageTarget(size_t maxMem)\n+{\n+    // calculate the memory requirement of a single sample\n+    size_t sampleSize = memusage::MallocUsage(sizeof(CStatsMempoolSample));\n+\n+    // calculate how many samples would fit in the target\n+    size_t maxAmountOfSamples = maxMem / sampleSize;\n+\n+    // distribute the max samples equal between precision levels\n+    unsigned int samplesPerPrecision = maxAmountOfSamples / sizeof(precisionIntervals) / sizeof(precisionIntervals[0]);\n+    samplesPerPrecision = std::max(MIN_SAMPLES, samplesPerPrecision);\n+    samplesPerPrecision = std::min(MAX_SAMPLES, samplesPerPrecision);\n+    for (unsigned int i = 0; i < sizeof(precisionIntervals) / sizeof(precisionIntervals[0]); i++) {\n+        vMaxSamplesPerPrecision[i] = samplesPerPrecision;\n+    }\n+}\n+\n+MempoolSamplesVector CStatsMempool::getSamplesForPrecision(unsigned int precision, uint64_t& fromTime)\n+{\n+    LOCK(cs_mempool_stats);\n+\n+    if (precision >= vSamplesPerPrecision.size()) {\n+        return MempoolSamplesVector();\n+    }\n+\n+    fromTime = startTime;\n+    return vSamplesPerPrecision[precision];\n+}"
      },
      {
        "sha": "095b29b10f090e44bbfa7af46e37ec386d5b0221",
        "filename": "src/stats/stats_mempool.h",
        "status": "added",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/stats/stats_mempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/stats/stats_mempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/stats/stats_mempool.h?ref=8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
        "patch": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STATS_MEMPOOL_H\n+#define BITCOIN_STATS_MEMPOOL_H\n+\n+#include <amount.h>\n+#include \"scheduler.h\"\n+#include <sync.h>\n+\n+#include <atomic>\n+#include <stdlib.h>\n+#include <vector>\n+\n+struct CStatsMempoolSample {\n+\n+    /* time delta to last item as 16bit unsigned integer\n+     * allows a max delta of ~18h */\n+    uint16_t timeDelta;\n+\n+    size_t txCount;     //!<transaction count\n+    size_t dynMemUsage; //!<dynamic mempool usage\n+    CAmount minFeePerK;  //!<min fee per K\n+};\n+\n+typedef std::vector<struct CStatsMempoolSample> MempoolSamplesVector;\n+\n+class CStatsMempool\n+{\n+private:\n+\n+    /* caches */\n+    static std::atomic<size_t> cacheMempoolSize;\n+    static std::atomic<size_t> cacheMempoolDynamicMemoryUsage;\n+    static std::atomic<CAmount> cacheMempoolMinRelayFee;\n+    mutable CCriticalSection cs_mempool_stats; //!<protects the sample/max/time vectors\n+\n+    std::atomic<uint64_t> startTime; //start time\n+    std::vector<MempoolSamplesVector> vSamplesPerPrecision; //!<multiple samples vector per precision level\n+    std::vector<size_t> vMaxSamplesPerPrecision; //!<vector with the maximum amount of samples per precision level\n+    std::vector<size_t> vTimeLastSample; //!<vector with the maximum amount of samples per precision level\n+    size_t intervalCounter; //!<internal counter for cleanups\n+\n+    const unsigned int collectInterval; //timedelta in milliseconds\n+\n+    /* adds a mempool stats samples by accessing the lock free cache values\n+     * returns true if at least one sample was collected */\n+    bool addMempoolSamples(const size_t maxStatsMemory);\n+\n+    /* set the target for the maximum memory consumption (in bytes) */\n+    void setMaxMemoryUsageTarget(size_t maxMem);\n+\n+    friend class CStats;\n+public:\n+\n+    CStatsMempool(unsigned int collectIntervalIn);\n+\n+    static void setCache(size_t cacheMempoolSizeIn, size_t cacheMempoolDynamicMemoryUsageIn, CAmount cacheMempoolMinRelayFeeIn) {\n+        cacheMempoolSize = cacheMempoolSizeIn;\n+        cacheMempoolDynamicMemoryUsage = cacheMempoolDynamicMemoryUsageIn;\n+        cacheMempoolMinRelayFee = cacheMempoolMinRelayFeeIn;\n+    }\n+\n+    /* get mempool precision groups and its time interval-target */\n+    std::vector<unsigned int> getPrecisionGroupsAndIntervals();\n+\n+    /* get mempool samples from a given precision group index(!)\n+     * this returns a COPY */\n+    MempoolSamplesVector getSamplesForPrecision(unsigned int precision, uint64_t& fromTime);\n+};\n+\n+#endif // BITCOIN_STATS_MEMPOOL_H"
      },
      {
        "sha": "4a4fb1e089b4d5a28ec4f29d79b5e8a58983bd12",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a7cae8b8e8acd63785c245ce393e5e10051ae1d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
        "patch": "@@ -29,6 +29,7 @@\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\"\n+#include \"stats/stats.h\"\n #include \"timedata.h\"\n #include \"tinyformat.h\"\n #include \"txdb.h\"\n@@ -451,6 +452,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n+    CFeeRate poolMinFeeRate;\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n@@ -619,7 +621,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n                 strprintf(\"%d\", nSigOpsCost));\n \n-        CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n+        poolMinFeeRate = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        CAmount mempoolRejectFee = poolMinFeeRate.GetFee(nSize);\n         if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n         }\n@@ -877,6 +880,9 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n     GetMainSignals().TransactionAddedToMempool(ptx);\n \n+    // update mempool stats cache\n+    CStatsMempool::setCache(pool.size(), pool.DynamicMemoryUsage(), poolMinFeeRate.GetFeePerK());\n+\n     return true;\n }\n \n@@ -2108,6 +2114,10 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     GetMainSignals().BlockDisconnected(pblock);\n+\n+    // update mempool stats cache\n+    CStatsMempool::setCache(mempool.size(), mempool.DynamicMemoryUsage(), mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK());\n+\n     return true;\n }\n \n@@ -2234,6 +2244,9 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew, chainparams);\n \n+    // update mempool stats cache\n+    CStatsMempool::setCache(mempool.size(), mempool.DynamicMemoryUsage(), mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK());\n+\n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);\n     LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime1) * MILLI, nTimeTotal * MICRO, nTimeTotal * MILLI / nBlocksTotal);"
      }
    ]
  },
  {
    "sha": "7af0ea43b2976ee54a53597f178e73037c62dea8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWYwZWE0M2IyOTc2ZWU1NGE1MzU5N2YxNzhlNzMwMzdjNjJkZWE4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-08T13:59:10Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-05T04:38:22Z"
      },
      "message": "[QA] Add basic mempool stats test",
      "tree": {
        "sha": "c922175b1e754dc7bd75d05515af07c07e8f3baf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c922175b1e754dc7bd75d05515af07c07e8f3baf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7af0ea43b2976ee54a53597f178e73037c62dea8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnVtz4ACgkQHrd2uwPH\nki2E1RAArY1fgi0gqCgmlSWNIQtgHuaFeNOrn4uEeC2SR3M/NbZMjvQT+4hHAp7f\nJYBGi1tpPBWl7FK31ERSLphB8W2wlSpjle0lmVLXwHvMqKZ3c94nxMkFL6iw31xR\nqq3NjUt87MnsPDWSkrZESNW9Cltd2OTfgG3/8KBn+NAM4PsSXUQJB9Ixfl6tUIB/\nan6eO2/Lx/CDRPmMCEz9TMTCKgh8elmhSwgxY30CKfCIzHOhMtbqGdd+HWHUtTFg\nUX/zoK0BUFFI1VfYbzuAPR6CkeqIGc80CZ6nhzvUlWogE6H2iFRYn5j94MZxKJ6O\nmuHOPIwDz9wapni5C8Om7tuI5wdkxsHv6mnEsIzS+/mH7QQjN68w9IBrgYFaUP6Q\nU+MtHy5yHhVgxkhH7DbkRG3/MrdwuA/mlR9Uwt6xL7A+FCvNOInA4VJN7rPQPeha\nzUNxZL9OCnEsiV1gl8RwsD7lTMENQA3GcWRM6LCpI6eCbKH75HyrKq7dvjHLg/Fn\n2BcizUfXgpD0r7zaruGPFbM9VaPqE3VjgUxYWj7ReOalXMJAwGSIJ8b3S+5Uz5tx\nemV9UN60B+MLFP92BWfSsQLdH51mtFXEQSqGaNujlN9a6/N5XkYJs5uqJtYy7aOF\nTXp/PZaEaFTKo+gr9R4QjYmptBNe73jxe+G4ahLZ95C6PdIHigc=\n=2wey\n-----END PGP SIGNATURE-----",
        "payload": "tree c922175b1e754dc7bd75d05515af07c07e8f3baf\nparent 8a7cae8b8e8acd63785c245ce393e5e10051ae1d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1494251950 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1507178302 -0700\n\n[QA] Add basic mempool stats test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7af0ea43b2976ee54a53597f178e73037c62dea8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7af0ea43b2976ee54a53597f178e73037c62dea8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7af0ea43b2976ee54a53597f178e73037c62dea8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a7cae8b8e8acd63785c245ce393e5e10051ae1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a7cae8b8e8acd63785c245ce393e5e10051ae1d"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3d83c1cd905d5a756841196ec61e36f26e3d82b3",
        "filename": "test/functional/mempool_limit_stats.py",
        "status": "renamed",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7af0ea43b2976ee54a53597f178e73037c62dea8/test/functional/mempool_limit_stats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7af0ea43b2976ee54a53597f178e73037c62dea8/test/functional/mempool_limit_stats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit_stats.py?ref=7af0ea43b2976ee54a53597f178e73037c62dea8",
        "patch": "@@ -11,7 +11,9 @@ class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]\n+        \n+        # set a very low (100bytes) statsmaxmemorytarget to ensure we use the min amount of samples\n+        self.extra_args = [[\"-maxmempool=5\", \"--statsenable\", \"--statsmaxmemorytarget=100\"\"-spendzeroconfchange=0\"]]\n \n     def run_test(self):\n         txouts = gen_return_txouts()\n@@ -41,6 +43,12 @@ def run_test(self):\n         assert(txid not in self.nodes[0].getrawmempool())\n         txdata = self.nodes[0].gettransaction(txid)\n         assert(txdata['confirmations'] ==  0) #confirmation should still be 0\n+        \n+        # test mempool stats\n+        time.sleep(15)\n+        mps = self.nodes[0].getmempoolstats()\n+        assert_equal(len(mps), 3) #fixed amount of percision levels\n+        assert_equal(len(mps[0]['samples']), 5) #make sure we only have 5 samples (minimum history)\n \n if __name__ == '__main__':\n     MempoolLimitTest().main()",
        "previous_filename": "test/functional/mempool_limit.py"
      },
      {
        "sha": "a0a243d82e88743acbb0273167487e858a7597a7",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7af0ea43b2976ee54a53597f178e73037c62dea8/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7af0ea43b2976ee54a53597f178e73037c62dea8/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=7af0ea43b2976ee54a53597f178e73037c62dea8",
        "patch": "@@ -71,7 +71,7 @@\n     'sendheaders.py',\n     'zapwallettxes.py',\n     'importmulti.py',\n-    'mempool_limit.py',\n+    'mempool_limit_stats.py',\n     'merkle_blocks.py',\n     'receivedby.py',\n     'abandonconflict.py',"
      }
    ]
  }
]