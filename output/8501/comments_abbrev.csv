isle2983,2016-08-15T04:03:48Z,"Hi Jonas,\n\nI understand the concern in your description for the addMempoolSample() stat\nbookkeeping designed to be as lightweight as possible in the critical execution\npath. However, I have a few (perhaps under-informed, neophyte) questions which\nwould help me understand the design considerations better:\n\n1) the comment in rpc_stats.cpp hints that the overhead of the JSON string\ngeneration",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-239725630,239725630,
jonasschnelli,2016-08-15T12:03:54Z,"@isle2983 Welcome to github.\nThanks for your feedback and your nitpicks. I really appreciate this and i'll process them during the next hours.\n\nFor your questions/inputs:\n1) My idea with the JSON flat output was to bypass the JSON encoding/decoding.`[val1, val2, val3, val4], [val1, val2, val3, val4],` should also work. I just though a single string would result in faster encoding and decoding ",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-239786592,239786592,
isle2983,2016-08-20T02:36:13Z,"I have been playing around making my own changes off these commits (isle2983:getmempoolstats). Mostly to just to get some hands on with the code and try to get my C++ up to  par.\n\nBut anyway, I made the rpc output of the samples full JSON:\n\n```\n{\n  ""enabled"": true,\n  ""maxmemorytarget"": 10485760,\n  ""currentusage"": 1734416,\n  ""time_from"": 1471573271,\n  ""time_to"": 1471657376,\n  ""sampleCoun",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-241173926,241173926,
jonasschnelli,2016-08-22T13:02:59Z,"Thanks @isle2983 for the testing, benchmarks and improvements.\nI have switched to the proposed array format for the samples (rather then the flat structure). A more performant binary format (inside of the JSON format) would be a hack. More performance would probably be possible over ZMQ.. but its currently a push only channel.\n\nI also though again about copy the samples hash before filtering it",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-241405658,241405658,
jonasschnelli,2016-09-09T06:54:37Z,Needed rebase.\n,https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-245834655,245834655,
jonasschnelli,2016-10-20T08:31:01Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-255042584,255042584,
MarcoFalke,2016-11-10T22:02:56Z,"Assigning ""would be nice to have"" for 0.14 per meeting today.\n",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-259820789,259820789,
morcos,2016-12-05T00:51:13Z,"Just saw @gmaxwell's comment on #8550 (which I completely agree with) and it reminded to look at that PR and this one.  Sorry for not getting involved sooner, but I really like the idea.  Unfortunately I can think of many many stats (dozens and dozens) that we might want to collect, both to potentially show to users in whiz-bangy gui's and also would be useful for developers and businesses trying ",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-264745780,264745780,
jonasschnelli,2016-12-05T13:06:43Z,"@morcos: thanks for the comment. Yes. I completely agree. I think this is a first start and the current design allows features like you mentioned.\nI once started with interpolating values instead of just trimming the back, you could in theory just reduce the ""density"" of the sample and interpolate the in-between values (to a point where this could make sense).\nBut yes, adding more stats probab",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-264849304,264849304,
morcos,2016-12-05T15:04:09Z,"@jonasschnelli Well I guess what I was thinking was that one general framework might fit all stats.  You log it with whatever frequency you want.  And it's stored in up to 4 different histories (by second, minute, hour, day) and each of those is trimmed to some limit (say 1000 or 2000 data points each).   Is there any type of stat that such a general framework might not work well with?  \n",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-264876764,264876764,
jonasschnelli,2016-12-05T15:15:12Z,"@morcos: the original idea I was trying to follow was to not collect in a fixed frequency. A) To avoid locking a thread for just collecting stats samples. B) To not collect over and over the same value if it was unchanged.\nTake the traffic report as an example. If you like to collect stats of all peers traffic segmented into all available p2p commands, then you would probably ""loose"" plenty of m",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-264879895,264879895,
jonasschnelli,2016-12-06T10:37:32Z,Rebased (main split),https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-265116687,265116687,
luke-jr,2016-12-10T22:22:56Z,c0af3664360e26333f8e16f20b0e21efa6ce2f1a has unresolved conflicts :(,https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-266244149,266244149,
paveljanik,2016-12-10T22:25:43Z,@luke-jr All checks have passed ;-),https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-266244294,266244294,
luke-jr,2016-12-10T22:36:18Z,@paveljanik They're removed in the subsequent commit.,https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-266244810,266244810,
paveljanik,2016-12-10T22:40:48Z,"Yes (I noticed that), this is why we should take Travis' results as a help only.",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-266245018,266245018,
morcos,2017-01-05T18:09:40Z,"@jonasschnelli whatever happened to this plan?\n```\n09:19:49 < jonasschnelli> I think you convinced me to do the 1000s 1000m 1000h 1000d approach.\n09:19:59 < jonasschnelli> maybe the 1000 is configurable.\n09:20:04 < morcos> doesn't matter to me how we do it... i think a delta version coudl be just as good\n09:20:14 < morcos> and you could just be smart about trimming the delta list or some",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-270714233,270714233,
jtimon,2017-02-23T23:45:33Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-282158818,282158818,
laanwj,2017-05-02T13:24:56Z,Needs rebase / reply to @morcos' review comment,https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-298634471,298634471,
jonasschnelli,2017-05-08T14:04:42Z,"Completely rewrote this PR.\n\nCurrent features are \n-> CScheduler driven sample collecting (current interval 2000ms)\n-> Relevant mempool data (size, memory requirement, minfee) gets written to an atomic cache (no additional locking required)\n-> Multiple precision levels (currently three, 2s, 60s, 1800s)\n-> Memory target that will calculate how many samples do fit in the given target\n-",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-299876023,299876023,
jonasschnelli,2017-05-12T13:04:09Z,Addressed @ryanofsky points.,https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-301070750,301070750,
jonasschnelli,2017-05-12T14:39:06Z,Fixed @paveljanik points and nits.,https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-301094855,301094855,
luke-jr,2017-08-21T22:19:55Z,"Rebased on my repo.\n\n```\ngit checkout stats_rpc && git fetch git://github.com/luke-jr/bitcoin stats_rpc && git reset --hard FETCH_HEAD && git push ...\n```",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-323867729,323867729,
jonasschnelli,2017-10-05T05:00:17Z,Rebased (rebased @luke-jr's version).,https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-334359570,334359570,
DrahtBot,2018-11-08T23:20:55Z,"<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-437192755,437192755,
isle2983,2016-08-13T03:35:42Z,is this semicolon unintentional?\n,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74680851,74680851,src/stats/stats.cpp
isle2983,2016-08-14T00:03:56Z,s/memmory/memory/\n,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74693795,74693795,src/stats/stats.h
isle2983,2016-08-14T00:07:37Z,s/statictis/statistics/\n,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74693828,74693828,src/stats/stats.h
isle2983,2016-08-14T00:08:06Z,s/consuption/consumption/\n,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74693833,74693833,src/stats/stats.h
isle2983,2016-08-14T00:12:58Z,s/detla/delta/\n,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74693876,74693876,src/stats/stats.cpp
isle2983,2016-08-14T00:33:20Z,This 'defaultStats' instance is not used.\n,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74694040,74694040,src/stats/stats.cpp
MarcoFalke,2016-08-19T20:03:47Z,Would it make sense to add a line break after each sample's values?\n,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r75543469,75543469,src/stats/rpc_stats.cpp
MarcoFalke,2016-08-19T21:06:38Z,Or just add the names of the columns as another entry in the dict.\n\nOtherwise I fail to see how this rpc call is useful.\n,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r75551478,75551478,src/stats/rpc_stats.cpp
ryanofsky,2017-05-10T17:19:58Z,"Should s/percision/precision/ throughout PR. Also maybe this field should be called ""sample_interval"" to be consistent with ""samples"" field below.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r115800129,115800129,src/stats/rpc_stats.cpp
ryanofsky,2017-05-10T17:43:08Z,This seems like it would belong in `AppInitParameterInteraction` more than `AppInitSanityChecks`,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r115805878,115805878,src/init.cpp
ryanofsky,2017-05-10T17:46:36Z,Seems like this could be switched to unique_ptr.,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r115806758,115806758,src/stats/stats.h
ryanofsky,2017-05-10T17:51:19Z,Should replace with `for (unsigned int interval : precisionIntervals)`,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r115807922,115807922,src/stats/stats_mempool.cpp
ryanofsky,2017-05-10T17:52:48Z,Could simplify to `vSamplesPerPrecision.emplace_back()`,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r115808304,115808304,src/stats/stats_mempool.cpp
ryanofsky,2017-05-10T17:58:01Z,"I think you could drop the loop and just `return {std::begin(precisionIntervals), std::end(precisionIntervals)};`",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r115809727,115809727,src/stats/stats_mempool.cpp
ryanofsky,2017-05-10T18:06:34Z,Using uint16_t here probably doesn't save any space due to struct padding.,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r115811850,115811850,src/stats/stats_mempool.h
paveljanik,2017-05-12T14:18:55Z,Some C++11 magic needed here instead?,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r116241764,116241764,src/stats/rpc_stats.cpp
paveljanik,2017-05-12T14:19:21Z,supermicronit: space before 10MB,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r116241861,116241861,src/stats/stats.cpp
paveljanik,2017-05-12T14:20:32Z,statictics -> statistics,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r116242148,116242148,src/stats/stats.cpp
paveljanik,2017-05-12T14:21:51Z,`fallbackMaxSamplesPerPercision` -> `fallbackMaxSamplesPerPrecision`,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r116242430,116242430,src/stats/stats_mempool.cpp
jonasschnelli,2017-05-12T14:38:44Z,I think we better fix this together with all other `Register*RPCCommands` calls.,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r116246352,116246352,src/stats/rpc_stats.cpp
paveljanik,2017-05-12T14:39:23Z,"Wshadow emits:\n```\nstats/rpc_stats.cpp:78:42: warning: declaration shadows a variable in the global namespace [-Wshadow]\n```",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r116246501,116246501,src/stats/rpc_stats.cpp
jonasschnelli,2017-05-12T14:43:17Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r116247542,116247542,src/stats/rpc_stats.cpp
ryanofsky,2017-06-13T19:05:46Z,"In commit ""Add mempool statistics collector""\n\nIt seems like it would be more user friendly and extensible if this were an object instead of an array, so the elements could be named. It's a little awkard to have to remember that the first element in the array is time delta, second element is transaction count, etc.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121769118,121769118,src/stats/rpc_stats.cpp
ryanofsky,2017-06-13T19:16:11Z,"In commit ""Add mempool statistics collector""\n\nWould be good to move declaration closer to where this is being set (at least as close as possible).",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121771708,121771708,src/validation.cpp
ryanofsky,2017-06-13T19:17:20Z,"In commit ""Add mempool statistics collector""\n\nMost of the other settings seem to be in seconds instead of milliseconds. Seems like it would be good to switch this one to seconds for consistency, and to be able to get rid of the division by 1000 in CStatsMempool::addMempoolSamples.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121771983,121771983,src/stats/stats.cpp
ryanofsky,2017-06-13T19:27:17Z,"In commit ""Add mempool statistics collector""\n\nSeems like it would be more efficient to switch to a circular buffer, or use std::deque instead of deleting from the beginning of the vector.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121774280,121774280,src/stats/stats_mempool.cpp
ryanofsky,2017-06-13T19:35:50Z,"In commit ""Add mempool statistics collector""\n\nAll three of these vectors have the same length (number of precision levels). Seems like it would be cleaner to have one vector containing a struct with all the information that needs to be stored for a given precision level. It would also make the c++ data structure more consistent with the json data structure returned from rpc.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121776192,121776192,src/stats/stats_mempool.h
ryanofsky,2017-06-13T19:43:18Z,"In commit ""Add mempool statistics collector""\n\nI don't understand what this is doing. It seems unnecessary, and strange because it is comparing the counter against numbers of seconds without taking collectInterval into account. If you will keep this, I think it'd be good to add a comment with an example of interval and counter values that explains how this is supposed to work.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121777841,121777841,src/stats/stats_mempool.cpp
jonasschnelli,2017-06-13T20:32:53Z,I have added this to avoid an overflow of `intervalCounter`. I though resetting it when we exceeded the highest possible interval seems sane but I agree that a size_t overflow will very likely happens never... would you recommend to remove it?,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121788868,121788868,src/stats/stats_mempool.cpp
jonasschnelli,2017-06-13T20:34:26Z,That would be possible though I think that the current approach makes the core more readable.,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121789267,121789267,src/stats/stats_mempool.h
ryanofsky,2017-06-13T21:03:58Z,"> would you recommend to remove it?\n\nI'd say remove it unless there's a way to reset it that makes sense (I'm sure there is one but nothing immediately comes to mind).",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121796336,121796336,src/stats/stats_mempool.cpp
ryanofsky,2017-10-05T17:43:01Z,s/percision/precision,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143007675,143007675,test/functional/mempool_limit_stats.py
ryanofsky,2017-10-05T17:51:54Z,"Thread https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121769118\n\nAny thoughts on this? Named fields seems more natural than tuples in a JSON data structure.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143009973,143009973,src/stats/rpc_stats.cpp
ryanofsky,2017-10-05T17:57:29Z,"Thread https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121771983\n\nWould be nice to use either seconds or milliseconds internally in the stats classes instead of both.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143011338,143011338,src/stats/stats.cpp
ryanofsky,2017-10-05T17:58:54Z,"Thread https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121774280\n\nStill worth considering alternatives to erasing from the beginning of a vector, I think.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143011718,143011718,src/stats/stats_mempool.cpp
ryanofsky,2017-10-05T18:02:00Z,Maybe use unique_ptr,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143012502,143012502,src/stats/stats.cpp
ryanofsky,2017-10-05T18:14:10Z,Should be `* sizeof(precisionIntervals[0])`? And maybe multiplication should precede division for less rounding error.,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143015784,143015784,src/stats/stats_mempool.cpp
ryanofsky,2017-10-05T18:17:14Z,"Comment is wrong, and type should probably be int64_t, as returned by GetTime.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143016572,143016572,src/stats/stats_mempool.h
ryanofsky,2017-10-05T18:35:03Z,"Do you think having parallel lists is more readable in c++ and having one list is more readable in json? Also, why are the first two vectors labeled perPrecision, and the third one not? I guess I think something like the following would be less ambiguous and duplicative:\n\n```c++\nstruct PrecisionLevel {\n    std::vector<CStatsMempoolSample> samples;\n    size_t max_num_samples;\n    int64_",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143021497,143021497,src/stats/stats_mempool.h
ryanofsky,2017-10-05T18:44:43Z,Indent and extra braces don't seem to accomplishing anything here.,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143024116,143024116,src/stats/stats_mempool.cpp
ryanofsky,2017-10-05T18:45:35Z,Maybe acquire LOCK before GetTime for more accurate time.,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143024346,143024346,src/stats/stats_mempool.cpp
ryanofsky,2017-10-05T18:46:46Z,Should this acquire cs_mempool_stats before changing these values?,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143024664,143024664,src/stats/stats_mempool.cpp
ryanofsky,2017-10-05T18:54:20Z,"Thread https://github.com/bitcoin/bitcoin/pull/8501#discussion_r121777841\n\nShould follow up by removing this or adding comments suggested above.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143026617,143026617,src/stats/stats_mempool.cpp
ryanofsky,2017-10-05T18:58:40Z,"Should this be private since it is called by parameterInteraction?\n\nEither way, it seems like this needs a comment about when it is safe to be called. E.g. it seems like this will not always work properly if it is called after startCollecting because it won't schedule the callback. But maybe it will work to change the size if it was previously greater than 0?",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143027702,143027702,src/stats/stats.h
ryanofsky,2017-10-05T19:01:52Z,Why have this as a separate variable when it seems to just be true when maxStatsMemory != 0. Maybe eliminate this or else add comments documenting the intended interfaction between the two variables.,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143028548,143028548,src/stats/stats.h
ryanofsky,2017-10-05T19:02:58Z,"Nobody seems to be listening to this signal. Should add comment explaining who intended  listeners are, if keeping this.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143028818,143028818,src/stats/stats.h
ryanofsky,2017-10-05T19:11:22Z,"Should expand comment, unclear what it's referring to.",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r143030748,143030748,src/stats/rpc_stats.cpp
Sjors,2018-01-08T13:49:22Z,"Should there be an RPC method to turn stats collecting on? If not, maybe the `getmempoolstats` help message can inform the user to launch `bitcoind` with `-statsenable=1`?",https://github.com/bitcoin/bitcoin/pull/8501#discussion_r160147110,160147110,src/stats/stats.cpp
Sjors,2018-01-08T14:02:19Z,I tend to agree. I would also use the timestamp directly instead of an offset.,https://github.com/bitcoin/bitcoin/pull/8501#discussion_r160149905,160149905,src/stats/rpc_stats.cpp
