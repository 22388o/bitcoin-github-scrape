[
  {
    "sha": "e60e2cf5b50b15db30cb5d7fedda876c58bb4046",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjBlMmNmNWI1MGIxNWRiMzBjYjVkN2ZlZGRhODc2YzU4YmI0MDQ2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-10T16:44:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-11T09:29:51Z"
      },
      "message": "Use semaphores instead of condition variables",
      "tree": {
        "sha": "fc5c1e38b74f160ed025ba6d64cbc0e1832e0a7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc5c1e38b74f160ed025ba6d64cbc0e1832e0a7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e60e2cf5b50b15db30cb5d7fedda876c58bb4046",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60e2cf5b50b15db30cb5d7fedda876c58bb4046",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e60e2cf5b50b15db30cb5d7fedda876c58bb4046",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60e2cf5b50b15db30cb5d7fedda876c58bb4046/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "508471bbc0b43a8d5cabeae5c429f8416b9a1e99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/508471bbc0b43a8d5cabeae5c429f8416b9a1e99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/508471bbc0b43a8d5cabeae5c429f8416b9a1e99"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 91,
      "deletions": 47
    },
    "files": [
      {
        "sha": "67427a3e8ea859424c3c1803ad49b9fa9c35716c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 32,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e60e2cf5b50b15db30cb5d7fedda876c58bb4046/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e60e2cf5b50b15db30cb5d7fedda876c58bb4046/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e60e2cf5b50b15db30cb5d7fedda876c58bb4046",
        "patch": "@@ -35,7 +35,7 @@ void ThreadOpenAddedConnections2(void* parg);\n void ThreadMapPort2(void* parg);\n #endif\n void ThreadDNSAddressSeed2(void* parg);\n-bool OpenNetworkConnection(const CAddress& addrConnect, const char *strDest = NULL, bool fOneShot = false);\n+bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false);\n \n \n \n@@ -66,10 +66,7 @@ CCriticalSection cs_vOneShots;\n set<CNetAddr> setservAddNodeAddresses;\n CCriticalSection cs_setservAddNodeAddresses;\n \n-static CWaitableCriticalSection csOutbound;\n-static int nOutbound = 0;\n-static CConditionVariable condOutbound;\n-\n+static CSemaphore *semOutbound = NULL;\n \n void AddOneShot(string strDest)\n {\n@@ -463,10 +460,6 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest, int64 nTimeout)\n             LOCK(cs_vNodes);\n             vNodes.push_back(pnode);\n         }\n-        {\n-            WAITABLE_LOCK(csOutbound);\n-            nOutbound++;\n-        }\n \n         pnode->nTimeConnected = GetTime();\n         return pnode;\n@@ -612,14 +605,8 @@ void ThreadSocketHandler2(void* parg)\n                     // remove from vNodes\n                     vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n \n-                    if (!pnode->fInbound)\n-                        {\n-                            WAITABLE_LOCK(csOutbound);\n-                            nOutbound--;\n-\n-                            // Connection slot(s) were removed, notify connection creator(s)\n-                            NOTIFY(condOutbound);\n-                        }\n+                    // release outbound grant (if any)\n+                    pnode->grantOutbound.Release();\n \n                     // close socket and cleanup\n                     pnode->CloseSocketDisconnect();\n@@ -1295,8 +1282,11 @@ void static ProcessOneShot()\n         vOneShots.pop_front();\n     }\n     CAddress addr;\n-    if (!OpenNetworkConnection(addr, strDest.c_str(), true))\n-        AddOneShot(strDest);\n+    CSemaphoreGrant grant(*semOutbound, true);\n+    if (grant) {\n+        if (!OpenNetworkConnection(addr, &grant, strDest.c_str(), true))\n+            AddOneShot(strDest);\n+    }\n }\n \n void ThreadOpenConnections2(void* parg)\n@@ -1312,7 +1302,7 @@ void ThreadOpenConnections2(void* parg)\n             BOOST_FOREACH(string strAddr, mapMultiArgs[\"-connect\"])\n             {\n                 CAddress addr;\n-                OpenNetworkConnection(addr, strAddr.c_str());\n+                OpenNetworkConnection(addr, NULL, strAddr.c_str());\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n                     Sleep(500);\n@@ -1335,13 +1325,9 @@ void ThreadOpenConnections2(void* parg)\n         if (fShutdown)\n             return;\n \n-        // Limit outbound connections\n-        int nMaxOutbound = min(MAX_OUTBOUND_CONNECTIONS, (int)GetArg(\"-maxconnections\", 125));\n+\n         vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n-        {\n-            WAITABLE_LOCK(csOutbound);\n-            WAIT(condOutbound, fShutdown || nOutbound < nMaxOutbound);\n-        }\n+        CSemaphoreGrant grant(*semOutbound);\n         vnThreadsRunning[THREAD_OPENCONNECTIONS]++;\n         if (fShutdown)\n             return;\n@@ -1374,11 +1360,15 @@ void ThreadOpenConnections2(void* parg)\n \n         // Only connect to one address per a.b.?.? range.\n         // Do this here so we don't have to critsect vNodes inside mapAddresses critsect.\n+        int nOutbound = 0;\n         set<vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n+            BOOST_FOREACH(CNode* pnode, vNodes) {\n                 setConnected.insert(pnode->addr.GetGroup());\n+                if (!pnode->fInbound)\n+                    nOutbound++;\n+            }\n         }\n \n         int64 nANow = GetAdjustedTime();\n@@ -1408,7 +1398,7 @@ void ThreadOpenConnections2(void* parg)\n         }\n \n         if (addrConnect.IsValid())\n-            OpenNetworkConnection(addrConnect);\n+            OpenNetworkConnection(addrConnect, &grant);\n     }\n }\n \n@@ -1442,7 +1432,8 @@ void ThreadOpenAddedConnections2(void* parg)\n         while(!fShutdown) {\n             BOOST_FOREACH(string& strAddNode, mapMultiArgs[\"-addnode\"]) {\n                 CAddress addr;\n-                OpenNetworkConnection(addr, strAddNode.c_str());\n+                CSemaphoreGrant grant(*semOutbound);\n+                OpenNetworkConnection(addr, &grant, strAddNode.c_str());\n                 Sleep(500);\n             }\n             vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n@@ -1485,7 +1476,8 @@ void ThreadOpenAddedConnections2(void* parg)\n         }\n         BOOST_FOREACH(vector<CService>& vserv, vservConnectAddresses)\n         {\n-            OpenNetworkConnection(CAddress(*(vserv.begin())));\n+            CSemaphoreGrant grant(*semOutbound);\n+            OpenNetworkConnection(CAddress(*(vserv.begin())), &grant);\n             Sleep(500);\n             if (fShutdown)\n                 return;\n@@ -1500,7 +1492,8 @@ void ThreadOpenAddedConnections2(void* parg)\n     }\n }\n \n-bool OpenNetworkConnection(const CAddress& addrConnect, const char *strDest, bool fOneShot)\n+// if succesful, this moves the passed grant to the constructed node\n+bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOutbound, const char *strDest, bool fOneShot)\n {\n     //\n     // Initiate outbound network connection\n@@ -1522,6 +1515,8 @@ bool OpenNetworkConnection(const CAddress& addrConnect, const char *strDest, boo\n         return false;\n     if (!pnode)\n         return false;\n+    if (grantOutbound)\n+        grantOutbound->MoveTo(pnode->grantOutbound);\n     pnode->fNetworkNode = true;\n     if (fOneShot)\n         pnode->fOneShot = true;\n@@ -1770,6 +1765,12 @@ void StartNode(void* parg)\n #endif\n #endif\n \n+    if (semOutbound == NULL) {\n+        // initialize semaphore\n+        int nMaxOutbound = min(MAX_OUTBOUND_CONNECTIONS, (int)GetArg(\"-maxconnections\", 125));\n+        semOutbound = new CSemaphore(nMaxOutbound);\n+    }\n+\n     if (pnodeLocalHost == NULL)\n         pnodeLocalHost = new CNode(INVALID_SOCKET, CAddress(CService(\"127.0.0.1\", 0), nLocalServices));\n \n@@ -1823,7 +1824,8 @@ bool StopNode()\n     fShutdown = true;\n     nTransactionsUpdated++;\n     int64 nStart = GetTime();\n-    NOTIFY_ALL(condOutbound);\n+    for (int i=0; i<MAX_OUTBOUND_CONNECTIONS; i++)\n+         semOutbound->post();\n     do\n     {\n         int nThreadsRunning = 0;"
      },
      {
        "sha": "4e4ea31ead87c935367dd0a0b3a66fa40d1e8a6d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e60e2cf5b50b15db30cb5d7fedda876c58bb4046/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e60e2cf5b50b15db30cb5d7fedda876c58bb4046/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e60e2cf5b50b15db30cb5d7fedda876c58bb4046",
        "patch": "@@ -147,6 +147,7 @@ class CNode\n     bool fNetworkNode;\n     bool fSuccessfullyConnected;\n     bool fDisconnect;\n+    CSemaphoreGrant grantOutbound;\n protected:\n     int nRefCount;\n "
      },
      {
        "sha": "61ff55353995111f066b3935fa76a047659b2524",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 56,
        "deletions": 15,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e60e2cf5b50b15db30cb5d7fedda876c58bb4046/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e60e2cf5b50b15db30cb5d7fedda876c58bb4046/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=e60e2cf5b50b15db30cb5d7fedda876c58bb4046",
        "patch": "@@ -23,7 +23,7 @@ typedef int pid_t; /* define for windows compatiblity */\n #include <boost/filesystem/path.hpp>\n #include <boost/interprocess/sync/interprocess_recursive_mutex.hpp>\n #include <boost/interprocess/sync/scoped_lock.hpp>\n-#include <boost/interprocess/sync/interprocess_condition.hpp>\n+#include <boost/interprocess/sync/interprocess_semaphore.hpp>\n #include <boost/interprocess/sync/lock_options.hpp>\n #include <boost/date_time/gregorian/gregorian_types.hpp>\n #include <boost/date_time/posix_time/posix_time_types.hpp>\n@@ -275,24 +275,10 @@ class CMutexLock\n };\n \n typedef CMutexLock<CCriticalSection> CCriticalBlock;\n-typedef CMutexLock<CWaitableCriticalSection> CWaitableCriticalBlock;\n-typedef boost::interprocess::interprocess_condition CConditionVariable;\n-\n-/** Wait for a given condition inside a WAITABLE_CRITICAL_BLOCK */\n-#define WAIT(name,condition) \\\n-   do { while(!(condition)) { (name).wait(waitablecriticalblock.GetLock()); } } while(0)\n-\n-/** Notify waiting threads that a condition may hold now */\n-#define NOTIFY(name) \\\n-   do { (name).notify_one(); } while(0)\n-\n-#define NOTIFY_ALL(name) \\\n-   do { (name).notify_all(); } while(0)\n \n #define LOCK(cs) CCriticalBlock criticalblock(cs, #cs, __FILE__, __LINE__)\n #define LOCK2(cs1,cs2) CCriticalBlock criticalblock1(cs1, #cs1, __FILE__, __LINE__),criticalblock2(cs2, #cs2, __FILE__, __LINE__)\n #define TRY_LOCK(cs,name) CCriticalBlock name(cs, #cs, __FILE__, __LINE__, true)\n-#define WAITABLE_LOCK(cs) CWaitableCriticalBlock waitablecriticalblock(cs, #cs, __FILE__, __LINE__)\n \n #define ENTER_CRITICAL_SECTION(cs) \\\n     { \\\n@@ -306,6 +292,61 @@ typedef boost::interprocess::interprocess_condition CConditionVariable;\n         LeaveCritical(); \\\n     }\n \n+typedef boost::interprocess::interprocess_semaphore CSemaphore;\n+\n+/** RAII-style semaphore lock */\n+class CSemaphoreGrant\n+{\n+private:\n+    CSemaphore *sem;\n+    bool fHaveGrant;\n+\n+public:\n+    void Acquire() {\n+        if (fHaveGrant)\n+            return;\n+        sem->wait();\n+        fHaveGrant = true;\n+    }\n+\n+    void Release() {\n+        if (!fHaveGrant)\n+            return;\n+        sem->post();\n+        fHaveGrant = false;\n+    }\n+\n+    bool TryAcquire() {\n+        if (!fHaveGrant && sem->try_wait())\n+            fHaveGrant = true;\n+        return fHaveGrant;\n+    }\n+\n+    void MoveTo(CSemaphoreGrant &grant) {\n+        grant.Release();\n+        grant.sem = sem;\n+        grant.fHaveGrant = fHaveGrant;\n+        sem = NULL;\n+        fHaveGrant = false;\n+    }\n+\n+    CSemaphoreGrant() : sem(NULL), fHaveGrant(false) {}\n+\n+    CSemaphoreGrant(CSemaphore &sema, bool fTry = false) : sem(&sema), fHaveGrant(false) {\n+        if (fTry)\n+            TryAcquire();\n+        else\n+            Acquire();\n+    }\n+\n+    ~CSemaphoreGrant() {\n+        Release();\n+    }\n+\n+    operator bool() {\n+        return fHaveGrant;\n+    }\n+};\n \n inline std::string i64tostr(int64 n)\n {"
      }
    ]
  },
  {
    "sha": "8fe5615047a8eb70483b2512f2f85fcd5bedc570",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmU1NjE1MDQ3YThlYjcwNDgzYjI1MTJmMmY4NWZjZDViZWRjNTcw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-10T18:45:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-11T09:29:51Z"
      },
      "message": "Use polling instead of boost's broken semaphore on OSX",
      "tree": {
        "sha": "0abe7fa2d41bf8fb38a3d92c141b46b58f8ac0ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0abe7fa2d41bf8fb38a3d92c141b46b58f8ac0ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fe5615047a8eb70483b2512f2f85fcd5bedc570",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fe5615047a8eb70483b2512f2f85fcd5bedc570",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fe5615047a8eb70483b2512f2f85fcd5bedc570",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fe5615047a8eb70483b2512f2f85fcd5bedc570/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e60e2cf5b50b15db30cb5d7fedda876c58bb4046",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60e2cf5b50b15db30cb5d7fedda876c58bb4046",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e60e2cf5b50b15db30cb5d7fedda876c58bb4046"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 40,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f25a030f1914bb96b65960bf8c0724e0704663ee",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe5615047a8eb70483b2512f2f85fcd5bedc570/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe5615047a8eb70483b2512f2f85fcd5bedc570/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=8fe5615047a8eb70483b2512f2f85fcd5bedc570",
        "patch": "@@ -292,7 +292,47 @@ typedef CMutexLock<CCriticalSection> CCriticalBlock;\n         LeaveCritical(); \\\n     }\n \n+#ifdef MAC_OSX\n+// boost::interprocess::interprocess_semaphore seems to spinlock on OSX; prefer polling instead\n+class CSemaphore\n+{\n+private:\n+    CCriticalSection cs;\n+    int val;\n+\n+public:\n+    CSemaphore(int init) : val(init) {}\n+\n+    void wait() {\n+        do {\n+            {\n+                LOCK(cs);\n+                if (val>0) {\n+                    val--;\n+                    return;\n+                }\n+            }\n+            Sleep(100);\n+        } while(1);\n+    }\n+\n+    bool try_wait() {\n+        LOCK(cs);\n+        if (val>0) {\n+            val--;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    void post() {\n+        LOCK(cs);\n+        val++;\n+    }\n+};\n+#else\n typedef boost::interprocess::interprocess_semaphore CSemaphore;\n+#endif\n \n /** RAII-style semaphore lock */\n class CSemaphoreGrant"
      }
    ]
  }
]