[
  {
    "sha": "fa301fec966b77c54d02ac54ae7d726629adbfd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTMwMWZlYzk2NmI3N2M1NGQwMmFjNTRhZTdkNzI2NjI5YWRiZmQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-25T17:00:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-28T15:53:00Z"
      },
      "message": "test: Fix wallet_bumpfee intermittent error",
      "tree": {
        "sha": "85da17f31524256b323dd2e3014d3a0bdbdbf26d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85da17f31524256b323dd2e3014d3a0bdbdbf26d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa301fec966b77c54d02ac54ae7d726629adbfd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjHIgwApIOgzOywWe56Ixlr6V5uXXLze1RyNmkw+j1sSYhEsqMI+jjMFzhj9zmc\nqOjiDSCJ8rvAAHbJfoPDG/Jux+FLtsdpnlhPIwBvB6WB8IzUUx31vfDngy2ob4vi\n1IbJ9E0nW7LGMVsR6+bWWtrG2cQAUxSQRlRdZCE7lEIOkEuf7U3XCJbNYEsPnPYT\nO8ryAyCKP7lpsQAlaAUmXdbFGJ7M+MfE0myF04bpMQdinCV/03CPBfRa3t7Txc/y\nlaBLdG/+NG8Hi47Q9ltQ/MACLP5xuyzRXNQpJOtn3jalF7i1EMAbIiXjjgfK2r+A\npEYjlgOBvUiWuIoVBqTetMh7MgKn1iil4iVxSG1ytWr6e8axY85w2nG5506kMhJj\nrVPxEmAllsDCiDW83hHp26S05LyMH/9YjUR4KZQkBsFI4szP6XRbtNBgeKGhhGKe\noJ0Z2tBQUp93nWhDF3xFZOvWuEtqxXFhwoiz9P2kdw18O7JppBe/khs1H2FSrP/K\nnArtl7qm\n=TQEN\n-----END PGP SIGNATURE-----",
        "payload": "tree 85da17f31524256b323dd2e3014d3a0bdbdbf26d\nparent 3e7c118d6555c740601597522246e9c6781a2348\nauthor MarcoFalke <falke.marco@gmail.com> 1587834028 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1588089180 -0400\n\ntest: Fix wallet_bumpfee intermittent error\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa301fec966b77c54d02ac54ae7d726629adbfd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa301fec966b77c54d02ac54ae7d726629adbfd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa301fec966b77c54d02ac54ae7d726629adbfd5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e7c118d6555c740601597522246e9c6781a2348",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e7c118d6555c740601597522246e9c6781a2348",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e7c118d6555c740601597522246e9c6781a2348"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 14,
      "deletions": 10
    },
    "files": [
      {
        "sha": "9ba23db42d0c8c5fbc7b1a7fca73d76388380926",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa301fec966b77c54d02ac54ae7d726629adbfd5/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa301fec966b77c54d02ac54ae7d726629adbfd5/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fa301fec966b77c54d02ac54ae7d726629adbfd5",
        "patch": "@@ -23,7 +23,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     hex_str_to_bytes,\n )\n \n@@ -37,6 +36,7 @@\n HIGH         = 0.00500000\n TOO_HIGH     = 1.00000000\n \n+\n class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n@@ -55,9 +55,6 @@ def run_test(self):\n         self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n-        connect_nodes(self.nodes[0], 1)\n-        self.sync_all()\n-\n         peer_node, rbf_node = self.nodes\n         rbf_node_address = rbf_node.getnewaddress()\n \n@@ -94,7 +91,6 @@ def run_test(self):\n         # These tests wipe out a number of utxos that are expected in other tests\n         test_small_output_with_feerate_succeeds(self, rbf_node, dest_address)\n         test_no_more_inputs_fails(self, rbf_node, dest_address)\n-        self.log.info(\"Success\")\n \n \n def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n@@ -124,6 +120,7 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     assert_equal(oldwtx[\"replaced_by_txid\"], bumped_tx[\"txid\"])\n     assert_equal(bumpedwtx[\"replaces_txid\"], rbfid)\n \n+\n def test_feerate_args(self, rbf_node, peer_node, dest_address):\n     self.log.info('Test fee_rate args')\n     rbfid = spend_one_input(rbf_node, dest_address)\n@@ -137,7 +134,7 @@ def test_feerate_args(self, rbf_node, peer_node, dest_address):\n     # Bumping to just above minrelay should fail to increase total fee enough, at least\n     assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n \n-    assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\":-1})\n+    assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\": -1})\n \n     assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n \n@@ -209,6 +206,7 @@ def test_bumpfee_with_descendant_fails(self, rbf_node, rbf_node_address, dest_ad\n     rbf_node.sendrawtransaction(tx[\"hex\"])\n     assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n+\n def test_small_output_with_feerate_succeeds(self, rbf_node, dest_address):\n     self.log.info('Testing small output with feerate bump succeeds')\n \n@@ -249,6 +247,7 @@ def test_small_output_with_feerate_succeeds(self, rbf_node, dest_address):\n     rbf_node.generatetoaddress(1, rbf_node.getnewaddress())\n     assert_equal(rbf_node.gettransaction(rbfid)[\"confirmations\"], 1)\n \n+\n def test_dust_to_fee(self, rbf_node, dest_address):\n     self.log.info('Test that bumped output that is dust is dropped to fee')\n     rbfid = spend_one_input(rbf_node, dest_address)\n@@ -305,6 +304,7 @@ def test_maxtxfee_fails(self, rbf_node, dest_address):\n     self.restart_node(1, self.extra_args[1])\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n+\n def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n     self.log.info('Test that PSBT is returned for bumpfee in watchonly wallets')\n     priv_rec_desc = \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0/*)#rweraev0\"\n@@ -339,12 +339,11 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n     result = watcher.importmulti([{\n         \"desc\": pub_rec_desc,\n         \"timestamp\": 0,\n-        \"range\": [0,10],\n+        \"range\": [0, 10],\n         \"internal\": False,\n         \"keypool\": True,\n         \"watchonly\": True\n-    },\n-    {\n+    }, {\n         \"desc\": pub_change_desc,\n         \"timestamp\": 0,\n         \"range\": [0, 10],\n@@ -361,7 +360,7 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n     self.sync_all()\n \n     # Create single-input PSBT for transaction to be bumped\n-    psbt = watcher.walletcreatefundedpsbt([], {dest_address:0.0005}, 0, {\"feeRate\": 0.00001}, True)['psbt']\n+    psbt = watcher.walletcreatefundedpsbt([], {dest_address: 0.0005}, 0, {\"feeRate\": 0.00001}, True)['psbt']\n     psbt_signed = signer.walletprocesspsbt(psbt=psbt, sign=True, sighashtype=\"ALL\", bip32derivs=True)\n     psbt_final = watcher.finalizepsbt(psbt_signed[\"psbt\"])\n     original_txid = watcher.sendrawtransaction(psbt_final[\"hex\"])\n@@ -387,6 +386,7 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n     rbf_node.unloadwallet(\"watcher\")\n     rbf_node.unloadwallet(\"signer\")\n \n+\n def test_rebumping(self, rbf_node, dest_address):\n     self.log.info('Test that re-bumping the original tx fails, but bumping successor works')\n     rbfid = spend_one_input(rbf_node, dest_address)\n@@ -461,6 +461,7 @@ def test_locked_wallet_fails(self, rbf_node, dest_address):\n                             rbf_node.bumpfee, rbfid)\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n+\n def test_change_script_match(self, rbf_node, dest_address):\n     self.log.info('Test that the same change addresses is used for the replacement transaction when possible')\n \n@@ -480,6 +481,7 @@ def get_change_address(tx):\n     bumped_rate_tx = rbf_node.bumpfee(bumped_total_tx[\"txid\"])\n     assert_equal(change_addresses, get_change_address(bumped_rate_tx['txid']))\n \n+\n def spend_one_input(node, dest_address, change_size=Decimal(\"0.00049000\")):\n     tx_input = dict(\n         sequence=BIP125_SEQUENCE_NUMBER, **next(u for u in node.listunspent() if u[\"amount\"] == Decimal(\"0.00100000\")))\n@@ -491,6 +493,7 @@ def spend_one_input(node, dest_address, change_size=Decimal(\"0.00049000\")):\n     txid = node.sendrawtransaction(signedtx[\"hex\"])\n     return txid\n \n+\n def submit_block_with_tx(node, tx):\n     ctx = CTransaction()\n     ctx.deserialize(io.BytesIO(hex_str_to_bytes(tx)))\n@@ -507,6 +510,7 @@ def submit_block_with_tx(node, tx):\n     node.submitblock(block.serialize().hex())\n     return block\n \n+\n def test_no_more_inputs_fails(self, rbf_node, dest_address):\n     self.log.info('Test that bumpfee fails when there are no available confirmed outputs')\n     # feerate rbf requires confirmed outputs when change output doesn't exist or is insufficient"
      }
    ]
  }
]